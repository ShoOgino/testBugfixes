{"path":"solr/core/src/java/org/apache/solr/update/UpdateLog#applyBufferedUpdates().mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#applyBufferedUpdates().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the Future to wait on, or null if no replay was needed */\n  public Future<RecoveryInfo> applyBufferedUpdates() {\n    // recovery trips this assert under some race - even when\n    // it checks the state first\n    // assert state == State.BUFFERING;\n\n    // block all updates to eliminate race conditions\n    // reading state and acting on it in the update processor\n    versionInfo.blockUpdates();\n    try {\n      cancelApplyBufferUpdate = false;\n      if (state != State.BUFFERING) return null;\n\n      // handle case when no log was even created because no updates\n      // were received.\n      if (tlog == null) {\n        state = State.ACTIVE;\n        return null;\n      }\n      tlog.incref();\n      state = State.APPLYING_BUFFERED;\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n\n    if (recoveryExecutor.isShutdown()) {\n      tlog.decref();\n      throw new RuntimeException(\"executor is not running...\");\n    }\n    ExecutorCompletionService<RecoveryInfo> cs = new ExecutorCompletionService<RecoveryInfo>(recoveryExecutor);\n    LogReplayer replayer = new LogReplayer(tlog, true);\n    return cs.submit(replayer, recoveryInfo);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#applyBufferedUpdates().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the Future to wait on, or null if no replay was needed */\n  public Future<RecoveryInfo> applyBufferedUpdates() {\n    // recovery trips this assert under some race - even when\n    // it checks the state first\n    // assert state == State.BUFFERING;\n\n    // block all updates to eliminate race conditions\n    // reading state and acting on it in the update processor\n    versionInfo.blockUpdates();\n    try {\n      cancelApplyBufferUpdate = false;\n      if (state != State.BUFFERING) return null;\n\n      // handle case when no log was even created because no updates\n      // were received.\n      if (tlog == null) {\n        state = State.ACTIVE;\n        return null;\n      }\n      tlog.incref();\n      state = State.APPLYING_BUFFERED;\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n\n    if (recoveryExecutor.isShutdown()) {\n      tlog.decref();\n      throw new RuntimeException(\"executor is not running...\");\n    }\n    ExecutorCompletionService<RecoveryInfo> cs = new ExecutorCompletionService<RecoveryInfo>(recoveryExecutor);\n    LogReplayer replayer = new LogReplayer(tlog, true);\n    return cs.submit(replayer, recoveryInfo);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#applyBufferedUpdates().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the Future to wait on, or null if no replay was needed */\n  public Future<RecoveryInfo> applyBufferedUpdates() {\n    // recovery trips this assert under some race - even when\n    // it checks the state first\n    // assert state == State.BUFFERING;\n\n    // block all updates to eliminate race conditions\n    // reading state and acting on it in the update processor\n    versionInfo.blockUpdates();\n    try {\n      cancelApplyBufferUpdate = false;\n      if (state != State.BUFFERING) return null;\n\n      // handle case when no log was even created because no updates\n      // were received.\n      if (tlog == null) {\n        state = State.ACTIVE;\n        return null;\n      }\n      tlog.incref();\n      state = State.APPLYING_BUFFERED;\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n\n    if (recoveryExecutor.isShutdown()) {\n      tlog.decref();\n      throw new RuntimeException(\"executor is not running...\");\n    }\n    ExecutorCompletionService<RecoveryInfo> cs = new ExecutorCompletionService<RecoveryInfo>(recoveryExecutor);\n    LogReplayer replayer = new LogReplayer(tlog, true);\n    return cs.submit(replayer, recoveryInfo);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a9e81d464930e5664da049442e2630d4b9b00d5","date":1330726364,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#applyBufferedUpdates().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#applyBufferedUpdates().mjava","sourceNew":"  /** Returns the Future to wait on, or null if no replay was needed */\n  public Future<RecoveryInfo> applyBufferedUpdates() {\n    // recovery trips this assert under some race - even when\n    // it checks the state first\n    // assert state == State.BUFFERING;\n\n    // block all updates to eliminate race conditions\n    // reading state and acting on it in the update processor\n    versionInfo.blockUpdates();\n    try {\n      cancelApplyBufferUpdate = false;\n      if (state != State.BUFFERING) return null;\n\n      // handle case when no log was even created because no updates\n      // were received.\n      if (tlog == null) {\n        state = State.ACTIVE;\n        return null;\n      }\n      tlog.incref();\n      state = State.APPLYING_BUFFERED;\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n\n    if (recoveryExecutor.isShutdown()) {\n      tlog.decref();\n      throw new RuntimeException(\"executor is not running...\");\n    }\n    ExecutorCompletionService<RecoveryInfo> cs = new ExecutorCompletionService<RecoveryInfo>(recoveryExecutor);\n    LogReplayer replayer = new LogReplayer(Arrays.asList(new TransactionLog[]{tlog}), true);\n    return cs.submit(replayer, recoveryInfo);\n  }\n\n","sourceOld":"  /** Returns the Future to wait on, or null if no replay was needed */\n  public Future<RecoveryInfo> applyBufferedUpdates() {\n    // recovery trips this assert under some race - even when\n    // it checks the state first\n    // assert state == State.BUFFERING;\n\n    // block all updates to eliminate race conditions\n    // reading state and acting on it in the update processor\n    versionInfo.blockUpdates();\n    try {\n      cancelApplyBufferUpdate = false;\n      if (state != State.BUFFERING) return null;\n\n      // handle case when no log was even created because no updates\n      // were received.\n      if (tlog == null) {\n        state = State.ACTIVE;\n        return null;\n      }\n      tlog.incref();\n      state = State.APPLYING_BUFFERED;\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n\n    if (recoveryExecutor.isShutdown()) {\n      tlog.decref();\n      throw new RuntimeException(\"executor is not running...\");\n    }\n    ExecutorCompletionService<RecoveryInfo> cs = new ExecutorCompletionService<RecoveryInfo>(recoveryExecutor);\n    LogReplayer replayer = new LogReplayer(tlog, true);\n    return cs.submit(replayer, recoveryInfo);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#applyBufferedUpdates().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#applyBufferedUpdates().mjava","sourceNew":"  /** Returns the Future to wait on, or null if no replay was needed */\n  public Future<RecoveryInfo> applyBufferedUpdates() {\n    // recovery trips this assert under some race - even when\n    // it checks the state first\n    // assert state == State.BUFFERING;\n\n    // block all updates to eliminate race conditions\n    // reading state and acting on it in the update processor\n    versionInfo.blockUpdates();\n    try {\n      cancelApplyBufferUpdate = false;\n      if (state != State.BUFFERING) return null;\n\n      // handle case when no log was even created because no updates\n      // were received.\n      if (tlog == null) {\n        state = State.ACTIVE;\n        return null;\n      }\n      tlog.incref();\n      state = State.APPLYING_BUFFERED;\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n\n    if (recoveryExecutor.isShutdown()) {\n      tlog.decref();\n      throw new RuntimeException(\"executor is not running...\");\n    }\n    ExecutorCompletionService<RecoveryInfo> cs = new ExecutorCompletionService<RecoveryInfo>(recoveryExecutor);\n    LogReplayer replayer = new LogReplayer(Arrays.asList(new TransactionLog[]{tlog}), true);\n    return cs.submit(replayer, recoveryInfo);\n  }\n\n","sourceOld":"  /** Returns the Future to wait on, or null if no replay was needed */\n  public Future<RecoveryInfo> applyBufferedUpdates() {\n    // recovery trips this assert under some race - even when\n    // it checks the state first\n    // assert state == State.BUFFERING;\n\n    // block all updates to eliminate race conditions\n    // reading state and acting on it in the update processor\n    versionInfo.blockUpdates();\n    try {\n      cancelApplyBufferUpdate = false;\n      if (state != State.BUFFERING) return null;\n\n      // handle case when no log was even created because no updates\n      // were received.\n      if (tlog == null) {\n        state = State.ACTIVE;\n        return null;\n      }\n      tlog.incref();\n      state = State.APPLYING_BUFFERED;\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n\n    if (recoveryExecutor.isShutdown()) {\n      tlog.decref();\n      throw new RuntimeException(\"executor is not running...\");\n    }\n    ExecutorCompletionService<RecoveryInfo> cs = new ExecutorCompletionService<RecoveryInfo>(recoveryExecutor);\n    LogReplayer replayer = new LogReplayer(tlog, true);\n    return cs.submit(replayer, recoveryInfo);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e99829242bceda4cf974ec0eb5d82d713615b3da","date":1337646971,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#applyBufferedUpdates().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#applyBufferedUpdates().mjava","sourceNew":"  /** Returns the Future to wait on, or null if no replay was needed */\n  public Future<RecoveryInfo> applyBufferedUpdates() {\n    // recovery trips this assert under some race - even when\n    // it checks the state first\n    // assert state == State.BUFFERING;\n\n    // block all updates to eliminate race conditions\n    // reading state and acting on it in the update processor\n    versionInfo.blockUpdates();\n    try {\n      cancelApplyBufferUpdate = false;\n      if (state != State.BUFFERING) return null;\n\n      // handle case when no log was even created because no updates\n      // were received.\n      if (tlog == null) {\n        state = State.ACTIVE;\n        return null;\n      }\n      tlog.incref();\n      state = State.APPLYING_BUFFERED;\n      operationFlags &= ~FLAG_GAP;\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n\n    if (recoveryExecutor.isShutdown()) {\n      tlog.decref();\n      throw new RuntimeException(\"executor is not running...\");\n    }\n    ExecutorCompletionService<RecoveryInfo> cs = new ExecutorCompletionService<RecoveryInfo>(recoveryExecutor);\n    LogReplayer replayer = new LogReplayer(Arrays.asList(new TransactionLog[]{tlog}), true);\n    return cs.submit(replayer, recoveryInfo);\n  }\n\n","sourceOld":"  /** Returns the Future to wait on, or null if no replay was needed */\n  public Future<RecoveryInfo> applyBufferedUpdates() {\n    // recovery trips this assert under some race - even when\n    // it checks the state first\n    // assert state == State.BUFFERING;\n\n    // block all updates to eliminate race conditions\n    // reading state and acting on it in the update processor\n    versionInfo.blockUpdates();\n    try {\n      cancelApplyBufferUpdate = false;\n      if (state != State.BUFFERING) return null;\n\n      // handle case when no log was even created because no updates\n      // were received.\n      if (tlog == null) {\n        state = State.ACTIVE;\n        return null;\n      }\n      tlog.incref();\n      state = State.APPLYING_BUFFERED;\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n\n    if (recoveryExecutor.isShutdown()) {\n      tlog.decref();\n      throw new RuntimeException(\"executor is not running...\");\n    }\n    ExecutorCompletionService<RecoveryInfo> cs = new ExecutorCompletionService<RecoveryInfo>(recoveryExecutor);\n    LogReplayer replayer = new LogReplayer(Arrays.asList(new TransactionLog[]{tlog}), true);\n    return cs.submit(replayer, recoveryInfo);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3599646b4d4c346cf74d334813488b8b337b5bf5","date":1337790261,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#applyBufferedUpdates().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#applyBufferedUpdates().mjava","sourceNew":"  /** Returns the Future to wait on, or null if no replay was needed */\n  public Future<RecoveryInfo> applyBufferedUpdates() {\n    // recovery trips this assert under some race - even when\n    // it checks the state first\n    // assert state == State.BUFFERING;\n\n    // block all updates to eliminate race conditions\n    // reading state and acting on it in the update processor\n    versionInfo.blockUpdates();\n    try {\n      cancelApplyBufferUpdate = false;\n      if (state != State.BUFFERING) return null;\n\n      // handle case when no log was even created because no updates\n      // were received.\n      if (tlog == null) {\n        state = State.ACTIVE;\n        return null;\n      }\n      tlog.incref();\n      state = State.APPLYING_BUFFERED;\n      operationFlags &= ~FLAG_GAP;\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n\n    if (recoveryExecutor.isShutdown()) {\n      tlog.decref();\n      throw new RuntimeException(\"executor is not running...\");\n    }\n    ExecutorCompletionService<RecoveryInfo> cs = new ExecutorCompletionService<RecoveryInfo>(recoveryExecutor);\n    LogReplayer replayer = new LogReplayer(Arrays.asList(new TransactionLog[]{tlog}), true);\n    return cs.submit(replayer, recoveryInfo);\n  }\n\n","sourceOld":"  /** Returns the Future to wait on, or null if no replay was needed */\n  public Future<RecoveryInfo> applyBufferedUpdates() {\n    // recovery trips this assert under some race - even when\n    // it checks the state first\n    // assert state == State.BUFFERING;\n\n    // block all updates to eliminate race conditions\n    // reading state and acting on it in the update processor\n    versionInfo.blockUpdates();\n    try {\n      cancelApplyBufferUpdate = false;\n      if (state != State.BUFFERING) return null;\n\n      // handle case when no log was even created because no updates\n      // were received.\n      if (tlog == null) {\n        state = State.ACTIVE;\n        return null;\n      }\n      tlog.incref();\n      state = State.APPLYING_BUFFERED;\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n\n    if (recoveryExecutor.isShutdown()) {\n      tlog.decref();\n      throw new RuntimeException(\"executor is not running...\");\n    }\n    ExecutorCompletionService<RecoveryInfo> cs = new ExecutorCompletionService<RecoveryInfo>(recoveryExecutor);\n    LogReplayer replayer = new LogReplayer(Arrays.asList(new TransactionLog[]{tlog}), true);\n    return cs.submit(replayer, recoveryInfo);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"49109a3cf63b2c0c1d9f3d12712821ea0f147883","date":1344351619,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#applyBufferedUpdates().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#applyBufferedUpdates().mjava","sourceNew":"  /** Returns the Future to wait on, or null if no replay was needed */\n  public Future<RecoveryInfo> applyBufferedUpdates() {\n    // recovery trips this assert under some race - even when\n    // it checks the state first\n    // assert state == State.BUFFERING;\n\n    // block all updates to eliminate race conditions\n    // reading state and acting on it in the update processor\n    versionInfo.blockUpdates();\n    try {\n      cancelApplyBufferUpdate = false;\n      if (state != State.BUFFERING) return null;\n      operationFlags &= ~FLAG_GAP;\n\n      // handle case when no log was even created because no updates\n      // were received.\n      if (tlog == null) {\n        state = State.ACTIVE;\n        return null;\n      }\n      tlog.incref();\n      state = State.APPLYING_BUFFERED;\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n\n    if (recoveryExecutor.isShutdown()) {\n      tlog.decref();\n      throw new RuntimeException(\"executor is not running...\");\n    }\n    ExecutorCompletionService<RecoveryInfo> cs = new ExecutorCompletionService<RecoveryInfo>(recoveryExecutor);\n    LogReplayer replayer = new LogReplayer(Arrays.asList(new TransactionLog[]{tlog}), true);\n    return cs.submit(replayer, recoveryInfo);\n  }\n\n","sourceOld":"  /** Returns the Future to wait on, or null if no replay was needed */\n  public Future<RecoveryInfo> applyBufferedUpdates() {\n    // recovery trips this assert under some race - even when\n    // it checks the state first\n    // assert state == State.BUFFERING;\n\n    // block all updates to eliminate race conditions\n    // reading state and acting on it in the update processor\n    versionInfo.blockUpdates();\n    try {\n      cancelApplyBufferUpdate = false;\n      if (state != State.BUFFERING) return null;\n\n      // handle case when no log was even created because no updates\n      // were received.\n      if (tlog == null) {\n        state = State.ACTIVE;\n        return null;\n      }\n      tlog.incref();\n      state = State.APPLYING_BUFFERED;\n      operationFlags &= ~FLAG_GAP;\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n\n    if (recoveryExecutor.isShutdown()) {\n      tlog.decref();\n      throw new RuntimeException(\"executor is not running...\");\n    }\n    ExecutorCompletionService<RecoveryInfo> cs = new ExecutorCompletionService<RecoveryInfo>(recoveryExecutor);\n    LogReplayer replayer = new LogReplayer(Arrays.asList(new TransactionLog[]{tlog}), true);\n    return cs.submit(replayer, recoveryInfo);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#applyBufferedUpdates().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#applyBufferedUpdates().mjava","sourceNew":"  /** Returns the Future to wait on, or null if no replay was needed */\n  public Future<RecoveryInfo> applyBufferedUpdates() {\n    // recovery trips this assert under some race - even when\n    // it checks the state first\n    // assert state == State.BUFFERING;\n\n    // block all updates to eliminate race conditions\n    // reading state and acting on it in the update processor\n    versionInfo.blockUpdates();\n    try {\n      cancelApplyBufferUpdate = false;\n      if (state != State.BUFFERING) return null;\n      operationFlags &= ~FLAG_GAP;\n\n      // handle case when no log was even created because no updates\n      // were received.\n      if (tlog == null) {\n        state = State.ACTIVE;\n        return null;\n      }\n      tlog.incref();\n      state = State.APPLYING_BUFFERED;\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n\n    if (recoveryExecutor.isShutdown()) {\n      tlog.decref();\n      throw new RuntimeException(\"executor is not running...\");\n    }\n    ExecutorCompletionService<RecoveryInfo> cs = new ExecutorCompletionService<RecoveryInfo>(recoveryExecutor);\n    LogReplayer replayer = new LogReplayer(Arrays.asList(new TransactionLog[]{tlog}), true);\n    return cs.submit(replayer, recoveryInfo);\n  }\n\n","sourceOld":"  /** Returns the Future to wait on, or null if no replay was needed */\n  public Future<RecoveryInfo> applyBufferedUpdates() {\n    // recovery trips this assert under some race - even when\n    // it checks the state first\n    // assert state == State.BUFFERING;\n\n    // block all updates to eliminate race conditions\n    // reading state and acting on it in the update processor\n    versionInfo.blockUpdates();\n    try {\n      cancelApplyBufferUpdate = false;\n      if (state != State.BUFFERING) return null;\n\n      // handle case when no log was even created because no updates\n      // were received.\n      if (tlog == null) {\n        state = State.ACTIVE;\n        return null;\n      }\n      tlog.incref();\n      state = State.APPLYING_BUFFERED;\n      operationFlags &= ~FLAG_GAP;\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n\n    if (recoveryExecutor.isShutdown()) {\n      tlog.decref();\n      throw new RuntimeException(\"executor is not running...\");\n    }\n    ExecutorCompletionService<RecoveryInfo> cs = new ExecutorCompletionService<RecoveryInfo>(recoveryExecutor);\n    LogReplayer replayer = new LogReplayer(Arrays.asList(new TransactionLog[]{tlog}), true);\n    return cs.submit(replayer, recoveryInfo);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#applyBufferedUpdates().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#applyBufferedUpdates().mjava","sourceNew":"  /** Returns the Future to wait on, or null if no replay was needed */\n  public Future<RecoveryInfo> applyBufferedUpdates() {\n    // recovery trips this assert under some race - even when\n    // it checks the state first\n    // assert state == State.BUFFERING;\n\n    // block all updates to eliminate race conditions\n    // reading state and acting on it in the update processor\n    versionInfo.blockUpdates();\n    try {\n      cancelApplyBufferUpdate = false;\n      if (state != State.BUFFERING) return null;\n      operationFlags &= ~FLAG_GAP;\n\n      // handle case when no log was even created because no updates\n      // were received.\n      if (tlog == null) {\n        state = State.ACTIVE;\n        return null;\n      }\n      tlog.incref();\n      state = State.APPLYING_BUFFERED;\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n\n    if (recoveryExecutor.isShutdown()) {\n      tlog.decref();\n      throw new RuntimeException(\"executor is not running...\");\n    }\n    ExecutorCompletionService<RecoveryInfo> cs = new ExecutorCompletionService<RecoveryInfo>(recoveryExecutor);\n    LogReplayer replayer = new LogReplayer(Arrays.asList(new TransactionLog[]{tlog}), true);\n    return cs.submit(replayer, recoveryInfo);\n  }\n\n","sourceOld":"  /** Returns the Future to wait on, or null if no replay was needed */\n  public Future<RecoveryInfo> applyBufferedUpdates() {\n    // recovery trips this assert under some race - even when\n    // it checks the state first\n    // assert state == State.BUFFERING;\n\n    // block all updates to eliminate race conditions\n    // reading state and acting on it in the update processor\n    versionInfo.blockUpdates();\n    try {\n      cancelApplyBufferUpdate = false;\n      if (state != State.BUFFERING) return null;\n\n      // handle case when no log was even created because no updates\n      // were received.\n      if (tlog == null) {\n        state = State.ACTIVE;\n        return null;\n      }\n      tlog.incref();\n      state = State.APPLYING_BUFFERED;\n      operationFlags &= ~FLAG_GAP;\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n\n    if (recoveryExecutor.isShutdown()) {\n      tlog.decref();\n      throw new RuntimeException(\"executor is not running...\");\n    }\n    ExecutorCompletionService<RecoveryInfo> cs = new ExecutorCompletionService<RecoveryInfo>(recoveryExecutor);\n    LogReplayer replayer = new LogReplayer(Arrays.asList(new TransactionLog[]{tlog}), true);\n    return cs.submit(replayer, recoveryInfo);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#applyBufferedUpdates().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#applyBufferedUpdates().mjava","sourceNew":"  /** Returns the Future to wait on, or null if no replay was needed */\n  public Future<RecoveryInfo> applyBufferedUpdates() {\n    // recovery trips this assert under some race - even when\n    // it checks the state first\n    // assert state == State.BUFFERING;\n\n    // block all updates to eliminate race conditions\n    // reading state and acting on it in the update processor\n    versionInfo.blockUpdates();\n    try {\n      cancelApplyBufferUpdate = false;\n      if (state != State.BUFFERING) return null;\n      operationFlags &= ~FLAG_GAP;\n\n      // handle case when no log was even created because no updates\n      // were received.\n      if (tlog == null) {\n        state = State.ACTIVE;\n        return null;\n      }\n      tlog.incref();\n      state = State.APPLYING_BUFFERED;\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n\n    if (recoveryExecutor.isShutdown()) {\n      tlog.decref();\n      throw new RuntimeException(\"executor is not running...\");\n    }\n    ExecutorCompletionService<RecoveryInfo> cs = new ExecutorCompletionService<>(recoveryExecutor);\n    LogReplayer replayer = new LogReplayer(Arrays.asList(new TransactionLog[]{tlog}), true);\n    return cs.submit(replayer, recoveryInfo);\n  }\n\n","sourceOld":"  /** Returns the Future to wait on, or null if no replay was needed */\n  public Future<RecoveryInfo> applyBufferedUpdates() {\n    // recovery trips this assert under some race - even when\n    // it checks the state first\n    // assert state == State.BUFFERING;\n\n    // block all updates to eliminate race conditions\n    // reading state and acting on it in the update processor\n    versionInfo.blockUpdates();\n    try {\n      cancelApplyBufferUpdate = false;\n      if (state != State.BUFFERING) return null;\n      operationFlags &= ~FLAG_GAP;\n\n      // handle case when no log was even created because no updates\n      // were received.\n      if (tlog == null) {\n        state = State.ACTIVE;\n        return null;\n      }\n      tlog.incref();\n      state = State.APPLYING_BUFFERED;\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n\n    if (recoveryExecutor.isShutdown()) {\n      tlog.decref();\n      throw new RuntimeException(\"executor is not running...\");\n    }\n    ExecutorCompletionService<RecoveryInfo> cs = new ExecutorCompletionService<RecoveryInfo>(recoveryExecutor);\n    LogReplayer replayer = new LogReplayer(Arrays.asList(new TransactionLog[]{tlog}), true);\n    return cs.submit(replayer, recoveryInfo);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1455c941cc4ce652efc776fc23471b0e499246f6","date":1528086751,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#applyBufferedUpdates().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#applyBufferedUpdates().mjava","sourceNew":"  /** Returns the Future to wait on, or null if no replay was needed */\n  public Future<RecoveryInfo> applyBufferedUpdates() {\n    // recovery trips this assert under some race - even when\n    // it checks the state first\n    // assert state == State.BUFFERING;\n\n    // block all updates to eliminate race conditions\n    // reading state and acting on it in the update processor\n    versionInfo.blockUpdates();\n    try {\n      cancelApplyBufferUpdate = false;\n      if (state != State.BUFFERING) return null;\n\n      synchronized (this) {\n        // handle case when no updates were received.\n        if (bufferTlog == null) {\n          state = State.ACTIVE;\n          return null;\n        }\n        bufferTlog.incref();\n      }\n\n      state = State.APPLYING_BUFFERED;\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n\n    if (recoveryExecutor.isShutdown()) {\n      throw new RuntimeException(\"executor is not running...\");\n    }\n    ExecutorCompletionService<RecoveryInfo> cs = new ExecutorCompletionService<>(recoveryExecutor);\n    LogReplayer replayer = new LogReplayer(Collections.singletonList(bufferTlog), true);\n    return cs.submit(() -> {\n      replayer.run();\n      dropBufferTlog();\n    }, recoveryInfo);\n  }\n\n","sourceOld":"  /** Returns the Future to wait on, or null if no replay was needed */\n  public Future<RecoveryInfo> applyBufferedUpdates() {\n    // recovery trips this assert under some race - even when\n    // it checks the state first\n    // assert state == State.BUFFERING;\n\n    // block all updates to eliminate race conditions\n    // reading state and acting on it in the update processor\n    versionInfo.blockUpdates();\n    try {\n      cancelApplyBufferUpdate = false;\n      if (state != State.BUFFERING) return null;\n      operationFlags &= ~FLAG_GAP;\n\n      // handle case when no log was even created because no updates\n      // were received.\n      if (tlog == null) {\n        state = State.ACTIVE;\n        return null;\n      }\n      tlog.incref();\n      state = State.APPLYING_BUFFERED;\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n\n    if (recoveryExecutor.isShutdown()) {\n      tlog.decref();\n      throw new RuntimeException(\"executor is not running...\");\n    }\n    ExecutorCompletionService<RecoveryInfo> cs = new ExecutorCompletionService<>(recoveryExecutor);\n    LogReplayer replayer = new LogReplayer(Arrays.asList(new TransactionLog[]{tlog}), true);\n    return cs.submit(replayer, recoveryInfo);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#applyBufferedUpdates().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#applyBufferedUpdates().mjava","sourceNew":"  /** Returns the Future to wait on, or null if no replay was needed */\n  public Future<RecoveryInfo> applyBufferedUpdates() {\n    // recovery trips this assert under some race - even when\n    // it checks the state first\n    // assert state == State.BUFFERING;\n\n    // block all updates to eliminate race conditions\n    // reading state and acting on it in the update processor\n    versionInfo.blockUpdates();\n    try {\n      cancelApplyBufferUpdate = false;\n      if (state != State.BUFFERING) return null;\n\n      synchronized (this) {\n        // handle case when no updates were received.\n        if (bufferTlog == null) {\n          state = State.ACTIVE;\n          return null;\n        }\n        bufferTlog.incref();\n      }\n\n      state = State.APPLYING_BUFFERED;\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n\n    if (recoveryExecutor.isShutdown()) {\n      throw new RuntimeException(\"executor is not running...\");\n    }\n    ExecutorCompletionService<RecoveryInfo> cs = new ExecutorCompletionService<>(recoveryExecutor);\n    LogReplayer replayer = new LogReplayer(Collections.singletonList(bufferTlog), true);\n    return cs.submit(() -> {\n      replayer.run();\n      dropBufferTlog();\n    }, recoveryInfo);\n  }\n\n","sourceOld":"  /** Returns the Future to wait on, or null if no replay was needed */\n  public Future<RecoveryInfo> applyBufferedUpdates() {\n    // recovery trips this assert under some race - even when\n    // it checks the state first\n    // assert state == State.BUFFERING;\n\n    // block all updates to eliminate race conditions\n    // reading state and acting on it in the update processor\n    versionInfo.blockUpdates();\n    try {\n      cancelApplyBufferUpdate = false;\n      if (state != State.BUFFERING) return null;\n      operationFlags &= ~FLAG_GAP;\n\n      // handle case when no log was even created because no updates\n      // were received.\n      if (tlog == null) {\n        state = State.ACTIVE;\n        return null;\n      }\n      tlog.incref();\n      state = State.APPLYING_BUFFERED;\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n\n    if (recoveryExecutor.isShutdown()) {\n      tlog.decref();\n      throw new RuntimeException(\"executor is not running...\");\n    }\n    ExecutorCompletionService<RecoveryInfo> cs = new ExecutorCompletionService<>(recoveryExecutor);\n    LogReplayer replayer = new LogReplayer(Arrays.asList(new TransactionLog[]{tlog}), true);\n    return cs.submit(replayer, recoveryInfo);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#applyBufferedUpdates().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#applyBufferedUpdates().mjava","sourceNew":"  /** Returns the Future to wait on, or null if no replay was needed */\n  public Future<RecoveryInfo> applyBufferedUpdates() {\n    // recovery trips this assert under some race - even when\n    // it checks the state first\n    // assert state == State.BUFFERING;\n\n    // block all updates to eliminate race conditions\n    // reading state and acting on it in the update processor\n    versionInfo.blockUpdates();\n    try {\n      cancelApplyBufferUpdate = false;\n      if (state != State.BUFFERING) return null;\n\n      synchronized (this) {\n        // handle case when no updates were received.\n        if (bufferTlog == null) {\n          state = State.ACTIVE;\n          return null;\n        }\n        bufferTlog.incref();\n      }\n\n      state = State.APPLYING_BUFFERED;\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n\n    if (recoveryExecutor.isShutdown()) {\n      throw new RuntimeException(\"executor is not running...\");\n    }\n    ExecutorCompletionService<RecoveryInfo> cs = new ExecutorCompletionService<>(recoveryExecutor);\n    LogReplayer replayer = new LogReplayer(Collections.singletonList(bufferTlog), true);\n    return cs.submit(() -> {\n      replayer.run();\n      dropBufferTlog();\n    }, recoveryInfo);\n  }\n\n","sourceOld":"  /** Returns the Future to wait on, or null if no replay was needed */\n  public Future<RecoveryInfo> applyBufferedUpdates() {\n    // recovery trips this assert under some race - even when\n    // it checks the state first\n    // assert state == State.BUFFERING;\n\n    // block all updates to eliminate race conditions\n    // reading state and acting on it in the update processor\n    versionInfo.blockUpdates();\n    try {\n      cancelApplyBufferUpdate = false;\n      if (state != State.BUFFERING) return null;\n      operationFlags &= ~FLAG_GAP;\n\n      // handle case when no log was even created because no updates\n      // were received.\n      if (tlog == null) {\n        state = State.ACTIVE;\n        return null;\n      }\n      tlog.incref();\n      state = State.APPLYING_BUFFERED;\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n\n    if (recoveryExecutor.isShutdown()) {\n      tlog.decref();\n      throw new RuntimeException(\"executor is not running...\");\n    }\n    ExecutorCompletionService<RecoveryInfo> cs = new ExecutorCompletionService<>(recoveryExecutor);\n    LogReplayer replayer = new LogReplayer(Arrays.asList(new TransactionLog[]{tlog}), true);\n    return cs.submit(replayer, recoveryInfo);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["49109a3cf63b2c0c1d9f3d12712821ea0f147883"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","1a9e81d464930e5664da049442e2630d4b9b00d5"],"1a9e81d464930e5664da049442e2630d4b9b00d5":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"1455c941cc4ce652efc776fc23471b0e499246f6":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["e99829242bceda4cf974ec0eb5d82d713615b3da","49109a3cf63b2c0c1d9f3d12712821ea0f147883"],"49109a3cf63b2c0c1d9f3d12712821ea0f147883":["e99829242bceda4cf974ec0eb5d82d713615b3da"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","1455c941cc4ce652efc776fc23471b0e499246f6"],"3599646b4d4c346cf74d334813488b8b337b5bf5":["1a9e81d464930e5664da049442e2630d4b9b00d5","e99829242bceda4cf974ec0eb5d82d713615b3da"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["e99829242bceda4cf974ec0eb5d82d713615b3da","49109a3cf63b2c0c1d9f3d12712821ea0f147883"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e99829242bceda4cf974ec0eb5d82d713615b3da":["1a9e81d464930e5664da049442e2630d4b9b00d5"],"f592209545c71895260367152601e9200399776d":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","1455c941cc4ce652efc776fc23471b0e499246f6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1455c941cc4ce652efc776fc23471b0e499246f6"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["1455c941cc4ce652efc776fc23471b0e499246f6","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"1a9e81d464930e5664da049442e2630d4b9b00d5":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","3599646b4d4c346cf74d334813488b8b337b5bf5","e99829242bceda4cf974ec0eb5d82d713615b3da"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"1455c941cc4ce652efc776fc23471b0e499246f6":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"49109a3cf63b2c0c1d9f3d12712821ea0f147883":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"3599646b4d4c346cf74d334813488b8b337b5bf5":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","1a9e81d464930e5664da049442e2630d4b9b00d5","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92"],"e99829242bceda4cf974ec0eb5d82d713615b3da":["c7869f64c874ebf7f317d22c00baf2b6857797a6","49109a3cf63b2c0c1d9f3d12712821ea0f147883","3599646b4d4c346cf74d334813488b8b337b5bf5","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"f592209545c71895260367152601e9200399776d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","c7869f64c874ebf7f317d22c00baf2b6857797a6","b70042a8a492f7054d480ccdd2be9796510d4327","3599646b4d4c346cf74d334813488b8b337b5bf5","d6f074e73200c07d54f242d3880a8da5a35ff97b","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}