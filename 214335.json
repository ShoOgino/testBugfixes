{"path":"src/java/org/apache/lucene/index/IndexWriter#commitMergedDeletes(MergePolicy.OneMerge,SegmentReader).mjava","commits":[{"id":"c4ff8864209d2e972cb4393600c26082f9a6533d","date":1239297466,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#commitMergedDeletes(MergePolicy.OneMerge,SegmentReader).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#commitMergedDeletes(MergePolicy.OneMerge).mjava","sourceNew":"  /** Carefully merges deletes for the segments we just\n   *  merged.  This is tricky because, although merging will\n   *  clear all deletes (compacts the documents), new\n   *  deletes may have been flushed to the segments since\n   *  the merge was started.  This method \"carries over\"\n   *  such new deletes onto the newly merged segment, and\n   *  saves the resulting deletes file (incrementing the\n   *  delete generation for merge.info).  If no deletes were\n   *  flushed, no new deletes file is saved. */\n  synchronized private void commitMergedDeletes(MergePolicy.OneMerge merge, SegmentReader mergeReader) throws IOException {\n\n    assert testPoint(\"startCommitMergeDeletes\");\n\n    final SegmentInfos sourceSegments = merge.segments;\n\n    if (infoStream != null)\n      message(\"commitMergeDeletes \" + merge.segString(directory));\n\n    // Carefully merge deletes that occurred after we\n    // started merging:\n    int docUpto = 0;\n    int delCount = 0;\n\n    for(int i=0; i < sourceSegments.size(); i++) {\n      SegmentInfo info = sourceSegments.info(i);\n      int docCount = info.docCount;\n      SegmentReader previousReader = merge.readersClone[i];\n      SegmentReader currentReader = merge.readers[i];\n      if (previousReader.hasDeletions()) {\n\n        // There were deletes on this segment when the merge\n        // started.  The merge has collapsed away those\n        // deletes, but, if new deletes were flushed since\n        // the merge started, we must now carefully keep any\n        // newly flushed deletes but mapping them to the new\n        // docIDs.\n\n        if (currentReader.numDeletedDocs() > previousReader.numDeletedDocs()) {\n          // This means this segment has had new deletes\n          // committed since we started the merge, so we\n          // must merge them:\n          for(int j=0;j<docCount;j++) {\n            if (previousReader.isDeleted(j))\n              assert currentReader.isDeleted(j);\n            else {\n              if (currentReader.isDeleted(j)) {\n                mergeReader.doDelete(docUpto);\n                delCount++;\n              }\n              docUpto++;\n            }\n          }\n        } else {\n          docUpto += docCount - previousReader.numDeletedDocs();\n        }\n      } else if (currentReader.hasDeletions()) {\n        // This segment had no deletes before but now it\n        // does:\n        for(int j=0; j<docCount; j++) {\n          if (currentReader.isDeleted(j)) {\n            mergeReader.doDelete(docUpto);\n            delCount++;\n          }\n          docUpto++;\n        }\n      } else\n        // No deletes before or after\n        docUpto += info.docCount;\n    }\n\n    assert mergeReader.numDeletedDocs() == delCount;\n\n    mergeReader.hasChanges = delCount >= 0;\n  }\n\n","sourceOld":"  /** Carefully merges deletes for the segments we just\n   *  merged.  This is tricky because, although merging will\n   *  clear all deletes (compacts the documents), new\n   *  deletes may have been flushed to the segments since\n   *  the merge was started.  This method \"carries over\"\n   *  such new deletes onto the newly merged segment, and\n   *  saves the resulting deletes file (incrementing the\n   *  delete generation for merge.info).  If no deletes were\n   *  flushed, no new deletes file is saved. */\n  synchronized private void commitMergedDeletes(MergePolicy.OneMerge merge) throws IOException {\n\n    assert testPoint(\"startCommitMergeDeletes\");\n\n    final SegmentInfos sourceSegmentsClone = merge.segmentsClone;\n    final SegmentInfos sourceSegments = merge.segments;\n\n    if (infoStream != null)\n      message(\"commitMergeDeletes \" + merge.segString(directory));\n\n    // Carefully merge deletes that occurred after we\n    // started merging:\n\n    BitVector deletes = null;\n    int docUpto = 0;\n    int delCount = 0;\n\n    final int numSegmentsToMerge = sourceSegments.size();\n    for(int i=0;i<numSegmentsToMerge;i++) {\n      final SegmentInfo previousInfo = sourceSegmentsClone.info(i);\n      final SegmentInfo currentInfo = sourceSegments.info(i);\n\n      assert currentInfo.docCount == previousInfo.docCount;\n\n      final int docCount = currentInfo.docCount;\n\n      if (previousInfo.hasDeletions()) {\n\n        // There were deletes on this segment when the merge\n        // started.  The merge has collapsed away those\n        // deletes, but, if new deletes were flushed since\n        // the merge started, we must now carefully keep any\n        // newly flushed deletes but mapping them to the new\n        // docIDs.\n\n        assert currentInfo.hasDeletions();\n\n        // Load deletes present @ start of merge, for this segment:\n        BitVector previousDeletes = new BitVector(previousInfo.dir, previousInfo.getDelFileName());\n\n        if (!currentInfo.getDelFileName().equals(previousInfo.getDelFileName())) {\n          // This means this segment has had new deletes\n          // committed since we started the merge, so we\n          // must merge them:\n          if (deletes == null)\n            deletes = new BitVector(merge.info.docCount);\n\n          BitVector currentDeletes = new BitVector(currentInfo.dir, currentInfo.getDelFileName());\n          for(int j=0;j<docCount;j++) {\n            if (previousDeletes.get(j))\n              assert currentDeletes.get(j);\n            else {\n              if (currentDeletes.get(j)) {\n                deletes.set(docUpto);\n                delCount++;\n              }\n              docUpto++;\n            }\n          }\n        } else\n          docUpto += docCount - previousDeletes.count();\n        \n      } else if (currentInfo.hasDeletions()) {\n        // This segment had no deletes before but now it\n        // does:\n        if (deletes == null)\n          deletes = new BitVector(merge.info.docCount);\n        BitVector currentDeletes = new BitVector(directory, currentInfo.getDelFileName());\n\n        for(int j=0;j<docCount;j++) {\n          if (currentDeletes.get(j)) {\n            deletes.set(docUpto);\n            delCount++;\n          }\n          docUpto++;\n        }\n            \n      } else\n        // No deletes before or after\n        docUpto += currentInfo.docCount;\n    }\n\n    if (deletes != null) {\n      merge.info.advanceDelGen();\n      if (infoStream != null)\n        message(\"commit merge deletes to \" + merge.info.getDelFileName());\n      deletes.write(directory, merge.info.getDelFileName());\n      merge.info.setDelCount(delCount);\n      assert delCount == deletes.count();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#commitMergedDeletes(MergePolicy.OneMerge,SegmentReader).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#commitMergedDeletes(MergePolicy.OneMerge,SegmentReader).mjava","sourceNew":"  /** Carefully merges deletes for the segments we just\n   *  merged.  This is tricky because, although merging will\n   *  clear all deletes (compacts the documents), new\n   *  deletes may have been flushed to the segments since\n   *  the merge was started.  This method \"carries over\"\n   *  such new deletes onto the newly merged segment, and\n   *  saves the resulting deletes file (incrementing the\n   *  delete generation for merge.info).  If no deletes were\n   *  flushed, no new deletes file is saved. */\n  synchronized private void commitMergedDeletes(MergePolicy.OneMerge merge, SegmentReader mergeReader) throws IOException {\n\n    assert testPoint(\"startCommitMergeDeletes\");\n\n    final SegmentInfos sourceSegments = merge.segments;\n\n    if (infoStream != null)\n      message(\"commitMergeDeletes \" + merge.segString(directory));\n\n    // Carefully merge deletes that occurred after we\n    // started merging:\n    int docUpto = 0;\n    int delCount = 0;\n\n    for(int i=0; i < sourceSegments.size(); i++) {\n      SegmentInfo info = sourceSegments.info(i);\n      int docCount = info.docCount;\n      SegmentReader previousReader = merge.readersClone[i];\n      SegmentReader currentReader = merge.readers[i];\n      if (previousReader.hasDeletions()) {\n\n        // There were deletes on this segment when the merge\n        // started.  The merge has collapsed away those\n        // deletes, but, if new deletes were flushed since\n        // the merge started, we must now carefully keep any\n        // newly flushed deletes but mapping them to the new\n        // docIDs.\n\n        if (currentReader.numDeletedDocs() > previousReader.numDeletedDocs()) {\n          // This means this segment has had new deletes\n          // committed since we started the merge, so we\n          // must merge them:\n          for(int j=0;j<docCount;j++) {\n            if (previousReader.isDeleted(j))\n              assert currentReader.isDeleted(j);\n            else {\n              if (currentReader.isDeleted(j)) {\n                mergeReader.doDelete(docUpto);\n                delCount++;\n              }\n              docUpto++;\n            }\n          }\n        } else {\n          docUpto += docCount - previousReader.numDeletedDocs();\n        }\n      } else if (currentReader.hasDeletions()) {\n        // This segment had no deletes before but now it\n        // does:\n        for(int j=0; j<docCount; j++) {\n          if (currentReader.isDeleted(j)) {\n            mergeReader.doDelete(docUpto);\n            delCount++;\n          }\n          docUpto++;\n        }\n      } else\n        // No deletes before or after\n        docUpto += info.docCount;\n    }\n\n    assert mergeReader.numDeletedDocs() == delCount;\n\n    mergeReader.hasChanges = delCount >= 0;\n  }\n\n","sourceOld":"  /** Carefully merges deletes for the segments we just\n   *  merged.  This is tricky because, although merging will\n   *  clear all deletes (compacts the documents), new\n   *  deletes may have been flushed to the segments since\n   *  the merge was started.  This method \"carries over\"\n   *  such new deletes onto the newly merged segment, and\n   *  saves the resulting deletes file (incrementing the\n   *  delete generation for merge.info).  If no deletes were\n   *  flushed, no new deletes file is saved. */\n  synchronized private void commitMergedDeletes(MergePolicy.OneMerge merge, SegmentReader mergeReader) throws IOException {\n\n    assert testPoint(\"startCommitMergeDeletes\");\n\n    final SegmentInfos sourceSegments = merge.segments;\n\n    if (infoStream != null)\n      message(\"commitMergeDeletes \" + merge.segString(directory));\n\n    // Carefully merge deletes that occurred after we\n    // started merging:\n    int docUpto = 0;\n    int delCount = 0;\n\n    for(int i=0; i < sourceSegments.size(); i++) {\n      SegmentInfo info = sourceSegments.info(i);\n      int docCount = info.docCount;\n      SegmentReader previousReader = merge.readersClone[i];\n      SegmentReader currentReader = merge.readers[i];\n      if (previousReader.hasDeletions()) {\n\n        // There were deletes on this segment when the merge\n        // started.  The merge has collapsed away those\n        // deletes, but, if new deletes were flushed since\n        // the merge started, we must now carefully keep any\n        // newly flushed deletes but mapping them to the new\n        // docIDs.\n\n        if (currentReader.numDeletedDocs() > previousReader.numDeletedDocs()) {\n          // This means this segment has had new deletes\n          // committed since we started the merge, so we\n          // must merge them:\n          for(int j=0;j<docCount;j++) {\n            if (previousReader.isDeleted(j))\n              assert currentReader.isDeleted(j);\n            else {\n              if (currentReader.isDeleted(j)) {\n                mergeReader.doDelete(docUpto);\n                delCount++;\n              }\n              docUpto++;\n            }\n          }\n        } else {\n          docUpto += docCount - previousReader.numDeletedDocs();\n        }\n      } else if (currentReader.hasDeletions()) {\n        // This segment had no deletes before but now it\n        // does:\n        for(int j=0; j<docCount; j++) {\n          if (currentReader.isDeleted(j)) {\n            mergeReader.doDelete(docUpto);\n            delCount++;\n          }\n          docUpto++;\n        }\n      } else\n        // No deletes before or after\n        docUpto += info.docCount;\n    }\n\n    assert mergeReader.numDeletedDocs() == delCount;\n\n    mergeReader.hasChanges = delCount >= 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c4ff8864209d2e972cb4393600c26082f9a6533d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c4ff8864209d2e972cb4393600c26082f9a6533d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"c4ff8864209d2e972cb4393600c26082f9a6533d":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}