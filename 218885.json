{"path":"solr/core/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","sourceNew":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    zkServer = new SolrZkServer(zkRun, zookeeperHost, solrHome, hostPort);\n    zkServer.parseConfig();\n    zkServer.start();\n\n    // set client from server config if not already set\n    if (zookeeperHost == null) {\n      zookeeperHost = zkServer.getClientString();\n    }\n\n    int zkClientConnectTimeout = 5000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext);\n        \n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","sourceOld":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    zkServer = new SolrZkServer(zkRun, zookeeperHost, solrHome, hostPort);\n    zkServer.parseConfig();\n    zkServer.start();\n\n    // set client from server config if not already set\n    if (zookeeperHost == null) {\n      zookeeperHost = zkServer.getClientString();\n    }\n\n    int zkClientConnectTimeout = 5000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext);\n        \n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","sourceNew":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    zkServer = new SolrZkServer(zkRun, zookeeperHost, solrHome, hostPort);\n    zkServer.parseConfig();\n    zkServer.start();\n\n    // set client from server config if not already set\n    if (zookeeperHost == null) {\n      zookeeperHost = zkServer.getClientString();\n    }\n\n    int zkClientConnectTimeout = 5000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext);\n        \n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","sourceOld":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    zkServer = new SolrZkServer(zkRun, zookeeperHost, solrHome, hostPort);\n    zkServer.parseConfig();\n    zkServer.start();\n\n    // set client from server config if not already set\n    if (zookeeperHost == null) {\n      zookeeperHost = zkServer.getClientString();\n    }\n\n    int zkClientConnectTimeout = 5000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext);\n        \n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","sourceNew":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    zkServer = new SolrZkServer(zkRun, zookeeperHost, solrHome, hostPort);\n    zkServer.parseConfig();\n    zkServer.start();\n\n    // set client from server config if not already set\n    if (zookeeperHost == null) {\n      zookeeperHost = zkServer.getClientString();\n    }\n\n    int zkClientConnectTimeout = 5000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext);\n        \n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","sourceOld":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    zkServer = new SolrZkServer(zkRun, zookeeperHost, solrHome, hostPort);\n    zkServer.parseConfig();\n    zkServer.start();\n\n    // set client from server config if not already set\n    if (zookeeperHost == null) {\n      zookeeperHost = zkServer.getClientString();\n    }\n\n    int zkClientConnectTimeout = 5000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext);\n        \n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","sourceNew":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    zkServer = new SolrZkServer(zkRun, zookeeperHost, solrHome, hostPort);\n    zkServer.parseConfig();\n    zkServer.start();\n\n    // set client from server config if not already set\n    if (zookeeperHost == null) {\n      zookeeperHost = zkServer.getClientString();\n    }\n\n    int zkClientConnectTimeout = 15000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(this, zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext, new CurrentCoreDescriptorProvider() {\n          \n          @Override\n          public List<CoreDescriptor> getCurrentDescriptors() {\n            List<CoreDescriptor> descriptors = new ArrayList<CoreDescriptor>(getCoreNames().size());\n            for (SolrCore core : getCores()) {\n              descriptors.add(core.getCoreDescriptor());\n            }\n            return descriptors;\n          }\n        });\n        \n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","sourceOld":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    zkServer = new SolrZkServer(zkRun, zookeeperHost, solrHome, hostPort);\n    zkServer.parseConfig();\n    zkServer.start();\n\n    // set client from server config if not already set\n    if (zookeeperHost == null) {\n      zookeeperHost = zkServer.getClientString();\n    }\n\n    int zkClientConnectTimeout = 5000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext);\n        \n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":["629e17cda15d021320b6a1081fac6d0cf2d0150b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","sourceNew":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    zkServer = new SolrZkServer(zkRun, zookeeperHost, solrHome, hostPort);\n    zkServer.parseConfig();\n    zkServer.start();\n\n    // set client from server config if not already set\n    if (zookeeperHost == null) {\n      zookeeperHost = zkServer.getClientString();\n    }\n\n    int zkClientConnectTimeout = 15000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(this, zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext, new CurrentCoreDescriptorProvider() {\n          \n          @Override\n          public List<CoreDescriptor> getCurrentDescriptors() {\n            List<CoreDescriptor> descriptors = new ArrayList<CoreDescriptor>(getCoreNames().size());\n            for (SolrCore core : getCores()) {\n              descriptors.add(core.getCoreDescriptor());\n            }\n            return descriptors;\n          }\n        });\n        \n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","sourceOld":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    zkServer = new SolrZkServer(zkRun, zookeeperHost, solrHome, hostPort);\n    zkServer.parseConfig();\n    zkServer.start();\n\n    // set client from server config if not already set\n    if (zookeeperHost == null) {\n      zookeeperHost = zkServer.getClientString();\n    }\n\n    int zkClientConnectTimeout = 5000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext);\n        \n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","sourceNew":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    zkServer = new SolrZkServer(zkRun, zookeeperHost, solrHome, hostPort);\n    zkServer.parseConfig();\n    zkServer.start();\n\n    // set client from server config if not already set\n    if (zookeeperHost == null) {\n      zookeeperHost = zkServer.getClientString();\n    }\n\n    int zkClientConnectTimeout = 15000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(this, zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext, new CurrentCoreDescriptorProvider() {\n          \n          @Override\n          public List<CoreDescriptor> getCurrentDescriptors() {\n            List<CoreDescriptor> descriptors = new ArrayList<CoreDescriptor>(getCoreNames().size());\n            for (SolrCore core : getCores()) {\n              descriptors.add(core.getCoreDescriptor());\n            }\n            return descriptors;\n          }\n        });\n        \n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","sourceOld":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    zkServer = new SolrZkServer(zkRun, zookeeperHost, solrHome, hostPort);\n    zkServer.parseConfig();\n    zkServer.start();\n\n    // set client from server config if not already set\n    if (zookeeperHost == null) {\n      zookeeperHost = zkServer.getClientString();\n    }\n\n    int zkClientConnectTimeout = 5000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext);\n        \n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20e199cd9e20ed60d620e613664778cd617da489","date":1328287292,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","sourceNew":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      zkServer = new SolrZkServer(zkRun, zookeeperHost, solrHome, hostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 15000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(this, zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext, new CurrentCoreDescriptorProvider() {\n          \n          @Override\n          public List<CoreDescriptor> getCurrentDescriptors() {\n            List<CoreDescriptor> descriptors = new ArrayList<CoreDescriptor>(getCoreNames().size());\n            for (SolrCore core : getCores()) {\n              descriptors.add(core.getCoreDescriptor());\n            }\n            return descriptors;\n          }\n        });\n        \n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","sourceOld":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    zkServer = new SolrZkServer(zkRun, zookeeperHost, solrHome, hostPort);\n    zkServer.parseConfig();\n    zkServer.start();\n\n    // set client from server config if not already set\n    if (zookeeperHost == null) {\n      zookeeperHost = zkServer.getClientString();\n    }\n\n    int zkClientConnectTimeout = 15000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(this, zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext, new CurrentCoreDescriptorProvider() {\n          \n          @Override\n          public List<CoreDescriptor> getCurrentDescriptors() {\n            List<CoreDescriptor> descriptors = new ArrayList<CoreDescriptor>(getCoreNames().size());\n            for (SolrCore core : getCores()) {\n              descriptors.add(core.getCoreDescriptor());\n            }\n            return descriptors;\n          }\n        });\n        \n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","bugFix":["43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c841d89921b7250a582dc6834546b6b475995fa5","date":1330123136,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","sourceNew":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataDir = System.getProperty(\"zkServerDataDir\", solrHome);\n      zkServer = new SolrZkServer(zkRun, zookeeperHost, zkDataDir, hostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 15000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(this, zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext, new CurrentCoreDescriptorProvider() {\n          \n          @Override\n          public List<CoreDescriptor> getCurrentDescriptors() {\n            List<CoreDescriptor> descriptors = new ArrayList<CoreDescriptor>(getCoreNames().size());\n            for (SolrCore core : getCores()) {\n              descriptors.add(core.getCoreDescriptor());\n            }\n            return descriptors;\n          }\n        });\n        \n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","sourceOld":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      zkServer = new SolrZkServer(zkRun, zookeeperHost, solrHome, hostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 15000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(this, zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext, new CurrentCoreDescriptorProvider() {\n          \n          @Override\n          public List<CoreDescriptor> getCurrentDescriptors() {\n            List<CoreDescriptor> descriptors = new ArrayList<CoreDescriptor>(getCoreNames().size());\n            for (SolrCore core : getCores()) {\n              descriptors.add(core.getCoreDescriptor());\n            }\n            return descriptors;\n          }\n        });\n        \n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"794c33b9adf21c29b61694090a098440a8f7c363","date":1330138494,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","sourceNew":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(zkRun, zookeeperHost, zkDataHome, zkConfHome, hostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 15000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(this, zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext, new CurrentCoreDescriptorProvider() {\n          \n          @Override\n          public List<CoreDescriptor> getCurrentDescriptors() {\n            List<CoreDescriptor> descriptors = new ArrayList<CoreDescriptor>(getCoreNames().size());\n            for (SolrCore core : getCores()) {\n              descriptors.add(core.getCoreDescriptor());\n            }\n            return descriptors;\n          }\n        });\n        \n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","sourceOld":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataDir = System.getProperty(\"zkServerDataDir\", solrHome);\n      zkServer = new SolrZkServer(zkRun, zookeeperHost, zkDataDir, hostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 15000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(this, zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext, new CurrentCoreDescriptorProvider() {\n          \n          @Override\n          public List<CoreDescriptor> getCurrentDescriptors() {\n            List<CoreDescriptor> descriptors = new ArrayList<CoreDescriptor>(getCoreNames().size());\n            for (SolrCore core : getCores()) {\n              descriptors.add(core.getCoreDescriptor());\n            }\n            return descriptors;\n          }\n        });\n        \n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9896f063d7e42373599b68eb61b173bdb11411c5","date":1330354201,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","sourceNew":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(zkRun, zookeeperHost, zkDataHome, zkConfHome, hostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 15000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(this, zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext, new CurrentCoreDescriptorProvider() {\n          \n          @Override\n          public List<CoreDescriptor> getCurrentDescriptors() {\n            List<CoreDescriptor> descriptors = new ArrayList<CoreDescriptor>(getCoreNames().size());\n            for (SolrCore core : getCores()) {\n              descriptors.add(core.getCoreDescriptor());\n            }\n            return descriptors;\n          }\n        });\n        \n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n        \n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");\n        if(boostrapConf) {\n          bootstrapConf();\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","sourceOld":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(zkRun, zookeeperHost, zkDataHome, zkConfHome, hostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 15000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(this, zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext, new CurrentCoreDescriptorProvider() {\n          \n          @Override\n          public List<CoreDescriptor> getCurrentDescriptors() {\n            List<CoreDescriptor> descriptors = new ArrayList<CoreDescriptor>(getCoreNames().size());\n            for (SolrCore core : getCores()) {\n              descriptors.add(core.getCoreDescriptor());\n            }\n            return descriptors;\n          }\n        });\n        \n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":["629e17cda15d021320b6a1081fac6d0cf2d0150b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","sourceNew":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(zkRun, zookeeperHost, zkDataHome, zkConfHome, hostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 15000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(this, zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext, new CurrentCoreDescriptorProvider() {\n          \n          @Override\n          public List<CoreDescriptor> getCurrentDescriptors() {\n            List<CoreDescriptor> descriptors = new ArrayList<CoreDescriptor>(getCoreNames().size());\n            for (SolrCore core : getCores()) {\n              descriptors.add(core.getCoreDescriptor());\n            }\n            return descriptors;\n          }\n        });\n        \n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n        \n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");\n        if(boostrapConf) {\n          bootstrapConf();\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","sourceOld":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      zkServer = new SolrZkServer(zkRun, zookeeperHost, solrHome, hostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 15000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(this, zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext, new CurrentCoreDescriptorProvider() {\n          \n          @Override\n          public List<CoreDescriptor> getCurrentDescriptors() {\n            List<CoreDescriptor> descriptors = new ArrayList<CoreDescriptor>(getCoreNames().size());\n            for (SolrCore core : getCores()) {\n              descriptors.add(core.getCoreDescriptor());\n            }\n            return descriptors;\n          }\n        });\n        \n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70d51faece9593d2e9be4f2b6e603d96e5bcb2d1","date":1337273259,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","sourceNew":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(zkRun, zookeeperHost, zkDataHome, zkConfHome, hostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 15000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(this, zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext, new CurrentCoreDescriptorProvider() {\n          \n          @Override\n          public List<CoreDescriptor> getCurrentDescriptors() {\n            List<CoreDescriptor> descriptors = new ArrayList<CoreDescriptor>(getCoreNames().size());\n            for (SolrCore core : getCores()) {\n              descriptors.add(core.getCoreDescriptor());\n            }\n            return descriptors;\n          }\n        });\n        \n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n        \n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");\n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cfg, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","sourceOld":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(zkRun, zookeeperHost, zkDataHome, zkConfHome, hostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 15000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(this, zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext, new CurrentCoreDescriptorProvider() {\n          \n          @Override\n          public List<CoreDescriptor> getCurrentDescriptors() {\n            List<CoreDescriptor> descriptors = new ArrayList<CoreDescriptor>(getCoreNames().size());\n            for (SolrCore core : getCores()) {\n              descriptors.add(core.getCoreDescriptor());\n            }\n            return descriptors;\n          }\n        });\n        \n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n        \n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");\n        if(boostrapConf) {\n          bootstrapConf();\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ef0d8a69209261514c5739c770bba706c2308450","date":1337607597,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","sourceNew":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(zkRun, zookeeperHost, zkDataHome, zkConfHome, hostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 15000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(this, zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext, new CurrentCoreDescriptorProvider() {\n          \n          @Override\n          public List<CoreDescriptor> getCurrentDescriptors() {\n            List<CoreDescriptor> descriptors = new ArrayList<CoreDescriptor>(getCoreNames().size());\n            for (SolrCore core : getCores()) {\n              descriptors.add(core.getCoreDescriptor());\n            }\n            return descriptors;\n          }\n        });\n        \n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n        \n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");\n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cfg, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","sourceOld":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(zkRun, zookeeperHost, zkDataHome, zkConfHome, hostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 15000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(this, zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext, new CurrentCoreDescriptorProvider() {\n          \n          @Override\n          public List<CoreDescriptor> getCurrentDescriptors() {\n            List<CoreDescriptor> descriptors = new ArrayList<CoreDescriptor>(getCoreNames().size());\n            for (SolrCore core : getCores()) {\n              descriptors.add(core.getCoreDescriptor());\n            }\n            return descriptors;\n          }\n        });\n        \n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n        \n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");\n        if(boostrapConf) {\n          bootstrapConf();\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629e17cda15d021320b6a1081fac6d0cf2d0150b","date":1341935027,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","sourceNew":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(zkRun, zookeeperHost, zkDataHome, zkConfHome, hostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 15000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(this, zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext, new CurrentCoreDescriptorProvider() {\n          \n          @Override\n          public List<CoreDescriptor> getCurrentDescriptors() {\n            List<CoreDescriptor> descriptors = new ArrayList<CoreDescriptor>(getCoreNames().size());\n            for (SolrCore core : getCores()) {\n              descriptors.add(core.getCoreDescriptor());\n            }\n            return descriptors;\n          }\n        });        \n\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");\n        \n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cfg, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","sourceOld":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(zkRun, zookeeperHost, zkDataHome, zkConfHome, hostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 15000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(this, zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext, new CurrentCoreDescriptorProvider() {\n          \n          @Override\n          public List<CoreDescriptor> getCurrentDescriptors() {\n            List<CoreDescriptor> descriptors = new ArrayList<CoreDescriptor>(getCoreNames().size());\n            for (SolrCore core : getCores()) {\n              descriptors.add(core.getCoreDescriptor());\n            }\n            return descriptors;\n          }\n        });\n        \n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n        \n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");\n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cfg, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","bugFix":["43adc163640856c8b07e4cf1b2046c9af56d3ae7","2c007e7c4cf8c55bc2a5884e315123afaaeec87f","9896f063d7e42373599b68eb61b173bdb11411c5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","sourceNew":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(zkRun, zookeeperHost, zkDataHome, zkConfHome, hostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 15000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(this, zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext, new CurrentCoreDescriptorProvider() {\n          \n          @Override\n          public List<CoreDescriptor> getCurrentDescriptors() {\n            List<CoreDescriptor> descriptors = new ArrayList<CoreDescriptor>(getCoreNames().size());\n            for (SolrCore core : getCores()) {\n              descriptors.add(core.getCoreDescriptor());\n            }\n            return descriptors;\n          }\n        });        \n\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");\n        \n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cfg, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","sourceOld":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(zkRun, zookeeperHost, zkDataHome, zkConfHome, hostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 15000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(this, zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext, new CurrentCoreDescriptorProvider() {\n          \n          @Override\n          public List<CoreDescriptor> getCurrentDescriptors() {\n            List<CoreDescriptor> descriptors = new ArrayList<CoreDescriptor>(getCoreNames().size());\n            for (SolrCore core : getCores()) {\n              descriptors.add(core.getCoreDescriptor());\n            }\n            return descriptors;\n          }\n        });\n        \n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n        \n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");\n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cfg, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","sourceNew":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(zkRun, zookeeperHost, zkDataHome, zkConfHome, hostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 15000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(this, zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext, new CurrentCoreDescriptorProvider() {\n          \n          @Override\n          public List<CoreDescriptor> getCurrentDescriptors() {\n            List<CoreDescriptor> descriptors = new ArrayList<CoreDescriptor>(getCoreNames().size());\n            for (SolrCore core : getCores()) {\n              descriptors.add(core.getCoreDescriptor());\n            }\n            return descriptors;\n          }\n        });        \n\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");\n        \n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cfg, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","sourceOld":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(zkRun, zookeeperHost, zkDataHome, zkConfHome, hostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 15000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(this, zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext, new CurrentCoreDescriptorProvider() {\n          \n          @Override\n          public List<CoreDescriptor> getCurrentDescriptors() {\n            List<CoreDescriptor> descriptors = new ArrayList<CoreDescriptor>(getCoreNames().size());\n            for (SolrCore core : getCores()) {\n              descriptors.add(core.getCoreDescriptor());\n            }\n            return descriptors;\n          }\n        });\n        \n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n        \n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");\n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cfg, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6","date":1346692465,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","sourceNew":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    cmdDistribExecutor = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 5,\n        TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"cmdDistribExecutor\"));\n    \n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(zkRun, zookeeperHost, zkDataHome, zkConfHome, hostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 15000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(this, zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext, leaderVoteWait, new CurrentCoreDescriptorProvider() {\n          \n          @Override\n          public List<CoreDescriptor> getCurrentDescriptors() {\n            List<CoreDescriptor> descriptors = new ArrayList<CoreDescriptor>(getCoreNames().size());\n            for (SolrCore core : getCores()) {\n              descriptors.add(core.getCoreDescriptor());\n            }\n            return descriptors;\n          }\n        });        \n\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");\n        \n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cfg, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","sourceOld":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(zkRun, zookeeperHost, zkDataHome, zkConfHome, hostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 15000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(this, zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext, new CurrentCoreDescriptorProvider() {\n          \n          @Override\n          public List<CoreDescriptor> getCurrentDescriptors() {\n            List<CoreDescriptor> descriptors = new ArrayList<CoreDescriptor>(getCoreNames().size());\n            for (SolrCore core : getCores()) {\n              descriptors.add(core.getCoreDescriptor());\n            }\n            return descriptors;\n          }\n        });        \n\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");\n        \n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cfg, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":["a6378064655e76cd7b908b1cab4ce425b384b508","d8469c0c0b45f7e3da74918efc8ede2ad2efe2b1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d8469c0c0b45f7e3da74918efc8ede2ad2efe2b1","date":1346817835,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","sourceNew":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    newCmdDistribExecutor();\n    \n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(zkRun, zookeeperHost, zkDataHome, zkConfHome, hostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 15000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(this, zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext, leaderVoteWait, new CurrentCoreDescriptorProvider() {\n          \n          @Override\n          public List<CoreDescriptor> getCurrentDescriptors() {\n            List<CoreDescriptor> descriptors = new ArrayList<CoreDescriptor>(getCoreNames().size());\n            for (SolrCore core : getCores()) {\n              descriptors.add(core.getCoreDescriptor());\n            }\n            return descriptors;\n          }\n        });        \n\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");\n        \n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cfg, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","sourceOld":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    cmdDistribExecutor = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 5,\n        TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"cmdDistribExecutor\"));\n    \n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(zkRun, zookeeperHost, zkDataHome, zkConfHome, hostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 15000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(this, zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext, leaderVoteWait, new CurrentCoreDescriptorProvider() {\n          \n          @Override\n          public List<CoreDescriptor> getCurrentDescriptors() {\n            List<CoreDescriptor> descriptors = new ArrayList<CoreDescriptor>(getCoreNames().size());\n            for (SolrCore core : getCores()) {\n              descriptors.add(core.getCoreDescriptor());\n            }\n            return descriptors;\n          }\n        });        \n\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");\n        \n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cfg, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","bugFix":["7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6"],"bugIntro":["a6378064655e76cd7b908b1cab4ce425b384b508"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a6378064655e76cd7b908b1cab4ce425b384b508","date":1347656715,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","sourceNew":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(zkRun, zookeeperHost, zkDataHome, zkConfHome, hostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 15000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(this, zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext, leaderVoteWait, new CurrentCoreDescriptorProvider() {\n          \n          @Override\n          public List<CoreDescriptor> getCurrentDescriptors() {\n            List<CoreDescriptor> descriptors = new ArrayList<CoreDescriptor>(getCoreNames().size());\n            for (SolrCore core : getCores()) {\n              descriptors.add(core.getCoreDescriptor());\n            }\n            return descriptors;\n          }\n        });        \n\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");\n        \n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cfg, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","sourceOld":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    newCmdDistribExecutor();\n    \n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(zkRun, zookeeperHost, zkDataHome, zkConfHome, hostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 15000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(this, zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext, leaderVoteWait, new CurrentCoreDescriptorProvider() {\n          \n          @Override\n          public List<CoreDescriptor> getCurrentDescriptors() {\n            List<CoreDescriptor> descriptors = new ArrayList<CoreDescriptor>(getCoreNames().size());\n            for (SolrCore core : getCores()) {\n              descriptors.add(core.getCoreDescriptor());\n            }\n            return descriptors;\n          }\n        });        \n\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");\n        \n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cfg, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","bugFix":["7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6","d8469c0c0b45f7e3da74918efc8ede2ad2efe2b1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0e70591e1e23afedf79324b42591f71a3e711b5","date":1355181494,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","sourceNew":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(zkRun, zookeeperHost, zkDataHome, zkConfHome, hostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 15000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n        \n        if(!ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \");\n        }\n        \n        zkController = new ZkController(this, zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext, leaderVoteWait, new CurrentCoreDescriptorProvider() {\n          \n          @Override\n          public List<CoreDescriptor> getCurrentDescriptors() {\n            List<CoreDescriptor> descriptors = new ArrayList<CoreDescriptor>(getCoreNames().size());\n            for (SolrCore core : getCores()) {\n              descriptors.add(core.getCoreDescriptor());\n            }\n            return descriptors;\n          }\n        });        \n\n        \n        \n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cfg, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","sourceOld":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(zkRun, zookeeperHost, zkDataHome, zkConfHome, hostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 15000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(this, zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext, leaderVoteWait, new CurrentCoreDescriptorProvider() {\n          \n          @Override\n          public List<CoreDescriptor> getCurrentDescriptors() {\n            List<CoreDescriptor> descriptors = new ArrayList<CoreDescriptor>(getCoreNames().size());\n            for (SolrCore core : getCores()) {\n              descriptors.add(core.getCoreDescriptor());\n            }\n            return descriptors;\n          }\n        });        \n\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");\n        \n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cfg, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a69439d0df009e0bb0038d1e427159f449dd670d","date":1355704683,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","sourceNew":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(zkRun, zookeeperHost, zkDataHome, zkConfHome, hostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 15000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n        \n        if(!ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \");\n        }\n        \n        zkController = new ZkController(this, zookeeperHost, zkClientTimeout,\n            zkClientConnectTimeout, host, hostPort, hostContext,\n            leaderVoteWait, distribUpdateConnTimeout, distribUpdateSoTimeout,\n            new CurrentCoreDescriptorProvider() {\n              \n              @Override\n              public List<CoreDescriptor> getCurrentDescriptors() {\n                List<CoreDescriptor> descriptors = new ArrayList<CoreDescriptor>(\n                    getCoreNames().size());\n                for (SolrCore core : getCores()) {\n                  descriptors.add(core.getCoreDescriptor());\n                }\n                return descriptors;\n              }\n            });\n        \n        \n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cfg, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","sourceOld":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(zkRun, zookeeperHost, zkDataHome, zkConfHome, hostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 15000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n        \n        if(!ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \");\n        }\n        \n        zkController = new ZkController(this, zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext, leaderVoteWait, new CurrentCoreDescriptorProvider() {\n          \n          @Override\n          public List<CoreDescriptor> getCurrentDescriptors() {\n            List<CoreDescriptor> descriptors = new ArrayList<CoreDescriptor>(getCoreNames().size());\n            for (SolrCore core : getCores()) {\n              descriptors.add(core.getCoreDescriptor());\n            }\n            return descriptors;\n          }\n        });        \n\n        \n        \n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cfg, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","sourceNew":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(zkRun, zookeeperHost, zkDataHome, zkConfHome, hostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 15000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n        \n        if(!ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \");\n        }\n        \n        zkController = new ZkController(this, zookeeperHost, zkClientTimeout,\n            zkClientConnectTimeout, host, hostPort, hostContext,\n            leaderVoteWait, distribUpdateConnTimeout, distribUpdateSoTimeout,\n            new CurrentCoreDescriptorProvider() {\n              \n              @Override\n              public List<CoreDescriptor> getCurrentDescriptors() {\n                List<CoreDescriptor> descriptors = new ArrayList<CoreDescriptor>(\n                    getCoreNames().size());\n                for (SolrCore core : getCores()) {\n                  descriptors.add(core.getCoreDescriptor());\n                }\n                return descriptors;\n              }\n            });\n        \n        \n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cfg, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","sourceOld":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(zkRun, zookeeperHost, zkDataHome, zkConfHome, hostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 15000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(this, zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext, leaderVoteWait, new CurrentCoreDescriptorProvider() {\n          \n          @Override\n          public List<CoreDescriptor> getCurrentDescriptors() {\n            List<CoreDescriptor> descriptors = new ArrayList<CoreDescriptor>(getCoreNames().size());\n            for (SolrCore core : getCores()) {\n              descriptors.add(core.getCoreDescriptor());\n            }\n            return descriptors;\n          }\n        });        \n\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");\n        \n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cfg, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a837c064b67fa63a9394136e31218b908cdcf783","date":1362186072,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","sourceNew":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(zkRun, zookeeperHost, zkDataHome, zkConfHome, hostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 15000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n        \n        if(!ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \");\n        }\n        zkController = new ZkController(this, zookeeperHost, zkClientTimeout,\n            zkClientConnectTimeout, host, hostPort, hostContext,\n            leaderVoteWait, distribUpdateConnTimeout, distribUpdateSoTimeout,\n            new CurrentCoreDescriptorProvider() {\n\n              @Override\n              public List<CoreDescriptor> getCurrentDescriptors() {\n                List<CoreDescriptor> descriptors = new ArrayList<CoreDescriptor>(\n                    getCoreNames().size());\n                for (SolrCore core : getCores()) {\n                  descriptors.add(core.getCoreDescriptor());\n                }\n                return descriptors;\n              }\n            });\n\n\n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cfg, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","sourceOld":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(zkRun, zookeeperHost, zkDataHome, zkConfHome, hostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 15000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n        \n        if(!ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \");\n        }\n        \n        zkController = new ZkController(this, zookeeperHost, zkClientTimeout,\n            zkClientConnectTimeout, host, hostPort, hostContext,\n            leaderVoteWait, distribUpdateConnTimeout, distribUpdateSoTimeout,\n            new CurrentCoreDescriptorProvider() {\n              \n              @Override\n              public List<CoreDescriptor> getCurrentDescriptors() {\n                List<CoreDescriptor> descriptors = new ArrayList<CoreDescriptor>(\n                    getCoreNames().size());\n                for (SolrCore core : getCores()) {\n                  descriptors.add(core.getCoreDescriptor());\n                }\n                return descriptors;\n              }\n            });\n        \n        \n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cfg, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe2d4d2624d8e786fe90cf705ac07befd5d8acfd","date":1364840870,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","sourceNew":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // BEGIN: SOLR-4622: deprecated hardcoded defaults for hostPort & hostContext\n    if (null == hostPort) {\n      // throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n      //               \"'hostPort' must be configured to run SolrCloud\");\n      log.warn(\"Solr 'hostPort' has not be explicitly configured, using hardcoded default of \" + DEFAULT_HOST_PORT + \".  This default has been deprecated and will be removed in future versions of Solr, please configure this value explicitly\");\n      hostPort = DEFAULT_HOST_PORT;\n    }\n    if (null == hostContext) {\n      // throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n      //               \"'hostContext' must be configured to run SolrCloud\");\n      log.warn(\"Solr 'hostContext' has not be explicitly configured, using hardcoded default of \" + DEFAULT_HOST_CONTEXT + \".  This default has been deprecated and will be removed in future versions of Solr, please configure this value explicitly\");\n      hostContext = DEFAULT_HOST_CONTEXT;\n    }\n    // END: SOLR-4622\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(zkRun, zookeeperHost, zkDataHome, zkConfHome, hostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 15000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n        \n        if(!ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \");\n        }\n        zkController = new ZkController(this, zookeeperHost, zkClientTimeout,\n            zkClientConnectTimeout, host, hostPort, hostContext,\n            leaderVoteWait, distribUpdateConnTimeout, distribUpdateSoTimeout,\n            new CurrentCoreDescriptorProvider() {\n\n              @Override\n              public List<CoreDescriptor> getCurrentDescriptors() {\n                List<CoreDescriptor> descriptors = new ArrayList<CoreDescriptor>(\n                    getCoreNames().size());\n                for (SolrCore core : getCores()) {\n                  descriptors.add(core.getCoreDescriptor());\n                }\n                return descriptors;\n              }\n            });\n\n\n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cfg, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","sourceOld":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(zkRun, zookeeperHost, zkDataHome, zkConfHome, hostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 15000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n        \n        if(!ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \");\n        }\n        zkController = new ZkController(this, zookeeperHost, zkClientTimeout,\n            zkClientConnectTimeout, host, hostPort, hostContext,\n            leaderVoteWait, distribUpdateConnTimeout, distribUpdateSoTimeout,\n            new CurrentCoreDescriptorProvider() {\n\n              @Override\n              public List<CoreDescriptor> getCurrentDescriptors() {\n                List<CoreDescriptor> descriptors = new ArrayList<CoreDescriptor>(\n                    getCoreNames().size());\n                for (SolrCore core : getCores()) {\n                  descriptors.add(core.getCoreDescriptor());\n                }\n                return descriptors;\n              }\n            });\n\n\n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cfg, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b29abed5661c7911e4b45d5a3d79a186268e28c4","date":1366675770,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#initZooKeeper(CoreContainer,String,String,int,String,String,String,String,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","sourceNew":"  public void initZooKeeper(final CoreContainer cc, String solrHome, String zkHost, int zkClientTimeout, String hostPort, String hostContext, String host, String leaderVoteWait, int distribUpdateConnTimeout, int distribUpdateSoTimeout) {\n    ZkController zkController = null;\n    \n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n    \n    this.zkClientTimeout = zkClientTimeout;\n    this.hostPort = hostPort;\n    this.hostContext = hostContext;\n    this.host = host;\n    this.leaderVoteWait = leaderVoteWait;\n    this.distribUpdateConnTimeout = distribUpdateConnTimeout;\n    this.distribUpdateSoTimeout = distribUpdateSoTimeout;\n\n    // BEGIN: SOLR-4622: deprecated hardcoded defaults for hostPort & hostContext\n    if (null == hostPort) {\n      // throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n      //               \"'hostPort' must be configured to run SolrCloud\");\n      log.warn(\"Solr 'hostPort' has not be explicitly configured, using hardcoded default of \" + DEFAULT_HOST_PORT + \".  This default has been deprecated and will be removed in future versions of Solr, please configure this value explicitly\");\n      hostPort = DEFAULT_HOST_PORT;\n    }\n    if (null == hostContext) {\n      // throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n      //               \"'hostContext' must be configured to run SolrCloud\");\n      log.warn(\"Solr 'hostContext' has not be explicitly configured, using hardcoded default of \" + DEFAULT_HOST_CONTEXT + \".  This default has been deprecated and will be removed in future versions of Solr, please configure this value explicitly\");\n      hostContext = DEFAULT_HOST_CONTEXT;\n    }\n    // END: SOLR-4622\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(zkRun, zookeeperHost, zkDataHome, zkConfHome, hostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 15000;\n\n    if (zookeeperHost != null) {\n\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n        \n        if(!ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \");\n        }\n        zkController = new ZkController(cc, zookeeperHost, zkClientTimeout,\n            zkClientConnectTimeout, host, hostPort, hostContext,\n            leaderVoteWait, distribUpdateConnTimeout, distribUpdateSoTimeout,\n            new CurrentCoreDescriptorProvider() {\n\n              @Override\n              public List<CoreDescriptor> getCurrentDescriptors() {\n                List<CoreDescriptor> descriptors = new ArrayList<CoreDescriptor>(\n                    cc.getCoreNames().size());\n                Collection<SolrCore> cores = cc.getCores();\n                for (SolrCore core : cores) {\n                  descriptors.add(core.getCoreDescriptor());\n                }\n                return descriptors;\n              }\n            });\n\n\n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cc.cfg, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n      \n\n    }\n    this.zkController = zkController;\n  }\n\n","sourceOld":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // BEGIN: SOLR-4622: deprecated hardcoded defaults for hostPort & hostContext\n    if (null == hostPort) {\n      // throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n      //               \"'hostPort' must be configured to run SolrCloud\");\n      log.warn(\"Solr 'hostPort' has not be explicitly configured, using hardcoded default of \" + DEFAULT_HOST_PORT + \".  This default has been deprecated and will be removed in future versions of Solr, please configure this value explicitly\");\n      hostPort = DEFAULT_HOST_PORT;\n    }\n    if (null == hostContext) {\n      // throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n      //               \"'hostContext' must be configured to run SolrCloud\");\n      log.warn(\"Solr 'hostContext' has not be explicitly configured, using hardcoded default of \" + DEFAULT_HOST_CONTEXT + \".  This default has been deprecated and will be removed in future versions of Solr, please configure this value explicitly\");\n      hostContext = DEFAULT_HOST_CONTEXT;\n    }\n    // END: SOLR-4622\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(zkRun, zookeeperHost, zkDataHome, zkConfHome, hostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 15000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n        \n        if(!ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \");\n        }\n        zkController = new ZkController(this, zookeeperHost, zkClientTimeout,\n            zkClientConnectTimeout, host, hostPort, hostContext,\n            leaderVoteWait, distribUpdateConnTimeout, distribUpdateSoTimeout,\n            new CurrentCoreDescriptorProvider() {\n\n              @Override\n              public List<CoreDescriptor> getCurrentDescriptors() {\n                List<CoreDescriptor> descriptors = new ArrayList<CoreDescriptor>(\n                    getCoreNames().size());\n                for (SolrCore core : getCores()) {\n                  descriptors.add(core.getCoreDescriptor());\n                }\n                return descriptors;\n              }\n            });\n\n\n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cfg, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a6378064655e76cd7b908b1cab4ce425b384b508","a69439d0df009e0bb0038d1e427159f449dd670d"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["20e199cd9e20ed60d620e613664778cd617da489","9896f063d7e42373599b68eb61b173bdb11411c5"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"fe2d4d2624d8e786fe90cf705ac07befd5d8acfd":["a837c064b67fa63a9394136e31218b908cdcf783"],"a69439d0df009e0bb0038d1e427159f449dd670d":["d0e70591e1e23afedf79324b42591f71a3e711b5"],"629e17cda15d021320b6a1081fac6d0cf2d0150b":["70d51faece9593d2e9be4f2b6e603d96e5bcb2d1"],"d8469c0c0b45f7e3da74918efc8ede2ad2efe2b1":["7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6"],"70d51faece9593d2e9be4f2b6e603d96e5bcb2d1":["9896f063d7e42373599b68eb61b173bdb11411c5"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"b29abed5661c7911e4b45d5a3d79a186268e28c4":["fe2d4d2624d8e786fe90cf705ac07befd5d8acfd"],"aba371508186796cc6151d8223a5b4e16d02e26e":["70d51faece9593d2e9be4f2b6e603d96e5bcb2d1","629e17cda15d021320b6a1081fac6d0cf2d0150b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0e70591e1e23afedf79324b42591f71a3e711b5":["a6378064655e76cd7b908b1cab4ce425b384b508"],"9896f063d7e42373599b68eb61b173bdb11411c5":["794c33b9adf21c29b61694090a098440a8f7c363"],"ef0d8a69209261514c5739c770bba706c2308450":["9896f063d7e42373599b68eb61b173bdb11411c5","70d51faece9593d2e9be4f2b6e603d96e5bcb2d1"],"794c33b9adf21c29b61694090a098440a8f7c363":["c841d89921b7250a582dc6834546b6b475995fa5"],"7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6":["629e17cda15d021320b6a1081fac6d0cf2d0150b"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c841d89921b7250a582dc6834546b6b475995fa5":["20e199cd9e20ed60d620e613664778cd617da489"],"a6378064655e76cd7b908b1cab4ce425b384b508":["d8469c0c0b45f7e3da74918efc8ede2ad2efe2b1"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["70d51faece9593d2e9be4f2b6e603d96e5bcb2d1","629e17cda15d021320b6a1081fac6d0cf2d0150b"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a837c064b67fa63a9394136e31218b908cdcf783":["a69439d0df009e0bb0038d1e427159f449dd670d"],"20e199cd9e20ed60d620e613664778cd617da489":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b29abed5661c7911e4b45d5a3d79a186268e28c4"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"c26f00b574427b55127e869b935845554afde1fa":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a69439d0df009e0bb0038d1e427159f449dd670d":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a837c064b67fa63a9394136e31218b908cdcf783"],"fe2d4d2624d8e786fe90cf705ac07befd5d8acfd":["b29abed5661c7911e4b45d5a3d79a186268e28c4"],"629e17cda15d021320b6a1081fac6d0cf2d0150b":["aba371508186796cc6151d8223a5b4e16d02e26e","7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"d8469c0c0b45f7e3da74918efc8ede2ad2efe2b1":["a6378064655e76cd7b908b1cab4ce425b384b508"],"70d51faece9593d2e9be4f2b6e603d96e5bcb2d1":["629e17cda15d021320b6a1081fac6d0cf2d0150b","aba371508186796cc6151d8223a5b4e16d02e26e","ef0d8a69209261514c5739c770bba706c2308450","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"b29abed5661c7911e4b45d5a3d79a186268e28c4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"d0e70591e1e23afedf79324b42591f71a3e711b5":["a69439d0df009e0bb0038d1e427159f449dd670d"],"9896f063d7e42373599b68eb61b173bdb11411c5":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","70d51faece9593d2e9be4f2b6e603d96e5bcb2d1","ef0d8a69209261514c5739c770bba706c2308450"],"ef0d8a69209261514c5739c770bba706c2308450":[],"794c33b9adf21c29b61694090a098440a8f7c363":["9896f063d7e42373599b68eb61b173bdb11411c5"],"7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6":["d8469c0c0b45f7e3da74918efc8ede2ad2efe2b1"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"c841d89921b7250a582dc6834546b6b475995fa5":["794c33b9adf21c29b61694090a098440a8f7c363"],"a6378064655e76cd7b908b1cab4ce425b384b508":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d0e70591e1e23afedf79324b42591f71a3e711b5"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","20e199cd9e20ed60d620e613664778cd617da489"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"a837c064b67fa63a9394136e31218b908cdcf783":["fe2d4d2624d8e786fe90cf705ac07befd5d8acfd"],"20e199cd9e20ed60d620e613664778cd617da489":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","c841d89921b7250a582dc6834546b6b475995fa5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","0d22ac6a4146774c1bc8400160fc0b6150294e92","aba371508186796cc6151d8223a5b4e16d02e26e","ef0d8a69209261514c5739c770bba706c2308450","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}