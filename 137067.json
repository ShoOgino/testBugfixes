{"path":"solr/core/src/test/org/apache/solr/pkg/TestPackages#testSchemaPlugins().mjava","commits":[{"id":"b2ed9b72e5fa27a7bd4857f222ca815341979d4a","date":1594879524,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/pkg/TestPackages#testSchemaPlugins().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  public void testSchemaPlugins() throws Exception {\n    String COLLECTION_NAME = \"testSchemaLoadingColl\";\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n\n    MiniSolrCloudCluster cluster =\n            configureCluster(4)\n                    .withJettyConfig(jetty -> jetty.enableV2(true))\n                    .addConfig(\"conf\", configset(\"cloud-managed\"))\n                    .configure();\n    try {\n      String FILE1 = \"/schemapkg/schema-plugins.jar\";\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n      postFileAndWait(cluster, \"runtimecode/schema-plugins.jar.bin\", FILE1,\n              \"iSRhrogDyt9P1htmSf/krh1kx9oty3TYyWm4GKHQGlb8a+X4tKCe9kKk+3tGs+bU9zq5JBZ5txNXsn96aZem5A==\");\n\n      Package.AddVersion add = new Package.AddVersion();\n      add.version = \"1.0\";\n      add.pkg = \"schemapkg\";\n      add.files = Arrays.asList(new String[]{FILE1});\n      V2Request req = new V2Request.Builder(\"/cluster/package\")\n              .forceV2(true)\n              .withMethod(SolrRequest.METHOD.POST)\n              .withPayload(Collections.singletonMap(\"add\", add))\n              .build();\n      req.process(cluster.getSolrClient());\n\n      TestDistribPackageStore.assertResponseValues(10,\n              () -> new V2Request.Builder(\"/cluster/package\").\n                      withMethod(SolrRequest.METHOD.GET)\n                      .build().process(cluster.getSolrClient()),\n              Utils.makeMap(\n                      \":result:packages:schemapkg[0]:version\", \"1.0\",\n                      \":result:packages:schemapkg[0]:files[0]\", FILE1\n              ));\n\n      CollectionAdminRequest\n              .createCollection(COLLECTION_NAME, \"conf\", 2, 2)\n              .process(cluster.getSolrClient());\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 4);\n\n      String addFieldTypeAnalyzerWithClass = \"{\\n\" +\n              \"'add-field-type' : {\" +\n              \"    'name' : 'myNewTextFieldWithAnalyzerClass',\\n\" +\n              \"    'class':'schemapkg:my.pkg.MyTextField',\\n\" +\n              \"    'analyzer' : {\\n\" +\n              \"        'luceneMatchVersion':'5.0.0'\" ;\n//          + \",\\n\" +\n//          \"        'class':'schemapkg:my.pkg.MyWhitespaceAnalyzer'\\n\";\n      String charFilters =\n              \"        'charFilters' : [{\\n\" +\n                      \"            'class':'schemapkg:my.pkg.MyPatternReplaceCharFilterFactory',\\n\" +\n                      \"            'replacement':'$1$1',\\n\" +\n                      \"            'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n                      \"        }],\\n\";\n      String tokenizer =\n              \"        'tokenizer' : { 'class':'schemapkg:my.pkg.MyWhitespaceTokenizerFactory' },\\n\";\n      String filters =\n              \"        'filters' : [{ 'class':'solr.ASCIIFoldingFilterFactory' }]\\n\";\n      String suffix = \"    }\\n\" +\n              \"}}\";\n      cluster.getSolrClient().request(new SolrRequest(SolrRequest.METHOD.POST, \"/schema\") {\n\n        @Override\n        public RequestWriter.ContentWriter getContentWriter(String expectedType) {\n          return new RequestWriter.StringPayloadContentWriter(addFieldTypeAnalyzerWithClass + ',' + charFilters + tokenizer + filters + suffix, CommonParams.JSON_MIME);\n        }\n\n        @Override\n        public SolrParams getParams() {\n          return null;\n        }\n\n        @Override\n        public String getCollection() {\n          return COLLECTION_NAME;\n        }\n\n        @Override\n        public SolrResponse createResponse(SolrClient client) {\n          return new SolrResponseBase();\n        }\n      });\n      verifySchemaComponent(cluster.getSolrClient(), COLLECTION_NAME, \"/schema/fieldtypes/myNewTextFieldWithAnalyzerClass\",\n              Utils.makeMap(\":fieldType:analyzer:charFilters[0]:_packageinfo_:version\" ,\"1.0\",\n                      \":fieldType:analyzer:tokenizer:_packageinfo_:version\",\"1.0\",\n                      \":fieldType:_packageinfo_:version\",\"1.0\"));\n\n      add = new Package.AddVersion();\n      add.version = \"2.0\";\n      add.pkg = \"schemapkg\";\n      add.files = Arrays.asList(new String[]{FILE1});\n      req = new V2Request.Builder(\"/cluster/package\")\n              .forceV2(true)\n              .withMethod(SolrRequest.METHOD.POST)\n              .withPayload(Collections.singletonMap(\"add\", add))\n              .build();\n      req.process(cluster.getSolrClient());\n\n      TestDistribPackageStore.assertResponseValues(10,\n              () -> new V2Request.Builder(\"/cluster/package\").\n                      withMethod(SolrRequest.METHOD.GET)\n                      .build().process(cluster.getSolrClient()),\n              Utils.makeMap(\n                      \":result:packages:schemapkg[0]:version\", \"2.0\",\n                      \":result:packages:schemapkg[0]:files[0]\", FILE1\n              ));\n\n      verifySchemaComponent(cluster.getSolrClient(), COLLECTION_NAME, \"/schema/fieldtypes/myNewTextFieldWithAnalyzerClass\",\n              Utils.makeMap(\":fieldType:analyzer:charFilters[0]:_packageinfo_:version\" ,\"2.0\",\n                      \":fieldType:analyzer:tokenizer:_packageinfo_:version\",\"2.0\",\n                      \":fieldType:_packageinfo_:version\",\"2.0\"));\n\n    } finally {\n      cluster.shutdown();\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9ac35455ac6925b629dedf2c0c52c0a8d5cb55b6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c99002731351c8c955238845b0038682148eec53","date":1596830766,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/pkg/TestPackages#testSchemaPlugins().mjava","pathOld":"solr/core/src/test/org/apache/solr/pkg/TestPackages#testSchemaPlugins().mjava","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  public void testSchemaPlugins() throws Exception {\n    String COLLECTION_NAME = \"testSchemaLoadingColl\";\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n\n    MiniSolrCloudCluster cluster =\n            configureCluster(4)\n                    .withJettyConfig(jetty -> jetty.enableV2(true))\n                    .addConfig(\"conf\", configset(\"cloud-managed\"))\n                    .configure();\n    try {\n      String FILE1 = \"/schemapkg/schema-plugins.jar\";\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n      postFileAndWait(cluster, \"runtimecode/schema-plugins.jar.bin\", FILE1,\n              \"iSRhrogDyt9P1htmSf/krh1kx9oty3TYyWm4GKHQGlb8a+X4tKCe9kKk+3tGs+bU9zq5JBZ5txNXsn96aZem5A==\");\n\n      Package.AddVersion add = new Package.AddVersion();\n      add.version = \"1.0\";\n      add.pkg = \"schemapkg\";\n      add.files = Arrays.asList(new String[]{FILE1});\n      V2Request req = new V2Request.Builder(\"/cluster/package\")\n              .forceV2(true)\n              .withMethod(SolrRequest.METHOD.POST)\n              .withPayload(Collections.singletonMap(\"add\", add))\n              .build();\n      req.process(cluster.getSolrClient());\n\n      TestDistribPackageStore.assertResponseValues(10,\n              () -> new V2Request.Builder(\"/cluster/package\").\n                      withMethod(SolrRequest.METHOD.GET)\n                      .build().process(cluster.getSolrClient()),\n              Utils.makeMap(\n                      \":result:packages:schemapkg[0]:version\", \"1.0\",\n                      \":result:packages:schemapkg[0]:files[0]\", FILE1\n              ));\n\n      CollectionAdminRequest\n              .createCollection(COLLECTION_NAME, \"conf\", 2, 2)\n              .process(cluster.getSolrClient());\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 4);\n\n      String addFieldTypeAnalyzerWithClass = \"{\\n\" +\n              \"'add-field-type' : {\" +\n              \"    'name' : 'myNewTextFieldWithAnalyzerClass',\\n\" +\n              \"    'class':'schemapkg:my.pkg.MyTextField',\\n\" +\n              \"    'analyzer' : {\\n\" +\n              \"        'luceneMatchVersion':'5.0.0'\" ;\n//          + \",\\n\" +\n//          \"        'class':'schemapkg:my.pkg.MyWhitespaceAnalyzer'\\n\";\n      String charFilters =\n              \"        'charFilters' : [{\\n\" +\n                      \"            'class':'schemapkg:my.pkg.MyPatternReplaceCharFilterFactory',\\n\" +\n                      \"            'replacement':'$1$1',\\n\" +\n                      \"            'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n                      \"        }],\\n\";\n      String tokenizer =\n              \"        'tokenizer' : { 'class':'schemapkg:my.pkg.MyWhitespaceTokenizerFactory' },\\n\";\n      String filters =\n              \"        'filters' : [{ 'class':'solr.ASCIIFoldingFilterFactory' }]\\n\";\n      String suffix = \"    }\\n\" +\n              \"}}\";\n      cluster.getSolrClient().request(new SolrRequest(SolrRequest.METHOD.POST, \"/schema\") {\n\n        @Override\n        public RequestWriter.ContentWriter getContentWriter(String expectedType) {\n          return new RequestWriter.StringPayloadContentWriter(addFieldTypeAnalyzerWithClass + ',' + charFilters + tokenizer + filters + suffix, CommonParams.JSON_MIME);\n        }\n\n        @Override\n        public SolrParams getParams() {\n          return null;\n        }\n\n        @Override\n        public String getCollection() {\n          return COLLECTION_NAME;\n        }\n\n        @Override\n        public SolrResponse createResponse(SolrClient client) {\n          return new SolrResponseBase();\n        }\n\n        @Override\n        public String getRequestType() {\n          return SolrRequestType.UNSPECIFIED.toString();\n        }\n      });\n      verifySchemaComponent(cluster.getSolrClient(), COLLECTION_NAME, \"/schema/fieldtypes/myNewTextFieldWithAnalyzerClass\",\n              Utils.makeMap(\":fieldType:analyzer:charFilters[0]:_packageinfo_:version\" ,\"1.0\",\n                      \":fieldType:analyzer:tokenizer:_packageinfo_:version\",\"1.0\",\n                      \":fieldType:_packageinfo_:version\",\"1.0\"));\n\n      add = new Package.AddVersion();\n      add.version = \"2.0\";\n      add.pkg = \"schemapkg\";\n      add.files = Arrays.asList(new String[]{FILE1});\n      req = new V2Request.Builder(\"/cluster/package\")\n              .forceV2(true)\n              .withMethod(SolrRequest.METHOD.POST)\n              .withPayload(Collections.singletonMap(\"add\", add))\n              .build();\n      req.process(cluster.getSolrClient());\n\n      TestDistribPackageStore.assertResponseValues(10,\n              () -> new V2Request.Builder(\"/cluster/package\").\n                      withMethod(SolrRequest.METHOD.GET)\n                      .build().process(cluster.getSolrClient()),\n              Utils.makeMap(\n                      \":result:packages:schemapkg[0]:version\", \"2.0\",\n                      \":result:packages:schemapkg[0]:files[0]\", FILE1\n              ));\n\n      verifySchemaComponent(cluster.getSolrClient(), COLLECTION_NAME, \"/schema/fieldtypes/myNewTextFieldWithAnalyzerClass\",\n              Utils.makeMap(\":fieldType:analyzer:charFilters[0]:_packageinfo_:version\" ,\"2.0\",\n                      \":fieldType:analyzer:tokenizer:_packageinfo_:version\",\"2.0\",\n                      \":fieldType:_packageinfo_:version\",\"2.0\"));\n\n    } finally {\n      cluster.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"rawtypes\")\n  public void testSchemaPlugins() throws Exception {\n    String COLLECTION_NAME = \"testSchemaLoadingColl\";\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n\n    MiniSolrCloudCluster cluster =\n            configureCluster(4)\n                    .withJettyConfig(jetty -> jetty.enableV2(true))\n                    .addConfig(\"conf\", configset(\"cloud-managed\"))\n                    .configure();\n    try {\n      String FILE1 = \"/schemapkg/schema-plugins.jar\";\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n      postFileAndWait(cluster, \"runtimecode/schema-plugins.jar.bin\", FILE1,\n              \"iSRhrogDyt9P1htmSf/krh1kx9oty3TYyWm4GKHQGlb8a+X4tKCe9kKk+3tGs+bU9zq5JBZ5txNXsn96aZem5A==\");\n\n      Package.AddVersion add = new Package.AddVersion();\n      add.version = \"1.0\";\n      add.pkg = \"schemapkg\";\n      add.files = Arrays.asList(new String[]{FILE1});\n      V2Request req = new V2Request.Builder(\"/cluster/package\")\n              .forceV2(true)\n              .withMethod(SolrRequest.METHOD.POST)\n              .withPayload(Collections.singletonMap(\"add\", add))\n              .build();\n      req.process(cluster.getSolrClient());\n\n      TestDistribPackageStore.assertResponseValues(10,\n              () -> new V2Request.Builder(\"/cluster/package\").\n                      withMethod(SolrRequest.METHOD.GET)\n                      .build().process(cluster.getSolrClient()),\n              Utils.makeMap(\n                      \":result:packages:schemapkg[0]:version\", \"1.0\",\n                      \":result:packages:schemapkg[0]:files[0]\", FILE1\n              ));\n\n      CollectionAdminRequest\n              .createCollection(COLLECTION_NAME, \"conf\", 2, 2)\n              .process(cluster.getSolrClient());\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 4);\n\n      String addFieldTypeAnalyzerWithClass = \"{\\n\" +\n              \"'add-field-type' : {\" +\n              \"    'name' : 'myNewTextFieldWithAnalyzerClass',\\n\" +\n              \"    'class':'schemapkg:my.pkg.MyTextField',\\n\" +\n              \"    'analyzer' : {\\n\" +\n              \"        'luceneMatchVersion':'5.0.0'\" ;\n//          + \",\\n\" +\n//          \"        'class':'schemapkg:my.pkg.MyWhitespaceAnalyzer'\\n\";\n      String charFilters =\n              \"        'charFilters' : [{\\n\" +\n                      \"            'class':'schemapkg:my.pkg.MyPatternReplaceCharFilterFactory',\\n\" +\n                      \"            'replacement':'$1$1',\\n\" +\n                      \"            'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n                      \"        }],\\n\";\n      String tokenizer =\n              \"        'tokenizer' : { 'class':'schemapkg:my.pkg.MyWhitespaceTokenizerFactory' },\\n\";\n      String filters =\n              \"        'filters' : [{ 'class':'solr.ASCIIFoldingFilterFactory' }]\\n\";\n      String suffix = \"    }\\n\" +\n              \"}}\";\n      cluster.getSolrClient().request(new SolrRequest(SolrRequest.METHOD.POST, \"/schema\") {\n\n        @Override\n        public RequestWriter.ContentWriter getContentWriter(String expectedType) {\n          return new RequestWriter.StringPayloadContentWriter(addFieldTypeAnalyzerWithClass + ',' + charFilters + tokenizer + filters + suffix, CommonParams.JSON_MIME);\n        }\n\n        @Override\n        public SolrParams getParams() {\n          return null;\n        }\n\n        @Override\n        public String getCollection() {\n          return COLLECTION_NAME;\n        }\n\n        @Override\n        public SolrResponse createResponse(SolrClient client) {\n          return new SolrResponseBase();\n        }\n      });\n      verifySchemaComponent(cluster.getSolrClient(), COLLECTION_NAME, \"/schema/fieldtypes/myNewTextFieldWithAnalyzerClass\",\n              Utils.makeMap(\":fieldType:analyzer:charFilters[0]:_packageinfo_:version\" ,\"1.0\",\n                      \":fieldType:analyzer:tokenizer:_packageinfo_:version\",\"1.0\",\n                      \":fieldType:_packageinfo_:version\",\"1.0\"));\n\n      add = new Package.AddVersion();\n      add.version = \"2.0\";\n      add.pkg = \"schemapkg\";\n      add.files = Arrays.asList(new String[]{FILE1});\n      req = new V2Request.Builder(\"/cluster/package\")\n              .forceV2(true)\n              .withMethod(SolrRequest.METHOD.POST)\n              .withPayload(Collections.singletonMap(\"add\", add))\n              .build();\n      req.process(cluster.getSolrClient());\n\n      TestDistribPackageStore.assertResponseValues(10,\n              () -> new V2Request.Builder(\"/cluster/package\").\n                      withMethod(SolrRequest.METHOD.GET)\n                      .build().process(cluster.getSolrClient()),\n              Utils.makeMap(\n                      \":result:packages:schemapkg[0]:version\", \"2.0\",\n                      \":result:packages:schemapkg[0]:files[0]\", FILE1\n              ));\n\n      verifySchemaComponent(cluster.getSolrClient(), COLLECTION_NAME, \"/schema/fieldtypes/myNewTextFieldWithAnalyzerClass\",\n              Utils.makeMap(\":fieldType:analyzer:charFilters[0]:_packageinfo_:version\" ,\"2.0\",\n                      \":fieldType:analyzer:tokenizer:_packageinfo_:version\",\"2.0\",\n                      \":fieldType:_packageinfo_:version\",\"2.0\"));\n\n    } finally {\n      cluster.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0c1f39a1c5a00532404e216378a8157523b83551","date":1597798332,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/pkg/TestPackages#testSchemaPlugins().mjava","pathOld":"solr/core/src/test/org/apache/solr/pkg/TestPackages#testSchemaPlugins().mjava","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  @Ignore(\"SOLR-14750\")\n  public void testSchemaPlugins() throws Exception {\n    String COLLECTION_NAME = \"testSchemaLoadingColl\";\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n\n    MiniSolrCloudCluster cluster =\n            configureCluster(4)\n                    .withJettyConfig(jetty -> jetty.enableV2(true))\n                    .addConfig(\"conf\", configset(\"cloud-managed\"))\n                    .configure();\n    try {\n      String FILE1 = \"/schemapkg/schema-plugins.jar\";\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n      postFileAndWait(cluster, \"runtimecode/schema-plugins.jar.bin\", FILE1,\n              \"iSRhrogDyt9P1htmSf/krh1kx9oty3TYyWm4GKHQGlb8a+X4tKCe9kKk+3tGs+bU9zq5JBZ5txNXsn96aZem5A==\");\n\n      Package.AddVersion add = new Package.AddVersion();\n      add.version = \"1.0\";\n      add.pkg = \"schemapkg\";\n      add.files = Arrays.asList(new String[]{FILE1});\n      V2Request req = new V2Request.Builder(\"/cluster/package\")\n              .forceV2(true)\n              .withMethod(SolrRequest.METHOD.POST)\n              .withPayload(Collections.singletonMap(\"add\", add))\n              .build();\n      req.process(cluster.getSolrClient());\n\n      TestDistribPackageStore.assertResponseValues(10,\n              () -> new V2Request.Builder(\"/cluster/package\").\n                      withMethod(SolrRequest.METHOD.GET)\n                      .build().process(cluster.getSolrClient()),\n              Utils.makeMap(\n                      \":result:packages:schemapkg[0]:version\", \"1.0\",\n                      \":result:packages:schemapkg[0]:files[0]\", FILE1\n              ));\n\n      CollectionAdminRequest\n              .createCollection(COLLECTION_NAME, \"conf\", 2, 2)\n              .process(cluster.getSolrClient());\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 4);\n\n      String addFieldTypeAnalyzerWithClass = \"{\\n\" +\n              \"'add-field-type' : {\" +\n              \"    'name' : 'myNewTextFieldWithAnalyzerClass',\\n\" +\n              \"    'class':'schemapkg:my.pkg.MyTextField',\\n\" +\n              \"    'analyzer' : {\\n\" +\n              \"        'luceneMatchVersion':'5.0.0'\" ;\n//          + \",\\n\" +\n//          \"        'class':'schemapkg:my.pkg.MyWhitespaceAnalyzer'\\n\";\n      String charFilters =\n              \"        'charFilters' : [{\\n\" +\n                      \"            'class':'schemapkg:my.pkg.MyPatternReplaceCharFilterFactory',\\n\" +\n                      \"            'replacement':'$1$1',\\n\" +\n                      \"            'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n                      \"        }],\\n\";\n      String tokenizer =\n              \"        'tokenizer' : { 'class':'schemapkg:my.pkg.MyWhitespaceTokenizerFactory' },\\n\";\n      String filters =\n              \"        'filters' : [{ 'class':'solr.ASCIIFoldingFilterFactory' }]\\n\";\n      String suffix = \"    }\\n\" +\n              \"}}\";\n      cluster.getSolrClient().request(new SolrRequest(SolrRequest.METHOD.POST, \"/schema\") {\n\n        @Override\n        public RequestWriter.ContentWriter getContentWriter(String expectedType) {\n          return new RequestWriter.StringPayloadContentWriter(addFieldTypeAnalyzerWithClass + ',' + charFilters + tokenizer + filters + suffix, CommonParams.JSON_MIME);\n        }\n\n        @Override\n        public SolrParams getParams() {\n          return null;\n        }\n\n        @Override\n        public String getCollection() {\n          return COLLECTION_NAME;\n        }\n\n        @Override\n        public SolrResponse createResponse(SolrClient client) {\n          return new SolrResponseBase();\n        }\n\n        @Override\n        public String getRequestType() {\n          return SolrRequestType.UNSPECIFIED.toString();\n        }\n      });\n      verifySchemaComponent(cluster.getSolrClient(), COLLECTION_NAME, \"/schema/fieldtypes/myNewTextFieldWithAnalyzerClass\",\n              Utils.makeMap(\":fieldType:analyzer:charFilters[0]:_packageinfo_:version\" ,\"1.0\",\n                      \":fieldType:analyzer:tokenizer:_packageinfo_:version\",\"1.0\",\n                      \":fieldType:_packageinfo_:version\",\"1.0\"));\n\n      add = new Package.AddVersion();\n      add.version = \"2.0\";\n      add.pkg = \"schemapkg\";\n      add.files = Arrays.asList(new String[]{FILE1});\n      req = new V2Request.Builder(\"/cluster/package\")\n              .forceV2(true)\n              .withMethod(SolrRequest.METHOD.POST)\n              .withPayload(Collections.singletonMap(\"add\", add))\n              .build();\n      req.process(cluster.getSolrClient());\n\n      TestDistribPackageStore.assertResponseValues(10,\n              () -> new V2Request.Builder(\"/cluster/package\").\n                      withMethod(SolrRequest.METHOD.GET)\n                      .build().process(cluster.getSolrClient()),\n              Utils.makeMap(\n                      \":result:packages:schemapkg[0]:version\", \"2.0\",\n                      \":result:packages:schemapkg[0]:files[0]\", FILE1\n              ));\n\n      verifySchemaComponent(cluster.getSolrClient(), COLLECTION_NAME, \"/schema/fieldtypes/myNewTextFieldWithAnalyzerClass\",\n              Utils.makeMap(\":fieldType:analyzer:charFilters[0]:_packageinfo_:version\" ,\"2.0\",\n                      \":fieldType:analyzer:tokenizer:_packageinfo_:version\",\"2.0\",\n                      \":fieldType:_packageinfo_:version\",\"2.0\"));\n\n    } finally {\n      cluster.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"rawtypes\")\n  public void testSchemaPlugins() throws Exception {\n    String COLLECTION_NAME = \"testSchemaLoadingColl\";\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n\n    MiniSolrCloudCluster cluster =\n            configureCluster(4)\n                    .withJettyConfig(jetty -> jetty.enableV2(true))\n                    .addConfig(\"conf\", configset(\"cloud-managed\"))\n                    .configure();\n    try {\n      String FILE1 = \"/schemapkg/schema-plugins.jar\";\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n      postFileAndWait(cluster, \"runtimecode/schema-plugins.jar.bin\", FILE1,\n              \"iSRhrogDyt9P1htmSf/krh1kx9oty3TYyWm4GKHQGlb8a+X4tKCe9kKk+3tGs+bU9zq5JBZ5txNXsn96aZem5A==\");\n\n      Package.AddVersion add = new Package.AddVersion();\n      add.version = \"1.0\";\n      add.pkg = \"schemapkg\";\n      add.files = Arrays.asList(new String[]{FILE1});\n      V2Request req = new V2Request.Builder(\"/cluster/package\")\n              .forceV2(true)\n              .withMethod(SolrRequest.METHOD.POST)\n              .withPayload(Collections.singletonMap(\"add\", add))\n              .build();\n      req.process(cluster.getSolrClient());\n\n      TestDistribPackageStore.assertResponseValues(10,\n              () -> new V2Request.Builder(\"/cluster/package\").\n                      withMethod(SolrRequest.METHOD.GET)\n                      .build().process(cluster.getSolrClient()),\n              Utils.makeMap(\n                      \":result:packages:schemapkg[0]:version\", \"1.0\",\n                      \":result:packages:schemapkg[0]:files[0]\", FILE1\n              ));\n\n      CollectionAdminRequest\n              .createCollection(COLLECTION_NAME, \"conf\", 2, 2)\n              .process(cluster.getSolrClient());\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 4);\n\n      String addFieldTypeAnalyzerWithClass = \"{\\n\" +\n              \"'add-field-type' : {\" +\n              \"    'name' : 'myNewTextFieldWithAnalyzerClass',\\n\" +\n              \"    'class':'schemapkg:my.pkg.MyTextField',\\n\" +\n              \"    'analyzer' : {\\n\" +\n              \"        'luceneMatchVersion':'5.0.0'\" ;\n//          + \",\\n\" +\n//          \"        'class':'schemapkg:my.pkg.MyWhitespaceAnalyzer'\\n\";\n      String charFilters =\n              \"        'charFilters' : [{\\n\" +\n                      \"            'class':'schemapkg:my.pkg.MyPatternReplaceCharFilterFactory',\\n\" +\n                      \"            'replacement':'$1$1',\\n\" +\n                      \"            'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n                      \"        }],\\n\";\n      String tokenizer =\n              \"        'tokenizer' : { 'class':'schemapkg:my.pkg.MyWhitespaceTokenizerFactory' },\\n\";\n      String filters =\n              \"        'filters' : [{ 'class':'solr.ASCIIFoldingFilterFactory' }]\\n\";\n      String suffix = \"    }\\n\" +\n              \"}}\";\n      cluster.getSolrClient().request(new SolrRequest(SolrRequest.METHOD.POST, \"/schema\") {\n\n        @Override\n        public RequestWriter.ContentWriter getContentWriter(String expectedType) {\n          return new RequestWriter.StringPayloadContentWriter(addFieldTypeAnalyzerWithClass + ',' + charFilters + tokenizer + filters + suffix, CommonParams.JSON_MIME);\n        }\n\n        @Override\n        public SolrParams getParams() {\n          return null;\n        }\n\n        @Override\n        public String getCollection() {\n          return COLLECTION_NAME;\n        }\n\n        @Override\n        public SolrResponse createResponse(SolrClient client) {\n          return new SolrResponseBase();\n        }\n\n        @Override\n        public String getRequestType() {\n          return SolrRequestType.UNSPECIFIED.toString();\n        }\n      });\n      verifySchemaComponent(cluster.getSolrClient(), COLLECTION_NAME, \"/schema/fieldtypes/myNewTextFieldWithAnalyzerClass\",\n              Utils.makeMap(\":fieldType:analyzer:charFilters[0]:_packageinfo_:version\" ,\"1.0\",\n                      \":fieldType:analyzer:tokenizer:_packageinfo_:version\",\"1.0\",\n                      \":fieldType:_packageinfo_:version\",\"1.0\"));\n\n      add = new Package.AddVersion();\n      add.version = \"2.0\";\n      add.pkg = \"schemapkg\";\n      add.files = Arrays.asList(new String[]{FILE1});\n      req = new V2Request.Builder(\"/cluster/package\")\n              .forceV2(true)\n              .withMethod(SolrRequest.METHOD.POST)\n              .withPayload(Collections.singletonMap(\"add\", add))\n              .build();\n      req.process(cluster.getSolrClient());\n\n      TestDistribPackageStore.assertResponseValues(10,\n              () -> new V2Request.Builder(\"/cluster/package\").\n                      withMethod(SolrRequest.METHOD.GET)\n                      .build().process(cluster.getSolrClient()),\n              Utils.makeMap(\n                      \":result:packages:schemapkg[0]:version\", \"2.0\",\n                      \":result:packages:schemapkg[0]:files[0]\", FILE1\n              ));\n\n      verifySchemaComponent(cluster.getSolrClient(), COLLECTION_NAME, \"/schema/fieldtypes/myNewTextFieldWithAnalyzerClass\",\n              Utils.makeMap(\":fieldType:analyzer:charFilters[0]:_packageinfo_:version\" ,\"2.0\",\n                      \":fieldType:analyzer:tokenizer:_packageinfo_:version\",\"2.0\",\n                      \":fieldType:_packageinfo_:version\",\"2.0\"));\n\n    } finally {\n      cluster.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1fc1087854af39c9b439f47d913fd3ac1d85ac5c","date":1599523122,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/pkg/TestPackages#testSchemaPlugins().mjava","pathOld":"solr/core/src/test/org/apache/solr/pkg/TestPackages#testSchemaPlugins().mjava","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  public void testSchemaPlugins() throws Exception {\n    String COLLECTION_NAME = \"testSchemaLoadingColl\";\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n\n    MiniSolrCloudCluster cluster =\n            configureCluster(4)\n                    .withJettyConfig(jetty -> jetty.enableV2(true))\n                    .addConfig(\"conf\", configset(\"cloud-managed\"))\n                    .configure();\n    try {\n      String FILE1 = \"/schemapkg/schema-plugins.jar\";\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n      postFileAndWait(cluster, \"runtimecode/schema-plugins.jar.bin\", FILE1,\n              \"iSRhrogDyt9P1htmSf/krh1kx9oty3TYyWm4GKHQGlb8a+X4tKCe9kKk+3tGs+bU9zq5JBZ5txNXsn96aZem5A==\");\n\n      Package.AddVersion add = new Package.AddVersion();\n      add.version = \"1.0\";\n      add.pkg = \"schemapkg\";\n      add.files = Arrays.asList(new String[]{FILE1});\n      V2Request req = new V2Request.Builder(\"/cluster/package\")\n              .forceV2(true)\n              .withMethod(SolrRequest.METHOD.POST)\n              .withPayload(Collections.singletonMap(\"add\", add))\n              .build();\n      req.process(cluster.getSolrClient());\n\n      TestDistribPackageStore.assertResponseValues(10,\n              () -> new V2Request.Builder(\"/cluster/package\").\n                      withMethod(SolrRequest.METHOD.GET)\n                      .build().process(cluster.getSolrClient()),\n              Utils.makeMap(\n                      \":result:packages:schemapkg[0]:version\", \"1.0\",\n                      \":result:packages:schemapkg[0]:files[0]\", FILE1\n              ));\n\n      CollectionAdminRequest\n              .createCollection(COLLECTION_NAME, \"conf\", 2, 2)\n              .process(cluster.getSolrClient());\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 4);\n\n      String addFieldTypeAnalyzerWithClass = \"{\\n\" +\n              \"'add-field-type' : {\" +\n              \"    'name' : 'myNewTextFieldWithAnalyzerClass',\\n\" +\n              \"    'class':'schemapkg:my.pkg.MyTextField',\\n\" +\n              \"    'analyzer' : {\\n\" +\n              \"        'luceneMatchVersion':'5.0.0'\" ;\n//          + \",\\n\" +\n//          \"        'class':'schemapkg:my.pkg.MyWhitespaceAnalyzer'\\n\";\n      String charFilters =\n              \"        'charFilters' : [{\\n\" +\n                      \"            'class':'schemapkg:my.pkg.MyPatternReplaceCharFilterFactory',\\n\" +\n                      \"            'replacement':'$1$1',\\n\" +\n                      \"            'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n                      \"        }],\\n\";\n      String tokenizer =\n              \"        'tokenizer' : { 'class':'schemapkg:my.pkg.MyWhitespaceTokenizerFactory' },\\n\";\n      String filters =\n              \"        'filters' : [{ 'class':'solr.ASCIIFoldingFilterFactory' }]\\n\";\n      String suffix = \"    }\\n\" +\n              \"}}\";\n      cluster.getSolrClient().request(new SolrRequest(SolrRequest.METHOD.POST, \"/schema\") {\n\n        @Override\n        public RequestWriter.ContentWriter getContentWriter(String expectedType) {\n          return new RequestWriter.StringPayloadContentWriter(addFieldTypeAnalyzerWithClass + ',' + charFilters + tokenizer + filters + suffix, CommonParams.JSON_MIME);\n        }\n\n        @Override\n        public SolrParams getParams() {\n          return null;\n        }\n\n        @Override\n        public String getCollection() {\n          return COLLECTION_NAME;\n        }\n\n        @Override\n        public SolrResponse createResponse(SolrClient client) {\n          return new SolrResponseBase();\n        }\n\n        @Override\n        public String getRequestType() {\n          return SolrRequestType.UNSPECIFIED.toString();\n        }\n      });\n      verifySchemaComponent(cluster.getSolrClient(), COLLECTION_NAME, \"/schema/fieldtypes/myNewTextFieldWithAnalyzerClass\",\n              Utils.makeMap(\":fieldType:analyzer:charFilters[0]:_packageinfo_:version\" ,\"1.0\",\n                      \":fieldType:analyzer:tokenizer:_packageinfo_:version\",\"1.0\",\n                      \":fieldType:_packageinfo_:version\",\"1.0\"));\n\n      add = new Package.AddVersion();\n      add.version = \"2.0\";\n      add.pkg = \"schemapkg\";\n      add.files = Arrays.asList(new String[]{FILE1});\n      req = new V2Request.Builder(\"/cluster/package\")\n              .forceV2(true)\n              .withMethod(SolrRequest.METHOD.POST)\n              .withPayload(Collections.singletonMap(\"add\", add))\n              .build();\n      req.process(cluster.getSolrClient());\n\n      TestDistribPackageStore.assertResponseValues(10,\n              () -> new V2Request.Builder(\"/cluster/package\").\n                      withMethod(SolrRequest.METHOD.GET)\n                      .build().process(cluster.getSolrClient()),\n              Utils.makeMap(\n                      \":result:packages:schemapkg[0]:version\", \"2.0\",\n                      \":result:packages:schemapkg[0]:files[0]\", FILE1\n              ));\n\n      verifySchemaComponent(cluster.getSolrClient(), COLLECTION_NAME, \"/schema/fieldtypes/myNewTextFieldWithAnalyzerClass\",\n              Utils.makeMap(\":fieldType:analyzer:charFilters[0]:_packageinfo_:version\" ,\"2.0\",\n                      \":fieldType:analyzer:tokenizer:_packageinfo_:version\",\"2.0\",\n                      \":fieldType:_packageinfo_:version\",\"2.0\"));\n\n    } finally {\n      cluster.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"rawtypes\")\n  @Ignore(\"SOLR-14750\")\n  public void testSchemaPlugins() throws Exception {\n    String COLLECTION_NAME = \"testSchemaLoadingColl\";\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n\n    MiniSolrCloudCluster cluster =\n            configureCluster(4)\n                    .withJettyConfig(jetty -> jetty.enableV2(true))\n                    .addConfig(\"conf\", configset(\"cloud-managed\"))\n                    .configure();\n    try {\n      String FILE1 = \"/schemapkg/schema-plugins.jar\";\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n      postFileAndWait(cluster, \"runtimecode/schema-plugins.jar.bin\", FILE1,\n              \"iSRhrogDyt9P1htmSf/krh1kx9oty3TYyWm4GKHQGlb8a+X4tKCe9kKk+3tGs+bU9zq5JBZ5txNXsn96aZem5A==\");\n\n      Package.AddVersion add = new Package.AddVersion();\n      add.version = \"1.0\";\n      add.pkg = \"schemapkg\";\n      add.files = Arrays.asList(new String[]{FILE1});\n      V2Request req = new V2Request.Builder(\"/cluster/package\")\n              .forceV2(true)\n              .withMethod(SolrRequest.METHOD.POST)\n              .withPayload(Collections.singletonMap(\"add\", add))\n              .build();\n      req.process(cluster.getSolrClient());\n\n      TestDistribPackageStore.assertResponseValues(10,\n              () -> new V2Request.Builder(\"/cluster/package\").\n                      withMethod(SolrRequest.METHOD.GET)\n                      .build().process(cluster.getSolrClient()),\n              Utils.makeMap(\n                      \":result:packages:schemapkg[0]:version\", \"1.0\",\n                      \":result:packages:schemapkg[0]:files[0]\", FILE1\n              ));\n\n      CollectionAdminRequest\n              .createCollection(COLLECTION_NAME, \"conf\", 2, 2)\n              .process(cluster.getSolrClient());\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 4);\n\n      String addFieldTypeAnalyzerWithClass = \"{\\n\" +\n              \"'add-field-type' : {\" +\n              \"    'name' : 'myNewTextFieldWithAnalyzerClass',\\n\" +\n              \"    'class':'schemapkg:my.pkg.MyTextField',\\n\" +\n              \"    'analyzer' : {\\n\" +\n              \"        'luceneMatchVersion':'5.0.0'\" ;\n//          + \",\\n\" +\n//          \"        'class':'schemapkg:my.pkg.MyWhitespaceAnalyzer'\\n\";\n      String charFilters =\n              \"        'charFilters' : [{\\n\" +\n                      \"            'class':'schemapkg:my.pkg.MyPatternReplaceCharFilterFactory',\\n\" +\n                      \"            'replacement':'$1$1',\\n\" +\n                      \"            'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n                      \"        }],\\n\";\n      String tokenizer =\n              \"        'tokenizer' : { 'class':'schemapkg:my.pkg.MyWhitespaceTokenizerFactory' },\\n\";\n      String filters =\n              \"        'filters' : [{ 'class':'solr.ASCIIFoldingFilterFactory' }]\\n\";\n      String suffix = \"    }\\n\" +\n              \"}}\";\n      cluster.getSolrClient().request(new SolrRequest(SolrRequest.METHOD.POST, \"/schema\") {\n\n        @Override\n        public RequestWriter.ContentWriter getContentWriter(String expectedType) {\n          return new RequestWriter.StringPayloadContentWriter(addFieldTypeAnalyzerWithClass + ',' + charFilters + tokenizer + filters + suffix, CommonParams.JSON_MIME);\n        }\n\n        @Override\n        public SolrParams getParams() {\n          return null;\n        }\n\n        @Override\n        public String getCollection() {\n          return COLLECTION_NAME;\n        }\n\n        @Override\n        public SolrResponse createResponse(SolrClient client) {\n          return new SolrResponseBase();\n        }\n\n        @Override\n        public String getRequestType() {\n          return SolrRequestType.UNSPECIFIED.toString();\n        }\n      });\n      verifySchemaComponent(cluster.getSolrClient(), COLLECTION_NAME, \"/schema/fieldtypes/myNewTextFieldWithAnalyzerClass\",\n              Utils.makeMap(\":fieldType:analyzer:charFilters[0]:_packageinfo_:version\" ,\"1.0\",\n                      \":fieldType:analyzer:tokenizer:_packageinfo_:version\",\"1.0\",\n                      \":fieldType:_packageinfo_:version\",\"1.0\"));\n\n      add = new Package.AddVersion();\n      add.version = \"2.0\";\n      add.pkg = \"schemapkg\";\n      add.files = Arrays.asList(new String[]{FILE1});\n      req = new V2Request.Builder(\"/cluster/package\")\n              .forceV2(true)\n              .withMethod(SolrRequest.METHOD.POST)\n              .withPayload(Collections.singletonMap(\"add\", add))\n              .build();\n      req.process(cluster.getSolrClient());\n\n      TestDistribPackageStore.assertResponseValues(10,\n              () -> new V2Request.Builder(\"/cluster/package\").\n                      withMethod(SolrRequest.METHOD.GET)\n                      .build().process(cluster.getSolrClient()),\n              Utils.makeMap(\n                      \":result:packages:schemapkg[0]:version\", \"2.0\",\n                      \":result:packages:schemapkg[0]:files[0]\", FILE1\n              ));\n\n      verifySchemaComponent(cluster.getSolrClient(), COLLECTION_NAME, \"/schema/fieldtypes/myNewTextFieldWithAnalyzerClass\",\n              Utils.makeMap(\":fieldType:analyzer:charFilters[0]:_packageinfo_:version\" ,\"2.0\",\n                      \":fieldType:analyzer:tokenizer:_packageinfo_:version\",\"2.0\",\n                      \":fieldType:_packageinfo_:version\",\"2.0\"));\n\n    } finally {\n      cluster.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"938fe8fd4d30ae70161827366f67c2382985e446","date":1600050178,"type":3,"author":"noblepaul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/pkg/TestPackages#testSchemaPlugins().mjava","pathOld":"solr/core/src/test/org/apache/solr/pkg/TestPackages#testSchemaPlugins().mjava","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  @Ignore(\"SOLR-14750\")\n  public void testSchemaPlugins() throws Exception {\n    String COLLECTION_NAME = \"testSchemaLoadingColl\";\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n\n    MiniSolrCloudCluster cluster =\n            configureCluster(4)\n                    .withJettyConfig(jetty -> jetty.enableV2(true))\n                    .addConfig(\"conf\", configset(\"cloud-managed\"))\n                    .configure();\n    try {\n      String FILE1 = \"/schemapkg/schema-plugins.jar\";\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n      postFileAndWait(cluster, \"runtimecode/schema-plugins.jar.bin\", FILE1,\n              \"iSRhrogDyt9P1htmSf/krh1kx9oty3TYyWm4GKHQGlb8a+X4tKCe9kKk+3tGs+bU9zq5JBZ5txNXsn96aZem5A==\");\n\n      Package.AddVersion add = new Package.AddVersion();\n      add.version = \"1.0\";\n      add.pkg = \"schemapkg\";\n      add.files = Arrays.asList(new String[]{FILE1});\n      V2Request req = new V2Request.Builder(\"/cluster/package\")\n              .forceV2(true)\n              .withMethod(SolrRequest.METHOD.POST)\n              .withPayload(Collections.singletonMap(\"add\", add))\n              .build();\n      req.process(cluster.getSolrClient());\n\n      TestDistribPackageStore.assertResponseValues(10,\n              () -> new V2Request.Builder(\"/cluster/package\").\n                      withMethod(SolrRequest.METHOD.GET)\n                      .build().process(cluster.getSolrClient()),\n              Utils.makeMap(\n                      \":result:packages:schemapkg[0]:version\", \"1.0\",\n                      \":result:packages:schemapkg[0]:files[0]\", FILE1\n              ));\n\n      CollectionAdminRequest\n              .createCollection(COLLECTION_NAME, \"conf\", 2, 2)\n              .process(cluster.getSolrClient());\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 4);\n\n      String addFieldTypeAnalyzerWithClass = \"{\\n\" +\n              \"'add-field-type' : {\" +\n              \"    'name' : 'myNewTextFieldWithAnalyzerClass',\\n\" +\n              \"    'class':'schemapkg:my.pkg.MyTextField',\\n\" +\n              \"    'analyzer' : {\\n\" +\n              \"        'luceneMatchVersion':'5.0.0'\" ;\n//          + \",\\n\" +\n//          \"        'class':'schemapkg:my.pkg.MyWhitespaceAnalyzer'\\n\";\n      String charFilters =\n              \"        'charFilters' : [{\\n\" +\n                      \"            'class':'schemapkg:my.pkg.MyPatternReplaceCharFilterFactory',\\n\" +\n                      \"            'replacement':'$1$1',\\n\" +\n                      \"            'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n                      \"        }],\\n\";\n      String tokenizer =\n              \"        'tokenizer' : { 'class':'schemapkg:my.pkg.MyWhitespaceTokenizerFactory' },\\n\";\n      String filters =\n              \"        'filters' : [{ 'class':'solr.ASCIIFoldingFilterFactory' }]\\n\";\n      String suffix = \"    }\\n\" +\n              \"}}\";\n      cluster.getSolrClient().request(new SolrRequest(SolrRequest.METHOD.POST, \"/schema\") {\n\n        @Override\n        public RequestWriter.ContentWriter getContentWriter(String expectedType) {\n          return new RequestWriter.StringPayloadContentWriter(addFieldTypeAnalyzerWithClass + ',' + charFilters + tokenizer + filters + suffix, CommonParams.JSON_MIME);\n        }\n\n        @Override\n        public SolrParams getParams() {\n          return null;\n        }\n\n        @Override\n        public String getCollection() {\n          return COLLECTION_NAME;\n        }\n\n        @Override\n        public SolrResponse createResponse(SolrClient client) {\n          return new SolrResponseBase();\n        }\n\n        @Override\n        public String getRequestType() {\n          return SolrRequestType.UNSPECIFIED.toString();\n        }\n      });\n      verifySchemaComponent(cluster.getSolrClient(), COLLECTION_NAME, \"/schema/fieldtypes/myNewTextFieldWithAnalyzerClass\",\n              Utils.makeMap(\":fieldType:analyzer:charFilters[0]:_packageinfo_:version\" ,\"1.0\",\n                      \":fieldType:analyzer:tokenizer:_packageinfo_:version\",\"1.0\",\n                      \":fieldType:_packageinfo_:version\",\"1.0\"));\n\n      add = new Package.AddVersion();\n      add.version = \"2.0\";\n      add.pkg = \"schemapkg\";\n      add.files = Arrays.asList(new String[]{FILE1});\n      req = new V2Request.Builder(\"/cluster/package\")\n              .forceV2(true)\n              .withMethod(SolrRequest.METHOD.POST)\n              .withPayload(Collections.singletonMap(\"add\", add))\n              .build();\n      req.process(cluster.getSolrClient());\n\n      TestDistribPackageStore.assertResponseValues(10,\n              () -> new V2Request.Builder(\"/cluster/package\").\n                      withMethod(SolrRequest.METHOD.GET)\n                      .build().process(cluster.getSolrClient()),\n              Utils.makeMap(\n                      \":result:packages:schemapkg[0]:version\", \"2.0\",\n                      \":result:packages:schemapkg[0]:files[0]\", FILE1\n              ));\n\n      verifySchemaComponent(cluster.getSolrClient(), COLLECTION_NAME, \"/schema/fieldtypes/myNewTextFieldWithAnalyzerClass\",\n              Utils.makeMap(\":fieldType:analyzer:charFilters[0]:_packageinfo_:version\" ,\"2.0\",\n                      \":fieldType:analyzer:tokenizer:_packageinfo_:version\",\"2.0\",\n                      \":fieldType:_packageinfo_:version\",\"2.0\"));\n\n    } finally {\n      cluster.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"rawtypes\")\n  public void testSchemaPlugins() throws Exception {\n    String COLLECTION_NAME = \"testSchemaLoadingColl\";\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n\n    MiniSolrCloudCluster cluster =\n            configureCluster(4)\n                    .withJettyConfig(jetty -> jetty.enableV2(true))\n                    .addConfig(\"conf\", configset(\"cloud-managed\"))\n                    .configure();\n    try {\n      String FILE1 = \"/schemapkg/schema-plugins.jar\";\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n      postFileAndWait(cluster, \"runtimecode/schema-plugins.jar.bin\", FILE1,\n              \"iSRhrogDyt9P1htmSf/krh1kx9oty3TYyWm4GKHQGlb8a+X4tKCe9kKk+3tGs+bU9zq5JBZ5txNXsn96aZem5A==\");\n\n      Package.AddVersion add = new Package.AddVersion();\n      add.version = \"1.0\";\n      add.pkg = \"schemapkg\";\n      add.files = Arrays.asList(new String[]{FILE1});\n      V2Request req = new V2Request.Builder(\"/cluster/package\")\n              .forceV2(true)\n              .withMethod(SolrRequest.METHOD.POST)\n              .withPayload(Collections.singletonMap(\"add\", add))\n              .build();\n      req.process(cluster.getSolrClient());\n\n      TestDistribPackageStore.assertResponseValues(10,\n              () -> new V2Request.Builder(\"/cluster/package\").\n                      withMethod(SolrRequest.METHOD.GET)\n                      .build().process(cluster.getSolrClient()),\n              Utils.makeMap(\n                      \":result:packages:schemapkg[0]:version\", \"1.0\",\n                      \":result:packages:schemapkg[0]:files[0]\", FILE1\n              ));\n\n      CollectionAdminRequest\n              .createCollection(COLLECTION_NAME, \"conf\", 2, 2)\n              .process(cluster.getSolrClient());\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 4);\n\n      String addFieldTypeAnalyzerWithClass = \"{\\n\" +\n              \"'add-field-type' : {\" +\n              \"    'name' : 'myNewTextFieldWithAnalyzerClass',\\n\" +\n              \"    'class':'schemapkg:my.pkg.MyTextField',\\n\" +\n              \"    'analyzer' : {\\n\" +\n              \"        'luceneMatchVersion':'5.0.0'\" ;\n//          + \",\\n\" +\n//          \"        'class':'schemapkg:my.pkg.MyWhitespaceAnalyzer'\\n\";\n      String charFilters =\n              \"        'charFilters' : [{\\n\" +\n                      \"            'class':'schemapkg:my.pkg.MyPatternReplaceCharFilterFactory',\\n\" +\n                      \"            'replacement':'$1$1',\\n\" +\n                      \"            'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n                      \"        }],\\n\";\n      String tokenizer =\n              \"        'tokenizer' : { 'class':'schemapkg:my.pkg.MyWhitespaceTokenizerFactory' },\\n\";\n      String filters =\n              \"        'filters' : [{ 'class':'solr.ASCIIFoldingFilterFactory' }]\\n\";\n      String suffix = \"    }\\n\" +\n              \"}}\";\n      cluster.getSolrClient().request(new SolrRequest(SolrRequest.METHOD.POST, \"/schema\") {\n\n        @Override\n        public RequestWriter.ContentWriter getContentWriter(String expectedType) {\n          return new RequestWriter.StringPayloadContentWriter(addFieldTypeAnalyzerWithClass + ',' + charFilters + tokenizer + filters + suffix, CommonParams.JSON_MIME);\n        }\n\n        @Override\n        public SolrParams getParams() {\n          return null;\n        }\n\n        @Override\n        public String getCollection() {\n          return COLLECTION_NAME;\n        }\n\n        @Override\n        public SolrResponse createResponse(SolrClient client) {\n          return new SolrResponseBase();\n        }\n\n        @Override\n        public String getRequestType() {\n          return SolrRequestType.UNSPECIFIED.toString();\n        }\n      });\n      verifySchemaComponent(cluster.getSolrClient(), COLLECTION_NAME, \"/schema/fieldtypes/myNewTextFieldWithAnalyzerClass\",\n              Utils.makeMap(\":fieldType:analyzer:charFilters[0]:_packageinfo_:version\" ,\"1.0\",\n                      \":fieldType:analyzer:tokenizer:_packageinfo_:version\",\"1.0\",\n                      \":fieldType:_packageinfo_:version\",\"1.0\"));\n\n      add = new Package.AddVersion();\n      add.version = \"2.0\";\n      add.pkg = \"schemapkg\";\n      add.files = Arrays.asList(new String[]{FILE1});\n      req = new V2Request.Builder(\"/cluster/package\")\n              .forceV2(true)\n              .withMethod(SolrRequest.METHOD.POST)\n              .withPayload(Collections.singletonMap(\"add\", add))\n              .build();\n      req.process(cluster.getSolrClient());\n\n      TestDistribPackageStore.assertResponseValues(10,\n              () -> new V2Request.Builder(\"/cluster/package\").\n                      withMethod(SolrRequest.METHOD.GET)\n                      .build().process(cluster.getSolrClient()),\n              Utils.makeMap(\n                      \":result:packages:schemapkg[0]:version\", \"2.0\",\n                      \":result:packages:schemapkg[0]:files[0]\", FILE1\n              ));\n\n      verifySchemaComponent(cluster.getSolrClient(), COLLECTION_NAME, \"/schema/fieldtypes/myNewTextFieldWithAnalyzerClass\",\n              Utils.makeMap(\":fieldType:analyzer:charFilters[0]:_packageinfo_:version\" ,\"2.0\",\n                      \":fieldType:analyzer:tokenizer:_packageinfo_:version\",\"2.0\",\n                      \":fieldType:_packageinfo_:version\",\"2.0\"));\n\n    } finally {\n      cluster.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e451e492cce54699988e2ce0aea55e3ff170cb0","date":1600305561,"type":3,"author":"noblepaul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/pkg/TestPackages#testSchemaPlugins().mjava","pathOld":"solr/core/src/test/org/apache/solr/pkg/TestPackages#testSchemaPlugins().mjava","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  public void testSchemaPlugins() throws Exception {\n    String COLLECTION_NAME = \"testSchemaLoadingColl\";\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n\n    MiniSolrCloudCluster cluster =\n            configureCluster(4)\n                    .withJettyConfig(jetty -> jetty.enableV2(true))\n                    .addConfig(\"conf\", configset(\"cloud-managed\"))\n                    .configure();\n    try {\n      String FILE1 = \"/schemapkg/schema-plugins.jar\";\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n      postFileAndWait(cluster, \"runtimecode/schema-plugins.jar.bin\", FILE1,\n              \"iSRhrogDyt9P1htmSf/krh1kx9oty3TYyWm4GKHQGlb8a+X4tKCe9kKk+3tGs+bU9zq5JBZ5txNXsn96aZem5A==\");\n\n      Package.AddVersion add = new Package.AddVersion();\n      add.version = \"1.0\";\n      add.pkg = \"schemapkg\";\n      add.files = Arrays.asList(new String[]{FILE1});\n      V2Request req = new V2Request.Builder(\"/cluster/package\")\n              .forceV2(true)\n              .withMethod(SolrRequest.METHOD.POST)\n              .withPayload(Collections.singletonMap(\"add\", add))\n              .build();\n      req.process(cluster.getSolrClient());\n\n      TestDistribPackageStore.assertResponseValues(10,\n              () -> new V2Request.Builder(\"/cluster/package\").\n                      withMethod(SolrRequest.METHOD.GET)\n                      .build().process(cluster.getSolrClient()),\n              Utils.makeMap(\n                      \":result:packages:schemapkg[0]:version\", \"1.0\",\n                      \":result:packages:schemapkg[0]:files[0]\", FILE1\n              ));\n\n      CollectionAdminRequest\n              .createCollection(COLLECTION_NAME, \"conf\", 2, 2)\n              .process(cluster.getSolrClient());\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 4);\n\n      String addFieldTypeAnalyzerWithClass = \"{\\n\" +\n              \"'add-field-type' : {\" +\n              \"    'name' : 'myNewTextFieldWithAnalyzerClass',\\n\" +\n              \"    'class':'schemapkg:my.pkg.MyTextField',\\n\" +\n              \"    'analyzer' : {\\n\" +\n              \"        'luceneMatchVersion':'5.0.0'\" ;\n//          + \",\\n\" +\n//          \"        'class':'schemapkg:my.pkg.MyWhitespaceAnalyzer'\\n\";\n      String charFilters =\n              \"        'charFilters' : [{\\n\" +\n                      \"            'class':'schemapkg:my.pkg.MyPatternReplaceCharFilterFactory',\\n\" +\n                      \"            'replacement':'$1$1',\\n\" +\n                      \"            'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n                      \"        }],\\n\";\n      String tokenizer =\n              \"        'tokenizer' : { 'class':'schemapkg:my.pkg.MyWhitespaceTokenizerFactory' },\\n\";\n      String filters =\n              \"        'filters' : [{ 'class':'solr.ASCIIFoldingFilterFactory' }]\\n\";\n      String suffix = \"    }\\n\" +\n              \"}}\";\n      cluster.getSolrClient().request(new SolrRequest(SolrRequest.METHOD.POST, \"/schema\") {\n\n        @Override\n        public RequestWriter.ContentWriter getContentWriter(String expectedType) {\n          return new RequestWriter.StringPayloadContentWriter(addFieldTypeAnalyzerWithClass + ',' + charFilters + tokenizer + filters + suffix, CommonParams.JSON_MIME);\n        }\n\n        @Override\n        public SolrParams getParams() {\n          return null;\n        }\n\n        @Override\n        public String getCollection() {\n          return COLLECTION_NAME;\n        }\n\n        @Override\n        public SolrResponse createResponse(SolrClient client) {\n          return new SolrResponseBase();\n        }\n\n        @Override\n        public String getRequestType() {\n          return SolrRequestType.UNSPECIFIED.toString();\n        }\n      });\n      verifySchemaComponent(cluster.getSolrClient(), COLLECTION_NAME, \"/schema/fieldtypes/myNewTextFieldWithAnalyzerClass\",\n              Utils.makeMap(\":fieldType:analyzer:charFilters[0]:_packageinfo_:version\" ,\"1.0\",\n                      \":fieldType:analyzer:tokenizer:_packageinfo_:version\",\"1.0\",\n                      \":fieldType:_packageinfo_:version\",\"1.0\"));\n\n      add = new Package.AddVersion();\n      add.version = \"2.0\";\n      add.pkg = \"schemapkg\";\n      add.files = Arrays.asList(new String[]{FILE1});\n      req = new V2Request.Builder(\"/cluster/package\")\n              .forceV2(true)\n              .withMethod(SolrRequest.METHOD.POST)\n              .withPayload(Collections.singletonMap(\"add\", add))\n              .build();\n      req.process(cluster.getSolrClient());\n\n      TestDistribPackageStore.assertResponseValues(10,\n              () -> new V2Request.Builder(\"/cluster/package\").\n                      withMethod(SolrRequest.METHOD.GET)\n                      .build().process(cluster.getSolrClient()),\n              Utils.makeMap(\n                      \":result:packages:schemapkg[0]:version\", \"2.0\",\n                      \":result:packages:schemapkg[0]:files[0]\", FILE1\n              ));\n\n      verifySchemaComponent(cluster.getSolrClient(), COLLECTION_NAME, \"/schema/fieldtypes/myNewTextFieldWithAnalyzerClass\",\n              Utils.makeMap(\":fieldType:analyzer:charFilters[0]:_packageinfo_:version\" ,\"2.0\",\n                      \":fieldType:analyzer:tokenizer:_packageinfo_:version\",\"2.0\",\n                      \":fieldType:_packageinfo_:version\",\"2.0\"));\n\n    } finally {\n      cluster.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"rawtypes\")\n  @Ignore(\"SOLR-14750\")\n  public void testSchemaPlugins() throws Exception {\n    String COLLECTION_NAME = \"testSchemaLoadingColl\";\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n\n    MiniSolrCloudCluster cluster =\n            configureCluster(4)\n                    .withJettyConfig(jetty -> jetty.enableV2(true))\n                    .addConfig(\"conf\", configset(\"cloud-managed\"))\n                    .configure();\n    try {\n      String FILE1 = \"/schemapkg/schema-plugins.jar\";\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n      postFileAndWait(cluster, \"runtimecode/schema-plugins.jar.bin\", FILE1,\n              \"iSRhrogDyt9P1htmSf/krh1kx9oty3TYyWm4GKHQGlb8a+X4tKCe9kKk+3tGs+bU9zq5JBZ5txNXsn96aZem5A==\");\n\n      Package.AddVersion add = new Package.AddVersion();\n      add.version = \"1.0\";\n      add.pkg = \"schemapkg\";\n      add.files = Arrays.asList(new String[]{FILE1});\n      V2Request req = new V2Request.Builder(\"/cluster/package\")\n              .forceV2(true)\n              .withMethod(SolrRequest.METHOD.POST)\n              .withPayload(Collections.singletonMap(\"add\", add))\n              .build();\n      req.process(cluster.getSolrClient());\n\n      TestDistribPackageStore.assertResponseValues(10,\n              () -> new V2Request.Builder(\"/cluster/package\").\n                      withMethod(SolrRequest.METHOD.GET)\n                      .build().process(cluster.getSolrClient()),\n              Utils.makeMap(\n                      \":result:packages:schemapkg[0]:version\", \"1.0\",\n                      \":result:packages:schemapkg[0]:files[0]\", FILE1\n              ));\n\n      CollectionAdminRequest\n              .createCollection(COLLECTION_NAME, \"conf\", 2, 2)\n              .process(cluster.getSolrClient());\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 4);\n\n      String addFieldTypeAnalyzerWithClass = \"{\\n\" +\n              \"'add-field-type' : {\" +\n              \"    'name' : 'myNewTextFieldWithAnalyzerClass',\\n\" +\n              \"    'class':'schemapkg:my.pkg.MyTextField',\\n\" +\n              \"    'analyzer' : {\\n\" +\n              \"        'luceneMatchVersion':'5.0.0'\" ;\n//          + \",\\n\" +\n//          \"        'class':'schemapkg:my.pkg.MyWhitespaceAnalyzer'\\n\";\n      String charFilters =\n              \"        'charFilters' : [{\\n\" +\n                      \"            'class':'schemapkg:my.pkg.MyPatternReplaceCharFilterFactory',\\n\" +\n                      \"            'replacement':'$1$1',\\n\" +\n                      \"            'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n                      \"        }],\\n\";\n      String tokenizer =\n              \"        'tokenizer' : { 'class':'schemapkg:my.pkg.MyWhitespaceTokenizerFactory' },\\n\";\n      String filters =\n              \"        'filters' : [{ 'class':'solr.ASCIIFoldingFilterFactory' }]\\n\";\n      String suffix = \"    }\\n\" +\n              \"}}\";\n      cluster.getSolrClient().request(new SolrRequest(SolrRequest.METHOD.POST, \"/schema\") {\n\n        @Override\n        public RequestWriter.ContentWriter getContentWriter(String expectedType) {\n          return new RequestWriter.StringPayloadContentWriter(addFieldTypeAnalyzerWithClass + ',' + charFilters + tokenizer + filters + suffix, CommonParams.JSON_MIME);\n        }\n\n        @Override\n        public SolrParams getParams() {\n          return null;\n        }\n\n        @Override\n        public String getCollection() {\n          return COLLECTION_NAME;\n        }\n\n        @Override\n        public SolrResponse createResponse(SolrClient client) {\n          return new SolrResponseBase();\n        }\n\n        @Override\n        public String getRequestType() {\n          return SolrRequestType.UNSPECIFIED.toString();\n        }\n      });\n      verifySchemaComponent(cluster.getSolrClient(), COLLECTION_NAME, \"/schema/fieldtypes/myNewTextFieldWithAnalyzerClass\",\n              Utils.makeMap(\":fieldType:analyzer:charFilters[0]:_packageinfo_:version\" ,\"1.0\",\n                      \":fieldType:analyzer:tokenizer:_packageinfo_:version\",\"1.0\",\n                      \":fieldType:_packageinfo_:version\",\"1.0\"));\n\n      add = new Package.AddVersion();\n      add.version = \"2.0\";\n      add.pkg = \"schemapkg\";\n      add.files = Arrays.asList(new String[]{FILE1});\n      req = new V2Request.Builder(\"/cluster/package\")\n              .forceV2(true)\n              .withMethod(SolrRequest.METHOD.POST)\n              .withPayload(Collections.singletonMap(\"add\", add))\n              .build();\n      req.process(cluster.getSolrClient());\n\n      TestDistribPackageStore.assertResponseValues(10,\n              () -> new V2Request.Builder(\"/cluster/package\").\n                      withMethod(SolrRequest.METHOD.GET)\n                      .build().process(cluster.getSolrClient()),\n              Utils.makeMap(\n                      \":result:packages:schemapkg[0]:version\", \"2.0\",\n                      \":result:packages:schemapkg[0]:files[0]\", FILE1\n              ));\n\n      verifySchemaComponent(cluster.getSolrClient(), COLLECTION_NAME, \"/schema/fieldtypes/myNewTextFieldWithAnalyzerClass\",\n              Utils.makeMap(\":fieldType:analyzer:charFilters[0]:_packageinfo_:version\" ,\"2.0\",\n                      \":fieldType:analyzer:tokenizer:_packageinfo_:version\",\"2.0\",\n                      \":fieldType:_packageinfo_:version\",\"2.0\"));\n\n    } finally {\n      cluster.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f53fd7227ce17ccc6445b3433d004cb6ac33e08a","date":1600333804,"type":3,"author":"noblepaul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/pkg/TestPackages#testSchemaPlugins().mjava","pathOld":"solr/core/src/test/org/apache/solr/pkg/TestPackages#testSchemaPlugins().mjava","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  public void testSchemaPlugins() throws Exception {\n    String COLLECTION_NAME = \"testSchemaLoadingColl\";\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n\n    MiniSolrCloudCluster cluster =\n            configureCluster(4)\n                    .withJettyConfig(jetty -> jetty.enableV2(true))\n                    .addConfig(\"conf\", configset(\"cloud-managed\"))\n                    .configure();\n    try {\n      String FILE1 = \"/schemapkg/schema-plugins.jar\";\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n      postFileAndWait(cluster, \"runtimecode/schema-plugins.jar.bin\", FILE1,\n              \"iSRhrogDyt9P1htmSf/krh1kx9oty3TYyWm4GKHQGlb8a+X4tKCe9kKk+3tGs+bU9zq5JBZ5txNXsn96aZem5A==\");\n\n      String FILE2 = \"/schemapkg/payload-component.jar\";\n      postFileAndWait(cluster, \"runtimecode/payload-component.jar.bin\", FILE2,\n          \"gI6vYUDmSXSXmpNEeK1cwqrp4qTeVQgizGQkd8A4Prx2K8k7c5QlXbcs4lxFAAbbdXz9F4esBqTCiLMjVDHJ5Q==\");\n\n      Package.AddVersion add = new Package.AddVersion();\n      add.version = \"1.0\";\n      add.pkg = \"schemapkg\";\n      add.files = Arrays.asList(FILE1,FILE2);\n      V2Request req = new V2Request.Builder(\"/cluster/package\")\n              .forceV2(true)\n              .withMethod(SolrRequest.METHOD.POST)\n              .withPayload(Collections.singletonMap(\"add\", add))\n              .build();\n      req.process(cluster.getSolrClient());\n\n      TestDistribPackageStore.assertResponseValues(10,\n              () -> new V2Request.Builder(\"/cluster/package\").\n                      withMethod(SolrRequest.METHOD.GET)\n                      .build().process(cluster.getSolrClient()),\n              Utils.makeMap(\n                      \":result:packages:schemapkg[0]:version\", \"1.0\",\n                      \":result:packages:schemapkg[0]:files[0]\", FILE1\n              ));\n\n      CollectionAdminRequest\n              .createCollection(COLLECTION_NAME, \"conf\", 2, 2)\n              .process(cluster.getSolrClient());\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 4);\n\n      String addFieldTypeAnalyzerWithClass = \"{\\n\" +\n              \"'add-field-type' : {\" +\n              \"    'name' : 'myNewTextFieldWithAnalyzerClass',\\n\" +\n              \"    'class':'schemapkg:my.pkg.MyTextField',\\n\" +\n              \"    'analyzer' : {\\n\" +\n              \"        'luceneMatchVersion':'5.0.0'\" ;\n//          + \",\\n\" +\n//          \"        'class':'schemapkg:my.pkg.MyWhitespaceAnalyzer'\\n\";\n      String charFilters =\n              \"        'charFilters' : [{\\n\" +\n                      \"            'class':'schemapkg:my.pkg.MyPatternReplaceCharFilterFactory',\\n\" +\n                      \"            'replacement':'$1$1',\\n\" +\n                      \"            'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n                      \"        }],\\n\";\n      String tokenizer =\n              \"        'tokenizer' : { 'class':'schemapkg:my.pkg.MyWhitespaceTokenizerFactory' },\\n\";\n      String filters =\n          \"        'filters' : [{ 'class':'solr.DelimitedPayloadTokenFilterFactory', 'encoder' : 'schemapkg:com.o19s.payloads.Base64Encoder'}]\\n\";\n      String suffix = \"    }\\n\" +\n              \"}}\";\n      cluster.getSolrClient().request(new SolrRequest(SolrRequest.METHOD.POST, \"/schema\") {\n\n        @Override\n        public RequestWriter.ContentWriter getContentWriter(String expectedType) {\n          return new RequestWriter.StringPayloadContentWriter(addFieldTypeAnalyzerWithClass + ',' + charFilters + tokenizer + filters + suffix, CommonParams.JSON_MIME);\n        }\n\n        @Override\n        public SolrParams getParams() {\n          return null;\n        }\n\n        @Override\n        public String getCollection() {\n          return COLLECTION_NAME;\n        }\n\n        @Override\n        public SolrResponse createResponse(SolrClient client) {\n          return new SolrResponseBase();\n        }\n\n        @Override\n        public String getRequestType() {\n          return SolrRequestType.UNSPECIFIED.toString();\n        }\n      });\n      verifySchemaComponent(cluster.getSolrClient(), COLLECTION_NAME, \"/schema/fieldtypes/myNewTextFieldWithAnalyzerClass\",\n              Utils.makeMap(\":fieldType:analyzer:charFilters[0]:_packageinfo_:version\" ,\"1.0\",\n                      \":fieldType:analyzer:tokenizer:_packageinfo_:version\",\"1.0\",\n                      \":fieldType:_packageinfo_:version\",\"1.0\"));\n\n      add = new Package.AddVersion();\n      add.version = \"2.0\";\n      add.pkg = \"schemapkg\";\n      add.files = Arrays.asList(new String[]{FILE1});\n      req = new V2Request.Builder(\"/cluster/package\")\n              .forceV2(true)\n              .withMethod(SolrRequest.METHOD.POST)\n              .withPayload(Collections.singletonMap(\"add\", add))\n              .build();\n      req.process(cluster.getSolrClient());\n\n      TestDistribPackageStore.assertResponseValues(10,\n              () -> new V2Request.Builder(\"/cluster/package\").\n                      withMethod(SolrRequest.METHOD.GET)\n                      .build().process(cluster.getSolrClient()),\n              Utils.makeMap(\n                      \":result:packages:schemapkg[0]:version\", \"2.0\",\n                      \":result:packages:schemapkg[0]:files[0]\", FILE1\n              ));\n\n      verifySchemaComponent(cluster.getSolrClient(), COLLECTION_NAME, \"/schema/fieldtypes/myNewTextFieldWithAnalyzerClass\",\n              Utils.makeMap(\":fieldType:analyzer:charFilters[0]:_packageinfo_:version\" ,\"2.0\",\n                      \":fieldType:analyzer:tokenizer:_packageinfo_:version\",\"2.0\",\n                      \":fieldType:_packageinfo_:version\",\"2.0\"));\n\n    } finally {\n      cluster.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"rawtypes\")\n  public void testSchemaPlugins() throws Exception {\n    String COLLECTION_NAME = \"testSchemaLoadingColl\";\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n\n    MiniSolrCloudCluster cluster =\n            configureCluster(4)\n                    .withJettyConfig(jetty -> jetty.enableV2(true))\n                    .addConfig(\"conf\", configset(\"cloud-managed\"))\n                    .configure();\n    try {\n      String FILE1 = \"/schemapkg/schema-plugins.jar\";\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n      postFileAndWait(cluster, \"runtimecode/schema-plugins.jar.bin\", FILE1,\n              \"iSRhrogDyt9P1htmSf/krh1kx9oty3TYyWm4GKHQGlb8a+X4tKCe9kKk+3tGs+bU9zq5JBZ5txNXsn96aZem5A==\");\n\n      Package.AddVersion add = new Package.AddVersion();\n      add.version = \"1.0\";\n      add.pkg = \"schemapkg\";\n      add.files = Arrays.asList(new String[]{FILE1});\n      V2Request req = new V2Request.Builder(\"/cluster/package\")\n              .forceV2(true)\n              .withMethod(SolrRequest.METHOD.POST)\n              .withPayload(Collections.singletonMap(\"add\", add))\n              .build();\n      req.process(cluster.getSolrClient());\n\n      TestDistribPackageStore.assertResponseValues(10,\n              () -> new V2Request.Builder(\"/cluster/package\").\n                      withMethod(SolrRequest.METHOD.GET)\n                      .build().process(cluster.getSolrClient()),\n              Utils.makeMap(\n                      \":result:packages:schemapkg[0]:version\", \"1.0\",\n                      \":result:packages:schemapkg[0]:files[0]\", FILE1\n              ));\n\n      CollectionAdminRequest\n              .createCollection(COLLECTION_NAME, \"conf\", 2, 2)\n              .process(cluster.getSolrClient());\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 4);\n\n      String addFieldTypeAnalyzerWithClass = \"{\\n\" +\n              \"'add-field-type' : {\" +\n              \"    'name' : 'myNewTextFieldWithAnalyzerClass',\\n\" +\n              \"    'class':'schemapkg:my.pkg.MyTextField',\\n\" +\n              \"    'analyzer' : {\\n\" +\n              \"        'luceneMatchVersion':'5.0.0'\" ;\n//          + \",\\n\" +\n//          \"        'class':'schemapkg:my.pkg.MyWhitespaceAnalyzer'\\n\";\n      String charFilters =\n              \"        'charFilters' : [{\\n\" +\n                      \"            'class':'schemapkg:my.pkg.MyPatternReplaceCharFilterFactory',\\n\" +\n                      \"            'replacement':'$1$1',\\n\" +\n                      \"            'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n                      \"        }],\\n\";\n      String tokenizer =\n              \"        'tokenizer' : { 'class':'schemapkg:my.pkg.MyWhitespaceTokenizerFactory' },\\n\";\n      String filters =\n              \"        'filters' : [{ 'class':'solr.ASCIIFoldingFilterFactory' }]\\n\";\n      String suffix = \"    }\\n\" +\n              \"}}\";\n      cluster.getSolrClient().request(new SolrRequest(SolrRequest.METHOD.POST, \"/schema\") {\n\n        @Override\n        public RequestWriter.ContentWriter getContentWriter(String expectedType) {\n          return new RequestWriter.StringPayloadContentWriter(addFieldTypeAnalyzerWithClass + ',' + charFilters + tokenizer + filters + suffix, CommonParams.JSON_MIME);\n        }\n\n        @Override\n        public SolrParams getParams() {\n          return null;\n        }\n\n        @Override\n        public String getCollection() {\n          return COLLECTION_NAME;\n        }\n\n        @Override\n        public SolrResponse createResponse(SolrClient client) {\n          return new SolrResponseBase();\n        }\n\n        @Override\n        public String getRequestType() {\n          return SolrRequestType.UNSPECIFIED.toString();\n        }\n      });\n      verifySchemaComponent(cluster.getSolrClient(), COLLECTION_NAME, \"/schema/fieldtypes/myNewTextFieldWithAnalyzerClass\",\n              Utils.makeMap(\":fieldType:analyzer:charFilters[0]:_packageinfo_:version\" ,\"1.0\",\n                      \":fieldType:analyzer:tokenizer:_packageinfo_:version\",\"1.0\",\n                      \":fieldType:_packageinfo_:version\",\"1.0\"));\n\n      add = new Package.AddVersion();\n      add.version = \"2.0\";\n      add.pkg = \"schemapkg\";\n      add.files = Arrays.asList(new String[]{FILE1});\n      req = new V2Request.Builder(\"/cluster/package\")\n              .forceV2(true)\n              .withMethod(SolrRequest.METHOD.POST)\n              .withPayload(Collections.singletonMap(\"add\", add))\n              .build();\n      req.process(cluster.getSolrClient());\n\n      TestDistribPackageStore.assertResponseValues(10,\n              () -> new V2Request.Builder(\"/cluster/package\").\n                      withMethod(SolrRequest.METHOD.GET)\n                      .build().process(cluster.getSolrClient()),\n              Utils.makeMap(\n                      \":result:packages:schemapkg[0]:version\", \"2.0\",\n                      \":result:packages:schemapkg[0]:files[0]\", FILE1\n              ));\n\n      verifySchemaComponent(cluster.getSolrClient(), COLLECTION_NAME, \"/schema/fieldtypes/myNewTextFieldWithAnalyzerClass\",\n              Utils.makeMap(\":fieldType:analyzer:charFilters[0]:_packageinfo_:version\" ,\"2.0\",\n                      \":fieldType:analyzer:tokenizer:_packageinfo_:version\",\"2.0\",\n                      \":fieldType:_packageinfo_:version\",\"2.0\"));\n\n    } finally {\n      cluster.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2d47b48a6c275bea07b928e945ae5c071bb2d45b","date":1600570907,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/pkg/TestPackages#testSchemaPlugins().mjava","pathOld":"solr/core/src/test/org/apache/solr/pkg/TestPackages#testSchemaPlugins().mjava","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  public void testSchemaPlugins() throws Exception {\n    String COLLECTION_NAME = \"testSchemaLoadingColl\";\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n\n    MiniSolrCloudCluster cluster =\n            configureCluster(4)\n                    .withJettyConfig(jetty -> jetty.enableV2(true))\n                    .addConfig(\"conf1\", configset(\"schema-package\"))\n                    .configure();\n    try {\n      String FILE1 = \"/schemapkg/schema-plugins.jar\";\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n      postFileAndWait(cluster, \"runtimecode/schema-plugins.jar.bin\", FILE1,\n              \"iSRhrogDyt9P1htmSf/krh1kx9oty3TYyWm4GKHQGlb8a+X4tKCe9kKk+3tGs+bU9zq5JBZ5txNXsn96aZem5A==\");\n\n      String FILE2 = \"/schemapkg/payload-component.jar\";\n      postFileAndWait(cluster, \"runtimecode/payload-component.jar.bin\", FILE2,\n          \"gI6vYUDmSXSXmpNEeK1cwqrp4qTeVQgizGQkd8A4Prx2K8k7c5QlXbcs4lxFAAbbdXz9F4esBqTCiLMjVDHJ5Q==\");\n\n      Package.AddVersion add = new Package.AddVersion();\n      add.version = \"1.0\";\n      add.pkg = \"schemapkg\";\n      add.files = Arrays.asList(FILE1,FILE2);\n      V2Request req = new V2Request.Builder(\"/cluster/package\")\n              .forceV2(true)\n              .withMethod(SolrRequest.METHOD.POST)\n              .withPayload(Collections.singletonMap(\"add\", add))\n              .build();\n      req.process(cluster.getSolrClient());\n\n      TestDistribPackageStore.assertResponseValues(10,\n              () -> new V2Request.Builder(\"/cluster/package\").\n                      withMethod(SolrRequest.METHOD.GET)\n                      .build().process(cluster.getSolrClient()),\n              Utils.makeMap(\n                      \":result:packages:schemapkg[0]:version\", \"1.0\",\n                      \":result:packages:schemapkg[0]:files[0]\", FILE1\n              ));\n\n      CollectionAdminRequest\n              .createCollection(COLLECTION_NAME, \"conf1\", 2, 2)\n              .process(cluster.getSolrClient());\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 4);\n\n      verifySchemaComponent(cluster.getSolrClient(), COLLECTION_NAME, \"/schema/fieldtypes/myNewTextFieldWithAnalyzerClass\",\n              Utils.makeMap(\":fieldType:analyzer:charFilters[0]:_packageinfo_:version\" ,\"1.0\",\n                      \":fieldType:analyzer:tokenizer:_packageinfo_:version\",\"1.0\",\n                      \":fieldType:_packageinfo_:version\",\"1.0\"));\n\n      add = new Package.AddVersion();\n      add.version = \"2.0\";\n      add.pkg = \"schemapkg\";\n      add.files = Arrays.asList(new String[]{FILE1});\n      req = new V2Request.Builder(\"/cluster/package\")\n              .forceV2(true)\n              .withMethod(SolrRequest.METHOD.POST)\n              .withPayload(Collections.singletonMap(\"add\", add))\n              .build();\n      req.process(cluster.getSolrClient());\n\n      TestDistribPackageStore.assertResponseValues(10,\n              () -> new V2Request.Builder(\"/cluster/package\").\n                      withMethod(SolrRequest.METHOD.GET)\n                      .build().process(cluster.getSolrClient()),\n              Utils.makeMap(\n                      \":result:packages:schemapkg[0]:version\", \"2.0\",\n                      \":result:packages:schemapkg[0]:files[0]\", FILE1\n              ));\n\n      verifySchemaComponent(cluster.getSolrClient(), COLLECTION_NAME, \"/schema/fieldtypes/myNewTextFieldWithAnalyzerClass\",\n              Utils.makeMap(\":fieldType:analyzer:charFilters[0]:_packageinfo_:version\" ,\"2.0\",\n                      \":fieldType:analyzer:tokenizer:_packageinfo_:version\",\"2.0\",\n                      \":fieldType:_packageinfo_:version\",\"2.0\"));\n\n    } finally {\n      cluster.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"rawtypes\")\n  public void testSchemaPlugins() throws Exception {\n    String COLLECTION_NAME = \"testSchemaLoadingColl\";\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n\n    MiniSolrCloudCluster cluster =\n            configureCluster(4)\n                    .withJettyConfig(jetty -> jetty.enableV2(true))\n                    .addConfig(\"conf\", configset(\"cloud-managed\"))\n                    .configure();\n    try {\n      String FILE1 = \"/schemapkg/schema-plugins.jar\";\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n      postFileAndWait(cluster, \"runtimecode/schema-plugins.jar.bin\", FILE1,\n              \"iSRhrogDyt9P1htmSf/krh1kx9oty3TYyWm4GKHQGlb8a+X4tKCe9kKk+3tGs+bU9zq5JBZ5txNXsn96aZem5A==\");\n\n      String FILE2 = \"/schemapkg/payload-component.jar\";\n      postFileAndWait(cluster, \"runtimecode/payload-component.jar.bin\", FILE2,\n          \"gI6vYUDmSXSXmpNEeK1cwqrp4qTeVQgizGQkd8A4Prx2K8k7c5QlXbcs4lxFAAbbdXz9F4esBqTCiLMjVDHJ5Q==\");\n\n      Package.AddVersion add = new Package.AddVersion();\n      add.version = \"1.0\";\n      add.pkg = \"schemapkg\";\n      add.files = Arrays.asList(FILE1,FILE2);\n      V2Request req = new V2Request.Builder(\"/cluster/package\")\n              .forceV2(true)\n              .withMethod(SolrRequest.METHOD.POST)\n              .withPayload(Collections.singletonMap(\"add\", add))\n              .build();\n      req.process(cluster.getSolrClient());\n\n      TestDistribPackageStore.assertResponseValues(10,\n              () -> new V2Request.Builder(\"/cluster/package\").\n                      withMethod(SolrRequest.METHOD.GET)\n                      .build().process(cluster.getSolrClient()),\n              Utils.makeMap(\n                      \":result:packages:schemapkg[0]:version\", \"1.0\",\n                      \":result:packages:schemapkg[0]:files[0]\", FILE1\n              ));\n\n      CollectionAdminRequest\n              .createCollection(COLLECTION_NAME, \"conf\", 2, 2)\n              .process(cluster.getSolrClient());\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 4);\n\n      String addFieldTypeAnalyzerWithClass = \"{\\n\" +\n              \"'add-field-type' : {\" +\n              \"    'name' : 'myNewTextFieldWithAnalyzerClass',\\n\" +\n              \"    'class':'schemapkg:my.pkg.MyTextField',\\n\" +\n              \"    'analyzer' : {\\n\" +\n              \"        'luceneMatchVersion':'5.0.0'\" ;\n//          + \",\\n\" +\n//          \"        'class':'schemapkg:my.pkg.MyWhitespaceAnalyzer'\\n\";\n      String charFilters =\n              \"        'charFilters' : [{\\n\" +\n                      \"            'class':'schemapkg:my.pkg.MyPatternReplaceCharFilterFactory',\\n\" +\n                      \"            'replacement':'$1$1',\\n\" +\n                      \"            'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n                      \"        }],\\n\";\n      String tokenizer =\n              \"        'tokenizer' : { 'class':'schemapkg:my.pkg.MyWhitespaceTokenizerFactory' },\\n\";\n      String filters =\n          \"        'filters' : [{ 'class':'solr.DelimitedPayloadTokenFilterFactory', 'encoder' : 'schemapkg:com.o19s.payloads.Base64Encoder'}]\\n\";\n      String suffix = \"    }\\n\" +\n              \"}}\";\n      cluster.getSolrClient().request(new SolrRequest(SolrRequest.METHOD.POST, \"/schema\") {\n\n        @Override\n        public RequestWriter.ContentWriter getContentWriter(String expectedType) {\n          return new RequestWriter.StringPayloadContentWriter(addFieldTypeAnalyzerWithClass + ',' + charFilters + tokenizer + filters + suffix, CommonParams.JSON_MIME);\n        }\n\n        @Override\n        public SolrParams getParams() {\n          return null;\n        }\n\n        @Override\n        public String getCollection() {\n          return COLLECTION_NAME;\n        }\n\n        @Override\n        public SolrResponse createResponse(SolrClient client) {\n          return new SolrResponseBase();\n        }\n\n        @Override\n        public String getRequestType() {\n          return SolrRequestType.UNSPECIFIED.toString();\n        }\n      });\n      verifySchemaComponent(cluster.getSolrClient(), COLLECTION_NAME, \"/schema/fieldtypes/myNewTextFieldWithAnalyzerClass\",\n              Utils.makeMap(\":fieldType:analyzer:charFilters[0]:_packageinfo_:version\" ,\"1.0\",\n                      \":fieldType:analyzer:tokenizer:_packageinfo_:version\",\"1.0\",\n                      \":fieldType:_packageinfo_:version\",\"1.0\"));\n\n      add = new Package.AddVersion();\n      add.version = \"2.0\";\n      add.pkg = \"schemapkg\";\n      add.files = Arrays.asList(new String[]{FILE1});\n      req = new V2Request.Builder(\"/cluster/package\")\n              .forceV2(true)\n              .withMethod(SolrRequest.METHOD.POST)\n              .withPayload(Collections.singletonMap(\"add\", add))\n              .build();\n      req.process(cluster.getSolrClient());\n\n      TestDistribPackageStore.assertResponseValues(10,\n              () -> new V2Request.Builder(\"/cluster/package\").\n                      withMethod(SolrRequest.METHOD.GET)\n                      .build().process(cluster.getSolrClient()),\n              Utils.makeMap(\n                      \":result:packages:schemapkg[0]:version\", \"2.0\",\n                      \":result:packages:schemapkg[0]:files[0]\", FILE1\n              ));\n\n      verifySchemaComponent(cluster.getSolrClient(), COLLECTION_NAME, \"/schema/fieldtypes/myNewTextFieldWithAnalyzerClass\",\n              Utils.makeMap(\":fieldType:analyzer:charFilters[0]:_packageinfo_:version\" ,\"2.0\",\n                      \":fieldType:analyzer:tokenizer:_packageinfo_:version\",\"2.0\",\n                      \":fieldType:_packageinfo_:version\",\"2.0\"));\n\n    } finally {\n      cluster.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ac35455ac6925b629dedf2c0c52c0a8d5cb55b6","date":1601357122,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/pkg/TestPackages#testSchemaPlugins().mjava","pathOld":"solr/core/src/test/org/apache/solr/pkg/TestPackages#testSchemaPlugins().mjava","sourceNew":"  public void testSchemaPlugins() throws Exception {\n    String COLLECTION_NAME = \"testSchemaLoadingColl\";\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n\n    MiniSolrCloudCluster cluster =\n            configureCluster(4)\n                    .withJettyConfig(jetty -> jetty.enableV2(true))\n                    .addConfig(\"conf1\", configset(\"schema-package\"))\n                    .configure();\n    try {\n      String FILE1 = \"/schemapkg/schema-plugins.jar\";\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n      postFileAndWait(cluster, \"runtimecode/schema-plugins.jar.bin\", FILE1,\n          \"U+AdO/jgY3DtMpeFRGoTQk72iA5g/qjPvdQYPGBaXB5+ggcTZk4FoIWiueB0bwGJ8Mg3V/elxOqEbD2JR8R0tA==\");\n\n      String FILE2 = \"/schemapkg/payload-component.jar\";\n      postFileAndWait(cluster, \"runtimecode/payload-component.jar.bin\", FILE2,\n          \"gI6vYUDmSXSXmpNEeK1cwqrp4qTeVQgizGQkd8A4Prx2K8k7c5QlXbcs4lxFAAbbdXz9F4esBqTCiLMjVDHJ5Q==\");\n\n      Package.AddVersion add = new Package.AddVersion();\n      add.version = \"1.0\";\n      add.pkg = \"schemapkg\";\n      add.files = Arrays.asList(FILE1,FILE2);\n      V2Request req = new V2Request.Builder(\"/cluster/package\")\n          .forceV2(true)\n          .withMethod(SolrRequest.METHOD.POST)\n          .withPayload(Collections.singletonMap(\"add\", add))\n          .build();\n      req.process(cluster.getSolrClient());\n\n      TestDistribPackageStore.assertResponseValues(10,\n          () -> new V2Request.Builder(\"/cluster/package\").\n              withMethod(SolrRequest.METHOD.GET)\n              .build().process(cluster.getSolrClient()),\n          Utils.makeMap(\n              \":result:packages:schemapkg[0]:version\", \"1.0\",\n              \":result:packages:schemapkg[0]:files[0]\", FILE1\n          ));\n\n      CollectionAdminRequest\n              .createCollection(COLLECTION_NAME, \"conf1\", 2, 2)\n              .process(cluster.getSolrClient());\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 4);\n\n      verifySchemaComponent(cluster.getSolrClient(), COLLECTION_NAME, \"/schema/fieldtypes/myNewTextFieldWithAnalyzerClass\",\n              Utils.makeMap(\":fieldType:analyzer:charFilters[0]:_packageinfo_:version\" ,\"1.0\",\n                      \":fieldType:analyzer:tokenizer:_packageinfo_:version\",\"1.0\",\n                      \":fieldType:_packageinfo_:version\",\"1.0\"));\n\n      add = new Package.AddVersion();\n      add.version = \"2.0\";\n      add.pkg = \"schemapkg\";\n      add.files = Arrays.asList(FILE1);\n      req = new V2Request.Builder(\"/cluster/package\")\n          .forceV2(true)\n          .withMethod(SolrRequest.METHOD.POST)\n          .withPayload(Collections.singletonMap(\"add\", add))\n          .build();\n      req.process(cluster.getSolrClient());\n\n      TestDistribPackageStore.assertResponseValues(10,\n          () -> new V2Request.Builder(\"/cluster/package\").\n              withMethod(SolrRequest.METHOD.GET)\n              .build().process(cluster.getSolrClient()),\n          Utils.makeMap(\n              \":result:packages:schemapkg[0]:version\", \"2.0\",\n              \":result:packages:schemapkg[0]:files[0]\", FILE1\n          ));\n\n      verifySchemaComponent(cluster.getSolrClient(), COLLECTION_NAME, \"/schema/fieldtypes/myNewTextFieldWithAnalyzerClass\",\n          Utils.makeMap(\":fieldType:analyzer:charFilters[0]:_packageinfo_:version\" ,\"2.0\",\n              \":fieldType:analyzer:tokenizer:_packageinfo_:version\",\"2.0\",\n              \":fieldType:_packageinfo_:version\",\"2.0\"));\n\n    } finally {\n      cluster.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"rawtypes\")\n  public void testSchemaPlugins() throws Exception {\n    String COLLECTION_NAME = \"testSchemaLoadingColl\";\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n\n    MiniSolrCloudCluster cluster =\n            configureCluster(4)\n                    .withJettyConfig(jetty -> jetty.enableV2(true))\n                    .addConfig(\"conf1\", configset(\"schema-package\"))\n                    .configure();\n    try {\n      String FILE1 = \"/schemapkg/schema-plugins.jar\";\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n      postFileAndWait(cluster, \"runtimecode/schema-plugins.jar.bin\", FILE1,\n              \"iSRhrogDyt9P1htmSf/krh1kx9oty3TYyWm4GKHQGlb8a+X4tKCe9kKk+3tGs+bU9zq5JBZ5txNXsn96aZem5A==\");\n\n      String FILE2 = \"/schemapkg/payload-component.jar\";\n      postFileAndWait(cluster, \"runtimecode/payload-component.jar.bin\", FILE2,\n          \"gI6vYUDmSXSXmpNEeK1cwqrp4qTeVQgizGQkd8A4Prx2K8k7c5QlXbcs4lxFAAbbdXz9F4esBqTCiLMjVDHJ5Q==\");\n\n      Package.AddVersion add = new Package.AddVersion();\n      add.version = \"1.0\";\n      add.pkg = \"schemapkg\";\n      add.files = Arrays.asList(FILE1,FILE2);\n      V2Request req = new V2Request.Builder(\"/cluster/package\")\n              .forceV2(true)\n              .withMethod(SolrRequest.METHOD.POST)\n              .withPayload(Collections.singletonMap(\"add\", add))\n              .build();\n      req.process(cluster.getSolrClient());\n\n      TestDistribPackageStore.assertResponseValues(10,\n              () -> new V2Request.Builder(\"/cluster/package\").\n                      withMethod(SolrRequest.METHOD.GET)\n                      .build().process(cluster.getSolrClient()),\n              Utils.makeMap(\n                      \":result:packages:schemapkg[0]:version\", \"1.0\",\n                      \":result:packages:schemapkg[0]:files[0]\", FILE1\n              ));\n\n      CollectionAdminRequest\n              .createCollection(COLLECTION_NAME, \"conf1\", 2, 2)\n              .process(cluster.getSolrClient());\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 4);\n\n      verifySchemaComponent(cluster.getSolrClient(), COLLECTION_NAME, \"/schema/fieldtypes/myNewTextFieldWithAnalyzerClass\",\n              Utils.makeMap(\":fieldType:analyzer:charFilters[0]:_packageinfo_:version\" ,\"1.0\",\n                      \":fieldType:analyzer:tokenizer:_packageinfo_:version\",\"1.0\",\n                      \":fieldType:_packageinfo_:version\",\"1.0\"));\n\n      add = new Package.AddVersion();\n      add.version = \"2.0\";\n      add.pkg = \"schemapkg\";\n      add.files = Arrays.asList(new String[]{FILE1});\n      req = new V2Request.Builder(\"/cluster/package\")\n              .forceV2(true)\n              .withMethod(SolrRequest.METHOD.POST)\n              .withPayload(Collections.singletonMap(\"add\", add))\n              .build();\n      req.process(cluster.getSolrClient());\n\n      TestDistribPackageStore.assertResponseValues(10,\n              () -> new V2Request.Builder(\"/cluster/package\").\n                      withMethod(SolrRequest.METHOD.GET)\n                      .build().process(cluster.getSolrClient()),\n              Utils.makeMap(\n                      \":result:packages:schemapkg[0]:version\", \"2.0\",\n                      \":result:packages:schemapkg[0]:files[0]\", FILE1\n              ));\n\n      verifySchemaComponent(cluster.getSolrClient(), COLLECTION_NAME, \"/schema/fieldtypes/myNewTextFieldWithAnalyzerClass\",\n              Utils.makeMap(\":fieldType:analyzer:charFilters[0]:_packageinfo_:version\" ,\"2.0\",\n                      \":fieldType:analyzer:tokenizer:_packageinfo_:version\",\"2.0\",\n                      \":fieldType:_packageinfo_:version\",\"2.0\"));\n\n    } finally {\n      cluster.shutdown();\n    }\n\n  }\n\n","bugFix":["b2ed9b72e5fa27a7bd4857f222ca815341979d4a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f53fd7227ce17ccc6445b3433d004cb6ac33e08a":["0e451e492cce54699988e2ce0aea55e3ff170cb0"],"b2ed9b72e5fa27a7bd4857f222ca815341979d4a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9ac35455ac6925b629dedf2c0c52c0a8d5cb55b6":["2d47b48a6c275bea07b928e945ae5c071bb2d45b"],"0c1f39a1c5a00532404e216378a8157523b83551":["c99002731351c8c955238845b0038682148eec53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1fc1087854af39c9b439f47d913fd3ac1d85ac5c":["0c1f39a1c5a00532404e216378a8157523b83551"],"2d47b48a6c275bea07b928e945ae5c071bb2d45b":["f53fd7227ce17ccc6445b3433d004cb6ac33e08a"],"938fe8fd4d30ae70161827366f67c2382985e446":["1fc1087854af39c9b439f47d913fd3ac1d85ac5c"],"c99002731351c8c955238845b0038682148eec53":["b2ed9b72e5fa27a7bd4857f222ca815341979d4a"],"0e451e492cce54699988e2ce0aea55e3ff170cb0":["938fe8fd4d30ae70161827366f67c2382985e446"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ac35455ac6925b629dedf2c0c52c0a8d5cb55b6"]},"commit2Childs":{"f53fd7227ce17ccc6445b3433d004cb6ac33e08a":["2d47b48a6c275bea07b928e945ae5c071bb2d45b"],"b2ed9b72e5fa27a7bd4857f222ca815341979d4a":["c99002731351c8c955238845b0038682148eec53"],"9ac35455ac6925b629dedf2c0c52c0a8d5cb55b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b2ed9b72e5fa27a7bd4857f222ca815341979d4a"],"0c1f39a1c5a00532404e216378a8157523b83551":["1fc1087854af39c9b439f47d913fd3ac1d85ac5c"],"1fc1087854af39c9b439f47d913fd3ac1d85ac5c":["938fe8fd4d30ae70161827366f67c2382985e446"],"2d47b48a6c275bea07b928e945ae5c071bb2d45b":["9ac35455ac6925b629dedf2c0c52c0a8d5cb55b6"],"938fe8fd4d30ae70161827366f67c2382985e446":["0e451e492cce54699988e2ce0aea55e3ff170cb0"],"c99002731351c8c955238845b0038682148eec53":["0c1f39a1c5a00532404e216378a8157523b83551"],"0e451e492cce54699988e2ce0aea55e3ff170cb0":["f53fd7227ce17ccc6445b3433d004cb6ac33e08a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}