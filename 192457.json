{"path":"lucene/src/java/org/apache/lucene/index/codecs/preflex/SegmentTermDocs#skipTo(int).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/SegmentTermDocs#skipTo(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentTermDocs#skipTo(int).mjava","sourceNew":"  /** Optimized implementation. */\n  public boolean skipTo(int target) throws IOException {\n    if (df >= skipInterval) {                      // optimized case\n      if (skipListReader == null)\n        skipListReader = new DefaultSkipListReader((IndexInput) freqStream.clone(), maxSkipLevels, skipInterval); // lazily clone\n\n      if (!haveSkipped) {                          // lazily initialize skip stream\n        skipListReader.init(skipPointer, freqBasePointer, proxBasePointer, df, currentFieldStoresPayloads);\n        haveSkipped = true;\n      }\n\n      int newCount = skipListReader.skipTo(target); \n      if (newCount > count) {\n        freqStream.seek(skipListReader.getFreqPointer());\n        skipProx(skipListReader.getProxPointer(), skipListReader.getPayloadLength());\n\n        doc = skipListReader.getDoc();\n        count = newCount;\n      }      \n    }\n\n    // done skipping, now just scan\n    do {\n      if (!next())\n        return false;\n    } while (target > doc);\n    return true;\n  }\n\n","sourceOld":"  /** Optimized implementation. */\n  public boolean skipTo(int target) throws IOException {\n    if (df >= skipInterval) {                      // optimized case\n      if (skipListReader == null)\n        skipListReader = new DefaultSkipListReader((IndexInput) freqStream.clone(), maxSkipLevels, skipInterval); // lazily clone\n\n      if (!haveSkipped) {                          // lazily initialize skip stream\n        skipListReader.init(skipPointer, freqBasePointer, proxBasePointer, df, currentFieldStoresPayloads);\n        haveSkipped = true;\n      }\n\n      int newCount = skipListReader.skipTo(target); \n      if (newCount > count) {\n        freqStream.seek(skipListReader.getFreqPointer());\n        skipProx(skipListReader.getProxPointer(), skipListReader.getPayloadLength());\n\n        doc = skipListReader.getDoc();\n        count = newCount;\n      }      \n    }\n\n    // done skipping, now just scan\n    do {\n      if (!next())\n        return false;\n    } while (target > doc);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aff28d83336d21b964812b94574b7e8cea46a3cc","date":1297437050,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/SegmentTermDocs#skipTo(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/SegmentTermDocs#skipTo(int).mjava","sourceNew":"  /** Optimized implementation. */\n  public boolean skipTo(int target) throws IOException {\n    // don't skip if the target is close (within skipInterval docs away)\n    if ((target - skipInterval) >= doc && df >= skipInterval) {                      // optimized case\n      if (skipListReader == null)\n        skipListReader = new DefaultSkipListReader((IndexInput) freqStream.clone(), maxSkipLevels, skipInterval); // lazily clone\n\n      if (!haveSkipped) {                          // lazily initialize skip stream\n        skipListReader.init(skipPointer, freqBasePointer, proxBasePointer, df, currentFieldStoresPayloads);\n        haveSkipped = true;\n      }\n\n      int newCount = skipListReader.skipTo(target); \n      if (newCount > count) {\n        freqStream.seek(skipListReader.getFreqPointer());\n        skipProx(skipListReader.getProxPointer(), skipListReader.getPayloadLength());\n\n        doc = skipListReader.getDoc();\n        count = newCount;\n      }      \n    }\n\n    // done skipping, now just scan\n    do {\n      if (!next())\n        return false;\n    } while (target > doc);\n    return true;\n  }\n\n","sourceOld":"  /** Optimized implementation. */\n  public boolean skipTo(int target) throws IOException {\n    if (df >= skipInterval) {                      // optimized case\n      if (skipListReader == null)\n        skipListReader = new DefaultSkipListReader((IndexInput) freqStream.clone(), maxSkipLevels, skipInterval); // lazily clone\n\n      if (!haveSkipped) {                          // lazily initialize skip stream\n        skipListReader.init(skipPointer, freqBasePointer, proxBasePointer, df, currentFieldStoresPayloads);\n        haveSkipped = true;\n      }\n\n      int newCount = skipListReader.skipTo(target); \n      if (newCount > count) {\n        freqStream.seek(skipListReader.getFreqPointer());\n        skipProx(skipListReader.getProxPointer(), skipListReader.getPayloadLength());\n\n        doc = skipListReader.getDoc();\n        count = newCount;\n      }      \n    }\n\n    // done skipping, now just scan\n    do {\n      if (!next())\n        return false;\n    } while (target > doc);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/SegmentTermDocs#skipTo(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/SegmentTermDocs#skipTo(int).mjava","sourceNew":"  /** Optimized implementation. */\n  public boolean skipTo(int target) throws IOException {\n    // don't skip if the target is close (within skipInterval docs away)\n    if ((target - skipInterval) >= doc && df >= skipInterval) {                      // optimized case\n      if (skipListReader == null)\n        skipListReader = new DefaultSkipListReader((IndexInput) freqStream.clone(), maxSkipLevels, skipInterval); // lazily clone\n\n      if (!haveSkipped) {                          // lazily initialize skip stream\n        skipListReader.init(skipPointer, freqBasePointer, proxBasePointer, df, currentFieldStoresPayloads);\n        haveSkipped = true;\n      }\n\n      int newCount = skipListReader.skipTo(target); \n      if (newCount > count) {\n        freqStream.seek(skipListReader.getFreqPointer());\n        skipProx(skipListReader.getProxPointer(), skipListReader.getPayloadLength());\n\n        doc = skipListReader.getDoc();\n        count = newCount;\n      }      \n    }\n\n    // done skipping, now just scan\n    do {\n      if (!next())\n        return false;\n    } while (target > doc);\n    return true;\n  }\n\n","sourceOld":"  /** Optimized implementation. */\n  public boolean skipTo(int target) throws IOException {\n    if (df >= skipInterval) {                      // optimized case\n      if (skipListReader == null)\n        skipListReader = new DefaultSkipListReader((IndexInput) freqStream.clone(), maxSkipLevels, skipInterval); // lazily clone\n\n      if (!haveSkipped) {                          // lazily initialize skip stream\n        skipListReader.init(skipPointer, freqBasePointer, proxBasePointer, df, currentFieldStoresPayloads);\n        haveSkipped = true;\n      }\n\n      int newCount = skipListReader.skipTo(target); \n      if (newCount > count) {\n        freqStream.seek(skipListReader.getFreqPointer());\n        skipProx(skipListReader.getProxPointer(), skipListReader.getPayloadLength());\n\n        doc = skipListReader.getDoc();\n        count = newCount;\n      }      \n    }\n\n    // done skipping, now just scan\n    do {\n      if (!next())\n        return false;\n    } while (target > doc);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/SegmentTermDocs#skipTo(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/SegmentTermDocs#skipTo(int).mjava","sourceNew":"  /** Optimized implementation. */\n  public boolean skipTo(int target) throws IOException {\n    // don't skip if the target is close (within skipInterval docs away)\n    if ((target - skipInterval) >= doc && df >= skipInterval) {                      // optimized case\n      if (skipListReader == null)\n        skipListReader = new DefaultSkipListReader((IndexInput) freqStream.clone(), maxSkipLevels, skipInterval); // lazily clone\n\n      if (!haveSkipped) {                          // lazily initialize skip stream\n        skipListReader.init(skipPointer, freqBasePointer, proxBasePointer, df, currentFieldStoresPayloads);\n        haveSkipped = true;\n      }\n\n      int newCount = skipListReader.skipTo(target); \n      if (newCount > count) {\n        freqStream.seek(skipListReader.getFreqPointer());\n        skipProx(skipListReader.getProxPointer(), skipListReader.getPayloadLength());\n\n        doc = skipListReader.getDoc();\n        count = newCount;\n      }      \n    }\n\n    // done skipping, now just scan\n    do {\n      if (!next())\n        return false;\n    } while (target > doc);\n    return true;\n  }\n\n","sourceOld":"  /** Optimized implementation. */\n  public boolean skipTo(int target) throws IOException {\n    if (df >= skipInterval) {                      // optimized case\n      if (skipListReader == null)\n        skipListReader = new DefaultSkipListReader((IndexInput) freqStream.clone(), maxSkipLevels, skipInterval); // lazily clone\n\n      if (!haveSkipped) {                          // lazily initialize skip stream\n        skipListReader.init(skipPointer, freqBasePointer, proxBasePointer, df, currentFieldStoresPayloads);\n        haveSkipped = true;\n      }\n\n      int newCount = skipListReader.skipTo(target); \n      if (newCount > count) {\n        freqStream.seek(skipListReader.getFreqPointer());\n        skipProx(skipListReader.getProxPointer(), skipListReader.getPayloadLength());\n\n        doc = skipListReader.getDoc();\n        count = newCount;\n      }      \n    }\n\n    // done skipping, now just scan\n    do {\n      if (!next())\n        return false;\n    } while (target > doc);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene3x/SegmentTermDocs#skipTo(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/SegmentTermDocs#skipTo(int).mjava","sourceNew":"  /** Optimized implementation. */\n  public boolean skipTo(int target) throws IOException {\n    // don't skip if the target is close (within skipInterval docs away)\n    if ((target - skipInterval) >= doc && df >= skipInterval) {                      // optimized case\n      if (skipListReader == null)\n        skipListReader = new DefaultSkipListReader((IndexInput) freqStream.clone(), maxSkipLevels, skipInterval); // lazily clone\n\n      if (!haveSkipped) {                          // lazily initialize skip stream\n        skipListReader.init(skipPointer, freqBasePointer, proxBasePointer, df, currentFieldStoresPayloads);\n        haveSkipped = true;\n      }\n\n      int newCount = skipListReader.skipTo(target); \n      if (newCount > count) {\n        freqStream.seek(skipListReader.getFreqPointer());\n        skipProx(skipListReader.getProxPointer(), skipListReader.getPayloadLength());\n\n        doc = skipListReader.getDoc();\n        count = newCount;\n      }      \n    }\n\n    // done skipping, now just scan\n    do {\n      if (!next())\n        return false;\n    } while (target > doc);\n    return true;\n  }\n\n","sourceOld":"  /** Optimized implementation. */\n  public boolean skipTo(int target) throws IOException {\n    // don't skip if the target is close (within skipInterval docs away)\n    if ((target - skipInterval) >= doc && df >= skipInterval) {                      // optimized case\n      if (skipListReader == null)\n        skipListReader = new DefaultSkipListReader((IndexInput) freqStream.clone(), maxSkipLevels, skipInterval); // lazily clone\n\n      if (!haveSkipped) {                          // lazily initialize skip stream\n        skipListReader.init(skipPointer, freqBasePointer, proxBasePointer, df, currentFieldStoresPayloads);\n        haveSkipped = true;\n      }\n\n      int newCount = skipListReader.skipTo(target); \n      if (newCount > count) {\n        freqStream.seek(skipListReader.getFreqPointer());\n        skipProx(skipListReader.getProxPointer(), skipListReader.getPayloadLength());\n\n        doc = skipListReader.getDoc();\n        count = newCount;\n      }      \n    }\n\n    // done skipping, now just scan\n    do {\n      if (!next())\n        return false;\n    } while (target > doc);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["aff28d83336d21b964812b94574b7e8cea46a3cc"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","aff28d83336d21b964812b94574b7e8cea46a3cc"],"aff28d83336d21b964812b94574b7e8cea46a3cc":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","aff28d83336d21b964812b94574b7e8cea46a3cc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"aff28d83336d21b964812b94574b7e8cea46a3cc":["7b91922b55d15444d554721b352861d028eb8278","f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["f1bdbf92da222965b46c0a942c3857ba56e5c638","aff28d83336d21b964812b94574b7e8cea46a3cc","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}