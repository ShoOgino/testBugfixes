{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetHeatmap.FacetHeatmapProcessor#process().mjava","commits":[{"id":"7e2b01ba3eea386e6e8d07b7ff5f5d78b1c0deca","date":1541737946,"type":0,"author":"Tim Underwood","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetHeatmap.FacetHeatmapProcessor#process().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void process() throws IOException {\n      super.process(); // handles domain changes\n\n      //Compute!\n      final HeatmapFacetCounter.Heatmap heatmap;\n      try {\n        heatmap = HeatmapFacetCounter.calcFacets(\n            strategy,\n            fcontext.searcher.getTopReaderContext(),\n            getTopAcceptDocs(fcontext.base, fcontext.searcher), // turn DocSet into Bits\n            boundsShape,\n            gridLevel,\n            maxCells);\n      } catch (IllegalArgumentException e) {//e.g. too many cells\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.toString(), e);\n      }\n\n      //Populate response\n      response = new SimpleOrderedMap();\n      response.add(\"gridLevel\", gridLevel);\n      response.add(\"columns\", heatmap.columns);\n      response.add(\"rows\", heatmap.rows);\n      response.add(\"minX\", heatmap.region.getMinX());\n      response.add(\"maxX\", heatmap.region.getMaxX());\n      response.add(\"minY\", heatmap.region.getMinY());\n      response.add(\"maxY\", heatmap.region.getMaxY());\n\n      //A shard request will always be a PNG\n      String format = fcontext.isShard() ? FORMAT_PNG : FacetHeatmap.this.format;\n\n      response.add(\"counts_\" + format, formatCountsVal(format, heatmap.columns, heatmap.rows, heatmap.counts, fcontext.getDebugInfo()));\n\n      // note: we do not call processStats or processSubs as it's not supported yet\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56a9893014b284af4d1af451e6c02e7ffdf5b6e","date":1590065972,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetHeatmap.FacetHeatmapProcessor#process().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetHeatmap.FacetHeatmapProcessor#process().mjava","sourceNew":"    @Override\n    @SuppressWarnings({\"unchecked\"})\n    public void process() throws IOException {\n      super.process(); // handles domain changes\n\n      //Compute!\n      final HeatmapFacetCounter.Heatmap heatmap;\n      try {\n        heatmap = HeatmapFacetCounter.calcFacets(\n            strategy,\n            fcontext.searcher.getTopReaderContext(),\n            getTopAcceptDocs(fcontext.base, fcontext.searcher), // turn DocSet into Bits\n            boundsShape,\n            gridLevel,\n            maxCells);\n      } catch (IllegalArgumentException e) {//e.g. too many cells\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.toString(), e);\n      }\n\n      //Populate response\n      response = new SimpleOrderedMap<>();\n      response.add(\"gridLevel\", gridLevel);\n      response.add(\"columns\", heatmap.columns);\n      response.add(\"rows\", heatmap.rows);\n      response.add(\"minX\", heatmap.region.getMinX());\n      response.add(\"maxX\", heatmap.region.getMaxX());\n      response.add(\"minY\", heatmap.region.getMinY());\n      response.add(\"maxY\", heatmap.region.getMaxY());\n\n      //A shard request will always be a PNG\n      String format = fcontext.isShard() ? FORMAT_PNG : FacetHeatmap.this.format;\n\n      response.add(\"counts_\" + format, formatCountsVal(format, heatmap.columns, heatmap.rows, heatmap.counts, fcontext.getDebugInfo()));\n\n      // note: we do not call processStats or processSubs as it's not supported yet\n    }\n\n","sourceOld":"    @Override\n    public void process() throws IOException {\n      super.process(); // handles domain changes\n\n      //Compute!\n      final HeatmapFacetCounter.Heatmap heatmap;\n      try {\n        heatmap = HeatmapFacetCounter.calcFacets(\n            strategy,\n            fcontext.searcher.getTopReaderContext(),\n            getTopAcceptDocs(fcontext.base, fcontext.searcher), // turn DocSet into Bits\n            boundsShape,\n            gridLevel,\n            maxCells);\n      } catch (IllegalArgumentException e) {//e.g. too many cells\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.toString(), e);\n      }\n\n      //Populate response\n      response = new SimpleOrderedMap();\n      response.add(\"gridLevel\", gridLevel);\n      response.add(\"columns\", heatmap.columns);\n      response.add(\"rows\", heatmap.rows);\n      response.add(\"minX\", heatmap.region.getMinX());\n      response.add(\"maxX\", heatmap.region.getMaxX());\n      response.add(\"minY\", heatmap.region.getMinY());\n      response.add(\"maxY\", heatmap.region.getMaxY());\n\n      //A shard request will always be a PNG\n      String format = fcontext.isShard() ? FORMAT_PNG : FacetHeatmap.this.format;\n\n      response.add(\"counts_\" + format, formatCountsVal(format, heatmap.columns, heatmap.rows, heatmap.counts, fcontext.getDebugInfo()));\n\n      // note: we do not call processStats or processSubs as it's not supported yet\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["7e2b01ba3eea386e6e8d07b7ff5f5d78b1c0deca"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7e2b01ba3eea386e6e8d07b7ff5f5d78b1c0deca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"]},"commit2Childs":{"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7e2b01ba3eea386e6e8d07b7ff5f5d78b1c0deca"],"7e2b01ba3eea386e6e8d07b7ff5f5d78b1c0deca":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}