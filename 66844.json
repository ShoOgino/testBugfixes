{"path":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardLeaderChange().mjava","commits":[{"id":"c51a2dcb8b4e1820a44f35f11961110201e06cdb","date":1329994529,"type":0,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardLeaderChange().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testShardLeaderChange() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient controllerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    MockZKController mockController2 = null;\n    OverseerRestarter killer = null;\n    Thread killerThread = null;\n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      killer = new OverseerRestarter(server.getZkAddress());\n      killerThread = new Thread(killer);\n      killerThread.start();\n\n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      for (int i = 0; i < 20; i++) {\n        mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n        mockController.publishState(\"core1\", \"state1\",1);\n        if(mockController2!=null) {\n          mockController2.close();\n          mockController2 = null;\n        }\n        mockController.publishState(\"core1\", \"state2\",1);\n        mockController2 = new MockZKController(server.getZkAddress(), \"node2\", \"collection1\");\n        mockController.publishState(\"core1\", \"state1\",1);\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core1\");\n        mockController2.publishState(\"core4\", \"state2\" ,1);\n        mockController.close();\n        mockController = null;\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core4\");\n      }\n    } finally {\n      if (killer != null) {\n        killer.run = false;\n        if (killerThread != null) {\n          killerThread.join();\n        }\n      }\n      if (mockController != null) {\n        mockController.close();\n      }\n      if (mockController2 != null) {\n        mockController2.close();\n      }\n      if (controllerClient != null) {\n        controllerClient.close();\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","7875fce026a0a335830cfc75abc3eb009eff9a73","1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardLeaderChange().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testShardLeaderChange() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient controllerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    MockZKController mockController2 = null;\n    OverseerRestarter killer = null;\n    Thread killerThread = null;\n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      killer = new OverseerRestarter(server.getZkAddress());\n      killerThread = new Thread(killer);\n      killerThread.start();\n\n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      for (int i = 0; i < 20; i++) {\n        mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n        mockController.publishState(\"core1\", \"state1\",1);\n        if(mockController2!=null) {\n          mockController2.close();\n          mockController2 = null;\n        }\n        mockController.publishState(\"core1\", \"state2\",1);\n        mockController2 = new MockZKController(server.getZkAddress(), \"node2\", \"collection1\");\n        mockController.publishState(\"core1\", \"state1\",1);\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core1\");\n        mockController2.publishState(\"core4\", \"state2\" ,1);\n        mockController.close();\n        mockController = null;\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core4\");\n      }\n    } finally {\n      if (killer != null) {\n        killer.run = false;\n        if (killerThread != null) {\n          killerThread.join();\n        }\n      }\n      if (mockController != null) {\n        mockController.close();\n      }\n      if (mockController2 != null) {\n        mockController2.close();\n      }\n      if (controllerClient != null) {\n        controllerClient.close();\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6b527fc717367a20e7ba54fd6fb2b7825bd8a1a","date":1335464712,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardLeaderChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardLeaderChange().mjava","sourceNew":"  @Test\n  public void testShardLeaderChange() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient controllerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    MockZKController mockController2 = null;\n    OverseerRestarter killer = null;\n    Thread killerThread = null;\n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      killer = new OverseerRestarter(server.getZkAddress());\n      killerThread = new Thread(killer);\n      killerThread.start();\n\n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      for (int i = 0; i < atLeast(4); i++) {\n        mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n        mockController.publishState(\"core1\", \"state1\",1);\n        if(mockController2!=null) {\n          mockController2.close();\n          mockController2 = null;\n        }\n        mockController.publishState(\"core1\", \"state2\",1);\n        mockController2 = new MockZKController(server.getZkAddress(), \"node2\", \"collection1\");\n        mockController.publishState(\"core1\", \"state1\",1);\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core1\");\n        mockController2.publishState(\"core4\", \"state2\" ,1);\n        mockController.close();\n        mockController = null;\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core4\");\n      }\n    } finally {\n      if (killer != null) {\n        killer.run = false;\n        if (killerThread != null) {\n          killerThread.join();\n        }\n      }\n      if (mockController != null) {\n        mockController.close();\n      }\n      if (mockController2 != null) {\n        mockController2.close();\n      }\n      if (controllerClient != null) {\n        controllerClient.close();\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardLeaderChange() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient controllerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    MockZKController mockController2 = null;\n    OverseerRestarter killer = null;\n    Thread killerThread = null;\n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      killer = new OverseerRestarter(server.getZkAddress());\n      killerThread = new Thread(killer);\n      killerThread.start();\n\n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      for (int i = 0; i < 20; i++) {\n        mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n        mockController.publishState(\"core1\", \"state1\",1);\n        if(mockController2!=null) {\n          mockController2.close();\n          mockController2 = null;\n        }\n        mockController.publishState(\"core1\", \"state2\",1);\n        mockController2 = new MockZKController(server.getZkAddress(), \"node2\", \"collection1\");\n        mockController.publishState(\"core1\", \"state1\",1);\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core1\");\n        mockController2.publishState(\"core4\", \"state2\" ,1);\n        mockController.close();\n        mockController = null;\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core4\");\n      }\n    } finally {\n      if (killer != null) {\n        killer.run = false;\n        if (killerThread != null) {\n          killerThread.join();\n        }\n      }\n      if (mockController != null) {\n        mockController.close();\n      }\n      if (mockController2 != null) {\n        mockController2.close();\n      }\n      if (controllerClient != null) {\n        controllerClient.close();\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a5093a9e893633cc091cf2f729d7863671c2b715","date":1339132888,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardLeaderChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardLeaderChange().mjava","sourceNew":"  @Test\n  public void testShardLeaderChange() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient controllerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    MockZKController mockController2 = null;\n    OverseerRestarter killer = null;\n    Thread killerThread = null;\n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      killer = new OverseerRestarter(server.getZkAddress());\n      killerThread = new Thread(killer);\n      killerThread.start();\n\n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      for (int i = 0; i < atLeast(4); i++) {\n        mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n        mockController.publishState(\"core1\", \"state1\",1);\n        if(mockController2!=null) {\n          mockController2.close();\n          mockController2 = null;\n        }\n        mockController.publishState(\"core1\", \"state2\",1);\n        mockController2 = new MockZKController(server.getZkAddress(), \"node2\", \"collection1\");\n        mockController.publishState(\"core1\", \"state1\",1);\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core1\");\n        mockController2.publishState(\"core4\", \"state2\" ,1);\n        mockController.close();\n        mockController = null;\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core4\");\n      }\n    } finally {\n      if (killer != null) {\n        killer.run = false;\n        if (killerThread != null) {\n          killerThread.join();\n        }\n      }\n      close(mockController);\n      close(mockController2);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardLeaderChange() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient controllerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    MockZKController mockController2 = null;\n    OverseerRestarter killer = null;\n    Thread killerThread = null;\n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      killer = new OverseerRestarter(server.getZkAddress());\n      killerThread = new Thread(killer);\n      killerThread.start();\n\n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      for (int i = 0; i < atLeast(4); i++) {\n        mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n        mockController.publishState(\"core1\", \"state1\",1);\n        if(mockController2!=null) {\n          mockController2.close();\n          mockController2 = null;\n        }\n        mockController.publishState(\"core1\", \"state2\",1);\n        mockController2 = new MockZKController(server.getZkAddress(), \"node2\", \"collection1\");\n        mockController.publishState(\"core1\", \"state1\",1);\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core1\");\n        mockController2.publishState(\"core4\", \"state2\" ,1);\n        mockController.close();\n        mockController = null;\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core4\");\n      }\n    } finally {\n      if (killer != null) {\n        killer.run = false;\n        if (killerThread != null) {\n          killerThread.join();\n        }\n      }\n      if (mockController != null) {\n        mockController.close();\n      }\n      if (mockController2 != null) {\n        mockController2.close();\n      }\n      if (controllerClient != null) {\n        controllerClient.close();\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4fae587917424e74e7780a722fd2761c19633ad0","date":1339562443,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardLeaderChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardLeaderChange().mjava","sourceNew":"  @Test\n  public void testShardLeaderChange() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient controllerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    MockZKController mockController2 = null;\n    OverseerRestarter killer = null;\n    Thread killerThread = null;\n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      killer = new OverseerRestarter(server.getZkAddress());\n      killerThread = new Thread(killer);\n      killerThread.start();\n\n      reader = new ZkStateReader(controllerClient); //no watches, we'll poll\n\n      for (int i = 0; i < atLeast(4); i++) {\n        killCounter.incrementAndGet(); //for each round allow 1 kill\n        mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n        mockController.publishState(\"core1\", \"state1\",1);\n        if(mockController2!=null) {\n          mockController2.close();\n          mockController2 = null;\n        }\n        mockController.publishState(\"core1\", \"state2\",1);\n        mockController2 = new MockZKController(server.getZkAddress(), \"node2\", \"collection1\");\n        mockController.publishState(\"core1\", \"state1\",1);\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core1\");\n        mockController2.publishState(\"core4\", \"state2\" ,1);\n        mockController.close();\n        mockController = null;\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core4\");\n      }\n    } finally {\n      if (killer != null) {\n        killer.run = false;\n        if (killerThread != null) {\n          killerThread.join();\n        }\n      }\n      close(mockController);\n      close(mockController2);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardLeaderChange() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient controllerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    MockZKController mockController2 = null;\n    OverseerRestarter killer = null;\n    Thread killerThread = null;\n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      killer = new OverseerRestarter(server.getZkAddress());\n      killerThread = new Thread(killer);\n      killerThread.start();\n\n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      for (int i = 0; i < atLeast(4); i++) {\n        mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n        mockController.publishState(\"core1\", \"state1\",1);\n        if(mockController2!=null) {\n          mockController2.close();\n          mockController2 = null;\n        }\n        mockController.publishState(\"core1\", \"state2\",1);\n        mockController2 = new MockZKController(server.getZkAddress(), \"node2\", \"collection1\");\n        mockController.publishState(\"core1\", \"state1\",1);\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core1\");\n        mockController2.publishState(\"core4\", \"state2\" ,1);\n        mockController.close();\n        mockController = null;\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core4\");\n      }\n    } finally {\n      if (killer != null) {\n        killer.run = false;\n        if (killerThread != null) {\n          killerThread.join();\n        }\n      }\n      close(mockController);\n      close(mockController2);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardLeaderChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardLeaderChange().mjava","sourceNew":"  @Test\n  public void testShardLeaderChange() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient controllerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    MockZKController mockController2 = null;\n    OverseerRestarter killer = null;\n    Thread killerThread = null;\n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      killer = new OverseerRestarter(server.getZkAddress());\n      killerThread = new Thread(killer);\n      killerThread.start();\n\n      reader = new ZkStateReader(controllerClient); //no watches, we'll poll\n\n      for (int i = 0; i < atLeast(4); i++) {\n        killCounter.incrementAndGet(); //for each round allow 1 kill\n        mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n        mockController.publishState(\"core1\", \"node1\", \"state1\",1);\n        if(mockController2!=null) {\n          mockController2.close();\n          mockController2 = null;\n        }\n        mockController.publishState(\"core1\", \"node1\",\"state2\",1);\n        mockController2 = new MockZKController(server.getZkAddress(), \"node2\", \"collection1\");\n        mockController.publishState(\"core1\", \"node1\", \"state1\",1);\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core1\");\n        mockController2.publishState(\"core4\", \"node2\", \"state2\" ,1);\n        mockController.close();\n        mockController = null;\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core4\");\n      }\n    } finally {\n      if (killer != null) {\n        killer.run = false;\n        if (killerThread != null) {\n          killerThread.join();\n        }\n      }\n      close(mockController);\n      close(mockController2);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardLeaderChange() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient controllerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    MockZKController mockController2 = null;\n    OverseerRestarter killer = null;\n    Thread killerThread = null;\n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      killer = new OverseerRestarter(server.getZkAddress());\n      killerThread = new Thread(killer);\n      killerThread.start();\n\n      reader = new ZkStateReader(controllerClient); //no watches, we'll poll\n\n      for (int i = 0; i < atLeast(4); i++) {\n        killCounter.incrementAndGet(); //for each round allow 1 kill\n        mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n        mockController.publishState(\"core1\", \"state1\",1);\n        if(mockController2!=null) {\n          mockController2.close();\n          mockController2 = null;\n        }\n        mockController.publishState(\"core1\", \"state2\",1);\n        mockController2 = new MockZKController(server.getZkAddress(), \"node2\", \"collection1\");\n        mockController.publishState(\"core1\", \"state1\",1);\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core1\");\n        mockController2.publishState(\"core4\", \"state2\" ,1);\n        mockController.close();\n        mockController = null;\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core4\");\n      }\n    } finally {\n      if (killer != null) {\n        killer.run = false;\n        if (killerThread != null) {\n          killerThread.join();\n        }\n      }\n      close(mockController);\n      close(mockController2);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardLeaderChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardLeaderChange().mjava","sourceNew":"  @Test\n  public void testShardLeaderChange() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient controllerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    MockZKController mockController2 = null;\n    OverseerRestarter killer = null;\n    Thread killerThread = null;\n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      killer = new OverseerRestarter(server.getZkAddress());\n      killerThread = new Thread(killer);\n      killerThread.start();\n\n      reader = new ZkStateReader(controllerClient); //no watches, we'll poll\n\n      for (int i = 0; i < atLeast(4); i++) {\n        killCounter.incrementAndGet(); //for each round allow 1 kill\n        mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n        mockController.publishState(\"core1\", \"node1\", \"state1\",1);\n        if(mockController2!=null) {\n          mockController2.close();\n          mockController2 = null;\n        }\n        mockController.publishState(\"core1\", \"node1\",\"state2\",1);\n        mockController2 = new MockZKController(server.getZkAddress(), \"node2\", \"collection1\");\n        mockController.publishState(\"core1\", \"node1\", \"state1\",1);\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core1\");\n        mockController2.publishState(\"core4\", \"node2\", \"state2\" ,1);\n        mockController.close();\n        mockController = null;\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core4\");\n      }\n    } finally {\n      if (killer != null) {\n        killer.run = false;\n        if (killerThread != null) {\n          killerThread.join();\n        }\n      }\n      close(mockController);\n      close(mockController2);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardLeaderChange() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient controllerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    MockZKController mockController2 = null;\n    OverseerRestarter killer = null;\n    Thread killerThread = null;\n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      killer = new OverseerRestarter(server.getZkAddress());\n      killerThread = new Thread(killer);\n      killerThread.start();\n\n      reader = new ZkStateReader(controllerClient); //no watches, we'll poll\n\n      for (int i = 0; i < atLeast(4); i++) {\n        killCounter.incrementAndGet(); //for each round allow 1 kill\n        mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n        mockController.publishState(\"core1\", \"state1\",1);\n        if(mockController2!=null) {\n          mockController2.close();\n          mockController2 = null;\n        }\n        mockController.publishState(\"core1\", \"state2\",1);\n        mockController2 = new MockZKController(server.getZkAddress(), \"node2\", \"collection1\");\n        mockController.publishState(\"core1\", \"state1\",1);\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core1\");\n        mockController2.publishState(\"core4\", \"state2\" ,1);\n        mockController.close();\n        mockController = null;\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core4\");\n      }\n    } finally {\n      if (killer != null) {\n        killer.run = false;\n        if (killerThread != null) {\n          killerThread.join();\n        }\n      }\n      close(mockController);\n      close(mockController2);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29f5eaf296600e1665151e7929d42a3cbe22e481","date":1393983215,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardLeaderChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardLeaderChange().mjava","sourceNew":"  @Test\n  public void testShardLeaderChange() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient controllerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    MockZKController mockController2 = null;\n    OverseerRestarter killer = null;\n    Thread killerThread = null;\n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      killer = new OverseerRestarter(server.getZkAddress());\n      killerThread = new Thread(killer);\n      killerThread.start();\n\n      reader = new ZkStateReader(controllerClient); //no watches, we'll poll\n\n      for (int i = 0; i < atLeast(4); i++) {\n        killCounter.incrementAndGet(); //for each round allow 1 kill\n        mockController = new MockZKController(server.getZkAddress(), \"node1\");\n        mockController.publishState(collection, \"core1\", \"node1\", \"state1\",1);\n        if(mockController2!=null) {\n          mockController2.close();\n          mockController2 = null;\n        }\n        mockController.publishState(collection, \"core1\", \"node1\",\"state2\",1);\n        mockController2 = new MockZKController(server.getZkAddress(), \"node2\");\n        mockController.publishState(collection, \"core1\", \"node1\", \"state1\",1);\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core1\");\n        mockController2.publishState(collection, \"core4\", \"node2\", \"state2\" ,1);\n        mockController.close();\n        mockController = null;\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core4\");\n      }\n    } finally {\n      if (killer != null) {\n        killer.run = false;\n        if (killerThread != null) {\n          killerThread.join();\n        }\n      }\n      close(mockController);\n      close(mockController2);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardLeaderChange() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient controllerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    MockZKController mockController2 = null;\n    OverseerRestarter killer = null;\n    Thread killerThread = null;\n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      killer = new OverseerRestarter(server.getZkAddress());\n      killerThread = new Thread(killer);\n      killerThread.start();\n\n      reader = new ZkStateReader(controllerClient); //no watches, we'll poll\n\n      for (int i = 0; i < atLeast(4); i++) {\n        killCounter.incrementAndGet(); //for each round allow 1 kill\n        mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n        mockController.publishState(\"core1\", \"node1\", \"state1\",1);\n        if(mockController2!=null) {\n          mockController2.close();\n          mockController2 = null;\n        }\n        mockController.publishState(\"core1\", \"node1\",\"state2\",1);\n        mockController2 = new MockZKController(server.getZkAddress(), \"node2\", \"collection1\");\n        mockController.publishState(\"core1\", \"node1\", \"state1\",1);\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core1\");\n        mockController2.publishState(\"core4\", \"node2\", \"state2\" ,1);\n        mockController.close();\n        mockController = null;\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core4\");\n      }\n    } finally {\n      if (killer != null) {\n        killer.run = false;\n        if (killerThread != null) {\n          killerThread.join();\n        }\n      }\n      close(mockController);\n      close(mockController2);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardLeaderChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardLeaderChange().mjava","sourceNew":"  @Test\n  public void testShardLeaderChange() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient controllerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    MockZKController mockController2 = null;\n    OverseerRestarter killer = null;\n    Thread killerThread = null;\n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      killer = new OverseerRestarter(server.getZkAddress());\n      killerThread = new Thread(killer);\n      killerThread.start();\n\n      reader = new ZkStateReader(controllerClient); //no watches, we'll poll\n\n      for (int i = 0; i < atLeast(4); i++) {\n        killCounter.incrementAndGet(); //for each round allow 1 kill\n        mockController = new MockZKController(server.getZkAddress(), \"node1\");\n        mockController.publishState(collection, \"core1\", \"node1\", \"state1\",1);\n        if(mockController2!=null) {\n          mockController2.close();\n          mockController2 = null;\n        }\n        mockController.publishState(collection, \"core1\", \"node1\",\"state2\",1);\n        mockController2 = new MockZKController(server.getZkAddress(), \"node2\");\n        mockController.publishState(collection, \"core1\", \"node1\", \"state1\",1);\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core1\");\n        mockController2.publishState(collection, \"core4\", \"node2\", \"state2\" ,1);\n        mockController.close();\n        mockController = null;\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core4\");\n      }\n    } finally {\n      if (killer != null) {\n        killer.run = false;\n        if (killerThread != null) {\n          killerThread.join();\n        }\n      }\n      close(mockController);\n      close(mockController2);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardLeaderChange() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient controllerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    MockZKController mockController2 = null;\n    OverseerRestarter killer = null;\n    Thread killerThread = null;\n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      killer = new OverseerRestarter(server.getZkAddress());\n      killerThread = new Thread(killer);\n      killerThread.start();\n\n      reader = new ZkStateReader(controllerClient); //no watches, we'll poll\n\n      for (int i = 0; i < atLeast(4); i++) {\n        killCounter.incrementAndGet(); //for each round allow 1 kill\n        mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n        mockController.publishState(\"core1\", \"node1\", \"state1\",1);\n        if(mockController2!=null) {\n          mockController2.close();\n          mockController2 = null;\n        }\n        mockController.publishState(\"core1\", \"node1\",\"state2\",1);\n        mockController2 = new MockZKController(server.getZkAddress(), \"node2\", \"collection1\");\n        mockController.publishState(\"core1\", \"node1\", \"state1\",1);\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core1\");\n        mockController2.publishState(\"core4\", \"node2\", \"state2\" ,1);\n        mockController.close();\n        mockController = null;\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core4\");\n      }\n    } finally {\n      if (killer != null) {\n        killer.run = false;\n        if (killerThread != null) {\n          killerThread.join();\n        }\n      }\n      close(mockController);\n      close(mockController2);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb1f22cfa77230b5f05b7784feae5367f6bbb488","date":1395968145,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardLeaderChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardLeaderChange().mjava","sourceNew":"  @Test\n  public void testShardLeaderChange() throws Exception {\n    String zkDir = createTempDir().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient controllerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    MockZKController mockController2 = null;\n    OverseerRestarter killer = null;\n    Thread killerThread = null;\n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      killer = new OverseerRestarter(server.getZkAddress());\n      killerThread = new Thread(killer);\n      killerThread.start();\n\n      reader = new ZkStateReader(controllerClient); //no watches, we'll poll\n\n      for (int i = 0; i < atLeast(4); i++) {\n        killCounter.incrementAndGet(); //for each round allow 1 kill\n        mockController = new MockZKController(server.getZkAddress(), \"node1\");\n        mockController.publishState(collection, \"core1\", \"node1\", \"state1\",1);\n        if(mockController2!=null) {\n          mockController2.close();\n          mockController2 = null;\n        }\n        mockController.publishState(collection, \"core1\", \"node1\",\"state2\",1);\n        mockController2 = new MockZKController(server.getZkAddress(), \"node2\");\n        mockController.publishState(collection, \"core1\", \"node1\", \"state1\",1);\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core1\");\n        mockController2.publishState(collection, \"core4\", \"node2\", \"state2\" ,1);\n        mockController.close();\n        mockController = null;\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core4\");\n      }\n    } finally {\n      if (killer != null) {\n        killer.run = false;\n        if (killerThread != null) {\n          killerThread.join();\n        }\n      }\n      close(mockController);\n      close(mockController2);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardLeaderChange() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient controllerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    MockZKController mockController2 = null;\n    OverseerRestarter killer = null;\n    Thread killerThread = null;\n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      killer = new OverseerRestarter(server.getZkAddress());\n      killerThread = new Thread(killer);\n      killerThread.start();\n\n      reader = new ZkStateReader(controllerClient); //no watches, we'll poll\n\n      for (int i = 0; i < atLeast(4); i++) {\n        killCounter.incrementAndGet(); //for each round allow 1 kill\n        mockController = new MockZKController(server.getZkAddress(), \"node1\");\n        mockController.publishState(collection, \"core1\", \"node1\", \"state1\",1);\n        if(mockController2!=null) {\n          mockController2.close();\n          mockController2 = null;\n        }\n        mockController.publishState(collection, \"core1\", \"node1\",\"state2\",1);\n        mockController2 = new MockZKController(server.getZkAddress(), \"node2\");\n        mockController.publishState(collection, \"core1\", \"node1\", \"state1\",1);\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core1\");\n        mockController2.publishState(collection, \"core4\", \"node2\", \"state2\" ,1);\n        mockController.close();\n        mockController = null;\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core4\");\n      }\n    } finally {\n      if (killer != null) {\n        killer.run = false;\n        if (killerThread != null) {\n          killerThread.join();\n        }\n      }\n      close(mockController);\n      close(mockController2);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e9ce820cd3ed9efb959c181daaafd22f0c70143","date":1396201051,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardLeaderChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardLeaderChange().mjava","sourceNew":"  @Test\n  public void testShardLeaderChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").getAbsolutePath();\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient controllerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    MockZKController mockController2 = null;\n    OverseerRestarter killer = null;\n    Thread killerThread = null;\n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      killer = new OverseerRestarter(server.getZkAddress());\n      killerThread = new Thread(killer);\n      killerThread.start();\n\n      reader = new ZkStateReader(controllerClient); //no watches, we'll poll\n\n      for (int i = 0; i < atLeast(4); i++) {\n        killCounter.incrementAndGet(); //for each round allow 1 kill\n        mockController = new MockZKController(server.getZkAddress(), \"node1\");\n        mockController.publishState(collection, \"core1\", \"node1\", \"state1\",1);\n        if(mockController2!=null) {\n          mockController2.close();\n          mockController2 = null;\n        }\n        mockController.publishState(collection, \"core1\", \"node1\",\"state2\",1);\n        mockController2 = new MockZKController(server.getZkAddress(), \"node2\");\n        mockController.publishState(collection, \"core1\", \"node1\", \"state1\",1);\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core1\");\n        mockController2.publishState(collection, \"core4\", \"node2\", \"state2\" ,1);\n        mockController.close();\n        mockController = null;\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core4\");\n      }\n    } finally {\n      if (killer != null) {\n        killer.run = false;\n        if (killerThread != null) {\n          killerThread.join();\n        }\n      }\n      close(mockController);\n      close(mockController2);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardLeaderChange() throws Exception {\n    String zkDir = createTempDir().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient controllerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    MockZKController mockController2 = null;\n    OverseerRestarter killer = null;\n    Thread killerThread = null;\n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      killer = new OverseerRestarter(server.getZkAddress());\n      killerThread = new Thread(killer);\n      killerThread.start();\n\n      reader = new ZkStateReader(controllerClient); //no watches, we'll poll\n\n      for (int i = 0; i < atLeast(4); i++) {\n        killCounter.incrementAndGet(); //for each round allow 1 kill\n        mockController = new MockZKController(server.getZkAddress(), \"node1\");\n        mockController.publishState(collection, \"core1\", \"node1\", \"state1\",1);\n        if(mockController2!=null) {\n          mockController2.close();\n          mockController2 = null;\n        }\n        mockController.publishState(collection, \"core1\", \"node1\",\"state2\",1);\n        mockController2 = new MockZKController(server.getZkAddress(), \"node2\");\n        mockController.publishState(collection, \"core1\", \"node1\", \"state1\",1);\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core1\");\n        mockController2.publishState(collection, \"core4\", \"node2\", \"state2\" ,1);\n        mockController.close();\n        mockController = null;\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core4\");\n      }\n    } finally {\n      if (killer != null) {\n        killer.run = false;\n        if (killerThread != null) {\n          killerThread.join();\n        }\n      }\n      close(mockController);\n      close(mockController2);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":["bb1f22cfa77230b5f05b7784feae5367f6bbb488","c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardLeaderChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardLeaderChange().mjava","sourceNew":"  @Test\n  public void testShardLeaderChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").getAbsolutePath();\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient controllerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    MockZKController mockController2 = null;\n    OverseerRestarter killer = null;\n    Thread killerThread = null;\n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      killer = new OverseerRestarter(server.getZkAddress());\n      killerThread = new Thread(killer);\n      killerThread.start();\n\n      reader = new ZkStateReader(controllerClient); //no watches, we'll poll\n\n      for (int i = 0; i < atLeast(4); i++) {\n        killCounter.incrementAndGet(); //for each round allow 1 kill\n        mockController = new MockZKController(server.getZkAddress(), \"node1\");\n        mockController.publishState(collection, \"core1\", \"node1\", \"state1\",1);\n        if(mockController2!=null) {\n          mockController2.close();\n          mockController2 = null;\n        }\n        mockController.publishState(collection, \"core1\", \"node1\",\"state2\",1);\n        mockController2 = new MockZKController(server.getZkAddress(), \"node2\");\n        mockController.publishState(collection, \"core1\", \"node1\", \"state1\",1);\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core1\");\n        mockController2.publishState(collection, \"core4\", \"node2\", \"state2\" ,1);\n        mockController.close();\n        mockController = null;\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core4\");\n      }\n    } finally {\n      if (killer != null) {\n        killer.run = false;\n        if (killerThread != null) {\n          killerThread.join();\n        }\n      }\n      close(mockController);\n      close(mockController2);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardLeaderChange() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient controllerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    MockZKController mockController2 = null;\n    OverseerRestarter killer = null;\n    Thread killerThread = null;\n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      killer = new OverseerRestarter(server.getZkAddress());\n      killerThread = new Thread(killer);\n      killerThread.start();\n\n      reader = new ZkStateReader(controllerClient); //no watches, we'll poll\n\n      for (int i = 0; i < atLeast(4); i++) {\n        killCounter.incrementAndGet(); //for each round allow 1 kill\n        mockController = new MockZKController(server.getZkAddress(), \"node1\");\n        mockController.publishState(collection, \"core1\", \"node1\", \"state1\",1);\n        if(mockController2!=null) {\n          mockController2.close();\n          mockController2 = null;\n        }\n        mockController.publishState(collection, \"core1\", \"node1\",\"state2\",1);\n        mockController2 = new MockZKController(server.getZkAddress(), \"node2\");\n        mockController.publishState(collection, \"core1\", \"node1\", \"state1\",1);\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core1\");\n        mockController2.publishState(collection, \"core4\", \"node2\", \"state2\" ,1);\n        mockController.close();\n        mockController = null;\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core4\");\n      }\n    } finally {\n      if (killer != null) {\n        killer.run = false;\n        if (killerThread != null) {\n          killerThread.join();\n        }\n      }\n      close(mockController);\n      close(mockController2);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardLeaderChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardLeaderChange().mjava","sourceNew":"  @Test\n  public void testShardLeaderChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient controllerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    MockZKController mockController2 = null;\n    OverseerRestarter killer = null;\n    Thread killerThread = null;\n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      killer = new OverseerRestarter(server.getZkAddress());\n      killerThread = new Thread(killer);\n      killerThread.start();\n\n      reader = new ZkStateReader(controllerClient); //no watches, we'll poll\n\n      for (int i = 0; i < atLeast(4); i++) {\n        killCounter.incrementAndGet(); //for each round allow 1 kill\n        mockController = new MockZKController(server.getZkAddress(), \"node1\");\n        mockController.publishState(collection, \"core1\", \"node1\", \"state1\",1);\n        if(mockController2!=null) {\n          mockController2.close();\n          mockController2 = null;\n        }\n        mockController.publishState(collection, \"core1\", \"node1\",\"state2\",1);\n        mockController2 = new MockZKController(server.getZkAddress(), \"node2\");\n        mockController.publishState(collection, \"core1\", \"node1\", \"state1\",1);\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core1\");\n        mockController2.publishState(collection, \"core4\", \"node2\", \"state2\" ,1);\n        mockController.close();\n        mockController = null;\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core4\");\n      }\n    } finally {\n      if (killer != null) {\n        killer.run = false;\n        if (killerThread != null) {\n          killerThread.join();\n        }\n      }\n      close(mockController);\n      close(mockController2);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardLeaderChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").getAbsolutePath();\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient controllerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    MockZKController mockController2 = null;\n    OverseerRestarter killer = null;\n    Thread killerThread = null;\n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      killer = new OverseerRestarter(server.getZkAddress());\n      killerThread = new Thread(killer);\n      killerThread.start();\n\n      reader = new ZkStateReader(controllerClient); //no watches, we'll poll\n\n      for (int i = 0; i < atLeast(4); i++) {\n        killCounter.incrementAndGet(); //for each round allow 1 kill\n        mockController = new MockZKController(server.getZkAddress(), \"node1\");\n        mockController.publishState(collection, \"core1\", \"node1\", \"state1\",1);\n        if(mockController2!=null) {\n          mockController2.close();\n          mockController2 = null;\n        }\n        mockController.publishState(collection, \"core1\", \"node1\",\"state2\",1);\n        mockController2 = new MockZKController(server.getZkAddress(), \"node2\");\n        mockController.publishState(collection, \"core1\", \"node1\", \"state1\",1);\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core1\");\n        mockController2.publishState(collection, \"core4\", \"node2\", \"state2\" ,1);\n        mockController.close();\n        mockController = null;\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core4\");\n      }\n    } finally {\n      if (killer != null) {\n        killer.run = false;\n        if (killerThread != null) {\n          killerThread.join();\n        }\n      }\n      close(mockController);\n      close(mockController2);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7875fce026a0a335830cfc75abc3eb009eff9a73","date":1425897108,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardLeaderChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardLeaderChange().mjava","sourceNew":"  @Test\n  public void testShardLeaderChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient controllerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    MockZKController mockController2 = null;\n    OverseerRestarter killer = null;\n    Thread killerThread = null;\n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n\n      killer = new OverseerRestarter(server.getZkAddress());\n      killerThread = new Thread(killer);\n      killerThread.start();\n\n      reader = new ZkStateReader(controllerClient); //no watches, we'll poll\n\n      for (int i = 0; i < atLeast(4); i++) {\n        killCounter.incrementAndGet(); //for each round allow 1 kill\n        mockController = new MockZKController(server.getZkAddress(), \"node1\");\n        mockController.publishState(collection, \"core1\", \"node1\", \"state1\",1);\n        if(mockController2!=null) {\n          mockController2.close();\n          mockController2 = null;\n        }\n        mockController.publishState(collection, \"core1\", \"node1\",\"state2\",1);\n        mockController2 = new MockZKController(server.getZkAddress(), \"node2\");\n        mockController.publishState(collection, \"core1\", \"node1\", \"state1\",1);\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core1\");\n        mockController2.publishState(collection, \"core4\", \"node2\", \"state2\" ,1);\n        mockController.close();\n        mockController = null;\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core4\");\n      }\n    } finally {\n      if (killer != null) {\n        killer.run = false;\n        if (killerThread != null) {\n          killerThread.join();\n        }\n      }\n      close(mockController);\n      close(mockController2);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardLeaderChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient controllerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    MockZKController mockController2 = null;\n    OverseerRestarter killer = null;\n    Thread killerThread = null;\n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      killer = new OverseerRestarter(server.getZkAddress());\n      killerThread = new Thread(killer);\n      killerThread.start();\n\n      reader = new ZkStateReader(controllerClient); //no watches, we'll poll\n\n      for (int i = 0; i < atLeast(4); i++) {\n        killCounter.incrementAndGet(); //for each round allow 1 kill\n        mockController = new MockZKController(server.getZkAddress(), \"node1\");\n        mockController.publishState(collection, \"core1\", \"node1\", \"state1\",1);\n        if(mockController2!=null) {\n          mockController2.close();\n          mockController2 = null;\n        }\n        mockController.publishState(collection, \"core1\", \"node1\",\"state2\",1);\n        mockController2 = new MockZKController(server.getZkAddress(), \"node2\");\n        mockController.publishState(collection, \"core1\", \"node1\", \"state1\",1);\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core1\");\n        mockController2.publishState(collection, \"core4\", \"node2\", \"state2\" ,1);\n        mockController.close();\n        mockController = null;\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core4\");\n      }\n    } finally {\n      if (killer != null) {\n        killer.run = false;\n        if (killerThread != null) {\n          killerThread.join();\n        }\n      }\n      close(mockController);\n      close(mockController2);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":["c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardLeaderChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardLeaderChange().mjava","sourceNew":"  @Test\n  public void testShardLeaderChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient controllerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    MockZKController mockController2 = null;\n    OverseerRestarter killer = null;\n    Thread killerThread = null;\n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n\n      killer = new OverseerRestarter(server.getZkAddress());\n      killerThread = new Thread(killer);\n      killerThread.start();\n\n      reader = new ZkStateReader(controllerClient); //no watches, we'll poll\n\n      for (int i = 0; i < atLeast(4); i++) {\n        killCounter.incrementAndGet(); //for each round allow 1 kill\n        mockController = new MockZKController(server.getZkAddress(), \"node1\");\n        mockController.publishState(collection, \"core1\", \"node1\", \"state1\",1);\n        if(mockController2!=null) {\n          mockController2.close();\n          mockController2 = null;\n        }\n        mockController.publishState(collection, \"core1\", \"node1\",\"state2\",1);\n        mockController2 = new MockZKController(server.getZkAddress(), \"node2\");\n        mockController.publishState(collection, \"core1\", \"node1\", \"state1\",1);\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core1\");\n        mockController2.publishState(collection, \"core4\", \"node2\", \"state2\" ,1);\n        mockController.close();\n        mockController = null;\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core4\");\n      }\n    } finally {\n      if (killer != null) {\n        killer.run = false;\n        if (killerThread != null) {\n          killerThread.join();\n        }\n      }\n      close(mockController);\n      close(mockController2);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardLeaderChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient controllerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    MockZKController mockController2 = null;\n    OverseerRestarter killer = null;\n    Thread killerThread = null;\n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      killer = new OverseerRestarter(server.getZkAddress());\n      killerThread = new Thread(killer);\n      killerThread.start();\n\n      reader = new ZkStateReader(controllerClient); //no watches, we'll poll\n\n      for (int i = 0; i < atLeast(4); i++) {\n        killCounter.incrementAndGet(); //for each round allow 1 kill\n        mockController = new MockZKController(server.getZkAddress(), \"node1\");\n        mockController.publishState(collection, \"core1\", \"node1\", \"state1\",1);\n        if(mockController2!=null) {\n          mockController2.close();\n          mockController2 = null;\n        }\n        mockController.publishState(collection, \"core1\", \"node1\",\"state2\",1);\n        mockController2 = new MockZKController(server.getZkAddress(), \"node2\");\n        mockController.publishState(collection, \"core1\", \"node1\", \"state1\",1);\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core1\");\n        mockController2.publishState(collection, \"core4\", \"node2\", \"state2\" ,1);\n        mockController.close();\n        mockController = null;\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core4\");\n      }\n    } finally {\n      if (killer != null) {\n        killer.run = false;\n        if (killerThread != null) {\n          killerThread.join();\n        }\n      }\n      close(mockController);\n      close(mockController2);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a219f1dcad1700e84807666bdbd2b573e8de7021","date":1428130940,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardLeaderChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardLeaderChange().mjava","sourceNew":"  @Test\n  public void testShardLeaderChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient controllerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    MockZKController mockController2 = null;\n    OverseerRestarter killer = null;\n    Thread killerThread = null;\n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n\n      killer = new OverseerRestarter(server.getZkAddress());\n      killerThread = new Thread(killer);\n      killerThread.start();\n\n      reader = new ZkStateReader(controllerClient); //no watches, we'll poll\n\n      for (int i = 0; i < atLeast(4); i++) {\n        killCounter.incrementAndGet(); //for each round allow 1 kill\n        mockController = new MockZKController(server.getZkAddress(), \"node1\");\n        mockController.publishState(collection, \"core1\", \"node1\", Replica.State.ACTIVE,1);\n        if(mockController2!=null) {\n          mockController2.close();\n          mockController2 = null;\n        }\n        mockController.publishState(collection, \"core1\", \"node1\",Replica.State.RECOVERING,1);\n        mockController2 = new MockZKController(server.getZkAddress(), \"node2\");\n        mockController.publishState(collection, \"core1\", \"node1\", Replica.State.ACTIVE,1);\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core1\");\n        mockController2.publishState(collection, \"core4\", \"node2\", Replica.State.ACTIVE ,1);\n        mockController.close();\n        mockController = null;\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core4\");\n      }\n    } finally {\n      if (killer != null) {\n        killer.run = false;\n        if (killerThread != null) {\n          killerThread.join();\n        }\n      }\n      close(mockController);\n      close(mockController2);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardLeaderChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient controllerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    MockZKController mockController2 = null;\n    OverseerRestarter killer = null;\n    Thread killerThread = null;\n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n\n      killer = new OverseerRestarter(server.getZkAddress());\n      killerThread = new Thread(killer);\n      killerThread.start();\n\n      reader = new ZkStateReader(controllerClient); //no watches, we'll poll\n\n      for (int i = 0; i < atLeast(4); i++) {\n        killCounter.incrementAndGet(); //for each round allow 1 kill\n        mockController = new MockZKController(server.getZkAddress(), \"node1\");\n        mockController.publishState(collection, \"core1\", \"node1\", \"state1\",1);\n        if(mockController2!=null) {\n          mockController2.close();\n          mockController2 = null;\n        }\n        mockController.publishState(collection, \"core1\", \"node1\",\"state2\",1);\n        mockController2 = new MockZKController(server.getZkAddress(), \"node2\");\n        mockController.publishState(collection, \"core1\", \"node1\", \"state1\",1);\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core1\");\n        mockController2.publishState(collection, \"core4\", \"node2\", \"state2\" ,1);\n        mockController.close();\n        mockController = null;\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core4\");\n      }\n    } finally {\n      if (killer != null) {\n        killer.run = false;\n        if (killerThread != null) {\n          killerThread.join();\n        }\n      }\n      close(mockController);\n      close(mockController2);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d48cfd089cba66f9745d8043e8e971b60514418d","date":1449003177,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardLeaderChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardLeaderChange().mjava","sourceNew":"  @Test\n  public void testShardLeaderChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient controllerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    MockZKController mockController2 = null;\n    OverseerRestarter killer = null;\n    Thread killerThread = null;\n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n\n      killer = new OverseerRestarter(server.getZkAddress());\n      killerThread = new Thread(killer);\n      killerThread.start();\n\n      reader = new ZkStateReader(controllerClient); //no watches, we'll poll\n\n      for (int i = 0; i < atLeast(4); i++) {\n        killCounter.incrementAndGet(); //for each round allow 1 kill\n        mockController = new MockZKController(server.getZkAddress(), \"node1\");\n        mockController.publishState(collection, \"core1\", \"node1\", Replica.State.ACTIVE,1);\n        if(mockController2!=null) {\n          mockController2.close();\n          mockController2 = null;\n        }\n        mockController.publishState(collection, \"core1\", \"node1\",Replica.State.RECOVERING,1);\n        mockController2 = new MockZKController(server.getZkAddress(), \"node2\");\n        mockController.publishState(collection, \"core1\", \"node1\", Replica.State.ACTIVE,1);\n        verifyShardLeader(reader, collection, \"shard1\", \"core1\");\n        mockController2.publishState(collection, \"core4\", \"node2\", Replica.State.ACTIVE ,1);\n        mockController.close();\n        mockController = null;\n        verifyShardLeader(reader, collection, \"shard1\", \"core4\");\n      }\n    } finally {\n      if (killer != null) {\n        killer.run = false;\n        if (killerThread != null) {\n          killerThread.join();\n        }\n      }\n      close(mockController);\n      close(mockController2);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardLeaderChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient controllerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    MockZKController mockController2 = null;\n    OverseerRestarter killer = null;\n    Thread killerThread = null;\n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n\n      killer = new OverseerRestarter(server.getZkAddress());\n      killerThread = new Thread(killer);\n      killerThread.start();\n\n      reader = new ZkStateReader(controllerClient); //no watches, we'll poll\n\n      for (int i = 0; i < atLeast(4); i++) {\n        killCounter.incrementAndGet(); //for each round allow 1 kill\n        mockController = new MockZKController(server.getZkAddress(), \"node1\");\n        mockController.publishState(collection, \"core1\", \"node1\", Replica.State.ACTIVE,1);\n        if(mockController2!=null) {\n          mockController2.close();\n          mockController2 = null;\n        }\n        mockController.publishState(collection, \"core1\", \"node1\",Replica.State.RECOVERING,1);\n        mockController2 = new MockZKController(server.getZkAddress(), \"node2\");\n        mockController.publishState(collection, \"core1\", \"node1\", Replica.State.ACTIVE,1);\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core1\");\n        mockController2.publishState(collection, \"core4\", \"node2\", Replica.State.ACTIVE ,1);\n        mockController.close();\n        mockController = null;\n        verifyShardLeader(reader, \"collection1\", \"shard1\", \"core4\");\n      }\n    } finally {\n      if (killer != null) {\n        killer.run = false;\n        if (killerThread != null) {\n          killerThread.join();\n        }\n      }\n      close(mockController);\n      close(mockController2);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","date":1457343183,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardLeaderChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardLeaderChange().mjava","sourceNew":"  @Test\n  public void testShardLeaderChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient controllerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    MockZKController mockController2 = null;\n    OverseerRestarter killer = null;\n    Thread killerThread = null;\n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n\n      killer = new OverseerRestarter(server.getZkAddress());\n      killerThread = new Thread(killer);\n      killerThread.start();\n\n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      for (int i = 0; i < atLeast(4); i++) {\n        killCounter.incrementAndGet(); //for each round allow 1 kill\n        mockController = new MockZKController(server.getZkAddress(), \"node1\");\n        mockController.publishState(collection, \"core1\", \"node1\", Replica.State.ACTIVE,1);\n        if(mockController2!=null) {\n          mockController2.close();\n          mockController2 = null;\n        }\n        mockController.publishState(collection, \"core1\", \"node1\",Replica.State.RECOVERING,1);\n        mockController2 = new MockZKController(server.getZkAddress(), \"node2\");\n        mockController.publishState(collection, \"core1\", \"node1\", Replica.State.ACTIVE,1);\n        verifyShardLeader(reader, collection, \"shard1\", \"core1\");\n        mockController2.publishState(collection, \"core4\", \"node2\", Replica.State.ACTIVE ,1);\n        mockController.close();\n        mockController = null;\n        verifyShardLeader(reader, collection, \"shard1\", \"core4\");\n      }\n    } finally {\n      if (killer != null) {\n        killer.run = false;\n        if (killerThread != null) {\n          killerThread.join();\n        }\n      }\n      close(mockController);\n      close(mockController2);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardLeaderChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient controllerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    MockZKController mockController2 = null;\n    OverseerRestarter killer = null;\n    Thread killerThread = null;\n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n\n      killer = new OverseerRestarter(server.getZkAddress());\n      killerThread = new Thread(killer);\n      killerThread.start();\n\n      reader = new ZkStateReader(controllerClient); //no watches, we'll poll\n\n      for (int i = 0; i < atLeast(4); i++) {\n        killCounter.incrementAndGet(); //for each round allow 1 kill\n        mockController = new MockZKController(server.getZkAddress(), \"node1\");\n        mockController.publishState(collection, \"core1\", \"node1\", Replica.State.ACTIVE,1);\n        if(mockController2!=null) {\n          mockController2.close();\n          mockController2 = null;\n        }\n        mockController.publishState(collection, \"core1\", \"node1\",Replica.State.RECOVERING,1);\n        mockController2 = new MockZKController(server.getZkAddress(), \"node2\");\n        mockController.publishState(collection, \"core1\", \"node1\", Replica.State.ACTIVE,1);\n        verifyShardLeader(reader, collection, \"shard1\", \"core1\");\n        mockController2.publishState(collection, \"core4\", \"node2\", Replica.State.ACTIVE ,1);\n        mockController.close();\n        mockController = null;\n        verifyShardLeader(reader, collection, \"shard1\", \"core4\");\n      }\n    } finally {\n      if (killer != null) {\n        killer.run = false;\n        if (killerThread != null) {\n          killerThread.join();\n        }\n      }\n      close(mockController);\n      close(mockController2);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5de502b5478255493125e7e801411ba17a6682ec","date":1490974101,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardLeaderChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardLeaderChange().mjava","sourceNew":"  @Test\n  public void testShardLeaderChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient controllerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    MockZKController mockController2 = null;\n    OverseerRestarter killer = null;\n    Thread killerThread = null;\n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n\n      killer = new OverseerRestarter(server.getZkAddress());\n      killerThread = new Thread(killer);\n      killerThread.start();\n\n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      for (int i = 0; i < atLeast(4); i++) {\n        killCounter.incrementAndGet(); //for each round allow 1 kill\n        mockController = new MockZKController(server.getZkAddress(), \"node1\");\n        mockController.publishState(COLLECTION, \"core1\", \"node1\", Replica.State.ACTIVE,1);\n        if(mockController2!=null) {\n          mockController2.close();\n          mockController2 = null;\n        }\n        mockController.publishState(COLLECTION, \"core1\", \"node1\",Replica.State.RECOVERING,1);\n        mockController2 = new MockZKController(server.getZkAddress(), \"node2\");\n        mockController.publishState(COLLECTION, \"core1\", \"node1\", Replica.State.ACTIVE,1);\n        verifyShardLeader(reader, COLLECTION, \"shard1\", \"core1\");\n        mockController2.publishState(COLLECTION, \"core4\", \"node2\", Replica.State.ACTIVE ,1);\n        mockController.close();\n        mockController = null;\n        verifyShardLeader(reader, COLLECTION, \"shard1\", \"core4\");\n      }\n    } finally {\n      if (killer != null) {\n        killer.run = false;\n        if (killerThread != null) {\n          killerThread.join();\n        }\n      }\n      close(mockController);\n      close(mockController2);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardLeaderChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient controllerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    MockZKController mockController2 = null;\n    OverseerRestarter killer = null;\n    Thread killerThread = null;\n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n\n      killer = new OverseerRestarter(server.getZkAddress());\n      killerThread = new Thread(killer);\n      killerThread.start();\n\n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      for (int i = 0; i < atLeast(4); i++) {\n        killCounter.incrementAndGet(); //for each round allow 1 kill\n        mockController = new MockZKController(server.getZkAddress(), \"node1\");\n        mockController.publishState(collection, \"core1\", \"node1\", Replica.State.ACTIVE,1);\n        if(mockController2!=null) {\n          mockController2.close();\n          mockController2 = null;\n        }\n        mockController.publishState(collection, \"core1\", \"node1\",Replica.State.RECOVERING,1);\n        mockController2 = new MockZKController(server.getZkAddress(), \"node2\");\n        mockController.publishState(collection, \"core1\", \"node1\", Replica.State.ACTIVE,1);\n        verifyShardLeader(reader, collection, \"shard1\", \"core1\");\n        mockController2.publishState(collection, \"core4\", \"node2\", Replica.State.ACTIVE ,1);\n        mockController.close();\n        mockController = null;\n        verifyShardLeader(reader, collection, \"shard1\", \"core4\");\n      }\n    } finally {\n      if (killer != null) {\n        killer.run = false;\n        if (killerThread != null) {\n          killerThread.join();\n        }\n      }\n      close(mockController);\n      close(mockController2);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6f20fd35e3055a0c5b387df0b986a68d65d86441","date":1491045405,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardLeaderChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardLeaderChange().mjava","sourceNew":"  @Test\n  public void testShardLeaderChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient controllerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    MockZKController mockController2 = null;\n    OverseerRestarter killer = null;\n    Thread killerThread = null;\n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n\n      killer = new OverseerRestarter(server.getZkAddress());\n      killerThread = new Thread(killer);\n      killerThread.start();\n\n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      for (int i = 0; i < atLeast(4); i++) {\n        killCounter.incrementAndGet(); //for each round allow 1 kill\n        mockController = new MockZKController(server.getZkAddress(), \"node1\");\n        mockController.publishState(COLLECTION, \"core1\", \"node1\", Replica.State.ACTIVE,1);\n        if(mockController2!=null) {\n          mockController2.close();\n          mockController2 = null;\n        }\n        mockController.publishState(COLLECTION, \"core1\", \"node1\",Replica.State.RECOVERING,1);\n        mockController2 = new MockZKController(server.getZkAddress(), \"node2\");\n        mockController.publishState(COLLECTION, \"core1\", \"node1\", Replica.State.ACTIVE,1);\n        verifyShardLeader(reader, COLLECTION, \"shard1\", \"core1\");\n        mockController2.publishState(COLLECTION, \"core4\", \"node2\", Replica.State.ACTIVE ,1);\n        mockController.close();\n        mockController = null;\n        verifyShardLeader(reader, COLLECTION, \"shard1\", \"core4\");\n      }\n    } finally {\n      if (killer != null) {\n        killer.run = false;\n        if (killerThread != null) {\n          killerThread.join();\n        }\n      }\n      close(mockController);\n      close(mockController2);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardLeaderChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient controllerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    MockZKController mockController2 = null;\n    OverseerRestarter killer = null;\n    Thread killerThread = null;\n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n\n      killer = new OverseerRestarter(server.getZkAddress());\n      killerThread = new Thread(killer);\n      killerThread.start();\n\n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      for (int i = 0; i < atLeast(4); i++) {\n        killCounter.incrementAndGet(); //for each round allow 1 kill\n        mockController = new MockZKController(server.getZkAddress(), \"node1\");\n        mockController.publishState(collection, \"core1\", \"node1\", Replica.State.ACTIVE,1);\n        if(mockController2!=null) {\n          mockController2.close();\n          mockController2 = null;\n        }\n        mockController.publishState(collection, \"core1\", \"node1\",Replica.State.RECOVERING,1);\n        mockController2 = new MockZKController(server.getZkAddress(), \"node2\");\n        mockController.publishState(collection, \"core1\", \"node1\", Replica.State.ACTIVE,1);\n        verifyShardLeader(reader, collection, \"shard1\", \"core1\");\n        mockController2.publishState(collection, \"core4\", \"node2\", Replica.State.ACTIVE ,1);\n        mockController.close();\n        mockController = null;\n        verifyShardLeader(reader, collection, \"shard1\", \"core4\");\n      }\n    } finally {\n      if (killer != null) {\n        killer.run = false;\n        if (killerThread != null) {\n          killerThread.join();\n        }\n      }\n      close(mockController);\n      close(mockController2);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9b4296bd51ca61b482138791478afdd0f7d3a3d","date":1498058739,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardLeaderChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardLeaderChange().mjava","sourceNew":"  @Test\n  public void testShardLeaderChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient controllerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    MockZKController mockController2 = null;\n    OverseerRestarter killer = null;\n    Thread killerThread = null;\n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n\n      killer = new OverseerRestarter(server.getZkAddress());\n      killerThread = new Thread(killer);\n      killerThread.start();\n\n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      for (int i = 0; i < atLeast(4); i++) {\n        killCounter.incrementAndGet(); //for each round allow 1 kill\n        mockController = new MockZKController(server.getZkAddress(), \"node1\");\n        mockController.createCollection(COLLECTION, 1);\n        mockController.publishState(COLLECTION, \"core1\", \"node1\", \"shard1\", Replica.State.ACTIVE,1);\n        if(mockController2!=null) {\n          mockController2.close();\n          mockController2 = null;\n        }\n        mockController.publishState(COLLECTION, \"core1\", \"node1\",\"shard1\", Replica.State.RECOVERING,1);\n        mockController2 = new MockZKController(server.getZkAddress(), \"node2\");\n        mockController.publishState(COLLECTION, \"core1\", \"node1\",\"shard1\", Replica.State.ACTIVE,1);\n        verifyShardLeader(reader, COLLECTION, \"shard1\", \"core1\");\n        mockController2.publishState(COLLECTION, \"core4\", \"node2\", \"shard1\",  Replica.State.ACTIVE ,1);\n        mockController.close();\n        mockController = null;\n        verifyShardLeader(reader, COLLECTION, \"shard1\", \"core4\");\n      }\n    } finally {\n      if (killer != null) {\n        killer.run = false;\n        if (killerThread != null) {\n          killerThread.join();\n        }\n      }\n      close(mockController);\n      close(mockController2);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardLeaderChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient controllerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    MockZKController mockController2 = null;\n    OverseerRestarter killer = null;\n    Thread killerThread = null;\n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n\n      killer = new OverseerRestarter(server.getZkAddress());\n      killerThread = new Thread(killer);\n      killerThread.start();\n\n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      for (int i = 0; i < atLeast(4); i++) {\n        killCounter.incrementAndGet(); //for each round allow 1 kill\n        mockController = new MockZKController(server.getZkAddress(), \"node1\");\n        mockController.publishState(COLLECTION, \"core1\", \"node1\", Replica.State.ACTIVE,1);\n        if(mockController2!=null) {\n          mockController2.close();\n          mockController2 = null;\n        }\n        mockController.publishState(COLLECTION, \"core1\", \"node1\",Replica.State.RECOVERING,1);\n        mockController2 = new MockZKController(server.getZkAddress(), \"node2\");\n        mockController.publishState(COLLECTION, \"core1\", \"node1\", Replica.State.ACTIVE,1);\n        verifyShardLeader(reader, COLLECTION, \"shard1\", \"core1\");\n        mockController2.publishState(COLLECTION, \"core4\", \"node2\", Replica.State.ACTIVE ,1);\n        mockController.close();\n        mockController = null;\n        verifyShardLeader(reader, COLLECTION, \"shard1\", \"core4\");\n      }\n    } finally {\n      if (killer != null) {\n        killer.run = false;\n        if (killerThread != null) {\n          killerThread.join();\n        }\n      }\n      close(mockController);\n      close(mockController2);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardLeaderChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardLeaderChange().mjava","sourceNew":"  @Test\n  public void testShardLeaderChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient controllerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    MockZKController mockController2 = null;\n    OverseerRestarter killer = null;\n    Thread killerThread = null;\n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n\n      killer = new OverseerRestarter(server.getZkAddress());\n      killerThread = new Thread(killer);\n      killerThread.start();\n\n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      for (int i = 0; i < atLeast(4); i++) {\n        killCounter.incrementAndGet(); //for each round allow 1 kill\n        mockController = new MockZKController(server.getZkAddress(), \"node1\");\n        mockController.createCollection(COLLECTION, 1);\n        mockController.publishState(COLLECTION, \"core1\", \"node1\", \"shard1\", Replica.State.ACTIVE,1);\n        if(mockController2!=null) {\n          mockController2.close();\n          mockController2 = null;\n        }\n        mockController.publishState(COLLECTION, \"core1\", \"node1\",\"shard1\", Replica.State.RECOVERING,1);\n        mockController2 = new MockZKController(server.getZkAddress(), \"node2\");\n        mockController.publishState(COLLECTION, \"core1\", \"node1\",\"shard1\", Replica.State.ACTIVE,1);\n        verifyShardLeader(reader, COLLECTION, \"shard1\", \"core1\");\n        mockController2.publishState(COLLECTION, \"core4\", \"node2\", \"shard1\",  Replica.State.ACTIVE ,1);\n        mockController.close();\n        mockController = null;\n        verifyShardLeader(reader, COLLECTION, \"shard1\", \"core4\");\n      }\n    } finally {\n      if (killer != null) {\n        killer.run = false;\n        if (killerThread != null) {\n          killerThread.join();\n        }\n      }\n      close(mockController);\n      close(mockController2);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardLeaderChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient controllerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    MockZKController mockController2 = null;\n    OverseerRestarter killer = null;\n    Thread killerThread = null;\n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n\n      killer = new OverseerRestarter(server.getZkAddress());\n      killerThread = new Thread(killer);\n      killerThread.start();\n\n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      for (int i = 0; i < atLeast(4); i++) {\n        killCounter.incrementAndGet(); //for each round allow 1 kill\n        mockController = new MockZKController(server.getZkAddress(), \"node1\");\n        mockController.publishState(COLLECTION, \"core1\", \"node1\", Replica.State.ACTIVE,1);\n        if(mockController2!=null) {\n          mockController2.close();\n          mockController2 = null;\n        }\n        mockController.publishState(COLLECTION, \"core1\", \"node1\",Replica.State.RECOVERING,1);\n        mockController2 = new MockZKController(server.getZkAddress(), \"node2\");\n        mockController.publishState(COLLECTION, \"core1\", \"node1\", Replica.State.ACTIVE,1);\n        verifyShardLeader(reader, COLLECTION, \"shard1\", \"core1\");\n        mockController2.publishState(COLLECTION, \"core4\", \"node2\", Replica.State.ACTIVE ,1);\n        mockController.close();\n        mockController = null;\n        verifyShardLeader(reader, COLLECTION, \"shard1\", \"core4\");\n      }\n    } finally {\n      if (killer != null) {\n        killer.run = false;\n        if (killerThread != null) {\n          killerThread.join();\n        }\n      }\n      close(mockController);\n      close(mockController2);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardLeaderChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardLeaderChange().mjava","sourceNew":"  @Test\n  public void testShardLeaderChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient controllerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    MockZKController mockController2 = null;\n    OverseerRestarter killer = null;\n    Thread killerThread = null;\n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n\n      killer = new OverseerRestarter(server.getZkAddress());\n      killerThread = new Thread(killer);\n      killerThread.start();\n\n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      for (int i = 0; i < atLeast(4); i++) {\n        killCounter.incrementAndGet(); //for each round allow 1 kill\n        mockController = new MockZKController(server.getZkAddress(), \"node1\");\n        mockController.createCollection(COLLECTION, 1);\n        mockController.publishState(COLLECTION, \"core1\", \"node1\", \"shard1\", Replica.State.ACTIVE,1);\n        if(mockController2!=null) {\n          mockController2.close();\n          mockController2 = null;\n        }\n        mockController.publishState(COLLECTION, \"core1\", \"node1\",\"shard1\", Replica.State.RECOVERING,1);\n        mockController2 = new MockZKController(server.getZkAddress(), \"node2\");\n        mockController.publishState(COLLECTION, \"core1\", \"node1\",\"shard1\", Replica.State.ACTIVE,1);\n        verifyShardLeader(reader, COLLECTION, \"shard1\", \"core1\");\n        mockController2.publishState(COLLECTION, \"core4\", \"node2\", \"shard1\",  Replica.State.ACTIVE ,1);\n        mockController.close();\n        mockController = null;\n        verifyShardLeader(reader, COLLECTION, \"shard1\", \"core4\");\n      }\n    } finally {\n      if (killer != null) {\n        killer.run = false;\n        if (killerThread != null) {\n          killerThread.join();\n        }\n      }\n      close(mockController);\n      close(mockController2);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardLeaderChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient controllerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    MockZKController mockController2 = null;\n    OverseerRestarter killer = null;\n    Thread killerThread = null;\n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n\n      killer = new OverseerRestarter(server.getZkAddress());\n      killerThread = new Thread(killer);\n      killerThread.start();\n\n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      for (int i = 0; i < atLeast(4); i++) {\n        killCounter.incrementAndGet(); //for each round allow 1 kill\n        mockController = new MockZKController(server.getZkAddress(), \"node1\");\n        mockController.publishState(COLLECTION, \"core1\", \"node1\", Replica.State.ACTIVE,1);\n        if(mockController2!=null) {\n          mockController2.close();\n          mockController2 = null;\n        }\n        mockController.publishState(COLLECTION, \"core1\", \"node1\",Replica.State.RECOVERING,1);\n        mockController2 = new MockZKController(server.getZkAddress(), \"node2\");\n        mockController.publishState(COLLECTION, \"core1\", \"node1\", Replica.State.ACTIVE,1);\n        verifyShardLeader(reader, COLLECTION, \"shard1\", \"core1\");\n        mockController2.publishState(COLLECTION, \"core4\", \"node2\", Replica.State.ACTIVE ,1);\n        mockController.close();\n        mockController = null;\n        verifyShardLeader(reader, COLLECTION, \"shard1\", \"core4\");\n      }\n    } finally {\n      if (killer != null) {\n        killer.run = false;\n        if (killerThread != null) {\n          killerThread.join();\n        }\n      }\n      close(mockController);\n      close(mockController2);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardLeaderChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardLeaderChange().mjava","sourceNew":"  @Test\n  public void testShardLeaderChange() throws Exception {\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    MockZKController mockController2 = null;\n    OverseerRestarter killer = null;\n    Thread killerThread = null;\n\n    try {\n      ZkController.createClusterZkNodes(zkClient);\n\n      killer = new OverseerRestarter(server.getZkAddress());\n      killerThread = new Thread(killer);\n      killerThread.start();\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      UpdateShardHandler updateShardHandler = new UpdateShardHandler(UpdateShardHandlerConfig.DEFAULT);\n      updateShardHandlers.add(updateShardHandler);\n      HttpShardHandlerFactory httpShardHandlerFactory = new HttpShardHandlerFactory();\n      httpShardHandlerFactorys.add(httpShardHandlerFactory);\n\n     electNewOverseer(server.getZkAddress());\n\n      for (int i = 0; i < atLeast(4); i++) {\n        killCounter.incrementAndGet(); // for each round allow 1 kill\n\n        mockController = new MockZKController(server.getZkAddress(), \"node1\", overseers);\n\n        TimeOut timeout = new TimeOut(5, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n        while (!timeout.hasTimedOut()) {\n          try {\n            mockController.createCollection(COLLECTION, 1);\n            break;\n          } catch (SolrException | KeeperException | AlreadyClosedException e) {\n            e.printStackTrace();\n          }\n        }\n\n        timeout = new TimeOut(5, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n        while (!timeout.hasTimedOut()) {\n          try {\n            mockController.publishState(COLLECTION, \"core1\", \"node1\", \"shard1\", Replica.State.ACTIVE,\n                1, true, getOpenOverseer());\n            break;\n          } catch (SolrException | KeeperException | AlreadyClosedException e) {\n            e.printStackTrace();\n          }\n        }\n\n        if (mockController2 != null) {\n          mockController2.close();\n          mockController2 = null;\n        }\n        \n        Thread.sleep(100);\n        \n        timeout = new TimeOut(1, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n        while (!timeout.hasTimedOut()) {\n          try {\n            mockController.publishState(COLLECTION, \"core1\", \"node1\", \"shard1\",\n                Replica.State.RECOVERING, 1, true, getOpenOverseer());\n            break;\n          } catch (SolrException | AlreadyClosedException e) {\n             e.printStackTrace();\n          }\n        }\n\n        mockController2 = new MockZKController(server.getZkAddress(), \"node2\", overseers);\n        \n       timeout = new TimeOut(5, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n        while (!timeout.hasTimedOut()) {\n          try {\n            mockController.publishState(COLLECTION, \"core1\", \"node1\", \"shard1\", Replica.State.ACTIVE,\n                1, true, getOpenOverseer());\n            break;\n          } catch (SolrException | AlreadyClosedException e) {\n            e.printStackTrace();\n          }\n        }\n\n        verifyShardLeader(reader, COLLECTION, \"shard1\", \"core1\");\n\n\n        timeout = new TimeOut(5, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n        while (!timeout.hasTimedOut()) {\n          try {\n            mockController2.publishState(COLLECTION, \"core4\", \"node2\", \"shard1\", Replica.State.ACTIVE,\n                1, true, getOpenOverseer());\n            break;\n          } catch (SolrException | AlreadyClosedException e) {\n            e.printStackTrace();\n          }\n        }\n        \n\n        mockController.close();\n        mockController = null;\n\n        ZkController zkController = createMockZkController(server.getZkAddress(), null, reader);\n        zkControllers.add(zkController);\n\n        TimeOut timeOut = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n        timeOut.waitFor(\"Timed out waiting to see core4 as leader\", () -> {\n\n          ZkCoreNodeProps leaderProps;\n          try {\n            leaderProps = zkController.getLeaderProps(COLLECTION, \"shard1\", 1000);\n          } catch (SolrException e) { \n            return false;\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n          if (leaderProps.getCoreName().equals(\"core4\")) {\n            return true;\n          }\n          return false;\n\n        });\n\n      }\n\n    } finally {\n      if (killer != null) {\n        killer.run = false;\n        if (killerThread != null) {\n          killerThread.join();\n        }\n      }\n      close(mockController);\n\n      close(mockController2);\n      close(reader);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardLeaderChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient controllerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    MockZKController mockController2 = null;\n    OverseerRestarter killer = null;\n    Thread killerThread = null;\n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n\n      killer = new OverseerRestarter(server.getZkAddress());\n      killerThread = new Thread(killer);\n      killerThread.start();\n\n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      for (int i = 0; i < atLeast(4); i++) {\n        killCounter.incrementAndGet(); //for each round allow 1 kill\n        mockController = new MockZKController(server.getZkAddress(), \"node1\");\n        mockController.createCollection(COLLECTION, 1);\n        mockController.publishState(COLLECTION, \"core1\", \"node1\", \"shard1\", Replica.State.ACTIVE,1);\n        if(mockController2!=null) {\n          mockController2.close();\n          mockController2 = null;\n        }\n        mockController.publishState(COLLECTION, \"core1\", \"node1\",\"shard1\", Replica.State.RECOVERING,1);\n        mockController2 = new MockZKController(server.getZkAddress(), \"node2\");\n        mockController.publishState(COLLECTION, \"core1\", \"node1\",\"shard1\", Replica.State.ACTIVE,1);\n        verifyShardLeader(reader, COLLECTION, \"shard1\", \"core1\");\n        mockController2.publishState(COLLECTION, \"core4\", \"node2\", \"shard1\",  Replica.State.ACTIVE ,1);\n        mockController.close();\n        mockController = null;\n        verifyShardLeader(reader, COLLECTION, \"shard1\", \"core4\");\n      }\n    } finally {\n      if (killer != null) {\n        killer.run = false;\n        if (killerThread != null) {\n          killerThread.join();\n        }\n      }\n      close(mockController);\n      close(mockController2);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":["7875fce026a0a335830cfc75abc3eb009eff9a73","4fae587917424e74e7780a722fd2761c19633ad0","29f5eaf296600e1665151e7929d42a3cbe22e481","a9b4296bd51ca61b482138791478afdd0f7d3a3d","a5093a9e893633cc091cf2f729d7863671c2b715","5de502b5478255493125e7e801411ba17a6682ec","f4abec28b874149a7223e32cc7a01704c27790de","c51a2dcb8b4e1820a44f35f11961110201e06cdb","7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56","bbb0b5c5101d175049b4ced1462f4c266d32fc63"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardLeaderChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardLeaderChange().mjava","sourceNew":"  @Test\n  public void testShardLeaderChange() throws Exception {\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    MockZKController mockController2 = null;\n    OverseerRestarter killer = null;\n    Thread killerThread = null;\n\n    try {\n      ZkController.createClusterZkNodes(zkClient);\n\n      killer = new OverseerRestarter(server.getZkAddress());\n      killerThread = new Thread(killer);\n      killerThread.start();\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      UpdateShardHandler updateShardHandler = new UpdateShardHandler(UpdateShardHandlerConfig.DEFAULT);\n      updateShardHandlers.add(updateShardHandler);\n      HttpShardHandlerFactory httpShardHandlerFactory = new HttpShardHandlerFactory();\n      httpShardHandlerFactorys.add(httpShardHandlerFactory);\n\n     electNewOverseer(server.getZkAddress());\n\n      for (int i = 0; i < atLeast(4); i++) {\n        killCounter.incrementAndGet(); // for each round allow 1 kill\n\n        mockController = new MockZKController(server.getZkAddress(), \"node1\", overseers);\n\n        TimeOut timeout = new TimeOut(5, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n        while (!timeout.hasTimedOut()) {\n          try {\n            mockController.createCollection(COLLECTION, 1);\n            break;\n          } catch (SolrException | KeeperException | AlreadyClosedException e) {\n            e.printStackTrace();\n          }\n        }\n\n        timeout = new TimeOut(5, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n        while (!timeout.hasTimedOut()) {\n          try {\n            mockController.publishState(COLLECTION, \"core1\", \"node1\", \"shard1\", Replica.State.ACTIVE,\n                1, true, getOpenOverseer());\n            break;\n          } catch (SolrException | KeeperException | AlreadyClosedException e) {\n            e.printStackTrace();\n          }\n        }\n\n        if (mockController2 != null) {\n          mockController2.close();\n          mockController2 = null;\n        }\n\n        Thread.sleep(100);\n\n        timeout = new TimeOut(1, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n        while (!timeout.hasTimedOut()) {\n          try {\n            mockController.publishState(COLLECTION, \"core1\", \"node1\", \"shard1\",\n                Replica.State.RECOVERING, 1, true, getOpenOverseer());\n            break;\n          } catch (SolrException | AlreadyClosedException e) {\n             e.printStackTrace();\n          }\n        }\n\n        mockController2 = new MockZKController(server.getZkAddress(), \"node2\", overseers);\n\n       timeout = new TimeOut(5, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n        while (!timeout.hasTimedOut()) {\n          try {\n            mockController.publishState(COLLECTION, \"core1\", \"node1\", \"shard1\", Replica.State.ACTIVE,\n                1, true, getOpenOverseer());\n            break;\n          } catch (SolrException | AlreadyClosedException e) {\n            e.printStackTrace();\n          }\n        }\n\n        verifyShardLeader(reader, COLLECTION, \"shard1\", \"core1\");\n\n\n        timeout = new TimeOut(5, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n        while (!timeout.hasTimedOut()) {\n          try {\n            mockController2.publishState(COLLECTION, \"core4\", \"node2\", \"shard1\", Replica.State.ACTIVE,\n                1, true, getOpenOverseer());\n            break;\n          } catch (SolrException | AlreadyClosedException e) {\n            e.printStackTrace();\n          }\n        }\n\n\n        mockController.close();\n        mockController = null;\n\n        ZkController zkController = createMockZkController(server.getZkAddress(), null, reader);\n        zkControllers.add(zkController);\n\n        TimeOut timeOut = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n        timeOut.waitFor(\"Timed out waiting to see core4 as leader\", () -> {\n\n          ZkCoreNodeProps leaderProps;\n          try {\n            leaderProps = zkController.getLeaderProps(COLLECTION, \"shard1\", 1000);\n          } catch (SolrException e) {\n            return false;\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n          if (leaderProps.getCoreName().equals(\"core4\")) {\n            return true;\n          }\n          return false;\n\n        });\n\n      }\n\n    } finally {\n      if (killer != null) {\n        killer.run = false;\n        if (killerThread != null) {\n          killerThread.join();\n        }\n      }\n      close(mockController);\n\n      close(mockController2);\n      close(reader);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardLeaderChange() throws Exception {\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    MockZKController mockController2 = null;\n    OverseerRestarter killer = null;\n    Thread killerThread = null;\n\n    try {\n      ZkController.createClusterZkNodes(zkClient);\n\n      killer = new OverseerRestarter(server.getZkAddress());\n      killerThread = new Thread(killer);\n      killerThread.start();\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      UpdateShardHandler updateShardHandler = new UpdateShardHandler(UpdateShardHandlerConfig.DEFAULT);\n      updateShardHandlers.add(updateShardHandler);\n      HttpShardHandlerFactory httpShardHandlerFactory = new HttpShardHandlerFactory();\n      httpShardHandlerFactorys.add(httpShardHandlerFactory);\n\n     electNewOverseer(server.getZkAddress());\n\n      for (int i = 0; i < atLeast(4); i++) {\n        killCounter.incrementAndGet(); // for each round allow 1 kill\n\n        mockController = new MockZKController(server.getZkAddress(), \"node1\", overseers);\n\n        TimeOut timeout = new TimeOut(5, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n        while (!timeout.hasTimedOut()) {\n          try {\n            mockController.createCollection(COLLECTION, 1);\n            break;\n          } catch (SolrException | KeeperException | AlreadyClosedException e) {\n            e.printStackTrace();\n          }\n        }\n\n        timeout = new TimeOut(5, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n        while (!timeout.hasTimedOut()) {\n          try {\n            mockController.publishState(COLLECTION, \"core1\", \"node1\", \"shard1\", Replica.State.ACTIVE,\n                1, true, getOpenOverseer());\n            break;\n          } catch (SolrException | KeeperException | AlreadyClosedException e) {\n            e.printStackTrace();\n          }\n        }\n\n        if (mockController2 != null) {\n          mockController2.close();\n          mockController2 = null;\n        }\n        \n        Thread.sleep(100);\n        \n        timeout = new TimeOut(1, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n        while (!timeout.hasTimedOut()) {\n          try {\n            mockController.publishState(COLLECTION, \"core1\", \"node1\", \"shard1\",\n                Replica.State.RECOVERING, 1, true, getOpenOverseer());\n            break;\n          } catch (SolrException | AlreadyClosedException e) {\n             e.printStackTrace();\n          }\n        }\n\n        mockController2 = new MockZKController(server.getZkAddress(), \"node2\", overseers);\n        \n       timeout = new TimeOut(5, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n        while (!timeout.hasTimedOut()) {\n          try {\n            mockController.publishState(COLLECTION, \"core1\", \"node1\", \"shard1\", Replica.State.ACTIVE,\n                1, true, getOpenOverseer());\n            break;\n          } catch (SolrException | AlreadyClosedException e) {\n            e.printStackTrace();\n          }\n        }\n\n        verifyShardLeader(reader, COLLECTION, \"shard1\", \"core1\");\n\n\n        timeout = new TimeOut(5, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n        while (!timeout.hasTimedOut()) {\n          try {\n            mockController2.publishState(COLLECTION, \"core4\", \"node2\", \"shard1\", Replica.State.ACTIVE,\n                1, true, getOpenOverseer());\n            break;\n          } catch (SolrException | AlreadyClosedException e) {\n            e.printStackTrace();\n          }\n        }\n        \n\n        mockController.close();\n        mockController = null;\n\n        ZkController zkController = createMockZkController(server.getZkAddress(), null, reader);\n        zkControllers.add(zkController);\n\n        TimeOut timeOut = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n        timeOut.waitFor(\"Timed out waiting to see core4 as leader\", () -> {\n\n          ZkCoreNodeProps leaderProps;\n          try {\n            leaderProps = zkController.getLeaderProps(COLLECTION, \"shard1\", 1000);\n          } catch (SolrException e) { \n            return false;\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n          if (leaderProps.getCoreName().equals(\"core4\")) {\n            return true;\n          }\n          return false;\n\n        });\n\n      }\n\n    } finally {\n      if (killer != null) {\n        killer.run = false;\n        if (killerThread != null) {\n          killerThread.join();\n        }\n      }\n      close(mockController);\n\n      close(mockController2);\n      close(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bbb0b5c5101d175049b4ced1462f4c266d32fc63","date":1559534216,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardLeaderChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardLeaderChange().mjava","sourceNew":"  @Test\n  public void testShardLeaderChange() throws Exception {\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    MockZKController mockController2 = null;\n    OverseerRestarter killer = null;\n    Thread killerThread = null;\n\n    try {\n      ZkController.createClusterZkNodes(zkClient);\n\n      killer = new OverseerRestarter(server.getZkAddress());\n      killerThread = new Thread(killer);\n      killerThread.start();\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      UpdateShardHandler updateShardHandler = new UpdateShardHandler(UpdateShardHandlerConfig.DEFAULT);\n      updateShardHandlers.add(updateShardHandler);\n      HttpShardHandlerFactory httpShardHandlerFactory = new HttpShardHandlerFactory();\n      httpShardHandlerFactorys.add(httpShardHandlerFactory);\n\n     electNewOverseer(server.getZkAddress());\n\n      for (int i = 0; i < atLeast(4); i++) {\n        killCounter.incrementAndGet(); // for each round allow 1 kill\n\n        mockController = new MockZKController(server.getZkAddress(), \"node1\", overseers);\n\n        TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n        while (!timeout.hasTimedOut()) {\n          try {\n            mockController.createCollection(COLLECTION, 1);\n            break;\n          } catch (SolrException | KeeperException | AlreadyClosedException e) {\n            e.printStackTrace();\n          }\n        }\n\n        timeout = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n        while (!timeout.hasTimedOut()) {\n          try {\n            mockController.publishState(COLLECTION, \"core1\", \"node1\", \"shard1\", Replica.State.ACTIVE,\n                1, true, getOpenOverseer());\n            break;\n          } catch (SolrException | KeeperException | AlreadyClosedException e) {\n            e.printStackTrace();\n          }\n        }\n\n        if (mockController2 != null) {\n          mockController2.close();\n          mockController2 = null;\n        }\n\n        Thread.sleep(100);\n\n        timeout = new TimeOut(1, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n        while (!timeout.hasTimedOut()) {\n          try {\n            mockController.publishState(COLLECTION, \"core1\", \"node1\", \"shard1\",\n                Replica.State.RECOVERING, 1, true, getOpenOverseer());\n            break;\n          } catch (SolrException | AlreadyClosedException e) {\n             e.printStackTrace();\n          }\n        }\n\n        mockController2 = new MockZKController(server.getZkAddress(), \"node2\", overseers);\n\n       timeout = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n        while (!timeout.hasTimedOut()) {\n          try {\n            mockController.publishState(COLLECTION, \"core1\", \"node1\", \"shard1\", Replica.State.ACTIVE,\n                1, true, getOpenOverseer());\n            break;\n          } catch (SolrException | AlreadyClosedException e) {\n            e.printStackTrace();\n          }\n        }\n\n        verifyShardLeader(reader, COLLECTION, \"shard1\", \"core1\");\n\n\n        timeout = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n        while (!timeout.hasTimedOut()) {\n          try {\n            mockController2.publishState(COLLECTION, \"core4\", \"node2\", \"shard1\", Replica.State.ACTIVE,\n                1, true, getOpenOverseer());\n            break;\n          } catch (SolrException | AlreadyClosedException e) {\n            e.printStackTrace();\n          }\n        }\n\n\n        mockController.close();\n        mockController = null;\n\n        ZkController zkController = createMockZkController(server.getZkAddress(), null, reader);\n        zkControllers.add(zkController);\n\n        TimeOut timeOut = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n        timeOut.waitFor(\"Timed out waiting to see core4 as leader\", () -> {\n\n          ZkCoreNodeProps leaderProps;\n          try {\n            leaderProps = zkController.getLeaderProps(COLLECTION, \"shard1\", 1000, false);\n          } catch (SolrException e) {\n            return false;\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          } catch (SessionExpiredException e) {\n            return false;\n          }\n          if (leaderProps.getCoreName().equals(\"core4\")) {\n            return true;\n          }\n          return false;\n\n        });\n\n      }\n\n    } finally {\n      if (killer != null) {\n        killer.run = false;\n        if (killerThread != null) {\n          killerThread.join();\n        }\n      }\n      close(mockController);\n\n      close(mockController2);\n      close(reader);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardLeaderChange() throws Exception {\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    MockZKController mockController2 = null;\n    OverseerRestarter killer = null;\n    Thread killerThread = null;\n\n    try {\n      ZkController.createClusterZkNodes(zkClient);\n\n      killer = new OverseerRestarter(server.getZkAddress());\n      killerThread = new Thread(killer);\n      killerThread.start();\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      UpdateShardHandler updateShardHandler = new UpdateShardHandler(UpdateShardHandlerConfig.DEFAULT);\n      updateShardHandlers.add(updateShardHandler);\n      HttpShardHandlerFactory httpShardHandlerFactory = new HttpShardHandlerFactory();\n      httpShardHandlerFactorys.add(httpShardHandlerFactory);\n\n     electNewOverseer(server.getZkAddress());\n\n      for (int i = 0; i < atLeast(4); i++) {\n        killCounter.incrementAndGet(); // for each round allow 1 kill\n\n        mockController = new MockZKController(server.getZkAddress(), \"node1\", overseers);\n\n        TimeOut timeout = new TimeOut(5, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n        while (!timeout.hasTimedOut()) {\n          try {\n            mockController.createCollection(COLLECTION, 1);\n            break;\n          } catch (SolrException | KeeperException | AlreadyClosedException e) {\n            e.printStackTrace();\n          }\n        }\n\n        timeout = new TimeOut(5, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n        while (!timeout.hasTimedOut()) {\n          try {\n            mockController.publishState(COLLECTION, \"core1\", \"node1\", \"shard1\", Replica.State.ACTIVE,\n                1, true, getOpenOverseer());\n            break;\n          } catch (SolrException | KeeperException | AlreadyClosedException e) {\n            e.printStackTrace();\n          }\n        }\n\n        if (mockController2 != null) {\n          mockController2.close();\n          mockController2 = null;\n        }\n\n        Thread.sleep(100);\n\n        timeout = new TimeOut(1, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n        while (!timeout.hasTimedOut()) {\n          try {\n            mockController.publishState(COLLECTION, \"core1\", \"node1\", \"shard1\",\n                Replica.State.RECOVERING, 1, true, getOpenOverseer());\n            break;\n          } catch (SolrException | AlreadyClosedException e) {\n             e.printStackTrace();\n          }\n        }\n\n        mockController2 = new MockZKController(server.getZkAddress(), \"node2\", overseers);\n\n       timeout = new TimeOut(5, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n        while (!timeout.hasTimedOut()) {\n          try {\n            mockController.publishState(COLLECTION, \"core1\", \"node1\", \"shard1\", Replica.State.ACTIVE,\n                1, true, getOpenOverseer());\n            break;\n          } catch (SolrException | AlreadyClosedException e) {\n            e.printStackTrace();\n          }\n        }\n\n        verifyShardLeader(reader, COLLECTION, \"shard1\", \"core1\");\n\n\n        timeout = new TimeOut(5, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n        while (!timeout.hasTimedOut()) {\n          try {\n            mockController2.publishState(COLLECTION, \"core4\", \"node2\", \"shard1\", Replica.State.ACTIVE,\n                1, true, getOpenOverseer());\n            break;\n          } catch (SolrException | AlreadyClosedException e) {\n            e.printStackTrace();\n          }\n        }\n\n\n        mockController.close();\n        mockController = null;\n\n        ZkController zkController = createMockZkController(server.getZkAddress(), null, reader);\n        zkControllers.add(zkController);\n\n        TimeOut timeOut = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n        timeOut.waitFor(\"Timed out waiting to see core4 as leader\", () -> {\n\n          ZkCoreNodeProps leaderProps;\n          try {\n            leaderProps = zkController.getLeaderProps(COLLECTION, \"shard1\", 1000);\n          } catch (SolrException e) {\n            return false;\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n          if (leaderProps.getCoreName().equals(\"core4\")) {\n            return true;\n          }\n          return false;\n\n        });\n\n      }\n\n    } finally {\n      if (killer != null) {\n        killer.run = false;\n        if (killerThread != null) {\n          killerThread.join();\n        }\n      }\n      close(mockController);\n\n      close(mockController2);\n      close(reader);\n    }\n  }\n\n","bugFix":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardLeaderChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardLeaderChange().mjava","sourceNew":"  @Test\n  public void testShardLeaderChange() throws Exception {\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    MockZKController mockController2 = null;\n    OverseerRestarter killer = null;\n    Thread killerThread = null;\n\n    try {\n      ZkController.createClusterZkNodes(zkClient);\n\n      killer = new OverseerRestarter(server.getZkAddress());\n      killerThread = new Thread(killer);\n      killerThread.start();\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      UpdateShardHandler updateShardHandler = new UpdateShardHandler(UpdateShardHandlerConfig.DEFAULT);\n      updateShardHandlers.add(updateShardHandler);\n      HttpShardHandlerFactory httpShardHandlerFactory = new HttpShardHandlerFactory();\n      httpShardHandlerFactorys.add(httpShardHandlerFactory);\n\n     electNewOverseer(server.getZkAddress());\n\n      // Create collection znode before repeatedly trying to enqueue the Cluster state change message\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + COLLECTION, true);\n\n      for (int i = 0; i < atLeast(4); i++) {\n        killCounter.incrementAndGet(); // for each round allow 1 kill\n\n        mockController = new MockZKController(server.getZkAddress(), \"node1\", overseers);\n\n        TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n        while (!timeout.hasTimedOut()) {\n          try {\n            // We must only retry the enqueue to Overseer, not the collection znode creation (that doesn't depend on Overseer)\n            ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n                \"name\", COLLECTION,\n                ZkStateReader.REPLICATION_FACTOR, \"1\",\n                ZkStateReader.NUM_SHARDS_PROP, \"1\",\n                \"createNodeSet\", \"\");\n            ZkDistributedQueue q = MiniSolrCloudCluster.getOpenOverseer(overseers).getStateUpdateQueue();\n            q.offer(Utils.toJSON(m));\n            break;\n          } catch (SolrException | KeeperException | AlreadyClosedException e) {\n            e.printStackTrace();\n          }\n        }\n\n        timeout = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n        while (!timeout.hasTimedOut()) {\n          try {\n            mockController.publishState(COLLECTION, \"core1\", \"node1\", \"shard1\", Replica.State.ACTIVE,\n                1, true, getOpenOverseer());\n            break;\n          } catch (SolrException | KeeperException | AlreadyClosedException e) {\n            e.printStackTrace();\n          }\n        }\n\n        if (mockController2 != null) {\n          mockController2.close();\n          mockController2 = null;\n        }\n\n        Thread.sleep(100);\n\n        timeout = new TimeOut(1, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n        while (!timeout.hasTimedOut()) {\n          try {\n            mockController.publishState(COLLECTION, \"core1\", \"node1\", \"shard1\",\n                Replica.State.RECOVERING, 1, true, getOpenOverseer());\n            break;\n          } catch (SolrException | AlreadyClosedException e) {\n             e.printStackTrace();\n          }\n        }\n\n        mockController2 = new MockZKController(server.getZkAddress(), \"node2\", overseers);\n\n       timeout = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n        while (!timeout.hasTimedOut()) {\n          try {\n            mockController.publishState(COLLECTION, \"core1\", \"node1\", \"shard1\", Replica.State.ACTIVE,\n                1, true, getOpenOverseer());\n            break;\n          } catch (SolrException | AlreadyClosedException e) {\n            e.printStackTrace();\n          }\n        }\n\n        verifyShardLeader(reader, COLLECTION, \"shard1\", \"core1\");\n\n\n        timeout = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n        while (!timeout.hasTimedOut()) {\n          try {\n            mockController2.publishState(COLLECTION, \"core4\", \"node2\", \"shard1\", Replica.State.ACTIVE,\n                1, true, getOpenOverseer());\n            break;\n          } catch (SolrException | AlreadyClosedException e) {\n            e.printStackTrace();\n          }\n        }\n\n\n        mockController.close();\n        mockController = null;\n\n        ZkController zkController = createMockZkController(server.getZkAddress(), null, reader);\n        zkControllers.add(zkController);\n\n        TimeOut timeOut = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n        timeOut.waitFor(\"Timed out waiting to see core4 as leader\", () -> {\n\n          ZkCoreNodeProps leaderProps;\n          try {\n            leaderProps = zkController.getLeaderProps(COLLECTION, \"shard1\", 1000, false);\n          } catch (SolrException e) {\n            return false;\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          } catch (SessionExpiredException e) {\n            return false;\n          }\n          if (leaderProps.getCoreName().equals(\"core4\")) {\n            return true;\n          }\n          return false;\n\n        });\n\n      }\n\n    } finally {\n      if (killer != null) {\n        killer.run = false;\n        if (killerThread != null) {\n          killerThread.join();\n        }\n      }\n      close(mockController);\n\n      close(mockController2);\n      close(reader);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardLeaderChange() throws Exception {\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    MockZKController mockController2 = null;\n    OverseerRestarter killer = null;\n    Thread killerThread = null;\n\n    try {\n      ZkController.createClusterZkNodes(zkClient);\n\n      killer = new OverseerRestarter(server.getZkAddress());\n      killerThread = new Thread(killer);\n      killerThread.start();\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      UpdateShardHandler updateShardHandler = new UpdateShardHandler(UpdateShardHandlerConfig.DEFAULT);\n      updateShardHandlers.add(updateShardHandler);\n      HttpShardHandlerFactory httpShardHandlerFactory = new HttpShardHandlerFactory();\n      httpShardHandlerFactorys.add(httpShardHandlerFactory);\n\n     electNewOverseer(server.getZkAddress());\n\n      for (int i = 0; i < atLeast(4); i++) {\n        killCounter.incrementAndGet(); // for each round allow 1 kill\n\n        mockController = new MockZKController(server.getZkAddress(), \"node1\", overseers);\n\n        TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n        while (!timeout.hasTimedOut()) {\n          try {\n            mockController.createCollection(COLLECTION, 1);\n            break;\n          } catch (SolrException | KeeperException | AlreadyClosedException e) {\n            e.printStackTrace();\n          }\n        }\n\n        timeout = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n        while (!timeout.hasTimedOut()) {\n          try {\n            mockController.publishState(COLLECTION, \"core1\", \"node1\", \"shard1\", Replica.State.ACTIVE,\n                1, true, getOpenOverseer());\n            break;\n          } catch (SolrException | KeeperException | AlreadyClosedException e) {\n            e.printStackTrace();\n          }\n        }\n\n        if (mockController2 != null) {\n          mockController2.close();\n          mockController2 = null;\n        }\n\n        Thread.sleep(100);\n\n        timeout = new TimeOut(1, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n        while (!timeout.hasTimedOut()) {\n          try {\n            mockController.publishState(COLLECTION, \"core1\", \"node1\", \"shard1\",\n                Replica.State.RECOVERING, 1, true, getOpenOverseer());\n            break;\n          } catch (SolrException | AlreadyClosedException e) {\n             e.printStackTrace();\n          }\n        }\n\n        mockController2 = new MockZKController(server.getZkAddress(), \"node2\", overseers);\n\n       timeout = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n        while (!timeout.hasTimedOut()) {\n          try {\n            mockController.publishState(COLLECTION, \"core1\", \"node1\", \"shard1\", Replica.State.ACTIVE,\n                1, true, getOpenOverseer());\n            break;\n          } catch (SolrException | AlreadyClosedException e) {\n            e.printStackTrace();\n          }\n        }\n\n        verifyShardLeader(reader, COLLECTION, \"shard1\", \"core1\");\n\n\n        timeout = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n        while (!timeout.hasTimedOut()) {\n          try {\n            mockController2.publishState(COLLECTION, \"core4\", \"node2\", \"shard1\", Replica.State.ACTIVE,\n                1, true, getOpenOverseer());\n            break;\n          } catch (SolrException | AlreadyClosedException e) {\n            e.printStackTrace();\n          }\n        }\n\n\n        mockController.close();\n        mockController = null;\n\n        ZkController zkController = createMockZkController(server.getZkAddress(), null, reader);\n        zkControllers.add(zkController);\n\n        TimeOut timeOut = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n        timeOut.waitFor(\"Timed out waiting to see core4 as leader\", () -> {\n\n          ZkCoreNodeProps leaderProps;\n          try {\n            leaderProps = zkController.getLeaderProps(COLLECTION, \"shard1\", 1000, false);\n          } catch (SolrException e) {\n            return false;\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          } catch (SessionExpiredException e) {\n            return false;\n          }\n          if (leaderProps.getCoreName().equals(\"core4\")) {\n            return true;\n          }\n          return false;\n\n        });\n\n      }\n\n    } finally {\n      if (killer != null) {\n        killer.run = false;\n        if (killerThread != null) {\n          killerThread.join();\n        }\n      }\n      close(mockController);\n\n      close(mockController2);\n      close(reader);\n    }\n  }\n\n","bugFix":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d6b527fc717367a20e7ba54fd6fb2b7825bd8a1a":["c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":["849494cf2f3a96af5c8c84995108ddd8456fcd04","29f5eaf296600e1665151e7929d42a3cbe22e481"],"5de502b5478255493125e7e801411ba17a6682ec":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["29f5eaf296600e1665151e7929d42a3cbe22e481","1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["4fae587917424e74e7780a722fd2761c19633ad0","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["28288370235ed02234a64753cdbf0c6ec096304a"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"d48cfd089cba66f9745d8043e8e971b60514418d":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["d48cfd089cba66f9745d8043e8e971b60514418d"],"4fae587917424e74e7780a722fd2761c19633ad0":["a5093a9e893633cc091cf2f729d7863671c2b715"],"a219f1dcad1700e84807666bdbd2b573e8de7021":["7875fce026a0a335830cfc75abc3eb009eff9a73"],"29f5eaf296600e1665151e7929d42a3cbe22e481":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["f4abec28b874149a7223e32cc7a01704c27790de","7875fce026a0a335830cfc75abc3eb009eff9a73"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e9ce820cd3ed9efb959c181daaafd22f0c70143":["bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"bbb0b5c5101d175049b4ced1462f4c266d32fc63":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["bbb0b5c5101d175049b4ced1462f4c266d32fc63"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["29f5eaf296600e1665151e7929d42a3cbe22e481"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["5de502b5478255493125e7e801411ba17a6682ec"],"f4abec28b874149a7223e32cc7a01704c27790de":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["6f20fd35e3055a0c5b387df0b986a68d65d86441","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"28288370235ed02234a64753cdbf0c6ec096304a":["5de502b5478255493125e7e801411ba17a6682ec","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"c51a2dcb8b4e1820a44f35f11961110201e06cdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["4fae587917424e74e7780a722fd2761c19633ad0"],"a5093a9e893633cc091cf2f729d7863671c2b715":["d6b527fc717367a20e7ba54fd6fb2b7825bd8a1a"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"7875fce026a0a335830cfc75abc3eb009eff9a73":["f4abec28b874149a7223e32cc7a01704c27790de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"]},"commit2Childs":{"d6b527fc717367a20e7ba54fd6fb2b7825bd8a1a":["a5093a9e893633cc091cf2f729d7863671c2b715"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":[],"5de502b5478255493125e7e801411ba17a6682ec":["a9b4296bd51ca61b482138791478afdd0f7d3a3d","28288370235ed02234a64753cdbf0c6ec096304a"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["f4abec28b874149a7223e32cc7a01704c27790de"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"d48cfd089cba66f9745d8043e8e971b60514418d":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["5de502b5478255493125e7e801411ba17a6682ec","6f20fd35e3055a0c5b387df0b986a68d65d86441"],"4fae587917424e74e7780a722fd2761c19633ad0":["37a0f60745e53927c4c876cfe5b5a58170f0646c","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"29f5eaf296600e1665151e7929d42a3cbe22e481":["96ea64d994d340044e0d57aeb6a5871539d10ca5","2a0f5bb79c600763ffe7b8141df59a3169d31e48","bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"a219f1dcad1700e84807666bdbd2b573e8de7021":["d48cfd089cba66f9745d8043e8e971b60514418d"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"1e9ce820cd3ed9efb959c181daaafd22f0c70143":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"bbb0b5c5101d175049b4ced1462f4c266d32fc63":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"f4abec28b874149a7223e32cc7a01704c27790de":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7875fce026a0a335830cfc75abc3eb009eff9a73"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"c51a2dcb8b4e1820a44f35f11961110201e06cdb":["d6b527fc717367a20e7ba54fd6fb2b7825bd8a1a","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["96ea64d994d340044e0d57aeb6a5871539d10ca5","37a0f60745e53927c4c876cfe5b5a58170f0646c","29f5eaf296600e1665151e7929d42a3cbe22e481"],"a5093a9e893633cc091cf2f729d7863671c2b715":["4fae587917424e74e7780a722fd2761c19633ad0"],"7875fce026a0a335830cfc75abc3eb009eff9a73":["a219f1dcad1700e84807666bdbd2b573e8de7021","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["bbb0b5c5101d175049b4ced1462f4c266d32fc63"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96ea64d994d340044e0d57aeb6a5871539d10ca5","37a0f60745e53927c4c876cfe5b5a58170f0646c","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}