{"path":"client/java/solrj/src/org/apache/solr/client/solrj/util/ClientUtils#escapeQueryChars(String).mjava","commits":[{"id":"acdd729ace9db5d0803eea4849ddc3c2ba196127","date":1181861605,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/util/ClientUtils#escapeQueryChars(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * See: http://lucene.apache.org/java/docs/queryparsersyntax.html#Escaping Special Characters\n   */\n  public static String escapeQueryChars( String input ) \n  {\n    char buff[] = input.toCharArray();\n    StringBuilder str = new StringBuilder( buff.length+5 );\n    for( char c : buff ) {\n      switch( c ) {\n      case '+':\n      case '-':\n      case '&':\n      case '|':\n      case '(':\n      case ')':\n      case '{':\n      case '}':\n      case '[':\n      case ']':\n      case '^':\n      case '\"':\n      case '*':\n      case ':':\n      case '\\\\':\n        str.append( '\\\\' );\n      }\n      str.append( c );\n    }\n    return str.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["2c4a13538c36c02a7d9b892afcd5494c8c2f5ba5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3ffabcb29b115df82fbfadc1e763b2241a9d597","date":1189628353,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/util/ClientUtils#escapeQueryChars(String).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/util/ClientUtils#escapeQueryChars(String).mjava","sourceNew":"  /**\n   * See: http://lucene.apache.org/java/docs/queryparsersyntax.html#Escaping Special Characters\n   */\n  public static String escapeQueryChars( String input ) \n  {\n    char buff[] = input.toCharArray();\n    StringBuilder str = new StringBuilder( buff.length+5 );\n    for( char c : buff ) {\n      switch( c ) {\n      case '+':\n      case '-':\n      case '&':\n      case '|':\n      case '(':\n      case ')':\n      case '{':\n      case '}':\n      case '[':\n      case ']':\n      case '^':\n      case '\"':\n      case '*':\n      case ':':\n      case '~':\n      case '\\\\':\n        str.append( '\\\\' );\n      }\n      str.append( c );\n    }\n    return str.toString();\n  }\n\n","sourceOld":"  /**\n   * See: http://lucene.apache.org/java/docs/queryparsersyntax.html#Escaping Special Characters\n   */\n  public static String escapeQueryChars( String input ) \n  {\n    char buff[] = input.toCharArray();\n    StringBuilder str = new StringBuilder( buff.length+5 );\n    for( char c : buff ) {\n      switch( c ) {\n      case '+':\n      case '-':\n      case '&':\n      case '|':\n      case '(':\n      case ')':\n      case '{':\n      case '}':\n      case '[':\n      case ']':\n      case '^':\n      case '\"':\n      case '*':\n      case ':':\n      case '\\\\':\n        str.append( '\\\\' );\n      }\n      str.append( c );\n    }\n    return str.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74bf4c0a86edaa5fb11221c60533dd0046414917","date":1189702295,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/util/ClientUtils#escapeQueryChars(String).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/util/ClientUtils#escapeQueryChars(String).mjava","sourceNew":"  /**\n   * See: http://lucene.apache.org/java/docs/queryparsersyntax.html#Escaping Special Characters\n   */\n  public static String escapeQueryChars( String input ) \n  {\n    char buff[] = input.toCharArray();\n    StringBuilder str = new StringBuilder( buff.length+5 );\n    for( char c : buff ) {\n      switch( c ) {\n      case '+':\n      case '-':\n      case '&':\n      case '|':\n      case '(':\n      case ')':\n      case '{':\n      case '}':\n      case '[':\n      case ']':\n      case '^':\n      case '\"':\n      case '*':\n      case ':':\n      case '~':\n      case '!':\n      case '\\\\':\n        str.append( '\\\\' );\n      }\n      str.append( c );\n    }\n    return str.toString();\n  }\n\n","sourceOld":"  /**\n   * See: http://lucene.apache.org/java/docs/queryparsersyntax.html#Escaping Special Characters\n   */\n  public static String escapeQueryChars( String input ) \n  {\n    char buff[] = input.toCharArray();\n    StringBuilder str = new StringBuilder( buff.length+5 );\n    for( char c : buff ) {\n      switch( c ) {\n      case '+':\n      case '-':\n      case '&':\n      case '|':\n      case '(':\n      case ')':\n      case '{':\n      case '}':\n      case '[':\n      case ']':\n      case '^':\n      case '\"':\n      case '*':\n      case ':':\n      case '~':\n      case '\\\\':\n        str.append( '\\\\' );\n      }\n      str.append( c );\n    }\n    return str.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"15b9b4a57891b32c4f7f814f92e086c14566c223","date":1189809902,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/util/ClientUtils#escapeQueryChars(String).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/util/ClientUtils#escapeQueryChars(String).mjava","sourceNew":"  /**\n   * See: http://lucene.apache.org/java/docs/queryparsersyntax.html#Escaping Special Characters\n   */\n  public static String escapeQueryChars( String input ) \n  {\n    Matcher matcher = escapePattern.matcher( input );\n    return matcher.replaceAll( \"\\\\\\\\$1\" );\n  }\n\n","sourceOld":"  /**\n   * See: http://lucene.apache.org/java/docs/queryparsersyntax.html#Escaping Special Characters\n   */\n  public static String escapeQueryChars( String input ) \n  {\n    char buff[] = input.toCharArray();\n    StringBuilder str = new StringBuilder( buff.length+5 );\n    for( char c : buff ) {\n      switch( c ) {\n      case '+':\n      case '-':\n      case '&':\n      case '|':\n      case '(':\n      case ')':\n      case '{':\n      case '}':\n      case '[':\n      case ']':\n      case '^':\n      case '\"':\n      case '*':\n      case ':':\n      case '~':\n      case '!':\n      case '\\\\':\n        str.append( '\\\\' );\n      }\n      str.append( c );\n    }\n    return str.toString();\n  }\n\n","bugFix":null,"bugIntro":["2c4a13538c36c02a7d9b892afcd5494c8c2f5ba5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"14b335dfc862ca11d6d75ba2650299712a9e3533","date":1223339809,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/util/ClientUtils#escapeQueryChars(String).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/util/ClientUtils#escapeQueryChars(String).mjava","sourceNew":"  /**\n   * Non-word characters are escaped by a preceding <code>\\</code>.\n   */\n  public static String escapeQueryChars( String input ) \n  {\n    Matcher matcher = escapePattern.matcher( input );\n    return matcher.replaceAll( \"\\\\\\\\$1\" );\n  }\n\n","sourceOld":"  /**\n   * See: http://lucene.apache.org/java/docs/queryparsersyntax.html#Escaping Special Characters\n   */\n  public static String escapeQueryChars( String input ) \n  {\n    Matcher matcher = escapePattern.matcher( input );\n    return matcher.replaceAll( \"\\\\\\\\$1\" );\n  }\n\n","bugFix":null,"bugIntro":["2c4a13538c36c02a7d9b892afcd5494c8c2f5ba5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2c4a13538c36c02a7d9b892afcd5494c8c2f5ba5","date":1223358691,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/util/ClientUtils#escapeQueryChars(String).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/util/ClientUtils#escapeQueryChars(String).mjava","sourceNew":"  /**\n   * See: http://lucene.apache.org/java/docs/queryparsersyntax.html#Escaping Special Characters\n   */\n  public static String escapeQueryChars(String s) {\n    StringBuffer sb = new StringBuffer();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!' || c == '(' || c == ')' || c == ':'\n        || c == '^' || c == '[' || c == ']' || c == '\\\"' || c == '{' || c == '}' || c == '~'\n        || c == '*' || c == '?' || c == '|' || c == '&'\n        || Character.isWhitespace(c)) {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * Non-word characters are escaped by a preceding <code>\\</code>.\n   */\n  public static String escapeQueryChars( String input ) \n  {\n    Matcher matcher = escapePattern.matcher( input );\n    return matcher.replaceAll( \"\\\\\\\\$1\" );\n  }\n\n","bugFix":["14b335dfc862ca11d6d75ba2650299712a9e3533","acdd729ace9db5d0803eea4849ddc3c2ba196127","15b9b4a57891b32c4f7f814f92e086c14566c223"],"bugIntro":["bcc5dfd08a9fef57d9ea3e878f8fa5c70d2b0b63"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/solrj/org/apache/solr/client/solrj/util/ClientUtils#escapeQueryChars(String).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/util/ClientUtils#escapeQueryChars(String).mjava","sourceNew":"  /**\n   * See: http://lucene.apache.org/java/docs/queryparsersyntax.html#Escaping Special Characters\n   */\n  public static String escapeQueryChars(String s) {\n    StringBuffer sb = new StringBuffer();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!' || c == '(' || c == ')' || c == ':'\n        || c == '^' || c == '[' || c == ']' || c == '\\\"' || c == '{' || c == '}' || c == '~'\n        || c == '*' || c == '?' || c == '|' || c == '&'\n        || Character.isWhitespace(c)) {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * See: http://lucene.apache.org/java/docs/queryparsersyntax.html#Escaping Special Characters\n   */\n  public static String escapeQueryChars(String s) {\n    StringBuffer sb = new StringBuffer();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!' || c == '(' || c == ')' || c == ':'\n        || c == '^' || c == '[' || c == ']' || c == '\\\"' || c == '{' || c == '}' || c == '~'\n        || c == '*' || c == '?' || c == '|' || c == '&'\n        || Character.isWhitespace(c)) {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["2c4a13538c36c02a7d9b892afcd5494c8c2f5ba5"],"74bf4c0a86edaa5fb11221c60533dd0046414917":["e3ffabcb29b115df82fbfadc1e763b2241a9d597"],"e3ffabcb29b115df82fbfadc1e763b2241a9d597":["acdd729ace9db5d0803eea4849ddc3c2ba196127"],"acdd729ace9db5d0803eea4849ddc3c2ba196127":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"2c4a13538c36c02a7d9b892afcd5494c8c2f5ba5":["14b335dfc862ca11d6d75ba2650299712a9e3533"],"14b335dfc862ca11d6d75ba2650299712a9e3533":["15b9b4a57891b32c4f7f814f92e086c14566c223"],"15b9b4a57891b32c4f7f814f92e086c14566c223":["74bf4c0a86edaa5fb11221c60533dd0046414917"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":[],"74bf4c0a86edaa5fb11221c60533dd0046414917":["15b9b4a57891b32c4f7f814f92e086c14566c223"],"e3ffabcb29b115df82fbfadc1e763b2241a9d597":["74bf4c0a86edaa5fb11221c60533dd0046414917"],"acdd729ace9db5d0803eea4849ddc3c2ba196127":["e3ffabcb29b115df82fbfadc1e763b2241a9d597"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["acdd729ace9db5d0803eea4849ddc3c2ba196127"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2c4a13538c36c02a7d9b892afcd5494c8c2f5ba5":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"14b335dfc862ca11d6d75ba2650299712a9e3533":["2c4a13538c36c02a7d9b892afcd5494c8c2f5ba5"],"15b9b4a57891b32c4f7f814f92e086c14566c223":["14b335dfc862ca11d6d75ba2650299712a9e3533"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e3602d5eab954caecc726ab136ad580ac1ceb917","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}