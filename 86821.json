{"path":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#MinShouldMatchSumScorer(Weight,List[Scorer],int,float[]).mjava","commits":[{"id":"d9c2895bfaa94bdbd1fd5a1b1522f6310c91d240","date":1400613895,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#MinShouldMatchSumScorer(Weight,List[Scorer],int,float[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#MinShouldMatchSumScorer(Weight,List[Scorer],int).mjava","sourceNew":"  /**\n   * Construct a <code>MinShouldMatchSumScorer</code>.\n   * \n   * @param weight The weight to be used.\n   * @param subScorers A collection of at least two subscorers.\n   * @param minimumNrMatchers The positive minimum number of subscorers that should\n   * match to match this query.\n   * <br>When <code>minimumNrMatchers</code> is bigger than\n   * the number of <code>subScorers</code>, no matches will be produced.\n   * <br>When minimumNrMatchers equals the number of subScorers,\n   * it is more efficient to use <code>ConjunctionScorer</code>.\n   */\n  public MinShouldMatchSumScorer(Weight weight, List<Scorer> subScorers, int minimumNrMatchers, float coord[]) throws IOException {\n    super(weight);\n    this.nrInHeap = this.numScorers = subScorers.size();\n\n    if (minimumNrMatchers <= 0) {\n      throw new IllegalArgumentException(\"Minimum nr of matchers must be positive\");\n    }\n    if (numScorers <= 1) {\n      throw new IllegalArgumentException(\"There must be at least 2 subScorers\");\n    }\n\n    this.mm = minimumNrMatchers;\n    this.sortedSubScorers = subScorers.toArray(new Scorer[this.numScorers]);\n    // sorting by decreasing subscorer cost should be inversely correlated with\n    // next docid (assuming costs are due to generating many postings)\n    ArrayUtil.timSort(sortedSubScorers, new Comparator<Scorer>() {\n      @Override\n      public int compare(Scorer o1, Scorer o2) {\n        return Long.signum(o2.cost() - o1.cost());\n      }\n    });\n    // take mm-1 most costly subscorers aside\n    this.mmStack = new Scorer[mm-1];\n    for (int i = 0; i < mm-1; i++) {\n      mmStack[i] = sortedSubScorers[i];\n    }\n    nrInHeap -= mm-1;\n    this.sortedSubScorersIdx = mm-1;\n    // take remaining into heap, if any, and heapify\n    this.subScorers = new Scorer[nrInHeap];\n    for (int i = 0; i < nrInHeap; i++) {\n      this.subScorers[i] = this.sortedSubScorers[mm-1+i];\n    }\n    this.coord = coord;\n    minheapHeapify();\n    assert minheapCheck();\n  }\n\n","sourceOld":"  /**\n   * Construct a <code>MinShouldMatchSumScorer</code>.\n   * \n   * @param weight The weight to be used.\n   * @param subScorers A collection of at least two subscorers.\n   * @param minimumNrMatchers The positive minimum number of subscorers that should\n   * match to match this query.\n   * <br>When <code>minimumNrMatchers</code> is bigger than\n   * the number of <code>subScorers</code>, no matches will be produced.\n   * <br>When minimumNrMatchers equals the number of subScorers,\n   * it is more efficient to use <code>ConjunctionScorer</code>.\n   */\n  public MinShouldMatchSumScorer(Weight weight, List<Scorer> subScorers, int minimumNrMatchers) throws IOException {\n    super(weight);\n    this.nrInHeap = this.numScorers = subScorers.size();\n\n    if (minimumNrMatchers <= 0) {\n      throw new IllegalArgumentException(\"Minimum nr of matchers must be positive\");\n    }\n    if (numScorers <= 1) {\n      throw new IllegalArgumentException(\"There must be at least 2 subScorers\");\n    }\n\n    this.mm = minimumNrMatchers;\n    this.sortedSubScorers = subScorers.toArray(new Scorer[this.numScorers]);\n    // sorting by decreasing subscorer cost should be inversely correlated with\n    // next docid (assuming costs are due to generating many postings)\n    ArrayUtil.timSort(sortedSubScorers, new Comparator<Scorer>() {\n      @Override\n      public int compare(Scorer o1, Scorer o2) {\n        return Long.signum(o2.cost() - o1.cost());\n      }\n    });\n    // take mm-1 most costly subscorers aside\n    this.mmStack = new Scorer[mm-1];\n    for (int i = 0; i < mm-1; i++) {\n      mmStack[i] = sortedSubScorers[i];\n    }\n    nrInHeap -= mm-1;\n    this.sortedSubScorersIdx = mm-1;\n    // take remaining into heap, if any, and heapify\n    this.subScorers = new Scorer[nrInHeap];\n    for (int i = 0; i < nrInHeap; i++) {\n      this.subScorers[i] = this.sortedSubScorers[mm-1+i];\n    }\n    minheapHeapify();\n    assert minheapCheck();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38fa8e2c4105a7dd15d7e9260afa3b41a560d51d","date":1400696679,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#MinShouldMatchSumScorer(Weight,List[Scorer],int,float[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#MinShouldMatchSumScorer(Weight,List[Scorer],int).mjava","sourceNew":"  /**\n   * Construct a <code>MinShouldMatchSumScorer</code>.\n   * \n   * @param weight The weight to be used.\n   * @param subScorers A collection of at least two subscorers.\n   * @param minimumNrMatchers The positive minimum number of subscorers that should\n   * match to match this query.\n   * <br>When <code>minimumNrMatchers</code> is bigger than\n   * the number of <code>subScorers</code>, no matches will be produced.\n   * <br>When minimumNrMatchers equals the number of subScorers,\n   * it is more efficient to use <code>ConjunctionScorer</code>.\n   */\n  public MinShouldMatchSumScorer(Weight weight, List<Scorer> subScorers, int minimumNrMatchers, float coord[]) throws IOException {\n    super(weight);\n    this.nrInHeap = this.numScorers = subScorers.size();\n\n    if (minimumNrMatchers <= 0) {\n      throw new IllegalArgumentException(\"Minimum nr of matchers must be positive\");\n    }\n    if (numScorers <= 1) {\n      throw new IllegalArgumentException(\"There must be at least 2 subScorers\");\n    }\n\n    this.mm = minimumNrMatchers;\n    this.sortedSubScorers = subScorers.toArray(new Scorer[this.numScorers]);\n    // sorting by decreasing subscorer cost should be inversely correlated with\n    // next docid (assuming costs are due to generating many postings)\n    ArrayUtil.timSort(sortedSubScorers, new Comparator<Scorer>() {\n      @Override\n      public int compare(Scorer o1, Scorer o2) {\n        return Long.signum(o2.cost() - o1.cost());\n      }\n    });\n    // take mm-1 most costly subscorers aside\n    this.mmStack = new Scorer[mm-1];\n    for (int i = 0; i < mm-1; i++) {\n      mmStack[i] = sortedSubScorers[i];\n    }\n    nrInHeap -= mm-1;\n    this.sortedSubScorersIdx = mm-1;\n    // take remaining into heap, if any, and heapify\n    this.subScorers = new Scorer[nrInHeap];\n    for (int i = 0; i < nrInHeap; i++) {\n      this.subScorers[i] = this.sortedSubScorers[mm-1+i];\n    }\n    this.coord = coord;\n    minheapHeapify();\n    assert minheapCheck();\n  }\n\n","sourceOld":"  /**\n   * Construct a <code>MinShouldMatchSumScorer</code>.\n   * \n   * @param weight The weight to be used.\n   * @param subScorers A collection of at least two subscorers.\n   * @param minimumNrMatchers The positive minimum number of subscorers that should\n   * match to match this query.\n   * <br>When <code>minimumNrMatchers</code> is bigger than\n   * the number of <code>subScorers</code>, no matches will be produced.\n   * <br>When minimumNrMatchers equals the number of subScorers,\n   * it is more efficient to use <code>ConjunctionScorer</code>.\n   */\n  public MinShouldMatchSumScorer(Weight weight, List<Scorer> subScorers, int minimumNrMatchers) throws IOException {\n    super(weight);\n    this.nrInHeap = this.numScorers = subScorers.size();\n\n    if (minimumNrMatchers <= 0) {\n      throw new IllegalArgumentException(\"Minimum nr of matchers must be positive\");\n    }\n    if (numScorers <= 1) {\n      throw new IllegalArgumentException(\"There must be at least 2 subScorers\");\n    }\n\n    this.mm = minimumNrMatchers;\n    this.sortedSubScorers = subScorers.toArray(new Scorer[this.numScorers]);\n    // sorting by decreasing subscorer cost should be inversely correlated with\n    // next docid (assuming costs are due to generating many postings)\n    ArrayUtil.timSort(sortedSubScorers, new Comparator<Scorer>() {\n      @Override\n      public int compare(Scorer o1, Scorer o2) {\n        return Long.signum(o2.cost() - o1.cost());\n      }\n    });\n    // take mm-1 most costly subscorers aside\n    this.mmStack = new Scorer[mm-1];\n    for (int i = 0; i < mm-1; i++) {\n      mmStack[i] = sortedSubScorers[i];\n    }\n    nrInHeap -= mm-1;\n    this.sortedSubScorersIdx = mm-1;\n    // take remaining into heap, if any, and heapify\n    this.subScorers = new Scorer[nrInHeap];\n    for (int i = 0; i < nrInHeap; i++) {\n      this.subScorers[i] = this.sortedSubScorers[mm-1+i];\n    }\n    minheapHeapify();\n    assert minheapCheck();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#MinShouldMatchSumScorer(Weight,List[Scorer],int,float[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#MinShouldMatchSumScorer(Weight,List[Scorer],int).mjava","sourceNew":"  /**\n   * Construct a <code>MinShouldMatchSumScorer</code>.\n   * \n   * @param weight The weight to be used.\n   * @param subScorers A collection of at least two subscorers.\n   * @param minimumNrMatchers The positive minimum number of subscorers that should\n   * match to match this query.\n   * <br>When <code>minimumNrMatchers</code> is bigger than\n   * the number of <code>subScorers</code>, no matches will be produced.\n   * <br>When minimumNrMatchers equals the number of subScorers,\n   * it is more efficient to use <code>ConjunctionScorer</code>.\n   */\n  public MinShouldMatchSumScorer(Weight weight, List<Scorer> subScorers, int minimumNrMatchers, float coord[]) throws IOException {\n    super(weight);\n    this.nrInHeap = this.numScorers = subScorers.size();\n\n    if (minimumNrMatchers <= 0) {\n      throw new IllegalArgumentException(\"Minimum nr of matchers must be positive\");\n    }\n    if (numScorers <= 1) {\n      throw new IllegalArgumentException(\"There must be at least 2 subScorers\");\n    }\n\n    this.mm = minimumNrMatchers;\n    this.sortedSubScorers = subScorers.toArray(new Scorer[this.numScorers]);\n    // sorting by decreasing subscorer cost should be inversely correlated with\n    // next docid (assuming costs are due to generating many postings)\n    ArrayUtil.timSort(sortedSubScorers, new Comparator<Scorer>() {\n      @Override\n      public int compare(Scorer o1, Scorer o2) {\n        return Long.signum(o2.cost() - o1.cost());\n      }\n    });\n    // take mm-1 most costly subscorers aside\n    this.mmStack = new Scorer[mm-1];\n    for (int i = 0; i < mm-1; i++) {\n      mmStack[i] = sortedSubScorers[i];\n    }\n    nrInHeap -= mm-1;\n    this.sortedSubScorersIdx = mm-1;\n    // take remaining into heap, if any, and heapify\n    this.subScorers = new Scorer[nrInHeap];\n    for (int i = 0; i < nrInHeap; i++) {\n      this.subScorers[i] = this.sortedSubScorers[mm-1+i];\n    }\n    this.coord = coord;\n    minheapHeapify();\n    assert minheapCheck();\n  }\n\n","sourceOld":"  /**\n   * Construct a <code>MinShouldMatchSumScorer</code>.\n   * \n   * @param weight The weight to be used.\n   * @param subScorers A collection of at least two subscorers.\n   * @param minimumNrMatchers The positive minimum number of subscorers that should\n   * match to match this query.\n   * <br>When <code>minimumNrMatchers</code> is bigger than\n   * the number of <code>subScorers</code>, no matches will be produced.\n   * <br>When minimumNrMatchers equals the number of subScorers,\n   * it is more efficient to use <code>ConjunctionScorer</code>.\n   */\n  public MinShouldMatchSumScorer(Weight weight, List<Scorer> subScorers, int minimumNrMatchers) throws IOException {\n    super(weight);\n    this.nrInHeap = this.numScorers = subScorers.size();\n\n    if (minimumNrMatchers <= 0) {\n      throw new IllegalArgumentException(\"Minimum nr of matchers must be positive\");\n    }\n    if (numScorers <= 1) {\n      throw new IllegalArgumentException(\"There must be at least 2 subScorers\");\n    }\n\n    this.mm = minimumNrMatchers;\n    this.sortedSubScorers = subScorers.toArray(new Scorer[this.numScorers]);\n    // sorting by decreasing subscorer cost should be inversely correlated with\n    // next docid (assuming costs are due to generating many postings)\n    ArrayUtil.timSort(sortedSubScorers, new Comparator<Scorer>() {\n      @Override\n      public int compare(Scorer o1, Scorer o2) {\n        return Long.signum(o2.cost() - o1.cost());\n      }\n    });\n    // take mm-1 most costly subscorers aside\n    this.mmStack = new Scorer[mm-1];\n    for (int i = 0; i < mm-1; i++) {\n      mmStack[i] = sortedSubScorers[i];\n    }\n    nrInHeap -= mm-1;\n    this.sortedSubScorersIdx = mm-1;\n    // take remaining into heap, if any, and heapify\n    this.subScorers = new Scorer[nrInHeap];\n    for (int i = 0; i < nrInHeap; i++) {\n      this.subScorers[i] = this.sortedSubScorers[mm-1+i];\n    }\n    minheapHeapify();\n    assert minheapCheck();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"251e6911800e3a02e1da3bfd4dc49a914aef9778","date":1423063783,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#MinShouldMatchSumScorer(Weight,List[Scorer],int,float[]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Construct a <code>MinShouldMatchSumScorer</code>.\n   * \n   * @param weight The weight to be used.\n   * @param subScorers A collection of at least two subscorers.\n   * @param minimumNrMatchers The positive minimum number of subscorers that should\n   * match to match this query.\n   * <br>When <code>minimumNrMatchers</code> is bigger than\n   * the number of <code>subScorers</code>, no matches will be produced.\n   * <br>When minimumNrMatchers equals the number of subScorers,\n   * it is more efficient to use <code>ConjunctionScorer</code>.\n   */\n  public MinShouldMatchSumScorer(Weight weight, List<Scorer> subScorers, int minimumNrMatchers, float coord[]) throws IOException {\n    super(weight);\n    this.nrInHeap = this.numScorers = subScorers.size();\n\n    if (minimumNrMatchers <= 0) {\n      throw new IllegalArgumentException(\"Minimum nr of matchers must be positive\");\n    }\n    if (numScorers <= 1) {\n      throw new IllegalArgumentException(\"There must be at least 2 subScorers\");\n    }\n\n    this.mm = minimumNrMatchers;\n    this.sortedSubScorers = subScorers.toArray(new Scorer[this.numScorers]);\n    // sorting by decreasing subscorer cost should be inversely correlated with\n    // next docid (assuming costs are due to generating many postings)\n    ArrayUtil.timSort(sortedSubScorers, new Comparator<Scorer>() {\n      @Override\n      public int compare(Scorer o1, Scorer o2) {\n        return Long.signum(o2.cost() - o1.cost());\n      }\n    });\n    // take mm-1 most costly subscorers aside\n    this.mmStack = new Scorer[mm-1];\n    for (int i = 0; i < mm-1; i++) {\n      mmStack[i] = sortedSubScorers[i];\n    }\n    nrInHeap -= mm-1;\n    this.sortedSubScorersIdx = mm-1;\n    // take remaining into heap, if any, and heapify\n    this.subScorers = new Scorer[nrInHeap];\n    for (int i = 0; i < nrInHeap; i++) {\n      this.subScorers[i] = this.sortedSubScorers[mm-1+i];\n    }\n    this.coord = coord;\n    minheapHeapify();\n    assert minheapCheck();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"251e6911800e3a02e1da3bfd4dc49a914aef9778":["38fa8e2c4105a7dd15d7e9260afa3b41a560d51d"],"d9c2895bfaa94bdbd1fd5a1b1522f6310c91d240":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7605579001505896d48b07160075a5c8b8e128e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","38fa8e2c4105a7dd15d7e9260afa3b41a560d51d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["251e6911800e3a02e1da3bfd4dc49a914aef9778"],"38fa8e2c4105a7dd15d7e9260afa3b41a560d51d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d9c2895bfaa94bdbd1fd5a1b1522f6310c91d240"]},"commit2Childs":{"251e6911800e3a02e1da3bfd4dc49a914aef9778":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d9c2895bfaa94bdbd1fd5a1b1522f6310c91d240":["38fa8e2c4105a7dd15d7e9260afa3b41a560d51d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d9c2895bfaa94bdbd1fd5a1b1522f6310c91d240","b7605579001505896d48b07160075a5c8b8e128e","38fa8e2c4105a7dd15d7e9260afa3b41a560d51d"],"b7605579001505896d48b07160075a5c8b8e128e":[],"38fa8e2c4105a7dd15d7e9260afa3b41a560d51d":["251e6911800e3a02e1da3bfd4dc49a914aef9778","b7605579001505896d48b07160075a5c8b8e128e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}