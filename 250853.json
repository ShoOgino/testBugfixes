{"path":"solr/src/java/org/apache/solr/response/XMLWriter#writeDoc(String,SolrDocument,Set[String],boolean).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeDoc(String,SolrDocument,Set[String],boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @since solr 1.3\n   */\n  final void writeDoc(String name, SolrDocument doc, Set<String> returnFields, boolean includeScore) throws IOException {\n    startTag(\"doc\", name, false);\n    incLevel();\n\n    if (includeScore && returnFields != null ) {\n      returnFields.add( \"score\" );\n    }\n\n    for (String fname : doc.getFieldNames()) {\n      if (returnFields!=null && !returnFields.contains(fname)) {\n        continue;\n      }\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // single valued... figure out if we should put <arr> tags around it anyway\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (version>=2100 && sf!=null && sf.multiValued()) {\n          startTag(\"arr\",fname,false);\n          doIndent=false;\n          writeVal(fname, val);\n          writer.write(\"</arr>\");\n          doIndent=defaultIndent;          \n        } else {\n          writeVal(fname, val);          \n        }\n      }\n    }\n\n    decLevel();\n    if (doIndent) indent();\n    writer.write(\"</doc>\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeDoc(String,SolrDocument,Set[String],boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * @since solr 1.3\n   */\n  final void writeDoc(String name, SolrDocument doc, Set<String> returnFields, boolean includeScore) throws IOException {\n    startTag(\"doc\", name, false);\n    incLevel();\n\n    if (includeScore && returnFields != null ) {\n      returnFields.add( \"score\" );\n    }\n\n    for (String fname : doc.getFieldNames()) {\n      if (returnFields!=null && !returnFields.contains(fname)) {\n        continue;\n      }\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // single valued... figure out if we should put <arr> tags around it anyway\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (version>=2100 && sf!=null && sf.multiValued()) {\n          startTag(\"arr\",fname,false);\n          doIndent=false;\n          writeVal(fname, val);\n          writer.write(\"</arr>\");\n          doIndent=defaultIndent;          \n        } else {\n          writeVal(fname, val);          \n        }\n      }\n    }\n\n    decLevel();\n    if (doIndent) indent();\n    writer.write(\"</doc>\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeDoc(String,SolrDocument,Set[String],boolean).mjava","pathOld":"src/java/org/apache/solr/response/XMLWriter#writeDoc(String,SolrDocument,Set[String],boolean).mjava","sourceNew":"  /**\n   * @since solr 1.3\n   */\n  final void writeDoc(String name, SolrDocument doc, Set<String> returnFields, boolean includeScore) throws IOException {\n    startTag(\"doc\", name, false);\n    incLevel();\n\n    if (includeScore && returnFields != null ) {\n      returnFields.add( \"score\" );\n    }\n\n    for (String fname : doc.getFieldNames()) {\n      if (returnFields!=null && !returnFields.contains(fname)) {\n        continue;\n      }\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // single valued... figure out if we should put <arr> tags around it anyway\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (version>=2100 && sf!=null && sf.multiValued()) {\n          startTag(\"arr\",fname,false);\n          doIndent=false;\n          writeVal(fname, val);\n          writer.write(\"</arr>\");\n          doIndent=defaultIndent;          \n        } else {\n          writeVal(fname, val);          \n        }\n      }\n    }\n\n    decLevel();\n    if (doIndent) indent();\n    writer.write(\"</doc>\");\n  }\n\n","sourceOld":"  /**\n   * @since solr 1.3\n   */\n  final void writeDoc(String name, SolrDocument doc, Set<String> returnFields, boolean includeScore) throws IOException {\n    startTag(\"doc\", name, false);\n    incLevel();\n\n    if (includeScore && returnFields != null ) {\n      returnFields.add( \"score\" );\n    }\n\n    for (String fname : doc.getFieldNames()) {\n      if (returnFields!=null && !returnFields.contains(fname)) {\n        continue;\n      }\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // single valued... figure out if we should put <arr> tags around it anyway\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (version>=2100 && sf!=null && sf.multiValued()) {\n          startTag(\"arr\",fname,false);\n          doIndent=false;\n          writeVal(fname, val);\n          writer.write(\"</arr>\");\n          doIndent=defaultIndent;          \n        } else {\n          writeVal(fname, val);          \n        }\n      }\n    }\n\n    decLevel();\n    if (doIndent) indent();\n    writer.write(\"</doc>\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeDoc(String,SolrDocument,Set[String],boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @since solr 1.3\n   */\n  final void writeDoc(String name, SolrDocument doc, Set<String> returnFields, boolean includeScore) throws IOException {\n    startTag(\"doc\", name, false);\n    incLevel();\n\n    if (includeScore && returnFields != null ) {\n      returnFields.add( \"score\" );\n    }\n\n    for (String fname : doc.getFieldNames()) {\n      if (returnFields!=null && !returnFields.contains(fname)) {\n        continue;\n      }\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // single valued... figure out if we should put <arr> tags around it anyway\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (version>=2100 && sf!=null && sf.multiValued()) {\n          startTag(\"arr\",fname,false);\n          doIndent=false;\n          writeVal(fname, val);\n          writer.write(\"</arr>\");\n          doIndent=defaultIndent;          \n        } else {\n          writeVal(fname, val);          \n        }\n      }\n    }\n\n    decLevel();\n    if (doIndent) indent();\n    writer.write(\"</doc>\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7fa50ec3461abff12249dbe19296a1a1f8fc2eb2","date":1293213108,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeSolrDocument(String,SolrDocument,Set[String],Map).mjava","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeDoc(String,SolrDocument,Set[String],boolean).mjava","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, Set<String> returnFields, Map pseudoFields) throws IOException {\n    startTag(\"doc\", name, false);\n    incLevel();\n\n    for (String fname : doc.getFieldNames()) {\n      if (returnFields!=null && !returnFields.contains(fname)) {\n        continue;\n      }\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // single valued... figure out if we should put <arr> tags around it anyway\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (version>=2100 && sf!=null && sf.multiValued()) {\n          startTag(\"arr\",fname,false);\n          doIndent=false;\n          writeVal(fname, val);\n          writer.write(\"</arr>\");\n          doIndent=defaultIndent;\n        } else {\n          writeVal(fname, val);\n        }\n      }\n    }\n\n    if (pseudoFields != null) {\n      for (Object fname : pseudoFields.keySet()) {\n        writeVal(fname.toString(), pseudoFields.get(fname));\n      }\n    }\n\n    decLevel();\n    if (doIndent) indent();\n    writer.write(\"</doc>\");\n  }\n\n","sourceOld":"  /**\n   * @since solr 1.3\n   */\n  final void writeDoc(String name, SolrDocument doc, Set<String> returnFields, boolean includeScore) throws IOException {\n    startTag(\"doc\", name, false);\n    incLevel();\n\n    if (includeScore && returnFields != null ) {\n      returnFields.add( \"score\" );\n    }\n\n    for (String fname : doc.getFieldNames()) {\n      if (returnFields!=null && !returnFields.contains(fname)) {\n        continue;\n      }\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // single valued... figure out if we should put <arr> tags around it anyway\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (version>=2100 && sf!=null && sf.multiValued()) {\n          startTag(\"arr\",fname,false);\n          doIndent=false;\n          writeVal(fname, val);\n          writer.write(\"</arr>\");\n          doIndent=defaultIndent;          \n        } else {\n          writeVal(fname, val);          \n        }\n      }\n    }\n\n    decLevel();\n    if (doIndent) indent();\n    writer.write(\"</doc>\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeSolrDocument(String,SolrDocument,Set[String],Map).mjava","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeDoc(String,SolrDocument,Set[String],boolean).mjava","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, Set<String> returnFields, Map pseudoFields) throws IOException {\n    startTag(\"doc\", name, false);\n    incLevel();\n\n    for (String fname : doc.getFieldNames()) {\n      if (returnFields!=null && !returnFields.contains(fname)) {\n        continue;\n      }\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // single valued... figure out if we should put <arr> tags around it anyway\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (version>=2100 && sf!=null && sf.multiValued()) {\n          startTag(\"arr\",fname,false);\n          doIndent=false;\n          writeVal(fname, val);\n          writer.write(\"</arr>\");\n          doIndent=defaultIndent;\n        } else {\n          writeVal(fname, val);\n        }\n      }\n    }\n\n    if (pseudoFields != null) {\n      for (Object fname : pseudoFields.keySet()) {\n        writeVal(fname.toString(), pseudoFields.get(fname));\n      }\n    }\n\n    decLevel();\n    if (doIndent) indent();\n    writer.write(\"</doc>\");\n  }\n\n","sourceOld":"  /**\n   * @since solr 1.3\n   */\n  final void writeDoc(String name, SolrDocument doc, Set<String> returnFields, boolean includeScore) throws IOException {\n    startTag(\"doc\", name, false);\n    incLevel();\n\n    if (includeScore && returnFields != null ) {\n      returnFields.add( \"score\" );\n    }\n\n    for (String fname : doc.getFieldNames()) {\n      if (returnFields!=null && !returnFields.contains(fname)) {\n        continue;\n      }\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // single valued... figure out if we should put <arr> tags around it anyway\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (version>=2100 && sf!=null && sf.multiValued()) {\n          startTag(\"arr\",fname,false);\n          doIndent=false;\n          writeVal(fname, val);\n          writer.write(\"</arr>\");\n          doIndent=defaultIndent;          \n        } else {\n          writeVal(fname, val);          \n        }\n      }\n    }\n\n    decLevel();\n    if (doIndent) indent();\n    writer.write(\"</doc>\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeDoc(String,SolrDocument,Set[String],boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * @since solr 1.3\n   */\n  final void writeDoc(String name, SolrDocument doc, Set<String> returnFields, boolean includeScore) throws IOException {\n    startTag(\"doc\", name, false);\n    incLevel();\n\n    if (includeScore && returnFields != null ) {\n      returnFields.add( \"score\" );\n    }\n\n    for (String fname : doc.getFieldNames()) {\n      if (returnFields!=null && !returnFields.contains(fname)) {\n        continue;\n      }\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // single valued... figure out if we should put <arr> tags around it anyway\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (version>=2100 && sf!=null && sf.multiValued()) {\n          startTag(\"arr\",fname,false);\n          doIndent=false;\n          writeVal(fname, val);\n          writer.write(\"</arr>\");\n          doIndent=defaultIndent;          \n        } else {\n          writeVal(fname, val);          \n        }\n      }\n    }\n\n    decLevel();\n    if (doIndent) indent();\n    writer.write(\"</doc>\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"70ad682703b8585f5d0a637efec044d57ec05efb":["1da8d55113b689b06716246649de6f62430f15c0","7fa50ec3461abff12249dbe19296a1a1f8fc2eb2"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["1da8d55113b689b06716246649de6f62430f15c0","7fa50ec3461abff12249dbe19296a1a1f8fc2eb2"],"7fa50ec3461abff12249dbe19296a1a1f8fc2eb2":["1da8d55113b689b06716246649de6f62430f15c0"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7fa50ec3461abff12249dbe19296a1a1f8fc2eb2"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","7fa50ec3461abff12249dbe19296a1a1f8fc2eb2"],"70ad682703b8585f5d0a637efec044d57ec05efb":[],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":[],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"7fa50ec3461abff12249dbe19296a1a1f8fc2eb2":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}