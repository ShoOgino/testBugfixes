{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/LogTransformer#transformRow(Map[String,Object],Context).mjava","commits":[{"id":"010bc8adb8d4ddbbc99fe6eee9a4f6c81f012610","date":1237272153,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/LogTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"/dev/null","sourceNew":"  public Object transformRow(Map<String, Object> row, Context context) {\n    VariableResolver vr = context.getVariableResolver();\n    String expr = context.getEntityAttribute(LOG_TEMPLATE);\n    String level = vr.replaceTokens(context.getEntityAttribute(LOG_LEVEL));\n\n    if (expr == null || level == null) return row;\n\n    if (\"info\".equals(level)) {\n      if (LOG.isInfoEnabled())\n        LOG.info(vr.replaceTokens(expr));\n    } else if (\"trace\".equals(level)) {\n      if (LOG.isTraceEnabled())\n        LOG.trace(vr.replaceTokens(expr));\n    } else if (\"warn\".equals(level)) {\n      if (LOG.isWarnEnabled())\n        LOG.warn(vr.replaceTokens(expr));\n    } else if (\"error\".equals(level)) {\n      if (LOG.isErrorEnabled())\n        LOG.error(vr.replaceTokens(expr));\n    } else if (\"debug\".equals(level)) {\n      if (LOG.isDebugEnabled())\n        LOG.debug(vr.replaceTokens(expr));\n    }\n\n    return row;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"153cc06382fdc94d0ea3db127eab860ae4310525","date":1260181667,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/LogTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/LogTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  public Object transformRow(Map<String, Object> row, Context ctx) {\n    String expr = ctx.getEntityAttribute(LOG_TEMPLATE);\n    String level = ctx.replaceTokens(ctx.getEntityAttribute(LOG_LEVEL));\n\n    if (expr == null || level == null) return row;\n\n    if (\"info\".equals(level)) {\n      if (LOG.isInfoEnabled())\n        LOG.info(ctx.replaceTokens(expr));\n    } else if (\"trace\".equals(level)) {\n      if (LOG.isTraceEnabled())\n        LOG.trace(ctx.replaceTokens(expr));\n    } else if (\"warn\".equals(level)) {\n      if (LOG.isWarnEnabled())\n        LOG.warn(ctx.replaceTokens(expr));\n    } else if (\"error\".equals(level)) {\n      if (LOG.isErrorEnabled())\n        LOG.error(ctx.replaceTokens(expr));\n    } else if (\"debug\".equals(level)) {\n      if (LOG.isDebugEnabled())\n        LOG.debug(ctx.replaceTokens(expr));\n    }\n\n    return row;\n  }\n\n","sourceOld":"  public Object transformRow(Map<String, Object> row, Context context) {\n    VariableResolver vr = context.getVariableResolver();\n    String expr = context.getEntityAttribute(LOG_TEMPLATE);\n    String level = vr.replaceTokens(context.getEntityAttribute(LOG_LEVEL));\n\n    if (expr == null || level == null) return row;\n\n    if (\"info\".equals(level)) {\n      if (LOG.isInfoEnabled())\n        LOG.info(vr.replaceTokens(expr));\n    } else if (\"trace\".equals(level)) {\n      if (LOG.isTraceEnabled())\n        LOG.trace(vr.replaceTokens(expr));\n    } else if (\"warn\".equals(level)) {\n      if (LOG.isWarnEnabled())\n        LOG.warn(vr.replaceTokens(expr));\n    } else if (\"error\".equals(level)) {\n      if (LOG.isErrorEnabled())\n        LOG.error(vr.replaceTokens(expr));\n    } else if (\"debug\".equals(level)) {\n      if (LOG.isDebugEnabled())\n        LOG.debug(vr.replaceTokens(expr));\n    }\n\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/LogTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/LogTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  public Object transformRow(Map<String, Object> row, Context ctx) {\n    String expr = ctx.getEntityAttribute(LOG_TEMPLATE);\n    String level = ctx.replaceTokens(ctx.getEntityAttribute(LOG_LEVEL));\n\n    if (expr == null || level == null) return row;\n\n    if (\"info\".equals(level)) {\n      if (LOG.isInfoEnabled())\n        LOG.info(ctx.replaceTokens(expr));\n    } else if (\"trace\".equals(level)) {\n      if (LOG.isTraceEnabled())\n        LOG.trace(ctx.replaceTokens(expr));\n    } else if (\"warn\".equals(level)) {\n      if (LOG.isWarnEnabled())\n        LOG.warn(ctx.replaceTokens(expr));\n    } else if (\"error\".equals(level)) {\n      if (LOG.isErrorEnabled())\n        LOG.error(ctx.replaceTokens(expr));\n    } else if (\"debug\".equals(level)) {\n      if (LOG.isDebugEnabled())\n        LOG.debug(ctx.replaceTokens(expr));\n    }\n\n    return row;\n  }\n\n","sourceOld":"  public Object transformRow(Map<String, Object> row, Context ctx) {\n    String expr = ctx.getEntityAttribute(LOG_TEMPLATE);\n    String level = ctx.replaceTokens(ctx.getEntityAttribute(LOG_LEVEL));\n\n    if (expr == null || level == null) return row;\n\n    if (\"info\".equals(level)) {\n      if (LOG.isInfoEnabled())\n        LOG.info(ctx.replaceTokens(expr));\n    } else if (\"trace\".equals(level)) {\n      if (LOG.isTraceEnabled())\n        LOG.trace(ctx.replaceTokens(expr));\n    } else if (\"warn\".equals(level)) {\n      if (LOG.isWarnEnabled())\n        LOG.warn(ctx.replaceTokens(expr));\n    } else if (\"error\".equals(level)) {\n      if (LOG.isErrorEnabled())\n        LOG.error(ctx.replaceTokens(expr));\n    } else if (\"debug\".equals(level)) {\n      if (LOG.isDebugEnabled())\n        LOG.debug(ctx.replaceTokens(expr));\n    }\n\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"010bc8adb8d4ddbbc99fe6eee9a4f6c81f012610":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["153cc06382fdc94d0ea3db127eab860ae4310525"],"153cc06382fdc94d0ea3db127eab860ae4310525":["010bc8adb8d4ddbbc99fe6eee9a4f6c81f012610"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"010bc8adb8d4ddbbc99fe6eee9a4f6c81f012610":["153cc06382fdc94d0ea3db127eab860ae4310525"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["010bc8adb8d4ddbbc99fe6eee9a4f6c81f012610"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"153cc06382fdc94d0ea3db127eab860ae4310525":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}