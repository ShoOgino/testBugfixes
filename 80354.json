{"path":"lucene/src/java/org/apache/lucene/store/Directory#copyTo(Directory).mjava","commits":[{"id":"ec2cffca1d4e939384a51d2f67dc7687fcb5d7a4","date":1269599681,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/Directory#copyTo(Directory).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * <p>Copy all files of this directory to destination directory. All conflicting files at destination are overwritten</p>\n   * <p><b>NOTE:</b> this method only copies files that look like index files (ie, have extensions matching the known\n   * extensions of index files).\n   * <p><b>NOTE:</b> the source directory should not change while this method is running.  Otherwise the results are\n   * undefined and you could easily hit a FileNotFoundException. </p>\n   *\n   * @param to        destination directory\n   */\n  public final void copyTo(Directory to) throws IOException {\n    List<String> filenames = new ArrayList<String>();\n    IndexFileNameFilter filter = IndexFileNameFilter.getFilter();\n\n    for (String name : listAll())\n      if (filter.accept(null, name))\n        filenames.add(name);\n\n    copyTo(to, filenames);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/Directory#copyTo(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/Directory#copyTo(Directory).mjava","sourceNew":"  /**\n   * <p>Copy all files of this directory to destination directory. All conflicting files at destination are overwritten</p>\n   * <p><b>NOTE:</b> this method only copies files that look like index files (ie, have extensions matching the known\n   * extensions of index files).\n   * <p><b>NOTE:</b> the source directory should not change while this method is running.  Otherwise the results are\n   * undefined and you could easily hit a FileNotFoundException. </p>\n   *\n   * @param to        destination directory\n   */\n  public final void copyTo(Directory to) throws IOException {\n    copyTo(to, Arrays.asList(listAll()));\n  }\n\n","sourceOld":"  /**\n   * <p>Copy all files of this directory to destination directory. All conflicting files at destination are overwritten</p>\n   * <p><b>NOTE:</b> this method only copies files that look like index files (ie, have extensions matching the known\n   * extensions of index files).\n   * <p><b>NOTE:</b> the source directory should not change while this method is running.  Otherwise the results are\n   * undefined and you could easily hit a FileNotFoundException. </p>\n   *\n   * @param to        destination directory\n   */\n  public final void copyTo(Directory to) throws IOException {\n    List<String> filenames = new ArrayList<String>();\n    IndexFileNameFilter filter = IndexFileNameFilter.getFilter();\n\n    for (String name : listAll())\n      if (filter.accept(null, name))\n        filenames.add(name);\n\n    copyTo(to, filenames);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb10b6bcde550b87d8f10e5f010bd8f3021023b6","date":1274974592,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/store/Directory#copyTo(Directory).mjava","sourceNew":null,"sourceOld":"  /**\n   * <p>Copy all files of this directory to destination directory. All conflicting files at destination are overwritten</p>\n   * <p><b>NOTE:</b> this method only copies files that look like index files (ie, have extensions matching the known\n   * extensions of index files).\n   * <p><b>NOTE:</b> the source directory should not change while this method is running.  Otherwise the results are\n   * undefined and you could easily hit a FileNotFoundException. </p>\n   *\n   * @param to        destination directory\n   */\n  public final void copyTo(Directory to) throws IOException {\n    copyTo(to, Arrays.asList(listAll()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec2cffca1d4e939384a51d2f67dc7687fcb5d7a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["ec2cffca1d4e939384a51d2f67dc7687fcb5d7a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"]},"commit2Childs":{"ec2cffca1d4e939384a51d2f67dc7687fcb5d7a4":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ec2cffca1d4e939384a51d2f67dc7687fcb5d7a4"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}