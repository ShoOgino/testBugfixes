{"path":"src/java/org/apache/lucene/search/Similarity#computeNorm(String,FieldInvertState).mjava","commits":[{"id":"d41ab32fc87982eab82a896cee390971b5c08fd2","date":1225735438,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Similarity#computeNorm(String,FieldInvertState).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Compute the normalization value for a field, given the accumulated\n   * state of term processing for this field (see {@link FieldInvertState}).\n   * \n   * <p>Implementations should calculate a float value based on the field\n   * state and then return that value.\n   *\n   * <p>For backward compatibility this method by default calls\n   * {@link #lengthNorm(String, int)} passing\n   * {@link FieldInvertState#getLength()} as the second argument, and\n   * then multiplies this value by {@link FieldInvertState#getBoost()}.</p>\n   * \n   * <p><b>WARNING</b>: This API is new and experimental and may\n   * suddenly change.</p>\n   * \n   * @param field field name\n   * @param state current processing state for this field\n   * @return the calculated float norm\n   */\n  public float computeNorm(String field, FieldInvertState state) {\n    return (float) (state.getBoost() * lengthNorm(field, state.getLength()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e0ca16f14d94e05bda40e00ecb2a2c0225343c6","date":1264951226,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Similarity#computeNorm(String,FieldInvertState).mjava","pathOld":"src/java/org/apache/lucene/search/Similarity#computeNorm(String,FieldInvertState).mjava","sourceNew":"  /**\n   * Compute the normalization value for a field, given the accumulated\n   * state of term processing for this field (see {@link FieldInvertState}).\n   * \n   * <p>Implementations should calculate a float value based on the field\n   * state and then return that value.\n   *\n   * <p>For backward compatibility this method by default calls\n   * {@link #lengthNorm(String, int)} passing\n   * {@link FieldInvertState#getLength()} as the second argument, and\n   * then multiplies this value by {@link FieldInvertState#getBoost()}.</p>\n   * \n   * @lucene.experimental\n   * \n   * @param field field name\n   * @param state current processing state for this field\n   * @return the calculated float norm\n   */\n  public float computeNorm(String field, FieldInvertState state) {\n    return (float) (state.getBoost() * lengthNorm(field, state.getLength()));\n  }\n\n","sourceOld":"  /**\n   * Compute the normalization value for a field, given the accumulated\n   * state of term processing for this field (see {@link FieldInvertState}).\n   * \n   * <p>Implementations should calculate a float value based on the field\n   * state and then return that value.\n   *\n   * <p>For backward compatibility this method by default calls\n   * {@link #lengthNorm(String, int)} passing\n   * {@link FieldInvertState#getLength()} as the second argument, and\n   * then multiplies this value by {@link FieldInvertState#getBoost()}.</p>\n   * \n   * <p><b>WARNING</b>: This API is new and experimental and may\n   * suddenly change.</p>\n   * \n   * @param field field name\n   * @param state current processing state for this field\n   * @return the calculated float norm\n   */\n  public float computeNorm(String field, FieldInvertState state) {\n    return (float) (state.getBoost() * lengthNorm(field, state.getLength()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Similarity#computeNorm(String,FieldInvertState).mjava","pathOld":"src/java/org/apache/lucene/search/Similarity#computeNorm(String,FieldInvertState).mjava","sourceNew":"  /**\n   * Compute the normalization value for a field, given the accumulated\n   * state of term processing for this field (see {@link FieldInvertState}).\n   * \n   * <p>Implementations should calculate a float value based on the field\n   * state and then return that value.\n   *\n   * <p>For backward compatibility this method by default calls\n   * {@link #lengthNorm(String, int)} passing\n   * {@link FieldInvertState#getLength()} as the second argument, and\n   * then multiplies this value by {@link FieldInvertState#getBoost()}.</p>\n   * \n   * @lucene.experimental\n   * \n   * @param field field name\n   * @param state current processing state for this field\n   * @return the calculated float norm\n   */\n  public float computeNorm(String field, FieldInvertState state) {\n    return (state.getBoost() * lengthNorm(field, state.getLength()));\n  }\n\n","sourceOld":"  /**\n   * Compute the normalization value for a field, given the accumulated\n   * state of term processing for this field (see {@link FieldInvertState}).\n   * \n   * <p>Implementations should calculate a float value based on the field\n   * state and then return that value.\n   *\n   * <p>For backward compatibility this method by default calls\n   * {@link #lengthNorm(String, int)} passing\n   * {@link FieldInvertState#getLength()} as the second argument, and\n   * then multiplies this value by {@link FieldInvertState#getBoost()}.</p>\n   * \n   * @lucene.experimental\n   * \n   * @param field field name\n   * @param state current processing state for this field\n   * @return the calculated float norm\n   */\n  public float computeNorm(String field, FieldInvertState state) {\n    return (float) (state.getBoost() * lengthNorm(field, state.getLength()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/Similarity#computeNorm(String,FieldInvertState).mjava","pathOld":"src/java/org/apache/lucene/search/Similarity#computeNorm(String,FieldInvertState).mjava","sourceNew":"  /**\n   * Compute the normalization value for a field, given the accumulated\n   * state of term processing for this field (see {@link FieldInvertState}).\n   * \n   * <p>Implementations should calculate a float value based on the field\n   * state and then return that value.\n   *\n   * <p>For backward compatibility this method by default calls\n   * {@link #lengthNorm(String, int)} passing\n   * {@link FieldInvertState#getLength()} as the second argument, and\n   * then multiplies this value by {@link FieldInvertState#getBoost()}.</p>\n   * \n   * @lucene.experimental\n   * \n   * @param field field name\n   * @param state current processing state for this field\n   * @return the calculated float norm\n   */\n  public float computeNorm(String field, FieldInvertState state) {\n    return (state.getBoost() * lengthNorm(field, state.getLength()));\n  }\n\n","sourceOld":"  /**\n   * Compute the normalization value for a field, given the accumulated\n   * state of term processing for this field (see {@link FieldInvertState}).\n   * \n   * <p>Implementations should calculate a float value based on the field\n   * state and then return that value.\n   *\n   * <p>For backward compatibility this method by default calls\n   * {@link #lengthNorm(String, int)} passing\n   * {@link FieldInvertState#getLength()} as the second argument, and\n   * then multiplies this value by {@link FieldInvertState#getBoost()}.</p>\n   * \n   * @lucene.experimental\n   * \n   * @param field field name\n   * @param state current processing state for this field\n   * @return the calculated float norm\n   */\n  public float computeNorm(String field, FieldInvertState state) {\n    return (state.getBoost() * lengthNorm(field, state.getLength()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d41ab32fc87982eab82a896cee390971b5c08fd2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1e0ca16f14d94e05bda40e00ecb2a2c0225343c6":["d41ab32fc87982eab82a896cee390971b5c08fd2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["1e0ca16f14d94e05bda40e00ecb2a2c0225343c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"d41ab32fc87982eab82a896cee390971b5c08fd2":["1e0ca16f14d94e05bda40e00ecb2a2c0225343c6"],"1e0ca16f14d94e05bda40e00ecb2a2c0225343c6":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d41ab32fc87982eab82a896cee390971b5c08fd2"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}