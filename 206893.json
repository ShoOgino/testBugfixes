{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#assertEquals(RandomDocument,Fields).mjava","commits":[{"id":"f21ce13f410ee015e1ba14687ab4b8518ac52a11","date":1359713213,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#assertEquals(RandomDocument,Fields).mjava","pathOld":"/dev/null","sourceNew":"  protected void assertEquals(RandomDocument doc, Fields fields) throws IOException {\n    // compare field names\n    assertEquals(doc == null, fields == null);\n    assertEquals(doc.fieldNames.length, fields.size());\n    final Set<String> fields1 = new HashSet<String>();\n    final Set<String> fields2 = new HashSet<String>();\n    for (int i = 0; i < doc.fieldNames.length; ++i) {\n      fields1.add(doc.fieldNames[i]);\n    }\n    for (String field : fields) {\n      fields2.add(field);\n    }\n    assertEquals(fields1, fields2);\n\n    for (int i = 0; i < doc.fieldNames.length; ++i) {\n      assertEquals(doc.tokenStreams[i], doc.fieldTypes[i], fields.terms(doc.fieldNames[i]));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0fa6955ed1b1007ded1349ab72cea4555640432f","date":1359721908,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#assertEquals(RandomDocument,Fields).mjava","pathOld":"/dev/null","sourceNew":"  protected void assertEquals(RandomDocument doc, Fields fields) throws IOException {\n    // compare field names\n    assertEquals(doc == null, fields == null);\n    assertEquals(doc.fieldNames.length, fields.size());\n    final Set<String> fields1 = new HashSet<String>();\n    final Set<String> fields2 = new HashSet<String>();\n    for (int i = 0; i < doc.fieldNames.length; ++i) {\n      fields1.add(doc.fieldNames[i]);\n    }\n    for (String field : fields) {\n      fields2.add(field);\n    }\n    assertEquals(fields1, fields2);\n\n    for (int i = 0; i < doc.fieldNames.length; ++i) {\n      assertEquals(doc.tokenStreams[i], doc.fieldTypes[i], fields.terms(doc.fieldNames[i]));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#assertEquals(RandomDocument,Fields).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#assertEquals(RandomDocument,Fields).mjava","sourceNew":"  protected void assertEquals(RandomDocument doc, Fields fields) throws IOException {\n    // compare field names\n    assertEquals(doc == null, fields == null);\n    assertEquals(doc.fieldNames.length, fields.size());\n    final Set<String> fields1 = new HashSet<>();\n    final Set<String> fields2 = new HashSet<>();\n    for (int i = 0; i < doc.fieldNames.length; ++i) {\n      fields1.add(doc.fieldNames[i]);\n    }\n    for (String field : fields) {\n      fields2.add(field);\n    }\n    assertEquals(fields1, fields2);\n\n    for (int i = 0; i < doc.fieldNames.length; ++i) {\n      assertEquals(doc.tokenStreams[i], doc.fieldTypes[i], fields.terms(doc.fieldNames[i]));\n    }\n  }\n\n","sourceOld":"  protected void assertEquals(RandomDocument doc, Fields fields) throws IOException {\n    // compare field names\n    assertEquals(doc == null, fields == null);\n    assertEquals(doc.fieldNames.length, fields.size());\n    final Set<String> fields1 = new HashSet<String>();\n    final Set<String> fields2 = new HashSet<String>();\n    for (int i = 0; i < doc.fieldNames.length; ++i) {\n      fields1.add(doc.fieldNames[i]);\n    }\n    for (String field : fields) {\n      fields2.add(field);\n    }\n    assertEquals(fields1, fields2);\n\n    for (int i = 0; i < doc.fieldNames.length; ++i) {\n      assertEquals(doc.tokenStreams[i], doc.fieldTypes[i], fields.terms(doc.fieldNames[i]));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9f94c392daa8f5708186bede16c84eafad4cdd2","date":1599578873,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#assertEquals(RandomDocument,Fields).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#assertEquals(RandomDocument,Fields).mjava","sourceNew":"  protected void assertEquals(RandomDocument doc, Fields fields) throws IOException {\n    // compare field names\n    assertNotNull(doc);\n    assertNotNull(fields);\n    assertEquals(doc.fieldNames.length, fields.size());\n    final Set<String> fields1 = new HashSet<>();\n    final Set<String> fields2 = new HashSet<>();\n    Collections.addAll(fields1, doc.fieldNames);\n    for (String field : fields) {\n      fields2.add(field);\n    }\n    assertEquals(fields1, fields2);\n\n    for (int i = 0; i < doc.fieldNames.length; ++i) {\n      assertEquals(doc.tokenStreams[i], doc.fieldTypes[i], fields.terms(doc.fieldNames[i]));\n    }\n  }\n\n","sourceOld":"  protected void assertEquals(RandomDocument doc, Fields fields) throws IOException {\n    // compare field names\n    assertEquals(doc == null, fields == null);\n    assertEquals(doc.fieldNames.length, fields.size());\n    final Set<String> fields1 = new HashSet<>();\n    final Set<String> fields2 = new HashSet<>();\n    for (int i = 0; i < doc.fieldNames.length; ++i) {\n      fields1.add(doc.fieldNames[i]);\n    }\n    for (String field : fields) {\n      fields2.add(field);\n    }\n    assertEquals(fields1, fields2);\n\n    for (int i = 0; i < doc.fieldNames.length; ++i) {\n      assertEquals(doc.tokenStreams[i], doc.fieldTypes[i], fields.terms(doc.fieldNames[i]));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["f21ce13f410ee015e1ba14687ab4b8518ac52a11"],"0fa6955ed1b1007ded1349ab72cea4555640432f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f21ce13f410ee015e1ba14687ab4b8518ac52a11"],"c9f94c392daa8f5708186bede16c84eafad4cdd2":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f21ce13f410ee015e1ba14687ab4b8518ac52a11":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9f94c392daa8f5708186bede16c84eafad4cdd2"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c9f94c392daa8f5708186bede16c84eafad4cdd2"],"0fa6955ed1b1007ded1349ab72cea4555640432f":[],"c9f94c392daa8f5708186bede16c84eafad4cdd2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0fa6955ed1b1007ded1349ab72cea4555640432f","f21ce13f410ee015e1ba14687ab4b8518ac52a11"],"f21ce13f410ee015e1ba14687ab4b8518ac52a11":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","0fa6955ed1b1007ded1349ab72cea4555640432f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0fa6955ed1b1007ded1349ab72cea4555640432f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}