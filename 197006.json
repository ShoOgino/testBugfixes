{"path":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","commits":[{"id":"043c298cb215f13ba7b9b81d20760704e8f93d66","date":1107566743,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","pathOld":"sandbox/contributions/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","sourceNew":"\tpublic void testUnRewrittenQuery() throws IOException, ParseException\n\t{\n\t\t//test to show how rewritten query can still be used\n\t\tsearcher = new IndexSearcher(ramDir);\n\t\tAnalyzer analyzer=new StandardAnalyzer();\n\t\tQuery query = QueryParser.parse(\"JF? or Kenned*\", FIELD_NAME, analyzer);\n\t\tSystem.out.println(\"Searching with primitive query\");\n\t\t//forget to set this and...\n\t\t//query=query.rewrite(reader);\n\t\tHits hits = searcher.search(query);\n\n\t\t//create an instance of the highlighter with the tags used to surround highlighted text\n//\t\tQueryHighlightExtractor highlighter = new QueryHighlightExtractor(this, query, new StandardAnalyzer());\n\t\tHighlighter highlighter =\n\t\t\tnew Highlighter(this,new QueryScorer(query));\n\n\t\thighlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n\t\tint maxNumFragmentsRequired = 3;\n\n\t\tfor (int i = 0; i < hits.length(); i++)\n\t\t{\n\t\t\tString text = hits.doc(i).get(FIELD_NAME);\n\t\t\tTokenStream tokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(text));\n\n\t\t\tString highlightedText = highlighter.getBestFragments(tokenStream,text,maxNumFragmentsRequired,\"...\");\n\t\t\tSystem.out.println(highlightedText);\n\t\t}\n\t\t//We expect to have zero highlights if the query is multi-terms and is not rewritten!\n\t\tassertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\", numHighlights == 0);\n\t}\n\n","sourceOld":"\tpublic void testUnRewrittenQuery() throws IOException, ParseException\n\t{\n\t\t//test to show how rewritten query can still be used\n\t\tsearcher = new IndexSearcher(ramDir);\n\t\tAnalyzer analyzer=new StandardAnalyzer();\n\t\tQuery query = QueryParser.parse(\"JF? or Kenned*\", FIELD_NAME, analyzer);\n\t\tSystem.out.println(\"Searching with primitive query\");\n\t\t//forget to set this and...\n\t\t//query=query.rewrite(reader);\n\t\tHits hits = searcher.search(query);\n\n\t\t//create an instance of the highlighter with the tags used to surround highlighted text\n//\t\tQueryHighlightExtractor highlighter = new QueryHighlightExtractor(this, query, new StandardAnalyzer());\n\t\tHighlighter highlighter =\n\t\t\tnew Highlighter(this,new QueryScorer(query));\n\n\t\thighlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n\t\tint maxNumFragmentsRequired = 3;\n\n\t\tfor (int i = 0; i < hits.length(); i++)\n\t\t{\n\t\t\tString text = hits.doc(i).get(FIELD_NAME);\n\t\t\tTokenStream tokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(text));\n\n\t\t\tString highlightedText = highlighter.getBestFragments(tokenStream,text,maxNumFragmentsRequired,\"...\");\n\t\t\tSystem.out.println(highlightedText);\n\t\t}\n\t\t//We expect to have zero highlights if the query is multi-terms and is not rewritten!\n\t\tassertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\", numHighlights == 0);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00baa0cad99f9a7efd382b1e817c2f6b9384220a","date":1140555918,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","sourceNew":"\tpublic void testUnRewrittenQuery() throws IOException, ParseException\n\t{\n\t\t//test to show how rewritten query can still be used\n\t\tsearcher = new IndexSearcher(ramDir);\n\t\tAnalyzer analyzer=new StandardAnalyzer();\n\n\t\tQueryParser parser=new QueryParser(FIELD_NAME,analyzer);\t\n\t\tQuery query = parser.parse(\"JF? or Kenned*\");\n\t\tSystem.out.println(\"Searching with primitive query\");\n\t\t//forget to set this and...\n\t\t//query=query.rewrite(reader);\n\t\tHits hits = searcher.search(query);\n\n\t\t//create an instance of the highlighter with the tags used to surround highlighted text\n//\t\tQueryHighlightExtractor highlighter = new QueryHighlightExtractor(this, query, new StandardAnalyzer());\n\t\tHighlighter highlighter =\n\t\t\tnew Highlighter(this,new QueryScorer(query));\n\n\t\thighlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n\t\tint maxNumFragmentsRequired = 3;\n\n\t\tfor (int i = 0; i < hits.length(); i++)\n\t\t{\n\t\t\tString text = hits.doc(i).get(FIELD_NAME);\n\t\t\tTokenStream tokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(text));\n\n\t\t\tString highlightedText = highlighter.getBestFragments(tokenStream,text,maxNumFragmentsRequired,\"...\");\n\t\t\tSystem.out.println(highlightedText);\n\t\t}\n\t\t//We expect to have zero highlights if the query is multi-terms and is not rewritten!\n\t\tassertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\", numHighlights == 0);\n\t}\n\n","sourceOld":"\tpublic void testUnRewrittenQuery() throws IOException, ParseException\n\t{\n\t\t//test to show how rewritten query can still be used\n\t\tsearcher = new IndexSearcher(ramDir);\n\t\tAnalyzer analyzer=new StandardAnalyzer();\n\t\tQuery query = QueryParser.parse(\"JF? or Kenned*\", FIELD_NAME, analyzer);\n\t\tSystem.out.println(\"Searching with primitive query\");\n\t\t//forget to set this and...\n\t\t//query=query.rewrite(reader);\n\t\tHits hits = searcher.search(query);\n\n\t\t//create an instance of the highlighter with the tags used to surround highlighted text\n//\t\tQueryHighlightExtractor highlighter = new QueryHighlightExtractor(this, query, new StandardAnalyzer());\n\t\tHighlighter highlighter =\n\t\t\tnew Highlighter(this,new QueryScorer(query));\n\n\t\thighlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n\t\tint maxNumFragmentsRequired = 3;\n\n\t\tfor (int i = 0; i < hits.length(); i++)\n\t\t{\n\t\t\tString text = hits.doc(i).get(FIELD_NAME);\n\t\t\tTokenStream tokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(text));\n\n\t\t\tString highlightedText = highlighter.getBestFragments(tokenStream,text,maxNumFragmentsRequired,\"...\");\n\t\t\tSystem.out.println(highlightedText);\n\t\t}\n\t\t//We expect to have zero highlights if the query is multi-terms and is not rewritten!\n\t\tassertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\", numHighlights == 0);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"296b8b38a87feb478921f77834a2302dfe77641c","date":1209506838,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","sourceNew":"  public void testUnRewrittenQuery() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        numHighlights = 0;\n        // test to show how rewritten query can still be used\n        searcher = new IndexSearcher(ramDir);\n        Analyzer analyzer = new StandardAnalyzer();\n\n        QueryParser parser = new QueryParser(FIELD_NAME, analyzer);\n        Query query = parser.parse(\"JF? or Kenned*\");\n        System.out.println(\"Searching with primitive query\");\n        // forget to set this and...\n        // query=query.rewrite(reader);\n        Hits hits = searcher.search(query);\n\n        // create an instance of the highlighter with the tags used to surround\n        // highlighted text\n        // QueryHighlightExtractor highlighter = new\n        // QueryHighlightExtractor(this,\n        // query, new StandardAnalyzer());\n\n        int maxNumFragmentsRequired = 3;\n\n        for (int i = 0; i < hits.length(); i++) {\n          String text = hits.doc(i).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream,\n              HighlighterTest.this);\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n          String highlightedText = highlighter.getBestFragments(tokenStream, text,\n              maxNumFragmentsRequired, \"...\");\n          System.out.println(highlightedText);\n        }\n        // We expect to have zero highlights if the query is multi-terms and is\n        // not\n        // rewritten!\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 0);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"\tpublic void testUnRewrittenQuery() throws IOException, ParseException\n\t{\n\t\t//test to show how rewritten query can still be used\n\t\tsearcher = new IndexSearcher(ramDir);\n\t\tAnalyzer analyzer=new StandardAnalyzer();\n\n\t\tQueryParser parser=new QueryParser(FIELD_NAME,analyzer);\t\n\t\tQuery query = parser.parse(\"JF? or Kenned*\");\n\t\tSystem.out.println(\"Searching with primitive query\");\n\t\t//forget to set this and...\n\t\t//query=query.rewrite(reader);\n\t\tHits hits = searcher.search(query);\n\n\t\t//create an instance of the highlighter with the tags used to surround highlighted text\n//\t\tQueryHighlightExtractor highlighter = new QueryHighlightExtractor(this, query, new StandardAnalyzer());\n\t\tHighlighter highlighter =\n\t\t\tnew Highlighter(this,new QueryScorer(query));\n\n\t\thighlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n\t\tint maxNumFragmentsRequired = 3;\n\n\t\tfor (int i = 0; i < hits.length(); i++)\n\t\t{\n\t\t\tString text = hits.doc(i).get(FIELD_NAME);\n\t\t\tTokenStream tokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(text));\n\n\t\t\tString highlightedText = highlighter.getBestFragments(tokenStream,text,maxNumFragmentsRequired,\"...\");\n\t\t\tSystem.out.println(highlightedText);\n\t\t}\n\t\t//We expect to have zero highlights if the query is multi-terms and is not rewritten!\n\t\tassertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\", numHighlights == 0);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4471b2ef75c0e11869f60b23cabe292b895c3ee","date":1248991247,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","sourceNew":"  public void testUnRewrittenQuery() throws Exception {\n    final TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        numHighlights = 0;\n        SpanScorer.setHighlightCnstScrRngQuery(false);\n        // test to show how rewritten query can still be used\n        searcher = new IndexSearcher(ramDir);\n        Analyzer analyzer = new StandardAnalyzer();\n\n        QueryParser parser = new QueryParser(FIELD_NAME, analyzer);\n        Query query = parser.parse(\"JF? or Kenned*\");\n        System.out.println(\"Searching with primitive query\");\n        // forget to set this and...\n        // query=query.rewrite(reader);\n        Hits hits = searcher.search(query);\n\n        // create an instance of the highlighter with the tags used to surround\n        // highlighted text\n        // QueryHighlightExtractor highlighter = new\n        // QueryHighlightExtractor(this,\n        // query, new StandardAnalyzer());\n\n        int maxNumFragmentsRequired = 3;\n\n        for (int i = 0; i < hits.length(); i++) {\n          String text = hits.doc(i).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream,\n              HighlighterTest.this);\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n          String highlightedText = highlighter.getBestFragments(tokenStream, text,\n              maxNumFragmentsRequired, \"...\");\n          System.out.println(highlightedText);\n        }\n        // We expect to have zero highlights if the query is multi-terms and is\n        // not\n        // rewritten!\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 0);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testUnRewrittenQuery() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        numHighlights = 0;\n        // test to show how rewritten query can still be used\n        searcher = new IndexSearcher(ramDir);\n        Analyzer analyzer = new StandardAnalyzer();\n\n        QueryParser parser = new QueryParser(FIELD_NAME, analyzer);\n        Query query = parser.parse(\"JF? or Kenned*\");\n        System.out.println(\"Searching with primitive query\");\n        // forget to set this and...\n        // query=query.rewrite(reader);\n        Hits hits = searcher.search(query);\n\n        // create an instance of the highlighter with the tags used to surround\n        // highlighted text\n        // QueryHighlightExtractor highlighter = new\n        // QueryHighlightExtractor(this,\n        // query, new StandardAnalyzer());\n\n        int maxNumFragmentsRequired = 3;\n\n        for (int i = 0; i < hits.length(); i++) {\n          String text = hits.doc(i).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream,\n              HighlighterTest.this);\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n          String highlightedText = highlighter.getBestFragments(tokenStream, text,\n              maxNumFragmentsRequired, \"...\");\n          System.out.println(highlightedText);\n        }\n        // We expect to have zero highlights if the query is multi-terms and is\n        // not\n        // rewritten!\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 0);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"943c3f9cf96b8df37f4273d66a66182e2a669467","date":1249394171,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","sourceNew":"  public void testUnRewrittenQuery() throws Exception {\n    final TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        numHighlights = 0;\n        // test to show how rewritten query can still be used\n        searcher = new IndexSearcher(ramDir);\n        Analyzer analyzer = new StandardAnalyzer();\n\n        QueryParser parser = new QueryParser(FIELD_NAME, analyzer);\n        Query query = parser.parse(\"JF? or Kenned*\");\n        System.out.println(\"Searching with primitive query\");\n        // forget to set this and...\n        // query=query.rewrite(reader);\n        Hits hits = searcher.search(query);\n\n        // create an instance of the highlighter with the tags used to surround\n        // highlighted text\n        // QueryHighlightExtractor highlighter = new\n        // QueryHighlightExtractor(this,\n        // query, new StandardAnalyzer());\n\n        int maxNumFragmentsRequired = 3;\n\n        for (int i = 0; i < hits.length(); i++) {\n          String text = hits.doc(i).get(FIELD_NAME);\n          TokenStream tokenStream = new CachingTokenFilter(analyzer.tokenStream(FIELD_NAME, new StringReader(text)));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream, HighlighterTest.this, false);\n\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n          String highlightedText = highlighter.getBestFragments(tokenStream, text,\n              maxNumFragmentsRequired, \"...\");\n\n          System.out.println(highlightedText);\n        }\n        // We expect to have zero highlights if the query is multi-terms and is\n        // not\n        // rewritten!\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 0);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testUnRewrittenQuery() throws Exception {\n    final TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        numHighlights = 0;\n        SpanScorer.setHighlightCnstScrRngQuery(false);\n        // test to show how rewritten query can still be used\n        searcher = new IndexSearcher(ramDir);\n        Analyzer analyzer = new StandardAnalyzer();\n\n        QueryParser parser = new QueryParser(FIELD_NAME, analyzer);\n        Query query = parser.parse(\"JF? or Kenned*\");\n        System.out.println(\"Searching with primitive query\");\n        // forget to set this and...\n        // query=query.rewrite(reader);\n        Hits hits = searcher.search(query);\n\n        // create an instance of the highlighter with the tags used to surround\n        // highlighted text\n        // QueryHighlightExtractor highlighter = new\n        // QueryHighlightExtractor(this,\n        // query, new StandardAnalyzer());\n\n        int maxNumFragmentsRequired = 3;\n\n        for (int i = 0; i < hits.length(); i++) {\n          String text = hits.doc(i).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream,\n              HighlighterTest.this);\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n          String highlightedText = highlighter.getBestFragments(tokenStream, text,\n              maxNumFragmentsRequired, \"...\");\n          System.out.println(highlightedText);\n        }\n        // We expect to have zero highlights if the query is multi-terms and is\n        // not\n        // rewritten!\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 0);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c16ba100a31d292b7b4c893a3cdf1994e75a3201","date":1249608645,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","sourceNew":"  public void testUnRewrittenQuery() throws Exception {\n    final TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        numHighlights = 0;\n        // test to show how rewritten query can still be used\n        searcher = new IndexSearcher(ramDir);\n        Analyzer analyzer = new StandardAnalyzer();\n\n        QueryParser parser = new QueryParser(FIELD_NAME, analyzer);\n        Query query = parser.parse(\"JF? or Kenned*\");\n        System.out.println(\"Searching with primitive query\");\n        // forget to set this and...\n        // query=query.rewrite(reader);\n        Hits hits = searcher.search(query);\n\n        // create an instance of the highlighter with the tags used to surround\n        // highlighted text\n        // QueryHighlightExtractor highlighter = new\n        // QueryHighlightExtractor(this,\n        // query, new StandardAnalyzer());\n\n        int maxNumFragmentsRequired = 3;\n\n        for (int i = 0; i < hits.length(); i++) {\n          String text = hits.doc(i).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream, HighlighterTest.this, false);\n\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n          String highlightedText = highlighter.getBestFragments(tokenStream, text,\n              maxNumFragmentsRequired, \"...\");\n\n          System.out.println(highlightedText);\n        }\n        // We expect to have zero highlights if the query is multi-terms and is\n        // not\n        // rewritten!\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 0);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testUnRewrittenQuery() throws Exception {\n    final TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        numHighlights = 0;\n        // test to show how rewritten query can still be used\n        searcher = new IndexSearcher(ramDir);\n        Analyzer analyzer = new StandardAnalyzer();\n\n        QueryParser parser = new QueryParser(FIELD_NAME, analyzer);\n        Query query = parser.parse(\"JF? or Kenned*\");\n        System.out.println(\"Searching with primitive query\");\n        // forget to set this and...\n        // query=query.rewrite(reader);\n        Hits hits = searcher.search(query);\n\n        // create an instance of the highlighter with the tags used to surround\n        // highlighted text\n        // QueryHighlightExtractor highlighter = new\n        // QueryHighlightExtractor(this,\n        // query, new StandardAnalyzer());\n\n        int maxNumFragmentsRequired = 3;\n\n        for (int i = 0; i < hits.length(); i++) {\n          String text = hits.doc(i).get(FIELD_NAME);\n          TokenStream tokenStream = new CachingTokenFilter(analyzer.tokenStream(FIELD_NAME, new StringReader(text)));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream, HighlighterTest.this, false);\n\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n          String highlightedText = highlighter.getBestFragments(tokenStream, text,\n              maxNumFragmentsRequired, \"...\");\n\n          System.out.println(highlightedText);\n        }\n        // We expect to have zero highlights if the query is multi-terms and is\n        // not\n        // rewritten!\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 0);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4256bc1b3c94786287ccdfc751230374521843cf","date":1254612273,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","sourceNew":"  public void testUnRewrittenQuery() throws Exception {\n    final TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        numHighlights = 0;\n        // test to show how rewritten query can still be used\n        searcher = new IndexSearcher(ramDir, true);\n        Analyzer analyzer = new StandardAnalyzer();\n\n        QueryParser parser = new QueryParser(FIELD_NAME, analyzer);\n        Query query = parser.parse(\"JF? or Kenned*\");\n        System.out.println(\"Searching with primitive query\");\n        // forget to set this and...\n        // query=query.rewrite(reader);\n        Hits hits = searcher.search(query);\n\n        // create an instance of the highlighter with the tags used to surround\n        // highlighted text\n        // QueryHighlightExtractor highlighter = new\n        // QueryHighlightExtractor(this,\n        // query, new StandardAnalyzer());\n\n        int maxNumFragmentsRequired = 3;\n\n        for (int i = 0; i < hits.length(); i++) {\n          String text = hits.doc(i).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream, HighlighterTest.this, false);\n\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n          String highlightedText = highlighter.getBestFragments(tokenStream, text,\n              maxNumFragmentsRequired, \"...\");\n\n          System.out.println(highlightedText);\n        }\n        // We expect to have zero highlights if the query is multi-terms and is\n        // not\n        // rewritten!\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 0);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testUnRewrittenQuery() throws Exception {\n    final TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        numHighlights = 0;\n        // test to show how rewritten query can still be used\n        searcher = new IndexSearcher(ramDir);\n        Analyzer analyzer = new StandardAnalyzer();\n\n        QueryParser parser = new QueryParser(FIELD_NAME, analyzer);\n        Query query = parser.parse(\"JF? or Kenned*\");\n        System.out.println(\"Searching with primitive query\");\n        // forget to set this and...\n        // query=query.rewrite(reader);\n        Hits hits = searcher.search(query);\n\n        // create an instance of the highlighter with the tags used to surround\n        // highlighted text\n        // QueryHighlightExtractor highlighter = new\n        // QueryHighlightExtractor(this,\n        // query, new StandardAnalyzer());\n\n        int maxNumFragmentsRequired = 3;\n\n        for (int i = 0; i < hits.length(); i++) {\n          String text = hits.doc(i).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream, HighlighterTest.this, false);\n\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n          String highlightedText = highlighter.getBestFragments(tokenStream, text,\n              maxNumFragmentsRequired, \"...\");\n\n          System.out.println(highlightedText);\n        }\n        // We expect to have zero highlights if the query is multi-terms and is\n        // not\n        // rewritten!\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 0);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f148c02ddd6ba981c65ca685d0e56c3a98368e1","date":1254892102,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","sourceNew":"  public void testUnRewrittenQuery() throws Exception {\n    final TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        numHighlights = 0;\n        // test to show how rewritten query can still be used\n        searcher = new IndexSearcher(ramDir, true);\n        Analyzer analyzer = new StandardAnalyzer();\n\n        QueryParser parser = new QueryParser(FIELD_NAME, analyzer);\n        Query query = parser.parse(\"JF? or Kenned*\");\n        System.out.println(\"Searching with primitive query\");\n        // forget to set this and...\n        // query=query.rewrite(reader);\n        TopDocs hits = searcher.search(query, null, 1000);\n\n        // create an instance of the highlighter with the tags used to surround\n        // highlighted text\n        // QueryHighlightExtractor highlighter = new\n        // QueryHighlightExtractor(this,\n        // query, new StandardAnalyzer());\n\n        int maxNumFragmentsRequired = 3;\n\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream, HighlighterTest.this, false);\n\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n          String highlightedText = highlighter.getBestFragments(tokenStream, text,\n              maxNumFragmentsRequired, \"...\");\n\n          System.out.println(highlightedText);\n        }\n        // We expect to have zero highlights if the query is multi-terms and is\n        // not\n        // rewritten!\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 0);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testUnRewrittenQuery() throws Exception {\n    final TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        numHighlights = 0;\n        // test to show how rewritten query can still be used\n        searcher = new IndexSearcher(ramDir, true);\n        Analyzer analyzer = new StandardAnalyzer();\n\n        QueryParser parser = new QueryParser(FIELD_NAME, analyzer);\n        Query query = parser.parse(\"JF? or Kenned*\");\n        System.out.println(\"Searching with primitive query\");\n        // forget to set this and...\n        // query=query.rewrite(reader);\n        Hits hits = searcher.search(query);\n\n        // create an instance of the highlighter with the tags used to surround\n        // highlighted text\n        // QueryHighlightExtractor highlighter = new\n        // QueryHighlightExtractor(this,\n        // query, new StandardAnalyzer());\n\n        int maxNumFragmentsRequired = 3;\n\n        for (int i = 0; i < hits.length(); i++) {\n          String text = hits.doc(i).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream, HighlighterTest.this, false);\n\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n          String highlightedText = highlighter.getBestFragments(tokenStream, text,\n              maxNumFragmentsRequired, \"...\");\n\n          System.out.println(highlightedText);\n        }\n        // We expect to have zero highlights if the query is multi-terms and is\n        // not\n        // rewritten!\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 0);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","sourceNew":"  public void testUnRewrittenQuery() throws Exception {\n    final TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        numHighlights = 0;\n        // test to show how rewritten query can still be used\n        searcher = new IndexSearcher(ramDir, true);\n        Analyzer analyzer = new StandardAnalyzer(TEST_VERSION);\n\n        QueryParser parser = new QueryParser(FIELD_NAME, analyzer);\n        Query query = parser.parse(\"JF? or Kenned*\");\n        System.out.println(\"Searching with primitive query\");\n        // forget to set this and...\n        // query=query.rewrite(reader);\n        TopDocs hits = searcher.search(query, null, 1000);\n\n        // create an instance of the highlighter with the tags used to surround\n        // highlighted text\n        // QueryHighlightExtractor highlighter = new\n        // QueryHighlightExtractor(this,\n        // query, new StandardAnalyzer(TEST_VERSION));\n\n        int maxNumFragmentsRequired = 3;\n\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream, HighlighterTest.this, false);\n\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n          String highlightedText = highlighter.getBestFragments(tokenStream, text,\n              maxNumFragmentsRequired, \"...\");\n\n          System.out.println(highlightedText);\n        }\n        // We expect to have zero highlights if the query is multi-terms and is\n        // not\n        // rewritten!\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 0);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testUnRewrittenQuery() throws Exception {\n    final TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        numHighlights = 0;\n        // test to show how rewritten query can still be used\n        searcher = new IndexSearcher(ramDir, true);\n        Analyzer analyzer = new StandardAnalyzer();\n\n        QueryParser parser = new QueryParser(FIELD_NAME, analyzer);\n        Query query = parser.parse(\"JF? or Kenned*\");\n        System.out.println(\"Searching with primitive query\");\n        // forget to set this and...\n        // query=query.rewrite(reader);\n        TopDocs hits = searcher.search(query, null, 1000);\n\n        // create an instance of the highlighter with the tags used to surround\n        // highlighted text\n        // QueryHighlightExtractor highlighter = new\n        // QueryHighlightExtractor(this,\n        // query, new StandardAnalyzer());\n\n        int maxNumFragmentsRequired = 3;\n\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream, HighlighterTest.this, false);\n\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n          String highlightedText = highlighter.getBestFragments(tokenStream, text,\n              maxNumFragmentsRequired, \"...\");\n\n          System.out.println(highlightedText);\n        }\n        // We expect to have zero highlights if the query is multi-terms and is\n        // not\n        // rewritten!\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 0);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","sourceNew":"  public void testUnRewrittenQuery() throws Exception {\n    final TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        numHighlights = 0;\n        // test to show how rewritten query can still be used\n        searcher = new IndexSearcher(ramDir, true);\n        Analyzer analyzer = new StandardAnalyzer(TEST_VERSION);\n\n        QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, FIELD_NAME, analyzer);\n        Query query = parser.parse(\"JF? or Kenned*\");\n        System.out.println(\"Searching with primitive query\");\n        // forget to set this and...\n        // query=query.rewrite(reader);\n        TopDocs hits = searcher.search(query, null, 1000);\n\n        // create an instance of the highlighter with the tags used to surround\n        // highlighted text\n        // QueryHighlightExtractor highlighter = new\n        // QueryHighlightExtractor(this,\n        // query, new StandardAnalyzer(TEST_VERSION));\n\n        int maxNumFragmentsRequired = 3;\n\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream, HighlighterTest.this, false);\n\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n          String highlightedText = highlighter.getBestFragments(tokenStream, text,\n              maxNumFragmentsRequired, \"...\");\n\n          System.out.println(highlightedText);\n        }\n        // We expect to have zero highlights if the query is multi-terms and is\n        // not\n        // rewritten!\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 0);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testUnRewrittenQuery() throws Exception {\n    final TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        numHighlights = 0;\n        // test to show how rewritten query can still be used\n        searcher = new IndexSearcher(ramDir, true);\n        Analyzer analyzer = new StandardAnalyzer(TEST_VERSION);\n\n        QueryParser parser = new QueryParser(FIELD_NAME, analyzer);\n        Query query = parser.parse(\"JF? or Kenned*\");\n        System.out.println(\"Searching with primitive query\");\n        // forget to set this and...\n        // query=query.rewrite(reader);\n        TopDocs hits = searcher.search(query, null, 1000);\n\n        // create an instance of the highlighter with the tags used to surround\n        // highlighted text\n        // QueryHighlightExtractor highlighter = new\n        // QueryHighlightExtractor(this,\n        // query, new StandardAnalyzer(TEST_VERSION));\n\n        int maxNumFragmentsRequired = 3;\n\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream, HighlighterTest.this, false);\n\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n          String highlightedText = highlighter.getBestFragments(tokenStream, text,\n              maxNumFragmentsRequired, \"...\");\n\n          System.out.println(highlightedText);\n        }\n        // We expect to have zero highlights if the query is multi-terms and is\n        // not\n        // rewritten!\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 0);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"464a71190fd7694704427cd763d7c957c10e935b","date":1256329736,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","sourceNew":"  public void testUnRewrittenQuery() throws Exception {\n    final TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        numHighlights = 0;\n        // test to show how rewritten query can still be used\n        searcher = new IndexSearcher(ramDir, true);\n        Analyzer analyzer = new StandardAnalyzer(TEST_VERSION);\n\n        QueryParser parser = new QueryParser(TEST_VERSION, FIELD_NAME, analyzer);\n        Query query = parser.parse(\"JF? or Kenned*\");\n        System.out.println(\"Searching with primitive query\");\n        // forget to set this and...\n        // query=query.rewrite(reader);\n        TopDocs hits = searcher.search(query, null, 1000);\n\n        // create an instance of the highlighter with the tags used to surround\n        // highlighted text\n        // QueryHighlightExtractor highlighter = new\n        // QueryHighlightExtractor(this,\n        // query, new StandardAnalyzer(TEST_VERSION));\n\n        int maxNumFragmentsRequired = 3;\n\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream, HighlighterTest.this, false);\n\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n          String highlightedText = highlighter.getBestFragments(tokenStream, text,\n              maxNumFragmentsRequired, \"...\");\n\n          System.out.println(highlightedText);\n        }\n        // We expect to have zero highlights if the query is multi-terms and is\n        // not\n        // rewritten!\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 0);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testUnRewrittenQuery() throws Exception {\n    final TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        numHighlights = 0;\n        // test to show how rewritten query can still be used\n        searcher = new IndexSearcher(ramDir, true);\n        Analyzer analyzer = new StandardAnalyzer(TEST_VERSION);\n\n        QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, FIELD_NAME, analyzer);\n        Query query = parser.parse(\"JF? or Kenned*\");\n        System.out.println(\"Searching with primitive query\");\n        // forget to set this and...\n        // query=query.rewrite(reader);\n        TopDocs hits = searcher.search(query, null, 1000);\n\n        // create an instance of the highlighter with the tags used to surround\n        // highlighted text\n        // QueryHighlightExtractor highlighter = new\n        // QueryHighlightExtractor(this,\n        // query, new StandardAnalyzer(TEST_VERSION));\n\n        int maxNumFragmentsRequired = 3;\n\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream, HighlighterTest.this, false);\n\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n          String highlightedText = highlighter.getBestFragments(tokenStream, text,\n              maxNumFragmentsRequired, \"...\");\n\n          System.out.println(highlightedText);\n        }\n        // We expect to have zero highlights if the query is multi-terms and is\n        // not\n        // rewritten!\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 0);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","sourceNew":"  public void testUnRewrittenQuery() throws Exception {\n    final TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        // test to show how rewritten query can still be used\n        searcher = new IndexSearcher(ramDir, true);\n        Analyzer analyzer = new StandardAnalyzer(TEST_VERSION);\n\n        QueryParser parser = new QueryParser(TEST_VERSION, FIELD_NAME, analyzer);\n        Query query = parser.parse(\"JF? or Kenned*\");\n        System.out.println(\"Searching with primitive query\");\n        // forget to set this and...\n        // query=query.rewrite(reader);\n        TopDocs hits = searcher.search(query, null, 1000);\n\n        // create an instance of the highlighter with the tags used to surround\n        // highlighted text\n        // QueryHighlightExtractor highlighter = new\n        // QueryHighlightExtractor(this,\n        // query, new StandardAnalyzer(TEST_VERSION));\n\n        int maxNumFragmentsRequired = 3;\n\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream, HighlighterTest.this, false);\n\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n          String highlightedText = highlighter.getBestFragments(tokenStream, text,\n              maxNumFragmentsRequired, \"...\");\n\n          System.out.println(highlightedText);\n        }\n        // We expect to have zero highlights if the query is multi-terms and is\n        // not\n        // rewritten!\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 0);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testUnRewrittenQuery() throws Exception {\n    final TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        numHighlights = 0;\n        // test to show how rewritten query can still be used\n        searcher = new IndexSearcher(ramDir, true);\n        Analyzer analyzer = new StandardAnalyzer(TEST_VERSION);\n\n        QueryParser parser = new QueryParser(TEST_VERSION, FIELD_NAME, analyzer);\n        Query query = parser.parse(\"JF? or Kenned*\");\n        System.out.println(\"Searching with primitive query\");\n        // forget to set this and...\n        // query=query.rewrite(reader);\n        TopDocs hits = searcher.search(query, null, 1000);\n\n        // create an instance of the highlighter with the tags used to surround\n        // highlighted text\n        // QueryHighlightExtractor highlighter = new\n        // QueryHighlightExtractor(this,\n        // query, new StandardAnalyzer(TEST_VERSION));\n\n        int maxNumFragmentsRequired = 3;\n\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream, HighlighterTest.this, false);\n\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n          String highlightedText = highlighter.getBestFragments(tokenStream, text,\n              maxNumFragmentsRequired, \"...\");\n\n          System.out.println(highlightedText);\n        }\n        // We expect to have zero highlights if the query is multi-terms and is\n        // not\n        // rewritten!\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 0);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","sourceNew":"  public void testUnRewrittenQuery() throws Exception {\n    final TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        // test to show how rewritten query can still be used\n        searcher = new IndexSearcher(ramDir, true);\n        Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, analyzer);\n        Query query = parser.parse(\"JF? or Kenned*\");\n        System.out.println(\"Searching with primitive query\");\n        // forget to set this and...\n        // query=query.rewrite(reader);\n        TopDocs hits = searcher.search(query, null, 1000);\n\n        // create an instance of the highlighter with the tags used to surround\n        // highlighted text\n        // QueryHighlightExtractor highlighter = new\n        // QueryHighlightExtractor(this,\n        // query, new StandardAnalyzer(TEST_VERSION));\n\n        int maxNumFragmentsRequired = 3;\n\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream, HighlighterTest.this, false);\n\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n          String highlightedText = highlighter.getBestFragments(tokenStream, text,\n              maxNumFragmentsRequired, \"...\");\n\n          System.out.println(highlightedText);\n        }\n        // We expect to have zero highlights if the query is multi-terms and is\n        // not\n        // rewritten!\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 0);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testUnRewrittenQuery() throws Exception {\n    final TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        // test to show how rewritten query can still be used\n        searcher = new IndexSearcher(ramDir, true);\n        Analyzer analyzer = new StandardAnalyzer(TEST_VERSION);\n\n        QueryParser parser = new QueryParser(TEST_VERSION, FIELD_NAME, analyzer);\n        Query query = parser.parse(\"JF? or Kenned*\");\n        System.out.println(\"Searching with primitive query\");\n        // forget to set this and...\n        // query=query.rewrite(reader);\n        TopDocs hits = searcher.search(query, null, 1000);\n\n        // create an instance of the highlighter with the tags used to surround\n        // highlighted text\n        // QueryHighlightExtractor highlighter = new\n        // QueryHighlightExtractor(this,\n        // query, new StandardAnalyzer(TEST_VERSION));\n\n        int maxNumFragmentsRequired = 3;\n\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream, HighlighterTest.this, false);\n\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n          String highlightedText = highlighter.getBestFragments(tokenStream, text,\n              maxNumFragmentsRequired, \"...\");\n\n          System.out.println(highlightedText);\n        }\n        // We expect to have zero highlights if the query is multi-terms and is\n        // not\n        // rewritten!\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 0);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","sourceNew":"  public void testUnRewrittenQuery() throws Exception {\n    final TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        // test to show how rewritten query can still be used\n        searcher = new IndexSearcher(ramDir, true);\n        Analyzer analyzer = new StandardAnalyzer(TEST_VERSION);\n\n        QueryParser parser = new QueryParser(TEST_VERSION, FIELD_NAME, analyzer);\n        Query query = parser.parse(\"JF? or Kenned*\");\n        System.out.println(\"Searching with primitive query\");\n        // forget to set this and...\n        // query=query.rewrite(reader);\n        TopDocs hits = searcher.search(query, null, 1000);\n\n        // create an instance of the highlighter with the tags used to surround\n        // highlighted text\n        // QueryHighlightExtractor highlighter = new\n        // QueryHighlightExtractor(this,\n        // query, new StandardAnalyzer(TEST_VERSION));\n\n        int maxNumFragmentsRequired = 3;\n\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream, HighlighterTest.this, false);\n\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n          String highlightedText = highlighter.getBestFragments(tokenStream, text,\n              maxNumFragmentsRequired, \"...\");\n\n          System.out.println(highlightedText);\n        }\n        // We expect to have zero highlights if the query is multi-terms and is\n        // not\n        // rewritten!\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 0);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testUnRewrittenQuery() throws Exception {\n    final TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        // test to show how rewritten query can still be used\n        searcher = new IndexSearcher(ramDir, true);\n        Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, analyzer);\n        Query query = parser.parse(\"JF? or Kenned*\");\n        System.out.println(\"Searching with primitive query\");\n        // forget to set this and...\n        // query=query.rewrite(reader);\n        TopDocs hits = searcher.search(query, null, 1000);\n\n        // create an instance of the highlighter with the tags used to surround\n        // highlighted text\n        // QueryHighlightExtractor highlighter = new\n        // QueryHighlightExtractor(this,\n        // query, new StandardAnalyzer(TEST_VERSION));\n\n        int maxNumFragmentsRequired = 3;\n\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream, HighlighterTest.this, false);\n\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n          String highlightedText = highlighter.getBestFragments(tokenStream, text,\n              maxNumFragmentsRequired, \"...\");\n\n          System.out.println(highlightedText);\n        }\n        // We expect to have zero highlights if the query is multi-terms and is\n        // not\n        // rewritten!\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 0);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","sourceNew":"  public void testUnRewrittenQuery() throws Exception {\n    final TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        // test to show how rewritten query can still be used\n        searcher = new IndexSearcher(ramDir, true);\n        Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, analyzer);\n        Query query = parser.parse(\"JF? or Kenned*\");\n        System.out.println(\"Searching with primitive query\");\n        // forget to set this and...\n        // query=query.rewrite(reader);\n        TopDocs hits = searcher.search(query, null, 1000);\n\n        // create an instance of the highlighter with the tags used to surround\n        // highlighted text\n        // QueryHighlightExtractor highlighter = new\n        // QueryHighlightExtractor(this,\n        // query, new StandardAnalyzer(TEST_VERSION));\n\n        int maxNumFragmentsRequired = 3;\n\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream, HighlighterTest.this, false);\n\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n          String highlightedText = highlighter.getBestFragments(tokenStream, text,\n              maxNumFragmentsRequired, \"...\");\n\n          System.out.println(highlightedText);\n        }\n        // We expect to have zero highlights if the query is multi-terms and is\n        // not\n        // rewritten!\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 0);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testUnRewrittenQuery() throws Exception {\n    final TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        // test to show how rewritten query can still be used\n        searcher = new IndexSearcher(ramDir, true);\n        Analyzer analyzer = new StandardAnalyzer(TEST_VERSION);\n\n        QueryParser parser = new QueryParser(TEST_VERSION, FIELD_NAME, analyzer);\n        Query query = parser.parse(\"JF? or Kenned*\");\n        System.out.println(\"Searching with primitive query\");\n        // forget to set this and...\n        // query=query.rewrite(reader);\n        TopDocs hits = searcher.search(query, null, 1000);\n\n        // create an instance of the highlighter with the tags used to surround\n        // highlighted text\n        // QueryHighlightExtractor highlighter = new\n        // QueryHighlightExtractor(this,\n        // query, new StandardAnalyzer(TEST_VERSION));\n\n        int maxNumFragmentsRequired = 3;\n\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream, HighlighterTest.this, false);\n\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n          String highlightedText = highlighter.getBestFragments(tokenStream, text,\n              maxNumFragmentsRequired, \"...\");\n\n          System.out.println(highlightedText);\n        }\n        // We expect to have zero highlights if the query is multi-terms and is\n        // not\n        // rewritten!\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 0);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42607aa380c892dc1ec0ab26e86a575c28e13618","date":1268641604,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","sourceNew":"  public void testUnRewrittenQuery() throws Exception {\n    final TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        // test to show how rewritten query can still be used\n        searcher = new IndexSearcher(ramDir, true);\n        Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, analyzer);\n        Query query = parser.parse(\"JF? or Kenned*\");\n        if (VERBOSE) System.out.println(\"Searching with primitive query\");\n        // forget to set this and...\n        // query=query.rewrite(reader);\n        TopDocs hits = searcher.search(query, null, 1000);\n\n        // create an instance of the highlighter with the tags used to surround\n        // highlighted text\n        // QueryHighlightExtractor highlighter = new\n        // QueryHighlightExtractor(this,\n        // query, new StandardAnalyzer(TEST_VERSION));\n\n        int maxNumFragmentsRequired = 3;\n\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream, HighlighterTest.this, false);\n\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n          String highlightedText = highlighter.getBestFragments(tokenStream, text,\n              maxNumFragmentsRequired, \"...\");\n\n          if (VERBOSE) System.out.println(highlightedText);\n        }\n        // We expect to have zero highlights if the query is multi-terms and is\n        // not\n        // rewritten!\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 0);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testUnRewrittenQuery() throws Exception {\n    final TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        // test to show how rewritten query can still be used\n        searcher = new IndexSearcher(ramDir, true);\n        Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, analyzer);\n        Query query = parser.parse(\"JF? or Kenned*\");\n        System.out.println(\"Searching with primitive query\");\n        // forget to set this and...\n        // query=query.rewrite(reader);\n        TopDocs hits = searcher.search(query, null, 1000);\n\n        // create an instance of the highlighter with the tags used to surround\n        // highlighted text\n        // QueryHighlightExtractor highlighter = new\n        // QueryHighlightExtractor(this,\n        // query, new StandardAnalyzer(TEST_VERSION));\n\n        int maxNumFragmentsRequired = 3;\n\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream, HighlighterTest.this, false);\n\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n          String highlightedText = highlighter.getBestFragments(tokenStream, text,\n              maxNumFragmentsRequired, \"...\");\n\n          System.out.println(highlightedText);\n        }\n        // We expect to have zero highlights if the query is multi-terms and is\n        // not\n        // rewritten!\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 0);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","sourceNew":"  public void testUnRewrittenQuery() throws Exception {\n    final TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        // test to show how rewritten query can still be used\n        searcher = new IndexSearcher(ramDir, true);\n        Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, analyzer);\n        Query query = parser.parse(\"JF? or Kenned*\");\n        if (VERBOSE) System.out.println(\"Searching with primitive query\");\n        // forget to set this and...\n        // query=query.rewrite(reader);\n        TopDocs hits = searcher.search(query, null, 1000);\n\n        // create an instance of the highlighter with the tags used to surround\n        // highlighted text\n        // QueryHighlightExtractor highlighter = new\n        // QueryHighlightExtractor(this,\n        // query, new StandardAnalyzer(TEST_VERSION));\n\n        int maxNumFragmentsRequired = 3;\n\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream, HighlighterTest.this, false);\n\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n          String highlightedText = highlighter.getBestFragments(tokenStream, text,\n              maxNumFragmentsRequired, \"...\");\n\n          if (VERBOSE) System.out.println(highlightedText);\n        }\n        // We expect to have zero highlights if the query is multi-terms and is\n        // not\n        // rewritten!\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 0);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testUnRewrittenQuery() throws Exception {\n    final TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        // test to show how rewritten query can still be used\n        searcher = new IndexSearcher(ramDir, true);\n        Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, analyzer);\n        Query query = parser.parse(\"JF? or Kenned*\");\n        if (VERBOSE) System.out.println(\"Searching with primitive query\");\n        // forget to set this and...\n        // query=query.rewrite(reader);\n        TopDocs hits = searcher.search(query, null, 1000);\n\n        // create an instance of the highlighter with the tags used to surround\n        // highlighted text\n        // QueryHighlightExtractor highlighter = new\n        // QueryHighlightExtractor(this,\n        // query, new StandardAnalyzer(TEST_VERSION));\n\n        int maxNumFragmentsRequired = 3;\n\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream, HighlighterTest.this, false);\n\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n          String highlightedText = highlighter.getBestFragments(tokenStream, text,\n              maxNumFragmentsRequired, \"...\");\n\n          if (VERBOSE) System.out.println(highlightedText);\n        }\n        // We expect to have zero highlights if the query is multi-terms and is\n        // not\n        // rewritten!\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 0);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"00baa0cad99f9a7efd382b1e817c2f6b9384220a":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"043c298cb215f13ba7b9b81d20760704e8f93d66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c16ba100a31d292b7b4c893a3cdf1994e75a3201":["943c3f9cf96b8df37f4273d66a66182e2a669467"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["464a71190fd7694704427cd763d7c957c10e935b"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"464a71190fd7694704427cd763d7c957c10e935b":["ba1116b3450a9c1642c89445d131b37344055245"],"4256bc1b3c94786287ccdfc751230374521843cf":["c16ba100a31d292b7b4c893a3cdf1994e75a3201"],"943c3f9cf96b8df37f4273d66a66182e2a669467":["b4471b2ef75c0e11869f60b23cabe292b895c3ee"],"ba1116b3450a9c1642c89445d131b37344055245":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"b4471b2ef75c0e11869f60b23cabe292b895c3ee":["296b8b38a87feb478921f77834a2302dfe77641c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["0f148c02ddd6ba981c65ca685d0e56c3a98368e1"],"42607aa380c892dc1ec0ab26e86a575c28e13618":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"0f148c02ddd6ba981c65ca685d0e56c3a98368e1":["4256bc1b3c94786287ccdfc751230374521843cf"],"296b8b38a87feb478921f77834a2302dfe77641c":["00baa0cad99f9a7efd382b1e817c2f6b9384220a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["42607aa380c892dc1ec0ab26e86a575c28e13618"]},"commit2Childs":{"00baa0cad99f9a7efd382b1e817c2f6b9384220a":["296b8b38a87feb478921f77834a2302dfe77641c"],"043c298cb215f13ba7b9b81d20760704e8f93d66":["00baa0cad99f9a7efd382b1e817c2f6b9384220a"],"c16ba100a31d292b7b4c893a3cdf1994e75a3201":["4256bc1b3c94786287ccdfc751230374521843cf"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"464a71190fd7694704427cd763d7c957c10e935b":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"943c3f9cf96b8df37f4273d66a66182e2a669467":["c16ba100a31d292b7b4c893a3cdf1994e75a3201"],"4256bc1b3c94786287ccdfc751230374521843cf":["0f148c02ddd6ba981c65ca685d0e56c3a98368e1"],"ba1116b3450a9c1642c89445d131b37344055245":["464a71190fd7694704427cd763d7c957c10e935b"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["42607aa380c892dc1ec0ab26e86a575c28e13618"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"b4471b2ef75c0e11869f60b23cabe292b895c3ee":["943c3f9cf96b8df37f4273d66a66182e2a669467"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["ba1116b3450a9c1642c89445d131b37344055245"],"0f148c02ddd6ba981c65ca685d0e56c3a98368e1":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"42607aa380c892dc1ec0ab26e86a575c28e13618":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"296b8b38a87feb478921f77834a2302dfe77641c":["b4471b2ef75c0e11869f60b23cabe292b895c3ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}