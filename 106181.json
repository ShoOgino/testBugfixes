{"path":"src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","commits":[{"id":"1ab868ed766616ebbbba2e7645d01945520e0b6c","date":1064526173,"type":0,"author":"Dmitry Serebrennikov","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","pathOld":"/dev/null","sourceNew":"    public void testBasicDelete() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n        //Directory dir = FSDirectory.getDirectory(\"testIndex\", true);\n            \n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n        \n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir);\n        deleted = reader.delete(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d72db039743bd6a2da9be6306f57c71654ca1bf6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2d89e61c011dc9425aed9f3fd43a1c0c50ca7f96","date":1066874526,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","sourceNew":"    public void testBasicDelete() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir);\n        deleted = reader.delete(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n    }\n\n","sourceOld":"    public void testBasicDelete() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n        //Directory dir = FSDirectory.getDirectory(\"testIndex\", true);\n            \n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n        \n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir);\n        deleted = reader.delete(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","sourceNew":"    public void testBasicDelete() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n    }\n\n","sourceOld":"    public void testBasicDelete() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir);\n        deleted = reader.delete(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"284c1d3c8b19931bf6f312fae7470487f5d9e580","date":1163805527,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","sourceNew":"    public void testBasicDelete() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n    }\n\n","sourceOld":"    public void testBasicDelete() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d72db039743bd6a2da9be6306f57c71654ca1bf6","date":1173217255,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","sourceNew":"    public void testBasicDelete() throws IOException\n    {\n        Directory dir = new MockRAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        reader.close();\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n        reader2.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testBasicDelete() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n    }\n\n","bugFix":["1ab868ed766616ebbbba2e7645d01945520e0b6c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","sourceNew":"    public void testBasicDelete() throws IOException\n    {\n        Directory dir = new MockRAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        reader.close();\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n        reader2.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testBasicDelete() throws IOException\n    {\n        Directory dir = new MockRAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        reader.close();\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n        reader2.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","sourceNew":"    public void testBasicDelete() throws IOException\n    {\n        Directory dir = new MockRAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        reader.close();\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir, false);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir, false);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n        reader2.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testBasicDelete() throws IOException\n    {\n        Directory dir = new MockRAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        reader.close();\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n        reader2.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","sourceNew":"    public void testBasicDelete() throws IOException\n    {\n        Directory dir = new MockRAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        reader.close();\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir, false);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir, false);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n        reader2.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testBasicDelete() throws IOException\n    {\n        Directory dir = new MockRAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        reader.close();\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n        reader2.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","sourceNew":"    public void testBasicDelete() throws IOException\n    {\n        Directory dir = new MockRAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        reader.close();\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir, false);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir, false);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n        reader2.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testBasicDelete() throws IOException\n    {\n        Directory dir = new MockRAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        reader.close();\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir, false);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir, false);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n        reader2.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","sourceNew":"    public void testBasicDelete() throws IOException\n    {\n        Directory dir = new MockRAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        reader.close();\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir, false);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir, false);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n        reader2.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testBasicDelete() throws IOException\n    {\n        Directory dir = new MockRAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        reader.close();\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir, false);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir, false);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n        reader2.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","sourceNew":"    public void testBasicDelete() throws IOException {\n        Directory dir = new MockRAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        reader.close();\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir, false);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir, false);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n        reader2.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testBasicDelete() throws IOException\n    {\n        Directory dir = new MockRAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        reader.close();\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir, false);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir, false);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n        reader2.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","sourceNew":"    public void testBasicDelete() throws IOException\n    {\n        Directory dir = new MockRAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        reader.close();\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir, false);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir, false);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n        reader2.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testBasicDelete() throws IOException {\n        Directory dir = new MockRAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        reader.close();\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir, false);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir, false);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n        reader2.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","sourceNew":"    public void testBasicDelete() throws IOException {\n        Directory dir = new MockRAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        reader.close();\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir, false);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir, false);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n        reader2.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testBasicDelete() throws IOException\n    {\n        Directory dir = new MockRAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        reader.close();\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir, false);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir, false);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n        reader2.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","sourceNew":"    public void testBasicDelete() throws IOException {\n        Directory dir = new MockRAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        reader.close();\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir, false);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir, false);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n        reader2.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testBasicDelete() throws IOException {\n        Directory dir = new MockRAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        reader.close();\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir, false);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir, false);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n        reader2.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["0018e7a0579df5d3de71d0bd878322a7abef04d9","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["d72db039743bd6a2da9be6306f57c71654ca1bf6"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["0a046c0c310bc77931fc8441bd920053b607dd14"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["2d89e61c011dc9425aed9f3fd43a1c0c50ca7f96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1ab868ed766616ebbbba2e7645d01945520e0b6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d72db039743bd6a2da9be6306f57c71654ca1bf6":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"2d89e61c011dc9425aed9f3fd43a1c0c50ca7f96":["1ab868ed766616ebbbba2e7645d01945520e0b6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["d72db039743bd6a2da9be6306f57c71654ca1bf6"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1ab868ed766616ebbbba2e7645d01945520e0b6c"],"1ab868ed766616ebbbba2e7645d01945520e0b6c":["2d89e61c011dc9425aed9f3fd43a1c0c50ca7f96"],"d72db039743bd6a2da9be6306f57c71654ca1bf6":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"2d89e61c011dc9425aed9f3fd43a1c0c50ca7f96":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}