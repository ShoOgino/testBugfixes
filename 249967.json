{"path":"solr/core/src/java/org/apache/solr/response/DocsStreamer#getValue(SchemaField,IndexableField).mjava","commits":[{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/DocsStreamer#getValue(SchemaField,IndexableField).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/DocsStreamer#getValue(SchemaField,StorableField).mjava","sourceNew":"  public static Object getValue(SchemaField sf, IndexableField f) {\n    FieldType ft = null;\n    if (sf != null) ft = sf.getType();\n\n    if (ft == null) {  // handle fields not in the schema\n      BytesRef bytesRef = f.binaryValue();\n      if (bytesRef != null) {\n        if (bytesRef.offset == 0 && bytesRef.length == bytesRef.bytes.length) {\n          return bytesRef.bytes;\n        } else {\n          final byte[] bytes = new byte[bytesRef.length];\n          System.arraycopy(bytesRef.bytes, bytesRef.offset, bytes, 0, bytesRef.length);\n          return bytes;\n        }\n      } else return f.stringValue();\n    } else {\n      if (KNOWN_TYPES.contains(ft.getClass())) {\n        return ft.toObject(f);\n      } else {\n        return ft.toExternal(f);\n      }\n    }\n  }\n\n","sourceOld":"  public static Object getValue(SchemaField sf, StorableField f) {\n    FieldType ft = null;\n    if (sf != null) ft = sf.getType();\n\n    if (ft == null) {  // handle fields not in the schema\n      BytesRef bytesRef = f.binaryValue();\n      if (bytesRef != null) {\n        if (bytesRef.offset == 0 && bytesRef.length == bytesRef.bytes.length) {\n          return bytesRef.bytes;\n        } else {\n          final byte[] bytes = new byte[bytesRef.length];\n          System.arraycopy(bytesRef.bytes, bytesRef.offset, bytes, 0, bytesRef.length);\n          return bytes;\n        }\n      } else return f.stringValue();\n    } else {\n      if (KNOWN_TYPES.contains(ft.getClass())) {\n        return ft.toObject(f);\n      } else {\n        return ft.toExternal(f);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}