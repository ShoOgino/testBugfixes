{"path":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/DistanceUtils#latLonCorner(double,double,double,double[],boolean,double).mjava","commits":[{"id":"459be89020f9023e3b60066066a892c7edb5de58","date":1279657074,"type":1,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/DistanceUtils#latLonCorner(double,double,double,double[],boolean,double).mjava","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceUtils#latLonCorner(double,double,double,double[],boolean,double).mjava","sourceNew":"  /**\n   * Uses Haversine to calculate the corner\n   *\n   * @param latCenter  In radians\n   * @param lonCenter  In radians\n   * @param distance   The distance\n   * @param result A preallocated array to hold the results.  If null, a new one is constructed.\n   * @param upperRight If true, give lat/lon for the upper right corner, else lower left\n   * @param radius     The radius to use for the calculation\n   * @return The Lat/Lon in Radians\n\n   */\n  public static double[] latLonCorner(double latCenter, double lonCenter,\n                                      double distance, double [] result, boolean upperRight, double radius) {\n    // Haversine formula\n    double brng = upperRight ? DEG_45 : DEG_225;\n    double lat2 = Math.asin(Math.sin(latCenter) * Math.cos(distance / radius) +\n            Math.cos(latCenter) * Math.sin(distance / radius) * Math.cos(brng));\n    double lon2 = lonCenter + Math.atan2(Math.sin(brng) * Math.sin(distance / radius) * Math.cos(latCenter),\n            Math.cos(distance / radius) - Math.sin(latCenter) * Math.sin(lat2));\n\n    /*lat2 = (lat2*180)/Math.PI;\n    lon2 = (lon2*180)/Math.PI;*/\n    //From Lucene.  Move back to Lucene when synced\n    // normalize long first\n    if (result == null || result.length != 2){\n      result = new double[2];\n    }\n    result[0] = lat2;\n    result[1] = lon2;\n    normLng(result);\n\n    // normalize lat - could flip poles\n    normLat(result);\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Uses Haversine to calculate the corner\n   *\n   * @param latCenter  In radians\n   * @param lonCenter  In radians\n   * @param distance   The distance\n   * @param result A preallocated array to hold the results.  If null, a new one is constructed.\n   * @param upperRight If true, give lat/lon for the upper right corner, else lower left\n   * @param radius     The radius to use for the calculation\n   * @return The Lat/Lon in Radians\n\n   */\n  public static double[] latLonCorner(double latCenter, double lonCenter,\n                                      double distance, double [] result, boolean upperRight, double radius) {\n    // Haversine formula\n    double brng = upperRight ? DEG_45 : DEG_225;\n    double lat2 = Math.asin(Math.sin(latCenter) * Math.cos(distance / radius) +\n            Math.cos(latCenter) * Math.sin(distance / radius) * Math.cos(brng));\n    double lon2 = lonCenter + Math.atan2(Math.sin(brng) * Math.sin(distance / radius) * Math.cos(latCenter),\n            Math.cos(distance / radius) - Math.sin(latCenter) * Math.sin(lat2));\n\n    /*lat2 = (lat2*180)/Math.PI;\n    lon2 = (lon2*180)/Math.PI;*/\n    //From Lucene.  Move back to Lucene when synced\n    // normalize long first\n    if (result == null || result.length != 2){\n      result = new double[2];\n    }\n    result[0] = lat2;\n    result[1] = lon2;\n    normLng(result);\n\n    // normalize lat - could flip poles\n    normLat(result);\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/DistanceUtils#latLonCorner(double,double,double,double[],boolean,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Uses Haversine to calculate the corner\n   *\n   * @param latCenter  In radians\n   * @param lonCenter  In radians\n   * @param distance   The distance\n   * @param result A preallocated array to hold the results.  If null, a new one is constructed.\n   * @param upperRight If true, give lat/lon for the upper right corner, else lower left\n   * @param radius     The radius to use for the calculation\n   * @return The Lat/Lon in Radians\n\n   */\n  public static double[] latLonCorner(double latCenter, double lonCenter,\n                                      double distance, double [] result, boolean upperRight, double radius) {\n    // Haversine formula\n    double brng = upperRight ? DEG_45 : DEG_225;\n    double lat2 = Math.asin(Math.sin(latCenter) * Math.cos(distance / radius) +\n            Math.cos(latCenter) * Math.sin(distance / radius) * Math.cos(brng));\n    double lon2 = lonCenter + Math.atan2(Math.sin(brng) * Math.sin(distance / radius) * Math.cos(latCenter),\n            Math.cos(distance / radius) - Math.sin(latCenter) * Math.sin(lat2));\n\n    /*lat2 = (lat2*180)/Math.PI;\n    lon2 = (lon2*180)/Math.PI;*/\n    //From Lucene.  Move back to Lucene when synced\n    // normalize long first\n    if (result == null || result.length != 2){\n      result = new double[2];\n    }\n    result[0] = lat2;\n    result[1] = lon2;\n    normLng(result);\n\n    // normalize lat - could flip poles\n    normLat(result);\n\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6baa337076125dc01fc8cda597f52f2a9d0edcef","date":1285244980,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/DistanceUtils#latLonCorner(double,double,double,double[],boolean,double).mjava","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/DistanceUtils#latLonCorner(double,double,double,double[],boolean,double).mjava","sourceNew":"  /**\n   * Uses Haversine to calculate the corner of a box (upper right or lower left) that is the <i>distance</i> away, given a sphere of the specified <i>radius</i>.\n   *\n   * NOTE: This is not the same as calculating a box that transcribes a circle of the given distance.\n   *\n   * @param latCenter  In radians\n   * @param lonCenter  In radians\n   * @param distance   The distance\n   * @param result A preallocated array to hold the results.  If null, a new one is constructed.\n   * @param upperRight If true, give lat/lon for the upper right corner, else lower left\n   * @param sphereRadius     The radius to use for the calculation\n   * @return The Lat/Lon in Radians\n\n   */\n  public static double[] latLonCorner(double latCenter, double lonCenter,\n                                      double distance, double [] result, boolean upperRight, double sphereRadius) {\n    // Haversine formula\n    double brng = upperRight ? DEG_45_AS_RADS : DEG_225_AS_RADS;\n    result = pointOnBearing(latCenter, lonCenter, distance, brng, result, sphereRadius);\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Uses Haversine to calculate the corner\n   *\n   * @param latCenter  In radians\n   * @param lonCenter  In radians\n   * @param distance   The distance\n   * @param result A preallocated array to hold the results.  If null, a new one is constructed.\n   * @param upperRight If true, give lat/lon for the upper right corner, else lower left\n   * @param radius     The radius to use for the calculation\n   * @return The Lat/Lon in Radians\n\n   */\n  public static double[] latLonCorner(double latCenter, double lonCenter,\n                                      double distance, double [] result, boolean upperRight, double radius) {\n    // Haversine formula\n    double brng = upperRight ? DEG_45 : DEG_225;\n    double lat2 = Math.asin(Math.sin(latCenter) * Math.cos(distance / radius) +\n            Math.cos(latCenter) * Math.sin(distance / radius) * Math.cos(brng));\n    double lon2 = lonCenter + Math.atan2(Math.sin(brng) * Math.sin(distance / radius) * Math.cos(latCenter),\n            Math.cos(distance / radius) - Math.sin(latCenter) * Math.sin(lat2));\n\n    /*lat2 = (lat2*180)/Math.PI;\n    lon2 = (lon2*180)/Math.PI;*/\n    //From Lucene.  Move back to Lucene when synced\n    // normalize long first\n    if (result == null || result.length != 2){\n      result = new double[2];\n    }\n    result[0] = lat2;\n    result[1] = lon2;\n    normLng(result);\n\n    // normalize lat - could flip poles\n    normLat(result);\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/DistanceUtils#latLonCorner(double,double,double,double[],boolean,double).mjava","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/DistanceUtils#latLonCorner(double,double,double,double[],boolean,double).mjava","sourceNew":"  /**\n   * Uses Haversine to calculate the corner of a box (upper right or lower left) that is the <i>distance</i> away, given a sphere of the specified <i>radius</i>.\n   *\n   * NOTE: This is not the same as calculating a box that transcribes a circle of the given distance.\n   *\n   * @param latCenter  In radians\n   * @param lonCenter  In radians\n   * @param distance   The distance\n   * @param result A preallocated array to hold the results.  If null, a new one is constructed.\n   * @param upperRight If true, give lat/lon for the upper right corner, else lower left\n   * @param sphereRadius     The radius to use for the calculation\n   * @return The Lat/Lon in Radians\n\n   */\n  public static double[] latLonCorner(double latCenter, double lonCenter,\n                                      double distance, double [] result, boolean upperRight, double sphereRadius) {\n    // Haversine formula\n    double brng = upperRight ? DEG_45_AS_RADS : DEG_225_AS_RADS;\n    result = pointOnBearing(latCenter, lonCenter, distance, brng, result, sphereRadius);\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Uses Haversine to calculate the corner\n   *\n   * @param latCenter  In radians\n   * @param lonCenter  In radians\n   * @param distance   The distance\n   * @param result A preallocated array to hold the results.  If null, a new one is constructed.\n   * @param upperRight If true, give lat/lon for the upper right corner, else lower left\n   * @param radius     The radius to use for the calculation\n   * @return The Lat/Lon in Radians\n\n   */\n  public static double[] latLonCorner(double latCenter, double lonCenter,\n                                      double distance, double [] result, boolean upperRight, double radius) {\n    // Haversine formula\n    double brng = upperRight ? DEG_45 : DEG_225;\n    double lat2 = Math.asin(Math.sin(latCenter) * Math.cos(distance / radius) +\n            Math.cos(latCenter) * Math.sin(distance / radius) * Math.cos(brng));\n    double lon2 = lonCenter + Math.atan2(Math.sin(brng) * Math.sin(distance / radius) * Math.cos(latCenter),\n            Math.cos(distance / radius) - Math.sin(latCenter) * Math.sin(lat2));\n\n    /*lat2 = (lat2*180)/Math.PI;\n    lon2 = (lon2*180)/Math.PI;*/\n    //From Lucene.  Move back to Lucene when synced\n    // normalize long first\n    if (result == null || result.length != 2){\n      result = new double[2];\n    }\n    result[0] = lat2;\n    result[1] = lon2;\n    normLng(result);\n\n    // normalize lat - could flip poles\n    normLat(result);\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fb7e38713d15939e085d376c6391e6e6262a81f","date":1329897272,"type":4,"author":"David Wayne Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/DistanceUtils#latLonCorner(double,double,double,double[],boolean,double).mjava","sourceNew":null,"sourceOld":"  /**\n   * Uses Haversine to calculate the corner of a box (upper right or lower left) that is the <i>distance</i> away, given a sphere of the specified <i>radius</i>.\n   *\n   * NOTE: This is not the same as calculating a box that transcribes a circle of the given distance.\n   *\n   * @param latCenter  In radians\n   * @param lonCenter  In radians\n   * @param distance   The distance\n   * @param result A preallocated array to hold the results.  If null, a new one is constructed.\n   * @param upperRight If true, give lat/lon for the upper right corner, else lower left\n   * @param sphereRadius     The radius to use for the calculation\n   * @return The Lat/Lon in Radians\n\n   */\n  public static double[] latLonCorner(double latCenter, double lonCenter,\n                                      double distance, double [] result, boolean upperRight, double sphereRadius) {\n    // Haversine formula\n    double brng = upperRight ? DEG_45_AS_RADS : DEG_225_AS_RADS;\n    result = pointOnBearing(latCenter, lonCenter, distance, brng, result, sphereRadius);\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e47768b261c28e7e6032060e8331475c81057953","date":1331681297,"type":4,"author":"Ryan McKinley","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/DistanceUtils#latLonCorner(double,double,double,double[],boolean,double).mjava","sourceNew":null,"sourceOld":"  /**\n   * Uses Haversine to calculate the corner of a box (upper right or lower left) that is the <i>distance</i> away, given a sphere of the specified <i>radius</i>.\n   *\n   * NOTE: This is not the same as calculating a box that transcribes a circle of the given distance.\n   *\n   * @param latCenter  In radians\n   * @param lonCenter  In radians\n   * @param distance   The distance\n   * @param result A preallocated array to hold the results.  If null, a new one is constructed.\n   * @param upperRight If true, give lat/lon for the upper right corner, else lower left\n   * @param sphereRadius     The radius to use for the calculation\n   * @return The Lat/Lon in Radians\n\n   */\n  public static double[] latLonCorner(double latCenter, double lonCenter,\n                                      double distance, double [] result, boolean upperRight, double sphereRadius) {\n    // Haversine formula\n    double brng = upperRight ? DEG_45_AS_RADS : DEG_225_AS_RADS;\n    result = pointOnBearing(latCenter, lonCenter, distance, brng, result, sphereRadius);\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"459be89020f9023e3b60066066a892c7edb5de58":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6baa337076125dc01fc8cda597f52f2a9d0edcef":["459be89020f9023e3b60066066a892c7edb5de58"],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","459be89020f9023e3b60066066a892c7edb5de58"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","6baa337076125dc01fc8cda597f52f2a9d0edcef"],"e47768b261c28e7e6032060e8331475c81057953":["6baa337076125dc01fc8cda597f52f2a9d0edcef","2fb7e38713d15939e085d376c6391e6e6262a81f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e47768b261c28e7e6032060e8331475c81057953"],"2fb7e38713d15939e085d376c6391e6e6262a81f":["6baa337076125dc01fc8cda597f52f2a9d0edcef"]},"commit2Childs":{"459be89020f9023e3b60066066a892c7edb5de58":["6baa337076125dc01fc8cda597f52f2a9d0edcef","5f4e87790277826a2aea119328600dfb07761f32"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["459be89020f9023e3b60066066a892c7edb5de58","5f4e87790277826a2aea119328600dfb07761f32"],"6baa337076125dc01fc8cda597f52f2a9d0edcef":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","e47768b261c28e7e6032060e8331475c81057953","2fb7e38713d15939e085d376c6391e6e6262a81f"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"e47768b261c28e7e6032060e8331475c81057953":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2fb7e38713d15939e085d376c6391e6e6262a81f":["e47768b261c28e7e6032060e8331475c81057953"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}