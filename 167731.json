{"path":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testEscapedWildcard().mjava","commits":[{"id":"02f9424edb9eccc558626693e4a4cd43f8ce2622","date":1288987640,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testEscapedWildcard().mjava","pathOld":"/dev/null","sourceNew":"  @Ignore(\"contrib queryparser shouldn't escape wildcard terms\")\n  public void testEscapedWildcard() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n\n    WildcardQuery q = new WildcardQuery(new Term(\"field\", \"foo\\\\?ba?r\"));\n    assertEquals(q, qp.parse(\"foo\\\\?ba?r\", \"field\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testEscapedWildcard().mjava","pathOld":"/dev/null","sourceNew":"  @Ignore(\"contrib queryparser shouldn't escape wildcard terms\")\n  public void testEscapedWildcard() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n\n    WildcardQuery q = new WildcardQuery(new Term(\"field\", \"foo\\\\?ba?r\"));\n    assertEquals(q, qp.parse(\"foo\\\\?ba?r\", \"field\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testEscapedWildcard().mjava","pathOld":"/dev/null","sourceNew":"  @Ignore(\"contrib queryparser shouldn't escape wildcard terms\")\n  public void testEscapedWildcard() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n\n    WildcardQuery q = new WildcardQuery(new Term(\"field\", \"foo\\\\?ba?r\"));\n    assertEquals(q, qp.parse(\"foo\\\\?ba?r\", \"field\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testEscapedWildcard().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testEscapedWildcard().mjava","sourceNew":"  @Ignore(\"contrib queryparser shouldn't escape wildcard terms\")\n  public void testEscapedWildcard() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new MockAnalyzer(random, MockTokenizer.WHITESPACE, false));\n\n    WildcardQuery q = new WildcardQuery(new Term(\"field\", \"foo\\\\?ba?r\"));\n    assertEquals(q, qp.parse(\"foo\\\\?ba?r\", \"field\"));\n  }\n\n","sourceOld":"  @Ignore(\"contrib queryparser shouldn't escape wildcard terms\")\n  public void testEscapedWildcard() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n\n    WildcardQuery q = new WildcardQuery(new Term(\"field\", \"foo\\\\?ba?r\"));\n    assertEquals(q, qp.parse(\"foo\\\\?ba?r\", \"field\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testEscapedWildcard().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testEscapedWildcard().mjava","sourceNew":"  @Ignore(\"contrib queryparser shouldn't escape wildcard terms\")\n  public void testEscapedWildcard() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new MockAnalyzer(random, MockTokenizer.WHITESPACE, false));\n\n    WildcardQuery q = new WildcardQuery(new Term(\"field\", \"foo\\\\?ba?r\"));\n    assertEquals(q, qp.parse(\"foo\\\\?ba?r\", \"field\"));\n  }\n\n","sourceOld":"  @Ignore(\"contrib queryparser shouldn't escape wildcard terms\")\n  public void testEscapedWildcard() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n\n    WildcardQuery q = new WildcardQuery(new Term(\"field\", \"foo\\\\?ba?r\"));\n    assertEquals(q, qp.parse(\"foo\\\\?ba?r\", \"field\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testEscapedWildcard().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testEscapedWildcard().mjava","sourceNew":"  @Ignore(\"contrib queryparser shouldn't escape wildcard terms\")\n  public void testEscapedWildcard() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new MockAnalyzer(random, MockTokenizer.WHITESPACE, false));\n\n    WildcardQuery q = new WildcardQuery(new Term(\"field\", \"foo\\\\?ba?r\"));\n    assertEquals(q, qp.parse(\"foo\\\\?ba?r\", \"field\"));\n  }\n\n","sourceOld":"  @Ignore(\"contrib queryparser shouldn't escape wildcard terms\")\n  public void testEscapedWildcard() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n\n    WildcardQuery q = new WildcardQuery(new Term(\"field\", \"foo\\\\?ba?r\"));\n    assertEquals(q, qp.parse(\"foo\\\\?ba?r\", \"field\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testEscapedWildcard().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testEscapedWildcard().mjava","sourceNew":"  @Ignore(\"contrib queryparser shouldn't escape wildcard terms\")\n  public void testEscapedWildcard() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new MockAnalyzer(random, MockTokenizer.WHITESPACE, false));\n\n    WildcardQuery q = new WildcardQuery(new Term(\"field\", \"foo\\\\?ba?r\"));\n    assertEquals(q, qp.parse(\"foo\\\\?ba?r\", \"field\"));\n  }\n\n","sourceOld":"  @Ignore(\"contrib queryparser shouldn't escape wildcard terms\")\n  public void testEscapedWildcard() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n\n    WildcardQuery q = new WildcardQuery(new Term(\"field\", \"foo\\\\?ba?r\"));\n    assertEquals(q, qp.parse(\"foo\\\\?ba?r\", \"field\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testEscapedWildcard().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testEscapedWildcard().mjava","sourceNew":"  @Ignore(\"contrib queryparser shouldn't escape wildcard terms\")\n  public void testEscapedWildcard() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new MockAnalyzer(random, MockTokenizer.WHITESPACE, false));\n\n    WildcardQuery q = new WildcardQuery(new Term(\"field\", \"foo\\\\?ba?r\"));\n    assertEquals(q, qp.parse(\"foo\\\\?ba?r\", \"field\"));\n  }\n\n","sourceOld":"  @Ignore(\"contrib queryparser shouldn't escape wildcard terms\")\n  public void testEscapedWildcard() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new MockAnalyzer(random, MockTokenizer.WHITESPACE, false));\n\n    WildcardQuery q = new WildcardQuery(new Term(\"field\", \"foo\\\\?ba?r\"));\n    assertEquals(q, qp.parse(\"foo\\\\?ba?r\", \"field\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["02f9424edb9eccc558626693e4a4cd43f8ce2622"],"a3776dccca01c11e7046323cfad46a3b4a471233":["02f9424edb9eccc558626693e4a4cd43f8ce2622","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a883878c0af761245ab048babc63d099f835f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","02f9424edb9eccc558626693e4a4cd43f8ce2622"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["85a883878c0af761245ab048babc63d099f835f3","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"02f9424edb9eccc558626693e4a4cd43f8ce2622":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","02f9424edb9eccc558626693e4a4cd43f8ce2622"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85a883878c0af761245ab048babc63d099f835f3","02f9424edb9eccc558626693e4a4cd43f8ce2622","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"85a883878c0af761245ab048babc63d099f835f3":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"02f9424edb9eccc558626693e4a4cd43f8ce2622":["f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}