{"path":"solr/test-framework/src/java/org/apache/solr/handler/component/TrackingShardHandlerFactory#setTrackingQueue(List[JettySolrRunner],Queue[ShardRequestAndParams]).mjava","commits":[{"id":"1fc56848da7b3f927bb9840e8aedf09ee11cede1","date":1424871235,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/handler/component/TrackingShardHandlerFactory#setTrackingQueue(List[JettySolrRunner],Queue[ShardRequestAndParams]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sets the tracking queue for all nodes participating in this cluster. Once this method returns,\n   * all search and core admin requests distributed to shards will be submitted to the given queue.\n   *\n   * @param runners a list of {@link org.apache.solr.client.solrj.embedded.JettySolrRunner} nodes\n   * @param queue   an implementation of {@link java.util.Queue} which\n   *                accepts {@link org.apache.solr.handler.component.TrackingShardHandlerFactory.ShardRequestAndParams}\n   *                instances\n   */\n  public static void setTrackingQueue(List<JettySolrRunner> runners, Queue<ShardRequestAndParams> queue) {\n    for (JettySolrRunner runner : runners) {\n      CoreContainer container = ((SolrDispatchFilter) runner.getDispatchFilter().getFilter()).getCores();\n      ShardHandlerFactory factory = container.getShardHandlerFactory();\n      assert factory instanceof TrackingShardHandlerFactory;\n      TrackingShardHandlerFactory trackingShardHandlerFactory = (TrackingShardHandlerFactory) factory;\n      trackingShardHandlerFactory.setTrackingQueue(queue);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","87e71a21d5a987fc33ae9a0f50353e220e64f2c7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"87e71a21d5a987fc33ae9a0f50353e220e64f2c7","date":1425319675,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/handler/component/TrackingShardHandlerFactory#setTrackingQueue(List[JettySolrRunner],Queue[ShardRequestAndParams]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/handler/component/TrackingShardHandlerFactory#setTrackingQueue(List[JettySolrRunner],Queue[ShardRequestAndParams]).mjava","sourceNew":"  /**\n   * Sets the tracking queue for all nodes participating in this cluster. Once this method returns,\n   * all search and core admin requests distributed to shards will be submitted to the given queue.\n   *\n   * @param runners a list of {@link org.apache.solr.client.solrj.embedded.JettySolrRunner} nodes\n   * @param queue   an implementation of {@link java.util.Queue} which\n   *                accepts {@link org.apache.solr.handler.component.TrackingShardHandlerFactory.ShardRequestAndParams}\n   *                instances\n   */\n  public static void setTrackingQueue(List<JettySolrRunner> runners, Queue<ShardRequestAndParams> queue) {\n    for (JettySolrRunner runner : runners) {\n      CoreContainer container = ((SolrDispatchFilter) runner.getDispatchFilter().getFilter()).getCores();\n      ShardHandlerFactory factory = container.getShardHandlerFactory();\n      assert factory instanceof TrackingShardHandlerFactory : \"not a TrackingShardHandlerFactory: \" + factory.getClass();\n      TrackingShardHandlerFactory trackingShardHandlerFactory = (TrackingShardHandlerFactory) factory;\n      trackingShardHandlerFactory.setTrackingQueue(queue);\n    }\n  }\n\n","sourceOld":"  /**\n   * Sets the tracking queue for all nodes participating in this cluster. Once this method returns,\n   * all search and core admin requests distributed to shards will be submitted to the given queue.\n   *\n   * @param runners a list of {@link org.apache.solr.client.solrj.embedded.JettySolrRunner} nodes\n   * @param queue   an implementation of {@link java.util.Queue} which\n   *                accepts {@link org.apache.solr.handler.component.TrackingShardHandlerFactory.ShardRequestAndParams}\n   *                instances\n   */\n  public static void setTrackingQueue(List<JettySolrRunner> runners, Queue<ShardRequestAndParams> queue) {\n    for (JettySolrRunner runner : runners) {\n      CoreContainer container = ((SolrDispatchFilter) runner.getDispatchFilter().getFilter()).getCores();\n      ShardHandlerFactory factory = container.getShardHandlerFactory();\n      assert factory instanceof TrackingShardHandlerFactory;\n      TrackingShardHandlerFactory trackingShardHandlerFactory = (TrackingShardHandlerFactory) factory;\n      trackingShardHandlerFactory.setTrackingQueue(queue);\n    }\n  }\n\n","bugFix":["1fc56848da7b3f927bb9840e8aedf09ee11cede1"],"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b06445ae1731e049327712db0454e5643ca9b7fe","date":1425329139,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/handler/component/TrackingShardHandlerFactory#setTrackingQueue(List[JettySolrRunner],Queue[ShardRequestAndParams]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/handler/component/TrackingShardHandlerFactory#setTrackingQueue(List[JettySolrRunner],Queue[ShardRequestAndParams]).mjava","sourceNew":"  /**\n   * Sets the tracking queue for all nodes participating in this cluster. Once this method returns,\n   * all search and core admin requests distributed to shards will be submitted to the given queue.\n   *\n   * @param runners a list of {@link org.apache.solr.client.solrj.embedded.JettySolrRunner} nodes\n   * @param queue   an implementation of {@link java.util.Queue} which\n   *                accepts {@link org.apache.solr.handler.component.TrackingShardHandlerFactory.ShardRequestAndParams}\n   *                instances\n   */\n  public static void setTrackingQueue(List<JettySolrRunner> runners, Queue<ShardRequestAndParams> queue) {\n    for (JettySolrRunner runner : runners) {\n      CoreContainer container = ((SolrDispatchFilter) runner.getDispatchFilter().getFilter()).getCores();\n      ShardHandlerFactory factory = container.getShardHandlerFactory();\n      assert factory instanceof TrackingShardHandlerFactory : \"not a TrackingShardHandlerFactory: \" + factory.getClass();\n      TrackingShardHandlerFactory trackingShardHandlerFactory = (TrackingShardHandlerFactory) factory;\n      trackingShardHandlerFactory.setTrackingQueue(queue);\n    }\n  }\n\n","sourceOld":"  /**\n   * Sets the tracking queue for all nodes participating in this cluster. Once this method returns,\n   * all search and core admin requests distributed to shards will be submitted to the given queue.\n   *\n   * @param runners a list of {@link org.apache.solr.client.solrj.embedded.JettySolrRunner} nodes\n   * @param queue   an implementation of {@link java.util.Queue} which\n   *                accepts {@link org.apache.solr.handler.component.TrackingShardHandlerFactory.ShardRequestAndParams}\n   *                instances\n   */\n  public static void setTrackingQueue(List<JettySolrRunner> runners, Queue<ShardRequestAndParams> queue) {\n    for (JettySolrRunner runner : runners) {\n      CoreContainer container = ((SolrDispatchFilter) runner.getDispatchFilter().getFilter()).getCores();\n      ShardHandlerFactory factory = container.getShardHandlerFactory();\n      assert factory instanceof TrackingShardHandlerFactory;\n      TrackingShardHandlerFactory trackingShardHandlerFactory = (TrackingShardHandlerFactory) factory;\n      trackingShardHandlerFactory.setTrackingQueue(queue);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/handler/component/TrackingShardHandlerFactory#setTrackingQueue(List[JettySolrRunner],Queue[ShardRequestAndParams]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sets the tracking queue for all nodes participating in this cluster. Once this method returns,\n   * all search and core admin requests distributed to shards will be submitted to the given queue.\n   *\n   * @param runners a list of {@link org.apache.solr.client.solrj.embedded.JettySolrRunner} nodes\n   * @param queue   an implementation of {@link java.util.Queue} which\n   *                accepts {@link org.apache.solr.handler.component.TrackingShardHandlerFactory.ShardRequestAndParams}\n   *                instances\n   */\n  public static void setTrackingQueue(List<JettySolrRunner> runners, Queue<ShardRequestAndParams> queue) {\n    for (JettySolrRunner runner : runners) {\n      CoreContainer container = ((SolrDispatchFilter) runner.getDispatchFilter().getFilter()).getCores();\n      ShardHandlerFactory factory = container.getShardHandlerFactory();\n      assert factory instanceof TrackingShardHandlerFactory : \"not a TrackingShardHandlerFactory: \" + factory.getClass();\n      TrackingShardHandlerFactory trackingShardHandlerFactory = (TrackingShardHandlerFactory) factory;\n      trackingShardHandlerFactory.setTrackingQueue(queue);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1088b72b3b4cc45316b7595bd09023c859cd2327","date":1447150009,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/handler/component/TrackingShardHandlerFactory#setTrackingQueue(List[JettySolrRunner],Queue[ShardRequestAndParams]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/handler/component/TrackingShardHandlerFactory#setTrackingQueue(List[JettySolrRunner],Queue[ShardRequestAndParams]).mjava","sourceNew":"  /**\n   * Sets the tracking queue for all nodes participating in this cluster. Once this method returns,\n   * all search and core admin requests distributed to shards will be submitted to the given queue.\n   *\n   * @param runners a list of {@link org.apache.solr.client.solrj.embedded.JettySolrRunner} nodes\n   * @param queue   an implementation of {@link java.util.Queue} which\n   *                accepts {@link org.apache.solr.handler.component.TrackingShardHandlerFactory.ShardRequestAndParams}\n   *                instances\n   */\n  public static void setTrackingQueue(List<JettySolrRunner> runners, Queue<ShardRequestAndParams> queue) {\n    for (JettySolrRunner runner : runners) {\n      CoreContainer container = runner.getCoreContainer();\n      ShardHandlerFactory factory = container.getShardHandlerFactory();\n      assert factory instanceof TrackingShardHandlerFactory : \"not a TrackingShardHandlerFactory: \" + factory.getClass();\n      TrackingShardHandlerFactory trackingShardHandlerFactory = (TrackingShardHandlerFactory) factory;\n      trackingShardHandlerFactory.setTrackingQueue(queue);\n    }\n  }\n\n","sourceOld":"  /**\n   * Sets the tracking queue for all nodes participating in this cluster. Once this method returns,\n   * all search and core admin requests distributed to shards will be submitted to the given queue.\n   *\n   * @param runners a list of {@link org.apache.solr.client.solrj.embedded.JettySolrRunner} nodes\n   * @param queue   an implementation of {@link java.util.Queue} which\n   *                accepts {@link org.apache.solr.handler.component.TrackingShardHandlerFactory.ShardRequestAndParams}\n   *                instances\n   */\n  public static void setTrackingQueue(List<JettySolrRunner> runners, Queue<ShardRequestAndParams> queue) {\n    for (JettySolrRunner runner : runners) {\n      CoreContainer container = ((SolrDispatchFilter) runner.getDispatchFilter().getFilter()).getCores();\n      ShardHandlerFactory factory = container.getShardHandlerFactory();\n      assert factory instanceof TrackingShardHandlerFactory : \"not a TrackingShardHandlerFactory: \" + factory.getClass();\n      TrackingShardHandlerFactory trackingShardHandlerFactory = (TrackingShardHandlerFactory) factory;\n      trackingShardHandlerFactory.setTrackingQueue(queue);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/handler/component/TrackingShardHandlerFactory#setTrackingQueue(List[JettySolrRunner],Queue[ShardRequestAndParams]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/handler/component/TrackingShardHandlerFactory#setTrackingQueue(List[JettySolrRunner],Queue[ShardRequestAndParams]).mjava","sourceNew":"  /**\n   * Sets the tracking queue for all nodes participating in this cluster. Once this method returns,\n   * all search and core admin requests distributed to shards will be submitted to the given queue.\n   *\n   * @param runners a list of {@link org.apache.solr.client.solrj.embedded.JettySolrRunner} nodes\n   * @param queue   an implementation of {@link java.util.Queue} which\n   *                accepts {@link org.apache.solr.handler.component.TrackingShardHandlerFactory.ShardRequestAndParams}\n   *                instances\n   */\n  public static void setTrackingQueue(List<JettySolrRunner> runners, Queue<ShardRequestAndParams> queue) {\n    for (JettySolrRunner runner : runners) {\n      CoreContainer container = runner.getCoreContainer();\n      if (container != null) {\n        ShardHandlerFactory factory = container.getShardHandlerFactory();\n        assert factory instanceof TrackingShardHandlerFactory : \"not a TrackingShardHandlerFactory: \"\n            + factory.getClass();\n        TrackingShardHandlerFactory trackingShardHandlerFactory = (TrackingShardHandlerFactory) factory;\n        trackingShardHandlerFactory.setTrackingQueue(queue);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Sets the tracking queue for all nodes participating in this cluster. Once this method returns,\n   * all search and core admin requests distributed to shards will be submitted to the given queue.\n   *\n   * @param runners a list of {@link org.apache.solr.client.solrj.embedded.JettySolrRunner} nodes\n   * @param queue   an implementation of {@link java.util.Queue} which\n   *                accepts {@link org.apache.solr.handler.component.TrackingShardHandlerFactory.ShardRequestAndParams}\n   *                instances\n   */\n  public static void setTrackingQueue(List<JettySolrRunner> runners, Queue<ShardRequestAndParams> queue) {\n    for (JettySolrRunner runner : runners) {\n      CoreContainer container = runner.getCoreContainer();\n      ShardHandlerFactory factory = container.getShardHandlerFactory();\n      assert factory instanceof TrackingShardHandlerFactory : \"not a TrackingShardHandlerFactory: \" + factory.getClass();\n      TrackingShardHandlerFactory trackingShardHandlerFactory = (TrackingShardHandlerFactory) factory;\n      trackingShardHandlerFactory.setTrackingQueue(queue);\n    }\n  }\n\n","bugFix":["87e71a21d5a987fc33ae9a0f50353e220e64f2c7","1fc56848da7b3f927bb9840e8aedf09ee11cede1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba055e19afc289adcb5bedaf68513793a7254012","date":1591268575,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/handler/component/TrackingShardHandlerFactory#setTrackingQueue(List[JettySolrRunner],Queue[ShardRequestAndParams]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/handler/component/TrackingShardHandlerFactory#setTrackingQueue(List[JettySolrRunner],Queue[ShardRequestAndParams]).mjava","sourceNew":"  /**\n   * Sets the tracking queue for all nodes participating in this cluster. Once this method returns,\n   * all search and core admin requests distributed to shards will be submitted to the given queue.\n   *\n   * @param runners a list of {@link org.apache.solr.client.solrj.embedded.JettySolrRunner} nodes\n   * @param queue   an implementation of {@link java.util.Queue} which\n   *                accepts {@link org.apache.solr.handler.component.TrackingShardHandlerFactory.ShardRequestAndParams}\n   *                instances\n   */\n  public static void setTrackingQueue(List<JettySolrRunner> runners, Queue<ShardRequestAndParams> queue) {\n    for (JettySolrRunner runner : runners) {\n      CoreContainer container = runner.getCoreContainer();\n      if (container != null) {\n        ShardHandlerFactory factory = container.getShardHandlerFactory();\n        assert factory instanceof TrackingShardHandlerFactory : \"not a TrackingShardHandlerFactory: \"\n            + factory.getClass();\n        @SuppressWarnings(\"resource\")\n        TrackingShardHandlerFactory trackingShardHandlerFactory = (TrackingShardHandlerFactory) factory;\n        trackingShardHandlerFactory.setTrackingQueue(queue);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Sets the tracking queue for all nodes participating in this cluster. Once this method returns,\n   * all search and core admin requests distributed to shards will be submitted to the given queue.\n   *\n   * @param runners a list of {@link org.apache.solr.client.solrj.embedded.JettySolrRunner} nodes\n   * @param queue   an implementation of {@link java.util.Queue} which\n   *                accepts {@link org.apache.solr.handler.component.TrackingShardHandlerFactory.ShardRequestAndParams}\n   *                instances\n   */\n  public static void setTrackingQueue(List<JettySolrRunner> runners, Queue<ShardRequestAndParams> queue) {\n    for (JettySolrRunner runner : runners) {\n      CoreContainer container = runner.getCoreContainer();\n      if (container != null) {\n        ShardHandlerFactory factory = container.getShardHandlerFactory();\n        assert factory instanceof TrackingShardHandlerFactory : \"not a TrackingShardHandlerFactory: \"\n            + factory.getClass();\n        TrackingShardHandlerFactory trackingShardHandlerFactory = (TrackingShardHandlerFactory) factory;\n        trackingShardHandlerFactory.setTrackingQueue(queue);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","87e71a21d5a987fc33ae9a0f50353e220e64f2c7"],"ba055e19afc289adcb5bedaf68513793a7254012":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["1088b72b3b4cc45316b7595bd09023c859cd2327"],"87e71a21d5a987fc33ae9a0f50353e220e64f2c7":["1fc56848da7b3f927bb9840e8aedf09ee11cede1"],"b06445ae1731e049327712db0454e5643ca9b7fe":["1fc56848da7b3f927bb9840e8aedf09ee11cede1","87e71a21d5a987fc33ae9a0f50353e220e64f2c7"],"1088b72b3b4cc45316b7595bd09023c859cd2327":["87e71a21d5a987fc33ae9a0f50353e220e64f2c7"],"1fc56848da7b3f927bb9840e8aedf09ee11cede1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba055e19afc289adcb5bedaf68513793a7254012"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"87e71a21d5a987fc33ae9a0f50353e220e64f2c7":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","1088b72b3b4cc45316b7595bd09023c859cd2327"],"ba055e19afc289adcb5bedaf68513793a7254012":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["ba055e19afc289adcb5bedaf68513793a7254012"],"b06445ae1731e049327712db0454e5643ca9b7fe":[],"1088b72b3b4cc45316b7595bd09023c859cd2327":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"1fc56848da7b3f927bb9840e8aedf09ee11cede1":["87e71a21d5a987fc33ae9a0f50353e220e64f2c7","b06445ae1731e049327712db0454e5643ca9b7fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","1fc56848da7b3f927bb9840e8aedf09ee11cede1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}