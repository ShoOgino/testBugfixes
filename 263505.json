{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/TemporalEvaluatorsTest#testAllFunctions().mjava","commits":[{"id":"64ff6b743fd4051da7ebb3d397d1ef80833a741a","date":1492023891,"type":1,"author":"Gethin James","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/TemporalEvaluatorsTest#testAllFunctions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/DatePartEvaluatorTest#testAllFunctions().mjava","sourceNew":"  @Test\n  public void testAllFunctions() throws Exception {\n\n    //year, month, day, dayofyear, hour, minute, quarter, week, second, epoch\n    testFunction(\"year(a)\", \"1995-12-31T23:59:59Z\", 1995);\n    testFunction(\"month(a)\",\"1995-12-31T23:59:59Z\", 12);\n    testFunction(\"day(a)\",  \"1995-12-31T23:59:59Z\", 31);\n    testFunction(\"dayOfYear(a)\",  \"1995-12-31T23:59:59Z\", 365);\n    testFunction(\"dayOfQuarter(a)\",  \"1995-12-31T23:59:59Z\", 92);\n    testFunction(\"hour(a)\",   \"1995-12-31T23:59:59Z\", 23);\n    testFunction(\"minute(a)\", \"1995-12-31T23:59:59Z\", 59);\n    testFunction(\"quarter(a)\",\"1995-12-31T23:59:59Z\", 4);\n    testFunction(\"week(a)\",   \"1995-12-31T23:59:59Z\", 52);\n    testFunction(\"second(a)\", \"1995-12-31T23:59:58Z\", 58);\n    testFunction(\"epoch(a)\",  \"1995-12-31T23:59:59Z\", 820454399000l);\n\n    testFunction(\"year(a)\", \"2017-03-17T10:30:45Z\", 2017);\n    testFunction(\"year('a')\", \"2017-03-17T10:30:45Z\", 2017);\n    testFunction(\"month(a)\",\"2017-03-17T10:30:45Z\", 3);\n    testFunction(\"day(a)\",  \"2017-03-17T10:30:45Z\", 17);\n    testFunction(\"day('a')\",  \"2017-03-17T10:30:45Z\", 17);\n    testFunction(\"dayOfYear(a)\",  \"2017-03-17T10:30:45Z\", 76);\n    testFunction(\"dayOfQuarter(a)\",  \"2017-03-17T10:30:45Z\", 76);\n    testFunction(\"hour(a)\",   \"2017-03-17T10:30:45Z\", 10);\n    testFunction(\"minute(a)\", \"2017-03-17T10:30:45Z\", 30);\n    testFunction(\"quarter(a)\",\"2017-03-17T10:30:45Z\", 1);\n    testFunction(\"week(a)\",   \"2017-03-17T10:30:45Z\", 11);\n    testFunction(\"second(a)\", \"2017-03-17T10:30:45Z\", 45);\n    testFunction(\"epoch(a)\",  \"2017-03-17T10:30:45Z\", 1489746645000l);\n\n    testFunction(\"epoch(a)\",  new Date(1489746645500l).toInstant().toString(), 1489746645500l);\n    testFunction(\"epoch(a)\",  new Date(820454399990l).toInstant().toString(), 820454399990l);\n\n    //Additionally test all functions to make sure they return a non-null number\n    for (DatePartEvaluator.FUNCTION function : DatePartEvaluator.FUNCTION.values()) {\n      StreamEvaluator evaluator = factory.constructEvaluator(function+\"(a)\");\n      values.clear();\n      values.put(\"a\", \"2017-03-17T10:30:45Z\");\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertNotNull(function+\" should return a result\",result);\n      assertTrue(function+\" should return a number\", result instanceof Number);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAllFunctions() throws Exception {\n\n    //year, month, day, dayofyear, hour, minute, quarter, week, second, epoch\n    testFunction(\"year(a)\", \"1995-12-31T23:59:59Z\", 1995);\n    testFunction(\"month(a)\",\"1995-12-31T23:59:59Z\", 12);\n    testFunction(\"day(a)\",  \"1995-12-31T23:59:59Z\", 31);\n    testFunction(\"dayOfYear(a)\",  \"1995-12-31T23:59:59Z\", 365);\n    testFunction(\"dayOfQuarter(a)\",  \"1995-12-31T23:59:59Z\", 92);\n    testFunction(\"hour(a)\",   \"1995-12-31T23:59:59Z\", 23);\n    testFunction(\"minute(a)\", \"1995-12-31T23:59:59Z\", 59);\n    testFunction(\"quarter(a)\",\"1995-12-31T23:59:59Z\", 4);\n    testFunction(\"week(a)\",   \"1995-12-31T23:59:59Z\", 52);\n    testFunction(\"second(a)\", \"1995-12-31T23:59:58Z\", 58);\n    testFunction(\"epoch(a)\",  \"1995-12-31T23:59:59Z\", 820454399000l);\n\n    testFunction(\"year(a)\", \"2017-03-17T10:30:45Z\", 2017);\n    testFunction(\"year('a')\", \"2017-03-17T10:30:45Z\", 2017);\n    testFunction(\"month(a)\",\"2017-03-17T10:30:45Z\", 3);\n    testFunction(\"day(a)\",  \"2017-03-17T10:30:45Z\", 17);\n    testFunction(\"day('a')\",  \"2017-03-17T10:30:45Z\", 17);\n    testFunction(\"dayOfYear(a)\",  \"2017-03-17T10:30:45Z\", 76);\n    testFunction(\"dayOfQuarter(a)\",  \"2017-03-17T10:30:45Z\", 76);\n    testFunction(\"hour(a)\",   \"2017-03-17T10:30:45Z\", 10);\n    testFunction(\"minute(a)\", \"2017-03-17T10:30:45Z\", 30);\n    testFunction(\"quarter(a)\",\"2017-03-17T10:30:45Z\", 1);\n    testFunction(\"week(a)\",   \"2017-03-17T10:30:45Z\", 11);\n    testFunction(\"second(a)\", \"2017-03-17T10:30:45Z\", 45);\n    testFunction(\"epoch(a)\",  \"2017-03-17T10:30:45Z\", 1489746645000l);\n\n    testFunction(\"epoch(a)\",  new Date(1489746645500l).toInstant().toString(), 1489746645500l);\n    testFunction(\"epoch(a)\",  new Date(820454399990l).toInstant().toString(), 820454399990l);\n\n    //Additionally test all functions to make sure they return a non-null number\n    for (DatePartEvaluator.FUNCTION function : DatePartEvaluator.FUNCTION.values()) {\n      StreamEvaluator evaluator = factory.constructEvaluator(function+\"(a)\");\n      values.clear();\n      values.put(\"a\", \"2017-03-17T10:30:45Z\");\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertNotNull(function+\" should return a result\",result);\n      assertTrue(function+\" should return a number\", result instanceof Number);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c513d69b21508db62cccf741d0cdd9e0171ae1a5","date":1492023892,"type":3,"author":"Gethin James","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/TemporalEvaluatorsTest#testAllFunctions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/TemporalEvaluatorsTest#testAllFunctions().mjava","sourceNew":"  @Test\n  public void testAllFunctions() throws Exception {\n\n    //year, month, day, dayofyear, hour, minute, quarter, week, second, epoch\n    testFunction(\"year(a)\", \"1995-12-31T23:59:59Z\", 1995);\n    testFunction(\"month(a)\",\"1995-12-31T23:59:59Z\", 12);\n    testFunction(\"day(a)\",  \"1995-12-31T23:59:59Z\", 31);\n    testFunction(\"dayOfYear(a)\",  \"1995-12-31T23:59:59Z\", 365);\n    testFunction(\"dayOfQuarter(a)\",  \"1995-12-31T23:59:59Z\", 92);\n    testFunction(\"hour(a)\",   \"1995-12-31T23:59:59Z\", 23);\n    testFunction(\"minute(a)\", \"1995-12-31T23:59:59Z\", 59);\n    testFunction(\"quarter(a)\",\"1995-12-31T23:59:59Z\", 4);\n    testFunction(\"week(a)\",   \"1995-12-31T23:59:59Z\", 52);\n    testFunction(\"second(a)\", \"1995-12-31T23:59:58Z\", 58);\n    testFunction(\"epoch(a)\",  \"1995-12-31T23:59:59Z\", 820454399000l);\n\n    testFunction(\"year(a)\", \"2017-03-17T10:30:45Z\", 2017);\n    testFunction(\"year('a')\", \"2017-03-17T10:30:45Z\", 2017);\n    testFunction(\"month(a)\",\"2017-03-17T10:30:45Z\", 3);\n    testFunction(\"day(a)\",  \"2017-03-17T10:30:45Z\", 17);\n    testFunction(\"day('a')\",  \"2017-03-17T10:30:45Z\", 17);\n    testFunction(\"dayOfYear(a)\",  \"2017-03-17T10:30:45Z\", 76);\n    testFunction(\"dayOfQuarter(a)\",  \"2017-03-17T10:30:45Z\", 76);\n    testFunction(\"hour(a)\",   \"2017-03-17T10:30:45Z\", 10);\n    testFunction(\"minute(a)\", \"2017-03-17T10:30:45Z\", 30);\n    testFunction(\"quarter(a)\",\"2017-03-17T10:30:45Z\", 1);\n    testFunction(\"week(a)\",   \"2017-03-17T10:30:45Z\", 11);\n    testFunction(\"second(a)\", \"2017-03-17T10:30:45Z\", 45);\n    testFunction(\"epoch(a)\",  \"2017-03-17T10:30:45Z\", 1489746645000l);\n\n    testFunction(\"epoch(a)\",  new Date(1489746645500l).toInstant().toString(), 1489746645500l);\n    testFunction(\"epoch(a)\",  new Date(820454399990l).toInstant().toString(), 820454399990l);\n\n  }\n\n","sourceOld":"  @Test\n  public void testAllFunctions() throws Exception {\n\n    //year, month, day, dayofyear, hour, minute, quarter, week, second, epoch\n    testFunction(\"year(a)\", \"1995-12-31T23:59:59Z\", 1995);\n    testFunction(\"month(a)\",\"1995-12-31T23:59:59Z\", 12);\n    testFunction(\"day(a)\",  \"1995-12-31T23:59:59Z\", 31);\n    testFunction(\"dayOfYear(a)\",  \"1995-12-31T23:59:59Z\", 365);\n    testFunction(\"dayOfQuarter(a)\",  \"1995-12-31T23:59:59Z\", 92);\n    testFunction(\"hour(a)\",   \"1995-12-31T23:59:59Z\", 23);\n    testFunction(\"minute(a)\", \"1995-12-31T23:59:59Z\", 59);\n    testFunction(\"quarter(a)\",\"1995-12-31T23:59:59Z\", 4);\n    testFunction(\"week(a)\",   \"1995-12-31T23:59:59Z\", 52);\n    testFunction(\"second(a)\", \"1995-12-31T23:59:58Z\", 58);\n    testFunction(\"epoch(a)\",  \"1995-12-31T23:59:59Z\", 820454399000l);\n\n    testFunction(\"year(a)\", \"2017-03-17T10:30:45Z\", 2017);\n    testFunction(\"year('a')\", \"2017-03-17T10:30:45Z\", 2017);\n    testFunction(\"month(a)\",\"2017-03-17T10:30:45Z\", 3);\n    testFunction(\"day(a)\",  \"2017-03-17T10:30:45Z\", 17);\n    testFunction(\"day('a')\",  \"2017-03-17T10:30:45Z\", 17);\n    testFunction(\"dayOfYear(a)\",  \"2017-03-17T10:30:45Z\", 76);\n    testFunction(\"dayOfQuarter(a)\",  \"2017-03-17T10:30:45Z\", 76);\n    testFunction(\"hour(a)\",   \"2017-03-17T10:30:45Z\", 10);\n    testFunction(\"minute(a)\", \"2017-03-17T10:30:45Z\", 30);\n    testFunction(\"quarter(a)\",\"2017-03-17T10:30:45Z\", 1);\n    testFunction(\"week(a)\",   \"2017-03-17T10:30:45Z\", 11);\n    testFunction(\"second(a)\", \"2017-03-17T10:30:45Z\", 45);\n    testFunction(\"epoch(a)\",  \"2017-03-17T10:30:45Z\", 1489746645000l);\n\n    testFunction(\"epoch(a)\",  new Date(1489746645500l).toInstant().toString(), 1489746645500l);\n    testFunction(\"epoch(a)\",  new Date(820454399990l).toInstant().toString(), 820454399990l);\n\n    //Additionally test all functions to make sure they return a non-null number\n    for (DatePartEvaluator.FUNCTION function : DatePartEvaluator.FUNCTION.values()) {\n      StreamEvaluator evaluator = factory.constructEvaluator(function+\"(a)\");\n      values.clear();\n      values.put(\"a\", \"2017-03-17T10:30:45Z\");\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertNotNull(function+\" should return a result\",result);\n      assertTrue(function+\" should return a number\", result instanceof Number);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/TemporalEvaluatorsTest#testAllFunctions().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAllFunctions() throws Exception {\n\n    //year, month, day, dayofyear, hour, minute, quarter, week, second, epoch\n    testFunction(\"year(a)\", \"1995-12-31T23:59:59Z\", 1995);\n    testFunction(\"month(a)\",\"1995-12-31T23:59:59Z\", 12);\n    testFunction(\"day(a)\",  \"1995-12-31T23:59:59Z\", 31);\n    testFunction(\"dayOfYear(a)\",  \"1995-12-31T23:59:59Z\", 365);\n    testFunction(\"dayOfQuarter(a)\",  \"1995-12-31T23:59:59Z\", 92);\n    testFunction(\"hour(a)\",   \"1995-12-31T23:59:59Z\", 23);\n    testFunction(\"minute(a)\", \"1995-12-31T23:59:59Z\", 59);\n    testFunction(\"quarter(a)\",\"1995-12-31T23:59:59Z\", 4);\n    testFunction(\"week(a)\",   \"1995-12-31T23:59:59Z\", 52);\n    testFunction(\"second(a)\", \"1995-12-31T23:59:58Z\", 58);\n    testFunction(\"epoch(a)\",  \"1995-12-31T23:59:59Z\", 820454399000l);\n\n    testFunction(\"year(a)\", \"2017-03-17T10:30:45Z\", 2017);\n    testFunction(\"year('a')\", \"2017-03-17T10:30:45Z\", 2017);\n    testFunction(\"month(a)\",\"2017-03-17T10:30:45Z\", 3);\n    testFunction(\"day(a)\",  \"2017-03-17T10:30:45Z\", 17);\n    testFunction(\"day('a')\",  \"2017-03-17T10:30:45Z\", 17);\n    testFunction(\"dayOfYear(a)\",  \"2017-03-17T10:30:45Z\", 76);\n    testFunction(\"dayOfQuarter(a)\",  \"2017-03-17T10:30:45Z\", 76);\n    testFunction(\"hour(a)\",   \"2017-03-17T10:30:45Z\", 10);\n    testFunction(\"minute(a)\", \"2017-03-17T10:30:45Z\", 30);\n    testFunction(\"quarter(a)\",\"2017-03-17T10:30:45Z\", 1);\n    testFunction(\"week(a)\",   \"2017-03-17T10:30:45Z\", 11);\n    testFunction(\"second(a)\", \"2017-03-17T10:30:45Z\", 45);\n    testFunction(\"epoch(a)\",  \"2017-03-17T10:30:45Z\", 1489746645000l);\n\n    testFunction(\"epoch(a)\",  new Date(1489746645500l).toInstant().toString(), 1489746645500l);\n    testFunction(\"epoch(a)\",  new Date(820454399990l).toInstant().toString(), 820454399990l);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1e7de64990e3928b90142a52fb92eeff556475","date":1503713257,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/TemporalEvaluatorsTest#testAllFunctions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/TemporalEvaluatorsTest#testAllFunctions().mjava","sourceNew":"  @Test\n  public void testAllFunctions() throws Exception {\n\n    //year, month, day, dayofyear, hour, minute, quarter, week, second, epoch\n    testFunction(\"year(a)\", \"1995-12-31T23:59:59Z\", 1995L);\n    testFunction(\"month(a)\",\"1995-12-31T23:59:59Z\", 12L);\n    testFunction(\"day(a)\",  \"1995-12-31T23:59:59Z\", 31L);\n    testFunction(\"dayOfYear(a)\",  \"1995-12-31T23:59:59Z\", 365L);\n    testFunction(\"dayOfQuarter(a)\",  \"1995-12-31T23:59:59Z\", 92L);\n    testFunction(\"hour(a)\",   \"1995-12-31T23:59:59Z\", 23L);\n    testFunction(\"minute(a)\", \"1995-12-31T23:59:59Z\", 59L);\n    testFunction(\"quarter(a)\",\"1995-12-31T23:59:59Z\", 4L);\n    testFunction(\"week(a)\",   \"1995-12-31T23:59:59Z\", 52L);\n    testFunction(\"second(a)\", \"1995-12-31T23:59:58Z\", 58L);\n    testFunction(\"epoch(a)\",  \"1995-12-31T23:59:59Z\", 820454399000l);\n\n    testFunction(\"year(a)\", \"2017-03-17T10:30:45Z\", 2017L);\n    testFunction(\"year('a')\", \"2017-03-17T10:30:45Z\", 2017L);\n    testFunction(\"month(a)\",\"2017-03-17T10:30:45Z\", 3L);\n    testFunction(\"day(a)\",  \"2017-03-17T10:30:45Z\", 17L);\n    testFunction(\"day('a')\",  \"2017-03-17T10:30:45Z\", 17L);\n    testFunction(\"dayOfYear(a)\",  \"2017-03-17T10:30:45Z\", 76L);\n    testFunction(\"dayOfQuarter(a)\",  \"2017-03-17T10:30:45Z\", 76L);\n    testFunction(\"hour(a)\",   \"2017-03-17T10:30:45Z\", 10L);\n    testFunction(\"minute(a)\", \"2017-03-17T10:30:45Z\", 30L);\n    testFunction(\"quarter(a)\",\"2017-03-17T10:30:45Z\", 1L);\n    testFunction(\"week(a)\",   \"2017-03-17T10:30:45Z\", 11L);\n    testFunction(\"second(a)\", \"2017-03-17T10:30:45Z\", 45L);\n    testFunction(\"epoch(a)\",  \"2017-03-17T10:30:45Z\", 1489746645000l);\n\n    testFunction(\"epoch(a)\",  new Date(1489746645500l).toInstant().toString(), 1489746645500l);\n    testFunction(\"epoch(a)\",  new Date(820454399990l).toInstant().toString(), 820454399990l);\n\n  }\n\n","sourceOld":"  @Test\n  public void testAllFunctions() throws Exception {\n\n    //year, month, day, dayofyear, hour, minute, quarter, week, second, epoch\n    testFunction(\"year(a)\", \"1995-12-31T23:59:59Z\", 1995);\n    testFunction(\"month(a)\",\"1995-12-31T23:59:59Z\", 12);\n    testFunction(\"day(a)\",  \"1995-12-31T23:59:59Z\", 31);\n    testFunction(\"dayOfYear(a)\",  \"1995-12-31T23:59:59Z\", 365);\n    testFunction(\"dayOfQuarter(a)\",  \"1995-12-31T23:59:59Z\", 92);\n    testFunction(\"hour(a)\",   \"1995-12-31T23:59:59Z\", 23);\n    testFunction(\"minute(a)\", \"1995-12-31T23:59:59Z\", 59);\n    testFunction(\"quarter(a)\",\"1995-12-31T23:59:59Z\", 4);\n    testFunction(\"week(a)\",   \"1995-12-31T23:59:59Z\", 52);\n    testFunction(\"second(a)\", \"1995-12-31T23:59:58Z\", 58);\n    testFunction(\"epoch(a)\",  \"1995-12-31T23:59:59Z\", 820454399000l);\n\n    testFunction(\"year(a)\", \"2017-03-17T10:30:45Z\", 2017);\n    testFunction(\"year('a')\", \"2017-03-17T10:30:45Z\", 2017);\n    testFunction(\"month(a)\",\"2017-03-17T10:30:45Z\", 3);\n    testFunction(\"day(a)\",  \"2017-03-17T10:30:45Z\", 17);\n    testFunction(\"day('a')\",  \"2017-03-17T10:30:45Z\", 17);\n    testFunction(\"dayOfYear(a)\",  \"2017-03-17T10:30:45Z\", 76);\n    testFunction(\"dayOfQuarter(a)\",  \"2017-03-17T10:30:45Z\", 76);\n    testFunction(\"hour(a)\",   \"2017-03-17T10:30:45Z\", 10);\n    testFunction(\"minute(a)\", \"2017-03-17T10:30:45Z\", 30);\n    testFunction(\"quarter(a)\",\"2017-03-17T10:30:45Z\", 1);\n    testFunction(\"week(a)\",   \"2017-03-17T10:30:45Z\", 11);\n    testFunction(\"second(a)\", \"2017-03-17T10:30:45Z\", 45);\n    testFunction(\"epoch(a)\",  \"2017-03-17T10:30:45Z\", 1489746645000l);\n\n    testFunction(\"epoch(a)\",  new Date(1489746645500l).toInstant().toString(), 1489746645500l);\n    testFunction(\"epoch(a)\",  new Date(820454399990l).toInstant().toString(), 820454399990l);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45c28dbb559366e1f4ef8077346552bfb3f7ecf6","date":1503738439,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/TemporalEvaluatorsTest#testAllFunctions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/TemporalEvaluatorsTest#testAllFunctions().mjava","sourceNew":"  @Test\n  public void testAllFunctions() throws Exception {\n\n    //year, month, day, dayofyear, hour, minute, quarter, week, second, epoch\n    testFunction(\"year(a)\", \"1995-12-31T23:59:59Z\", 1995L);\n    testFunction(\"month(a)\",\"1995-12-31T23:59:59Z\", 12L);\n    testFunction(\"day(a)\",  \"1995-12-31T23:59:59Z\", 31L);\n    testFunction(\"dayOfYear(a)\",  \"1995-12-31T23:59:59Z\", 365L);\n    testFunction(\"dayOfQuarter(a)\",  \"1995-12-31T23:59:59Z\", 92L);\n    testFunction(\"hour(a)\",   \"1995-12-31T23:59:59Z\", 23L);\n    testFunction(\"minute(a)\", \"1995-12-31T23:59:59Z\", 59L);\n    testFunction(\"quarter(a)\",\"1995-12-31T23:59:59Z\", 4L);\n    testFunction(\"week(a)\",   \"1995-12-31T23:59:59Z\", 52L);\n    testFunction(\"second(a)\", \"1995-12-31T23:59:58Z\", 58L);\n    testFunction(\"epoch(a)\",  \"1995-12-31T23:59:59Z\", 820454399000l);\n\n    testFunction(\"year(a)\", \"2017-03-17T10:30:45Z\", 2017L);\n    testFunction(\"year('a')\", \"2017-03-17T10:30:45Z\", 2017L);\n    testFunction(\"month(a)\",\"2017-03-17T10:30:45Z\", 3L);\n    testFunction(\"day(a)\",  \"2017-03-17T10:30:45Z\", 17L);\n    testFunction(\"day('a')\",  \"2017-03-17T10:30:45Z\", 17L);\n    testFunction(\"dayOfYear(a)\",  \"2017-03-17T10:30:45Z\", 76L);\n    testFunction(\"dayOfQuarter(a)\",  \"2017-03-17T10:30:45Z\", 76L);\n    testFunction(\"hour(a)\",   \"2017-03-17T10:30:45Z\", 10L);\n    testFunction(\"minute(a)\", \"2017-03-17T10:30:45Z\", 30L);\n    testFunction(\"quarter(a)\",\"2017-03-17T10:30:45Z\", 1L);\n    testFunction(\"week(a)\",   \"2017-03-17T10:30:45Z\", 11L);\n    testFunction(\"second(a)\", \"2017-03-17T10:30:45Z\", 45L);\n    testFunction(\"epoch(a)\",  \"2017-03-17T10:30:45Z\", 1489746645000l);\n\n    testFunction(\"epoch(a)\",  new Date(1489746645500l).toInstant().toString(), 1489746645500l);\n    testFunction(\"epoch(a)\",  new Date(820454399990l).toInstant().toString(), 820454399990l);\n\n  }\n\n","sourceOld":"  @Test\n  public void testAllFunctions() throws Exception {\n\n    //year, month, day, dayofyear, hour, minute, quarter, week, second, epoch\n    testFunction(\"year(a)\", \"1995-12-31T23:59:59Z\", 1995);\n    testFunction(\"month(a)\",\"1995-12-31T23:59:59Z\", 12);\n    testFunction(\"day(a)\",  \"1995-12-31T23:59:59Z\", 31);\n    testFunction(\"dayOfYear(a)\",  \"1995-12-31T23:59:59Z\", 365);\n    testFunction(\"dayOfQuarter(a)\",  \"1995-12-31T23:59:59Z\", 92);\n    testFunction(\"hour(a)\",   \"1995-12-31T23:59:59Z\", 23);\n    testFunction(\"minute(a)\", \"1995-12-31T23:59:59Z\", 59);\n    testFunction(\"quarter(a)\",\"1995-12-31T23:59:59Z\", 4);\n    testFunction(\"week(a)\",   \"1995-12-31T23:59:59Z\", 52);\n    testFunction(\"second(a)\", \"1995-12-31T23:59:58Z\", 58);\n    testFunction(\"epoch(a)\",  \"1995-12-31T23:59:59Z\", 820454399000l);\n\n    testFunction(\"year(a)\", \"2017-03-17T10:30:45Z\", 2017);\n    testFunction(\"year('a')\", \"2017-03-17T10:30:45Z\", 2017);\n    testFunction(\"month(a)\",\"2017-03-17T10:30:45Z\", 3);\n    testFunction(\"day(a)\",  \"2017-03-17T10:30:45Z\", 17);\n    testFunction(\"day('a')\",  \"2017-03-17T10:30:45Z\", 17);\n    testFunction(\"dayOfYear(a)\",  \"2017-03-17T10:30:45Z\", 76);\n    testFunction(\"dayOfQuarter(a)\",  \"2017-03-17T10:30:45Z\", 76);\n    testFunction(\"hour(a)\",   \"2017-03-17T10:30:45Z\", 10);\n    testFunction(\"minute(a)\", \"2017-03-17T10:30:45Z\", 30);\n    testFunction(\"quarter(a)\",\"2017-03-17T10:30:45Z\", 1);\n    testFunction(\"week(a)\",   \"2017-03-17T10:30:45Z\", 11);\n    testFunction(\"second(a)\", \"2017-03-17T10:30:45Z\", 45);\n    testFunction(\"epoch(a)\",  \"2017-03-17T10:30:45Z\", 1489746645000l);\n\n    testFunction(\"epoch(a)\",  new Date(1489746645500l).toInstant().toString(), 1489746645500l);\n    testFunction(\"epoch(a)\",  new Date(820454399990l).toInstant().toString(), 820454399990l);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/TemporalEvaluatorsTest#testAllFunctions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/TemporalEvaluatorsTest#testAllFunctions().mjava","sourceNew":"  @Test\n  public void testAllFunctions() throws Exception {\n\n    //year, month, day, dayofyear, hour, minute, quarter, week, second, epoch\n    testFunction(\"year(a)\", \"1995-12-31T23:59:59Z\", 1995L);\n    testFunction(\"month(a)\",\"1995-12-31T23:59:59Z\", 12L);\n    testFunction(\"day(a)\",  \"1995-12-31T23:59:59Z\", 31L);\n    testFunction(\"dayOfYear(a)\",  \"1995-12-31T23:59:59Z\", 365L);\n    testFunction(\"dayOfQuarter(a)\",  \"1995-12-31T23:59:59Z\", 92L);\n    testFunction(\"hour(a)\",   \"1995-12-31T23:59:59Z\", 23L);\n    testFunction(\"minute(a)\", \"1995-12-31T23:59:59Z\", 59L);\n    testFunction(\"quarter(a)\",\"1995-12-31T23:59:59Z\", 4L);\n    testFunction(\"week(a)\",   \"1995-12-31T23:59:59Z\", 52L);\n    testFunction(\"second(a)\", \"1995-12-31T23:59:58Z\", 58L);\n    testFunction(\"epoch(a)\",  \"1995-12-31T23:59:59Z\", 820454399000l);\n\n    testFunction(\"year(a)\", \"2017-03-17T10:30:45Z\", 2017L);\n    testFunction(\"year('a')\", \"2017-03-17T10:30:45Z\", 2017L);\n    testFunction(\"month(a)\",\"2017-03-17T10:30:45Z\", 3L);\n    testFunction(\"day(a)\",  \"2017-03-17T10:30:45Z\", 17L);\n    testFunction(\"day('a')\",  \"2017-03-17T10:30:45Z\", 17L);\n    testFunction(\"dayOfYear(a)\",  \"2017-03-17T10:30:45Z\", 76L);\n    testFunction(\"dayOfQuarter(a)\",  \"2017-03-17T10:30:45Z\", 76L);\n    testFunction(\"hour(a)\",   \"2017-03-17T10:30:45Z\", 10L);\n    testFunction(\"minute(a)\", \"2017-03-17T10:30:45Z\", 30L);\n    testFunction(\"quarter(a)\",\"2017-03-17T10:30:45Z\", 1L);\n    testFunction(\"week(a)\",   \"2017-03-17T10:30:45Z\", 11L);\n    testFunction(\"second(a)\", \"2017-03-17T10:30:45Z\", 45L);\n    testFunction(\"epoch(a)\",  \"2017-03-17T10:30:45Z\", 1489746645000l);\n\n    testFunction(\"epoch(a)\",  new Date(1489746645500l).toInstant().toString(), 1489746645500l);\n    testFunction(\"epoch(a)\",  new Date(820454399990l).toInstant().toString(), 820454399990l);\n\n  }\n\n","sourceOld":"  @Test\n  public void testAllFunctions() throws Exception {\n\n    //year, month, day, dayofyear, hour, minute, quarter, week, second, epoch\n    testFunction(\"year(a)\", \"1995-12-31T23:59:59Z\", 1995);\n    testFunction(\"month(a)\",\"1995-12-31T23:59:59Z\", 12);\n    testFunction(\"day(a)\",  \"1995-12-31T23:59:59Z\", 31);\n    testFunction(\"dayOfYear(a)\",  \"1995-12-31T23:59:59Z\", 365);\n    testFunction(\"dayOfQuarter(a)\",  \"1995-12-31T23:59:59Z\", 92);\n    testFunction(\"hour(a)\",   \"1995-12-31T23:59:59Z\", 23);\n    testFunction(\"minute(a)\", \"1995-12-31T23:59:59Z\", 59);\n    testFunction(\"quarter(a)\",\"1995-12-31T23:59:59Z\", 4);\n    testFunction(\"week(a)\",   \"1995-12-31T23:59:59Z\", 52);\n    testFunction(\"second(a)\", \"1995-12-31T23:59:58Z\", 58);\n    testFunction(\"epoch(a)\",  \"1995-12-31T23:59:59Z\", 820454399000l);\n\n    testFunction(\"year(a)\", \"2017-03-17T10:30:45Z\", 2017);\n    testFunction(\"year('a')\", \"2017-03-17T10:30:45Z\", 2017);\n    testFunction(\"month(a)\",\"2017-03-17T10:30:45Z\", 3);\n    testFunction(\"day(a)\",  \"2017-03-17T10:30:45Z\", 17);\n    testFunction(\"day('a')\",  \"2017-03-17T10:30:45Z\", 17);\n    testFunction(\"dayOfYear(a)\",  \"2017-03-17T10:30:45Z\", 76);\n    testFunction(\"dayOfQuarter(a)\",  \"2017-03-17T10:30:45Z\", 76);\n    testFunction(\"hour(a)\",   \"2017-03-17T10:30:45Z\", 10);\n    testFunction(\"minute(a)\", \"2017-03-17T10:30:45Z\", 30);\n    testFunction(\"quarter(a)\",\"2017-03-17T10:30:45Z\", 1);\n    testFunction(\"week(a)\",   \"2017-03-17T10:30:45Z\", 11);\n    testFunction(\"second(a)\", \"2017-03-17T10:30:45Z\", 45);\n    testFunction(\"epoch(a)\",  \"2017-03-17T10:30:45Z\", 1489746645000l);\n\n    testFunction(\"epoch(a)\",  new Date(1489746645500l).toInstant().toString(), 1489746645500l);\n    testFunction(\"epoch(a)\",  new Date(820454399990l).toInstant().toString(), 820454399990l);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c513d69b21508db62cccf741d0cdd9e0171ae1a5":["64ff6b743fd4051da7ebb3d397d1ef80833a741a"],"64ff6b743fd4051da7ebb3d397d1ef80833a741a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["c513d69b21508db62cccf741d0cdd9e0171ae1a5","ba1e7de64990e3928b90142a52fb92eeff556475"],"ba1e7de64990e3928b90142a52fb92eeff556475":["c513d69b21508db62cccf741d0cdd9e0171ae1a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"c513d69b21508db62cccf741d0cdd9e0171ae1a5":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6","ba1e7de64990e3928b90142a52fb92eeff556475"],"64ff6b743fd4051da7ebb3d397d1ef80833a741a":["c513d69b21508db62cccf741d0cdd9e0171ae1a5"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","64ff6b743fd4051da7ebb3d397d1ef80833a741a"],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ba1e7de64990e3928b90142a52fb92eeff556475":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}