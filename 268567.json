{"path":"contrib/miscellaneous/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testPrecedence().mjava","commits":[{"id":"e9a6ad8e299e8d7e15e32e68d75b73ed7d04756a","date":1114594353,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/miscellaneous/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testPrecedence().mjava","pathOld":"src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testPrecedence().mjava","sourceNew":"  /**\n   * This test differs from the original QueryParser, showing how the\n   * precedence issue has been corrected.\n   */\n  public void testPrecedence() throws Exception {\n    PrecedenceQueryParser parser = getParser(new WhitespaceAnalyzer());\n    Query query1 = parser.parse(\"A AND B OR C AND D\");\n    Query query2 = parser.parse(\"(A AND B) OR (C AND D)\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR B C\");\n    query2 = parser.parse(\"A B C\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\");\n    query2 = parser.parse(\"(+A +B) C\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B\");\n    query2 = parser.parse(\"+A -B\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B\");\n    query2 = parser.parse(\"A -B\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B AND C\");\n    query2 = parser.parse(\"A (-B +C)\");\n    assertEquals(query1, query2);\n  }\n\n","sourceOld":"  /**\n   * This test differs from the original QueryParser, showing how the\n   * precedence issue has been corrected.\n   */\n  public void testPrecedence() throws Exception {\n    PrecedenceQueryParser parser = getParser(new WhitespaceAnalyzer());\n    Query query1 = parser.parse(\"A AND B OR C AND D\");\n    Query query2 = parser.parse(\"(A AND B) OR (C AND D)\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR B C\");\n    query2 = parser.parse(\"A B C\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\");\n    query2 = parser.parse(\"(+A +B) C\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B\");\n    query2 = parser.parse(\"+A -B\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B\");\n    query2 = parser.parse(\"A -B\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B AND C\");\n    query2 = parser.parse(\"A (-B +C)\");\n    assertEquals(query1, query2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9129ce11ed65491288f215548376e03906d27474","date":1180494051,"type":5,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/miscellaneous/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#_testPrecedence().mjava","pathOld":"contrib/miscellaneous/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testPrecedence().mjava","sourceNew":"  /**\n   * This test differs from the original QueryParser, showing how the\n   * precedence issue has been corrected.\n   */\n  // failing tests disabled since PrecedenceQueryParser\n  // is currently unmaintained\n  public void _testPrecedence() throws Exception {\n    PrecedenceQueryParser parser = getParser(new WhitespaceAnalyzer());\n    Query query1 = parser.parse(\"A AND B OR C AND D\");\n    Query query2 = parser.parse(\"(A AND B) OR (C AND D)\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR B C\");\n    query2 = parser.parse(\"A B C\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\");\n    query2 = parser.parse(\"(+A +B) C\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B\");\n    query2 = parser.parse(\"+A -B\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B\");\n    query2 = parser.parse(\"A -B\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B AND C\");\n    query2 = parser.parse(\"A (-B +C)\");\n    assertEquals(query1, query2);\n  }\n\n","sourceOld":"  /**\n   * This test differs from the original QueryParser, showing how the\n   * precedence issue has been corrected.\n   */\n  public void testPrecedence() throws Exception {\n    PrecedenceQueryParser parser = getParser(new WhitespaceAnalyzer());\n    Query query1 = parser.parse(\"A AND B OR C AND D\");\n    Query query2 = parser.parse(\"(A AND B) OR (C AND D)\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR B C\");\n    query2 = parser.parse(\"A B C\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\");\n    query2 = parser.parse(\"(+A +B) C\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B\");\n    query2 = parser.parse(\"+A -B\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B\");\n    query2 = parser.parse(\"A -B\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B AND C\");\n    query2 = parser.parse(\"A (-B +C)\");\n    assertEquals(query1, query2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9129ce11ed65491288f215548376e03906d27474":["e9a6ad8e299e8d7e15e32e68d75b73ed7d04756a"],"e9a6ad8e299e8d7e15e32e68d75b73ed7d04756a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9129ce11ed65491288f215548376e03906d27474"]},"commit2Childs":{"9129ce11ed65491288f215548376e03906d27474":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9a6ad8e299e8d7e15e32e68d75b73ed7d04756a":["9129ce11ed65491288f215548376e03906d27474"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9a6ad8e299e8d7e15e32e68d75b73ed7d04756a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}