{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#DateRangePrefixTree().mjava","commits":[{"id":"8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093","date":1401932592,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#DateRangePrefixTree().mjava","pathOld":"/dev/null","sourceNew":"  private DateRangePrefixTree() {\n    super(new int[]{//sublevels by level\n        NUM_MYEARS,\n        1000,//1 thousand thousand-years in a million years\n        1000,//1 thousand years in a thousand-year\n        calFieldLen(Calendar.MONTH),\n        calFieldLen(Calendar.DAY_OF_MONTH),\n        calFieldLen(Calendar.HOUR_OF_DAY),\n        calFieldLen(Calendar.MINUTE),\n        calFieldLen(Calendar.SECOND),\n        calFieldLen(Calendar.MILLISECOND),\n    });\n    maxLV = (LevelledValue) toShape((Calendar)MAXCAL.clone());\n    minLV = (LevelledValue) toShape((Calendar)MINCAL.clone());\n    if (MAXCAL instanceof GregorianCalendar) {\n      //TODO this should be a configurable param by passing a Calendar surving as a template.\n      GregorianCalendar gCal = (GregorianCalendar)MAXCAL;\n      gregorianChangeDateLV = (LevelledValue) toShape(gCal.getGregorianChange());\n    } else {\n      gregorianChangeDateLV = null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb53c8e9da2afe33252ee698dda412264252cfa7","date":1418531581,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#DateRangePrefixTree().mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#DateRangePrefixTree().mjava","sourceNew":"  protected DateRangePrefixTree() {\n    super(new int[]{//sublevels by level\n        NUM_MYEARS,\n        1000,//1 thousand thousand-years in a million years\n        1000,//1 thousand years in a thousand-year\n        calFieldLen(Calendar.MONTH),\n        calFieldLen(Calendar.DAY_OF_MONTH),\n        calFieldLen(Calendar.HOUR_OF_DAY),\n        calFieldLen(Calendar.MINUTE),\n        calFieldLen(Calendar.SECOND),\n        calFieldLen(Calendar.MILLISECOND),\n    });\n    maxLV = toShape((Calendar)MAXCAL.clone());\n    minLV = toShape((Calendar)MINCAL.clone());\n    if (MAXCAL instanceof GregorianCalendar) {\n      //TODO this should be a configurable param by passing a Calendar serving as a template.\n      GregorianCalendar gCal = (GregorianCalendar)MAXCAL;\n      gregorianChangeDateLV = toUnitShape(gCal.getGregorianChange());\n    } else {\n      gregorianChangeDateLV = null;\n    }\n  }\n\n","sourceOld":"  private DateRangePrefixTree() {\n    super(new int[]{//sublevels by level\n        NUM_MYEARS,\n        1000,//1 thousand thousand-years in a million years\n        1000,//1 thousand years in a thousand-year\n        calFieldLen(Calendar.MONTH),\n        calFieldLen(Calendar.DAY_OF_MONTH),\n        calFieldLen(Calendar.HOUR_OF_DAY),\n        calFieldLen(Calendar.MINUTE),\n        calFieldLen(Calendar.SECOND),\n        calFieldLen(Calendar.MILLISECOND),\n    });\n    maxLV = (LevelledValue) toShape((Calendar)MAXCAL.clone());\n    minLV = (LevelledValue) toShape((Calendar)MINCAL.clone());\n    if (MAXCAL instanceof GregorianCalendar) {\n      //TODO this should be a configurable param by passing a Calendar surving as a template.\n      GregorianCalendar gCal = (GregorianCalendar)MAXCAL;\n      gregorianChangeDateLV = (LevelledValue) toShape(gCal.getGregorianChange());\n    } else {\n      gregorianChangeDateLV = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#DateRangePrefixTree().mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#DateRangePrefixTree().mjava","sourceNew":"  protected DateRangePrefixTree() {\n    super(new int[]{//sublevels by level\n        NUM_MYEARS,\n        1000,//1 thousand thousand-years in a million years\n        1000,//1 thousand years in a thousand-year\n        calFieldLen(Calendar.MONTH),\n        calFieldLen(Calendar.DAY_OF_MONTH),\n        calFieldLen(Calendar.HOUR_OF_DAY),\n        calFieldLen(Calendar.MINUTE),\n        calFieldLen(Calendar.SECOND),\n        calFieldLen(Calendar.MILLISECOND),\n    });\n    maxLV = toShape((Calendar)MAXCAL.clone());\n    minLV = toShape((Calendar)MINCAL.clone());\n    if (MAXCAL instanceof GregorianCalendar) {\n      //TODO this should be a configurable param by passing a Calendar serving as a template.\n      GregorianCalendar gCal = (GregorianCalendar)MAXCAL;\n      gregorianChangeDateLV = toUnitShape(gCal.getGregorianChange());\n    } else {\n      gregorianChangeDateLV = null;\n    }\n  }\n\n","sourceOld":"  protected DateRangePrefixTree() {\n    super(new int[]{//sublevels by level\n        NUM_MYEARS,\n        1000,//1 thousand thousand-years in a million years\n        1000,//1 thousand years in a thousand-year\n        calFieldLen(Calendar.MONTH),\n        calFieldLen(Calendar.DAY_OF_MONTH),\n        calFieldLen(Calendar.HOUR_OF_DAY),\n        calFieldLen(Calendar.MINUTE),\n        calFieldLen(Calendar.SECOND),\n        calFieldLen(Calendar.MILLISECOND),\n    });\n    maxLV = toShape((Calendar)MAXCAL.clone());\n    minLV = toShape((Calendar)MINCAL.clone());\n    if (MAXCAL instanceof GregorianCalendar) {\n      //TODO this should be a configurable param by passing a Calendar serving as a template.\n      GregorianCalendar gCal = (GregorianCalendar)MAXCAL;\n      gregorianChangeDateLV = toUnitShape(gCal.getGregorianChange());\n    } else {\n      gregorianChangeDateLV = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#DateRangePrefixTree().mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#DateRangePrefixTree().mjava","sourceNew":"  protected DateRangePrefixTree() {\n    super(new int[]{//sublevels by level\n        NUM_MYEARS,\n        1000,//1 thousand thousand-years in a million years\n        1000,//1 thousand years in a thousand-year\n        calFieldLen(Calendar.MONTH),\n        calFieldLen(Calendar.DAY_OF_MONTH),\n        calFieldLen(Calendar.HOUR_OF_DAY),\n        calFieldLen(Calendar.MINUTE),\n        calFieldLen(Calendar.SECOND),\n        calFieldLen(Calendar.MILLISECOND),\n    });\n    maxLV = toShape((Calendar)MAXCAL.clone());\n    minLV = toShape((Calendar)MINCAL.clone());\n    if (MAXCAL instanceof GregorianCalendar) {\n      //TODO this should be a configurable param by passing a Calendar serving as a template.\n      GregorianCalendar gCal = (GregorianCalendar)MAXCAL;\n      gregorianChangeDateLV = toUnitShape(gCal.getGregorianChange());\n    } else {\n      gregorianChangeDateLV = null;\n    }\n  }\n\n","sourceOld":"  protected DateRangePrefixTree() {\n    super(new int[]{//sublevels by level\n        NUM_MYEARS,\n        1000,//1 thousand thousand-years in a million years\n        1000,//1 thousand years in a thousand-year\n        calFieldLen(Calendar.MONTH),\n        calFieldLen(Calendar.DAY_OF_MONTH),\n        calFieldLen(Calendar.HOUR_OF_DAY),\n        calFieldLen(Calendar.MINUTE),\n        calFieldLen(Calendar.SECOND),\n        calFieldLen(Calendar.MILLISECOND),\n    });\n    maxLV = toShape((Calendar)MAXCAL.clone());\n    minLV = toShape((Calendar)MINCAL.clone());\n    if (MAXCAL instanceof GregorianCalendar) {\n      //TODO this should be a configurable param by passing a Calendar serving as a template.\n      GregorianCalendar gCal = (GregorianCalendar)MAXCAL;\n      gregorianChangeDateLV = toUnitShape(gCal.getGregorianChange());\n    } else {\n      gregorianChangeDateLV = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["cb53c8e9da2afe33252ee698dda412264252cfa7","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["cb53c8e9da2afe33252ee698dda412264252cfa7"],"8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"],"cb53c8e9da2afe33252ee698dda412264252cfa7":["8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093":["cb53c8e9da2afe33252ee698dda412264252cfa7"],"cb53c8e9da2afe33252ee698dda412264252cfa7":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}