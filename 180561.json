{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/HttpClientUtilTest#assertSSLHostnameVerifier(Class[#-extends-HostnameVerifier],SchemaRegistryProvider).mjava","commits":[{"id":"e67ae138c1173c6193dbcfd9a94142b99ed2a0c5","date":1524429517,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/HttpClientUtilTest#assertSSLHostnameVerifier(Class[#-extends-HostnameVerifier],SchemaRegistryProvider).mjava","pathOld":"/dev/null","sourceNew":"  private void assertSSLHostnameVerifier(Class<? extends HostnameVerifier> expected,\n                                         SchemaRegistryProvider provider) {\n    ConnectionSocketFactory socketFactory = provider.getSchemaRegistry().lookup(\"https\");\n    assertNotNull(\"unable to lookup https\", socketFactory);\n    assertTrue(\"socketFactory is not an SSLConnectionSocketFactory: \" + socketFactory.getClass(),\n               socketFactory instanceof SSLConnectionSocketFactory);\n    SSLConnectionSocketFactory sslSocketFactory = (SSLConnectionSocketFactory) socketFactory;\n    try {\n      Object hostnameVerifier = FieldUtils.readField(sslSocketFactory, \"hostnameVerifier\", true);\n      assertNotNull(\"sslSocketFactory has null hostnameVerifier\", hostnameVerifier);\n      assertEquals(\"sslSocketFactory does not have expected hostnameVerifier impl\",\n                   expected, hostnameVerifier.getClass());\n    } catch (IllegalAccessException e) {\n      throw new AssertionError(\"Unexpected access error reading hostnameVerifier field\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e856e5ac973044540959acff90fa900278d2692","date":1585275350,"type":5,"author":"Andy Throgmorton","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/HttpClientUtilTest#assertSSLHostnameVerifier(Class[#-extends-HostnameVerifier],SocketFactoryRegistryProvider).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/HttpClientUtilTest#assertSSLHostnameVerifier(Class[#-extends-HostnameVerifier],SchemaRegistryProvider).mjava","sourceNew":"  private void assertSSLHostnameVerifier(Class<? extends HostnameVerifier> expected,\n                                         SocketFactoryRegistryProvider provider) {\n    ConnectionSocketFactory socketFactory = provider.getSocketFactoryRegistry().lookup(\"https\");\n    assertNotNull(\"unable to lookup https\", socketFactory);\n    assertTrue(\"socketFactory is not an SSLConnectionSocketFactory: \" + socketFactory.getClass(),\n               socketFactory instanceof SSLConnectionSocketFactory);\n    SSLConnectionSocketFactory sslSocketFactory = (SSLConnectionSocketFactory) socketFactory;\n    try {\n      Object hostnameVerifier = FieldUtils.readField(sslSocketFactory, \"hostnameVerifier\", true);\n      assertNotNull(\"sslSocketFactory has null hostnameVerifier\", hostnameVerifier);\n      assertEquals(\"sslSocketFactory does not have expected hostnameVerifier impl\",\n                   expected, hostnameVerifier.getClass());\n    } catch (IllegalAccessException e) {\n      throw new AssertionError(\"Unexpected access error reading hostnameVerifier field\", e);\n    }\n  }\n\n","sourceOld":"  private void assertSSLHostnameVerifier(Class<? extends HostnameVerifier> expected,\n                                         SchemaRegistryProvider provider) {\n    ConnectionSocketFactory socketFactory = provider.getSchemaRegistry().lookup(\"https\");\n    assertNotNull(\"unable to lookup https\", socketFactory);\n    assertTrue(\"socketFactory is not an SSLConnectionSocketFactory: \" + socketFactory.getClass(),\n               socketFactory instanceof SSLConnectionSocketFactory);\n    SSLConnectionSocketFactory sslSocketFactory = (SSLConnectionSocketFactory) socketFactory;\n    try {\n      Object hostnameVerifier = FieldUtils.readField(sslSocketFactory, \"hostnameVerifier\", true);\n      assertNotNull(\"sslSocketFactory has null hostnameVerifier\", hostnameVerifier);\n      assertEquals(\"sslSocketFactory does not have expected hostnameVerifier impl\",\n                   expected, hostnameVerifier.getClass());\n    } catch (IllegalAccessException e) {\n      throw new AssertionError(\"Unexpected access error reading hostnameVerifier field\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e67ae138c1173c6193dbcfd9a94142b99ed2a0c5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9e856e5ac973044540959acff90fa900278d2692":["e67ae138c1173c6193dbcfd9a94142b99ed2a0c5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9e856e5ac973044540959acff90fa900278d2692"]},"commit2Childs":{"e67ae138c1173c6193dbcfd9a94142b99ed2a0c5":["9e856e5ac973044540959acff90fa900278d2692"],"9e856e5ac973044540959acff90fa900278d2692":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e67ae138c1173c6193dbcfd9a94142b99ed2a0c5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}