{"path":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#getConsumer(Type).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#getConsumer(Type).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/NormsConsumerPerField#getConsumer(Type).mjava","sourceNew":"  private DocValuesConsumer getConsumer(Type type) throws IOException {\n    if (consumer == null) {\n      fieldInfo.setNormValueType(type, false);\n      consumer = parent.newConsumer(docState.docWriter.newPerDocWriteState(\"\"), fieldInfo, type);\n      this.initType = type;\n    }\n    if (initType != type) {\n      throw new IllegalArgumentException(\"NormTypes for field: \" + fieldInfo.name + \" doesn't match \" + initType + \" != \" + type);\n    }\n    return consumer;\n  }\n\n","sourceOld":"  private DocValuesConsumer getConsumer(Type type) throws IOException {\n    if (consumer == null) {\n      fieldInfo.setNormValueType(type, false);\n      consumer = parent.newConsumer(docState.docWriter.newPerDocWriteState(\"\"), fieldInfo, type);\n      this.initType = type;\n    }\n    if (initType != type) {\n      throw new IllegalArgumentException(\"NormTypes for field: \" + fieldInfo.name + \" doesn't match \" + initType + \" != \" + type);\n    }\n    return consumer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ada808d1fd6b1afb13af55a1dee4c15527af578","date":1337156389,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#getConsumer(Type).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#getConsumer(Type).mjava","sourceNew":"  private DocValuesConsumer getConsumer(Type type) throws IOException {\n    if (consumer == null) {\n      assert fieldInfo.getNormType() == null || fieldInfo.getNormType() == type;\n      fieldInfo.setNormValueType(type);\n      consumer = parent.newConsumer(docState.docWriter.newPerDocWriteState(\"\"), fieldInfo, type);\n      this.initType = type;\n    }\n    if (initType != type) {\n      throw new IllegalArgumentException(\"NormTypes for field: \" + fieldInfo.name + \" doesn't match \" + initType + \" != \" + type);\n    }\n    return consumer;\n  }\n\n","sourceOld":"  private DocValuesConsumer getConsumer(Type type) throws IOException {\n    if (consumer == null) {\n      fieldInfo.setNormValueType(type, false);\n      consumer = parent.newConsumer(docState.docWriter.newPerDocWriteState(\"\"), fieldInfo, type);\n      this.initType = type;\n    }\n    if (initType != type) {\n      throw new IllegalArgumentException(\"NormTypes for field: \" + fieldInfo.name + \" doesn't match \" + initType + \" != \" + type);\n    }\n    return consumer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#getConsumer(Type).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#getConsumer(Type).mjava","sourceNew":"  private DocValuesConsumer getConsumer(Type type) throws IOException {\n    if (consumer == null) {\n      assert fieldInfo.getNormType() == null || fieldInfo.getNormType() == type;\n      fieldInfo.setNormValueType(type);\n      consumer = parent.newConsumer(docState.docWriter.newPerDocWriteState(\"\"), fieldInfo, type);\n      this.initType = type;\n    }\n    if (initType != type) {\n      throw new IllegalArgumentException(\"NormTypes for field: \" + fieldInfo.name + \" doesn't match \" + initType + \" != \" + type);\n    }\n    return consumer;\n  }\n\n","sourceOld":"  private DocValuesConsumer getConsumer(Type type) throws IOException {\n    if (consumer == null) {\n      fieldInfo.setNormValueType(type, false);\n      consumer = parent.newConsumer(docState.docWriter.newPerDocWriteState(\"\"), fieldInfo, type);\n      this.initType = type;\n    }\n    if (initType != type) {\n      throw new IllegalArgumentException(\"NormTypes for field: \" + fieldInfo.name + \" doesn't match \" + initType + \" != \" + type);\n    }\n    return consumer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30664cb1b9c7d634d5001fa13052e8adb962ea7c","date":1355178731,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#getConsumer(Type).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#getConsumer(Type).mjava","sourceNew":"  private DocValuesConsumer getConsumer(Type type) throws IOException {\n    if (consumer == null) {\n      if (fieldInfo.getNormType() != null && fieldInfo.getNormType() != type) {\n        throw new IllegalArgumentException(\"cannot change Norm type from \" + fieldInfo.getNormType() + \" to \" + type + \" for field \\\"\" + fieldInfo.name + \"\\\"\");\n      }\n      fieldInfo.setNormValueType(type);\n      consumer = parent.newConsumer(docState.docWriter.newPerDocWriteState(\"\"), fieldInfo, type);\n      this.initType = type;\n    }\n    if (initType != type) {\n      throw new IllegalArgumentException(\"NormTypes for field: \" + fieldInfo.name + \" doesn't match \" + initType + \" != \" + type);\n    }\n    return consumer;\n  }\n\n","sourceOld":"  private DocValuesConsumer getConsumer(Type type) throws IOException {\n    if (consumer == null) {\n      assert fieldInfo.getNormType() == null || fieldInfo.getNormType() == type;\n      fieldInfo.setNormValueType(type);\n      consumer = parent.newConsumer(docState.docWriter.newPerDocWriteState(\"\"), fieldInfo, type);\n      this.initType = type;\n    }\n    if (initType != type) {\n      throw new IllegalArgumentException(\"NormTypes for field: \" + fieldInfo.name + \" doesn't match \" + initType + \" != \" + type);\n    }\n    return consumer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e079e6b6e6f654e6ad193248a6889e5b03d09f0","date":1355181749,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#getConsumer(Type).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#getConsumer(Type).mjava","sourceNew":"  private DocValuesConsumer getConsumer(Type type) throws IOException {\n    if (consumer == null) {\n      if (fieldInfo.getNormType() != null && fieldInfo.getNormType() != type) {\n        throw new IllegalArgumentException(\"cannot change Norm type from \" + fieldInfo.getNormType() + \" to \" + type + \" for field \\\"\" + fieldInfo.name + \"\\\"\");\n      }\n      if (!DocValues.isNumber(type) && !DocValues.isFloat(type)) {\n        throw new IllegalArgumentException(\"Norm type must be numeric (got type \" + type + \" for field \\\"\" + fieldInfo.name + \"\\\"\");\n      }\n      fieldInfo.setNormValueType(type);\n      consumer = parent.newConsumer(docState.docWriter.newPerDocWriteState(\"\"), fieldInfo, type);\n      this.initType = type;\n    }\n    if (initType != type) {\n      throw new IllegalArgumentException(\"NormTypes for field: \" + fieldInfo.name + \" doesn't match \" + initType + \" != \" + type);\n    }\n    return consumer;\n  }\n\n","sourceOld":"  private DocValuesConsumer getConsumer(Type type) throws IOException {\n    if (consumer == null) {\n      if (fieldInfo.getNormType() != null && fieldInfo.getNormType() != type) {\n        throw new IllegalArgumentException(\"cannot change Norm type from \" + fieldInfo.getNormType() + \" to \" + type + \" for field \\\"\" + fieldInfo.name + \"\\\"\");\n      }\n      fieldInfo.setNormValueType(type);\n      consumer = parent.newConsumer(docState.docWriter.newPerDocWriteState(\"\"), fieldInfo, type);\n      this.initType = type;\n    }\n    if (initType != type) {\n      throw new IllegalArgumentException(\"NormTypes for field: \" + fieldInfo.name + \" doesn't match \" + initType + \" != \" + type);\n    }\n    return consumer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#getConsumer(Type).mjava","sourceNew":null,"sourceOld":"  private DocValuesConsumer getConsumer(Type type) throws IOException {\n    if (consumer == null) {\n      if (fieldInfo.getNormType() != null && fieldInfo.getNormType() != type) {\n        throw new IllegalArgumentException(\"cannot change Norm type from \" + fieldInfo.getNormType() + \" to \" + type + \" for field \\\"\" + fieldInfo.name + \"\\\"\");\n      }\n      if (!DocValues.isNumber(type) && !DocValues.isFloat(type)) {\n        throw new IllegalArgumentException(\"Norm type must be numeric (got type \" + type + \" for field \\\"\" + fieldInfo.name + \"\\\"\");\n      }\n      fieldInfo.setNormValueType(type);\n      consumer = parent.newConsumer(docState.docWriter.newPerDocWriteState(\"\"), fieldInfo, type);\n      this.initType = type;\n    }\n    if (initType != type) {\n      throw new IllegalArgumentException(\"NormTypes for field: \" + fieldInfo.name + \" doesn't match \" + initType + \" != \" + type);\n    }\n    return consumer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#getConsumer(Type).mjava","sourceNew":null,"sourceOld":"  private DocValuesConsumer getConsumer(Type type) throws IOException {\n    if (consumer == null) {\n      assert fieldInfo.getNormType() == null || fieldInfo.getNormType() == type;\n      fieldInfo.setNormValueType(type);\n      consumer = parent.newConsumer(docState.docWriter.newPerDocWriteState(\"\"), fieldInfo, type);\n      this.initType = type;\n    }\n    if (initType != type) {\n      throw new IllegalArgumentException(\"NormTypes for field: \" + fieldInfo.name + \" doesn't match \" + initType + \" != \" + type);\n    }\n    return consumer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","2ada808d1fd6b1afb13af55a1dee4c15527af578"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","0837ab0472feecb3a54260729d845f839e1cbd72"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2ada808d1fd6b1afb13af55a1dee4c15527af578":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0837ab0472feecb3a54260729d845f839e1cbd72":["5e079e6b6e6f654e6ad193248a6889e5b03d09f0"],"30664cb1b9c7d634d5001fa13052e8adb962ea7c":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"5e079e6b6e6f654e6ad193248a6889e5b03d09f0":["30664cb1b9c7d634d5001fa13052e8adb962ea7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["d4d69c535930b5cce125cff868d40f6373dc27d4","30664cb1b9c7d634d5001fa13052e8adb962ea7c"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","2ada808d1fd6b1afb13af55a1dee4c15527af578"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2ada808d1fd6b1afb13af55a1dee4c15527af578":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"30664cb1b9c7d634d5001fa13052e8adb962ea7c":["5e079e6b6e6f654e6ad193248a6889e5b03d09f0"],"5e079e6b6e6f654e6ad193248a6889e5b03d09f0":["0837ab0472feecb3a54260729d845f839e1cbd72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}