{"path":"solr/core/src/test/org/apache/solr/util/hll/BitVectorTest#registerIteratorTest().mjava","commits":[{"id":"6faa211c4af605e3cf078a76d200c1dc348973f5","date":1437043657,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/hll/BitVectorTest#registerIteratorTest().mjava","pathOld":"/dev/null","sourceNew":"    // ========================================================================\n    /**\n     * Tests {@link BitVector#registerIterator()}\n     */\n    @Test\n    public void registerIteratorTest() {\n        { // scoped locally for sanity\n            // NOTE:  registers are only 5bits wide\n            final BitVector vector1 = new BitVector(5/*width*/, 128/*count, 2^7*/);\n            final BitVector vector2 = new BitVector(5/*width*/, 128/*count, 2^7*/);\n            final BitVector vector3 = new BitVector(5/*width*/, 128/*count, 2^7*/);\n            final BitVector vector4 = new BitVector(5/*width*/, 128/*count, 2^7*/);\n\n            for(int i=0; i<128/*2^7*/; i++) {\n                vector1.setRegister(i, 0x1F);\n                vector2.setRegister(i, (i & 0x1F));\n                vector3.setRegister(i, ((127 - i) & 0x1F));\n                vector4.setRegister(i, 0x15);\n            }\n\n            final LongIterator registerIterator1 = vector1.registerIterator();\n            final LongIterator registerIterator2 = vector2.registerIterator();\n            final LongIterator registerIterator3 = vector3.registerIterator();\n            final LongIterator registerIterator4 = vector4.registerIterator();\n            for(int i=0; i<128/*2^7*/; i++) {\n                assertEquals(registerIterator1.hasNext(), true);\n                assertEquals(registerIterator2.hasNext(), true);\n                assertEquals(registerIterator3.hasNext(), true);\n                assertEquals(registerIterator4.hasNext(), true);\n\n                assertEquals(registerIterator1.next(), 0x1F);\n                assertEquals(registerIterator2.next(), (i & 0x1F));\n                assertEquals(registerIterator3.next(), ((127 - i) & 0x1F));\n                assertEquals(registerIterator4.next(), 0x15);\n            }\n            assertEquals(registerIterator1.hasNext(), false/*no more*/);\n            assertEquals(registerIterator2.hasNext(), false/*no more*/);\n            assertEquals(registerIterator3.hasNext(), false/*no more*/);\n            assertEquals(registerIterator4.hasNext(), false/*no more*/);\n        }\n\n        { // scoped locally for sanity\n            // Vectors that are shorter than one word\n            assertIterator(1, 12/* 1*12=12 bits, fewer than a single word */);\n            assertIterator(2, 12/* 2*12=24 bits, fewer than a single word */);\n            assertIterator(3, 12/* 3*12=36 bits, fewer than a single word */);\n            assertIterator(4, 12/* 4*12=48 bits, fewer than a single word */);\n\n            // Vectors that don't fit exactly into longs\n            assertIterator(5, 16/* 5*16=80 bits */);\n            assertIterator(5, 32/* 5*32=160 bits */);\n        }\n\n        // Iterate over vectors that are padded\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b5ee4c66244bdfcc4796a114519d47701b2c026","date":1437132013,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/hll/BitVectorTest#registerIteratorTest().mjava","pathOld":"/dev/null","sourceNew":"    // ========================================================================\n    /**\n     * Tests {@link BitVector#registerIterator()}\n     */\n    @Test\n    public void registerIteratorTest() {\n        { // scoped locally for sanity\n            // NOTE:  registers are only 5bits wide\n            final BitVector vector1 = new BitVector(5/*width*/, 128/*count, 2^7*/);\n            final BitVector vector2 = new BitVector(5/*width*/, 128/*count, 2^7*/);\n            final BitVector vector3 = new BitVector(5/*width*/, 128/*count, 2^7*/);\n            final BitVector vector4 = new BitVector(5/*width*/, 128/*count, 2^7*/);\n\n            for(int i=0; i<128/*2^7*/; i++) {\n                vector1.setRegister(i, 0x1F);\n                vector2.setRegister(i, (i & 0x1F));\n                vector3.setRegister(i, ((127 - i) & 0x1F));\n                vector4.setRegister(i, 0x15);\n            }\n\n            final LongIterator registerIterator1 = vector1.registerIterator();\n            final LongIterator registerIterator2 = vector2.registerIterator();\n            final LongIterator registerIterator3 = vector3.registerIterator();\n            final LongIterator registerIterator4 = vector4.registerIterator();\n            for(int i=0; i<128/*2^7*/; i++) {\n                assertEquals(registerIterator1.hasNext(), true);\n                assertEquals(registerIterator2.hasNext(), true);\n                assertEquals(registerIterator3.hasNext(), true);\n                assertEquals(registerIterator4.hasNext(), true);\n\n                assertEquals(registerIterator1.next(), 0x1F);\n                assertEquals(registerIterator2.next(), (i & 0x1F));\n                assertEquals(registerIterator3.next(), ((127 - i) & 0x1F));\n                assertEquals(registerIterator4.next(), 0x15);\n            }\n            assertEquals(registerIterator1.hasNext(), false/*no more*/);\n            assertEquals(registerIterator2.hasNext(), false/*no more*/);\n            assertEquals(registerIterator3.hasNext(), false/*no more*/);\n            assertEquals(registerIterator4.hasNext(), false/*no more*/);\n        }\n\n        { // scoped locally for sanity\n            // Vectors that are shorter than one word\n            assertIterator(1, 12/* 1*12=12 bits, fewer than a single word */);\n            assertIterator(2, 12/* 2*12=24 bits, fewer than a single word */);\n            assertIterator(3, 12/* 3*12=36 bits, fewer than a single word */);\n            assertIterator(4, 12/* 4*12=48 bits, fewer than a single word */);\n\n            // Vectors that don't fit exactly into longs\n            assertIterator(5, 16/* 5*16=80 bits */);\n            assertIterator(5, 32/* 5*32=160 bits */);\n        }\n\n        // Iterate over vectors that are padded\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6faa211c4af605e3cf078a76d200c1dc348973f5"],"6faa211c4af605e3cf078a76d200c1dc348973f5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3b5ee4c66244bdfcc4796a114519d47701b2c026"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b5ee4c66244bdfcc4796a114519d47701b2c026","6faa211c4af605e3cf078a76d200c1dc348973f5"],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6faa211c4af605e3cf078a76d200c1dc348973f5":["3b5ee4c66244bdfcc4796a114519d47701b2c026"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}