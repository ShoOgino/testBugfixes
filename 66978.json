{"path":"contrib/queries/src/java/org/apache/lucene/search/trie/AbstractTrieRangeFilter#fillBits(IndexReader,OpenBitSet,TermDocs,String,String).mjava","commits":[{"id":"c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1","date":1239104855,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/AbstractTrieRangeFilter#fillBits(IndexReader,OpenBitSet,TermDocs,String,String).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/AbstractTrieRangeFilter#fillBits(IndexReader,OpenBitSet,TermDocs,String,String,String).mjava","sourceNew":"  void fillBits(\r\n    final IndexReader reader,\r\n    final OpenBitSet bits, final TermDocs termDocs,\r\n    final String lowerTerm, final String upperTerm\r\n  ) throws IOException {\r\n    final int len=lowerTerm.length();\r\n    assert upperTerm.length()==len;\r\n    \r\n    // find the docs\r\n    final TermEnum enumerator = reader.terms(new Term(field, lowerTerm));\r\n    try {\r\n      do {\r\n        final Term term = enumerator.term();\r\n        if (term!=null && term.field()==field) {\r\n          // break out when upperTerm reached or length of term is different\r\n          final String t=term.text();\r\n          if (len!=t.length() || t.compareTo(upperTerm)>0) break;\r\n          // we have a good term, find the docs\r\n          lastNumberOfTerms++;\r\n          termDocs.seek(enumerator);\r\n          while (termDocs.next()) bits.set(termDocs.doc());\r\n        } else break;\r\n      } while (enumerator.next());\r\n    } finally {\r\n      enumerator.close();\r\n    }\r\n  }\r\n\n","sourceOld":"  void fillBits(\r\n    final IndexReader reader,\r\n    final OpenBitSet bits, final TermDocs termDocs,\r\n    String field,\r\n    final String lowerTerm, final String upperTerm\r\n  ) throws IOException {\r\n    final int len=lowerTerm.length();\r\n    assert upperTerm.length()==len;\r\n    field=field.intern();\r\n    \r\n    // find the docs\r\n    final TermEnum enumerator = reader.terms(new Term(field, lowerTerm));\r\n    try {\r\n      do {\r\n        final Term term = enumerator.term();\r\n        if (term!=null && term.field()==field) {\r\n          // break out when upperTerm reached or length of term is different\r\n          final String t=term.text();\r\n          if (len!=t.length() || t.compareTo(upperTerm)>0) break;\r\n          // we have a good term, find the docs\r\n          lastNumberOfTerms++;\r\n          termDocs.seek(enumerator);\r\n          while (termDocs.next()) bits.set(termDocs.doc());\r\n        } else break;\r\n      } while (enumerator.next());\r\n    } finally {\r\n      enumerator.close();\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9c5935b70b4650c37e1ac32e6ee4f93ee4449cc","date":1239886708,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/AbstractTrieRangeFilter#fillBits(IndexReader,OpenBitSet,TermDocs,String,String).mjava","sourceNew":null,"sourceOld":"  void fillBits(\r\n    final IndexReader reader,\r\n    final OpenBitSet bits, final TermDocs termDocs,\r\n    final String lowerTerm, final String upperTerm\r\n  ) throws IOException {\r\n    final int len=lowerTerm.length();\r\n    assert upperTerm.length()==len;\r\n    \r\n    // find the docs\r\n    final TermEnum enumerator = reader.terms(new Term(field, lowerTerm));\r\n    try {\r\n      do {\r\n        final Term term = enumerator.term();\r\n        if (term!=null && term.field()==field) {\r\n          // break out when upperTerm reached or length of term is different\r\n          final String t=term.text();\r\n          if (len!=t.length() || t.compareTo(upperTerm)>0) break;\r\n          // we have a good term, find the docs\r\n          lastNumberOfTerms++;\r\n          termDocs.seek(enumerator);\r\n          while (termDocs.next()) bits.set(termDocs.doc());\r\n        } else break;\r\n      } while (enumerator.next());\r\n    } finally {\r\n      enumerator.close();\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9c5935b70b4650c37e1ac32e6ee4f93ee4449cc":["c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9c5935b70b4650c37e1ac32e6ee4f93ee4449cc"]},"commit2Childs":{"c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1":["c9c5935b70b4650c37e1ac32e6ee4f93ee4449cc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1"],"c9c5935b70b4650c37e1ac32e6ee4f93ee4449cc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}