{"path":"solr/core/src/test/org/apache/hadoop/fs/FileUtil#unZip(InputStream,File).mjava","commits":[{"id":"6bdf107cf16be0f22504ae184fed81596665a244","date":1576012524,"type":0,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/hadoop/fs/FileUtil#unZip(InputStream,File).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Given a stream input it will unzip the it in the unzip directory.\n   * passed as the second parameter\n   * @param inputStream The zip file as input\n   * @param toDir The unzip directory where to unzip the zip file.\n   * @throws IOException an exception occurred\n   */\n  public static void unZip(InputStream inputStream, File toDir)\n      throws IOException {\n    try (ZipInputStream zip = new ZipInputStream(inputStream)) {\n      int numOfFailedLastModifiedSet = 0;\n      String targetDirPath = toDir.getCanonicalPath() + File.separator;\n      for(ZipEntry entry = zip.getNextEntry();\n          entry != null;\n          entry = zip.getNextEntry()) {\n        if (!entry.isDirectory()) {\n          File file = new File(toDir, entry.getName());\n          if (!file.getCanonicalPath().startsWith(targetDirPath)) {\n            throw new IOException(\"expanding \" + entry.getName()\n                + \" would create file outside of \" + toDir);\n          }\n          File parent = file.getParentFile();\n          if (!parent.mkdirs() &&\n              !parent.isDirectory()) {\n            throw new IOException(\"Mkdirs failed to create \" +\n                parent.getAbsolutePath());\n          }\n          try (OutputStream out = new FileOutputStream(file)) {\n            IOUtils.copyBytes(zip, out, BUFFER_SIZE);\n          }\n          if (!file.setLastModified(entry.getTime())) {\n            numOfFailedLastModifiedSet++;\n          }\n        }\n      }\n      if (numOfFailedLastModifiedSet > 0) {\n        LOG.warn(\"Could not set last modfied time for {} file(s)\",\n            numOfFailedLastModifiedSet);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a229cb50768e988c50a2106bdae3a92154f428bf","date":1576051038,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/hadoop/fs/FileUtil#unZip(InputStream,File).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Given a stream input it will unzip the it in the unzip directory.\n   * passed as the second parameter\n   * @param inputStream The zip file as input\n   * @param toDir The unzip directory where to unzip the zip file.\n   * @throws IOException an exception occurred\n   */\n  public static void unZip(InputStream inputStream, File toDir)\n      throws IOException {\n    try (ZipInputStream zip = new ZipInputStream(inputStream)) {\n      int numOfFailedLastModifiedSet = 0;\n      String targetDirPath = toDir.getCanonicalPath() + File.separator;\n      for(ZipEntry entry = zip.getNextEntry();\n          entry != null;\n          entry = zip.getNextEntry()) {\n        if (!entry.isDirectory()) {\n          File file = new File(toDir, entry.getName());\n          if (!file.getCanonicalPath().startsWith(targetDirPath)) {\n            throw new IOException(\"expanding \" + entry.getName()\n                + \" would create file outside of \" + toDir);\n          }\n          File parent = file.getParentFile();\n          if (!parent.mkdirs() &&\n              !parent.isDirectory()) {\n            throw new IOException(\"Mkdirs failed to create \" +\n                parent.getAbsolutePath());\n          }\n          try (OutputStream out = new FileOutputStream(file)) {\n            IOUtils.copyBytes(zip, out, BUFFER_SIZE);\n          }\n          if (!file.setLastModified(entry.getTime())) {\n            numOfFailedLastModifiedSet++;\n          }\n        }\n      }\n      if (numOfFailedLastModifiedSet > 0) {\n        LOG.warn(\"Could not set last modfied time for {} file(s)\",\n            numOfFailedLastModifiedSet);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a229cb50768e988c50a2106bdae3a92154f428bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6bdf107cf16be0f22504ae184fed81596665a244"],"6bdf107cf16be0f22504ae184fed81596665a244":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6bdf107cf16be0f22504ae184fed81596665a244"]},"commit2Childs":{"a229cb50768e988c50a2106bdae3a92154f428bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a229cb50768e988c50a2106bdae3a92154f428bf","6bdf107cf16be0f22504ae184fed81596665a244"],"6bdf107cf16be0f22504ae184fed81596665a244":["a229cb50768e988c50a2106bdae3a92154f428bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a229cb50768e988c50a2106bdae3a92154f428bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}