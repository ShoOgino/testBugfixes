{"path":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(SolrQueryRequest,String).mjava","commits":[{"id":"2a4f729cab8ab6d4bf8365940c6ee4e17a0cfdd9","date":1371479482,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(SolrQueryRequest,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(SolrQueryRequest,String,String).mjava","sourceNew":"  private List<Node> getCollectionUrls(SolrQueryRequest req, String collection) {\n    ClusterState clusterState = req.getCore().getCoreDescriptor()\n        .getCoreContainer().getZkController().getClusterState();\n    List<Node> urls = new ArrayList<Node>();\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + clusterState);\n    }\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n\n      Map<String,Replica> shardMap = replicas.getReplicasMap();\n      \n      for (Entry<String,Replica> entry : shardMap.entrySet()) {\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (clusterState.liveNodesContain(nodeProps.getNodeName())) {\n          urls.add(new StdNode(nodeProps));\n        }\n      }\n    }\n    if (urls.size() == 0) {\n      return null;\n    }\n    return urls;\n  }\n\n","sourceOld":"  private List<Node> getCollectionUrls(SolrQueryRequest req, String collection, String coreNodeName) {\n    ClusterState clusterState = req.getCore().getCoreDescriptor()\n        .getCoreContainer().getZkController().getClusterState();\n    List<Node> urls = new ArrayList<Node>();\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + clusterState);\n    }\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n\n      Map<String,Replica> shardMap = replicas.getReplicasMap();\n      \n      for (Entry<String,Replica> entry : shardMap.entrySet()) {\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !entry.getKey().equals(coreNodeName)) {\n          urls.add(new StdNode(nodeProps));\n        }\n      }\n    }\n    if (urls.size() == 0) {\n      return null;\n    }\n    return urls;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(SolrQueryRequest,String).mjava","pathOld":"/dev/null","sourceNew":"  private List<Node> getCollectionUrls(SolrQueryRequest req, String collection) {\n    ClusterState clusterState = req.getCore().getCoreDescriptor()\n        .getCoreContainer().getZkController().getClusterState();\n    List<Node> urls = new ArrayList<Node>();\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + clusterState);\n    }\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n\n      Map<String,Replica> shardMap = replicas.getReplicasMap();\n      \n      for (Entry<String,Replica> entry : shardMap.entrySet()) {\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (clusterState.liveNodesContain(nodeProps.getNodeName())) {\n          urls.add(new StdNode(nodeProps));\n        }\n      }\n    }\n    if (urls.size() == 0) {\n      return null;\n    }\n    return urls;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(SolrQueryRequest,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(SolrQueryRequest,String).mjava","sourceNew":"  private List<Node> getCollectionUrls(SolrQueryRequest req, String collection) {\n    ClusterState clusterState = req.getCore().getCoreDescriptor()\n        .getCoreContainer().getZkController().getClusterState();\n    List<Node> urls = new ArrayList<>();\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + clusterState);\n    }\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n\n      Map<String,Replica> shardMap = replicas.getReplicasMap();\n      \n      for (Entry<String,Replica> entry : shardMap.entrySet()) {\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (clusterState.liveNodesContain(nodeProps.getNodeName())) {\n          urls.add(new StdNode(nodeProps));\n        }\n      }\n    }\n    if (urls.size() == 0) {\n      return null;\n    }\n    return urls;\n  }\n\n","sourceOld":"  private List<Node> getCollectionUrls(SolrQueryRequest req, String collection) {\n    ClusterState clusterState = req.getCore().getCoreDescriptor()\n        .getCoreContainer().getZkController().getClusterState();\n    List<Node> urls = new ArrayList<Node>();\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + clusterState);\n    }\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n\n      Map<String,Replica> shardMap = replicas.getReplicasMap();\n      \n      for (Entry<String,Replica> entry : shardMap.entrySet()) {\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (clusterState.liveNodesContain(nodeProps.getNodeName())) {\n          urls.add(new StdNode(nodeProps));\n        }\n      }\n    }\n    if (urls.size() == 0) {\n      return null;\n    }\n    return urls;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"14d5815ecbef89580f5c48990bcd433f04f8563a","date":1399564106,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(SolrQueryRequest,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(SolrQueryRequest,String).mjava","sourceNew":"  private List<Node> getCollectionUrls(SolrQueryRequest req, String collection) {\n    ClusterState clusterState = req.getCore().getCoreDescriptor()\n        .getCoreContainer().getZkController().getClusterState();\n    List<Node> urls = new ArrayList<>();\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + clusterState);\n    }\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n\n      Map<String,Replica> shardMap = replicas.getReplicasMap();\n      \n      for (Entry<String,Replica> entry : shardMap.entrySet()) {\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (clusterState.liveNodesContain(nodeProps.getNodeName())) {\n          urls.add(new StdNode(nodeProps, collection, replicas.getName()));\n        }\n      }\n    }\n    if (urls.size() == 0) {\n      return null;\n    }\n    return urls;\n  }\n\n","sourceOld":"  private List<Node> getCollectionUrls(SolrQueryRequest req, String collection) {\n    ClusterState clusterState = req.getCore().getCoreDescriptor()\n        .getCoreContainer().getZkController().getClusterState();\n    List<Node> urls = new ArrayList<>();\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + clusterState);\n    }\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n\n      Map<String,Replica> shardMap = replicas.getReplicasMap();\n      \n      for (Entry<String,Replica> entry : shardMap.entrySet()) {\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (clusterState.liveNodesContain(nodeProps.getNodeName())) {\n          urls.add(new StdNode(nodeProps));\n        }\n      }\n    }\n    if (urls.size() == 0) {\n      return null;\n    }\n    return urls;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7350fba633b826986454e97668c5ad03b46bcaca","date":1446484423,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(SolrQueryRequest,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(SolrQueryRequest,String).mjava","sourceNew":"  private List<Node> getCollectionUrls(SolrQueryRequest req, String collection) {\n    ClusterState clusterState = req.getCore().getCoreDescriptor()\n        .getCoreContainer().getZkController().getClusterState();\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + clusterState);\n    }\n    final List<Node> urls = new ArrayList<>(slices.size());\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n\n      Map<String,Replica> shardMap = replicas.getReplicasMap();\n      \n      for (Entry<String,Replica> entry : shardMap.entrySet()) {\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (clusterState.liveNodesContain(nodeProps.getNodeName())) {\n          urls.add(new StdNode(nodeProps, collection, replicas.getName()));\n        }\n      }\n    }\n    if (urls.isEmpty()) {\n      return null;\n    }\n    return urls;\n  }\n\n","sourceOld":"  private List<Node> getCollectionUrls(SolrQueryRequest req, String collection) {\n    ClusterState clusterState = req.getCore().getCoreDescriptor()\n        .getCoreContainer().getZkController().getClusterState();\n    List<Node> urls = new ArrayList<>();\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + clusterState);\n    }\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n\n      Map<String,Replica> shardMap = replicas.getReplicasMap();\n      \n      for (Entry<String,Replica> entry : shardMap.entrySet()) {\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (clusterState.liveNodesContain(nodeProps.getNodeName())) {\n          urls.add(new StdNode(nodeProps, collection, replicas.getName()));\n        }\n      }\n    }\n    if (urls.size() == 0) {\n      return null;\n    }\n    return urls;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(SolrQueryRequest,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(SolrQueryRequest,String).mjava","sourceNew":"  private List<Node> getCollectionUrls(SolrQueryRequest req, String collection) {\n    ClusterState clusterState = req.getCore()\n        .getCoreContainer().getZkController().getClusterState();\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + clusterState);\n    }\n    final List<Node> urls = new ArrayList<>(slices.size());\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n\n      Map<String,Replica> shardMap = replicas.getReplicasMap();\n      \n      for (Entry<String,Replica> entry : shardMap.entrySet()) {\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (clusterState.liveNodesContain(nodeProps.getNodeName())) {\n          urls.add(new StdNode(nodeProps, collection, replicas.getName()));\n        }\n      }\n    }\n    if (urls.isEmpty()) {\n      return null;\n    }\n    return urls;\n  }\n\n","sourceOld":"  private List<Node> getCollectionUrls(SolrQueryRequest req, String collection) {\n    ClusterState clusterState = req.getCore().getCoreDescriptor()\n        .getCoreContainer().getZkController().getClusterState();\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + clusterState);\n    }\n    final List<Node> urls = new ArrayList<>(slices.size());\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n\n      Map<String,Replica> shardMap = replicas.getReplicasMap();\n      \n      for (Entry<String,Replica> entry : shardMap.entrySet()) {\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (clusterState.liveNodesContain(nodeProps.getNodeName())) {\n          urls.add(new StdNode(nodeProps, collection, replicas.getName()));\n        }\n      }\n    }\n    if (urls.isEmpty()) {\n      return null;\n    }\n    return urls;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(SolrQueryRequest,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(SolrQueryRequest,String).mjava","sourceNew":"  private List<Node> getCollectionUrls(SolrQueryRequest req, String collection) {\n    ClusterState clusterState = req.getCore()\n        .getCoreContainer().getZkController().getClusterState();\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + clusterState);\n    }\n    final List<Node> urls = new ArrayList<>(slices.size());\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n\n      Map<String,Replica> shardMap = replicas.getReplicasMap();\n      \n      for (Entry<String,Replica> entry : shardMap.entrySet()) {\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (clusterState.liveNodesContain(nodeProps.getNodeName())) {\n          urls.add(new StdNode(nodeProps, collection, replicas.getName()));\n        }\n      }\n    }\n    if (urls.isEmpty()) {\n      return null;\n    }\n    return urls;\n  }\n\n","sourceOld":"  private List<Node> getCollectionUrls(SolrQueryRequest req, String collection) {\n    ClusterState clusterState = req.getCore().getCoreDescriptor()\n        .getCoreContainer().getZkController().getClusterState();\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + clusterState);\n    }\n    final List<Node> urls = new ArrayList<>(slices.size());\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n\n      Map<String,Replica> shardMap = replicas.getReplicasMap();\n      \n      for (Entry<String,Replica> entry : shardMap.entrySet()) {\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (clusterState.liveNodesContain(nodeProps.getNodeName())) {\n          urls.add(new StdNode(nodeProps, collection, replicas.getName()));\n        }\n      }\n    }\n    if (urls.isEmpty()) {\n      return null;\n    }\n    return urls;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":5,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(SolrQueryRequest,String,EnumSet[Replica.Type]).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(SolrQueryRequest,String).mjava","sourceNew":"  private List<Node> getCollectionUrls(SolrQueryRequest req, String collection, EnumSet<Replica.Type> types) {\n    ClusterState clusterState = req.getCore()\n        .getCoreContainer().getZkController().getClusterState();\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + clusterState);\n    }\n    final List<Node> urls = new ArrayList<>(slices.size());\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n\n      Map<String,Replica> shardMap = replicas.getReplicasMap();\n      \n      for (Entry<String,Replica> entry : shardMap.entrySet()) {\n        if (!types.contains(entry.getValue().getType())) {\n          continue;\n        }\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (clusterState.liveNodesContain(nodeProps.getNodeName())) {\n          urls.add(new StdNode(nodeProps, collection, replicas.getName()));\n        }\n      }\n    }\n    if (urls.isEmpty()) {\n      return null;\n    }\n    return urls;\n  }\n\n","sourceOld":"  private List<Node> getCollectionUrls(SolrQueryRequest req, String collection) {\n    ClusterState clusterState = req.getCore()\n        .getCoreContainer().getZkController().getClusterState();\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + clusterState);\n    }\n    final List<Node> urls = new ArrayList<>(slices.size());\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n\n      Map<String,Replica> shardMap = replicas.getReplicasMap();\n      \n      for (Entry<String,Replica> entry : shardMap.entrySet()) {\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (clusterState.liveNodesContain(nodeProps.getNodeName())) {\n          urls.add(new StdNode(nodeProps, collection, replicas.getName()));\n        }\n      }\n    }\n    if (urls.isEmpty()) {\n      return null;\n    }\n    return urls;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(SolrQueryRequest,String).mjava","sourceNew":null,"sourceOld":"  private List<Node> getCollectionUrls(SolrQueryRequest req, String collection) {\n    ClusterState clusterState = req.getCore()\n        .getCoreContainer().getZkController().getClusterState();\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + clusterState);\n    }\n    final List<Node> urls = new ArrayList<>(slices.size());\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n\n      Map<String,Replica> shardMap = replicas.getReplicasMap();\n      \n      for (Entry<String,Replica> entry : shardMap.entrySet()) {\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (clusterState.liveNodesContain(nodeProps.getNodeName())) {\n          urls.add(new StdNode(nodeProps, collection, replicas.getName()));\n        }\n      }\n    }\n    if (urls.isEmpty()) {\n      return null;\n    }\n    return urls;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["7350fba633b826986454e97668c5ad03b46bcaca"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["2a4f729cab8ab6d4bf8365940c6ee4e17a0cfdd9"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","61c45e99cf6676da48f19d7511c73712ad39402b"],"61c45e99cf6676da48f19d7511c73712ad39402b":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"2a4f729cab8ab6d4bf8365940c6ee4e17a0cfdd9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2a4f729cab8ab6d4bf8365940c6ee4e17a0cfdd9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7350fba633b826986454e97668c5ad03b46bcaca":["14d5815ecbef89580f5c48990bcd433f04f8563a"],"14d5815ecbef89580f5c48990bcd433f04f8563a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["7350fba633b826986454e97668c5ad03b46bcaca"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["61c45e99cf6676da48f19d7511c73712ad39402b"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["14d5815ecbef89580f5c48990bcd433f04f8563a"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"2a4f729cab8ab6d4bf8365940c6ee4e17a0cfdd9":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"61c45e99cf6676da48f19d7511c73712ad39402b":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2a4f729cab8ab6d4bf8365940c6ee4e17a0cfdd9","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"7350fba633b826986454e97668c5ad03b46bcaca":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"14d5815ecbef89580f5c48990bcd433f04f8563a":["7350fba633b826986454e97668c5ad03b46bcaca"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["61c45e99cf6676da48f19d7511c73712ad39402b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}