{"path":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"solr/src/java/org/apache/solr/update/processor/LogUpdateProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","sourceNew":"  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    boolean doLog = LogUpdateProcessor.log.isInfoEnabled();\n    // LogUpdateProcessor.log.error(\"Will Log=\" + doLog);\n    if( doLog ) {\n      // only create the log processor if we will use it\n      return new LogUpdateProcessor(req, rsp, this, next);\n    }\n    return null;\n  }\n\n","sourceOld":"  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    boolean doLog = LogUpdateProcessor.log.isInfoEnabled();\n    // LogUpdateProcessor.log.error(\"Will Log=\" + doLog);\n    if( doLog ) {\n      // only create the log processor if we will use it\n      return new LogUpdateProcessor(req, rsp, this, next);\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"solr/src/java/org/apache/solr/update/processor/LogUpdateProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","sourceNew":"  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    boolean doLog = LogUpdateProcessor.log.isInfoEnabled();\n    // LogUpdateProcessor.log.error(\"Will Log=\" + doLog);\n    if( doLog ) {\n      // only create the log processor if we will use it\n      return new LogUpdateProcessor(req, rsp, this, next);\n    }\n    return null;\n  }\n\n","sourceOld":"  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    boolean doLog = LogUpdateProcessor.log.isInfoEnabled();\n    // LogUpdateProcessor.log.error(\"Will Log=\" + doLog);\n    if( doLog ) {\n      // only create the log processor if we will use it\n      return new LogUpdateProcessor(req, rsp, this, next);\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"solr/src/java/org/apache/solr/update/processor/LogUpdateProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","sourceNew":"  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    boolean doLog = LogUpdateProcessor.log.isInfoEnabled();\n    // LogUpdateProcessor.log.error(\"Will Log=\" + doLog);\n    if( doLog ) {\n      // only create the log processor if we will use it\n      return new LogUpdateProcessor(req, rsp, this, next);\n    }\n    return null;\n  }\n\n","sourceOld":"  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    boolean doLog = LogUpdateProcessor.log.isInfoEnabled();\n    // LogUpdateProcessor.log.error(\"Will Log=\" + doLog);\n    if( doLog ) {\n      // only create the log processor if we will use it\n      return new LogUpdateProcessor(req, rsp, this, next);\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"48ca93fd0adba286887078680f889a3ac95dc9b1","date":1310396563,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","sourceNew":"  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    final Logger logger = LoggerFactory.getLogger(LogUpdateProcessor.class);\n    boolean doLog = logger.isInfoEnabled();\n    // LogUpdateProcessor.log.error(\"Will Log=\" + doLog);\n    if( doLog ) {\n      // only create the log processor if we will use it\n      final LogUpdateProcessor processor = new LogUpdateProcessor(req, rsp, this, next);\n      assert processor.log == logger;\n      return processor;\n    }\n    return null;\n  }\n\n","sourceOld":"  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    boolean doLog = LogUpdateProcessor.log.isInfoEnabled();\n    // LogUpdateProcessor.log.error(\"Will Log=\" + doLog);\n    if( doLog ) {\n      // only create the log processor if we will use it\n      return new LogUpdateProcessor(req, rsp, this, next);\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff2d7326b1f013c8da9bad45b1e98a3d16c38575","date":1330406992,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","sourceNew":"  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    return LogUpdateProcessor.log.isInfoEnabled() ? new LogUpdateProcessor(req, rsp, this, next) : null;\n  }\n\n","sourceOld":"  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    final Logger logger = LoggerFactory.getLogger(LogUpdateProcessor.class);\n    boolean doLog = logger.isInfoEnabled();\n    // LogUpdateProcessor.log.error(\"Will Log=\" + doLog);\n    if( doLog ) {\n      // only create the log processor if we will use it\n      final LogUpdateProcessor processor = new LogUpdateProcessor(req, rsp, this, next);\n      assert processor.log == logger;\n      return processor;\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","sourceNew":"  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    return LogUpdateProcessor.log.isInfoEnabled() ? new LogUpdateProcessor(req, rsp, this, next) : null;\n  }\n\n","sourceOld":"  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    final Logger logger = LoggerFactory.getLogger(LogUpdateProcessor.class);\n    boolean doLog = logger.isInfoEnabled();\n    // LogUpdateProcessor.log.error(\"Will Log=\" + doLog);\n    if( doLog ) {\n      // only create the log processor if we will use it\n      final LogUpdateProcessor processor = new LogUpdateProcessor(req, rsp, this, next);\n      assert processor.log == logger;\n      return processor;\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9367dbf5b00d7764583d991c1888f4acc9c9991a","date":1449048142,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","sourceNew":"  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    return log.isInfoEnabled() ? new LogUpdateProcessor(req, rsp, this, next) : null;\n  }\n\n","sourceOld":"  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    return LogUpdateProcessor.log.isInfoEnabled() ? new LogUpdateProcessor(req, rsp, this, next) : null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb5fe1ea1e20c7450be523c41001a625ea3c15f5","date":1547007782,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","sourceNew":"  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    return log.isInfoEnabled() ? new LogUpdateProcessor(req, rsp, this, next) : next;\n  }\n\n","sourceOld":"  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    return log.isInfoEnabled() ? new LogUpdateProcessor(req, rsp, this, next) : null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0dfcb99e767e8eafdede3faac6831984ac849fc","date":1589042999,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","sourceNew":"  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    return (log.isInfoEnabled() || slowUpdateThresholdMillis >= 0) ?\n        new LogUpdateProcessor(req, rsp, this, next) : next;\n  }\n\n","sourceOld":"  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    return log.isInfoEnabled() ? new LogUpdateProcessor(req, rsp, this, next) : next;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b0dfcb99e767e8eafdede3faac6831984ac849fc":["fb5fe1ea1e20c7450be523c41001a625ea3c15f5"],"ff2d7326b1f013c8da9bad45b1e98a3d16c38575":["48ca93fd0adba286887078680f889a3ac95dc9b1"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["48ca93fd0adba286887078680f889a3ac95dc9b1","ff2d7326b1f013c8da9bad45b1e98a3d16c38575"],"fb5fe1ea1e20c7450be523c41001a625ea3c15f5":["9367dbf5b00d7764583d991c1888f4acc9c9991a"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"48ca93fd0adba286887078680f889a3ac95dc9b1":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9367dbf5b00d7764583d991c1888f4acc9c9991a":["ff2d7326b1f013c8da9bad45b1e98a3d16c38575"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b0dfcb99e767e8eafdede3faac6831984ac849fc"]},"commit2Childs":{"b0dfcb99e767e8eafdede3faac6831984ac849fc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ff2d7326b1f013c8da9bad45b1e98a3d16c38575":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","9367dbf5b00d7764583d991c1888f4acc9c9991a"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"fb5fe1ea1e20c7450be523c41001a625ea3c15f5":["b0dfcb99e767e8eafdede3faac6831984ac849fc"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["48ca93fd0adba286887078680f889a3ac95dc9b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"48ca93fd0adba286887078680f889a3ac95dc9b1":["ff2d7326b1f013c8da9bad45b1e98a3d16c38575","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"9367dbf5b00d7764583d991c1888f4acc9c9991a":["fb5fe1ea1e20c7450be523c41001a625ea3c15f5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}