{"path":"src/common/org/apache/solr/common/params/ModifiableSolrParams#add(String,String...).mjava","commits":[{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/common/org/apache/solr/common/params/ModifiableSolrParams#add(String,String...).mjava","pathOld":"src/java/org/apache/solr/common/params/ModifiableSolrParams#add(String,String...).mjava","sourceNew":"  /**\n   * Add the given values to any existing name\n   */\n  public ModifiableSolrParams add( String name, String ... val ) {\n    String[] old = vals.put(name, val);\n    if( old != null ) {\n      int i =0;\n      if( val == null || val.length < 1 ) {\n        String[] both = new String[old.length+1];\n        for( String v : old ) {\n          both[i++] = v;\n        }\n        both[i++] = null;\n        vals.put( name, both );\n      }\n      else {\n        String[] both = new String[old.length+val.length];\n        for( String v : old ) {\n          both[i++] = v;\n        }\n        for( String v : val ) {\n          both[i++] = v;\n        }\n        vals.put( name, both );\n      }\n    }\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Add the given values to any existing name\n   */\n  public ModifiableSolrParams add( String name, String ... val ) {\n    String[] old = vals.put(name, val);\n    if( old != null ) {\n      int i =0;\n      if( val == null || val.length < 1 ) {\n        String[] both = new String[old.length+1];\n        for( String v : old ) {\n          both[i++] = v;\n        }\n        both[i++] = null;\n        vals.put( name, both );\n      }\n      else {\n        String[] both = new String[old.length+val.length];\n        for( String v : old ) {\n          both[i++] = v;\n        }\n        for( String v : val ) {\n          both[i++] = v;\n        }\n        vals.put( name, both );\n      }\n    }\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d321e37f75a64c0acdb98ea65e7a234208810419","date":1232049270,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/common/org/apache/solr/common/params/ModifiableSolrParams#add(String,String...).mjava","pathOld":"src/common/org/apache/solr/common/params/ModifiableSolrParams#add(String,String...).mjava","sourceNew":"  /**\n   * Add the given values to any existing name\n   */\n  public ModifiableSolrParams add( String name, String ... val ) {\n    String[] old = vals.put(name, val);\n    if( old != null ) {\n      if( val == null || val.length < 1 ) {\n        String[] both = new String[old.length+1];\n        System.arraycopy(old, 0, both, 0, old.length);\n        both[old.length] = null;\n        vals.put( name, both );\n      }\n      else {\n        String[] both = new String[old.length+val.length];\n        System.arraycopy(old, 0, both, 0, old.length);\n        System.arraycopy(val, 0, both, old.length, val.length);\n        vals.put( name, both );\n      }\n    }\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Add the given values to any existing name\n   */\n  public ModifiableSolrParams add( String name, String ... val ) {\n    String[] old = vals.put(name, val);\n    if( old != null ) {\n      int i =0;\n      if( val == null || val.length < 1 ) {\n        String[] both = new String[old.length+1];\n        for( String v : old ) {\n          both[i++] = v;\n        }\n        both[i++] = null;\n        vals.put( name, both );\n      }\n      else {\n        String[] both = new String[old.length+val.length];\n        for( String v : old ) {\n          both[i++] = v;\n        }\n        for( String v : val ) {\n          both[i++] = v;\n        }\n        vals.put( name, both );\n      }\n    }\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6045a4690b2d2d595afe4faf5076af9489138ba4","date":1232848503,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/common/org/apache/solr/common/params/ModifiableSolrParams#add(String,String...).mjava","pathOld":"src/common/org/apache/solr/common/params/ModifiableSolrParams#add(String,String...).mjava","sourceNew":"  /**\n   * Add the given values to any existing name\n   * @param name Key\n   * @param val Array of value(s) added to the name. NOTE: If val is null \n   *     or a member of val is null, then a corresponding null reference \n   *     will be included when a get method is called on the key later.\n   *  @return this\n   */\n  public ModifiableSolrParams add( String name, String ... val ) {\n    String[] old = vals.put(name, val);\n    if( old != null ) {\n      if( val == null || val.length < 1 ) {\n        String[] both = new String[old.length+1];\n        System.arraycopy(old, 0, both, 0, old.length);\n        both[old.length] = null;\n        vals.put( name, both );\n      }\n      else {\n        String[] both = new String[old.length+val.length];\n        System.arraycopy(old, 0, both, 0, old.length);\n        System.arraycopy(val, 0, both, old.length, val.length);\n        vals.put( name, both );\n      }\n    }\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Add the given values to any existing name\n   */\n  public ModifiableSolrParams add( String name, String ... val ) {\n    String[] old = vals.put(name, val);\n    if( old != null ) {\n      if( val == null || val.length < 1 ) {\n        String[] both = new String[old.length+1];\n        System.arraycopy(old, 0, both, 0, old.length);\n        both[old.length] = null;\n        vals.put( name, both );\n      }\n      else {\n        String[] both = new String[old.length+val.length];\n        System.arraycopy(old, 0, both, 0, old.length);\n        System.arraycopy(val, 0, both, old.length, val.length);\n        vals.put( name, both );\n      }\n    }\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/common/org/apache/solr/common/params/ModifiableSolrParams#add(String,String...).mjava","pathOld":"src/common/org/apache/solr/common/params/ModifiableSolrParams#add(String,String...).mjava","sourceNew":"  /**\n   * Add the given values to any existing name\n   * @param name Key\n   * @param val Array of value(s) added to the name. NOTE: If val is null \n   *     or a member of val is null, then a corresponding null reference \n   *     will be included when a get method is called on the key later.\n   *  @return this\n   */\n  public ModifiableSolrParams add( String name, String ... val ) {\n    String[] old = vals.put(name, val);\n    if( old != null ) {\n      if( val == null || val.length < 1 ) {\n        String[] both = new String[old.length+1];\n        System.arraycopy(old, 0, both, 0, old.length);\n        both[old.length] = null;\n        vals.put( name, both );\n      }\n      else {\n        String[] both = new String[old.length+val.length];\n        System.arraycopy(old, 0, both, 0, old.length);\n        System.arraycopy(val, 0, both, old.length, val.length);\n        vals.put( name, both );\n      }\n    }\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Add the given values to any existing name\n   * @param name Key\n   * @param val Array of value(s) added to the name. NOTE: If val is null \n   *     or a member of val is null, then a corresponding null reference \n   *     will be included when a get method is called on the key later.\n   *  @return this\n   */\n  public ModifiableSolrParams add( String name, String ... val ) {\n    String[] old = vals.put(name, val);\n    if( old != null ) {\n      if( val == null || val.length < 1 ) {\n        String[] both = new String[old.length+1];\n        System.arraycopy(old, 0, both, 0, old.length);\n        both[old.length] = null;\n        vals.put( name, both );\n      }\n      else {\n        String[] both = new String[old.length+val.length];\n        System.arraycopy(old, 0, both, 0, old.length);\n        System.arraycopy(val, 0, both, old.length, val.length);\n        vals.put( name, both );\n      }\n    }\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"d321e37f75a64c0acdb98ea65e7a234208810419":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"6045a4690b2d2d595afe4faf5076af9489138ba4":["d321e37f75a64c0acdb98ea65e7a234208810419"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["6045a4690b2d2d595afe4faf5076af9489138ba4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["d321e37f75a64c0acdb98ea65e7a234208810419"],"d321e37f75a64c0acdb98ea65e7a234208810419":["6045a4690b2d2d595afe4faf5076af9489138ba4"],"6045a4690b2d2d595afe4faf5076af9489138ba4":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}