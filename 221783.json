{"path":"src/java/org/apache/lucene/index/IndexReader#IndexReader(Directory).mjava","commits":[{"id":"3fb2e14da294a8c919c6356cbbc8049158c368a7","date":1013197182,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#IndexReader(Directory).mjava","pathOld":"/dev/null","sourceNew":"  protected IndexReader(Directory directory) {\n    this.directory = directory;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"47f3057137fcb91417c83b50600b934bd0f34c68","date":1064526111,"type":3,"author":"Dmitry Serebrennikov","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#IndexReader(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#IndexReader(Directory).mjava","sourceNew":"  protected IndexReader(Directory directory) {\n    this.directory = directory;\n    segmentInfosAge = Long.MAX_VALUE;\n  }\n\n","sourceOld":"  protected IndexReader(Directory directory) {\n    this.directory = directory;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c1c4d5b9a1f3631a80687ab505cbb0debfe7cc6","date":1069355441,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#IndexReader(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#IndexReader(Directory).mjava","sourceNew":"  protected IndexReader(Directory directory) {\n    this.directory = directory;\n    stale = false;\n    segmentInfos = null;\n  }\n\n","sourceOld":"  protected IndexReader(Directory directory) {\n    this.directory = directory;\n    segmentInfosAge = Long.MAX_VALUE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f653aecb322b74d99e6ecdb93765e453a3d7aa71","date":1082107025,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#IndexReader(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#IndexReader(Directory).mjava","sourceNew":"  /**\n   * Constructor used if IndexReader is not owner of its directory. \n   * This is used for IndexReaders that are used within other IndexReaders that take care or locking directories.\n   * \n   * @param directory Directory where IndexReader files reside.\n   */\n  protected IndexReader(Directory directory) {\n    this.directory = directory;\n    segmentInfos = null;\n    directoryOwner = false;\n    closeDirectory = false;\n    stale = false;\n    hasChanges = false;\n    writeLock = null;\n  }\n\n","sourceOld":"  protected IndexReader(Directory directory) {\n    this.directory = directory;\n    stale = false;\n    segmentInfos = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e5d88b55f1b57feab6da94a5c635a224539bd2a","date":1095877947,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#IndexReader(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#IndexReader(Directory).mjava","sourceNew":"  /**\n   * Constructor used if IndexReader is not owner of its directory. \n   * This is used for IndexReaders that are used within other IndexReaders that take care or locking directories.\n   * \n   * @param directory Directory where IndexReader files reside.\n   */\n  protected IndexReader(Directory directory) {\n    this.directory = directory;\n  }\n\n","sourceOld":"  /**\n   * Constructor used if IndexReader is not owner of its directory. \n   * This is used for IndexReaders that are used within other IndexReaders that take care or locking directories.\n   * \n   * @param directory Directory where IndexReader files reside.\n   */\n  protected IndexReader(Directory directory) {\n    this.directory = directory;\n    segmentInfos = null;\n    directoryOwner = false;\n    closeDirectory = false;\n    stale = false;\n    hasChanges = false;\n    writeLock = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"125b5699f11b58d9be0820c6ce8b1648812902e8","date":1190273227,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#IndexReader(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#IndexReader(Directory).mjava","sourceNew":"  /**\n   * Legacy Constructor for backwards compatibility.\n   *\n   * <p>\n   * This Constructor should not be used, it exists for backwards \n   * compatibility only to support legacy subclasses that did not \"own\" \n   * a specific directory, but needed to specify something to be returned \n   * by the directory() method.  Future subclasses should delegate to the \n   * no arg constructor and implement the directory() method as appropriate.\n   * \n   * @param directory Directory to be returned by the directory() method\n   * @see #directory()\n   * @deprecated - use IndexReader()\n   */\n  protected IndexReader(Directory directory) {\n    this.directory = directory;\n  }\n\n","sourceOld":"  /**\n   * Constructor used if IndexReader is not owner of its directory. \n   * This is used for IndexReaders that are used within other IndexReaders that take care or locking directories.\n   * \n   * @param directory Directory where IndexReader files reside.\n   */\n  protected IndexReader(Directory directory) {\n    this.directory = directory;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8","date":1195335263,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#IndexReader(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#IndexReader(Directory).mjava","sourceNew":"  /**\n   * Legacy Constructor for backwards compatibility.\n   *\n   * <p>\n   * This Constructor should not be used, it exists for backwards \n   * compatibility only to support legacy subclasses that did not \"own\" \n   * a specific directory, but needed to specify something to be returned \n   * by the directory() method.  Future subclasses should delegate to the \n   * no arg constructor and implement the directory() method as appropriate.\n   * \n   * @param directory Directory to be returned by the directory() method\n   * @see #directory()\n   * @deprecated - use IndexReader()\n   */\n  protected IndexReader(Directory directory) {\n    this();\n    this.directory = directory;\n  }\n\n","sourceOld":"  /**\n   * Legacy Constructor for backwards compatibility.\n   *\n   * <p>\n   * This Constructor should not be used, it exists for backwards \n   * compatibility only to support legacy subclasses that did not \"own\" \n   * a specific directory, but needed to specify something to be returned \n   * by the directory() method.  Future subclasses should delegate to the \n   * no arg constructor and implement the directory() method as appropriate.\n   * \n   * @param directory Directory to be returned by the directory() method\n   * @see #directory()\n   * @deprecated - use IndexReader()\n   */\n  protected IndexReader(Directory directory) {\n    this.directory = directory;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eaea03be31988a41275d45a429ac71ff0ad740fb","date":1254612554,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/IndexReader#IndexReader(Directory).mjava","sourceNew":null,"sourceOld":"  /**\n   * Legacy Constructor for backwards compatibility.\n   *\n   * <p>\n   * This Constructor should not be used, it exists for backwards \n   * compatibility only to support legacy subclasses that did not \"own\" \n   * a specific directory, but needed to specify something to be returned \n   * by the directory() method.  Future subclasses should delegate to the \n   * no arg constructor and implement the directory() method as appropriate.\n   * \n   * @param directory Directory to be returned by the directory() method\n   * @see #directory()\n   * @deprecated - use IndexReader()\n   */\n  protected IndexReader(Directory directory) {\n    this();\n    this.directory = directory;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eaea03be31988a41275d45a429ac71ff0ad740fb":["3b9d7142a399ac70a71ce5b40ee66695eda5b7e8"],"125b5699f11b58d9be0820c6ce8b1648812902e8":["6e5d88b55f1b57feab6da94a5c635a224539bd2a"],"3fb2e14da294a8c919c6356cbbc8049158c368a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6e5d88b55f1b57feab6da94a5c635a224539bd2a":["f653aecb322b74d99e6ecdb93765e453a3d7aa71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"47f3057137fcb91417c83b50600b934bd0f34c68":["3fb2e14da294a8c919c6356cbbc8049158c368a7"],"f653aecb322b74d99e6ecdb93765e453a3d7aa71":["6c1c4d5b9a1f3631a80687ab505cbb0debfe7cc6"],"6c1c4d5b9a1f3631a80687ab505cbb0debfe7cc6":["47f3057137fcb91417c83b50600b934bd0f34c68"],"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8":["125b5699f11b58d9be0820c6ce8b1648812902e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eaea03be31988a41275d45a429ac71ff0ad740fb"]},"commit2Childs":{"eaea03be31988a41275d45a429ac71ff0ad740fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"125b5699f11b58d9be0820c6ce8b1648812902e8":["3b9d7142a399ac70a71ce5b40ee66695eda5b7e8"],"3fb2e14da294a8c919c6356cbbc8049158c368a7":["47f3057137fcb91417c83b50600b934bd0f34c68"],"6e5d88b55f1b57feab6da94a5c635a224539bd2a":["125b5699f11b58d9be0820c6ce8b1648812902e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3fb2e14da294a8c919c6356cbbc8049158c368a7"],"47f3057137fcb91417c83b50600b934bd0f34c68":["6c1c4d5b9a1f3631a80687ab505cbb0debfe7cc6"],"f653aecb322b74d99e6ecdb93765e453a3d7aa71":["6e5d88b55f1b57feab6da94a5c635a224539bd2a"],"6c1c4d5b9a1f3631a80687ab505cbb0debfe7cc6":["f653aecb322b74d99e6ecdb93765e453a3d7aa71"],"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8":["eaea03be31988a41275d45a429ac71ff0ad740fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}