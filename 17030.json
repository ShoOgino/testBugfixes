{"path":"lucene/core/src/java/org/apache/lucene/index/CoalescedUpdates#update(FrozenBufferedUpdates).mjava","commits":[{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CoalescedUpdates#update(FrozenBufferedUpdates).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CoalescedDeletes#update(FrozenBufferedDeletes).mjava","sourceNew":"  void update(FrozenBufferedUpdates in) {\n    iterables.add(in.termsIterable());\n\n    for (int queryIdx = 0; queryIdx < in.queries.length; queryIdx++) {\n      final Query query = in.queries[queryIdx];\n      queries.put(query, BufferedUpdates.MAX_INT);\n    }\n    \n    for (NumericUpdate nu : in.updates) {\n      NumericUpdate clone = new NumericUpdate(nu.term, nu.field, nu.value);\n      clone.docIDUpto = Integer.MAX_VALUE;\n      numericDVUpdates.add(clone);\n    }\n  }\n\n","sourceOld":"  void update(FrozenBufferedDeletes in) {\n    iterables.add(in.termsIterable());\n\n    for (int queryIdx = 0; queryIdx < in.queries.length; queryIdx++) {\n      final Query query = in.queries[queryIdx];\n      queries.put(query, BufferedDeletes.MAX_INT);\n    }\n    \n    for (NumericUpdate nu : in.updates) {\n      NumericUpdate clone = new NumericUpdate(nu.term, nu.field, nu.value);\n      clone.docIDUpto = Integer.MAX_VALUE;\n      numericDVUpdates.add(clone);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06805da26538ed636bd89b10c2699cc3834032ae","date":1395132972,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CoalescedUpdates#update(FrozenBufferedUpdates).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CoalescedUpdates#update(FrozenBufferedUpdates).mjava","sourceNew":"  void update(FrozenBufferedUpdates in) {\n    iterables.add(in.termsIterable());\n\n    for (int queryIdx = 0; queryIdx < in.queries.length; queryIdx++) {\n      final Query query = in.queries[queryIdx];\n      queries.put(query, BufferedUpdates.MAX_INT);\n    }\n    \n    for (NumericDocValuesUpdate nu : in.numericDVUpdates) {\n      NumericDocValuesUpdate clone = new NumericDocValuesUpdate(nu.term, nu.field, (Long) nu.value);\n      clone.docIDUpto = Integer.MAX_VALUE;\n      numericDVUpdates.add(clone);\n    }\n    \n    for (BinaryDocValuesUpdate bu : in.binaryDVUpdates) {\n      BinaryDocValuesUpdate clone = new BinaryDocValuesUpdate(bu.term, bu.field, (BytesRef) bu.value);\n      clone.docIDUpto = Integer.MAX_VALUE;\n      binaryDVUpdates.add(clone);\n    }\n  }\n\n","sourceOld":"  void update(FrozenBufferedUpdates in) {\n    iterables.add(in.termsIterable());\n\n    for (int queryIdx = 0; queryIdx < in.queries.length; queryIdx++) {\n      final Query query = in.queries[queryIdx];\n      queries.put(query, BufferedUpdates.MAX_INT);\n    }\n    \n    for (NumericUpdate nu : in.updates) {\n      NumericUpdate clone = new NumericUpdate(nu.term, nu.field, nu.value);\n      clone.docIDUpto = Integer.MAX_VALUE;\n      numericDVUpdates.add(clone);\n    }\n  }\n\n","bugFix":null,"bugIntro":["84c1ba52905cc7eaf624aac5e10414eccc0af92d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5faf65b6692f15cca0f87bf8666c87899afc619f","date":1420468108,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CoalescedUpdates#update(FrozenBufferedUpdates).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CoalescedUpdates#update(FrozenBufferedUpdates).mjava","sourceNew":"  void update(FrozenBufferedUpdates in) {\n    totalTermCount += in.termCount;\n    iterables.add(in.termsIterable());\n\n    for (int queryIdx = 0; queryIdx < in.queries.length; queryIdx++) {\n      final Query query = in.queries[queryIdx];\n      queries.put(query, BufferedUpdates.MAX_INT);\n    }\n    \n    for (NumericDocValuesUpdate nu : in.numericDVUpdates) {\n      NumericDocValuesUpdate clone = new NumericDocValuesUpdate(nu.term, nu.field, (Long) nu.value);\n      clone.docIDUpto = Integer.MAX_VALUE;\n      numericDVUpdates.add(clone);\n    }\n    \n    for (BinaryDocValuesUpdate bu : in.binaryDVUpdates) {\n      BinaryDocValuesUpdate clone = new BinaryDocValuesUpdate(bu.term, bu.field, (BytesRef) bu.value);\n      clone.docIDUpto = Integer.MAX_VALUE;\n      binaryDVUpdates.add(clone);\n    }\n  }\n\n","sourceOld":"  void update(FrozenBufferedUpdates in) {\n    iterables.add(in.termsIterable());\n\n    for (int queryIdx = 0; queryIdx < in.queries.length; queryIdx++) {\n      final Query query = in.queries[queryIdx];\n      queries.put(query, BufferedUpdates.MAX_INT);\n    }\n    \n    for (NumericDocValuesUpdate nu : in.numericDVUpdates) {\n      NumericDocValuesUpdate clone = new NumericDocValuesUpdate(nu.term, nu.field, (Long) nu.value);\n      clone.docIDUpto = Integer.MAX_VALUE;\n      numericDVUpdates.add(clone);\n    }\n    \n    for (BinaryDocValuesUpdate bu : in.binaryDVUpdates) {\n      BinaryDocValuesUpdate clone = new BinaryDocValuesUpdate(bu.term, bu.field, (BytesRef) bu.value);\n      clone.docIDUpto = Integer.MAX_VALUE;\n      binaryDVUpdates.add(clone);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7e4c214a1f904dde76f5611b56d4081533055b3b","date":1421938451,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CoalescedUpdates#update(FrozenBufferedUpdates).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CoalescedUpdates#update(FrozenBufferedUpdates).mjava","sourceNew":"  void update(FrozenBufferedUpdates in) {\n    totalTermCount += in.termCount;\n    terms.add(in.terms);\n\n    for (int queryIdx = 0; queryIdx < in.queries.length; queryIdx++) {\n      final Query query = in.queries[queryIdx];\n      queries.put(query, BufferedUpdates.MAX_INT);\n    }\n    \n    for (NumericDocValuesUpdate nu : in.numericDVUpdates) {\n      NumericDocValuesUpdate clone = new NumericDocValuesUpdate(nu.term, nu.field, (Long) nu.value);\n      clone.docIDUpto = Integer.MAX_VALUE;\n      numericDVUpdates.add(clone);\n    }\n    \n    for (BinaryDocValuesUpdate bu : in.binaryDVUpdates) {\n      BinaryDocValuesUpdate clone = new BinaryDocValuesUpdate(bu.term, bu.field, (BytesRef) bu.value);\n      clone.docIDUpto = Integer.MAX_VALUE;\n      binaryDVUpdates.add(clone);\n    }\n  }\n\n","sourceOld":"  void update(FrozenBufferedUpdates in) {\n    totalTermCount += in.termCount;\n    iterables.add(in.termsIterable());\n\n    for (int queryIdx = 0; queryIdx < in.queries.length; queryIdx++) {\n      final Query query = in.queries[queryIdx];\n      queries.put(query, BufferedUpdates.MAX_INT);\n    }\n    \n    for (NumericDocValuesUpdate nu : in.numericDVUpdates) {\n      NumericDocValuesUpdate clone = new NumericDocValuesUpdate(nu.term, nu.field, (Long) nu.value);\n      clone.docIDUpto = Integer.MAX_VALUE;\n      numericDVUpdates.add(clone);\n    }\n    \n    for (BinaryDocValuesUpdate bu : in.binaryDVUpdates) {\n      BinaryDocValuesUpdate clone = new BinaryDocValuesUpdate(bu.term, bu.field, (BytesRef) bu.value);\n      clone.docIDUpto = Integer.MAX_VALUE;\n      binaryDVUpdates.add(clone);\n    }\n  }\n\n","bugFix":["9fa5ed548a2e7179ad03d6dfef30e19b8c06a8e2"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3e2b30bfb739689d33532e6b7d2d39582bd89a3a","date":1432237721,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CoalescedUpdates#update(FrozenBufferedUpdates).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CoalescedUpdates#update(FrozenBufferedUpdates).mjava","sourceNew":"  void update(FrozenBufferedUpdates in) {\n    totalTermCount += in.terms.size();\n    terms.add(in.terms);\n\n    for (int queryIdx = 0; queryIdx < in.queries.length; queryIdx++) {\n      final Query query = in.queries[queryIdx];\n      queries.put(query, BufferedUpdates.MAX_INT);\n    }\n    \n    for (NumericDocValuesUpdate nu : in.numericDVUpdates) {\n      NumericDocValuesUpdate clone = new NumericDocValuesUpdate(nu.term, nu.field, (Long) nu.value);\n      clone.docIDUpto = Integer.MAX_VALUE;\n      numericDVUpdates.add(clone);\n    }\n    \n    for (BinaryDocValuesUpdate bu : in.binaryDVUpdates) {\n      BinaryDocValuesUpdate clone = new BinaryDocValuesUpdate(bu.term, bu.field, (BytesRef) bu.value);\n      clone.docIDUpto = Integer.MAX_VALUE;\n      binaryDVUpdates.add(clone);\n    }\n  }\n\n","sourceOld":"  void update(FrozenBufferedUpdates in) {\n    totalTermCount += in.termCount;\n    terms.add(in.terms);\n\n    for (int queryIdx = 0; queryIdx < in.queries.length; queryIdx++) {\n      final Query query = in.queries[queryIdx];\n      queries.put(query, BufferedUpdates.MAX_INT);\n    }\n    \n    for (NumericDocValuesUpdate nu : in.numericDVUpdates) {\n      NumericDocValuesUpdate clone = new NumericDocValuesUpdate(nu.term, nu.field, (Long) nu.value);\n      clone.docIDUpto = Integer.MAX_VALUE;\n      numericDVUpdates.add(clone);\n    }\n    \n    for (BinaryDocValuesUpdate bu : in.binaryDVUpdates) {\n      BinaryDocValuesUpdate clone = new BinaryDocValuesUpdate(bu.term, bu.field, (BytesRef) bu.value);\n      clone.docIDUpto = Integer.MAX_VALUE;\n      binaryDVUpdates.add(clone);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84c1ba52905cc7eaf624aac5e10414eccc0af92d","date":1464805673,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CoalescedUpdates#update(FrozenBufferedUpdates).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CoalescedUpdates#update(FrozenBufferedUpdates).mjava","sourceNew":"  void update(FrozenBufferedUpdates in) {\n    totalTermCount += in.terms.size();\n    terms.add(in.terms);\n\n    for (int queryIdx = 0; queryIdx < in.queries.length; queryIdx++) {\n      final Query query = in.queries[queryIdx];\n      queries.put(query, BufferedUpdates.MAX_INT);\n    }\n\n    List<DocValuesUpdate> numericPacket = new ArrayList<>();\n    numericDVUpdates.add(numericPacket);\n    for (NumericDocValuesUpdate nu : in.numericDVUpdates) {\n      NumericDocValuesUpdate clone = new NumericDocValuesUpdate(nu.term, nu.field, (Long) nu.value);\n      clone.docIDUpto = Integer.MAX_VALUE;\n      numericPacket.add(clone);\n    }\n    \n    List<DocValuesUpdate> binaryPacket = new ArrayList<>();\n    binaryDVUpdates.add(binaryPacket);\n    for (BinaryDocValuesUpdate bu : in.binaryDVUpdates) {\n      BinaryDocValuesUpdate clone = new BinaryDocValuesUpdate(bu.term, bu.field, (BytesRef) bu.value);\n      clone.docIDUpto = Integer.MAX_VALUE;\n      binaryPacket.add(clone);\n    }\n  }\n\n","sourceOld":"  void update(FrozenBufferedUpdates in) {\n    totalTermCount += in.terms.size();\n    terms.add(in.terms);\n\n    for (int queryIdx = 0; queryIdx < in.queries.length; queryIdx++) {\n      final Query query = in.queries[queryIdx];\n      queries.put(query, BufferedUpdates.MAX_INT);\n    }\n    \n    for (NumericDocValuesUpdate nu : in.numericDVUpdates) {\n      NumericDocValuesUpdate clone = new NumericDocValuesUpdate(nu.term, nu.field, (Long) nu.value);\n      clone.docIDUpto = Integer.MAX_VALUE;\n      numericDVUpdates.add(clone);\n    }\n    \n    for (BinaryDocValuesUpdate bu : in.binaryDVUpdates) {\n      BinaryDocValuesUpdate clone = new BinaryDocValuesUpdate(bu.term, bu.field, (BytesRef) bu.value);\n      clone.docIDUpto = Integer.MAX_VALUE;\n      binaryDVUpdates.add(clone);\n    }\n  }\n\n","bugFix":["e072d0b1fc19e0533d8ce432eed245196bca6fde","06805da26538ed636bd89b10c2699cc3834032ae"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b8ee93140fd0efef7e101786e3ed5160a700b5f","date":1464820111,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CoalescedUpdates#update(FrozenBufferedUpdates).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CoalescedUpdates#update(FrozenBufferedUpdates).mjava","sourceNew":"  void update(FrozenBufferedUpdates in) {\n    totalTermCount += in.terms.size();\n    terms.add(in.terms);\n\n    for (int queryIdx = 0; queryIdx < in.queries.length; queryIdx++) {\n      final Query query = in.queries[queryIdx];\n      queries.put(query, BufferedUpdates.MAX_INT);\n    }\n\n    List<DocValuesUpdate> numericPacket = new ArrayList<>();\n    numericDVUpdates.add(numericPacket);\n    for (NumericDocValuesUpdate nu : in.numericDVUpdates) {\n      NumericDocValuesUpdate clone = new NumericDocValuesUpdate(nu.term, nu.field, (Long) nu.value);\n      clone.docIDUpto = Integer.MAX_VALUE;\n      numericPacket.add(clone);\n    }\n    \n    List<DocValuesUpdate> binaryPacket = new ArrayList<>();\n    binaryDVUpdates.add(binaryPacket);\n    for (BinaryDocValuesUpdate bu : in.binaryDVUpdates) {\n      BinaryDocValuesUpdate clone = new BinaryDocValuesUpdate(bu.term, bu.field, (BytesRef) bu.value);\n      clone.docIDUpto = Integer.MAX_VALUE;\n      binaryPacket.add(clone);\n    }\n  }\n\n","sourceOld":"  void update(FrozenBufferedUpdates in) {\n    totalTermCount += in.terms.size();\n    terms.add(in.terms);\n\n    for (int queryIdx = 0; queryIdx < in.queries.length; queryIdx++) {\n      final Query query = in.queries[queryIdx];\n      queries.put(query, BufferedUpdates.MAX_INT);\n    }\n    \n    for (NumericDocValuesUpdate nu : in.numericDVUpdates) {\n      NumericDocValuesUpdate clone = new NumericDocValuesUpdate(nu.term, nu.field, (Long) nu.value);\n      clone.docIDUpto = Integer.MAX_VALUE;\n      numericDVUpdates.add(clone);\n    }\n    \n    for (BinaryDocValuesUpdate bu : in.binaryDVUpdates) {\n      BinaryDocValuesUpdate clone = new BinaryDocValuesUpdate(bu.term, bu.field, (BytesRef) bu.value);\n      clone.docIDUpto = Integer.MAX_VALUE;\n      binaryDVUpdates.add(clone);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","date":1464821470,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CoalescedUpdates#update(FrozenBufferedUpdates).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CoalescedUpdates#update(FrozenBufferedUpdates).mjava","sourceNew":"  void update(FrozenBufferedUpdates in) {\n    totalTermCount += in.terms.size();\n    terms.add(in.terms);\n\n    for (int queryIdx = 0; queryIdx < in.queries.length; queryIdx++) {\n      final Query query = in.queries[queryIdx];\n      queries.put(query, BufferedUpdates.MAX_INT);\n    }\n\n    List<DocValuesUpdate> numericPacket = new ArrayList<>();\n    numericDVUpdates.add(numericPacket);\n    for (NumericDocValuesUpdate nu : in.numericDVUpdates) {\n      NumericDocValuesUpdate clone = new NumericDocValuesUpdate(nu.term, nu.field, (Long) nu.value);\n      clone.docIDUpto = Integer.MAX_VALUE;\n      numericPacket.add(clone);\n    }\n    \n    List<DocValuesUpdate> binaryPacket = new ArrayList<>();\n    binaryDVUpdates.add(binaryPacket);\n    for (BinaryDocValuesUpdate bu : in.binaryDVUpdates) {\n      BinaryDocValuesUpdate clone = new BinaryDocValuesUpdate(bu.term, bu.field, (BytesRef) bu.value);\n      clone.docIDUpto = Integer.MAX_VALUE;\n      binaryPacket.add(clone);\n    }\n  }\n\n","sourceOld":"  void update(FrozenBufferedUpdates in) {\n    totalTermCount += in.terms.size();\n    terms.add(in.terms);\n\n    for (int queryIdx = 0; queryIdx < in.queries.length; queryIdx++) {\n      final Query query = in.queries[queryIdx];\n      queries.put(query, BufferedUpdates.MAX_INT);\n    }\n    \n    for (NumericDocValuesUpdate nu : in.numericDVUpdates) {\n      NumericDocValuesUpdate clone = new NumericDocValuesUpdate(nu.term, nu.field, (Long) nu.value);\n      clone.docIDUpto = Integer.MAX_VALUE;\n      numericDVUpdates.add(clone);\n    }\n    \n    for (BinaryDocValuesUpdate bu : in.binaryDVUpdates) {\n      BinaryDocValuesUpdate clone = new BinaryDocValuesUpdate(bu.term, bu.field, (BytesRef) bu.value);\n      clone.docIDUpto = Integer.MAX_VALUE;\n      binaryDVUpdates.add(clone);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f69e96b07e265f3e18957be540909b01fae36f8","date":1464859090,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CoalescedUpdates#update(FrozenBufferedUpdates).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CoalescedUpdates#update(FrozenBufferedUpdates).mjava","sourceNew":"  void update(FrozenBufferedUpdates in) {\n    totalTermCount += in.terms.size();\n    terms.add(in.terms);\n\n    for (int queryIdx = 0; queryIdx < in.queries.length; queryIdx++) {\n      final Query query = in.queries[queryIdx];\n      queries.put(query, BufferedUpdates.MAX_INT);\n    }\n\n    List<DocValuesUpdate> numericPacket = new ArrayList<>();\n    numericDVUpdates.add(numericPacket);\n    for (NumericDocValuesUpdate nu : in.numericDVUpdates) {\n      NumericDocValuesUpdate clone = new NumericDocValuesUpdate(nu.term, nu.field, (Long) nu.value);\n      clone.docIDUpto = Integer.MAX_VALUE;\n      numericPacket.add(clone);\n    }\n    \n    List<DocValuesUpdate> binaryPacket = new ArrayList<>();\n    binaryDVUpdates.add(binaryPacket);\n    for (BinaryDocValuesUpdate bu : in.binaryDVUpdates) {\n      BinaryDocValuesUpdate clone = new BinaryDocValuesUpdate(bu.term, bu.field, (BytesRef) bu.value);\n      clone.docIDUpto = Integer.MAX_VALUE;\n      binaryPacket.add(clone);\n    }\n  }\n\n","sourceOld":"  void update(FrozenBufferedUpdates in) {\n    totalTermCount += in.terms.size();\n    terms.add(in.terms);\n\n    for (int queryIdx = 0; queryIdx < in.queries.length; queryIdx++) {\n      final Query query = in.queries[queryIdx];\n      queries.put(query, BufferedUpdates.MAX_INT);\n    }\n    \n    for (NumericDocValuesUpdate nu : in.numericDVUpdates) {\n      NumericDocValuesUpdate clone = new NumericDocValuesUpdate(nu.term, nu.field, (Long) nu.value);\n      clone.docIDUpto = Integer.MAX_VALUE;\n      numericDVUpdates.add(clone);\n    }\n    \n    for (BinaryDocValuesUpdate bu : in.binaryDVUpdates) {\n      BinaryDocValuesUpdate clone = new BinaryDocValuesUpdate(bu.term, bu.field, (BytesRef) bu.value);\n      clone.docIDUpto = Integer.MAX_VALUE;\n      binaryDVUpdates.add(clone);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CoalescedUpdates#update(FrozenBufferedUpdates).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CoalescedUpdates#update(FrozenBufferedUpdates).mjava","sourceNew":"  void update(FrozenBufferedUpdates in) {\n    totalTermCount += in.terms.size();\n    terms.add(in.terms);\n\n    for (int queryIdx = 0; queryIdx < in.queries.length; queryIdx++) {\n      final Query query = in.queries[queryIdx];\n      queries.put(query, BufferedUpdates.MAX_INT);\n    }\n\n    List<DocValuesUpdate> numericPacket = new ArrayList<>();\n    numericDVUpdates.add(numericPacket);\n    for (NumericDocValuesUpdate nu : in.numericDVUpdates) {\n      NumericDocValuesUpdate clone = new NumericDocValuesUpdate(nu.term, nu.field, (Long) nu.value);\n      clone.docIDUpto = Integer.MAX_VALUE;\n      numericPacket.add(clone);\n    }\n    \n    List<DocValuesUpdate> binaryPacket = new ArrayList<>();\n    binaryDVUpdates.add(binaryPacket);\n    for (BinaryDocValuesUpdate bu : in.binaryDVUpdates) {\n      BinaryDocValuesUpdate clone = new BinaryDocValuesUpdate(bu.term, bu.field, (BytesRef) bu.value);\n      clone.docIDUpto = Integer.MAX_VALUE;\n      binaryPacket.add(clone);\n    }\n  }\n\n","sourceOld":"  void update(FrozenBufferedUpdates in) {\n    totalTermCount += in.terms.size();\n    terms.add(in.terms);\n\n    for (int queryIdx = 0; queryIdx < in.queries.length; queryIdx++) {\n      final Query query = in.queries[queryIdx];\n      queries.put(query, BufferedUpdates.MAX_INT);\n    }\n    \n    for (NumericDocValuesUpdate nu : in.numericDVUpdates) {\n      NumericDocValuesUpdate clone = new NumericDocValuesUpdate(nu.term, nu.field, (Long) nu.value);\n      clone.docIDUpto = Integer.MAX_VALUE;\n      numericDVUpdates.add(clone);\n    }\n    \n    for (BinaryDocValuesUpdate bu : in.binaryDVUpdates) {\n      BinaryDocValuesUpdate clone = new BinaryDocValuesUpdate(bu.term, bu.field, (BytesRef) bu.value);\n      clone.docIDUpto = Integer.MAX_VALUE;\n      binaryDVUpdates.add(clone);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/CoalescedUpdates#update(FrozenBufferedUpdates).mjava","sourceNew":null,"sourceOld":"  void update(FrozenBufferedUpdates in) {\n    totalTermCount += in.terms.size();\n    terms.add(in.terms);\n\n    for (int queryIdx = 0; queryIdx < in.queries.length; queryIdx++) {\n      final Query query = in.queries[queryIdx];\n      queries.put(query, BufferedUpdates.MAX_INT);\n    }\n\n    List<DocValuesUpdate> numericPacket = new ArrayList<>();\n    numericDVUpdates.add(numericPacket);\n    for (NumericDocValuesUpdate nu : in.numericDVUpdates) {\n      NumericDocValuesUpdate clone = new NumericDocValuesUpdate(nu.term, nu.field, (Long) nu.value);\n      clone.docIDUpto = Integer.MAX_VALUE;\n      numericPacket.add(clone);\n    }\n    \n    List<DocValuesUpdate> binaryPacket = new ArrayList<>();\n    binaryDVUpdates.add(binaryPacket);\n    for (BinaryDocValuesUpdate bu : in.binaryDVUpdates) {\n      BinaryDocValuesUpdate clone = new BinaryDocValuesUpdate(bu.term, bu.field, (BytesRef) bu.value);\n      clone.docIDUpto = Integer.MAX_VALUE;\n      binaryPacket.add(clone);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/CoalescedUpdates#update(FrozenBufferedUpdates).mjava","sourceNew":null,"sourceOld":"  void update(FrozenBufferedUpdates in) {\n    totalTermCount += in.terms.size();\n    terms.add(in.terms);\n\n    for (int queryIdx = 0; queryIdx < in.queries.length; queryIdx++) {\n      final Query query = in.queries[queryIdx];\n      queries.put(query, BufferedUpdates.MAX_INT);\n    }\n\n    List<DocValuesUpdate> numericPacket = new ArrayList<>();\n    numericDVUpdates.add(numericPacket);\n    for (NumericDocValuesUpdate nu : in.numericDVUpdates) {\n      NumericDocValuesUpdate clone = new NumericDocValuesUpdate(nu.term, nu.field, (Long) nu.value);\n      clone.docIDUpto = Integer.MAX_VALUE;\n      numericPacket.add(clone);\n    }\n    \n    List<DocValuesUpdate> binaryPacket = new ArrayList<>();\n    binaryDVUpdates.add(binaryPacket);\n    for (BinaryDocValuesUpdate bu : in.binaryDVUpdates) {\n      BinaryDocValuesUpdate clone = new BinaryDocValuesUpdate(bu.term, bu.field, (BytesRef) bu.value);\n      clone.docIDUpto = Integer.MAX_VALUE;\n      binaryPacket.add(clone);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/CoalescedUpdates#update(FrozenBufferedUpdates).mjava","sourceNew":null,"sourceOld":"  void update(FrozenBufferedUpdates in) {\n    totalTermCount += in.terms.size();\n    terms.add(in.terms);\n\n    for (int queryIdx = 0; queryIdx < in.queries.length; queryIdx++) {\n      final Query query = in.queries[queryIdx];\n      queries.put(query, BufferedUpdates.MAX_INT);\n    }\n\n    List<DocValuesUpdate> numericPacket = new ArrayList<>();\n    numericDVUpdates.add(numericPacket);\n    for (NumericDocValuesUpdate nu : in.numericDVUpdates) {\n      NumericDocValuesUpdate clone = new NumericDocValuesUpdate(nu.term, nu.field, (Long) nu.value);\n      clone.docIDUpto = Integer.MAX_VALUE;\n      numericPacket.add(clone);\n    }\n    \n    List<DocValuesUpdate> binaryPacket = new ArrayList<>();\n    binaryDVUpdates.add(binaryPacket);\n    for (BinaryDocValuesUpdate bu : in.binaryDVUpdates) {\n      BinaryDocValuesUpdate clone = new BinaryDocValuesUpdate(bu.term, bu.field, (BytesRef) bu.value);\n      clone.docIDUpto = Integer.MAX_VALUE;\n      binaryPacket.add(clone);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3e2b30bfb739689d33532e6b7d2d39582bd89a3a":["7e4c214a1f904dde76f5611b56d4081533055b3b"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["1f69e96b07e265f3e18957be540909b01fae36f8"],"06805da26538ed636bd89b10c2699cc3834032ae":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["3e2b30bfb739689d33532e6b7d2d39582bd89a3a","84c1ba52905cc7eaf624aac5e10414eccc0af92d"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["1f69e96b07e265f3e18957be540909b01fae36f8","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["1f69e96b07e265f3e18957be540909b01fae36f8","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["3e2b30bfb739689d33532e6b7d2d39582bd89a3a","1f69e96b07e265f3e18957be540909b01fae36f8"],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":["3e2b30bfb739689d33532e6b7d2d39582bd89a3a","5b8ee93140fd0efef7e101786e3ed5160a700b5f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1f69e96b07e265f3e18957be540909b01fae36f8":["3e2b30bfb739689d33532e6b7d2d39582bd89a3a","84c1ba52905cc7eaf624aac5e10414eccc0af92d"],"7e4c214a1f904dde76f5611b56d4081533055b3b":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"5faf65b6692f15cca0f87bf8666c87899afc619f":["06805da26538ed636bd89b10c2699cc3834032ae"],"84c1ba52905cc7eaf624aac5e10414eccc0af92d":["3e2b30bfb739689d33532e6b7d2d39582bd89a3a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"3e2b30bfb739689d33532e6b7d2d39582bd89a3a":["5b8ee93140fd0efef7e101786e3ed5160a700b5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","1f69e96b07e265f3e18957be540909b01fae36f8","84c1ba52905cc7eaf624aac5e10414eccc0af92d"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["06805da26538ed636bd89b10c2699cc3834032ae"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"06805da26538ed636bd89b10c2699cc3834032ae":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"1f69e96b07e265f3e18957be540909b01fae36f8":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"7e4c214a1f904dde76f5611b56d4081533055b3b":["3e2b30bfb739689d33532e6b7d2d39582bd89a3a"],"84c1ba52905cc7eaf624aac5e10414eccc0af92d":["5b8ee93140fd0efef7e101786e3ed5160a700b5f","1f69e96b07e265f3e18957be540909b01fae36f8"],"5faf65b6692f15cca0f87bf8666c87899afc619f":["7e4c214a1f904dde76f5611b56d4081533055b3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}