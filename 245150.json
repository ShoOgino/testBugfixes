{"path":"solr/core/src/java/org/apache/solr/core/CoreContainer#addHttpConfigurer(Object).mjava","commits":[{"id":"b3a34dae868734612eb6329aa0ef754f30bd2036","date":1438783154,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#addHttpConfigurer(Object).mjava","pathOld":"/dev/null","sourceNew":"  private void addHttpConfigurer(Object authcPlugin) {\n    log.info(\"addHttpConfigurer()\");//TODO no commit\n    if (authcPlugin instanceof HttpClientInterceptorPlugin) {\n      // Setup HttpClient to use the plugin's configurer for internode communication\n      HttpClientConfigurer configurer = ((HttpClientInterceptorPlugin) authcPlugin).getClientConfigurer();\n      HttpClientUtil.setConfigurer(configurer);\n\n      // The default http client of the core container's shardHandlerFactory has already been created and\n      // configured using the default httpclient configurer. We need to reconfigure it using the plugin's\n      // http client configurer to set it up for internode communication.\n      log.info(\"Reconfiguring the shard handler factory and update shard handler.\");\n      if (getShardHandlerFactory() instanceof HttpShardHandlerFactory) {\n        ((HttpShardHandlerFactory) getShardHandlerFactory()).reconfigureHttpClient(configurer);\n      }\n      getUpdateShardHandler().reconfigureHttpClient(configurer);\n    } else {\n      if (pkiAuthenticationPlugin != null) {\n        log.info(\"PKIAuthenticationPlugin is managing internode requests\");\n        addHttpConfigurer(pkiAuthenticationPlugin);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9a1ca553b493eeddb5b48cee6811e9866fd2117","date":1438952900,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#addHttpConfigurer(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#addHttpConfigurer(Object).mjava","sourceNew":"  private void addHttpConfigurer(Object authcPlugin) {\n    log.info(\"addHttpConfigurer()\");//TODO no commit\n    if (authcPlugin instanceof HttpClientInterceptorPlugin) {\n      // Setup HttpClient to use the plugin's configurer for internode communication\n      HttpClientConfigurer configurer = ((HttpClientInterceptorPlugin) authcPlugin).getClientConfigurer();\n      HttpClientUtil.setConfigurer(configurer);\n\n      // The default http client of the core container's shardHandlerFactory has already been created and\n      // configured using the default httpclient configurer. We need to reconfigure it using the plugin's\n      // http client configurer to set it up for internode communication.\n      log.info(\"Reconfiguring the shard handler factory and update shard handler.\");\n      if (getShardHandlerFactory() instanceof HttpShardHandlerFactory) {\n        ((HttpShardHandlerFactory) getShardHandlerFactory()).reconfigureHttpClient(configurer);\n      }\n      getUpdateShardHandler().reconfigureHttpClient(configurer);\n    } else {\n      if (pkiAuthenticationPlugin != null) {\n        //this happened due to an authc plugin reload. no need to register the pkiAuthc plugin again\n        if(pkiAuthenticationPlugin.isInterceptorRegistered()) return;\n        log.info(\"PKIAuthenticationPlugin is managing internode requests\");\n        addHttpConfigurer(pkiAuthenticationPlugin);\n        pkiAuthenticationPlugin.setInterceptorRegistered();\n      }\n    }\n  }\n\n","sourceOld":"  private void addHttpConfigurer(Object authcPlugin) {\n    log.info(\"addHttpConfigurer()\");//TODO no commit\n    if (authcPlugin instanceof HttpClientInterceptorPlugin) {\n      // Setup HttpClient to use the plugin's configurer for internode communication\n      HttpClientConfigurer configurer = ((HttpClientInterceptorPlugin) authcPlugin).getClientConfigurer();\n      HttpClientUtil.setConfigurer(configurer);\n\n      // The default http client of the core container's shardHandlerFactory has already been created and\n      // configured using the default httpclient configurer. We need to reconfigure it using the plugin's\n      // http client configurer to set it up for internode communication.\n      log.info(\"Reconfiguring the shard handler factory and update shard handler.\");\n      if (getShardHandlerFactory() instanceof HttpShardHandlerFactory) {\n        ((HttpShardHandlerFactory) getShardHandlerFactory()).reconfigureHttpClient(configurer);\n      }\n      getUpdateShardHandler().reconfigureHttpClient(configurer);\n    } else {\n      if (pkiAuthenticationPlugin != null) {\n        log.info(\"PKIAuthenticationPlugin is managing internode requests\");\n        addHttpConfigurer(pkiAuthenticationPlugin);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3083bcc51ed7ec2cab055c35426063671731e274","date":1439262943,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#addHttpConfigurer(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#addHttpConfigurer(Object).mjava","sourceNew":"  private void addHttpConfigurer(Object authcPlugin) {\n    if (authcPlugin instanceof HttpClientInterceptorPlugin) {\n      // Setup HttpClient to use the plugin's configurer for internode communication\n      HttpClientConfigurer configurer = ((HttpClientInterceptorPlugin) authcPlugin).getClientConfigurer();\n      HttpClientUtil.setConfigurer(configurer);\n\n      // The default http client of the core container's shardHandlerFactory has already been created and\n      // configured using the default httpclient configurer. We need to reconfigure it using the plugin's\n      // http client configurer to set it up for internode communication.\n      log.info(\"Reconfiguring the shard handler factory and update shard handler.\");\n      if (getShardHandlerFactory() instanceof HttpShardHandlerFactory) {\n        ((HttpShardHandlerFactory) getShardHandlerFactory()).reconfigureHttpClient(configurer);\n      }\n      getUpdateShardHandler().reconfigureHttpClient(configurer);\n    } else {\n      if (pkiAuthenticationPlugin != null) {\n        //this happened due to an authc plugin reload. no need to register the pkiAuthc plugin again\n        if(pkiAuthenticationPlugin.isInterceptorRegistered()) return;\n        log.info(\"PKIAuthenticationPlugin is managing internode requests\");\n        addHttpConfigurer(pkiAuthenticationPlugin);\n        pkiAuthenticationPlugin.setInterceptorRegistered();\n      }\n    }\n  }\n\n","sourceOld":"  private void addHttpConfigurer(Object authcPlugin) {\n    log.info(\"addHttpConfigurer()\");//TODO no commit\n    if (authcPlugin instanceof HttpClientInterceptorPlugin) {\n      // Setup HttpClient to use the plugin's configurer for internode communication\n      HttpClientConfigurer configurer = ((HttpClientInterceptorPlugin) authcPlugin).getClientConfigurer();\n      HttpClientUtil.setConfigurer(configurer);\n\n      // The default http client of the core container's shardHandlerFactory has already been created and\n      // configured using the default httpclient configurer. We need to reconfigure it using the plugin's\n      // http client configurer to set it up for internode communication.\n      log.info(\"Reconfiguring the shard handler factory and update shard handler.\");\n      if (getShardHandlerFactory() instanceof HttpShardHandlerFactory) {\n        ((HttpShardHandlerFactory) getShardHandlerFactory()).reconfigureHttpClient(configurer);\n      }\n      getUpdateShardHandler().reconfigureHttpClient(configurer);\n    } else {\n      if (pkiAuthenticationPlugin != null) {\n        //this happened due to an authc plugin reload. no need to register the pkiAuthc plugin again\n        if(pkiAuthenticationPlugin.isInterceptorRegistered()) return;\n        log.info(\"PKIAuthenticationPlugin is managing internode requests\");\n        addHttpConfigurer(pkiAuthenticationPlugin);\n        pkiAuthenticationPlugin.setInterceptorRegistered();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"859081acf00749f5dd462772c571d611d4a4d2db","date":1459527719,"type":5,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#setupHttpClientForAuthPlugin(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#addHttpConfigurer(Object).mjava","sourceNew":"  private void setupHttpClientForAuthPlugin(Object authcPlugin) {\n    if (authcPlugin instanceof HttpClientBuilderPlugin) {\n      // Setup HttpClient for internode communication\n      SolrHttpClientBuilder builder = ((HttpClientBuilderPlugin) authcPlugin).getHttpClientBuilder(HttpClientUtil.getHttpClientBuilder());\n      \n      // The default http client of the core container's shardHandlerFactory has already been created and\n      // configured using the default httpclient configurer. We need to reconfigure it using the plugin's\n      // http client configurer to set it up for internode communication.\n      log.info(\"Reconfiguring HttpClient settings.\");\n\n      SolrHttpClientContextBuilder httpClientBuilder = new SolrHttpClientContextBuilder();\n      if (builder.getCredentialsProviderProvider() != null) {\n        httpClientBuilder.setDefaultCredentialsProvider(new CredentialsProviderProvider() {\n          \n          @Override\n          public CredentialsProvider getCredentialsProvider() {\n            return builder.getCredentialsProviderProvider().getCredentialsProvider();\n          }\n        });\n      }\n      if (builder.getAuthSchemeRegistryProvider() != null) {\n        httpClientBuilder.setAuthSchemeRegistryProvider(new AuthSchemeRegistryProvider() {\n          \n          @Override\n          public Lookup<AuthSchemeProvider> getAuthSchemeRegistry() {\n            return builder.getAuthSchemeRegistryProvider().getAuthSchemeRegistry();\n          }\n        });\n      }\n\n      HttpClientUtil.setHttpClientRequestContextBuilder(httpClientBuilder);\n\n    } else {\n      if (pkiAuthenticationPlugin != null) {\n        //this happened due to an authc plugin reload. no need to register the pkiAuthc plugin again\n        if(pkiAuthenticationPlugin.isInterceptorRegistered()) return;\n        log.info(\"PKIAuthenticationPlugin is managing internode requests\");\n        setupHttpClientForAuthPlugin(pkiAuthenticationPlugin);\n        pkiAuthenticationPlugin.setInterceptorRegistered();\n      }\n    }\n  }\n\n","sourceOld":"  private void addHttpConfigurer(Object authcPlugin) {\n    if (authcPlugin instanceof HttpClientInterceptorPlugin) {\n      // Setup HttpClient to use the plugin's configurer for internode communication\n      HttpClientConfigurer configurer = ((HttpClientInterceptorPlugin) authcPlugin).getClientConfigurer();\n      HttpClientUtil.setConfigurer(configurer);\n\n      // The default http client of the core container's shardHandlerFactory has already been created and\n      // configured using the default httpclient configurer. We need to reconfigure it using the plugin's\n      // http client configurer to set it up for internode communication.\n      log.info(\"Reconfiguring the shard handler factory and update shard handler.\");\n      if (getShardHandlerFactory() instanceof HttpShardHandlerFactory) {\n        ((HttpShardHandlerFactory) getShardHandlerFactory()).reconfigureHttpClient(configurer);\n      }\n      getUpdateShardHandler().reconfigureHttpClient(configurer);\n    } else {\n      if (pkiAuthenticationPlugin != null) {\n        //this happened due to an authc plugin reload. no need to register the pkiAuthc plugin again\n        if(pkiAuthenticationPlugin.isInterceptorRegistered()) return;\n        log.info(\"PKIAuthenticationPlugin is managing internode requests\");\n        addHttpConfigurer(pkiAuthenticationPlugin);\n        pkiAuthenticationPlugin.setInterceptorRegistered();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3083bcc51ed7ec2cab055c35426063671731e274":["c9a1ca553b493eeddb5b48cee6811e9866fd2117"],"859081acf00749f5dd462772c571d611d4a4d2db":["3083bcc51ed7ec2cab055c35426063671731e274"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b3a34dae868734612eb6329aa0ef754f30bd2036":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c9a1ca553b493eeddb5b48cee6811e9866fd2117":["b3a34dae868734612eb6329aa0ef754f30bd2036"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["859081acf00749f5dd462772c571d611d4a4d2db"]},"commit2Childs":{"3083bcc51ed7ec2cab055c35426063671731e274":["859081acf00749f5dd462772c571d611d4a4d2db"],"859081acf00749f5dd462772c571d611d4a4d2db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b3a34dae868734612eb6329aa0ef754f30bd2036"],"b3a34dae868734612eb6329aa0ef754f30bd2036":["c9a1ca553b493eeddb5b48cee6811e9866fd2117"],"c9a1ca553b493eeddb5b48cee6811e9866fd2117":["3083bcc51ed7ec2cab055c35426063671731e274"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}