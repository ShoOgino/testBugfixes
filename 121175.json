{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecDocParser#pathType(File).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecDocParser#pathType(File).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecDocParser#pathType(File).mjava","sourceNew":"  /**\n   * Compute the path type of a file by inspecting name of file and its parents\n   */\n  public static ParsePathType pathType(File f) {\n    int pathLength = 0;\n    while (f != null && ++pathLength < MAX_PATH_LENGTH) {\n      ParsePathType ppt = pathName2Type.get(f.getName().toUpperCase(Locale.ENGLISH));\n      if (ppt!=null) {\n        return ppt;\n      }\n      f = f.getParentFile();\n    }\n    return DEFAULT_PATH_TYPE;\n  }\n\n","sourceOld":"  /**\n   * Compute the path type of a file by inspecting name of file and its parents\n   */\n  public static ParsePathType pathType(File f) {\n    int pathLength = 0;\n    while (f != null && ++pathLength < MAX_PATH_LENGTH) {\n      ParsePathType ppt = pathName2Type.get(f.getName().toUpperCase(Locale.ENGLISH));\n      if (ppt!=null) {\n        return ppt;\n      }\n      f = f.getParentFile();\n    }\n    return DEFAULT_PATH_TYPE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279c7cd47f17e1e8b674a3741ff5f040bc680be","date":1341675760,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecDocParser#pathType(File).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecDocParser#pathType(File).mjava","sourceNew":"  /**\n   * Compute the path type of a file by inspecting name of file and its parents\n   */\n  public static ParsePathType pathType(File f) {\n    int pathLength = 0;\n    while (f != null && ++pathLength < MAX_PATH_LENGTH) {\n      ParsePathType ppt = pathName2Type.get(f.getName().toUpperCase(Locale.ROOT));\n      if (ppt!=null) {\n        return ppt;\n      }\n      f = f.getParentFile();\n    }\n    return DEFAULT_PATH_TYPE;\n  }\n\n","sourceOld":"  /**\n   * Compute the path type of a file by inspecting name of file and its parents\n   */\n  public static ParsePathType pathType(File f) {\n    int pathLength = 0;\n    while (f != null && ++pathLength < MAX_PATH_LENGTH) {\n      ParsePathType ppt = pathName2Type.get(f.getName().toUpperCase(Locale.ENGLISH));\n      if (ppt!=null) {\n        return ppt;\n      }\n      f = f.getParentFile();\n    }\n    return DEFAULT_PATH_TYPE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecDocParser#pathType(File).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecDocParser#pathType(File).mjava","sourceNew":"  /**\n   * Compute the path type of a file by inspecting name of file and its parents\n   */\n  public static ParsePathType pathType(File f) {\n    int pathLength = 0;\n    while (f != null && ++pathLength < MAX_PATH_LENGTH) {\n      ParsePathType ppt = pathName2Type.get(f.getName().toUpperCase(Locale.ROOT));\n      if (ppt!=null) {\n        return ppt;\n      }\n      f = f.getParentFile();\n    }\n    return DEFAULT_PATH_TYPE;\n  }\n\n","sourceOld":"  /**\n   * Compute the path type of a file by inspecting name of file and its parents\n   */\n  public static ParsePathType pathType(File f) {\n    int pathLength = 0;\n    while (f != null && ++pathLength < MAX_PATH_LENGTH) {\n      ParsePathType ppt = pathName2Type.get(f.getName().toUpperCase(Locale.ENGLISH));\n      if (ppt!=null) {\n        return ppt;\n      }\n      f = f.getParentFile();\n    }\n    return DEFAULT_PATH_TYPE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecDocParser#pathType(File).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecDocParser#pathType(File).mjava","sourceNew":"  /**\n   * Compute the path type of a file by inspecting name of file and its parents\n   */\n  public static ParsePathType pathType(File f) {\n    int pathLength = 0;\n    while (f != null && ++pathLength < MAX_PATH_LENGTH) {\n      ParsePathType ppt = pathName2Type.get(f.getName().toUpperCase(Locale.ROOT));\n      if (ppt!=null) {\n        return ppt;\n      }\n      f = f.getParentFile();\n    }\n    return DEFAULT_PATH_TYPE;\n  }\n\n","sourceOld":"  /**\n   * Compute the path type of a file by inspecting name of file and its parents\n   */\n  public static ParsePathType pathType(File f) {\n    int pathLength = 0;\n    while (f != null && ++pathLength < MAX_PATH_LENGTH) {\n      ParsePathType ppt = pathName2Type.get(f.getName().toUpperCase(Locale.ENGLISH));\n      if (ppt!=null) {\n        return ppt;\n      }\n      f = f.getParentFile();\n    }\n    return DEFAULT_PATH_TYPE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecDocParser#pathType(File).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecDocParser#pathType(File).mjava","sourceNew":"  /**\n   * Compute the path type of a file by inspecting name of file and its parents\n   */\n  public static ParsePathType pathType(File f) {\n    int pathLength = 0;\n    while (f != null && ++pathLength < MAX_PATH_LENGTH) {\n      ParsePathType ppt = pathName2Type.get(f.getName().toUpperCase(Locale.ROOT));\n      if (ppt!=null) {\n        return ppt;\n      }\n      f = f.getParentFile();\n    }\n    return DEFAULT_PATH_TYPE;\n  }\n\n","sourceOld":"  /**\n   * Compute the path type of a file by inspecting name of file and its parents\n   */\n  public static ParsePathType pathType(File f) {\n    int pathLength = 0;\n    while (f != null && ++pathLength < MAX_PATH_LENGTH) {\n      ParsePathType ppt = pathName2Type.get(f.getName().toUpperCase(Locale.ENGLISH));\n      if (ppt!=null) {\n        return ppt;\n      }\n      f = f.getParentFile();\n    }\n    return DEFAULT_PATH_TYPE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecDocParser#pathType(Path).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecDocParser#pathType(File).mjava","sourceNew":"  /**\n   * Compute the path type of a file by inspecting name of file and its parents\n   */\n  public static ParsePathType pathType(Path f) {\n    int pathLength = 0;\n    while (f != null && ++pathLength < MAX_PATH_LENGTH) {\n      ParsePathType ppt = pathName2Type.get(f.getFileName().toString().toUpperCase(Locale.ROOT));\n      if (ppt!=null) {\n        return ppt;\n      }\n      f = f.getParent();\n    }\n    return DEFAULT_PATH_TYPE;\n  }\n\n","sourceOld":"  /**\n   * Compute the path type of a file by inspecting name of file and its parents\n   */\n  public static ParsePathType pathType(File f) {\n    int pathLength = 0;\n    while (f != null && ++pathLength < MAX_PATH_LENGTH) {\n      ParsePathType ppt = pathName2Type.get(f.getName().toUpperCase(Locale.ROOT));\n      if (ppt!=null) {\n        return ppt;\n      }\n      f = f.getParentFile();\n    }\n    return DEFAULT_PATH_TYPE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2acf500f78aa12b92e371fd89c719291986b6b90":["b89678825b68eccaf09e6ab71675fc0b0af1e099","9279c7cd47f17e1e8b674a3741ff5f040bc680be"],"f4abec28b874149a7223e32cc7a01704c27790de":["2acf500f78aa12b92e371fd89c719291986b6b90"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f4abec28b874149a7223e32cc7a01704c27790de"],"46d8ada1fff8d18cb197c38c7983225162599948":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fe33227f6805edab2036cbb80645cc4e2d1fa424","9279c7cd47f17e1e8b674a3741ff5f040bc680be","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["2acf500f78aa12b92e371fd89c719291986b6b90"],"2acf500f78aa12b92e371fd89c719291986b6b90":["fe33227f6805edab2036cbb80645cc4e2d1fa424","f4abec28b874149a7223e32cc7a01704c27790de","46d8ada1fff8d18cb197c38c7983225162599948"],"f4abec28b874149a7223e32cc7a01704c27790de":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}