{"path":"solr/core/src/test/org/apache/solr/schema/TestUseDocValuesAsStored#nextValues(int,String).mjava","commits":[{"id":"a83d6857d62b422f79747a834cfbfdc1610fd515","date":1458168983,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestUseDocValuesAsStored#nextValues(int,String).mjava","pathOld":"/dev/null","sourceNew":"  private String[] nextValues(int arity, String valueType) throws Exception {\n    String[] values = new String[arity];\n    for (int i = 0 ; i < arity ; ++i) {\n      switch (valueType) {\n        case \"int\": values[i] = String.valueOf(random().nextInt()); break;\n        case \"double\": values[i] = String.valueOf(Double.longBitsToDouble(random().nextLong())); break;\n        case \"long\": values[i] = String.valueOf(random().nextLong()); break;\n        case \"float\": values[i] = String.valueOf(Float.intBitsToFloat(random().nextInt())); break;\n        case \"enum\": values[i] = SEVERITY[TestUtil.nextInt(random(), 0, SEVERITY.length - 1)]; break;\n        case \"str\": {\n          String str = TestUtil.randomRealisticUnicodeString(random());\n          values[i] = BAD_CHAR_PATTERN.matcher(str).replaceAll(\"\\uFFFD\");\n          break;\n        }\n        case \"date\": {\n          long epochMillis = TestUtil.nextLong(random(), START_RANDOM_EPOCH_MILLIS, END_RANDOM_EPOCH_MILLIS);\n          LocalDateTime dateTime = LocalDateTime.ofInstant(Instant.ofEpochMilli(epochMillis), ZoneOffset.UTC);\n          values[i] = dateTime.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME) + 'Z';\n          break;\n        }\n        default: throw new Exception(\"unknown type '\" + valueType + \"'\");\n      }\n    }\n    return values;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3f6c7717a0f1decd1668144537943efcc70cd95","date":1459359762,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestUseDocValuesAsStored#nextValues(int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestUseDocValuesAsStored#nextValues(int,String).mjava","sourceNew":"  private String[] nextValues(int arity, String valueType) throws Exception {\n    String[] values = new String[arity];\n    for (int i = 0 ; i < arity ; ++i) {\n      switch (valueType) {\n        case \"int\": values[i] = String.valueOf(random().nextInt()); break;\n        case \"double\": values[i] = String.valueOf(Double.longBitsToDouble(random().nextLong())); break;\n        case \"long\": values[i] = String.valueOf(random().nextLong()); break;\n        case \"float\": values[i] = String.valueOf(Float.intBitsToFloat(random().nextInt())); break;\n        case \"enum\": values[i] = SEVERITY[TestUtil.nextInt(random(), 0, SEVERITY.length - 1)]; break;\n        case \"str\": {\n          String str = TestUtil.randomRealisticUnicodeString(random());\n          values[i] = BAD_CHAR_PATTERN.matcher(str).replaceAll(\"\\uFFFD\");\n          break;\n        }\n        case \"date\": {\n          long epochMillis = TestUtil.nextLong(random(), START_RANDOM_EPOCH_MILLIS, END_RANDOM_EPOCH_MILLIS);\n          values[i] = Instant.ofEpochMilli(epochMillis).toString();\n          break;\n        }\n        default: throw new Exception(\"unknown type '\" + valueType + \"'\");\n      }\n    }\n    return values;\n  }\n\n","sourceOld":"  private String[] nextValues(int arity, String valueType) throws Exception {\n    String[] values = new String[arity];\n    for (int i = 0 ; i < arity ; ++i) {\n      switch (valueType) {\n        case \"int\": values[i] = String.valueOf(random().nextInt()); break;\n        case \"double\": values[i] = String.valueOf(Double.longBitsToDouble(random().nextLong())); break;\n        case \"long\": values[i] = String.valueOf(random().nextLong()); break;\n        case \"float\": values[i] = String.valueOf(Float.intBitsToFloat(random().nextInt())); break;\n        case \"enum\": values[i] = SEVERITY[TestUtil.nextInt(random(), 0, SEVERITY.length - 1)]; break;\n        case \"str\": {\n          String str = TestUtil.randomRealisticUnicodeString(random());\n          values[i] = BAD_CHAR_PATTERN.matcher(str).replaceAll(\"\\uFFFD\");\n          break;\n        }\n        case \"date\": {\n          long epochMillis = TestUtil.nextLong(random(), START_RANDOM_EPOCH_MILLIS, END_RANDOM_EPOCH_MILLIS);\n          LocalDateTime dateTime = LocalDateTime.ofInstant(Instant.ofEpochMilli(epochMillis), ZoneOffset.UTC);\n          values[i] = dateTime.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME) + 'Z';\n          break;\n        }\n        default: throw new Exception(\"unknown type '\" + valueType + \"'\");\n      }\n    }\n    return values;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3f6c7717a0f1decd1668144537943efcc70cd95":["a83d6857d62b422f79747a834cfbfdc1610fd515"],"a83d6857d62b422f79747a834cfbfdc1610fd515":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d3f6c7717a0f1decd1668144537943efcc70cd95"]},"commit2Childs":{"d3f6c7717a0f1decd1668144537943efcc70cd95":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a83d6857d62b422f79747a834cfbfdc1610fd515":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a83d6857d62b422f79747a834cfbfdc1610fd515"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}