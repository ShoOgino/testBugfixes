{"path":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","commits":[{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    IndexReaderContext context = searcher.getTopReaderContext();\n    Map<Integer,TermContext> termStates = new HashMap<>();\n\n    for (Map.Entry<BytesRef,Integer> ent : termToID.entrySet()) {\n      if (ent.getKey() != null) {\n        termStates.put(ent.getValue(), TermContext.build(context, new Term(field, ent.getKey())));\n      }\n    }\n\n    return new TermAutomatonWeight(det, searcher, termStates, boost);\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    IndexReaderContext context = searcher.getTopReaderContext();\n    Map<Integer,TermContext> termStates = new HashMap<>();\n\n    for (Map.Entry<BytesRef,Integer> ent : termToID.entrySet()) {\n      if (ent.getKey() != null) {\n        termStates.put(ent.getValue(), TermContext.build(context, new Term(field, ent.getKey())));\n      }\n    }\n\n    return new TermAutomatonWeight(det, searcher, termStates, boost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    IndexReaderContext context = searcher.getTopReaderContext();\n    Map<Integer,TermContext> termStates = new HashMap<>();\n\n    for (Map.Entry<BytesRef,Integer> ent : termToID.entrySet()) {\n      if (ent.getKey() != null) {\n        termStates.put(ent.getValue(), TermContext.build(context, new Term(field, ent.getKey())));\n      }\n    }\n\n    return new TermAutomatonWeight(det, searcher, termStates, boost);\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    IndexReaderContext context = searcher.getTopReaderContext();\n    Map<Integer,TermContext> termStates = new HashMap<>();\n\n    for (Map.Entry<BytesRef,Integer> ent : termToID.entrySet()) {\n      if (ent.getKey() != null) {\n        termStates.put(ent.getValue(), TermContext.build(context, new Term(field, ent.getKey())));\n      }\n    }\n\n    return new TermAutomatonWeight(det, searcher, termStates, boost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6e9f769521480a623f897c0d59089b919fa4239","date":1515161835,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    IndexReaderContext context = searcher.getTopReaderContext();\n    Map<Integer,TermStates> termStates = new HashMap<>();\n\n    for (Map.Entry<BytesRef,Integer> ent : termToID.entrySet()) {\n      if (ent.getKey() != null) {\n        termStates.put(ent.getValue(), TermStates.build(context, new Term(field, ent.getKey()), scoreMode.needsScores()));\n      }\n    }\n\n    return new TermAutomatonWeight(det, searcher, termStates, boost);\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    IndexReaderContext context = searcher.getTopReaderContext();\n    Map<Integer,TermContext> termStates = new HashMap<>();\n\n    for (Map.Entry<BytesRef,Integer> ent : termToID.entrySet()) {\n      if (ent.getKey() != null) {\n        termStates.put(ent.getValue(), TermContext.build(context, new Term(field, ent.getKey())));\n      }\n    }\n\n    return new TermAutomatonWeight(det, searcher, termStates, boost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    IndexReaderContext context = searcher.getTopReaderContext();\n    Map<Integer,TermStates> termStates = new HashMap<>();\n\n    for (Map.Entry<BytesRef,Integer> ent : termToID.entrySet()) {\n      if (ent.getKey() != null) {\n        termStates.put(ent.getValue(), TermStates.build(context, new Term(field, ent.getKey()), scoreMode.needsScores()));\n      }\n    }\n\n    return new TermAutomatonWeight(det, searcher, termStates, boost);\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    IndexReaderContext context = searcher.getTopReaderContext();\n    Map<Integer,TermContext> termStates = new HashMap<>();\n\n    for (Map.Entry<BytesRef,Integer> ent : termToID.entrySet()) {\n      if (ent.getKey() != null) {\n        termStates.put(ent.getValue(), TermContext.build(context, new Term(field, ent.getKey())));\n      }\n    }\n\n    return new TermAutomatonWeight(det, searcher, termStates, boost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["417142ff08fda9cf0b72d5133e63097a166c6458","a6e9f769521480a623f897c0d59089b919fa4239"],"a6e9f769521480a623f897c0d59089b919fa4239":["417142ff08fda9cf0b72d5133e63097a166c6458"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"],"417142ff08fda9cf0b72d5133e63097a166c6458":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a6e9f769521480a623f897c0d59089b919fa4239":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["b94236357aaa22b76c10629851fe4e376e0cea82","a6e9f769521480a623f897c0d59089b919fa4239"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}