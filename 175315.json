{"path":"solr/core/src/test/org/apache/solr/analysis/TestJapaneseIterationMarkCharFilterFactory#testKanaOnlyIterationMarksWithJapaneseTokenizer().mjava","commits":[{"id":"17267f9d72c1fe67dc0ee18c3871fe147bfc17f2","date":1341920769,"type":0,"author":"Christian Moen","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestJapaneseIterationMarkCharFilterFactory#testKanaOnlyIterationMarksWithJapaneseTokenizer().mjava","pathOld":"/dev/null","sourceNew":"  public void testKanaOnlyIterationMarksWithJapaneseTokenizer() throws IOException {\n    JapaneseTokenizerFactory tokenizerFactory = new JapaneseTokenizerFactory();\n    Map<String, String> tokenizerArgs = Collections.emptyMap();\n    tokenizerFactory.init(tokenizerArgs);\n    tokenizerFactory.inform(new SolrResourceLoader(null, null));\n\n    JapaneseIterationMarkCharFilterFactory filterFactory = new JapaneseIterationMarkCharFilterFactory();\n    Map<String, String> filterArgs = new HashMap<String, String>();\n    filterArgs.put(\"normalizeKanji\", \"false\");\n    filterArgs.put(\"normalizeKana\", \"true\");\n    filterFactory.init(filterArgs);\n\n    CharStream filter = filterFactory.create(\n        CharReader.get(new StringReader(\"時々馬鹿々々しいところゞゝゝミスヾ\"))\n    );\n    TokenStream tokenStream = tokenizerFactory.create(filter);\n    assertTokenStreamContents(tokenStream, new String[]{\"時々\", \"馬鹿\", \"々\", \"々\", \"しい\", \"ところどころ\", \"ミ\", \"スズ\"});\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc706b1e03a539d44d99998108feb684bb44cbb2","date":1342522408,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestJapaneseIterationMarkCharFilterFactory#testKanaOnlyIterationMarksWithJapaneseTokenizer().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestJapaneseIterationMarkCharFilterFactory#testKanaOnlyIterationMarksWithJapaneseTokenizer().mjava","sourceNew":"  public void testKanaOnlyIterationMarksWithJapaneseTokenizer() throws IOException {\n    JapaneseTokenizerFactory tokenizerFactory = new JapaneseTokenizerFactory();\n    Map<String, String> tokenizerArgs = Collections.emptyMap();\n    tokenizerFactory.init(tokenizerArgs);\n    tokenizerFactory.inform(new SolrResourceLoader(null, null));\n\n    JapaneseIterationMarkCharFilterFactory filterFactory = new JapaneseIterationMarkCharFilterFactory();\n    Map<String, String> filterArgs = new HashMap<String, String>();\n    filterArgs.put(\"normalizeKanji\", \"false\");\n    filterArgs.put(\"normalizeKana\", \"true\");\n    filterFactory.init(filterArgs);\n\n    CharFilter filter = filterFactory.create(\n        new StringReader(\"時々馬鹿々々しいところゞゝゝミスヾ\")\n    );\n    TokenStream tokenStream = tokenizerFactory.create(filter);\n    assertTokenStreamContents(tokenStream, new String[]{\"時々\", \"馬鹿\", \"々\", \"々\", \"しい\", \"ところどころ\", \"ミ\", \"スズ\"});\n  }\n\n","sourceOld":"  public void testKanaOnlyIterationMarksWithJapaneseTokenizer() throws IOException {\n    JapaneseTokenizerFactory tokenizerFactory = new JapaneseTokenizerFactory();\n    Map<String, String> tokenizerArgs = Collections.emptyMap();\n    tokenizerFactory.init(tokenizerArgs);\n    tokenizerFactory.inform(new SolrResourceLoader(null, null));\n\n    JapaneseIterationMarkCharFilterFactory filterFactory = new JapaneseIterationMarkCharFilterFactory();\n    Map<String, String> filterArgs = new HashMap<String, String>();\n    filterArgs.put(\"normalizeKanji\", \"false\");\n    filterArgs.put(\"normalizeKana\", \"true\");\n    filterFactory.init(filterArgs);\n\n    CharStream filter = filterFactory.create(\n        CharReader.get(new StringReader(\"時々馬鹿々々しいところゞゝゝミスヾ\"))\n    );\n    TokenStream tokenStream = tokenizerFactory.create(filter);\n    assertTokenStreamContents(tokenStream, new String[]{\"時々\", \"馬鹿\", \"々\", \"々\", \"しい\", \"ところどころ\", \"ミ\", \"スズ\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestJapaneseIterationMarkCharFilterFactory#testKanaOnlyIterationMarksWithJapaneseTokenizer().mjava","pathOld":"/dev/null","sourceNew":"  public void testKanaOnlyIterationMarksWithJapaneseTokenizer() throws IOException {\n    JapaneseTokenizerFactory tokenizerFactory = new JapaneseTokenizerFactory();\n    Map<String, String> tokenizerArgs = Collections.emptyMap();\n    tokenizerFactory.init(tokenizerArgs);\n    tokenizerFactory.inform(new SolrResourceLoader(null, null));\n\n    JapaneseIterationMarkCharFilterFactory filterFactory = new JapaneseIterationMarkCharFilterFactory();\n    Map<String, String> filterArgs = new HashMap<String, String>();\n    filterArgs.put(\"normalizeKanji\", \"false\");\n    filterArgs.put(\"normalizeKana\", \"true\");\n    filterFactory.init(filterArgs);\n\n    CharFilter filter = filterFactory.create(\n        new StringReader(\"時々馬鹿々々しいところゞゝゝミスヾ\")\n    );\n    TokenStream tokenStream = tokenizerFactory.create(filter);\n    assertTokenStreamContents(tokenStream, new String[]{\"時々\", \"馬鹿\", \"々\", \"々\", \"しい\", \"ところどころ\", \"ミ\", \"スズ\"});\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3149c447232aff105275cf92bb495567e96b0c87","date":1343102374,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseIterationMarkCharFilterFactory#testKanaOnlyIterationMarksWithJapaneseTokenizer().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestJapaneseIterationMarkCharFilterFactory#testKanaOnlyIterationMarksWithJapaneseTokenizer().mjava","sourceNew":"  public void testKanaOnlyIterationMarksWithJapaneseTokenizer() throws IOException {\n    JapaneseTokenizerFactory tokenizerFactory = new JapaneseTokenizerFactory();\n    Map<String, String> tokenizerArgs = Collections.emptyMap();\n    tokenizerFactory.init(tokenizerArgs);\n    tokenizerFactory.inform(new SolrResourceLoader(null, null));\n\n    JapaneseIterationMarkCharFilterFactory filterFactory = new JapaneseIterationMarkCharFilterFactory();\n    Map<String, String> filterArgs = new HashMap<String, String>();\n    filterArgs.put(\"normalizeKanji\", \"false\");\n    filterArgs.put(\"normalizeKana\", \"true\");\n    filterFactory.init(filterArgs);\n\n    CharFilter filter = filterFactory.create(\n        new StringReader(\"時々馬鹿々々しいところゞゝゝミスヾ\")\n    );\n    TokenStream tokenStream = tokenizerFactory.create(filter);\n    assertTokenStreamContents(tokenStream, new String[]{\"時々\", \"馬鹿\", \"々\", \"々\", \"しい\", \"ところどころ\", \"ミ\", \"スズ\"});\n  }\n\n","sourceOld":"  public void testKanaOnlyIterationMarksWithJapaneseTokenizer() throws IOException {\n    JapaneseTokenizerFactory tokenizerFactory = new JapaneseTokenizerFactory();\n    Map<String, String> tokenizerArgs = Collections.emptyMap();\n    tokenizerFactory.init(tokenizerArgs);\n    tokenizerFactory.inform(new SolrResourceLoader(null, null));\n\n    JapaneseIterationMarkCharFilterFactory filterFactory = new JapaneseIterationMarkCharFilterFactory();\n    Map<String, String> filterArgs = new HashMap<String, String>();\n    filterArgs.put(\"normalizeKanji\", \"false\");\n    filterArgs.put(\"normalizeKana\", \"true\");\n    filterFactory.init(filterArgs);\n\n    CharFilter filter = filterFactory.create(\n        new StringReader(\"時々馬鹿々々しいところゞゝゝミスヾ\")\n    );\n    TokenStream tokenStream = tokenizerFactory.create(filter);\n    assertTokenStreamContents(tokenStream, new String[]{\"時々\", \"馬鹿\", \"々\", \"々\", \"しい\", \"ところどころ\", \"ミ\", \"スズ\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseIterationMarkCharFilterFactory#testKanaOnlyIterationMarksWithJapaneseTokenizer().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestJapaneseIterationMarkCharFilterFactory#testKanaOnlyIterationMarksWithJapaneseTokenizer().mjava","sourceNew":"  public void testKanaOnlyIterationMarksWithJapaneseTokenizer() throws IOException {\n    JapaneseTokenizerFactory tokenizerFactory = new JapaneseTokenizerFactory();\n    Map<String, String> tokenizerArgs = Collections.emptyMap();\n    tokenizerFactory.init(tokenizerArgs);\n    tokenizerFactory.inform(new StringMockResourceLoader(\"\"));\n\n    JapaneseIterationMarkCharFilterFactory filterFactory = new JapaneseIterationMarkCharFilterFactory();\n    Map<String, String> filterArgs = new HashMap<String, String>();\n    filterArgs.put(\"normalizeKanji\", \"false\");\n    filterArgs.put(\"normalizeKana\", \"true\");\n    filterFactory.init(filterArgs);\n\n    CharFilter filter = filterFactory.create(\n        new StringReader(\"時々馬鹿々々しいところゞゝゝミスヾ\")\n    );\n    TokenStream tokenStream = tokenizerFactory.create(filter);\n    assertTokenStreamContents(tokenStream, new String[]{\"時々\", \"馬鹿\", \"々\", \"々\", \"しい\", \"ところどころ\", \"ミ\", \"スズ\"});\n  }\n\n","sourceOld":"  public void testKanaOnlyIterationMarksWithJapaneseTokenizer() throws IOException {\n    JapaneseTokenizerFactory tokenizerFactory = new JapaneseTokenizerFactory();\n    Map<String, String> tokenizerArgs = Collections.emptyMap();\n    tokenizerFactory.init(tokenizerArgs);\n    tokenizerFactory.inform(new SolrResourceLoader(null, null));\n\n    JapaneseIterationMarkCharFilterFactory filterFactory = new JapaneseIterationMarkCharFilterFactory();\n    Map<String, String> filterArgs = new HashMap<String, String>();\n    filterArgs.put(\"normalizeKanji\", \"false\");\n    filterArgs.put(\"normalizeKana\", \"true\");\n    filterFactory.init(filterArgs);\n\n    CharFilter filter = filterFactory.create(\n        new StringReader(\"時々馬鹿々々しいところゞゝゝミスヾ\")\n    );\n    TokenStream tokenStream = tokenizerFactory.create(filter);\n    assertTokenStreamContents(tokenStream, new String[]{\"時々\", \"馬鹿\", \"々\", \"々\", \"しい\", \"ところどころ\", \"ミ\", \"スズ\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestJapaneseIterationMarkCharFilterFactory#testKanaOnlyIterationMarksWithJapaneseTokenizer().mjava","sourceNew":null,"sourceOld":"  public void testKanaOnlyIterationMarksWithJapaneseTokenizer() throws IOException {\n    JapaneseTokenizerFactory tokenizerFactory = new JapaneseTokenizerFactory();\n    Map<String, String> tokenizerArgs = Collections.emptyMap();\n    tokenizerFactory.init(tokenizerArgs);\n    tokenizerFactory.inform(new SolrResourceLoader(null, null));\n\n    JapaneseIterationMarkCharFilterFactory filterFactory = new JapaneseIterationMarkCharFilterFactory();\n    Map<String, String> filterArgs = new HashMap<String, String>();\n    filterArgs.put(\"normalizeKanji\", \"false\");\n    filterArgs.put(\"normalizeKana\", \"true\");\n    filterFactory.init(filterArgs);\n\n    CharFilter filter = filterFactory.create(\n        new StringReader(\"時々馬鹿々々しいところゞゝゝミスヾ\")\n    );\n    TokenStream tokenStream = tokenizerFactory.create(filter);\n    assertTokenStreamContents(tokenStream, new String[]{\"時々\", \"馬鹿\", \"々\", \"々\", \"しい\", \"ところどころ\", \"ミ\", \"スズ\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fc706b1e03a539d44d99998108feb684bb44cbb2":["17267f9d72c1fe67dc0ee18c3871fe147bfc17f2"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fc706b1e03a539d44d99998108feb684bb44cbb2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3149c447232aff105275cf92bb495567e96b0c87":["fc706b1e03a539d44d99998108feb684bb44cbb2"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["fe33227f6805edab2036cbb80645cc4e2d1fa424","5a1a22b1ad88b436661458df567f3fdb446392a4"],"17267f9d72c1fe67dc0ee18c3871fe147bfc17f2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["fc706b1e03a539d44d99998108feb684bb44cbb2","3149c447232aff105275cf92bb495567e96b0c87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a1a22b1ad88b436661458df567f3fdb446392a4"]},"commit2Childs":{"fc706b1e03a539d44d99998108feb684bb44cbb2":["fe33227f6805edab2036cbb80645cc4e2d1fa424","3149c447232aff105275cf92bb495567e96b0c87","5a1a22b1ad88b436661458df567f3fdb446392a4"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fe33227f6805edab2036cbb80645cc4e2d1fa424","17267f9d72c1fe67dc0ee18c3871fe147bfc17f2"],"3149c447232aff105275cf92bb495567e96b0c87":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"17267f9d72c1fe67dc0ee18c3871fe147bfc17f2":["fc706b1e03a539d44d99998108feb684bb44cbb2"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}