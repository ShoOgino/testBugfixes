{"path":"lucene/sandbox/src/java/org/apache/lucene/document/FloatPointNearestNeighbor.NearestVisitor#maybeUpdateMinMax().mjava","commits":[{"id":"1b73cddaec09172a09da82e758d0014ab8810ffa","date":1506898255,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/FloatPointNearestNeighbor.NearestVisitor#maybeUpdateMinMax().mjava","pathOld":"/dev/null","sourceNew":"    private void maybeUpdateMinMax() {\n      if (updateMinMaxCounter < 1024 || (updateMinMaxCounter & 0x3F) == 0x3F) {\n        NearestHit hit = hitQueue.peek();\n        float distance = (float)Math.sqrt(hit.distanceSquared);\n        float minDelta = getMinDelta(distance);\n        // String oldMin = Arrays.toString(min);\n        // String oldMax = Arrays.toString(max); \n        for (int d = 0 ; d < dims ; ++d) {\n          min[d] = (origin[d] - distance) - minDelta;\n          max[d] = (origin[d] + distance) + minDelta;\n          // System.out.println(\"origin[\" + d + \"] (\" + origin[d] + \") - distance (\" + distance + \") - minDelta (\" + minDelta + \") = min[\" + d + \"] (\" + min[d] + \")\");\n          // System.out.println(\"origin[\" + d + \"] (\" + origin[d] + \") + distance (\" + distance + \") + minDelta (\" + minDelta + \") = max[\" + d + \"] (\" + max[d] + \")\");\n        }\n        // System.out.println(\"maybeUpdateMinMax:  min: \" + oldMin + \" -> \" + Arrays.toString(min) + \"   max: \" + oldMax + \" -> \" + Arrays.toString(max));\n      }\n      ++updateMinMaxCounter;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/FloatPointNearestNeighbor.NearestVisitor#maybeUpdateMinMax().mjava","pathOld":"/dev/null","sourceNew":"    private void maybeUpdateMinMax() {\n      if (updateMinMaxCounter < 1024 || (updateMinMaxCounter & 0x3F) == 0x3F) {\n        NearestHit hit = hitQueue.peek();\n        float distance = (float)Math.sqrt(hit.distanceSquared);\n        float minDelta = getMinDelta(distance);\n        // String oldMin = Arrays.toString(min);\n        // String oldMax = Arrays.toString(max); \n        for (int d = 0 ; d < dims ; ++d) {\n          min[d] = (origin[d] - distance) - minDelta;\n          max[d] = (origin[d] + distance) + minDelta;\n          // System.out.println(\"origin[\" + d + \"] (\" + origin[d] + \") - distance (\" + distance + \") - minDelta (\" + minDelta + \") = min[\" + d + \"] (\" + min[d] + \")\");\n          // System.out.println(\"origin[\" + d + \"] (\" + origin[d] + \") + distance (\" + distance + \") + minDelta (\" + minDelta + \") = max[\" + d + \"] (\" + max[d] + \")\");\n        }\n        // System.out.println(\"maybeUpdateMinMax:  min: \" + oldMin + \" -> \" + Arrays.toString(min) + \"   max: \" + oldMax + \" -> \" + Arrays.toString(max));\n      }\n      ++updateMinMaxCounter;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"097748fa4ff327a26994476115f52d1a899b549f","date":1568267320,"type":4,"author":"Ignacio Vera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/FloatPointNearestNeighbor.NearestVisitor#maybeUpdateMinMax().mjava","sourceNew":null,"sourceOld":"    private void maybeUpdateMinMax() {\n      if (updateMinMaxCounter < 1024 || (updateMinMaxCounter & 0x3F) == 0x3F) {\n        NearestHit hit = hitQueue.peek();\n        float distance = (float)Math.sqrt(hit.distanceSquared);\n        float minDelta = getMinDelta(distance);\n        // String oldMin = Arrays.toString(min);\n        // String oldMax = Arrays.toString(max); \n        for (int d = 0 ; d < dims ; ++d) {\n          min[d] = (origin[d] - distance) - minDelta;\n          max[d] = (origin[d] + distance) + minDelta;\n          // System.out.println(\"origin[\" + d + \"] (\" + origin[d] + \") - distance (\" + distance + \") - minDelta (\" + minDelta + \") = min[\" + d + \"] (\" + min[d] + \")\");\n          // System.out.println(\"origin[\" + d + \"] (\" + origin[d] + \") + distance (\" + distance + \") + minDelta (\" + minDelta + \") = max[\" + d + \"] (\" + max[d] + \")\");\n        }\n        // System.out.println(\"maybeUpdateMinMax:  min: \" + oldMin + \" -> \" + Arrays.toString(min) + \"   max: \" + oldMax + \" -> \" + Arrays.toString(max));\n      }\n      ++updateMinMaxCounter;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1b73cddaec09172a09da82e758d0014ab8810ffa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1b73cddaec09172a09da82e758d0014ab8810ffa"],"097748fa4ff327a26994476115f52d1a899b549f":["1b73cddaec09172a09da82e758d0014ab8810ffa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["097748fa4ff327a26994476115f52d1a899b549f"]},"commit2Childs":{"1b73cddaec09172a09da82e758d0014ab8810ffa":["6240b74b884c5587f2a4062dd27d6c32bf228889","097748fa4ff327a26994476115f52d1a899b549f"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"097748fa4ff327a26994476115f52d1a899b549f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1b73cddaec09172a09da82e758d0014ab8810ffa","6240b74b884c5587f2a4062dd27d6c32bf228889"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}