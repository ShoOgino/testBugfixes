{"path":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#get(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#get(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/FixedBitSet#get(int).mjava","sourceNew":"  public boolean get(int index) {\n    assert index >= 0 && index < numBits: \"index=\" + index;\n    int i = index >> 6;               // div 64\n    // signed shift will keep a negative index and force an\n    // array-index-out-of-bounds-exception, removing the need for an explicit check.\n    int bit = index & 0x3f;           // mod 64\n    long bitmask = 1L << bit;\n    return (bits[i] & bitmask) != 0;\n  }\n\n","sourceOld":"  public boolean get(int index) {\n    assert index >= 0 && index < numBits: \"index=\" + index;\n    int i = index >> 6;               // div 64\n    // signed shift will keep a negative index and force an\n    // array-index-out-of-bounds-exception, removing the need for an explicit check.\n    int bit = index & 0x3f;           // mod 64\n    long bitmask = 1L << bit;\n    return (bits[i] & bitmask) != 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#get(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#get(int).mjava","sourceNew":"  @Override\n  public boolean get(int index) {\n    assert index >= 0 && index < numBits: \"index=\" + index;\n    int i = index >> 6;               // div 64\n    // signed shift will keep a negative index and force an\n    // array-index-out-of-bounds-exception, removing the need for an explicit check.\n    int bit = index & 0x3f;           // mod 64\n    long bitmask = 1L << bit;\n    return (bits[i] & bitmask) != 0;\n  }\n\n","sourceOld":"  public boolean get(int index) {\n    assert index >= 0 && index < numBits: \"index=\" + index;\n    int i = index >> 6;               // div 64\n    // signed shift will keep a negative index and force an\n    // array-index-out-of-bounds-exception, removing the need for an explicit check.\n    int bit = index & 0x3f;           // mod 64\n    long bitmask = 1L << bit;\n    return (bits[i] & bitmask) != 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#get(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#get(int).mjava","sourceNew":"  @Override\n  public boolean get(int index) {\n    assert index >= 0 && index < numBits: \"index=\" + index;\n    int i = index >> 6;               // div 64\n    // signed shift will keep a negative index and force an\n    // array-index-out-of-bounds-exception, removing the need for an explicit check.\n    int bit = index & 0x3f;           // mod 64\n    long bitmask = 1L << bit;\n    return (bits[i] & bitmask) != 0;\n  }\n\n","sourceOld":"  public boolean get(int index) {\n    assert index >= 0 && index < numBits: \"index=\" + index;\n    int i = index >> 6;               // div 64\n    // signed shift will keep a negative index and force an\n    // array-index-out-of-bounds-exception, removing the need for an explicit check.\n    int bit = index & 0x3f;           // mod 64\n    long bitmask = 1L << bit;\n    return (bits[i] & bitmask) != 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1","date":1392536197,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#get(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#get(int).mjava","sourceNew":"  @Override\n  public boolean get(int index) {\n    assert index >= 0 && index < numBits: \"index=\" + index + \", numBits=\" + numBits;\n    int i = index >> 6;               // div 64\n    // signed shift will keep a negative index and force an\n    // array-index-out-of-bounds-exception, removing the need for an explicit check.\n    int bit = index & 0x3f;           // mod 64\n    long bitmask = 1L << bit;\n    return (bits[i] & bitmask) != 0;\n  }\n\n","sourceOld":"  @Override\n  public boolean get(int index) {\n    assert index >= 0 && index < numBits: \"index=\" + index;\n    int i = index >> 6;               // div 64\n    // signed shift will keep a negative index and force an\n    // array-index-out-of-bounds-exception, removing the need for an explicit check.\n    int bit = index & 0x3f;           // mod 64\n    long bitmask = 1L << bit;\n    return (bits[i] & bitmask) != 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55cd30e9e9e71e141455bae8e74401676f036658","date":1406760593,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#get(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#get(int).mjava","sourceNew":"  @Override\n  public boolean get(int index) {\n    assert index >= 0 && index < numBits: \"index=\" + index + \", numBits=\" + numBits;\n    int i = index >> 6;               // div 64\n    // signed shift will keep a negative index and force an\n    // array-index-out-of-bounds-exception, removing the need for an explicit check.\n    long bitmask = 1L << index;\n    return (bits[i] & bitmask) != 0;\n  }\n\n","sourceOld":"  @Override\n  public boolean get(int index) {\n    assert index >= 0 && index < numBits: \"index=\" + index + \", numBits=\" + numBits;\n    int i = index >> 6;               // div 64\n    // signed shift will keep a negative index and force an\n    // array-index-out-of-bounds-exception, removing the need for an explicit check.\n    int bit = index & 0x3f;           // mod 64\n    long bitmask = 1L << bit;\n    return (bits[i] & bitmask) != 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7530de27b87b961b51f01bd1299b7004d46e8823"],"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1":["7530de27b87b961b51f01bd1299b7004d46e8823"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"55cd30e9e9e71e141455bae8e74401676f036658":["a69cf7f1b4cac5d5b1363402b565cd535f13e6a1"],"7530de27b87b961b51f01bd1299b7004d46e8823":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["55cd30e9e9e71e141455bae8e74401676f036658"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1":["55cd30e9e9e71e141455bae8e74401676f036658"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a69cf7f1b4cac5d5b1363402b565cd535f13e6a1"],"55cd30e9e9e71e141455bae8e74401676f036658":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}