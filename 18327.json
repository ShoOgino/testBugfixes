{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/ASCIIFoldingFilter#incrementToken().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/ASCIIFoldingFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/ASCIIFoldingFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      final char[] buffer = termAtt.buffer();\n      final int length = termAtt.length();\n\n      // If no characters actually require rewriting then we\n      // just return token as-is:\n      for(int i = 0 ; i < length ; ++i) {\n        final char c = buffer[i];\n        if (c >= '\\u0080')\n        {\n          foldToASCII(buffer, length);\n          termAtt.copyBuffer(output, 0, outputPos);\n          break;\n        }\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      final char[] buffer = termAtt.buffer();\n      final int length = termAtt.length();\n\n      // If no characters actually require rewriting then we\n      // just return token as-is:\n      for(int i = 0 ; i < length ; ++i) {\n        final char c = buffer[i];\n        if (c >= '\\u0080')\n        {\n          foldToASCII(buffer, length);\n          termAtt.copyBuffer(output, 0, outputPos);\n          break;\n        }\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45a6bf8bd13f2ff67e01fe594faeb22d11ab41d0","date":1392201774,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/ASCIIFoldingFilter#incrementToken().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/ASCIIFoldingFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (state != null) {\n      assert preserveOriginal : \"state should only be captured if preserveOriginal is true\";\n      restoreState(state);\n      posIncAttr.setPositionIncrement(0);\n      state = null;\n      return true;\n    }\n    if (input.incrementToken()) {\n      final char[] buffer = termAtt.buffer();\n      final int length = termAtt.length();\n\n      // If no characters actually require rewriting then we\n      // just return token as-is:\n      for(int i = 0 ; i < length ; ++i) {\n        final char c = buffer[i];\n        if (c >= '\\u0080')\n        {\n          foldToASCII(buffer, length);\n          termAtt.copyBuffer(output, 0, outputPos);\n          break;\n        }\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      final char[] buffer = termAtt.buffer();\n      final int length = termAtt.length();\n\n      // If no characters actually require rewriting then we\n      // just return token as-is:\n      for(int i = 0 ; i < length ; ++i) {\n        final char c = buffer[i];\n        if (c >= '\\u0080')\n        {\n          foldToASCII(buffer, length);\n          termAtt.copyBuffer(output, 0, outputPos);\n          break;\n        }\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45a6bf8bd13f2ff67e01fe594faeb22d11ab41d0":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["45a6bf8bd13f2ff67e01fe594faeb22d11ab41d0"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["45a6bf8bd13f2ff67e01fe594faeb22d11ab41d0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"45a6bf8bd13f2ff67e01fe594faeb22d11ab41d0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}