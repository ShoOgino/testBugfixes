{"path":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFloatFunction#exists(int,FunctionValues[]).mjava","commits":[{"id":"a701a7aab388afa1412a3dc23b4115c321f478c4","date":1413486320,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFloatFunction#exists(int,FunctionValues[]).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Called by {@link FunctionValues#exists} for each document.\n   *\n   * Default impl returns true if <em>all</em> of the specified <code>values</code> \n   * {@link FunctionValues#exists} for the specified doc, else false.\n   *\n   * @see FunctionValues#exists\n   * @see MultiFunction#allExists\n   */\n  protected boolean exists(int doc, FunctionValues[] valsArr) {\n    return MultiFunction.allExists(doc, valsArr);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFloatFunction#exists(int,FunctionValues[]).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Called by {@link FunctionValues#exists} for each document.\n   *\n   * Default impl returns true if <em>all</em> of the specified <code>values</code> \n   * {@link FunctionValues#exists} for the specified doc, else false.\n   *\n   * @see FunctionValues#exists\n   * @see MultiFunction#allExists\n   */\n  protected boolean exists(int doc, FunctionValues[] valsArr) {\n    return MultiFunction.allExists(doc, valsArr);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFloatFunction#exists(int,FunctionValues[]).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFloatFunction#exists(int,FunctionValues[]).mjava","sourceNew":"  /** \n   * Called by {@link FunctionValues#exists} for each document.\n   *\n   * Default impl returns true if <em>all</em> of the specified <code>values</code> \n   * {@link FunctionValues#exists} for the specified doc, else false.\n   *\n   * @see FunctionValues#exists\n   * @see MultiFunction#allExists\n   */\n  protected boolean exists(int doc, FunctionValues[] valsArr) throws IOException {\n    return MultiFunction.allExists(doc, valsArr);\n  }\n\n","sourceOld":"  /** \n   * Called by {@link FunctionValues#exists} for each document.\n   *\n   * Default impl returns true if <em>all</em> of the specified <code>values</code> \n   * {@link FunctionValues#exists} for the specified doc, else false.\n   *\n   * @see FunctionValues#exists\n   * @see MultiFunction#allExists\n   */\n  protected boolean exists(int doc, FunctionValues[] valsArr) {\n    return MultiFunction.allExists(doc, valsArr);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFloatFunction#exists(int,FunctionValues[]).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFloatFunction#exists(int,FunctionValues[]).mjava","sourceNew":"  /** \n   * Called by {@link FunctionValues#exists} for each document.\n   *\n   * Default impl returns true if <em>all</em> of the specified <code>values</code> \n   * {@link FunctionValues#exists} for the specified doc, else false.\n   *\n   * @see FunctionValues#exists\n   * @see MultiFunction#allExists\n   */\n  protected boolean exists(int doc, FunctionValues[] valsArr) throws IOException {\n    return MultiFunction.allExists(doc, valsArr);\n  }\n\n","sourceOld":"  /** \n   * Called by {@link FunctionValues#exists} for each document.\n   *\n   * Default impl returns true if <em>all</em> of the specified <code>values</code> \n   * {@link FunctionValues#exists} for the specified doc, else false.\n   *\n   * @see FunctionValues#exists\n   * @see MultiFunction#allExists\n   */\n  protected boolean exists(int doc, FunctionValues[] valsArr) {\n    return MultiFunction.allExists(doc, valsArr);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFloatFunction#exists(int,FunctionValues[]).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFloatFunction#exists(int,FunctionValues[]).mjava","sourceNew":"  /** \n   * Called by {@link FunctionValues#exists} for each document.\n   *\n   * Default impl returns true if <em>all</em> of the specified <code>values</code> \n   * {@link FunctionValues#exists} for the specified doc, else false.\n   *\n   * @see FunctionValues#exists\n   * @see MultiFunction#allExists\n   */\n  protected boolean exists(int doc, FunctionValues[] valsArr) throws IOException {\n    return MultiFunction.allExists(doc, valsArr);\n  }\n\n","sourceOld":"  /** \n   * Called by {@link FunctionValues#exists} for each document.\n   *\n   * Default impl returns true if <em>all</em> of the specified <code>values</code> \n   * {@link FunctionValues#exists} for the specified doc, else false.\n   *\n   * @see FunctionValues#exists\n   * @see MultiFunction#allExists\n   */\n  protected boolean exists(int doc, FunctionValues[] valsArr) {\n    return MultiFunction.allExists(doc, valsArr);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a701a7aab388afa1412a3dc23b4115c321f478c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a701a7aab388afa1412a3dc23b4115c321f478c4","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["a701a7aab388afa1412a3dc23b4115c321f478c4"],"a701a7aab388afa1412a3dc23b4115c321f478c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a701a7aab388afa1412a3dc23b4115c321f478c4","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","a701a7aab388afa1412a3dc23b4115c321f478c4"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a701a7aab388afa1412a3dc23b4115c321f478c4":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}