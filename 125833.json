{"path":"modules/analysis/kuromoji/src/test/org/apache/lucene/analysis/kuromoji/TestSearchMode#testSearchSegmentation().mjava","commits":[{"id":"f7df4efdafac6329df3550939440c9f79b5ad525","date":1328094197,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/kuromoji/src/test/org/apache/lucene/analysis/kuromoji/TestSearchMode#testSearchSegmentation().mjava","pathOld":"/dev/null","sourceNew":"  /** Test search mode segmentation */\n  public void testSearchSegmentation() throws IOException {\n    InputStream is = TestSearchMode.class.getResourceAsStream(SEGMENTATION_FILENAME);\n    if (is == null) {\n      throw new FileNotFoundException(\"Cannot find \" + SEGMENTATION_FILENAME + \" in test classpath\");\n    }\n    try {\n      LineNumberReader reader = new LineNumberReader(new InputStreamReader(is, IOUtils.CHARSET_UTF_8));\n      String line = null;\n      while ((line = reader.readLine()) != null) {\n        // Remove comments\n        line = line.replaceAll(\"#.*$\", \"\");\n        // Skip empty lines or comment lines\n        if (line.trim().isEmpty()) {\n          continue;\n        }\n        if (VERBOSE) {\n          System.out.println(\"Line no. \" + reader.getLineNumber() + \": \" + line);\n        }\n        String[] fields = line.split(\"\\t\", 2);\n        String sourceText = fields[0];\n        String[] expectedTokens = fields[1].split(\"\\\\s+\");\n        assertAnalyzesTo(analyzer, sourceText, expectedTokens);\n      }\n    } finally {\n      is.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0984ad47974c2d5d354519ddb2aa8358973a6271","date":1330868053,"type":3,"author":"Christian Moen","isMerge":false,"pathNew":"modules/analysis/kuromoji/src/test/org/apache/lucene/analysis/kuromoji/TestSearchMode#testSearchSegmentation().mjava","pathOld":"modules/analysis/kuromoji/src/test/org/apache/lucene/analysis/kuromoji/TestSearchMode#testSearchSegmentation().mjava","sourceNew":"  /** Test search mode segmentation */\n  public void testSearchSegmentation() throws IOException {\n    InputStream is = TestSearchMode.class.getResourceAsStream(SEGMENTATION_FILENAME);\n    if (is == null) {\n      throw new FileNotFoundException(\"Cannot find \" + SEGMENTATION_FILENAME + \" in test classpath\");\n    }\n    try {\n      LineNumberReader reader = new LineNumberReader(new InputStreamReader(is, IOUtils.CHARSET_UTF_8));\n      String line = null;\n      while ((line = reader.readLine()) != null) {\n        // Remove comments\n        line = line.replaceAll(\"#.*$\", \"\");\n        // Skip empty lines or comment lines\n        if (line.trim().isEmpty()) {\n          continue;\n        }\n        if (VERBOSE) {\n          System.out.println(\"Line no. \" + reader.getLineNumber() + \": \" + line);\n        }\n        String[] fields = line.split(\"\\t\", 2);\n        String sourceText = fields[0];\n        String[] expectedTokens = fields[1].split(\"\\\\s+\");\n        int[] expectedPosIncrs = new int[expectedTokens.length];\n        int[] expectedPosLengths = new int[expectedTokens.length];\n        for(int tokIDX=0;tokIDX<expectedTokens.length;tokIDX++) {\n          if (expectedTokens[tokIDX].endsWith(\"/0\")) {\n            expectedTokens[tokIDX] = expectedTokens[tokIDX].replace(\"/0\", \"\");\n            expectedPosLengths[tokIDX] = expectedTokens.length-1;\n          } else {\n            expectedPosIncrs[tokIDX] = 1;\n            expectedPosLengths[tokIDX] = 1;\n          }\n        }\n        assertAnalyzesTo(analyzer, sourceText, expectedTokens, expectedPosIncrs);\n      }\n    } finally {\n      is.close();\n    }\n  }\n\n","sourceOld":"  /** Test search mode segmentation */\n  public void testSearchSegmentation() throws IOException {\n    InputStream is = TestSearchMode.class.getResourceAsStream(SEGMENTATION_FILENAME);\n    if (is == null) {\n      throw new FileNotFoundException(\"Cannot find \" + SEGMENTATION_FILENAME + \" in test classpath\");\n    }\n    try {\n      LineNumberReader reader = new LineNumberReader(new InputStreamReader(is, IOUtils.CHARSET_UTF_8));\n      String line = null;\n      while ((line = reader.readLine()) != null) {\n        // Remove comments\n        line = line.replaceAll(\"#.*$\", \"\");\n        // Skip empty lines or comment lines\n        if (line.trim().isEmpty()) {\n          continue;\n        }\n        if (VERBOSE) {\n          System.out.println(\"Line no. \" + reader.getLineNumber() + \": \" + line);\n        }\n        String[] fields = line.split(\"\\t\", 2);\n        String sourceText = fields[0];\n        String[] expectedTokens = fields[1].split(\"\\\\s+\");\n        assertAnalyzesTo(analyzer, sourceText, expectedTokens);\n      }\n    } finally {\n      is.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/analysis/kuromoji/src/test/org/apache/lucene/analysis/kuromoji/TestSearchMode#testSearchSegmentation().mjava","pathOld":"modules/analysis/kuromoji/src/test/org/apache/lucene/analysis/kuromoji/TestSearchMode#testSearchSegmentation().mjava","sourceNew":"  /** Test search mode segmentation */\n  public void testSearchSegmentation() throws IOException {\n    InputStream is = TestSearchMode.class.getResourceAsStream(SEGMENTATION_FILENAME);\n    if (is == null) {\n      throw new FileNotFoundException(\"Cannot find \" + SEGMENTATION_FILENAME + \" in test classpath\");\n    }\n    try {\n      LineNumberReader reader = new LineNumberReader(new InputStreamReader(is, IOUtils.CHARSET_UTF_8));\n      String line = null;\n      while ((line = reader.readLine()) != null) {\n        // Remove comments\n        line = line.replaceAll(\"#.*$\", \"\");\n        // Skip empty lines or comment lines\n        if (line.trim().isEmpty()) {\n          continue;\n        }\n        if (VERBOSE) {\n          System.out.println(\"Line no. \" + reader.getLineNumber() + \": \" + line);\n        }\n        String[] fields = line.split(\"\\t\", 2);\n        String sourceText = fields[0];\n        String[] expectedTokens = fields[1].split(\"\\\\s+\");\n        int[] expectedPosIncrs = new int[expectedTokens.length];\n        int[] expectedPosLengths = new int[expectedTokens.length];\n        for(int tokIDX=0;tokIDX<expectedTokens.length;tokIDX++) {\n          if (expectedTokens[tokIDX].endsWith(\"/0\")) {\n            expectedTokens[tokIDX] = expectedTokens[tokIDX].replace(\"/0\", \"\");\n            expectedPosLengths[tokIDX] = expectedTokens.length-1;\n          } else {\n            expectedPosIncrs[tokIDX] = 1;\n            expectedPosLengths[tokIDX] = 1;\n          }\n        }\n        assertAnalyzesTo(analyzer, sourceText, expectedTokens, expectedPosIncrs);\n      }\n    } finally {\n      is.close();\n    }\n  }\n\n","sourceOld":"  /** Test search mode segmentation */\n  public void testSearchSegmentation() throws IOException {\n    InputStream is = TestSearchMode.class.getResourceAsStream(SEGMENTATION_FILENAME);\n    if (is == null) {\n      throw new FileNotFoundException(\"Cannot find \" + SEGMENTATION_FILENAME + \" in test classpath\");\n    }\n    try {\n      LineNumberReader reader = new LineNumberReader(new InputStreamReader(is, IOUtils.CHARSET_UTF_8));\n      String line = null;\n      while ((line = reader.readLine()) != null) {\n        // Remove comments\n        line = line.replaceAll(\"#.*$\", \"\");\n        // Skip empty lines or comment lines\n        if (line.trim().isEmpty()) {\n          continue;\n        }\n        if (VERBOSE) {\n          System.out.println(\"Line no. \" + reader.getLineNumber() + \": \" + line);\n        }\n        String[] fields = line.split(\"\\t\", 2);\n        String sourceText = fields[0];\n        String[] expectedTokens = fields[1].split(\"\\\\s+\");\n        assertAnalyzesTo(analyzer, sourceText, expectedTokens);\n      }\n    } finally {\n      is.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98d45c1ff2c99694b6de2201175f9b8b8b27b597","date":1332757908,"type":5,"author":"Christian Moen","isMerge":false,"pathNew":"modules/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestSearchMode#testSearchSegmentation().mjava","pathOld":"modules/analysis/kuromoji/src/test/org/apache/lucene/analysis/kuromoji/TestSearchMode#testSearchSegmentation().mjava","sourceNew":"  /** Test search mode segmentation */\n  public void testSearchSegmentation() throws IOException {\n    InputStream is = TestSearchMode.class.getResourceAsStream(SEGMENTATION_FILENAME);\n    if (is == null) {\n      throw new FileNotFoundException(\"Cannot find \" + SEGMENTATION_FILENAME + \" in test classpath\");\n    }\n    try {\n      LineNumberReader reader = new LineNumberReader(new InputStreamReader(is, IOUtils.CHARSET_UTF_8));\n      String line = null;\n      while ((line = reader.readLine()) != null) {\n        // Remove comments\n        line = line.replaceAll(\"#.*$\", \"\");\n        // Skip empty lines or comment lines\n        if (line.trim().isEmpty()) {\n          continue;\n        }\n        if (VERBOSE) {\n          System.out.println(\"Line no. \" + reader.getLineNumber() + \": \" + line);\n        }\n        String[] fields = line.split(\"\\t\", 2);\n        String sourceText = fields[0];\n        String[] expectedTokens = fields[1].split(\"\\\\s+\");\n        int[] expectedPosIncrs = new int[expectedTokens.length];\n        int[] expectedPosLengths = new int[expectedTokens.length];\n        for(int tokIDX=0;tokIDX<expectedTokens.length;tokIDX++) {\n          if (expectedTokens[tokIDX].endsWith(\"/0\")) {\n            expectedTokens[tokIDX] = expectedTokens[tokIDX].replace(\"/0\", \"\");\n            expectedPosLengths[tokIDX] = expectedTokens.length-1;\n          } else {\n            expectedPosIncrs[tokIDX] = 1;\n            expectedPosLengths[tokIDX] = 1;\n          }\n        }\n        assertAnalyzesTo(analyzer, sourceText, expectedTokens, expectedPosIncrs);\n      }\n    } finally {\n      is.close();\n    }\n  }\n\n","sourceOld":"  /** Test search mode segmentation */\n  public void testSearchSegmentation() throws IOException {\n    InputStream is = TestSearchMode.class.getResourceAsStream(SEGMENTATION_FILENAME);\n    if (is == null) {\n      throw new FileNotFoundException(\"Cannot find \" + SEGMENTATION_FILENAME + \" in test classpath\");\n    }\n    try {\n      LineNumberReader reader = new LineNumberReader(new InputStreamReader(is, IOUtils.CHARSET_UTF_8));\n      String line = null;\n      while ((line = reader.readLine()) != null) {\n        // Remove comments\n        line = line.replaceAll(\"#.*$\", \"\");\n        // Skip empty lines or comment lines\n        if (line.trim().isEmpty()) {\n          continue;\n        }\n        if (VERBOSE) {\n          System.out.println(\"Line no. \" + reader.getLineNumber() + \": \" + line);\n        }\n        String[] fields = line.split(\"\\t\", 2);\n        String sourceText = fields[0];\n        String[] expectedTokens = fields[1].split(\"\\\\s+\");\n        int[] expectedPosIncrs = new int[expectedTokens.length];\n        int[] expectedPosLengths = new int[expectedTokens.length];\n        for(int tokIDX=0;tokIDX<expectedTokens.length;tokIDX++) {\n          if (expectedTokens[tokIDX].endsWith(\"/0\")) {\n            expectedTokens[tokIDX] = expectedTokens[tokIDX].replace(\"/0\", \"\");\n            expectedPosLengths[tokIDX] = expectedTokens.length-1;\n          } else {\n            expectedPosIncrs[tokIDX] = 1;\n            expectedPosLengths[tokIDX] = 1;\n          }\n        }\n        assertAnalyzesTo(analyzer, sourceText, expectedTokens, expectedPosIncrs);\n      }\n    } finally {\n      is.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["f7df4efdafac6329df3550939440c9f79b5ad525","0984ad47974c2d5d354519ddb2aa8358973a6271"],"0984ad47974c2d5d354519ddb2aa8358973a6271":["f7df4efdafac6329df3550939440c9f79b5ad525"],"f7df4efdafac6329df3550939440c9f79b5ad525":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"98d45c1ff2c99694b6de2201175f9b8b8b27b597":["0984ad47974c2d5d354519ddb2aa8358973a6271"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["98d45c1ff2c99694b6de2201175f9b8b8b27b597"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"0984ad47974c2d5d354519ddb2aa8358973a6271":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","98d45c1ff2c99694b6de2201175f9b8b8b27b597"],"f7df4efdafac6329df3550939440c9f79b5ad525":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","0984ad47974c2d5d354519ddb2aa8358973a6271"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f7df4efdafac6329df3550939440c9f79b5ad525"],"98d45c1ff2c99694b6de2201175f9b8b8b27b597":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}