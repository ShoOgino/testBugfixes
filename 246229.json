{"path":"contrib/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun#createReutersIndex().mjava","commits":[{"id":"df2d68685a69bd82bf79243e28623c0775eb7bd8","date":1185567892,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun#createReutersIndex().mjava","pathOld":"/dev/null","sourceNew":"  // use benchmark logic to create the full Reuters index\n  private void createReutersIndex() throws Exception {\n    // 1. alg definition\n    String algLines[] = {\n        \"# ----- properties \",\n        \"doc.maker=\"+ReutersDocMaker.class.getName(),\n        \"doc.add.log.step=2500\",\n        \"doc.term.vector=false\",\n        \"doc.maker.forever=false\",\n        \"directory=FSDirectory\",\n        \"doc.stored=true\",\n        \"doc.tokenized=true\",\n        \"# ----- alg \",\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : *\",\n        \"CloseIndex\",\n    };\n    \n    // 2. execute the algorithm  (required in every \"logic\" test)\n    TestPerfTasksLogic.execBenchmark(algLines);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b","date":1245355139,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun#createReutersIndex().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun#createReutersIndex().mjava","sourceNew":"  // use benchmark logic to create the full Reuters index\n  private void createReutersIndex() throws Exception {\n    // 1. alg definition\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=\"+ReutersContentSource.class.getName(),\n        \"content.source.log.step=2500\",\n        \"doc.term.vector=false\",\n        \"content.source.forever=false\",\n        \"directory=FSDirectory\",\n        \"doc.stored=true\",\n        \"doc.tokenized=true\",\n        \"# ----- alg \",\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : *\",\n        \"CloseIndex\",\n    };\n    \n    // 2. execute the algorithm  (required in every \"logic\" test)\n    TestPerfTasksLogic.execBenchmark(algLines);\n  }\n\n","sourceOld":"  // use benchmark logic to create the full Reuters index\n  private void createReutersIndex() throws Exception {\n    // 1. alg definition\n    String algLines[] = {\n        \"# ----- properties \",\n        \"doc.maker=\"+ReutersDocMaker.class.getName(),\n        \"doc.add.log.step=2500\",\n        \"doc.term.vector=false\",\n        \"doc.maker.forever=false\",\n        \"directory=FSDirectory\",\n        \"doc.stored=true\",\n        \"doc.tokenized=true\",\n        \"# ----- alg \",\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : *\",\n        \"CloseIndex\",\n    };\n    \n    // 2. execute the algorithm  (required in every \"logic\" test)\n    TestPerfTasksLogic.execBenchmark(algLines);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c972e92a005a8b26f565dfaa00d04e46df5cb025","date":1266752436,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun#createReutersIndex().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun#createReutersIndex().mjava","sourceNew":"  // use benchmark logic to create the mini Reuters index\n  private void createReutersIndex() throws Exception {\n    // 1. alg definition\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters578LinesFile(),\n        \"content.source.log.step=2500\",\n        \"doc.term.vector=false\",\n        \"content.source.forever=false\",\n        \"directory=FSDirectory\",\n        \"doc.stored=true\",\n        \"doc.tokenized=true\",\n        \"# ----- alg \",\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : *\",\n        \"CloseIndex\",\n    };\n    \n    // 2. execute the algorithm  (required in every \"logic\" test)\n    TestPerfTasksLogic.execBenchmark(algLines);\n  }\n\n","sourceOld":"  // use benchmark logic to create the full Reuters index\n  private void createReutersIndex() throws Exception {\n    // 1. alg definition\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=\"+ReutersContentSource.class.getName(),\n        \"content.source.log.step=2500\",\n        \"doc.term.vector=false\",\n        \"content.source.forever=false\",\n        \"directory=FSDirectory\",\n        \"doc.stored=true\",\n        \"doc.tokenized=true\",\n        \"# ----- alg \",\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : *\",\n        \"CloseIndex\",\n    };\n    \n    // 2. execute the algorithm  (required in every \"logic\" test)\n    TestPerfTasksLogic.execBenchmark(algLines);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun#createReutersIndex().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun#createReutersIndex().mjava","sourceNew":"  // use benchmark logic to create the mini Reuters index\n  private void createReutersIndex() throws Exception {\n    // 1. alg definition\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters578LinesFile(),\n        \"content.source.log.step=2500\",\n        \"doc.term.vector=false\",\n        \"content.source.forever=false\",\n        \"directory=FSDirectory\",\n        \"doc.stored=true\",\n        \"doc.tokenized=true\",\n        \"# ----- alg \",\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : *\",\n        \"CloseIndex\",\n    };\n    \n    // 2. execute the algorithm  (required in every \"logic\" test)\n    TestPerfTasksLogic.execBenchmark(algLines);\n  }\n\n","sourceOld":"  // use benchmark logic to create the mini Reuters index\n  private void createReutersIndex() throws Exception {\n    // 1. alg definition\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters578LinesFile(),\n        \"content.source.log.step=2500\",\n        \"doc.term.vector=false\",\n        \"content.source.forever=false\",\n        \"directory=FSDirectory\",\n        \"doc.stored=true\",\n        \"doc.tokenized=true\",\n        \"# ----- alg \",\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : *\",\n        \"CloseIndex\",\n    };\n    \n    // 2. execute the algorithm  (required in every \"logic\" test)\n    TestPerfTasksLogic.execBenchmark(algLines);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b":["df2d68685a69bd82bf79243e28623c0775eb7bd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c972e92a005a8b26f565dfaa00d04e46df5cb025":["6944b9fa6d8ef96b83ae2d3a4332d03b3857355b"],"df2d68685a69bd82bf79243e28623c0775eb7bd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c972e92a005a8b26f565dfaa00d04e46df5cb025"]},"commit2Childs":{"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b":["c972e92a005a8b26f565dfaa00d04e46df5cb025"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["df2d68685a69bd82bf79243e28623c0775eb7bd8"],"df2d68685a69bd82bf79243e28623c0775eb7bd8":["6944b9fa6d8ef96b83ae2d3a4332d03b3857355b"],"c972e92a005a8b26f565dfaa00d04e46df5cb025":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}