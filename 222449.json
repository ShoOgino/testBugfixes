{"path":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeo3dShapeGenerator#getPointsAboveAndsort(List[GeoPoint],GeoPoint).mjava","commits":[{"id":"f215583134d6d66410e3c48b32282e3eb9d5fcde","date":1505141283,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeo3dShapeGenerator#getPointsAboveAndsort(List[GeoPoint],GeoPoint).mjava","pathOld":"/dev/null","sourceNew":"  private List<GeoPoint> getPointsAboveAndsort(List<GeoPoint> points,GeoPoint lPoint) {\n    List<GeoPoint> BPoints = new ArrayList<>();\n    for (GeoPoint point : points){\n      if(point.getLatitude() > lPoint.getLatitude()){\n        BPoints.add(point);\n      }\n    }\n    Collections.sort(BPoints, new Comparator<GeoPoint>() {\n      public int compare(GeoPoint idx1, GeoPoint idx2) {\n        return Double.compare(idx1.getLongitude(), idx2.getLongitude());\n      }\n    });\n    return BPoints;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"685bd38810c206c93e9058f3c2cfa9827c086c27","date":1505751821,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeo3dShapeGenerator#getPointsAboveAndsort(List[GeoPoint],GeoPoint).mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoShapeGenerator#getPointsAboveAndsort(List[GeoPoint],GeoPoint).mjava","sourceNew":"  private List<GeoPoint> getPointsAboveAndsort(List<GeoPoint> points,GeoPoint lPoint) {\n    List<GeoPoint> BPoints = new ArrayList<>();\n    for (GeoPoint point : points){\n      if(point.getLatitude() > lPoint.getLatitude()){\n        BPoints.add(point);\n      }\n    }\n    Collections.sort(BPoints, new Comparator<GeoPoint>() {\n      public int compare(GeoPoint idx1, GeoPoint idx2) {\n        return Double.compare(idx1.getLongitude(), idx2.getLongitude());\n      }\n    });\n    return BPoints;\n  }\n\n","sourceOld":"  private List<GeoPoint> getPointsAboveAndsort(List<GeoPoint> points,GeoPoint lPoint) {\n    List<GeoPoint> BPoints = new ArrayList<>();\n    for (GeoPoint point : points){\n      if(point.getLatitude() > lPoint.getLatitude()){\n        BPoints.add(point);\n      }\n    }\n    Collections.sort(BPoints, new Comparator<GeoPoint>() {\n      public int compare(GeoPoint idx1, GeoPoint idx2) {\n        return Double.compare(idx1.getLongitude(), idx2.getLongitude());\n      }\n    });\n    return BPoints;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dca5d16e35ab133abbc5315111c2da4fa70bfcd","date":1508874170,"type":4,"author":"Karl Wright","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeo3dShapeGenerator#getPointsAboveAndsort(List[GeoPoint],GeoPoint).mjava","sourceNew":null,"sourceOld":"  private List<GeoPoint> getPointsAboveAndsort(List<GeoPoint> points,GeoPoint lPoint) {\n    List<GeoPoint> BPoints = new ArrayList<>();\n    for (GeoPoint point : points){\n      if(point.getLatitude() > lPoint.getLatitude()){\n        BPoints.add(point);\n      }\n    }\n    Collections.sort(BPoints, new Comparator<GeoPoint>() {\n      public int compare(GeoPoint idx1, GeoPoint idx2) {\n        return Double.compare(idx1.getLongitude(), idx2.getLongitude());\n      }\n    });\n    return BPoints;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"685bd38810c206c93e9058f3c2cfa9827c086c27":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f215583134d6d66410e3c48b32282e3eb9d5fcde"],"6dca5d16e35ab133abbc5315111c2da4fa70bfcd":["f215583134d6d66410e3c48b32282e3eb9d5fcde"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f215583134d6d66410e3c48b32282e3eb9d5fcde":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6dca5d16e35ab133abbc5315111c2da4fa70bfcd"]},"commit2Childs":{"685bd38810c206c93e9058f3c2cfa9827c086c27":[],"6dca5d16e35ab133abbc5315111c2da4fa70bfcd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["685bd38810c206c93e9058f3c2cfa9827c086c27","f215583134d6d66410e3c48b32282e3eb9d5fcde"],"f215583134d6d66410e3c48b32282e3eb9d5fcde":["685bd38810c206c93e9058f3c2cfa9827c086c27","6dca5d16e35ab133abbc5315111c2da4fa70bfcd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}