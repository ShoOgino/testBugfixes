{"path":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPolygonFactory#makeGeoPolygon(PlanetModel,List[GeoPoint],int).mjava","commits":[{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPolygonFactory#makeGeoPolygon(PlanetModel,List[GeoPoint],int).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPolygonFactory#makeGeoPolygon(PlanetModel,List[GeoPoint],int).mjava","sourceNew":"  /**\n   * Create a GeoMembershipShape of the right kind given the specified bounds.\n   *\n   * @param pointList        is a list of the GeoPoints to build an arbitrary polygon out of.\n   * @param convexPointIndex is the index of a single convex point whose conformation with\n   *                         its neighbors determines inside/outside for the entire polygon.\n   * @return a GeoMembershipShape corresponding to what was specified.\n   */\n  public static GeoMembershipShape makeGeoPolygon(final PlanetModel planetModel, final List<GeoPoint> pointList, final int convexPointIndex) {\n    // The basic operation uses a set of points, two points determining one particular edge, and a sided plane\n    // describing membership.\n    return buildPolygonShape(planetModel, pointList, convexPointIndex, getLegalIndex(convexPointIndex + 1, pointList.size()),\n        new SidedPlane(pointList.get(getLegalIndex(convexPointIndex - 1, pointList.size())),\n            pointList.get(convexPointIndex), pointList.get(getLegalIndex(convexPointIndex + 1, pointList.size()))),\n        false);\n  }\n\n","sourceOld":"  /**\n   * Create a GeoMembershipShape of the right kind given the specified bounds.\n   *\n   * @param pointList        is a list of the GeoPoints to build an arbitrary polygon out of.\n   * @param convexPointIndex is the index of a single convex point whose conformation with\n   *                         its neighbors determines inside/outside for the entire polygon.\n   * @return a GeoMembershipShape corresponding to what was specified.\n   */\n  public static GeoMembershipShape makeGeoPolygon(final PlanetModel planetModel, final List<GeoPoint> pointList, final int convexPointIndex) {\n    // The basic operation uses a set of points, two points determining one particular edge, and a sided plane\n    // describing membership.\n    return buildPolygonShape(planetModel, pointList, convexPointIndex, getLegalIndex(convexPointIndex + 1, pointList.size()),\n        new SidedPlane(pointList.get(getLegalIndex(convexPointIndex - 1, pointList.size())),\n            pointList.get(convexPointIndex), pointList.get(getLegalIndex(convexPointIndex + 1, pointList.size()))),\n        false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9891fa1f5a5571b36fbd8a69ccc12f24f5201e48","date":1441921550,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPolygonFactory#makeGeoPolygon(PlanetModel,List[GeoPoint],int).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPolygonFactory#makeGeoPolygon(PlanetModel,List[GeoPoint],int).mjava","sourceNew":"  /**\n   * Create a GeoMembershipShape of the right kind given the specified bounds.\n   *\n   * @param pointList        is a list of the GeoPoints to build an arbitrary polygon out of.\n   * @param convexPointIndex is the index of a single convex point whose conformation with\n   *                         its neighbors determines inside/outside for the entire polygon.\n   * @return a GeoPolygon corresponding to what was specified.\n   */\n  public static GeoPolygon makeGeoPolygon(final PlanetModel planetModel, final List<GeoPoint> pointList, final int convexPointIndex) {\n    // The basic operation uses a set of points, two points determining one particular edge, and a sided plane\n    // describing membership.\n    return buildPolygonShape(planetModel, pointList, convexPointIndex, getLegalIndex(convexPointIndex + 1, pointList.size()),\n        new SidedPlane(pointList.get(getLegalIndex(convexPointIndex - 1, pointList.size())),\n            pointList.get(convexPointIndex), pointList.get(getLegalIndex(convexPointIndex + 1, pointList.size()))),\n        false);\n  }\n\n","sourceOld":"  /**\n   * Create a GeoMembershipShape of the right kind given the specified bounds.\n   *\n   * @param pointList        is a list of the GeoPoints to build an arbitrary polygon out of.\n   * @param convexPointIndex is the index of a single convex point whose conformation with\n   *                         its neighbors determines inside/outside for the entire polygon.\n   * @return a GeoMembershipShape corresponding to what was specified.\n   */\n  public static GeoMembershipShape makeGeoPolygon(final PlanetModel planetModel, final List<GeoPoint> pointList, final int convexPointIndex) {\n    // The basic operation uses a set of points, two points determining one particular edge, and a sided plane\n    // describing membership.\n    return buildPolygonShape(planetModel, pointList, convexPointIndex, getLegalIndex(convexPointIndex + 1, pointList.size()),\n        new SidedPlane(pointList.get(getLegalIndex(convexPointIndex - 1, pointList.size())),\n            pointList.get(convexPointIndex), pointList.get(getLegalIndex(convexPointIndex + 1, pointList.size()))),\n        false);\n  }\n\n","bugFix":["f9f97ca977ad649f14b4f60a888adef2edd7a64e","e2997acf74723385bd84aff1ea0b12af4aefde77"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e444678504caf66a8060b1d514383aa4feac0c","date":1457399659,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#makeGeoPolygon(PlanetModel,List[GeoPoint],int).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPolygonFactory#makeGeoPolygon(PlanetModel,List[GeoPoint],int).mjava","sourceNew":"  /**\n   * Create a GeoMembershipShape of the right kind given the specified bounds.\n   *\n   * @param pointList        is a list of the GeoPoints to build an arbitrary polygon out of.\n   * @param convexPointIndex is the index of a single convex point whose conformation with\n   *                         its neighbors determines inside/outside for the entire polygon.\n   * @return a GeoPolygon corresponding to what was specified.\n   */\n  public static GeoPolygon makeGeoPolygon(final PlanetModel planetModel, final List<GeoPoint> pointList, final int convexPointIndex) {\n    // The basic operation uses a set of points, two points determining one particular edge, and a sided plane\n    // describing membership.\n    return buildPolygonShape(planetModel, pointList, convexPointIndex, getLegalIndex(convexPointIndex + 1, pointList.size()),\n        new SidedPlane(pointList.get(getLegalIndex(convexPointIndex - 1, pointList.size())),\n            pointList.get(convexPointIndex), pointList.get(getLegalIndex(convexPointIndex + 1, pointList.size()))),\n        false);\n  }\n\n","sourceOld":"  /**\n   * Create a GeoMembershipShape of the right kind given the specified bounds.\n   *\n   * @param pointList        is a list of the GeoPoints to build an arbitrary polygon out of.\n   * @param convexPointIndex is the index of a single convex point whose conformation with\n   *                         its neighbors determines inside/outside for the entire polygon.\n   * @return a GeoPolygon corresponding to what was specified.\n   */\n  public static GeoPolygon makeGeoPolygon(final PlanetModel planetModel, final List<GeoPoint> pointList, final int convexPointIndex) {\n    // The basic operation uses a set of points, two points determining one particular edge, and a sided plane\n    // describing membership.\n    return buildPolygonShape(planetModel, pointList, convexPointIndex, getLegalIndex(convexPointIndex + 1, pointList.size()),\n        new SidedPlane(pointList.get(getLegalIndex(convexPointIndex - 1, pointList.size())),\n            pointList.get(convexPointIndex), pointList.get(getLegalIndex(convexPointIndex + 1, pointList.size()))),\n        false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9891fa1f5a5571b36fbd8a69ccc12f24f5201e48":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b4e444678504caf66a8060b1d514383aa4feac0c":["9891fa1f5a5571b36fbd8a69ccc12f24f5201e48"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4e444678504caf66a8060b1d514383aa4feac0c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"9891fa1f5a5571b36fbd8a69ccc12f24f5201e48":["b4e444678504caf66a8060b1d514383aa4feac0c"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["9891fa1f5a5571b36fbd8a69ccc12f24f5201e48"],"b4e444678504caf66a8060b1d514383aa4feac0c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}