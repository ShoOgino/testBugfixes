{"path":"lucene/core/src/java/org/apache/lucene/index/BufferedDeletes#toString().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedDeletes#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/BufferedDeletes#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    if (VERBOSE_DELETES) {\n      return \"gen=\" + gen + \" numTerms=\" + numTermDeletes + \", terms=\" + terms\n        + \", queries=\" + queries + \", docIDs=\" + docIDs + \", bytesUsed=\"\n        + bytesUsed;\n    } else {\n      String s = \"gen=\" + gen;\n      if (numTermDeletes.get() != 0) {\n        s += \" \" + numTermDeletes.get() + \" deleted terms (unique count=\" + terms.size() + \") terms=\" + terms.keySet();\n      }\n      if (queries.size() != 0) {\n        s += \" \" + queries.size() + \" deleted queries\";\n      }\n      if (docIDs.size() != 0) {\n        s += \" \" + docIDs.size() + \" deleted docIDs\";\n      }\n      if (bytesUsed.get() != 0) {\n        s += \" bytesUsed=\" + bytesUsed.get();\n      }\n\n      return s;\n    }\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    if (VERBOSE_DELETES) {\n      return \"gen=\" + gen + \" numTerms=\" + numTermDeletes + \", terms=\" + terms\n        + \", queries=\" + queries + \", docIDs=\" + docIDs + \", bytesUsed=\"\n        + bytesUsed;\n    } else {\n      String s = \"gen=\" + gen;\n      if (numTermDeletes.get() != 0) {\n        s += \" \" + numTermDeletes.get() + \" deleted terms (unique count=\" + terms.size() + \") terms=\" + terms.keySet();\n      }\n      if (queries.size() != 0) {\n        s += \" \" + queries.size() + \" deleted queries\";\n      }\n      if (docIDs.size() != 0) {\n        s += \" \" + docIDs.size() + \" deleted docIDs\";\n      }\n      if (bytesUsed.get() != 0) {\n        s += \" bytesUsed=\" + bytesUsed.get();\n      }\n\n      return s;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19b128c23e9f1b66a9f8518e95ec99fd965d0bb7","date":1338503231,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedDeletes#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedDeletes#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    if (VERBOSE_DELETES) {\n      return \"gen=\" + gen + \" numTerms=\" + numTermDeletes + \", terms=\" + terms\n        + \", queries=\" + queries + \", docIDs=\" + docIDs + \", bytesUsed=\"\n        + bytesUsed;\n    } else {\n      String s = \"gen=\" + gen;\n      if (numTermDeletes.get() != 0) {\n        s += \" \" + numTermDeletes.get() + \" deleted terms (unique count=\" + terms.size() + \")\";\n      }\n      if (queries.size() != 0) {\n        s += \" \" + queries.size() + \" deleted queries\";\n      }\n      if (docIDs.size() != 0) {\n        s += \" \" + docIDs.size() + \" deleted docIDs\";\n      }\n      if (bytesUsed.get() != 0) {\n        s += \" bytesUsed=\" + bytesUsed.get();\n      }\n\n      return s;\n    }\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    if (VERBOSE_DELETES) {\n      return \"gen=\" + gen + \" numTerms=\" + numTermDeletes + \", terms=\" + terms\n        + \", queries=\" + queries + \", docIDs=\" + docIDs + \", bytesUsed=\"\n        + bytesUsed;\n    } else {\n      String s = \"gen=\" + gen;\n      if (numTermDeletes.get() != 0) {\n        s += \" \" + numTermDeletes.get() + \" deleted terms (unique count=\" + terms.size() + \") terms=\" + terms.keySet();\n      }\n      if (queries.size() != 0) {\n        s += \" \" + queries.size() + \" deleted queries\";\n      }\n      if (docIDs.size() != 0) {\n        s += \" \" + docIDs.size() + \" deleted docIDs\";\n      }\n      if (bytesUsed.get() != 0) {\n        s += \" bytesUsed=\" + bytesUsed.get();\n      }\n\n      return s;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e072d0b1fc19e0533d8ce432eed245196bca6fde","date":1379265112,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedDeletes#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedDeletes#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    if (VERBOSE_DELETES) {\n      return \"gen=\" + gen + \" numTerms=\" + numTermDeletes + \", terms=\" + terms\n        + \", queries=\" + queries + \", docIDs=\" + docIDs + \", numericUpdates=\" + numericUpdates\n        + \", bytesUsed=\" + bytesUsed;\n    } else {\n      String s = \"gen=\" + gen;\n      if (numTermDeletes.get() != 0) {\n        s += \" \" + numTermDeletes.get() + \" deleted terms (unique count=\" + terms.size() + \")\";\n      }\n      if (queries.size() != 0) {\n        s += \" \" + queries.size() + \" deleted queries\";\n      }\n      if (docIDs.size() != 0) {\n        s += \" \" + docIDs.size() + \" deleted docIDs\";\n      }\n      if (numNumericUpdates.get() != 0) {\n        s += \" \" + numNumericUpdates.get() + \" numeric updates (unique count=\" + numericUpdates.size() + \")\";\n      }\n      if (bytesUsed.get() != 0) {\n        s += \" bytesUsed=\" + bytesUsed.get();\n      }\n\n      return s;\n    }\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    if (VERBOSE_DELETES) {\n      return \"gen=\" + gen + \" numTerms=\" + numTermDeletes + \", terms=\" + terms\n        + \", queries=\" + queries + \", docIDs=\" + docIDs + \", bytesUsed=\"\n        + bytesUsed;\n    } else {\n      String s = \"gen=\" + gen;\n      if (numTermDeletes.get() != 0) {\n        s += \" \" + numTermDeletes.get() + \" deleted terms (unique count=\" + terms.size() + \")\";\n      }\n      if (queries.size() != 0) {\n        s += \" \" + queries.size() + \" deleted queries\";\n      }\n      if (docIDs.size() != 0) {\n        s += \" \" + docIDs.size() + \" deleted docIDs\";\n      }\n      if (bytesUsed.get() != 0) {\n        s += \" bytesUsed=\" + bytesUsed.get();\n      }\n\n      return s;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdates#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedDeletes#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    if (VERBOSE_DELETES) {\n      return \"gen=\" + gen + \" numTerms=\" + numTermDeletes + \", terms=\" + terms\n        + \", queries=\" + queries + \", docIDs=\" + docIDs + \", numericUpdates=\" + numericUpdates\n        + \", bytesUsed=\" + bytesUsed;\n    } else {\n      String s = \"gen=\" + gen;\n      if (numTermDeletes.get() != 0) {\n        s += \" \" + numTermDeletes.get() + \" deleted terms (unique count=\" + terms.size() + \")\";\n      }\n      if (queries.size() != 0) {\n        s += \" \" + queries.size() + \" deleted queries\";\n      }\n      if (docIDs.size() != 0) {\n        s += \" \" + docIDs.size() + \" deleted docIDs\";\n      }\n      if (numNumericUpdates.get() != 0) {\n        s += \" \" + numNumericUpdates.get() + \" numeric updates (unique count=\" + numericUpdates.size() + \")\";\n      }\n      if (bytesUsed.get() != 0) {\n        s += \" bytesUsed=\" + bytesUsed.get();\n      }\n\n      return s;\n    }\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    if (VERBOSE_DELETES) {\n      return \"gen=\" + gen + \" numTerms=\" + numTermDeletes + \", terms=\" + terms\n        + \", queries=\" + queries + \", docIDs=\" + docIDs + \", numericUpdates=\" + numericUpdates\n        + \", bytesUsed=\" + bytesUsed;\n    } else {\n      String s = \"gen=\" + gen;\n      if (numTermDeletes.get() != 0) {\n        s += \" \" + numTermDeletes.get() + \" deleted terms (unique count=\" + terms.size() + \")\";\n      }\n      if (queries.size() != 0) {\n        s += \" \" + queries.size() + \" deleted queries\";\n      }\n      if (docIDs.size() != 0) {\n        s += \" \" + docIDs.size() + \" deleted docIDs\";\n      }\n      if (numNumericUpdates.get() != 0) {\n        s += \" \" + numNumericUpdates.get() + \" numeric updates (unique count=\" + numericUpdates.size() + \")\";\n      }\n      if (bytesUsed.get() != 0) {\n        s += \" bytesUsed=\" + bytesUsed.get();\n      }\n\n      return s;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e072d0b1fc19e0533d8ce432eed245196bca6fde":["19b128c23e9f1b66a9f8518e95ec99fd965d0bb7"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["e072d0b1fc19e0533d8ce432eed245196bca6fde"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"19b128c23e9f1b66a9f8518e95ec99fd965d0bb7":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"]},"commit2Childs":{"e072d0b1fc19e0533d8ce432eed245196bca6fde":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["19b128c23e9f1b66a9f8518e95ec99fd965d0bb7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"19b128c23e9f1b66a9f8518e95ec99fd965d0bb7":["e072d0b1fc19e0533d8ce432eed245196bca6fde"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}