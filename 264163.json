{"path":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminism#assertAutomaton(Automaton).mjava","commits":[{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminism#assertAutomaton(Automaton).mjava","pathOld":"/dev/null","sourceNew":"  private static void assertAutomaton(Automaton a) {\n    Automaton clone = a.clone();\n    // complement(complement(a)) = a\n    Automaton equivalent = BasicOperations.complement(BasicOperations.complement(a));\n    assertTrue(BasicOperations.sameLanguage(a, equivalent));\n    \n    // a union a = a\n    equivalent = BasicOperations.union(a, clone);\n    assertTrue(BasicOperations.sameLanguage(a, equivalent));\n    \n    // a intersect a = a\n    equivalent = BasicOperations.intersection(a, clone);\n    assertTrue(BasicOperations.sameLanguage(a, equivalent));\n    \n    // a minus a = empty\n    Automaton empty = BasicOperations.minus(a, clone);\n    assertTrue(BasicOperations.isEmpty(empty));\n    \n    // as long as don't accept the empty string\n    // then optional(a) - empty = a\n    if (!BasicOperations.run(a, \"\")) {\n      //System.out.println(\"test \" + a);\n      Automaton optional = BasicOperations.optional(a);\n      //System.out.println(\"optional \" + optional);\n      equivalent = BasicOperations.minus(optional, BasicAutomata.makeEmptyString());\n      //System.out.println(\"equiv \" + equivalent);\n      assertTrue(BasicOperations.sameLanguage(a, equivalent));\n    }\n  } \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminism#assertAutomaton(Automaton).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminism#assertAutomaton(Automaton).mjava","sourceNew":"  private static void assertAutomaton(Automaton a) {\n    Automaton clone = a.clone();\n    // complement(complement(a)) = a\n    Automaton equivalent = BasicOperations.complement(BasicOperations.complement(a));\n    assertTrue(BasicOperations.sameLanguage(a, equivalent));\n    \n    // a union a = a\n    equivalent = BasicOperations.union(a, clone);\n    assertTrue(BasicOperations.sameLanguage(a, equivalent));\n    \n    // a intersect a = a\n    equivalent = BasicOperations.intersection(a, clone);\n    assertTrue(BasicOperations.sameLanguage(a, equivalent));\n    \n    // a minus a = empty\n    Automaton empty = BasicOperations.minus(a, clone);\n    assertTrue(BasicOperations.isEmpty(empty));\n    \n    // as long as don't accept the empty string\n    // then optional(a) - empty = a\n    if (!BasicOperations.run(a, \"\")) {\n      //System.out.println(\"test \" + a);\n      Automaton optional = BasicOperations.optional(a);\n      //System.out.println(\"optional \" + optional);\n      equivalent = BasicOperations.minus(optional, BasicAutomata.makeEmptyString());\n      //System.out.println(\"equiv \" + equivalent);\n      assertTrue(BasicOperations.sameLanguage(a, equivalent));\n    }\n  } \n\n","sourceOld":"  private static void assertAutomaton(Automaton a) {\n    Automaton clone = a.clone();\n    // complement(complement(a)) = a\n    Automaton equivalent = BasicOperations.complement(BasicOperations.complement(a));\n    assertTrue(BasicOperations.sameLanguage(a, equivalent));\n    \n    // a union a = a\n    equivalent = BasicOperations.union(a, clone);\n    assertTrue(BasicOperations.sameLanguage(a, equivalent));\n    \n    // a intersect a = a\n    equivalent = BasicOperations.intersection(a, clone);\n    assertTrue(BasicOperations.sameLanguage(a, equivalent));\n    \n    // a minus a = empty\n    Automaton empty = BasicOperations.minus(a, clone);\n    assertTrue(BasicOperations.isEmpty(empty));\n    \n    // as long as don't accept the empty string\n    // then optional(a) - empty = a\n    if (!BasicOperations.run(a, \"\")) {\n      //System.out.println(\"test \" + a);\n      Automaton optional = BasicOperations.optional(a);\n      //System.out.println(\"optional \" + optional);\n      equivalent = BasicOperations.minus(optional, BasicAutomata.makeEmptyString());\n      //System.out.println(\"equiv \" + equivalent);\n      assertTrue(BasicOperations.sameLanguage(a, equivalent));\n    }\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}