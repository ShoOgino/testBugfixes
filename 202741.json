{"path":"solr/core/src/java/org/apache/solr/core/CoreMaps[CoreContainer]#allocateLazyCores(ConfigSolr,SolrResourceLoader).mjava","commits":[{"id":"a837c064b67fa63a9394136e31218b908cdcf783","date":1362186072,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreMaps[CoreContainer]#allocateLazyCores(ConfigSolr,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#allocateLazyCores(Config).mjava","sourceNew":"  // Trivial helper method for load, note it implements LRU on transient cores. Also note, if\n  // there is no setting for max size, nothing is done and all cores go in the regular \"cores\" list\n  protected void allocateLazyCores(final ConfigSolr cfg, final SolrResourceLoader loader) {\n    transientCacheSize = cfg.getInt(ConfigSolr.ConfLevel.SOLR_CORES, \"transientCacheSize\", Integer.MAX_VALUE);\n    if (transientCacheSize != Integer.MAX_VALUE) {\n      CoreContainer.log.info(\"Allocating transient cache for {} transient cores\", transientCacheSize);\n      transientCores = new LinkedHashMap<String, SolrCore>(transientCacheSize, 0.75f, true) {\n        @Override\n        protected boolean removeEldestEntry(Map.Entry<String, SolrCore> eldest) {\n          if (size() > transientCacheSize) {\n            synchronized (locker) {\n              SolrCore closeMe = eldest.getValue();\n              synchronized (locker) {\n                pendingDynamicCloses.add(closeMe);\n                locker.notifyAll(); // Wakes up closer thread too\n              }\n            }\n            return true;\n          }\n          return false;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  // Trivial helper method for load, note it implements LRU on transient cores\n  private void allocateLazyCores(Config cfg) {\n    transientCacheSize = cfg.getInt(\"solr/cores/@transientCacheSize\", Integer.MAX_VALUE);\n    if (transientCacheSize != Integer.MAX_VALUE) {\n      transientCores = new LinkedHashMap<String, SolrCore>(transientCacheSize, 0.75f, true) {\n        @Override\n        protected boolean removeEldestEntry(Map.Entry<String, SolrCore> eldest) {\n          if (size() > transientCacheSize) {\n            eldest.getValue().close();\n            return true;\n          }\n          return false;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b6f42dee5a60f46a3fdf3ab93b39aefb356e245","date":1363106546,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreMaps[CoreContainer]#allocateLazyCores(ConfigSolr,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreMaps[CoreContainer]#allocateLazyCores(ConfigSolr,SolrResourceLoader).mjava","sourceNew":"  // Trivial helper method for load, note it implements LRU on transient cores. Also note, if\n  // there is no setting for max size, nothing is done and all cores go in the regular \"cores\" list\n  protected void allocateLazyCores(final ConfigSolr cfg, final SolrResourceLoader loader) {\n    transientCacheSize = cfg.getInt(ConfigSolr.ConfLevel.SOLR_CORES, \"transientCacheSize\", Integer.MAX_VALUE);\n    if (transientCacheSize != Integer.MAX_VALUE) {\n      CoreContainer.log.info(\"Allocating transient cache for {} transient cores\", transientCacheSize);\n      transientCores = new LinkedHashMap<String, SolrCore>(transientCacheSize, 0.75f, true) {\n        @Override\n        protected boolean removeEldestEntry(Map.Entry<String, SolrCore> eldest) {\n          if (size() > transientCacheSize) {\n            synchronized (locker) {\n              pendingCloses.add(eldest.getValue()); // Essentially just queue this core up for closing.\n              locker.notifyAll(); // Wakes up closer thread too\n            }\n            return true;\n          }\n          return false;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  // Trivial helper method for load, note it implements LRU on transient cores. Also note, if\n  // there is no setting for max size, nothing is done and all cores go in the regular \"cores\" list\n  protected void allocateLazyCores(final ConfigSolr cfg, final SolrResourceLoader loader) {\n    transientCacheSize = cfg.getInt(ConfigSolr.ConfLevel.SOLR_CORES, \"transientCacheSize\", Integer.MAX_VALUE);\n    if (transientCacheSize != Integer.MAX_VALUE) {\n      CoreContainer.log.info(\"Allocating transient cache for {} transient cores\", transientCacheSize);\n      transientCores = new LinkedHashMap<String, SolrCore>(transientCacheSize, 0.75f, true) {\n        @Override\n        protected boolean removeEldestEntry(Map.Entry<String, SolrCore> eldest) {\n          if (size() > transientCacheSize) {\n            synchronized (locker) {\n              SolrCore closeMe = eldest.getValue();\n              synchronized (locker) {\n                pendingDynamicCloses.add(closeMe);\n                locker.notifyAll(); // Wakes up closer thread too\n              }\n            }\n            return true;\n          }\n          return false;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9818efa55563ddfecdecafbdd43f4bee9f252e7d","date":1364853872,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreMaps[CoreContainer]#allocateLazyCores(ConfigSolr,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreMaps[CoreContainer]#allocateLazyCores(ConfigSolr,SolrResourceLoader).mjava","sourceNew":"  // Trivial helper method for load, note it implements LRU on transient cores. Also note, if\n  // there is no setting for max size, nothing is done and all cores go in the regular \"cores\" list\n  protected void allocateLazyCores(final ConfigSolr cfg, final SolrResourceLoader loader) {\n    final int transientCacheSize = cfg.getInt(ConfigSolr.ConfLevel.SOLR_CORES, \"transientCacheSize\", Integer.MAX_VALUE);\n    if (transientCacheSize != Integer.MAX_VALUE) {\n      CoreContainer.log.info(\"Allocating transient cache for {} transient cores\", transientCacheSize);\n      transientCores = new LinkedHashMap<String, SolrCore>(transientCacheSize, 0.75f, true) {\n        @Override\n        protected boolean removeEldestEntry(Map.Entry<String, SolrCore> eldest) {\n          if (size() > transientCacheSize) {\n            synchronized (locker) {\n              pendingCloses.add(eldest.getValue()); // Essentially just queue this core up for closing.\n              locker.notifyAll(); // Wakes up closer thread too\n            }\n            return true;\n          }\n          return false;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  // Trivial helper method for load, note it implements LRU on transient cores. Also note, if\n  // there is no setting for max size, nothing is done and all cores go in the regular \"cores\" list\n  protected void allocateLazyCores(final ConfigSolr cfg, final SolrResourceLoader loader) {\n    transientCacheSize = cfg.getInt(ConfigSolr.ConfLevel.SOLR_CORES, \"transientCacheSize\", Integer.MAX_VALUE);\n    if (transientCacheSize != Integer.MAX_VALUE) {\n      CoreContainer.log.info(\"Allocating transient cache for {} transient cores\", transientCacheSize);\n      transientCores = new LinkedHashMap<String, SolrCore>(transientCacheSize, 0.75f, true) {\n        @Override\n        protected boolean removeEldestEntry(Map.Entry<String, SolrCore> eldest) {\n          if (size() > transientCacheSize) {\n            synchronized (locker) {\n              pendingCloses.add(eldest.getValue()); // Essentially just queue this core up for closing.\n              locker.notifyAll(); // Wakes up closer thread too\n            }\n            return true;\n          }\n          return false;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e475642767c688ede5728d7918326f70b4e0bf3a","date":1366072489,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreMaps[CoreContainer]#allocateLazyCores(ConfigSolr,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreMaps[CoreContainer]#allocateLazyCores(ConfigSolr,SolrResourceLoader).mjava","sourceNew":"  // Trivial helper method for load, note it implements LRU on transient cores. Also note, if\n  // there is no setting for max size, nothing is done and all cores go in the regular \"cores\" list\n  protected void allocateLazyCores(final ConfigSolr cfg, final SolrResourceLoader loader) {\n    final int transientCacheSize = cfg.getInt(ConfigSolr.CfgProp.SOLR_TRANSIENTCACHESIZE, Integer.MAX_VALUE);\n    if (transientCacheSize != Integer.MAX_VALUE) {\n      CoreContainer.log.info(\"Allocating transient cache for {} transient cores\", transientCacheSize);\n      transientCores = new LinkedHashMap<String, SolrCore>(transientCacheSize, 0.75f, true) {\n        @Override\n        protected boolean removeEldestEntry(Map.Entry<String, SolrCore> eldest) {\n          if (size() > transientCacheSize) {\n            synchronized (locker) {\n              pendingCloses.add(eldest.getValue()); // Essentially just queue this core up for closing.\n              locker.notifyAll(); // Wakes up closer thread too\n            }\n            return true;\n          }\n          return false;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  // Trivial helper method for load, note it implements LRU on transient cores. Also note, if\n  // there is no setting for max size, nothing is done and all cores go in the regular \"cores\" list\n  protected void allocateLazyCores(final ConfigSolr cfg, final SolrResourceLoader loader) {\n    final int transientCacheSize = cfg.getInt(ConfigSolr.ConfLevel.SOLR_CORES, \"transientCacheSize\", Integer.MAX_VALUE);\n    if (transientCacheSize != Integer.MAX_VALUE) {\n      CoreContainer.log.info(\"Allocating transient cache for {} transient cores\", transientCacheSize);\n      transientCores = new LinkedHashMap<String, SolrCore>(transientCacheSize, 0.75f, true) {\n        @Override\n        protected boolean removeEldestEntry(Map.Entry<String, SolrCore> eldest) {\n          if (size() > transientCacheSize) {\n            synchronized (locker) {\n              pendingCloses.add(eldest.getValue()); // Essentially just queue this core up for closing.\n              locker.notifyAll(); // Wakes up closer thread too\n            }\n            return true;\n          }\n          return false;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7c73b6560033b6dcc828fbcc94ba9315c20f3c0","date":1366659310,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreMaps#allocateLazyCores(ConfigSolr,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreMaps[CoreContainer]#allocateLazyCores(ConfigSolr,SolrResourceLoader).mjava","sourceNew":"  // Trivial helper method for load, note it implements LRU on transient cores. Also note, if\n  // there is no setting for max size, nothing is done and all cores go in the regular \"cores\" list\n  protected void allocateLazyCores(final ConfigSolr cfg, final SolrResourceLoader loader) {\n    final int transientCacheSize = cfg.getInt(ConfigSolr.CfgProp.SOLR_TRANSIENTCACHESIZE, Integer.MAX_VALUE);\n    if (transientCacheSize != Integer.MAX_VALUE) {\n      CoreContainer.log.info(\"Allocating transient cache for {} transient cores\", transientCacheSize);\n      transientCores = new LinkedHashMap<String, SolrCore>(transientCacheSize, 0.75f, true) {\n        @Override\n        protected boolean removeEldestEntry(Map.Entry<String, SolrCore> eldest) {\n          if (size() > transientCacheSize) {\n            synchronized (locker) {\n              pendingCloses.add(eldest.getValue()); // Essentially just queue this core up for closing.\n              locker.notifyAll(); // Wakes up closer thread too\n            }\n            return true;\n          }\n          return false;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  // Trivial helper method for load, note it implements LRU on transient cores. Also note, if\n  // there is no setting for max size, nothing is done and all cores go in the regular \"cores\" list\n  protected void allocateLazyCores(final ConfigSolr cfg, final SolrResourceLoader loader) {\n    final int transientCacheSize = cfg.getInt(ConfigSolr.CfgProp.SOLR_TRANSIENTCACHESIZE, Integer.MAX_VALUE);\n    if (transientCacheSize != Integer.MAX_VALUE) {\n      CoreContainer.log.info(\"Allocating transient cache for {} transient cores\", transientCacheSize);\n      transientCores = new LinkedHashMap<String, SolrCore>(transientCacheSize, 0.75f, true) {\n        @Override\n        protected boolean removeEldestEntry(Map.Entry<String, SolrCore> eldest) {\n          if (size() > transientCacheSize) {\n            synchronized (locker) {\n              pendingCloses.add(eldest.getValue()); // Essentially just queue this core up for closing.\n              locker.notifyAll(); // Wakes up closer thread too\n            }\n            return true;\n          }\n          return false;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8b6f42dee5a60f46a3fdf3ab93b39aefb356e245":["a837c064b67fa63a9394136e31218b908cdcf783"],"9818efa55563ddfecdecafbdd43f4bee9f252e7d":["8b6f42dee5a60f46a3fdf3ab93b39aefb356e245"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e475642767c688ede5728d7918326f70b4e0bf3a":["9818efa55563ddfecdecafbdd43f4bee9f252e7d"],"c7c73b6560033b6dcc828fbcc94ba9315c20f3c0":["e475642767c688ede5728d7918326f70b4e0bf3a"],"a837c064b67fa63a9394136e31218b908cdcf783":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7c73b6560033b6dcc828fbcc94ba9315c20f3c0"]},"commit2Childs":{"8b6f42dee5a60f46a3fdf3ab93b39aefb356e245":["9818efa55563ddfecdecafbdd43f4bee9f252e7d"],"9818efa55563ddfecdecafbdd43f4bee9f252e7d":["e475642767c688ede5728d7918326f70b4e0bf3a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a837c064b67fa63a9394136e31218b908cdcf783"],"e475642767c688ede5728d7918326f70b4e0bf3a":["c7c73b6560033b6dcc828fbcc94ba9315c20f3c0"],"c7c73b6560033b6dcc828fbcc94ba9315c20f3c0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a837c064b67fa63a9394136e31218b908cdcf783":["8b6f42dee5a60f46a3fdf3ab93b39aefb356e245"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}