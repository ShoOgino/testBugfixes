{"path":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","sourceNew":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n\n      assert stats.docFreq > 0;\n      //if (DEBUG) System.out.println(\"BTTW.finishTerm term=\" + fieldInfo.name + \":\" + toString(text) + \" seg=\" + segment + \" df=\" + stats.docFreq);\n\n      blockBuilder.add(Util.toIntsRef(text, scratchIntsRef), noOutputs.getNoOutput());\n      pending.add(new PendingTerm(BytesRef.deepCopyOf(text), stats));\n      postingsWriter.finishTerm(stats);\n      numTerms++;\n    }\n\n","sourceOld":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n\n      assert stats.docFreq > 0;\n      //if (DEBUG) System.out.println(\"BTTW.finishTerm term=\" + fieldInfo.name + \":\" + toString(text) + \" seg=\" + segment + \" df=\" + stats.docFreq);\n\n      blockBuilder.add(Util.toIntsRef(text, scratchIntsRef), noOutputs.getNoOutput());\n      pending.add(new PendingTerm(BytesRef.deepCopyOf(text), stats));\n      postingsWriter.finishTerm(stats);\n      numTerms++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","date":1377268487,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","sourceNew":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n\n      assert stats.docFreq > 0;\n      //if (DEBUG) System.out.println(\"BTTW.finishTerm term=\" + fieldInfo.name + \":\" + toString(text) + \" seg=\" + segment + \" df=\" + stats.docFreq);\n\n      blockBuilder.add(Util.toIntsRef(text, scratchIntsRef), noOutputs.getNoOutput());\n      BlockTermState state = postingsWriter.newTermState();\n      state.docFreq = stats.docFreq;\n      state.totalTermFreq = stats.totalTermFreq;\n      postingsWriter.finishTerm(state);\n\n      PendingTerm term = new PendingTerm(BytesRef.deepCopyOf(text), state);\n      pending.add(term);\n      numTerms++;\n    }\n\n","sourceOld":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n\n      assert stats.docFreq > 0;\n      //if (DEBUG) System.out.println(\"BTTW.finishTerm term=\" + fieldInfo.name + \":\" + toString(text) + \" seg=\" + segment + \" df=\" + stats.docFreq);\n\n      blockBuilder.add(Util.toIntsRef(text, scratchIntsRef), noOutputs.getNoOutput());\n      pending.add(new PendingTerm(BytesRef.deepCopyOf(text), stats));\n      postingsWriter.finishTerm(stats);\n      numTerms++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f948dd442d23baa6cbb28daf77c8db78b351329","date":1378742876,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","sourceNew":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n\n      assert stats.docFreq > 0;\n      //if (DEBUG) System.out.println(\"BTTW.finishTerm term=\" + fieldInfo.name + \":\" + toString(text) + \" seg=\" + segment + \" df=\" + stats.docFreq);\n\n      blockBuilder.add(Util.toIntsRef(text, scratchIntsRef), noOutputs.getNoOutput());\n      BlockTermState state = postingsWriter.newTermState();\n      state.docFreq = stats.docFreq;\n      state.totalTermFreq = stats.totalTermFreq;\n      postingsWriter.finishTerm(state);\n\n      PendingTerm term = new PendingTerm(BytesRef.deepCopyOf(text), state);\n      pending.add(term);\n      numTerms++;\n    }\n\n","sourceOld":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n\n      assert stats.docFreq > 0;\n      //if (DEBUG) System.out.println(\"BTTW.finishTerm term=\" + fieldInfo.name + \":\" + toString(text) + \" seg=\" + segment + \" df=\" + stats.docFreq);\n\n      blockBuilder.add(Util.toIntsRef(text, scratchIntsRef), noOutputs.getNoOutput());\n      pending.add(new PendingTerm(BytesRef.deepCopyOf(text), stats));\n      postingsWriter.finishTerm(stats);\n      numTerms++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa80a35d7c4b2b1e83082b275e3e8328ab93db52","date":1381766157,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n\n      assert stats.docFreq > 0;\n      //if (DEBUG) System.out.println(\"BTTW.finishTerm term=\" + fieldInfo.name + \":\" + toString(text) + \" seg=\" + segment + \" df=\" + stats.docFreq);\n\n      blockBuilder.add(Util.toIntsRef(text, scratchIntsRef), noOutputs.getNoOutput());\n      BlockTermState state = postingsWriter.newTermState();\n      state.docFreq = stats.docFreq;\n      state.totalTermFreq = stats.totalTermFreq;\n      postingsWriter.finishTerm(state);\n\n      PendingTerm term = new PendingTerm(BytesRef.deepCopyOf(text), state);\n      pending.add(term);\n      numTerms++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"]},"commit2Childs":{"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","2f948dd442d23baa6cbb28daf77c8db78b351329"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}