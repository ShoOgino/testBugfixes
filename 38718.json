{"path":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor#checkReplicationTracker(UpdateCommand).mjava","commits":[{"id":"9d70e774cb25c8a8d2c3e5e84200f235f9168d87","date":1553016391,"type":1,"author":"Bar Rotstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor#checkReplicationTracker(UpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#checkReplicationTracker(UpdateCommand).mjava","sourceNew":"  // helper method, processAdd was getting a bit large.\n  // Sets replicationTracker = null if we aren't the leader\n  // We have two possibilities here:\n  //\n  // 1> we are a leader: Allocate a LeaderTracker and, if we're getting the original request, a RollupTracker\n  // 2> we're a follower: allocat a RollupTracker\n  //\n  private void checkReplicationTracker(UpdateCommand cmd) {\n\n    SolrParams rp = cmd.getReq().getParams();\n    String distribUpdate = rp.get(DISTRIB_UPDATE_PARAM);\n    // Ok,we're receiving the original request, we need a rollup tracker, but only one so we accumulate over the\n    // course of a batch.\n    if ((distribUpdate == null || DistribPhase.NONE.toString().equals(distribUpdate)) &&\n        rollupReplicationTracker == null) {\n      rollupReplicationTracker = new RollupRequestReplicationTracker();\n    }\n    // If we're a leader, we need a leader replication tracker, so let's do that. If there are multiple docs in\n    // a batch we need to use the _same_ leader replication tracker.\n    if (isLeader && leaderReplicationTracker == null) {\n      leaderReplicationTracker = new LeaderRequestReplicationTracker(\n          req.getCore().getCoreDescriptor().getCloudDescriptor().getShardId());\n    }\n  }\n\n","sourceOld":"  // helper method, processAdd was getting a bit large.\n  // Sets replicationTracker = null if we aren't the leader\n  // We have two possibilities here:\n  //\n  // 1> we are a leader: Allocate a LeaderTracker and, if we're getting the original request, a RollupTracker\n  // 2> we're a follower: allocat a RollupTracker\n  //\n  private void checkReplicationTracker(UpdateCommand cmd) {\n    if (zkEnabled == false) {\n      rollupReplicationTracker = null; // never need one of these in stand-alone\n      leaderReplicationTracker = null;\n      return;\n    }\n\n    SolrParams rp = cmd.getReq().getParams();\n    String distribUpdate = rp.get(DISTRIB_UPDATE_PARAM);\n    // Ok,we're receiving the original request, we need a rollup tracker, but only one so we accumulate over the\n    // course of a batch.\n    if ((distribUpdate == null || DistribPhase.NONE.toString().equals(distribUpdate)) &&\n        rollupReplicationTracker == null) {\n      rollupReplicationTracker = new RollupRequestReplicationTracker();\n    }\n    // If we're a leader, we need a leader replication tracker, so let's do that. If there are multiple docs in\n    // a batch we need to use the _same_ leader replication tracker.\n    if (isLeader && leaderReplicationTracker == null) {\n      leaderReplicationTracker = new LeaderRequestReplicationTracker(\n          req.getCore().getCoreDescriptor().getCloudDescriptor().getShardId());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d70e774cb25c8a8d2c3e5e84200f235f9168d87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9d70e774cb25c8a8d2c3e5e84200f235f9168d87"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9d70e774cb25c8a8d2c3e5e84200f235f9168d87"],"9d70e774cb25c8a8d2c3e5e84200f235f9168d87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}