{"path":"solr/core/src/test/org/apache/solr/handler/export/TestExportWriter#createLargeIndex().mjava","commits":[{"id":"804a8d5358fe7b7563b85ee7838714d720b89272","date":1591624987,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/export/TestExportWriter#createLargeIndex().mjava","pathOld":"/dev/null","sourceNew":"  private void createLargeIndex() throws Exception {\n    int BATCH_SIZE = 1000;\n    int NUM_BATCHES = 100;\n    SolrInputDocument[] docs = new SolrInputDocument[BATCH_SIZE];\n    for (int i = 0; i < NUM_BATCHES; i++) {\n      for (int j = 0; j < BATCH_SIZE; j++) {\n        docs[j] = new SolrInputDocument(\n            \"id\", String.valueOf(i * BATCH_SIZE + j),\n            \"batch_i_p\", String.valueOf(i),\n            \"random_i_p\", String.valueOf(random().nextInt(BATCH_SIZE)),\n            \"sortabledv\", TestUtil.randomSimpleString(random(), 2, 3),\n            \"sortabledv_udvas\", String.valueOf(random().nextInt(100)),\n            \"small_i_p\", String.valueOf((i + j) % 7)\n            );\n      }\n      updateJ(jsonAdd(docs), null);\n    }\n    assertU(commit());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee","date":1593704090,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/export/TestExportWriter#createLargeIndex().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/export/TestExportWriter#createLargeIndex().mjava","sourceNew":"  private void createLargeIndex() throws Exception {\n    int BATCH_SIZE = 5000;\n    int NUM_BATCHES = 20;\n    SolrInputDocument[] docs = new SolrInputDocument[BATCH_SIZE];\n    for (int i = 0; i < NUM_BATCHES; i++) {\n      for (int j = 0; j < BATCH_SIZE; j++) {\n        docs[j] = new SolrInputDocument(\n            \"id\", String.valueOf(i * BATCH_SIZE + j),\n            \"batch_i_p\", String.valueOf(i),\n            \"random_i_p\", String.valueOf(random().nextInt(BATCH_SIZE)),\n            \"sortabledv\", TestUtil.randomSimpleString(random(), 2, 3),\n            \"sortabledv_udvas\", String.valueOf(random().nextInt(100)),\n            \"small_i_p\", String.valueOf((i + j) % 37)\n            );\n      }\n      updateJ(jsonAdd(docs), null);\n    }\n    assertU(commit());\n  }\n\n","sourceOld":"  private void createLargeIndex() throws Exception {\n    int BATCH_SIZE = 1000;\n    int NUM_BATCHES = 100;\n    SolrInputDocument[] docs = new SolrInputDocument[BATCH_SIZE];\n    for (int i = 0; i < NUM_BATCHES; i++) {\n      for (int j = 0; j < BATCH_SIZE; j++) {\n        docs[j] = new SolrInputDocument(\n            \"id\", String.valueOf(i * BATCH_SIZE + j),\n            \"batch_i_p\", String.valueOf(i),\n            \"random_i_p\", String.valueOf(random().nextInt(BATCH_SIZE)),\n            \"sortabledv\", TestUtil.randomSimpleString(random(), 2, 3),\n            \"sortabledv_udvas\", String.valueOf(random().nextInt(100)),\n            \"small_i_p\", String.valueOf((i + j) % 7)\n            );\n      }\n      updateJ(jsonAdd(docs), null);\n    }\n    assertU(commit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7923b4ccccd9103a8c45d58c6708f863cd1e3195","date":1597232725,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/export/TestExportWriter#createLargeIndex().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/export/TestExportWriter#createLargeIndex().mjava","sourceNew":"  private void createLargeIndex() throws Exception {\n    int BATCH_SIZE = 5000;\n    int NUM_BATCHES = 20;\n    SolrInputDocument[] docs = new SolrInputDocument[BATCH_SIZE];\n    for (int i = 0; i < NUM_BATCHES; i++) {\n      for (int j = 0; j < BATCH_SIZE; j++) {\n        docs[j] = new SolrInputDocument(\n            \"id\", String.valueOf(i * BATCH_SIZE + j),\n            \"sortabledv\", TestUtil.randomSimpleString(random(), 2, 3),\n            \"sortabledv_udvas\", String.valueOf((i + j) % 101),\n            \"small_i_p\", String.valueOf((i + j) % 37)\n            );\n      }\n      updateJ(jsonAdd(docs), null);\n    }\n    assertU(commit());\n  }\n\n","sourceOld":"  private void createLargeIndex() throws Exception {\n    int BATCH_SIZE = 5000;\n    int NUM_BATCHES = 20;\n    SolrInputDocument[] docs = new SolrInputDocument[BATCH_SIZE];\n    for (int i = 0; i < NUM_BATCHES; i++) {\n      for (int j = 0; j < BATCH_SIZE; j++) {\n        docs[j] = new SolrInputDocument(\n            \"id\", String.valueOf(i * BATCH_SIZE + j),\n            \"batch_i_p\", String.valueOf(i),\n            \"random_i_p\", String.valueOf(random().nextInt(BATCH_SIZE)),\n            \"sortabledv\", TestUtil.randomSimpleString(random(), 2, 3),\n            \"sortabledv_udvas\", String.valueOf(random().nextInt(100)),\n            \"small_i_p\", String.valueOf((i + j) % 37)\n            );\n      }\n      updateJ(jsonAdd(docs), null);\n    }\n    assertU(commit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee":["804a8d5358fe7b7563b85ee7838714d720b89272"],"7923b4ccccd9103a8c45d58c6708f863cd1e3195":["1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"804a8d5358fe7b7563b85ee7838714d720b89272":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7923b4ccccd9103a8c45d58c6708f863cd1e3195"]},"commit2Childs":{"1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee":["7923b4ccccd9103a8c45d58c6708f863cd1e3195"],"7923b4ccccd9103a8c45d58c6708f863cd1e3195":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["804a8d5358fe7b7563b85ee7838714d720b89272"],"804a8d5358fe7b7563b85ee7838714d720b89272":["1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}