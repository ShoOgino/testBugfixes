{"path":"src/test/org/apache/lucene/search/TestRangeQuery#testDanish().mjava","commits":[{"id":"7cf50d425f7279e262a8d6be16253e72b8d898c2","date":1226483019,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestRangeQuery#testDanish().mjava","pathOld":"/dev/null","sourceNew":"  public void testDanish() throws Exception {\n    Collator collator = Collator.getInstance(new Locale(\"da\", \"dk\"));\n    // Danish collation orders the words below in the given order (example taken\n    // from TestSort.testInternationalSort() ).\n    String[] words = { \"H\\u00D8T\", \"H\\u00C5T\", \"MAND\" };\n    Query query = new RangeQuery(\"content\", \"H\\u00D8T\", \"MAND\", false, false, collator);\n\n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    initializeIndex(words);\n    IndexSearcher searcher = new IndexSearcher(dir);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, hits.length);\n\n    query = new RangeQuery(\"content\", \"H\\u00C5T\", \"MAND\", false, false, collator);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, hits.length);\n    searcher.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f612096ab5275c4821d05f126bf45a89f4782b8","date":1246738452,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermRangeQuery#testDanish().mjava","pathOld":"src/test/org/apache/lucene/search/TestRangeQuery#testDanish().mjava","sourceNew":"  public void testDanish() throws Exception {\n    Collator collator = Collator.getInstance(new Locale(\"da\", \"dk\"));\n    // Danish collation orders the words below in the given order (example taken\n    // from TestSort.testInternationalSort() ).\n    String[] words = { \"H\\u00D8T\", \"H\\u00C5T\", \"MAND\" };\n    Query query = new TermRangeQuery(\"content\", \"H\\u00D8T\", \"MAND\", false, false, collator);\n\n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    initializeIndex(words);\n    IndexSearcher searcher = new IndexSearcher(dir);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, hits.length);\n\n    query = new TermRangeQuery(\"content\", \"H\\u00C5T\", \"MAND\", false, false, collator);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, hits.length);\n    searcher.close();\n  }\n\n","sourceOld":"  public void testDanish() throws Exception {\n    Collator collator = Collator.getInstance(new Locale(\"da\", \"dk\"));\n    // Danish collation orders the words below in the given order (example taken\n    // from TestSort.testInternationalSort() ).\n    String[] words = { \"H\\u00D8T\", \"H\\u00C5T\", \"MAND\" };\n    Query query = new RangeQuery(\"content\", \"H\\u00D8T\", \"MAND\", false, false, collator);\n\n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    initializeIndex(words);\n    IndexSearcher searcher = new IndexSearcher(dir);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, hits.length);\n\n    query = new RangeQuery(\"content\", \"H\\u00C5T\", \"MAND\", false, false, collator);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, hits.length);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7cf50d425f7279e262a8d6be16253e72b8d898c2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f612096ab5275c4821d05f126bf45a89f4782b8":["7cf50d425f7279e262a8d6be16253e72b8d898c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f612096ab5275c4821d05f126bf45a89f4782b8"]},"commit2Childs":{"7cf50d425f7279e262a8d6be16253e72b8d898c2":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"0f612096ab5275c4821d05f126bf45a89f4782b8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7cf50d425f7279e262a8d6be16253e72b8d898c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}