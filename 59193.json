{"path":"solr/core/src/test/org/apache/solr/TestDocumentBuilder#testDeepCopy().mjava","commits":[{"id":"c5fa11bf621ab6d2af49b9e9e05dff485fec0de2","date":1342630362,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestDocumentBuilder#testDeepCopy().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDeepCopy() throws IOException {\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"field1\", \"value1\");\n    doc.addField(\"field2\", \"value1\");\n    doc.addField(\"field3\", \"value2\");\n    doc.addField(\"field4\", 15);\n    List<Integer> list = new ArrayList<Integer>();\n    list.add(45);\n    list.add(33);\n    list.add(20);\n    doc.addField(\"field5\", list);\n    doc.setDocumentBoost(5f);\n    \n    SolrInputDocument clone = doc.deepCopy();\n    \n    System.out.println(\"doc1: \"+ doc);\n    System.out.println(\"clone: \"+ clone);\n    \n    assertNotSame(doc, clone);\n    \n    Collection<String> fieldNames = doc.getFieldNames();\n    for (String name : fieldNames) {\n      Collection<Object> values = doc.getFieldValues(name);\n      Collection<Object> cloneValues = clone.getFieldValues(name);\n      \n      assertEquals(values.size(), cloneValues.size());\n      assertNotSame(values, cloneValues);\n      \n      Iterator<Object> cloneIt = cloneValues.iterator();\n      for (Object value : values) {\n        Object cloneValue = cloneIt.next();\n        assertSame(value, cloneValue);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/TestDocumentBuilder#testDeepCopy().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDeepCopy() throws IOException {\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"field1\", \"value1\");\n    doc.addField(\"field2\", \"value1\");\n    doc.addField(\"field3\", \"value2\");\n    doc.addField(\"field4\", 15);\n    List<Integer> list = new ArrayList<Integer>();\n    list.add(45);\n    list.add(33);\n    list.add(20);\n    doc.addField(\"field5\", list);\n    doc.setDocumentBoost(5f);\n    \n    SolrInputDocument clone = doc.deepCopy();\n    \n    System.out.println(\"doc1: \"+ doc);\n    System.out.println(\"clone: \"+ clone);\n    \n    assertNotSame(doc, clone);\n    \n    Collection<String> fieldNames = doc.getFieldNames();\n    for (String name : fieldNames) {\n      Collection<Object> values = doc.getFieldValues(name);\n      Collection<Object> cloneValues = clone.getFieldValues(name);\n      \n      assertEquals(values.size(), cloneValues.size());\n      assertNotSame(values, cloneValues);\n      \n      Iterator<Object> cloneIt = cloneValues.iterator();\n      for (Object value : values) {\n        Object cloneValue = cloneIt.next();\n        assertSame(value, cloneValue);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/TestDocumentBuilder#testDeepCopy().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDeepCopy() throws IOException {\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"field1\", \"value1\");\n    doc.addField(\"field2\", \"value1\");\n    doc.addField(\"field3\", \"value2\");\n    doc.addField(\"field4\", 15);\n    List<Integer> list = new ArrayList<Integer>();\n    list.add(45);\n    list.add(33);\n    list.add(20);\n    doc.addField(\"field5\", list);\n    doc.setDocumentBoost(5f);\n    \n    SolrInputDocument clone = doc.deepCopy();\n    \n    System.out.println(\"doc1: \"+ doc);\n    System.out.println(\"clone: \"+ clone);\n    \n    assertNotSame(doc, clone);\n    \n    Collection<String> fieldNames = doc.getFieldNames();\n    for (String name : fieldNames) {\n      Collection<Object> values = doc.getFieldValues(name);\n      Collection<Object> cloneValues = clone.getFieldValues(name);\n      \n      assertEquals(values.size(), cloneValues.size());\n      assertNotSame(values, cloneValues);\n      \n      Iterator<Object> cloneIt = cloneValues.iterator();\n      for (Object value : values) {\n        Object cloneValue = cloneIt.next();\n        assertSame(value, cloneValue);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestDocumentBuilder#testDeepCopy().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestDocumentBuilder#testDeepCopy().mjava","sourceNew":"  @Test\n  public void testDeepCopy() throws IOException {\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"field1\", \"value1\");\n    doc.addField(\"field2\", \"value1\");\n    doc.addField(\"field3\", \"value2\");\n    doc.addField(\"field4\", 15);\n    List<Integer> list = new ArrayList<>();\n    list.add(45);\n    list.add(33);\n    list.add(20);\n    doc.addField(\"field5\", list);\n    doc.setDocumentBoost(5f);\n    \n    SolrInputDocument clone = doc.deepCopy();\n    \n    System.out.println(\"doc1: \"+ doc);\n    System.out.println(\"clone: \"+ clone);\n    \n    assertNotSame(doc, clone);\n    \n    Collection<String> fieldNames = doc.getFieldNames();\n    for (String name : fieldNames) {\n      Collection<Object> values = doc.getFieldValues(name);\n      Collection<Object> cloneValues = clone.getFieldValues(name);\n      \n      assertEquals(values.size(), cloneValues.size());\n      assertNotSame(values, cloneValues);\n      \n      Iterator<Object> cloneIt = cloneValues.iterator();\n      for (Object value : values) {\n        Object cloneValue = cloneIt.next();\n        assertSame(value, cloneValue);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDeepCopy() throws IOException {\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"field1\", \"value1\");\n    doc.addField(\"field2\", \"value1\");\n    doc.addField(\"field3\", \"value2\");\n    doc.addField(\"field4\", 15);\n    List<Integer> list = new ArrayList<Integer>();\n    list.add(45);\n    list.add(33);\n    list.add(20);\n    doc.addField(\"field5\", list);\n    doc.setDocumentBoost(5f);\n    \n    SolrInputDocument clone = doc.deepCopy();\n    \n    System.out.println(\"doc1: \"+ doc);\n    System.out.println(\"clone: \"+ clone);\n    \n    assertNotSame(doc, clone);\n    \n    Collection<String> fieldNames = doc.getFieldNames();\n    for (String name : fieldNames) {\n      Collection<Object> values = doc.getFieldValues(name);\n      Collection<Object> cloneValues = clone.getFieldValues(name);\n      \n      assertEquals(values.size(), cloneValues.size());\n      assertNotSame(values, cloneValues);\n      \n      Iterator<Object> cloneIt = cloneValues.iterator();\n      for (Object value : values) {\n        Object cloneValue = cloneIt.next();\n        assertSame(value, cloneValue);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestDocumentBuilder#testDeepCopy().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestDocumentBuilder#testDeepCopy().mjava","sourceNew":"  @Test\n  public void testDeepCopy() throws IOException {\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"field1\", \"value1\");\n    doc.addField(\"field2\", \"value1\");\n    doc.addField(\"field3\", \"value2\");\n    doc.addField(\"field4\", 15);\n    List<Integer> list = new ArrayList<>();\n    list.add(45);\n    list.add(33);\n    list.add(20);\n    doc.addField(\"field5\", list);\n    \n    SolrInputDocument clone = doc.deepCopy();\n    \n    System.out.println(\"doc1: \"+ doc);\n    System.out.println(\"clone: \"+ clone);\n    \n    assertNotSame(doc, clone);\n    \n    Collection<String> fieldNames = doc.getFieldNames();\n    for (String name : fieldNames) {\n      Collection<Object> values = doc.getFieldValues(name);\n      Collection<Object> cloneValues = clone.getFieldValues(name);\n      \n      assertEquals(values.size(), cloneValues.size());\n      assertNotSame(values, cloneValues);\n      \n      Iterator<Object> cloneIt = cloneValues.iterator();\n      for (Object value : values) {\n        Object cloneValue = cloneIt.next();\n        assertSame(value, cloneValue);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDeepCopy() throws IOException {\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"field1\", \"value1\");\n    doc.addField(\"field2\", \"value1\");\n    doc.addField(\"field3\", \"value2\");\n    doc.addField(\"field4\", 15);\n    List<Integer> list = new ArrayList<>();\n    list.add(45);\n    list.add(33);\n    list.add(20);\n    doc.addField(\"field5\", list);\n    doc.setDocumentBoost(5f);\n    \n    SolrInputDocument clone = doc.deepCopy();\n    \n    System.out.println(\"doc1: \"+ doc);\n    System.out.println(\"clone: \"+ clone);\n    \n    assertNotSame(doc, clone);\n    \n    Collection<String> fieldNames = doc.getFieldNames();\n    for (String name : fieldNames) {\n      Collection<Object> values = doc.getFieldValues(name);\n      Collection<Object> cloneValues = clone.getFieldValues(name);\n      \n      assertEquals(values.size(), cloneValues.size());\n      assertNotSame(values, cloneValues);\n      \n      Iterator<Object> cloneIt = cloneValues.iterator();\n      for (Object value : values) {\n        Object cloneValue = cloneIt.next();\n        assertSame(value, cloneValue);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c5fa11bf621ab6d2af49b9e9e05dff485fec0de2"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c5fa11bf621ab6d2af49b9e9e05dff485fec0de2"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c5fa11bf621ab6d2af49b9e9e05dff485fec0de2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"acd9883560fd89e6448b2b447302fe543040cd4f":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c5fa11bf621ab6d2af49b9e9e05dff485fec0de2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["acd9883560fd89e6448b2b447302fe543040cd4f"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["acd9883560fd89e6448b2b447302fe543040cd4f"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","c5fa11bf621ab6d2af49b9e9e05dff485fec0de2"],"c5fa11bf621ab6d2af49b9e9e05dff485fec0de2":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"acd9883560fd89e6448b2b447302fe543040cd4f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}