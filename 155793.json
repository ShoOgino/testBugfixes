{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testSearchRate().mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testSearchRate().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    waitForState(COLL1, 10, TimeUnit.SECONDS, clusterShape(1, 2));\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'rate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n//    SolrParams query = params(CommonParams.Q, \"*:*\");\n//    for (int i = 0; i < 500; i++) {\n//      solrClient.query(COLL1, query);\n//    }\n\n    cluster.getSimClusterStateProvider().simSetCollectionValue(COLL1, \"QUERY./select.requestTimes:1minRate\", 500, true);\n\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    long now = cluster.getTimeSource().getTime();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(\"node\");\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(\"replica\");\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(\"shard\");\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(\"collection\");\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 5.0);\n    assertEquals(collectionRate, totalNodeRate.get(), 5.0);\n    assertEquals(collectionRate, totalShardRate.get(), 5.0);\n    assertEquals(collectionRate, totalReplicaRate.get(), 5.0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1ca0a4dbf78f24cae23322877249146fecf1f218","date":1513333850,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testSearchRate().mjava","sourceNew":"  @Test\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    waitForState(COLL1, 10, TimeUnit.SECONDS, clusterShape(1, 2));\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'rate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n//    SolrParams query = params(CommonParams.Q, \"*:*\");\n//    for (int i = 0; i < 500; i++) {\n//      solrClient.query(COLL1, query);\n//    }\n\n    cluster.getSimClusterStateProvider().simSetCollectionValue(COLL1, \"QUERY./select.requestTimes:1minRate\", 500, true);\n\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    long now = cluster.getTimeSource().getTime();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(\"node\");\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(\"replica\");\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(\"shard\");\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(\"collection\");\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 100.0);\n    assertTrue(totalNodeRate.get() > 100.0);\n    assertTrue(totalShardRate.get() > 100.0);\n    assertTrue(totalReplicaRate.get() > 100.0);\n  }\n\n","sourceOld":"  @Test\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    waitForState(COLL1, 10, TimeUnit.SECONDS, clusterShape(1, 2));\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'rate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n//    SolrParams query = params(CommonParams.Q, \"*:*\");\n//    for (int i = 0; i < 500; i++) {\n//      solrClient.query(COLL1, query);\n//    }\n\n    cluster.getSimClusterStateProvider().simSetCollectionValue(COLL1, \"QUERY./select.requestTimes:1minRate\", 500, true);\n\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    long now = cluster.getTimeSource().getTime();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(\"node\");\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(\"replica\");\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(\"shard\");\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(\"collection\");\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 5.0);\n    assertEquals(collectionRate, totalNodeRate.get(), 5.0);\n    assertEquals(collectionRate, totalShardRate.get(), 5.0);\n    assertEquals(collectionRate, totalReplicaRate.get(), 5.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9ccfe45460d496c5e5e1b70396521dac842d966","date":1516798975,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testSearchRate().mjava","sourceNew":"  @Test\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    waitForState(COLL1, 10, TimeUnit.SECONDS, clusterShape(1, 2));\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'rate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'}\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n//    SolrParams query = params(CommonParams.Q, \"*:*\");\n//    for (int i = 0; i < 500; i++) {\n//      solrClient.query(COLL1, query);\n//    }\n\n    cluster.getSimClusterStateProvider().simSetCollectionValue(COLL1, \"QUERY./select.requestTimes:1minRate\", 500, true);\n\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n\n    assertEquals(listenerEvents.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = cluster.getTimeSource().getTime();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(\"node\");\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(\"replica\");\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(\"shard\");\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(\"collection\");\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 100.0);\n    assertTrue(totalNodeRate.get() > 100.0);\n    assertTrue(totalShardRate.get() > 100.0);\n    assertTrue(totalReplicaRate.get() > 100.0);\n\n    // check operations\n    List<Map<String, Object>> ops = (List<Map<String, Object>>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (Map<String, Object> m : ops) {\n      assertEquals(\"ADDREPLICA\", m.get(\"params.action\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    waitForState(COLL1, 10, TimeUnit.SECONDS, clusterShape(1, 2));\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'rate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n//    SolrParams query = params(CommonParams.Q, \"*:*\");\n//    for (int i = 0; i < 500; i++) {\n//      solrClient.query(COLL1, query);\n//    }\n\n    cluster.getSimClusterStateProvider().simSetCollectionValue(COLL1, \"QUERY./select.requestTimes:1minRate\", 500, true);\n\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    long now = cluster.getTimeSource().getTime();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(\"node\");\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(\"replica\");\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(\"shard\");\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(\"collection\");\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 100.0);\n    assertTrue(totalNodeRate.get() > 100.0);\n    assertTrue(totalShardRate.get() > 100.0);\n    assertTrue(totalReplicaRate.get() > 100.0);\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441","date":1516881857,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testSearchRate().mjava","sourceNew":"  @Test\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    waitForState(COLL1, 10, TimeUnit.SECONDS, clusterShape(1, 2));\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'rate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'}\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n//    SolrParams query = params(CommonParams.Q, \"*:*\");\n//    for (int i = 0; i < 500; i++) {\n//      solrClient.query(COLL1, query);\n//    }\n\n    cluster.getSimClusterStateProvider().simSetCollectionValue(COLL1, \"QUERY./select.requestTimes:1minRate\", 500, true);\n\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n\n    assertEquals(listenerEvents.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = cluster.getTimeSource().getTime();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(\"node\");\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(\"replica\");\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(\"shard\");\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(\"collection\");\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 100.0);\n    assertTrue(totalNodeRate.get() > 100.0);\n    assertTrue(totalShardRate.get() > 100.0);\n    assertTrue(totalReplicaRate.get() > 100.0);\n\n    // check operations\n    List<Map<String, Object>> ops = (List<Map<String, Object>>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (Map<String, Object> m : ops) {\n      assertEquals(\"ADDREPLICA\", m.get(\"params.action\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    waitForState(COLL1, 10, TimeUnit.SECONDS, clusterShape(1, 2));\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'rate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n//    SolrParams query = params(CommonParams.Q, \"*:*\");\n//    for (int i = 0; i < 500; i++) {\n//      solrClient.query(COLL1, query);\n//    }\n\n    cluster.getSimClusterStateProvider().simSetCollectionValue(COLL1, \"QUERY./select.requestTimes:1minRate\", 500, true);\n\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    long now = cluster.getTimeSource().getTime();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(\"node\");\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(\"replica\");\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(\"shard\");\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(\"collection\");\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 100.0);\n    assertTrue(totalNodeRate.get() > 100.0);\n    assertTrue(totalShardRate.get() > 100.0);\n    assertTrue(totalReplicaRate.get() > 100.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ff5e25fb60ccc8574bcbd65396786ae9163f0149","date":1519706112,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testSearchRate().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    waitForState(COLL1, 10, TimeUnit.SECONDS, clusterShape(1, 2));\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'rate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'}\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n//    SolrParams query = params(CommonParams.Q, \"*:*\");\n//    for (int i = 0; i < 500; i++) {\n//      solrClient.query(COLL1, query);\n//    }\n\n    cluster.getSimClusterStateProvider().simSetCollectionValue(COLL1, \"QUERY./select.requestTimes:1minRate\", 500, true);\n\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n\n    assertEquals(listenerEvents.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = cluster.getTimeSource().getTime();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(\"node\");\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(\"replica\");\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(\"shard\");\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(\"collection\");\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 100.0);\n    assertTrue(totalNodeRate.get() > 100.0);\n    assertTrue(totalShardRate.get() > 100.0);\n    assertTrue(totalReplicaRate.get() > 100.0);\n\n    // check operations\n    List<Map<String, Object>> ops = (List<Map<String, Object>>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (Map<String, Object> m : ops) {\n      assertEquals(\"ADDREPLICA\", m.get(\"params.action\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    waitForState(COLL1, 10, TimeUnit.SECONDS, clusterShape(1, 2));\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'rate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'}\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n//    SolrParams query = params(CommonParams.Q, \"*:*\");\n//    for (int i = 0; i < 500; i++) {\n//      solrClient.query(COLL1, query);\n//    }\n\n    cluster.getSimClusterStateProvider().simSetCollectionValue(COLL1, \"QUERY./select.requestTimes:1minRate\", 500, true);\n\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n\n    assertEquals(listenerEvents.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = cluster.getTimeSource().getTime();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(\"node\");\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(\"replica\");\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(\"shard\");\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(\"collection\");\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 100.0);\n    assertTrue(totalNodeRate.get() > 100.0);\n    assertTrue(totalShardRate.get() > 100.0);\n    assertTrue(totalReplicaRate.get() > 100.0);\n\n    // check operations\n    List<Map<String, Object>> ops = (List<Map<String, Object>>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (Map<String, Object> m : ops) {\n      assertEquals(\"ADDREPLICA\", m.get(\"params.action\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9c6c0dad4932399aec99b4818086cb1772773916","date":1520515900,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testSearchRate().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cluster, COLL1, 10, TimeUnit.SECONDS, CloudTestUtils.clusterShape(1, 2));\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'rate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'}\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n//    SolrParams query = params(CommonParams.Q, \"*:*\");\n//    for (int i = 0; i < 500; i++) {\n//      solrClient.query(COLL1, query);\n//    }\n\n    cluster.getSimClusterStateProvider().simSetCollectionValue(COLL1, \"QUERY./select.requestTimes:1minRate\", 500, true);\n\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n\n    assertEquals(listenerEvents.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = cluster.getTimeSource().getTime();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(\"node\");\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(\"replica\");\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(\"shard\");\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(\"collection\");\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 100.0);\n    assertTrue(totalNodeRate.get() > 100.0);\n    assertTrue(totalShardRate.get() > 100.0);\n    assertTrue(totalReplicaRate.get() > 100.0);\n\n    // check operations\n    List<Map<String, Object>> ops = (List<Map<String, Object>>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (Map<String, Object> m : ops) {\n      assertEquals(\"ADDREPLICA\", m.get(\"params.action\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    waitForState(COLL1, 10, TimeUnit.SECONDS, clusterShape(1, 2));\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'rate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'}\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n//    SolrParams query = params(CommonParams.Q, \"*:*\");\n//    for (int i = 0; i < 500; i++) {\n//      solrClient.query(COLL1, query);\n//    }\n\n    cluster.getSimClusterStateProvider().simSetCollectionValue(COLL1, \"QUERY./select.requestTimes:1minRate\", 500, true);\n\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n\n    assertEquals(listenerEvents.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = cluster.getTimeSource().getTime();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(\"node\");\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(\"replica\");\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(\"shard\");\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(\"collection\");\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 100.0);\n    assertTrue(totalNodeRate.get() > 100.0);\n    assertTrue(totalShardRate.get() > 100.0);\n    assertTrue(totalReplicaRate.get() > 100.0);\n\n    // check operations\n    List<Map<String, Object>> ops = (List<Map<String, Object>>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (Map<String, Object> m : ops) {\n      assertEquals(\"ADDREPLICA\", m.get(\"params.action\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4412883c12067d8a4e2a354aa8adc58c32be1d6","date":1521129281,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testSearchRate().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cluster, COLL1, 10, TimeUnit.SECONDS, CloudTestUtils.clusterShape(1, 2));\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'rate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'}\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n//    SolrParams query = params(CommonParams.Q, \"*:*\");\n//    for (int i = 0; i < 500; i++) {\n//      solrClient.query(COLL1, query);\n//    }\n\n    cluster.getSimClusterStateProvider().simSetCollectionValue(COLL1, \"QUERY./select.requestTimes:1minRate\", 500, true);\n\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n\n    assertEquals(listenerEvents.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = cluster.getTimeSource().getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(\"node\");\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(\"replica\");\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(\"shard\");\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(\"collection\");\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 100.0);\n    assertTrue(totalNodeRate.get() > 100.0);\n    assertTrue(totalShardRate.get() > 100.0);\n    assertTrue(totalReplicaRate.get() > 100.0);\n\n    // check operations\n    List<Map<String, Object>> ops = (List<Map<String, Object>>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (Map<String, Object> m : ops) {\n      assertEquals(\"ADDREPLICA\", m.get(\"params.action\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cluster, COLL1, 10, TimeUnit.SECONDS, CloudTestUtils.clusterShape(1, 2));\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'rate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'}\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n//    SolrParams query = params(CommonParams.Q, \"*:*\");\n//    for (int i = 0; i < 500; i++) {\n//      solrClient.query(COLL1, query);\n//    }\n\n    cluster.getSimClusterStateProvider().simSetCollectionValue(COLL1, \"QUERY./select.requestTimes:1minRate\", 500, true);\n\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n\n    assertEquals(listenerEvents.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = cluster.getTimeSource().getTime();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(\"node\");\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(\"replica\");\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(\"shard\");\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(\"collection\");\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 100.0);\n    assertTrue(totalNodeRate.get() > 100.0);\n    assertTrue(totalShardRate.get() > 100.0);\n    assertTrue(totalReplicaRate.get() > 100.0);\n\n    // check operations\n    List<Map<String, Object>> ops = (List<Map<String, Object>>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (Map<String, Object> m : ops) {\n      assertEquals(\"ADDREPLICA\", m.get(\"params.action\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1","date":1523453934,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testSearchRate().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cluster, COLL1, 10, TimeUnit.SECONDS, CloudTestUtils.clusterShape(1, 2));\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'rate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'}\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n//    SolrParams query = params(CommonParams.Q, \"*:*\");\n//    for (int i = 0; i < 500; i++) {\n//      solrClient.query(COLL1, query);\n//    }\n\n    cluster.getSimClusterStateProvider().simSetCollectionValue(COLL1, \"QUERY./select.requestTimes:1minRate\", 500, false, true);\n\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n\n    assertEquals(listenerEvents.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = cluster.getTimeSource().getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(\"node\");\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(\"replica\");\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(\"shard\");\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(\"collection\");\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 100.0);\n    assertTrue(totalNodeRate.get() > 100.0);\n    assertTrue(totalShardRate.get() > 100.0);\n    assertTrue(totalReplicaRate.get() > 100.0);\n\n    // check operations\n    List<Map<String, Object>> ops = (List<Map<String, Object>>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (Map<String, Object> m : ops) {\n      assertEquals(\"ADDREPLICA\", m.get(\"params.action\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cluster, COLL1, 10, TimeUnit.SECONDS, CloudTestUtils.clusterShape(1, 2));\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'rate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'}\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n//    SolrParams query = params(CommonParams.Q, \"*:*\");\n//    for (int i = 0; i < 500; i++) {\n//      solrClient.query(COLL1, query);\n//    }\n\n    cluster.getSimClusterStateProvider().simSetCollectionValue(COLL1, \"QUERY./select.requestTimes:1minRate\", 500, true);\n\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n\n    assertEquals(listenerEvents.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = cluster.getTimeSource().getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(\"node\");\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(\"replica\");\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(\"shard\");\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(\"collection\");\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 100.0);\n    assertTrue(totalNodeRate.get() > 100.0);\n    assertTrue(totalShardRate.get() > 100.0);\n    assertTrue(totalReplicaRate.get() > 100.0);\n\n    // check operations\n    List<Map<String, Object>> ops = (List<Map<String, Object>>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (Map<String, Object> m : ops) {\n      assertEquals(\"ADDREPLICA\", m.get(\"params.action\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"43345f1452f9510f8aaadae6156fe0c834e7d957","date":1523483670,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testSearchRate().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cluster, COLL1, 10, TimeUnit.SECONDS, CloudTestUtils.clusterShape(1, 2));\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'rate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'}\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n//    SolrParams query = params(CommonParams.Q, \"*:*\");\n//    for (int i = 0; i < 500; i++) {\n//      solrClient.query(COLL1, query);\n//    }\n\n    cluster.getSimClusterStateProvider().simSetCollectionValue(COLL1, \"QUERY./select.requestTimes:1minRate\", 500, false, true);\n\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n\n    assertEquals(listenerEvents.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = cluster.getTimeSource().getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(\"node\");\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(\"replica\");\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(\"shard\");\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(\"collection\");\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 100.0);\n    assertTrue(totalNodeRate.get() > 100.0);\n    assertTrue(totalShardRate.get() > 100.0);\n    assertTrue(totalReplicaRate.get() > 100.0);\n\n    // check operations\n    List<Map<String, Object>> ops = (List<Map<String, Object>>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (Map<String, Object> m : ops) {\n      assertEquals(\"ADDREPLICA\", m.get(\"params.action\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cluster, COLL1, 10, TimeUnit.SECONDS, CloudTestUtils.clusterShape(1, 2));\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'rate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'}\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n//    SolrParams query = params(CommonParams.Q, \"*:*\");\n//    for (int i = 0; i < 500; i++) {\n//      solrClient.query(COLL1, query);\n//    }\n\n    cluster.getSimClusterStateProvider().simSetCollectionValue(COLL1, \"QUERY./select.requestTimes:1minRate\", 500, true);\n\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n\n    assertEquals(listenerEvents.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = cluster.getTimeSource().getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(\"node\");\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(\"replica\");\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(\"shard\");\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(\"collection\");\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 100.0);\n    assertTrue(totalNodeRate.get() > 100.0);\n    assertTrue(totalShardRate.get() > 100.0);\n    assertTrue(totalReplicaRate.get() > 100.0);\n\n    // check operations\n    List<Map<String, Object>> ops = (List<Map<String, Object>>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (Map<String, Object> m : ops) {\n      assertEquals(\"ADDREPLICA\", m.get(\"params.action\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a","date":1524514741,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testSearchRate().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cluster, COLL1, 10, TimeUnit.SECONDS, CloudTestUtils.clusterShape(1, 2));\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'}\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n//    SolrParams query = params(CommonParams.Q, \"*:*\");\n//    for (int i = 0; i < 500; i++) {\n//      solrClient.query(COLL1, query);\n//    }\n\n    cluster.getSimClusterStateProvider().simSetCollectionValue(COLL1, \"QUERY./select.requestTimes:1minRate\", 500, false, true);\n\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n\n    assertEquals(listenerEvents.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = cluster.getTimeSource().getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_NODES);\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(SearchRateTrigger.HOT_REPLICAS);\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(SearchRateTrigger.HOT_SHARDS);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_COLLECTIONS);\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 100.0);\n    assertTrue(totalNodeRate.get() > 100.0);\n    assertTrue(totalShardRate.get() > 100.0);\n    assertTrue(totalReplicaRate.get() > 100.0);\n\n    // check operations\n    List<Map<String, Object>> ops = (List<Map<String, Object>>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (Map<String, Object> m : ops) {\n      assertEquals(\"ADDREPLICA\", m.get(\"params.action\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cluster, COLL1, 10, TimeUnit.SECONDS, CloudTestUtils.clusterShape(1, 2));\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'rate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'}\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n//    SolrParams query = params(CommonParams.Q, \"*:*\");\n//    for (int i = 0; i < 500; i++) {\n//      solrClient.query(COLL1, query);\n//    }\n\n    cluster.getSimClusterStateProvider().simSetCollectionValue(COLL1, \"QUERY./select.requestTimes:1minRate\", 500, false, true);\n\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n\n    assertEquals(listenerEvents.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = cluster.getTimeSource().getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(\"node\");\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(\"replica\");\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(\"shard\");\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(\"collection\");\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 100.0);\n    assertTrue(totalNodeRate.get() > 100.0);\n    assertTrue(totalShardRate.get() > 100.0);\n    assertTrue(totalReplicaRate.get() > 100.0);\n\n    // check operations\n    List<Map<String, Object>> ops = (List<Map<String, Object>>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (Map<String, Object> m : ops) {\n      assertEquals(\"ADDREPLICA\", m.get(\"params.action\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"042b92cf48996255bedb0c3c4bf772d7e06e4dea","date":1534272102,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testSearchRate().mjava","sourceNew":"  @Test\n  //@BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cluster, COLL1, 10, TimeUnit.SECONDS, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"{'name':'finish','class':'\" + FinishTriggerAction.class.getName() + \"'},\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n//    SolrParams query = params(CommonParams.Q, \"*:*\");\n//    for (int i = 0; i < 500; i++) {\n//      solrClient.query(COLL1, query);\n//    }\n\n    cluster.getSimClusterStateProvider().simSetCollectionValue(COLL1, \"QUERY./select.requestTimes:1minRate\", 500, false, true);\n\n    boolean await = triggerStartedLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not start in time\", await);\n    await = triggerFinishedLatch.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not finish in time\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n\n    assertEquals(listenerEvents.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = cluster.getTimeSource().getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_NODES);\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(SearchRateTrigger.HOT_REPLICAS);\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(SearchRateTrigger.HOT_SHARDS);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_COLLECTIONS);\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 100.0);\n    assertTrue(totalNodeRate.get() > 100.0);\n    assertTrue(totalShardRate.get() > 100.0);\n    assertTrue(totalReplicaRate.get() > 100.0);\n\n    // check operations\n    List<Map<String, Object>> ops = (List<Map<String, Object>>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (Map<String, Object> m : ops) {\n      assertEquals(\"ADDREPLICA\", m.get(\"params.action\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cluster, COLL1, 10, TimeUnit.SECONDS, CloudTestUtils.clusterShape(1, 2));\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'}\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n//    SolrParams query = params(CommonParams.Q, \"*:*\");\n//    for (int i = 0; i < 500; i++) {\n//      solrClient.query(COLL1, query);\n//    }\n\n    cluster.getSimClusterStateProvider().simSetCollectionValue(COLL1, \"QUERY./select.requestTimes:1minRate\", 500, false, true);\n\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n\n    assertEquals(listenerEvents.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = cluster.getTimeSource().getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_NODES);\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(SearchRateTrigger.HOT_REPLICAS);\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(SearchRateTrigger.HOT_SHARDS);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_COLLECTIONS);\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 100.0);\n    assertTrue(totalNodeRate.get() > 100.0);\n    assertTrue(totalShardRate.get() > 100.0);\n    assertTrue(totalReplicaRate.get() > 100.0);\n\n    // check operations\n    List<Map<String, Object>> ops = (List<Map<String, Object>>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (Map<String, Object> m : ops) {\n      assertEquals(\"ADDREPLICA\", m.get(\"params.action\"));\n    }\n  }\n\n","bugFix":["d9ccfe45460d496c5e5e1b70396521dac842d966","9c6c0dad4932399aec99b4818086cb1772773916","ff5e25fb60ccc8574bcbd65396786ae9163f0149","1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testSearchRate().mjava","sourceNew":"  @Test\n  //@BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cluster, COLL1, 10, TimeUnit.SECONDS, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"{'name':'finish','class':'\" + FinishTriggerAction.class.getName() + \"'},\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n//    SolrParams query = params(CommonParams.Q, \"*:*\");\n//    for (int i = 0; i < 500; i++) {\n//      solrClient.query(COLL1, query);\n//    }\n\n    cluster.getSimClusterStateProvider().simSetCollectionValue(COLL1, \"QUERY./select.requestTimes:1minRate\", 500, false, true);\n\n    boolean await = triggerStartedLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not start in time\", await);\n    await = triggerFinishedLatch.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not finish in time\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n\n    assertEquals(listenerEvents.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = cluster.getTimeSource().getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_NODES);\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(SearchRateTrigger.HOT_REPLICAS);\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(SearchRateTrigger.HOT_SHARDS);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_COLLECTIONS);\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 100.0);\n    assertTrue(totalNodeRate.get() > 100.0);\n    assertTrue(totalShardRate.get() > 100.0);\n    assertTrue(totalReplicaRate.get() > 100.0);\n\n    // check operations\n    List<Map<String, Object>> ops = (List<Map<String, Object>>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (Map<String, Object> m : ops) {\n      assertEquals(\"ADDREPLICA\", m.get(\"params.action\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  //@BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cluster, COLL1, 10, TimeUnit.SECONDS, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"{'name':'finish','class':'\" + FinishTriggerAction.class.getName() + \"'},\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n//    SolrParams query = params(CommonParams.Q, \"*:*\");\n//    for (int i = 0; i < 500; i++) {\n//      solrClient.query(COLL1, query);\n//    }\n\n    cluster.getSimClusterStateProvider().simSetCollectionValue(COLL1, \"QUERY./select.requestTimes:1minRate\", 500, false, true);\n\n    boolean await = triggerStartedLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not start in time\", await);\n    await = triggerFinishedLatch.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not finish in time\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n\n    assertEquals(listenerEvents.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = cluster.getTimeSource().getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_NODES);\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(SearchRateTrigger.HOT_REPLICAS);\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(SearchRateTrigger.HOT_SHARDS);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_COLLECTIONS);\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 100.0);\n    assertTrue(totalNodeRate.get() > 100.0);\n    assertTrue(totalShardRate.get() > 100.0);\n    assertTrue(totalReplicaRate.get() > 100.0);\n\n    // check operations\n    List<Map<String, Object>> ops = (List<Map<String, Object>>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (Map<String, Object> m : ops) {\n      assertEquals(\"ADDREPLICA\", m.get(\"params.action\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"ff5e25fb60ccc8574bcbd65396786ae9163f0149":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["d4412883c12067d8a4e2a354aa8adc58c32be1d6","ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1"],"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441":["1ca0a4dbf78f24cae23322877249146fecf1f218","d9ccfe45460d496c5e5e1b70396521dac842d966"],"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a"],"c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"9c6c0dad4932399aec99b4818086cb1772773916":["ff5e25fb60ccc8574bcbd65396786ae9163f0149"],"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1":["d4412883c12067d8a4e2a354aa8adc58c32be1d6"],"1ca0a4dbf78f24cae23322877249146fecf1f218":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d4412883c12067d8a4e2a354aa8adc58c32be1d6":["9c6c0dad4932399aec99b4818086cb1772773916"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"d9ccfe45460d496c5e5e1b70396521dac842d966":["1ca0a4dbf78f24cae23322877249146fecf1f218"]},"commit2Childs":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ff5e25fb60ccc8574bcbd65396786ae9163f0149":["9c6c0dad4932399aec99b4818086cb1772773916"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a"],"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441":["ff5e25fb60ccc8574bcbd65396786ae9163f0149"],"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"9c6c0dad4932399aec99b4818086cb1772773916":["d4412883c12067d8a4e2a354aa8adc58c32be1d6"],"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"1ca0a4dbf78f24cae23322877249146fecf1f218":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441","d9ccfe45460d496c5e5e1b70396521dac842d966"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"d4412883c12067d8a4e2a354aa8adc58c32be1d6":["43345f1452f9510f8aaadae6156fe0c834e7d957","ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["1ca0a4dbf78f24cae23322877249146fecf1f218"],"d9ccfe45460d496c5e5e1b70396521dac842d966":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}