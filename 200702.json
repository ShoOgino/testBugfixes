{"path":"lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRewriteNegate().mjava","commits":[{"id":"af549b45614d869371e17e0b5b4ca47535d552c0","date":1344595563,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRewriteNegate().mjava","pathOld":"/dev/null","sourceNew":"    public void testRewriteNegate() throws Exception {\n      final Similarity oldSimilarity = s.getSimilarity();\n      try {\n        s.setSimilarity(new DefaultSimilarity() {\n          @Override\n          public float coord(int overlap, int maxOverlap) {\n            return overlap / ((float)maxOverlap + 1);\n          }\n        });\n        BooleanQuery q1 = new BooleanQuery();\n        q1.add(new TermQuery(new Term(\"data\", \"1\")), BooleanClause.Occur.SHOULD);\n        BooleanQuery q2 = new BooleanQuery();\n        q2.add(new TermQuery(new Term(\"data\", \"1\")), BooleanClause.Occur.SHOULD);\n        q2.add(new TermQuery(new Term(\"data\", \"Z\")), BooleanClause.Occur.MUST_NOT);\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        assertSubsetOfSameScores(q2, top1, top2);\n      } finally {\n        s.setSimilarity(oldSimilarity);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRewriteNegate().mjava","pathOld":"/dev/null","sourceNew":"    public void testRewriteNegate() throws Exception {\n      final Similarity oldSimilarity = s.getSimilarity();\n      try {\n        s.setSimilarity(new DefaultSimilarity() {\n          @Override\n          public float coord(int overlap, int maxOverlap) {\n            return overlap / ((float)maxOverlap + 1);\n          }\n        });\n        BooleanQuery q1 = new BooleanQuery();\n        q1.add(new TermQuery(new Term(\"data\", \"1\")), BooleanClause.Occur.SHOULD);\n        BooleanQuery q2 = new BooleanQuery();\n        q2.add(new TermQuery(new Term(\"data\", \"1\")), BooleanClause.Occur.SHOULD);\n        q2.add(new TermQuery(new Term(\"data\", \"Z\")), BooleanClause.Occur.MUST_NOT);\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        assertSubsetOfSameScores(q2, top1, top2);\n      } finally {\n        s.setSimilarity(oldSimilarity);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRewriteNegate().mjava","pathOld":"/dev/null","sourceNew":"    public void testRewriteNegate() throws Exception {\n      final Similarity oldSimilarity = s.getSimilarity();\n      try {\n        s.setSimilarity(new DefaultSimilarity() {\n          @Override\n          public float coord(int overlap, int maxOverlap) {\n            return overlap / ((float)maxOverlap + 1);\n          }\n        });\n        BooleanQuery q1 = new BooleanQuery();\n        q1.add(new TermQuery(new Term(\"data\", \"1\")), BooleanClause.Occur.SHOULD);\n        BooleanQuery q2 = new BooleanQuery();\n        q2.add(new TermQuery(new Term(\"data\", \"1\")), BooleanClause.Occur.SHOULD);\n        q2.add(new TermQuery(new Term(\"data\", \"Z\")), BooleanClause.Occur.MUST_NOT);\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        assertSubsetOfSameScores(q2, top1, top2);\n      } finally {\n        s.setSimilarity(oldSimilarity);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRewriteNegate().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRewriteNegate().mjava","sourceNew":"    public void testRewriteNegate() throws Exception {\n      final Similarity oldSimilarity = s.getSimilarity();\n      try {\n        s.setSimilarity(new DefaultSimilarity() {\n          @Override\n          public float coord(int overlap, int maxOverlap) {\n            return overlap / ((float)maxOverlap + 1);\n          }\n        });\n        BooleanQuery q1 = new BooleanQuery();\n        q1.add(new TermQuery(new Term(\"data\", \"1\")), BooleanClause.Occur.SHOULD);\n        BooleanQuery q2 = new BooleanQuery();\n        q2.add(new TermQuery(new Term(\"data\", \"1\")), BooleanClause.Occur.SHOULD);\n        q2.add(new TermQuery(new Term(\"data\", \"Z\")), BooleanClause.Occur.MUST_NOT);\n        TopDocs top1 = s.search(q1,100);\n        TopDocs top2 = s.search(q2,100);\n        assertSubsetOfSameScores(q2, top1, top2);\n      } finally {\n        s.setSimilarity(oldSimilarity);\n      }\n    }\n\n","sourceOld":"    public void testRewriteNegate() throws Exception {\n      final Similarity oldSimilarity = s.getSimilarity();\n      try {\n        s.setSimilarity(new DefaultSimilarity() {\n          @Override\n          public float coord(int overlap, int maxOverlap) {\n            return overlap / ((float)maxOverlap + 1);\n          }\n        });\n        BooleanQuery q1 = new BooleanQuery();\n        q1.add(new TermQuery(new Term(\"data\", \"1\")), BooleanClause.Occur.SHOULD);\n        BooleanQuery q2 = new BooleanQuery();\n        q2.add(new TermQuery(new Term(\"data\", \"1\")), BooleanClause.Occur.SHOULD);\n        q2.add(new TermQuery(new Term(\"data\", \"Z\")), BooleanClause.Occur.MUST_NOT);\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        assertSubsetOfSameScores(q2, top1, top2);\n      } finally {\n        s.setSimilarity(oldSimilarity);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"485545da3b4429d6f138b4baac573a97820ee93b","date":1433876557,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRewriteNegate().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRewriteNegate().mjava","sourceNew":"    public void testRewriteNegate() throws Exception {\n      final Similarity oldSimilarity = s.getSimilarity(true);\n      try {\n        s.setSimilarity(new DefaultSimilarity() {\n          @Override\n          public float coord(int overlap, int maxOverlap) {\n            return overlap / ((float)maxOverlap + 1);\n          }\n        });\n        BooleanQuery q1 = new BooleanQuery();\n        q1.add(new TermQuery(new Term(\"data\", \"1\")), BooleanClause.Occur.SHOULD);\n        BooleanQuery q2 = new BooleanQuery();\n        q2.add(new TermQuery(new Term(\"data\", \"1\")), BooleanClause.Occur.SHOULD);\n        q2.add(new TermQuery(new Term(\"data\", \"Z\")), BooleanClause.Occur.MUST_NOT);\n        TopDocs top1 = s.search(q1,100);\n        TopDocs top2 = s.search(q2,100);\n        assertSubsetOfSameScores(q2, top1, top2);\n      } finally {\n        s.setSimilarity(oldSimilarity);\n      }\n    }\n\n","sourceOld":"    public void testRewriteNegate() throws Exception {\n      final Similarity oldSimilarity = s.getSimilarity();\n      try {\n        s.setSimilarity(new DefaultSimilarity() {\n          @Override\n          public float coord(int overlap, int maxOverlap) {\n            return overlap / ((float)maxOverlap + 1);\n          }\n        });\n        BooleanQuery q1 = new BooleanQuery();\n        q1.add(new TermQuery(new Term(\"data\", \"1\")), BooleanClause.Occur.SHOULD);\n        BooleanQuery q2 = new BooleanQuery();\n        q2.add(new TermQuery(new Term(\"data\", \"1\")), BooleanClause.Occur.SHOULD);\n        q2.add(new TermQuery(new Term(\"data\", \"Z\")), BooleanClause.Occur.MUST_NOT);\n        TopDocs top1 = s.search(q1,100);\n        TopDocs top2 = s.search(q2,100);\n        assertSubsetOfSameScores(q2, top1, top2);\n      } finally {\n        s.setSimilarity(oldSimilarity);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRewriteNegate().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRewriteNegate().mjava","sourceNew":"    public void testRewriteNegate() throws Exception {\n      final Similarity oldSimilarity = s.getSimilarity(true);\n      try {\n        s.setSimilarity(new DefaultSimilarity() {\n          @Override\n          public float coord(int overlap, int maxOverlap) {\n            return overlap / ((float)maxOverlap + 1);\n          }\n        });\n        BooleanQuery.Builder q1 = new BooleanQuery.Builder();\n        q1.add(new TermQuery(new Term(\"data\", \"1\")), BooleanClause.Occur.SHOULD);\n        BooleanQuery.Builder q2 = new BooleanQuery.Builder();\n        q2.add(new TermQuery(new Term(\"data\", \"1\")), BooleanClause.Occur.SHOULD);\n        q2.add(new TermQuery(new Term(\"data\", \"Z\")), BooleanClause.Occur.MUST_NOT);\n        TopDocs top1 = s.search(q1.build(),100);\n        TopDocs top2 = s.search(q2.build(),100);\n        assertSubsetOfSameScores(q2.build(), top1, top2);\n      } finally {\n        s.setSimilarity(oldSimilarity);\n      }\n    }\n\n","sourceOld":"    public void testRewriteNegate() throws Exception {\n      final Similarity oldSimilarity = s.getSimilarity(true);\n      try {\n        s.setSimilarity(new DefaultSimilarity() {\n          @Override\n          public float coord(int overlap, int maxOverlap) {\n            return overlap / ((float)maxOverlap + 1);\n          }\n        });\n        BooleanQuery q1 = new BooleanQuery();\n        q1.add(new TermQuery(new Term(\"data\", \"1\")), BooleanClause.Occur.SHOULD);\n        BooleanQuery q2 = new BooleanQuery();\n        q2.add(new TermQuery(new Term(\"data\", \"1\")), BooleanClause.Occur.SHOULD);\n        q2.add(new TermQuery(new Term(\"data\", \"Z\")), BooleanClause.Occur.MUST_NOT);\n        TopDocs top1 = s.search(q1,100);\n        TopDocs top2 = s.search(q2,100);\n        assertSubsetOfSameScores(q2, top1, top2);\n      } finally {\n        s.setSimilarity(oldSimilarity);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81d0720146de53dd3a4a023d2a3d1089d86d748d","date":1442268215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRewriteNegate().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRewriteNegate().mjava","sourceNew":"    public void testRewriteNegate() throws Exception {\n      final Similarity oldSimilarity = s.getSimilarity(true);\n      try {\n        s.setSimilarity(new ClassicSimilarity() {\n          @Override\n          public float coord(int overlap, int maxOverlap) {\n            return overlap / ((float)maxOverlap + 1);\n          }\n        });\n        BooleanQuery.Builder q1 = new BooleanQuery.Builder();\n        q1.add(new TermQuery(new Term(\"data\", \"1\")), BooleanClause.Occur.SHOULD);\n        BooleanQuery.Builder q2 = new BooleanQuery.Builder();\n        q2.add(new TermQuery(new Term(\"data\", \"1\")), BooleanClause.Occur.SHOULD);\n        q2.add(new TermQuery(new Term(\"data\", \"Z\")), BooleanClause.Occur.MUST_NOT);\n        TopDocs top1 = s.search(q1.build(),100);\n        TopDocs top2 = s.search(q2.build(),100);\n        assertSubsetOfSameScores(q2.build(), top1, top2);\n      } finally {\n        s.setSimilarity(oldSimilarity);\n      }\n    }\n\n","sourceOld":"    public void testRewriteNegate() throws Exception {\n      final Similarity oldSimilarity = s.getSimilarity(true);\n      try {\n        s.setSimilarity(new DefaultSimilarity() {\n          @Override\n          public float coord(int overlap, int maxOverlap) {\n            return overlap / ((float)maxOverlap + 1);\n          }\n        });\n        BooleanQuery.Builder q1 = new BooleanQuery.Builder();\n        q1.add(new TermQuery(new Term(\"data\", \"1\")), BooleanClause.Occur.SHOULD);\n        BooleanQuery.Builder q2 = new BooleanQuery.Builder();\n        q2.add(new TermQuery(new Term(\"data\", \"1\")), BooleanClause.Occur.SHOULD);\n        q2.add(new TermQuery(new Term(\"data\", \"Z\")), BooleanClause.Occur.MUST_NOT);\n        TopDocs top1 = s.search(q1.build(),100);\n        TopDocs top2 = s.search(q2.build(),100);\n        assertSubsetOfSameScores(q2.build(), top1, top2);\n      } finally {\n        s.setSimilarity(oldSimilarity);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRewriteNegate().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRewriteNegate().mjava","sourceNew":"    public void testRewriteNegate() throws Exception {\n      BooleanQuery.Builder q1 = new BooleanQuery.Builder();\n      q1.add(new TermQuery(new Term(\"data\", \"1\")), BooleanClause.Occur.SHOULD);\n      BooleanQuery.Builder q2 = new BooleanQuery.Builder();\n      q2.add(new TermQuery(new Term(\"data\", \"1\")), BooleanClause.Occur.SHOULD);\n      q2.add(new TermQuery(new Term(\"data\", \"Z\")), BooleanClause.Occur.MUST_NOT);\n      TopDocs top1 = s.search(q1.build(),100);\n      TopDocs top2 = s.search(q2.build(),100);\n      assertSubsetOfSameScores(q2.build(), top1, top2);\n    }\n\n","sourceOld":"    public void testRewriteNegate() throws Exception {\n      final Similarity oldSimilarity = s.getSimilarity(true);\n      try {\n        s.setSimilarity(new ClassicSimilarity() {\n          @Override\n          public float coord(int overlap, int maxOverlap) {\n            return overlap / ((float)maxOverlap + 1);\n          }\n        });\n        BooleanQuery.Builder q1 = new BooleanQuery.Builder();\n        q1.add(new TermQuery(new Term(\"data\", \"1\")), BooleanClause.Occur.SHOULD);\n        BooleanQuery.Builder q2 = new BooleanQuery.Builder();\n        q2.add(new TermQuery(new Term(\"data\", \"1\")), BooleanClause.Occur.SHOULD);\n        q2.add(new TermQuery(new Term(\"data\", \"Z\")), BooleanClause.Occur.MUST_NOT);\n        TopDocs top1 = s.search(q1.build(),100);\n        TopDocs top2 = s.search(q2.build(),100);\n        assertSubsetOfSameScores(q2.build(), top1, top2);\n      } finally {\n        s.setSimilarity(oldSimilarity);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRewriteNegate().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRewriteNegate().mjava","sourceNew":"    public void testRewriteNegate() throws Exception {\n      BooleanQuery.Builder q1 = new BooleanQuery.Builder();\n      q1.add(new TermQuery(new Term(\"data\", \"1\")), BooleanClause.Occur.SHOULD);\n      BooleanQuery.Builder q2 = new BooleanQuery.Builder();\n      q2.add(new TermQuery(new Term(\"data\", \"1\")), BooleanClause.Occur.SHOULD);\n      q2.add(new TermQuery(new Term(\"data\", \"Z\")), BooleanClause.Occur.MUST_NOT);\n      TopDocs top1 = s.search(q1.build(),100);\n      TopDocs top2 = s.search(q2.build(),100);\n      assertSubsetOfSameScores(q2.build(), top1, top2);\n    }\n\n","sourceOld":"    public void testRewriteNegate() throws Exception {\n      final Similarity oldSimilarity = s.getSimilarity(true);\n      try {\n        s.setSimilarity(new ClassicSimilarity() {\n          @Override\n          public float coord(int overlap, int maxOverlap) {\n            return overlap / ((float)maxOverlap + 1);\n          }\n        });\n        BooleanQuery.Builder q1 = new BooleanQuery.Builder();\n        q1.add(new TermQuery(new Term(\"data\", \"1\")), BooleanClause.Occur.SHOULD);\n        BooleanQuery.Builder q2 = new BooleanQuery.Builder();\n        q2.add(new TermQuery(new Term(\"data\", \"1\")), BooleanClause.Occur.SHOULD);\n        q2.add(new TermQuery(new Term(\"data\", \"Z\")), BooleanClause.Occur.MUST_NOT);\n        TopDocs top1 = s.search(q1.build(),100);\n        TopDocs top2 = s.search(q2.build(),100);\n        assertSubsetOfSameScores(q2.build(), top1, top2);\n      } finally {\n        s.setSimilarity(oldSimilarity);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["485545da3b4429d6f138b4baac573a97820ee93b"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","af549b45614d869371e17e0b5b4ca47535d552c0"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["af549b45614d869371e17e0b5b4ca47535d552c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"485545da3b4429d6f138b4baac573a97820ee93b":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"c8a0e442f7b61f811680273b25da95994a724466":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"af549b45614d869371e17e0b5b4ca47535d552c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["81d0720146de53dd3a4a023d2a3d1089d86d748d","c8a0e442f7b61f811680273b25da95994a724466"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","af549b45614d869371e17e0b5b4ca47535d552c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c8a0e442f7b61f811680273b25da95994a724466"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7869f64c874ebf7f317d22c00baf2b6857797a6","af549b45614d869371e17e0b5b4ca47535d552c0","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["485545da3b4429d6f138b4baac573a97820ee93b"],"485545da3b4429d6f138b4baac573a97820ee93b":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"c8a0e442f7b61f811680273b25da95994a724466":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"af549b45614d869371e17e0b5b4ca47535d552c0":["c7869f64c874ebf7f317d22c00baf2b6857797a6","f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["c8a0e442f7b61f811680273b25da95994a724466","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}