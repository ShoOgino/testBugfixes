{"path":"lucene/core/src/java/org/apache/lucene/util/RadixSelector#partition(int,int,int,int,int,int).mjava","commits":[{"id":"d561885e9bb6238af1ff8afe8630dcfe49b66ac7","date":1469780634,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/RadixSelector#partition(int,int,int,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Reorder elements so that all of them that fall into {@code bucket} are\n   *  between offsets {@code bucketFrom} and {@code bucketTo}. */\n  private void partition(int from, int to, int bucket, int bucketFrom, int bucketTo, int d) {\n    int left = from;\n    int right = to - 1;\n\n    int slot = bucketFrom;\n\n    for (;;) {\n      int leftBucket = getBucket(left, d);\n      int rightBucket = getBucket(right, d);\n\n      while (leftBucket <= bucket && left < bucketFrom) {\n        if (leftBucket == bucket) {\n          swap(left, slot++);\n        } else {\n          ++left;\n        }\n        leftBucket = getBucket(left, d);\n      }\n\n      while (rightBucket >= bucket && right >= bucketTo) {\n        if (rightBucket == bucket) {\n          swap(right, slot++);\n        } else {\n          --right;\n        }\n        rightBucket = getBucket(right, d);\n      }\n\n      if (left < bucketFrom && right >= bucketTo) {\n        swap(left++, right--);\n      } else {\n        assert left == bucketFrom;\n        assert right == bucketTo - 1;\n        break;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/RadixSelector#partition(int,int,int,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Reorder elements so that all of them that fall into {@code bucket} are\n   *  between offsets {@code bucketFrom} and {@code bucketTo}. */\n  private void partition(int from, int to, int bucket, int bucketFrom, int bucketTo, int d) {\n    int left = from;\n    int right = to - 1;\n\n    int slot = bucketFrom;\n\n    for (;;) {\n      int leftBucket = getBucket(left, d);\n      int rightBucket = getBucket(right, d);\n\n      while (leftBucket <= bucket && left < bucketFrom) {\n        if (leftBucket == bucket) {\n          swap(left, slot++);\n        } else {\n          ++left;\n        }\n        leftBucket = getBucket(left, d);\n      }\n\n      while (rightBucket >= bucket && right >= bucketTo) {\n        if (rightBucket == bucket) {\n          swap(right, slot++);\n        } else {\n          --right;\n        }\n        rightBucket = getBucket(right, d);\n      }\n\n      if (left < bucketFrom && right >= bucketTo) {\n        swap(left++, right--);\n      } else {\n        assert left == bucketFrom;\n        assert right == bucketTo - 1;\n        break;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/RadixSelector#partition(int,int,int,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Reorder elements so that all of them that fall into {@code bucket} are\n   *  between offsets {@code bucketFrom} and {@code bucketTo}. */\n  private void partition(int from, int to, int bucket, int bucketFrom, int bucketTo, int d) {\n    int left = from;\n    int right = to - 1;\n\n    int slot = bucketFrom;\n\n    for (;;) {\n      int leftBucket = getBucket(left, d);\n      int rightBucket = getBucket(right, d);\n\n      while (leftBucket <= bucket && left < bucketFrom) {\n        if (leftBucket == bucket) {\n          swap(left, slot++);\n        } else {\n          ++left;\n        }\n        leftBucket = getBucket(left, d);\n      }\n\n      while (rightBucket >= bucket && right >= bucketTo) {\n        if (rightBucket == bucket) {\n          swap(right, slot++);\n        } else {\n          --right;\n        }\n        rightBucket = getBucket(right, d);\n      }\n\n      if (left < bucketFrom && right >= bucketTo) {\n        swap(left++, right--);\n      } else {\n        assert left == bucketFrom;\n        assert right == bucketTo - 1;\n        break;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d561885e9bb6238af1ff8afe8630dcfe49b66ac7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d561885e9bb6238af1ff8afe8630dcfe49b66ac7"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d561885e9bb6238af1ff8afe8630dcfe49b66ac7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d561885e9bb6238af1ff8afe8630dcfe49b66ac7"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d561885e9bb6238af1ff8afe8630dcfe49b66ac7","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"d561885e9bb6238af1ff8afe8630dcfe49b66ac7":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}