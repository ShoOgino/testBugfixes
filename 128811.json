{"path":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#copyFile(File,File,Integer).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#copyFile(File,File,Integer).mjava","pathOld":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#copyFile(File,File,Integer).mjava","sourceNew":"  /**\n   * character copy of file using UTF-8. If port is non-null, will be substituted any time \"TEST_PORT\" is found.\n   */\n  private static void copyFile(File src, File dst, Integer port) throws IOException {\n    BufferedReader in = new BufferedReader(new FileReader(src));\n    Writer out = new FileWriter(dst);\n\n    for (String line = in.readLine(); null != line; line = in.readLine()) {\n\n      if (null != port)\n        line = line.replace(\"TEST_PORT\", port.toString());\n      out.write(line);\n    }\n    in.close();\n    out.close();\n  }\n\n","sourceOld":"  /**\n   * character copy of file using UTF-8. If port is non-null, will be substituted any time \"TEST_PORT\" is found.\n   */\n  private static void copyFile(File src, File dst, Integer port) throws IOException {\n    BufferedReader in = new BufferedReader(new FileReader(src));\n    Writer out = new FileWriter(dst);\n\n    for (String line = in.readLine(); null != line; line = in.readLine()) {\n\n      if (null != port)\n        line = line.replace(\"TEST_PORT\", port.toString());\n      out.write(line);\n    }\n    in.close();\n    out.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#copyFile(File,File,Integer).mjava","pathOld":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#copyFile(File,File,Integer).mjava","sourceNew":"  /**\n   * character copy of file using UTF-8. If port is non-null, will be substituted any time \"TEST_PORT\" is found.\n   */\n  private static void copyFile(File src, File dst, Integer port) throws IOException {\n    BufferedReader in = new BufferedReader(new FileReader(src));\n    Writer out = new FileWriter(dst);\n\n    for (String line = in.readLine(); null != line; line = in.readLine()) {\n\n      if (null != port)\n        line = line.replace(\"TEST_PORT\", port.toString());\n      out.write(line);\n    }\n    in.close();\n    out.close();\n  }\n\n","sourceOld":"  /**\n   * character copy of file using UTF-8. If port is non-null, will be substituted any time \"TEST_PORT\" is found.\n   */\n  private static void copyFile(File src, File dst, Integer port) throws IOException {\n    BufferedReader in = new BufferedReader(new FileReader(src));\n    Writer out = new FileWriter(dst);\n\n    for (String line = in.readLine(); null != line; line = in.readLine()) {\n\n      if (null != port)\n        line = line.replace(\"TEST_PORT\", port.toString());\n      out.write(line);\n    }\n    in.close();\n    out.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#copyFile(File,File,Integer).mjava","pathOld":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#copyFile(File,File,Integer).mjava","sourceNew":"  /**\n   * character copy of file using UTF-8. If port is non-null, will be substituted any time \"TEST_PORT\" is found.\n   */\n  private static void copyFile(File src, File dst, Integer port) throws IOException {\n    BufferedReader in = new BufferedReader(new FileReader(src));\n    Writer out = new FileWriter(dst);\n\n    for (String line = in.readLine(); null != line; line = in.readLine()) {\n\n      if (null != port)\n        line = line.replace(\"TEST_PORT\", port.toString());\n      out.write(line);\n    }\n    in.close();\n    out.close();\n  }\n\n","sourceOld":"  /**\n   * character copy of file using UTF-8. If port is non-null, will be substituted any time \"TEST_PORT\" is found.\n   */\n  private static void copyFile(File src, File dst, Integer port) throws IOException {\n    BufferedReader in = new BufferedReader(new FileReader(src));\n    Writer out = new FileWriter(dst);\n\n    for (String line = in.readLine(); null != line; line = in.readLine()) {\n\n      if (null != port)\n        line = line.replace(\"TEST_PORT\", port.toString());\n      out.write(line);\n    }\n    in.close();\n    out.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"448a213c5dfd8b9baaf143dcbf9e633d8d7d1d5e","date":1341842777,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#copyFile(File,File,Integer).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#copyFile(File,File,Integer).mjava","sourceNew":"  /**\n   * character copy of file using UTF-8. If port is non-null, will be substituted any time \"TEST_PORT\" is found.\n   */\n  private static void copyFile(File src, File dst, Integer port) throws IOException {\n    BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(src), \"UTF-8\"));\n    Writer out = new OutputStreamWriter(new FileOutputStream(dst), \"UTF-8\");\n\n    for (String line = in.readLine(); null != line; line = in.readLine()) {\n\n      if (null != port)\n        line = line.replace(\"TEST_PORT\", port.toString());\n      out.write(line);\n    }\n    in.close();\n    out.close();\n  }\n\n","sourceOld":"  /**\n   * character copy of file using UTF-8. If port is non-null, will be substituted any time \"TEST_PORT\" is found.\n   */\n  private static void copyFile(File src, File dst, Integer port) throws IOException {\n    BufferedReader in = new BufferedReader(new FileReader(src));\n    Writer out = new FileWriter(dst);\n\n    for (String line = in.readLine(); null != line; line = in.readLine()) {\n\n      if (null != port)\n        line = line.replace(\"TEST_PORT\", port.toString());\n      out.write(line);\n    }\n    in.close();\n    out.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#copyFile(File,File,Integer).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#copyFile(File,File,Integer).mjava","sourceNew":"  /**\n   * character copy of file using UTF-8. If port is non-null, will be substituted any time \"TEST_PORT\" is found.\n   */\n  private static void copyFile(File src, File dst, Integer port) throws IOException {\n    BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(src), \"UTF-8\"));\n    Writer out = new OutputStreamWriter(new FileOutputStream(dst), \"UTF-8\");\n\n    for (String line = in.readLine(); null != line; line = in.readLine()) {\n\n      if (null != port)\n        line = line.replace(\"TEST_PORT\", port.toString());\n      out.write(line);\n    }\n    in.close();\n    out.close();\n  }\n\n","sourceOld":"  /**\n   * character copy of file using UTF-8. If port is non-null, will be substituted any time \"TEST_PORT\" is found.\n   */\n  private static void copyFile(File src, File dst, Integer port) throws IOException {\n    BufferedReader in = new BufferedReader(new FileReader(src));\n    Writer out = new FileWriter(dst);\n\n    for (String line = in.readLine(); null != line; line = in.readLine()) {\n\n      if (null != port)\n        line = line.replace(\"TEST_PORT\", port.toString());\n      out.write(line);\n    }\n    in.close();\n    out.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#copyFile(File,File,Integer).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#copyFile(File,File,Integer).mjava","sourceNew":"  /**\n   * character copy of file using UTF-8. If port is non-null, will be substituted any time \"TEST_PORT\" is found.\n   */\n  private static void copyFile(File src, File dst, Integer port) throws IOException {\n    BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(src), \"UTF-8\"));\n    Writer out = new OutputStreamWriter(new FileOutputStream(dst), \"UTF-8\");\n\n    for (String line = in.readLine(); null != line; line = in.readLine()) {\n\n      if (null != port)\n        line = line.replace(\"TEST_PORT\", port.toString());\n      out.write(line);\n    }\n    in.close();\n    out.close();\n  }\n\n","sourceOld":"  /**\n   * character copy of file using UTF-8. If port is non-null, will be substituted any time \"TEST_PORT\" is found.\n   */\n  private static void copyFile(File src, File dst, Integer port) throws IOException {\n    BufferedReader in = new BufferedReader(new FileReader(src));\n    Writer out = new FileWriter(dst);\n\n    for (String line = in.readLine(); null != line; line = in.readLine()) {\n\n      if (null != port)\n        line = line.replace(\"TEST_PORT\", port.toString());\n      out.write(line);\n    }\n    in.close();\n    out.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#copyFile(File,File,Integer).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#copyFile(File,File,Integer).mjava","sourceNew":"  /**\n   * character copy of file using UTF-8. If port is non-null, will be substituted any time \"TEST_PORT\" is found.\n   */\n  private static void copyFile(File src, File dst, Integer port) throws IOException {\n    BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(src), \"UTF-8\"));\n    Writer out = new OutputStreamWriter(new FileOutputStream(dst), \"UTF-8\");\n\n    for (String line = in.readLine(); null != line; line = in.readLine()) {\n\n      if (null != port)\n        line = line.replace(\"TEST_PORT\", port.toString());\n      out.write(line);\n    }\n    in.close();\n    out.close();\n  }\n\n","sourceOld":"  /**\n   * character copy of file using UTF-8. If port is non-null, will be substituted any time \"TEST_PORT\" is found.\n   */\n  private static void copyFile(File src, File dst, Integer port) throws IOException {\n    BufferedReader in = new BufferedReader(new FileReader(src));\n    Writer out = new FileWriter(dst);\n\n    for (String line = in.readLine(); null != line; line = in.readLine()) {\n\n      if (null != port)\n        line = line.replace(\"TEST_PORT\", port.toString());\n      out.write(line);\n    }\n    in.close();\n    out.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f6b79013f14f939d4bc18ac09c457d1d1796fd2","date":1346830387,"type":5,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#copyFile(File,File,Integer,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#copyFile(File,File,Integer).mjava","sourceNew":"  /**\n   * character copy of file using UTF-8. If port is non-null, will be substituted any time \"TEST_PORT\" is found.\n   */\n  private static void copyFile(File src, File dst, Integer port, boolean internalCompression) throws IOException {\n    BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(src), \"UTF-8\"));\n    Writer out = new OutputStreamWriter(new FileOutputStream(dst), \"UTF-8\");\n\n    for (String line = in.readLine(); null != line; line = in.readLine()) {\n\n      if (null != port)\n        line = line.replace(\"TEST_PORT\", port.toString());\n      \n      line = line.replace(\"COMPRESSION\", internalCompression?\"internal\":\"false\");\n\n      out.write(line);\n    }\n    in.close();\n    out.close();\n  }\n\n","sourceOld":"  /**\n   * character copy of file using UTF-8. If port is non-null, will be substituted any time \"TEST_PORT\" is found.\n   */\n  private static void copyFile(File src, File dst, Integer port) throws IOException {\n    BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(src), \"UTF-8\"));\n    Writer out = new OutputStreamWriter(new FileOutputStream(dst), \"UTF-8\");\n\n    for (String line = in.readLine(); null != line; line = in.readLine()) {\n\n      if (null != port)\n        line = line.replace(\"TEST_PORT\", port.toString());\n      out.write(line);\n    }\n    in.close();\n    out.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"448a213c5dfd8b9baaf143dcbf9e633d8d7d1d5e":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9f6b79013f14f939d4bc18ac09c457d1d1796fd2":["2acf500f78aa12b92e371fd89c719291986b6b90"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["c26f00b574427b55127e869b935845554afde1fa","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2acf500f78aa12b92e371fd89c719291986b6b90":["c26f00b574427b55127e869b935845554afde1fa","448a213c5dfd8b9baaf143dcbf9e633d8d7d1d5e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9f6b79013f14f939d4bc18ac09c457d1d1796fd2"],"46d8ada1fff8d18cb197c38c7983225162599948":["c26f00b574427b55127e869b935845554afde1fa","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"448a213c5dfd8b9baaf143dcbf9e633d8d7d1d5e":["2acf500f78aa12b92e371fd89c719291986b6b90"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["448a213c5dfd8b9baaf143dcbf9e633d8d7d1d5e","fe33227f6805edab2036cbb80645cc4e2d1fa424","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"9f6b79013f14f939d4bc18ac09c457d1d1796fd2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"2acf500f78aa12b92e371fd89c719291986b6b90":["9f6b79013f14f939d4bc18ac09c457d1d1796fd2","fe33227f6805edab2036cbb80645cc4e2d1fa424","46d8ada1fff8d18cb197c38c7983225162599948"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}