{"path":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#TermRangeQuery(String,BytesRef,BytesRef,boolean,boolean).mjava","commits":[{"id":"3e492fb0f2bb0b4b47208286f9331ff55963c656","date":1298870150,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#TermRangeQuery(String,BytesRef,BytesRef,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#TermRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Constructs a query selecting all terms greater/equal than <code>lowerTerm</code>\n   * but less/equal than <code>upperTerm</code>. \n   * \n   * <p>\n   * If an endpoint is null, it is said \n   * to be \"open\". Either or both endpoints may be open.  Open endpoints may not \n   * be exclusive (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * \n   * @param field The field that holds both lower and upper terms.\n   * @param lowerTerm\n   *          The term text at the lower end of the range\n   * @param upperTerm\n   *          The term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is\n   *          included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is\n   *          included in the range.\n   */\n  public TermRangeQuery(String field, BytesRef lowerTerm, BytesRef upperTerm, boolean includeLower, boolean includeUpper) {\n    super(field);\n    this.lowerTerm = lowerTerm;\n    this.upperTerm = upperTerm;\n    this.includeLower = includeLower;\n    this.includeUpper = includeUpper;\n  }\n\n","sourceOld":"  /**\n   * Constructs a query selecting all terms greater/equal than <code>lowerTerm</code>\n   * but less/equal than <code>upperTerm</code>. \n   * \n   * <p>\n   * If an endpoint is null, it is said \n   * to be \"open\". Either or both endpoints may be open.  Open endpoints may not \n   * be exclusive (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * \n   * @param field The field that holds both lower and upper terms.\n   * @param lowerTerm\n   *          The term text at the lower end of the range\n   * @param upperTerm\n   *          The term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is\n   *          included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is\n   *          included in the range.\n   */\n  public TermRangeQuery(String field, String lowerTerm, String upperTerm, boolean includeLower, boolean includeUpper) {\n    this(field, lowerTerm, upperTerm, includeLower, includeUpper, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#TermRangeQuery(String,BytesRef,BytesRef,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Constructs a query selecting all terms greater/equal than <code>lowerTerm</code>\n   * but less/equal than <code>upperTerm</code>. \n   * \n   * <p>\n   * If an endpoint is null, it is said \n   * to be \"open\". Either or both endpoints may be open.  Open endpoints may not \n   * be exclusive (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * \n   * @param field The field that holds both lower and upper terms.\n   * @param lowerTerm\n   *          The term text at the lower end of the range\n   * @param upperTerm\n   *          The term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is\n   *          included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is\n   *          included in the range.\n   */\n  public TermRangeQuery(String field, BytesRef lowerTerm, BytesRef upperTerm, boolean includeLower, boolean includeUpper) {\n    super(field);\n    this.lowerTerm = lowerTerm;\n    this.upperTerm = upperTerm;\n    this.includeLower = includeLower;\n    this.includeUpper = includeUpper;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#TermRangeQuery(String,BytesRef,BytesRef,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Constructs a query selecting all terms greater/equal than <code>lowerTerm</code>\n   * but less/equal than <code>upperTerm</code>. \n   * \n   * <p>\n   * If an endpoint is null, it is said \n   * to be \"open\". Either or both endpoints may be open.  Open endpoints may not \n   * be exclusive (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * \n   * @param field The field that holds both lower and upper terms.\n   * @param lowerTerm\n   *          The term text at the lower end of the range\n   * @param upperTerm\n   *          The term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is\n   *          included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is\n   *          included in the range.\n   */\n  public TermRangeQuery(String field, BytesRef lowerTerm, BytesRef upperTerm, boolean includeLower, boolean includeUpper) {\n    super(field);\n    this.lowerTerm = lowerTerm;\n    this.upperTerm = upperTerm;\n    this.includeLower = includeLower;\n    this.includeUpper = includeUpper;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermRangeQuery#TermRangeQuery(String,BytesRef,BytesRef,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#TermRangeQuery(String,BytesRef,BytesRef,boolean,boolean).mjava","sourceNew":"  /**\n   * Constructs a query selecting all terms greater/equal than <code>lowerTerm</code>\n   * but less/equal than <code>upperTerm</code>. \n   * \n   * <p>\n   * If an endpoint is null, it is said \n   * to be \"open\". Either or both endpoints may be open.  Open endpoints may not \n   * be exclusive (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * \n   * @param field The field that holds both lower and upper terms.\n   * @param lowerTerm\n   *          The term text at the lower end of the range\n   * @param upperTerm\n   *          The term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is\n   *          included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is\n   *          included in the range.\n   */\n  public TermRangeQuery(String field, BytesRef lowerTerm, BytesRef upperTerm, boolean includeLower, boolean includeUpper) {\n    super(field);\n    this.lowerTerm = lowerTerm;\n    this.upperTerm = upperTerm;\n    this.includeLower = includeLower;\n    this.includeUpper = includeUpper;\n  }\n\n","sourceOld":"  /**\n   * Constructs a query selecting all terms greater/equal than <code>lowerTerm</code>\n   * but less/equal than <code>upperTerm</code>. \n   * \n   * <p>\n   * If an endpoint is null, it is said \n   * to be \"open\". Either or both endpoints may be open.  Open endpoints may not \n   * be exclusive (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * \n   * @param field The field that holds both lower and upper terms.\n   * @param lowerTerm\n   *          The term text at the lower end of the range\n   * @param upperTerm\n   *          The term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is\n   *          included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is\n   *          included in the range.\n   */\n  public TermRangeQuery(String field, BytesRef lowerTerm, BytesRef upperTerm, boolean includeLower, boolean includeUpper) {\n    super(field);\n    this.lowerTerm = lowerTerm;\n    this.upperTerm = upperTerm;\n    this.includeLower = includeLower;\n    this.includeUpper = includeUpper;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3e492fb0f2bb0b4b47208286f9331ff55963c656"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}