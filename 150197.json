{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#encodedSize(PackedInts.Format,int,int).mjava","commits":[{"id":"c661dcad9680b8a6ce5bf2cc583a69ec965328bc","date":1352297862,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#encodedSize(PackedInts.Format,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#encodedSize(PackedInts.Format,int).mjava","sourceNew":"  /**\n   * Compute the number of bytes required to encode a block of values that require\n   * <code>bitsPerValue</code> bits per value with format <code>format</code>.\n   */\n  private static int encodedSize(PackedInts.Format format, int packedIntsVersion, int bitsPerValue) {\n    final long byteCount = format.byteCount(packedIntsVersion, BLOCK_SIZE, bitsPerValue);\n    assert byteCount >= 0 && byteCount <= Integer.MAX_VALUE : byteCount;\n    return (int) byteCount;\n  }\n\n","sourceOld":"  /**\n   * Compute the number of bytes required to encode a block of values that require\n   * <code>bitsPerValue</code> bits per value with format <code>format</code>.\n   */\n  private static int encodedSize(PackedInts.Format format, int bitsPerValue) {\n    return format.nblocks(bitsPerValue, BLOCK_SIZE) << 3;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":6,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/ForUtil#encodedSize(PackedInts.Format,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#encodedSize(PackedInts.Format,int,int).mjava","sourceNew":"  /**\n   * Compute the number of bytes required to encode a block of values that require\n   * <code>bitsPerValue</code> bits per value with format <code>format</code>.\n   */\n  private static int encodedSize(PackedInts.Format format, int packedIntsVersion, int bitsPerValue) {\n    final long byteCount = format.byteCount(packedIntsVersion, BLOCK_SIZE, bitsPerValue);\n    assert byteCount >= 0 && byteCount <= Integer.MAX_VALUE : byteCount;\n    return (int) byteCount;\n  }\n\n","sourceOld":"  /**\n   * Compute the number of bytes required to encode a block of values that require\n   * <code>bitsPerValue</code> bits per value with format <code>format</code>.\n   */\n  private static int encodedSize(PackedInts.Format format, int packedIntsVersion, int bitsPerValue) {\n    final long byteCount = format.byteCount(packedIntsVersion, BLOCK_SIZE, bitsPerValue);\n    assert byteCount >= 0 && byteCount <= Integer.MAX_VALUE : byteCount;\n    return (int) byteCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/ForUtil#encodedSize(PackedInts.Format,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#encodedSize(PackedInts.Format,int,int).mjava","sourceNew":"  /**\n   * Compute the number of bytes required to encode a block of values that require\n   * <code>bitsPerValue</code> bits per value with format <code>format</code>.\n   */\n  private static int encodedSize(PackedInts.Format format, int packedIntsVersion, int bitsPerValue) {\n    final long byteCount = format.byteCount(packedIntsVersion, BLOCK_SIZE, bitsPerValue);\n    assert byteCount >= 0 && byteCount <= Integer.MAX_VALUE : byteCount;\n    return (int) byteCount;\n  }\n\n","sourceOld":"  /**\n   * Compute the number of bytes required to encode a block of values that require\n   * <code>bitsPerValue</code> bits per value with format <code>format</code>.\n   */\n  private static int encodedSize(PackedInts.Format format, int packedIntsVersion, int bitsPerValue) {\n    final long byteCount = format.byteCount(packedIntsVersion, BLOCK_SIZE, bitsPerValue);\n    assert byteCount >= 0 && byteCount <= Integer.MAX_VALUE : byteCount;\n    return (int) byteCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":6,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/ForUtil#encodedSize(PackedInts.Format,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#encodedSize(PackedInts.Format,int,int).mjava","sourceNew":"  /**\n   * Compute the number of bytes required to encode a block of values that require\n   * <code>bitsPerValue</code> bits per value with format <code>format</code>.\n   */\n  private static int encodedSize(PackedInts.Format format, int packedIntsVersion, int bitsPerValue) {\n    final long byteCount = format.byteCount(packedIntsVersion, BLOCK_SIZE, bitsPerValue);\n    assert byteCount >= 0 && byteCount <= Integer.MAX_VALUE : byteCount;\n    return (int) byteCount;\n  }\n\n","sourceOld":"  /**\n   * Compute the number of bytes required to encode a block of values that require\n   * <code>bitsPerValue</code> bits per value with format <code>format</code>.\n   */\n  private static int encodedSize(PackedInts.Format format, int packedIntsVersion, int bitsPerValue) {\n    final long byteCount = format.byteCount(packedIntsVersion, BLOCK_SIZE, bitsPerValue);\n    assert byteCount >= 0 && byteCount <= Integer.MAX_VALUE : byteCount;\n    return (int) byteCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/ForUtil#encodedSize(PackedInts.Format,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#encodedSize(PackedInts.Format,int,int).mjava","sourceNew":"  /**\n   * Compute the number of bytes required to encode a block of values that require\n   * <code>bitsPerValue</code> bits per value with format <code>format</code>.\n   */\n  private static int encodedSize(PackedInts.Format format, int packedIntsVersion, int bitsPerValue) {\n    final long byteCount = format.byteCount(packedIntsVersion, BLOCK_SIZE, bitsPerValue);\n    assert byteCount >= 0 && byteCount <= Integer.MAX_VALUE : byteCount;\n    return (int) byteCount;\n  }\n\n","sourceOld":"  /**\n   * Compute the number of bytes required to encode a block of values that require\n   * <code>bitsPerValue</code> bits per value with format <code>format</code>.\n   */\n  private static int encodedSize(PackedInts.Format format, int packedIntsVersion, int bitsPerValue) {\n    final long byteCount = format.byteCount(packedIntsVersion, BLOCK_SIZE, bitsPerValue);\n    assert byteCount >= 0 && byteCount <= Integer.MAX_VALUE : byteCount;\n    return (int) byteCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"99eb4a732d1a908f4636ace52928876136bf1896":["c661dcad9680b8a6ce5bf2cc583a69ec965328bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c661dcad9680b8a6ce5bf2cc583a69ec965328bc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["c661dcad9680b8a6ce5bf2cc583a69ec965328bc","99eb4a732d1a908f4636ace52928876136bf1896"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"]},"commit2Childs":{"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c661dcad9680b8a6ce5bf2cc583a69ec965328bc"],"c661dcad9680b8a6ce5bf2cc583a69ec965328bc":["99eb4a732d1a908f4636ace52928876136bf1896","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}