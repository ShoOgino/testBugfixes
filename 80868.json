{"path":"lucene/src/test-framework/java/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStrings#RandomAcceptedStrings(Automaton).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStrings#RandomAcceptedStrings(Automaton).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStrings#RandomAcceptedStrings(Automaton).mjava","sourceNew":"    public RandomAcceptedStrings(Automaton a) {\n      this.a = a;\n      if (a.isSingleton()) {\n        leadsToAccept = null;\n        return;\n      }\n\n      // must use IdentityHashmap because two Transitions w/\n      // different start nodes can be considered the same\n      leadsToAccept = new IdentityHashMap<Transition,Boolean>();\n      final Map<State,List<ArrivingTransition>> allArriving = new HashMap<State,List<ArrivingTransition>>();\n\n      final LinkedList<State> q = new LinkedList<State>();\n      final Set<State> seen = new HashSet<State>();\n\n      // reverse map the transitions, so we can quickly look\n      // up all arriving transitions to a given state\n      for(State s: a.getNumberedStates()) {\n        for(int i=0;i<s.numTransitions;i++) {\n          final Transition t = s.transitionsArray[i];\n          List<ArrivingTransition> tl = allArriving.get(t.to);\n          if (tl == null) {\n            tl = new ArrayList<ArrivingTransition>();\n            allArriving.put(t.to, tl);\n          }\n          tl.add(new ArrivingTransition(s, t));\n        }\n        if (s.accept) {\n          q.add(s);\n          seen.add(s);\n        }\n      }\n\n      // Breadth-first search, from accept states,\n      // backwards:\n      while(!q.isEmpty()) {\n        final State s = q.removeFirst();\n        List<ArrivingTransition> arriving = allArriving.get(s);\n        if (arriving != null) {\n          for(ArrivingTransition at : arriving) {\n            final State from = at.from;\n            if (!seen.contains(from)) {\n              q.add(from);\n              seen.add(from);\n              leadsToAccept.put(at.t, Boolean.TRUE);\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public RandomAcceptedStrings(Automaton a) {\n      this.a = a;\n      if (a.isSingleton()) {\n        leadsToAccept = null;\n        return;\n      }\n\n      // must use IdentityHashmap because two Transitions w/\n      // different start nodes can be considered the same\n      leadsToAccept = new IdentityHashMap<Transition,Boolean>();\n      final Map<State,List<ArrivingTransition>> allArriving = new HashMap<State,List<ArrivingTransition>>();\n\n      final LinkedList<State> q = new LinkedList<State>();\n      final Set<State> seen = new HashSet<State>();\n\n      // reverse map the transitions, so we can quickly look\n      // up all arriving transitions to a given state\n      for(State s: a.getNumberedStates()) {\n        for(int i=0;i<s.numTransitions;i++) {\n          final Transition t = s.transitionsArray[i];\n          List<ArrivingTransition> tl = allArriving.get(t.to);\n          if (tl == null) {\n            tl = new ArrayList<ArrivingTransition>();\n            allArriving.put(t.to, tl);\n          }\n          tl.add(new ArrivingTransition(s, t));\n        }\n        if (s.accept) {\n          q.add(s);\n          seen.add(s);\n        }\n      }\n\n      // Breadth-first search, from accept states,\n      // backwards:\n      while(!q.isEmpty()) {\n        final State s = q.removeFirst();\n        List<ArrivingTransition> arriving = allArriving.get(s);\n        if (arriving != null) {\n          for(ArrivingTransition at : arriving) {\n            final State from = at.from;\n            if (!seen.contains(from)) {\n              q.add(from);\n              seen.add(from);\n              leadsToAccept.put(at.t, Boolean.TRUE);\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStrings#RandomAcceptedStrings(Automaton).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStrings#RandomAcceptedStrings(Automaton).mjava","sourceNew":"    public RandomAcceptedStrings(Automaton a) {\n      this.a = a;\n      if (a.isSingleton()) {\n        leadsToAccept = null;\n        return;\n      }\n\n      // must use IdentityHashmap because two Transitions w/\n      // different start nodes can be considered the same\n      leadsToAccept = new IdentityHashMap<Transition,Boolean>();\n      final Map<State,List<ArrivingTransition>> allArriving = new HashMap<State,List<ArrivingTransition>>();\n\n      final LinkedList<State> q = new LinkedList<State>();\n      final Set<State> seen = new HashSet<State>();\n\n      // reverse map the transitions, so we can quickly look\n      // up all arriving transitions to a given state\n      for(State s: a.getNumberedStates()) {\n        for(int i=0;i<s.numTransitions;i++) {\n          final Transition t = s.transitionsArray[i];\n          List<ArrivingTransition> tl = allArriving.get(t.to);\n          if (tl == null) {\n            tl = new ArrayList<ArrivingTransition>();\n            allArriving.put(t.to, tl);\n          }\n          tl.add(new ArrivingTransition(s, t));\n        }\n        if (s.accept) {\n          q.add(s);\n          seen.add(s);\n        }\n      }\n\n      // Breadth-first search, from accept states,\n      // backwards:\n      while(!q.isEmpty()) {\n        final State s = q.removeFirst();\n        List<ArrivingTransition> arriving = allArriving.get(s);\n        if (arriving != null) {\n          for(ArrivingTransition at : arriving) {\n            final State from = at.from;\n            if (!seen.contains(from)) {\n              q.add(from);\n              seen.add(from);\n              leadsToAccept.put(at.t, Boolean.TRUE);\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public RandomAcceptedStrings(Automaton a) {\n      this.a = a;\n      if (a.isSingleton()) {\n        leadsToAccept = null;\n        return;\n      }\n\n      // must use IdentityHashmap because two Transitions w/\n      // different start nodes can be considered the same\n      leadsToAccept = new IdentityHashMap<Transition,Boolean>();\n      final Map<State,List<ArrivingTransition>> allArriving = new HashMap<State,List<ArrivingTransition>>();\n\n      final LinkedList<State> q = new LinkedList<State>();\n      final Set<State> seen = new HashSet<State>();\n\n      // reverse map the transitions, so we can quickly look\n      // up all arriving transitions to a given state\n      for(State s: a.getNumberedStates()) {\n        for(int i=0;i<s.numTransitions;i++) {\n          final Transition t = s.transitionsArray[i];\n          List<ArrivingTransition> tl = allArriving.get(t.to);\n          if (tl == null) {\n            tl = new ArrayList<ArrivingTransition>();\n            allArriving.put(t.to, tl);\n          }\n          tl.add(new ArrivingTransition(s, t));\n        }\n        if (s.accept) {\n          q.add(s);\n          seen.add(s);\n        }\n      }\n\n      // Breadth-first search, from accept states,\n      // backwards:\n      while(!q.isEmpty()) {\n        final State s = q.removeFirst();\n        List<ArrivingTransition> arriving = allArriving.get(s);\n        if (arriving != null) {\n          for(ArrivingTransition at : arriving) {\n            final State from = at.from;\n            if (!seen.contains(from)) {\n              q.add(from);\n              seen.add(from);\n              leadsToAccept.put(at.t, Boolean.TRUE);\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7b91922b55d15444d554721b352861d028eb8278"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}