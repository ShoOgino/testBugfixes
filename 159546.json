{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#collect(List[Completion],int,int,BytesRef,Arc[Object]).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#collect(List[Completion],int,int,BytesRef,Arc[Object]).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#collect(List[Completion],int,int,BytesRef,Arc[Object]).mjava","sourceNew":"  /**\n   * Recursive collect lookup results from the automaton subgraph starting at\n   * <code>arc</code>.\n   * \n   * @param num\n   *          Maximum number of results needed (early termination).\n   */\n  private boolean collect(List<Completion> res, int num, int bucket,\n      BytesRef output, Arc<Object> arc) throws IOException {\n    if (output.length == output.bytes.length) {\n      output.bytes = ArrayUtil.grow(output.bytes);\n    }\n    assert output.offset == 0;\n    output.bytes[output.length++] = (byte) arc.label;\n    \n    automaton.readFirstTargetArc(arc, arc);\n    while (true) {\n      if (arc.label == FST.END_LABEL) {\n        res.add(new Completion(output, bucket));\n        if (res.size() >= num) return true;\n      } else {\n        int save = output.length;\n        if (collect(res, num, bucket, output, new Arc<Object>().copyFrom(arc))) {\n          return true;\n        }\n        output.length = save;\n      }\n      \n      if (arc.isLast()) {\n        break;\n      }\n      automaton.readNextArc(arc);\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Recursive collect lookup results from the automaton subgraph starting at\n   * <code>arc</code>.\n   * \n   * @param num\n   *          Maximum number of results needed (early termination).\n   */\n  private boolean collect(List<Completion> res, int num, int bucket,\n      BytesRef output, Arc<Object> arc) throws IOException {\n    if (output.length == output.bytes.length) {\n      output.bytes = ArrayUtil.grow(output.bytes);\n    }\n    assert output.offset == 0;\n    output.bytes[output.length++] = (byte) arc.label;\n    \n    automaton.readFirstTargetArc(arc, arc);\n    while (true) {\n      if (arc.label == FST.END_LABEL) {\n        res.add(new Completion(output, bucket));\n        if (res.size() >= num) return true;\n      } else {\n        int save = output.length;\n        if (collect(res, num, bucket, output, new Arc<Object>().copyFrom(arc))) {\n          return true;\n        }\n        output.length = save;\n      }\n      \n      if (arc.isLast()) {\n        break;\n      }\n      automaton.readNextArc(arc);\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b9fb5afeea0288262bffcc55bdcda8b5fa272c8","date":1339238489,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#collect(List[Completion],int,int,BytesRef,Arc[Object]).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#collect(List[Completion],int,int,BytesRef,Arc[Object]).mjava","sourceNew":"  /**\n   * Recursive collect lookup results from the automaton subgraph starting at\n   * <code>arc</code>.\n   * \n   * @param num\n   *          Maximum number of results needed (early termination).\n   */\n  private boolean collect(List<Completion> res, int num, int bucket,\n      BytesRef output, Arc<Object> arc) throws IOException {\n    if (output.length == output.bytes.length) {\n      output.bytes = ArrayUtil.grow(output.bytes);\n    }\n    assert output.offset == 0;\n    output.bytes[output.length++] = (byte) arc.label;\n    FST.BytesReader fstReader = automaton.getBytesReader(0);\n    automaton.readFirstTargetArc(arc, arc, fstReader);\n    while (true) {\n      if (arc.label == FST.END_LABEL) {\n        res.add(new Completion(output, bucket));\n        if (res.size() >= num) return true;\n      } else {\n        int save = output.length;\n        if (collect(res, num, bucket, output, new Arc<Object>().copyFrom(arc))) {\n          return true;\n        }\n        output.length = save;\n      }\n      \n      if (arc.isLast()) {\n        break;\n      }\n      automaton.readNextArc(arc, fstReader);\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Recursive collect lookup results from the automaton subgraph starting at\n   * <code>arc</code>.\n   * \n   * @param num\n   *          Maximum number of results needed (early termination).\n   */\n  private boolean collect(List<Completion> res, int num, int bucket,\n      BytesRef output, Arc<Object> arc) throws IOException {\n    if (output.length == output.bytes.length) {\n      output.bytes = ArrayUtil.grow(output.bytes);\n    }\n    assert output.offset == 0;\n    output.bytes[output.length++] = (byte) arc.label;\n    \n    automaton.readFirstTargetArc(arc, arc);\n    while (true) {\n      if (arc.label == FST.END_LABEL) {\n        res.add(new Completion(output, bucket));\n        if (res.size() >= num) return true;\n      } else {\n        int save = output.length;\n        if (collect(res, num, bucket, output, new Arc<Object>().copyFrom(arc))) {\n          return true;\n        }\n        output.length = save;\n      }\n      \n      if (arc.isLast()) {\n        break;\n      }\n      automaton.readNextArc(arc);\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82557a475db3e0849171dc0be5b02e3ae0745ddb","date":1358195918,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#collect(List[Completion],int,int,BytesRef,Arc[Object]).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#collect(List[Completion],int,int,BytesRef,Arc[Object]).mjava","sourceNew":"  /**\n   * Recursive collect lookup results from the automaton subgraph starting at\n   * <code>arc</code>.\n   * \n   * @param num\n   *          Maximum number of results needed (early termination).\n   */\n  private boolean collect(List<Completion> res, int num, int bucket,\n      BytesRef output, Arc<Object> arc) throws IOException {\n    if (output.length == output.bytes.length) {\n      output.bytes = ArrayUtil.grow(output.bytes);\n    }\n    assert output.offset == 0;\n    output.bytes[output.length++] = (byte) arc.label;\n    FST.BytesReader fstReader = automaton.getBytesReader();\n    automaton.readFirstTargetArc(arc, arc, fstReader);\n    while (true) {\n      if (arc.label == FST.END_LABEL) {\n        res.add(new Completion(output, bucket));\n        if (res.size() >= num) return true;\n      } else {\n        int save = output.length;\n        if (collect(res, num, bucket, output, new Arc<Object>().copyFrom(arc))) {\n          return true;\n        }\n        output.length = save;\n      }\n      \n      if (arc.isLast()) {\n        break;\n      }\n      automaton.readNextArc(arc, fstReader);\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Recursive collect lookup results from the automaton subgraph starting at\n   * <code>arc</code>.\n   * \n   * @param num\n   *          Maximum number of results needed (early termination).\n   */\n  private boolean collect(List<Completion> res, int num, int bucket,\n      BytesRef output, Arc<Object> arc) throws IOException {\n    if (output.length == output.bytes.length) {\n      output.bytes = ArrayUtil.grow(output.bytes);\n    }\n    assert output.offset == 0;\n    output.bytes[output.length++] = (byte) arc.label;\n    FST.BytesReader fstReader = automaton.getBytesReader(0);\n    automaton.readFirstTargetArc(arc, arc, fstReader);\n    while (true) {\n      if (arc.label == FST.END_LABEL) {\n        res.add(new Completion(output, bucket));\n        if (res.size() >= num) return true;\n      } else {\n        int save = output.length;\n        if (collect(res, num, bucket, output, new Arc<Object>().copyFrom(arc))) {\n          return true;\n        }\n        output.length = save;\n      }\n      \n      if (arc.isLast()) {\n        break;\n      }\n      automaton.readNextArc(arc, fstReader);\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#collect(List[Completion],int,int,BytesRef,Arc[Object]).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#collect(List[Completion],int,int,BytesRef,Arc[Object]).mjava","sourceNew":"  /**\n   * Recursive collect lookup results from the automaton subgraph starting at\n   * <code>arc</code>.\n   * \n   * @param num\n   *          Maximum number of results needed (early termination).\n   */\n  private boolean collect(List<Completion> res, int num, int bucket,\n      BytesRef output, Arc<Object> arc) throws IOException {\n    if (output.length == output.bytes.length) {\n      output.bytes = ArrayUtil.grow(output.bytes);\n    }\n    assert output.offset == 0;\n    output.bytes[output.length++] = (byte) arc.label;\n    FST.BytesReader fstReader = automaton.getBytesReader();\n    automaton.readFirstTargetArc(arc, arc, fstReader);\n    while (true) {\n      if (arc.label == FST.END_LABEL) {\n        res.add(new Completion(output, bucket));\n        if (res.size() >= num) return true;\n      } else {\n        int save = output.length;\n        if (collect(res, num, bucket, output, new Arc<Object>().copyFrom(arc))) {\n          return true;\n        }\n        output.length = save;\n      }\n      \n      if (arc.isLast()) {\n        break;\n      }\n      automaton.readNextArc(arc, fstReader);\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Recursive collect lookup results from the automaton subgraph starting at\n   * <code>arc</code>.\n   * \n   * @param num\n   *          Maximum number of results needed (early termination).\n   */\n  private boolean collect(List<Completion> res, int num, int bucket,\n      BytesRef output, Arc<Object> arc) throws IOException {\n    if (output.length == output.bytes.length) {\n      output.bytes = ArrayUtil.grow(output.bytes);\n    }\n    assert output.offset == 0;\n    output.bytes[output.length++] = (byte) arc.label;\n    FST.BytesReader fstReader = automaton.getBytesReader(0);\n    automaton.readFirstTargetArc(arc, arc, fstReader);\n    while (true) {\n      if (arc.label == FST.END_LABEL) {\n        res.add(new Completion(output, bucket));\n        if (res.size() >= num) return true;\n      } else {\n        int save = output.length;\n        if (collect(res, num, bucket, output, new Arc<Object>().copyFrom(arc))) {\n          return true;\n        }\n        output.length = save;\n      }\n      \n      if (arc.isLast()) {\n        break;\n      }\n      automaton.readNextArc(arc, fstReader);\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#collect(List[Completion],int,int,BytesRef,Arc[Object]).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#collect(List[Completion],int,int,BytesRef,Arc[Object]).mjava","sourceNew":"  /**\n   * Recursive collect lookup results from the automaton subgraph starting at\n   * <code>arc</code>.\n   * \n   * @param num\n   *          Maximum number of results needed (early termination).\n   */\n  private boolean collect(List<Completion> res, int num, int bucket,\n      BytesRef output, Arc<Object> arc) throws IOException {\n    if (output.length == output.bytes.length) {\n      output.bytes = ArrayUtil.grow(output.bytes);\n    }\n    assert output.offset == 0;\n    output.bytes[output.length++] = (byte) arc.label;\n    FST.BytesReader fstReader = automaton.getBytesReader();\n    automaton.readFirstTargetArc(arc, arc, fstReader);\n    while (true) {\n      if (arc.label == FST.END_LABEL) {\n        res.add(new Completion(output, bucket));\n        if (res.size() >= num) return true;\n      } else {\n        int save = output.length;\n        if (collect(res, num, bucket, output, new Arc<>().copyFrom(arc))) {\n          return true;\n        }\n        output.length = save;\n      }\n      \n      if (arc.isLast()) {\n        break;\n      }\n      automaton.readNextArc(arc, fstReader);\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Recursive collect lookup results from the automaton subgraph starting at\n   * <code>arc</code>.\n   * \n   * @param num\n   *          Maximum number of results needed (early termination).\n   */\n  private boolean collect(List<Completion> res, int num, int bucket,\n      BytesRef output, Arc<Object> arc) throws IOException {\n    if (output.length == output.bytes.length) {\n      output.bytes = ArrayUtil.grow(output.bytes);\n    }\n    assert output.offset == 0;\n    output.bytes[output.length++] = (byte) arc.label;\n    FST.BytesReader fstReader = automaton.getBytesReader();\n    automaton.readFirstTargetArc(arc, arc, fstReader);\n    while (true) {\n      if (arc.label == FST.END_LABEL) {\n        res.add(new Completion(output, bucket));\n        if (res.size() >= num) return true;\n      } else {\n        int save = output.length;\n        if (collect(res, num, bucket, output, new Arc<Object>().copyFrom(arc))) {\n          return true;\n        }\n        output.length = save;\n      }\n      \n      if (arc.isLast()) {\n        break;\n      }\n      automaton.readNextArc(arc, fstReader);\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54204c8a3ca26aeafd273139fc29baf70d0f6786","date":1564170395,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#collect(List[Completion],int,int,BytesRef,Arc[Object]).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#collect(List[Completion],int,int,BytesRef,Arc[Object]).mjava","sourceNew":"  /**\n   * Recursive collect lookup results from the automaton subgraph starting at\n   * <code>arc</code>.\n   * \n   * @param num\n   *          Maximum number of results needed (early termination).\n   */\n  private boolean collect(List<Completion> res, int num, int bucket,\n      BytesRef output, Arc<Object> arc) throws IOException {\n    if (output.length == output.bytes.length) {\n      output.bytes = ArrayUtil.grow(output.bytes);\n    }\n    assert output.offset == 0;\n    output.bytes[output.length++] = (byte) arc.label();\n    FST.BytesReader fstReader = automaton.getBytesReader();\n    automaton.readFirstTargetArc(arc, arc, fstReader);\n    while (true) {\n      if (arc.label() == FST.END_LABEL) {\n        res.add(new Completion(output, bucket));\n        if (res.size() >= num) return true;\n      } else {\n        int save = output.length;\n        if (collect(res, num, bucket, output, new Arc<>().copyFrom(arc))) {\n          return true;\n        }\n        output.length = save;\n      }\n      \n      if (arc.isLast()) {\n        break;\n      }\n      automaton.readNextArc(arc, fstReader);\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Recursive collect lookup results from the automaton subgraph starting at\n   * <code>arc</code>.\n   * \n   * @param num\n   *          Maximum number of results needed (early termination).\n   */\n  private boolean collect(List<Completion> res, int num, int bucket,\n      BytesRef output, Arc<Object> arc) throws IOException {\n    if (output.length == output.bytes.length) {\n      output.bytes = ArrayUtil.grow(output.bytes);\n    }\n    assert output.offset == 0;\n    output.bytes[output.length++] = (byte) arc.label;\n    FST.BytesReader fstReader = automaton.getBytesReader();\n    automaton.readFirstTargetArc(arc, arc, fstReader);\n    while (true) {\n      if (arc.label == FST.END_LABEL) {\n        res.add(new Completion(output, bucket));\n        if (res.size() >= num) return true;\n      } else {\n        int save = output.length;\n        if (collect(res, num, bucket, output, new Arc<>().copyFrom(arc))) {\n          return true;\n        }\n        output.length = save;\n      }\n      \n      if (arc.isLast()) {\n        break;\n      }\n      automaton.readNextArc(arc, fstReader);\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#collect(List[Completion],int,int,BytesRef,Arc[Object]).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#collect(List[Completion],int,int,BytesRef,Arc[Object]).mjava","sourceNew":"  /**\n   * Recursive collect lookup results from the automaton subgraph starting at\n   * <code>arc</code>.\n   * \n   * @param num\n   *          Maximum number of results needed (early termination).\n   */\n  private boolean collect(List<Completion> res, int num, int bucket,\n      BytesRef output, Arc<Object> arc) throws IOException {\n    if (output.length == output.bytes.length) {\n      output.bytes = ArrayUtil.grow(output.bytes);\n    }\n    assert output.offset == 0;\n    output.bytes[output.length++] = (byte) arc.label();\n    FST.BytesReader fstReader = automaton.getBytesReader();\n    automaton.readFirstTargetArc(arc, arc, fstReader);\n    while (true) {\n      if (arc.label() == FST.END_LABEL) {\n        res.add(new Completion(output, bucket));\n        if (res.size() >= num) return true;\n      } else {\n        int save = output.length;\n        if (collect(res, num, bucket, output, new Arc<>().copyFrom(arc))) {\n          return true;\n        }\n        output.length = save;\n      }\n      \n      if (arc.isLast()) {\n        break;\n      }\n      automaton.readNextArc(arc, fstReader);\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Recursive collect lookup results from the automaton subgraph starting at\n   * <code>arc</code>.\n   * \n   * @param num\n   *          Maximum number of results needed (early termination).\n   */\n  private boolean collect(List<Completion> res, int num, int bucket,\n      BytesRef output, Arc<Object> arc) throws IOException {\n    if (output.length == output.bytes.length) {\n      output.bytes = ArrayUtil.grow(output.bytes);\n    }\n    assert output.offset == 0;\n    output.bytes[output.length++] = (byte) arc.label;\n    FST.BytesReader fstReader = automaton.getBytesReader();\n    automaton.readFirstTargetArc(arc, arc, fstReader);\n    while (true) {\n      if (arc.label == FST.END_LABEL) {\n        res.add(new Completion(output, bucket));\n        if (res.size() >= num) return true;\n      } else {\n        int save = output.length;\n        if (collect(res, num, bucket, output, new Arc<>().copyFrom(arc))) {\n          return true;\n        }\n        output.length = save;\n      }\n      \n      if (arc.isLast()) {\n        break;\n      }\n      automaton.readNextArc(arc, fstReader);\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["82557a475db3e0849171dc0be5b02e3ae0745ddb"],"82557a475db3e0849171dc0be5b02e3ae0745ddb":["8b9fb5afeea0288262bffcc55bdcda8b5fa272c8"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8b9fb5afeea0288262bffcc55bdcda8b5fa272c8":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["8b9fb5afeea0288262bffcc55bdcda8b5fa272c8","82557a475db3e0849171dc0be5b02e3ae0745ddb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8061ddd97f3352007d927dae445884a6f3d857b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","54204c8a3ca26aeafd273139fc29baf70d0f6786"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["54204c8a3ca26aeafd273139fc29baf70d0f6786"]},"commit2Childs":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["54204c8a3ca26aeafd273139fc29baf70d0f6786","f8061ddd97f3352007d927dae445884a6f3d857b"],"82557a475db3e0849171dc0be5b02e3ae0745ddb":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","c4015cd39dff8d4dec562d909f9766debac53aa6"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["8b9fb5afeea0288262bffcc55bdcda8b5fa272c8"],"8b9fb5afeea0288262bffcc55bdcda8b5fa272c8":["82557a475db3e0849171dc0be5b02e3ae0745ddb","c4015cd39dff8d4dec562d909f9766debac53aa6"],"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}