{"path":"lucene/src/java/org/apache/lucene/search/TermScorer#advance(int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermScorer#advance(int).mjava","pathOld":"src/java/org/apache/lucene/search/TermScorer#advance(int).mjava","sourceNew":"  /**\n   * Advances to the first match beyond the current whose document number is\n   * greater than or equal to a given target. <br>\n   * The implementation uses {@link TermDocs#skipTo(int)}.\n   * \n   * @param target\n   *          The target document number.\n   * @return the matching document or -1 if none exist.\n   */\n  @Override\n  public int advance(int target) throws IOException {\n    // first scan in cache\n    for (pointer++; pointer < pointerMax; pointer++) {\n      if (docs[pointer] >= target) {\n        return doc = docs[pointer];\n      }\n    }\n\n    // not found in cache, seek underlying stream\n    boolean result = termDocs.skipTo(target);\n    if (result) {\n      pointerMax = 1;\n      pointer = 0;\n      docs[pointer] = doc = termDocs.doc();\n      freqs[pointer] = termDocs.freq();\n    } else {\n      doc = NO_MORE_DOCS;\n    }\n    return doc;\n  }\n\n","sourceOld":"  /**\n   * Advances to the first match beyond the current whose document number is\n   * greater than or equal to a given target. <br>\n   * The implementation uses {@link TermDocs#skipTo(int)}.\n   * \n   * @param target\n   *          The target document number.\n   * @return the matching document or -1 if none exist.\n   */\n  @Override\n  public int advance(int target) throws IOException {\n    // first scan in cache\n    for (pointer++; pointer < pointerMax; pointer++) {\n      if (docs[pointer] >= target) {\n        return doc = docs[pointer];\n      }\n    }\n\n    // not found in cache, seek underlying stream\n    boolean result = termDocs.skipTo(target);\n    if (result) {\n      pointerMax = 1;\n      pointer = 0;\n      docs[pointer] = doc = termDocs.doc();\n      freqs[pointer] = termDocs.freq();\n    } else {\n      doc = NO_MORE_DOCS;\n    }\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermScorer#advance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermScorer#advance(int).mjava","sourceNew":"  /**\n   * Advances to the first match beyond the current whose document number is\n   * greater than or equal to a given target. <br>\n   * The implementation uses {@link DocsEnum#advance(int)}.\n   * \n   * @param target\n   *          The target document number.\n   * @return the matching document or NO_MORE_DOCS if none exist.\n   */\n  @Override\n  public int advance(int target) throws IOException {\n    // first scan in cache\n    for (pointer++; pointer < pointerMax; pointer++) {\n      if (docs[pointer] >= target) {\n        freq = freqs[pointer];\n        return doc = docs[pointer];\n      }\n    }\n\n    // not found in readahead cache, seek underlying stream\n    int newDoc = docsEnum.advance(target);\n    //System.out.println(\"ts.advance docsEnum=\" + docsEnum);\n    if (newDoc != DocsEnum.NO_MORE_DOCS) {\n      doc = newDoc;\n      freq = docsEnum.freq();\n    } else {\n      doc = NO_MORE_DOCS;\n    }\n    return doc;\n  }\n\n","sourceOld":"  /**\n   * Advances to the first match beyond the current whose document number is\n   * greater than or equal to a given target. <br>\n   * The implementation uses {@link TermDocs#skipTo(int)}.\n   * \n   * @param target\n   *          The target document number.\n   * @return the matching document or -1 if none exist.\n   */\n  @Override\n  public int advance(int target) throws IOException {\n    // first scan in cache\n    for (pointer++; pointer < pointerMax; pointer++) {\n      if (docs[pointer] >= target) {\n        return doc = docs[pointer];\n      }\n    }\n\n    // not found in cache, seek underlying stream\n    boolean result = termDocs.skipTo(target);\n    if (result) {\n      pointerMax = 1;\n      pointer = 0;\n      docs[pointer] = doc = termDocs.doc();\n      freqs[pointer] = termDocs.freq();\n    } else {\n      doc = NO_MORE_DOCS;\n    }\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":["b43b719dab44d1ccc5ee5b6e01c50f1ee86bb76c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b43b719dab44d1ccc5ee5b6e01c50f1ee86bb76c","date":1270671893,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermScorer#advance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermScorer#advance(int).mjava","sourceNew":"  /**\n   * Advances to the first match beyond the current whose document number is\n   * greater than or equal to a given target. <br>\n   * The implementation uses {@link DocsEnum#advance(int)}.\n   * \n   * @param target\n   *          The target document number.\n   * @return the matching document or NO_MORE_DOCS if none exist.\n   */\n  @Override\n  public int advance(int target) throws IOException {\n    // first scan in cache\n    for (pointer++; pointer < pointerMax; pointer++) {\n      if (docs[pointer] >= target) {\n        freq = freqs[pointer];\n        return doc = docs[pointer];\n      }\n    }\n\n    // not found in readahead cache, seek underlying stream\n    int newDoc = docsEnum.advance(target);\n    //System.out.println(\"ts.advance docsEnum=\" + docsEnum);\n    if (newDoc != NO_MORE_DOCS) {\n      doc = newDoc;\n      freq = docsEnum.freq();\n    } else {\n      doc = NO_MORE_DOCS;\n    }\n    return doc;\n  }\n\n","sourceOld":"  /**\n   * Advances to the first match beyond the current whose document number is\n   * greater than or equal to a given target. <br>\n   * The implementation uses {@link DocsEnum#advance(int)}.\n   * \n   * @param target\n   *          The target document number.\n   * @return the matching document or NO_MORE_DOCS if none exist.\n   */\n  @Override\n  public int advance(int target) throws IOException {\n    // first scan in cache\n    for (pointer++; pointer < pointerMax; pointer++) {\n      if (docs[pointer] >= target) {\n        freq = freqs[pointer];\n        return doc = docs[pointer];\n      }\n    }\n\n    // not found in readahead cache, seek underlying stream\n    int newDoc = docsEnum.advance(target);\n    //System.out.println(\"ts.advance docsEnum=\" + docsEnum);\n    if (newDoc != DocsEnum.NO_MORE_DOCS) {\n      doc = newDoc;\n      freq = docsEnum.freq();\n    } else {\n      doc = NO_MORE_DOCS;\n    }\n    return doc;\n  }\n\n","bugFix":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0445bcd8433e331f296f5502fc089b336cbac3a6","date":1322630375,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermScorer#advance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermScorer#advance(int).mjava","sourceNew":"  /**\n   * Advances to the first match beyond the current whose document number is\n   * greater than or equal to a given target. <br>\n   * The implementation uses {@link DocsEnum#advance(int)}.\n   * \n   * @param target\n   *          The target document number.\n   * @return the matching document or NO_MORE_DOCS if none exist.\n   */\n  @Override\n  public int advance(int target) throws IOException {\n    return docsEnum.advance(target);\n  }\n\n","sourceOld":"  /**\n   * Advances to the first match beyond the current whose document number is\n   * greater than or equal to a given target. <br>\n   * The implementation uses {@link DocsEnum#advance(int)}.\n   * \n   * @param target\n   *          The target document number.\n   * @return the matching document or NO_MORE_DOCS if none exist.\n   */\n  @Override\n  public int advance(int target) throws IOException {\n    // first scan in cache\n    for (pointer++; pointer < pointerMax; pointer++) {\n      if (docs[pointer] >= target) {\n        freq = freqs[pointer];\n        return doc = docs[pointer];\n      }\n    }\n\n    // not found in readahead cache, seek underlying stream\n    int newDoc = docsEnum.advance(target);\n    //System.out.println(\"ts.advance docsEnum=\" + docsEnum);\n    if (newDoc != NO_MORE_DOCS) {\n      doc = newDoc;\n      freq = docsEnum.freq();\n    } else {\n      doc = NO_MORE_DOCS;\n    }\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermScorer#advance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermScorer#advance(int).mjava","sourceNew":"  /**\n   * Advances to the first match beyond the current whose document number is\n   * greater than or equal to a given target. <br>\n   * The implementation uses {@link DocsEnum#advance(int)}.\n   * \n   * @param target\n   *          The target document number.\n   * @return the matching document or NO_MORE_DOCS if none exist.\n   */\n  @Override\n  public int advance(int target) throws IOException {\n    return docsEnum.advance(target);\n  }\n\n","sourceOld":"  /**\n   * Advances to the first match beyond the current whose document number is\n   * greater than or equal to a given target. <br>\n   * The implementation uses {@link DocsEnum#advance(int)}.\n   * \n   * @param target\n   *          The target document number.\n   * @return the matching document or NO_MORE_DOCS if none exist.\n   */\n  @Override\n  public int advance(int target) throws IOException {\n    return docsEnum.advance(target);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b43b719dab44d1ccc5ee5b6e01c50f1ee86bb76c":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"0445bcd8433e331f296f5502fc089b336cbac3a6":["b43b719dab44d1ccc5ee5b6e01c50f1ee86bb76c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0445bcd8433e331f296f5502fc089b336cbac3a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b43b719dab44d1ccc5ee5b6e01c50f1ee86bb76c":["0445bcd8433e331f296f5502fc089b336cbac3a6"],"0445bcd8433e331f296f5502fc089b336cbac3a6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["b43b719dab44d1ccc5ee5b6e01c50f1ee86bb76c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}