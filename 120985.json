{"path":"modules/facet/src/java/org/apache/lucene/facet/index/streaming/CountingListTokenizer#incrementToken().mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/index/streaming/CountingListTokenizer#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      if (this.categoryAttribute != null) {\n        OrdinalProperty ordinalProperty = (OrdinalProperty) this.categoryAttribute\n            .getProperty(OrdinalProperty.class);\n        if (ordinalProperty != null && legalCategory()) {\n          CategoryPath categoryPath = this.categoryAttribute\n              .getCategoryPath();\n          int ordinal = ordinalProperty.getOrdinal();\n          CategoryListPayloadStream payloadStream = getPayloadStream(\n              categoryPath, ordinal);\n          int partitionSize = indexingParams.getPartitionSize();\n          payloadStream.appendIntToStream(ordinal % partitionSize);\n        }\n      }\n      return true;\n    }\n    if (this.payloadStreamIterator == null) {\n      this.handleEndOfInput();\n      this.payloadStreamIterator = this.payloadStreamsByName.entrySet()\n          .iterator();\n    }\n    if (this.payloadStreamIterator.hasNext()) {\n      Entry<String, CategoryListPayloadStream> entry = this.payloadStreamIterator\n          .next();\n      String countingListName = entry.getKey();\n      int length = countingListName.length();\n      this.termAttribute.resizeBuffer(length);\n      countingListName.getChars(0, length, termAttribute.buffer(), 0);\n      this.termAttribute.setLength(length);\n      CategoryListPayloadStream payloadStream = entry.getValue();\n      payload.setData(payloadStream.convertStreamToByteArray());\n      this.payloadAttribute.setPayload(payload);\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/index/streaming/CountingListTokenizer#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      if (this.categoryAttribute != null) {\n        OrdinalProperty ordinalProperty = (OrdinalProperty) this.categoryAttribute\n            .getProperty(OrdinalProperty.class);\n        if (ordinalProperty != null && legalCategory()) {\n          CategoryPath categoryPath = this.categoryAttribute\n              .getCategoryPath();\n          int ordinal = ordinalProperty.getOrdinal();\n          CategoryListPayloadStream payloadStream = getPayloadStream(\n              categoryPath, ordinal);\n          int partitionSize = indexingParams.getPartitionSize();\n          payloadStream.appendIntToStream(ordinal % partitionSize);\n        }\n      }\n      return true;\n    }\n    if (this.payloadStreamIterator == null) {\n      this.handleEndOfInput();\n      this.payloadStreamIterator = this.payloadStreamsByName.entrySet()\n          .iterator();\n    }\n    if (this.payloadStreamIterator.hasNext()) {\n      Entry<String, CategoryListPayloadStream> entry = this.payloadStreamIterator\n          .next();\n      String countingListName = entry.getKey();\n      int length = countingListName.length();\n      this.termAttribute.resizeBuffer(length);\n      countingListName.getChars(0, length, termAttribute.buffer(), 0);\n      this.termAttribute.setLength(length);\n      CategoryListPayloadStream payloadStream = entry.getValue();\n      payload.setData(payloadStream.convertStreamToByteArray());\n      this.payloadAttribute.setPayload(payload);\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/index/streaming/CountingListTokenizer#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      if (this.categoryAttribute != null) {\n        OrdinalProperty ordinalProperty = (OrdinalProperty) this.categoryAttribute\n            .getProperty(OrdinalProperty.class);\n        if (ordinalProperty != null && legalCategory()) {\n          CategoryPath categoryPath = this.categoryAttribute\n              .getCategoryPath();\n          int ordinal = ordinalProperty.getOrdinal();\n          CategoryListPayloadStream payloadStream = getPayloadStream(\n              categoryPath, ordinal);\n          int partitionSize = indexingParams.getPartitionSize();\n          payloadStream.appendIntToStream(ordinal % partitionSize);\n        }\n      }\n      return true;\n    }\n    if (this.payloadStreamIterator == null) {\n      this.handleEndOfInput();\n      this.payloadStreamIterator = this.payloadStreamsByName.entrySet()\n          .iterator();\n    }\n    if (this.payloadStreamIterator.hasNext()) {\n      Entry<String, CategoryListPayloadStream> entry = this.payloadStreamIterator\n          .next();\n      String countingListName = entry.getKey();\n      int length = countingListName.length();\n      this.termAttribute.resizeBuffer(length);\n      countingListName.getChars(0, length, termAttribute.buffer(), 0);\n      this.termAttribute.setLength(length);\n      CategoryListPayloadStream payloadStream = entry.getValue();\n      payload.setData(payloadStream.convertStreamToByteArray());\n      this.payloadAttribute.setPayload(payload);\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/streaming/CountingListTokenizer#incrementToken().mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/index/streaming/CountingListTokenizer#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      if (this.categoryAttribute != null) {\n        OrdinalProperty ordinalProperty = (OrdinalProperty) this.categoryAttribute\n            .getProperty(OrdinalProperty.class);\n        if (ordinalProperty != null && legalCategory()) {\n          CategoryPath categoryPath = this.categoryAttribute\n              .getCategoryPath();\n          int ordinal = ordinalProperty.getOrdinal();\n          CategoryListPayloadStream payloadStream = getPayloadStream(\n              categoryPath, ordinal);\n          int partitionSize = indexingParams.getPartitionSize();\n          payloadStream.appendIntToStream(ordinal % partitionSize);\n        }\n      }\n      return true;\n    }\n    if (this.payloadStreamIterator == null) {\n      this.handleEndOfInput();\n      this.payloadStreamIterator = this.payloadStreamsByName.entrySet()\n          .iterator();\n    }\n    if (this.payloadStreamIterator.hasNext()) {\n      Entry<String, CategoryListPayloadStream> entry = this.payloadStreamIterator\n          .next();\n      String countingListName = entry.getKey();\n      int length = countingListName.length();\n      this.termAttribute.resizeBuffer(length);\n      countingListName.getChars(0, length, termAttribute.buffer(), 0);\n      this.termAttribute.setLength(length);\n      CategoryListPayloadStream payloadStream = entry.getValue();\n      payload.setData(payloadStream.convertStreamToByteArray());\n      this.payloadAttribute.setPayload(payload);\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      if (this.categoryAttribute != null) {\n        OrdinalProperty ordinalProperty = (OrdinalProperty) this.categoryAttribute\n            .getProperty(OrdinalProperty.class);\n        if (ordinalProperty != null && legalCategory()) {\n          CategoryPath categoryPath = this.categoryAttribute\n              .getCategoryPath();\n          int ordinal = ordinalProperty.getOrdinal();\n          CategoryListPayloadStream payloadStream = getPayloadStream(\n              categoryPath, ordinal);\n          int partitionSize = indexingParams.getPartitionSize();\n          payloadStream.appendIntToStream(ordinal % partitionSize);\n        }\n      }\n      return true;\n    }\n    if (this.payloadStreamIterator == null) {\n      this.handleEndOfInput();\n      this.payloadStreamIterator = this.payloadStreamsByName.entrySet()\n          .iterator();\n    }\n    if (this.payloadStreamIterator.hasNext()) {\n      Entry<String, CategoryListPayloadStream> entry = this.payloadStreamIterator\n          .next();\n      String countingListName = entry.getKey();\n      int length = countingListName.length();\n      this.termAttribute.resizeBuffer(length);\n      countingListName.getChars(0, length, termAttribute.buffer(), 0);\n      this.termAttribute.setLength(length);\n      CategoryListPayloadStream payloadStream = entry.getValue();\n      payload.setData(payloadStream.convertStreamToByteArray());\n      this.payloadAttribute.setPayload(payload);\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}