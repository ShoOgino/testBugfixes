{"path":"solr/src/java/org/apache/solr/handler/component/HttpShardHandler#submit(ShardRequest,String,ModifiableSolrParams).mjava","commits":[{"id":"828f199c76d70a5ea0ddc4d9605063f1d323a28d","date":1308738340,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/HttpShardHandler#submit(ShardRequest,String,ModifiableSolrParams).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/HttpCommComponent[SearchHandler]#submit(ShardRequest,String,ModifiableSolrParams).mjava","sourceNew":"  public void submit(final ShardRequest sreq, final String shard, final ModifiableSolrParams params) {\r\n    // do this outside of the callable for thread safety reasons\r\n    final List<String> urls = getURLs(shard);\r\n\r\n    Callable<ShardResponse> task = new Callable<ShardResponse>() {\r\n      public ShardResponse call() throws Exception {\r\n\r\n        ShardResponse srsp = new ShardResponse();\r\n        srsp.setShardRequest(sreq);\r\n        srsp.setShard(shard);\r\n        SimpleSolrResponse ssr = new SimpleSolrResponse();\r\n        srsp.setSolrResponse(ssr);\r\n        long startTime = System.currentTimeMillis();\r\n\r\n        try {\r\n          params.remove(CommonParams.WT); // use default (currently javabin)\r\n          params.remove(CommonParams.VERSION);\r\n\r\n          // SolrRequest req = new QueryRequest(SolrRequest.METHOD.POST, \"/select\");\r\n          // use generic request to avoid extra processing of queries\r\n          QueryRequest req = new QueryRequest(params);\r\n          req.setMethod(SolrRequest.METHOD.POST);\r\n\r\n          // no need to set the response parser as binary is the default\r\n          // req.setResponseParser(new BinaryResponseParser());\r\n\r\n          // if there are no shards available for a slice, urls.size()==0\r\n          if (urls.size()==0) {\r\n            // TODO: what's the right error code here? We should use the same thing when\r\n            // all of the servers for a shard are down.\r\n            throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"no servers hosting shard: \" + shard);\r\n          }\r\n\r\n          if (urls.size() <= 1) {\r\n            String url = urls.get(0);\r\n            srsp.setShardAddress(url);\r\n            SolrServer server = new CommonsHttpSolrServer(url, httpShardHandlerFactory.client);\r\n            ssr.nl = server.request(req);\r\n          } else {\r\n            LBHttpSolrServer.Rsp rsp = httpShardHandlerFactory.loadbalancer.request(new LBHttpSolrServer.Req(req, urls));\r\n            ssr.nl = rsp.getResponse();\r\n            srsp.setShardAddress(rsp.getServer());\r\n          }\r\n        } catch (Throwable th) {\r\n          srsp.setException(th);\r\n          if (th instanceof SolrException) {\r\n            srsp.setResponseCode(((SolrException)th).code());\r\n          } else {\r\n            srsp.setResponseCode(-1);\r\n          }\r\n        }\r\n\r\n        ssr.elapsedTime = System.currentTimeMillis() - startTime;\r\n\r\n        return srsp;\r\n      }\r\n    };\r\n\r\n    pending.add( completionService.submit(task) );\r\n  }\r\n\n","sourceOld":"  void submit(final ShardRequest sreq, final String shard, final ModifiableSolrParams params) {\n    // do this outside of the callable for thread safety reasons\n    final List<String> urls = getURLs(shard);\n\n    Callable<ShardResponse> task = new Callable<ShardResponse>() {\n      public ShardResponse call() throws Exception {\n\n        ShardResponse srsp = new ShardResponse();\n        srsp.setShardRequest(sreq);\n        srsp.setShard(shard);\n        SimpleSolrResponse ssr = new SimpleSolrResponse();\n        srsp.setSolrResponse(ssr);\n        long startTime = System.currentTimeMillis();\n\n        try {\n          params.remove(CommonParams.WT); // use default (currently javabin)\n          params.remove(CommonParams.VERSION);\n\n          // SolrRequest req = new QueryRequest(SolrRequest.METHOD.POST, \"/select\");\n          // use generic request to avoid extra processing of queries\n          QueryRequest req = new QueryRequest(params);\n          req.setMethod(SolrRequest.METHOD.POST);\n\n          // no need to set the response parser as binary is the default\n          // req.setResponseParser(new BinaryResponseParser());\n\n          // if there are no shards available for a slice, urls.size()==0\n          if (urls.size()==0) {\n            // TODO: what's the right error code here? We should use the same thing when\n            // all of the servers for a shard are down.\n            throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"no servers hosting shard: \" + shard);\n          }\n\n          if (urls.size() <= 1) {\n            String url = urls.get(0);\n            srsp.setShardAddress(url);\n            SolrServer server = new CommonsHttpSolrServer(url, client);\n            ssr.nl = server.request(req);\n          } else {\n            LBHttpSolrServer.Rsp rsp = loadbalancer.request(new LBHttpSolrServer.Req(req, urls));\n            ssr.nl = rsp.getResponse();\n            srsp.setShardAddress(rsp.getServer());\n          }\n        } catch (Throwable th) {\n          srsp.setException(th);\n          if (th instanceof SolrException) {\n            srsp.setResponseCode(((SolrException)th).code());\n          } else {\n            srsp.setResponseCode(-1);\n          }\n        }\n\n        ssr.elapsedTime = System.currentTimeMillis() - startTime;\n\n        return srsp;\n      }\n    };\n\n    pending.add( completionService.submit(task) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/HttpShardHandler#submit(ShardRequest,String,ModifiableSolrParams).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/HttpCommComponent[SearchHandler]#submit(ShardRequest,String,ModifiableSolrParams).mjava","sourceNew":"  public void submit(final ShardRequest sreq, final String shard, final ModifiableSolrParams params) {\r\n    // do this outside of the callable for thread safety reasons\r\n    final List<String> urls = getURLs(shard);\r\n\r\n    Callable<ShardResponse> task = new Callable<ShardResponse>() {\r\n      public ShardResponse call() throws Exception {\r\n\r\n        ShardResponse srsp = new ShardResponse();\r\n        srsp.setShardRequest(sreq);\r\n        srsp.setShard(shard);\r\n        SimpleSolrResponse ssr = new SimpleSolrResponse();\r\n        srsp.setSolrResponse(ssr);\r\n        long startTime = System.currentTimeMillis();\r\n\r\n        try {\r\n          params.remove(CommonParams.WT); // use default (currently javabin)\r\n          params.remove(CommonParams.VERSION);\r\n\r\n          // SolrRequest req = new QueryRequest(SolrRequest.METHOD.POST, \"/select\");\r\n          // use generic request to avoid extra processing of queries\r\n          QueryRequest req = new QueryRequest(params);\r\n          req.setMethod(SolrRequest.METHOD.POST);\r\n\r\n          // no need to set the response parser as binary is the default\r\n          // req.setResponseParser(new BinaryResponseParser());\r\n\r\n          // if there are no shards available for a slice, urls.size()==0\r\n          if (urls.size()==0) {\r\n            // TODO: what's the right error code here? We should use the same thing when\r\n            // all of the servers for a shard are down.\r\n            throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"no servers hosting shard: \" + shard);\r\n          }\r\n\r\n          if (urls.size() <= 1) {\r\n            String url = urls.get(0);\r\n            srsp.setShardAddress(url);\r\n            SolrServer server = new CommonsHttpSolrServer(url, httpShardHandlerFactory.client);\r\n            ssr.nl = server.request(req);\r\n          } else {\r\n            LBHttpSolrServer.Rsp rsp = httpShardHandlerFactory.loadbalancer.request(new LBHttpSolrServer.Req(req, urls));\r\n            ssr.nl = rsp.getResponse();\r\n            srsp.setShardAddress(rsp.getServer());\r\n          }\r\n        } catch (Throwable th) {\r\n          srsp.setException(th);\r\n          if (th instanceof SolrException) {\r\n            srsp.setResponseCode(((SolrException)th).code());\r\n          } else {\r\n            srsp.setResponseCode(-1);\r\n          }\r\n        }\r\n\r\n        ssr.elapsedTime = System.currentTimeMillis() - startTime;\r\n\r\n        return srsp;\r\n      }\r\n    };\r\n\r\n    pending.add( completionService.submit(task) );\r\n  }\r\n\n","sourceOld":"  void submit(final ShardRequest sreq, final String shard, final ModifiableSolrParams params) {\n    // do this outside of the callable for thread safety reasons\n    final List<String> urls = getURLs(shard);\n\n    Callable<ShardResponse> task = new Callable<ShardResponse>() {\n      public ShardResponse call() throws Exception {\n\n        ShardResponse srsp = new ShardResponse();\n        srsp.setShardRequest(sreq);\n        srsp.setShard(shard);\n        SimpleSolrResponse ssr = new SimpleSolrResponse();\n        srsp.setSolrResponse(ssr);\n        long startTime = System.currentTimeMillis();\n\n        try {\n          params.remove(CommonParams.WT); // use default (currently javabin)\n          params.remove(CommonParams.VERSION);\n\n          // SolrRequest req = new QueryRequest(SolrRequest.METHOD.POST, \"/select\");\n          // use generic request to avoid extra processing of queries\n          QueryRequest req = new QueryRequest(params);\n          req.setMethod(SolrRequest.METHOD.POST);\n\n          // no need to set the response parser as binary is the default\n          // req.setResponseParser(new BinaryResponseParser());\n\n          // if there are no shards available for a slice, urls.size()==0\n          if (urls.size()==0) {\n            // TODO: what's the right error code here? We should use the same thing when\n            // all of the servers for a shard are down.\n            throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"no servers hosting shard: \" + shard);\n          }\n\n          if (urls.size() <= 1) {\n            String url = urls.get(0);\n            srsp.setShardAddress(url);\n            SolrServer server = new CommonsHttpSolrServer(url, client);\n            ssr.nl = server.request(req);\n          } else {\n            LBHttpSolrServer.Rsp rsp = loadbalancer.request(new LBHttpSolrServer.Req(req, urls));\n            ssr.nl = rsp.getResponse();\n            srsp.setShardAddress(rsp.getServer());\n          }\n        } catch (Throwable th) {\n          srsp.setException(th);\n          if (th instanceof SolrException) {\n            srsp.setResponseCode(((SolrException)th).code());\n          } else {\n            srsp.setResponseCode(-1);\n          }\n        }\n\n        ssr.elapsedTime = System.currentTimeMillis() - startTime;\n\n        return srsp;\n      }\n    };\n\n    pending.add( completionService.submit(task) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/HttpShardHandler#submit(ShardRequest,String,ModifiableSolrParams).mjava","pathOld":"/dev/null","sourceNew":"  public void submit(final ShardRequest sreq, final String shard, final ModifiableSolrParams params) {\r\n    // do this outside of the callable for thread safety reasons\r\n    final List<String> urls = getURLs(shard);\r\n\r\n    Callable<ShardResponse> task = new Callable<ShardResponse>() {\r\n      public ShardResponse call() throws Exception {\r\n\r\n        ShardResponse srsp = new ShardResponse();\r\n        srsp.setShardRequest(sreq);\r\n        srsp.setShard(shard);\r\n        SimpleSolrResponse ssr = new SimpleSolrResponse();\r\n        srsp.setSolrResponse(ssr);\r\n        long startTime = System.currentTimeMillis();\r\n\r\n        try {\r\n          params.remove(CommonParams.WT); // use default (currently javabin)\r\n          params.remove(CommonParams.VERSION);\r\n\r\n          // SolrRequest req = new QueryRequest(SolrRequest.METHOD.POST, \"/select\");\r\n          // use generic request to avoid extra processing of queries\r\n          QueryRequest req = new QueryRequest(params);\r\n          req.setMethod(SolrRequest.METHOD.POST);\r\n\r\n          // no need to set the response parser as binary is the default\r\n          // req.setResponseParser(new BinaryResponseParser());\r\n\r\n          // if there are no shards available for a slice, urls.size()==0\r\n          if (urls.size()==0) {\r\n            // TODO: what's the right error code here? We should use the same thing when\r\n            // all of the servers for a shard are down.\r\n            throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"no servers hosting shard: \" + shard);\r\n          }\r\n\r\n          if (urls.size() <= 1) {\r\n            String url = urls.get(0);\r\n            srsp.setShardAddress(url);\r\n            SolrServer server = new CommonsHttpSolrServer(url, httpShardHandlerFactory.client);\r\n            ssr.nl = server.request(req);\r\n          } else {\r\n            LBHttpSolrServer.Rsp rsp = httpShardHandlerFactory.loadbalancer.request(new LBHttpSolrServer.Req(req, urls));\r\n            ssr.nl = rsp.getResponse();\r\n            srsp.setShardAddress(rsp.getServer());\r\n          }\r\n        } catch (Throwable th) {\r\n          srsp.setException(th);\r\n          if (th instanceof SolrException) {\r\n            srsp.setResponseCode(((SolrException)th).code());\r\n          } else {\r\n            srsp.setResponseCode(-1);\r\n          }\r\n        }\r\n\r\n        ssr.elapsedTime = System.currentTimeMillis() - startTime;\r\n\r\n        return srsp;\r\n      }\r\n    };\r\n\r\n    pending.add( completionService.submit(task) );\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#submit(ShardRequest,String,ModifiableSolrParams).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/HttpShardHandler#submit(ShardRequest,String,ModifiableSolrParams).mjava","sourceNew":"  public void submit(final ShardRequest sreq, final String shard, final ModifiableSolrParams params) {\r\n    // do this outside of the callable for thread safety reasons\r\n    final List<String> urls = getURLs(shard);\r\n\r\n    Callable<ShardResponse> task = new Callable<ShardResponse>() {\r\n      public ShardResponse call() throws Exception {\r\n\r\n        ShardResponse srsp = new ShardResponse();\r\n        srsp.setShardRequest(sreq);\r\n        srsp.setShard(shard);\r\n        SimpleSolrResponse ssr = new SimpleSolrResponse();\r\n        srsp.setSolrResponse(ssr);\r\n        long startTime = System.currentTimeMillis();\r\n\r\n        try {\r\n          params.remove(CommonParams.WT); // use default (currently javabin)\r\n          params.remove(CommonParams.VERSION);\r\n\r\n          // SolrRequest req = new QueryRequest(SolrRequest.METHOD.POST, \"/select\");\r\n          // use generic request to avoid extra processing of queries\r\n          QueryRequest req = new QueryRequest(params);\r\n          req.setMethod(SolrRequest.METHOD.POST);\r\n\r\n          // no need to set the response parser as binary is the default\r\n          // req.setResponseParser(new BinaryResponseParser());\r\n\r\n          // if there are no shards available for a slice, urls.size()==0\r\n          if (urls.size()==0) {\r\n            // TODO: what's the right error code here? We should use the same thing when\r\n            // all of the servers for a shard are down.\r\n            throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"no servers hosting shard: \" + shard);\r\n          }\r\n\r\n          if (urls.size() <= 1) {\r\n            String url = urls.get(0);\r\n            srsp.setShardAddress(url);\r\n            SolrServer server = new CommonsHttpSolrServer(url, httpShardHandlerFactory.client);\r\n            ssr.nl = server.request(req);\r\n          } else {\r\n            LBHttpSolrServer.Rsp rsp = httpShardHandlerFactory.loadbalancer.request(new LBHttpSolrServer.Req(req, urls));\r\n            ssr.nl = rsp.getResponse();\r\n            srsp.setShardAddress(rsp.getServer());\r\n          }\r\n        } catch (Throwable th) {\r\n          srsp.setException(th);\r\n          if (th instanceof SolrException) {\r\n            srsp.setResponseCode(((SolrException)th).code());\r\n          } else {\r\n            srsp.setResponseCode(-1);\r\n          }\r\n        }\r\n\r\n        ssr.elapsedTime = System.currentTimeMillis() - startTime;\r\n\r\n        return srsp;\r\n      }\r\n    };\r\n\r\n    pending.add( completionService.submit(task) );\r\n  }\r\n\n","sourceOld":"  public void submit(final ShardRequest sreq, final String shard, final ModifiableSolrParams params) {\r\n    // do this outside of the callable for thread safety reasons\r\n    final List<String> urls = getURLs(shard);\r\n\r\n    Callable<ShardResponse> task = new Callable<ShardResponse>() {\r\n      public ShardResponse call() throws Exception {\r\n\r\n        ShardResponse srsp = new ShardResponse();\r\n        srsp.setShardRequest(sreq);\r\n        srsp.setShard(shard);\r\n        SimpleSolrResponse ssr = new SimpleSolrResponse();\r\n        srsp.setSolrResponse(ssr);\r\n        long startTime = System.currentTimeMillis();\r\n\r\n        try {\r\n          params.remove(CommonParams.WT); // use default (currently javabin)\r\n          params.remove(CommonParams.VERSION);\r\n\r\n          // SolrRequest req = new QueryRequest(SolrRequest.METHOD.POST, \"/select\");\r\n          // use generic request to avoid extra processing of queries\r\n          QueryRequest req = new QueryRequest(params);\r\n          req.setMethod(SolrRequest.METHOD.POST);\r\n\r\n          // no need to set the response parser as binary is the default\r\n          // req.setResponseParser(new BinaryResponseParser());\r\n\r\n          // if there are no shards available for a slice, urls.size()==0\r\n          if (urls.size()==0) {\r\n            // TODO: what's the right error code here? We should use the same thing when\r\n            // all of the servers for a shard are down.\r\n            throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"no servers hosting shard: \" + shard);\r\n          }\r\n\r\n          if (urls.size() <= 1) {\r\n            String url = urls.get(0);\r\n            srsp.setShardAddress(url);\r\n            SolrServer server = new CommonsHttpSolrServer(url, httpShardHandlerFactory.client);\r\n            ssr.nl = server.request(req);\r\n          } else {\r\n            LBHttpSolrServer.Rsp rsp = httpShardHandlerFactory.loadbalancer.request(new LBHttpSolrServer.Req(req, urls));\r\n            ssr.nl = rsp.getResponse();\r\n            srsp.setShardAddress(rsp.getServer());\r\n          }\r\n        } catch (Throwable th) {\r\n          srsp.setException(th);\r\n          if (th instanceof SolrException) {\r\n            srsp.setResponseCode(((SolrException)th).code());\r\n          } else {\r\n            srsp.setResponseCode(-1);\r\n          }\r\n        }\r\n\r\n        ssr.elapsedTime = System.currentTimeMillis() - startTime;\r\n\r\n        return srsp;\r\n      }\r\n    };\r\n\r\n    pending.add( completionService.submit(task) );\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#submit(ShardRequest,String,ModifiableSolrParams).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/HttpShardHandler#submit(ShardRequest,String,ModifiableSolrParams).mjava","sourceNew":"  public void submit(final ShardRequest sreq, final String shard, final ModifiableSolrParams params) {\r\n    // do this outside of the callable for thread safety reasons\r\n    final List<String> urls = getURLs(shard);\r\n\r\n    Callable<ShardResponse> task = new Callable<ShardResponse>() {\r\n      public ShardResponse call() throws Exception {\r\n\r\n        ShardResponse srsp = new ShardResponse();\r\n        srsp.setShardRequest(sreq);\r\n        srsp.setShard(shard);\r\n        SimpleSolrResponse ssr = new SimpleSolrResponse();\r\n        srsp.setSolrResponse(ssr);\r\n        long startTime = System.currentTimeMillis();\r\n\r\n        try {\r\n          params.remove(CommonParams.WT); // use default (currently javabin)\r\n          params.remove(CommonParams.VERSION);\r\n\r\n          // SolrRequest req = new QueryRequest(SolrRequest.METHOD.POST, \"/select\");\r\n          // use generic request to avoid extra processing of queries\r\n          QueryRequest req = new QueryRequest(params);\r\n          req.setMethod(SolrRequest.METHOD.POST);\r\n\r\n          // no need to set the response parser as binary is the default\r\n          // req.setResponseParser(new BinaryResponseParser());\r\n\r\n          // if there are no shards available for a slice, urls.size()==0\r\n          if (urls.size()==0) {\r\n            // TODO: what's the right error code here? We should use the same thing when\r\n            // all of the servers for a shard are down.\r\n            throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"no servers hosting shard: \" + shard);\r\n          }\r\n\r\n          if (urls.size() <= 1) {\r\n            String url = urls.get(0);\r\n            srsp.setShardAddress(url);\r\n            SolrServer server = new CommonsHttpSolrServer(url, httpShardHandlerFactory.client);\r\n            ssr.nl = server.request(req);\r\n          } else {\r\n            LBHttpSolrServer.Rsp rsp = httpShardHandlerFactory.loadbalancer.request(new LBHttpSolrServer.Req(req, urls));\r\n            ssr.nl = rsp.getResponse();\r\n            srsp.setShardAddress(rsp.getServer());\r\n          }\r\n        } catch (Throwable th) {\r\n          srsp.setException(th);\r\n          if (th instanceof SolrException) {\r\n            srsp.setResponseCode(((SolrException)th).code());\r\n          } else {\r\n            srsp.setResponseCode(-1);\r\n          }\r\n        }\r\n\r\n        ssr.elapsedTime = System.currentTimeMillis() - startTime;\r\n\r\n        return srsp;\r\n      }\r\n    };\r\n\r\n    pending.add( completionService.submit(task) );\r\n  }\r\n\n","sourceOld":"  public void submit(final ShardRequest sreq, final String shard, final ModifiableSolrParams params) {\r\n    // do this outside of the callable for thread safety reasons\r\n    final List<String> urls = getURLs(shard);\r\n\r\n    Callable<ShardResponse> task = new Callable<ShardResponse>() {\r\n      public ShardResponse call() throws Exception {\r\n\r\n        ShardResponse srsp = new ShardResponse();\r\n        srsp.setShardRequest(sreq);\r\n        srsp.setShard(shard);\r\n        SimpleSolrResponse ssr = new SimpleSolrResponse();\r\n        srsp.setSolrResponse(ssr);\r\n        long startTime = System.currentTimeMillis();\r\n\r\n        try {\r\n          params.remove(CommonParams.WT); // use default (currently javabin)\r\n          params.remove(CommonParams.VERSION);\r\n\r\n          // SolrRequest req = new QueryRequest(SolrRequest.METHOD.POST, \"/select\");\r\n          // use generic request to avoid extra processing of queries\r\n          QueryRequest req = new QueryRequest(params);\r\n          req.setMethod(SolrRequest.METHOD.POST);\r\n\r\n          // no need to set the response parser as binary is the default\r\n          // req.setResponseParser(new BinaryResponseParser());\r\n\r\n          // if there are no shards available for a slice, urls.size()==0\r\n          if (urls.size()==0) {\r\n            // TODO: what's the right error code here? We should use the same thing when\r\n            // all of the servers for a shard are down.\r\n            throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"no servers hosting shard: \" + shard);\r\n          }\r\n\r\n          if (urls.size() <= 1) {\r\n            String url = urls.get(0);\r\n            srsp.setShardAddress(url);\r\n            SolrServer server = new CommonsHttpSolrServer(url, httpShardHandlerFactory.client);\r\n            ssr.nl = server.request(req);\r\n          } else {\r\n            LBHttpSolrServer.Rsp rsp = httpShardHandlerFactory.loadbalancer.request(new LBHttpSolrServer.Req(req, urls));\r\n            ssr.nl = rsp.getResponse();\r\n            srsp.setShardAddress(rsp.getServer());\r\n          }\r\n        } catch (Throwable th) {\r\n          srsp.setException(th);\r\n          if (th instanceof SolrException) {\r\n            srsp.setResponseCode(((SolrException)th).code());\r\n          } else {\r\n            srsp.setResponseCode(-1);\r\n          }\r\n        }\r\n\r\n        ssr.elapsedTime = System.currentTimeMillis() - startTime;\r\n\r\n        return srsp;\r\n      }\r\n    };\r\n\r\n    pending.add( completionService.submit(task) );\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#submit(ShardRequest,String,ModifiableSolrParams).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/HttpShardHandler#submit(ShardRequest,String,ModifiableSolrParams).mjava","sourceNew":"  public void submit(final ShardRequest sreq, final String shard, final ModifiableSolrParams params) {\r\n    // do this outside of the callable for thread safety reasons\r\n    final List<String> urls = getURLs(shard);\r\n\r\n    Callable<ShardResponse> task = new Callable<ShardResponse>() {\r\n      public ShardResponse call() throws Exception {\r\n\r\n        ShardResponse srsp = new ShardResponse();\r\n        srsp.setShardRequest(sreq);\r\n        srsp.setShard(shard);\r\n        SimpleSolrResponse ssr = new SimpleSolrResponse();\r\n        srsp.setSolrResponse(ssr);\r\n        long startTime = System.currentTimeMillis();\r\n\r\n        try {\r\n          params.remove(CommonParams.WT); // use default (currently javabin)\r\n          params.remove(CommonParams.VERSION);\r\n\r\n          // SolrRequest req = new QueryRequest(SolrRequest.METHOD.POST, \"/select\");\r\n          // use generic request to avoid extra processing of queries\r\n          QueryRequest req = new QueryRequest(params);\r\n          req.setMethod(SolrRequest.METHOD.POST);\r\n\r\n          // no need to set the response parser as binary is the default\r\n          // req.setResponseParser(new BinaryResponseParser());\r\n\r\n          // if there are no shards available for a slice, urls.size()==0\r\n          if (urls.size()==0) {\r\n            // TODO: what's the right error code here? We should use the same thing when\r\n            // all of the servers for a shard are down.\r\n            throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"no servers hosting shard: \" + shard);\r\n          }\r\n\r\n          if (urls.size() <= 1) {\r\n            String url = urls.get(0);\r\n            srsp.setShardAddress(url);\r\n            SolrServer server = new CommonsHttpSolrServer(url, httpShardHandlerFactory.client);\r\n            ssr.nl = server.request(req);\r\n          } else {\r\n            LBHttpSolrServer.Rsp rsp = httpShardHandlerFactory.loadbalancer.request(new LBHttpSolrServer.Req(req, urls));\r\n            ssr.nl = rsp.getResponse();\r\n            srsp.setShardAddress(rsp.getServer());\r\n          }\r\n        } catch (Throwable th) {\r\n          srsp.setException(th);\r\n          if (th instanceof SolrException) {\r\n            srsp.setResponseCode(((SolrException)th).code());\r\n          } else {\r\n            srsp.setResponseCode(-1);\r\n          }\r\n        }\r\n\r\n        ssr.elapsedTime = System.currentTimeMillis() - startTime;\r\n\r\n        return srsp;\r\n      }\r\n    };\r\n\r\n    pending.add( completionService.submit(task) );\r\n  }\r\n\n","sourceOld":"  public void submit(final ShardRequest sreq, final String shard, final ModifiableSolrParams params) {\r\n    // do this outside of the callable for thread safety reasons\r\n    final List<String> urls = getURLs(shard);\r\n\r\n    Callable<ShardResponse> task = new Callable<ShardResponse>() {\r\n      public ShardResponse call() throws Exception {\r\n\r\n        ShardResponse srsp = new ShardResponse();\r\n        srsp.setShardRequest(sreq);\r\n        srsp.setShard(shard);\r\n        SimpleSolrResponse ssr = new SimpleSolrResponse();\r\n        srsp.setSolrResponse(ssr);\r\n        long startTime = System.currentTimeMillis();\r\n\r\n        try {\r\n          params.remove(CommonParams.WT); // use default (currently javabin)\r\n          params.remove(CommonParams.VERSION);\r\n\r\n          // SolrRequest req = new QueryRequest(SolrRequest.METHOD.POST, \"/select\");\r\n          // use generic request to avoid extra processing of queries\r\n          QueryRequest req = new QueryRequest(params);\r\n          req.setMethod(SolrRequest.METHOD.POST);\r\n\r\n          // no need to set the response parser as binary is the default\r\n          // req.setResponseParser(new BinaryResponseParser());\r\n\r\n          // if there are no shards available for a slice, urls.size()==0\r\n          if (urls.size()==0) {\r\n            // TODO: what's the right error code here? We should use the same thing when\r\n            // all of the servers for a shard are down.\r\n            throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"no servers hosting shard: \" + shard);\r\n          }\r\n\r\n          if (urls.size() <= 1) {\r\n            String url = urls.get(0);\r\n            srsp.setShardAddress(url);\r\n            SolrServer server = new CommonsHttpSolrServer(url, httpShardHandlerFactory.client);\r\n            ssr.nl = server.request(req);\r\n          } else {\r\n            LBHttpSolrServer.Rsp rsp = httpShardHandlerFactory.loadbalancer.request(new LBHttpSolrServer.Req(req, urls));\r\n            ssr.nl = rsp.getResponse();\r\n            srsp.setShardAddress(rsp.getServer());\r\n          }\r\n        } catch (Throwable th) {\r\n          srsp.setException(th);\r\n          if (th instanceof SolrException) {\r\n            srsp.setResponseCode(((SolrException)th).code());\r\n          } else {\r\n            srsp.setResponseCode(-1);\r\n          }\r\n        }\r\n\r\n        ssr.elapsedTime = System.currentTimeMillis() - startTime;\r\n\r\n        return srsp;\r\n      }\r\n    };\r\n\r\n    pending.add( completionService.submit(task) );\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["2553b00f699380c64959ccb27991289aae87be2e"],"c26f00b574427b55127e869b935845554afde1fa":["828f199c76d70a5ea0ddc4d9605063f1d323a28d","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["828f199c76d70a5ea0ddc4d9605063f1d323a28d"],"2553b00f699380c64959ccb27991289aae87be2e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","828f199c76d70a5ea0ddc4d9605063f1d323a28d"],"828f199c76d70a5ea0ddc4d9605063f1d323a28d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","828f199c76d70a5ea0ddc4d9605063f1d323a28d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2553b00f699380c64959ccb27991289aae87be2e","828f199c76d70a5ea0ddc4d9605063f1d323a28d","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"2553b00f699380c64959ccb27991289aae87be2e":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"828f199c76d70a5ea0ddc4d9605063f1d323a28d":["c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}