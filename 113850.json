{"path":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","sourceNew":"  public void testTerms() throws IOException {\n    TermEnum terms = reader.terms();\n    assertTrue(terms != null);\n    while (terms.next() == true)\n    {\n      Term term = terms.term();\n      assertTrue(term != null);\n      //System.out.println(\"Term: \" + term);\n      String fieldValue = (String)DocHelper.nameValues.get(term.field());\n      assertTrue(fieldValue.indexOf(term.text()) != -1);\n    }\n    \n    TermDocs termDocs = reader.termDocs();\n    assertTrue(termDocs != null);\n    termDocs.seek(new Term(DocHelper.TEXT_FIELD_1_KEY, \"field\"));\n    assertTrue(termDocs.next() == true);\n\n    termDocs.seek(new Term(DocHelper.NO_NORMS_KEY,  DocHelper.NO_NORMS_TEXT));\n    assertTrue(termDocs.next() == true);\n\n    \n    TermPositions positions = reader.termPositions();\n    assertTrue(positions != null);\n    positions.seek(new Term(DocHelper.TEXT_FIELD_1_KEY, \"field\"));\n    assertTrue(positions.doc() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","sourceOld":"  public void testTerms() throws IOException {\n    TermEnum terms = reader.terms();\n    assertTrue(terms != null);\n    while (terms.next() == true)\n    {\n      Term term = terms.term();\n      assertTrue(term != null);\n      //System.out.println(\"Term: \" + term);\n      String fieldValue = (String)DocHelper.nameValues.get(term.field());\n      assertTrue(fieldValue.indexOf(term.text()) != -1);\n    }\n    \n    TermDocs termDocs = reader.termDocs();\n    assertTrue(termDocs != null);\n    termDocs.seek(new Term(DocHelper.TEXT_FIELD_1_KEY, \"field\"));\n    assertTrue(termDocs.next() == true);\n\n    termDocs.seek(new Term(DocHelper.NO_NORMS_KEY,  DocHelper.NO_NORMS_TEXT));\n    assertTrue(termDocs.next() == true);\n\n    \n    TermPositions positions = reader.termPositions();\n    assertTrue(positions != null);\n    positions.seek(new Term(DocHelper.TEXT_FIELD_1_KEY, \"field\"));\n    assertTrue(positions.doc() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","sourceNew":"  public void testTerms() throws IOException {\n    TermEnum terms = reader.terms();\n    assertTrue(terms != null);\n    while (terms.next() == true)\n    {\n      Term term = terms.term();\n      assertTrue(term != null);\n      //System.out.println(\"Term: \" + term);\n      String fieldValue = (String)DocHelper.nameValues.get(term.field());\n      assertTrue(fieldValue.indexOf(term.text()) != -1);\n    }\n    \n    TermDocs termDocs = reader.termDocs();\n    assertTrue(termDocs != null);\n    termDocs.seek(new Term(DocHelper.TEXT_FIELD_1_KEY, \"field\"));\n    assertTrue(termDocs.next() == true);\n\n    termDocs.seek(new Term(DocHelper.NO_NORMS_KEY,  DocHelper.NO_NORMS_TEXT));\n    assertTrue(termDocs.next() == true);\n\n    \n    TermPositions positions = reader.termPositions();\n    assertTrue(positions != null);\n    positions.seek(new Term(DocHelper.TEXT_FIELD_1_KEY, \"field\"));\n    // NOTE: prior rev of this test was failing to first\n    // call next here:\n    assertTrue(positions.next());\n    assertTrue(positions.doc() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","sourceOld":"  public void testTerms() throws IOException {\n    TermEnum terms = reader.terms();\n    assertTrue(terms != null);\n    while (terms.next() == true)\n    {\n      Term term = terms.term();\n      assertTrue(term != null);\n      //System.out.println(\"Term: \" + term);\n      String fieldValue = (String)DocHelper.nameValues.get(term.field());\n      assertTrue(fieldValue.indexOf(term.text()) != -1);\n    }\n    \n    TermDocs termDocs = reader.termDocs();\n    assertTrue(termDocs != null);\n    termDocs.seek(new Term(DocHelper.TEXT_FIELD_1_KEY, \"field\"));\n    assertTrue(termDocs.next() == true);\n\n    termDocs.seek(new Term(DocHelper.NO_NORMS_KEY,  DocHelper.NO_NORMS_TEXT));\n    assertTrue(termDocs.next() == true);\n\n    \n    TermPositions positions = reader.termPositions();\n    assertTrue(positions != null);\n    positions.seek(new Term(DocHelper.TEXT_FIELD_1_KEY, \"field\"));\n    assertTrue(positions.doc() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","sourceNew":"  public void testTerms() throws IOException {\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String field;\n    while((field = fields.next()) != null) {\n      TermsEnum terms = fields.terms();\n      while(terms.next() != null) {\n        BytesRef term = terms.term();\n        assertTrue(term != null);\n        String fieldValue = (String) DocHelper.nameValues.get(field);\n        assertTrue(fieldValue.indexOf(term.utf8ToString()) != -1);\n      }\n    }\n    \n    DocsEnum termDocs = MultiFields.getTermDocsEnum(reader,\n                                                    MultiFields.getDeletedDocs(reader),\n                                                    DocHelper.TEXT_FIELD_1_KEY,\n                                                    new BytesRef(\"field\"));\n    assertTrue(termDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n    termDocs = MultiFields.getTermDocsEnum(reader,\n                                           MultiFields.getDeletedDocs(reader),\n                                           DocHelper.NO_NORMS_KEY,\n                                           new BytesRef(DocHelper.NO_NORMS_TEXT));\n\n    assertTrue(termDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n    \n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader,\n                                                                      MultiFields.getDeletedDocs(reader),\n                                                                      DocHelper.TEXT_FIELD_1_KEY,\n                                                                      new BytesRef(\"field\"));\n    // NOTE: prior rev of this test was failing to first\n    // call next here:\n    assertTrue(positions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertTrue(positions.docID() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","sourceOld":"  public void testTerms() throws IOException {\n    TermEnum terms = reader.terms();\n    assertTrue(terms != null);\n    while (terms.next() == true)\n    {\n      Term term = terms.term();\n      assertTrue(term != null);\n      //System.out.println(\"Term: \" + term);\n      String fieldValue = (String)DocHelper.nameValues.get(term.field());\n      assertTrue(fieldValue.indexOf(term.text()) != -1);\n    }\n    \n    TermDocs termDocs = reader.termDocs();\n    assertTrue(termDocs != null);\n    termDocs.seek(new Term(DocHelper.TEXT_FIELD_1_KEY, \"field\"));\n    assertTrue(termDocs.next() == true);\n\n    termDocs.seek(new Term(DocHelper.NO_NORMS_KEY,  DocHelper.NO_NORMS_TEXT));\n    assertTrue(termDocs.next() == true);\n\n    \n    TermPositions positions = reader.termPositions();\n    assertTrue(positions != null);\n    positions.seek(new Term(DocHelper.TEXT_FIELD_1_KEY, \"field\"));\n    // NOTE: prior rev of this test was failing to first\n    // call next here:\n    assertTrue(positions.next());\n    assertTrue(positions.doc() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","sourceNew":"  public void testTerms() throws IOException {\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String field;\n    while((field = fields.next()) != null) {\n      TermsEnum terms = fields.terms();\n      while(terms.next() != null) {\n        BytesRef term = terms.term();\n        assertTrue(term != null);\n        String fieldValue = (String) DocHelper.nameValues.get(field);\n        assertTrue(fieldValue.indexOf(term.utf8ToString()) != -1);\n      }\n    }\n    \n    DocsEnum termDocs = MultiFields.getTermDocsEnum(reader,\n                                                    MultiFields.getDeletedDocs(reader),\n                                                    DocHelper.TEXT_FIELD_1_KEY,\n                                                    new BytesRef(\"field\"));\n    assertTrue(termDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n    termDocs = MultiFields.getTermDocsEnum(reader,\n                                           MultiFields.getDeletedDocs(reader),\n                                           DocHelper.NO_NORMS_KEY,\n                                           new BytesRef(DocHelper.NO_NORMS_TEXT));\n\n    assertTrue(termDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n    \n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader,\n                                                                      MultiFields.getDeletedDocs(reader),\n                                                                      DocHelper.TEXT_FIELD_1_KEY,\n                                                                      new BytesRef(\"field\"));\n    // NOTE: prior rev of this test was failing to first\n    // call next here:\n    assertTrue(positions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertTrue(positions.docID() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","sourceOld":"  public void testTerms() throws IOException {\n    TermEnum terms = reader.terms();\n    assertTrue(terms != null);\n    while (terms.next() == true)\n    {\n      Term term = terms.term();\n      assertTrue(term != null);\n      //System.out.println(\"Term: \" + term);\n      String fieldValue = (String)DocHelper.nameValues.get(term.field());\n      assertTrue(fieldValue.indexOf(term.text()) != -1);\n    }\n    \n    TermDocs termDocs = reader.termDocs();\n    assertTrue(termDocs != null);\n    termDocs.seek(new Term(DocHelper.TEXT_FIELD_1_KEY, \"field\"));\n    assertTrue(termDocs.next() == true);\n\n    termDocs.seek(new Term(DocHelper.NO_NORMS_KEY,  DocHelper.NO_NORMS_TEXT));\n    assertTrue(termDocs.next() == true);\n\n    \n    TermPositions positions = reader.termPositions();\n    assertTrue(positions != null);\n    positions.seek(new Term(DocHelper.TEXT_FIELD_1_KEY, \"field\"));\n    // NOTE: prior rev of this test was failing to first\n    // call next here:\n    assertTrue(positions.next());\n    assertTrue(positions.doc() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","sourceNew":"  public void testTerms() throws IOException {\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String field;\n    while((field = fields.next()) != null) {\n      TermsEnum terms = fields.terms();\n      while(terms.next() != null) {\n        BytesRef term = terms.term();\n        assertTrue(term != null);\n        String fieldValue = (String) DocHelper.nameValues.get(field);\n        assertTrue(fieldValue.indexOf(term.utf8ToString()) != -1);\n      }\n    }\n    \n    DocsEnum termDocs = MultiFields.getTermDocsEnum(reader,\n                                                    MultiFields.getLiveDocs(reader),\n                                                    DocHelper.TEXT_FIELD_1_KEY,\n                                                    new BytesRef(\"field\"));\n    assertTrue(termDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n    termDocs = MultiFields.getTermDocsEnum(reader,\n                                           MultiFields.getLiveDocs(reader),\n                                           DocHelper.NO_NORMS_KEY,\n                                           new BytesRef(DocHelper.NO_NORMS_TEXT));\n\n    assertTrue(termDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n    \n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader,\n                                                                      MultiFields.getLiveDocs(reader),\n                                                                      DocHelper.TEXT_FIELD_1_KEY,\n                                                                      new BytesRef(\"field\"));\n    // NOTE: prior rev of this test was failing to first\n    // call next here:\n    assertTrue(positions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertTrue(positions.docID() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","sourceOld":"  public void testTerms() throws IOException {\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String field;\n    while((field = fields.next()) != null) {\n      TermsEnum terms = fields.terms();\n      while(terms.next() != null) {\n        BytesRef term = terms.term();\n        assertTrue(term != null);\n        String fieldValue = (String) DocHelper.nameValues.get(field);\n        assertTrue(fieldValue.indexOf(term.utf8ToString()) != -1);\n      }\n    }\n    \n    DocsEnum termDocs = MultiFields.getTermDocsEnum(reader,\n                                                    MultiFields.getDeletedDocs(reader),\n                                                    DocHelper.TEXT_FIELD_1_KEY,\n                                                    new BytesRef(\"field\"));\n    assertTrue(termDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n    termDocs = MultiFields.getTermDocsEnum(reader,\n                                           MultiFields.getDeletedDocs(reader),\n                                           DocHelper.NO_NORMS_KEY,\n                                           new BytesRef(DocHelper.NO_NORMS_TEXT));\n\n    assertTrue(termDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n    \n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader,\n                                                                      MultiFields.getDeletedDocs(reader),\n                                                                      DocHelper.TEXT_FIELD_1_KEY,\n                                                                      new BytesRef(\"field\"));\n    // NOTE: prior rev of this test was failing to first\n    // call next here:\n    assertTrue(positions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertTrue(positions.docID() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","sourceNew":"  public void testTerms() throws IOException {\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String field;\n    while((field = fields.next()) != null) {\n      TermsEnum terms = fields.terms();\n      while(terms.next() != null) {\n        BytesRef term = terms.term();\n        assertTrue(term != null);\n        String fieldValue = (String) DocHelper.nameValues.get(field);\n        assertTrue(fieldValue.indexOf(term.utf8ToString()) != -1);\n      }\n    }\n    \n    DocsEnum termDocs = MultiFields.getTermDocsEnum(reader,\n                                                    MultiFields.getLiveDocs(reader),\n                                                    DocHelper.TEXT_FIELD_1_KEY,\n                                                    new BytesRef(\"field\"));\n    assertTrue(termDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n    termDocs = MultiFields.getTermDocsEnum(reader,\n                                           MultiFields.getLiveDocs(reader),\n                                           DocHelper.NO_NORMS_KEY,\n                                           new BytesRef(DocHelper.NO_NORMS_TEXT));\n\n    assertTrue(termDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n    \n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader,\n                                                                      MultiFields.getLiveDocs(reader),\n                                                                      DocHelper.TEXT_FIELD_1_KEY,\n                                                                      new BytesRef(\"field\"));\n    // NOTE: prior rev of this test was failing to first\n    // call next here:\n    assertTrue(positions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertTrue(positions.docID() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","sourceOld":"  public void testTerms() throws IOException {\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String field;\n    while((field = fields.next()) != null) {\n      TermsEnum terms = fields.terms();\n      while(terms.next() != null) {\n        BytesRef term = terms.term();\n        assertTrue(term != null);\n        String fieldValue = (String) DocHelper.nameValues.get(field);\n        assertTrue(fieldValue.indexOf(term.utf8ToString()) != -1);\n      }\n    }\n    \n    DocsEnum termDocs = MultiFields.getTermDocsEnum(reader,\n                                                    MultiFields.getDeletedDocs(reader),\n                                                    DocHelper.TEXT_FIELD_1_KEY,\n                                                    new BytesRef(\"field\"));\n    assertTrue(termDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n    termDocs = MultiFields.getTermDocsEnum(reader,\n                                           MultiFields.getDeletedDocs(reader),\n                                           DocHelper.NO_NORMS_KEY,\n                                           new BytesRef(DocHelper.NO_NORMS_TEXT));\n\n    assertTrue(termDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n    \n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader,\n                                                                      MultiFields.getDeletedDocs(reader),\n                                                                      DocHelper.TEXT_FIELD_1_KEY,\n                                                                      new BytesRef(\"field\"));\n    // NOTE: prior rev of this test was failing to first\n    // call next here:\n    assertTrue(positions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertTrue(positions.docID() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","sourceNew":"  public void testTerms() throws IOException {\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String field;\n    while((field = fields.next()) != null) {\n      TermsEnum terms = fields.terms();\n      while(terms.next() != null) {\n        BytesRef term = terms.term();\n        assertTrue(term != null);\n        String fieldValue = (String) DocHelper.nameValues.get(field);\n        assertTrue(fieldValue.indexOf(term.utf8ToString()) != -1);\n      }\n    }\n    \n    DocsEnum termDocs = MultiFields.getTermDocsEnum(reader,\n                                                    MultiFields.getLiveDocs(reader),\n                                                    DocHelper.TEXT_FIELD_1_KEY,\n                                                    new BytesRef(\"field\"));\n    assertTrue(termDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n    termDocs = MultiFields.getTermDocsEnum(reader,\n                                           MultiFields.getLiveDocs(reader),\n                                           DocHelper.NO_NORMS_KEY,\n                                           new BytesRef(DocHelper.NO_NORMS_TEXT));\n\n    assertTrue(termDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n    \n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader,\n                                                                      MultiFields.getLiveDocs(reader),\n                                                                      DocHelper.TEXT_FIELD_1_KEY,\n                                                                      new BytesRef(\"field\"));\n    // NOTE: prior rev of this test was failing to first\n    // call next here:\n    assertTrue(positions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertTrue(positions.docID() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","sourceOld":"  public void testTerms() throws IOException {\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String field;\n    while((field = fields.next()) != null) {\n      TermsEnum terms = fields.terms();\n      while(terms.next() != null) {\n        BytesRef term = terms.term();\n        assertTrue(term != null);\n        String fieldValue = (String) DocHelper.nameValues.get(field);\n        assertTrue(fieldValue.indexOf(term.utf8ToString()) != -1);\n      }\n    }\n    \n    DocsEnum termDocs = MultiFields.getTermDocsEnum(reader,\n                                                    MultiFields.getDeletedDocs(reader),\n                                                    DocHelper.TEXT_FIELD_1_KEY,\n                                                    new BytesRef(\"field\"));\n    assertTrue(termDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n    termDocs = MultiFields.getTermDocsEnum(reader,\n                                           MultiFields.getDeletedDocs(reader),\n                                           DocHelper.NO_NORMS_KEY,\n                                           new BytesRef(DocHelper.NO_NORMS_TEXT));\n\n    assertTrue(termDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n    \n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader,\n                                                                      MultiFields.getDeletedDocs(reader),\n                                                                      DocHelper.TEXT_FIELD_1_KEY,\n                                                                      new BytesRef(\"field\"));\n    // NOTE: prior rev of this test was failing to first\n    // call next here:\n    assertTrue(positions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertTrue(positions.docID() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","sourceNew":"  public void testTerms() throws IOException {\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String field;\n    while((field = fields.next()) != null) {\n      Terms terms = fields.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      while(termsEnum.next() != null) {\n        BytesRef term = termsEnum.term();\n        assertTrue(term != null);\n        String fieldValue = (String) DocHelper.nameValues.get(field);\n        assertTrue(fieldValue.indexOf(term.utf8ToString()) != -1);\n      }\n    }\n    \n    DocsEnum termDocs = MultiFields.getTermDocsEnum(reader,\n                                                    MultiFields.getLiveDocs(reader),\n                                                    DocHelper.TEXT_FIELD_1_KEY,\n                                                    new BytesRef(\"field\"));\n    assertTrue(termDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n    termDocs = MultiFields.getTermDocsEnum(reader,\n                                           MultiFields.getLiveDocs(reader),\n                                           DocHelper.NO_NORMS_KEY,\n                                           new BytesRef(DocHelper.NO_NORMS_TEXT));\n\n    assertTrue(termDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n    \n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader,\n                                                                      MultiFields.getLiveDocs(reader),\n                                                                      DocHelper.TEXT_FIELD_1_KEY,\n                                                                      new BytesRef(\"field\"));\n    // NOTE: prior rev of this test was failing to first\n    // call next here:\n    assertTrue(positions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertTrue(positions.docID() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","sourceOld":"  public void testTerms() throws IOException {\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String field;\n    while((field = fields.next()) != null) {\n      TermsEnum terms = fields.terms();\n      while(terms.next() != null) {\n        BytesRef term = terms.term();\n        assertTrue(term != null);\n        String fieldValue = (String) DocHelper.nameValues.get(field);\n        assertTrue(fieldValue.indexOf(term.utf8ToString()) != -1);\n      }\n    }\n    \n    DocsEnum termDocs = MultiFields.getTermDocsEnum(reader,\n                                                    MultiFields.getLiveDocs(reader),\n                                                    DocHelper.TEXT_FIELD_1_KEY,\n                                                    new BytesRef(\"field\"));\n    assertTrue(termDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n    termDocs = MultiFields.getTermDocsEnum(reader,\n                                           MultiFields.getLiveDocs(reader),\n                                           DocHelper.NO_NORMS_KEY,\n                                           new BytesRef(DocHelper.NO_NORMS_TEXT));\n\n    assertTrue(termDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n    \n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader,\n                                                                      MultiFields.getLiveDocs(reader),\n                                                                      DocHelper.TEXT_FIELD_1_KEY,\n                                                                      new BytesRef(\"field\"));\n    // NOTE: prior rev of this test was failing to first\n    // call next here:\n    assertTrue(positions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertTrue(positions.docID() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"872cff1d3a554e0cd64014cd97f88d3002b0f491","date":1323024658,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","sourceNew":"  public void testTerms() throws IOException {\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String field;\n    while((field = fields.next()) != null) {\n      Terms terms = fields.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      while(termsEnum.next() != null) {\n        BytesRef term = termsEnum.term();\n        assertTrue(term != null);\n        String fieldValue = (String) DocHelper.nameValues.get(field);\n        assertTrue(fieldValue.indexOf(term.utf8ToString()) != -1);\n      }\n    }\n    \n    DocsEnum termDocs = _TestUtil.docs(random, reader,\n                                       DocHelper.TEXT_FIELD_1_KEY,\n                                       new BytesRef(\"field\"),\n                                       MultiFields.getLiveDocs(reader),\n                                       null,\n                                       false);\n    assertTrue(termDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n    termDocs = _TestUtil.docs(random, reader,\n                              DocHelper.NO_NORMS_KEY,\n                              new BytesRef(DocHelper.NO_NORMS_TEXT),\n                              MultiFields.getLiveDocs(reader),\n                              null,\n                              false);\n\n    assertTrue(termDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n    \n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader,\n                                                                      MultiFields.getLiveDocs(reader),\n                                                                      DocHelper.TEXT_FIELD_1_KEY,\n                                                                      new BytesRef(\"field\"));\n    // NOTE: prior rev of this test was failing to first\n    // call next here:\n    assertTrue(positions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertTrue(positions.docID() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","sourceOld":"  public void testTerms() throws IOException {\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String field;\n    while((field = fields.next()) != null) {\n      Terms terms = fields.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      while(termsEnum.next() != null) {\n        BytesRef term = termsEnum.term();\n        assertTrue(term != null);\n        String fieldValue = (String) DocHelper.nameValues.get(field);\n        assertTrue(fieldValue.indexOf(term.utf8ToString()) != -1);\n      }\n    }\n    \n    DocsEnum termDocs = MultiFields.getTermDocsEnum(reader,\n                                                    MultiFields.getLiveDocs(reader),\n                                                    DocHelper.TEXT_FIELD_1_KEY,\n                                                    new BytesRef(\"field\"));\n    assertTrue(termDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n    termDocs = MultiFields.getTermDocsEnum(reader,\n                                           MultiFields.getLiveDocs(reader),\n                                           DocHelper.NO_NORMS_KEY,\n                                           new BytesRef(DocHelper.NO_NORMS_TEXT));\n\n    assertTrue(termDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n    \n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader,\n                                                                      MultiFields.getLiveDocs(reader),\n                                                                      DocHelper.TEXT_FIELD_1_KEY,\n                                                                      new BytesRef(\"field\"));\n    // NOTE: prior rev of this test was failing to first\n    // call next here:\n    assertTrue(positions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertTrue(positions.docID() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","bugFix":null,"bugIntro":["02331260bb246364779cb6f04919ca47900d01bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b65b350ca9588f9fc76ce7d6804160d06c45ff42","date":1323026297,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","sourceNew":"  public void testTerms() throws IOException {\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String field;\n    while((field = fields.next()) != null) {\n      Terms terms = fields.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      while(termsEnum.next() != null) {\n        BytesRef term = termsEnum.term();\n        assertTrue(term != null);\n        String fieldValue = (String) DocHelper.nameValues.get(field);\n        assertTrue(fieldValue.indexOf(term.utf8ToString()) != -1);\n      }\n    }\n    \n    DocsEnum termDocs = _TestUtil.docs(random, reader,\n                                       DocHelper.TEXT_FIELD_1_KEY,\n                                       new BytesRef(\"field\"),\n                                       MultiFields.getLiveDocs(reader),\n                                       null,\n                                       false);\n    assertTrue(termDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n    termDocs = _TestUtil.docs(random, reader,\n                              DocHelper.NO_NORMS_KEY,\n                              new BytesRef(DocHelper.NO_NORMS_TEXT),\n                              MultiFields.getLiveDocs(reader),\n                              null,\n                              false);\n\n    assertTrue(termDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n    \n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader,\n                                                                      MultiFields.getLiveDocs(reader),\n                                                                      DocHelper.TEXT_FIELD_1_KEY,\n                                                                      new BytesRef(\"field\"));\n    // NOTE: prior rev of this test was failing to first\n    // call next here:\n    assertTrue(positions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertTrue(positions.docID() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","sourceOld":"  public void testTerms() throws IOException {\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String field;\n    while((field = fields.next()) != null) {\n      Terms terms = fields.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      while(termsEnum.next() != null) {\n        BytesRef term = termsEnum.term();\n        assertTrue(term != null);\n        String fieldValue = (String) DocHelper.nameValues.get(field);\n        assertTrue(fieldValue.indexOf(term.utf8ToString()) != -1);\n      }\n    }\n    \n    DocsEnum termDocs = MultiFields.getTermDocsEnum(reader,\n                                                    MultiFields.getLiveDocs(reader),\n                                                    DocHelper.TEXT_FIELD_1_KEY,\n                                                    new BytesRef(\"field\"));\n    assertTrue(termDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n    termDocs = MultiFields.getTermDocsEnum(reader,\n                                           MultiFields.getLiveDocs(reader),\n                                           DocHelper.NO_NORMS_KEY,\n                                           new BytesRef(DocHelper.NO_NORMS_TEXT));\n\n    assertTrue(termDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n    \n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader,\n                                                                      MultiFields.getLiveDocs(reader),\n                                                                      DocHelper.TEXT_FIELD_1_KEY,\n                                                                      new BytesRef(\"field\"));\n    // NOTE: prior rev of this test was failing to first\n    // call next here:\n    assertTrue(positions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertTrue(positions.docID() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31f025ae60076ae95274433f3fe8e6ace2857a87","date":1326669465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","sourceNew":"  public void testTerms() throws IOException {\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String field;\n    while((field = fields.next()) != null) {\n      Terms terms = fields.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      while(termsEnum.next() != null) {\n        BytesRef term = termsEnum.term();\n        assertTrue(term != null);\n        String fieldValue = (String) DocHelper.nameValues.get(field);\n        assertTrue(fieldValue.indexOf(term.utf8ToString()) != -1);\n      }\n    }\n    \n    DocsEnum termDocs = _TestUtil.docs(random, reader,\n                                       DocHelper.TEXT_FIELD_1_KEY,\n                                       new BytesRef(\"field\"),\n                                       MultiFields.getLiveDocs(reader),\n                                       null,\n                                       false);\n    assertTrue(termDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n    termDocs = _TestUtil.docs(random, reader,\n                              DocHelper.NO_NORMS_KEY,\n                              new BytesRef(DocHelper.NO_NORMS_TEXT),\n                              MultiFields.getLiveDocs(reader),\n                              null,\n                              false);\n\n    assertTrue(termDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n    \n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader,\n                                                                      MultiFields.getLiveDocs(reader),\n                                                                      DocHelper.TEXT_FIELD_1_KEY,\n                                                                      new BytesRef(\"field\"),\n                                                                      false);\n    // NOTE: prior rev of this test was failing to first\n    // call next here:\n    assertTrue(positions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertTrue(positions.docID() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","sourceOld":"  public void testTerms() throws IOException {\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String field;\n    while((field = fields.next()) != null) {\n      Terms terms = fields.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      while(termsEnum.next() != null) {\n        BytesRef term = termsEnum.term();\n        assertTrue(term != null);\n        String fieldValue = (String) DocHelper.nameValues.get(field);\n        assertTrue(fieldValue.indexOf(term.utf8ToString()) != -1);\n      }\n    }\n    \n    DocsEnum termDocs = _TestUtil.docs(random, reader,\n                                       DocHelper.TEXT_FIELD_1_KEY,\n                                       new BytesRef(\"field\"),\n                                       MultiFields.getLiveDocs(reader),\n                                       null,\n                                       false);\n    assertTrue(termDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n    termDocs = _TestUtil.docs(random, reader,\n                              DocHelper.NO_NORMS_KEY,\n                              new BytesRef(DocHelper.NO_NORMS_TEXT),\n                              MultiFields.getLiveDocs(reader),\n                              null,\n                              false);\n\n    assertTrue(termDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n    \n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader,\n                                                                      MultiFields.getLiveDocs(reader),\n                                                                      DocHelper.TEXT_FIELD_1_KEY,\n                                                                      new BytesRef(\"field\"));\n    // NOTE: prior rev of this test was failing to first\n    // call next here:\n    assertTrue(positions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertTrue(positions.docID() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","sourceNew":"  public void testTerms() throws IOException {\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String field;\n    while((field = fields.next()) != null) {\n      Terms terms = fields.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      while(termsEnum.next() != null) {\n        BytesRef term = termsEnum.term();\n        assertTrue(term != null);\n        String fieldValue = (String) DocHelper.nameValues.get(field);\n        assertTrue(fieldValue.indexOf(term.utf8ToString()) != -1);\n      }\n    }\n    \n    DocsEnum termDocs = _TestUtil.docs(random, reader,\n                                       DocHelper.TEXT_FIELD_1_KEY,\n                                       new BytesRef(\"field\"),\n                                       MultiFields.getLiveDocs(reader),\n                                       null,\n                                       false);\n    assertTrue(termDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n    termDocs = _TestUtil.docs(random, reader,\n                              DocHelper.NO_NORMS_KEY,\n                              new BytesRef(DocHelper.NO_NORMS_TEXT),\n                              MultiFields.getLiveDocs(reader),\n                              null,\n                              false);\n\n    assertTrue(termDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n    \n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader,\n                                                                      MultiFields.getLiveDocs(reader),\n                                                                      DocHelper.TEXT_FIELD_1_KEY,\n                                                                      new BytesRef(\"field\"),\n                                                                      false);\n    // NOTE: prior rev of this test was failing to first\n    // call next here:\n    assertTrue(positions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertTrue(positions.docID() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","sourceOld":"  public void testTerms() throws IOException {\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String field;\n    while((field = fields.next()) != null) {\n      Terms terms = fields.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      while(termsEnum.next() != null) {\n        BytesRef term = termsEnum.term();\n        assertTrue(term != null);\n        String fieldValue = (String) DocHelper.nameValues.get(field);\n        assertTrue(fieldValue.indexOf(term.utf8ToString()) != -1);\n      }\n    }\n    \n    DocsEnum termDocs = _TestUtil.docs(random, reader,\n                                       DocHelper.TEXT_FIELD_1_KEY,\n                                       new BytesRef(\"field\"),\n                                       MultiFields.getLiveDocs(reader),\n                                       null,\n                                       false);\n    assertTrue(termDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n    termDocs = _TestUtil.docs(random, reader,\n                              DocHelper.NO_NORMS_KEY,\n                              new BytesRef(DocHelper.NO_NORMS_TEXT),\n                              MultiFields.getLiveDocs(reader),\n                              null,\n                              false);\n\n    assertTrue(termDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n    \n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader,\n                                                                      MultiFields.getLiveDocs(reader),\n                                                                      DocHelper.TEXT_FIELD_1_KEY,\n                                                                      new BytesRef(\"field\"),\n                                                                      false);\n    // NOTE: prior rev of this test was failing to first\n    // call next here:\n    assertTrue(positions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertTrue(positions.docID() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["28427ef110c4c5bf5b4057731b83110bd1e13724"],"3cc749c053615f5871f3b95715fe292f34e70a53":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["3cc749c053615f5871f3b95715fe292f34e70a53"],"5f4e87790277826a2aea119328600dfb07761f32":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","28427ef110c4c5bf5b4057731b83110bd1e13724"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["28427ef110c4c5bf5b4057731b83110bd1e13724","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["28427ef110c4c5bf5b4057731b83110bd1e13724","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":["3cc749c053615f5871f3b95715fe292f34e70a53","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28427ef110c4c5bf5b4057731b83110bd1e13724":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["872cff1d3a554e0cd64014cd97f88d3002b0f491"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["3cc749c053615f5871f3b95715fe292f34e70a53","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"3cc749c053615f5871f3b95715fe292f34e70a53":["872cff1d3a554e0cd64014cd97f88d3002b0f491","b65b350ca9588f9fc76ce7d6804160d06c45ff42"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["5f4e87790277826a2aea119328600dfb07761f32","28427ef110c4c5bf5b4057731b83110bd1e13724"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","31f025ae60076ae95274433f3fe8e6ace2857a87"],"5f4e87790277826a2aea119328600dfb07761f32":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","5f4e87790277826a2aea119328600dfb07761f32","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","b65b350ca9588f9fc76ce7d6804160d06c45ff42","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}