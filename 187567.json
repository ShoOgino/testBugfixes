{"path":"lucene/core/src/test/org/apache/lucene/util/TestSloppyMath#testHaversin().mjava","commits":[{"id":"7d3e011ea56c513db42a835815963831340a78ea","date":1381092452,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestSloppyMath#testHaversin().mjava","pathOld":"/dev/null","sourceNew":"  public void testHaversin() {\n    assertTrue(Double.isNaN(haversin(1, 1, 1, Double.NaN)));\n    assertTrue(Double.isNaN(haversin(1, 1, Double.NaN, 1)));\n    assertTrue(Double.isNaN(haversin(1, Double.NaN, 1, 1)));\n    assertTrue(Double.isNaN(haversin(Double.NaN, 1, 1, 1)));\n    \n    assertEquals(0, haversin(0, 0, 0, 0), 0D);\n    assertEquals(0, haversin(0, -180, 0, -180), 0D);\n    assertEquals(0, haversin(0, -180, 0, 180), 0D);\n    assertEquals(0, haversin(0, 180, 0, 180), 0D);\n    assertEquals(0, haversin(90, 0, 90, 0), 0D);\n    assertEquals(0, haversin(90, -180, 90, -180), 0D);\n    assertEquals(0, haversin(90, -180, 90, 180), 0D);\n    assertEquals(0, haversin(90, 180, 90, 180), 0D);\n    \n    // from solr and ES tests (with their respective epsilons)\n    assertEquals(314.40338, haversin(1, 2, 3, 4), 10e-5);\n    assertEquals(0, haversin(40.7143528, -74.0059731, 40.7143528, -74.0059731), 0D);\n    assertEquals(5.286, haversin(40.7143528, -74.0059731, 40.759011, -73.9844722), 0.01D);\n    assertEquals(0.4621, haversin(40.7143528, -74.0059731, 40.718266, -74.007819), 0.01D);\n    assertEquals(1.055, haversin(40.7143528, -74.0059731, 40.7051157, -74.0088305), 0.01D);\n    assertEquals(1.258, haversin(40.7143528, -74.0059731, 40.7247222, -74), 0.01D);\n    assertEquals(2.029, haversin(40.7143528, -74.0059731, 40.731033, -73.9962255), 0.01D);\n    assertEquals(8.572, haversin(40.7143528, -74.0059731, 40.65, -73.95), 0.01D);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ec60431d008a694828dacb4bc3cda775b6c44a9f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8b25cb7f94b5bbdc8f8ed0551a2ce24a40b94a4f","date":1389748847,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestSloppyMath#testHaversin().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestSloppyMath#testHaversin().mjava","sourceNew":"  public void testHaversin() {\n    assertTrue(Double.isNaN(haversin(1, 1, 1, Double.NaN)));\n    assertTrue(Double.isNaN(haversin(1, 1, Double.NaN, 1)));\n    assertTrue(Double.isNaN(haversin(1, Double.NaN, 1, 1)));\n    assertTrue(Double.isNaN(haversin(Double.NaN, 1, 1, 1)));\n    \n    assertEquals(0, haversin(0, 0, 0, 0), 0D);\n    assertEquals(0, haversin(0, -180, 0, -180), 0D);\n    assertEquals(0, haversin(0, -180, 0, 180), 0D);\n    assertEquals(0, haversin(0, 180, 0, 180), 0D);\n    assertEquals(0, haversin(90, 0, 90, 0), 0D);\n    assertEquals(0, haversin(90, -180, 90, -180), 0D);\n    assertEquals(0, haversin(90, -180, 90, 180), 0D);\n    assertEquals(0, haversin(90, 180, 90, 180), 0D);\n    \n    // Test half a circle on the equator, using WGS84 earth radius\n    double earthRadiusKMs = 6378.137;\n    double halfCircle = earthRadiusKMs * Math.PI;\n    assertEquals(halfCircle, haversin(0, 0, 0, 180), 0D);\n\n    Random r = random();\n    double randomLat1 = 40.7143528 + (r.nextInt(10) - 5) * 360;\n    double randomLon1 = -74.0059731 + (r.nextInt(10) - 5) * 360;\n\n    double randomLat2 = 40.65 + (r.nextInt(10) - 5) * 360;\n    double randomLon2 = -73.95 + (r.nextInt(10) - 5) * 360;\n    \n    assertEquals(8.572, haversin(randomLat1, randomLon1, randomLat2, randomLon2), 0.01D);\n    \n    \n    // from solr and ES tests (with their respective epsilons)\n    assertEquals(0, haversin(40.7143528, -74.0059731, 40.7143528, -74.0059731), 0D);\n    assertEquals(5.286, haversin(40.7143528, -74.0059731, 40.759011, -73.9844722), 0.01D);\n    assertEquals(0.4621, haversin(40.7143528, -74.0059731, 40.718266, -74.007819), 0.01D);\n    assertEquals(1.055, haversin(40.7143528, -74.0059731, 40.7051157, -74.0088305), 0.01D);\n    assertEquals(1.258, haversin(40.7143528, -74.0059731, 40.7247222, -74), 0.01D);\n    assertEquals(2.029, haversin(40.7143528, -74.0059731, 40.731033, -73.9962255), 0.01D);\n    assertEquals(8.572, haversin(40.7143528, -74.0059731, 40.65, -73.95), 0.01D);\n  }\n\n","sourceOld":"  public void testHaversin() {\n    assertTrue(Double.isNaN(haversin(1, 1, 1, Double.NaN)));\n    assertTrue(Double.isNaN(haversin(1, 1, Double.NaN, 1)));\n    assertTrue(Double.isNaN(haversin(1, Double.NaN, 1, 1)));\n    assertTrue(Double.isNaN(haversin(Double.NaN, 1, 1, 1)));\n    \n    assertEquals(0, haversin(0, 0, 0, 0), 0D);\n    assertEquals(0, haversin(0, -180, 0, -180), 0D);\n    assertEquals(0, haversin(0, -180, 0, 180), 0D);\n    assertEquals(0, haversin(0, 180, 0, 180), 0D);\n    assertEquals(0, haversin(90, 0, 90, 0), 0D);\n    assertEquals(0, haversin(90, -180, 90, -180), 0D);\n    assertEquals(0, haversin(90, -180, 90, 180), 0D);\n    assertEquals(0, haversin(90, 180, 90, 180), 0D);\n    \n    // from solr and ES tests (with their respective epsilons)\n    assertEquals(314.40338, haversin(1, 2, 3, 4), 10e-5);\n    assertEquals(0, haversin(40.7143528, -74.0059731, 40.7143528, -74.0059731), 0D);\n    assertEquals(5.286, haversin(40.7143528, -74.0059731, 40.759011, -73.9844722), 0.01D);\n    assertEquals(0.4621, haversin(40.7143528, -74.0059731, 40.718266, -74.007819), 0.01D);\n    assertEquals(1.055, haversin(40.7143528, -74.0059731, 40.7051157, -74.0088305), 0.01D);\n    assertEquals(1.258, haversin(40.7143528, -74.0059731, 40.7247222, -74), 0.01D);\n    assertEquals(2.029, haversin(40.7143528, -74.0059731, 40.731033, -73.9962255), 0.01D);\n    assertEquals(8.572, haversin(40.7143528, -74.0059731, 40.65, -73.95), 0.01D);\n  }\n\n","bugFix":null,"bugIntro":["ec60431d008a694828dacb4bc3cda775b6c44a9f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ec60431d008a694828dacb4bc3cda775b6c44a9f","date":1458570843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestSloppyMath#testHaversin().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestSloppyMath#testHaversin().mjava","sourceNew":"  public void testHaversin() {\n    assertTrue(Double.isNaN(haversinMeters(1, 1, 1, Double.NaN)));\n    assertTrue(Double.isNaN(haversinMeters(1, 1, Double.NaN, 1)));\n    assertTrue(Double.isNaN(haversinMeters(1, Double.NaN, 1, 1)));\n    assertTrue(Double.isNaN(haversinMeters(Double.NaN, 1, 1, 1)));\n    \n    assertEquals(0, haversinMeters(0, 0, 0, 0), 0D);\n    assertEquals(0, haversinMeters(0, -180, 0, -180), 0D);\n    assertEquals(0, haversinMeters(0, -180, 0, 180), 0D);\n    assertEquals(0, haversinMeters(0, 180, 0, 180), 0D);\n    assertEquals(0, haversinMeters(90, 0, 90, 0), 0D);\n    assertEquals(0, haversinMeters(90, -180, 90, -180), 0D);\n    assertEquals(0, haversinMeters(90, -180, 90, 180), 0D);\n    assertEquals(0, haversinMeters(90, 180, 90, 180), 0D);\n    \n    // Test half a circle on the equator, using WGS84 equatorial earth radius\n    double earthRadiusMs = 6_378_137D;\n    double halfCircle = earthRadiusMs * Math.PI;\n    assertEquals(halfCircle, haversinMeters(0, 0, 0, 180), 0D);\n\n    Random r = random();\n    double randomLat1 = 40.7143528 + (r.nextInt(10) - 5) * 360;\n    double randomLon1 = -74.0059731 + (r.nextInt(10) - 5) * 360;\n\n    double randomLat2 = 40.65 + (r.nextInt(10) - 5) * 360;\n    double randomLon2 = -73.95 + (r.nextInt(10) - 5) * 360;\n    \n    assertEquals(8_581.7047, haversinMeters(randomLat1, randomLon1, randomLat2, randomLon2), 0.01D);\n    \n    \n    // from solr and ES tests (with their respective epsilons)\n    assertEquals(0, haversinMeters(40.7143528, -74.0059731, 40.7143528, -74.0059731), 0D);\n    assertEquals(5_291.80, haversinMeters(40.7143528, -74.0059731, 40.759011, -73.9844722), 0.01D);\n    assertEquals(462.62, haversinMeters(40.7143528, -74.0059731, 40.718266, -74.007819), 0.01D);\n    assertEquals(1_056.16, haversinMeters(40.7143528, -74.0059731, 40.7051157, -74.0088305), 0.01D);\n    assertEquals(1_259.53, haversinMeters(40.7143528, -74.0059731, 40.7247222, -74), 0.01D);\n    assertEquals(2_030.79, haversinMeters(40.7143528, -74.0059731, 40.731033, -73.9962255), 0.01D);\n    assertEquals(8_581.70, haversinMeters(40.7143528, -74.0059731, 40.65, -73.95), 0.01D);\n  }\n\n","sourceOld":"  public void testHaversin() {\n    assertTrue(Double.isNaN(haversin(1, 1, 1, Double.NaN)));\n    assertTrue(Double.isNaN(haversin(1, 1, Double.NaN, 1)));\n    assertTrue(Double.isNaN(haversin(1, Double.NaN, 1, 1)));\n    assertTrue(Double.isNaN(haversin(Double.NaN, 1, 1, 1)));\n    \n    assertEquals(0, haversin(0, 0, 0, 0), 0D);\n    assertEquals(0, haversin(0, -180, 0, -180), 0D);\n    assertEquals(0, haversin(0, -180, 0, 180), 0D);\n    assertEquals(0, haversin(0, 180, 0, 180), 0D);\n    assertEquals(0, haversin(90, 0, 90, 0), 0D);\n    assertEquals(0, haversin(90, -180, 90, -180), 0D);\n    assertEquals(0, haversin(90, -180, 90, 180), 0D);\n    assertEquals(0, haversin(90, 180, 90, 180), 0D);\n    \n    // Test half a circle on the equator, using WGS84 earth radius\n    double earthRadiusKMs = 6378.137;\n    double halfCircle = earthRadiusKMs * Math.PI;\n    assertEquals(halfCircle, haversin(0, 0, 0, 180), 0D);\n\n    Random r = random();\n    double randomLat1 = 40.7143528 + (r.nextInt(10) - 5) * 360;\n    double randomLon1 = -74.0059731 + (r.nextInt(10) - 5) * 360;\n\n    double randomLat2 = 40.65 + (r.nextInt(10) - 5) * 360;\n    double randomLon2 = -73.95 + (r.nextInt(10) - 5) * 360;\n    \n    assertEquals(8.572, haversin(randomLat1, randomLon1, randomLat2, randomLon2), 0.01D);\n    \n    \n    // from solr and ES tests (with their respective epsilons)\n    assertEquals(0, haversin(40.7143528, -74.0059731, 40.7143528, -74.0059731), 0D);\n    assertEquals(5.286, haversin(40.7143528, -74.0059731, 40.759011, -73.9844722), 0.01D);\n    assertEquals(0.4621, haversin(40.7143528, -74.0059731, 40.718266, -74.007819), 0.01D);\n    assertEquals(1.055, haversin(40.7143528, -74.0059731, 40.7051157, -74.0088305), 0.01D);\n    assertEquals(1.258, haversin(40.7143528, -74.0059731, 40.7247222, -74), 0.01D);\n    assertEquals(2.029, haversin(40.7143528, -74.0059731, 40.731033, -73.9962255), 0.01D);\n    assertEquals(8.572, haversin(40.7143528, -74.0059731, 40.65, -73.95), 0.01D);\n  }\n\n","bugFix":["7d3e011ea56c513db42a835815963831340a78ea","8b25cb7f94b5bbdc8f8ed0551a2ce24a40b94a4f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bd00e9af390947b2751706503ba0d2f0b28da6d","date":1459503650,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestSloppyMath#testHaversin().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestSloppyMath#testHaversin().mjava","sourceNew":"  public void testHaversin() {\n    assertTrue(Double.isNaN(haversinMeters(1, 1, 1, Double.NaN)));\n    assertTrue(Double.isNaN(haversinMeters(1, 1, Double.NaN, 1)));\n    assertTrue(Double.isNaN(haversinMeters(1, Double.NaN, 1, 1)));\n    assertTrue(Double.isNaN(haversinMeters(Double.NaN, 1, 1, 1)));\n    \n    assertEquals(0, haversinMeters(0, 0, 0, 0), 0D);\n    assertEquals(0, haversinMeters(0, -180, 0, -180), 0D);\n    assertEquals(0, haversinMeters(0, -180, 0, 180), 0D);\n    assertEquals(0, haversinMeters(0, 180, 0, 180), 0D);\n    assertEquals(0, haversinMeters(90, 0, 90, 0), 0D);\n    assertEquals(0, haversinMeters(90, -180, 90, -180), 0D);\n    assertEquals(0, haversinMeters(90, -180, 90, 180), 0D);\n    assertEquals(0, haversinMeters(90, 180, 90, 180), 0D);\n    \n    // Test half a circle on the equator, using WGS84 mean earth radius in meters\n    double earthRadiusMs = 6_371_008.7714;\n    double halfCircle = earthRadiusMs * Math.PI;\n    assertEquals(halfCircle, haversinMeters(0, 0, 0, 180), 0D);\n\n    Random r = random();\n    double randomLat1 = 40.7143528 + (r.nextInt(10) - 5) * 360;\n    double randomLon1 = -74.0059731 + (r.nextInt(10) - 5) * 360;\n\n    double randomLat2 = 40.65 + (r.nextInt(10) - 5) * 360;\n    double randomLon2 = -73.95 + (r.nextInt(10) - 5) * 360;\n    \n    assertEquals(8_572.1137, haversinMeters(randomLat1, randomLon1, randomLat2, randomLon2), 0.01D);\n    \n    \n    // from solr and ES tests (with their respective epsilons)\n    assertEquals(0, haversinMeters(40.7143528, -74.0059731, 40.7143528, -74.0059731), 0D);\n    assertEquals(5_285.89, haversinMeters(40.7143528, -74.0059731, 40.759011, -73.9844722), 0.01D);\n    assertEquals(462.10, haversinMeters(40.7143528, -74.0059731, 40.718266, -74.007819), 0.01D);\n    assertEquals(1_054.98, haversinMeters(40.7143528, -74.0059731, 40.7051157, -74.0088305), 0.01D);\n    assertEquals(1_258.12, haversinMeters(40.7143528, -74.0059731, 40.7247222, -74), 0.01D);\n    assertEquals(2_028.52, haversinMeters(40.7143528, -74.0059731, 40.731033, -73.9962255), 0.01D);\n    assertEquals(8_572.11, haversinMeters(40.7143528, -74.0059731, 40.65, -73.95), 0.01D);\n  }\n\n","sourceOld":"  public void testHaversin() {\n    assertTrue(Double.isNaN(haversinMeters(1, 1, 1, Double.NaN)));\n    assertTrue(Double.isNaN(haversinMeters(1, 1, Double.NaN, 1)));\n    assertTrue(Double.isNaN(haversinMeters(1, Double.NaN, 1, 1)));\n    assertTrue(Double.isNaN(haversinMeters(Double.NaN, 1, 1, 1)));\n    \n    assertEquals(0, haversinMeters(0, 0, 0, 0), 0D);\n    assertEquals(0, haversinMeters(0, -180, 0, -180), 0D);\n    assertEquals(0, haversinMeters(0, -180, 0, 180), 0D);\n    assertEquals(0, haversinMeters(0, 180, 0, 180), 0D);\n    assertEquals(0, haversinMeters(90, 0, 90, 0), 0D);\n    assertEquals(0, haversinMeters(90, -180, 90, -180), 0D);\n    assertEquals(0, haversinMeters(90, -180, 90, 180), 0D);\n    assertEquals(0, haversinMeters(90, 180, 90, 180), 0D);\n    \n    // Test half a circle on the equator, using WGS84 equatorial earth radius\n    double earthRadiusMs = 6_378_137D;\n    double halfCircle = earthRadiusMs * Math.PI;\n    assertEquals(halfCircle, haversinMeters(0, 0, 0, 180), 0D);\n\n    Random r = random();\n    double randomLat1 = 40.7143528 + (r.nextInt(10) - 5) * 360;\n    double randomLon1 = -74.0059731 + (r.nextInt(10) - 5) * 360;\n\n    double randomLat2 = 40.65 + (r.nextInt(10) - 5) * 360;\n    double randomLon2 = -73.95 + (r.nextInt(10) - 5) * 360;\n    \n    assertEquals(8_581.7047, haversinMeters(randomLat1, randomLon1, randomLat2, randomLon2), 0.01D);\n    \n    \n    // from solr and ES tests (with their respective epsilons)\n    assertEquals(0, haversinMeters(40.7143528, -74.0059731, 40.7143528, -74.0059731), 0D);\n    assertEquals(5_291.80, haversinMeters(40.7143528, -74.0059731, 40.759011, -73.9844722), 0.01D);\n    assertEquals(462.62, haversinMeters(40.7143528, -74.0059731, 40.718266, -74.007819), 0.01D);\n    assertEquals(1_056.16, haversinMeters(40.7143528, -74.0059731, 40.7051157, -74.0088305), 0.01D);\n    assertEquals(1_259.53, haversinMeters(40.7143528, -74.0059731, 40.7247222, -74), 0.01D);\n    assertEquals(2_030.79, haversinMeters(40.7143528, -74.0059731, 40.731033, -73.9962255), 0.01D);\n    assertEquals(8_581.70, haversinMeters(40.7143528, -74.0059731, 40.65, -73.95), 0.01D);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7d3e011ea56c513db42a835815963831340a78ea":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8b25cb7f94b5bbdc8f8ed0551a2ce24a40b94a4f":["7d3e011ea56c513db42a835815963831340a78ea"],"ec60431d008a694828dacb4bc3cda775b6c44a9f":["8b25cb7f94b5bbdc8f8ed0551a2ce24a40b94a4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9bd00e9af390947b2751706503ba0d2f0b28da6d":["ec60431d008a694828dacb4bc3cda775b6c44a9f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9bd00e9af390947b2751706503ba0d2f0b28da6d"]},"commit2Childs":{"7d3e011ea56c513db42a835815963831340a78ea":["8b25cb7f94b5bbdc8f8ed0551a2ce24a40b94a4f"],"8b25cb7f94b5bbdc8f8ed0551a2ce24a40b94a4f":["ec60431d008a694828dacb4bc3cda775b6c44a9f"],"ec60431d008a694828dacb4bc3cda775b6c44a9f":["9bd00e9af390947b2751706503ba0d2f0b28da6d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7d3e011ea56c513db42a835815963831340a78ea"],"9bd00e9af390947b2751706503ba0d2f0b28da6d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}