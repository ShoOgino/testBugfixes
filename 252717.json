{"path":"lucene/src/test/org/apache/lucene/search/TestBoolean2#queriesTest(String,int[]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBoolean2#queriesTest(String,int[]).mjava","pathOld":"src/test/org/apache/lucene/search/TestBoolean2#queriesTest(String,int[]).mjava","sourceNew":"  public void queriesTest(String queryText, int[] expDocNrs) throws Exception {\n//System.out.println();\n//System.out.println(\"Query: \" + queryText);\n\n    Query query1 = makeQuery(queryText);\n    TopScoreDocCollector collector = TopScoreDocCollector.create(1000, false);\n    searcher.search(query1, null, collector);\n    ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n    \n    Query query2 = makeQuery(queryText); // there should be no need to parse again...\n    collector = TopScoreDocCollector.create(1000, true);\n    searcher.search(query2, null, collector);\n    ScoreDoc[] hits2 = collector.topDocs().scoreDocs; \n\n    assertEquals(mulFactor * collector.totalHits,\n                 bigSearcher.search(query1, 1).totalHits);\n      \n    CheckHits.checkHitsQuery(query2, hits1, hits2, expDocNrs);\n  }\n\n","sourceOld":"  public void queriesTest(String queryText, int[] expDocNrs) throws Exception {\n//System.out.println();\n//System.out.println(\"Query: \" + queryText);\n\n    Query query1 = makeQuery(queryText);\n    TopScoreDocCollector collector = TopScoreDocCollector.create(1000, false);\n    searcher.search(query1, null, collector);\n    ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n    \n    Query query2 = makeQuery(queryText); // there should be no need to parse again...\n    collector = TopScoreDocCollector.create(1000, true);\n    searcher.search(query2, null, collector);\n    ScoreDoc[] hits2 = collector.topDocs().scoreDocs; \n\n    assertEquals(mulFactor * collector.totalHits,\n                 bigSearcher.search(query1, 1).totalHits);\n      \n    CheckHits.checkHitsQuery(query2, hits1, hits2, expDocNrs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4411d2e118cb48fb6415f6ac00117fd1c570dff","date":1286628493,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBoolean2#queriesTest(String,int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBoolean2#queriesTest(String,int[]).mjava","sourceNew":"  public void queriesTest(String queryText, int[] expDocNrs) throws Exception {\n//System.out.println();\n//System.out.println(\"Query: \" + queryText);\n\n    Query query = makeQuery(queryText);\n    TopScoreDocCollector collector = TopScoreDocCollector.create(1000, false);\n    searcher.search(query, null, collector);\n    ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n    collector = TopScoreDocCollector.create(1000, true);\n    searcher.search(query, null, collector);\n    ScoreDoc[] hits2 = collector.topDocs().scoreDocs; \n\n    assertEquals(mulFactor * collector.totalHits,\n                 bigSearcher.search(query, 1).totalHits);\n      \n    CheckHits.checkHitsQuery(query, hits1, hits2, expDocNrs);\n  }\n\n","sourceOld":"  public void queriesTest(String queryText, int[] expDocNrs) throws Exception {\n//System.out.println();\n//System.out.println(\"Query: \" + queryText);\n\n    Query query1 = makeQuery(queryText);\n    TopScoreDocCollector collector = TopScoreDocCollector.create(1000, false);\n    searcher.search(query1, null, collector);\n    ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n    \n    Query query2 = makeQuery(queryText); // there should be no need to parse again...\n    collector = TopScoreDocCollector.create(1000, true);\n    searcher.search(query2, null, collector);\n    ScoreDoc[] hits2 = collector.topDocs().scoreDocs; \n\n    assertEquals(mulFactor * collector.totalHits,\n                 bigSearcher.search(query1, 1).totalHits);\n      \n    CheckHits.checkHitsQuery(query2, hits1, hits2, expDocNrs);\n  }\n\n","bugFix":null,"bugIntro":["7c82b0d4b7bf499a159eeff92add20bac6599cc1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBoolean2#queriesTest(String,int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBoolean2#queriesTest(String,int[]).mjava","sourceNew":"  public void queriesTest(String queryText, int[] expDocNrs) throws Exception {\n//System.out.println();\n//System.out.println(\"Query: \" + queryText);\n\n    Query query = makeQuery(queryText);\n    TopScoreDocCollector collector = TopScoreDocCollector.create(1000, false);\n    searcher.search(query, null, collector);\n    ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n    collector = TopScoreDocCollector.create(1000, true);\n    searcher.search(query, null, collector);\n    ScoreDoc[] hits2 = collector.topDocs().scoreDocs; \n\n    assertEquals(mulFactor * collector.totalHits,\n                 bigSearcher.search(query, 1).totalHits);\n      \n    CheckHits.checkHitsQuery(query, hits1, hits2, expDocNrs);\n  }\n\n","sourceOld":"  public void queriesTest(String queryText, int[] expDocNrs) throws Exception {\n//System.out.println();\n//System.out.println(\"Query: \" + queryText);\n\n    Query query1 = makeQuery(queryText);\n    TopScoreDocCollector collector = TopScoreDocCollector.create(1000, false);\n    searcher.search(query1, null, collector);\n    ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n    \n    Query query2 = makeQuery(queryText); // there should be no need to parse again...\n    collector = TopScoreDocCollector.create(1000, true);\n    searcher.search(query2, null, collector);\n    ScoreDoc[] hits2 = collector.topDocs().scoreDocs; \n\n    assertEquals(mulFactor * collector.totalHits,\n                 bigSearcher.search(query1, 1).totalHits);\n      \n    CheckHits.checkHitsQuery(query2, hits1, hits2, expDocNrs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112629f1dfd1451722c6047bcf593e6efc96f5f4","date":1309910887,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBoolean2#queriesTest(Query,int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBoolean2#queriesTest(String,int[]).mjava","sourceNew":"  public void queriesTest(Query query, int[] expDocNrs) throws Exception {\n    TopScoreDocCollector collector = TopScoreDocCollector.create(1000, false);\n    searcher.search(query, null, collector);\n    ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n    collector = TopScoreDocCollector.create(1000, true);\n    searcher.search(query, null, collector);\n    ScoreDoc[] hits2 = collector.topDocs().scoreDocs; \n\n    assertEquals(mulFactor * collector.totalHits,\n                 bigSearcher.search(query, 1).totalHits);\n      \n    CheckHits.checkHitsQuery(query, hits1, hits2, expDocNrs);\n  }\n\n","sourceOld":"  public void queriesTest(String queryText, int[] expDocNrs) throws Exception {\n//System.out.println();\n//System.out.println(\"Query: \" + queryText);\n\n    Query query = makeQuery(queryText);\n    TopScoreDocCollector collector = TopScoreDocCollector.create(1000, false);\n    searcher.search(query, null, collector);\n    ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n    collector = TopScoreDocCollector.create(1000, true);\n    searcher.search(query, null, collector);\n    ScoreDoc[] hits2 = collector.topDocs().scoreDocs; \n\n    assertEquals(mulFactor * collector.totalHits,\n                 bigSearcher.search(query, 1).totalHits);\n      \n    CheckHits.checkHitsQuery(query, hits1, hits2, expDocNrs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestBoolean2#queriesTest(String,int[]).mjava","sourceNew":null,"sourceOld":"  public void queriesTest(String queryText, int[] expDocNrs) throws Exception {\n//System.out.println();\n//System.out.println(\"Query: \" + queryText);\n\n    Query query = makeQuery(queryText);\n    TopScoreDocCollector collector = TopScoreDocCollector.create(1000, false);\n    searcher.search(query, null, collector);\n    ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n    collector = TopScoreDocCollector.create(1000, true);\n    searcher.search(query, null, collector);\n    ScoreDoc[] hits2 = collector.topDocs().scoreDocs; \n\n    assertEquals(mulFactor * collector.totalHits,\n                 bigSearcher.search(query, 1).totalHits);\n      \n    CheckHits.checkHitsQuery(query, hits1, hits2, expDocNrs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestBoolean2#queriesTest(String,int[]).mjava","sourceNew":null,"sourceOld":"  public void queriesTest(String queryText, int[] expDocNrs) throws Exception {\n//System.out.println();\n//System.out.println(\"Query: \" + queryText);\n\n    Query query = makeQuery(queryText);\n    TopScoreDocCollector collector = TopScoreDocCollector.create(1000, false);\n    searcher.search(query, null, collector);\n    ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n    collector = TopScoreDocCollector.create(1000, true);\n    searcher.search(query, null, collector);\n    ScoreDoc[] hits2 = collector.topDocs().scoreDocs; \n\n    assertEquals(mulFactor * collector.totalHits,\n                 bigSearcher.search(query, 1).totalHits);\n      \n    CheckHits.checkHitsQuery(query, hits1, hits2, expDocNrs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a4411d2e118cb48fb6415f6ac00117fd1c570dff":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","a4411d2e118cb48fb6415f6ac00117fd1c570dff"],"112629f1dfd1451722c6047bcf593e6efc96f5f4":["a4411d2e118cb48fb6415f6ac00117fd1c570dff"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a4411d2e118cb48fb6415f6ac00117fd1c570dff","112629f1dfd1451722c6047bcf593e6efc96f5f4"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a4411d2e118cb48fb6415f6ac00117fd1c570dff","112629f1dfd1451722c6047bcf593e6efc96f5f4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["112629f1dfd1451722c6047bcf593e6efc96f5f4"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a4411d2e118cb48fb6415f6ac00117fd1c570dff":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","112629f1dfd1451722c6047bcf593e6efc96f5f4","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"112629f1dfd1451722c6047bcf593e6efc96f5f4":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a4411d2e118cb48fb6415f6ac00117fd1c570dff","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}