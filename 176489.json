{"path":"src/test/org/apache/solr/client/solrj/SolrExampleTests#testStatistics().mjava","commits":[{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/client/solrj/SolrExampleTests#testStatistics().mjava","pathOld":"client/java/solrj/test/org/apache/solr/client/solrj/SolrExampleTests#testStatistics().mjava","sourceNew":"  public void testStatistics() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    \n    int i=0;               // 0   1   2   3   4   5   6   7   8   9 \n    int[] nums = new int[] { 23, 26, 38, 46, 55, 63, 77, 84, 92, 94 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( \"popularity\", num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.setRows( 0 );\n    query.setGetFieldStatistics( \"popularity\", true );\n    \n    QueryResponse rsp = server.query( query );\n    FieldStatsInfo stats = rsp.getFieldStatsInfo().get( \"popularity\" );\n    assertNotNull( stats );\n    \n    assertEquals( 23.0, stats.getMin() );\n    assertEquals( 94.0, stats.getMax() );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    assertEquals( (nums[4]+nums[5])/2.0, stats.getMedian() );\n    assertEquals( \"26.4\", stats.getStddev().toString().substring(0,4) );\n    \n    // now lets try again with a new set...  (odd median)\n    //----------------------------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 5, 7, 10, 19, 20 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( \"popularity\", num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( \"popularity\" );\n    assertNotNull( stats );\n    \n    assertEquals( 5.0, stats.getMin() );\n    assertEquals( 20.0, stats.getMax() );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    assertEquals( 10.0, stats.getMedian() );\n    \n    // Now try again with faceting\n    //---------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 1, 2, 3, 4, 5, 10, 11, 12, 13, 14 };\n    for( i=0; i<nums.length; i++ ) {\n      int num = nums[i];\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( \"popularity\", num );\n      doc.setField( \"inStock\", i < 5 );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"inStock:true\",  5 ); // make sure they all got in\n    assertNumFound( \"inStock:false\", 5 ); // make sure they all got in\n\n    // facet on 'inStock'\n    query.addStatsFieldFacets( \"popularity\", \"inStock\" );\n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( \"popularity\" );\n    assertNotNull( stats );\n    \n    List<FieldStatsInfo> facets = stats.getFacets().get( \"inStock\" );\n    assertNotNull( facets );\n    assertEquals( 2, facets.size() );\n    FieldStatsInfo inStockF = facets.get(0);\n    FieldStatsInfo inStockT = facets.get(1);\n    if( \"true\".equals( inStockF.getName() ) ) {\n      FieldStatsInfo tmp = inStockF;\n      inStockF = inStockT;\n      inStockT = tmp;\n    }\n\n    // make sure half went to each\n    assertEquals( inStockF.getCount(), inStockT.getCount() );\n    assertEquals( stats.getCount().longValue(), inStockF.getCount()+inStockT.getCount() );\n\n    assertTrue( \"check that min max faceted ok\", inStockF.getMin() > inStockT.getMax() );\n    assertEquals( \"they have the same distribution\", inStockF.getStddev(), inStockT.getStddev() );\n  }\n\n","sourceOld":"  public void testStatistics() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    \n    int i=0;               // 0   1   2   3   4   5   6   7   8   9 \n    int[] nums = new int[] { 23, 26, 38, 46, 55, 63, 77, 84, 92, 94 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( \"popularity\", num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.setRows( 0 );\n    query.setGetFieldStatistics( \"popularity\", true );\n    \n    QueryResponse rsp = server.query( query );\n    FieldStatsInfo stats = rsp.getFieldStatsInfo().get( \"popularity\" );\n    assertNotNull( stats );\n    \n    assertEquals( 23.0, stats.getMin() );\n    assertEquals( 94.0, stats.getMax() );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    assertEquals( (nums[4]+nums[5])/2.0, stats.getMedian() );\n    assertEquals( \"26.4\", stats.getStddev().toString().substring(0,4) );\n    \n    // now lets try again with a new set...  (odd median)\n    //----------------------------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 5, 7, 10, 19, 20 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( \"popularity\", num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( \"popularity\" );\n    assertNotNull( stats );\n    \n    assertEquals( 5.0, stats.getMin() );\n    assertEquals( 20.0, stats.getMax() );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    assertEquals( 10.0, stats.getMedian() );\n    \n    // Now try again with faceting\n    //---------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 1, 2, 3, 4, 5, 10, 11, 12, 13, 14 };\n    for( i=0; i<nums.length; i++ ) {\n      int num = nums[i];\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( \"popularity\", num );\n      doc.setField( \"inStock\", i < 5 );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"inStock:true\",  5 ); // make sure they all got in\n    assertNumFound( \"inStock:false\", 5 ); // make sure they all got in\n\n    // facet on 'inStock'\n    query.addStatsFieldFacets( \"popularity\", \"inStock\" );\n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( \"popularity\" );\n    assertNotNull( stats );\n    \n    List<FieldStatsInfo> facets = stats.getFacets().get( \"inStock\" );\n    assertNotNull( facets );\n    assertEquals( 2, facets.size() );\n    FieldStatsInfo inStockF = facets.get(0);\n    FieldStatsInfo inStockT = facets.get(1);\n    if( \"true\".equals( inStockF.getName() ) ) {\n      FieldStatsInfo tmp = inStockF;\n      inStockF = inStockT;\n      inStockT = tmp;\n    }\n\n    // make sure half went to each\n    assertEquals( inStockF.getCount(), inStockT.getCount() );\n    assertEquals( stats.getCount().longValue(), inStockF.getCount()+inStockT.getCount() );\n\n    assertTrue( \"check that min max faceted ok\", inStockF.getMin() > inStockT.getMax() );\n    assertEquals( \"they have the same distribution\", inStockF.getStddev(), inStockT.getStddev() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"465d12ead875b4472c72492947b22b7669403ea7","date":1229624043,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/client/solrj/SolrExampleTests#testStatistics().mjava","pathOld":"src/test/org/apache/solr/client/solrj/SolrExampleTests#testStatistics().mjava","sourceNew":"  public void testStatistics() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    \n    int i=0;               // 0   1   2   3   4   5   6   7   8   9 \n    int[] nums = new int[] { 23, 26, 38, 46, 55, 63, 77, 84, 92, 94 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( \"popularity\", num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.setRows( 0 );\n    query.setGetFieldStatistics( \"popularity\" );\n    \n    QueryResponse rsp = server.query( query );\n    FieldStatsInfo stats = rsp.getFieldStatsInfo().get( \"popularity\" );\n    assertNotNull( stats );\n    \n    assertEquals( 23.0, stats.getMin() );\n    assertEquals( 94.0, stats.getMax() );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    assertEquals( \"26.4\", stats.getStddev().toString().substring(0,4) );\n    \n    // now lets try again with a new set...  (odd median)\n    //----------------------------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 5, 7, 10, 19, 20 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( \"popularity\", num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( \"popularity\" );\n    assertNotNull( stats );\n    \n    assertEquals( 5.0, stats.getMin() );\n    assertEquals( 20.0, stats.getMax() );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    \n    // Now try again with faceting\n    //---------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 1, 2, 3, 4, 5, 10, 11, 12, 13, 14 };\n    for( i=0; i<nums.length; i++ ) {\n      int num = nums[i];\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( \"popularity\", num );\n      doc.setField( \"inStock\", i < 5 );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"inStock:true\",  5 ); // make sure they all got in\n    assertNumFound( \"inStock:false\", 5 ); // make sure they all got in\n\n    // facet on 'inStock'\n    query.addStatsFieldFacets( \"popularity\", \"inStock\" );\n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( \"popularity\" );\n    assertNotNull( stats );\n    \n    List<FieldStatsInfo> facets = stats.getFacets().get( \"inStock\" );\n    assertNotNull( facets );\n    assertEquals( 2, facets.size() );\n    FieldStatsInfo inStockF = facets.get(0);\n    FieldStatsInfo inStockT = facets.get(1);\n    if( \"true\".equals( inStockF.getName() ) ) {\n      FieldStatsInfo tmp = inStockF;\n      inStockF = inStockT;\n      inStockT = tmp;\n    }\n\n    // make sure half went to each\n    assertEquals( inStockF.getCount(), inStockT.getCount() );\n    assertEquals( stats.getCount().longValue(), inStockF.getCount()+inStockT.getCount() );\n\n    assertTrue( \"check that min max faceted ok\", inStockF.getMin() > inStockT.getMax() );\n    assertEquals( \"they have the same distribution\", inStockF.getStddev(), inStockT.getStddev() );\n  }\n\n","sourceOld":"  public void testStatistics() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    \n    int i=0;               // 0   1   2   3   4   5   6   7   8   9 \n    int[] nums = new int[] { 23, 26, 38, 46, 55, 63, 77, 84, 92, 94 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( \"popularity\", num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.setRows( 0 );\n    query.setGetFieldStatistics( \"popularity\", true );\n    \n    QueryResponse rsp = server.query( query );\n    FieldStatsInfo stats = rsp.getFieldStatsInfo().get( \"popularity\" );\n    assertNotNull( stats );\n    \n    assertEquals( 23.0, stats.getMin() );\n    assertEquals( 94.0, stats.getMax() );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    assertEquals( (nums[4]+nums[5])/2.0, stats.getMedian() );\n    assertEquals( \"26.4\", stats.getStddev().toString().substring(0,4) );\n    \n    // now lets try again with a new set...  (odd median)\n    //----------------------------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 5, 7, 10, 19, 20 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( \"popularity\", num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( \"popularity\" );\n    assertNotNull( stats );\n    \n    assertEquals( 5.0, stats.getMin() );\n    assertEquals( 20.0, stats.getMax() );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    assertEquals( 10.0, stats.getMedian() );\n    \n    // Now try again with faceting\n    //---------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 1, 2, 3, 4, 5, 10, 11, 12, 13, 14 };\n    for( i=0; i<nums.length; i++ ) {\n      int num = nums[i];\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( \"popularity\", num );\n      doc.setField( \"inStock\", i < 5 );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"inStock:true\",  5 ); // make sure they all got in\n    assertNumFound( \"inStock:false\", 5 ); // make sure they all got in\n\n    // facet on 'inStock'\n    query.addStatsFieldFacets( \"popularity\", \"inStock\" );\n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( \"popularity\" );\n    assertNotNull( stats );\n    \n    List<FieldStatsInfo> facets = stats.getFacets().get( \"inStock\" );\n    assertNotNull( facets );\n    assertEquals( 2, facets.size() );\n    FieldStatsInfo inStockF = facets.get(0);\n    FieldStatsInfo inStockT = facets.get(1);\n    if( \"true\".equals( inStockF.getName() ) ) {\n      FieldStatsInfo tmp = inStockF;\n      inStockF = inStockT;\n      inStockT = tmp;\n    }\n\n    // make sure half went to each\n    assertEquals( inStockF.getCount(), inStockT.getCount() );\n    assertEquals( stats.getCount().longValue(), inStockF.getCount()+inStockT.getCount() );\n\n    assertTrue( \"check that min max faceted ok\", inStockF.getMin() > inStockT.getMax() );\n    assertEquals( \"they have the same distribution\", inStockF.getStddev(), inStockT.getStddev() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c","date":1249333745,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/client/solrj/SolrExampleTests#testStatistics().mjava","pathOld":"src/test/org/apache/solr/client/solrj/SolrExampleTests#testStatistics().mjava","sourceNew":"  public void testStatistics() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n\n    String f = \"val_pi\";\n    \n    int i=0;               // 0   1   2   3   4   5   6   7   8   9 \n    int[] nums = new int[] { 23, 26, 38, 46, 55, 63, 77, 84, 92, 94 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.setRows( 0 );\n    query.setGetFieldStatistics( f );\n    \n    QueryResponse rsp = server.query( query );\n    FieldStatsInfo stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 23.0, stats.getMin() );\n    assertEquals( 94.0, stats.getMax() );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    assertEquals( \"26.4\", stats.getStddev().toString().substring(0,4) );\n    \n    // now lets try again with a new set...  (odd median)\n    //----------------------------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 5, 7, 10, 19, 20 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 5.0, stats.getMin() );\n    assertEquals( 20.0, stats.getMax() );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    \n    // Now try again with faceting\n    //---------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 1, 2, 3, 4, 5, 10, 11, 12, 13, 14 };\n    for( i=0; i<nums.length; i++ ) {\n      int num = nums[i];\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      doc.setField( \"inStock\", i < 5 );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"inStock:true\",  5 ); // make sure they all got in\n    assertNumFound( \"inStock:false\", 5 ); // make sure they all got in\n\n    // facet on 'inStock'\n    query.addStatsFieldFacets( f, \"inStock\" );\n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    List<FieldStatsInfo> facets = stats.getFacets().get( \"inStock\" );\n    assertNotNull( facets );\n    assertEquals( 2, facets.size() );\n    FieldStatsInfo inStockF = facets.get(0);\n    FieldStatsInfo inStockT = facets.get(1);\n    if( \"true\".equals( inStockF.getName() ) ) {\n      FieldStatsInfo tmp = inStockF;\n      inStockF = inStockT;\n      inStockT = tmp;\n    }\n\n    // make sure half went to each\n    assertEquals( inStockF.getCount(), inStockT.getCount() );\n    assertEquals( stats.getCount().longValue(), inStockF.getCount()+inStockT.getCount() );\n\n    assertTrue( \"check that min max faceted ok\", inStockF.getMin() > inStockT.getMax() );\n    assertEquals( \"they have the same distribution\", inStockF.getStddev(), inStockT.getStddev() );\n  }\n\n","sourceOld":"  public void testStatistics() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    \n    int i=0;               // 0   1   2   3   4   5   6   7   8   9 \n    int[] nums = new int[] { 23, 26, 38, 46, 55, 63, 77, 84, 92, 94 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( \"popularity\", num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.setRows( 0 );\n    query.setGetFieldStatistics( \"popularity\" );\n    \n    QueryResponse rsp = server.query( query );\n    FieldStatsInfo stats = rsp.getFieldStatsInfo().get( \"popularity\" );\n    assertNotNull( stats );\n    \n    assertEquals( 23.0, stats.getMin() );\n    assertEquals( 94.0, stats.getMax() );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    assertEquals( \"26.4\", stats.getStddev().toString().substring(0,4) );\n    \n    // now lets try again with a new set...  (odd median)\n    //----------------------------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 5, 7, 10, 19, 20 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( \"popularity\", num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( \"popularity\" );\n    assertNotNull( stats );\n    \n    assertEquals( 5.0, stats.getMin() );\n    assertEquals( 20.0, stats.getMax() );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    \n    // Now try again with faceting\n    //---------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 1, 2, 3, 4, 5, 10, 11, 12, 13, 14 };\n    for( i=0; i<nums.length; i++ ) {\n      int num = nums[i];\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( \"popularity\", num );\n      doc.setField( \"inStock\", i < 5 );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"inStock:true\",  5 ); // make sure they all got in\n    assertNumFound( \"inStock:false\", 5 ); // make sure they all got in\n\n    // facet on 'inStock'\n    query.addStatsFieldFacets( \"popularity\", \"inStock\" );\n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( \"popularity\" );\n    assertNotNull( stats );\n    \n    List<FieldStatsInfo> facets = stats.getFacets().get( \"inStock\" );\n    assertNotNull( facets );\n    assertEquals( 2, facets.size() );\n    FieldStatsInfo inStockF = facets.get(0);\n    FieldStatsInfo inStockT = facets.get(1);\n    if( \"true\".equals( inStockF.getName() ) ) {\n      FieldStatsInfo tmp = inStockF;\n      inStockF = inStockT;\n      inStockT = tmp;\n    }\n\n    // make sure half went to each\n    assertEquals( inStockF.getCount(), inStockT.getCount() );\n    assertEquals( stats.getCount().longValue(), inStockF.getCount()+inStockT.getCount() );\n\n    assertTrue( \"check that min max faceted ok\", inStockF.getMin() > inStockT.getMax() );\n    assertEquals( \"they have the same distribution\", inStockF.getStddev(), inStockT.getStddev() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStatistics().mjava","pathOld":"src/test/org/apache/solr/client/solrj/SolrExampleTests#testStatistics().mjava","sourceNew":"  public void testStatistics() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n\n    String f = \"val_pi\";\n    \n    int i=0;               // 0   1   2   3   4   5   6   7   8   9 \n    int[] nums = new int[] { 23, 26, 38, 46, 55, 63, 77, 84, 92, 94 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.setRows( 0 );\n    query.setGetFieldStatistics( f );\n    \n    QueryResponse rsp = server.query( query );\n    FieldStatsInfo stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 23.0, stats.getMin() );\n    assertEquals( 94.0, stats.getMax() );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    assertEquals( \"26.4\", stats.getStddev().toString().substring(0,4) );\n    \n    // now lets try again with a new set...  (odd median)\n    //----------------------------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 5, 7, 10, 19, 20 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 5.0, stats.getMin() );\n    assertEquals( 20.0, stats.getMax() );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    \n    // Now try again with faceting\n    //---------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 1, 2, 3, 4, 5, 10, 11, 12, 13, 14 };\n    for( i=0; i<nums.length; i++ ) {\n      int num = nums[i];\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      doc.setField( \"inStock\", i < 5 );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"inStock:true\",  5 ); // make sure they all got in\n    assertNumFound( \"inStock:false\", 5 ); // make sure they all got in\n\n    // facet on 'inStock'\n    query.addStatsFieldFacets( f, \"inStock\" );\n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    List<FieldStatsInfo> facets = stats.getFacets().get( \"inStock\" );\n    assertNotNull( facets );\n    assertEquals( 2, facets.size() );\n    FieldStatsInfo inStockF = facets.get(0);\n    FieldStatsInfo inStockT = facets.get(1);\n    if( \"true\".equals( inStockF.getName() ) ) {\n      FieldStatsInfo tmp = inStockF;\n      inStockF = inStockT;\n      inStockT = tmp;\n    }\n\n    // make sure half went to each\n    assertEquals( inStockF.getCount(), inStockT.getCount() );\n    assertEquals( stats.getCount().longValue(), inStockF.getCount()+inStockT.getCount() );\n\n    assertTrue( \"check that min max faceted ok\", inStockF.getMin() > inStockT.getMax() );\n    assertEquals( \"they have the same distribution\", inStockF.getStddev(), inStockT.getStddev() );\n  }\n\n","sourceOld":"  public void testStatistics() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n\n    String f = \"val_pi\";\n    \n    int i=0;               // 0   1   2   3   4   5   6   7   8   9 \n    int[] nums = new int[] { 23, 26, 38, 46, 55, 63, 77, 84, 92, 94 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.setRows( 0 );\n    query.setGetFieldStatistics( f );\n    \n    QueryResponse rsp = server.query( query );\n    FieldStatsInfo stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 23.0, stats.getMin() );\n    assertEquals( 94.0, stats.getMax() );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    assertEquals( \"26.4\", stats.getStddev().toString().substring(0,4) );\n    \n    // now lets try again with a new set...  (odd median)\n    //----------------------------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 5, 7, 10, 19, 20 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 5.0, stats.getMin() );\n    assertEquals( 20.0, stats.getMax() );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    \n    // Now try again with faceting\n    //---------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 1, 2, 3, 4, 5, 10, 11, 12, 13, 14 };\n    for( i=0; i<nums.length; i++ ) {\n      int num = nums[i];\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      doc.setField( \"inStock\", i < 5 );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"inStock:true\",  5 ); // make sure they all got in\n    assertNumFound( \"inStock:false\", 5 ); // make sure they all got in\n\n    // facet on 'inStock'\n    query.addStatsFieldFacets( f, \"inStock\" );\n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    List<FieldStatsInfo> facets = stats.getFacets().get( \"inStock\" );\n    assertNotNull( facets );\n    assertEquals( 2, facets.size() );\n    FieldStatsInfo inStockF = facets.get(0);\n    FieldStatsInfo inStockT = facets.get(1);\n    if( \"true\".equals( inStockF.getName() ) ) {\n      FieldStatsInfo tmp = inStockF;\n      inStockF = inStockT;\n      inStockT = tmp;\n    }\n\n    // make sure half went to each\n    assertEquals( inStockF.getCount(), inStockT.getCount() );\n    assertEquals( stats.getCount().longValue(), inStockF.getCount()+inStockT.getCount() );\n\n    assertTrue( \"check that min max faceted ok\", inStockF.getMin() > inStockT.getMax() );\n    assertEquals( \"they have the same distribution\", inStockF.getStddev(), inStockT.getStddev() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c":["465d12ead875b4472c72492947b22b7669403ea7"],"ad94625fb8d088209f46650c8097196fec67f00c":["dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c"],"465d12ead875b4472c72492947b22b7669403ea7":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["465d12ead875b4472c72492947b22b7669403ea7"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c":["ad94625fb8d088209f46650c8097196fec67f00c"],"465d12ead875b4472c72492947b22b7669403ea7":["dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}