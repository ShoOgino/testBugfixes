{"path":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#inform(SolrCore).mjava","commits":[{"id":"89b4df10540683a05a9d930000b22c3a2cd470e3","date":1196797229,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#inform(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  public void inform(SolrCore core) \n  {\n    termSourceField = args.get(SOURCE_FIELD, args.get(\"termSourceField\"));\n    try {\n      String dir = args.get(INDEX_DIR, args.get(\"spellcheckerIndexDir\"));\n      if (null != dir) {\n        File f = new File(dir);\n        if ( ! f.isAbsolute() ) {\n          f = new File(core.getDataDir(), dir);\n        }\n        dirDescription = f.getAbsolutePath();\n        log.info(\"using spell directory: \" + dirDescription);\n        spellcheckerIndexDir = FSDirectory.getDirectory(f);\n      } else {\n        log.info(\"using RAM based spell directory\");\n      }\n      spellChecker = new SpellChecker(spellcheckerIndexDir);\n    } catch (IOException e) {\n      throw new RuntimeException(\"Cannot open SpellChecker index\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef28ac95f5f85bbf872801277448c0924b0a6827","date":1268600312,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#inform(SolrCore).mjava","pathOld":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) \n  {\n    termSourceField = args.get(SOURCE_FIELD, args.get(\"termSourceField\"));\n    try {\n      String dir = args.get(INDEX_DIR, args.get(\"spellcheckerIndexDir\"));\n      if (null != dir) {\n        File f = new File(dir);\n        if ( ! f.isAbsolute() ) {\n          f = new File(core.getDataDir(), dir);\n        }\n        dirDescription = f.getAbsolutePath();\n        log.info(\"using spell directory: \" + dirDescription);\n        spellcheckerIndexDir = FSDirectory.open(f);\n      } else {\n        log.info(\"using RAM based spell directory\");\n      }\n      spellChecker = new SpellChecker(spellcheckerIndexDir);\n    } catch (IOException e) {\n      throw new RuntimeException(\"Cannot open SpellChecker index\", e);\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core) \n  {\n    termSourceField = args.get(SOURCE_FIELD, args.get(\"termSourceField\"));\n    try {\n      String dir = args.get(INDEX_DIR, args.get(\"spellcheckerIndexDir\"));\n      if (null != dir) {\n        File f = new File(dir);\n        if ( ! f.isAbsolute() ) {\n          f = new File(core.getDataDir(), dir);\n        }\n        dirDescription = f.getAbsolutePath();\n        log.info(\"using spell directory: \" + dirDescription);\n        spellcheckerIndexDir = FSDirectory.getDirectory(f);\n      } else {\n        log.info(\"using RAM based spell directory\");\n      }\n      spellChecker = new SpellChecker(spellcheckerIndexDir);\n    } catch (IOException e) {\n      throw new RuntimeException(\"Cannot open SpellChecker index\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/SpellCheckerRequestHandler#inform(SolrCore).mjava","pathOld":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) \n  {\n    termSourceField = args.get(SOURCE_FIELD, args.get(\"termSourceField\"));\n    try {\n      String dir = args.get(INDEX_DIR, args.get(\"spellcheckerIndexDir\"));\n      if (null != dir) {\n        File f = new File(dir);\n        if ( ! f.isAbsolute() ) {\n          f = new File(core.getDataDir(), dir);\n        }\n        dirDescription = f.getAbsolutePath();\n        log.info(\"using spell directory: \" + dirDescription);\n        spellcheckerIndexDir = FSDirectory.open(f);\n      } else {\n        log.info(\"using RAM based spell directory\");\n      }\n      spellChecker = new SpellChecker(spellcheckerIndexDir);\n    } catch (IOException e) {\n      throw new RuntimeException(\"Cannot open SpellChecker index\", e);\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core) \n  {\n    termSourceField = args.get(SOURCE_FIELD, args.get(\"termSourceField\"));\n    try {\n      String dir = args.get(INDEX_DIR, args.get(\"spellcheckerIndexDir\"));\n      if (null != dir) {\n        File f = new File(dir);\n        if ( ! f.isAbsolute() ) {\n          f = new File(core.getDataDir(), dir);\n        }\n        dirDescription = f.getAbsolutePath();\n        log.info(\"using spell directory: \" + dirDescription);\n        spellcheckerIndexDir = FSDirectory.open(f);\n      } else {\n        log.info(\"using RAM based spell directory\");\n      }\n      spellChecker = new SpellChecker(spellcheckerIndexDir);\n    } catch (IOException e) {\n      throw new RuntimeException(\"Cannot open SpellChecker index\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"89b4df10540683a05a9d930000b22c3a2cd470e3":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ef28ac95f5f85bbf872801277448c0924b0a6827":["89b4df10540683a05a9d930000b22c3a2cd470e3"],"ad94625fb8d088209f46650c8097196fec67f00c":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"89b4df10540683a05a9d930000b22c3a2cd470e3":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["89b4df10540683a05a9d930000b22c3a2cd470e3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ef28ac95f5f85bbf872801277448c0924b0a6827":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}