{"path":"solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler#handleResponse(String,ZkNodeProps,SolrQueryResponse,long).mjava","commits":[{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":0,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler#handleResponse(String,ZkNodeProps,SolrQueryResponse,long).mjava","pathOld":"/dev/null","sourceNew":"  private void handleResponse(String operation, ZkNodeProps m,\n      SolrQueryResponse rsp, long timeout) throws KeeperException, InterruptedException {\n    long time = System.nanoTime();\n\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerConfigSetQueue()\n        .offer(Utils.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      SolrResponse response = SolrResponse.deserialize(event.getBytes());\n      rsp.getValues().addAll(response.getResponse());\n      SimpleOrderedMap exp = (SimpleOrderedMap) response.getResponse().get(\"exception\");\n      if (exp != null) {\n        Integer code = (Integer) exp.get(\"rspCode\");\n        rsp.setException(new SolrException(code != null && code != -1 ? ErrorCode.getErrorCode(code) : ErrorCode.SERVER_ERROR, (String)exp.get(\"msg\")));\n      }\n    } else {\n      if (System.nanoTime() - time >= TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the configset time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the configset error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the configset unknown case\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e29778bfb04e9115636606cb8f74e23ecba15c7b","date":1536084166,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler#handleResponse(String,ZkNodeProps,SolrQueryResponse,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler#handleResponse(String,ZkNodeProps,SolrQueryResponse,long).mjava","sourceNew":"  private void handleResponse(String operation, ZkNodeProps m,\n                              SolrQueryResponse rsp, long timeout) throws KeeperException, InterruptedException {\n    long time = System.nanoTime();\n\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerConfigSetQueue()\n        .offer(Utils.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      SolrResponse response = SolrResponse.deserialize(event.getBytes());\n      rsp.getValues().addAll(response.getResponse());\n      SimpleOrderedMap exp = (SimpleOrderedMap) response.getResponse().get(\"exception\");\n      if (exp != null) {\n        Integer code = (Integer) exp.get(\"rspCode\");\n        rsp.setException(new SolrException(code != null && code != -1 ? ErrorCode.getErrorCode(code) : ErrorCode.SERVER_ERROR, (String) exp.get(\"msg\")));\n      }\n    } else {\n      if (System.nanoTime() - time >= TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the configset time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the configset error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the configset unknown case\");\n      }\n    }\n  }\n\n","sourceOld":"  private void handleResponse(String operation, ZkNodeProps m,\n      SolrQueryResponse rsp, long timeout) throws KeeperException, InterruptedException {\n    long time = System.nanoTime();\n\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerConfigSetQueue()\n        .offer(Utils.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      SolrResponse response = SolrResponse.deserialize(event.getBytes());\n      rsp.getValues().addAll(response.getResponse());\n      SimpleOrderedMap exp = (SimpleOrderedMap) response.getResponse().get(\"exception\");\n      if (exp != null) {\n        Integer code = (Integer) exp.get(\"rspCode\");\n        rsp.setException(new SolrException(code != null && code != -1 ? ErrorCode.getErrorCode(code) : ErrorCode.SERVER_ERROR, (String)exp.get(\"msg\")));\n      }\n    } else {\n      if (System.nanoTime() - time >= TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the configset time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the configset error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the configset unknown case\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfb8001b6712216ccbf7ccc85f830f08ce3b544","date":1576882501,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler#handleResponse(String,ZkNodeProps,SolrQueryResponse,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler#handleResponse(String,ZkNodeProps,SolrQueryResponse,long).mjava","sourceNew":"  private void handleResponse(String operation, ZkNodeProps m,\n                              SolrQueryResponse rsp, long timeout) throws KeeperException, InterruptedException {\n    long time = System.nanoTime();\n\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerConfigSetQueue()\n        .offer(Utils.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      SolrResponse response = OverseerSolrResponse.deserialize(event.getBytes());\n      rsp.getValues().addAll(response.getResponse());\n      SimpleOrderedMap exp = (SimpleOrderedMap) response.getResponse().get(\"exception\");\n      if (exp != null) {\n        Integer code = (Integer) exp.get(\"rspCode\");\n        rsp.setException(new SolrException(code != null && code != -1 ? ErrorCode.getErrorCode(code) : ErrorCode.SERVER_ERROR, (String) exp.get(\"msg\")));\n      }\n    } else {\n      if (System.nanoTime() - time >= TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the configset time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the configset error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the configset unknown case\");\n      }\n    }\n  }\n\n","sourceOld":"  private void handleResponse(String operation, ZkNodeProps m,\n                              SolrQueryResponse rsp, long timeout) throws KeeperException, InterruptedException {\n    long time = System.nanoTime();\n\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerConfigSetQueue()\n        .offer(Utils.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      SolrResponse response = SolrResponse.deserialize(event.getBytes());\n      rsp.getValues().addAll(response.getResponse());\n      SimpleOrderedMap exp = (SimpleOrderedMap) response.getResponse().get(\"exception\");\n      if (exp != null) {\n        Integer code = (Integer) exp.get(\"rspCode\");\n        rsp.setException(new SolrException(code != null && code != -1 ? ErrorCode.getErrorCode(code) : ErrorCode.SERVER_ERROR, (String) exp.get(\"msg\")));\n      }\n    } else {\n      if (System.nanoTime() - time >= TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the configset time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the configset error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the configset unknown case\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["b6a4045268caa5f6094d5a8d80519a1c152295f3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","date":1577276097,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler#handleResponse(String,ZkNodeProps,SolrQueryResponse,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler#handleResponse(String,ZkNodeProps,SolrQueryResponse,long).mjava","sourceNew":"  private void handleResponse(String operation, ZkNodeProps m,\n                              SolrQueryResponse rsp, long timeout) throws KeeperException, InterruptedException {\n    long time = System.nanoTime();\n\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerConfigSetQueue()\n        .offer(Utils.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      SolrResponse response = OverseerSolrResponse.deserialize(event.getBytes());\n      rsp.getValues().addAll(response.getResponse());\n      SimpleOrderedMap exp = (SimpleOrderedMap) response.getResponse().get(\"exception\");\n      if (exp != null) {\n        Integer code = (Integer) exp.get(\"rspCode\");\n        rsp.setException(new SolrException(code != null && code != -1 ? ErrorCode.getErrorCode(code) : ErrorCode.SERVER_ERROR, (String) exp.get(\"msg\")));\n      }\n    } else {\n      if (System.nanoTime() - time >= TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the configset time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the configset error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the configset unknown case\");\n      }\n    }\n  }\n\n","sourceOld":"  private void handleResponse(String operation, ZkNodeProps m,\n                              SolrQueryResponse rsp, long timeout) throws KeeperException, InterruptedException {\n    long time = System.nanoTime();\n\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerConfigSetQueue()\n        .offer(Utils.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      SolrResponse response = SolrResponse.deserialize(event.getBytes());\n      rsp.getValues().addAll(response.getResponse());\n      SimpleOrderedMap exp = (SimpleOrderedMap) response.getResponse().get(\"exception\");\n      if (exp != null) {\n        Integer code = (Integer) exp.get(\"rspCode\");\n        rsp.setException(new SolrException(code != null && code != -1 ? ErrorCode.getErrorCode(code) : ErrorCode.SERVER_ERROR, (String) exp.get(\"msg\")));\n      }\n    } else {\n      if (System.nanoTime() - time >= TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the configset time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the configset error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the configset unknown case\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a4045268caa5f6094d5a8d80519a1c152295f3","date":1580840817,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler#handleResponse(String,ZkNodeProps,SolrQueryResponse,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler#handleResponse(String,ZkNodeProps,SolrQueryResponse,long).mjava","sourceNew":"  private void handleResponse(String operation, ZkNodeProps m,\n                              SolrQueryResponse rsp, long timeout) throws KeeperException, InterruptedException {\n    long time = System.nanoTime();\n\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerConfigSetQueue()\n        .offer(Utils.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      SolrResponse response = OverseerSolrResponseSerializer.deserialize(event.getBytes());\n      rsp.getValues().addAll(response.getResponse());\n      SimpleOrderedMap exp = (SimpleOrderedMap) response.getResponse().get(\"exception\");\n      if (exp != null) {\n        Integer code = (Integer) exp.get(\"rspCode\");\n        rsp.setException(new SolrException(code != null && code != -1 ? ErrorCode.getErrorCode(code) : ErrorCode.SERVER_ERROR, (String) exp.get(\"msg\")));\n      }\n    } else {\n      if (System.nanoTime() - time >= TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the configset time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the configset error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the configset unknown case\");\n      }\n    }\n  }\n\n","sourceOld":"  private void handleResponse(String operation, ZkNodeProps m,\n                              SolrQueryResponse rsp, long timeout) throws KeeperException, InterruptedException {\n    long time = System.nanoTime();\n\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerConfigSetQueue()\n        .offer(Utils.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      SolrResponse response = OverseerSolrResponse.deserialize(event.getBytes());\n      rsp.getValues().addAll(response.getResponse());\n      SimpleOrderedMap exp = (SimpleOrderedMap) response.getResponse().get(\"exception\");\n      if (exp != null) {\n        Integer code = (Integer) exp.get(\"rspCode\");\n        rsp.setException(new SolrException(code != null && code != -1 ? ErrorCode.getErrorCode(code) : ErrorCode.SERVER_ERROR, (String) exp.get(\"msg\")));\n      }\n    } else {\n      if (System.nanoTime() - time >= TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the configset time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the configset error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the configset unknown case\");\n      }\n    }\n  }\n\n","bugFix":["2dfb8001b6712216ccbf7ccc85f830f08ce3b544"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba055e19afc289adcb5bedaf68513793a7254012","date":1591268575,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler#handleResponse(String,ZkNodeProps,SolrQueryResponse,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler#handleResponse(String,ZkNodeProps,SolrQueryResponse,long).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  private void handleResponse(String operation, ZkNodeProps m,\n                              SolrQueryResponse rsp, long timeout) throws KeeperException, InterruptedException {\n    long time = System.nanoTime();\n\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerConfigSetQueue()\n        .offer(Utils.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      SolrResponse response = OverseerSolrResponseSerializer.deserialize(event.getBytes());\n      rsp.getValues().addAll(response.getResponse());\n      @SuppressWarnings({\"rawtypes\"})\n      SimpleOrderedMap exp = (SimpleOrderedMap) response.getResponse().get(\"exception\");\n      if (exp != null) {\n        Integer code = (Integer) exp.get(\"rspCode\");\n        rsp.setException(new SolrException(code != null && code != -1 ? ErrorCode.getErrorCode(code) : ErrorCode.SERVER_ERROR, (String) exp.get(\"msg\")));\n      }\n    } else {\n      if (System.nanoTime() - time >= TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the configset time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the configset error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the configset unknown case\");\n      }\n    }\n  }\n\n","sourceOld":"  private void handleResponse(String operation, ZkNodeProps m,\n                              SolrQueryResponse rsp, long timeout) throws KeeperException, InterruptedException {\n    long time = System.nanoTime();\n\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerConfigSetQueue()\n        .offer(Utils.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      SolrResponse response = OverseerSolrResponseSerializer.deserialize(event.getBytes());\n      rsp.getValues().addAll(response.getResponse());\n      SimpleOrderedMap exp = (SimpleOrderedMap) response.getResponse().get(\"exception\");\n      if (exp != null) {\n        Integer code = (Integer) exp.get(\"rspCode\");\n        rsp.setException(new SolrException(code != null && code != -1 ? ErrorCode.getErrorCode(code) : ErrorCode.SERVER_ERROR, (String) exp.get(\"msg\")));\n      }\n    } else {\n      if (System.nanoTime() - time >= TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the configset time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the configset error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the configset unknown case\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a":["e29778bfb04e9115636606cb8f74e23ecba15c7b","2dfb8001b6712216ccbf7ccc85f830f08ce3b544"],"2dfb8001b6712216ccbf7ccc85f830f08ce3b544":["e29778bfb04e9115636606cb8f74e23ecba15c7b"],"b6a4045268caa5f6094d5a8d80519a1c152295f3":["2dfb8001b6712216ccbf7ccc85f830f08ce3b544"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e29778bfb04e9115636606cb8f74e23ecba15c7b":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"ba055e19afc289adcb5bedaf68513793a7254012":["b6a4045268caa5f6094d5a8d80519a1c152295f3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba055e19afc289adcb5bedaf68513793a7254012"]},"commit2Childs":{"96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a":[],"2dfb8001b6712216ccbf7ccc85f830f08ce3b544":["96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","b6a4045268caa5f6094d5a8d80519a1c152295f3"],"b6a4045268caa5f6094d5a8d80519a1c152295f3":["ba055e19afc289adcb5bedaf68513793a7254012"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["e29778bfb04e9115636606cb8f74e23ecba15c7b"],"e29778bfb04e9115636606cb8f74e23ecba15c7b":["96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","2dfb8001b6712216ccbf7ccc85f830f08ce3b544"],"ba055e19afc289adcb5bedaf68513793a7254012":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}