{"path":"solr/core/src/java/org/apache/solr/analytics/accumulator/BasicAccumulator#BasicAccumulator(SolrIndexSearcher,DocSet,AnalyticsRequest).mjava","commits":[{"id":"ff403346522eaa9de75403763e297e83a3ea585c","date":1384904731,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analytics/accumulator/BasicAccumulator#BasicAccumulator(SolrIndexSearcher,DocSet,AnalyticsRequest).mjava","pathOld":"/dev/null","sourceNew":"  public BasicAccumulator(SolrIndexSearcher searcher, DocSet docs, AnalyticsRequest request) throws IOException {\n    this.searcher = searcher;\n    this.docs = docs;\n    this.request = request;\n    statsCollectorArraySupplier = StatsCollectorSupplierFactory.create(searcher.getSchema(), request);\n    statsCollectors = statsCollectorArraySupplier.get();\n    int size = request.getExpressions().size();\n    expressionNames = new String[size];\n    expressionStrings = new String[size];\n    int count = 0;\n    Collections.sort(request.getExpressions());\n    for (ExpressionRequest expRequest : request.getExpressions()) {\n      expressionNames[count] = expRequest.getName();\n      expressionStrings[count++] = expRequest.getExpressionString();\n    }\n    expressions = makeExpressions(statsCollectors);\n    hiddenExpressions = request.getHiddenExpressions();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["645e9dc687d04dbe961b35c0f3a305c48e892615"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analytics/accumulator/BasicAccumulator#BasicAccumulator(SolrIndexSearcher,DocSet,AnalyticsRequest).mjava","pathOld":"/dev/null","sourceNew":"  public BasicAccumulator(SolrIndexSearcher searcher, DocSet docs, AnalyticsRequest request) throws IOException {\n    this.searcher = searcher;\n    this.docs = docs;\n    this.request = request;\n    statsCollectorArraySupplier = StatsCollectorSupplierFactory.create(searcher.getSchema(), request);\n    statsCollectors = statsCollectorArraySupplier.get();\n    int size = request.getExpressions().size();\n    expressionNames = new String[size];\n    expressionStrings = new String[size];\n    int count = 0;\n    Collections.sort(request.getExpressions());\n    for (ExpressionRequest expRequest : request.getExpressions()) {\n      expressionNames[count] = expRequest.getName();\n      expressionStrings[count++] = expRequest.getExpressionString();\n    }\n    expressions = makeExpressions(statsCollectors);\n    hiddenExpressions = request.getHiddenExpressions();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"645e9dc687d04dbe961b35c0f3a305c48e892615","date":1396352607,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analytics/accumulator/BasicAccumulator#BasicAccumulator(SolrIndexSearcher,DocSet,AnalyticsRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/accumulator/BasicAccumulator#BasicAccumulator(SolrIndexSearcher,DocSet,AnalyticsRequest).mjava","sourceNew":"  public BasicAccumulator(SolrIndexSearcher searcher, DocSet docs, AnalyticsRequest request) throws IOException {\n    this.searcher = searcher;\n    this.docs = docs;\n    this.request = request;\n    final List<ExpressionRequest> exRequests = new ArrayList<ExpressionRequest>(request.getExpressions()); // make a copy here\n    Collections.sort(exRequests);\n    log.info(\"Processing request '\"+request.getName()+\"'\");\n    statsCollectorArraySupplier = StatsCollectorSupplierFactory.create(searcher.getSchema(), exRequests);\n    statsCollectors = statsCollectorArraySupplier.get();\n    int size = exRequests.size();\n    expressionNames = new String[size];\n    expressionStrings = new String[size];\n    int count = 0;\n    for (ExpressionRequest expRequest : exRequests) {\n      expressionNames[count] = expRequest.getName();\n      expressionStrings[count++] = expRequest.getExpressionString();\n    }\n    expressions = makeExpressions(statsCollectors);\n    hiddenExpressions = request.getHiddenExpressions();\n  }\n\n","sourceOld":"  public BasicAccumulator(SolrIndexSearcher searcher, DocSet docs, AnalyticsRequest request) throws IOException {\n    this.searcher = searcher;\n    this.docs = docs;\n    this.request = request;\n    statsCollectorArraySupplier = StatsCollectorSupplierFactory.create(searcher.getSchema(), request);\n    statsCollectors = statsCollectorArraySupplier.get();\n    int size = request.getExpressions().size();\n    expressionNames = new String[size];\n    expressionStrings = new String[size];\n    int count = 0;\n    Collections.sort(request.getExpressions());\n    for (ExpressionRequest expRequest : request.getExpressions()) {\n      expressionNames[count] = expRequest.getName();\n      expressionStrings[count++] = expRequest.getExpressionString();\n    }\n    expressions = makeExpressions(statsCollectors);\n    hiddenExpressions = request.getHiddenExpressions();\n  }\n\n","bugFix":["ff403346522eaa9de75403763e297e83a3ea585c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analytics/accumulator/BasicAccumulator#BasicAccumulator(SolrIndexSearcher,DocSet,AnalyticsRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/accumulator/BasicAccumulator#BasicAccumulator(SolrIndexSearcher,DocSet,AnalyticsRequest).mjava","sourceNew":"  public BasicAccumulator(SolrIndexSearcher searcher, DocSet docs, AnalyticsRequest request) throws IOException {\n    this.searcher = searcher;\n    this.docs = docs;\n    this.request = request;\n    final List<ExpressionRequest> exRequests = new ArrayList<ExpressionRequest>(request.getExpressions()); // make a copy here\n    Collections.sort(exRequests);\n    log.info(\"Processing request '\"+request.getName()+\"'\");\n    statsCollectorArraySupplier = StatsCollectorSupplierFactory.create(searcher.getSchema(), exRequests);\n    statsCollectors = statsCollectorArraySupplier.get();\n    int size = exRequests.size();\n    expressionNames = new String[size];\n    expressionStrings = new String[size];\n    int count = 0;\n    for (ExpressionRequest expRequest : exRequests) {\n      expressionNames[count] = expRequest.getName();\n      expressionStrings[count++] = expRequest.getExpressionString();\n    }\n    expressions = makeExpressions(statsCollectors);\n    hiddenExpressions = request.getHiddenExpressions();\n  }\n\n","sourceOld":"  public BasicAccumulator(SolrIndexSearcher searcher, DocSet docs, AnalyticsRequest request) throws IOException {\n    this.searcher = searcher;\n    this.docs = docs;\n    this.request = request;\n    statsCollectorArraySupplier = StatsCollectorSupplierFactory.create(searcher.getSchema(), request);\n    statsCollectors = statsCollectorArraySupplier.get();\n    int size = request.getExpressions().size();\n    expressionNames = new String[size];\n    expressionStrings = new String[size];\n    int count = 0;\n    Collections.sort(request.getExpressions());\n    for (ExpressionRequest expRequest : request.getExpressions()) {\n      expressionNames[count] = expRequest.getName();\n      expressionStrings[count++] = expRequest.getExpressionString();\n    }\n    expressions = makeExpressions(statsCollectors);\n    hiddenExpressions = request.getHiddenExpressions();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/BasicAccumulator#BasicAccumulator(SolrIndexSearcher,DocSet,AnalyticsRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/accumulator/BasicAccumulator#BasicAccumulator(SolrIndexSearcher,DocSet,AnalyticsRequest).mjava","sourceNew":"  public BasicAccumulator(SolrIndexSearcher searcher, DocSet docs, AnalyticsRequest request) throws IOException {\n    this.searcher = searcher;\n    this.docs = docs;\n    this.request = request;\n    final List<ExpressionRequest> exRequests = new ArrayList<ExpressionRequest>(request.getExpressions()); // make a copy here\n    Collections.sort(exRequests);\n    log.info(\"Processing request '\"+request.getName()+\"'\");\n    statsCollectorArraySupplier = StatsCollectorSupplierFactory.create(searcher.getSchema(), exRequests);\n    statsCollectors = statsCollectorArraySupplier.get();\n    int size = exRequests.size();\n    expressionNames = new String[size];\n    expressionStrings = new String[size];\n    int count = 0;\n    for (ExpressionRequest expRequest : exRequests) {\n      expressionNames[count] = expRequest.getName();\n      expressionStrings[count++] = expRequest.getExpressionString();\n    }\n    expressions = makeExpressions(statsCollectors);\n    hiddenExpressions = request.getHiddenExpressions();\n  }\n\n","sourceOld":"  public BasicAccumulator(SolrIndexSearcher searcher, DocSet docs, AnalyticsRequest request) throws IOException {\n    this.searcher = searcher;\n    this.docs = docs;\n    this.request = request;\n    final List<ExpressionRequest> exRequests = new ArrayList<ExpressionRequest>(request.getExpressions()); // make a copy here\n    Collections.sort(exRequests);\n    log.info(\"Processing request '\"+request.getName()+\"'\");\n    statsCollectorArraySupplier = StatsCollectorSupplierFactory.create(searcher.getSchema(), exRequests);\n    statsCollectors = statsCollectorArraySupplier.get();\n    int size = exRequests.size();\n    expressionNames = new String[size];\n    expressionStrings = new String[size];\n    int count = 0;\n    for (ExpressionRequest expRequest : exRequests) {\n      expressionNames[count] = expRequest.getName();\n      expressionStrings[count++] = expRequest.getExpressionString();\n    }\n    expressions = makeExpressions(statsCollectors);\n    hiddenExpressions = request.getHiddenExpressions();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["ff403346522eaa9de75403763e297e83a3ea585c","645e9dc687d04dbe961b35c0f3a305c48e892615"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ff403346522eaa9de75403763e297e83a3ea585c"],"645e9dc687d04dbe961b35c0f3a305c48e892615":["ff403346522eaa9de75403763e297e83a3ea585c"],"ff403346522eaa9de75403763e297e83a3ea585c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["645e9dc687d04dbe961b35c0f3a305c48e892615"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f719faa74f7213d4a395510dbc1f1b7cb178484"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","ff403346522eaa9de75403763e297e83a3ea585c"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"ff403346522eaa9de75403763e297e83a3ea585c":["5eb2511ababf862ea11e10761c70ee560cd84510","74f45af4339b0daf7a95c820ab88c1aea74fbce0","645e9dc687d04dbe961b35c0f3a305c48e892615"],"645e9dc687d04dbe961b35c0f3a305c48e892615":["5eb2511ababf862ea11e10761c70ee560cd84510","0f719faa74f7213d4a395510dbc1f1b7cb178484"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}