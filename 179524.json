{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/WithinPrefixTreeFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","commits":[{"id":"5aeecf64d57563b4636e7f4222e7ddcde7f8df7b","date":1364392557,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/WithinPrefixTreeFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    return new VisitorTemplate(context, acceptDocs, true) {\n      private FixedBitSet inside;\n      private FixedBitSet outside;\n      private SpatialRelation visitRelation;\n\n      @Override\n      protected void start() {\n        inside = new FixedBitSet(maxDoc);\n        outside = new FixedBitSet(maxDoc);\n      }\n\n      @Override\n      protected DocIdSet finish() {\n        inside.andNot(outside);\n        return inside;\n      }\n\n      @Override\n      protected Iterator<Node> findSubCellsToVisit(Node cell) {\n        //use buffered query shape instead of orig.  Works with null too.\n        return cell.getSubCells(bufferedQueryShape).iterator();\n      }\n\n      @Override\n      protected boolean visit(Node cell) throws IOException {\n        //cell.relate is based on the bufferedQueryShape; we need to examine what\n        // the relation is against the queryShape\n        visitRelation = cell.getShape().relate(queryShape);\n        if (visitRelation == SpatialRelation.WITHIN) {\n          collectDocs(inside);\n          return false;\n        } else if (visitRelation == SpatialRelation.DISJOINT) {\n          collectDocs(outside);\n          return false;\n        } else if (cell.getLevel() == detailLevel) {\n          collectDocs(inside);\n          return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitLeaf(Node cell) throws IOException {\n        SpatialRelation relation = visitRelation;\n        assert visitRelation == cell.getShape().relate(queryShape);\n        if (relation.intersects()) {\n          collectDocs(inside);\n        } else {\n          collectDocs(outside);\n        }\n      }\n\n      @Override\n      protected void visitScanned(Node cell) throws IOException {\n        if (queryShape.relate(cell.getShape()).intersects()) {\n          collectDocs(inside);\n        } else {\n          collectDocs(outside);\n        }\n      }\n\n    }.getDocIdSet();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["3702440de9629167be64098f307cea70809df488"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8259c159da2de2e8528524fb76b244b46cbded59","date":1364478249,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/WithinPrefixTreeFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/WithinPrefixTreeFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    return new VisitorTemplate(context, acceptDocs, true) {\n      private FixedBitSet inside;\n      private FixedBitSet outside;\n      private SpatialRelation visitRelation;\n\n      @Override\n      protected void start() {\n        inside = new FixedBitSet(maxDoc);\n        outside = new FixedBitSet(maxDoc);\n      }\n\n      @Override\n      protected DocIdSet finish() {\n        inside.andNot(outside);\n        return inside;\n      }\n\n      @Override\n      protected Iterator<Cell> findSubCellsToVisit(Cell cell) {\n        //use buffered query shape instead of orig.  Works with null too.\n        return cell.getSubCells(bufferedQueryShape).iterator();\n      }\n\n      @Override\n      protected boolean visit(Cell cell) throws IOException {\n        //cell.relate is based on the bufferedQueryShape; we need to examine what\n        // the relation is against the queryShape\n        visitRelation = cell.getShape().relate(queryShape);\n        if (visitRelation == SpatialRelation.WITHIN) {\n          collectDocs(inside);\n          return false;\n        } else if (visitRelation == SpatialRelation.DISJOINT) {\n          collectDocs(outside);\n          return false;\n        } else if (cell.getLevel() == detailLevel) {\n          collectDocs(inside);\n          return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitLeaf(Cell cell) throws IOException {\n        SpatialRelation relation = visitRelation;\n        assert visitRelation == cell.getShape().relate(queryShape);\n        if (relation.intersects()) {\n          collectDocs(inside);\n        } else {\n          collectDocs(outside);\n        }\n      }\n\n      @Override\n      protected void visitScanned(Cell cell) throws IOException {\n        if (queryShape.relate(cell.getShape()).intersects()) {\n          collectDocs(inside);\n        } else {\n          collectDocs(outside);\n        }\n      }\n\n    }.getDocIdSet();\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    return new VisitorTemplate(context, acceptDocs, true) {\n      private FixedBitSet inside;\n      private FixedBitSet outside;\n      private SpatialRelation visitRelation;\n\n      @Override\n      protected void start() {\n        inside = new FixedBitSet(maxDoc);\n        outside = new FixedBitSet(maxDoc);\n      }\n\n      @Override\n      protected DocIdSet finish() {\n        inside.andNot(outside);\n        return inside;\n      }\n\n      @Override\n      protected Iterator<Node> findSubCellsToVisit(Node cell) {\n        //use buffered query shape instead of orig.  Works with null too.\n        return cell.getSubCells(bufferedQueryShape).iterator();\n      }\n\n      @Override\n      protected boolean visit(Node cell) throws IOException {\n        //cell.relate is based on the bufferedQueryShape; we need to examine what\n        // the relation is against the queryShape\n        visitRelation = cell.getShape().relate(queryShape);\n        if (visitRelation == SpatialRelation.WITHIN) {\n          collectDocs(inside);\n          return false;\n        } else if (visitRelation == SpatialRelation.DISJOINT) {\n          collectDocs(outside);\n          return false;\n        } else if (cell.getLevel() == detailLevel) {\n          collectDocs(inside);\n          return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitLeaf(Node cell) throws IOException {\n        SpatialRelation relation = visitRelation;\n        assert visitRelation == cell.getShape().relate(queryShape);\n        if (relation.intersects()) {\n          collectDocs(inside);\n        } else {\n          collectDocs(outside);\n        }\n      }\n\n      @Override\n      protected void visitScanned(Node cell) throws IOException {\n        if (queryShape.relate(cell.getShape()).intersects()) {\n          collectDocs(inside);\n        } else {\n          collectDocs(outside);\n        }\n      }\n\n    }.getDocIdSet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3702440de9629167be64098f307cea70809df488","date":1365439741,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/WithinPrefixTreeFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/WithinPrefixTreeFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    return new VisitorTemplate(context, acceptDocs, true) {\n      private FixedBitSet inside;\n      private FixedBitSet outside;\n      private SpatialRelation visitRelation;\n\n      @Override\n      protected void start() {\n        inside = new FixedBitSet(maxDoc);\n        outside = new FixedBitSet(maxDoc);\n      }\n\n      @Override\n      protected DocIdSet finish() {\n        inside.andNot(outside);\n        return inside;\n      }\n\n      @Override\n      protected Iterator<Cell> findSubCellsToVisit(Cell cell) {\n        //use buffered query shape instead of orig.  Works with null too.\n        return cell.getSubCells(bufferedQueryShape).iterator();\n      }\n\n      @Override\n      protected boolean visit(Cell cell) throws IOException {\n        //cell.relate is based on the bufferedQueryShape; we need to examine what\n        // the relation is against the queryShape\n        visitRelation = cell.getShape().relate(queryShape);\n        if (visitRelation == SpatialRelation.WITHIN) {\n          collectDocs(inside);\n          return false;\n        } else if (visitRelation == SpatialRelation.DISJOINT) {\n          collectDocs(outside);\n          return false;\n        } else if (cell.getLevel() == detailLevel) {\n          collectDocs(inside);\n          return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitLeaf(Cell cell) throws IOException {\n        //visitRelation is declared as a field, populated by visit() so we don't recompute it\n        assert detailLevel != cell.getLevel();\n        assert visitRelation == cell.getShape().relate(queryShape);\n        if (allCellsIntersectQuery(cell, visitRelation))\n          collectDocs(inside);\n        else\n          collectDocs(outside);\n      }\n\n      /** Returns true if the provided cell, and all its sub-cells down to\n       * detailLevel all intersect the queryShape.\n       */\n      private boolean allCellsIntersectQuery(Cell cell, SpatialRelation relate/*cell to query*/) {\n        if (relate == null)\n          relate = cell.getShape().relate(queryShape);\n        if (cell.getLevel() == detailLevel)\n          return relate.intersects();\n        if (relate == SpatialRelation.WITHIN)\n          return true;\n        if (relate == SpatialRelation.DISJOINT)\n          return false;\n        // Note: Generating all these cells just to determine intersection is not ideal.\n        // It was easy to implement but could be optimized. For example if the docs\n        // in question are already marked in the 'outside' bitset then it can be avoided.\n        Collection<Cell> subCells = cell.getSubCells(null);\n        for (Cell subCell : subCells) {\n          if (!allCellsIntersectQuery(subCell, null))//recursion\n            return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitScanned(Cell cell) throws IOException {\n        if (allCellsIntersectQuery(cell, null)) {\n          collectDocs(inside);\n        } else {\n          collectDocs(outside);\n        }\n      }\n\n    }.getDocIdSet();\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    return new VisitorTemplate(context, acceptDocs, true) {\n      private FixedBitSet inside;\n      private FixedBitSet outside;\n      private SpatialRelation visitRelation;\n\n      @Override\n      protected void start() {\n        inside = new FixedBitSet(maxDoc);\n        outside = new FixedBitSet(maxDoc);\n      }\n\n      @Override\n      protected DocIdSet finish() {\n        inside.andNot(outside);\n        return inside;\n      }\n\n      @Override\n      protected Iterator<Cell> findSubCellsToVisit(Cell cell) {\n        //use buffered query shape instead of orig.  Works with null too.\n        return cell.getSubCells(bufferedQueryShape).iterator();\n      }\n\n      @Override\n      protected boolean visit(Cell cell) throws IOException {\n        //cell.relate is based on the bufferedQueryShape; we need to examine what\n        // the relation is against the queryShape\n        visitRelation = cell.getShape().relate(queryShape);\n        if (visitRelation == SpatialRelation.WITHIN) {\n          collectDocs(inside);\n          return false;\n        } else if (visitRelation == SpatialRelation.DISJOINT) {\n          collectDocs(outside);\n          return false;\n        } else if (cell.getLevel() == detailLevel) {\n          collectDocs(inside);\n          return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitLeaf(Cell cell) throws IOException {\n        SpatialRelation relation = visitRelation;\n        assert visitRelation == cell.getShape().relate(queryShape);\n        if (relation.intersects()) {\n          collectDocs(inside);\n        } else {\n          collectDocs(outside);\n        }\n      }\n\n      @Override\n      protected void visitScanned(Cell cell) throws IOException {\n        if (queryShape.relate(cell.getShape()).intersects()) {\n          collectDocs(inside);\n        } else {\n          collectDocs(outside);\n        }\n      }\n\n    }.getDocIdSet();\n  }\n\n","bugFix":["5aeecf64d57563b4636e7f4222e7ddcde7f8df7b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6","date":1397789149,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/WithinPrefixTreeFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/WithinPrefixTreeFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    return new VisitorTemplate(context, acceptDocs, true) {\n      private FixedBitSet inside;\n      private FixedBitSet outside;\n      private SpatialRelation visitRelation;\n\n      @Override\n      protected void start() {\n        inside = new FixedBitSet(maxDoc);\n        outside = new FixedBitSet(maxDoc);\n      }\n\n      @Override\n      protected DocIdSet finish() {\n        inside.andNot(outside);\n        return inside;\n      }\n\n      @Override\n      protected CellIterator findSubCellsToVisit(Cell cell) {\n        //use buffered query shape instead of orig.  Works with null too.\n        return cell.getNextLevelCells(bufferedQueryShape);\n      }\n\n      @Override\n      protected boolean visit(Cell cell) throws IOException {\n        //cell.relate is based on the bufferedQueryShape; we need to examine what\n        // the relation is against the queryShape\n        visitRelation = cell.getShape().relate(queryShape);\n        if (visitRelation == SpatialRelation.WITHIN) {\n          collectDocs(inside);\n          return false;\n        } else if (visitRelation == SpatialRelation.DISJOINT) {\n          collectDocs(outside);\n          return false;\n        } else if (cell.getLevel() == detailLevel) {\n          collectDocs(inside);\n          return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitLeaf(Cell cell) throws IOException {\n        //visitRelation is declared as a field, populated by visit() so we don't recompute it\n        assert detailLevel != cell.getLevel();\n        assert visitRelation == cell.getShape().relate(queryShape);\n        if (allCellsIntersectQuery(cell, visitRelation))\n          collectDocs(inside);\n        else\n          collectDocs(outside);\n      }\n\n      /** Returns true if the provided cell, and all its sub-cells down to\n       * detailLevel all intersect the queryShape.\n       */\n      private boolean allCellsIntersectQuery(Cell cell, SpatialRelation relate/*cell to query*/) {\n        if (relate == null)\n          relate = cell.getShape().relate(queryShape);\n        if (cell.getLevel() == detailLevel)\n          return relate.intersects();\n        if (relate == SpatialRelation.WITHIN)\n          return true;\n        if (relate == SpatialRelation.DISJOINT)\n          return false;\n        // Note: Generating all these cells just to determine intersection is not ideal.\n        // The real solution is LUCENE-4869.\n        CellIterator subCells = cell.getNextLevelCells(null);\n        while (subCells.hasNext()) {\n          Cell subCell = subCells.next();\n          if (!allCellsIntersectQuery(subCell, null))//recursion\n            return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitScanned(Cell cell) throws IOException {\n        if (allCellsIntersectQuery(cell, null)) {\n          collectDocs(inside);\n        } else {\n          collectDocs(outside);\n        }\n      }\n\n    }.getDocIdSet();\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    return new VisitorTemplate(context, acceptDocs, true) {\n      private FixedBitSet inside;\n      private FixedBitSet outside;\n      private SpatialRelation visitRelation;\n\n      @Override\n      protected void start() {\n        inside = new FixedBitSet(maxDoc);\n        outside = new FixedBitSet(maxDoc);\n      }\n\n      @Override\n      protected DocIdSet finish() {\n        inside.andNot(outside);\n        return inside;\n      }\n\n      @Override\n      protected Iterator<Cell> findSubCellsToVisit(Cell cell) {\n        //use buffered query shape instead of orig.  Works with null too.\n        return cell.getSubCells(bufferedQueryShape).iterator();\n      }\n\n      @Override\n      protected boolean visit(Cell cell) throws IOException {\n        //cell.relate is based on the bufferedQueryShape; we need to examine what\n        // the relation is against the queryShape\n        visitRelation = cell.getShape().relate(queryShape);\n        if (visitRelation == SpatialRelation.WITHIN) {\n          collectDocs(inside);\n          return false;\n        } else if (visitRelation == SpatialRelation.DISJOINT) {\n          collectDocs(outside);\n          return false;\n        } else if (cell.getLevel() == detailLevel) {\n          collectDocs(inside);\n          return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitLeaf(Cell cell) throws IOException {\n        //visitRelation is declared as a field, populated by visit() so we don't recompute it\n        assert detailLevel != cell.getLevel();\n        assert visitRelation == cell.getShape().relate(queryShape);\n        if (allCellsIntersectQuery(cell, visitRelation))\n          collectDocs(inside);\n        else\n          collectDocs(outside);\n      }\n\n      /** Returns true if the provided cell, and all its sub-cells down to\n       * detailLevel all intersect the queryShape.\n       */\n      private boolean allCellsIntersectQuery(Cell cell, SpatialRelation relate/*cell to query*/) {\n        if (relate == null)\n          relate = cell.getShape().relate(queryShape);\n        if (cell.getLevel() == detailLevel)\n          return relate.intersects();\n        if (relate == SpatialRelation.WITHIN)\n          return true;\n        if (relate == SpatialRelation.DISJOINT)\n          return false;\n        // Note: Generating all these cells just to determine intersection is not ideal.\n        // It was easy to implement but could be optimized. For example if the docs\n        // in question are already marked in the 'outside' bitset then it can be avoided.\n        Collection<Cell> subCells = cell.getSubCells(null);\n        for (Cell subCell : subCells) {\n          if (!allCellsIntersectQuery(subCell, null))//recursion\n            return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitScanned(Cell cell) throws IOException {\n        if (allCellsIntersectQuery(cell, null)) {\n          collectDocs(inside);\n        } else {\n          collectDocs(outside);\n        }\n      }\n\n    }.getDocIdSet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/WithinPrefixTreeFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":null,"sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    return new VisitorTemplate(context, acceptDocs, true) {\n      private FixedBitSet inside;\n      private FixedBitSet outside;\n      private SpatialRelation visitRelation;\n\n      @Override\n      protected void start() {\n        inside = new FixedBitSet(maxDoc);\n        outside = new FixedBitSet(maxDoc);\n      }\n\n      @Override\n      protected DocIdSet finish() {\n        inside.andNot(outside);\n        return inside;\n      }\n\n      @Override\n      protected CellIterator findSubCellsToVisit(Cell cell) {\n        //use buffered query shape instead of orig.  Works with null too.\n        return cell.getNextLevelCells(bufferedQueryShape);\n      }\n\n      @Override\n      protected boolean visit(Cell cell) throws IOException {\n        //cell.relate is based on the bufferedQueryShape; we need to examine what\n        // the relation is against the queryShape\n        visitRelation = cell.getShape().relate(queryShape);\n        if (visitRelation == SpatialRelation.WITHIN) {\n          collectDocs(inside);\n          return false;\n        } else if (visitRelation == SpatialRelation.DISJOINT) {\n          collectDocs(outside);\n          return false;\n        } else if (cell.getLevel() == detailLevel) {\n          collectDocs(inside);\n          return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitLeaf(Cell cell) throws IOException {\n        //visitRelation is declared as a field, populated by visit() so we don't recompute it\n        assert detailLevel != cell.getLevel();\n        assert visitRelation == cell.getShape().relate(queryShape);\n        if (allCellsIntersectQuery(cell, visitRelation))\n          collectDocs(inside);\n        else\n          collectDocs(outside);\n      }\n\n      /** Returns true if the provided cell, and all its sub-cells down to\n       * detailLevel all intersect the queryShape.\n       */\n      private boolean allCellsIntersectQuery(Cell cell, SpatialRelation relate/*cell to query*/) {\n        if (relate == null)\n          relate = cell.getShape().relate(queryShape);\n        if (cell.getLevel() == detailLevel)\n          return relate.intersects();\n        if (relate == SpatialRelation.WITHIN)\n          return true;\n        if (relate == SpatialRelation.DISJOINT)\n          return false;\n        // Note: Generating all these cells just to determine intersection is not ideal.\n        // The real solution is LUCENE-4869.\n        CellIterator subCells = cell.getNextLevelCells(null);\n        while (subCells.hasNext()) {\n          Cell subCell = subCells.next();\n          if (!allCellsIntersectQuery(subCell, null))//recursion\n            return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitScanned(Cell cell) throws IOException {\n        if (allCellsIntersectQuery(cell, null)) {\n          collectDocs(inside);\n        } else {\n          collectDocs(outside);\n        }\n      }\n\n    }.getDocIdSet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6":["3702440de9629167be64098f307cea70809df488"],"3702440de9629167be64098f307cea70809df488":["8259c159da2de2e8528524fb76b244b46cbded59"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"8259c159da2de2e8528524fb76b244b46cbded59":["5aeecf64d57563b4636e7f4222e7ddcde7f8df7b"],"5aeecf64d57563b4636e7f4222e7ddcde7f8df7b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5aeecf64d57563b4636e7f4222e7ddcde7f8df7b"],"8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"3702440de9629167be64098f307cea70809df488":["8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8259c159da2de2e8528524fb76b244b46cbded59":["3702440de9629167be64098f307cea70809df488"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"5aeecf64d57563b4636e7f4222e7ddcde7f8df7b":["8259c159da2de2e8528524fb76b244b46cbded59"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}