{"path":"src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","commits":[{"id":"3a04bdb295a363a052bdc5a2fcd6e8ce977aa51c","date":1224776958,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","pathOld":"/dev/null","sourceNew":"  public void testOptions() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent tvComp = core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.IDF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorParams.TF_IDF, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n\n    SolrRequestHandler handler = core.getRequestHandler(\"tvrh\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    NamedList termVectors = (NamedList) values.get(TermVectorComponent.TERM_VECTORS);\n    assertTrue(\"termVectors is null and it shouldn't be\", termVectors != null);\n    System.out.println(\"TVs: \" + termVectors);\n    NamedList doc = (NamedList) termVectors.getVal(0);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    assertTrue(doc.size() + \" does not equal: \" + 2, doc.size() == 2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["df18b2465217a237531d0d944c22ea4a4316411e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a2686717a32b40222a4361bd16ae295511cb8ce7","date":1226500515,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","pathOld":"src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","sourceNew":"  public void testOptions() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent tvComp = core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorParams.TF_IDF, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n\n    SolrRequestHandler handler = core.getRequestHandler(\"tvrh\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    NamedList termVectors = (NamedList) values.get(TermVectorComponent.TERM_VECTORS);\n    assertTrue(\"termVectors is null and it shouldn't be\", termVectors != null);\n    System.out.println(\"TVs: \" + termVectors);\n    NamedList doc = (NamedList) termVectors.getVal(0);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    assertTrue(doc.size() + \" does not equal: \" + 2, doc.size() == 2);\n  }\n\n","sourceOld":"  public void testOptions() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent tvComp = core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.IDF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorParams.TF_IDF, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n\n    SolrRequestHandler handler = core.getRequestHandler(\"tvrh\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    NamedList termVectors = (NamedList) values.get(TermVectorComponent.TERM_VECTORS);\n    assertTrue(\"termVectors is null and it shouldn't be\", termVectors != null);\n    System.out.println(\"TVs: \" + termVectors);\n    NamedList doc = (NamedList) termVectors.getVal(0);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    assertTrue(doc.size() + \" does not equal: \" + 2, doc.size() == 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06aac04eefdea12e25b74f574393532f90a7d590","date":1243427649,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","pathOld":"src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","sourceNew":"  public void testOptions() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent tvComp = core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorParams.TF_IDF, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n\n    SolrRequestHandler handler = core.getRequestHandler(\"tvrh\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    NamedList termVectors = (NamedList) values.get(TermVectorComponent.TERM_VECTORS);\n    assertTrue(\"termVectors is null and it shouldn't be\", termVectors != null);\n    System.out.println(\"TVs: \" + termVectors);\n    NamedList doc = (NamedList) termVectors.getVal(0);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    assertTrue(doc.size() + \" does not equal: \" + 2, doc.size() == 2);\n    NamedList offtv = (NamedList) doc.get(\"test_posofftv\");\n    assertTrue(\"offtv is null and it shouldn't be\", offtv != null);\n    assertTrue(\"offtv Size: \" + offtv.size() + \" is not: \" + 2, offtv.size() == 2);\n    NamedList another = (NamedList) offtv.get(\"anoth\");\n    NamedList offsets = (NamedList) another.get(\"offsets\");\n    assertTrue(\"offsets is null and it shouldn't be\", offsets != null);\n    assertTrue(\"offsets Size: \" + offsets.size() + \" is not greater than: \" + 0, offsets.size() > 0);\n    NamedList pos = (NamedList) another.get(\"positions\");\n    assertTrue(\"pos is null and it shouldn't be\", pos != null);\n    assertTrue(\"pos Size: \" + pos.size() + \" is not greater than: \" + 0, pos.size() > 0);\n    Integer df = (Integer) another.get(\"df\");\n    assertTrue(\"df is null and it shouldn't be\", df != null);\n    assertTrue(df + \" does not equal: \" + 2, df == 2);\n    Double tfIdf = (Double) another.get(\"tf-idf\");\n    assertTrue(\"tfIdf is null and it shouldn't be\", tfIdf != null);\n    assertTrue(tfIdf + \" does not equal: \" + 0.5, tfIdf == 0.5);\n\n\n  }\n\n","sourceOld":"  public void testOptions() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent tvComp = core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorParams.TF_IDF, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n\n    SolrRequestHandler handler = core.getRequestHandler(\"tvrh\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    NamedList termVectors = (NamedList) values.get(TermVectorComponent.TERM_VECTORS);\n    assertTrue(\"termVectors is null and it shouldn't be\", termVectors != null);\n    System.out.println(\"TVs: \" + termVectors);\n    NamedList doc = (NamedList) termVectors.getVal(0);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    assertTrue(doc.size() + \" does not equal: \" + 2, doc.size() == 2);\n  }\n\n","bugFix":null,"bugIntro":["df18b2465217a237531d0d944c22ea4a4316411e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","pathOld":"src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","sourceNew":"  public void testOptions() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent tvComp = core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorParams.TF_IDF, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n\n    SolrRequestHandler handler = core.getRequestHandler(\"tvrh\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    NamedList termVectors = (NamedList) values.get(TermVectorComponent.TERM_VECTORS);\n    assertTrue(\"termVectors is null and it shouldn't be\", termVectors != null);\n    System.out.println(\"TVs: \" + termVectors);\n    NamedList doc = (NamedList) termVectors.getVal(0);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    assertTrue(doc.size() + \" does not equal: \" + 2, doc.size() == 2);\n    NamedList offtv = (NamedList) doc.get(\"test_posofftv\");\n    assertTrue(\"offtv is null and it shouldn't be\", offtv != null);\n    assertTrue(\"offtv Size: \" + offtv.size() + \" is not: \" + 2, offtv.size() == 2);\n    NamedList another = (NamedList) offtv.get(\"anoth\");\n    NamedList offsets = (NamedList) another.get(\"offsets\");\n    assertTrue(\"offsets is null and it shouldn't be\", offsets != null);\n    assertTrue(\"offsets Size: \" + offsets.size() + \" is not greater than: \" + 0, offsets.size() > 0);\n    NamedList pos = (NamedList) another.get(\"positions\");\n    assertTrue(\"pos is null and it shouldn't be\", pos != null);\n    assertTrue(\"pos Size: \" + pos.size() + \" is not greater than: \" + 0, pos.size() > 0);\n    Integer df = (Integer) another.get(\"df\");\n    assertTrue(\"df is null and it shouldn't be\", df != null);\n    assertTrue(df + \" does not equal: \" + 2, df == 2);\n    Double tfIdf = (Double) another.get(\"tf-idf\");\n    assertTrue(\"tfIdf is null and it shouldn't be\", tfIdf != null);\n    assertTrue(tfIdf + \" does not equal: \" + 0.5, tfIdf == 0.5);\n\n\n  }\n\n","sourceOld":"  public void testOptions() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent tvComp = core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorParams.TF_IDF, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n\n    SolrRequestHandler handler = core.getRequestHandler(\"tvrh\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    NamedList termVectors = (NamedList) values.get(TermVectorComponent.TERM_VECTORS);\n    assertTrue(\"termVectors is null and it shouldn't be\", termVectors != null);\n    System.out.println(\"TVs: \" + termVectors);\n    NamedList doc = (NamedList) termVectors.getVal(0);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    assertTrue(doc.size() + \" does not equal: \" + 2, doc.size() == 2);\n    NamedList offtv = (NamedList) doc.get(\"test_posofftv\");\n    assertTrue(\"offtv is null and it shouldn't be\", offtv != null);\n    assertTrue(\"offtv Size: \" + offtv.size() + \" is not: \" + 2, offtv.size() == 2);\n    NamedList another = (NamedList) offtv.get(\"anoth\");\n    NamedList offsets = (NamedList) another.get(\"offsets\");\n    assertTrue(\"offsets is null and it shouldn't be\", offsets != null);\n    assertTrue(\"offsets Size: \" + offsets.size() + \" is not greater than: \" + 0, offsets.size() > 0);\n    NamedList pos = (NamedList) another.get(\"positions\");\n    assertTrue(\"pos is null and it shouldn't be\", pos != null);\n    assertTrue(\"pos Size: \" + pos.size() + \" is not greater than: \" + 0, pos.size() > 0);\n    Integer df = (Integer) another.get(\"df\");\n    assertTrue(\"df is null and it shouldn't be\", df != null);\n    assertTrue(df + \" does not equal: \" + 2, df == 2);\n    Double tfIdf = (Double) another.get(\"tf-idf\");\n    assertTrue(\"tfIdf is null and it shouldn't be\", tfIdf != null);\n    assertTrue(tfIdf + \" does not equal: \" + 0.5, tfIdf == 0.5);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"06aac04eefdea12e25b74f574393532f90a7d590":["a2686717a32b40222a4361bd16ae295511cb8ce7"],"a2686717a32b40222a4361bd16ae295511cb8ce7":["3a04bdb295a363a052bdc5a2fcd6e8ce977aa51c"],"ad94625fb8d088209f46650c8097196fec67f00c":["06aac04eefdea12e25b74f574393532f90a7d590"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a04bdb295a363a052bdc5a2fcd6e8ce977aa51c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["3a04bdb295a363a052bdc5a2fcd6e8ce977aa51c"],"06aac04eefdea12e25b74f574393532f90a7d590":["ad94625fb8d088209f46650c8097196fec67f00c"],"a2686717a32b40222a4361bd16ae295511cb8ce7":["06aac04eefdea12e25b74f574393532f90a7d590"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"3a04bdb295a363a052bdc5a2fcd6e8ce977aa51c":["a2686717a32b40222a4361bd16ae295511cb8ce7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}