{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#balanceProperty(ClusterState,CloudConfig,ZkNodeProps,NamedList).mjava","commits":[{"id":"c526352db87264a72a7a9ad68c1b769b81e54305","date":1598780188,"type":1,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#balanceProperty(ClusterState,CloudConfig,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#balanceProperty(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void balanceProperty(ClusterState clusterState, CloudConfig cloudConfig, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) || StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The '\" + COLLECTION_PROP + \"' and '\" + PROPERTY_PROP +\n              \"' parameters are required for the BALANCESHARDUNIQUE operation, no action taken\");\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    Map<String, Object> m = new HashMap<>();\n    m.put(Overseer.QUEUE_OPERATION, BALANCESHARDUNIQUE.toLower());\n    m.putAll(message.getProperties());\n    overseer.offerStateUpdate(Utils.toJSON(m));\n  }\n\n","sourceOld":"  private void balanceProperty(ClusterState clusterState, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) || StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The '\" + COLLECTION_PROP + \"' and '\" + PROPERTY_PROP +\n              \"' parameters are required for the BALANCESHARDUNIQUE operation, no action taken\");\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    Map<String, Object> m = new HashMap<>();\n    m.put(Overseer.QUEUE_OPERATION, BALANCESHARDUNIQUE.toLower());\n    m.putAll(message.getProperties());\n    overseer.offerStateUpdate(Utils.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7b17e79a71117668ecbf8d3417c876e41396565","date":1598973672,"type":5,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#balanceProperty(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#balanceProperty(ClusterState,CloudConfig,ZkNodeProps,NamedList).mjava","sourceNew":"  private void balanceProperty(ClusterState clusterState, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) || StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The '\" + COLLECTION_PROP + \"' and '\" + PROPERTY_PROP +\n              \"' parameters are required for the BALANCESHARDUNIQUE operation, no action taken\");\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    Map<String, Object> m = new HashMap<>();\n    m.put(Overseer.QUEUE_OPERATION, BALANCESHARDUNIQUE.toLower());\n    m.putAll(message.getProperties());\n    overseer.offerStateUpdate(Utils.toJSON(m));\n  }\n\n","sourceOld":"  private void balanceProperty(ClusterState clusterState, CloudConfig cloudConfig, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) || StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The '\" + COLLECTION_PROP + \"' and '\" + PROPERTY_PROP +\n              \"' parameters are required for the BALANCESHARDUNIQUE operation, no action taken\");\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    Map<String, Object> m = new HashMap<>();\n    m.put(Overseer.QUEUE_OPERATION, BALANCESHARDUNIQUE.toLower());\n    m.putAll(message.getProperties());\n    overseer.offerStateUpdate(Utils.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7b17e79a71117668ecbf8d3417c876e41396565":["c526352db87264a72a7a9ad68c1b769b81e54305"],"c526352db87264a72a7a9ad68c1b769b81e54305":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7b17e79a71117668ecbf8d3417c876e41396565"]},"commit2Childs":{"e7b17e79a71117668ecbf8d3417c876e41396565":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c526352db87264a72a7a9ad68c1b769b81e54305":["e7b17e79a71117668ecbf8d3417c876e41396565"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c526352db87264a72a7a9ad68c1b769b81e54305"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}