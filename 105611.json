{"path":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTLookupTest#assertMatchEquals(List[LookupResult],String...).mjava","commits":[{"id":"e230a61047bc041516c811baa08a7174d6f8322a","date":1306175633,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTLookupTest#assertMatchEquals(List[LookupResult],String...).mjava","pathOld":"solr/src/test/org/apache/solr/spelling/suggest/fst/FSTLookupTest#assertMatchEquals(List[LookupResult],String...).mjava","sourceNew":"  private void assertMatchEquals(List<LookupResult> res, String... expected) {\n    String [] result = new String [res.size()];\n    for (int i = 0; i < res.size(); i++)\n      result[i] = res.get(i).toString();\n    \n    if (!Arrays.equals(expected, result)) {\n      int colLen = Math.max(maxLen(expected), maxLen(result));\n      \n      StringBuilder b = new StringBuilder();\n      String format = \"%\" + colLen + \"s  \" + \"%\" + colLen + \"s\\n\"; \n      b.append(String.format(Locale.ENGLISH, format, \"Expected\", \"Result\"));\n      for (int i = 0; i < Math.max(result.length, expected.length); i++) {\n        b.append(String.format(Locale.ENGLISH, format, \n            i < expected.length ? expected[i] : \"--\", \n            i < result.length ? result[i] : \"--\"));\n      }\n\n      System.err.println(b.toString());\n      fail(\"Expected different output:\\n\" + b.toString());\n    }\n  }\n\n","sourceOld":"  private void assertMatchEquals(List<LookupResult> res, String... expected) {\n    String [] result = new String [res.size()];\n    for (int i = 0; i < res.size(); i++)\n      result[i] = res.get(i).toString();\n    \n    if (!Arrays.equals(expected, result)) {\n      int colLen = Math.max(maxLen(expected), maxLen(result));\n      \n      StringBuilder b = new StringBuilder();\n      String format = \"%\" + colLen + \"s  \" + \"%\" + colLen + \"s\\n\"; \n      b.append(String.format(Locale.ENGLISH, format, \"Expected\", \"Result\"));\n      for (int i = 0; i < Math.max(result.length, expected.length); i++) {\n        b.append(String.format(Locale.ENGLISH, format, \n            i < expected.length ? expected[i] : \"--\", \n            i < result.length ? result[i] : \"--\"));\n      }\n\n      System.err.println(b.toString());\n      fail(\"Expected different output:\\n\" + b.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTLookupTest#assertMatchEquals(List[LookupResult],String...).mjava","pathOld":"solr/src/test/org/apache/solr/spelling/suggest/fst/FSTLookupTest#assertMatchEquals(List[LookupResult],String...).mjava","sourceNew":"  private void assertMatchEquals(List<LookupResult> res, String... expected) {\n    String [] result = new String [res.size()];\n    for (int i = 0; i < res.size(); i++)\n      result[i] = res.get(i).toString();\n    \n    if (!Arrays.equals(expected, result)) {\n      int colLen = Math.max(maxLen(expected), maxLen(result));\n      \n      StringBuilder b = new StringBuilder();\n      String format = \"%\" + colLen + \"s  \" + \"%\" + colLen + \"s\\n\"; \n      b.append(String.format(Locale.ENGLISH, format, \"Expected\", \"Result\"));\n      for (int i = 0; i < Math.max(result.length, expected.length); i++) {\n        b.append(String.format(Locale.ENGLISH, format, \n            i < expected.length ? expected[i] : \"--\", \n            i < result.length ? result[i] : \"--\"));\n      }\n\n      System.err.println(b.toString());\n      fail(\"Expected different output:\\n\" + b.toString());\n    }\n  }\n\n","sourceOld":"  private void assertMatchEquals(List<LookupResult> res, String... expected) {\n    String [] result = new String [res.size()];\n    for (int i = 0; i < res.size(); i++)\n      result[i] = res.get(i).toString();\n    \n    if (!Arrays.equals(expected, result)) {\n      int colLen = Math.max(maxLen(expected), maxLen(result));\n      \n      StringBuilder b = new StringBuilder();\n      String format = \"%\" + colLen + \"s  \" + \"%\" + colLen + \"s\\n\"; \n      b.append(String.format(Locale.ENGLISH, format, \"Expected\", \"Result\"));\n      for (int i = 0; i < Math.max(result.length, expected.length); i++) {\n        b.append(String.format(Locale.ENGLISH, format, \n            i < expected.length ? expected[i] : \"--\", \n            i < result.length ? result[i] : \"--\"));\n      }\n\n      System.err.println(b.toString());\n      fail(\"Expected different output:\\n\" + b.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTLookupTest#assertMatchEquals(List[LookupResult],String...).mjava","pathOld":"solr/src/test/org/apache/solr/spelling/suggest/fst/FSTLookupTest#assertMatchEquals(List[LookupResult],String...).mjava","sourceNew":"  private void assertMatchEquals(List<LookupResult> res, String... expected) {\n    String [] result = new String [res.size()];\n    for (int i = 0; i < res.size(); i++)\n      result[i] = res.get(i).toString();\n    \n    if (!Arrays.equals(expected, result)) {\n      int colLen = Math.max(maxLen(expected), maxLen(result));\n      \n      StringBuilder b = new StringBuilder();\n      String format = \"%\" + colLen + \"s  \" + \"%\" + colLen + \"s\\n\"; \n      b.append(String.format(Locale.ENGLISH, format, \"Expected\", \"Result\"));\n      for (int i = 0; i < Math.max(result.length, expected.length); i++) {\n        b.append(String.format(Locale.ENGLISH, format, \n            i < expected.length ? expected[i] : \"--\", \n            i < result.length ? result[i] : \"--\"));\n      }\n\n      System.err.println(b.toString());\n      fail(\"Expected different output:\\n\" + b.toString());\n    }\n  }\n\n","sourceOld":"  private void assertMatchEquals(List<LookupResult> res, String... expected) {\n    String [] result = new String [res.size()];\n    for (int i = 0; i < res.size(); i++)\n      result[i] = res.get(i).toString();\n    \n    if (!Arrays.equals(expected, result)) {\n      int colLen = Math.max(maxLen(expected), maxLen(result));\n      \n      StringBuilder b = new StringBuilder();\n      String format = \"%\" + colLen + \"s  \" + \"%\" + colLen + \"s\\n\"; \n      b.append(String.format(Locale.ENGLISH, format, \"Expected\", \"Result\"));\n      for (int i = 0; i < Math.max(result.length, expected.length); i++) {\n        b.append(String.format(Locale.ENGLISH, format, \n            i < expected.length ? expected[i] : \"--\", \n            i < result.length ? result[i] : \"--\"));\n      }\n\n      System.err.println(b.toString());\n      fail(\"Expected different output:\\n\" + b.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7bf07f4ebadc7539de83a531e64678350d78ca26","date":1322776167,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#assertMatchEquals(List[Completion],String...).mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTLookupTest#assertMatchEquals(List[LookupResult],String...).mjava","sourceNew":"  private void assertMatchEquals(List<Completion> res, String... expected) {\n    String [] result = new String [res.size()];\n    for (int i = 0; i < res.size(); i++) {\n      result[i] = res.get(i).toString();\n    }\n\n    if (!Arrays.equals(stripScore(expected), stripScore(result))) {\n      int colLen = Math.max(maxLen(expected), maxLen(result));\n      \n      StringBuilder b = new StringBuilder();\n      String format = \"%\" + colLen + \"s  \" + \"%\" + colLen + \"s\\n\"; \n      b.append(String.format(Locale.ENGLISH, format, \"Expected\", \"Result\"));\n      for (int i = 0; i < Math.max(result.length, expected.length); i++) {\n        b.append(String.format(Locale.ENGLISH, format, \n            i < expected.length ? expected[i] : \"--\", \n            i < result.length ? result[i] : \"--\"));\n      }\n\n      System.err.println(b.toString());\n      fail(\"Expected different output:\\n\" + b.toString());\n    }\n  }\n\n","sourceOld":"  private void assertMatchEquals(List<LookupResult> res, String... expected) {\n    String [] result = new String [res.size()];\n    for (int i = 0; i < res.size(); i++)\n      result[i] = res.get(i).toString();\n    \n    if (!Arrays.equals(expected, result)) {\n      int colLen = Math.max(maxLen(expected), maxLen(result));\n      \n      StringBuilder b = new StringBuilder();\n      String format = \"%\" + colLen + \"s  \" + \"%\" + colLen + \"s\\n\"; \n      b.append(String.format(Locale.ENGLISH, format, \"Expected\", \"Result\"));\n      for (int i = 0; i < Math.max(result.length, expected.length); i++) {\n        b.append(String.format(Locale.ENGLISH, format, \n            i < expected.length ? expected[i] : \"--\", \n            i < result.length ? result[i] : \"--\"));\n      }\n\n      System.err.println(b.toString());\n      fail(\"Expected different output:\\n\" + b.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7bf07f4ebadc7539de83a531e64678350d78ca26":["e230a61047bc041516c811baa08a7174d6f8322a"],"e230a61047bc041516c811baa08a7174d6f8322a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e230a61047bc041516c811baa08a7174d6f8322a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e230a61047bc041516c811baa08a7174d6f8322a"]},"commit2Childs":{"7bf07f4ebadc7539de83a531e64678350d78ca26":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e230a61047bc041516c811baa08a7174d6f8322a":["7bf07f4ebadc7539de83a531e64678350d78ca26","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e230a61047bc041516c811baa08a7174d6f8322a","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}