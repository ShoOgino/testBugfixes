{"path":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.FieldsWriter#merge(MergeState).mjava","commits":[{"id":"132f1575a9078b618f9e1c35ac94f06444006662","date":1475595294,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.FieldsWriter#merge(MergeState).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void merge(MergeState mergeState) throws IOException {\n      Map<DocValuesConsumer, Collection<String>> consumersToField = new IdentityHashMap<>();\n\n      // Group each consumer by the fields it handles\n      for (FieldInfo fi : mergeState.mergeFieldInfos) {\n        DocValuesConsumer consumer = getInstance(fi);\n        Collection<String> fieldsForConsumer = consumersToField.get(consumer);\n        if (fieldsForConsumer == null) {\n          fieldsForConsumer = new ArrayList<>();\n          consumersToField.put(consumer, fieldsForConsumer);\n        }\n        fieldsForConsumer.add(fi.name);\n      }\n\n      // Delegate the merge to the appropriate consumer\n      PerFieldMergeState pfMergeState = new PerFieldMergeState(mergeState);\n      try {\n        for (Map.Entry<DocValuesConsumer, Collection<String>> e : consumersToField.entrySet()) {\n          e.getKey().merge(pfMergeState.apply(e.getValue()));\n        }\n      } finally {\n        pfMergeState.reset();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.FieldsWriter#merge(MergeState).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void merge(MergeState mergeState) throws IOException {\n      Map<DocValuesConsumer, Collection<String>> consumersToField = new IdentityHashMap<>();\n\n      // Group each consumer by the fields it handles\n      for (FieldInfo fi : mergeState.mergeFieldInfos) {\n        DocValuesConsumer consumer = getInstance(fi);\n        Collection<String> fieldsForConsumer = consumersToField.get(consumer);\n        if (fieldsForConsumer == null) {\n          fieldsForConsumer = new ArrayList<>();\n          consumersToField.put(consumer, fieldsForConsumer);\n        }\n        fieldsForConsumer.add(fi.name);\n      }\n\n      // Delegate the merge to the appropriate consumer\n      PerFieldMergeState pfMergeState = new PerFieldMergeState(mergeState);\n      try {\n        for (Map.Entry<DocValuesConsumer, Collection<String>> e : consumersToField.entrySet()) {\n          e.getKey().merge(pfMergeState.apply(e.getValue()));\n        }\n      } finally {\n        pfMergeState.reset();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1dbcafacd03baeb0f18199de611a1619606073c5","date":1546559081,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.FieldsWriter#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.FieldsWriter#merge(MergeState).mjava","sourceNew":"    @Override\n    public void merge(MergeState mergeState) throws IOException {\n      Map<DocValuesConsumer, Collection<String>> consumersToField = new IdentityHashMap<>();\n\n      // Group each consumer by the fields it handles\n      for (FieldInfo fi : mergeState.mergeFieldInfos) {\n        // merge should ignore current format for the fields being merged\n        DocValuesConsumer consumer = getInstance(fi, true);\n        Collection<String> fieldsForConsumer = consumersToField.get(consumer);\n        if (fieldsForConsumer == null) {\n          fieldsForConsumer = new ArrayList<>();\n          consumersToField.put(consumer, fieldsForConsumer);\n        }\n        fieldsForConsumer.add(fi.name);\n      }\n\n      // Delegate the merge to the appropriate consumer\n      PerFieldMergeState pfMergeState = new PerFieldMergeState(mergeState);\n      try {\n        for (Map.Entry<DocValuesConsumer, Collection<String>> e : consumersToField.entrySet()) {\n          e.getKey().merge(pfMergeState.apply(e.getValue()));\n        }\n      } finally {\n        pfMergeState.reset();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void merge(MergeState mergeState) throws IOException {\n      Map<DocValuesConsumer, Collection<String>> consumersToField = new IdentityHashMap<>();\n\n      // Group each consumer by the fields it handles\n      for (FieldInfo fi : mergeState.mergeFieldInfos) {\n        DocValuesConsumer consumer = getInstance(fi);\n        Collection<String> fieldsForConsumer = consumersToField.get(consumer);\n        if (fieldsForConsumer == null) {\n          fieldsForConsumer = new ArrayList<>();\n          consumersToField.put(consumer, fieldsForConsumer);\n        }\n        fieldsForConsumer.add(fi.name);\n      }\n\n      // Delegate the merge to the appropriate consumer\n      PerFieldMergeState pfMergeState = new PerFieldMergeState(mergeState);\n      try {\n        for (Map.Entry<DocValuesConsumer, Collection<String>> e : consumersToField.entrySet()) {\n          e.getKey().merge(pfMergeState.apply(e.getValue()));\n        }\n      } finally {\n        pfMergeState.reset();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f139bfc8210fe68cc729733fd68b88319de9d40f","date":1586290325,"type":3,"author":"Juan Camilo Rodriguez Duran","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.FieldsWriter#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.FieldsWriter#merge(MergeState).mjava","sourceNew":"    @Override\n    public void merge(MergeState mergeState) throws IOException {\n      Map<DocValuesConsumer, Collection<String>> consumersToField = new IdentityHashMap<>();\n\n      // Group each consumer by the fields it handles\n      for (FieldInfo fi : mergeState.mergeFieldInfos) {\n        if (fi.getDocValuesType() == DocValuesType.NONE) {\n          continue;\n        }\n        // merge should ignore current format for the fields being merged\n        DocValuesConsumer consumer = getInstance(fi, true);\n        Collection<String> fieldsForConsumer = consumersToField.get(consumer);\n        if (fieldsForConsumer == null) {\n          fieldsForConsumer = new ArrayList<>();\n          consumersToField.put(consumer, fieldsForConsumer);\n        }\n        fieldsForConsumer.add(fi.name);\n      }\n\n      // Delegate the merge to the appropriate consumer\n      PerFieldMergeState pfMergeState = new PerFieldMergeState(mergeState);\n      try {\n        for (Map.Entry<DocValuesConsumer, Collection<String>> e : consumersToField.entrySet()) {\n          e.getKey().merge(pfMergeState.apply(e.getValue()));\n        }\n      } finally {\n        pfMergeState.reset();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void merge(MergeState mergeState) throws IOException {\n      Map<DocValuesConsumer, Collection<String>> consumersToField = new IdentityHashMap<>();\n\n      // Group each consumer by the fields it handles\n      for (FieldInfo fi : mergeState.mergeFieldInfos) {\n        // merge should ignore current format for the fields being merged\n        DocValuesConsumer consumer = getInstance(fi, true);\n        Collection<String> fieldsForConsumer = consumersToField.get(consumer);\n        if (fieldsForConsumer == null) {\n          fieldsForConsumer = new ArrayList<>();\n          consumersToField.put(consumer, fieldsForConsumer);\n        }\n        fieldsForConsumer.add(fi.name);\n      }\n\n      // Delegate the merge to the appropriate consumer\n      PerFieldMergeState pfMergeState = new PerFieldMergeState(mergeState);\n      try {\n        for (Map.Entry<DocValuesConsumer, Collection<String>> e : consumersToField.entrySet()) {\n          e.getKey().merge(pfMergeState.apply(e.getValue()));\n        }\n      } finally {\n        pfMergeState.reset();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1dbcafacd03baeb0f18199de611a1619606073c5":["132f1575a9078b618f9e1c35ac94f06444006662"],"132f1575a9078b618f9e1c35ac94f06444006662":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f139bfc8210fe68cc729733fd68b88319de9d40f":["1dbcafacd03baeb0f18199de611a1619606073c5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","132f1575a9078b618f9e1c35ac94f06444006662"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f139bfc8210fe68cc729733fd68b88319de9d40f"]},"commit2Childs":{"1dbcafacd03baeb0f18199de611a1619606073c5":["f139bfc8210fe68cc729733fd68b88319de9d40f"],"132f1575a9078b618f9e1c35ac94f06444006662":["1dbcafacd03baeb0f18199de611a1619606073c5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["132f1575a9078b618f9e1c35ac94f06444006662","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"f139bfc8210fe68cc729733fd68b88319de9d40f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}