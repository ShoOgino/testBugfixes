{"path":"solr/src/test/org/apache/solr/handler/XmlUpdateRequestHandlerTest#testReadDoc().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/XmlUpdateRequestHandlerTest#testReadDoc().mjava","pathOld":"/dev/null","sourceNew":"  public void testReadDoc() throws Exception\n  {\n    String xml = \n      \"<doc boost=\\\"5.5\\\">\" +\n      \"  <field name=\\\"id\\\" boost=\\\"2.2\\\">12345</field>\" +\n      \"  <field name=\\\"name\\\">kitten</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"3\\\">aaa</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"4\\\">bbb</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"5\\\">bbb</field>\" +\n      \"  <field name=\\\"ab\\\">a&amp;b</field>\" +\n      \"</doc>\";\n\n    XMLStreamReader parser = \n      inputFactory.createXMLStreamReader( new StringReader( xml ) );\n    parser.next(); // read the START document...\n    //null for the processor is all right here\n    XMLLoader loader = new XMLLoader(null, inputFactory);\n    SolrInputDocument doc = loader.readDoc( parser );\n    \n    // Read boosts\n    assertEquals( 5.5f, doc.getDocumentBoost() );\n    assertEquals( 1.0f, doc.getField( \"name\" ).getBoost() );\n    assertEquals( 2.2f, doc.getField( \"id\" ).getBoost() );\n    // Boost is the product of each value\n    assertEquals( (3*4*5.0f), doc.getField( \"cat\" ).getBoost() );\n    \n    // Read values\n    assertEquals( \"12345\", doc.getField( \"id\" ).getValue() );\n    assertEquals( \"kitten\", doc.getField( \"name\").getValue() );\n    assertEquals( \"a&b\", doc.getField( \"ab\").getValue() ); // read something with escaped characters\n    \n    Collection<Object> out = doc.getField( \"cat\" ).getValues();\n    assertEquals( 3, out.size() );\n    assertEquals( \"[aaa, bbb, bbb]\", out.toString() );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/handler/XmlUpdateRequestHandlerTest#testReadDoc().mjava","sourceNew":null,"sourceOld":"  public void testReadDoc() throws Exception\n  {\n    String xml = \n      \"<doc boost=\\\"5.5\\\">\" +\n      \"  <field name=\\\"id\\\" boost=\\\"2.2\\\">12345</field>\" +\n      \"  <field name=\\\"name\\\">kitten</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"3\\\">aaa</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"4\\\">bbb</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"5\\\">bbb</field>\" +\n      \"  <field name=\\\"ab\\\">a&amp;b</field>\" +\n      \"</doc>\";\n\n    XMLStreamReader parser = \n      inputFactory.createXMLStreamReader( new StringReader( xml ) );\n    parser.next(); // read the START document...\n    //null for the processor is all right here\n    XMLLoader loader = new XMLLoader(null, inputFactory);\n    SolrInputDocument doc = loader.readDoc( parser );\n    \n    // Read boosts\n    assertEquals( 5.5f, doc.getDocumentBoost() );\n    assertEquals( 1.0f, doc.getField( \"name\" ).getBoost() );\n    assertEquals( 2.2f, doc.getField( \"id\" ).getBoost() );\n    // Boost is the product of each value\n    assertEquals( (3*4*5.0f), doc.getField( \"cat\" ).getBoost() );\n    \n    // Read values\n    assertEquals( \"12345\", doc.getField( \"id\" ).getValue() );\n    assertEquals( \"kitten\", doc.getField( \"name\").getValue() );\n    assertEquals( \"a&b\", doc.getField( \"ab\").getValue() ); // read something with escaped characters\n    \n    Collection<Object> out = doc.getField( \"cat\" ).getValues();\n    assertEquals( 3, out.size() );\n    assertEquals( \"[aaa, bbb, bbb]\", out.toString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/XmlUpdateRequestHandlerTest#testReadDoc().mjava","pathOld":"src/test/org/apache/solr/handler/XmlUpdateRequestHandlerTest#testReadDoc().mjava","sourceNew":"  public void testReadDoc() throws Exception\n  {\n    String xml = \n      \"<doc boost=\\\"5.5\\\">\" +\n      \"  <field name=\\\"id\\\" boost=\\\"2.2\\\">12345</field>\" +\n      \"  <field name=\\\"name\\\">kitten</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"3\\\">aaa</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"4\\\">bbb</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"5\\\">bbb</field>\" +\n      \"  <field name=\\\"ab\\\">a&amp;b</field>\" +\n      \"</doc>\";\n\n    XMLStreamReader parser = \n      inputFactory.createXMLStreamReader( new StringReader( xml ) );\n    parser.next(); // read the START document...\n    //null for the processor is all right here\n    XMLLoader loader = new XMLLoader(null, inputFactory);\n    SolrInputDocument doc = loader.readDoc( parser );\n    \n    // Read boosts\n    assertEquals( 5.5f, doc.getDocumentBoost() );\n    assertEquals( 1.0f, doc.getField( \"name\" ).getBoost() );\n    assertEquals( 2.2f, doc.getField( \"id\" ).getBoost() );\n    // Boost is the product of each value\n    assertEquals( (3*4*5.0f), doc.getField( \"cat\" ).getBoost() );\n    \n    // Read values\n    assertEquals( \"12345\", doc.getField( \"id\" ).getValue() );\n    assertEquals( \"kitten\", doc.getField( \"name\").getValue() );\n    assertEquals( \"a&b\", doc.getField( \"ab\").getValue() ); // read something with escaped characters\n    \n    Collection<Object> out = doc.getField( \"cat\" ).getValues();\n    assertEquals( 3, out.size() );\n    assertEquals( \"[aaa, bbb, bbb]\", out.toString() );\n  }\n\n","sourceOld":"  public void testReadDoc() throws Exception\n  {\n    String xml = \n      \"<doc boost=\\\"5.5\\\">\" +\n      \"  <field name=\\\"id\\\" boost=\\\"2.2\\\">12345</field>\" +\n      \"  <field name=\\\"name\\\">kitten</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"3\\\">aaa</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"4\\\">bbb</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"5\\\">bbb</field>\" +\n      \"  <field name=\\\"ab\\\">a&amp;b</field>\" +\n      \"</doc>\";\n\n    XMLStreamReader parser = \n      inputFactory.createXMLStreamReader( new StringReader( xml ) );\n    parser.next(); // read the START document...\n    //null for the processor is all right here\n    XMLLoader loader = new XMLLoader(null, inputFactory);\n    SolrInputDocument doc = loader.readDoc( parser );\n    \n    // Read boosts\n    assertEquals( 5.5f, doc.getDocumentBoost() );\n    assertEquals( 1.0f, doc.getField( \"name\" ).getBoost() );\n    assertEquals( 2.2f, doc.getField( \"id\" ).getBoost() );\n    // Boost is the product of each value\n    assertEquals( (3*4*5.0f), doc.getField( \"cat\" ).getBoost() );\n    \n    // Read values\n    assertEquals( \"12345\", doc.getField( \"id\" ).getValue() );\n    assertEquals( \"kitten\", doc.getField( \"name\").getValue() );\n    assertEquals( \"a&b\", doc.getField( \"ab\").getValue() ); // read something with escaped characters\n    \n    Collection<Object> out = doc.getField( \"cat\" ).getValues();\n    assertEquals( 3, out.size() );\n    assertEquals( \"[aaa, bbb, bbb]\", out.toString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/XmlUpdateRequestHandlerTest#testReadDoc().mjava","pathOld":"/dev/null","sourceNew":"  public void testReadDoc() throws Exception\n  {\n    String xml = \n      \"<doc boost=\\\"5.5\\\">\" +\n      \"  <field name=\\\"id\\\" boost=\\\"2.2\\\">12345</field>\" +\n      \"  <field name=\\\"name\\\">kitten</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"3\\\">aaa</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"4\\\">bbb</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"5\\\">bbb</field>\" +\n      \"  <field name=\\\"ab\\\">a&amp;b</field>\" +\n      \"</doc>\";\n\n    XMLStreamReader parser = \n      inputFactory.createXMLStreamReader( new StringReader( xml ) );\n    parser.next(); // read the START document...\n    //null for the processor is all right here\n    XMLLoader loader = new XMLLoader(null, inputFactory);\n    SolrInputDocument doc = loader.readDoc( parser );\n    \n    // Read boosts\n    assertEquals( 5.5f, doc.getDocumentBoost() );\n    assertEquals( 1.0f, doc.getField( \"name\" ).getBoost() );\n    assertEquals( 2.2f, doc.getField( \"id\" ).getBoost() );\n    // Boost is the product of each value\n    assertEquals( (3*4*5.0f), doc.getField( \"cat\" ).getBoost() );\n    \n    // Read values\n    assertEquals( \"12345\", doc.getField( \"id\" ).getValue() );\n    assertEquals( \"kitten\", doc.getField( \"name\").getValue() );\n    assertEquals( \"a&b\", doc.getField( \"ab\").getValue() ); // read something with escaped characters\n    \n    Collection<Object> out = doc.getField( \"cat\" ).getValues();\n    assertEquals( 3, out.size() );\n    assertEquals( \"[aaa, bbb, bbb]\", out.toString() );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ad599f8c2fdb737c5be23d7ed505032c5acadf6","date":1287505762,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/XmlUpdateRequestHandlerTest#testReadDoc().mjava","pathOld":"solr/src/test/org/apache/solr/handler/XmlUpdateRequestHandlerTest#testReadDoc().mjava","sourceNew":"  @Test\n  public void testReadDoc() throws Exception\n  {\n    String xml = \n      \"<doc boost=\\\"5.5\\\">\" +\n      \"  <field name=\\\"id\\\" boost=\\\"2.2\\\">12345</field>\" +\n      \"  <field name=\\\"name\\\">kitten</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"3\\\">aaa</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"4\\\">bbb</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"5\\\">bbb</field>\" +\n      \"  <field name=\\\"ab\\\">a&amp;b</field>\" +\n      \"</doc>\";\n\n    XMLStreamReader parser = \n      inputFactory.createXMLStreamReader( new StringReader( xml ) );\n    parser.next(); // read the START document...\n    //null for the processor is all right here\n    XMLLoader loader = new XMLLoader(null, inputFactory);\n    SolrInputDocument doc = loader.readDoc( parser );\n    \n    // Read boosts\n    assertEquals( 5.5f, doc.getDocumentBoost() );\n    assertEquals( 1.0f, doc.getField( \"name\" ).getBoost() );\n    assertEquals( 2.2f, doc.getField( \"id\" ).getBoost() );\n    // Boost is the product of each value\n    assertEquals( (3*4*5.0f), doc.getField( \"cat\" ).getBoost() );\n    \n    // Read values\n    assertEquals( \"12345\", doc.getField( \"id\" ).getValue() );\n    assertEquals( \"kitten\", doc.getField( \"name\").getValue() );\n    assertEquals( \"a&b\", doc.getField( \"ab\").getValue() ); // read something with escaped characters\n    \n    Collection<Object> out = doc.getField( \"cat\" ).getValues();\n    assertEquals( 3, out.size() );\n    assertEquals( \"[aaa, bbb, bbb]\", out.toString() );\n  }\n\n","sourceOld":"  public void testReadDoc() throws Exception\n  {\n    String xml = \n      \"<doc boost=\\\"5.5\\\">\" +\n      \"  <field name=\\\"id\\\" boost=\\\"2.2\\\">12345</field>\" +\n      \"  <field name=\\\"name\\\">kitten</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"3\\\">aaa</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"4\\\">bbb</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"5\\\">bbb</field>\" +\n      \"  <field name=\\\"ab\\\">a&amp;b</field>\" +\n      \"</doc>\";\n\n    XMLStreamReader parser = \n      inputFactory.createXMLStreamReader( new StringReader( xml ) );\n    parser.next(); // read the START document...\n    //null for the processor is all right here\n    XMLLoader loader = new XMLLoader(null, inputFactory);\n    SolrInputDocument doc = loader.readDoc( parser );\n    \n    // Read boosts\n    assertEquals( 5.5f, doc.getDocumentBoost() );\n    assertEquals( 1.0f, doc.getField( \"name\" ).getBoost() );\n    assertEquals( 2.2f, doc.getField( \"id\" ).getBoost() );\n    // Boost is the product of each value\n    assertEquals( (3*4*5.0f), doc.getField( \"cat\" ).getBoost() );\n    \n    // Read values\n    assertEquals( \"12345\", doc.getField( \"id\" ).getValue() );\n    assertEquals( \"kitten\", doc.getField( \"name\").getValue() );\n    assertEquals( \"a&b\", doc.getField( \"ab\").getValue() ); // read something with escaped characters\n    \n    Collection<Object> out = doc.getField( \"cat\" ).getValues();\n    assertEquals( 3, out.size() );\n    assertEquals( \"[aaa, bbb, bbb]\", out.toString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/XmlUpdateRequestHandlerTest#testReadDoc().mjava","pathOld":"solr/src/test/org/apache/solr/handler/XmlUpdateRequestHandlerTest#testReadDoc().mjava","sourceNew":"  @Test\n  public void testReadDoc() throws Exception\n  {\n    String xml = \n      \"<doc boost=\\\"5.5\\\">\" +\n      \"  <field name=\\\"id\\\" boost=\\\"2.2\\\">12345</field>\" +\n      \"  <field name=\\\"name\\\">kitten</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"3\\\">aaa</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"4\\\">bbb</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"5\\\">bbb</field>\" +\n      \"  <field name=\\\"ab\\\">a&amp;b</field>\" +\n      \"</doc>\";\n\n    XMLStreamReader parser = \n      inputFactory.createXMLStreamReader( new StringReader( xml ) );\n    parser.next(); // read the START document...\n    //null for the processor is all right here\n    XMLLoader loader = new XMLLoader(null, inputFactory);\n    SolrInputDocument doc = loader.readDoc( parser );\n    \n    // Read boosts\n    assertEquals( 5.5f, doc.getDocumentBoost() );\n    assertEquals( 1.0f, doc.getField( \"name\" ).getBoost() );\n    assertEquals( 2.2f, doc.getField( \"id\" ).getBoost() );\n    // Boost is the product of each value\n    assertEquals( (3*4*5.0f), doc.getField( \"cat\" ).getBoost() );\n    \n    // Read values\n    assertEquals( \"12345\", doc.getField( \"id\" ).getValue() );\n    assertEquals( \"kitten\", doc.getField( \"name\").getValue() );\n    assertEquals( \"a&b\", doc.getField( \"ab\").getValue() ); // read something with escaped characters\n    \n    Collection<Object> out = doc.getField( \"cat\" ).getValues();\n    assertEquals( 3, out.size() );\n    assertEquals( \"[aaa, bbb, bbb]\", out.toString() );\n  }\n\n","sourceOld":"  public void testReadDoc() throws Exception\n  {\n    String xml = \n      \"<doc boost=\\\"5.5\\\">\" +\n      \"  <field name=\\\"id\\\" boost=\\\"2.2\\\">12345</field>\" +\n      \"  <field name=\\\"name\\\">kitten</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"3\\\">aaa</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"4\\\">bbb</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"5\\\">bbb</field>\" +\n      \"  <field name=\\\"ab\\\">a&amp;b</field>\" +\n      \"</doc>\";\n\n    XMLStreamReader parser = \n      inputFactory.createXMLStreamReader( new StringReader( xml ) );\n    parser.next(); // read the START document...\n    //null for the processor is all right here\n    XMLLoader loader = new XMLLoader(null, inputFactory);\n    SolrInputDocument doc = loader.readDoc( parser );\n    \n    // Read boosts\n    assertEquals( 5.5f, doc.getDocumentBoost() );\n    assertEquals( 1.0f, doc.getField( \"name\" ).getBoost() );\n    assertEquals( 2.2f, doc.getField( \"id\" ).getBoost() );\n    // Boost is the product of each value\n    assertEquals( (3*4*5.0f), doc.getField( \"cat\" ).getBoost() );\n    \n    // Read values\n    assertEquals( \"12345\", doc.getField( \"id\" ).getValue() );\n    assertEquals( \"kitten\", doc.getField( \"name\").getValue() );\n    assertEquals( \"a&b\", doc.getField( \"ab\").getValue() ); // read something with escaped characters\n    \n    Collection<Object> out = doc.getField( \"cat\" ).getValues();\n    assertEquals( 3, out.size() );\n    assertEquals( \"[aaa, bbb, bbb]\", out.toString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/XmlUpdateRequestHandlerTest#testReadDoc().mjava","pathOld":"solr/src/test/org/apache/solr/handler/XmlUpdateRequestHandlerTest#testReadDoc().mjava","sourceNew":"  @Test\n  public void testReadDoc() throws Exception\n  {\n    String xml = \n      \"<doc boost=\\\"5.5\\\">\" +\n      \"  <field name=\\\"id\\\" boost=\\\"2.2\\\">12345</field>\" +\n      \"  <field name=\\\"name\\\">kitten</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"3\\\">aaa</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"4\\\">bbb</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"5\\\">bbb</field>\" +\n      \"  <field name=\\\"ab\\\">a&amp;b</field>\" +\n      \"</doc>\";\n\n    XMLStreamReader parser = \n      inputFactory.createXMLStreamReader( new StringReader( xml ) );\n    parser.next(); // read the START document...\n    //null for the processor is all right here\n    XMLLoader loader = new XMLLoader(null, inputFactory);\n    SolrInputDocument doc = loader.readDoc( parser );\n    \n    // Read boosts\n    assertEquals( 5.5f, doc.getDocumentBoost() );\n    assertEquals( 1.0f, doc.getField( \"name\" ).getBoost() );\n    assertEquals( 2.2f, doc.getField( \"id\" ).getBoost() );\n    // Boost is the product of each value\n    assertEquals( (3*4*5.0f), doc.getField( \"cat\" ).getBoost() );\n    \n    // Read values\n    assertEquals( \"12345\", doc.getField( \"id\" ).getValue() );\n    assertEquals( \"kitten\", doc.getField( \"name\").getValue() );\n    assertEquals( \"a&b\", doc.getField( \"ab\").getValue() ); // read something with escaped characters\n    \n    Collection<Object> out = doc.getField( \"cat\" ).getValues();\n    assertEquals( 3, out.size() );\n    assertEquals( \"[aaa, bbb, bbb]\", out.toString() );\n  }\n\n","sourceOld":"  public void testReadDoc() throws Exception\n  {\n    String xml = \n      \"<doc boost=\\\"5.5\\\">\" +\n      \"  <field name=\\\"id\\\" boost=\\\"2.2\\\">12345</field>\" +\n      \"  <field name=\\\"name\\\">kitten</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"3\\\">aaa</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"4\\\">bbb</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"5\\\">bbb</field>\" +\n      \"  <field name=\\\"ab\\\">a&amp;b</field>\" +\n      \"</doc>\";\n\n    XMLStreamReader parser = \n      inputFactory.createXMLStreamReader( new StringReader( xml ) );\n    parser.next(); // read the START document...\n    //null for the processor is all right here\n    XMLLoader loader = new XMLLoader(null, inputFactory);\n    SolrInputDocument doc = loader.readDoc( parser );\n    \n    // Read boosts\n    assertEquals( 5.5f, doc.getDocumentBoost() );\n    assertEquals( 1.0f, doc.getField( \"name\" ).getBoost() );\n    assertEquals( 2.2f, doc.getField( \"id\" ).getBoost() );\n    // Boost is the product of each value\n    assertEquals( (3*4*5.0f), doc.getField( \"cat\" ).getBoost() );\n    \n    // Read values\n    assertEquals( \"12345\", doc.getField( \"id\" ).getValue() );\n    assertEquals( \"kitten\", doc.getField( \"name\").getValue() );\n    assertEquals( \"a&b\", doc.getField( \"ab\").getValue() ); // read something with escaped characters\n    \n    Collection<Object> out = doc.getField( \"cat\" ).getValues();\n    assertEquals( 3, out.size() );\n    assertEquals( \"[aaa, bbb, bbb]\", out.toString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/XmlUpdateRequestHandlerTest#testReadDoc().mjava","pathOld":"solr/src/test/org/apache/solr/handler/XmlUpdateRequestHandlerTest#testReadDoc().mjava","sourceNew":"  @Test\n  public void testReadDoc() throws Exception\n  {\n    String xml = \n      \"<doc boost=\\\"5.5\\\">\" +\n      \"  <field name=\\\"id\\\" boost=\\\"2.2\\\">12345</field>\" +\n      \"  <field name=\\\"name\\\">kitten</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"3\\\">aaa</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"4\\\">bbb</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"5\\\">bbb</field>\" +\n      \"  <field name=\\\"ab\\\">a&amp;b</field>\" +\n      \"</doc>\";\n\n    XMLStreamReader parser = \n      inputFactory.createXMLStreamReader( new StringReader( xml ) );\n    parser.next(); // read the START document...\n    //null for the processor is all right here\n    XMLLoader loader = new XMLLoader(null, inputFactory);\n    SolrInputDocument doc = loader.readDoc( parser );\n    \n    // Read boosts\n    assertEquals( 5.5f, doc.getDocumentBoost() );\n    assertEquals( 1.0f, doc.getField( \"name\" ).getBoost() );\n    assertEquals( 2.2f, doc.getField( \"id\" ).getBoost() );\n    // Boost is the product of each value\n    assertEquals( (3*4*5.0f), doc.getField( \"cat\" ).getBoost() );\n    \n    // Read values\n    assertEquals( \"12345\", doc.getField( \"id\" ).getValue() );\n    assertEquals( \"kitten\", doc.getField( \"name\").getValue() );\n    assertEquals( \"a&b\", doc.getField( \"ab\").getValue() ); // read something with escaped characters\n    \n    Collection<Object> out = doc.getField( \"cat\" ).getValues();\n    assertEquals( 3, out.size() );\n    assertEquals( \"[aaa, bbb, bbb]\", out.toString() );\n  }\n\n","sourceOld":"  @Test\n  public void testReadDoc() throws Exception\n  {\n    String xml = \n      \"<doc boost=\\\"5.5\\\">\" +\n      \"  <field name=\\\"id\\\" boost=\\\"2.2\\\">12345</field>\" +\n      \"  <field name=\\\"name\\\">kitten</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"3\\\">aaa</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"4\\\">bbb</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"5\\\">bbb</field>\" +\n      \"  <field name=\\\"ab\\\">a&amp;b</field>\" +\n      \"</doc>\";\n\n    XMLStreamReader parser = \n      inputFactory.createXMLStreamReader( new StringReader( xml ) );\n    parser.next(); // read the START document...\n    //null for the processor is all right here\n    XMLLoader loader = new XMLLoader(null, inputFactory);\n    SolrInputDocument doc = loader.readDoc( parser );\n    \n    // Read boosts\n    assertEquals( 5.5f, doc.getDocumentBoost() );\n    assertEquals( 1.0f, doc.getField( \"name\" ).getBoost() );\n    assertEquals( 2.2f, doc.getField( \"id\" ).getBoost() );\n    // Boost is the product of each value\n    assertEquals( (3*4*5.0f), doc.getField( \"cat\" ).getBoost() );\n    \n    // Read values\n    assertEquals( \"12345\", doc.getField( \"id\" ).getValue() );\n    assertEquals( \"kitten\", doc.getField( \"name\").getValue() );\n    assertEquals( \"a&b\", doc.getField( \"ab\").getValue() ); // read something with escaped characters\n    \n    Collection<Object> out = doc.getField( \"cat\" ).getValues();\n    assertEquals( 3, out.size() );\n    assertEquals( \"[aaa, bbb, bbb]\", out.toString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/XmlUpdateRequestHandlerTest#testReadDoc().mjava","pathOld":"solr/src/test/org/apache/solr/handler/XmlUpdateRequestHandlerTest#testReadDoc().mjava","sourceNew":"  @Test\n  public void testReadDoc() throws Exception\n  {\n    String xml = \n      \"<doc boost=\\\"5.5\\\">\" +\n      \"  <field name=\\\"id\\\" boost=\\\"2.2\\\">12345</field>\" +\n      \"  <field name=\\\"name\\\">kitten</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"3\\\">aaa</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"4\\\">bbb</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"5\\\">bbb</field>\" +\n      \"  <field name=\\\"ab\\\">a&amp;b</field>\" +\n      \"</doc>\";\n\n    XMLStreamReader parser = \n      inputFactory.createXMLStreamReader( new StringReader( xml ) );\n    parser.next(); // read the START document...\n    //null for the processor is all right here\n    XMLLoader loader = new XMLLoader(null, inputFactory);\n    SolrInputDocument doc = loader.readDoc( parser );\n    \n    // Read boosts\n    assertEquals( 5.5f, doc.getDocumentBoost() );\n    assertEquals( 1.0f, doc.getField( \"name\" ).getBoost() );\n    assertEquals( 2.2f, doc.getField( \"id\" ).getBoost() );\n    // Boost is the product of each value\n    assertEquals( (3*4*5.0f), doc.getField( \"cat\" ).getBoost() );\n    \n    // Read values\n    assertEquals( \"12345\", doc.getField( \"id\" ).getValue() );\n    assertEquals( \"kitten\", doc.getField( \"name\").getValue() );\n    assertEquals( \"a&b\", doc.getField( \"ab\").getValue() ); // read something with escaped characters\n    \n    Collection<Object> out = doc.getField( \"cat\" ).getValues();\n    assertEquals( 3, out.size() );\n    assertEquals( \"[aaa, bbb, bbb]\", out.toString() );\n  }\n\n","sourceOld":"  @Test\n  public void testReadDoc() throws Exception\n  {\n    String xml = \n      \"<doc boost=\\\"5.5\\\">\" +\n      \"  <field name=\\\"id\\\" boost=\\\"2.2\\\">12345</field>\" +\n      \"  <field name=\\\"name\\\">kitten</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"3\\\">aaa</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"4\\\">bbb</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"5\\\">bbb</field>\" +\n      \"  <field name=\\\"ab\\\">a&amp;b</field>\" +\n      \"</doc>\";\n\n    XMLStreamReader parser = \n      inputFactory.createXMLStreamReader( new StringReader( xml ) );\n    parser.next(); // read the START document...\n    //null for the processor is all right here\n    XMLLoader loader = new XMLLoader(null, inputFactory);\n    SolrInputDocument doc = loader.readDoc( parser );\n    \n    // Read boosts\n    assertEquals( 5.5f, doc.getDocumentBoost() );\n    assertEquals( 1.0f, doc.getField( \"name\" ).getBoost() );\n    assertEquals( 2.2f, doc.getField( \"id\" ).getBoost() );\n    // Boost is the product of each value\n    assertEquals( (3*4*5.0f), doc.getField( \"cat\" ).getBoost() );\n    \n    // Read values\n    assertEquals( \"12345\", doc.getField( \"id\" ).getValue() );\n    assertEquals( \"kitten\", doc.getField( \"name\").getValue() );\n    assertEquals( \"a&b\", doc.getField( \"ab\").getValue() ); // read something with escaped characters\n    \n    Collection<Object> out = doc.getField( \"cat\" ).getValues();\n    assertEquals( 3, out.size() );\n    assertEquals( \"[aaa, bbb, bbb]\", out.toString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/XmlUpdateRequestHandlerTest#testReadDoc().mjava","pathOld":"solr/src/test/org/apache/solr/handler/XmlUpdateRequestHandlerTest#testReadDoc().mjava","sourceNew":"  @Test\n  public void testReadDoc() throws Exception\n  {\n    String xml = \n      \"<doc boost=\\\"5.5\\\">\" +\n      \"  <field name=\\\"id\\\" boost=\\\"2.2\\\">12345</field>\" +\n      \"  <field name=\\\"name\\\">kitten</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"3\\\">aaa</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"4\\\">bbb</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"5\\\">bbb</field>\" +\n      \"  <field name=\\\"ab\\\">a&amp;b</field>\" +\n      \"</doc>\";\n\n    XMLStreamReader parser = \n      inputFactory.createXMLStreamReader( new StringReader( xml ) );\n    parser.next(); // read the START document...\n    //null for the processor is all right here\n    XMLLoader loader = new XMLLoader(null, inputFactory);\n    SolrInputDocument doc = loader.readDoc( parser );\n    \n    // Read boosts\n    assertEquals( 5.5f, doc.getDocumentBoost() );\n    assertEquals( 1.0f, doc.getField( \"name\" ).getBoost() );\n    assertEquals( 2.2f, doc.getField( \"id\" ).getBoost() );\n    // Boost is the product of each value\n    assertEquals( (3*4*5.0f), doc.getField( \"cat\" ).getBoost() );\n    \n    // Read values\n    assertEquals( \"12345\", doc.getField( \"id\" ).getValue() );\n    assertEquals( \"kitten\", doc.getField( \"name\").getValue() );\n    assertEquals( \"a&b\", doc.getField( \"ab\").getValue() ); // read something with escaped characters\n    \n    Collection<Object> out = doc.getField( \"cat\" ).getValues();\n    assertEquals( 3, out.size() );\n    assertEquals( \"[aaa, bbb, bbb]\", out.toString() );\n  }\n\n","sourceOld":"  @Test\n  public void testReadDoc() throws Exception\n  {\n    String xml = \n      \"<doc boost=\\\"5.5\\\">\" +\n      \"  <field name=\\\"id\\\" boost=\\\"2.2\\\">12345</field>\" +\n      \"  <field name=\\\"name\\\">kitten</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"3\\\">aaa</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"4\\\">bbb</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"5\\\">bbb</field>\" +\n      \"  <field name=\\\"ab\\\">a&amp;b</field>\" +\n      \"</doc>\";\n\n    XMLStreamReader parser = \n      inputFactory.createXMLStreamReader( new StringReader( xml ) );\n    parser.next(); // read the START document...\n    //null for the processor is all right here\n    XMLLoader loader = new XMLLoader(null, inputFactory);\n    SolrInputDocument doc = loader.readDoc( parser );\n    \n    // Read boosts\n    assertEquals( 5.5f, doc.getDocumentBoost() );\n    assertEquals( 1.0f, doc.getField( \"name\" ).getBoost() );\n    assertEquals( 2.2f, doc.getField( \"id\" ).getBoost() );\n    // Boost is the product of each value\n    assertEquals( (3*4*5.0f), doc.getField( \"cat\" ).getBoost() );\n    \n    // Read values\n    assertEquals( \"12345\", doc.getField( \"id\" ).getValue() );\n    assertEquals( \"kitten\", doc.getField( \"name\").getValue() );\n    assertEquals( \"a&b\", doc.getField( \"ab\").getValue() ); // read something with escaped characters\n    \n    Collection<Object> out = doc.getField( \"cat\" ).getValues();\n    assertEquals( 3, out.size() );\n    assertEquals( \"[aaa, bbb, bbb]\", out.toString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["3ad599f8c2fdb737c5be23d7ed505032c5acadf6","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","3ad599f8c2fdb737c5be23d7ed505032c5acadf6"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["3ad599f8c2fdb737c5be23d7ed505032c5acadf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3ad599f8c2fdb737c5be23d7ed505032c5acadf6":["1da8d55113b689b06716246649de6f62430f15c0"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["3ad599f8c2fdb737c5be23d7ed505032c5acadf6"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["1da8d55113b689b06716246649de6f62430f15c0","3ad599f8c2fdb737c5be23d7ed505032c5acadf6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"1da8d55113b689b06716246649de6f62430f15c0":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3ad599f8c2fdb737c5be23d7ed505032c5acadf6","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3ad599f8c2fdb737c5be23d7ed505032c5acadf6":["c26f00b574427b55127e869b935845554afde1fa","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a258fbb26824fd104ed795e5d9033d2d040049ee","4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}