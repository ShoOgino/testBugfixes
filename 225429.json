{"path":"lucene/codecs/src/test/org/apache/lucene/codecs/pulsing/TestPulsingReuse#testNestedPulsing().mjava","commits":[{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/pulsing/TestPulsingReuse#testNestedPulsing().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/pulsing/TestPulsingReuse#testNestedPulsing().mjava","sourceNew":"  /** tests reuse with Pulsing1(Pulsing2(Standard)) */\n  public void testNestedPulsing() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new NestedPulsingPostingsFormat());\n    BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // will do this ourselves, custom codec\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    Document doc = new Document();\n    doc.add(new TextField(\"foo\", \"a b b c c c d e f g g g h i i j j k l l m m m\", Field.Store.NO));\n    // note: the reuse is imperfect, here we would have 4 enums (lost reuse when we get an enum for 'm')\n    // this is because we only track the 'last' enum we reused (not all).\n    // but this seems 'good enough' for now.\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    AtomicReader segment = getOnlySegmentReader(ir);\n    DocsEnum reuse = null;\n    Map<DocsEnum,Boolean> allEnums = new IdentityHashMap<DocsEnum,Boolean>();\n    TermsEnum te = segment.terms(\"foo\").iterator(null);\n    while (te.next() != null) {\n      reuse = te.docs(null, reuse, 0);\n      allEnums.put(reuse, true);\n    }\n    \n    assertEquals(4, allEnums.size());\n    \n    allEnums.clear();\n    DocsAndPositionsEnum posReuse = null;\n    te = segment.terms(\"foo\").iterator(null);\n    while (te.next() != null) {\n      posReuse = te.docsAndPositions(null, posReuse);\n      allEnums.put(posReuse, true);\n    }\n    \n    assertEquals(4, allEnums.size());\n    \n    ir.close();\n    CheckIndex ci = new CheckIndex(dir);\n    ci.checkIndex(null);\n    dir.close();\n  }\n\n","sourceOld":"  /** tests reuse with Pulsing1(Pulsing2(Standard)) */\n  public void testNestedPulsing() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new NestedPulsingPostingsFormat());\n    BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // will do this ourselves, custom codec\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    Document doc = new Document();\n    doc.add(new TextField(\"foo\", \"a b b c c c d e f g g g h i i j j k l l m m m\", Field.Store.NO));\n    // note: the reuse is imperfect, here we would have 4 enums (lost reuse when we get an enum for 'm')\n    // this is because we only track the 'last' enum we reused (not all).\n    // but this seems 'good enough' for now.\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    AtomicReader segment = getOnlySegmentReader(ir);\n    DocsEnum reuse = null;\n    Map<DocsEnum,Boolean> allEnums = new IdentityHashMap<DocsEnum,Boolean>();\n    TermsEnum te = segment.terms(\"foo\").iterator(null);\n    while (te.next() != null) {\n      reuse = te.docs(null, reuse, 0);\n      allEnums.put(reuse, true);\n    }\n    \n    assertEquals(4, allEnums.size());\n    \n    allEnums.clear();\n    DocsAndPositionsEnum posReuse = null;\n    te = segment.terms(\"foo\").iterator(null);\n    while (te.next() != null) {\n      posReuse = te.docsAndPositions(null, posReuse);\n      allEnums.put(posReuse, true);\n    }\n    \n    assertEquals(4, allEnums.size());\n    \n    ir.close();\n    CheckIndex ci = new CheckIndex(dir);\n    ci.checkIndex(null);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f9ef0d2dc62408768986e9157e0d12582bfeb25","date":1349806977,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/pulsing/TestPulsingReuse#testNestedPulsing().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/pulsing/TestPulsingReuse#testNestedPulsing().mjava","sourceNew":"  /** tests reuse with Pulsing1(Pulsing2(Standard)) */\n  public void testNestedPulsing() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new NestedPulsingPostingsFormat());\n    BaseDirectoryWrapper dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    Document doc = new Document();\n    doc.add(new TextField(\"foo\", \"a b b c c c d e f g g g h i i j j k l l m m m\", Field.Store.NO));\n    // note: the reuse is imperfect, here we would have 4 enums (lost reuse when we get an enum for 'm')\n    // this is because we only track the 'last' enum we reused (not all).\n    // but this seems 'good enough' for now.\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    AtomicReader segment = getOnlySegmentReader(ir);\n    DocsEnum reuse = null;\n    Map<DocsEnum,Boolean> allEnums = new IdentityHashMap<DocsEnum,Boolean>();\n    TermsEnum te = segment.terms(\"foo\").iterator(null);\n    while (te.next() != null) {\n      reuse = te.docs(null, reuse, 0);\n      allEnums.put(reuse, true);\n    }\n    \n    assertEquals(4, allEnums.size());\n    \n    allEnums.clear();\n    DocsAndPositionsEnum posReuse = null;\n    te = segment.terms(\"foo\").iterator(null);\n    while (te.next() != null) {\n      posReuse = te.docsAndPositions(null, posReuse);\n      allEnums.put(posReuse, true);\n    }\n    \n    assertEquals(4, allEnums.size());\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** tests reuse with Pulsing1(Pulsing2(Standard)) */\n  public void testNestedPulsing() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new NestedPulsingPostingsFormat());\n    BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // will do this ourselves, custom codec\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    Document doc = new Document();\n    doc.add(new TextField(\"foo\", \"a b b c c c d e f g g g h i i j j k l l m m m\", Field.Store.NO));\n    // note: the reuse is imperfect, here we would have 4 enums (lost reuse when we get an enum for 'm')\n    // this is because we only track the 'last' enum we reused (not all).\n    // but this seems 'good enough' for now.\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    AtomicReader segment = getOnlySegmentReader(ir);\n    DocsEnum reuse = null;\n    Map<DocsEnum,Boolean> allEnums = new IdentityHashMap<DocsEnum,Boolean>();\n    TermsEnum te = segment.terms(\"foo\").iterator(null);\n    while (te.next() != null) {\n      reuse = te.docs(null, reuse, 0);\n      allEnums.put(reuse, true);\n    }\n    \n    assertEquals(4, allEnums.size());\n    \n    allEnums.clear();\n    DocsAndPositionsEnum posReuse = null;\n    te = segment.terms(\"foo\").iterator(null);\n    while (te.next() != null) {\n      posReuse = te.docsAndPositions(null, posReuse);\n      allEnums.put(posReuse, true);\n    }\n    \n    assertEquals(4, allEnums.size());\n    \n    ir.close();\n    CheckIndex ci = new CheckIndex(dir);\n    ci.checkIndex(null);\n    dir.close();\n  }\n\n","bugFix":["7b91922b55d15444d554721b352861d028eb8278","905f6760f432211e868cf7d229c8797382853a7a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15250ca94ba8ab3bcdd476daf6bf3f3febb92640","date":1355200097,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/pulsing/TestPulsingReuse#testNestedPulsing().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/pulsing/TestPulsingReuse#testNestedPulsing().mjava","sourceNew":"  /** tests reuse with Pulsing1(Pulsing2(Standard)) */\n  public void testNestedPulsing() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new NestedPulsingPostingsFormat());\n    BaseDirectoryWrapper dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    Document doc = new Document();\n    doc.add(new TextField(\"foo\", \"a b b c c c d e f g g g h i i j j k l l m m m\", Field.Store.NO));\n    // note: the reuse is imperfect, here we would have 4 enums (lost reuse when we get an enum for 'm')\n    // this is because we only track the 'last' enum we reused (not all).\n    // but this seems 'good enough' for now.\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    AtomicReader segment = getOnlySegmentReader(ir);\n    DocsEnum reuse = null;\n    Map<DocsEnum,Boolean> allEnums = new IdentityHashMap<DocsEnum,Boolean>();\n    TermsEnum te = segment.terms(\"foo\").iterator(null);\n    while (te.next() != null) {\n      reuse = te.docs(null, reuse, DocsEnum.FLAG_NONE);\n      allEnums.put(reuse, true);\n    }\n    \n    assertEquals(4, allEnums.size());\n    \n    allEnums.clear();\n    DocsAndPositionsEnum posReuse = null;\n    te = segment.terms(\"foo\").iterator(null);\n    while (te.next() != null) {\n      posReuse = te.docsAndPositions(null, posReuse);\n      allEnums.put(posReuse, true);\n    }\n    \n    assertEquals(4, allEnums.size());\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** tests reuse with Pulsing1(Pulsing2(Standard)) */\n  public void testNestedPulsing() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new NestedPulsingPostingsFormat());\n    BaseDirectoryWrapper dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    Document doc = new Document();\n    doc.add(new TextField(\"foo\", \"a b b c c c d e f g g g h i i j j k l l m m m\", Field.Store.NO));\n    // note: the reuse is imperfect, here we would have 4 enums (lost reuse when we get an enum for 'm')\n    // this is because we only track the 'last' enum we reused (not all).\n    // but this seems 'good enough' for now.\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    AtomicReader segment = getOnlySegmentReader(ir);\n    DocsEnum reuse = null;\n    Map<DocsEnum,Boolean> allEnums = new IdentityHashMap<DocsEnum,Boolean>();\n    TermsEnum te = segment.terms(\"foo\").iterator(null);\n    while (te.next() != null) {\n      reuse = te.docs(null, reuse, 0);\n      allEnums.put(reuse, true);\n    }\n    \n    assertEquals(4, allEnums.size());\n    \n    allEnums.clear();\n    DocsAndPositionsEnum posReuse = null;\n    te = segment.terms(\"foo\").iterator(null);\n    while (te.next() != null) {\n      posReuse = te.docsAndPositions(null, posReuse);\n      allEnums.put(posReuse, true);\n    }\n    \n    assertEquals(4, allEnums.size());\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/pulsing/TestPulsingReuse#testNestedPulsing().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/pulsing/TestPulsingReuse#testNestedPulsing().mjava","sourceNew":"  /** tests reuse with Pulsing1(Pulsing2(Standard)) */\n  public void testNestedPulsing() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new NestedPulsingPostingsFormat());\n    BaseDirectoryWrapper dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    Document doc = new Document();\n    doc.add(new TextField(\"foo\", \"a b b c c c d e f g g g h i i j j k l l m m m\", Field.Store.NO));\n    // note: the reuse is imperfect, here we would have 4 enums (lost reuse when we get an enum for 'm')\n    // this is because we only track the 'last' enum we reused (not all).\n    // but this seems 'good enough' for now.\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    AtomicReader segment = getOnlySegmentReader(ir);\n    DocsEnum reuse = null;\n    Map<DocsEnum,Boolean> allEnums = new IdentityHashMap<DocsEnum,Boolean>();\n    TermsEnum te = segment.terms(\"foo\").iterator(null);\n    while (te.next() != null) {\n      reuse = te.docs(null, reuse, DocsEnum.FLAG_NONE);\n      allEnums.put(reuse, true);\n    }\n    \n    assertEquals(4, allEnums.size());\n    \n    allEnums.clear();\n    DocsAndPositionsEnum posReuse = null;\n    te = segment.terms(\"foo\").iterator(null);\n    while (te.next() != null) {\n      posReuse = te.docsAndPositions(null, posReuse);\n      allEnums.put(posReuse, true);\n    }\n    \n    assertEquals(4, allEnums.size());\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** tests reuse with Pulsing1(Pulsing2(Standard)) */\n  public void testNestedPulsing() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new NestedPulsingPostingsFormat());\n    BaseDirectoryWrapper dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    Document doc = new Document();\n    doc.add(new TextField(\"foo\", \"a b b c c c d e f g g g h i i j j k l l m m m\", Field.Store.NO));\n    // note: the reuse is imperfect, here we would have 4 enums (lost reuse when we get an enum for 'm')\n    // this is because we only track the 'last' enum we reused (not all).\n    // but this seems 'good enough' for now.\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    AtomicReader segment = getOnlySegmentReader(ir);\n    DocsEnum reuse = null;\n    Map<DocsEnum,Boolean> allEnums = new IdentityHashMap<DocsEnum,Boolean>();\n    TermsEnum te = segment.terms(\"foo\").iterator(null);\n    while (te.next() != null) {\n      reuse = te.docs(null, reuse, 0);\n      allEnums.put(reuse, true);\n    }\n    \n    assertEquals(4, allEnums.size());\n    \n    allEnums.clear();\n    DocsAndPositionsEnum posReuse = null;\n    te = segment.terms(\"foo\").iterator(null);\n    while (te.next() != null) {\n      posReuse = te.docsAndPositions(null, posReuse);\n      allEnums.put(posReuse, true);\n    }\n    \n    assertEquals(4, allEnums.size());\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/pulsing/TestPulsingReuse#testNestedPulsing().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/pulsing/TestPulsingReuse#testNestedPulsing().mjava","sourceNew":"  /** tests reuse with Pulsing1(Pulsing2(Standard)) */\n  public void testNestedPulsing() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = TestUtil.alwaysPostingsFormat(new NestedPulsingPostingsFormat());\n    BaseDirectoryWrapper dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    Document doc = new Document();\n    doc.add(new TextField(\"foo\", \"a b b c c c d e f g g g h i i j j k l l m m m\", Field.Store.NO));\n    // note: the reuse is imperfect, here we would have 4 enums (lost reuse when we get an enum for 'm')\n    // this is because we only track the 'last' enum we reused (not all).\n    // but this seems 'good enough' for now.\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    AtomicReader segment = getOnlySegmentReader(ir);\n    DocsEnum reuse = null;\n    Map<DocsEnum,Boolean> allEnums = new IdentityHashMap<DocsEnum,Boolean>();\n    TermsEnum te = segment.terms(\"foo\").iterator(null);\n    while (te.next() != null) {\n      reuse = te.docs(null, reuse, DocsEnum.FLAG_NONE);\n      allEnums.put(reuse, true);\n    }\n    \n    assertEquals(4, allEnums.size());\n    \n    allEnums.clear();\n    DocsAndPositionsEnum posReuse = null;\n    te = segment.terms(\"foo\").iterator(null);\n    while (te.next() != null) {\n      posReuse = te.docsAndPositions(null, posReuse);\n      allEnums.put(posReuse, true);\n    }\n    \n    assertEquals(4, allEnums.size());\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** tests reuse with Pulsing1(Pulsing2(Standard)) */\n  public void testNestedPulsing() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new NestedPulsingPostingsFormat());\n    BaseDirectoryWrapper dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    Document doc = new Document();\n    doc.add(new TextField(\"foo\", \"a b b c c c d e f g g g h i i j j k l l m m m\", Field.Store.NO));\n    // note: the reuse is imperfect, here we would have 4 enums (lost reuse when we get an enum for 'm')\n    // this is because we only track the 'last' enum we reused (not all).\n    // but this seems 'good enough' for now.\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    AtomicReader segment = getOnlySegmentReader(ir);\n    DocsEnum reuse = null;\n    Map<DocsEnum,Boolean> allEnums = new IdentityHashMap<DocsEnum,Boolean>();\n    TermsEnum te = segment.terms(\"foo\").iterator(null);\n    while (te.next() != null) {\n      reuse = te.docs(null, reuse, DocsEnum.FLAG_NONE);\n      allEnums.put(reuse, true);\n    }\n    \n    assertEquals(4, allEnums.size());\n    \n    allEnums.clear();\n    DocsAndPositionsEnum posReuse = null;\n    te = segment.terms(\"foo\").iterator(null);\n    while (te.next() != null) {\n      posReuse = te.docsAndPositions(null, posReuse);\n      allEnums.put(posReuse, true);\n    }\n    \n    assertEquals(4, allEnums.size());\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/pulsing/TestPulsingReuse#testNestedPulsing().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/pulsing/TestPulsingReuse#testNestedPulsing().mjava","sourceNew":"  /** tests reuse with Pulsing1(Pulsing2(Standard)) */\n  public void testNestedPulsing() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = TestUtil.alwaysPostingsFormat(new NestedPulsingPostingsFormat());\n    BaseDirectoryWrapper dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    Document doc = new Document();\n    doc.add(new TextField(\"foo\", \"a b b c c c d e f g g g h i i j j k l l m m m\", Field.Store.NO));\n    // note: the reuse is imperfect, here we would have 4 enums (lost reuse when we get an enum for 'm')\n    // this is because we only track the 'last' enum we reused (not all).\n    // but this seems 'good enough' for now.\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    AtomicReader segment = getOnlySegmentReader(ir);\n    DocsEnum reuse = null;\n    Map<DocsEnum,Boolean> allEnums = new IdentityHashMap<>();\n    TermsEnum te = segment.terms(\"foo\").iterator(null);\n    while (te.next() != null) {\n      reuse = te.docs(null, reuse, DocsEnum.FLAG_NONE);\n      allEnums.put(reuse, true);\n    }\n    \n    assertEquals(4, allEnums.size());\n    \n    allEnums.clear();\n    DocsAndPositionsEnum posReuse = null;\n    te = segment.terms(\"foo\").iterator(null);\n    while (te.next() != null) {\n      posReuse = te.docsAndPositions(null, posReuse);\n      allEnums.put(posReuse, true);\n    }\n    \n    assertEquals(4, allEnums.size());\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** tests reuse with Pulsing1(Pulsing2(Standard)) */\n  public void testNestedPulsing() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = TestUtil.alwaysPostingsFormat(new NestedPulsingPostingsFormat());\n    BaseDirectoryWrapper dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    Document doc = new Document();\n    doc.add(new TextField(\"foo\", \"a b b c c c d e f g g g h i i j j k l l m m m\", Field.Store.NO));\n    // note: the reuse is imperfect, here we would have 4 enums (lost reuse when we get an enum for 'm')\n    // this is because we only track the 'last' enum we reused (not all).\n    // but this seems 'good enough' for now.\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    AtomicReader segment = getOnlySegmentReader(ir);\n    DocsEnum reuse = null;\n    Map<DocsEnum,Boolean> allEnums = new IdentityHashMap<DocsEnum,Boolean>();\n    TermsEnum te = segment.terms(\"foo\").iterator(null);\n    while (te.next() != null) {\n      reuse = te.docs(null, reuse, DocsEnum.FLAG_NONE);\n      allEnums.put(reuse, true);\n    }\n    \n    assertEquals(4, allEnums.size());\n    \n    allEnums.clear();\n    DocsAndPositionsEnum posReuse = null;\n    te = segment.terms(\"foo\").iterator(null);\n    while (te.next() != null) {\n      posReuse = te.docsAndPositions(null, posReuse);\n      allEnums.put(posReuse, true);\n    }\n    \n    assertEquals(4, allEnums.size());\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/pulsing/TestPulsingReuse#testNestedPulsing().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/pulsing/TestPulsingReuse#testNestedPulsing().mjava","sourceNew":"  /** tests reuse with Pulsing1(Pulsing2(Standard)) */\n  public void testNestedPulsing() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = TestUtil.alwaysPostingsFormat(new NestedPulsingPostingsFormat());\n    BaseDirectoryWrapper dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    Document doc = new Document();\n    doc.add(new TextField(\"foo\", \"a b b c c c d e f g g g h i i j j k l l m m m\", Field.Store.NO));\n    // note: the reuse is imperfect, here we would have 4 enums (lost reuse when we get an enum for 'm')\n    // this is because we only track the 'last' enum we reused (not all).\n    // but this seems 'good enough' for now.\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.shutdown();\n    \n    AtomicReader segment = getOnlySegmentReader(ir);\n    DocsEnum reuse = null;\n    Map<DocsEnum,Boolean> allEnums = new IdentityHashMap<>();\n    TermsEnum te = segment.terms(\"foo\").iterator(null);\n    while (te.next() != null) {\n      reuse = te.docs(null, reuse, DocsEnum.FLAG_NONE);\n      allEnums.put(reuse, true);\n    }\n    \n    assertEquals(4, allEnums.size());\n    \n    allEnums.clear();\n    DocsAndPositionsEnum posReuse = null;\n    te = segment.terms(\"foo\").iterator(null);\n    while (te.next() != null) {\n      posReuse = te.docsAndPositions(null, posReuse);\n      allEnums.put(posReuse, true);\n    }\n    \n    assertEquals(4, allEnums.size());\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** tests reuse with Pulsing1(Pulsing2(Standard)) */\n  public void testNestedPulsing() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = TestUtil.alwaysPostingsFormat(new NestedPulsingPostingsFormat());\n    BaseDirectoryWrapper dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    Document doc = new Document();\n    doc.add(new TextField(\"foo\", \"a b b c c c d e f g g g h i i j j k l l m m m\", Field.Store.NO));\n    // note: the reuse is imperfect, here we would have 4 enums (lost reuse when we get an enum for 'm')\n    // this is because we only track the 'last' enum we reused (not all).\n    // but this seems 'good enough' for now.\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    AtomicReader segment = getOnlySegmentReader(ir);\n    DocsEnum reuse = null;\n    Map<DocsEnum,Boolean> allEnums = new IdentityHashMap<>();\n    TermsEnum te = segment.terms(\"foo\").iterator(null);\n    while (te.next() != null) {\n      reuse = te.docs(null, reuse, DocsEnum.FLAG_NONE);\n      allEnums.put(reuse, true);\n    }\n    \n    assertEquals(4, allEnums.size());\n    \n    allEnums.clear();\n    DocsAndPositionsEnum posReuse = null;\n    te = segment.terms(\"foo\").iterator(null);\n    while (te.next() != null) {\n      posReuse = te.docsAndPositions(null, posReuse);\n      allEnums.put(posReuse, true);\n    }\n    \n    assertEquals(4, allEnums.size());\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/pulsing/TestPulsingReuse#testNestedPulsing().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/pulsing/TestPulsingReuse#testNestedPulsing().mjava","sourceNew":"  /** tests reuse with Pulsing1(Pulsing2(Standard)) */\n  public void testNestedPulsing() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = TestUtil.alwaysPostingsFormat(new NestedPulsingPostingsFormat());\n    BaseDirectoryWrapper dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(new MockAnalyzer(random())).setCodec(cp));\n    Document doc = new Document();\n    doc.add(new TextField(\"foo\", \"a b b c c c d e f g g g h i i j j k l l m m m\", Field.Store.NO));\n    // note: the reuse is imperfect, here we would have 4 enums (lost reuse when we get an enum for 'm')\n    // this is because we only track the 'last' enum we reused (not all).\n    // but this seems 'good enough' for now.\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.shutdown();\n    \n    AtomicReader segment = getOnlySegmentReader(ir);\n    DocsEnum reuse = null;\n    Map<DocsEnum,Boolean> allEnums = new IdentityHashMap<>();\n    TermsEnum te = segment.terms(\"foo\").iterator(null);\n    while (te.next() != null) {\n      reuse = te.docs(null, reuse, DocsEnum.FLAG_NONE);\n      allEnums.put(reuse, true);\n    }\n    \n    assertEquals(4, allEnums.size());\n    \n    allEnums.clear();\n    DocsAndPositionsEnum posReuse = null;\n    te = segment.terms(\"foo\").iterator(null);\n    while (te.next() != null) {\n      posReuse = te.docsAndPositions(null, posReuse);\n      allEnums.put(posReuse, true);\n    }\n    \n    assertEquals(4, allEnums.size());\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** tests reuse with Pulsing1(Pulsing2(Standard)) */\n  public void testNestedPulsing() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = TestUtil.alwaysPostingsFormat(new NestedPulsingPostingsFormat());\n    BaseDirectoryWrapper dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    Document doc = new Document();\n    doc.add(new TextField(\"foo\", \"a b b c c c d e f g g g h i i j j k l l m m m\", Field.Store.NO));\n    // note: the reuse is imperfect, here we would have 4 enums (lost reuse when we get an enum for 'm')\n    // this is because we only track the 'last' enum we reused (not all).\n    // but this seems 'good enough' for now.\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.shutdown();\n    \n    AtomicReader segment = getOnlySegmentReader(ir);\n    DocsEnum reuse = null;\n    Map<DocsEnum,Boolean> allEnums = new IdentityHashMap<>();\n    TermsEnum te = segment.terms(\"foo\").iterator(null);\n    while (te.next() != null) {\n      reuse = te.docs(null, reuse, DocsEnum.FLAG_NONE);\n      allEnums.put(reuse, true);\n    }\n    \n    assertEquals(4, allEnums.size());\n    \n    allEnums.clear();\n    DocsAndPositionsEnum posReuse = null;\n    te = segment.terms(\"foo\").iterator(null);\n    while (te.next() != null) {\n      posReuse = te.docsAndPositions(null, posReuse);\n      allEnums.put(posReuse, true);\n    }\n    \n    assertEquals(4, allEnums.size());\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/pulsing/TestPulsingReuse#testNestedPulsing().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/pulsing/TestPulsingReuse#testNestedPulsing().mjava","sourceNew":"  /** tests reuse with Pulsing1(Pulsing2(Standard)) */\n  public void testNestedPulsing() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = TestUtil.alwaysPostingsFormat(new NestedPulsingPostingsFormat());\n    BaseDirectoryWrapper dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(new MockAnalyzer(random())).setCodec(cp));\n    Document doc = new Document();\n    doc.add(new TextField(\"foo\", \"a b b c c c d e f g g g h i i j j k l l m m m\", Field.Store.NO));\n    // note: the reuse is imperfect, here we would have 4 enums (lost reuse when we get an enum for 'm')\n    // this is because we only track the 'last' enum we reused (not all).\n    // but this seems 'good enough' for now.\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    AtomicReader segment = getOnlySegmentReader(ir);\n    DocsEnum reuse = null;\n    Map<DocsEnum,Boolean> allEnums = new IdentityHashMap<>();\n    TermsEnum te = segment.terms(\"foo\").iterator(null);\n    while (te.next() != null) {\n      reuse = te.docs(null, reuse, DocsEnum.FLAG_NONE);\n      allEnums.put(reuse, true);\n    }\n    \n    assertEquals(4, allEnums.size());\n    \n    allEnums.clear();\n    DocsAndPositionsEnum posReuse = null;\n    te = segment.terms(\"foo\").iterator(null);\n    while (te.next() != null) {\n      posReuse = te.docsAndPositions(null, posReuse);\n      allEnums.put(posReuse, true);\n    }\n    \n    assertEquals(4, allEnums.size());\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** tests reuse with Pulsing1(Pulsing2(Standard)) */\n  public void testNestedPulsing() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = TestUtil.alwaysPostingsFormat(new NestedPulsingPostingsFormat());\n    BaseDirectoryWrapper dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(new MockAnalyzer(random())).setCodec(cp));\n    Document doc = new Document();\n    doc.add(new TextField(\"foo\", \"a b b c c c d e f g g g h i i j j k l l m m m\", Field.Store.NO));\n    // note: the reuse is imperfect, here we would have 4 enums (lost reuse when we get an enum for 'm')\n    // this is because we only track the 'last' enum we reused (not all).\n    // but this seems 'good enough' for now.\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.shutdown();\n    \n    AtomicReader segment = getOnlySegmentReader(ir);\n    DocsEnum reuse = null;\n    Map<DocsEnum,Boolean> allEnums = new IdentityHashMap<>();\n    TermsEnum te = segment.terms(\"foo\").iterator(null);\n    while (te.next() != null) {\n      reuse = te.docs(null, reuse, DocsEnum.FLAG_NONE);\n      allEnums.put(reuse, true);\n    }\n    \n    assertEquals(4, allEnums.size());\n    \n    allEnums.clear();\n    DocsAndPositionsEnum posReuse = null;\n    te = segment.terms(\"foo\").iterator(null);\n    while (te.next() != null) {\n      posReuse = te.docsAndPositions(null, posReuse);\n      allEnums.put(posReuse, true);\n    }\n    \n    assertEquals(4, allEnums.size());\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbaae1c00d39df2c872bbe043af26d02d3818313","date":1409657064,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/pulsing/TestPulsingReuse#testNestedPulsing().mjava","sourceNew":null,"sourceOld":"  /** tests reuse with Pulsing1(Pulsing2(Standard)) */\n  public void testNestedPulsing() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = TestUtil.alwaysPostingsFormat(new NestedPulsingPostingsFormat());\n    BaseDirectoryWrapper dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(new MockAnalyzer(random())).setCodec(cp));\n    Document doc = new Document();\n    doc.add(new TextField(\"foo\", \"a b b c c c d e f g g g h i i j j k l l m m m\", Field.Store.NO));\n    // note: the reuse is imperfect, here we would have 4 enums (lost reuse when we get an enum for 'm')\n    // this is because we only track the 'last' enum we reused (not all).\n    // but this seems 'good enough' for now.\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    AtomicReader segment = getOnlySegmentReader(ir);\n    DocsEnum reuse = null;\n    Map<DocsEnum,Boolean> allEnums = new IdentityHashMap<>();\n    TermsEnum te = segment.terms(\"foo\").iterator(null);\n    while (te.next() != null) {\n      reuse = te.docs(null, reuse, DocsEnum.FLAG_NONE);\n      allEnums.put(reuse, true);\n    }\n    \n    assertEquals(4, allEnums.size());\n    \n    allEnums.clear();\n    DocsAndPositionsEnum posReuse = null;\n    te = segment.terms(\"foo\").iterator(null);\n    while (te.next() != null) {\n      posReuse = te.docsAndPositions(null, posReuse);\n      allEnums.put(posReuse, true);\n    }\n    \n    assertEquals(4, allEnums.size());\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["4f9ef0d2dc62408768986e9157e0d12582bfeb25","15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6613659748fe4411a7dcf85266e55db1f95f7315"],"fbaae1c00d39df2c872bbe043af26d02d3818313":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"15250ca94ba8ab3bcdd476daf6bf3f3febb92640":["4f9ef0d2dc62408768986e9157e0d12582bfeb25"],"6613659748fe4411a7dcf85266e55db1f95f7315":["15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"4f9ef0d2dc62408768986e9157e0d12582bfeb25":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fbaae1c00d39df2c872bbe043af26d02d3818313"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"fbaae1c00d39df2c872bbe043af26d02d3818313":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"15250ca94ba8ab3bcdd476daf6bf3f3febb92640":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["4f9ef0d2dc62408768986e9157e0d12582bfeb25"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"4f9ef0d2dc62408768986e9157e0d12582bfeb25":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["fbaae1c00d39df2c872bbe043af26d02d3818313"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}