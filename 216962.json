{"path":"solr/core/src/test/org/apache/solr/request/TestWriterPerf#doPerf(String,SolrQueryRequest,int,int).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestWriterPerf#doPerf(String,SolrQueryRequest,int,int).mjava","pathOld":"solr/src/test/org/apache/solr/request/TestWriterPerf#doPerf(String,SolrQueryRequest,int,int).mjava","sourceNew":"  void doPerf(String writerName, SolrQueryRequest req, int encIter, int decIter) throws Exception {\n    SolrQueryResponse rsp = getResponse(req);\n    QueryResponseWriter w = h.getCore().getQueryResponseWriter(writerName);\n\n\n    ByteArrayOutputStream out=null;\n\n    System.gc();\n    long start = System.currentTimeMillis();\n    for (int i=0; i<encIter; i++) {\n    if (w instanceof BinaryQueryResponseWriter) {\n      BinaryQueryResponseWriter binWriter = (BinaryQueryResponseWriter) w;\n      out = new ByteArrayOutputStream();\n      binWriter.write(out, req, rsp);\n      out.close();\n    } else {\n      out = new ByteArrayOutputStream();\n      // to be fair, from my previous tests, much of the performance will be sucked up\n      // by java's UTF-8 encoding/decoding, not the actual writing\n      Writer writer = new OutputStreamWriter(out, \"UTF-8\");\n      w.write(writer, req, rsp);\n      writer.close();\n    }\n    }\n\n    long encodeTime = Math.max(System.currentTimeMillis() - start, 1);\n\n    byte[] arr = out.toByteArray();\n\n    start = System.currentTimeMillis();\n    writerName = writerName.intern();\n    for (int i=0; i<decIter; i++) {\n      ResponseParser rp = null;\n      if (writerName == \"xml\") {\n        rp = new XMLResponseParser();\n      } else if (writerName == \"javabin\") {\n        rp = new BinaryResponseParser();\n      } else {\n        break;\n      }\n      ByteArrayInputStream in = new ByteArrayInputStream(arr);\n      rp.processResponse(in, \"UTF-8\");      \n    }\n\n    long decodeTime = Math.max(System.currentTimeMillis() - start, 1);\n\n    log.info(\"writer \"+writerName+\", size=\"+out.size()+\", encodeRate=\"+(encodeTime==1 ? \"N/A\":  \"\"+(encIter*1000L/encodeTime)) + \", decodeRate=\"+(decodeTime==1 ? \"N/A\":  \"\"+(decIter*1000L/decodeTime)) );\n\n    req.close();\n  }\n\n","sourceOld":"  void doPerf(String writerName, SolrQueryRequest req, int encIter, int decIter) throws Exception {\n    SolrQueryResponse rsp = getResponse(req);\n    QueryResponseWriter w = h.getCore().getQueryResponseWriter(writerName);\n\n\n    ByteArrayOutputStream out=null;\n\n    System.gc();\n    long start = System.currentTimeMillis();\n    for (int i=0; i<encIter; i++) {\n    if (w instanceof BinaryQueryResponseWriter) {\n      BinaryQueryResponseWriter binWriter = (BinaryQueryResponseWriter) w;\n      out = new ByteArrayOutputStream();\n      binWriter.write(out, req, rsp);\n      out.close();\n    } else {\n      out = new ByteArrayOutputStream();\n      // to be fair, from my previous tests, much of the performance will be sucked up\n      // by java's UTF-8 encoding/decoding, not the actual writing\n      Writer writer = new OutputStreamWriter(out, \"UTF-8\");\n      w.write(writer, req, rsp);\n      writer.close();\n    }\n    }\n\n    long encodeTime = Math.max(System.currentTimeMillis() - start, 1);\n\n    byte[] arr = out.toByteArray();\n\n    start = System.currentTimeMillis();\n    writerName = writerName.intern();\n    for (int i=0; i<decIter; i++) {\n      ResponseParser rp = null;\n      if (writerName == \"xml\") {\n        rp = new XMLResponseParser();\n      } else if (writerName == \"javabin\") {\n        rp = new BinaryResponseParser();\n      } else {\n        break;\n      }\n      ByteArrayInputStream in = new ByteArrayInputStream(arr);\n      rp.processResponse(in, \"UTF-8\");      \n    }\n\n    long decodeTime = Math.max(System.currentTimeMillis() - start, 1);\n\n    log.info(\"writer \"+writerName+\", size=\"+out.size()+\", encodeRate=\"+(encodeTime==1 ? \"N/A\":  \"\"+(encIter*1000L/encodeTime)) + \", decodeRate=\"+(decodeTime==1 ? \"N/A\":  \"\"+(decIter*1000L/decodeTime)) );\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestWriterPerf#doPerf(String,SolrQueryRequest,int,int).mjava","pathOld":"solr/src/test/org/apache/solr/request/TestWriterPerf#doPerf(String,SolrQueryRequest,int,int).mjava","sourceNew":"  void doPerf(String writerName, SolrQueryRequest req, int encIter, int decIter) throws Exception {\n    SolrQueryResponse rsp = getResponse(req);\n    QueryResponseWriter w = h.getCore().getQueryResponseWriter(writerName);\n\n\n    ByteArrayOutputStream out=null;\n\n    System.gc();\n    long start = System.currentTimeMillis();\n    for (int i=0; i<encIter; i++) {\n    if (w instanceof BinaryQueryResponseWriter) {\n      BinaryQueryResponseWriter binWriter = (BinaryQueryResponseWriter) w;\n      out = new ByteArrayOutputStream();\n      binWriter.write(out, req, rsp);\n      out.close();\n    } else {\n      out = new ByteArrayOutputStream();\n      // to be fair, from my previous tests, much of the performance will be sucked up\n      // by java's UTF-8 encoding/decoding, not the actual writing\n      Writer writer = new OutputStreamWriter(out, \"UTF-8\");\n      w.write(writer, req, rsp);\n      writer.close();\n    }\n    }\n\n    long encodeTime = Math.max(System.currentTimeMillis() - start, 1);\n\n    byte[] arr = out.toByteArray();\n\n    start = System.currentTimeMillis();\n    writerName = writerName.intern();\n    for (int i=0; i<decIter; i++) {\n      ResponseParser rp = null;\n      if (writerName == \"xml\") {\n        rp = new XMLResponseParser();\n      } else if (writerName == \"javabin\") {\n        rp = new BinaryResponseParser();\n      } else {\n        break;\n      }\n      ByteArrayInputStream in = new ByteArrayInputStream(arr);\n      rp.processResponse(in, \"UTF-8\");      \n    }\n\n    long decodeTime = Math.max(System.currentTimeMillis() - start, 1);\n\n    log.info(\"writer \"+writerName+\", size=\"+out.size()+\", encodeRate=\"+(encodeTime==1 ? \"N/A\":  \"\"+(encIter*1000L/encodeTime)) + \", decodeRate=\"+(decodeTime==1 ? \"N/A\":  \"\"+(decIter*1000L/decodeTime)) );\n\n    req.close();\n  }\n\n","sourceOld":"  void doPerf(String writerName, SolrQueryRequest req, int encIter, int decIter) throws Exception {\n    SolrQueryResponse rsp = getResponse(req);\n    QueryResponseWriter w = h.getCore().getQueryResponseWriter(writerName);\n\n\n    ByteArrayOutputStream out=null;\n\n    System.gc();\n    long start = System.currentTimeMillis();\n    for (int i=0; i<encIter; i++) {\n    if (w instanceof BinaryQueryResponseWriter) {\n      BinaryQueryResponseWriter binWriter = (BinaryQueryResponseWriter) w;\n      out = new ByteArrayOutputStream();\n      binWriter.write(out, req, rsp);\n      out.close();\n    } else {\n      out = new ByteArrayOutputStream();\n      // to be fair, from my previous tests, much of the performance will be sucked up\n      // by java's UTF-8 encoding/decoding, not the actual writing\n      Writer writer = new OutputStreamWriter(out, \"UTF-8\");\n      w.write(writer, req, rsp);\n      writer.close();\n    }\n    }\n\n    long encodeTime = Math.max(System.currentTimeMillis() - start, 1);\n\n    byte[] arr = out.toByteArray();\n\n    start = System.currentTimeMillis();\n    writerName = writerName.intern();\n    for (int i=0; i<decIter; i++) {\n      ResponseParser rp = null;\n      if (writerName == \"xml\") {\n        rp = new XMLResponseParser();\n      } else if (writerName == \"javabin\") {\n        rp = new BinaryResponseParser();\n      } else {\n        break;\n      }\n      ByteArrayInputStream in = new ByteArrayInputStream(arr);\n      rp.processResponse(in, \"UTF-8\");      \n    }\n\n    long decodeTime = Math.max(System.currentTimeMillis() - start, 1);\n\n    log.info(\"writer \"+writerName+\", size=\"+out.size()+\", encodeRate=\"+(encodeTime==1 ? \"N/A\":  \"\"+(encIter*1000L/encodeTime)) + \", decodeRate=\"+(decodeTime==1 ? \"N/A\":  \"\"+(decIter*1000L/decodeTime)) );\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestWriterPerf#doPerf(String,SolrQueryRequest,int,int).mjava","pathOld":"solr/src/test/org/apache/solr/request/TestWriterPerf#doPerf(String,SolrQueryRequest,int,int).mjava","sourceNew":"  void doPerf(String writerName, SolrQueryRequest req, int encIter, int decIter) throws Exception {\n    SolrQueryResponse rsp = getResponse(req);\n    QueryResponseWriter w = h.getCore().getQueryResponseWriter(writerName);\n\n\n    ByteArrayOutputStream out=null;\n\n    System.gc();\n    long start = System.currentTimeMillis();\n    for (int i=0; i<encIter; i++) {\n    if (w instanceof BinaryQueryResponseWriter) {\n      BinaryQueryResponseWriter binWriter = (BinaryQueryResponseWriter) w;\n      out = new ByteArrayOutputStream();\n      binWriter.write(out, req, rsp);\n      out.close();\n    } else {\n      out = new ByteArrayOutputStream();\n      // to be fair, from my previous tests, much of the performance will be sucked up\n      // by java's UTF-8 encoding/decoding, not the actual writing\n      Writer writer = new OutputStreamWriter(out, \"UTF-8\");\n      w.write(writer, req, rsp);\n      writer.close();\n    }\n    }\n\n    long encodeTime = Math.max(System.currentTimeMillis() - start, 1);\n\n    byte[] arr = out.toByteArray();\n\n    start = System.currentTimeMillis();\n    writerName = writerName.intern();\n    for (int i=0; i<decIter; i++) {\n      ResponseParser rp = null;\n      if (writerName == \"xml\") {\n        rp = new XMLResponseParser();\n      } else if (writerName == \"javabin\") {\n        rp = new BinaryResponseParser();\n      } else {\n        break;\n      }\n      ByteArrayInputStream in = new ByteArrayInputStream(arr);\n      rp.processResponse(in, \"UTF-8\");      \n    }\n\n    long decodeTime = Math.max(System.currentTimeMillis() - start, 1);\n\n    log.info(\"writer \"+writerName+\", size=\"+out.size()+\", encodeRate=\"+(encodeTime==1 ? \"N/A\":  \"\"+(encIter*1000L/encodeTime)) + \", decodeRate=\"+(decodeTime==1 ? \"N/A\":  \"\"+(decIter*1000L/decodeTime)) );\n\n    req.close();\n  }\n\n","sourceOld":"  void doPerf(String writerName, SolrQueryRequest req, int encIter, int decIter) throws Exception {\n    SolrQueryResponse rsp = getResponse(req);\n    QueryResponseWriter w = h.getCore().getQueryResponseWriter(writerName);\n\n\n    ByteArrayOutputStream out=null;\n\n    System.gc();\n    long start = System.currentTimeMillis();\n    for (int i=0; i<encIter; i++) {\n    if (w instanceof BinaryQueryResponseWriter) {\n      BinaryQueryResponseWriter binWriter = (BinaryQueryResponseWriter) w;\n      out = new ByteArrayOutputStream();\n      binWriter.write(out, req, rsp);\n      out.close();\n    } else {\n      out = new ByteArrayOutputStream();\n      // to be fair, from my previous tests, much of the performance will be sucked up\n      // by java's UTF-8 encoding/decoding, not the actual writing\n      Writer writer = new OutputStreamWriter(out, \"UTF-8\");\n      w.write(writer, req, rsp);\n      writer.close();\n    }\n    }\n\n    long encodeTime = Math.max(System.currentTimeMillis() - start, 1);\n\n    byte[] arr = out.toByteArray();\n\n    start = System.currentTimeMillis();\n    writerName = writerName.intern();\n    for (int i=0; i<decIter; i++) {\n      ResponseParser rp = null;\n      if (writerName == \"xml\") {\n        rp = new XMLResponseParser();\n      } else if (writerName == \"javabin\") {\n        rp = new BinaryResponseParser();\n      } else {\n        break;\n      }\n      ByteArrayInputStream in = new ByteArrayInputStream(arr);\n      rp.processResponse(in, \"UTF-8\");      \n    }\n\n    long decodeTime = Math.max(System.currentTimeMillis() - start, 1);\n\n    log.info(\"writer \"+writerName+\", size=\"+out.size()+\", encodeRate=\"+(encodeTime==1 ? \"N/A\":  \"\"+(encIter*1000L/encodeTime)) + \", decodeRate=\"+(decodeTime==1 ? \"N/A\":  \"\"+(decIter*1000L/decodeTime)) );\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestWriterPerf#doPerf(String,SolrQueryRequest,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestWriterPerf#doPerf(String,SolrQueryRequest,int,int).mjava","sourceNew":"  void doPerf(String writerName, SolrQueryRequest req, int encIter, int decIter) throws Exception {\n    SolrQueryResponse rsp = getResponse(req);\n    QueryResponseWriter w = h.getCore().getQueryResponseWriter(writerName);\n\n\n    ByteArrayOutputStream out=null;\n\n    System.gc();\n    long start = System.currentTimeMillis();\n    for (int i=0; i<encIter; i++) {\n    if (w instanceof BinaryQueryResponseWriter) {\n      BinaryQueryResponseWriter binWriter = (BinaryQueryResponseWriter) w;\n      out = new ByteArrayOutputStream();\n      binWriter.write(out, req, rsp);\n      out.close();\n    } else {\n      out = new ByteArrayOutputStream();\n      // to be fair, from my previous tests, much of the performance will be sucked up\n      // by java's UTF-8 encoding/decoding, not the actual writing\n      Writer writer = new OutputStreamWriter(out, \"UTF-8\");\n      w.write(writer, req, rsp);\n      writer.close();\n    }\n    }\n\n    long encodeTime = Math.max(System.currentTimeMillis() - start, 1);\n\n    byte[] arr = out.toByteArray();\n\n    start = System.currentTimeMillis();\n    writerName = writerName.intern();\n    for (int i=0; i<decIter; i++) {\n      ResponseParser rp = null;\n      if (writerName == \"xml\") {\n        rp = new XMLResponseParser();\n      } else if (writerName == \"javabin\") {\n        rp = new BinaryResponseParser();\n      } else {\n        break;\n      }\n      ByteArrayInputStream in = new ByteArrayInputStream(arr);\n      rp.processResponse(in, \"UTF-8\");      \n    }\n\n    long decodeTime = Math.max(System.currentTimeMillis() - start, 1);\n\n    log.info(\"writer \"+writerName+\", size=\"+out.size()+\", encodeRate=\"+(encodeTime==1 ? \"N/A\":  \"\"+(encIter*1000L/encodeTime)) + \", decodeRate=\"+(decodeTime==1 ? \"N/A\":  \"\"+(decIter*1000L/decodeTime)) );\n\n    req.close();\n  }\n\n","sourceOld":"  void doPerf(String writerName, SolrQueryRequest req, int encIter, int decIter) throws Exception {\n    SolrQueryResponse rsp = getResponse(req);\n    QueryResponseWriter w = h.getCore().getQueryResponseWriter(writerName);\n\n\n    ByteArrayOutputStream out=null;\n\n    System.gc();\n    long start = System.currentTimeMillis();\n    for (int i=0; i<encIter; i++) {\n    if (w instanceof BinaryQueryResponseWriter) {\n      BinaryQueryResponseWriter binWriter = (BinaryQueryResponseWriter) w;\n      out = new ByteArrayOutputStream();\n      binWriter.write(out, req, rsp);\n      out.close();\n    } else {\n      out = new ByteArrayOutputStream();\n      // to be fair, from my previous tests, much of the performance will be sucked up\n      // by java's UTF-8 encoding/decoding, not the actual writing\n      Writer writer = new OutputStreamWriter(out, \"UTF-8\");\n      w.write(writer, req, rsp);\n      writer.close();\n    }\n    }\n\n    long encodeTime = Math.max(System.currentTimeMillis() - start, 1);\n\n    byte[] arr = out.toByteArray();\n\n    start = System.currentTimeMillis();\n    writerName = writerName.intern();\n    for (int i=0; i<decIter; i++) {\n      ResponseParser rp = null;\n      if (writerName == \"xml\") {\n        rp = new XMLResponseParser();\n      } else if (writerName == \"javabin\") {\n        rp = new BinaryResponseParser();\n      } else {\n        break;\n      }\n      ByteArrayInputStream in = new ByteArrayInputStream(arr);\n      rp.processResponse(in, \"UTF-8\");      \n    }\n\n    long decodeTime = Math.max(System.currentTimeMillis() - start, 1);\n\n    log.info(\"writer \"+writerName+\", size=\"+out.size()+\", encodeRate=\"+(encodeTime==1 ? \"N/A\":  \"\"+(encIter*1000L/encodeTime)) + \", decodeRate=\"+(decodeTime==1 ? \"N/A\":  \"\"+(decIter*1000L/decodeTime)) );\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestWriterPerf#doPerf(String,SolrQueryRequest,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestWriterPerf#doPerf(String,SolrQueryRequest,int,int).mjava","sourceNew":"  void doPerf(String writerName, SolrQueryRequest req, int encIter, int decIter) throws Exception {\n    SolrQueryResponse rsp = getResponse(req);\n    QueryResponseWriter w = h.getCore().getQueryResponseWriter(writerName);\n\n\n    ByteArrayOutputStream out=null;\n\n    System.gc();\n    long start = System.currentTimeMillis();\n    for (int i=0; i<encIter; i++) {\n    if (w instanceof BinaryQueryResponseWriter) {\n      BinaryQueryResponseWriter binWriter = (BinaryQueryResponseWriter) w;\n      out = new ByteArrayOutputStream();\n      binWriter.write(out, req, rsp);\n      out.close();\n    } else {\n      out = new ByteArrayOutputStream();\n      // to be fair, from my previous tests, much of the performance will be sucked up\n      // by java's UTF-8 encoding/decoding, not the actual writing\n      Writer writer = new OutputStreamWriter(out, \"UTF-8\");\n      w.write(writer, req, rsp);\n      writer.close();\n    }\n    }\n\n    long encodeTime = Math.max(System.currentTimeMillis() - start, 1);\n\n    byte[] arr = out.toByteArray();\n\n    start = System.currentTimeMillis();\n    writerName = writerName.intern();\n    for (int i=0; i<decIter; i++) {\n      ResponseParser rp = null;\n      if (writerName == \"xml\") {\n        rp = new XMLResponseParser();\n      } else if (writerName == \"javabin\") {\n        rp = new BinaryResponseParser();\n      } else {\n        break;\n      }\n      ByteArrayInputStream in = new ByteArrayInputStream(arr);\n      rp.processResponse(in, \"UTF-8\");      \n    }\n\n    long decodeTime = Math.max(System.currentTimeMillis() - start, 1);\n\n    log.info(\"writer \"+writerName+\", size=\"+out.size()+\", encodeRate=\"+(encodeTime==1 ? \"N/A\":  \"\"+(encIter*1000L/encodeTime)) + \", decodeRate=\"+(decodeTime==1 ? \"N/A\":  \"\"+(decIter*1000L/decodeTime)) );\n\n    req.close();\n  }\n\n","sourceOld":"  void doPerf(String writerName, SolrQueryRequest req, int encIter, int decIter) throws Exception {\n    SolrQueryResponse rsp = getResponse(req);\n    QueryResponseWriter w = h.getCore().getQueryResponseWriter(writerName);\n\n\n    ByteArrayOutputStream out=null;\n\n    System.gc();\n    long start = System.currentTimeMillis();\n    for (int i=0; i<encIter; i++) {\n    if (w instanceof BinaryQueryResponseWriter) {\n      BinaryQueryResponseWriter binWriter = (BinaryQueryResponseWriter) w;\n      out = new ByteArrayOutputStream();\n      binWriter.write(out, req, rsp);\n      out.close();\n    } else {\n      out = new ByteArrayOutputStream();\n      // to be fair, from my previous tests, much of the performance will be sucked up\n      // by java's UTF-8 encoding/decoding, not the actual writing\n      Writer writer = new OutputStreamWriter(out, \"UTF-8\");\n      w.write(writer, req, rsp);\n      writer.close();\n    }\n    }\n\n    long encodeTime = Math.max(System.currentTimeMillis() - start, 1);\n\n    byte[] arr = out.toByteArray();\n\n    start = System.currentTimeMillis();\n    writerName = writerName.intern();\n    for (int i=0; i<decIter; i++) {\n      ResponseParser rp = null;\n      if (writerName == \"xml\") {\n        rp = new XMLResponseParser();\n      } else if (writerName == \"javabin\") {\n        rp = new BinaryResponseParser();\n      } else {\n        break;\n      }\n      ByteArrayInputStream in = new ByteArrayInputStream(arr);\n      rp.processResponse(in, \"UTF-8\");      \n    }\n\n    long decodeTime = Math.max(System.currentTimeMillis() - start, 1);\n\n    log.info(\"writer \"+writerName+\", size=\"+out.size()+\", encodeRate=\"+(encodeTime==1 ? \"N/A\":  \"\"+(encIter*1000L/encodeTime)) + \", decodeRate=\"+(decodeTime==1 ? \"N/A\":  \"\"+(decIter*1000L/decodeTime)) );\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d3d365762604952e436b51980101dfc84cc1b3e","date":1396298116,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestWriterPerf#doPerf(String,SolrQueryRequest,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestWriterPerf#doPerf(String,SolrQueryRequest,int,int).mjava","sourceNew":"  void doPerf(String writerName, SolrQueryRequest req, int encIter, int decIter) throws Exception {\n    SolrQueryResponse rsp = getResponse(req);\n    QueryResponseWriter w = h.getCore().getQueryResponseWriter(writerName);\n\n\n    ByteArrayOutputStream out=null;\n\n    System.gc();\n    long start = System.currentTimeMillis();\n    for (int i=0; i<encIter; i++) {\n    if (w instanceof BinaryQueryResponseWriter) {\n      BinaryQueryResponseWriter binWriter = (BinaryQueryResponseWriter) w;\n      out = new ByteArrayOutputStream();\n      binWriter.write(out, req, rsp);\n      out.close();\n    } else {\n      out = new ByteArrayOutputStream();\n      // to be fair, from my previous tests, much of the performance will be sucked up\n      // by java's UTF-8 encoding/decoding, not the actual writing\n      Writer writer = new OutputStreamWriter(out, StandardCharsets.UTF_8);\n      w.write(writer, req, rsp);\n      writer.close();\n    }\n    }\n\n    long encodeTime = Math.max(System.currentTimeMillis() - start, 1);\n\n    byte[] arr = out.toByteArray();\n\n    start = System.currentTimeMillis();\n    writerName = writerName.intern();\n    for (int i=0; i<decIter; i++) {\n      ResponseParser rp = null;\n      if (writerName == \"xml\") {\n        rp = new XMLResponseParser();\n      } else if (writerName == \"javabin\") {\n        rp = new BinaryResponseParser();\n      } else {\n        break;\n      }\n      ByteArrayInputStream in = new ByteArrayInputStream(arr);\n      rp.processResponse(in, \"UTF-8\");      \n    }\n\n    long decodeTime = Math.max(System.currentTimeMillis() - start, 1);\n\n    log.info(\"writer \"+writerName+\", size=\"+out.size()+\", encodeRate=\"+(encodeTime==1 ? \"N/A\":  \"\"+(encIter*1000L/encodeTime)) + \", decodeRate=\"+(decodeTime==1 ? \"N/A\":  \"\"+(decIter*1000L/decodeTime)) );\n\n    req.close();\n  }\n\n","sourceOld":"  void doPerf(String writerName, SolrQueryRequest req, int encIter, int decIter) throws Exception {\n    SolrQueryResponse rsp = getResponse(req);\n    QueryResponseWriter w = h.getCore().getQueryResponseWriter(writerName);\n\n\n    ByteArrayOutputStream out=null;\n\n    System.gc();\n    long start = System.currentTimeMillis();\n    for (int i=0; i<encIter; i++) {\n    if (w instanceof BinaryQueryResponseWriter) {\n      BinaryQueryResponseWriter binWriter = (BinaryQueryResponseWriter) w;\n      out = new ByteArrayOutputStream();\n      binWriter.write(out, req, rsp);\n      out.close();\n    } else {\n      out = new ByteArrayOutputStream();\n      // to be fair, from my previous tests, much of the performance will be sucked up\n      // by java's UTF-8 encoding/decoding, not the actual writing\n      Writer writer = new OutputStreamWriter(out, \"UTF-8\");\n      w.write(writer, req, rsp);\n      writer.close();\n    }\n    }\n\n    long encodeTime = Math.max(System.currentTimeMillis() - start, 1);\n\n    byte[] arr = out.toByteArray();\n\n    start = System.currentTimeMillis();\n    writerName = writerName.intern();\n    for (int i=0; i<decIter; i++) {\n      ResponseParser rp = null;\n      if (writerName == \"xml\") {\n        rp = new XMLResponseParser();\n      } else if (writerName == \"javabin\") {\n        rp = new BinaryResponseParser();\n      } else {\n        break;\n      }\n      ByteArrayInputStream in = new ByteArrayInputStream(arr);\n      rp.processResponse(in, \"UTF-8\");      \n    }\n\n    long decodeTime = Math.max(System.currentTimeMillis() - start, 1);\n\n    log.info(\"writer \"+writerName+\", size=\"+out.size()+\", encodeRate=\"+(encodeTime==1 ? \"N/A\":  \"\"+(encIter*1000L/encodeTime)) + \", decodeRate=\"+(decodeTime==1 ? \"N/A\":  \"\"+(decIter*1000L/decodeTime)) );\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestWriterPerf#doPerf(String,SolrQueryRequest,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestWriterPerf#doPerf(String,SolrQueryRequest,int,int).mjava","sourceNew":"  void doPerf(String writerName, SolrQueryRequest req, int encIter, int decIter) throws Exception {\n    SolrQueryResponse rsp = getResponse(req);\n    QueryResponseWriter w = h.getCore().getQueryResponseWriter(writerName);\n\n\n    ByteArrayOutputStream out=null;\n\n    System.gc();\n    long start = System.currentTimeMillis();\n    for (int i=0; i<encIter; i++) {\n    if (w instanceof BinaryQueryResponseWriter) {\n      BinaryQueryResponseWriter binWriter = (BinaryQueryResponseWriter) w;\n      out = new ByteArrayOutputStream();\n      binWriter.write(out, req, rsp);\n      out.close();\n    } else {\n      out = new ByteArrayOutputStream();\n      // to be fair, from my previous tests, much of the performance will be sucked up\n      // by java's UTF-8 encoding/decoding, not the actual writing\n      Writer writer = new OutputStreamWriter(out, StandardCharsets.UTF_8);\n      w.write(writer, req, rsp);\n      writer.close();\n    }\n    }\n\n    long encodeTime = Math.max(System.currentTimeMillis() - start, 1);\n\n    byte[] arr = out.toByteArray();\n\n    start = System.currentTimeMillis();\n    writerName = writerName.intern();\n    for (int i=0; i<decIter; i++) {\n      ResponseParser rp = null;\n      if (writerName == \"xml\") {\n        rp = new XMLResponseParser();\n      } else if (writerName == \"javabin\") {\n        rp = new BinaryResponseParser();\n      } else {\n        break;\n      }\n      ByteArrayInputStream in = new ByteArrayInputStream(arr);\n      rp.processResponse(in, \"UTF-8\");      \n    }\n\n    long decodeTime = Math.max(System.currentTimeMillis() - start, 1);\n\n    log.info(\"writer \"+writerName+\", size=\"+out.size()+\", encodeRate=\"+(encodeTime==1 ? \"N/A\":  \"\"+(encIter*1000L/encodeTime)) + \", decodeRate=\"+(decodeTime==1 ? \"N/A\":  \"\"+(decIter*1000L/decodeTime)) );\n\n    req.close();\n  }\n\n","sourceOld":"  void doPerf(String writerName, SolrQueryRequest req, int encIter, int decIter) throws Exception {\n    SolrQueryResponse rsp = getResponse(req);\n    QueryResponseWriter w = h.getCore().getQueryResponseWriter(writerName);\n\n\n    ByteArrayOutputStream out=null;\n\n    System.gc();\n    long start = System.currentTimeMillis();\n    for (int i=0; i<encIter; i++) {\n    if (w instanceof BinaryQueryResponseWriter) {\n      BinaryQueryResponseWriter binWriter = (BinaryQueryResponseWriter) w;\n      out = new ByteArrayOutputStream();\n      binWriter.write(out, req, rsp);\n      out.close();\n    } else {\n      out = new ByteArrayOutputStream();\n      // to be fair, from my previous tests, much of the performance will be sucked up\n      // by java's UTF-8 encoding/decoding, not the actual writing\n      Writer writer = new OutputStreamWriter(out, \"UTF-8\");\n      w.write(writer, req, rsp);\n      writer.close();\n    }\n    }\n\n    long encodeTime = Math.max(System.currentTimeMillis() - start, 1);\n\n    byte[] arr = out.toByteArray();\n\n    start = System.currentTimeMillis();\n    writerName = writerName.intern();\n    for (int i=0; i<decIter; i++) {\n      ResponseParser rp = null;\n      if (writerName == \"xml\") {\n        rp = new XMLResponseParser();\n      } else if (writerName == \"javabin\") {\n        rp = new BinaryResponseParser();\n      } else {\n        break;\n      }\n      ByteArrayInputStream in = new ByteArrayInputStream(arr);\n      rp.processResponse(in, \"UTF-8\");      \n    }\n\n    long decodeTime = Math.max(System.currentTimeMillis() - start, 1);\n\n    log.info(\"writer \"+writerName+\", size=\"+out.size()+\", encodeRate=\"+(encodeTime==1 ? \"N/A\":  \"\"+(encIter*1000L/encodeTime)) + \", decodeRate=\"+(decodeTime==1 ? \"N/A\":  \"\"+(decIter*1000L/decodeTime)) );\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestWriterPerf#doPerf(String,SolrQueryRequest,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestWriterPerf#doPerf(String,SolrQueryRequest,int,int).mjava","sourceNew":"  void doPerf(String writerName, SolrQueryRequest req, int encIter, int decIter) throws Exception {\n    SolrQueryResponse rsp = getResponse(req);\n    QueryResponseWriter w = h.getCore().getQueryResponseWriter(writerName);\n\n\n    ByteArrayOutputStream out=null;\n\n    System.gc();\n    RTimer timer = new RTimer();\n    for (int i=0; i<encIter; i++) {\n    if (w instanceof BinaryQueryResponseWriter) {\n      BinaryQueryResponseWriter binWriter = (BinaryQueryResponseWriter) w;\n      out = new ByteArrayOutputStream();\n      binWriter.write(out, req, rsp);\n      out.close();\n    } else {\n      out = new ByteArrayOutputStream();\n      // to be fair, from my previous tests, much of the performance will be sucked up\n      // by java's UTF-8 encoding/decoding, not the actual writing\n      Writer writer = new OutputStreamWriter(out, StandardCharsets.UTF_8);\n      w.write(writer, req, rsp);\n      writer.close();\n    }\n    }\n\n    double encodeTime = timer.getTime();\n\n    byte[] arr = out.toByteArray();\n\n    timer = new RTimer();\n    writerName = writerName.intern();\n    for (int i=0; i<decIter; i++) {\n      ResponseParser rp = null;\n      if (writerName == \"xml\") {\n        rp = new XMLResponseParser();\n      } else if (writerName == \"javabin\") {\n        rp = new BinaryResponseParser();\n      } else {\n        break;\n      }\n      ByteArrayInputStream in = new ByteArrayInputStream(arr);\n      rp.processResponse(in, \"UTF-8\");      \n    }\n\n    double decodeTime = timer.getTime();\n\n    log.info(\"writer \"+writerName+\", size=\"+out.size()+\", encodeRate=\"+(encIter*1000L/encodeTime) + \", decodeRate=\"+(decIter*1000L/decodeTime));\n\n    req.close();\n  }\n\n","sourceOld":"  void doPerf(String writerName, SolrQueryRequest req, int encIter, int decIter) throws Exception {\n    SolrQueryResponse rsp = getResponse(req);\n    QueryResponseWriter w = h.getCore().getQueryResponseWriter(writerName);\n\n\n    ByteArrayOutputStream out=null;\n\n    System.gc();\n    long start = System.currentTimeMillis();\n    for (int i=0; i<encIter; i++) {\n    if (w instanceof BinaryQueryResponseWriter) {\n      BinaryQueryResponseWriter binWriter = (BinaryQueryResponseWriter) w;\n      out = new ByteArrayOutputStream();\n      binWriter.write(out, req, rsp);\n      out.close();\n    } else {\n      out = new ByteArrayOutputStream();\n      // to be fair, from my previous tests, much of the performance will be sucked up\n      // by java's UTF-8 encoding/decoding, not the actual writing\n      Writer writer = new OutputStreamWriter(out, StandardCharsets.UTF_8);\n      w.write(writer, req, rsp);\n      writer.close();\n    }\n    }\n\n    long encodeTime = Math.max(System.currentTimeMillis() - start, 1);\n\n    byte[] arr = out.toByteArray();\n\n    start = System.currentTimeMillis();\n    writerName = writerName.intern();\n    for (int i=0; i<decIter; i++) {\n      ResponseParser rp = null;\n      if (writerName == \"xml\") {\n        rp = new XMLResponseParser();\n      } else if (writerName == \"javabin\") {\n        rp = new BinaryResponseParser();\n      } else {\n        break;\n      }\n      ByteArrayInputStream in = new ByteArrayInputStream(arr);\n      rp.processResponse(in, \"UTF-8\");      \n    }\n\n    long decodeTime = Math.max(System.currentTimeMillis() - start, 1);\n\n    log.info(\"writer \"+writerName+\", size=\"+out.size()+\", encodeRate=\"+(encodeTime==1 ? \"N/A\":  \"\"+(encIter*1000L/encodeTime)) + \", decodeRate=\"+(decodeTime==1 ? \"N/A\":  \"\"+(decIter*1000L/decodeTime)) );\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestWriterPerf#doPerf(String,SolrQueryRequest,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestWriterPerf#doPerf(String,SolrQueryRequest,int,int).mjava","sourceNew":"  void doPerf(String writerName, SolrQueryRequest req, int encIter, int decIter) throws Exception {\n    SolrQueryResponse rsp = getResponse(req);\n    QueryResponseWriter w = h.getCore().getQueryResponseWriter(writerName);\n\n\n    ByteArrayOutputStream out=null;\n\n    System.gc();\n    RTimer timer = new RTimer();\n    for (int i=0; i<encIter; i++) {\n    if (w instanceof BinaryQueryResponseWriter) {\n      BinaryQueryResponseWriter binWriter = (BinaryQueryResponseWriter) w;\n      out = new ByteArrayOutputStream();\n      binWriter.write(out, req, rsp);\n      out.close();\n    } else {\n      out = new ByteArrayOutputStream();\n      // to be fair, from my previous tests, much of the performance will be sucked up\n      // by java's UTF-8 encoding/decoding, not the actual writing\n      Writer writer = new OutputStreamWriter(out, StandardCharsets.UTF_8);\n      w.write(writer, req, rsp);\n      writer.close();\n    }\n    }\n\n    double encodeTime = timer.getTime();\n\n    byte[] arr = out.toByteArray();\n\n    timer = new RTimer();\n    writerName = writerName.intern();\n    for (int i=0; i<decIter; i++) {\n      ResponseParser rp = null;\n      if (writerName == \"xml\") {\n        rp = new XMLResponseParser();\n      } else if (writerName == \"javabin\") {\n        rp = new BinaryResponseParser();\n      } else {\n        break;\n      }\n      ByteArrayInputStream in = new ByteArrayInputStream(arr);\n      rp.processResponse(in, \"UTF-8\");      \n    }\n\n    double decodeTime = timer.getTime();\n\n    if (log.isInfoEnabled()) {\n      log.info(\"writer {}, size={}, encodeRate={} decodeRate={}\"\n          , writerName, out.size(), (encIter * 1000L / encodeTime), (decIter * 1000L / decodeTime));\n    }\n\n    req.close();\n  }\n\n","sourceOld":"  void doPerf(String writerName, SolrQueryRequest req, int encIter, int decIter) throws Exception {\n    SolrQueryResponse rsp = getResponse(req);\n    QueryResponseWriter w = h.getCore().getQueryResponseWriter(writerName);\n\n\n    ByteArrayOutputStream out=null;\n\n    System.gc();\n    RTimer timer = new RTimer();\n    for (int i=0; i<encIter; i++) {\n    if (w instanceof BinaryQueryResponseWriter) {\n      BinaryQueryResponseWriter binWriter = (BinaryQueryResponseWriter) w;\n      out = new ByteArrayOutputStream();\n      binWriter.write(out, req, rsp);\n      out.close();\n    } else {\n      out = new ByteArrayOutputStream();\n      // to be fair, from my previous tests, much of the performance will be sucked up\n      // by java's UTF-8 encoding/decoding, not the actual writing\n      Writer writer = new OutputStreamWriter(out, StandardCharsets.UTF_8);\n      w.write(writer, req, rsp);\n      writer.close();\n    }\n    }\n\n    double encodeTime = timer.getTime();\n\n    byte[] arr = out.toByteArray();\n\n    timer = new RTimer();\n    writerName = writerName.intern();\n    for (int i=0; i<decIter; i++) {\n      ResponseParser rp = null;\n      if (writerName == \"xml\") {\n        rp = new XMLResponseParser();\n      } else if (writerName == \"javabin\") {\n        rp = new BinaryResponseParser();\n      } else {\n        break;\n      }\n      ByteArrayInputStream in = new ByteArrayInputStream(arr);\n      rp.processResponse(in, \"UTF-8\");      \n    }\n\n    double decodeTime = timer.getTime();\n\n    log.info(\"writer \"+writerName+\", size=\"+out.size()+\", encodeRate=\"+(encIter*1000L/encodeTime) + \", decodeRate=\"+(decIter*1000L/decodeTime));\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["19275ba31e621f6da1b83bf13af75233876fd3d4","9d3d365762604952e436b51980101dfc84cc1b3e"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["c26f00b574427b55127e869b935845554afde1fa","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"9d3d365762604952e436b51980101dfc84cc1b3e":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["9d3d365762604952e436b51980101dfc84cc1b3e"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"9d3d365762604952e436b51980101dfc84cc1b3e":["5eb2511ababf862ea11e10761c70ee560cd84510","bcf9886c8ff537aafde14de48ebf744f5673f08b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["5eb2511ababf862ea11e10761c70ee560cd84510","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","9d3d365762604952e436b51980101dfc84cc1b3e"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}