{"path":"backwards/src/java/org/apache/lucene/store/BufferedIndexOutput#writeBytes(byte[],int,int).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/store/BufferedIndexOutput#writeBytes(byte[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Writes an array of bytes.\n   * @param b the bytes to write\n   * @param length the number of bytes to write\n   * @see IndexInput#readBytes(byte[],int,int)\n   */\n  @Override\n  public void writeBytes(byte[] b, int offset, int length) throws IOException {\n    int bytesLeft = BUFFER_SIZE - bufferPosition;\n    // is there enough space in the buffer?\n    if (bytesLeft >= length) {\n      // we add the data to the end of the buffer\n      System.arraycopy(b, offset, buffer, bufferPosition, length);\n      bufferPosition += length;\n      // if the buffer is full, flush it\n      if (BUFFER_SIZE - bufferPosition == 0)\n        flush();\n    } else {\n      // is data larger then buffer?\n      if (length > BUFFER_SIZE) {\n        // we flush the buffer\n        if (bufferPosition > 0)\n          flush();\n        // and write data at once\n        flushBuffer(b, offset, length);\n        bufferStart += length;\n      } else {\n        // we fill/flush the buffer (until the input is written)\n        int pos = 0; // position in the input data\n        int pieceLength;\n        while (pos < length) {\n          pieceLength = (length - pos < bytesLeft) ? length - pos : bytesLeft;\n          System.arraycopy(b, pos + offset, buffer, bufferPosition, pieceLength);\n          pos += pieceLength;\n          bufferPosition += pieceLength;\n          // if the buffer is full, flush it\n          bytesLeft = BUFFER_SIZE - bufferPosition;\n          if (bytesLeft == 0) {\n            flush();\n            bytesLeft = BUFFER_SIZE;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/store/BufferedIndexOutput#writeBytes(byte[],int,int).mjava","pathOld":"backwards/src/java/org/apache/lucene/store/BufferedIndexOutput#writeBytes(byte[],int,int).mjava","sourceNew":"  /** Writes an array of bytes.\n   * @param b the bytes to write\n   * @param length the number of bytes to write\n   * @see IndexInput#readBytes(byte[],int,int)\n   */\n  @Override\n  public void writeBytes(byte[] b, int offset, int length) throws IOException {\n    int bytesLeft = BUFFER_SIZE - bufferPosition;\n    // is there enough space in the buffer?\n    if (bytesLeft >= length) {\n      // we add the data to the end of the buffer\n      System.arraycopy(b, offset, buffer, bufferPosition, length);\n      bufferPosition += length;\n      // if the buffer is full, flush it\n      if (BUFFER_SIZE - bufferPosition == 0)\n        flush();\n    } else {\n      // is data larger then buffer?\n      if (length > BUFFER_SIZE) {\n        // we flush the buffer\n        if (bufferPosition > 0)\n          flush();\n        // and write data at once\n        flushBuffer(b, offset, length);\n        bufferStart += length;\n      } else {\n        // we fill/flush the buffer (until the input is written)\n        int pos = 0; // position in the input data\n        int pieceLength;\n        while (pos < length) {\n          pieceLength = (length - pos < bytesLeft) ? length - pos : bytesLeft;\n          System.arraycopy(b, pos + offset, buffer, bufferPosition, pieceLength);\n          pos += pieceLength;\n          bufferPosition += pieceLength;\n          // if the buffer is full, flush it\n          bytesLeft = BUFFER_SIZE - bufferPosition;\n          if (bytesLeft == 0) {\n            flush();\n            bytesLeft = BUFFER_SIZE;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Writes an array of bytes.\n   * @param b the bytes to write\n   * @param length the number of bytes to write\n   * @see IndexInput#readBytes(byte[],int,int)\n   */\n  @Override\n  public void writeBytes(byte[] b, int offset, int length) throws IOException {\n    int bytesLeft = BUFFER_SIZE - bufferPosition;\n    // is there enough space in the buffer?\n    if (bytesLeft >= length) {\n      // we add the data to the end of the buffer\n      System.arraycopy(b, offset, buffer, bufferPosition, length);\n      bufferPosition += length;\n      // if the buffer is full, flush it\n      if (BUFFER_SIZE - bufferPosition == 0)\n        flush();\n    } else {\n      // is data larger then buffer?\n      if (length > BUFFER_SIZE) {\n        // we flush the buffer\n        if (bufferPosition > 0)\n          flush();\n        // and write data at once\n        flushBuffer(b, offset, length);\n        bufferStart += length;\n      } else {\n        // we fill/flush the buffer (until the input is written)\n        int pos = 0; // position in the input data\n        int pieceLength;\n        while (pos < length) {\n          pieceLength = (length - pos < bytesLeft) ? length - pos : bytesLeft;\n          System.arraycopy(b, pos + offset, buffer, bufferPosition, pieceLength);\n          pos += pieceLength;\n          bufferPosition += pieceLength;\n          // if the buffer is full, flush it\n          bytesLeft = BUFFER_SIZE - bufferPosition;\n          if (bytesLeft == 0) {\n            flush();\n            bytesLeft = BUFFER_SIZE;\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}