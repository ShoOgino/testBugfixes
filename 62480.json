{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/path/ReversePathHierarchyTokenizer#incrementToken().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/path/ReversePathHierarchyTokenizer#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/path/ReversePathHierarchyTokenizer#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    if(delimitersCount == -1){\n      int length = 0;\n      delimiterPositions.add(0);\n      while (true) {\n        int c = input.read();\n        if( c < 0 ) {\n          break;\n        }\n        length++;\n        if( c == delimiter ) {\n          delimiterPositions.add(length);\n          resultToken.append(replacement);\n        }\n        else{\n          resultToken.append((char)c);\n        }\n      }\n      delimitersCount = delimiterPositions.size();\n      if( delimiterPositions.get(delimitersCount-1) < length ){\n        delimiterPositions.add(length);\n        delimitersCount++;\n      }\n      if( resultTokenBuffer.length < resultToken.length() ){\n        resultTokenBuffer = new char[resultToken.length()];\n      }\n      resultToken.getChars(0, resultToken.length(), resultTokenBuffer, 0);\n      resultToken.setLength(0);\n      int idx = delimitersCount-1 - skip;\n      if (idx >= 0) {\n        // otherwise its ok, because we will skip and return false\n        endPosition = delimiterPositions.get(idx);\n      }\n      finalOffset = correctOffset(length);\n      posAtt.setPositionIncrement(1);\n    }\n    else{\n      posAtt.setPositionIncrement(0);\n    }\n\n    while( skipped < delimitersCount-skip-1 ){\n      int start = delimiterPositions.get(skipped);\n      termAtt.copyBuffer(resultTokenBuffer, start, endPosition - start);\n      offsetAtt.setOffset(correctOffset(start), correctOffset(endPosition));\n      skipped++;\n      return true;\n    }\n\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    if(delimitersCount == -1){\n      int length = 0;\n      delimiterPositions.add(0);\n      while (true) {\n        int c = input.read();\n        if( c < 0 ) {\n          break;\n        }\n        length++;\n        if( c == delimiter ) {\n          delimiterPositions.add(length);\n          resultToken.append(replacement);\n        }\n        else{\n          resultToken.append((char)c);\n        }\n      }\n      delimitersCount = delimiterPositions.size();\n      if( delimiterPositions.get(delimitersCount-1) < length ){\n        delimiterPositions.add(length);\n        delimitersCount++;\n      }\n      if( resultTokenBuffer.length < resultToken.length() ){\n        resultTokenBuffer = new char[resultToken.length()];\n      }\n      resultToken.getChars(0, resultToken.length(), resultTokenBuffer, 0);\n      resultToken.setLength(0);\n      int idx = delimitersCount-1 - skip;\n      if (idx >= 0) {\n        // otherwise its ok, because we will skip and return false\n        endPosition = delimiterPositions.get(idx);\n      }\n      finalOffset = correctOffset(length);\n      posAtt.setPositionIncrement(1);\n    }\n    else{\n      posAtt.setPositionIncrement(0);\n    }\n\n    while( skipped < delimitersCount-skip-1 ){\n      int start = delimiterPositions.get(skipped);\n      termAtt.copyBuffer(resultTokenBuffer, start, endPosition - start);\n      offsetAtt.setOffset(correctOffset(start), correctOffset(endPosition));\n      skipped++;\n      return true;\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/path/ReversePathHierarchyTokenizer#incrementToken().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/path/ReversePathHierarchyTokenizer#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    if(delimitersCount == -1){\n      int length = 0;\n      delimiterPositions.add(0);\n      while (true) {\n        int c = input.read();\n        if( c < 0 ) {\n          break;\n        }\n        length++;\n        if( c == delimiter ) {\n          delimiterPositions.add(length);\n          resultToken.append(replacement);\n        }\n        else{\n          resultToken.append((char)c);\n        }\n      }\n      delimitersCount = delimiterPositions.size();\n      if( delimiterPositions.get(delimitersCount-1) < length ){\n        delimiterPositions.add(length);\n        delimitersCount++;\n      }\n      if( resultTokenBuffer.length < resultToken.length() ){\n        resultTokenBuffer = new char[resultToken.length()];\n      }\n      resultToken.getChars(0, resultToken.length(), resultTokenBuffer, 0);\n      resultToken.setLength(0);\n      int idx = delimitersCount-1 - skip;\n      if (idx >= 0) {\n        // otherwise it's ok, because we will skip and return false\n        endPosition = delimiterPositions.get(idx);\n      }\n      finalOffset = correctOffset(length);\n      posAtt.setPositionIncrement(1);\n    }\n    else{\n      posAtt.setPositionIncrement(0);\n    }\n\n    while( skipped < delimitersCount-skip-1 ){\n      int start = delimiterPositions.get(skipped);\n      termAtt.copyBuffer(resultTokenBuffer, start, endPosition - start);\n      offsetAtt.setOffset(correctOffset(start), correctOffset(endPosition));\n      skipped++;\n      return true;\n    }\n\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    if(delimitersCount == -1){\n      int length = 0;\n      delimiterPositions.add(0);\n      while (true) {\n        int c = input.read();\n        if( c < 0 ) {\n          break;\n        }\n        length++;\n        if( c == delimiter ) {\n          delimiterPositions.add(length);\n          resultToken.append(replacement);\n        }\n        else{\n          resultToken.append((char)c);\n        }\n      }\n      delimitersCount = delimiterPositions.size();\n      if( delimiterPositions.get(delimitersCount-1) < length ){\n        delimiterPositions.add(length);\n        delimitersCount++;\n      }\n      if( resultTokenBuffer.length < resultToken.length() ){\n        resultTokenBuffer = new char[resultToken.length()];\n      }\n      resultToken.getChars(0, resultToken.length(), resultTokenBuffer, 0);\n      resultToken.setLength(0);\n      int idx = delimitersCount-1 - skip;\n      if (idx >= 0) {\n        // otherwise its ok, because we will skip and return false\n        endPosition = delimiterPositions.get(idx);\n      }\n      finalOffset = correctOffset(length);\n      posAtt.setPositionIncrement(1);\n    }\n    else{\n      posAtt.setPositionIncrement(0);\n    }\n\n    while( skipped < delimitersCount-skip-1 ){\n      int start = delimiterPositions.get(skipped);\n      termAtt.copyBuffer(resultTokenBuffer, start, endPosition - start);\n      offsetAtt.setOffset(correctOffset(start), correctOffset(endPosition));\n      skipped++;\n      return true;\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"]},"commit2Childs":{"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}