{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestPolicyCloud#testDataProviderPerReplicaDetails().mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestPolicyCloud#testDataProviderPerReplicaDetails().mjava","pathOld":"/dev/null","sourceNew":"  public void testDataProviderPerReplicaDetails() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    CollectionAdminRequest.createCollection(\"perReplicaDataColl\", \"conf\", 1, 5)\n        .process(solrClient);\n\n    waitForState(\"Timeout waiting for collection to become active\", \"perReplicaDataColl\", clusterShape(1, 5));\n    DocCollection coll = getCollectionState(\"perReplicaDataColl\");\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n    AutoScalingConfig config = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson));\n    Policy.Session session = config.getPolicy().createSession(cluster);\n\n    AtomicInteger count = new AtomicInteger(0);\n    for (Row row : session.getSorted()) {\n      row.collectionVsShardVsReplicas.forEach((c, shardVsReplicas) -> shardVsReplicas.forEach((s, replicaInfos) -> {\n        for (ReplicaInfo replicaInfo : replicaInfos) {\n          if (replicaInfo.getVariables().containsKey(Suggestion.ConditionType.CORE_IDX.tagName)) count.incrementAndGet();\n        }\n      }));\n    }\n    assertTrue(count.get() > 0);\n\n    CollectionAdminRequest.deleteCollection(\"perReplicaDataColl\").process(solrClient);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c6c0dad4932399aec99b4818086cb1772773916","date":1520515900,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestPolicyCloud#testDataProviderPerReplicaDetails().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestPolicyCloud#testDataProviderPerReplicaDetails().mjava","sourceNew":"  public void testDataProviderPerReplicaDetails() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    CollectionAdminRequest.createCollection(\"perReplicaDataColl\", \"conf\", 1, 5)\n        .process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"perReplicaDataColl\",\n        CloudTestUtils.clusterShape(1, 5));\n    DocCollection coll = getCollectionState(\"perReplicaDataColl\");\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n    AutoScalingConfig config = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson));\n    Policy.Session session = config.getPolicy().createSession(cluster);\n\n    AtomicInteger count = new AtomicInteger(0);\n    for (Row row : session.getSorted()) {\n      row.collectionVsShardVsReplicas.forEach((c, shardVsReplicas) -> shardVsReplicas.forEach((s, replicaInfos) -> {\n        for (ReplicaInfo replicaInfo : replicaInfos) {\n          if (replicaInfo.getVariables().containsKey(Suggestion.ConditionType.CORE_IDX.tagName)) count.incrementAndGet();\n        }\n      }));\n    }\n    assertTrue(count.get() > 0);\n\n    CollectionAdminRequest.deleteCollection(\"perReplicaDataColl\").process(solrClient);\n\n  }\n\n","sourceOld":"  public void testDataProviderPerReplicaDetails() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    CollectionAdminRequest.createCollection(\"perReplicaDataColl\", \"conf\", 1, 5)\n        .process(solrClient);\n\n    waitForState(\"Timeout waiting for collection to become active\", \"perReplicaDataColl\", clusterShape(1, 5));\n    DocCollection coll = getCollectionState(\"perReplicaDataColl\");\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n    AutoScalingConfig config = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson));\n    Policy.Session session = config.getPolicy().createSession(cluster);\n\n    AtomicInteger count = new AtomicInteger(0);\n    for (Row row : session.getSorted()) {\n      row.collectionVsShardVsReplicas.forEach((c, shardVsReplicas) -> shardVsReplicas.forEach((s, replicaInfos) -> {\n        for (ReplicaInfo replicaInfo : replicaInfos) {\n          if (replicaInfo.getVariables().containsKey(Suggestion.ConditionType.CORE_IDX.tagName)) count.incrementAndGet();\n        }\n      }));\n    }\n    assertTrue(count.get() > 0);\n\n    CollectionAdminRequest.deleteCollection(\"perReplicaDataColl\").process(solrClient);\n\n  }\n\n","bugFix":null,"bugIntro":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"78231225260fb5b3bf9920f203d71477d5501c65","date":1531726165,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestPolicyCloud#testDataProviderPerReplicaDetails().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestPolicyCloud#testDataProviderPerReplicaDetails().mjava","sourceNew":"  public void testDataProviderPerReplicaDetails() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    CollectionAdminRequest.createCollection(\"perReplicaDataColl\", \"conf\", 1, 5)\n        .process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"perReplicaDataColl\",\n        CloudTestUtils.clusterShape(1, 5));\n    DocCollection coll = getCollectionState(\"perReplicaDataColl\");\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n    AutoScalingConfig config = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson));\n    Policy.Session session = config.getPolicy().createSession(cluster);\n\n    AtomicInteger count = new AtomicInteger(0);\n    for (Row row : session.getSortedNodes()) {\n      row.collectionVsShardVsReplicas.forEach((c, shardVsReplicas) -> shardVsReplicas.forEach((s, replicaInfos) -> {\n        for (ReplicaInfo replicaInfo : replicaInfos) {\n          if (replicaInfo.getVariables().containsKey(Suggestion.ConditionType.CORE_IDX.tagName)) count.incrementAndGet();\n        }\n      }));\n    }\n    assertTrue(count.get() > 0);\n\n    CollectionAdminRequest.deleteCollection(\"perReplicaDataColl\").process(solrClient);\n\n  }\n\n","sourceOld":"  public void testDataProviderPerReplicaDetails() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    CollectionAdminRequest.createCollection(\"perReplicaDataColl\", \"conf\", 1, 5)\n        .process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"perReplicaDataColl\",\n        CloudTestUtils.clusterShape(1, 5));\n    DocCollection coll = getCollectionState(\"perReplicaDataColl\");\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n    AutoScalingConfig config = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson));\n    Policy.Session session = config.getPolicy().createSession(cluster);\n\n    AtomicInteger count = new AtomicInteger(0);\n    for (Row row : session.getSorted()) {\n      row.collectionVsShardVsReplicas.forEach((c, shardVsReplicas) -> shardVsReplicas.forEach((s, replicaInfos) -> {\n        for (ReplicaInfo replicaInfo : replicaInfos) {\n          if (replicaInfo.getVariables().containsKey(Suggestion.ConditionType.CORE_IDX.tagName)) count.incrementAndGet();\n        }\n      }));\n    }\n    assertTrue(count.get() > 0);\n\n    CollectionAdminRequest.deleteCollection(\"perReplicaDataColl\").process(solrClient);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a10a24d2afdf00bbe1013706b80c989315772dc9","date":1531726431,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestPolicyCloud#testDataProviderPerReplicaDetails().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestPolicyCloud#testDataProviderPerReplicaDetails().mjava","sourceNew":"  public void testDataProviderPerReplicaDetails() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    CollectionAdminRequest.createCollection(\"perReplicaDataColl\", \"conf\", 1, 5)\n        .process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"perReplicaDataColl\",\n        CloudTestUtils.clusterShape(1, 5));\n    DocCollection coll = getCollectionState(\"perReplicaDataColl\");\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n    AutoScalingConfig config = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson));\n    Policy.Session session = config.getPolicy().createSession(cluster);\n\n    AtomicInteger count = new AtomicInteger(0);\n    for (Row row : session.getSorted()) {\n      row.collectionVsShardVsReplicas.forEach((c, shardVsReplicas) -> shardVsReplicas.forEach((s, replicaInfos) -> {\n        for (ReplicaInfo replicaInfo : replicaInfos) {\n          if (replicaInfo.getVariables().containsKey(Suggestion.ConditionType.CORE_IDX.tagName)) count.incrementAndGet();\n        }\n      }));\n    }\n    assertTrue(count.get() > 0);\n\n    CollectionAdminRequest.deleteCollection(\"perReplicaDataColl\").process(solrClient);\n\n  }\n\n","sourceOld":"  public void testDataProviderPerReplicaDetails() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    CollectionAdminRequest.createCollection(\"perReplicaDataColl\", \"conf\", 1, 5)\n        .process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"perReplicaDataColl\",\n        CloudTestUtils.clusterShape(1, 5));\n    DocCollection coll = getCollectionState(\"perReplicaDataColl\");\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n    AutoScalingConfig config = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson));\n    Policy.Session session = config.getPolicy().createSession(cluster);\n\n    AtomicInteger count = new AtomicInteger(0);\n    for (Row row : session.getSortedNodes()) {\n      row.collectionVsShardVsReplicas.forEach((c, shardVsReplicas) -> shardVsReplicas.forEach((s, replicaInfos) -> {\n        for (ReplicaInfo replicaInfo : replicaInfos) {\n          if (replicaInfo.getVariables().containsKey(Suggestion.ConditionType.CORE_IDX.tagName)) count.incrementAndGet();\n        }\n      }));\n    }\n    assertTrue(count.get() > 0);\n\n    CollectionAdminRequest.deleteCollection(\"perReplicaDataColl\").process(solrClient);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8f91616b62c917fffa5286c4ef2d21b10cc56f8e","date":1531726562,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestPolicyCloud#testDataProviderPerReplicaDetails().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestPolicyCloud#testDataProviderPerReplicaDetails().mjava","sourceNew":"  public void testDataProviderPerReplicaDetails() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    CollectionAdminRequest.createCollection(\"perReplicaDataColl\", \"conf\", 1, 5)\n        .process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"perReplicaDataColl\",\n        CloudTestUtils.clusterShape(1, 5));\n    DocCollection coll = getCollectionState(\"perReplicaDataColl\");\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n    AutoScalingConfig config = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson));\n    Policy.Session session = config.getPolicy().createSession(cluster);\n\n    AtomicInteger count = new AtomicInteger(0);\n    for (Row row : session.getSortedNodes()) {\n      row.collectionVsShardVsReplicas.forEach((c, shardVsReplicas) -> shardVsReplicas.forEach((s, replicaInfos) -> {\n        for (ReplicaInfo replicaInfo : replicaInfos) {\n          if (replicaInfo.getVariables().containsKey(Suggestion.ConditionType.CORE_IDX.tagName)) count.incrementAndGet();\n        }\n      }));\n    }\n    assertTrue(count.get() > 0);\n\n    CollectionAdminRequest.deleteCollection(\"perReplicaDataColl\").process(solrClient);\n\n  }\n\n","sourceOld":"  public void testDataProviderPerReplicaDetails() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    CollectionAdminRequest.createCollection(\"perReplicaDataColl\", \"conf\", 1, 5)\n        .process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"perReplicaDataColl\",\n        CloudTestUtils.clusterShape(1, 5));\n    DocCollection coll = getCollectionState(\"perReplicaDataColl\");\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n    AutoScalingConfig config = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson));\n    Policy.Session session = config.getPolicy().createSession(cluster);\n\n    AtomicInteger count = new AtomicInteger(0);\n    for (Row row : session.getSorted()) {\n      row.collectionVsShardVsReplicas.forEach((c, shardVsReplicas) -> shardVsReplicas.forEach((s, replicaInfos) -> {\n        for (ReplicaInfo replicaInfo : replicaInfos) {\n          if (replicaInfo.getVariables().containsKey(Suggestion.ConditionType.CORE_IDX.tagName)) count.incrementAndGet();\n        }\n      }));\n    }\n    assertTrue(count.get() > 0);\n\n    CollectionAdminRequest.deleteCollection(\"perReplicaDataColl\").process(solrClient);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestPolicyCloud#testDataProviderPerReplicaDetails().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestPolicyCloud#testDataProviderPerReplicaDetails().mjava","sourceNew":"  public void testDataProviderPerReplicaDetails() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    CollectionAdminRequest.createCollection(\"perReplicaDataColl\", \"conf\", 1, 5)\n        .process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"perReplicaDataColl\",\n        CloudTestUtils.clusterShape(1, 5));\n    DocCollection coll = getCollectionState(\"perReplicaDataColl\");\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n    AutoScalingConfig config = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson));\n    Policy.Session session = config.getPolicy().createSession(cluster);\n\n    AtomicInteger count = new AtomicInteger(0);\n    for (Row row : session.getSortedNodes()) {\n      row.collectionVsShardVsReplicas.forEach((c, shardVsReplicas) -> shardVsReplicas.forEach((s, replicaInfos) -> {\n        for (ReplicaInfo replicaInfo : replicaInfos) {\n          if (replicaInfo.getVariables().containsKey(Suggestion.ConditionType.CORE_IDX.tagName)) count.incrementAndGet();\n        }\n      }));\n    }\n    assertTrue(count.get() > 0);\n\n    CollectionAdminRequest.deleteCollection(\"perReplicaDataColl\").process(solrClient);\n\n  }\n\n","sourceOld":"  public void testDataProviderPerReplicaDetails() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    CollectionAdminRequest.createCollection(\"perReplicaDataColl\", \"conf\", 1, 5)\n        .process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"perReplicaDataColl\",\n        CloudTestUtils.clusterShape(1, 5));\n    DocCollection coll = getCollectionState(\"perReplicaDataColl\");\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n    AutoScalingConfig config = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson));\n    Policy.Session session = config.getPolicy().createSession(cluster);\n\n    AtomicInteger count = new AtomicInteger(0);\n    for (Row row : session.getSorted()) {\n      row.collectionVsShardVsReplicas.forEach((c, shardVsReplicas) -> shardVsReplicas.forEach((s, replicaInfos) -> {\n        for (ReplicaInfo replicaInfo : replicaInfos) {\n          if (replicaInfo.getVariables().containsKey(Suggestion.ConditionType.CORE_IDX.tagName)) count.incrementAndGet();\n        }\n      }));\n    }\n    assertTrue(count.get() > 0);\n\n    CollectionAdminRequest.deleteCollection(\"perReplicaDataColl\").process(solrClient);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"427edb17549d4bb82462a16eec4ee0533d12d5b7","date":1533006754,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestPolicyCloud#testDataProviderPerReplicaDetails().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestPolicyCloud#testDataProviderPerReplicaDetails().mjava","sourceNew":"  public void testDataProviderPerReplicaDetails() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    CollectionAdminRequest.createCollection(\"perReplicaDataColl\", \"conf\", 1, 5)\n        .process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"perReplicaDataColl\",\n        CloudTestUtils.clusterShape(1, 5));\n    DocCollection coll = getCollectionState(\"perReplicaDataColl\");\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n    AutoScalingConfig config = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson));\n    Policy.Session session = config.getPolicy().createSession(cluster);\n\n    AtomicInteger count = new AtomicInteger(0);\n    for (Row row : session.getSortedNodes()) {\n      row.collectionVsShardVsReplicas.forEach((c, shardVsReplicas) -> shardVsReplicas.forEach((s, replicaInfos) -> {\n        for (ReplicaInfo replicaInfo : replicaInfos) {\n          if (replicaInfo.getVariables().containsKey(Type.CORE_IDX.tagName)) count.incrementAndGet();\n        }\n      }));\n    }\n    assertTrue(count.get() > 0);\n\n    CollectionAdminRequest.deleteCollection(\"perReplicaDataColl\").process(solrClient);\n\n  }\n\n","sourceOld":"  public void testDataProviderPerReplicaDetails() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    CollectionAdminRequest.createCollection(\"perReplicaDataColl\", \"conf\", 1, 5)\n        .process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"perReplicaDataColl\",\n        CloudTestUtils.clusterShape(1, 5));\n    DocCollection coll = getCollectionState(\"perReplicaDataColl\");\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n    AutoScalingConfig config = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson));\n    Policy.Session session = config.getPolicy().createSession(cluster);\n\n    AtomicInteger count = new AtomicInteger(0);\n    for (Row row : session.getSortedNodes()) {\n      row.collectionVsShardVsReplicas.forEach((c, shardVsReplicas) -> shardVsReplicas.forEach((s, replicaInfos) -> {\n        for (ReplicaInfo replicaInfo : replicaInfos) {\n          if (replicaInfo.getVariables().containsKey(Suggestion.ConditionType.CORE_IDX.tagName)) count.incrementAndGet();\n        }\n      }));\n    }\n    assertTrue(count.get() > 0);\n\n    CollectionAdminRequest.deleteCollection(\"perReplicaDataColl\").process(solrClient);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"042b92cf48996255bedb0c3c4bf772d7e06e4dea","date":1534272102,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestPolicyCloud#testDataProviderPerReplicaDetails().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestPolicyCloud#testDataProviderPerReplicaDetails().mjava","sourceNew":"  public void testDataProviderPerReplicaDetails() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    CollectionAdminRequest.createCollection(\"perReplicaDataColl\", \"conf\", 1, 5)\n        .process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"perReplicaDataColl\",\n        CloudTestUtils.clusterShape(1, 5, false, true));\n    DocCollection coll = getCollectionState(\"perReplicaDataColl\");\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n    AutoScalingConfig config = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson));\n    Policy.Session session = config.getPolicy().createSession(cluster);\n\n    AtomicInteger count = new AtomicInteger(0);\n    for (Row row : session.getSortedNodes()) {\n      row.collectionVsShardVsReplicas.forEach((c, shardVsReplicas) -> shardVsReplicas.forEach((s, replicaInfos) -> {\n        for (ReplicaInfo replicaInfo : replicaInfos) {\n          if (replicaInfo.getVariables().containsKey(Type.CORE_IDX.tagName)) count.incrementAndGet();\n        }\n      }));\n    }\n    assertTrue(count.get() > 0);\n\n    CollectionAdminRequest.deleteCollection(\"perReplicaDataColl\").process(solrClient);\n\n  }\n\n","sourceOld":"  public void testDataProviderPerReplicaDetails() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    CollectionAdminRequest.createCollection(\"perReplicaDataColl\", \"conf\", 1, 5)\n        .process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"perReplicaDataColl\",\n        CloudTestUtils.clusterShape(1, 5));\n    DocCollection coll = getCollectionState(\"perReplicaDataColl\");\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n    AutoScalingConfig config = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson));\n    Policy.Session session = config.getPolicy().createSession(cluster);\n\n    AtomicInteger count = new AtomicInteger(0);\n    for (Row row : session.getSortedNodes()) {\n      row.collectionVsShardVsReplicas.forEach((c, shardVsReplicas) -> shardVsReplicas.forEach((s, replicaInfos) -> {\n        for (ReplicaInfo replicaInfo : replicaInfos) {\n          if (replicaInfo.getVariables().containsKey(Type.CORE_IDX.tagName)) count.incrementAndGet();\n        }\n      }));\n    }\n    assertTrue(count.get() > 0);\n\n    CollectionAdminRequest.deleteCollection(\"perReplicaDataColl\").process(solrClient);\n\n  }\n\n","bugFix":["9c6c0dad4932399aec99b4818086cb1772773916"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testDataProviderPerReplicaDetails().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestPolicyCloud#testDataProviderPerReplicaDetails().mjava","sourceNew":"  public void testDataProviderPerReplicaDetails() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    CollectionAdminRequest.createCollection(\"perReplicaDataColl\", \"conf\", 1, 5)\n        .process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"perReplicaDataColl\",\n        CloudTestUtils.clusterShape(1, 5, false, true));\n    DocCollection coll = getCollectionState(\"perReplicaDataColl\");\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n    AutoScalingConfig config = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson));\n    Policy.Session session = config.getPolicy().createSession(cluster);\n\n    AtomicInteger count = new AtomicInteger(0);\n    for (Row row : session.getSortedNodes()) {\n      row.collectionVsShardVsReplicas.forEach((c, shardVsReplicas) -> shardVsReplicas.forEach((s, replicaInfos) -> {\n        for (ReplicaInfo replicaInfo : replicaInfos) {\n          if (replicaInfo.getVariables().containsKey(Type.CORE_IDX.tagName)) count.incrementAndGet();\n        }\n      }));\n    }\n    assertTrue(count.get() > 0);\n\n    CollectionAdminRequest.deleteCollection(\"perReplicaDataColl\").process(solrClient);\n\n  }\n\n","sourceOld":"  public void testDataProviderPerReplicaDetails() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    CollectionAdminRequest.createCollection(\"perReplicaDataColl\", \"conf\", 1, 5)\n        .process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"perReplicaDataColl\",\n        CloudTestUtils.clusterShape(1, 5, false, true));\n    DocCollection coll = getCollectionState(\"perReplicaDataColl\");\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n    AutoScalingConfig config = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson));\n    Policy.Session session = config.getPolicy().createSession(cluster);\n\n    AtomicInteger count = new AtomicInteger(0);\n    for (Row row : session.getSortedNodes()) {\n      row.collectionVsShardVsReplicas.forEach((c, shardVsReplicas) -> shardVsReplicas.forEach((s, replicaInfos) -> {\n        for (ReplicaInfo replicaInfo : replicaInfos) {\n          if (replicaInfo.getVariables().containsKey(Type.CORE_IDX.tagName)) count.incrementAndGet();\n        }\n      }));\n    }\n    assertTrue(count.get() > 0);\n\n    CollectionAdminRequest.deleteCollection(\"perReplicaDataColl\").process(solrClient);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["427edb17549d4bb82462a16eec4ee0533d12d5b7"],"a6a5c1c40529f15b445e6720dfde1967e139bff1":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"9c6c0dad4932399aec99b4818086cb1772773916":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a10a24d2afdf00bbe1013706b80c989315772dc9":["78231225260fb5b3bf9920f203d71477d5501c65"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["9c6c0dad4932399aec99b4818086cb1772773916","8f91616b62c917fffa5286c4ef2d21b10cc56f8e"],"427edb17549d4bb82462a16eec4ee0533d12d5b7":["8f91616b62c917fffa5286c4ef2d21b10cc56f8e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78231225260fb5b3bf9920f203d71477d5501c65":["9c6c0dad4932399aec99b4818086cb1772773916"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8f91616b62c917fffa5286c4ef2d21b10cc56f8e":["a10a24d2afdf00bbe1013706b80c989315772dc9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a6a5c1c40529f15b445e6720dfde1967e139bff1"]},"commit2Childs":{"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"a6a5c1c40529f15b445e6720dfde1967e139bff1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9c6c0dad4932399aec99b4818086cb1772773916":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","78231225260fb5b3bf9920f203d71477d5501c65"],"a10a24d2afdf00bbe1013706b80c989315772dc9":["8f91616b62c917fffa5286c4ef2d21b10cc56f8e"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"427edb17549d4bb82462a16eec4ee0533d12d5b7":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"78231225260fb5b3bf9920f203d71477d5501c65":["a10a24d2afdf00bbe1013706b80c989315772dc9"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["9c6c0dad4932399aec99b4818086cb1772773916"],"8f91616b62c917fffa5286c4ef2d21b10cc56f8e":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","427edb17549d4bb82462a16eec4ee0533d12d5b7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}