{"path":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#start().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#start().mjava","pathOld":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/JettySolrRunner#start().mjava","sourceNew":"  public void start() throws Exception {\n    start(true);\n  }\n\n","sourceOld":"  public void start() throws Exception {\n    start(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#start().mjava","pathOld":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/JettySolrRunner#start().mjava","sourceNew":"  public void start() throws Exception {\n    start(true);\n  }\n\n","sourceOld":"  public void start() throws Exception {\n    start(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#start().mjava","pathOld":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/JettySolrRunner#start().mjava","sourceNew":"  public void start() throws Exception {\n    start(true);\n  }\n\n","sourceOld":"  public void start() throws Exception {\n    start(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bc766d645fa848f86c381c7f6acf2c881c99399","date":1425549246,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#start().mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#start().mjava","sourceNew":"  /**\n   * Start the Jetty server\n   *\n   * @throws Exception if an error occurs on startup\n   */\n  public void start() throws Exception {\n    // if started before, make a new server\n    if (startedBefore) {\n      waitOnSolr = false;\n      init(lastPort);\n    } else {\n      startedBefore = true;\n    }\n\n    if (!server.isRunning()) {\n      server.start();\n    }\n    synchronized (JettySolrRunner.this) {\n      int cnt = 0;\n      while (!waitOnSolr) {\n        this.wait(100);\n        if (cnt++ == 5) {\n          throw new RuntimeException(\"Jetty/Solr unresponsive\");\n        }\n      }\n    }\n\n  }\n\n","sourceOld":"  public void start() throws Exception {\n    start(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#start().mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#start().mjava","sourceNew":"  /**\n   * Start the Jetty server\n   *\n   * @throws Exception if an error occurs on startup\n   */\n  public void start() throws Exception {\n    // if started before, make a new server\n    if (startedBefore) {\n      waitOnSolr = false;\n      init(lastPort);\n    } else {\n      startedBefore = true;\n    }\n\n    if (!server.isRunning()) {\n      server.start();\n    }\n    synchronized (JettySolrRunner.this) {\n      int cnt = 0;\n      while (!waitOnSolr) {\n        this.wait(100);\n        if (cnt++ == 5) {\n          throw new RuntimeException(\"Jetty/Solr unresponsive\");\n        }\n      }\n    }\n\n  }\n\n","sourceOld":"  public void start() throws Exception {\n    start(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb5af3afeddbb803fb785098176e6e177c34261b","date":1428905393,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#start().mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#start().mjava","sourceNew":"  /**\n   * Start the Jetty server\n   *\n   * @throws Exception if an error occurs on startup\n   */\n  public void start() throws Exception {\n    // Do not let Jetty/Solr pollute the MDC for this thread\n    Map<String, String> prevContext = MDC.getCopyOfContextMap();\n    MDC.clear();\n    try {\n      // if started before, make a new server\n      if (startedBefore) {\n        waitOnSolr = false;\n        init(lastPort);\n      } else {\n        startedBefore = true;\n      }\n\n      if (!server.isRunning()) {\n        server.start();\n      }\n      synchronized (JettySolrRunner.this) {\n        int cnt = 0;\n        while (!waitOnSolr) {\n          this.wait(100);\n          if (cnt++ == 5) {\n            throw new RuntimeException(\"Jetty/Solr unresponsive\");\n          }\n        }\n      }\n    } finally {\n      if (prevContext != null)  {\n        MDC.setContextMap(prevContext);\n      } else {\n        MDC.clear();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Start the Jetty server\n   *\n   * @throws Exception if an error occurs on startup\n   */\n  public void start() throws Exception {\n    // if started before, make a new server\n    if (startedBefore) {\n      waitOnSolr = false;\n      init(lastPort);\n    } else {\n      startedBefore = true;\n    }\n\n    if (!server.isRunning()) {\n      server.start();\n    }\n    synchronized (JettySolrRunner.this) {\n      int cnt = 0;\n      while (!waitOnSolr) {\n        this.wait(100);\n        if (cnt++ == 5) {\n          throw new RuntimeException(\"Jetty/Solr unresponsive\");\n        }\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"275019a81d0883a1db4560391b072d1fbe272ec4","date":1432741049,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#start().mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#start().mjava","sourceNew":"  /**\n   * Start the Jetty server\n   *\n   * @throws Exception if an error occurs on startup\n   */\n  public void start() throws Exception {\n    // Do not let Jetty/Solr pollute the MDC for this thread\n    Map<String, String> prevContext = MDC.getCopyOfContextMap();\n    MDC.clear();\n    try {\n      // if started before, make a new server\n      if (startedBefore) {\n        waitOnSolr = false;\n        init(lastPort);\n      } else {\n        startedBefore = true;\n      }\n\n      if (!server.isRunning()) {\n        server.start();\n      }\n      synchronized (JettySolrRunner.this) {\n        int cnt = 0;\n        while (!waitOnSolr) {\n          this.wait(100);\n          if (cnt++ == 5) {\n            throw new RuntimeException(\"Jetty/Solr unresponsive\");\n          }\n        }\n      }\n      \n      if (config.waitForLoadingCoresToFinishMs != null && config.waitForLoadingCoresToFinishMs > 0L) waitForLoadingCoresToFinish(config.waitForLoadingCoresToFinishMs);\n    } finally {\n      if (prevContext != null)  {\n        MDC.setContextMap(prevContext);\n      } else {\n        MDC.clear();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Start the Jetty server\n   *\n   * @throws Exception if an error occurs on startup\n   */\n  public void start() throws Exception {\n    // Do not let Jetty/Solr pollute the MDC for this thread\n    Map<String, String> prevContext = MDC.getCopyOfContextMap();\n    MDC.clear();\n    try {\n      // if started before, make a new server\n      if (startedBefore) {\n        waitOnSolr = false;\n        init(lastPort);\n      } else {\n        startedBefore = true;\n      }\n\n      if (!server.isRunning()) {\n        server.start();\n      }\n      synchronized (JettySolrRunner.this) {\n        int cnt = 0;\n        while (!waitOnSolr) {\n          this.wait(100);\n          if (cnt++ == 5) {\n            throw new RuntimeException(\"Jetty/Solr unresponsive\");\n          }\n        }\n      }\n    } finally {\n      if (prevContext != null)  {\n        MDC.setContextMap(prevContext);\n      } else {\n        MDC.clear();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9067f5e48f2a848be55167d86815dffa21c5d46","date":1473165216,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#start().mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#start().mjava","sourceNew":"  /**\n   * Start the Jetty server\n   *\n   * If the server has been started before, it will restart using the same port\n   *\n   * @throws Exception if an error occurs on startup\n   */\n  public void start() throws Exception {\n    start(true);\n  }\n\n","sourceOld":"  /**\n   * Start the Jetty server\n   *\n   * @throws Exception if an error occurs on startup\n   */\n  public void start() throws Exception {\n    // Do not let Jetty/Solr pollute the MDC for this thread\n    Map<String, String> prevContext = MDC.getCopyOfContextMap();\n    MDC.clear();\n    try {\n      // if started before, make a new server\n      if (startedBefore) {\n        waitOnSolr = false;\n        init(lastPort);\n      } else {\n        startedBefore = true;\n      }\n\n      if (!server.isRunning()) {\n        server.start();\n      }\n      synchronized (JettySolrRunner.this) {\n        int cnt = 0;\n        while (!waitOnSolr) {\n          this.wait(100);\n          if (cnt++ == 5) {\n            throw new RuntimeException(\"Jetty/Solr unresponsive\");\n          }\n        }\n      }\n      \n      if (config.waitForLoadingCoresToFinishMs != null && config.waitForLoadingCoresToFinishMs > 0L) waitForLoadingCoresToFinish(config.waitForLoadingCoresToFinishMs);\n    } finally {\n      if (prevContext != null)  {\n        MDC.setContextMap(prevContext);\n      } else {\n        MDC.clear();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89424def13674ea17829b41c5883c54ecc31a132","date":1473767373,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#start().mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#start().mjava","sourceNew":"  /**\n   * Start the Jetty server\n   *\n   * If the server has been started before, it will restart using the same port\n   *\n   * @throws Exception if an error occurs on startup\n   */\n  public void start() throws Exception {\n    start(true);\n  }\n\n","sourceOld":"  /**\n   * Start the Jetty server\n   *\n   * @throws Exception if an error occurs on startup\n   */\n  public void start() throws Exception {\n    // Do not let Jetty/Solr pollute the MDC for this thread\n    Map<String, String> prevContext = MDC.getCopyOfContextMap();\n    MDC.clear();\n    try {\n      // if started before, make a new server\n      if (startedBefore) {\n        waitOnSolr = false;\n        init(lastPort);\n      } else {\n        startedBefore = true;\n      }\n\n      if (!server.isRunning()) {\n        server.start();\n      }\n      synchronized (JettySolrRunner.this) {\n        int cnt = 0;\n        while (!waitOnSolr) {\n          this.wait(100);\n          if (cnt++ == 5) {\n            throw new RuntimeException(\"Jetty/Solr unresponsive\");\n          }\n        }\n      }\n      \n      if (config.waitForLoadingCoresToFinishMs != null && config.waitForLoadingCoresToFinishMs > 0L) waitForLoadingCoresToFinish(config.waitForLoadingCoresToFinishMs);\n    } finally {\n      if (prevContext != null)  {\n        MDC.setContextMap(prevContext);\n      } else {\n        MDC.clear();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#start().mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#start().mjava","sourceNew":"  /**\n   * Start the Jetty server\n   *\n   * If the server has been started before, it will restart using the same port\n   *\n   * @throws Exception if an error occurs on startup\n   */\n  public void start() throws Exception {\n    start(true);\n  }\n\n","sourceOld":"  /**\n   * Start the Jetty server\n   *\n   * @throws Exception if an error occurs on startup\n   */\n  public void start() throws Exception {\n    // Do not let Jetty/Solr pollute the MDC for this thread\n    Map<String, String> prevContext = MDC.getCopyOfContextMap();\n    MDC.clear();\n    try {\n      // if started before, make a new server\n      if (startedBefore) {\n        waitOnSolr = false;\n        init(lastPort);\n      } else {\n        startedBefore = true;\n      }\n\n      if (!server.isRunning()) {\n        server.start();\n      }\n      synchronized (JettySolrRunner.this) {\n        int cnt = 0;\n        while (!waitOnSolr) {\n          this.wait(100);\n          if (cnt++ == 5) {\n            throw new RuntimeException(\"Jetty/Solr unresponsive\");\n          }\n        }\n      }\n      \n      if (config.waitForLoadingCoresToFinishMs != null && config.waitForLoadingCoresToFinishMs > 0L) waitForLoadingCoresToFinish(config.waitForLoadingCoresToFinishMs);\n    } finally {\n      if (prevContext != null)  {\n        MDC.setContextMap(prevContext);\n      } else {\n        MDC.clear();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#start().mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#start().mjava","sourceNew":"  /**\n   * Start the Jetty server\n   *\n   * If the server has been started before, it will restart using the same port\n   *\n   * @throws Exception if an error occurs on startup\n   */\n  public void start() throws Exception {\n    start(true);\n  }\n\n","sourceOld":"  /**\n   * Start the Jetty server\n   *\n   * @throws Exception if an error occurs on startup\n   */\n  public void start() throws Exception {\n    // Do not let Jetty/Solr pollute the MDC for this thread\n    Map<String, String> prevContext = MDC.getCopyOfContextMap();\n    MDC.clear();\n    try {\n      // if started before, make a new server\n      if (startedBefore) {\n        waitOnSolr = false;\n        init(lastPort);\n      } else {\n        startedBefore = true;\n      }\n\n      if (!server.isRunning()) {\n        server.start();\n      }\n      synchronized (JettySolrRunner.this) {\n        int cnt = 0;\n        while (!waitOnSolr) {\n          this.wait(100);\n          if (cnt++ == 5) {\n            throw new RuntimeException(\"Jetty/Solr unresponsive\");\n          }\n        }\n      }\n      \n      if (config.waitForLoadingCoresToFinishMs != null && config.waitForLoadingCoresToFinishMs > 0L) waitForLoadingCoresToFinish(config.waitForLoadingCoresToFinishMs);\n    } finally {\n      if (prevContext != null)  {\n        MDC.setContextMap(prevContext);\n      } else {\n        MDC.clear();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93baf46bd12096e0de407258b3b32cfaaf58e448","date":1522030569,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#start().mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#start().mjava","sourceNew":"  /**\n   * Start the Jetty server\n   *\n   * If the server has been started before, it will restart using the same port\n   *\n   * @throws java.lang.Exception if an error occurs on startup\n   */\n  public void start() throws Exception {\n    start(true);\n  }\n\n","sourceOld":"  /**\n   * Start the Jetty server\n   *\n   * If the server has been started before, it will restart using the same port\n   *\n   * @throws Exception if an error occurs on startup\n   */\n  public void start() throws Exception {\n    start(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f67a921f6ec5ab488ce397cf05f95fcd8ce631b6","date":1522059649,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#start().mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#start().mjava","sourceNew":"  /**\n   * Start the Jetty server\n   *\n   * If the server has been started before, it will restart using the same port\n   *\n   * @throws java.lang.Exception if an error occurs on startup\n   */\n  public void start() throws Exception {\n    start(true);\n  }\n\n","sourceOld":"  /**\n   * Start the Jetty server\n   *\n   * If the server has been started before, it will restart using the same port\n   *\n   * @throws Exception if an error occurs on startup\n   */\n  public void start() throws Exception {\n    start(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79d428597c96bb26f5ff41ca5903ebdc71bf5b4b","date":1522089123,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#start().mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#start().mjava","sourceNew":"  /**\n   * Start the Jetty server\n   *\n   * If the server has been started before, it will restart using the same port\n   *\n   * @throws Exception if an error occurs on startup\n   */\n  public void start() throws Exception {\n    start(true);\n  }\n\n","sourceOld":"  /**\n   * Start the Jetty server\n   *\n   * If the server has been started before, it will restart using the same port\n   *\n   * @throws java.lang.Exception if an error occurs on startup\n   */\n  public void start() throws Exception {\n    start(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7","date":1522191940,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#start().mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#start().mjava","sourceNew":"  /**\n   * Start the Jetty server\n   *\n   * If the server has been started before, it will restart using the same port\n   *\n   * @throws Exception if an error occurs on startup\n   */\n  public void start() throws Exception {\n    start(true);\n  }\n\n","sourceOld":"  /**\n   * Start the Jetty server\n   *\n   * If the server has been started before, it will restart using the same port\n   *\n   * @throws java.lang.Exception if an error occurs on startup\n   */\n  public void start() throws Exception {\n    start(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f9067f5e48f2a848be55167d86815dffa21c5d46":["275019a81d0883a1db4560391b072d1fbe272ec4"],"79d428597c96bb26f5ff41ca5903ebdc71bf5b4b":["f67a921f6ec5ab488ce397cf05f95fcd8ce631b6"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"9bc766d645fa848f86c381c7f6acf2c881c99399":["c26f00b574427b55127e869b935845554afde1fa"],"d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7":["f67a921f6ec5ab488ce397cf05f95fcd8ce631b6","79d428597c96bb26f5ff41ca5903ebdc71bf5b4b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["275019a81d0883a1db4560391b072d1fbe272ec4","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"89424def13674ea17829b41c5883c54ecc31a132":["275019a81d0883a1db4560391b072d1fbe272ec4","f9067f5e48f2a848be55167d86815dffa21c5d46"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["c26f00b574427b55127e869b935845554afde1fa","9bc766d645fa848f86c381c7f6acf2c881c99399"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["275019a81d0883a1db4560391b072d1fbe272ec4","89424def13674ea17829b41c5883c54ecc31a132"],"93baf46bd12096e0de407258b3b32cfaaf58e448":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"275019a81d0883a1db4560391b072d1fbe272ec4":["cb5af3afeddbb803fb785098176e6e177c34261b"],"cb5af3afeddbb803fb785098176e6e177c34261b":["9bc766d645fa848f86c381c7f6acf2c881c99399"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7"],"f67a921f6ec5ab488ce397cf05f95fcd8ce631b6":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","93baf46bd12096e0de407258b3b32cfaaf58e448"]},"commit2Childs":{"f9067f5e48f2a848be55167d86815dffa21c5d46":["89424def13674ea17829b41c5883c54ecc31a132"],"79d428597c96bb26f5ff41ca5903ebdc71bf5b4b":["d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7"],"c26f00b574427b55127e869b935845554afde1fa":["9bc766d645fa848f86c381c7f6acf2c881c99399","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"9bc766d645fa848f86c381c7f6acf2c881c99399":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cb5af3afeddbb803fb785098176e6e177c34261b"],"d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"89424def13674ea17829b41c5883c54ecc31a132":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","93baf46bd12096e0de407258b3b32cfaaf58e448","f67a921f6ec5ab488ce397cf05f95fcd8ce631b6"],"93baf46bd12096e0de407258b3b32cfaaf58e448":["f67a921f6ec5ab488ce397cf05f95fcd8ce631b6"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"275019a81d0883a1db4560391b072d1fbe272ec4":["f9067f5e48f2a848be55167d86815dffa21c5d46","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","89424def13674ea17829b41c5883c54ecc31a132","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cb5af3afeddbb803fb785098176e6e177c34261b":["275019a81d0883a1db4560391b072d1fbe272ec4"],"f67a921f6ec5ab488ce397cf05f95fcd8ce631b6":["79d428597c96bb26f5ff41ca5903ebdc71bf5b4b","d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}