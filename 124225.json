{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter#filesExist(SegmentInfos).mjava","commits":[{"id":"975460c64e0309e8a78d230321879ec18e65dc0a","date":1281550753,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#filesExist(SegmentInfos).mjava","pathOld":"/dev/null","sourceNew":"  // called only from assert\n  private boolean filesExist(SegmentInfos toSync) throws IOException {\n    Collection<String> files = toSync.files(directory, false);\n    for(final String fileName: files) {\n      assert directory.fileExists(fileName): \"file \" + fileName + \" does not exist\";\n      // If this trips it means we are missing a call to\n      // .checkpoint somewhere, because by the time we\n      // are called, deleter should know about every\n      // file referenced by the current head\n      // segmentInfos:\n      assert deleter.exists(fileName) : \"IndexFileDeleter doesn't know about file \" + fileName;\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e1cbd7e289dc1243c7a59e1a83d078163a147fe","date":1292268032,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#filesExist(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#filesExist(SegmentInfos).mjava","sourceNew":"  // called only from assert\n  private boolean filesExist(SegmentInfos toSync) throws IOException {\n    Collection<String> files = toSync.files(directory, false);\n    for(final String fileName: files) {\n      assert directory.fileExists(fileName): \"file \" + fileName + \" does not exist\";\n      // If this trips it means we are missing a call to\n      // .checkpoint somewhere, because by the time we\n      // are called, deleter should know about every\n      // file referenced by the current head\n      // segmentInfos:\n      assert deleter.exists(fileName): \"IndexFileDeleter doesn't know about file \" + fileName;\n    }\n    return true;\n  }\n\n","sourceOld":"  // called only from assert\n  private boolean filesExist(SegmentInfos toSync) throws IOException {\n    Collection<String> files = toSync.files(directory, false);\n    for(final String fileName: files) {\n      assert directory.fileExists(fileName): \"file \" + fileName + \" does not exist\";\n      // If this trips it means we are missing a call to\n      // .checkpoint somewhere, because by the time we\n      // are called, deleter should know about every\n      // file referenced by the current head\n      // segmentInfos:\n      assert deleter.exists(fileName) : \"IndexFileDeleter doesn't know about file \" + fileName;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#filesExist(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#filesExist(SegmentInfos).mjava","sourceNew":"  // called only from assert\n  private boolean filesExist(SegmentInfos toSync) throws IOException {\n    Collection<String> files = toSync.files(directory, false);\n    for(final String fileName: files) {\n      assert directory.fileExists(fileName): \"file \" + fileName + \" does not exist\";\n      // If this trips it means we are missing a call to\n      // .checkpoint somewhere, because by the time we\n      // are called, deleter should know about every\n      // file referenced by the current head\n      // segmentInfos:\n      assert deleter.exists(fileName): \"IndexFileDeleter doesn't know about file \" + fileName;\n    }\n    return true;\n  }\n\n","sourceOld":"  // called only from assert\n  private boolean filesExist(SegmentInfos toSync) throws IOException {\n    Collection<String> files = toSync.files(directory, false);\n    for(final String fileName: files) {\n      assert directory.fileExists(fileName): \"file \" + fileName + \" does not exist\";\n      // If this trips it means we are missing a call to\n      // .checkpoint somewhere, because by the time we\n      // are called, deleter should know about every\n      // file referenced by the current head\n      // segmentInfos:\n      assert deleter.exists(fileName) : \"IndexFileDeleter doesn't know about file \" + fileName;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#filesExist(SegmentInfos).mjava","pathOld":"/dev/null","sourceNew":"  // called only from assert\n  private boolean filesExist(SegmentInfos toSync) throws IOException {\n    Collection<String> files = toSync.files(directory, false);\n    for(final String fileName: files) {\n      assert directory.fileExists(fileName): \"file \" + fileName + \" does not exist\";\n      // If this trips it means we are missing a call to\n      // .checkpoint somewhere, because by the time we\n      // are called, deleter should know about every\n      // file referenced by the current head\n      // segmentInfos:\n      assert deleter.exists(fileName): \"IndexFileDeleter doesn't know about file \" + fileName;\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fe2fc74577855eadfb5eae3153c2fffdaaf791","date":1305237079,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#filesExist(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#filesExist(SegmentInfos).mjava","sourceNew":"  // called only from assert\n  private boolean filesExist(SegmentInfos toSync) throws IOException {\n    \n    Collection<String> files = toSync.files(directory, false);\n    for(final String fileName: files) {\n      assert directory.fileExists(fileName): \"file \" + fileName + \" does not exist\";\n      // If this trips it means we are missing a call to\n      // .checkpoint somewhere, because by the time we\n      // are called, deleter should know about every\n      // file referenced by the current head\n      // segmentInfos:\n      assert deleter.exists(fileName): \"IndexFileDeleter doesn't know about file \" + fileName;\n    }\n    return true;\n  }\n\n","sourceOld":"  // called only from assert\n  private boolean filesExist(SegmentInfos toSync) throws IOException {\n    Collection<String> files = toSync.files(directory, false);\n    for(final String fileName: files) {\n      assert directory.fileExists(fileName): \"file \" + fileName + \" does not exist\";\n      // If this trips it means we are missing a call to\n      // .checkpoint somewhere, because by the time we\n      // are called, deleter should know about every\n      // file referenced by the current head\n      // segmentInfos:\n      assert deleter.exists(fileName): \"IndexFileDeleter doesn't know about file \" + fileName;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#filesExist(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#filesExist(SegmentInfos).mjava","sourceNew":"  // called only from assert\n  private boolean filesExist(SegmentInfos toSync) throws IOException {\n    \n    Collection<String> files = toSync.files(directory, false);\n    for(final String fileName: files) {\n      assert directory.fileExists(fileName): \"file \" + fileName + \" does not exist\";\n      // If this trips it means we are missing a call to\n      // .checkpoint somewhere, because by the time we\n      // are called, deleter should know about every\n      // file referenced by the current head\n      // segmentInfos:\n      assert deleter.exists(fileName): \"IndexFileDeleter doesn't know about file \" + fileName;\n    }\n    return true;\n  }\n\n","sourceOld":"  // called only from assert\n  private boolean filesExist(SegmentInfos toSync) throws IOException {\n    Collection<String> files = toSync.files(directory, false);\n    for(final String fileName: files) {\n      assert directory.fileExists(fileName): \"file \" + fileName + \" does not exist\";\n      // If this trips it means we are missing a call to\n      // .checkpoint somewhere, because by the time we\n      // are called, deleter should know about every\n      // file referenced by the current head\n      // segmentInfos:\n      assert deleter.exists(fileName): \"IndexFileDeleter doesn't know about file \" + fileName;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#filesExist(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#filesExist(SegmentInfos).mjava","sourceNew":"  // called only from assert\n  private boolean filesExist(SegmentInfos toSync) throws IOException {\n    \n    Collection<String> files = toSync.files(directory, false);\n    for(final String fileName: files) {\n      assert directory.fileExists(fileName): \"file \" + fileName + \" does not exist\";\n      // If this trips it means we are missing a call to\n      // .checkpoint somewhere, because by the time we\n      // are called, deleter should know about every\n      // file referenced by the current head\n      // segmentInfos:\n      assert deleter.exists(fileName): \"IndexFileDeleter doesn't know about file \" + fileName;\n    }\n    return true;\n  }\n\n","sourceOld":"  // called only from assert\n  private boolean filesExist(SegmentInfos toSync) throws IOException {\n    Collection<String> files = toSync.files(directory, false);\n    for(final String fileName: files) {\n      assert directory.fileExists(fileName): \"file \" + fileName + \" does not exist\";\n      // If this trips it means we are missing a call to\n      // .checkpoint somewhere, because by the time we\n      // are called, deleter should know about every\n      // file referenced by the current head\n      // segmentInfos:\n      assert deleter.exists(fileName): \"IndexFileDeleter doesn't know about file \" + fileName;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#filesExist(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#filesExist(SegmentInfos).mjava","sourceNew":"  // called only from assert\n  private boolean filesExist(SegmentInfos toSync) throws IOException {\n    \n    Collection<String> files = toSync.files(directory, false);\n    for(final String fileName: files) {\n      assert directory.fileExists(fileName): \"file \" + fileName + \" does not exist\";\n      // If this trips it means we are missing a call to\n      // .checkpoint somewhere, because by the time we\n      // are called, deleter should know about every\n      // file referenced by the current head\n      // segmentInfos:\n      assert deleter.exists(fileName): \"IndexFileDeleter doesn't know about file \" + fileName;\n    }\n    return true;\n  }\n\n","sourceOld":"  // called only from assert\n  private boolean filesExist(SegmentInfos toSync) throws IOException {\n    \n    Collection<String> files = toSync.files(directory, false);\n    for(final String fileName: files) {\n      assert directory.fileExists(fileName): \"file \" + fileName + \" does not exist\";\n      // If this trips it means we are missing a call to\n      // .checkpoint somewhere, because by the time we\n      // are called, deleter should know about every\n      // file referenced by the current head\n      // segmentInfos:\n      assert deleter.exists(fileName): \"IndexFileDeleter doesn't know about file \" + fileName;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"975460c64e0309e8a78d230321879ec18e65dc0a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d3fe2fc74577855eadfb5eae3153c2fffdaaf791":["7e1cbd7e289dc1243c7a59e1a83d078163a147fe"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d3fe2fc74577855eadfb5eae3153c2fffdaaf791"],"a3776dccca01c11e7046323cfad46a3b4a471233":["7e1cbd7e289dc1243c7a59e1a83d078163a147fe","d3fe2fc74577855eadfb5eae3153c2fffdaaf791"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["975460c64e0309e8a78d230321879ec18e65dc0a","7e1cbd7e289dc1243c7a59e1a83d078163a147fe"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","d3fe2fc74577855eadfb5eae3153c2fffdaaf791"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7e1cbd7e289dc1243c7a59e1a83d078163a147fe"],"7e1cbd7e289dc1243c7a59e1a83d078163a147fe":["975460c64e0309e8a78d230321879ec18e65dc0a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"975460c64e0309e8a78d230321879ec18e65dc0a":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7e1cbd7e289dc1243c7a59e1a83d078163a147fe"],"d3fe2fc74577855eadfb5eae3153c2fffdaaf791":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["975460c64e0309e8a78d230321879ec18e65dc0a","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"7e1cbd7e289dc1243c7a59e1a83d078163a147fe":["d3fe2fc74577855eadfb5eae3153c2fffdaaf791","a3776dccca01c11e7046323cfad46a3b4a471233","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}