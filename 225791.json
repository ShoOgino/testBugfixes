{"path":"lucene/facet/src/java/org/apache/lucene/util/UnsafeByteArrayOutputStream#write(byte[],int,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/util/UnsafeByteArrayOutputStream#write(byte[],int,int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/util/UnsafeByteArrayOutputStream#write(byte[],int,int).mjava","sourceNew":"  /**\n   * writes a given byte[], with offset and length to the buffer. If the\n   * buffer's empty space is insufficient, the buffer is doubled until it\n   * could contain all the data.\n   * \n   * @param b\n   *            byte buffer, containing the source data to be written\n   * @param off\n   *            index from which data from the buffer b should be written\n   * @param len\n   *            number of bytes that should be written\n   */\n  @Override\n  public void write(byte[] b, int off, int len) throws IOException {\n    // If there's not enough space for the data\n    int targetLength = index + len;\n    if (targetLength >= buffer.length) {\n      // Calculating the new required length of the array, keeping the array\n      // size a power of 2 if it was initialized like that.\n      int newlen = buffer.length;\n      while ((newlen <<= 1) < targetLength) {}\n      grow(newlen);\n    }\n\n    // Now that we have enough spare space, we could copy the rest of the\n    // data\n    System.arraycopy(b, off, buffer, index, len);\n\n    // Updating the index to next available index.\n    index += len;\n  }\n\n","sourceOld":"  /**\n   * writes a given byte[], with offset and length to the buffer. If the\n   * buffer's empty space is insufficient, the buffer is doubled until it\n   * could contain all the data.\n   * \n   * @param b\n   *            byte buffer, containing the source data to be written\n   * @param off\n   *            index from which data from the buffer b should be written\n   * @param len\n   *            number of bytes that should be written\n   */\n  @Override\n  public void write(byte[] b, int off, int len) throws IOException {\n    // If there's not enough space for the data\n    int targetLength = index + len;\n    if (targetLength >= buffer.length) {\n      // Calculating the new required length of the array, keeping the array\n      // size a power of 2 if it was initialized like that.\n      int newlen = buffer.length;\n      while ((newlen <<= 1) < targetLength) {}\n      grow(newlen);\n    }\n\n    // Now that we have enough spare space, we could copy the rest of the\n    // data\n    System.arraycopy(b, off, buffer, index, len);\n\n    // Updating the index to next available index.\n    index += len;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/util/UnsafeByteArrayOutputStream#write(byte[],int,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * writes a given byte[], with offset and length to the buffer. If the\n   * buffer's empty space is insufficient, the buffer is doubled until it\n   * could contain all the data.\n   * \n   * @param b\n   *            byte buffer, containing the source data to be written\n   * @param off\n   *            index from which data from the buffer b should be written\n   * @param len\n   *            number of bytes that should be written\n   */\n  @Override\n  public void write(byte[] b, int off, int len) throws IOException {\n    // If there's not enough space for the data\n    int targetLength = index + len;\n    if (targetLength >= buffer.length) {\n      // Calculating the new required length of the array, keeping the array\n      // size a power of 2 if it was initialized like that.\n      int newlen = buffer.length;\n      while ((newlen <<= 1) < targetLength) {}\n      grow(newlen);\n    }\n\n    // Now that we have enough spare space, we could copy the rest of the\n    // data\n    System.arraycopy(b, off, buffer, index, len);\n\n    // Updating the index to next available index.\n    index += len;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["607428da722dcb3e86bbd11c63de8986e6275c36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}