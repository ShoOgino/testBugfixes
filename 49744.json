{"path":"lucene/analysis/nori/src/tools/java/org/apache/lucene/analysis/ko/util/ConnectionCostsBuilder#build(String).mjava","commits":[{"id":"8493925b2e70246f0961df584c01a8c2e61ee52f","date":1523611602,"type":0,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/analysis/nori/src/tools/java/org/apache/lucene/analysis/ko/util/ConnectionCostsBuilder#build(String).mjava","pathOld":"/dev/null","sourceNew":"  public static ConnectionCostsWriter build(String filename) throws IOException {\n    FileInputStream inputStream = new FileInputStream(filename);\n    Charset cs = StandardCharsets.US_ASCII;\n    CharsetDecoder decoder = cs.newDecoder()\n        .onMalformedInput(CodingErrorAction.REPORT)\n        .onUnmappableCharacter(CodingErrorAction.REPORT);\n    InputStreamReader streamReader = new InputStreamReader(inputStream, decoder);\n    LineNumberReader lineReader = new LineNumberReader(streamReader);\n    \n    String line = lineReader.readLine();\n    String[] dimensions = line.split(\"\\\\s+\");\n    \n    assert dimensions.length == 2;\n    \n    int forwardSize = Integer.parseInt(dimensions[0]);\n    int backwardSize = Integer.parseInt(dimensions[1]);\n    \n    assert forwardSize > 0 && backwardSize > 0;\n    \n    ConnectionCostsWriter costs = new ConnectionCostsWriter(forwardSize, backwardSize);\n    \n    while ((line = lineReader.readLine()) != null) {\n      String[] fields = line.split(\"\\\\s+\");\n      \n      assert fields.length == 3;\n      \n      int forwardId = Integer.parseInt(fields[0]);\n      int backwardId = Integer.parseInt(fields[1]);\n      int cost = Integer.parseInt(fields[2]);\n      \n      costs.add(forwardId, backwardId, cost);\n    }\n    return costs;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c6453827f947004a68ad9db7418781e9df2f660","date":1523626811,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/analysis/nori/src/tools/java/org/apache/lucene/analysis/ko/util/ConnectionCostsBuilder#build(String).mjava","pathOld":"/dev/null","sourceNew":"  public static ConnectionCostsWriter build(String filename) throws IOException {\n    FileInputStream inputStream = new FileInputStream(filename);\n    Charset cs = StandardCharsets.US_ASCII;\n    CharsetDecoder decoder = cs.newDecoder()\n        .onMalformedInput(CodingErrorAction.REPORT)\n        .onUnmappableCharacter(CodingErrorAction.REPORT);\n    InputStreamReader streamReader = new InputStreamReader(inputStream, decoder);\n    LineNumberReader lineReader = new LineNumberReader(streamReader);\n    \n    String line = lineReader.readLine();\n    String[] dimensions = line.split(\"\\\\s+\");\n    \n    assert dimensions.length == 2;\n    \n    int forwardSize = Integer.parseInt(dimensions[0]);\n    int backwardSize = Integer.parseInt(dimensions[1]);\n    \n    assert forwardSize > 0 && backwardSize > 0;\n    \n    ConnectionCostsWriter costs = new ConnectionCostsWriter(forwardSize, backwardSize);\n    \n    while ((line = lineReader.readLine()) != null) {\n      String[] fields = line.split(\"\\\\s+\");\n      \n      assert fields.length == 3;\n      \n      int forwardId = Integer.parseInt(fields[0]);\n      int backwardId = Integer.parseInt(fields[1]);\n      int cost = Integer.parseInt(fields[2]);\n      \n      costs.add(forwardId, backwardId, cost);\n    }\n    return costs;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3010cab237afb0b81c042f263115756e3cc6d67","date":1564503244,"type":4,"author":"Namgyu Kim","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/nori/src/tools/java/org/apache/lucene/analysis/ko/util/ConnectionCostsBuilder#build(String).mjava","sourceNew":null,"sourceOld":"  public static ConnectionCostsWriter build(String filename) throws IOException {\n    FileInputStream inputStream = new FileInputStream(filename);\n    Charset cs = StandardCharsets.US_ASCII;\n    CharsetDecoder decoder = cs.newDecoder()\n        .onMalformedInput(CodingErrorAction.REPORT)\n        .onUnmappableCharacter(CodingErrorAction.REPORT);\n    InputStreamReader streamReader = new InputStreamReader(inputStream, decoder);\n    LineNumberReader lineReader = new LineNumberReader(streamReader);\n    \n    String line = lineReader.readLine();\n    String[] dimensions = line.split(\"\\\\s+\");\n    \n    assert dimensions.length == 2;\n    \n    int forwardSize = Integer.parseInt(dimensions[0]);\n    int backwardSize = Integer.parseInt(dimensions[1]);\n    \n    assert forwardSize > 0 && backwardSize > 0;\n    \n    ConnectionCostsWriter costs = new ConnectionCostsWriter(forwardSize, backwardSize);\n    \n    while ((line = lineReader.readLine()) != null) {\n      String[] fields = line.split(\"\\\\s+\");\n      \n      assert fields.length == 3;\n      \n      int forwardId = Integer.parseInt(fields[0]);\n      int backwardId = Integer.parseInt(fields[1]);\n      int cost = Integer.parseInt(fields[2]);\n      \n      costs.add(forwardId, backwardId, cost);\n    }\n    return costs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":4,"author":"Atri Sharma","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/analysis/nori/src/tools/java/org/apache/lucene/analysis/ko/util/ConnectionCostsBuilder#build(String).mjava","sourceNew":null,"sourceOld":"  public static ConnectionCostsWriter build(String filename) throws IOException {\n    FileInputStream inputStream = new FileInputStream(filename);\n    Charset cs = StandardCharsets.US_ASCII;\n    CharsetDecoder decoder = cs.newDecoder()\n        .onMalformedInput(CodingErrorAction.REPORT)\n        .onUnmappableCharacter(CodingErrorAction.REPORT);\n    InputStreamReader streamReader = new InputStreamReader(inputStream, decoder);\n    LineNumberReader lineReader = new LineNumberReader(streamReader);\n    \n    String line = lineReader.readLine();\n    String[] dimensions = line.split(\"\\\\s+\");\n    \n    assert dimensions.length == 2;\n    \n    int forwardSize = Integer.parseInt(dimensions[0]);\n    int backwardSize = Integer.parseInt(dimensions[1]);\n    \n    assert forwardSize > 0 && backwardSize > 0;\n    \n    ConnectionCostsWriter costs = new ConnectionCostsWriter(forwardSize, backwardSize);\n    \n    while ((line = lineReader.readLine()) != null) {\n      String[] fields = line.split(\"\\\\s+\");\n      \n      assert fields.length == 3;\n      \n      int forwardId = Integer.parseInt(fields[0]);\n      int backwardId = Integer.parseInt(fields[1]);\n      int cost = Integer.parseInt(fields[2]);\n      \n      costs.add(forwardId, backwardId, cost);\n    }\n    return costs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8493925b2e70246f0961df584c01a8c2e61ee52f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e3010cab237afb0b81c042f263115756e3cc6d67":["5c6453827f947004a68ad9db7418781e9df2f660"],"f8061ddd97f3352007d927dae445884a6f3d857b":["5c6453827f947004a68ad9db7418781e9df2f660","e3010cab237afb0b81c042f263115756e3cc6d67"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e3010cab237afb0b81c042f263115756e3cc6d67"],"5c6453827f947004a68ad9db7418781e9df2f660":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8493925b2e70246f0961df584c01a8c2e61ee52f"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8493925b2e70246f0961df584c01a8c2e61ee52f","5c6453827f947004a68ad9db7418781e9df2f660"],"8493925b2e70246f0961df584c01a8c2e61ee52f":["5c6453827f947004a68ad9db7418781e9df2f660"],"e3010cab237afb0b81c042f263115756e3cc6d67":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"5c6453827f947004a68ad9db7418781e9df2f660":["e3010cab237afb0b81c042f263115756e3cc6d67","f8061ddd97f3352007d927dae445884a6f3d857b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}