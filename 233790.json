{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/Explanation#toMap(Map[String,Object]).mjava","commits":[{"id":"3a6fbf1484b3c2b38b75d59998de5fe4330b6b40","date":1478163495,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/Explanation#toMap(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/Explanation#toMap().mjava","sourceNew":"  @Override\n  public Map toMap(Map<String, Object> map) {\n    if(null != expressionNodeId){ map.put(\"expressionNodeId\",expressionNodeId); }\n    if(null != expressionType){ map.put(\"expressionType\",expressionType); }\n    if(null != functionName){ map.put(\"functionName\",functionName); }\n    if(null != implementingClass){ map.put(\"implementingClass\",implementingClass); }\n    if(null != expression){ map.put(\"expression\",expression); }\n    if(null != note){ map.put(\"note\",note); }\n\n    if(null != helpers && 0 != helpers.size()){\n      List<Map<String,Object>> helperMaps = new ArrayList<>();\n      for(Explanation helper : helpers){\n        helperMaps.add(helper.toMap(new LinkedHashMap<>()));\n      }\n      map.put(\"helpers\", helperMaps);\n    }\n\n    return map;\n  }\n\n","sourceOld":"  public Map<String,Object> toMap(){\n    Map<String,Object> map = new HashMap<String,Object>();\n    if(null != expressionNodeId){ map.put(\"expressionNodeId\",expressionNodeId); }\n    if(null != expressionType){ map.put(\"expressionType\",expressionType); }\n    if(null != functionName){ map.put(\"functionName\",functionName); }\n    if(null != implementingClass){ map.put(\"implementingClass\",implementingClass); }\n    if(null != expression){ map.put(\"expression\",expression); }\n    if(null != note){ map.put(\"note\",note); }\n    \n    if(null != helpers && 0 != helpers.size()){\n      List<Map<String,Object>> helperMaps = new ArrayList<Map<String,Object>>();\n      for(Explanation helper : helpers){\n        helperMaps.add(helper.toMap());\n      }\n      map.put(\"helpers\", helperMaps);\n    }\n    \n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/Explanation#toMap(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Map toMap(Map<String, Object> map) {\n    if(null != expressionNodeId){ map.put(\"expressionNodeId\",expressionNodeId); }\n    if(null != expressionType){ map.put(\"expressionType\",expressionType); }\n    if(null != functionName){ map.put(\"functionName\",functionName); }\n    if(null != implementingClass){ map.put(\"implementingClass\",implementingClass); }\n    if(null != expression){ map.put(\"expression\",expression); }\n    if(null != note){ map.put(\"note\",note); }\n\n    if(null != helpers && 0 != helpers.size()){\n      List<Map<String,Object>> helperMaps = new ArrayList<>();\n      for(Explanation helper : helpers){\n        helperMaps.add(helper.toMap(new LinkedHashMap<>()));\n      }\n      map.put(\"helpers\", helperMaps);\n    }\n\n    return map;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75","date":1591744896,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/Explanation#toMap(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/Explanation#toMap(Map[String,Object]).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public Map toMap(Map<String, Object> map) {\n    if(null != expressionNodeId){ map.put(\"expressionNodeId\",expressionNodeId); }\n    if(null != expressionType){ map.put(\"expressionType\",expressionType); }\n    if(null != functionName){ map.put(\"functionName\",functionName); }\n    if(null != implementingClass){ map.put(\"implementingClass\",implementingClass); }\n    if(null != expression){ map.put(\"expression\",expression); }\n    if(null != note){ map.put(\"note\",note); }\n\n    if(null != helpers && 0 != helpers.size()){\n      List<Map<String,Object>> helperMaps = new ArrayList<>();\n      for(Explanation helper : helpers){\n        helperMaps.add(helper.toMap(new LinkedHashMap<>()));\n      }\n      map.put(\"helpers\", helperMaps);\n    }\n\n    return map;\n  }\n\n","sourceOld":"  @Override\n  public Map toMap(Map<String, Object> map) {\n    if(null != expressionNodeId){ map.put(\"expressionNodeId\",expressionNodeId); }\n    if(null != expressionType){ map.put(\"expressionType\",expressionType); }\n    if(null != functionName){ map.put(\"functionName\",functionName); }\n    if(null != implementingClass){ map.put(\"implementingClass\",implementingClass); }\n    if(null != expression){ map.put(\"expression\",expression); }\n    if(null != note){ map.put(\"note\",note); }\n\n    if(null != helpers && 0 != helpers.size()){\n      List<Map<String,Object>> helperMaps = new ArrayList<>();\n      for(Explanation helper : helpers){\n        helperMaps.add(helper.toMap(new LinkedHashMap<>()));\n      }\n      map.put(\"helpers\", helperMaps);\n    }\n\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9720b151fde2073f4e401450f4574e5f31c2d0ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3a6fbf1484b3c2b38b75d59998de5fe4330b6b40"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["3a6fbf1484b3c2b38b75d59998de5fe4330b6b40"],"3a6fbf1484b3c2b38b75d59998de5fe4330b6b40":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"]},"commit2Childs":{"9720b151fde2073f4e401450f4574e5f31c2d0ff":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9720b151fde2073f4e401450f4574e5f31c2d0ff","3a6fbf1484b3c2b38b75d59998de5fe4330b6b40"],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a6fbf1484b3c2b38b75d59998de5fe4330b6b40":["9720b151fde2073f4e401450f4574e5f31c2d0ff","2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9720b151fde2073f4e401450f4574e5f31c2d0ff","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}