{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymGraphFilter#assertAllStrings(Analyzer,String,String[]).mjava","commits":[{"id":"24a98f5fdd23e04f85819dbc63b47a12f7c44311","date":1482439157,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymGraphFilter#assertAllStrings(Analyzer,String,String[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Helper method to validate all strings that can be generated from a token stream.\n   * Uses {@link TokenStreamToAutomaton} to create an automaton. Asserts the finite strings of the automaton are all\n   * and only the given valid strings.\n   * @param analyzer analyzer containing the SynonymFilter under test.\n   * @param text text to be analyzed.\n   * @param expectedStrings all expected finite strings.\n   */\n  public void assertAllStrings(Analyzer analyzer, String text, String[] expectedStrings) throws IOException {\n    TokenStream tokenStream = analyzer.tokenStream(\"dummy\", text);\n    try {\n      Automaton automaton = new TokenStreamToAutomaton().toAutomaton(tokenStream);\n      Set<IntsRef> finiteStrings = AutomatonTestUtil.getFiniteStringsRecursive(automaton, -1);\n\n      assertEquals(\"Invalid resulting strings count. Expected \" + expectedStrings.length + \" was \" + finiteStrings.size(),\n          expectedStrings.length, finiteStrings.size());\n\n      Set<String> expectedStringsSet = new HashSet<>(Arrays.asList(expectedStrings));\n\n      BytesRefBuilder scratchBytesRefBuilder = new BytesRefBuilder();\n      for (IntsRef ir: finiteStrings) {\n        String s = Util.toBytesRef(ir, scratchBytesRefBuilder).utf8ToString().replace((char) TokenStreamToAutomaton.POS_SEP, ' ');\n        assertTrue(\"Unexpected string found: \" + s, expectedStringsSet.contains(s));\n      }\n    } finally {\n      tokenStream.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymGraphFilter#assertAllStrings(Analyzer,String,String[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Helper method to validate all strings that can be generated from a token stream.\n   * Uses {@link TokenStreamToAutomaton} to create an automaton. Asserts the finite strings of the automaton are all\n   * and only the given valid strings.\n   * @param analyzer analyzer containing the SynonymFilter under test.\n   * @param text text to be analyzed.\n   * @param expectedStrings all expected finite strings.\n   */\n  public void assertAllStrings(Analyzer analyzer, String text, String[] expectedStrings) throws IOException {\n    TokenStream tokenStream = analyzer.tokenStream(\"dummy\", text);\n    try {\n      Automaton automaton = new TokenStreamToAutomaton().toAutomaton(tokenStream);\n      Set<IntsRef> finiteStrings = AutomatonTestUtil.getFiniteStringsRecursive(automaton, -1);\n\n      assertEquals(\"Invalid resulting strings count. Expected \" + expectedStrings.length + \" was \" + finiteStrings.size(),\n          expectedStrings.length, finiteStrings.size());\n\n      Set<String> expectedStringsSet = new HashSet<>(Arrays.asList(expectedStrings));\n\n      BytesRefBuilder scratchBytesRefBuilder = new BytesRefBuilder();\n      for (IntsRef ir: finiteStrings) {\n        String s = Util.toBytesRef(ir, scratchBytesRefBuilder).utf8ToString().replace((char) TokenStreamToAutomaton.POS_SEP, ' ');\n        assertTrue(\"Unexpected string found: \" + s, expectedStringsSet.contains(s));\n      }\n    } finally {\n      tokenStream.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"098528909bb70948871fd7ed865fafb87ed73964","date":1484667487,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymGraphFilter#assertAllStrings(Analyzer,String,String[]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Helper method to validate all strings that can be generated from a token stream.\n   * Uses {@link TokenStreamToAutomaton} to create an automaton. Asserts the finite strings of the automaton are all\n   * and only the given valid strings.\n   * @param analyzer analyzer containing the SynonymFilter under test.\n   * @param text text to be analyzed.\n   * @param expectedStrings all expected finite strings.\n   */\n  public void assertAllStrings(Analyzer analyzer, String text, String[] expectedStrings) throws IOException {\n    TokenStream tokenStream = analyzer.tokenStream(\"dummy\", text);\n    try {\n      Automaton automaton = new TokenStreamToAutomaton().toAutomaton(tokenStream);\n      Set<IntsRef> finiteStrings = AutomatonTestUtil.getFiniteStringsRecursive(automaton, -1);\n\n      assertEquals(\"Invalid resulting strings count. Expected \" + expectedStrings.length + \" was \" + finiteStrings.size(),\n          expectedStrings.length, finiteStrings.size());\n\n      Set<String> expectedStringsSet = new HashSet<>(Arrays.asList(expectedStrings));\n\n      BytesRefBuilder scratchBytesRefBuilder = new BytesRefBuilder();\n      for (IntsRef ir: finiteStrings) {\n        String s = Util.toBytesRef(ir, scratchBytesRefBuilder).utf8ToString().replace((char) TokenStreamToAutomaton.POS_SEP, ' ');\n        assertTrue(\"Unexpected string found: \" + s, expectedStringsSet.contains(s));\n      }\n    } finally {\n      tokenStream.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"302d34f2c66e8d489ee13078305c330cbf67b226","date":1484754357,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymGraphFilter#assertAllStrings(Analyzer,String,String[]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Helper method to validate all strings that can be generated from a token stream.\n   * Uses {@link TokenStreamToAutomaton} to create an automaton. Asserts the finite strings of the automaton are all\n   * and only the given valid strings.\n   * @param analyzer analyzer containing the SynonymFilter under test.\n   * @param text text to be analyzed.\n   * @param expectedStrings all expected finite strings.\n   */\n  public void assertAllStrings(Analyzer analyzer, String text, String[] expectedStrings) throws IOException {\n    TokenStream tokenStream = analyzer.tokenStream(\"dummy\", text);\n    try {\n      Automaton automaton = new TokenStreamToAutomaton().toAutomaton(tokenStream);\n      Set<IntsRef> finiteStrings = AutomatonTestUtil.getFiniteStringsRecursive(automaton, -1);\n\n      assertEquals(\"Invalid resulting strings count. Expected \" + expectedStrings.length + \" was \" + finiteStrings.size(),\n          expectedStrings.length, finiteStrings.size());\n\n      Set<String> expectedStringsSet = new HashSet<>(Arrays.asList(expectedStrings));\n\n      BytesRefBuilder scratchBytesRefBuilder = new BytesRefBuilder();\n      for (IntsRef ir: finiteStrings) {\n        String s = Util.toBytesRef(ir, scratchBytesRefBuilder).utf8ToString().replace((char) TokenStreamToAutomaton.POS_SEP, ' ');\n        assertTrue(\"Unexpected string found: \" + s, expectedStringsSet.contains(s));\n      }\n    } finally {\n      tokenStream.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"098528909bb70948871fd7ed865fafb87ed73964":["24a98f5fdd23e04f85819dbc63b47a12f7c44311"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"24a98f5fdd23e04f85819dbc63b47a12f7c44311":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["098528909bb70948871fd7ed865fafb87ed73964"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","24a98f5fdd23e04f85819dbc63b47a12f7c44311"],"302d34f2c66e8d489ee13078305c330cbf67b226":["f03e4bed5023ec3ef93a771b8888cae991cf448d","098528909bb70948871fd7ed865fafb87ed73964"]},"commit2Childs":{"098528909bb70948871fd7ed865fafb87ed73964":["cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["24a98f5fdd23e04f85819dbc63b47a12f7c44311","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"24a98f5fdd23e04f85819dbc63b47a12f7c44311":["098528909bb70948871fd7ed865fafb87ed73964","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["302d34f2c66e8d489ee13078305c330cbf67b226"],"302d34f2c66e8d489ee13078305c330cbf67b226":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}