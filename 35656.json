{"path":"solr/core/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object).mjava","commits":[{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object,float).mjava","sourceNew":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal-&gt;indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public IndexableField createField(SchemaField field, Object value) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e);\n    }\n    if (val==null) return null;\n\n      /*org.apache.lucene.document.FieldType newType = new org.apache.lucene.document.FieldType();\n      newType.setTokenized(field.isTokenized());\n      newType.setStored(field.stored());\n      newType.setOmitNorms(field.omitNorms());\n      newType.setIndexOptions(field.indexed() ? getIndexOptions(field, val) : IndexOptions.NONE);\n      newType.setStoreTermVectors(field.storeTermVector());\n      newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n      newType.setStoreTermVectorPositions(field.storeTermPositions());\n      newType.setStoreTermVectorPayloads(field.storeTermPayloads());*/\n    return createField(field.getName(), val, field);\n  }\n\n","sourceOld":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal-&gt;indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public IndexableField createField(SchemaField field, Object value, float boost) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e);\n    }\n    if (val==null) return null;\n\n      /*org.apache.lucene.document.FieldType newType = new org.apache.lucene.document.FieldType();\n      newType.setTokenized(field.isTokenized());\n      newType.setStored(field.stored());\n      newType.setOmitNorms(field.omitNorms());\n      newType.setIndexOptions(field.indexed() ? getIndexOptions(field, val) : IndexOptions.NONE);\n      newType.setStoreTermVectors(field.storeTermVector());\n      newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n      newType.setStoreTermVectorPositions(field.storeTermPositions());\n      newType.setStoreTermVectorPayloads(field.storeTermPayloads());*/\n    return createField(field.getName(), val, field, boost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object).mjava","sourceNew":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal-&gt;indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public IndexableField createField(SchemaField field, Object value) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: {}\", field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e);\n    }\n    if (val==null) return null;\n\n      /*org.apache.lucene.document.FieldType newType = new org.apache.lucene.document.FieldType();\n      newType.setTokenized(field.isTokenized());\n      newType.setStored(field.stored());\n      newType.setOmitNorms(field.omitNorms());\n      newType.setIndexOptions(field.indexed() ? getIndexOptions(field, val) : IndexOptions.NONE);\n      newType.setStoreTermVectors(field.storeTermVector());\n      newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n      newType.setStoreTermVectorPositions(field.storeTermPositions());\n      newType.setStoreTermVectorPayloads(field.storeTermPayloads());*/\n    return createField(field.getName(), val, field);\n  }\n\n","sourceOld":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal-&gt;indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public IndexableField createField(SchemaField field, Object value) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e);\n    }\n    if (val==null) return null;\n\n      /*org.apache.lucene.document.FieldType newType = new org.apache.lucene.document.FieldType();\n      newType.setTokenized(field.isTokenized());\n      newType.setStored(field.stored());\n      newType.setOmitNorms(field.omitNorms());\n      newType.setIndexOptions(field.indexed() ? getIndexOptions(field, val) : IndexOptions.NONE);\n      newType.setStoreTermVectors(field.storeTermVector());\n      newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n      newType.setStoreTermVectorPositions(field.storeTermPositions());\n      newType.setStoreTermVectorPayloads(field.storeTermPayloads());*/\n    return createField(field.getName(), val, field);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"575e66bd4b2349209027f6801184da7fc3cba13f":["acd9883560fd89e6448b2b447302fe543040cd4f"],"acd9883560fd89e6448b2b447302fe543040cd4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575e66bd4b2349209027f6801184da7fc3cba13f"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["acd9883560fd89e6448b2b447302fe543040cd4f"],"575e66bd4b2349209027f6801184da7fc3cba13f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"acd9883560fd89e6448b2b447302fe543040cd4f":["575e66bd4b2349209027f6801184da7fc3cba13f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}