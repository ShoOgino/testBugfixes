{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerRoleCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","commits":[{"id":"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","date":1471585465,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerRoleCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processRoleCommand(ZkNodeProps,String).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    Map roles = null;\n    String node = message.getStr(\"node\");\n\n    String roleName = message.getStr(\"role\");\n    boolean nodeExists = false;\n    if (nodeExists = zkClient.exists(ZkStateReader.ROLES, true)) {\n      roles = (Map) Utils.fromJSON(zkClient.getData(ZkStateReader.ROLES, null, new Stat(), true));\n    } else {\n      roles = new LinkedHashMap(1);\n    }\n\n    List nodeList = (List) roles.get(roleName);\n    if (nodeList == null) roles.put(roleName, nodeList = new ArrayList());\n    if (ADDROLE == operation) {\n      log.info(\"Overseer role added to {}\", node);\n      if (!nodeList.contains(node)) nodeList.add(node);\n    } else if (REMOVEROLE == operation) {\n      log.info(\"Overseer role removed from {}\", node);\n      nodeList.remove(node);\n    }\n\n    if (nodeExists) {\n      zkClient.setData(ZkStateReader.ROLES, Utils.toJSON(roles), true);\n    } else {\n      zkClient.create(ZkStateReader.ROLES, Utils.toJSON(roles), CreateMode.PERSISTENT, true);\n    }\n    //if there are too many nodes this command may time out. And most likely dedicated\n    // overseers are created when there are too many nodes  . So , do this operation in a separate thread\n    new Thread(() -> {\n      try {\n        overseerPrioritizer.prioritizeOverseerNodes(ocmh.myId);\n      } catch (Exception e) {\n        log.error(\"Error in prioritizing Overseer\", e);\n      }\n\n    }).start();\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void processRoleCommand(ZkNodeProps message, String operation) throws KeeperException, InterruptedException {\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    Map roles = null;\n    String node = message.getStr(\"node\");\n\n    String roleName = message.getStr(\"role\");\n    boolean nodeExists = false;\n    if(nodeExists = zkClient.exists(ZkStateReader.ROLES, true)){\n      roles = (Map) Utils.fromJSON(zkClient.getData(ZkStateReader.ROLES, null, new Stat(), true));\n    } else {\n      roles = new LinkedHashMap(1);\n    }\n\n    List nodeList= (List) roles.get(roleName);\n    if(nodeList == null) roles.put(roleName, nodeList = new ArrayList());\n    if(ADDROLE.toString().toLowerCase(Locale.ROOT).equals(operation) ){\n      log.info(\"Overseer role added to {}\", node);\n      if(!nodeList.contains(node)) nodeList.add(node);\n    } else if(REMOVEROLE.toString().toLowerCase(Locale.ROOT).equals(operation)) {\n      log.info(\"Overseer role removed from {}\", node);\n      nodeList.remove(node);\n    }\n\n    if(nodeExists){\n      zkClient.setData(ZkStateReader.ROLES, Utils.toJSON(roles),true);\n    } else {\n      zkClient.create(ZkStateReader.ROLES, Utils.toJSON(roles), CreateMode.PERSISTENT,true);\n    }\n    //if there are too many nodes this command may time out. And most likely dedicated\n    // overseers are created when there are too many nodes  . So , do this operation in a separate thread\n    new Thread(() -> {\n      try {\n        overseerPrioritizer.prioritizeOverseerNodes(myId);\n      } catch (Exception e) {\n        log.error(\"Error in prioritizing Overseer\", e);\n      }\n\n    }).start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerRoleCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processRoleCommand(ZkNodeProps,String).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    Map roles = null;\n    String node = message.getStr(\"node\");\n\n    String roleName = message.getStr(\"role\");\n    boolean nodeExists = false;\n    if (nodeExists = zkClient.exists(ZkStateReader.ROLES, true)) {\n      roles = (Map) Utils.fromJSON(zkClient.getData(ZkStateReader.ROLES, null, new Stat(), true));\n    } else {\n      roles = new LinkedHashMap(1);\n    }\n\n    List nodeList = (List) roles.get(roleName);\n    if (nodeList == null) roles.put(roleName, nodeList = new ArrayList());\n    if (ADDROLE == operation) {\n      log.info(\"Overseer role added to {}\", node);\n      if (!nodeList.contains(node)) nodeList.add(node);\n    } else if (REMOVEROLE == operation) {\n      log.info(\"Overseer role removed from {}\", node);\n      nodeList.remove(node);\n    }\n\n    if (nodeExists) {\n      zkClient.setData(ZkStateReader.ROLES, Utils.toJSON(roles), true);\n    } else {\n      zkClient.create(ZkStateReader.ROLES, Utils.toJSON(roles), CreateMode.PERSISTENT, true);\n    }\n    //if there are too many nodes this command may time out. And most likely dedicated\n    // overseers are created when there are too many nodes  . So , do this operation in a separate thread\n    new Thread(() -> {\n      try {\n        overseerPrioritizer.prioritizeOverseerNodes(ocmh.myId);\n      } catch (Exception e) {\n        log.error(\"Error in prioritizing Overseer\", e);\n      }\n\n    }).start();\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void processRoleCommand(ZkNodeProps message, String operation) throws KeeperException, InterruptedException {\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    Map roles = null;\n    String node = message.getStr(\"node\");\n\n    String roleName = message.getStr(\"role\");\n    boolean nodeExists = false;\n    if(nodeExists = zkClient.exists(ZkStateReader.ROLES, true)){\n      roles = (Map) Utils.fromJSON(zkClient.getData(ZkStateReader.ROLES, null, new Stat(), true));\n    } else {\n      roles = new LinkedHashMap(1);\n    }\n\n    List nodeList= (List) roles.get(roleName);\n    if(nodeList == null) roles.put(roleName, nodeList = new ArrayList());\n    if(ADDROLE.toString().toLowerCase(Locale.ROOT).equals(operation) ){\n      log.info(\"Overseer role added to {}\", node);\n      if(!nodeList.contains(node)) nodeList.add(node);\n    } else if(REMOVEROLE.toString().toLowerCase(Locale.ROOT).equals(operation)) {\n      log.info(\"Overseer role removed from {}\", node);\n      nodeList.remove(node);\n    }\n\n    if(nodeExists){\n      zkClient.setData(ZkStateReader.ROLES, Utils.toJSON(roles),true);\n    } else {\n      zkClient.create(ZkStateReader.ROLES, Utils.toJSON(roles), CreateMode.PERSISTENT,true);\n    }\n    //if there are too many nodes this command may time out. And most likely dedicated\n    // overseers are created when there are too many nodes  . So , do this operation in a separate thread\n    new Thread(() -> {\n      try {\n        overseerPrioritizer.prioritizeOverseerNodes(myId);\n      } catch (Exception e) {\n        log.error(\"Error in prioritizing Overseer\", e);\n      }\n\n    }).start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerRoleCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    Map roles = null;\n    String node = message.getStr(\"node\");\n\n    String roleName = message.getStr(\"role\");\n    boolean nodeExists = false;\n    if (nodeExists = zkClient.exists(ZkStateReader.ROLES, true)) {\n      roles = (Map) Utils.fromJSON(zkClient.getData(ZkStateReader.ROLES, null, new Stat(), true));\n    } else {\n      roles = new LinkedHashMap(1);\n    }\n\n    List nodeList = (List) roles.get(roleName);\n    if (nodeList == null) roles.put(roleName, nodeList = new ArrayList());\n    if (ADDROLE == operation) {\n      log.info(\"Overseer role added to {}\", node);\n      if (!nodeList.contains(node)) nodeList.add(node);\n    } else if (REMOVEROLE == operation) {\n      log.info(\"Overseer role removed from {}\", node);\n      nodeList.remove(node);\n    }\n\n    if (nodeExists) {\n      zkClient.setData(ZkStateReader.ROLES, Utils.toJSON(roles), true);\n    } else {\n      zkClient.create(ZkStateReader.ROLES, Utils.toJSON(roles), CreateMode.PERSISTENT, true);\n    }\n    //if there are too many nodes this command may time out. And most likely dedicated\n    // overseers are created when there are too many nodes  . So , do this operation in a separate thread\n    new Thread(() -> {\n      try {\n        overseerPrioritizer.prioritizeOverseerNodes(ocmh.myId);\n      } catch (Exception e) {\n        log.error(\"Error in prioritizing Overseer\", e);\n      }\n\n    }).start();\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerRoleCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerRoleCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    Map roles = null;\n    String node = message.getStr(\"node\");\n\n    String roleName = message.getStr(\"role\");\n    boolean nodeExists = false;\n    if (nodeExists = zkClient.exists(ZkStateReader.ROLES, true)) {\n      roles = (Map) Utils.fromJSON(zkClient.getData(ZkStateReader.ROLES, null, new Stat(), true));\n    } else {\n      roles = new LinkedHashMap(1);\n    }\n\n    List nodeList = (List) roles.get(roleName);\n    if (nodeList == null) roles.put(roleName, nodeList = new ArrayList());\n    if (ADDROLE == operation) {\n      log.info(\"Overseer role added to {}\", node);\n      if (!nodeList.contains(node)) nodeList.add(node);\n    } else if (REMOVEROLE == operation) {\n      log.info(\"Overseer role removed from {}\", node);\n      nodeList.remove(node);\n    }\n\n    if (nodeExists) {\n      zkClient.setData(ZkStateReader.ROLES, Utils.toJSON(roles), true);\n    } else {\n      zkClient.create(ZkStateReader.ROLES, Utils.toJSON(roles), CreateMode.PERSISTENT, true);\n    }\n    //if there are too many nodes this command may time out. And most likely dedicated\n    // overseers are created when there are too many nodes  . So , do this operation in a separate thread\n    new Thread(() -> {\n      try {\n        overseerPrioritizer.prioritizeOverseerNodes(ocmh.myId);\n      } catch (Exception e) {\n        log.error(\"Error in prioritizing Overseer\", e);\n      }\n\n    }).start();\n\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    Map roles = null;\n    String node = message.getStr(\"node\");\n\n    String roleName = message.getStr(\"role\");\n    boolean nodeExists = false;\n    if (nodeExists = zkClient.exists(ZkStateReader.ROLES, true)) {\n      roles = (Map) Utils.fromJSON(zkClient.getData(ZkStateReader.ROLES, null, new Stat(), true));\n    } else {\n      roles = new LinkedHashMap(1);\n    }\n\n    List nodeList = (List) roles.get(roleName);\n    if (nodeList == null) roles.put(roleName, nodeList = new ArrayList());\n    if (ADDROLE == operation) {\n      log.info(\"Overseer role added to {}\", node);\n      if (!nodeList.contains(node)) nodeList.add(node);\n    } else if (REMOVEROLE == operation) {\n      log.info(\"Overseer role removed from {}\", node);\n      nodeList.remove(node);\n    }\n\n    if (nodeExists) {\n      zkClient.setData(ZkStateReader.ROLES, Utils.toJSON(roles), true);\n    } else {\n      zkClient.create(ZkStateReader.ROLES, Utils.toJSON(roles), CreateMode.PERSISTENT, true);\n    }\n    //if there are too many nodes this command may time out. And most likely dedicated\n    // overseers are created when there are too many nodes  . So , do this operation in a separate thread\n    new Thread(() -> {\n      try {\n        overseerPrioritizer.prioritizeOverseerNodes(ocmh.myId);\n      } catch (Exception e) {\n        log.error(\"Error in prioritizing Overseer\", e);\n      }\n\n    }).start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerRoleCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerRoleCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    Map roles = null;\n    String node = message.getStr(\"node\");\n\n    String roleName = message.getStr(\"role\");\n    boolean nodeExists = false;\n    if (nodeExists = zkClient.exists(ZkStateReader.ROLES, true)) {\n      roles = (Map) Utils.fromJSON(zkClient.getData(ZkStateReader.ROLES, null, new Stat(), true));\n    } else {\n      roles = new LinkedHashMap(1);\n    }\n\n    List nodeList = (List) roles.get(roleName);\n    if (nodeList == null) roles.put(roleName, nodeList = new ArrayList());\n    if (ADDROLE == operation) {\n      log.info(\"Overseer role added to {}\", node);\n      if (!nodeList.contains(node)) nodeList.add(node);\n    } else if (REMOVEROLE == operation) {\n      log.info(\"Overseer role removed from {}\", node);\n      nodeList.remove(node);\n    }\n\n    if (nodeExists) {\n      zkClient.setData(ZkStateReader.ROLES, Utils.toJSON(roles), true);\n    } else {\n      zkClient.create(ZkStateReader.ROLES, Utils.toJSON(roles), CreateMode.PERSISTENT, true);\n    }\n    //if there are too many nodes this command may time out. And most likely dedicated\n    // overseers are created when there are too many nodes  . So , do this operation in a separate thread\n    new Thread(() -> {\n      try {\n        overseerPrioritizer.prioritizeOverseerNodes(ocmh.myId);\n      } catch (Exception e) {\n        log.error(\"Error in prioritizing Overseer\", e);\n      }\n\n    }).start();\n\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    Map roles = null;\n    String node = message.getStr(\"node\");\n\n    String roleName = message.getStr(\"role\");\n    boolean nodeExists = false;\n    if (nodeExists = zkClient.exists(ZkStateReader.ROLES, true)) {\n      roles = (Map) Utils.fromJSON(zkClient.getData(ZkStateReader.ROLES, null, new Stat(), true));\n    } else {\n      roles = new LinkedHashMap(1);\n    }\n\n    List nodeList = (List) roles.get(roleName);\n    if (nodeList == null) roles.put(roleName, nodeList = new ArrayList());\n    if (ADDROLE == operation) {\n      log.info(\"Overseer role added to {}\", node);\n      if (!nodeList.contains(node)) nodeList.add(node);\n    } else if (REMOVEROLE == operation) {\n      log.info(\"Overseer role removed from {}\", node);\n      nodeList.remove(node);\n    }\n\n    if (nodeExists) {\n      zkClient.setData(ZkStateReader.ROLES, Utils.toJSON(roles), true);\n    } else {\n      zkClient.create(ZkStateReader.ROLES, Utils.toJSON(roles), CreateMode.PERSISTENT, true);\n    }\n    //if there are too many nodes this command may time out. And most likely dedicated\n    // overseers are created when there are too many nodes  . So , do this operation in a separate thread\n    new Thread(() -> {\n      try {\n        overseerPrioritizer.prioritizeOverseerNodes(ocmh.myId);\n      } catch (Exception e) {\n        log.error(\"Error in prioritizing Overseer\", e);\n      }\n\n    }).start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["403d05f7f8d69b65659157eff1bc1d2717f04c66","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["403d05f7f8d69b65659157eff1bc1d2717f04c66","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}