{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#commit(SegmentInfos).mjava","commits":[{"id":"e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3","date":1297940445,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#commit(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#commit().mjava","sourceNew":"    /**\n     * Commit all segment reader in the pool.\n     * @throws IOException\n     */\n    synchronized void commit(SegmentInfos infos) throws IOException {\n\n      // We invoke deleter.checkpoint below, so we must be\n      // sync'd on IW:\n      assert Thread.holdsLock(IndexWriter.this);\n\n      for (SegmentInfo info : infos) {\n\n        final SegmentReader sr = readerMap.get(info);\n        if (sr != null && sr.hasChanges) {\n          assert infoIsLive(info);\n          sr.doCommit(null);\n          // Must checkpoint w/ deleter, because this\n          // segment reader will have created new _X_N.del\n          // file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Commit all segment reader in the pool.\n     * @throws IOException\n     */\n    synchronized void commit() throws IOException {\n\n      // We invoke deleter.checkpoint below, so we must be\n      // sync'd on IW:\n      assert Thread.holdsLock(IndexWriter.this);\n\n      for (Map.Entry<SegmentInfo,SegmentReader> ent : readerMap.entrySet()) {\n\n        SegmentReader sr = ent.getValue();\n        if (sr.hasChanges) {\n          assert infoIsLive(sr.getSegmentInfo());\n          sr.doCommit(null);\n\n          // Must checkpoint w/ deleter, because this\n          // segment reader will have created new _X_N.del\n          // file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#commit(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#commit().mjava","sourceNew":"    /**\n     * Commit all segment reader in the pool.\n     * @throws IOException\n     */\n    synchronized void commit(SegmentInfos infos) throws IOException {\n\n      // We invoke deleter.checkpoint below, so we must be\n      // sync'd on IW:\n      assert Thread.holdsLock(IndexWriter.this);\n\n      for (SegmentInfo info : infos) {\n\n        final SegmentReader sr = readerMap.get(info);\n        if (sr != null && sr.hasChanges) {\n          assert infoIsLive(info);\n          sr.doCommit(null);\n          // Must checkpoint w/ deleter, because this\n          // segment reader will have created new _X_N.del\n          // file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Commit all segment reader in the pool.\n     * @throws IOException\n     */\n    synchronized void commit() throws IOException {\n\n      // We invoke deleter.checkpoint below, so we must be\n      // sync'd on IW:\n      assert Thread.holdsLock(IndexWriter.this);\n\n      for (Map.Entry<SegmentInfo,SegmentReader> ent : readerMap.entrySet()) {\n\n        SegmentReader sr = ent.getValue();\n        if (sr.hasChanges) {\n          assert infoIsLive(sr.getSegmentInfo());\n          sr.doCommit(null);\n\n          // Must checkpoint w/ deleter, because this\n          // segment reader will have created new _X_N.del\n          // file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#commit(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#commit().mjava","sourceNew":"    /**\n     * Commit all segment reader in the pool.\n     * @throws IOException\n     */\n    synchronized void commit(SegmentInfos infos) throws IOException {\n\n      // We invoke deleter.checkpoint below, so we must be\n      // sync'd on IW:\n      assert Thread.holdsLock(IndexWriter.this);\n\n      for (SegmentInfo info : infos) {\n\n        final SegmentReader sr = readerMap.get(info);\n        if (sr != null && sr.hasChanges) {\n          assert infoIsLive(info);\n          sr.doCommit(null);\n          // Must checkpoint w/ deleter, because this\n          // segment reader will have created new _X_N.del\n          // file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Commit all segment reader in the pool.\n     * @throws IOException\n     */\n    synchronized void commit() throws IOException {\n\n      // We invoke deleter.checkpoint below, so we must be\n      // sync'd on IW:\n      assert Thread.holdsLock(IndexWriter.this);\n\n      for (Map.Entry<SegmentInfo,SegmentReader> ent : readerMap.entrySet()) {\n\n        SegmentReader sr = ent.getValue();\n        if (sr.hasChanges) {\n          assert infoIsLive(sr.getSegmentInfo());\n          sr.doCommit(null);\n\n          // Must checkpoint w/ deleter, because this\n          // segment reader will have created new _X_N.del\n          // file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0061262413ecc163d6eebba1b5c43ab91a0c2dc5","date":1311195279,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#commit(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#commit(SegmentInfos).mjava","sourceNew":"    /**\n     * Commit all segment reader in the pool.\n     * @throws IOException\n     */\n    synchronized void commit(SegmentInfos infos) throws IOException {\n\n      // We invoke deleter.checkpoint below, so we must be\n      // sync'd on IW:\n      assert Thread.holdsLock(IndexWriter.this);\n      \n      for (SegmentInfo info : infos) {\n        final SegmentReader sr = readerMap.get(new SegmentCacheKey(info, IOContext.Context.READ));\n        if (sr != null && sr.hasChanges) {\n          assert infoIsLive(info);\n          sr.doCommit(null);\n          // Must checkpoint w/ deleter, because this\n          // segment reader will have created new _X_N.del\n          // file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Commit all segment reader in the pool.\n     * @throws IOException\n     */\n    synchronized void commit(SegmentInfos infos) throws IOException {\n\n      // We invoke deleter.checkpoint below, so we must be\n      // sync'd on IW:\n      assert Thread.holdsLock(IndexWriter.this);\n\n      for (SegmentInfo info : infos) {\n\n        final SegmentReader sr = readerMap.get(info);\n        if (sr != null && sr.hasChanges) {\n          assert infoIsLive(info);\n          sr.doCommit(null);\n          // Must checkpoint w/ deleter, because this\n          // segment reader will have created new _X_N.del\n          // file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e1f693ce507c40f77e3a92acd16c6b79cdd730e4","date":1323036169,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#commit(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#commit(SegmentInfos).mjava","sourceNew":"    /**\n     * Commit all segment reader in the pool.\n     * @throws IOException\n     */\n    synchronized void commit(SegmentInfos infos) throws IOException {\n\n      // We invoke deleter.checkpoint below, so we must be\n      // sync'd on IW:\n      assert Thread.holdsLock(IndexWriter.this);\n      \n      for (SegmentInfo info : infos) {\n        final SegmentReader sr = readerMap.get(new SegmentCacheKey(info, IOContext.Context.READ));\n        if (sr != null && sr.hasChanges) {\n          assert infoIsLive(info);\n          sr.doCommit();\n          // Must checkpoint w/ deleter, because this\n          // segment reader will have created new _X_N.del\n          // file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Commit all segment reader in the pool.\n     * @throws IOException\n     */\n    synchronized void commit(SegmentInfos infos) throws IOException {\n\n      // We invoke deleter.checkpoint below, so we must be\n      // sync'd on IW:\n      assert Thread.holdsLock(IndexWriter.this);\n      \n      for (SegmentInfo info : infos) {\n        final SegmentReader sr = readerMap.get(new SegmentCacheKey(info, IOContext.Context.READ));\n        if (sr != null && sr.hasChanges) {\n          assert infoIsLive(info);\n          sr.doCommit(null);\n          // Must checkpoint w/ deleter, because this\n          // segment reader will have created new _X_N.del\n          // file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#commit(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#commit(SegmentInfos).mjava","sourceNew":"    /**\n     * Commit all segment reader in the pool.\n     * @throws IOException\n     */\n    synchronized void commit(SegmentInfos infos) throws IOException {\n\n      // We invoke deleter.checkpoint below, so we must be\n      // sync'd on IW:\n      assert Thread.holdsLock(IndexWriter.this);\n      \n      for (SegmentInfo info : infos) {\n        final SegmentReader sr = readerMap.get(new SegmentCacheKey(info, IOContext.Context.READ));\n        if (sr != null && sr.hasChanges) {\n          assert infoIsLive(info);\n          sr.doCommit();\n          // Must checkpoint w/ deleter, because this\n          // segment reader will have created new _X_N.del\n          // file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Commit all segment reader in the pool.\n     * @throws IOException\n     */\n    synchronized void commit(SegmentInfos infos) throws IOException {\n\n      // We invoke deleter.checkpoint below, so we must be\n      // sync'd on IW:\n      assert Thread.holdsLock(IndexWriter.this);\n      \n      for (SegmentInfo info : infos) {\n        final SegmentReader sr = readerMap.get(new SegmentCacheKey(info, IOContext.Context.READ));\n        if (sr != null && sr.hasChanges) {\n          assert infoIsLive(info);\n          sr.doCommit(null);\n          // Must checkpoint w/ deleter, because this\n          // segment reader will have created new _X_N.del\n          // file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#commit(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#commit(SegmentInfos).mjava","sourceNew":"    /**\n     * Commit all segment reader in the pool.\n     * @throws IOException\n     */\n    synchronized void commit(SegmentInfos infos) throws IOException {\n\n      // We invoke deleter.checkpoint below, so we must be\n      // sync'd on IW:\n      assert Thread.holdsLock(IndexWriter.this);\n      \n      for (SegmentInfo info : infos) {\n        final SegmentReader sr = readerMap.get(new SegmentCacheKey(info, IOContext.Context.READ));\n        if (sr != null && sr.hasChanges) {\n          assert infoIsLive(info);\n          sr.doCommit();\n          // Must checkpoint w/ deleter, because this\n          // segment reader will have created new _X_N.del\n          // file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Commit all segment reader in the pool.\n     * @throws IOException\n     */\n    synchronized void commit(SegmentInfos infos) throws IOException {\n\n      // We invoke deleter.checkpoint below, so we must be\n      // sync'd on IW:\n      assert Thread.holdsLock(IndexWriter.this);\n      \n      for (SegmentInfo info : infos) {\n        final SegmentReader sr = readerMap.get(new SegmentCacheKey(info, IOContext.Context.READ));\n        if (sr != null && sr.hasChanges) {\n          assert infoIsLive(info);\n          sr.doCommit(null);\n          // Must checkpoint w/ deleter, because this\n          // segment reader will have created new _X_N.del\n          // file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ce667c6d3400b22523701c549c0d35e26da8b46","date":1324405053,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#commit(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#commit(SegmentInfos).mjava","sourceNew":"    /**\n     * Commit live docs changes for the segment readers for\n     * the provided infos.\n     *\n     * @throws IOException\n     */\n    public synchronized void commit(SegmentInfos infos) throws IOException {\n      for (SegmentInfo info : infos) {\n        final ReadersAndLiveDocs rld = readerMap.get(info);\n        if (rld != null && rld.writeLiveDocs(directory)) {\n          assert infoIsLive(info);\n          // Must checkpoint w/ deleter, because we just\n          // created created new _X_N.del file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Commit all segment reader in the pool.\n     * @throws IOException\n     */\n    synchronized void commit(SegmentInfos infos) throws IOException {\n\n      // We invoke deleter.checkpoint below, so we must be\n      // sync'd on IW:\n      assert Thread.holdsLock(IndexWriter.this);\n      \n      for (SegmentInfo info : infos) {\n        final SegmentReader sr = readerMap.get(new SegmentCacheKey(info, IOContext.Context.READ));\n        if (sr != null && sr.hasChanges) {\n          assert infoIsLive(info);\n          sr.doCommit();\n          // Must checkpoint w/ deleter, because this\n          // segment reader will have created new _X_N.del\n          // file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":["ae695f21c50b03702b5d0fa2543d5af844bb7cd3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#commit(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#commit(SegmentInfos).mjava","sourceNew":"    /**\n     * Commit live docs changes for the segment readers for\n     * the provided infos.\n     *\n     * @throws IOException\n     */\n    public synchronized void commit(SegmentInfos infos) throws IOException {\n      for (SegmentInfo info : infos) {\n        final ReadersAndLiveDocs rld = readerMap.get(info);\n        if (rld != null && rld.writeLiveDocs(directory)) {\n          assert infoIsLive(info);\n          // Must checkpoint w/ deleter, because we just\n          // created created new _X_N.del file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Commit live docs changes for the segment readers for\n     * the provided infos.\n     *\n     * @throws IOException\n     */\n    public synchronized void commit(SegmentInfos infos) throws IOException {\n      for (SegmentInfo info : infos) {\n        final ReadersAndLiveDocs rld = readerMap.get(info);\n        if (rld != null && rld.writeLiveDocs(directory)) {\n          assert infoIsLive(info);\n          // Must checkpoint w/ deleter, because we just\n          // created created new _X_N.del file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0061262413ecc163d6eebba1b5c43ab91a0c2dc5":["e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3"],"e1f693ce507c40f77e3a92acd16c6b79cdd730e4":["0061262413ecc163d6eebba1b5c43ab91a0c2dc5"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["0061262413ecc163d6eebba1b5c43ab91a0c2dc5","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["0061262413ecc163d6eebba1b5c43ab91a0c2dc5","e1f693ce507c40f77e3a92acd16c6b79cdd730e4"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3":["0061262413ecc163d6eebba1b5c43ab91a0c2dc5","f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"0061262413ecc163d6eebba1b5c43ab91a0c2dc5":["e1f693ce507c40f77e3a92acd16c6b79cdd730e4","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"e1f693ce507c40f77e3a92acd16c6b79cdd730e4":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3","f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","9ce667c6d3400b22523701c549c0d35e26da8b46"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}