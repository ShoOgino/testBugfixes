{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#writeIndex(IndexOutput,long[],byte[]).mjava","commits":[{"id":"9fc0d60683b47b5d922124c31f57c8b34734f9e6","date":1480846684,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#writeIndex(IndexOutput,long[],byte[]).mjava","pathOld":"/dev/null","sourceNew":"  /** Subclass can change how it writes the index. */\n  private void writeIndex(IndexOutput out, long[] leafBlockFPs, byte[] splitPackedValues) throws IOException {\n    write(out, NUM_DIMS);\n    writeInt(out, numDims);\n    newline(out);\n\n    write(out, BYTES_PER_DIM);\n    writeInt(out, bytesPerDim);\n    newline(out);\n\n    write(out, MAX_LEAF_POINTS);\n    writeInt(out, maxPointsInLeafNode);\n    newline(out);\n\n    write(out, INDEX_COUNT);\n    writeInt(out, leafBlockFPs.length);\n    newline(out);\n\n    write(out, MIN_VALUE);\n    BytesRef br = new BytesRef(minPackedValue, 0, minPackedValue.length);\n    write(out, br.toString());\n    newline(out);\n\n    write(out, MAX_VALUE);\n    br = new BytesRef(maxPackedValue, 0, maxPackedValue.length);\n    write(out, br.toString());\n    newline(out);\n\n    write(out, POINT_COUNT);\n    writeLong(out, pointCount);\n    newline(out);\n\n    write(out, DOC_COUNT);\n    writeInt(out, docsSeen.cardinality());\n    newline(out);\n\n    for(int i=0;i<leafBlockFPs.length;i++) {\n      write(out, BLOCK_FP);\n      writeLong(out, leafBlockFPs[i]);\n      newline(out);\n    }\n\n    assert (splitPackedValues.length % (1 + bytesPerDim)) == 0;\n    int count = splitPackedValues.length / (1 + bytesPerDim);\n    assert count == leafBlockFPs.length;\n\n    write(out, SPLIT_COUNT);\n    writeInt(out, count);\n    newline(out);\n\n    for(int i=0;i<count;i++) {\n      write(out, SPLIT_DIM);\n      writeInt(out, splitPackedValues[i * (1 + bytesPerDim)] & 0xff);\n      newline(out);\n      write(out, SPLIT_VALUE);\n      br = new BytesRef(splitPackedValues, 1+(i * (1+bytesPerDim)), bytesPerDim);\n      write(out, br.toString());\n      newline(out);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#writeIndex(IndexOutput,long[],byte[]).mjava","pathOld":"/dev/null","sourceNew":"  /** Subclass can change how it writes the index. */\n  private void writeIndex(IndexOutput out, long[] leafBlockFPs, byte[] splitPackedValues) throws IOException {\n    write(out, NUM_DIMS);\n    writeInt(out, numDims);\n    newline(out);\n\n    write(out, BYTES_PER_DIM);\n    writeInt(out, bytesPerDim);\n    newline(out);\n\n    write(out, MAX_LEAF_POINTS);\n    writeInt(out, maxPointsInLeafNode);\n    newline(out);\n\n    write(out, INDEX_COUNT);\n    writeInt(out, leafBlockFPs.length);\n    newline(out);\n\n    write(out, MIN_VALUE);\n    BytesRef br = new BytesRef(minPackedValue, 0, minPackedValue.length);\n    write(out, br.toString());\n    newline(out);\n\n    write(out, MAX_VALUE);\n    br = new BytesRef(maxPackedValue, 0, maxPackedValue.length);\n    write(out, br.toString());\n    newline(out);\n\n    write(out, POINT_COUNT);\n    writeLong(out, pointCount);\n    newline(out);\n\n    write(out, DOC_COUNT);\n    writeInt(out, docsSeen.cardinality());\n    newline(out);\n\n    for(int i=0;i<leafBlockFPs.length;i++) {\n      write(out, BLOCK_FP);\n      writeLong(out, leafBlockFPs[i]);\n      newline(out);\n    }\n\n    assert (splitPackedValues.length % (1 + bytesPerDim)) == 0;\n    int count = splitPackedValues.length / (1 + bytesPerDim);\n    assert count == leafBlockFPs.length;\n\n    write(out, SPLIT_COUNT);\n    writeInt(out, count);\n    newline(out);\n\n    for(int i=0;i<count;i++) {\n      write(out, SPLIT_DIM);\n      writeInt(out, splitPackedValues[i * (1 + bytesPerDim)] & 0xff);\n      newline(out);\n      write(out, SPLIT_VALUE);\n      br = new BytesRef(splitPackedValues, 1+(i * (1+bytesPerDim)), bytesPerDim);\n      write(out, br.toString());\n      newline(out);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#writeIndex(IndexOutput,long[],byte[]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#writeIndex(IndexOutput,long[],byte[]).mjava","sourceNew":"  /** Subclass can change how it writes the index. */\n  private void writeIndex(IndexOutput out, long[] leafBlockFPs, byte[] splitPackedValues) throws IOException {\n    write(out, NUM_DATA_DIMS);\n    writeInt(out, numDataDims);\n    newline(out);\n\n    write(out, NUM_INDEX_DIMS);\n    writeInt(out, numIndexDims);\n    newline(out);\n\n    write(out, BYTES_PER_DIM);\n    writeInt(out, bytesPerDim);\n    newline(out);\n\n    write(out, MAX_LEAF_POINTS);\n    writeInt(out, maxPointsInLeafNode);\n    newline(out);\n\n    write(out, INDEX_COUNT);\n    writeInt(out, leafBlockFPs.length);\n    newline(out);\n\n    write(out, MIN_VALUE);\n    BytesRef br = new BytesRef(minPackedValue, 0, minPackedValue.length);\n    write(out, br.toString());\n    newline(out);\n\n    write(out, MAX_VALUE);\n    br = new BytesRef(maxPackedValue, 0, maxPackedValue.length);\n    write(out, br.toString());\n    newline(out);\n\n    write(out, POINT_COUNT);\n    writeLong(out, pointCount);\n    newline(out);\n\n    write(out, DOC_COUNT);\n    writeInt(out, docsSeen.cardinality());\n    newline(out);\n\n    for(int i=0;i<leafBlockFPs.length;i++) {\n      write(out, BLOCK_FP);\n      writeLong(out, leafBlockFPs[i]);\n      newline(out);\n    }\n\n    assert (splitPackedValues.length % (1 + bytesPerDim)) == 0;\n    int count = splitPackedValues.length / (1 + bytesPerDim);\n    assert count == leafBlockFPs.length;\n\n    write(out, SPLIT_COUNT);\n    writeInt(out, count);\n    newline(out);\n\n    for(int i=0;i<count;i++) {\n      write(out, SPLIT_DIM);\n      writeInt(out, splitPackedValues[i * (1 + bytesPerDim)] & 0xff);\n      newline(out);\n      write(out, SPLIT_VALUE);\n      br = new BytesRef(splitPackedValues, 1+(i * (1+bytesPerDim)), bytesPerDim);\n      write(out, br.toString());\n      newline(out);\n    }\n  }\n\n","sourceOld":"  /** Subclass can change how it writes the index. */\n  private void writeIndex(IndexOutput out, long[] leafBlockFPs, byte[] splitPackedValues) throws IOException {\n    write(out, NUM_DIMS);\n    writeInt(out, numDims);\n    newline(out);\n\n    write(out, BYTES_PER_DIM);\n    writeInt(out, bytesPerDim);\n    newline(out);\n\n    write(out, MAX_LEAF_POINTS);\n    writeInt(out, maxPointsInLeafNode);\n    newline(out);\n\n    write(out, INDEX_COUNT);\n    writeInt(out, leafBlockFPs.length);\n    newline(out);\n\n    write(out, MIN_VALUE);\n    BytesRef br = new BytesRef(minPackedValue, 0, minPackedValue.length);\n    write(out, br.toString());\n    newline(out);\n\n    write(out, MAX_VALUE);\n    br = new BytesRef(maxPackedValue, 0, maxPackedValue.length);\n    write(out, br.toString());\n    newline(out);\n\n    write(out, POINT_COUNT);\n    writeLong(out, pointCount);\n    newline(out);\n\n    write(out, DOC_COUNT);\n    writeInt(out, docsSeen.cardinality());\n    newline(out);\n\n    for(int i=0;i<leafBlockFPs.length;i++) {\n      write(out, BLOCK_FP);\n      writeLong(out, leafBlockFPs[i]);\n      newline(out);\n    }\n\n    assert (splitPackedValues.length % (1 + bytesPerDim)) == 0;\n    int count = splitPackedValues.length / (1 + bytesPerDim);\n    assert count == leafBlockFPs.length;\n\n    write(out, SPLIT_COUNT);\n    writeInt(out, count);\n    newline(out);\n\n    for(int i=0;i<count;i++) {\n      write(out, SPLIT_DIM);\n      writeInt(out, splitPackedValues[i * (1 + bytesPerDim)] & 0xff);\n      newline(out);\n      write(out, SPLIT_VALUE);\n      br = new BytesRef(splitPackedValues, 1+(i * (1+bytesPerDim)), bytesPerDim);\n      write(out, br.toString());\n      newline(out);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#writeIndex(IndexOutput,long[],byte[]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#writeIndex(IndexOutput,long[],byte[]).mjava","sourceNew":"  /** Subclass can change how it writes the index. */\n  private void writeIndex(IndexOutput out, long[] leafBlockFPs, byte[] splitPackedValues) throws IOException {\n    write(out, NUM_DATA_DIMS);\n    writeInt(out, config.numDims);\n    newline(out);\n\n    write(out, NUM_INDEX_DIMS);\n    writeInt(out, config.numIndexDims);\n    newline(out);\n\n    write(out, BYTES_PER_DIM);\n    writeInt(out, config.bytesPerDim);\n    newline(out);\n\n    write(out, MAX_LEAF_POINTS);\n    writeInt(out, config.maxPointsInLeafNode);\n    newline(out);\n\n    write(out, INDEX_COUNT);\n    writeInt(out, leafBlockFPs.length);\n    newline(out);\n\n    write(out, MIN_VALUE);\n    BytesRef br = new BytesRef(minPackedValue, 0, minPackedValue.length);\n    write(out, br.toString());\n    newline(out);\n\n    write(out, MAX_VALUE);\n    br = new BytesRef(maxPackedValue, 0, maxPackedValue.length);\n    write(out, br.toString());\n    newline(out);\n\n    write(out, POINT_COUNT);\n    writeLong(out, pointCount);\n    newline(out);\n\n    write(out, DOC_COUNT);\n    writeInt(out, docsSeen.cardinality());\n    newline(out);\n\n    for(int i=0;i<leafBlockFPs.length;i++) {\n      write(out, BLOCK_FP);\n      writeLong(out, leafBlockFPs[i]);\n      newline(out);\n    }\n\n    assert (splitPackedValues.length % (1 + config.bytesPerDim)) == 0;\n    int count = splitPackedValues.length / (1 + config.bytesPerDim);\n    assert count == leafBlockFPs.length;\n\n    write(out, SPLIT_COUNT);\n    writeInt(out, count);\n    newline(out);\n\n    for(int i=0;i<count;i++) {\n      write(out, SPLIT_DIM);\n      writeInt(out, splitPackedValues[i * (1 + config.bytesPerDim)] & 0xff);\n      newline(out);\n      write(out, SPLIT_VALUE);\n      br = new BytesRef(splitPackedValues, 1+(i * (1+config.bytesPerDim)), config.bytesPerDim);\n      write(out, br.toString());\n      newline(out);\n    }\n  }\n\n","sourceOld":"  /** Subclass can change how it writes the index. */\n  private void writeIndex(IndexOutput out, long[] leafBlockFPs, byte[] splitPackedValues) throws IOException {\n    write(out, NUM_DATA_DIMS);\n    writeInt(out, numDataDims);\n    newline(out);\n\n    write(out, NUM_INDEX_DIMS);\n    writeInt(out, numIndexDims);\n    newline(out);\n\n    write(out, BYTES_PER_DIM);\n    writeInt(out, bytesPerDim);\n    newline(out);\n\n    write(out, MAX_LEAF_POINTS);\n    writeInt(out, maxPointsInLeafNode);\n    newline(out);\n\n    write(out, INDEX_COUNT);\n    writeInt(out, leafBlockFPs.length);\n    newline(out);\n\n    write(out, MIN_VALUE);\n    BytesRef br = new BytesRef(minPackedValue, 0, minPackedValue.length);\n    write(out, br.toString());\n    newline(out);\n\n    write(out, MAX_VALUE);\n    br = new BytesRef(maxPackedValue, 0, maxPackedValue.length);\n    write(out, br.toString());\n    newline(out);\n\n    write(out, POINT_COUNT);\n    writeLong(out, pointCount);\n    newline(out);\n\n    write(out, DOC_COUNT);\n    writeInt(out, docsSeen.cardinality());\n    newline(out);\n\n    for(int i=0;i<leafBlockFPs.length;i++) {\n      write(out, BLOCK_FP);\n      writeLong(out, leafBlockFPs[i]);\n      newline(out);\n    }\n\n    assert (splitPackedValues.length % (1 + bytesPerDim)) == 0;\n    int count = splitPackedValues.length / (1 + bytesPerDim);\n    assert count == leafBlockFPs.length;\n\n    write(out, SPLIT_COUNT);\n    writeInt(out, count);\n    newline(out);\n\n    for(int i=0;i<count;i++) {\n      write(out, SPLIT_DIM);\n      writeInt(out, splitPackedValues[i * (1 + bytesPerDim)] & 0xff);\n      newline(out);\n      write(out, SPLIT_VALUE);\n      br = new BytesRef(splitPackedValues, 1+(i * (1+bytesPerDim)), bytesPerDim);\n      write(out, br.toString());\n      newline(out);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["f6652c943595e92c187ee904c382863013eae28f"],"f6652c943595e92c187ee904c382863013eae28f":["9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"]},"commit2Childs":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["f6652c943595e92c187ee904c382863013eae28f","9856095f7afb5a607bf5e65077615ed91273508c"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f6652c943595e92c187ee904c382863013eae28f":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc0d60683b47b5d922124c31f57c8b34734f9e6","9856095f7afb5a607bf5e65077615ed91273508c"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}