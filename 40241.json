{"path":"src/java/org/apache/solr/core/CoreContainer#load(String,InputStream).mjava","commits":[{"id":"e27d2a5a3c200620d24f5ef16f61fcf9b6f27c72","date":1260860758,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#load(String,InputStream).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Load a config file listing the available solr cores.\n   * \n   * @param dir the home directory of all resources.\n   * @param cfgis the configuration file InputStream\n   * @param configName\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void load(String dir, InputStream cfgis)\n      throws ParserConfigurationException, IOException, SAXException {\n    this.loader = new SolrResourceLoader(dir);\n    solrHome = loader.getInstanceDir();\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n\n      persistent = cfg.getBool( \"solr/@persistent\", false );\n      libDir     = cfg.get(     \"solr/@sharedLib\", null);\n      adminPath  = cfg.get(     \"solr/cores/@adminPath\", null );\n      shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false );\n      if(shareSchema){\n        indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n      }\n      adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n\n      if (libDir != null) {\n        File f = FileUtils.resolvePath(new File(dir), libDir);\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if (adminPath != null) {\n        if (adminHandler == null) {\n          coreAdminHandler = new CoreAdminHandler(this);\n        } else {\n          coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n        }\n      }\n\n      try {\n        containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n      } catch (Throwable e) {\n        SolrConfig.severeErrors.add(e);\n        SolrException.logOnce(log,null,e);\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n      boolean defaultCoreFound = false;\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String name = DOMUtil.getAttr(node, \"name\", null);\n          if(name.equals(DEFAULT_CORE_NAME)){\n            if(defaultCoreFound) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Only one 'DEFAULT_CORE' is allowed \");            \n            defaultCoreFound = true;\n            name=\"\";\n          }\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n          if(solrConfigFilenameOverride != null && name.equals(\"\")) {\n            p.setConfigName(solrConfigFilenameOverride);\n          } else if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"properties\", null);\n          if (opt != null) {\n            p.setPropertiesName(opt);\n          }\n          opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n          if (opt != null) {\n            p.setDataDir(opt);\n          }\n\n          p.setCoreProperties(readProperties(cfg, node));\n\n          SolrCore core = create(p);\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    }\n\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c03efd8cfee511e8fabfc468d0dd7c9303be8be","date":1261551327,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#load(String,InputStream).mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#load(String,InputStream).mjava","sourceNew":"  /**\n   * Load a config file listing the available solr cores.\n   * \n   * @param dir the home directory of all resources.\n   * @param cfgis the configuration file InputStream\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void load(String dir, InputStream cfgis)\n      throws ParserConfigurationException, IOException, SAXException {\n    this.loader = new SolrResourceLoader(dir);\n    solrHome = loader.getInstanceDir();\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n\n      persistent = cfg.getBool( \"solr/@persistent\", false );\n      libDir     = cfg.get(     \"solr/@sharedLib\", null);\n      adminPath  = cfg.get(     \"solr/cores/@adminPath\", null );\n      shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false );\n      if(shareSchema){\n        indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n      }\n      adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n\n      if (libDir != null) {\n        File f = FileUtils.resolvePath(new File(dir), libDir);\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if (adminPath != null) {\n        if (adminHandler == null) {\n          coreAdminHandler = new CoreAdminHandler(this);\n        } else {\n          coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n        }\n      }\n\n      try {\n        containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n      } catch (Throwable e) {\n        SolrConfig.severeErrors.add(e);\n        SolrException.logOnce(log,null,e);\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n      boolean defaultCoreFound = false;\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String name = DOMUtil.getAttr(node, \"name\", null);\n          if(name.equals(DEFAULT_CORE_NAME)){\n            if(defaultCoreFound) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Only one 'DEFAULT_CORE' is allowed \");            \n            defaultCoreFound = true;\n            name=\"\";\n          }\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n          if(solrConfigFilenameOverride != null && name.equals(\"\")) {\n            p.setConfigName(solrConfigFilenameOverride);\n          } else if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"properties\", null);\n          if (opt != null) {\n            p.setPropertiesName(opt);\n          }\n          opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n          if (opt != null) {\n            p.setDataDir(opt);\n          }\n\n          p.setCoreProperties(readProperties(cfg, node));\n\n          SolrCore core = create(p);\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    }\n\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Load a config file listing the available solr cores.\n   * \n   * @param dir the home directory of all resources.\n   * @param cfgis the configuration file InputStream\n   * @param configName\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void load(String dir, InputStream cfgis)\n      throws ParserConfigurationException, IOException, SAXException {\n    this.loader = new SolrResourceLoader(dir);\n    solrHome = loader.getInstanceDir();\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n\n      persistent = cfg.getBool( \"solr/@persistent\", false );\n      libDir     = cfg.get(     \"solr/@sharedLib\", null);\n      adminPath  = cfg.get(     \"solr/cores/@adminPath\", null );\n      shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false );\n      if(shareSchema){\n        indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n      }\n      adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n\n      if (libDir != null) {\n        File f = FileUtils.resolvePath(new File(dir), libDir);\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if (adminPath != null) {\n        if (adminHandler == null) {\n          coreAdminHandler = new CoreAdminHandler(this);\n        } else {\n          coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n        }\n      }\n\n      try {\n        containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n      } catch (Throwable e) {\n        SolrConfig.severeErrors.add(e);\n        SolrException.logOnce(log,null,e);\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n      boolean defaultCoreFound = false;\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String name = DOMUtil.getAttr(node, \"name\", null);\n          if(name.equals(DEFAULT_CORE_NAME)){\n            if(defaultCoreFound) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Only one 'DEFAULT_CORE' is allowed \");            \n            defaultCoreFound = true;\n            name=\"\";\n          }\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n          if(solrConfigFilenameOverride != null && name.equals(\"\")) {\n            p.setConfigName(solrConfigFilenameOverride);\n          } else if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"properties\", null);\n          if (opt != null) {\n            p.setPropertiesName(opt);\n          }\n          opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n          if (opt != null) {\n            p.setDataDir(opt);\n          }\n\n          p.setCoreProperties(readProperties(cfg, node));\n\n          SolrCore core = create(p);\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    }\n\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf1d638450b4ee7114e8fb615606bb45db22fe00","date":1265746471,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#load(String,InputStream).mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#load(String,InputStream).mjava","sourceNew":"  /**\n   * Load a config file listing the available solr cores.\n   * \n   * @param dir the home directory of all resources.\n   * @param cfgis the configuration file InputStream\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void load(String dir, InputStream cfgis)\n      throws ParserConfigurationException, IOException, SAXException {\n    this.loader = new SolrResourceLoader(dir);\n    solrHome = loader.getInstanceDir();\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n      String dcoreName = cfg.get(\"solr/@defaultCoreName\", null);\n      if(dcoreName != null) {\n        defaultCoreName = dcoreName;\n      }\n      persistent = cfg.getBool( \"solr/@persistent\", false );\n      libDir     = cfg.get(     \"solr/@sharedLib\", null);\n      adminPath  = cfg.get(     \"solr/cores/@adminPath\", null );\n      shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false );\n      if(shareSchema){\n        indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n      }\n      adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n\n      if (libDir != null) {\n        File f = FileUtils.resolvePath(new File(dir), libDir);\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if (adminPath != null) {\n        if (adminHandler == null) {\n          coreAdminHandler = new CoreAdminHandler(this);\n        } else {\n          coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n        }\n      }\n\n      try {\n        containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n      } catch (Throwable e) {\n        SolrConfig.severeErrors.add(e);\n        SolrException.logOnce(log,null,e);\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n      boolean defaultCoreFound = false;\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String name = DOMUtil.getAttr(node, \"name\", null);\n          if(name.equals(defaultCoreName)){\n            if(defaultCoreFound) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Only one 'DEFAULT_CORE' is allowed \");            \n            defaultCoreFound = true;\n            name=\"\";\n          }\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n          if(solrConfigFilenameOverride != null && name.equals(\"\")) {\n            p.setConfigName(solrConfigFilenameOverride);\n          } else if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"properties\", null);\n          if (opt != null) {\n            p.setPropertiesName(opt);\n          }\n          opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n          if (opt != null) {\n            p.setDataDir(opt);\n          }\n\n          p.setCoreProperties(readProperties(cfg, node));\n\n          SolrCore core = create(p);\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    }\n\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Load a config file listing the available solr cores.\n   * \n   * @param dir the home directory of all resources.\n   * @param cfgis the configuration file InputStream\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void load(String dir, InputStream cfgis)\n      throws ParserConfigurationException, IOException, SAXException {\n    this.loader = new SolrResourceLoader(dir);\n    solrHome = loader.getInstanceDir();\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n\n      persistent = cfg.getBool( \"solr/@persistent\", false );\n      libDir     = cfg.get(     \"solr/@sharedLib\", null);\n      adminPath  = cfg.get(     \"solr/cores/@adminPath\", null );\n      shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false );\n      if(shareSchema){\n        indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n      }\n      adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n\n      if (libDir != null) {\n        File f = FileUtils.resolvePath(new File(dir), libDir);\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if (adminPath != null) {\n        if (adminHandler == null) {\n          coreAdminHandler = new CoreAdminHandler(this);\n        } else {\n          coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n        }\n      }\n\n      try {\n        containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n      } catch (Throwable e) {\n        SolrConfig.severeErrors.add(e);\n        SolrException.logOnce(log,null,e);\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n      boolean defaultCoreFound = false;\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String name = DOMUtil.getAttr(node, \"name\", null);\n          if(name.equals(DEFAULT_CORE_NAME)){\n            if(defaultCoreFound) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Only one 'DEFAULT_CORE' is allowed \");            \n            defaultCoreFound = true;\n            name=\"\";\n          }\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n          if(solrConfigFilenameOverride != null && name.equals(\"\")) {\n            p.setConfigName(solrConfigFilenameOverride);\n          } else if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"properties\", null);\n          if (opt != null) {\n            p.setPropertiesName(opt);\n          }\n          opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n          if (opt != null) {\n            p.setDataDir(opt);\n          }\n\n          p.setCoreProperties(readProperties(cfg, node));\n\n          SolrCore core = create(p);\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    }\n\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"838364210c75893bdb0cfdc96551689c6d225c92","date":1267802280,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#load(String,InputStream).mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#load(String,InputStream).mjava","sourceNew":"  /**\n   * Load a config file listing the available solr cores.\n   * \n   * @param dir the home directory of all resources.\n   * @param cfgis the configuration file InputStream\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void load(String dir, InputStream cfgis)\n      throws ParserConfigurationException, IOException, SAXException {\n    this.loader = new SolrResourceLoader(dir);\n    solrHome = loader.getInstanceDir();\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n      String dcoreName = cfg.get(\"solr/cores/@defaultCoreName\", null);\n      if(dcoreName != null) {\n        defaultCoreName = dcoreName;\n      }\n      persistent = cfg.getBool( \"solr/@persistent\", false );\n      libDir     = cfg.get(     \"solr/@sharedLib\", null);\n      adminPath  = cfg.get(     \"solr/cores/@adminPath\", null );\n      shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false );\n      if(shareSchema){\n        indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n      }\n      adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n\n      if (libDir != null) {\n        File f = FileUtils.resolvePath(new File(dir), libDir);\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if (adminPath != null) {\n        if (adminHandler == null) {\n          coreAdminHandler = new CoreAdminHandler(this);\n        } else {\n          coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n        }\n      }\n\n      try {\n        containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n      } catch (Throwable e) {\n        SolrConfig.severeErrors.add(e);\n        SolrException.logOnce(log,null,e);\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n      boolean defaultCoreFound = false;\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String name = DOMUtil.getAttr(node, \"name\", null);\n          if(name.equals(defaultCoreName)){\n            if(defaultCoreFound) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Only one 'DEFAULT_CORE' is allowed \");            \n            defaultCoreFound = true;\n            name=\"\";\n          }\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n          if(solrConfigFilenameOverride != null && name.equals(\"\")) {\n            p.setConfigName(solrConfigFilenameOverride);\n          } else if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"properties\", null);\n          if (opt != null) {\n            p.setPropertiesName(opt);\n          }\n          opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n          if (opt != null) {\n            p.setDataDir(opt);\n          }\n\n          p.setCoreProperties(readProperties(cfg, node));\n\n          SolrCore core = create(p);\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    }\n\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Load a config file listing the available solr cores.\n   * \n   * @param dir the home directory of all resources.\n   * @param cfgis the configuration file InputStream\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void load(String dir, InputStream cfgis)\n      throws ParserConfigurationException, IOException, SAXException {\n    this.loader = new SolrResourceLoader(dir);\n    solrHome = loader.getInstanceDir();\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n      String dcoreName = cfg.get(\"solr/@defaultCoreName\", null);\n      if(dcoreName != null) {\n        defaultCoreName = dcoreName;\n      }\n      persistent = cfg.getBool( \"solr/@persistent\", false );\n      libDir     = cfg.get(     \"solr/@sharedLib\", null);\n      adminPath  = cfg.get(     \"solr/cores/@adminPath\", null );\n      shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false );\n      if(shareSchema){\n        indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n      }\n      adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n\n      if (libDir != null) {\n        File f = FileUtils.resolvePath(new File(dir), libDir);\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if (adminPath != null) {\n        if (adminHandler == null) {\n          coreAdminHandler = new CoreAdminHandler(this);\n        } else {\n          coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n        }\n      }\n\n      try {\n        containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n      } catch (Throwable e) {\n        SolrConfig.severeErrors.add(e);\n        SolrException.logOnce(log,null,e);\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n      boolean defaultCoreFound = false;\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String name = DOMUtil.getAttr(node, \"name\", null);\n          if(name.equals(defaultCoreName)){\n            if(defaultCoreFound) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Only one 'DEFAULT_CORE' is allowed \");            \n            defaultCoreFound = true;\n            name=\"\";\n          }\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n          if(solrConfigFilenameOverride != null && name.equals(\"\")) {\n            p.setConfigName(solrConfigFilenameOverride);\n          } else if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"properties\", null);\n          if (opt != null) {\n            p.setPropertiesName(opt);\n          }\n          opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n          if (opt != null) {\n            p.setDataDir(opt);\n          }\n\n          p.setCoreProperties(readProperties(cfg, node));\n\n          SolrCore core = create(p);\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    }\n\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#load(String,InputStream).mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#load(String,InputStream).mjava","sourceNew":"  /**\n   * Load a config file listing the available solr cores.\n   * \n   * @param dir the home directory of all resources.\n   * @param cfgis the configuration file InputStream\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void load(String dir, InputStream cfgis)\n      throws ParserConfigurationException, IOException, SAXException {\n    this.loader = new SolrResourceLoader(dir);\n    solrHome = loader.getInstanceDir();\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n      String dcoreName = cfg.get(\"solr/cores/@defaultCoreName\", null);\n      if(dcoreName != null) {\n        defaultCoreName = dcoreName;\n      }\n      persistent = cfg.getBool( \"solr/@persistent\", false );\n      libDir     = cfg.get(     \"solr/@sharedLib\", null);\n      adminPath  = cfg.get(     \"solr/cores/@adminPath\", null );\n      shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false );\n      if(shareSchema){\n        indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n      }\n      adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n\n      if (libDir != null) {\n        File f = FileUtils.resolvePath(new File(dir), libDir);\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if (adminPath != null) {\n        if (adminHandler == null) {\n          coreAdminHandler = new CoreAdminHandler(this);\n        } else {\n          coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n        }\n      }\n\n      try {\n        containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n      } catch (Throwable e) {\n        SolrConfig.severeErrors.add(e);\n        SolrException.logOnce(log,null,e);\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n      boolean defaultCoreFound = false;\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String name = DOMUtil.getAttr(node, \"name\", null);\n          if(name.equals(defaultCoreName)){\n            if(defaultCoreFound) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Only one 'DEFAULT_CORE' is allowed \");            \n            defaultCoreFound = true;\n            name=\"\";\n          }\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n          if(solrConfigFilenameOverride != null && name.equals(\"\")) {\n            p.setConfigName(solrConfigFilenameOverride);\n          } else if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"properties\", null);\n          if (opt != null) {\n            p.setPropertiesName(opt);\n          }\n          opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n          if (opt != null) {\n            p.setDataDir(opt);\n          }\n\n          p.setCoreProperties(readProperties(cfg, node));\n\n          SolrCore core = create(p);\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    }\n\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Load a config file listing the available solr cores.\n   * \n   * @param dir the home directory of all resources.\n   * @param cfgis the configuration file InputStream\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void load(String dir, InputStream cfgis)\n      throws ParserConfigurationException, IOException, SAXException {\n    this.loader = new SolrResourceLoader(dir);\n    solrHome = loader.getInstanceDir();\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n      String dcoreName = cfg.get(\"solr/cores/@defaultCoreName\", null);\n      if(dcoreName != null) {\n        defaultCoreName = dcoreName;\n      }\n      persistent = cfg.getBool( \"solr/@persistent\", false );\n      libDir     = cfg.get(     \"solr/@sharedLib\", null);\n      adminPath  = cfg.get(     \"solr/cores/@adminPath\", null );\n      shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false );\n      if(shareSchema){\n        indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n      }\n      adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n\n      if (libDir != null) {\n        File f = FileUtils.resolvePath(new File(dir), libDir);\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if (adminPath != null) {\n        if (adminHandler == null) {\n          coreAdminHandler = new CoreAdminHandler(this);\n        } else {\n          coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n        }\n      }\n\n      try {\n        containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n      } catch (Throwable e) {\n        SolrConfig.severeErrors.add(e);\n        SolrException.logOnce(log,null,e);\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n      boolean defaultCoreFound = false;\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String name = DOMUtil.getAttr(node, \"name\", null);\n          if(name.equals(defaultCoreName)){\n            if(defaultCoreFound) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Only one 'DEFAULT_CORE' is allowed \");            \n            defaultCoreFound = true;\n            name=\"\";\n          }\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n          if(solrConfigFilenameOverride != null && name.equals(\"\")) {\n            p.setConfigName(solrConfigFilenameOverride);\n          } else if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"properties\", null);\n          if (opt != null) {\n            p.setPropertiesName(opt);\n          }\n          opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n          if (opt != null) {\n            p.setDataDir(opt);\n          }\n\n          p.setCoreProperties(readProperties(cfg, node));\n\n          SolrCore core = create(p);\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    }\n\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"838364210c75893bdb0cfdc96551689c6d225c92":["bf1d638450b4ee7114e8fb615606bb45db22fe00"],"e27d2a5a3c200620d24f5ef16f61fcf9b6f27c72":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"bf1d638450b4ee7114e8fb615606bb45db22fe00":["5c03efd8cfee511e8fabfc468d0dd7c9303be8be"],"ad94625fb8d088209f46650c8097196fec67f00c":["838364210c75893bdb0cfdc96551689c6d225c92"],"5c03efd8cfee511e8fabfc468d0dd7c9303be8be":["e27d2a5a3c200620d24f5ef16f61fcf9b6f27c72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"838364210c75893bdb0cfdc96551689c6d225c92":["ad94625fb8d088209f46650c8097196fec67f00c"],"e27d2a5a3c200620d24f5ef16f61fcf9b6f27c72":["5c03efd8cfee511e8fabfc468d0dd7c9303be8be"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["e27d2a5a3c200620d24f5ef16f61fcf9b6f27c72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bf1d638450b4ee7114e8fb615606bb45db22fe00":["838364210c75893bdb0cfdc96551689c6d225c92"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"5c03efd8cfee511e8fabfc468d0dd7c9303be8be":["bf1d638450b4ee7114e8fb615606bb45db22fe00"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}