{"path":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testNumericField().mjava","commits":[{"id":"ab0e9f7ce724e6aea1fea746dded19e76d231cf8","date":1304774078,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testNumericField().mjava","pathOld":"/dev/null","sourceNew":"  public void testNumericField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int numDocs = _TestUtil.nextInt(random, 500, 1000) * RANDOM_MULTIPLIER;\n    final Number[] answers = new Number[numDocs];\n    final NumericField.DataType[] typeAnswers = new NumericField.DataType[numDocs];\n    for(int id=0;id<numDocs;id++) {\n      Document doc = new Document();\n      NumericField nf = new NumericField(\"nf\", Field.Store.YES, false);\n      doc.add(nf);\n      final Number answer;\n      final NumericField.DataType typeAnswer;\n      if (random.nextBoolean()) {\n        // float/double\n        if (random.nextBoolean()) {\n          final float f = random.nextFloat();\n          nf.setFloatValue(f);\n          answer = Float.valueOf(f);\n          typeAnswer = NumericField.DataType.FLOAT;\n        } else {\n          final double d = random.nextDouble();\n          nf.setDoubleValue(d);\n          answer = Double.valueOf(d);\n          typeAnswer = NumericField.DataType.DOUBLE;\n        }\n      } else {\n        // int/long\n        if (random.nextBoolean()) {\n          final int i = random.nextInt();\n          nf.setIntValue(i);\n          answer = Integer.valueOf(i);\n          typeAnswer = NumericField.DataType.INT;\n        } else {\n          final long l = random.nextLong();\n          nf.setLongValue(l);\n          answer = Long.valueOf(l);\n          typeAnswer = NumericField.DataType.LONG;\n        }\n      }\n      answers[id] = answer;\n      typeAnswers[id] = typeAnswer;\n      doc.add(new NumericField(\"id\", Integer.MAX_VALUE, Field.Store.NO, true).setIntValue(id));\n      w.addDocument(doc);\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n    \n    assertEquals(numDocs, r.numDocs());\n\n    for(IndexReader sub : r.getSequentialSubReaders()) {\n      final int[] ids = FieldCache.DEFAULT.getInts(sub, \"id\");\n      for(int docID=0;docID<sub.numDocs();docID++) {\n        final Document doc = sub.document(docID);\n        final Fieldable f = doc.getFieldable(\"nf\");\n        assertTrue(\"got f=\" + f, f instanceof NumericField);\n        final NumericField nf = (NumericField) f;\n        assertEquals(answers[ids[docID]], nf.getNumericValue());\n        assertSame(typeAnswers[ids[docID]], nf.getDataType());\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fa0f44f887719e97183771e977cfc4bfb485b766","a78a90fc9701e511308346ea29f4f5e548bb39fe","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testNumericField().mjava","pathOld":"/dev/null","sourceNew":"  public void testNumericField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int numDocs = _TestUtil.nextInt(random, 500, 1000) * RANDOM_MULTIPLIER;\n    final Number[] answers = new Number[numDocs];\n    final NumericField.DataType[] typeAnswers = new NumericField.DataType[numDocs];\n    for(int id=0;id<numDocs;id++) {\n      Document doc = new Document();\n      NumericField nf = new NumericField(\"nf\", Field.Store.YES, false);\n      doc.add(nf);\n      final Number answer;\n      final NumericField.DataType typeAnswer;\n      if (random.nextBoolean()) {\n        // float/double\n        if (random.nextBoolean()) {\n          final float f = random.nextFloat();\n          nf.setFloatValue(f);\n          answer = Float.valueOf(f);\n          typeAnswer = NumericField.DataType.FLOAT;\n        } else {\n          final double d = random.nextDouble();\n          nf.setDoubleValue(d);\n          answer = Double.valueOf(d);\n          typeAnswer = NumericField.DataType.DOUBLE;\n        }\n      } else {\n        // int/long\n        if (random.nextBoolean()) {\n          final int i = random.nextInt();\n          nf.setIntValue(i);\n          answer = Integer.valueOf(i);\n          typeAnswer = NumericField.DataType.INT;\n        } else {\n          final long l = random.nextLong();\n          nf.setLongValue(l);\n          answer = Long.valueOf(l);\n          typeAnswer = NumericField.DataType.LONG;\n        }\n      }\n      answers[id] = answer;\n      typeAnswers[id] = typeAnswer;\n      doc.add(new NumericField(\"id\", Integer.MAX_VALUE, Field.Store.NO, true).setIntValue(id));\n      w.addDocument(doc);\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n    \n    assertEquals(numDocs, r.numDocs());\n\n    for(IndexReader sub : r.getSequentialSubReaders()) {\n      final int[] ids = FieldCache.DEFAULT.getInts(sub, \"id\");\n      for(int docID=0;docID<sub.numDocs();docID++) {\n        final Document doc = sub.document(docID);\n        final Fieldable f = doc.getFieldable(\"nf\");\n        assertTrue(\"got f=\" + f, f instanceof NumericField);\n        final NumericField nf = (NumericField) f;\n        assertEquals(answers[ids[docID]], nf.getNumericValue());\n        assertSame(typeAnswers[ids[docID]], nf.getDataType());\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testNumericField().mjava","pathOld":"/dev/null","sourceNew":"  public void testNumericField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int numDocs = _TestUtil.nextInt(random, 500, 1000) * RANDOM_MULTIPLIER;\n    final Number[] answers = new Number[numDocs];\n    final NumericField.DataType[] typeAnswers = new NumericField.DataType[numDocs];\n    for(int id=0;id<numDocs;id++) {\n      Document doc = new Document();\n      NumericField nf = new NumericField(\"nf\", Field.Store.YES, false);\n      doc.add(nf);\n      final Number answer;\n      final NumericField.DataType typeAnswer;\n      if (random.nextBoolean()) {\n        // float/double\n        if (random.nextBoolean()) {\n          final float f = random.nextFloat();\n          nf.setFloatValue(f);\n          answer = Float.valueOf(f);\n          typeAnswer = NumericField.DataType.FLOAT;\n        } else {\n          final double d = random.nextDouble();\n          nf.setDoubleValue(d);\n          answer = Double.valueOf(d);\n          typeAnswer = NumericField.DataType.DOUBLE;\n        }\n      } else {\n        // int/long\n        if (random.nextBoolean()) {\n          final int i = random.nextInt();\n          nf.setIntValue(i);\n          answer = Integer.valueOf(i);\n          typeAnswer = NumericField.DataType.INT;\n        } else {\n          final long l = random.nextLong();\n          nf.setLongValue(l);\n          answer = Long.valueOf(l);\n          typeAnswer = NumericField.DataType.LONG;\n        }\n      }\n      answers[id] = answer;\n      typeAnswers[id] = typeAnswer;\n      doc.add(new NumericField(\"id\", Integer.MAX_VALUE, Field.Store.NO, true).setIntValue(id));\n      w.addDocument(doc);\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n    \n    assertEquals(numDocs, r.numDocs());\n\n    for(IndexReader sub : r.getSequentialSubReaders()) {\n      final int[] ids = FieldCache.DEFAULT.getInts(sub, \"id\");\n      for(int docID=0;docID<sub.numDocs();docID++) {\n        final Document doc = sub.document(docID);\n        final Fieldable f = doc.getFieldable(\"nf\");\n        assertTrue(\"got f=\" + f, f instanceof NumericField);\n        final NumericField nf = (NumericField) f;\n        assertEquals(answers[ids[docID]], nf.getNumericValue());\n        assertSame(typeAnswers[ids[docID]], nf.getDataType());\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f83af14a2a8131b14d7aee6274c740334e0363d3","date":1307579822,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testNumericField().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testNumericField().mjava","sourceNew":"  public void testNumericField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int numDocs = atLeast(500);\n    final Number[] answers = new Number[numDocs];\n    final NumericField.DataType[] typeAnswers = new NumericField.DataType[numDocs];\n    for(int id=0;id<numDocs;id++) {\n      Document doc = new Document();\n      NumericField nf = new NumericField(\"nf\", Field.Store.YES, false);\n      doc.add(nf);\n      final Number answer;\n      final NumericField.DataType typeAnswer;\n      if (random.nextBoolean()) {\n        // float/double\n        if (random.nextBoolean()) {\n          final float f = random.nextFloat();\n          nf.setFloatValue(f);\n          answer = Float.valueOf(f);\n          typeAnswer = NumericField.DataType.FLOAT;\n        } else {\n          final double d = random.nextDouble();\n          nf.setDoubleValue(d);\n          answer = Double.valueOf(d);\n          typeAnswer = NumericField.DataType.DOUBLE;\n        }\n      } else {\n        // int/long\n        if (random.nextBoolean()) {\n          final int i = random.nextInt();\n          nf.setIntValue(i);\n          answer = Integer.valueOf(i);\n          typeAnswer = NumericField.DataType.INT;\n        } else {\n          final long l = random.nextLong();\n          nf.setLongValue(l);\n          answer = Long.valueOf(l);\n          typeAnswer = NumericField.DataType.LONG;\n        }\n      }\n      answers[id] = answer;\n      typeAnswers[id] = typeAnswer;\n      doc.add(new NumericField(\"id\", Integer.MAX_VALUE, Field.Store.NO, true).setIntValue(id));\n      w.addDocument(doc);\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n    \n    assertEquals(numDocs, r.numDocs());\n\n    for(IndexReader sub : r.getSequentialSubReaders()) {\n      final int[] ids = FieldCache.DEFAULT.getInts(sub, \"id\");\n      for(int docID=0;docID<sub.numDocs();docID++) {\n        final Document doc = sub.document(docID);\n        final Fieldable f = doc.getFieldable(\"nf\");\n        assertTrue(\"got f=\" + f, f instanceof NumericField);\n        final NumericField nf = (NumericField) f;\n        assertEquals(answers[ids[docID]], nf.getNumericValue());\n        assertSame(typeAnswers[ids[docID]], nf.getDataType());\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNumericField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int numDocs = _TestUtil.nextInt(random, 500, 1000) * RANDOM_MULTIPLIER;\n    final Number[] answers = new Number[numDocs];\n    final NumericField.DataType[] typeAnswers = new NumericField.DataType[numDocs];\n    for(int id=0;id<numDocs;id++) {\n      Document doc = new Document();\n      NumericField nf = new NumericField(\"nf\", Field.Store.YES, false);\n      doc.add(nf);\n      final Number answer;\n      final NumericField.DataType typeAnswer;\n      if (random.nextBoolean()) {\n        // float/double\n        if (random.nextBoolean()) {\n          final float f = random.nextFloat();\n          nf.setFloatValue(f);\n          answer = Float.valueOf(f);\n          typeAnswer = NumericField.DataType.FLOAT;\n        } else {\n          final double d = random.nextDouble();\n          nf.setDoubleValue(d);\n          answer = Double.valueOf(d);\n          typeAnswer = NumericField.DataType.DOUBLE;\n        }\n      } else {\n        // int/long\n        if (random.nextBoolean()) {\n          final int i = random.nextInt();\n          nf.setIntValue(i);\n          answer = Integer.valueOf(i);\n          typeAnswer = NumericField.DataType.INT;\n        } else {\n          final long l = random.nextLong();\n          nf.setLongValue(l);\n          answer = Long.valueOf(l);\n          typeAnswer = NumericField.DataType.LONG;\n        }\n      }\n      answers[id] = answer;\n      typeAnswers[id] = typeAnswer;\n      doc.add(new NumericField(\"id\", Integer.MAX_VALUE, Field.Store.NO, true).setIntValue(id));\n      w.addDocument(doc);\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n    \n    assertEquals(numDocs, r.numDocs());\n\n    for(IndexReader sub : r.getSequentialSubReaders()) {\n      final int[] ids = FieldCache.DEFAULT.getInts(sub, \"id\");\n      for(int docID=0;docID<sub.numDocs();docID++) {\n        final Document doc = sub.document(docID);\n        final Fieldable f = doc.getFieldable(\"nf\");\n        assertTrue(\"got f=\" + f, f instanceof NumericField);\n        final NumericField nf = (NumericField) f;\n        assertEquals(answers[ids[docID]], nf.getNumericValue());\n        assertSame(typeAnswers[ids[docID]], nf.getDataType());\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testNumericField().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testNumericField().mjava","sourceNew":"  public void testNumericField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int numDocs = atLeast(500);\n    final Number[] answers = new Number[numDocs];\n    final NumericField.DataType[] typeAnswers = new NumericField.DataType[numDocs];\n    for(int id=0;id<numDocs;id++) {\n      Document doc = new Document();\n      NumericField nf = new NumericField(\"nf\", Field.Store.YES, false);\n      doc.add(nf);\n      final Number answer;\n      final NumericField.DataType typeAnswer;\n      if (random.nextBoolean()) {\n        // float/double\n        if (random.nextBoolean()) {\n          final float f = random.nextFloat();\n          nf.setFloatValue(f);\n          answer = Float.valueOf(f);\n          typeAnswer = NumericField.DataType.FLOAT;\n        } else {\n          final double d = random.nextDouble();\n          nf.setDoubleValue(d);\n          answer = Double.valueOf(d);\n          typeAnswer = NumericField.DataType.DOUBLE;\n        }\n      } else {\n        // int/long\n        if (random.nextBoolean()) {\n          final int i = random.nextInt();\n          nf.setIntValue(i);\n          answer = Integer.valueOf(i);\n          typeAnswer = NumericField.DataType.INT;\n        } else {\n          final long l = random.nextLong();\n          nf.setLongValue(l);\n          answer = Long.valueOf(l);\n          typeAnswer = NumericField.DataType.LONG;\n        }\n      }\n      answers[id] = answer;\n      typeAnswers[id] = typeAnswer;\n      doc.add(new NumericField(\"id\", Integer.MAX_VALUE, Field.Store.NO, true).setIntValue(id));\n      w.addDocument(doc);\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n    \n    assertEquals(numDocs, r.numDocs());\n\n    for(IndexReader sub : r.getSequentialSubReaders()) {\n      final int[] ids = FieldCache.DEFAULT.getInts(sub, \"id\");\n      for(int docID=0;docID<sub.numDocs();docID++) {\n        final Document doc = sub.document(docID);\n        final Fieldable f = doc.getFieldable(\"nf\");\n        assertTrue(\"got f=\" + f, f instanceof NumericField);\n        final NumericField nf = (NumericField) f;\n        assertEquals(answers[ids[docID]], nf.getNumericValue());\n        assertSame(typeAnswers[ids[docID]], nf.getDataType());\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNumericField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int numDocs = _TestUtil.nextInt(random, 500, 1000) * RANDOM_MULTIPLIER;\n    final Number[] answers = new Number[numDocs];\n    final NumericField.DataType[] typeAnswers = new NumericField.DataType[numDocs];\n    for(int id=0;id<numDocs;id++) {\n      Document doc = new Document();\n      NumericField nf = new NumericField(\"nf\", Field.Store.YES, false);\n      doc.add(nf);\n      final Number answer;\n      final NumericField.DataType typeAnswer;\n      if (random.nextBoolean()) {\n        // float/double\n        if (random.nextBoolean()) {\n          final float f = random.nextFloat();\n          nf.setFloatValue(f);\n          answer = Float.valueOf(f);\n          typeAnswer = NumericField.DataType.FLOAT;\n        } else {\n          final double d = random.nextDouble();\n          nf.setDoubleValue(d);\n          answer = Double.valueOf(d);\n          typeAnswer = NumericField.DataType.DOUBLE;\n        }\n      } else {\n        // int/long\n        if (random.nextBoolean()) {\n          final int i = random.nextInt();\n          nf.setIntValue(i);\n          answer = Integer.valueOf(i);\n          typeAnswer = NumericField.DataType.INT;\n        } else {\n          final long l = random.nextLong();\n          nf.setLongValue(l);\n          answer = Long.valueOf(l);\n          typeAnswer = NumericField.DataType.LONG;\n        }\n      }\n      answers[id] = answer;\n      typeAnswers[id] = typeAnswer;\n      doc.add(new NumericField(\"id\", Integer.MAX_VALUE, Field.Store.NO, true).setIntValue(id));\n      w.addDocument(doc);\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n    \n    assertEquals(numDocs, r.numDocs());\n\n    for(IndexReader sub : r.getSequentialSubReaders()) {\n      final int[] ids = FieldCache.DEFAULT.getInts(sub, \"id\");\n      for(int docID=0;docID<sub.numDocs();docID++) {\n        final Document doc = sub.document(docID);\n        final Fieldable f = doc.getFieldable(\"nf\");\n        assertTrue(\"got f=\" + f, f instanceof NumericField);\n        final NumericField nf = (NumericField) f;\n        assertEquals(answers[ids[docID]], nf.getNumericValue());\n        assertSame(typeAnswers[ids[docID]], nf.getDataType());\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testNumericField().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testNumericField().mjava","sourceNew":"  public void testNumericField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int numDocs = atLeast(500);\n    final Number[] answers = new Number[numDocs];\n    final NumericField.DataType[] typeAnswers = new NumericField.DataType[numDocs];\n    for(int id=0;id<numDocs;id++) {\n      Document doc = new Document();\n      NumericField nf = new NumericField(\"nf\", Field.Store.YES, false);\n      doc.add(nf);\n      final Number answer;\n      final NumericField.DataType typeAnswer;\n      if (random.nextBoolean()) {\n        // float/double\n        if (random.nextBoolean()) {\n          final float f = random.nextFloat();\n          nf.setFloatValue(f);\n          answer = Float.valueOf(f);\n          typeAnswer = NumericField.DataType.FLOAT;\n        } else {\n          final double d = random.nextDouble();\n          nf.setDoubleValue(d);\n          answer = Double.valueOf(d);\n          typeAnswer = NumericField.DataType.DOUBLE;\n        }\n      } else {\n        // int/long\n        if (random.nextBoolean()) {\n          final int i = random.nextInt();\n          nf.setIntValue(i);\n          answer = Integer.valueOf(i);\n          typeAnswer = NumericField.DataType.INT;\n        } else {\n          final long l = random.nextLong();\n          nf.setLongValue(l);\n          answer = Long.valueOf(l);\n          typeAnswer = NumericField.DataType.LONG;\n        }\n      }\n      answers[id] = answer;\n      typeAnswers[id] = typeAnswer;\n      doc.add(new NumericField(\"id\", Integer.MAX_VALUE, Field.Store.NO, true).setIntValue(id));\n      w.addDocument(doc);\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n    \n    assertEquals(numDocs, r.numDocs());\n\n    for(IndexReader sub : r.getSequentialSubReaders()) {\n      final int[] ids = FieldCache.DEFAULT.getInts(sub, \"id\");\n      for(int docID=0;docID<sub.numDocs();docID++) {\n        final Document doc = sub.document(docID);\n        final Fieldable f = doc.getFieldable(\"nf\");\n        assertTrue(\"got f=\" + f, f instanceof NumericField);\n        final NumericField nf = (NumericField) f;\n        assertEquals(answers[ids[docID]], nf.getNumericValue());\n        assertSame(typeAnswers[ids[docID]], nf.getDataType());\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNumericField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int numDocs = _TestUtil.nextInt(random, 500, 1000) * RANDOM_MULTIPLIER;\n    final Number[] answers = new Number[numDocs];\n    final NumericField.DataType[] typeAnswers = new NumericField.DataType[numDocs];\n    for(int id=0;id<numDocs;id++) {\n      Document doc = new Document();\n      NumericField nf = new NumericField(\"nf\", Field.Store.YES, false);\n      doc.add(nf);\n      final Number answer;\n      final NumericField.DataType typeAnswer;\n      if (random.nextBoolean()) {\n        // float/double\n        if (random.nextBoolean()) {\n          final float f = random.nextFloat();\n          nf.setFloatValue(f);\n          answer = Float.valueOf(f);\n          typeAnswer = NumericField.DataType.FLOAT;\n        } else {\n          final double d = random.nextDouble();\n          nf.setDoubleValue(d);\n          answer = Double.valueOf(d);\n          typeAnswer = NumericField.DataType.DOUBLE;\n        }\n      } else {\n        // int/long\n        if (random.nextBoolean()) {\n          final int i = random.nextInt();\n          nf.setIntValue(i);\n          answer = Integer.valueOf(i);\n          typeAnswer = NumericField.DataType.INT;\n        } else {\n          final long l = random.nextLong();\n          nf.setLongValue(l);\n          answer = Long.valueOf(l);\n          typeAnswer = NumericField.DataType.LONG;\n        }\n      }\n      answers[id] = answer;\n      typeAnswers[id] = typeAnswer;\n      doc.add(new NumericField(\"id\", Integer.MAX_VALUE, Field.Store.NO, true).setIntValue(id));\n      w.addDocument(doc);\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n    \n    assertEquals(numDocs, r.numDocs());\n\n    for(IndexReader sub : r.getSequentialSubReaders()) {\n      final int[] ids = FieldCache.DEFAULT.getInts(sub, \"id\");\n      for(int docID=0;docID<sub.numDocs();docID++) {\n        final Document doc = sub.document(docID);\n        final Fieldable f = doc.getFieldable(\"nf\");\n        assertTrue(\"got f=\" + f, f instanceof NumericField);\n        final NumericField nf = (NumericField) f;\n        assertEquals(answers[ids[docID]], nf.getNumericValue());\n        assertSame(typeAnswers[ids[docID]], nf.getDataType());\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testNumericField().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testNumericField().mjava","sourceNew":"  public void testNumericField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int numDocs = atLeast(500);\n    final Number[] answers = new Number[numDocs];\n    final NumericField.DataType[] typeAnswers = new NumericField.DataType[numDocs];\n    for(int id=0;id<numDocs;id++) {\n      Document doc = new Document();\n      NumericField nf = new NumericField(\"nf\", NumericField.TYPE_STORED);\n      doc.add(nf);\n      final Number answer;\n      final NumericField.DataType typeAnswer;\n      if (random.nextBoolean()) {\n        // float/double\n        if (random.nextBoolean()) {\n          final float f = random.nextFloat();\n          nf.setFloatValue(f);\n          answer = Float.valueOf(f);\n          typeAnswer = NumericField.DataType.FLOAT;\n        } else {\n          final double d = random.nextDouble();\n          nf.setDoubleValue(d);\n          answer = Double.valueOf(d);\n          typeAnswer = NumericField.DataType.DOUBLE;\n        }\n      } else {\n        // int/long\n        if (random.nextBoolean()) {\n          final int i = random.nextInt();\n          nf.setIntValue(i);\n          answer = Integer.valueOf(i);\n          typeAnswer = NumericField.DataType.INT;\n        } else {\n          final long l = random.nextLong();\n          nf.setLongValue(l);\n          answer = Long.valueOf(l);\n          typeAnswer = NumericField.DataType.LONG;\n        }\n      }\n      answers[id] = answer;\n      typeAnswers[id] = typeAnswer;\n      doc.add(new NumericField(\"id\", Integer.MAX_VALUE).setIntValue(id));\n      w.addDocument(doc);\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n    \n    assertEquals(numDocs, r.numDocs());\n\n    for(IndexReader sub : r.getSequentialSubReaders()) {\n      final int[] ids = FieldCache.DEFAULT.getInts(sub, \"id\");\n      for(int docID=0;docID<sub.numDocs();docID++) {\n        final Document doc = sub.document(docID);\n        final Field f = (Field) doc.getField(\"nf\");\n        assertTrue(\"got f=\" + f, f instanceof NumericField);\n        final NumericField nf = (NumericField) f;\n        assertEquals(answers[ids[docID]], nf.numericValue());\n        assertSame(typeAnswers[ids[docID]], nf.numericDataType());\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNumericField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int numDocs = atLeast(500);\n    final Number[] answers = new Number[numDocs];\n    final NumericField.DataType[] typeAnswers = new NumericField.DataType[numDocs];\n    for(int id=0;id<numDocs;id++) {\n      Document doc = new Document();\n      NumericField nf = new NumericField(\"nf\", Field.Store.YES, false);\n      doc.add(nf);\n      final Number answer;\n      final NumericField.DataType typeAnswer;\n      if (random.nextBoolean()) {\n        // float/double\n        if (random.nextBoolean()) {\n          final float f = random.nextFloat();\n          nf.setFloatValue(f);\n          answer = Float.valueOf(f);\n          typeAnswer = NumericField.DataType.FLOAT;\n        } else {\n          final double d = random.nextDouble();\n          nf.setDoubleValue(d);\n          answer = Double.valueOf(d);\n          typeAnswer = NumericField.DataType.DOUBLE;\n        }\n      } else {\n        // int/long\n        if (random.nextBoolean()) {\n          final int i = random.nextInt();\n          nf.setIntValue(i);\n          answer = Integer.valueOf(i);\n          typeAnswer = NumericField.DataType.INT;\n        } else {\n          final long l = random.nextLong();\n          nf.setLongValue(l);\n          answer = Long.valueOf(l);\n          typeAnswer = NumericField.DataType.LONG;\n        }\n      }\n      answers[id] = answer;\n      typeAnswers[id] = typeAnswer;\n      doc.add(new NumericField(\"id\", Integer.MAX_VALUE, Field.Store.NO, true).setIntValue(id));\n      w.addDocument(doc);\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n    \n    assertEquals(numDocs, r.numDocs());\n\n    for(IndexReader sub : r.getSequentialSubReaders()) {\n      final int[] ids = FieldCache.DEFAULT.getInts(sub, \"id\");\n      for(int docID=0;docID<sub.numDocs();docID++) {\n        final Document doc = sub.document(docID);\n        final Fieldable f = doc.getFieldable(\"nf\");\n        assertTrue(\"got f=\" + f, f instanceof NumericField);\n        final NumericField nf = (NumericField) f;\n        assertEquals(answers[ids[docID]], nf.getNumericValue());\n        assertSame(typeAnswers[ids[docID]], nf.getDataType());\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["fa0f44f887719e97183771e977cfc4bfb485b766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"382fe3a6ca9745891afebda9b9a57cc158305545","date":1320952430,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testNumericField().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testNumericField().mjava","sourceNew":"  public void testNumericField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int numDocs = atLeast(500);\n    final Number[] answers = new Number[numDocs];\n    final NumericField.DataType[] typeAnswers = new NumericField.DataType[numDocs];\n    for(int id=0;id<numDocs;id++) {\n      Document doc = new Document();\n      NumericField nf = new NumericField(\"nf\", NumericField.TYPE_STORED);\n      doc.add(nf);\n      final Number answer;\n      final NumericField.DataType typeAnswer;\n      if (random.nextBoolean()) {\n        // float/double\n        if (random.nextBoolean()) {\n          final float f = random.nextFloat();\n          nf.setFloatValue(f);\n          answer = Float.valueOf(f);\n          typeAnswer = NumericField.DataType.FLOAT;\n        } else {\n          final double d = random.nextDouble();\n          nf.setDoubleValue(d);\n          answer = Double.valueOf(d);\n          typeAnswer = NumericField.DataType.DOUBLE;\n        }\n      } else {\n        // int/long\n        if (random.nextBoolean()) {\n          final int i = random.nextInt();\n          nf.setIntValue(i);\n          answer = Integer.valueOf(i);\n          typeAnswer = NumericField.DataType.INT;\n        } else {\n          final long l = random.nextLong();\n          nf.setLongValue(l);\n          answer = Long.valueOf(l);\n          typeAnswer = NumericField.DataType.LONG;\n        }\n      }\n      answers[id] = answer;\n      typeAnswers[id] = typeAnswer;\n      doc.add(new NumericField(\"id\", Integer.MAX_VALUE).setIntValue(id));\n      w.addDocument(doc);\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n    \n    assertEquals(numDocs, r.numDocs());\n\n    for(IndexReader sub : r.getSequentialSubReaders()) {\n      final int[] ids = FieldCache.DEFAULT.getInts(sub, \"id\", false);\n      for(int docID=0;docID<sub.numDocs();docID++) {\n        final Document doc = sub.document(docID);\n        final Field f = (Field) doc.getField(\"nf\");\n        assertTrue(\"got f=\" + f, f instanceof NumericField);\n        final NumericField nf = (NumericField) f;\n        assertEquals(answers[ids[docID]], nf.numericValue());\n        assertSame(typeAnswers[ids[docID]], nf.numericDataType());\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNumericField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int numDocs = atLeast(500);\n    final Number[] answers = new Number[numDocs];\n    final NumericField.DataType[] typeAnswers = new NumericField.DataType[numDocs];\n    for(int id=0;id<numDocs;id++) {\n      Document doc = new Document();\n      NumericField nf = new NumericField(\"nf\", NumericField.TYPE_STORED);\n      doc.add(nf);\n      final Number answer;\n      final NumericField.DataType typeAnswer;\n      if (random.nextBoolean()) {\n        // float/double\n        if (random.nextBoolean()) {\n          final float f = random.nextFloat();\n          nf.setFloatValue(f);\n          answer = Float.valueOf(f);\n          typeAnswer = NumericField.DataType.FLOAT;\n        } else {\n          final double d = random.nextDouble();\n          nf.setDoubleValue(d);\n          answer = Double.valueOf(d);\n          typeAnswer = NumericField.DataType.DOUBLE;\n        }\n      } else {\n        // int/long\n        if (random.nextBoolean()) {\n          final int i = random.nextInt();\n          nf.setIntValue(i);\n          answer = Integer.valueOf(i);\n          typeAnswer = NumericField.DataType.INT;\n        } else {\n          final long l = random.nextLong();\n          nf.setLongValue(l);\n          answer = Long.valueOf(l);\n          typeAnswer = NumericField.DataType.LONG;\n        }\n      }\n      answers[id] = answer;\n      typeAnswers[id] = typeAnswer;\n      doc.add(new NumericField(\"id\", Integer.MAX_VALUE).setIntValue(id));\n      w.addDocument(doc);\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n    \n    assertEquals(numDocs, r.numDocs());\n\n    for(IndexReader sub : r.getSequentialSubReaders()) {\n      final int[] ids = FieldCache.DEFAULT.getInts(sub, \"id\");\n      for(int docID=0;docID<sub.numDocs();docID++) {\n        final Document doc = sub.document(docID);\n        final Field f = (Field) doc.getField(\"nf\");\n        assertTrue(\"got f=\" + f, f instanceof NumericField);\n        final NumericField nf = (NumericField) f;\n        assertEquals(answers[ids[docID]], nf.numericValue());\n        assertSame(typeAnswers[ids[docID]], nf.numericDataType());\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa0f44f887719e97183771e977cfc4bfb485b766","date":1326668713,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testNumericField().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testNumericField().mjava","sourceNew":"  public void testNumericField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int numDocs = atLeast(500);\n    final Number[] answers = new Number[numDocs];\n    final NumericField.DataType[] typeAnswers = new NumericField.DataType[numDocs];\n    for(int id=0;id<numDocs;id++) {\n      Document doc = new Document();\n      final NumericField nf;\n      final Number answer;\n      final NumericField.DataType typeAnswer;\n      if (random.nextBoolean()) {\n        // float/double\n        if (random.nextBoolean()) {\n          final float f = random.nextFloat();\n          answer = Float.valueOf(f);\n          nf = new NumericField(\"nf\", answer, NumericField.getFieldType(NumericField.DataType.FLOAT, true));\n          typeAnswer = NumericField.DataType.FLOAT;\n        } else {\n          final double d = random.nextDouble();\n          answer = Double.valueOf(d);\n          nf = new NumericField(\"nf\", answer, NumericField.getFieldType(NumericField.DataType.DOUBLE, true));\n          typeAnswer = NumericField.DataType.DOUBLE;\n        }\n      } else {\n        // int/long\n        if (random.nextBoolean()) {\n          final int i = random.nextInt();\n          answer = Integer.valueOf(i);\n          nf = new NumericField(\"nf\", answer, NumericField.getFieldType(NumericField.DataType.INT, true));\n          typeAnswer = NumericField.DataType.INT;\n        } else {\n          final long l = random.nextLong();\n          answer = Long.valueOf(l);\n          nf = new NumericField(\"nf\", answer, NumericField.getFieldType(NumericField.DataType.LONG, true));\n          typeAnswer = NumericField.DataType.LONG;\n        }\n      }\n      doc.add(nf);\n      answers[id] = answer;\n      typeAnswers[id] = typeAnswer;\n      FieldType ft = new FieldType(NumericField.getFieldType(NumericField.DataType.INT, false));\n      ft.setNumericPrecisionStep(Integer.MAX_VALUE);\n      doc.add(new NumericField(\"id\", id, ft));\n      w.addDocument(doc);\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n    \n    assertEquals(numDocs, r.numDocs());\n\n    for(IndexReader sub : r.getSequentialSubReaders()) {\n      final int[] ids = FieldCache.DEFAULT.getInts(sub, \"id\", false);\n      for(int docID=0;docID<sub.numDocs();docID++) {\n        final Document doc = sub.document(docID);\n        final Field f = (Field) doc.getField(\"nf\");\n        assertTrue(\"got f=\" + f, f instanceof StoredField);\n        assertEquals(answers[ids[docID]], f.numericValue());\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNumericField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int numDocs = atLeast(500);\n    final Number[] answers = new Number[numDocs];\n    final NumericField.DataType[] typeAnswers = new NumericField.DataType[numDocs];\n    for(int id=0;id<numDocs;id++) {\n      Document doc = new Document();\n      NumericField nf = new NumericField(\"nf\", NumericField.TYPE_STORED);\n      doc.add(nf);\n      final Number answer;\n      final NumericField.DataType typeAnswer;\n      if (random.nextBoolean()) {\n        // float/double\n        if (random.nextBoolean()) {\n          final float f = random.nextFloat();\n          nf.setFloatValue(f);\n          answer = Float.valueOf(f);\n          typeAnswer = NumericField.DataType.FLOAT;\n        } else {\n          final double d = random.nextDouble();\n          nf.setDoubleValue(d);\n          answer = Double.valueOf(d);\n          typeAnswer = NumericField.DataType.DOUBLE;\n        }\n      } else {\n        // int/long\n        if (random.nextBoolean()) {\n          final int i = random.nextInt();\n          nf.setIntValue(i);\n          answer = Integer.valueOf(i);\n          typeAnswer = NumericField.DataType.INT;\n        } else {\n          final long l = random.nextLong();\n          nf.setLongValue(l);\n          answer = Long.valueOf(l);\n          typeAnswer = NumericField.DataType.LONG;\n        }\n      }\n      answers[id] = answer;\n      typeAnswers[id] = typeAnswer;\n      doc.add(new NumericField(\"id\", Integer.MAX_VALUE).setIntValue(id));\n      w.addDocument(doc);\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n    \n    assertEquals(numDocs, r.numDocs());\n\n    for(IndexReader sub : r.getSequentialSubReaders()) {\n      final int[] ids = FieldCache.DEFAULT.getInts(sub, \"id\", false);\n      for(int docID=0;docID<sub.numDocs();docID++) {\n        final Document doc = sub.document(docID);\n        final Field f = (Field) doc.getField(\"nf\");\n        assertTrue(\"got f=\" + f, f instanceof NumericField);\n        final NumericField nf = (NumericField) f;\n        assertEquals(answers[ids[docID]], nf.numericValue());\n        assertSame(typeAnswers[ids[docID]], nf.numericDataType());\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":["ab0e9f7ce724e6aea1fea746dded19e76d231cf8","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":["a78a90fc9701e511308346ea29f4f5e548bb39fe","d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868186558eb3a854ce7e720a52bb445795d54910","date":1327853682,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testNumericField().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testNumericField().mjava","sourceNew":"  public void testNumericField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int numDocs = atLeast(500);\n    final Number[] answers = new Number[numDocs];\n    final NumericField.DataType[] typeAnswers = new NumericField.DataType[numDocs];\n    for(int id=0;id<numDocs;id++) {\n      Document doc = new Document();\n      final NumericField nf;\n      final Number answer;\n      final NumericField.DataType typeAnswer;\n      if (random.nextBoolean()) {\n        // float/double\n        if (random.nextBoolean()) {\n          final float f = random.nextFloat();\n          answer = Float.valueOf(f);\n          nf = new NumericField(\"nf\", answer, NumericField.getFieldType(NumericField.DataType.FLOAT, true));\n          typeAnswer = NumericField.DataType.FLOAT;\n        } else {\n          final double d = random.nextDouble();\n          answer = Double.valueOf(d);\n          nf = new NumericField(\"nf\", answer, NumericField.getFieldType(NumericField.DataType.DOUBLE, true));\n          typeAnswer = NumericField.DataType.DOUBLE;\n        }\n      } else {\n        // int/long\n        if (random.nextBoolean()) {\n          final int i = random.nextInt();\n          answer = Integer.valueOf(i);\n          nf = new NumericField(\"nf\", answer, NumericField.getFieldType(NumericField.DataType.INT, true));\n          typeAnswer = NumericField.DataType.INT;\n        } else {\n          final long l = random.nextLong();\n          answer = Long.valueOf(l);\n          nf = new NumericField(\"nf\", answer, NumericField.getFieldType(NumericField.DataType.LONG, true));\n          typeAnswer = NumericField.DataType.LONG;\n        }\n      }\n      doc.add(nf);\n      answers[id] = answer;\n      typeAnswers[id] = typeAnswer;\n      FieldType ft = new FieldType(NumericField.getFieldType(NumericField.DataType.INT, false));\n      ft.setNumericPrecisionStep(Integer.MAX_VALUE);\n      doc.add(new NumericField(\"id\", id, ft));\n      w.addDocument(doc);\n    }\n    final DirectoryReader r = w.getReader();\n    w.close();\n    \n    assertEquals(numDocs, r.numDocs());\n\n    for(IndexReader sub : r.getSequentialSubReaders()) {\n      final int[] ids = FieldCache.DEFAULT.getInts((AtomicIndexReader) sub, \"id\", false);\n      for(int docID=0;docID<sub.numDocs();docID++) {\n        final Document doc = sub.document(docID);\n        final Field f = (Field) doc.getField(\"nf\");\n        assertTrue(\"got f=\" + f, f instanceof StoredField);\n        assertEquals(answers[ids[docID]], f.numericValue());\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNumericField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int numDocs = atLeast(500);\n    final Number[] answers = new Number[numDocs];\n    final NumericField.DataType[] typeAnswers = new NumericField.DataType[numDocs];\n    for(int id=0;id<numDocs;id++) {\n      Document doc = new Document();\n      final NumericField nf;\n      final Number answer;\n      final NumericField.DataType typeAnswer;\n      if (random.nextBoolean()) {\n        // float/double\n        if (random.nextBoolean()) {\n          final float f = random.nextFloat();\n          answer = Float.valueOf(f);\n          nf = new NumericField(\"nf\", answer, NumericField.getFieldType(NumericField.DataType.FLOAT, true));\n          typeAnswer = NumericField.DataType.FLOAT;\n        } else {\n          final double d = random.nextDouble();\n          answer = Double.valueOf(d);\n          nf = new NumericField(\"nf\", answer, NumericField.getFieldType(NumericField.DataType.DOUBLE, true));\n          typeAnswer = NumericField.DataType.DOUBLE;\n        }\n      } else {\n        // int/long\n        if (random.nextBoolean()) {\n          final int i = random.nextInt();\n          answer = Integer.valueOf(i);\n          nf = new NumericField(\"nf\", answer, NumericField.getFieldType(NumericField.DataType.INT, true));\n          typeAnswer = NumericField.DataType.INT;\n        } else {\n          final long l = random.nextLong();\n          answer = Long.valueOf(l);\n          nf = new NumericField(\"nf\", answer, NumericField.getFieldType(NumericField.DataType.LONG, true));\n          typeAnswer = NumericField.DataType.LONG;\n        }\n      }\n      doc.add(nf);\n      answers[id] = answer;\n      typeAnswers[id] = typeAnswer;\n      FieldType ft = new FieldType(NumericField.getFieldType(NumericField.DataType.INT, false));\n      ft.setNumericPrecisionStep(Integer.MAX_VALUE);\n      doc.add(new NumericField(\"id\", id, ft));\n      w.addDocument(doc);\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n    \n    assertEquals(numDocs, r.numDocs());\n\n    for(IndexReader sub : r.getSequentialSubReaders()) {\n      final int[] ids = FieldCache.DEFAULT.getInts(sub, \"id\", false);\n      for(int docID=0;docID<sub.numDocs();docID++) {\n        final Document doc = sub.document(docID);\n        final Field f = (Field) doc.getField(\"nf\");\n        assertTrue(\"got f=\" + f, f instanceof StoredField);\n        assertEquals(answers[ids[docID]], f.numericValue());\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"da6d5ac19a80d65b1e864251f155d30960353b7e","date":1327881054,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testNumericField().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testNumericField().mjava","sourceNew":"  public void testNumericField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int numDocs = atLeast(500);\n    final Number[] answers = new Number[numDocs];\n    final NumericField.DataType[] typeAnswers = new NumericField.DataType[numDocs];\n    for(int id=0;id<numDocs;id++) {\n      Document doc = new Document();\n      final NumericField nf;\n      final Number answer;\n      final NumericField.DataType typeAnswer;\n      if (random.nextBoolean()) {\n        // float/double\n        if (random.nextBoolean()) {\n          final float f = random.nextFloat();\n          answer = Float.valueOf(f);\n          nf = new NumericField(\"nf\", answer, NumericField.getFieldType(NumericField.DataType.FLOAT, true));\n          typeAnswer = NumericField.DataType.FLOAT;\n        } else {\n          final double d = random.nextDouble();\n          answer = Double.valueOf(d);\n          nf = new NumericField(\"nf\", answer, NumericField.getFieldType(NumericField.DataType.DOUBLE, true));\n          typeAnswer = NumericField.DataType.DOUBLE;\n        }\n      } else {\n        // int/long\n        if (random.nextBoolean()) {\n          final int i = random.nextInt();\n          answer = Integer.valueOf(i);\n          nf = new NumericField(\"nf\", answer, NumericField.getFieldType(NumericField.DataType.INT, true));\n          typeAnswer = NumericField.DataType.INT;\n        } else {\n          final long l = random.nextLong();\n          answer = Long.valueOf(l);\n          nf = new NumericField(\"nf\", answer, NumericField.getFieldType(NumericField.DataType.LONG, true));\n          typeAnswer = NumericField.DataType.LONG;\n        }\n      }\n      doc.add(nf);\n      answers[id] = answer;\n      typeAnswers[id] = typeAnswer;\n      FieldType ft = new FieldType(NumericField.getFieldType(NumericField.DataType.INT, false));\n      ft.setNumericPrecisionStep(Integer.MAX_VALUE);\n      doc.add(new NumericField(\"id\", id, ft));\n      w.addDocument(doc);\n    }\n    final DirectoryReader r = w.getReader();\n    w.close();\n    \n    assertEquals(numDocs, r.numDocs());\n\n    for(IndexReader sub : r.getSequentialSubReaders()) {\n      final int[] ids = FieldCache.DEFAULT.getInts((AtomicReader) sub, \"id\", false);\n      for(int docID=0;docID<sub.numDocs();docID++) {\n        final Document doc = sub.document(docID);\n        final Field f = (Field) doc.getField(\"nf\");\n        assertTrue(\"got f=\" + f, f instanceof StoredField);\n        assertEquals(answers[ids[docID]], f.numericValue());\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNumericField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int numDocs = atLeast(500);\n    final Number[] answers = new Number[numDocs];\n    final NumericField.DataType[] typeAnswers = new NumericField.DataType[numDocs];\n    for(int id=0;id<numDocs;id++) {\n      Document doc = new Document();\n      final NumericField nf;\n      final Number answer;\n      final NumericField.DataType typeAnswer;\n      if (random.nextBoolean()) {\n        // float/double\n        if (random.nextBoolean()) {\n          final float f = random.nextFloat();\n          answer = Float.valueOf(f);\n          nf = new NumericField(\"nf\", answer, NumericField.getFieldType(NumericField.DataType.FLOAT, true));\n          typeAnswer = NumericField.DataType.FLOAT;\n        } else {\n          final double d = random.nextDouble();\n          answer = Double.valueOf(d);\n          nf = new NumericField(\"nf\", answer, NumericField.getFieldType(NumericField.DataType.DOUBLE, true));\n          typeAnswer = NumericField.DataType.DOUBLE;\n        }\n      } else {\n        // int/long\n        if (random.nextBoolean()) {\n          final int i = random.nextInt();\n          answer = Integer.valueOf(i);\n          nf = new NumericField(\"nf\", answer, NumericField.getFieldType(NumericField.DataType.INT, true));\n          typeAnswer = NumericField.DataType.INT;\n        } else {\n          final long l = random.nextLong();\n          answer = Long.valueOf(l);\n          nf = new NumericField(\"nf\", answer, NumericField.getFieldType(NumericField.DataType.LONG, true));\n          typeAnswer = NumericField.DataType.LONG;\n        }\n      }\n      doc.add(nf);\n      answers[id] = answer;\n      typeAnswers[id] = typeAnswer;\n      FieldType ft = new FieldType(NumericField.getFieldType(NumericField.DataType.INT, false));\n      ft.setNumericPrecisionStep(Integer.MAX_VALUE);\n      doc.add(new NumericField(\"id\", id, ft));\n      w.addDocument(doc);\n    }\n    final DirectoryReader r = w.getReader();\n    w.close();\n    \n    assertEquals(numDocs, r.numDocs());\n\n    for(IndexReader sub : r.getSequentialSubReaders()) {\n      final int[] ids = FieldCache.DEFAULT.getInts((AtomicIndexReader) sub, \"id\", false);\n      for(int docID=0;docID<sub.numDocs();docID++) {\n        final Document doc = sub.document(docID);\n        final Field f = (Field) doc.getField(\"nf\");\n        assertTrue(\"got f=\" + f, f instanceof StoredField);\n        assertEquals(answers[ids[docID]], f.numericValue());\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testNumericField().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testNumericField().mjava","sourceNew":"  public void testNumericField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int numDocs = atLeast(500);\n    final Number[] answers = new Number[numDocs];\n    final NumericField.DataType[] typeAnswers = new NumericField.DataType[numDocs];\n    for(int id=0;id<numDocs;id++) {\n      Document doc = new Document();\n      final NumericField nf;\n      final Number answer;\n      final NumericField.DataType typeAnswer;\n      if (random.nextBoolean()) {\n        // float/double\n        if (random.nextBoolean()) {\n          final float f = random.nextFloat();\n          answer = Float.valueOf(f);\n          nf = new NumericField(\"nf\", answer, NumericField.getFieldType(NumericField.DataType.FLOAT, true));\n          typeAnswer = NumericField.DataType.FLOAT;\n        } else {\n          final double d = random.nextDouble();\n          answer = Double.valueOf(d);\n          nf = new NumericField(\"nf\", answer, NumericField.getFieldType(NumericField.DataType.DOUBLE, true));\n          typeAnswer = NumericField.DataType.DOUBLE;\n        }\n      } else {\n        // int/long\n        if (random.nextBoolean()) {\n          final int i = random.nextInt();\n          answer = Integer.valueOf(i);\n          nf = new NumericField(\"nf\", answer, NumericField.getFieldType(NumericField.DataType.INT, true));\n          typeAnswer = NumericField.DataType.INT;\n        } else {\n          final long l = random.nextLong();\n          answer = Long.valueOf(l);\n          nf = new NumericField(\"nf\", answer, NumericField.getFieldType(NumericField.DataType.LONG, true));\n          typeAnswer = NumericField.DataType.LONG;\n        }\n      }\n      doc.add(nf);\n      answers[id] = answer;\n      typeAnswers[id] = typeAnswer;\n      FieldType ft = new FieldType(NumericField.getFieldType(NumericField.DataType.INT, false));\n      ft.setNumericPrecisionStep(Integer.MAX_VALUE);\n      doc.add(new NumericField(\"id\", id, ft));\n      w.addDocument(doc);\n    }\n    final DirectoryReader r = w.getReader();\n    w.close();\n    \n    assertEquals(numDocs, r.numDocs());\n\n    for(IndexReader sub : r.getSequentialSubReaders()) {\n      final int[] ids = FieldCache.DEFAULT.getInts((AtomicReader) sub, \"id\", false);\n      for(int docID=0;docID<sub.numDocs();docID++) {\n        final Document doc = sub.document(docID);\n        final Field f = (Field) doc.getField(\"nf\");\n        assertTrue(\"got f=\" + f, f instanceof StoredField);\n        assertEquals(answers[ids[docID]], f.numericValue());\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNumericField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int numDocs = atLeast(500);\n    final Number[] answers = new Number[numDocs];\n    final NumericField.DataType[] typeAnswers = new NumericField.DataType[numDocs];\n    for(int id=0;id<numDocs;id++) {\n      Document doc = new Document();\n      final NumericField nf;\n      final Number answer;\n      final NumericField.DataType typeAnswer;\n      if (random.nextBoolean()) {\n        // float/double\n        if (random.nextBoolean()) {\n          final float f = random.nextFloat();\n          answer = Float.valueOf(f);\n          nf = new NumericField(\"nf\", answer, NumericField.getFieldType(NumericField.DataType.FLOAT, true));\n          typeAnswer = NumericField.DataType.FLOAT;\n        } else {\n          final double d = random.nextDouble();\n          answer = Double.valueOf(d);\n          nf = new NumericField(\"nf\", answer, NumericField.getFieldType(NumericField.DataType.DOUBLE, true));\n          typeAnswer = NumericField.DataType.DOUBLE;\n        }\n      } else {\n        // int/long\n        if (random.nextBoolean()) {\n          final int i = random.nextInt();\n          answer = Integer.valueOf(i);\n          nf = new NumericField(\"nf\", answer, NumericField.getFieldType(NumericField.DataType.INT, true));\n          typeAnswer = NumericField.DataType.INT;\n        } else {\n          final long l = random.nextLong();\n          answer = Long.valueOf(l);\n          nf = new NumericField(\"nf\", answer, NumericField.getFieldType(NumericField.DataType.LONG, true));\n          typeAnswer = NumericField.DataType.LONG;\n        }\n      }\n      doc.add(nf);\n      answers[id] = answer;\n      typeAnswers[id] = typeAnswer;\n      FieldType ft = new FieldType(NumericField.getFieldType(NumericField.DataType.INT, false));\n      ft.setNumericPrecisionStep(Integer.MAX_VALUE);\n      doc.add(new NumericField(\"id\", id, ft));\n      w.addDocument(doc);\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n    \n    assertEquals(numDocs, r.numDocs());\n\n    for(IndexReader sub : r.getSequentialSubReaders()) {\n      final int[] ids = FieldCache.DEFAULT.getInts(sub, \"id\", false);\n      for(int docID=0;docID<sub.numDocs();docID++) {\n        final Document doc = sub.document(docID);\n        final Field f = (Field) doc.getField(\"nf\");\n        assertTrue(\"got f=\" + f, f instanceof StoredField);\n        assertEquals(answers[ids[docID]], f.numericValue());\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#testNumericField().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testNumericField().mjava","sourceNew":"  public void testNumericField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int numDocs = atLeast(500);\n    final Number[] answers = new Number[numDocs];\n    final NumericField.DataType[] typeAnswers = new NumericField.DataType[numDocs];\n    for(int id=0;id<numDocs;id++) {\n      Document doc = new Document();\n      final NumericField nf;\n      final Number answer;\n      final NumericField.DataType typeAnswer;\n      if (random.nextBoolean()) {\n        // float/double\n        if (random.nextBoolean()) {\n          final float f = random.nextFloat();\n          answer = Float.valueOf(f);\n          nf = new NumericField(\"nf\", answer, NumericField.getFieldType(NumericField.DataType.FLOAT, true));\n          typeAnswer = NumericField.DataType.FLOAT;\n        } else {\n          final double d = random.nextDouble();\n          answer = Double.valueOf(d);\n          nf = new NumericField(\"nf\", answer, NumericField.getFieldType(NumericField.DataType.DOUBLE, true));\n          typeAnswer = NumericField.DataType.DOUBLE;\n        }\n      } else {\n        // int/long\n        if (random.nextBoolean()) {\n          final int i = random.nextInt();\n          answer = Integer.valueOf(i);\n          nf = new NumericField(\"nf\", answer, NumericField.getFieldType(NumericField.DataType.INT, true));\n          typeAnswer = NumericField.DataType.INT;\n        } else {\n          final long l = random.nextLong();\n          answer = Long.valueOf(l);\n          nf = new NumericField(\"nf\", answer, NumericField.getFieldType(NumericField.DataType.LONG, true));\n          typeAnswer = NumericField.DataType.LONG;\n        }\n      }\n      doc.add(nf);\n      answers[id] = answer;\n      typeAnswers[id] = typeAnswer;\n      FieldType ft = new FieldType(NumericField.getFieldType(NumericField.DataType.INT, false));\n      ft.setNumericPrecisionStep(Integer.MAX_VALUE);\n      doc.add(new NumericField(\"id\", id, ft));\n      w.addDocument(doc);\n    }\n    final DirectoryReader r = w.getReader();\n    w.close();\n    \n    assertEquals(numDocs, r.numDocs());\n\n    for(IndexReader sub : r.getSequentialSubReaders()) {\n      final int[] ids = FieldCache.DEFAULT.getInts((AtomicReader) sub, \"id\", false);\n      for(int docID=0;docID<sub.numDocs();docID++) {\n        final Document doc = sub.document(docID);\n        final Field f = (Field) doc.getField(\"nf\");\n        assertTrue(\"got f=\" + f, f instanceof StoredField);\n        assertEquals(answers[ids[docID]], f.numericValue());\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNumericField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int numDocs = atLeast(500);\n    final Number[] answers = new Number[numDocs];\n    final NumericField.DataType[] typeAnswers = new NumericField.DataType[numDocs];\n    for(int id=0;id<numDocs;id++) {\n      Document doc = new Document();\n      final NumericField nf;\n      final Number answer;\n      final NumericField.DataType typeAnswer;\n      if (random.nextBoolean()) {\n        // float/double\n        if (random.nextBoolean()) {\n          final float f = random.nextFloat();\n          answer = Float.valueOf(f);\n          nf = new NumericField(\"nf\", answer, NumericField.getFieldType(NumericField.DataType.FLOAT, true));\n          typeAnswer = NumericField.DataType.FLOAT;\n        } else {\n          final double d = random.nextDouble();\n          answer = Double.valueOf(d);\n          nf = new NumericField(\"nf\", answer, NumericField.getFieldType(NumericField.DataType.DOUBLE, true));\n          typeAnswer = NumericField.DataType.DOUBLE;\n        }\n      } else {\n        // int/long\n        if (random.nextBoolean()) {\n          final int i = random.nextInt();\n          answer = Integer.valueOf(i);\n          nf = new NumericField(\"nf\", answer, NumericField.getFieldType(NumericField.DataType.INT, true));\n          typeAnswer = NumericField.DataType.INT;\n        } else {\n          final long l = random.nextLong();\n          answer = Long.valueOf(l);\n          nf = new NumericField(\"nf\", answer, NumericField.getFieldType(NumericField.DataType.LONG, true));\n          typeAnswer = NumericField.DataType.LONG;\n        }\n      }\n      doc.add(nf);\n      answers[id] = answer;\n      typeAnswers[id] = typeAnswer;\n      FieldType ft = new FieldType(NumericField.getFieldType(NumericField.DataType.INT, false));\n      ft.setNumericPrecisionStep(Integer.MAX_VALUE);\n      doc.add(new NumericField(\"id\", id, ft));\n      w.addDocument(doc);\n    }\n    final DirectoryReader r = w.getReader();\n    w.close();\n    \n    assertEquals(numDocs, r.numDocs());\n\n    for(IndexReader sub : r.getSequentialSubReaders()) {\n      final int[] ids = FieldCache.DEFAULT.getInts((AtomicReader) sub, \"id\", false);\n      for(int docID=0;docID<sub.numDocs();docID++) {\n        final Document doc = sub.document(docID);\n        final Field f = (Field) doc.getField(\"nf\");\n        assertTrue(\"got f=\" + f, f instanceof StoredField);\n        assertEquals(answers[ids[docID]], f.numericValue());\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a3776dccca01c11e7046323cfad46a3b4a471233","f83af14a2a8131b14d7aee6274c740334e0363d3"],"f83af14a2a8131b14d7aee6274c740334e0363d3":["ab0e9f7ce724e6aea1fea746dded19e76d231cf8"],"ab0e9f7ce724e6aea1fea746dded19e76d231cf8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"382fe3a6ca9745891afebda9b9a57cc158305545":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["fa0f44f887719e97183771e977cfc4bfb485b766","da6d5ac19a80d65b1e864251f155d30960353b7e"],"da6d5ac19a80d65b1e864251f155d30960353b7e":["868186558eb3a854ce7e720a52bb445795d54910"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ab0e9f7ce724e6aea1fea746dded19e76d231cf8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb","f83af14a2a8131b14d7aee6274c740334e0363d3"],"fa0f44f887719e97183771e977cfc4bfb485b766":["382fe3a6ca9745891afebda9b9a57cc158305545"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ab0e9f7ce724e6aea1fea746dded19e76d231cf8"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f83af14a2a8131b14d7aee6274c740334e0363d3"],"868186558eb3a854ce7e720a52bb445795d54910":["fa0f44f887719e97183771e977cfc4bfb485b766"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"f83af14a2a8131b14d7aee6274c740334e0363d3":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"ab0e9f7ce724e6aea1fea746dded19e76d231cf8":["f83af14a2a8131b14d7aee6274c740334e0363d3","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"382fe3a6ca9745891afebda9b9a57cc158305545":["fa0f44f887719e97183771e977cfc4bfb485b766"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"da6d5ac19a80d65b1e864251f155d30960353b7e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ab0e9f7ce724e6aea1fea746dded19e76d231cf8","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"fa0f44f887719e97183771e977cfc4bfb485b766":["5cab9a86bd67202d20b6adc463008c8e982b070a","868186558eb3a854ce7e720a52bb445795d54910"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["382fe3a6ca9745891afebda9b9a57cc158305545"],"868186558eb3a854ce7e720a52bb445795d54910":["da6d5ac19a80d65b1e864251f155d30960353b7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}