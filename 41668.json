{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70NormsProducer#readFields(IndexInput,FieldInfos).mjava","commits":[{"id":"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","date":1475755647,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70NormsProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"/dev/null","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    for (int fieldNumber = meta.readInt(); fieldNumber != -1; fieldNumber = meta.readInt()) {\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      if (info == null) {\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber, meta);\n      } else if (!info.hasNorms()) {\n        throw new CorruptIndexException(\"Invalid field: \" + info.name, meta);\n      }\n      NormsEntry entry = new NormsEntry();\n      entry.docsWithFieldOffset = meta.readLong();\n      entry.numDocsWithField = meta.readInt();\n      entry.bytesPerNorm = meta.readByte();\n      switch (entry.bytesPerNorm) {\n        case 0: case 1: case 2: case 4: case 8:\n          break;\n        default:\n          throw new CorruptIndexException(\"Invalid bytesPerValue: \" + entry.bytesPerNorm + \", field: \" + info.name, meta);\n      }\n      entry.normsOffset = meta.readLong();\n      norms.put(info.number, entry);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"feec55b6e9aaab41be57a5001b31fa14c3925ae4","date":1476170434,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70NormsProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70NormsProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    for (int fieldNumber = meta.readInt(); fieldNumber != -1; fieldNumber = meta.readInt()) {\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      if (info == null) {\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber, meta);\n      } else if (!info.hasNorms()) {\n        throw new CorruptIndexException(\"Invalid field: \" + info.name, meta);\n      }\n      NormsEntry entry = new NormsEntry();\n      entry.docsWithFieldOffset = meta.readLong();\n      entry.docsWithFieldLength = meta.readLong();\n      entry.numDocsWithField = meta.readInt();\n      entry.bytesPerNorm = meta.readByte();\n      switch (entry.bytesPerNorm) {\n        case 0: case 1: case 2: case 4: case 8:\n          break;\n        default:\n          throw new CorruptIndexException(\"Invalid bytesPerValue: \" + entry.bytesPerNorm + \", field: \" + info.name, meta);\n      }\n      entry.normsOffset = meta.readLong();\n      norms.put(info.number, entry);\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    for (int fieldNumber = meta.readInt(); fieldNumber != -1; fieldNumber = meta.readInt()) {\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      if (info == null) {\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber, meta);\n      } else if (!info.hasNorms()) {\n        throw new CorruptIndexException(\"Invalid field: \" + info.name, meta);\n      }\n      NormsEntry entry = new NormsEntry();\n      entry.docsWithFieldOffset = meta.readLong();\n      entry.numDocsWithField = meta.readInt();\n      entry.bytesPerNorm = meta.readByte();\n      switch (entry.bytesPerNorm) {\n        case 0: case 1: case 2: case 4: case 8:\n          break;\n        default:\n          throw new CorruptIndexException(\"Invalid bytesPerValue: \" + entry.bytesPerNorm + \", field: \" + info.name, meta);\n      }\n      entry.normsOffset = meta.readLong();\n      norms.put(info.number, entry);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70NormsProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"/dev/null","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    for (int fieldNumber = meta.readInt(); fieldNumber != -1; fieldNumber = meta.readInt()) {\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      if (info == null) {\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber, meta);\n      } else if (!info.hasNorms()) {\n        throw new CorruptIndexException(\"Invalid field: \" + info.name, meta);\n      }\n      NormsEntry entry = new NormsEntry();\n      entry.docsWithFieldOffset = meta.readLong();\n      entry.docsWithFieldLength = meta.readLong();\n      entry.numDocsWithField = meta.readInt();\n      entry.bytesPerNorm = meta.readByte();\n      switch (entry.bytesPerNorm) {\n        case 0: case 1: case 2: case 4: case 8:\n          break;\n        default:\n          throw new CorruptIndexException(\"Invalid bytesPerValue: \" + entry.bytesPerNorm + \", field: \" + info.name, meta);\n      }\n      entry.normsOffset = meta.readLong();\n      norms.put(info.number, entry);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":5,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70NormsProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70NormsProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    for (int fieldNumber = meta.readInt(); fieldNumber != -1; fieldNumber = meta.readInt()) {\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      if (info == null) {\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber, meta);\n      } else if (!info.hasNorms()) {\n        throw new CorruptIndexException(\"Invalid field: \" + info.name, meta);\n      }\n      NormsEntry entry = new NormsEntry();\n      entry.docsWithFieldOffset = meta.readLong();\n      entry.docsWithFieldLength = meta.readLong();\n      entry.numDocsWithField = meta.readInt();\n      entry.bytesPerNorm = meta.readByte();\n      switch (entry.bytesPerNorm) {\n        case 0: case 1: case 2: case 4: case 8:\n          break;\n        default:\n          throw new CorruptIndexException(\"Invalid bytesPerValue: \" + entry.bytesPerNorm + \", field: \" + info.name, meta);\n      }\n      entry.normsOffset = meta.readLong();\n      norms.put(info.number, entry);\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    for (int fieldNumber = meta.readInt(); fieldNumber != -1; fieldNumber = meta.readInt()) {\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      if (info == null) {\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber, meta);\n      } else if (!info.hasNorms()) {\n        throw new CorruptIndexException(\"Invalid field: \" + info.name, meta);\n      }\n      NormsEntry entry = new NormsEntry();\n      entry.docsWithFieldOffset = meta.readLong();\n      entry.docsWithFieldLength = meta.readLong();\n      entry.numDocsWithField = meta.readInt();\n      entry.bytesPerNorm = meta.readByte();\n      switch (entry.bytesPerNorm) {\n        case 0: case 1: case 2: case 4: case 8:\n          break;\n        default:\n          throw new CorruptIndexException(\"Invalid bytesPerValue: \" + entry.bytesPerNorm + \", field: \" + info.name, meta);\n      }\n      entry.normsOffset = meta.readLong();\n      norms.put(info.number, entry);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":5,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70NormsProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70NormsProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    for (int fieldNumber = meta.readInt(); fieldNumber != -1; fieldNumber = meta.readInt()) {\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      if (info == null) {\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber, meta);\n      } else if (!info.hasNorms()) {\n        throw new CorruptIndexException(\"Invalid field: \" + info.name, meta);\n      }\n      NormsEntry entry = new NormsEntry();\n      entry.docsWithFieldOffset = meta.readLong();\n      entry.docsWithFieldLength = meta.readLong();\n      entry.numDocsWithField = meta.readInt();\n      entry.bytesPerNorm = meta.readByte();\n      switch (entry.bytesPerNorm) {\n        case 0: case 1: case 2: case 4: case 8:\n          break;\n        default:\n          throw new CorruptIndexException(\"Invalid bytesPerValue: \" + entry.bytesPerNorm + \", field: \" + info.name, meta);\n      }\n      entry.normsOffset = meta.readLong();\n      norms.put(info.number, entry);\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    for (int fieldNumber = meta.readInt(); fieldNumber != -1; fieldNumber = meta.readInt()) {\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      if (info == null) {\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber, meta);\n      } else if (!info.hasNorms()) {\n        throw new CorruptIndexException(\"Invalid field: \" + info.name, meta);\n      }\n      NormsEntry entry = new NormsEntry();\n      entry.docsWithFieldOffset = meta.readLong();\n      entry.docsWithFieldLength = meta.readLong();\n      entry.numDocsWithField = meta.readInt();\n      entry.bytesPerNorm = meta.readByte();\n      switch (entry.bytesPerNorm) {\n        case 0: case 1: case 2: case 4: case 8:\n          break;\n        default:\n          throw new CorruptIndexException(\"Invalid bytesPerValue: \" + entry.bytesPerNorm + \", field: \" + info.name, meta);\n      }\n      entry.normsOffset = meta.readLong();\n      norms.put(info.number, entry);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03e17b020972a0d6e8d6823f545571a66646a167":["feec55b6e9aaab41be57a5001b31fa14c3925ae4"],"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["feec55b6e9aaab41be57a5001b31fa14c3925ae4","03e17b020972a0d6e8d6823f545571a66646a167"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"feec55b6e9aaab41be57a5001b31fa14c3925ae4":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","feec55b6e9aaab41be57a5001b31fa14c3925ae4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["03e17b020972a0d6e8d6823f545571a66646a167"]},"commit2Childs":{"03e17b020972a0d6e8d6823f545571a66646a167":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["feec55b6e9aaab41be57a5001b31fa14c3925ae4"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"feec55b6e9aaab41be57a5001b31fa14c3925ae4":["03e17b020972a0d6e8d6823f545571a66646a167","c89f1ef80a9432f4eabaeda9a1e135cd72e60836","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}