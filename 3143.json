{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#storeType().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#storeType().mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#storeType().mjava","sourceNew":"    private void storeType() {\n      if (field != null) {\n        type = field.getType();\n      } else {\n        Class[] params = setter.getParameterTypes();\n        if (params.length != 1)\n          throw new RuntimeException(\"Invalid setter method. Must have one and only one parameter\");\n        type = params[0];\n      }\n      if(type == Collection.class || type == List.class || type == ArrayList.class) {\n        type = Object.class;\n        isList = true;\n        /*ParameterizedType parameterizedType = null;\n        if(field !=null){\n          if( field.getGenericType() instanceof ParameterizedType){\n            parameterizedType = (ParameterizedType) field.getGenericType();\n            Type[] types = parameterizedType.getActualTypeArguments();\n            if (types != null && types.length > 0) type = (Class) types[0];\n          }\n        }*/\n      } else if(type == byte[].class){\n        //no op\n      }else if (type.isArray()) {\n        isArray = true;\n        type = type.getComponentType();\n      }\n      //corresponding to the support for dynamicFields\n      else if (type == Map.class || type == HashMap.class) {\n        isContainedInMap = true;\n        //assigned a default type\n        type = Object.class;\n        if(field != null){\n          if(field.getGenericType() instanceof ParameterizedType){\n            //check what are the generic values\n            ParameterizedType parameterizedType = (ParameterizedType) field.getGenericType();\n            Type[] types = parameterizedType.getActualTypeArguments();\n            if(types != null && types.length == 2 && types[0] == String.class){\n              //the key should always be String\n              //Raw and primitive types\n              if(types[1] instanceof Class){\n                //the value could be multivalued then it is a List ,Collection,ArrayList\n                if(types[1]== Collection.class || types[1] == List.class || types[1] == ArrayList.class){\n                  type = Object.class;\n                  isList = true;\n                }else{\n                  //else assume it is a primitive and put in the source type itself\n                  type = (Class) types[1];\n                }\n              }\n              //Of all the Parameterized types, only List is supported\n              else if(types[1] instanceof ParameterizedType){\n                Type rawType = ((ParameterizedType)types[1]).getRawType();\n                if(rawType== Collection.class || rawType == List.class || rawType == ArrayList.class){\n                  type = Object.class;\n                  isList = true;\n                }\n              }\n              //Array types\n              else if(types[1] instanceof GenericArrayType){\n                type = (Class) ((GenericArrayType) types[1]).getGenericComponentType();\n                isArray = true;\n              }\n              //Throw an Exception if types are not known\n              else{\n                throw new RuntimeException(\"Allowed type for values of mapping a dynamicField are : \" +\n                    \"Object, Object[] and List\");\n              }\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    private void storeType() {\n      if (field != null) {\n        type = field.getType();\n      } else {\n        Class[] params = setter.getParameterTypes();\n        if (params.length != 1)\n          throw new RuntimeException(\"Invalid setter method. Must have one and only one parameter\");\n        type = params[0];\n      }\n      if(type == Collection.class || type == List.class || type == ArrayList.class) {\n        type = Object.class;\n        isList = true;\n        /*ParameterizedType parameterizedType = null;\n        if(field !=null){\n          if( field.getGenericType() instanceof ParameterizedType){\n            parameterizedType = (ParameterizedType) field.getGenericType();\n            Type[] types = parameterizedType.getActualTypeArguments();\n            if (types != null && types.length > 0) type = (Class) types[0];\n          }\n        }*/\n      } else if(type == byte[].class){\n        //no op\n      }else if (type.isArray()) {\n        isArray = true;\n        type = type.getComponentType();\n      }\n      //corresponding to the support for dynamicFields\n      else if (type == Map.class || type == HashMap.class) {\n        isContainedInMap = true;\n        //assigned a default type\n        type = Object.class;\n        if(field != null){\n          if(field.getGenericType() instanceof ParameterizedType){\n            //check what are the generic values\n            ParameterizedType parameterizedType = (ParameterizedType) field.getGenericType();\n            Type[] types = parameterizedType.getActualTypeArguments();\n            if(types != null && types.length == 2 && types[0] == String.class){\n              //the key should always be String\n              //Raw and primitive types\n              if(types[1] instanceof Class){\n                //the value could be multivalued then it is a List ,Collection,ArrayList\n                if(types[1]== Collection.class || types[1] == List.class || types[1] == ArrayList.class){\n                  type = Object.class;\n                  isList = true;\n                }else{\n                  //else assume it is a primitive and put in the source type itself\n                  type = (Class) types[1];\n                }\n              }\n              //Of all the Parameterized types, only List is supported\n              else if(types[1] instanceof ParameterizedType){\n                Type rawType = ((ParameterizedType)types[1]).getRawType();\n                if(rawType== Collection.class || rawType == List.class || rawType == ArrayList.class){\n                  type = Object.class;\n                  isList = true;\n                }\n              }\n              //Array types\n              else if(types[1] instanceof GenericArrayType){\n                type = (Class) ((GenericArrayType) types[1]).getGenericComponentType();\n                isArray = true;\n              }\n              //Throw an Exception if types are not known\n              else{\n                throw new RuntimeException(\"Allowed type for values of mapping a dynamicField are : \" +\n                    \"Object, Object[] and List\");\n              }\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#storeType().mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#storeType().mjava","sourceNew":"    private void storeType() {\n      if (field != null) {\n        type = field.getType();\n      } else {\n        Class[] params = setter.getParameterTypes();\n        if (params.length != 1)\n          throw new RuntimeException(\"Invalid setter method. Must have one and only one parameter\");\n        type = params[0];\n      }\n      if(type == Collection.class || type == List.class || type == ArrayList.class) {\n        type = Object.class;\n        isList = true;\n        /*ParameterizedType parameterizedType = null;\n        if(field !=null){\n          if( field.getGenericType() instanceof ParameterizedType){\n            parameterizedType = (ParameterizedType) field.getGenericType();\n            Type[] types = parameterizedType.getActualTypeArguments();\n            if (types != null && types.length > 0) type = (Class) types[0];\n          }\n        }*/\n      } else if(type == byte[].class){\n        //no op\n      }else if (type.isArray()) {\n        isArray = true;\n        type = type.getComponentType();\n      }\n      //corresponding to the support for dynamicFields\n      else if (type == Map.class || type == HashMap.class) {\n        isContainedInMap = true;\n        //assigned a default type\n        type = Object.class;\n        if(field != null){\n          if(field.getGenericType() instanceof ParameterizedType){\n            //check what are the generic values\n            ParameterizedType parameterizedType = (ParameterizedType) field.getGenericType();\n            Type[] types = parameterizedType.getActualTypeArguments();\n            if(types != null && types.length == 2 && types[0] == String.class){\n              //the key should always be String\n              //Raw and primitive types\n              if(types[1] instanceof Class){\n                //the value could be multivalued then it is a List ,Collection,ArrayList\n                if(types[1]== Collection.class || types[1] == List.class || types[1] == ArrayList.class){\n                  type = Object.class;\n                  isList = true;\n                }else{\n                  //else assume it is a primitive and put in the source type itself\n                  type = (Class) types[1];\n                }\n              }\n              //Of all the Parameterized types, only List is supported\n              else if(types[1] instanceof ParameterizedType){\n                Type rawType = ((ParameterizedType)types[1]).getRawType();\n                if(rawType== Collection.class || rawType == List.class || rawType == ArrayList.class){\n                  type = Object.class;\n                  isList = true;\n                }\n              }\n              //Array types\n              else if(types[1] instanceof GenericArrayType){\n                type = (Class) ((GenericArrayType) types[1]).getGenericComponentType();\n                isArray = true;\n              }\n              //Throw an Exception if types are not known\n              else{\n                throw new RuntimeException(\"Allowed type for values of mapping a dynamicField are : \" +\n                    \"Object, Object[] and List\");\n              }\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    private void storeType() {\n      if (field != null) {\n        type = field.getType();\n      } else {\n        Class[] params = setter.getParameterTypes();\n        if (params.length != 1)\n          throw new RuntimeException(\"Invalid setter method. Must have one and only one parameter\");\n        type = params[0];\n      }\n      if(type == Collection.class || type == List.class || type == ArrayList.class) {\n        type = Object.class;\n        isList = true;\n        /*ParameterizedType parameterizedType = null;\n        if(field !=null){\n          if( field.getGenericType() instanceof ParameterizedType){\n            parameterizedType = (ParameterizedType) field.getGenericType();\n            Type[] types = parameterizedType.getActualTypeArguments();\n            if (types != null && types.length > 0) type = (Class) types[0];\n          }\n        }*/\n      } else if(type == byte[].class){\n        //no op\n      }else if (type.isArray()) {\n        isArray = true;\n        type = type.getComponentType();\n      }\n      //corresponding to the support for dynamicFields\n      else if (type == Map.class || type == HashMap.class) {\n        isContainedInMap = true;\n        //assigned a default type\n        type = Object.class;\n        if(field != null){\n          if(field.getGenericType() instanceof ParameterizedType){\n            //check what are the generic values\n            ParameterizedType parameterizedType = (ParameterizedType) field.getGenericType();\n            Type[] types = parameterizedType.getActualTypeArguments();\n            if(types != null && types.length == 2 && types[0] == String.class){\n              //the key should always be String\n              //Raw and primitive types\n              if(types[1] instanceof Class){\n                //the value could be multivalued then it is a List ,Collection,ArrayList\n                if(types[1]== Collection.class || types[1] == List.class || types[1] == ArrayList.class){\n                  type = Object.class;\n                  isList = true;\n                }else{\n                  //else assume it is a primitive and put in the source type itself\n                  type = (Class) types[1];\n                }\n              }\n              //Of all the Parameterized types, only List is supported\n              else if(types[1] instanceof ParameterizedType){\n                Type rawType = ((ParameterizedType)types[1]).getRawType();\n                if(rawType== Collection.class || rawType == List.class || rawType == ArrayList.class){\n                  type = Object.class;\n                  isList = true;\n                }\n              }\n              //Array types\n              else if(types[1] instanceof GenericArrayType){\n                type = (Class) ((GenericArrayType) types[1]).getGenericComponentType();\n                isArray = true;\n              }\n              //Throw an Exception if types are not known\n              else{\n                throw new RuntimeException(\"Allowed type for values of mapping a dynamicField are : \" +\n                    \"Object, Object[] and List\");\n              }\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#storeType().mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#storeType().mjava","sourceNew":"    private void storeType() {\n      if (field != null) {\n        type = field.getType();\n      } else {\n        Class[] params = setter.getParameterTypes();\n        if (params.length != 1)\n          throw new RuntimeException(\"Invalid setter method. Must have one and only one parameter\");\n        type = params[0];\n      }\n      if(type == Collection.class || type == List.class || type == ArrayList.class) {\n        type = Object.class;\n        isList = true;\n        /*ParameterizedType parameterizedType = null;\n        if(field !=null){\n          if( field.getGenericType() instanceof ParameterizedType){\n            parameterizedType = (ParameterizedType) field.getGenericType();\n            Type[] types = parameterizedType.getActualTypeArguments();\n            if (types != null && types.length > 0) type = (Class) types[0];\n          }\n        }*/\n      } else if(type == byte[].class){\n        //no op\n      }else if (type.isArray()) {\n        isArray = true;\n        type = type.getComponentType();\n      }\n      //corresponding to the support for dynamicFields\n      else if (type == Map.class || type == HashMap.class) {\n        isContainedInMap = true;\n        //assigned a default type\n        type = Object.class;\n        if(field != null){\n          if(field.getGenericType() instanceof ParameterizedType){\n            //check what are the generic values\n            ParameterizedType parameterizedType = (ParameterizedType) field.getGenericType();\n            Type[] types = parameterizedType.getActualTypeArguments();\n            if(types != null && types.length == 2 && types[0] == String.class){\n              //the key should always be String\n              //Raw and primitive types\n              if(types[1] instanceof Class){\n                //the value could be multivalued then it is a List ,Collection,ArrayList\n                if(types[1]== Collection.class || types[1] == List.class || types[1] == ArrayList.class){\n                  type = Object.class;\n                  isList = true;\n                }else{\n                  //else assume it is a primitive and put in the source type itself\n                  type = (Class) types[1];\n                }\n              }\n              //Of all the Parameterized types, only List is supported\n              else if(types[1] instanceof ParameterizedType){\n                Type rawType = ((ParameterizedType)types[1]).getRawType();\n                if(rawType== Collection.class || rawType == List.class || rawType == ArrayList.class){\n                  type = Object.class;\n                  isList = true;\n                }\n              }\n              //Array types\n              else if(types[1] instanceof GenericArrayType){\n                type = (Class) ((GenericArrayType) types[1]).getGenericComponentType();\n                isArray = true;\n              }\n              //Throw an Exception if types are not known\n              else{\n                throw new RuntimeException(\"Allowed type for values of mapping a dynamicField are : \" +\n                    \"Object, Object[] and List\");\n              }\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    private void storeType() {\n      if (field != null) {\n        type = field.getType();\n      } else {\n        Class[] params = setter.getParameterTypes();\n        if (params.length != 1)\n          throw new RuntimeException(\"Invalid setter method. Must have one and only one parameter\");\n        type = params[0];\n      }\n      if(type == Collection.class || type == List.class || type == ArrayList.class) {\n        type = Object.class;\n        isList = true;\n        /*ParameterizedType parameterizedType = null;\n        if(field !=null){\n          if( field.getGenericType() instanceof ParameterizedType){\n            parameterizedType = (ParameterizedType) field.getGenericType();\n            Type[] types = parameterizedType.getActualTypeArguments();\n            if (types != null && types.length > 0) type = (Class) types[0];\n          }\n        }*/\n      } else if(type == byte[].class){\n        //no op\n      }else if (type.isArray()) {\n        isArray = true;\n        type = type.getComponentType();\n      }\n      //corresponding to the support for dynamicFields\n      else if (type == Map.class || type == HashMap.class) {\n        isContainedInMap = true;\n        //assigned a default type\n        type = Object.class;\n        if(field != null){\n          if(field.getGenericType() instanceof ParameterizedType){\n            //check what are the generic values\n            ParameterizedType parameterizedType = (ParameterizedType) field.getGenericType();\n            Type[] types = parameterizedType.getActualTypeArguments();\n            if(types != null && types.length == 2 && types[0] == String.class){\n              //the key should always be String\n              //Raw and primitive types\n              if(types[1] instanceof Class){\n                //the value could be multivalued then it is a List ,Collection,ArrayList\n                if(types[1]== Collection.class || types[1] == List.class || types[1] == ArrayList.class){\n                  type = Object.class;\n                  isList = true;\n                }else{\n                  //else assume it is a primitive and put in the source type itself\n                  type = (Class) types[1];\n                }\n              }\n              //Of all the Parameterized types, only List is supported\n              else if(types[1] instanceof ParameterizedType){\n                Type rawType = ((ParameterizedType)types[1]).getRawType();\n                if(rawType== Collection.class || rawType == List.class || rawType == ArrayList.class){\n                  type = Object.class;\n                  isList = true;\n                }\n              }\n              //Array types\n              else if(types[1] instanceof GenericArrayType){\n                type = (Class) ((GenericArrayType) types[1]).getGenericComponentType();\n                isArray = true;\n              }\n              //Throw an Exception if types are not known\n              else{\n                throw new RuntimeException(\"Allowed type for values of mapping a dynamicField are : \" +\n                    \"Object, Object[] and List\");\n              }\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7622cbc3a8e5ea4d57a67d99978449606ec484bc","date":1313559942,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#storeType().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#storeType().mjava","sourceNew":"    private void storeType() {\n      if (field != null) {\n        type = field.getType();\n      } else {\n        Class[] params = setter.getParameterTypes();\n        if (params.length != 1) {\n          throw new BindingException(\"Invalid setter method. Must have one and only one parameter\");\n        }\n        type = params[0];\n      }\n\n      if(type == Collection.class || type == List.class || type == ArrayList.class) {\n        type = Object.class;\n        isList = true;\n      } else if (type == byte[].class) {\n        //no op\n      } else if (type.isArray()) {\n        isArray = true;\n        type = type.getComponentType();\n      } else if (type == Map.class || type == HashMap.class) { //corresponding to the support for dynamicFields\n        isContainedInMap = true;\n        //assigned a default type\n        type = Object.class;\n        if (field != null) {\n          if (field.getGenericType() instanceof ParameterizedType) {\n            //check what are the generic values\n            ParameterizedType parameterizedType = (ParameterizedType) field.getGenericType();\n            Type[] types = parameterizedType.getActualTypeArguments();\n            if (types != null && types.length == 2 && types[0] == String.class) {\n              //the key should always be String\n              //Raw and primitive types\n              if (types[1] instanceof Class) {\n                //the value could be multivalued then it is a List, Collection, ArrayList\n                if(types[1]== Collection.class || types[1] == List.class || types[1] == ArrayList.class){\n                  type = Object.class;\n                  isList = true;\n                } else{\n                  //else assume it is a primitive and put in the source type itself\n                  type = (Class) types[1];\n                }\n              } else if( types[1] instanceof ParameterizedType) { //Of all the Parameterized types, only List is supported\n                Type rawType = ((ParameterizedType)types[1]).getRawType();\n                if(rawType== Collection.class || rawType == List.class || rawType == ArrayList.class){\n                  type = Object.class;\n                  isList = true;\n                }\n              } else if (types[1] instanceof GenericArrayType) { //Array types\n                type = (Class) ((GenericArrayType) types[1]).getGenericComponentType();\n                isArray = true;\n              } else { //Throw an Exception if types are not known\n                throw new BindingException(\"Allowed type for values of mapping a dynamicField are : \" +\n                    \"Object, Object[] and List\");\n              }\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    private void storeType() {\n      if (field != null) {\n        type = field.getType();\n      } else {\n        Class[] params = setter.getParameterTypes();\n        if (params.length != 1)\n          throw new RuntimeException(\"Invalid setter method. Must have one and only one parameter\");\n        type = params[0];\n      }\n      if(type == Collection.class || type == List.class || type == ArrayList.class) {\n        type = Object.class;\n        isList = true;\n        /*ParameterizedType parameterizedType = null;\n        if(field !=null){\n          if( field.getGenericType() instanceof ParameterizedType){\n            parameterizedType = (ParameterizedType) field.getGenericType();\n            Type[] types = parameterizedType.getActualTypeArguments();\n            if (types != null && types.length > 0) type = (Class) types[0];\n          }\n        }*/\n      } else if(type == byte[].class){\n        //no op\n      }else if (type.isArray()) {\n        isArray = true;\n        type = type.getComponentType();\n      }\n      //corresponding to the support for dynamicFields\n      else if (type == Map.class || type == HashMap.class) {\n        isContainedInMap = true;\n        //assigned a default type\n        type = Object.class;\n        if(field != null){\n          if(field.getGenericType() instanceof ParameterizedType){\n            //check what are the generic values\n            ParameterizedType parameterizedType = (ParameterizedType) field.getGenericType();\n            Type[] types = parameterizedType.getActualTypeArguments();\n            if(types != null && types.length == 2 && types[0] == String.class){\n              //the key should always be String\n              //Raw and primitive types\n              if(types[1] instanceof Class){\n                //the value could be multivalued then it is a List ,Collection,ArrayList\n                if(types[1]== Collection.class || types[1] == List.class || types[1] == ArrayList.class){\n                  type = Object.class;\n                  isList = true;\n                }else{\n                  //else assume it is a primitive and put in the source type itself\n                  type = (Class) types[1];\n                }\n              }\n              //Of all the Parameterized types, only List is supported\n              else if(types[1] instanceof ParameterizedType){\n                Type rawType = ((ParameterizedType)types[1]).getRawType();\n                if(rawType== Collection.class || rawType == List.class || rawType == ArrayList.class){\n                  type = Object.class;\n                  isList = true;\n                }\n              }\n              //Array types\n              else if(types[1] instanceof GenericArrayType){\n                type = (Class) ((GenericArrayType) types[1]).getGenericComponentType();\n                isArray = true;\n              }\n              //Throw an Exception if types are not known\n              else{\n                throw new RuntimeException(\"Allowed type for values of mapping a dynamicField are : \" +\n                    \"Object, Object[] and List\");\n              }\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35b292579499b440bb87b86a6b832d91a6f6dc2e","date":1313656166,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#storeType().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#storeType().mjava","sourceNew":"    private void storeType() {\n      if (field != null) {\n        type = field.getType();\n      } else {\n        Class[] params = setter.getParameterTypes();\n        if (params.length != 1) {\n          throw new BindingException(\"Invalid setter method. Must have one and only one parameter\");\n        }\n        type = params[0];\n      }\n\n      if(type == Collection.class || type == List.class || type == ArrayList.class) {\n        type = Object.class;\n        isList = true;\n      } else if (type == byte[].class) {\n        //no op\n      } else if (type.isArray()) {\n        isArray = true;\n        type = type.getComponentType();\n      } else if (type == Map.class || type == HashMap.class) { //corresponding to the support for dynamicFields\n        isContainedInMap = true;\n        //assigned a default type\n        type = Object.class;\n        if (field != null) {\n          if (field.getGenericType() instanceof ParameterizedType) {\n            //check what are the generic values\n            ParameterizedType parameterizedType = (ParameterizedType) field.getGenericType();\n            Type[] types = parameterizedType.getActualTypeArguments();\n            if (types != null && types.length == 2 && types[0] == String.class) {\n              //the key should always be String\n              //Raw and primitive types\n              if (types[1] instanceof Class) {\n                //the value could be multivalued then it is a List, Collection, ArrayList\n                if (types[1]== Collection.class || types[1] == List.class || types[1] == ArrayList.class) {\n                  type = Object.class;\n                  isList = true;\n                } else {\n                  //else assume it is a primitive and put in the source type itself\n                  type = (Class) types[1];\n                }\n              } else if (types[1] instanceof ParameterizedType) { //Of all the Parameterized types, only List is supported\n                Type rawType = ((ParameterizedType)types[1]).getRawType();\n                if(rawType== Collection.class || rawType == List.class || rawType == ArrayList.class){\n                  type = Object.class;\n                  isList = true;\n                }\n              } else if (types[1] instanceof GenericArrayType) { //Array types\n                type = (Class) ((GenericArrayType) types[1]).getGenericComponentType();\n                isArray = true;\n              } else { //Throw an Exception if types are not known\n                throw new BindingException(\"Allowed type for values of mapping a dynamicField are : \" +\n                    \"Object, Object[] and List\");\n              }\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    private void storeType() {\n      if (field != null) {\n        type = field.getType();\n      } else {\n        Class[] params = setter.getParameterTypes();\n        if (params.length != 1) {\n          throw new BindingException(\"Invalid setter method. Must have one and only one parameter\");\n        }\n        type = params[0];\n      }\n\n      if(type == Collection.class || type == List.class || type == ArrayList.class) {\n        type = Object.class;\n        isList = true;\n      } else if (type == byte[].class) {\n        //no op\n      } else if (type.isArray()) {\n        isArray = true;\n        type = type.getComponentType();\n      } else if (type == Map.class || type == HashMap.class) { //corresponding to the support for dynamicFields\n        isContainedInMap = true;\n        //assigned a default type\n        type = Object.class;\n        if (field != null) {\n          if (field.getGenericType() instanceof ParameterizedType) {\n            //check what are the generic values\n            ParameterizedType parameterizedType = (ParameterizedType) field.getGenericType();\n            Type[] types = parameterizedType.getActualTypeArguments();\n            if (types != null && types.length == 2 && types[0] == String.class) {\n              //the key should always be String\n              //Raw and primitive types\n              if (types[1] instanceof Class) {\n                //the value could be multivalued then it is a List, Collection, ArrayList\n                if(types[1]== Collection.class || types[1] == List.class || types[1] == ArrayList.class){\n                  type = Object.class;\n                  isList = true;\n                } else{\n                  //else assume it is a primitive and put in the source type itself\n                  type = (Class) types[1];\n                }\n              } else if( types[1] instanceof ParameterizedType) { //Of all the Parameterized types, only List is supported\n                Type rawType = ((ParameterizedType)types[1]).getRawType();\n                if(rawType== Collection.class || rawType == List.class || rawType == ArrayList.class){\n                  type = Object.class;\n                  isList = true;\n                }\n              } else if (types[1] instanceof GenericArrayType) { //Array types\n                type = (Class) ((GenericArrayType) types[1]).getGenericComponentType();\n                isArray = true;\n              } else { //Throw an Exception if types are not known\n                throw new BindingException(\"Allowed type for values of mapping a dynamicField are : \" +\n                    \"Object, Object[] and List\");\n              }\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef9659be74f43b907ff558f1bafe80488bb9f4b7","date":1423940662,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#storeType().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#storeType().mjava","sourceNew":"    private void storeType() {\n      if (field != null) {\n        type = field.getType();\n      } else {\n        Class[] params = setter.getParameterTypes();\n        if (params.length != 1) {\n          throw new BindingException(\"Invalid setter method. Must have one and only one parameter\");\n        }\n        type = params[0];\n      }\n\n      if (type == Collection.class || type == List.class || type == ArrayList.class) {\n        isList = true;\n        if (annotation.child()) {\n          populateChild(field.getGenericType());\n        } else {\n          type = Object.class;\n        }\n      } else if (type == byte[].class) {\n        //no op\n      } else if (type.isArray()) {\n        isArray = true;\n        if (annotation.child()) {\n          populateChild(type.getComponentType());\n        } else {\n          type = type.getComponentType();\n        }\n      } else if (type == Map.class || type == HashMap.class) { //corresponding to the support for dynamicFields\n        if (annotation.child()) throw new BindingException(\"Map should is not a valid type for a child document\");\n        isContainedInMap = true;\n        //assigned a default type\n        type = Object.class;\n        if (field != null) {\n          if (field.getGenericType() instanceof ParameterizedType) {\n            //check what are the generic values\n            ParameterizedType parameterizedType = (ParameterizedType) field.getGenericType();\n            Type[] types = parameterizedType.getActualTypeArguments();\n            if (types != null && types.length == 2 && types[0] == String.class) {\n              //the key should always be String\n              //Raw and primitive types\n              if (types[1] instanceof Class) {\n                //the value could be multivalued then it is a List, Collection, ArrayList\n                if (types[1] == Collection.class || types[1] == List.class || types[1] == ArrayList.class) {\n                  type = Object.class;\n                  isList = true;\n                } else {\n                  //else assume it is a primitive and put in the source type itself\n                  type = (Class) types[1];\n                }\n              } else if (types[1] instanceof ParameterizedType) { //Of all the Parameterized types, only List is supported\n                Type rawType = ((ParameterizedType) types[1]).getRawType();\n                if (rawType == Collection.class || rawType == List.class || rawType == ArrayList.class) {\n                  type = Object.class;\n                  isList = true;\n                }\n              } else if (types[1] instanceof GenericArrayType) { //Array types\n                type = (Class) ((GenericArrayType) types[1]).getGenericComponentType();\n                isArray = true;\n              } else { //Throw an Exception if types are not known\n                throw new BindingException(\"Allowed type for values of mapping a dynamicField are : \" +\n                    \"Object, Object[] and List\");\n              }\n            }\n          }\n        }\n      } else {\n        if (annotation.child()) {\n          populateChild(type);\n        }\n      }\n    }\n\n","sourceOld":"    private void storeType() {\n      if (field != null) {\n        type = field.getType();\n      } else {\n        Class[] params = setter.getParameterTypes();\n        if (params.length != 1) {\n          throw new BindingException(\"Invalid setter method. Must have one and only one parameter\");\n        }\n        type = params[0];\n      }\n\n      if(type == Collection.class || type == List.class || type == ArrayList.class) {\n        type = Object.class;\n        isList = true;\n      } else if (type == byte[].class) {\n        //no op\n      } else if (type.isArray()) {\n        isArray = true;\n        type = type.getComponentType();\n      } else if (type == Map.class || type == HashMap.class) { //corresponding to the support for dynamicFields\n        isContainedInMap = true;\n        //assigned a default type\n        type = Object.class;\n        if (field != null) {\n          if (field.getGenericType() instanceof ParameterizedType) {\n            //check what are the generic values\n            ParameterizedType parameterizedType = (ParameterizedType) field.getGenericType();\n            Type[] types = parameterizedType.getActualTypeArguments();\n            if (types != null && types.length == 2 && types[0] == String.class) {\n              //the key should always be String\n              //Raw and primitive types\n              if (types[1] instanceof Class) {\n                //the value could be multivalued then it is a List, Collection, ArrayList\n                if (types[1]== Collection.class || types[1] == List.class || types[1] == ArrayList.class) {\n                  type = Object.class;\n                  isList = true;\n                } else {\n                  //else assume it is a primitive and put in the source type itself\n                  type = (Class) types[1];\n                }\n              } else if (types[1] instanceof ParameterizedType) { //Of all the Parameterized types, only List is supported\n                Type rawType = ((ParameterizedType)types[1]).getRawType();\n                if(rawType== Collection.class || rawType == List.class || rawType == ArrayList.class){\n                  type = Object.class;\n                  isList = true;\n                }\n              } else if (types[1] instanceof GenericArrayType) { //Array types\n                type = (Class) ((GenericArrayType) types[1]).getGenericComponentType();\n                isArray = true;\n              } else { //Throw an Exception if types are not known\n                throw new BindingException(\"Allowed type for values of mapping a dynamicField are : \" +\n                    \"Object, Object[] and List\");\n              }\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1925996e429ad8a0be0ccf8077b84cbb00704753","date":1546260896,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#storeType().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#storeType().mjava","sourceNew":"    private void storeType() {\n      if (field != null) {\n        type = field.getType();\n      } else {\n        Class[] params = setter.getParameterTypes();\n        if (params.length != 1) {\n          throw new BindingException(\"Invalid setter method (\" + setter +\n              \"). A setter must have one and only one parameter but we found \" + params.length + \" parameters.\");\n        }\n        type = params[0];\n      }\n\n      if (type == Collection.class || type == List.class || type == ArrayList.class) {\n        isList = true;\n        if (annotation.child()) {\n          populateChild(field.getGenericType());\n        } else {\n          type = Object.class;\n        }\n      } else if (type == byte[].class) {\n        //no op\n      } else if (type.isArray()) {\n        isArray = true;\n        if (annotation.child()) {\n          populateChild(type.getComponentType());\n        } else {\n          type = type.getComponentType();\n        }\n      } else if (type == Map.class || type == HashMap.class) { //corresponding to the support for dynamicFields\n        if (annotation.child()) throw new BindingException(\"Map should is not a valid type for a child document\");\n        isContainedInMap = true;\n        //assigned a default type\n        type = Object.class;\n        if (field != null) {\n          if (field.getGenericType() instanceof ParameterizedType) {\n            //check what are the generic values\n            ParameterizedType parameterizedType = (ParameterizedType) field.getGenericType();\n            Type[] types = parameterizedType.getActualTypeArguments();\n            if (types != null && types.length == 2 && types[0] == String.class) {\n              //the key should always be String\n              //Raw and primitive types\n              if (types[1] instanceof Class) {\n                //the value could be multivalued then it is a List, Collection, ArrayList\n                if (types[1] == Collection.class || types[1] == List.class || types[1] == ArrayList.class) {\n                  type = Object.class;\n                  isList = true;\n                } else {\n                  //else assume it is a primitive and put in the source type itself\n                  type = (Class) types[1];\n                }\n              } else if (types[1] instanceof ParameterizedType) { //Of all the Parameterized types, only List is supported\n                Type rawType = ((ParameterizedType) types[1]).getRawType();\n                if (rawType == Collection.class || rawType == List.class || rawType == ArrayList.class) {\n                  type = Object.class;\n                  isList = true;\n                }\n              } else if (types[1] instanceof GenericArrayType) { //Array types\n                type = (Class) ((GenericArrayType) types[1]).getGenericComponentType();\n                isArray = true;\n              } else { //Throw an Exception if types are not known\n                throw new BindingException(\"Allowed type for values of mapping a dynamicField are : \" +\n                    \"Object, Object[] and List\");\n              }\n            }\n          }\n        }\n      } else {\n        if (annotation.child()) {\n          populateChild(type);\n        }\n      }\n    }\n\n","sourceOld":"    private void storeType() {\n      if (field != null) {\n        type = field.getType();\n      } else {\n        Class[] params = setter.getParameterTypes();\n        if (params.length != 1) {\n          throw new BindingException(\"Invalid setter method. Must have one and only one parameter\");\n        }\n        type = params[0];\n      }\n\n      if (type == Collection.class || type == List.class || type == ArrayList.class) {\n        isList = true;\n        if (annotation.child()) {\n          populateChild(field.getGenericType());\n        } else {\n          type = Object.class;\n        }\n      } else if (type == byte[].class) {\n        //no op\n      } else if (type.isArray()) {\n        isArray = true;\n        if (annotation.child()) {\n          populateChild(type.getComponentType());\n        } else {\n          type = type.getComponentType();\n        }\n      } else if (type == Map.class || type == HashMap.class) { //corresponding to the support for dynamicFields\n        if (annotation.child()) throw new BindingException(\"Map should is not a valid type for a child document\");\n        isContainedInMap = true;\n        //assigned a default type\n        type = Object.class;\n        if (field != null) {\n          if (field.getGenericType() instanceof ParameterizedType) {\n            //check what are the generic values\n            ParameterizedType parameterizedType = (ParameterizedType) field.getGenericType();\n            Type[] types = parameterizedType.getActualTypeArguments();\n            if (types != null && types.length == 2 && types[0] == String.class) {\n              //the key should always be String\n              //Raw and primitive types\n              if (types[1] instanceof Class) {\n                //the value could be multivalued then it is a List, Collection, ArrayList\n                if (types[1] == Collection.class || types[1] == List.class || types[1] == ArrayList.class) {\n                  type = Object.class;\n                  isList = true;\n                } else {\n                  //else assume it is a primitive and put in the source type itself\n                  type = (Class) types[1];\n                }\n              } else if (types[1] instanceof ParameterizedType) { //Of all the Parameterized types, only List is supported\n                Type rawType = ((ParameterizedType) types[1]).getRawType();\n                if (rawType == Collection.class || rawType == List.class || rawType == ArrayList.class) {\n                  type = Object.class;\n                  isList = true;\n                }\n              } else if (types[1] instanceof GenericArrayType) { //Array types\n                type = (Class) ((GenericArrayType) types[1]).getGenericComponentType();\n                isArray = true;\n              } else { //Throw an Exception if types are not known\n                throw new BindingException(\"Allowed type for values of mapping a dynamicField are : \" +\n                    \"Object, Object[] and List\");\n              }\n            }\n          }\n        }\n      } else {\n        if (annotation.child()) {\n          populateChild(type);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7dfea4f7c80813344b0152e37fc18b31369e8ff","date":1592136683,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#storeType().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#storeType().mjava","sourceNew":"    private void storeType() {\n      if (field != null) {\n        type = field.getType();\n      } else {\n        @SuppressWarnings({\"rawtypes\"})\n        Class[] params = setter.getParameterTypes();\n        if (params.length != 1) {\n          throw new BindingException(\"Invalid setter method (\" + setter +\n              \"). A setter must have one and only one parameter but we found \" + params.length + \" parameters.\");\n        }\n        type = params[0];\n      }\n\n      if (type == Collection.class || type == List.class || type == ArrayList.class) {\n        isList = true;\n        if (annotation.child()) {\n          populateChild(field.getGenericType());\n        } else {\n          type = Object.class;\n        }\n      } else if (type == byte[].class) {\n        //no op\n      } else if (type.isArray()) {\n        isArray = true;\n        if (annotation.child()) {\n          populateChild(type.getComponentType());\n        } else {\n          type = type.getComponentType();\n        }\n      } else if (type == Map.class || type == HashMap.class) { //corresponding to the support for dynamicFields\n        if (annotation.child()) throw new BindingException(\"Map should is not a valid type for a child document\");\n        isContainedInMap = true;\n        //assigned a default type\n        type = Object.class;\n        if (field != null) {\n          if (field.getGenericType() instanceof ParameterizedType) {\n            //check what are the generic values\n            ParameterizedType parameterizedType = (ParameterizedType) field.getGenericType();\n            Type[] types = parameterizedType.getActualTypeArguments();\n            if (types != null && types.length == 2 && types[0] == String.class) {\n              //the key should always be String\n              //Raw and primitive types\n              if (types[1] instanceof Class) {\n                //the value could be multivalued then it is a List, Collection, ArrayList\n                if (types[1] == Collection.class || types[1] == List.class || types[1] == ArrayList.class) {\n                  type = Object.class;\n                  isList = true;\n                } else {\n                  //else assume it is a primitive and put in the source type itself\n                  type = (Class) types[1];\n                }\n              } else if (types[1] instanceof ParameterizedType) { //Of all the Parameterized types, only List is supported\n                Type rawType = ((ParameterizedType) types[1]).getRawType();\n                if (rawType == Collection.class || rawType == List.class || rawType == ArrayList.class) {\n                  type = Object.class;\n                  isList = true;\n                }\n              } else if (types[1] instanceof GenericArrayType) { //Array types\n                type = (Class) ((GenericArrayType) types[1]).getGenericComponentType();\n                isArray = true;\n              } else { //Throw an Exception if types are not known\n                throw new BindingException(\"Allowed type for values of mapping a dynamicField are : \" +\n                    \"Object, Object[] and List\");\n              }\n            }\n          }\n        }\n      } else {\n        if (annotation.child()) {\n          populateChild(type);\n        }\n      }\n    }\n\n","sourceOld":"    private void storeType() {\n      if (field != null) {\n        type = field.getType();\n      } else {\n        Class[] params = setter.getParameterTypes();\n        if (params.length != 1) {\n          throw new BindingException(\"Invalid setter method (\" + setter +\n              \"). A setter must have one and only one parameter but we found \" + params.length + \" parameters.\");\n        }\n        type = params[0];\n      }\n\n      if (type == Collection.class || type == List.class || type == ArrayList.class) {\n        isList = true;\n        if (annotation.child()) {\n          populateChild(field.getGenericType());\n        } else {\n          type = Object.class;\n        }\n      } else if (type == byte[].class) {\n        //no op\n      } else if (type.isArray()) {\n        isArray = true;\n        if (annotation.child()) {\n          populateChild(type.getComponentType());\n        } else {\n          type = type.getComponentType();\n        }\n      } else if (type == Map.class || type == HashMap.class) { //corresponding to the support for dynamicFields\n        if (annotation.child()) throw new BindingException(\"Map should is not a valid type for a child document\");\n        isContainedInMap = true;\n        //assigned a default type\n        type = Object.class;\n        if (field != null) {\n          if (field.getGenericType() instanceof ParameterizedType) {\n            //check what are the generic values\n            ParameterizedType parameterizedType = (ParameterizedType) field.getGenericType();\n            Type[] types = parameterizedType.getActualTypeArguments();\n            if (types != null && types.length == 2 && types[0] == String.class) {\n              //the key should always be String\n              //Raw and primitive types\n              if (types[1] instanceof Class) {\n                //the value could be multivalued then it is a List, Collection, ArrayList\n                if (types[1] == Collection.class || types[1] == List.class || types[1] == ArrayList.class) {\n                  type = Object.class;\n                  isList = true;\n                } else {\n                  //else assume it is a primitive and put in the source type itself\n                  type = (Class) types[1];\n                }\n              } else if (types[1] instanceof ParameterizedType) { //Of all the Parameterized types, only List is supported\n                Type rawType = ((ParameterizedType) types[1]).getRawType();\n                if (rawType == Collection.class || rawType == List.class || rawType == ArrayList.class) {\n                  type = Object.class;\n                  isList = true;\n                }\n              } else if (types[1] instanceof GenericArrayType) { //Array types\n                type = (Class) ((GenericArrayType) types[1]).getGenericComponentType();\n                isArray = true;\n              } else { //Throw an Exception if types are not known\n                throw new BindingException(\"Allowed type for values of mapping a dynamicField are : \" +\n                    \"Object, Object[] and List\");\n              }\n            }\n          }\n        }\n      } else {\n        if (annotation.child()) {\n          populateChild(type);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"35b292579499b440bb87b86a6b832d91a6f6dc2e":["7622cbc3a8e5ea4d57a67d99978449606ec484bc"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["1925996e429ad8a0be0ccf8077b84cbb00704753"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ef9659be74f43b907ff558f1bafe80488bb9f4b7":["35b292579499b440bb87b86a6b832d91a6f6dc2e"],"7622cbc3a8e5ea4d57a67d99978449606ec484bc":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a7dfea4f7c80813344b0152e37fc18b31369e8ff"],"1925996e429ad8a0be0ccf8077b84cbb00704753":["ef9659be74f43b907ff558f1bafe80488bb9f4b7"]},"commit2Childs":{"35b292579499b440bb87b86a6b832d91a6f6dc2e":["ef9659be74f43b907ff558f1bafe80488bb9f4b7"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["7622cbc3a8e5ea4d57a67d99978449606ec484bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ef9659be74f43b907ff558f1bafe80488bb9f4b7":["1925996e429ad8a0be0ccf8077b84cbb00704753"],"7622cbc3a8e5ea4d57a67d99978449606ec484bc":["35b292579499b440bb87b86a6b832d91a6f6dc2e"],"1925996e429ad8a0be0ccf8077b84cbb00704753":["a7dfea4f7c80813344b0152e37fc18b31369e8ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}