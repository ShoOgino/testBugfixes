{"path":"lucene/core/src/java/org/apache/lucene/util/fst/FST#seekToNextNode(BytesReader).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#seekToNextNode(BytesReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#seekToNextNode(BytesReader).mjava","sourceNew":"  private void seekToNextNode(BytesReader in) throws IOException {\n\n    while(true) {\n\n      final int flags = in.readByte();\n      readLabel(in);\n\n      if (flag(flags, BIT_ARC_HAS_OUTPUT)) {\n        outputs.read(in);\n      }\n\n      if (flag(flags, BIT_ARC_HAS_FINAL_OUTPUT)) {\n        outputs.read(in);\n      }\n\n      if (!flag(flags, BIT_STOP_NODE) && !flag(flags, BIT_TARGET_NEXT)) {\n        if (packed) {\n          in.readVInt();\n        } else {\n          in.readInt();\n        }\n      }\n\n      if (flag(flags, BIT_LAST_ARC)) {\n        return;\n      }\n    }\n  }\n\n","sourceOld":"  private void seekToNextNode(BytesReader in) throws IOException {\n\n    while(true) {\n\n      final int flags = in.readByte();\n      readLabel(in);\n\n      if (flag(flags, BIT_ARC_HAS_OUTPUT)) {\n        outputs.read(in);\n      }\n\n      if (flag(flags, BIT_ARC_HAS_FINAL_OUTPUT)) {\n        outputs.read(in);\n      }\n\n      if (!flag(flags, BIT_STOP_NODE) && !flag(flags, BIT_TARGET_NEXT)) {\n        if (packed) {\n          in.readVInt();\n        } else {\n          in.readInt();\n        }\n      }\n\n      if (flag(flags, BIT_LAST_ARC)) {\n        return;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ebe14aae60589c9bb6423f3cce02d5f599e1540","date":1348361556,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#seekToNextNode(BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#seekToNextNode(BytesReader).mjava","sourceNew":"  private void seekToNextNode(BytesReader in) throws IOException {\n\n    while(true) {\n\n      final int flags = in.readByte();\n      readLabel(in);\n\n      if (flag(flags, BIT_ARC_HAS_OUTPUT)) {\n        outputs.read(in);\n      }\n\n      if (flag(flags, BIT_ARC_HAS_FINAL_OUTPUT)) {\n        outputs.readFinalOutput(in);\n      }\n\n      if (!flag(flags, BIT_STOP_NODE) && !flag(flags, BIT_TARGET_NEXT)) {\n        if (packed) {\n          in.readVInt();\n        } else {\n          in.readInt();\n        }\n      }\n\n      if (flag(flags, BIT_LAST_ARC)) {\n        return;\n      }\n    }\n  }\n\n","sourceOld":"  private void seekToNextNode(BytesReader in) throws IOException {\n\n    while(true) {\n\n      final int flags = in.readByte();\n      readLabel(in);\n\n      if (flag(flags, BIT_ARC_HAS_OUTPUT)) {\n        outputs.read(in);\n      }\n\n      if (flag(flags, BIT_ARC_HAS_FINAL_OUTPUT)) {\n        outputs.read(in);\n      }\n\n      if (!flag(flags, BIT_STOP_NODE) && !flag(flags, BIT_TARGET_NEXT)) {\n        if (packed) {\n          in.readVInt();\n        } else {\n          in.readInt();\n        }\n      }\n\n      if (flag(flags, BIT_LAST_ARC)) {\n        return;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"556c8202987f72dd8458e25e21a82d98fc274979","date":1358008288,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#seekToNextNode(BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#seekToNextNode(BytesReader).mjava","sourceNew":"  private void seekToNextNode(BytesReader in) throws IOException {\n\n    while(true) {\n\n      final int flags = in.readByte();\n      readLabel(in);\n\n      if (flag(flags, BIT_ARC_HAS_OUTPUT)) {\n        outputs.read(in);\n      }\n\n      if (flag(flags, BIT_ARC_HAS_FINAL_OUTPUT)) {\n        outputs.readFinalOutput(in);\n      }\n\n      if (!flag(flags, BIT_STOP_NODE) && !flag(flags, BIT_TARGET_NEXT)) {\n        if (packed) {\n          in.readVInt();\n        } else {\n          readUnpackedNodeTarget(in);\n        }\n      }\n\n      if (flag(flags, BIT_LAST_ARC)) {\n        return;\n      }\n    }\n  }\n\n","sourceOld":"  private void seekToNextNode(BytesReader in) throws IOException {\n\n    while(true) {\n\n      final int flags = in.readByte();\n      readLabel(in);\n\n      if (flag(flags, BIT_ARC_HAS_OUTPUT)) {\n        outputs.read(in);\n      }\n\n      if (flag(flags, BIT_ARC_HAS_FINAL_OUTPUT)) {\n        outputs.readFinalOutput(in);\n      }\n\n      if (!flag(flags, BIT_STOP_NODE) && !flag(flags, BIT_TARGET_NEXT)) {\n        if (packed) {\n          in.readVInt();\n        } else {\n          in.readInt();\n        }\n      }\n\n      if (flag(flags, BIT_LAST_ARC)) {\n        return;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0","date":1358188277,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#seekToNextNode(BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#seekToNextNode(BytesReader).mjava","sourceNew":"  private void seekToNextNode(BytesReader in) throws IOException {\n\n    while(true) {\n\n      final int flags = in.readByte();\n      readLabel(in);\n\n      if (flag(flags, BIT_ARC_HAS_OUTPUT)) {\n        outputs.read(in);\n      }\n\n      if (flag(flags, BIT_ARC_HAS_FINAL_OUTPUT)) {\n        outputs.readFinalOutput(in);\n      }\n\n      if (!flag(flags, BIT_STOP_NODE) && !flag(flags, BIT_TARGET_NEXT)) {\n        if (packed) {\n          in.readVLong();\n        } else {\n          readUnpackedNodeTarget(in);\n        }\n      }\n\n      if (flag(flags, BIT_LAST_ARC)) {\n        return;\n      }\n    }\n  }\n\n","sourceOld":"  private void seekToNextNode(BytesReader in) throws IOException {\n\n    while(true) {\n\n      final int flags = in.readByte();\n      readLabel(in);\n\n      if (flag(flags, BIT_ARC_HAS_OUTPUT)) {\n        outputs.read(in);\n      }\n\n      if (flag(flags, BIT_ARC_HAS_FINAL_OUTPUT)) {\n        outputs.readFinalOutput(in);\n      }\n\n      if (!flag(flags, BIT_STOP_NODE) && !flag(flags, BIT_TARGET_NEXT)) {\n        if (packed) {\n          in.readVInt();\n        } else {\n          readUnpackedNodeTarget(in);\n        }\n      }\n\n      if (flag(flags, BIT_LAST_ARC)) {\n        return;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#seekToNextNode(BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#seekToNextNode(BytesReader).mjava","sourceNew":"  private void seekToNextNode(BytesReader in) throws IOException {\n\n    while(true) {\n\n      final int flags = in.readByte();\n      readLabel(in);\n\n      if (flag(flags, BIT_ARC_HAS_OUTPUT)) {\n        outputs.read(in);\n      }\n\n      if (flag(flags, BIT_ARC_HAS_FINAL_OUTPUT)) {\n        outputs.readFinalOutput(in);\n      }\n\n      if (!flag(flags, BIT_STOP_NODE) && !flag(flags, BIT_TARGET_NEXT)) {\n        if (packed) {\n          in.readVLong();\n        } else {\n          readUnpackedNodeTarget(in);\n        }\n      }\n\n      if (flag(flags, BIT_LAST_ARC)) {\n        return;\n      }\n    }\n  }\n\n","sourceOld":"  private void seekToNextNode(BytesReader in) throws IOException {\n\n    while(true) {\n\n      final int flags = in.readByte();\n      readLabel(in);\n\n      if (flag(flags, BIT_ARC_HAS_OUTPUT)) {\n        outputs.read(in);\n      }\n\n      if (flag(flags, BIT_ARC_HAS_FINAL_OUTPUT)) {\n        outputs.readFinalOutput(in);\n      }\n\n      if (!flag(flags, BIT_STOP_NODE) && !flag(flags, BIT_TARGET_NEXT)) {\n        if (packed) {\n          in.readVInt();\n        } else {\n          in.readInt();\n        }\n      }\n\n      if (flag(flags, BIT_LAST_ARC)) {\n        return;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"775c2566119fc914aaa5f131744dd2810a204565","date":1400612867,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#seekToNextNode(BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#seekToNextNode(BytesReader).mjava","sourceNew":"  private void seekToNextNode(BytesReader in) throws IOException {\n\n    while(true) {\n\n      final int flags = in.readByte();\n      readLabel(in);\n\n      if (flag(flags, BIT_ARC_HAS_OUTPUT)) {\n        outputs.skipOutput(in);\n      }\n\n      if (flag(flags, BIT_ARC_HAS_FINAL_OUTPUT)) {\n        outputs.skipFinalOutput(in);\n      }\n\n      if (!flag(flags, BIT_STOP_NODE) && !flag(flags, BIT_TARGET_NEXT)) {\n        if (packed) {\n          in.readVLong();\n        } else {\n          readUnpackedNodeTarget(in);\n        }\n      }\n\n      if (flag(flags, BIT_LAST_ARC)) {\n        return;\n      }\n    }\n  }\n\n","sourceOld":"  private void seekToNextNode(BytesReader in) throws IOException {\n\n    while(true) {\n\n      final int flags = in.readByte();\n      readLabel(in);\n\n      if (flag(flags, BIT_ARC_HAS_OUTPUT)) {\n        outputs.read(in);\n      }\n\n      if (flag(flags, BIT_ARC_HAS_FINAL_OUTPUT)) {\n        outputs.readFinalOutput(in);\n      }\n\n      if (!flag(flags, BIT_STOP_NODE) && !flag(flags, BIT_TARGET_NEXT)) {\n        if (packed) {\n          in.readVLong();\n        } else {\n          readUnpackedNodeTarget(in);\n        }\n      }\n\n      if (flag(flags, BIT_LAST_ARC)) {\n        return;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#seekToNextNode(BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#seekToNextNode(BytesReader).mjava","sourceNew":"  private void seekToNextNode(BytesReader in) throws IOException {\n\n    while(true) {\n\n      final int flags = in.readByte();\n      readLabel(in);\n\n      if (flag(flags, BIT_ARC_HAS_OUTPUT)) {\n        outputs.skipOutput(in);\n      }\n\n      if (flag(flags, BIT_ARC_HAS_FINAL_OUTPUT)) {\n        outputs.skipFinalOutput(in);\n      }\n\n      if (!flag(flags, BIT_STOP_NODE) && !flag(flags, BIT_TARGET_NEXT)) {\n        if (packed) {\n          in.readVLong();\n        } else {\n          readUnpackedNodeTarget(in);\n        }\n      }\n\n      if (flag(flags, BIT_LAST_ARC)) {\n        return;\n      }\n    }\n  }\n\n","sourceOld":"  private void seekToNextNode(BytesReader in) throws IOException {\n\n    while(true) {\n\n      final int flags = in.readByte();\n      readLabel(in);\n\n      if (flag(flags, BIT_ARC_HAS_OUTPUT)) {\n        outputs.read(in);\n      }\n\n      if (flag(flags, BIT_ARC_HAS_FINAL_OUTPUT)) {\n        outputs.readFinalOutput(in);\n      }\n\n      if (!flag(flags, BIT_STOP_NODE) && !flag(flags, BIT_TARGET_NEXT)) {\n        if (packed) {\n          in.readVLong();\n        } else {\n          readUnpackedNodeTarget(in);\n        }\n      }\n\n      if (flag(flags, BIT_LAST_ARC)) {\n        return;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6244579a467d5f2673ac98265d74bddbea1a8114","date":1478786509,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#seekToNextNode(BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#seekToNextNode(BytesReader).mjava","sourceNew":"  private void seekToNextNode(BytesReader in) throws IOException {\n\n    while(true) {\n\n      final int flags = in.readByte();\n      readLabel(in);\n\n      if (flag(flags, BIT_ARC_HAS_OUTPUT)) {\n        outputs.skipOutput(in);\n      }\n\n      if (flag(flags, BIT_ARC_HAS_FINAL_OUTPUT)) {\n        outputs.skipFinalOutput(in);\n      }\n\n      if (!flag(flags, BIT_STOP_NODE) && !flag(flags, BIT_TARGET_NEXT)) {\n        readUnpackedNodeTarget(in);\n      }\n\n      if (flag(flags, BIT_LAST_ARC)) {\n        return;\n      }\n    }\n  }\n\n","sourceOld":"  private void seekToNextNode(BytesReader in) throws IOException {\n\n    while(true) {\n\n      final int flags = in.readByte();\n      readLabel(in);\n\n      if (flag(flags, BIT_ARC_HAS_OUTPUT)) {\n        outputs.skipOutput(in);\n      }\n\n      if (flag(flags, BIT_ARC_HAS_FINAL_OUTPUT)) {\n        outputs.skipFinalOutput(in);\n      }\n\n      if (!flag(flags, BIT_STOP_NODE) && !flag(flags, BIT_TARGET_NEXT)) {\n        if (packed) {\n          in.readVLong();\n        } else {\n          readUnpackedNodeTarget(in);\n        }\n      }\n\n      if (flag(flags, BIT_LAST_ARC)) {\n        return;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#seekToNextNode(BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#seekToNextNode(BytesReader).mjava","sourceNew":"  private void seekToNextNode(BytesReader in) throws IOException {\n\n    while(true) {\n\n      final int flags = in.readByte();\n      readLabel(in);\n\n      if (flag(flags, BIT_ARC_HAS_OUTPUT)) {\n        outputs.skipOutput(in);\n      }\n\n      if (flag(flags, BIT_ARC_HAS_FINAL_OUTPUT)) {\n        outputs.skipFinalOutput(in);\n      }\n\n      if (!flag(flags, BIT_STOP_NODE) && !flag(flags, BIT_TARGET_NEXT)) {\n        readUnpackedNodeTarget(in);\n      }\n\n      if (flag(flags, BIT_LAST_ARC)) {\n        return;\n      }\n    }\n  }\n\n","sourceOld":"  private void seekToNextNode(BytesReader in) throws IOException {\n\n    while(true) {\n\n      final int flags = in.readByte();\n      readLabel(in);\n\n      if (flag(flags, BIT_ARC_HAS_OUTPUT)) {\n        outputs.skipOutput(in);\n      }\n\n      if (flag(flags, BIT_ARC_HAS_FINAL_OUTPUT)) {\n        outputs.skipFinalOutput(in);\n      }\n\n      if (!flag(flags, BIT_STOP_NODE) && !flag(flags, BIT_TARGET_NEXT)) {\n        if (packed) {\n          in.readVLong();\n        } else {\n          readUnpackedNodeTarget(in);\n        }\n      }\n\n      if (flag(flags, BIT_LAST_ARC)) {\n        return;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"775c2566119fc914aaa5f131744dd2810a204565":["d3c397b1515e745d8b12d70edfc0e17cb7eac7f0"],"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0":["556c8202987f72dd8458e25e21a82d98fc274979"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["5ebe14aae60589c9bb6423f3cce02d5f599e1540","d3c397b1515e745d8b12d70edfc0e17cb7eac7f0"],"556c8202987f72dd8458e25e21a82d98fc274979":["5ebe14aae60589c9bb6423f3cce02d5f599e1540"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6244579a467d5f2673ac98265d74bddbea1a8114":["775c2566119fc914aaa5f131744dd2810a204565"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["775c2566119fc914aaa5f131744dd2810a204565","6244579a467d5f2673ac98265d74bddbea1a8114"],"5ebe14aae60589c9bb6423f3cce02d5f599e1540":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b7605579001505896d48b07160075a5c8b8e128e":["d3c397b1515e745d8b12d70edfc0e17cb7eac7f0","775c2566119fc914aaa5f131744dd2810a204565"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6244579a467d5f2673ac98265d74bddbea1a8114"]},"commit2Childs":{"775c2566119fc914aaa5f131744dd2810a204565":["6244579a467d5f2673ac98265d74bddbea1a8114","199dfa410f1fdbfd3294106b04096cce5ed34b21","b7605579001505896d48b07160075a5c8b8e128e"],"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0":["775c2566119fc914aaa5f131744dd2810a204565","8917bfede3b4ca30f4305c1e391e9218959cd723","b7605579001505896d48b07160075a5c8b8e128e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5ebe14aae60589c9bb6423f3cce02d5f599e1540"],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"556c8202987f72dd8458e25e21a82d98fc274979":["d3c397b1515e745d8b12d70edfc0e17cb7eac7f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"6244579a467d5f2673ac98265d74bddbea1a8114":["199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"5ebe14aae60589c9bb6423f3cce02d5f599e1540":["8917bfede3b4ca30f4305c1e391e9218959cd723","556c8202987f72dd8458e25e21a82d98fc274979"],"b7605579001505896d48b07160075a5c8b8e128e":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8917bfede3b4ca30f4305c1e391e9218959cd723","199dfa410f1fdbfd3294106b04096cce5ed34b21","b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}