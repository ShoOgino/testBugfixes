{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testMismatchedFields().mjava","commits":[{"id":"ef658003003b32165df5d5016addcee1da98e4a2","date":1419764948,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testMismatchedFields().mjava","pathOld":"/dev/null","sourceNew":"  /** mix up field numbers, merge, and check that data is correct */\n  public void testMismatchedFields() throws Exception {\n    Directory dirs[] = new Directory[10];\n    for (int i = 0; i < dirs.length; i++) {\n      Directory dir = newDirectory();\n      IndexWriterConfig iwc = new IndexWriterConfig(null);\n      IndexWriter iw = new IndexWriter(dir, iwc);\n      Document doc = new Document();\n      for (int j = 0; j < 10; j++) {\n        // add fields where name=value (e.g. 3=3) so we can detect if stuff gets screwed up.\n        doc.add(new StringField(Integer.toString(j), Integer.toString(j), Field.Store.YES));\n      }\n      for (int j = 0; j < 10; j++) {\n        iw.addDocument(doc);\n      }\n      \n      DirectoryReader reader = DirectoryReader.open(iw, true);\n      // mix up fields explicitly\n      if (random().nextBoolean()) {\n        reader = new MismatchedDirectoryReader(reader, random());\n      }\n      dirs[i] = newDirectory();\n      IndexWriter adder = new IndexWriter(dirs[i], new IndexWriterConfig(null));\n      adder.addIndexes(reader);\n      adder.commit();\n      adder.close();\n      \n      IOUtils.close(reader, iw, dir);\n    }\n    \n    Directory everything = newDirectory();\n    IndexWriter iw = new IndexWriter(everything, new IndexWriterConfig(null));\n    iw.addIndexes(dirs);\n    iw.forceMerge(1);\n    \n    LeafReader ir = getOnlySegmentReader(DirectoryReader.open(iw, true));\n    for (int i = 0; i < ir.maxDoc(); i++) {\n      StoredDocument doc = ir.document(i);\n      assertEquals(10, doc.getFields().size());\n      for (int j = 0; j < 10; j++) {\n        assertEquals(Integer.toString(j), doc.get(Integer.toString(j)));\n      }\n    }\n\n    IOUtils.close(iw, ir, everything);\n    IOUtils.close(dirs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa","date":1420599177,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testMismatchedFields().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testMismatchedFields().mjava","sourceNew":"  /** mix up field numbers, merge, and check that data is correct */\n  public void testMismatchedFields() throws Exception {\n    Directory dirs[] = new Directory[10];\n    for (int i = 0; i < dirs.length; i++) {\n      Directory dir = newDirectory();\n      IndexWriterConfig iwc = new IndexWriterConfig(null);\n      IndexWriter iw = new IndexWriter(dir, iwc);\n      Document doc = new Document();\n      for (int j = 0; j < 10; j++) {\n        // add fields where name=value (e.g. 3=3) so we can detect if stuff gets screwed up.\n        doc.add(new StringField(Integer.toString(j), Integer.toString(j), Field.Store.YES));\n      }\n      for (int j = 0; j < 10; j++) {\n        iw.addDocument(doc);\n      }\n      \n      DirectoryReader reader = DirectoryReader.open(iw, true);\n      // mix up fields explicitly\n      if (random().nextBoolean()) {\n        reader = new MismatchedDirectoryReader(reader, random());\n      }\n      dirs[i] = newDirectory();\n      IndexWriter adder = new IndexWriter(dirs[i], new IndexWriterConfig(null));\n      TestUtil.addIndexesSlowly(adder, reader);\n      adder.commit();\n      adder.close();\n      \n      IOUtils.close(reader, iw, dir);\n    }\n    \n    Directory everything = newDirectory();\n    IndexWriter iw = new IndexWriter(everything, new IndexWriterConfig(null));\n    iw.addIndexes(dirs);\n    iw.forceMerge(1);\n    \n    LeafReader ir = getOnlySegmentReader(DirectoryReader.open(iw, true));\n    for (int i = 0; i < ir.maxDoc(); i++) {\n      StoredDocument doc = ir.document(i);\n      assertEquals(10, doc.getFields().size());\n      for (int j = 0; j < 10; j++) {\n        assertEquals(Integer.toString(j), doc.get(Integer.toString(j)));\n      }\n    }\n\n    IOUtils.close(iw, ir, everything);\n    IOUtils.close(dirs);\n  }\n\n","sourceOld":"  /** mix up field numbers, merge, and check that data is correct */\n  public void testMismatchedFields() throws Exception {\n    Directory dirs[] = new Directory[10];\n    for (int i = 0; i < dirs.length; i++) {\n      Directory dir = newDirectory();\n      IndexWriterConfig iwc = new IndexWriterConfig(null);\n      IndexWriter iw = new IndexWriter(dir, iwc);\n      Document doc = new Document();\n      for (int j = 0; j < 10; j++) {\n        // add fields where name=value (e.g. 3=3) so we can detect if stuff gets screwed up.\n        doc.add(new StringField(Integer.toString(j), Integer.toString(j), Field.Store.YES));\n      }\n      for (int j = 0; j < 10; j++) {\n        iw.addDocument(doc);\n      }\n      \n      DirectoryReader reader = DirectoryReader.open(iw, true);\n      // mix up fields explicitly\n      if (random().nextBoolean()) {\n        reader = new MismatchedDirectoryReader(reader, random());\n      }\n      dirs[i] = newDirectory();\n      IndexWriter adder = new IndexWriter(dirs[i], new IndexWriterConfig(null));\n      adder.addIndexes(reader);\n      adder.commit();\n      adder.close();\n      \n      IOUtils.close(reader, iw, dir);\n    }\n    \n    Directory everything = newDirectory();\n    IndexWriter iw = new IndexWriter(everything, new IndexWriterConfig(null));\n    iw.addIndexes(dirs);\n    iw.forceMerge(1);\n    \n    LeafReader ir = getOnlySegmentReader(DirectoryReader.open(iw, true));\n    for (int i = 0; i < ir.maxDoc(); i++) {\n      StoredDocument doc = ir.document(i);\n      assertEquals(10, doc.getFields().size());\n      for (int j = 0; j < 10; j++) {\n        assertEquals(Integer.toString(j), doc.get(Integer.toString(j)));\n      }\n    }\n\n    IOUtils.close(iw, ir, everything);\n    IOUtils.close(dirs);\n  }\n\n","bugFix":["ef658003003b32165df5d5016addcee1da98e4a2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testMismatchedFields().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testMismatchedFields().mjava","sourceNew":"  /** mix up field numbers, merge, and check that data is correct */\n  public void testMismatchedFields() throws Exception {\n    Directory dirs[] = new Directory[10];\n    for (int i = 0; i < dirs.length; i++) {\n      Directory dir = newDirectory();\n      IndexWriterConfig iwc = new IndexWriterConfig(null);\n      IndexWriter iw = new IndexWriter(dir, iwc);\n      Document doc = new Document();\n      for (int j = 0; j < 10; j++) {\n        // add fields where name=value (e.g. 3=3) so we can detect if stuff gets screwed up.\n        doc.add(new StringField(Integer.toString(j), Integer.toString(j), Field.Store.YES));\n      }\n      for (int j = 0; j < 10; j++) {\n        iw.addDocument(doc);\n      }\n      \n      DirectoryReader reader = DirectoryReader.open(iw, true);\n      // mix up fields explicitly\n      if (random().nextBoolean()) {\n        reader = new MismatchedDirectoryReader(reader, random());\n      }\n      dirs[i] = newDirectory();\n      IndexWriter adder = new IndexWriter(dirs[i], new IndexWriterConfig(null));\n      TestUtil.addIndexesSlowly(adder, reader);\n      adder.commit();\n      adder.close();\n      \n      IOUtils.close(reader, iw, dir);\n    }\n    \n    Directory everything = newDirectory();\n    IndexWriter iw = new IndexWriter(everything, new IndexWriterConfig(null));\n    iw.addIndexes(dirs);\n    iw.forceMerge(1);\n    \n    LeafReader ir = getOnlySegmentReader(DirectoryReader.open(iw, true));\n    for (int i = 0; i < ir.maxDoc(); i++) {\n      Document doc = ir.document(i);\n      assertEquals(10, doc.getFields().size());\n      for (int j = 0; j < 10; j++) {\n        assertEquals(Integer.toString(j), doc.get(Integer.toString(j)));\n      }\n    }\n\n    IOUtils.close(iw, ir, everything);\n    IOUtils.close(dirs);\n  }\n\n","sourceOld":"  /** mix up field numbers, merge, and check that data is correct */\n  public void testMismatchedFields() throws Exception {\n    Directory dirs[] = new Directory[10];\n    for (int i = 0; i < dirs.length; i++) {\n      Directory dir = newDirectory();\n      IndexWriterConfig iwc = new IndexWriterConfig(null);\n      IndexWriter iw = new IndexWriter(dir, iwc);\n      Document doc = new Document();\n      for (int j = 0; j < 10; j++) {\n        // add fields where name=value (e.g. 3=3) so we can detect if stuff gets screwed up.\n        doc.add(new StringField(Integer.toString(j), Integer.toString(j), Field.Store.YES));\n      }\n      for (int j = 0; j < 10; j++) {\n        iw.addDocument(doc);\n      }\n      \n      DirectoryReader reader = DirectoryReader.open(iw, true);\n      // mix up fields explicitly\n      if (random().nextBoolean()) {\n        reader = new MismatchedDirectoryReader(reader, random());\n      }\n      dirs[i] = newDirectory();\n      IndexWriter adder = new IndexWriter(dirs[i], new IndexWriterConfig(null));\n      TestUtil.addIndexesSlowly(adder, reader);\n      adder.commit();\n      adder.close();\n      \n      IOUtils.close(reader, iw, dir);\n    }\n    \n    Directory everything = newDirectory();\n    IndexWriter iw = new IndexWriter(everything, new IndexWriterConfig(null));\n    iw.addIndexes(dirs);\n    iw.forceMerge(1);\n    \n    LeafReader ir = getOnlySegmentReader(DirectoryReader.open(iw, true));\n    for (int i = 0; i < ir.maxDoc(); i++) {\n      StoredDocument doc = ir.document(i);\n      assertEquals(10, doc.getFields().size());\n      for (int j = 0; j < 10; j++) {\n        assertEquals(Integer.toString(j), doc.get(Integer.toString(j)));\n      }\n    }\n\n    IOUtils.close(iw, ir, everything);\n    IOUtils.close(dirs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a1862266772deb28cdcb7d996b64d2177022687","date":1453077824,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testMismatchedFields().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testMismatchedFields().mjava","sourceNew":"  /** mix up field numbers, merge, and check that data is correct */\n  public void testMismatchedFields() throws Exception {\n    Directory dirs[] = new Directory[10];\n    for (int i = 0; i < dirs.length; i++) {\n      Directory dir = newDirectory();\n      IndexWriterConfig iwc = new IndexWriterConfig(null);\n      IndexWriter iw = new IndexWriter(dir, iwc);\n      Document doc = new Document();\n      for (int j = 0; j < 10; j++) {\n        // add fields where name=value (e.g. 3=3) so we can detect if stuff gets screwed up.\n        doc.add(new StringField(Integer.toString(j), Integer.toString(j), Field.Store.YES));\n      }\n      for (int j = 0; j < 10; j++) {\n        iw.addDocument(doc);\n      }\n      \n      DirectoryReader reader = DirectoryReader.open(iw);\n      // mix up fields explicitly\n      if (random().nextBoolean()) {\n        reader = new MismatchedDirectoryReader(reader, random());\n      }\n      dirs[i] = newDirectory();\n      IndexWriter adder = new IndexWriter(dirs[i], new IndexWriterConfig(null));\n      TestUtil.addIndexesSlowly(adder, reader);\n      adder.commit();\n      adder.close();\n      \n      IOUtils.close(reader, iw, dir);\n    }\n    \n    Directory everything = newDirectory();\n    IndexWriter iw = new IndexWriter(everything, new IndexWriterConfig(null));\n    iw.addIndexes(dirs);\n    iw.forceMerge(1);\n    \n    LeafReader ir = getOnlySegmentReader(DirectoryReader.open(iw));\n    for (int i = 0; i < ir.maxDoc(); i++) {\n      Document doc = ir.document(i);\n      assertEquals(10, doc.getFields().size());\n      for (int j = 0; j < 10; j++) {\n        assertEquals(Integer.toString(j), doc.get(Integer.toString(j)));\n      }\n    }\n\n    IOUtils.close(iw, ir, everything);\n    IOUtils.close(dirs);\n  }\n\n","sourceOld":"  /** mix up field numbers, merge, and check that data is correct */\n  public void testMismatchedFields() throws Exception {\n    Directory dirs[] = new Directory[10];\n    for (int i = 0; i < dirs.length; i++) {\n      Directory dir = newDirectory();\n      IndexWriterConfig iwc = new IndexWriterConfig(null);\n      IndexWriter iw = new IndexWriter(dir, iwc);\n      Document doc = new Document();\n      for (int j = 0; j < 10; j++) {\n        // add fields where name=value (e.g. 3=3) so we can detect if stuff gets screwed up.\n        doc.add(new StringField(Integer.toString(j), Integer.toString(j), Field.Store.YES));\n      }\n      for (int j = 0; j < 10; j++) {\n        iw.addDocument(doc);\n      }\n      \n      DirectoryReader reader = DirectoryReader.open(iw, true);\n      // mix up fields explicitly\n      if (random().nextBoolean()) {\n        reader = new MismatchedDirectoryReader(reader, random());\n      }\n      dirs[i] = newDirectory();\n      IndexWriter adder = new IndexWriter(dirs[i], new IndexWriterConfig(null));\n      TestUtil.addIndexesSlowly(adder, reader);\n      adder.commit();\n      adder.close();\n      \n      IOUtils.close(reader, iw, dir);\n    }\n    \n    Directory everything = newDirectory();\n    IndexWriter iw = new IndexWriter(everything, new IndexWriterConfig(null));\n    iw.addIndexes(dirs);\n    iw.forceMerge(1);\n    \n    LeafReader ir = getOnlySegmentReader(DirectoryReader.open(iw, true));\n    for (int i = 0; i < ir.maxDoc(); i++) {\n      Document doc = ir.document(i);\n      assertEquals(10, doc.getFields().size());\n      for (int j = 0; j < 10; j++) {\n        assertEquals(Integer.toString(j), doc.get(Integer.toString(j)));\n      }\n    }\n\n    IOUtils.close(iw, ir, everything);\n    IOUtils.close(dirs);\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testMismatchedFields().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testMismatchedFields().mjava","sourceNew":"  /** mix up field numbers, merge, and check that data is correct */\n  public void testMismatchedFields() throws Exception {\n    Directory dirs[] = new Directory[10];\n    for (int i = 0; i < dirs.length; i++) {\n      Directory dir = newDirectory();\n      IndexWriterConfig iwc = new IndexWriterConfig(null);\n      IndexWriter iw = new IndexWriter(dir, iwc);\n      Document doc = new Document();\n      for (int j = 0; j < 10; j++) {\n        // add fields where name=value (e.g. 3=3) so we can detect if stuff gets screwed up.\n        doc.add(new StringField(Integer.toString(j), Integer.toString(j), Field.Store.YES));\n      }\n      for (int j = 0; j < 10; j++) {\n        iw.addDocument(doc);\n      }\n      \n      DirectoryReader reader = DirectoryReader.open(iw);\n      // mix up fields explicitly\n      if (random().nextBoolean()) {\n        reader = new MismatchedDirectoryReader(reader, random());\n      }\n      dirs[i] = newDirectory();\n      IndexWriter adder = new IndexWriter(dirs[i], new IndexWriterConfig(null));\n      TestUtil.addIndexesSlowly(adder, reader);\n      adder.commit();\n      adder.close();\n      \n      IOUtils.close(reader, iw, dir);\n    }\n    \n    Directory everything = newDirectory();\n    IndexWriter iw = new IndexWriter(everything, new IndexWriterConfig(null));\n    iw.addIndexes(dirs);\n    iw.forceMerge(1);\n    \n    LeafReader ir = getOnlyLeafReader(DirectoryReader.open(iw));\n    for (int i = 0; i < ir.maxDoc(); i++) {\n      Document doc = ir.document(i);\n      assertEquals(10, doc.getFields().size());\n      for (int j = 0; j < 10; j++) {\n        assertEquals(Integer.toString(j), doc.get(Integer.toString(j)));\n      }\n    }\n\n    IOUtils.close(iw, ir, everything);\n    IOUtils.close(dirs);\n  }\n\n","sourceOld":"  /** mix up field numbers, merge, and check that data is correct */\n  public void testMismatchedFields() throws Exception {\n    Directory dirs[] = new Directory[10];\n    for (int i = 0; i < dirs.length; i++) {\n      Directory dir = newDirectory();\n      IndexWriterConfig iwc = new IndexWriterConfig(null);\n      IndexWriter iw = new IndexWriter(dir, iwc);\n      Document doc = new Document();\n      for (int j = 0; j < 10; j++) {\n        // add fields where name=value (e.g. 3=3) so we can detect if stuff gets screwed up.\n        doc.add(new StringField(Integer.toString(j), Integer.toString(j), Field.Store.YES));\n      }\n      for (int j = 0; j < 10; j++) {\n        iw.addDocument(doc);\n      }\n      \n      DirectoryReader reader = DirectoryReader.open(iw);\n      // mix up fields explicitly\n      if (random().nextBoolean()) {\n        reader = new MismatchedDirectoryReader(reader, random());\n      }\n      dirs[i] = newDirectory();\n      IndexWriter adder = new IndexWriter(dirs[i], new IndexWriterConfig(null));\n      TestUtil.addIndexesSlowly(adder, reader);\n      adder.commit();\n      adder.close();\n      \n      IOUtils.close(reader, iw, dir);\n    }\n    \n    Directory everything = newDirectory();\n    IndexWriter iw = new IndexWriter(everything, new IndexWriterConfig(null));\n    iw.addIndexes(dirs);\n    iw.forceMerge(1);\n    \n    LeafReader ir = getOnlySegmentReader(DirectoryReader.open(iw));\n    for (int i = 0; i < ir.maxDoc(); i++) {\n      Document doc = ir.document(i);\n      assertEquals(10, doc.getFields().size());\n      for (int j = 0; j < 10; j++) {\n        assertEquals(Integer.toString(j), doc.get(Integer.toString(j)));\n      }\n    }\n\n    IOUtils.close(iw, ir, everything);\n    IOUtils.close(dirs);\n  }\n\n","bugFix":["2a1862266772deb28cdcb7d996b64d2177022687"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dbc046116d49cd3d0c50f7169cabaa295bc23a4a","date":1552989114,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testMismatchedFields().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testMismatchedFields().mjava","sourceNew":"  /** mix up field numbers, merge, and check that data is correct */\n  public void testMismatchedFields() throws Exception {\n    Directory dirs[] = new Directory[10];\n    for (int i = 0; i < dirs.length; i++) {\n      Directory dir = newDirectory();\n      IndexWriterConfig iwc = new IndexWriterConfig(null);\n      IndexWriter iw = new IndexWriter(dir, iwc);\n      Document doc = new Document();\n      for (int j = 0; j < 10; j++) {\n        // add fields where name=value (e.g. 3=3) so we can detect if stuff gets screwed up.\n        doc.add(new StringField(Integer.toString(j), Integer.toString(j), Field.Store.YES));\n      }\n      for (int j = 0; j < 10; j++) {\n        iw.addDocument(doc);\n      }\n      \n      DirectoryReader reader = maybeWrapWithMergingReader(DirectoryReader.open(iw));\n      // mix up fields explicitly\n      if (random().nextBoolean()) {\n        reader = new MismatchedDirectoryReader(reader, random());\n      }\n      dirs[i] = newDirectory();\n      IndexWriter adder = new IndexWriter(dirs[i], new IndexWriterConfig(null));\n      TestUtil.addIndexesSlowly(adder, reader);\n      adder.commit();\n      adder.close();\n      \n      IOUtils.close(reader, iw, dir);\n    }\n    \n    Directory everything = newDirectory();\n    IndexWriter iw = new IndexWriter(everything, new IndexWriterConfig(null));\n    iw.addIndexes(dirs);\n    iw.forceMerge(1);\n    \n    LeafReader ir = getOnlyLeafReader(DirectoryReader.open(iw));\n    for (int i = 0; i < ir.maxDoc(); i++) {\n      Document doc = ir.document(i);\n      assertEquals(10, doc.getFields().size());\n      for (int j = 0; j < 10; j++) {\n        assertEquals(Integer.toString(j), doc.get(Integer.toString(j)));\n      }\n    }\n\n    IOUtils.close(iw, ir, everything);\n    IOUtils.close(dirs);\n  }\n\n","sourceOld":"  /** mix up field numbers, merge, and check that data is correct */\n  public void testMismatchedFields() throws Exception {\n    Directory dirs[] = new Directory[10];\n    for (int i = 0; i < dirs.length; i++) {\n      Directory dir = newDirectory();\n      IndexWriterConfig iwc = new IndexWriterConfig(null);\n      IndexWriter iw = new IndexWriter(dir, iwc);\n      Document doc = new Document();\n      for (int j = 0; j < 10; j++) {\n        // add fields where name=value (e.g. 3=3) so we can detect if stuff gets screwed up.\n        doc.add(new StringField(Integer.toString(j), Integer.toString(j), Field.Store.YES));\n      }\n      for (int j = 0; j < 10; j++) {\n        iw.addDocument(doc);\n      }\n      \n      DirectoryReader reader = DirectoryReader.open(iw);\n      // mix up fields explicitly\n      if (random().nextBoolean()) {\n        reader = new MismatchedDirectoryReader(reader, random());\n      }\n      dirs[i] = newDirectory();\n      IndexWriter adder = new IndexWriter(dirs[i], new IndexWriterConfig(null));\n      TestUtil.addIndexesSlowly(adder, reader);\n      adder.commit();\n      adder.close();\n      \n      IOUtils.close(reader, iw, dir);\n    }\n    \n    Directory everything = newDirectory();\n    IndexWriter iw = new IndexWriter(everything, new IndexWriterConfig(null));\n    iw.addIndexes(dirs);\n    iw.forceMerge(1);\n    \n    LeafReader ir = getOnlyLeafReader(DirectoryReader.open(iw));\n    for (int i = 0; i < ir.maxDoc(); i++) {\n      Document doc = ir.document(i);\n      assertEquals(10, doc.getFields().size());\n      for (int j = 0; j < 10; j++) {\n        assertEquals(Integer.toString(j), doc.get(Integer.toString(j)));\n      }\n    }\n\n    IOUtils.close(iw, ir, everything);\n    IOUtils.close(dirs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["2a1862266772deb28cdcb7d996b64d2177022687"],"2a1862266772deb28cdcb7d996b64d2177022687":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dbc046116d49cd3d0c50f7169cabaa295bc23a4a":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa":["ef658003003b32165df5d5016addcee1da98e4a2"],"ef658003003b32165df5d5016addcee1da98e4a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dbc046116d49cd3d0c50f7169cabaa295bc23a4a"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa"]},"commit2Childs":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["dbc046116d49cd3d0c50f7169cabaa295bc23a4a"],"2a1862266772deb28cdcb7d996b64d2177022687":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ef658003003b32165df5d5016addcee1da98e4a2"],"dbc046116d49cd3d0c50f7169cabaa295bc23a4a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"ef658003003b32165df5d5016addcee1da98e4a2":["0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["2a1862266772deb28cdcb7d996b64d2177022687"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}