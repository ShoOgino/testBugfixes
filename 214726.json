{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCartesianProductStream().mjava","commits":[{"id":"d492b24eb91b29b3fb6bca5b158bec326fbc12df","date":1490042446,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCartesianProductStream().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCartesianProductStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_ss\", \"a\", \"a_ss\", \"b\", \"a_ss\", \"c\", \"a_ss\", \"d\", \"a_ss\", \"e\", \"b_ls\", \"1\", \"b_ls\", \"2\", \"b_ls\", \"3\")\n        .add(id, \"1\", \"a_ss\", \"a\", \"a_ss\", \"b\", \"a_ss\", \"c\", \"a_ss\", \"d\", \"a_ss\", \"e\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"cartesian\", CartesianProductStream.class);\n      \n    // single selection, no sort\n    stream = factory.constructStream(\"cartesian(\"\n                                   +   \"search(collection1, q=*:*, fl=\\\"id,a_ss\\\", sort=\\\"id asc\\\"),\"\n                                   +   \"a_ss\"\n                                   + \")\");\n    tuples = getTuples(stream);\n   \n    assertEquals(10, tuples.size());\n    assertOrder(tuples, 0,0,0,0,0,1,1,1,1,1);\n    assertEquals(\"a\", tuples.get(0).get(\"a_ss\"));\n    assertEquals(\"c\", tuples.get(2).get(\"a_ss\"));\n    assertEquals(\"a\", tuples.get(5).get(\"a_ss\"));\n    assertEquals(\"c\", tuples.get(7).get(\"a_ss\"));\n\n    // single selection, sort\n    stream = factory.constructStream(\"cartesian(\"\n        +   \"search(collection1, q=*:*, fl=\\\"id,a_ss\\\", sort=\\\"id asc\\\"),\"\n        +   \"a_ss,\"\n        +   \"productSort=\\\"a_ss DESC\\\"\"\n        + \")\");\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrder(tuples, 0,0,0,0,0,1,1,1,1,1);\n    assertEquals(\"e\", tuples.get(0).get(\"a_ss\"));\n    assertEquals(\"c\", tuples.get(2).get(\"a_ss\"));\n    assertEquals(\"e\", tuples.get(5).get(\"a_ss\"));\n    assertEquals(\"c\", tuples.get(7).get(\"a_ss\"));\n    \n    // multi selection, sort\n    stream = factory.constructStream(\"cartesian(\"\n        +   \"search(collection1, q=*:*, fl=\\\"id,a_ss,b_ls\\\", sort=\\\"id asc\\\"),\"\n        +   \"a_ss,\"\n        +   \"b_ls,\"\n        +   \"productSort=\\\"a_ss ASC\\\"\"\n        + \")\");\n    tuples = getTuples(stream);\n    \n    assertEquals(20, tuples.size()); // (5 * 3) + 5\n    assertOrder(tuples, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1);\n    assertEquals(\"a\", tuples.get(0).get(\"a_ss\"));\n    assertEquals(1L, tuples.get(0).get(\"b_ls\"));\n    assertEquals(\"a\", tuples.get(1).get(\"a_ss\"));\n    assertEquals(2L, tuples.get(1).get(\"b_ls\"));\n    assertEquals(\"a\", tuples.get(2).get(\"a_ss\"));\n    assertEquals(3L, tuples.get(2).get(\"b_ls\"));\n    \n    assertEquals(\"b\", tuples.get(3).get(\"a_ss\"));\n    assertEquals(1L, tuples.get(3).get(\"b_ls\"));\n    assertEquals(\"b\", tuples.get(4).get(\"a_ss\"));\n    assertEquals(2L, tuples.get(4).get(\"b_ls\"));\n    assertEquals(\"b\", tuples.get(5).get(\"a_ss\"));\n    assertEquals(3L, tuples.get(5).get(\"b_ls\"));\n    \n    // multi selection, sort\n    stream = factory.constructStream(\"cartesian(\"\n    +   \"search(collection1, q=*:*, fl=\\\"id,a_ss,b_ls\\\", sort=\\\"id asc\\\"),\"\n    +   \"a_ss,\"\n    +   \"b_ls,\"\n    +   \"productSort=\\\"a_ss ASC, b_ls DESC\\\"\"\n    + \")\");\n    tuples = getTuples(stream);\n    \n    assertEquals(20, tuples.size()); // (5 * 3) + 5\n    assertOrder(tuples, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1);\n    assertEquals(\"a\", tuples.get(0).get(\"a_ss\"));\n    assertEquals(3L, tuples.get(0).get(\"b_ls\"));\n    assertEquals(\"a\", tuples.get(1).get(\"a_ss\"));\n    assertEquals(2L, tuples.get(1).get(\"b_ls\"));\n    assertEquals(\"a\", tuples.get(2).get(\"a_ss\"));\n    assertEquals(1L, tuples.get(2).get(\"b_ls\"));\n    \n    assertEquals(\"b\", tuples.get(3).get(\"a_ss\"));\n    assertEquals(3L, tuples.get(3).get(\"b_ls\"));\n    assertEquals(\"b\", tuples.get(4).get(\"a_ss\"));\n    assertEquals(2L, tuples.get(4).get(\"b_ls\"));\n    assertEquals(\"b\", tuples.get(5).get(\"a_ss\"));\n    assertEquals(1L, tuples.get(5).get(\"b_ls\"));\n\n    // multi selection, sort\n    stream = factory.constructStream(\"cartesian(\"\n    +   \"search(collection1, q=*:*, fl=\\\"id,a_ss,b_ls\\\", sort=\\\"id asc\\\"),\"\n    +   \"a_ss,\"\n    +   \"b_ls,\"\n    +   \"productSort=\\\"b_ls DESC\\\"\"\n    + \")\");\n    tuples = getTuples(stream);\n    \n    assertEquals(20, tuples.size()); // (5 * 3) + 5\n    assertOrder(tuples, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1);\n    assertEquals(\"a\", tuples.get(0).get(\"a_ss\"));\n    assertEquals(3L, tuples.get(0).get(\"b_ls\"));\n    assertEquals(\"b\", tuples.get(1).get(\"a_ss\"));\n    assertEquals(3L, tuples.get(1).get(\"b_ls\"));\n    assertEquals(\"c\", tuples.get(2).get(\"a_ss\"));\n    assertEquals(3L, tuples.get(2).get(\"b_ls\"));\n    assertEquals(\"d\", tuples.get(3).get(\"a_ss\"));\n    assertEquals(3L, tuples.get(3).get(\"b_ls\"));\n    assertEquals(\"e\", tuples.get(4).get(\"a_ss\"));\n    assertEquals(3L, tuples.get(4).get(\"b_ls\"));\n    \n    assertEquals(\"a\", tuples.get(5).get(\"a_ss\"));\n    assertEquals(2L, tuples.get(5).get(\"b_ls\"));\n    assertEquals(\"b\", tuples.get(6).get(\"a_ss\"));\n    assertEquals(2L, tuples.get(6).get(\"b_ls\"));\n    assertEquals(\"c\", tuples.get(7).get(\"a_ss\"));\n    assertEquals(2L, tuples.get(7).get(\"b_ls\"));\n    assertEquals(\"d\", tuples.get(8).get(\"a_ss\"));\n    assertEquals(2L, tuples.get(8).get(\"b_ls\"));\n    assertEquals(\"e\", tuples.get(9).get(\"a_ss\"));\n    assertEquals(2L, tuples.get(9).get(\"b_ls\"));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"869bbd0c59fee20268facd5a2e0d3c77e34500ed","date":1490280012,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCartesianProductStream().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCartesianProductStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_ss\", \"a\", \"a_ss\", \"b\", \"a_ss\", \"c\", \"a_ss\", \"d\", \"a_ss\", \"e\", \"b_ls\", \"1\", \"b_ls\", \"2\", \"b_ls\", \"3\")\n        .add(id, \"1\", \"a_ss\", \"a\", \"a_ss\", \"b\", \"a_ss\", \"c\", \"a_ss\", \"d\", \"a_ss\", \"e\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"cartesian\", CartesianProductStream.class);\n      \n    // single selection, no sort\n    stream = factory.constructStream(\"cartesian(\"\n                                   +   \"search(collection1, q=*:*, fl=\\\"id,a_ss\\\", sort=\\\"id asc\\\"),\"\n                                   +   \"a_ss\"\n                                   + \")\");\n    tuples = getTuples(stream);\n   \n    assertEquals(10, tuples.size());\n    assertOrder(tuples, 0,0,0,0,0,1,1,1,1,1);\n    assertEquals(\"a\", tuples.get(0).get(\"a_ss\"));\n    assertEquals(\"c\", tuples.get(2).get(\"a_ss\"));\n    assertEquals(\"a\", tuples.get(5).get(\"a_ss\"));\n    assertEquals(\"c\", tuples.get(7).get(\"a_ss\"));\n\n    // single selection, sort\n    stream = factory.constructStream(\"cartesian(\"\n        +   \"search(collection1, q=*:*, fl=\\\"id,a_ss\\\", sort=\\\"id asc\\\"),\"\n        +   \"a_ss,\"\n        +   \"productSort=\\\"a_ss DESC\\\"\"\n        + \")\");\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrder(tuples, 0,0,0,0,0,1,1,1,1,1);\n    assertEquals(\"e\", tuples.get(0).get(\"a_ss\"));\n    assertEquals(\"c\", tuples.get(2).get(\"a_ss\"));\n    assertEquals(\"e\", tuples.get(5).get(\"a_ss\"));\n    assertEquals(\"c\", tuples.get(7).get(\"a_ss\"));\n    \n    // multi selection, sort\n    stream = factory.constructStream(\"cartesian(\"\n        +   \"search(collection1, q=*:*, fl=\\\"id,a_ss,b_ls\\\", sort=\\\"id asc\\\"),\"\n        +   \"a_ss,\"\n        +   \"b_ls,\"\n        +   \"productSort=\\\"a_ss ASC\\\"\"\n        + \")\");\n    tuples = getTuples(stream);\n    \n    assertEquals(20, tuples.size()); // (5 * 3) + 5\n    assertOrder(tuples, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1);\n    assertEquals(\"a\", tuples.get(0).get(\"a_ss\"));\n    assertEquals(1L, tuples.get(0).get(\"b_ls\"));\n    assertEquals(\"a\", tuples.get(1).get(\"a_ss\"));\n    assertEquals(2L, tuples.get(1).get(\"b_ls\"));\n    assertEquals(\"a\", tuples.get(2).get(\"a_ss\"));\n    assertEquals(3L, tuples.get(2).get(\"b_ls\"));\n    \n    assertEquals(\"b\", tuples.get(3).get(\"a_ss\"));\n    assertEquals(1L, tuples.get(3).get(\"b_ls\"));\n    assertEquals(\"b\", tuples.get(4).get(\"a_ss\"));\n    assertEquals(2L, tuples.get(4).get(\"b_ls\"));\n    assertEquals(\"b\", tuples.get(5).get(\"a_ss\"));\n    assertEquals(3L, tuples.get(5).get(\"b_ls\"));\n    \n    // multi selection, sort\n    stream = factory.constructStream(\"cartesian(\"\n    +   \"search(collection1, q=*:*, fl=\\\"id,a_ss,b_ls\\\", sort=\\\"id asc\\\"),\"\n    +   \"a_ss,\"\n    +   \"b_ls,\"\n    +   \"productSort=\\\"a_ss ASC, b_ls DESC\\\"\"\n    + \")\");\n    tuples = getTuples(stream);\n    \n    assertEquals(20, tuples.size()); // (5 * 3) + 5\n    assertOrder(tuples, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1);\n    assertEquals(\"a\", tuples.get(0).get(\"a_ss\"));\n    assertEquals(3L, tuples.get(0).get(\"b_ls\"));\n    assertEquals(\"a\", tuples.get(1).get(\"a_ss\"));\n    assertEquals(2L, tuples.get(1).get(\"b_ls\"));\n    assertEquals(\"a\", tuples.get(2).get(\"a_ss\"));\n    assertEquals(1L, tuples.get(2).get(\"b_ls\"));\n    \n    assertEquals(\"b\", tuples.get(3).get(\"a_ss\"));\n    assertEquals(3L, tuples.get(3).get(\"b_ls\"));\n    assertEquals(\"b\", tuples.get(4).get(\"a_ss\"));\n    assertEquals(2L, tuples.get(4).get(\"b_ls\"));\n    assertEquals(\"b\", tuples.get(5).get(\"a_ss\"));\n    assertEquals(1L, tuples.get(5).get(\"b_ls\"));\n\n    // multi selection, sort\n    stream = factory.constructStream(\"cartesian(\"\n    +   \"search(collection1, q=*:*, fl=\\\"id,a_ss,b_ls\\\", sort=\\\"id asc\\\"),\"\n    +   \"a_ss,\"\n    +   \"b_ls,\"\n    +   \"productSort=\\\"b_ls DESC\\\"\"\n    + \")\");\n    tuples = getTuples(stream);\n    \n    assertEquals(20, tuples.size()); // (5 * 3) + 5\n    assertOrder(tuples, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1);\n    assertEquals(\"a\", tuples.get(0).get(\"a_ss\"));\n    assertEquals(3L, tuples.get(0).get(\"b_ls\"));\n    assertEquals(\"b\", tuples.get(1).get(\"a_ss\"));\n    assertEquals(3L, tuples.get(1).get(\"b_ls\"));\n    assertEquals(\"c\", tuples.get(2).get(\"a_ss\"));\n    assertEquals(3L, tuples.get(2).get(\"b_ls\"));\n    assertEquals(\"d\", tuples.get(3).get(\"a_ss\"));\n    assertEquals(3L, tuples.get(3).get(\"b_ls\"));\n    assertEquals(\"e\", tuples.get(4).get(\"a_ss\"));\n    assertEquals(3L, tuples.get(4).get(\"b_ls\"));\n    \n    assertEquals(\"a\", tuples.get(5).get(\"a_ss\"));\n    assertEquals(2L, tuples.get(5).get(\"b_ls\"));\n    assertEquals(\"b\", tuples.get(6).get(\"a_ss\"));\n    assertEquals(2L, tuples.get(6).get(\"b_ls\"));\n    assertEquals(\"c\", tuples.get(7).get(\"a_ss\"));\n    assertEquals(2L, tuples.get(7).get(\"b_ls\"));\n    assertEquals(\"d\", tuples.get(8).get(\"a_ss\"));\n    assertEquals(2L, tuples.get(8).get(\"b_ls\"));\n    assertEquals(\"e\", tuples.get(9).get(\"a_ss\"));\n    assertEquals(2L, tuples.get(9).get(\"b_ls\"));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c405288c4553ffb50ab8ca5adbdde9881bcec4e4","date":1491938682,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCartesianProductStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCartesianProductStream().mjava","sourceNew":"  @Test\n  public void testCartesianProductStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_ss\", \"a\", \"a_ss\", \"b\", \"a_ss\", \"c\", \"a_ss\", \"d\", \"a_ss\", \"e\", \"b_ls\", \"1\", \"b_ls\", \"2\", \"b_ls\", \"3\")\n        .add(id, \"1\", \"a_ss\", \"a\", \"a_ss\", \"b\", \"a_ss\", \"c\", \"a_ss\", \"d\", \"a_ss\", \"e\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"cartesian\", CartesianProductStream.class);\n      \n    // single selection, no sort\n    try {\n      stream = factory.constructStream(\"cartesian(\"\n          + \"search(collection1, q=*:*, fl=\\\"id,a_ss\\\", sort=\\\"id asc\\\"),\"\n          + \"a_ss\"\n          + \")\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assertEquals(10, tuples.size());\n      assertOrder(tuples, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1);\n      assertEquals(\"a\", tuples.get(0).get(\"a_ss\"));\n      assertEquals(\"c\", tuples.get(2).get(\"a_ss\"));\n      assertEquals(\"a\", tuples.get(5).get(\"a_ss\"));\n      assertEquals(\"c\", tuples.get(7).get(\"a_ss\"));\n\n      // single selection, sort\n      stream = factory.constructStream(\"cartesian(\"\n          + \"search(collection1, q=*:*, fl=\\\"id,a_ss\\\", sort=\\\"id asc\\\"),\"\n          + \"a_ss,\"\n          + \"productSort=\\\"a_ss DESC\\\"\"\n          + \")\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assertEquals(10, tuples.size());\n      assertOrder(tuples, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1);\n      assertEquals(\"e\", tuples.get(0).get(\"a_ss\"));\n      assertEquals(\"c\", tuples.get(2).get(\"a_ss\"));\n      assertEquals(\"e\", tuples.get(5).get(\"a_ss\"));\n      assertEquals(\"c\", tuples.get(7).get(\"a_ss\"));\n\n      // multi selection, sort\n      stream = factory.constructStream(\"cartesian(\"\n          + \"search(collection1, q=*:*, fl=\\\"id,a_ss,b_ls\\\", sort=\\\"id asc\\\"),\"\n          + \"a_ss,\"\n          + \"b_ls,\"\n          + \"productSort=\\\"a_ss ASC\\\"\"\n          + \")\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assertEquals(20, tuples.size()); // (5 * 3) + 5\n      assertOrder(tuples, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1);\n      assertEquals(\"a\", tuples.get(0).get(\"a_ss\"));\n      assertEquals(1L, tuples.get(0).get(\"b_ls\"));\n      assertEquals(\"a\", tuples.get(1).get(\"a_ss\"));\n      assertEquals(2L, tuples.get(1).get(\"b_ls\"));\n      assertEquals(\"a\", tuples.get(2).get(\"a_ss\"));\n      assertEquals(3L, tuples.get(2).get(\"b_ls\"));\n\n      assertEquals(\"b\", tuples.get(3).get(\"a_ss\"));\n      assertEquals(1L, tuples.get(3).get(\"b_ls\"));\n      assertEquals(\"b\", tuples.get(4).get(\"a_ss\"));\n      assertEquals(2L, tuples.get(4).get(\"b_ls\"));\n      assertEquals(\"b\", tuples.get(5).get(\"a_ss\"));\n      assertEquals(3L, tuples.get(5).get(\"b_ls\"));\n\n      // multi selection, sort\n      stream = factory.constructStream(\"cartesian(\"\n          + \"search(collection1, q=*:*, fl=\\\"id,a_ss,b_ls\\\", sort=\\\"id asc\\\"),\"\n          + \"a_ss,\"\n          + \"b_ls,\"\n          + \"productSort=\\\"a_ss ASC, b_ls DESC\\\"\"\n          + \")\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assertEquals(20, tuples.size()); // (5 * 3) + 5\n      assertOrder(tuples, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1);\n      assertEquals(\"a\", tuples.get(0).get(\"a_ss\"));\n      assertEquals(3L, tuples.get(0).get(\"b_ls\"));\n      assertEquals(\"a\", tuples.get(1).get(\"a_ss\"));\n      assertEquals(2L, tuples.get(1).get(\"b_ls\"));\n      assertEquals(\"a\", tuples.get(2).get(\"a_ss\"));\n      assertEquals(1L, tuples.get(2).get(\"b_ls\"));\n\n      assertEquals(\"b\", tuples.get(3).get(\"a_ss\"));\n      assertEquals(3L, tuples.get(3).get(\"b_ls\"));\n      assertEquals(\"b\", tuples.get(4).get(\"a_ss\"));\n      assertEquals(2L, tuples.get(4).get(\"b_ls\"));\n      assertEquals(\"b\", tuples.get(5).get(\"a_ss\"));\n      assertEquals(1L, tuples.get(5).get(\"b_ls\"));\n\n      // multi selection, sort\n      stream = factory.constructStream(\"cartesian(\"\n          + \"search(collection1, q=*:*, fl=\\\"id,a_ss,b_ls\\\", sort=\\\"id asc\\\"),\"\n          + \"a_ss,\"\n          + \"b_ls,\"\n          + \"productSort=\\\"b_ls DESC\\\"\"\n          + \")\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assertEquals(20, tuples.size()); // (5 * 3) + 5\n      assertOrder(tuples, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1);\n      assertEquals(\"a\", tuples.get(0).get(\"a_ss\"));\n      assertEquals(3L, tuples.get(0).get(\"b_ls\"));\n      assertEquals(\"b\", tuples.get(1).get(\"a_ss\"));\n      assertEquals(3L, tuples.get(1).get(\"b_ls\"));\n      assertEquals(\"c\", tuples.get(2).get(\"a_ss\"));\n      assertEquals(3L, tuples.get(2).get(\"b_ls\"));\n      assertEquals(\"d\", tuples.get(3).get(\"a_ss\"));\n      assertEquals(3L, tuples.get(3).get(\"b_ls\"));\n      assertEquals(\"e\", tuples.get(4).get(\"a_ss\"));\n      assertEquals(3L, tuples.get(4).get(\"b_ls\"));\n\n      assertEquals(\"a\", tuples.get(5).get(\"a_ss\"));\n      assertEquals(2L, tuples.get(5).get(\"b_ls\"));\n      assertEquals(\"b\", tuples.get(6).get(\"a_ss\"));\n      assertEquals(2L, tuples.get(6).get(\"b_ls\"));\n      assertEquals(\"c\", tuples.get(7).get(\"a_ss\"));\n      assertEquals(2L, tuples.get(7).get(\"b_ls\"));\n      assertEquals(\"d\", tuples.get(8).get(\"a_ss\"));\n      assertEquals(2L, tuples.get(8).get(\"b_ls\"));\n      assertEquals(\"e\", tuples.get(9).get(\"a_ss\"));\n      assertEquals(2L, tuples.get(9).get(\"b_ls\"));\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCartesianProductStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_ss\", \"a\", \"a_ss\", \"b\", \"a_ss\", \"c\", \"a_ss\", \"d\", \"a_ss\", \"e\", \"b_ls\", \"1\", \"b_ls\", \"2\", \"b_ls\", \"3\")\n        .add(id, \"1\", \"a_ss\", \"a\", \"a_ss\", \"b\", \"a_ss\", \"c\", \"a_ss\", \"d\", \"a_ss\", \"e\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"cartesian\", CartesianProductStream.class);\n      \n    // single selection, no sort\n    stream = factory.constructStream(\"cartesian(\"\n                                   +   \"search(collection1, q=*:*, fl=\\\"id,a_ss\\\", sort=\\\"id asc\\\"),\"\n                                   +   \"a_ss\"\n                                   + \")\");\n    tuples = getTuples(stream);\n   \n    assertEquals(10, tuples.size());\n    assertOrder(tuples, 0,0,0,0,0,1,1,1,1,1);\n    assertEquals(\"a\", tuples.get(0).get(\"a_ss\"));\n    assertEquals(\"c\", tuples.get(2).get(\"a_ss\"));\n    assertEquals(\"a\", tuples.get(5).get(\"a_ss\"));\n    assertEquals(\"c\", tuples.get(7).get(\"a_ss\"));\n\n    // single selection, sort\n    stream = factory.constructStream(\"cartesian(\"\n        +   \"search(collection1, q=*:*, fl=\\\"id,a_ss\\\", sort=\\\"id asc\\\"),\"\n        +   \"a_ss,\"\n        +   \"productSort=\\\"a_ss DESC\\\"\"\n        + \")\");\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrder(tuples, 0,0,0,0,0,1,1,1,1,1);\n    assertEquals(\"e\", tuples.get(0).get(\"a_ss\"));\n    assertEquals(\"c\", tuples.get(2).get(\"a_ss\"));\n    assertEquals(\"e\", tuples.get(5).get(\"a_ss\"));\n    assertEquals(\"c\", tuples.get(7).get(\"a_ss\"));\n    \n    // multi selection, sort\n    stream = factory.constructStream(\"cartesian(\"\n        +   \"search(collection1, q=*:*, fl=\\\"id,a_ss,b_ls\\\", sort=\\\"id asc\\\"),\"\n        +   \"a_ss,\"\n        +   \"b_ls,\"\n        +   \"productSort=\\\"a_ss ASC\\\"\"\n        + \")\");\n    tuples = getTuples(stream);\n    \n    assertEquals(20, tuples.size()); // (5 * 3) + 5\n    assertOrder(tuples, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1);\n    assertEquals(\"a\", tuples.get(0).get(\"a_ss\"));\n    assertEquals(1L, tuples.get(0).get(\"b_ls\"));\n    assertEquals(\"a\", tuples.get(1).get(\"a_ss\"));\n    assertEquals(2L, tuples.get(1).get(\"b_ls\"));\n    assertEquals(\"a\", tuples.get(2).get(\"a_ss\"));\n    assertEquals(3L, tuples.get(2).get(\"b_ls\"));\n    \n    assertEquals(\"b\", tuples.get(3).get(\"a_ss\"));\n    assertEquals(1L, tuples.get(3).get(\"b_ls\"));\n    assertEquals(\"b\", tuples.get(4).get(\"a_ss\"));\n    assertEquals(2L, tuples.get(4).get(\"b_ls\"));\n    assertEquals(\"b\", tuples.get(5).get(\"a_ss\"));\n    assertEquals(3L, tuples.get(5).get(\"b_ls\"));\n    \n    // multi selection, sort\n    stream = factory.constructStream(\"cartesian(\"\n    +   \"search(collection1, q=*:*, fl=\\\"id,a_ss,b_ls\\\", sort=\\\"id asc\\\"),\"\n    +   \"a_ss,\"\n    +   \"b_ls,\"\n    +   \"productSort=\\\"a_ss ASC, b_ls DESC\\\"\"\n    + \")\");\n    tuples = getTuples(stream);\n    \n    assertEquals(20, tuples.size()); // (5 * 3) + 5\n    assertOrder(tuples, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1);\n    assertEquals(\"a\", tuples.get(0).get(\"a_ss\"));\n    assertEquals(3L, tuples.get(0).get(\"b_ls\"));\n    assertEquals(\"a\", tuples.get(1).get(\"a_ss\"));\n    assertEquals(2L, tuples.get(1).get(\"b_ls\"));\n    assertEquals(\"a\", tuples.get(2).get(\"a_ss\"));\n    assertEquals(1L, tuples.get(2).get(\"b_ls\"));\n    \n    assertEquals(\"b\", tuples.get(3).get(\"a_ss\"));\n    assertEquals(3L, tuples.get(3).get(\"b_ls\"));\n    assertEquals(\"b\", tuples.get(4).get(\"a_ss\"));\n    assertEquals(2L, tuples.get(4).get(\"b_ls\"));\n    assertEquals(\"b\", tuples.get(5).get(\"a_ss\"));\n    assertEquals(1L, tuples.get(5).get(\"b_ls\"));\n\n    // multi selection, sort\n    stream = factory.constructStream(\"cartesian(\"\n    +   \"search(collection1, q=*:*, fl=\\\"id,a_ss,b_ls\\\", sort=\\\"id asc\\\"),\"\n    +   \"a_ss,\"\n    +   \"b_ls,\"\n    +   \"productSort=\\\"b_ls DESC\\\"\"\n    + \")\");\n    tuples = getTuples(stream);\n    \n    assertEquals(20, tuples.size()); // (5 * 3) + 5\n    assertOrder(tuples, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1);\n    assertEquals(\"a\", tuples.get(0).get(\"a_ss\"));\n    assertEquals(3L, tuples.get(0).get(\"b_ls\"));\n    assertEquals(\"b\", tuples.get(1).get(\"a_ss\"));\n    assertEquals(3L, tuples.get(1).get(\"b_ls\"));\n    assertEquals(\"c\", tuples.get(2).get(\"a_ss\"));\n    assertEquals(3L, tuples.get(2).get(\"b_ls\"));\n    assertEquals(\"d\", tuples.get(3).get(\"a_ss\"));\n    assertEquals(3L, tuples.get(3).get(\"b_ls\"));\n    assertEquals(\"e\", tuples.get(4).get(\"a_ss\"));\n    assertEquals(3L, tuples.get(4).get(\"b_ls\"));\n    \n    assertEquals(\"a\", tuples.get(5).get(\"a_ss\"));\n    assertEquals(2L, tuples.get(5).get(\"b_ls\"));\n    assertEquals(\"b\", tuples.get(6).get(\"a_ss\"));\n    assertEquals(2L, tuples.get(6).get(\"b_ls\"));\n    assertEquals(\"c\", tuples.get(7).get(\"a_ss\"));\n    assertEquals(2L, tuples.get(7).get(\"b_ls\"));\n    assertEquals(\"d\", tuples.get(8).get(\"a_ss\"));\n    assertEquals(2L, tuples.get(8).get(\"b_ls\"));\n    assertEquals(\"e\", tuples.get(9).get(\"a_ss\"));\n    assertEquals(2L, tuples.get(9).get(\"b_ls\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCartesianProductStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCartesianProductStream().mjava","sourceNew":"  @Test\n  public void testCartesianProductStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_ss\", \"a\", \"a_ss\", \"b\", \"a_ss\", \"c\", \"a_ss\", \"d\", \"a_ss\", \"e\", \"b_ls\", \"1\", \"b_ls\", \"2\", \"b_ls\", \"3\")\n        .add(id, \"1\", \"a_ss\", \"a\", \"a_ss\", \"b\", \"a_ss\", \"c\", \"a_ss\", \"d\", \"a_ss\", \"e\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"cartesian\", CartesianProductStream.class);\n      \n    // single selection, no sort\n    try {\n      stream = factory.constructStream(\"cartesian(\"\n          + \"search(collection1, q=*:*, fl=\\\"id,a_ss\\\", sort=\\\"id asc\\\"),\"\n          + \"a_ss\"\n          + \")\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assertEquals(10, tuples.size());\n      assertOrder(tuples, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1);\n      assertEquals(\"a\", tuples.get(0).get(\"a_ss\"));\n      assertEquals(\"c\", tuples.get(2).get(\"a_ss\"));\n      assertEquals(\"a\", tuples.get(5).get(\"a_ss\"));\n      assertEquals(\"c\", tuples.get(7).get(\"a_ss\"));\n\n      // single selection, sort\n      stream = factory.constructStream(\"cartesian(\"\n          + \"search(collection1, q=*:*, fl=\\\"id,a_ss\\\", sort=\\\"id asc\\\"),\"\n          + \"a_ss,\"\n          + \"productSort=\\\"a_ss DESC\\\"\"\n          + \")\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assertEquals(10, tuples.size());\n      assertOrder(tuples, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1);\n      assertEquals(\"e\", tuples.get(0).get(\"a_ss\"));\n      assertEquals(\"c\", tuples.get(2).get(\"a_ss\"));\n      assertEquals(\"e\", tuples.get(5).get(\"a_ss\"));\n      assertEquals(\"c\", tuples.get(7).get(\"a_ss\"));\n\n      // multi selection, sort\n      stream = factory.constructStream(\"cartesian(\"\n          + \"search(collection1, q=*:*, fl=\\\"id,a_ss,b_ls\\\", sort=\\\"id asc\\\"),\"\n          + \"a_ss,\"\n          + \"b_ls,\"\n          + \"productSort=\\\"a_ss ASC\\\"\"\n          + \")\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assertEquals(20, tuples.size()); // (5 * 3) + 5\n      assertOrder(tuples, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1);\n      assertEquals(\"a\", tuples.get(0).get(\"a_ss\"));\n      assertEquals(1L, tuples.get(0).get(\"b_ls\"));\n      assertEquals(\"a\", tuples.get(1).get(\"a_ss\"));\n      assertEquals(2L, tuples.get(1).get(\"b_ls\"));\n      assertEquals(\"a\", tuples.get(2).get(\"a_ss\"));\n      assertEquals(3L, tuples.get(2).get(\"b_ls\"));\n\n      assertEquals(\"b\", tuples.get(3).get(\"a_ss\"));\n      assertEquals(1L, tuples.get(3).get(\"b_ls\"));\n      assertEquals(\"b\", tuples.get(4).get(\"a_ss\"));\n      assertEquals(2L, tuples.get(4).get(\"b_ls\"));\n      assertEquals(\"b\", tuples.get(5).get(\"a_ss\"));\n      assertEquals(3L, tuples.get(5).get(\"b_ls\"));\n\n      // multi selection, sort\n      stream = factory.constructStream(\"cartesian(\"\n          + \"search(collection1, q=*:*, fl=\\\"id,a_ss,b_ls\\\", sort=\\\"id asc\\\"),\"\n          + \"a_ss,\"\n          + \"b_ls,\"\n          + \"productSort=\\\"a_ss ASC, b_ls DESC\\\"\"\n          + \")\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assertEquals(20, tuples.size()); // (5 * 3) + 5\n      assertOrder(tuples, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1);\n      assertEquals(\"a\", tuples.get(0).get(\"a_ss\"));\n      assertEquals(3L, tuples.get(0).get(\"b_ls\"));\n      assertEquals(\"a\", tuples.get(1).get(\"a_ss\"));\n      assertEquals(2L, tuples.get(1).get(\"b_ls\"));\n      assertEquals(\"a\", tuples.get(2).get(\"a_ss\"));\n      assertEquals(1L, tuples.get(2).get(\"b_ls\"));\n\n      assertEquals(\"b\", tuples.get(3).get(\"a_ss\"));\n      assertEquals(3L, tuples.get(3).get(\"b_ls\"));\n      assertEquals(\"b\", tuples.get(4).get(\"a_ss\"));\n      assertEquals(2L, tuples.get(4).get(\"b_ls\"));\n      assertEquals(\"b\", tuples.get(5).get(\"a_ss\"));\n      assertEquals(1L, tuples.get(5).get(\"b_ls\"));\n\n      // multi selection, sort\n      stream = factory.constructStream(\"cartesian(\"\n          + \"search(collection1, q=*:*, fl=\\\"id,a_ss,b_ls\\\", sort=\\\"id asc\\\"),\"\n          + \"a_ss,\"\n          + \"b_ls,\"\n          + \"productSort=\\\"b_ls DESC\\\"\"\n          + \")\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assertEquals(20, tuples.size()); // (5 * 3) + 5\n      assertOrder(tuples, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1);\n      assertEquals(\"a\", tuples.get(0).get(\"a_ss\"));\n      assertEquals(3L, tuples.get(0).get(\"b_ls\"));\n      assertEquals(\"b\", tuples.get(1).get(\"a_ss\"));\n      assertEquals(3L, tuples.get(1).get(\"b_ls\"));\n      assertEquals(\"c\", tuples.get(2).get(\"a_ss\"));\n      assertEquals(3L, tuples.get(2).get(\"b_ls\"));\n      assertEquals(\"d\", tuples.get(3).get(\"a_ss\"));\n      assertEquals(3L, tuples.get(3).get(\"b_ls\"));\n      assertEquals(\"e\", tuples.get(4).get(\"a_ss\"));\n      assertEquals(3L, tuples.get(4).get(\"b_ls\"));\n\n      assertEquals(\"a\", tuples.get(5).get(\"a_ss\"));\n      assertEquals(2L, tuples.get(5).get(\"b_ls\"));\n      assertEquals(\"b\", tuples.get(6).get(\"a_ss\"));\n      assertEquals(2L, tuples.get(6).get(\"b_ls\"));\n      assertEquals(\"c\", tuples.get(7).get(\"a_ss\"));\n      assertEquals(2L, tuples.get(7).get(\"b_ls\"));\n      assertEquals(\"d\", tuples.get(8).get(\"a_ss\"));\n      assertEquals(2L, tuples.get(8).get(\"b_ls\"));\n      assertEquals(\"e\", tuples.get(9).get(\"a_ss\"));\n      assertEquals(2L, tuples.get(9).get(\"b_ls\"));\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCartesianProductStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_ss\", \"a\", \"a_ss\", \"b\", \"a_ss\", \"c\", \"a_ss\", \"d\", \"a_ss\", \"e\", \"b_ls\", \"1\", \"b_ls\", \"2\", \"b_ls\", \"3\")\n        .add(id, \"1\", \"a_ss\", \"a\", \"a_ss\", \"b\", \"a_ss\", \"c\", \"a_ss\", \"d\", \"a_ss\", \"e\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"cartesian\", CartesianProductStream.class);\n      \n    // single selection, no sort\n    stream = factory.constructStream(\"cartesian(\"\n                                   +   \"search(collection1, q=*:*, fl=\\\"id,a_ss\\\", sort=\\\"id asc\\\"),\"\n                                   +   \"a_ss\"\n                                   + \")\");\n    tuples = getTuples(stream);\n   \n    assertEquals(10, tuples.size());\n    assertOrder(tuples, 0,0,0,0,0,1,1,1,1,1);\n    assertEquals(\"a\", tuples.get(0).get(\"a_ss\"));\n    assertEquals(\"c\", tuples.get(2).get(\"a_ss\"));\n    assertEquals(\"a\", tuples.get(5).get(\"a_ss\"));\n    assertEquals(\"c\", tuples.get(7).get(\"a_ss\"));\n\n    // single selection, sort\n    stream = factory.constructStream(\"cartesian(\"\n        +   \"search(collection1, q=*:*, fl=\\\"id,a_ss\\\", sort=\\\"id asc\\\"),\"\n        +   \"a_ss,\"\n        +   \"productSort=\\\"a_ss DESC\\\"\"\n        + \")\");\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrder(tuples, 0,0,0,0,0,1,1,1,1,1);\n    assertEquals(\"e\", tuples.get(0).get(\"a_ss\"));\n    assertEquals(\"c\", tuples.get(2).get(\"a_ss\"));\n    assertEquals(\"e\", tuples.get(5).get(\"a_ss\"));\n    assertEquals(\"c\", tuples.get(7).get(\"a_ss\"));\n    \n    // multi selection, sort\n    stream = factory.constructStream(\"cartesian(\"\n        +   \"search(collection1, q=*:*, fl=\\\"id,a_ss,b_ls\\\", sort=\\\"id asc\\\"),\"\n        +   \"a_ss,\"\n        +   \"b_ls,\"\n        +   \"productSort=\\\"a_ss ASC\\\"\"\n        + \")\");\n    tuples = getTuples(stream);\n    \n    assertEquals(20, tuples.size()); // (5 * 3) + 5\n    assertOrder(tuples, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1);\n    assertEquals(\"a\", tuples.get(0).get(\"a_ss\"));\n    assertEquals(1L, tuples.get(0).get(\"b_ls\"));\n    assertEquals(\"a\", tuples.get(1).get(\"a_ss\"));\n    assertEquals(2L, tuples.get(1).get(\"b_ls\"));\n    assertEquals(\"a\", tuples.get(2).get(\"a_ss\"));\n    assertEquals(3L, tuples.get(2).get(\"b_ls\"));\n    \n    assertEquals(\"b\", tuples.get(3).get(\"a_ss\"));\n    assertEquals(1L, tuples.get(3).get(\"b_ls\"));\n    assertEquals(\"b\", tuples.get(4).get(\"a_ss\"));\n    assertEquals(2L, tuples.get(4).get(\"b_ls\"));\n    assertEquals(\"b\", tuples.get(5).get(\"a_ss\"));\n    assertEquals(3L, tuples.get(5).get(\"b_ls\"));\n    \n    // multi selection, sort\n    stream = factory.constructStream(\"cartesian(\"\n    +   \"search(collection1, q=*:*, fl=\\\"id,a_ss,b_ls\\\", sort=\\\"id asc\\\"),\"\n    +   \"a_ss,\"\n    +   \"b_ls,\"\n    +   \"productSort=\\\"a_ss ASC, b_ls DESC\\\"\"\n    + \")\");\n    tuples = getTuples(stream);\n    \n    assertEquals(20, tuples.size()); // (5 * 3) + 5\n    assertOrder(tuples, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1);\n    assertEquals(\"a\", tuples.get(0).get(\"a_ss\"));\n    assertEquals(3L, tuples.get(0).get(\"b_ls\"));\n    assertEquals(\"a\", tuples.get(1).get(\"a_ss\"));\n    assertEquals(2L, tuples.get(1).get(\"b_ls\"));\n    assertEquals(\"a\", tuples.get(2).get(\"a_ss\"));\n    assertEquals(1L, tuples.get(2).get(\"b_ls\"));\n    \n    assertEquals(\"b\", tuples.get(3).get(\"a_ss\"));\n    assertEquals(3L, tuples.get(3).get(\"b_ls\"));\n    assertEquals(\"b\", tuples.get(4).get(\"a_ss\"));\n    assertEquals(2L, tuples.get(4).get(\"b_ls\"));\n    assertEquals(\"b\", tuples.get(5).get(\"a_ss\"));\n    assertEquals(1L, tuples.get(5).get(\"b_ls\"));\n\n    // multi selection, sort\n    stream = factory.constructStream(\"cartesian(\"\n    +   \"search(collection1, q=*:*, fl=\\\"id,a_ss,b_ls\\\", sort=\\\"id asc\\\"),\"\n    +   \"a_ss,\"\n    +   \"b_ls,\"\n    +   \"productSort=\\\"b_ls DESC\\\"\"\n    + \")\");\n    tuples = getTuples(stream);\n    \n    assertEquals(20, tuples.size()); // (5 * 3) + 5\n    assertOrder(tuples, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1);\n    assertEquals(\"a\", tuples.get(0).get(\"a_ss\"));\n    assertEquals(3L, tuples.get(0).get(\"b_ls\"));\n    assertEquals(\"b\", tuples.get(1).get(\"a_ss\"));\n    assertEquals(3L, tuples.get(1).get(\"b_ls\"));\n    assertEquals(\"c\", tuples.get(2).get(\"a_ss\"));\n    assertEquals(3L, tuples.get(2).get(\"b_ls\"));\n    assertEquals(\"d\", tuples.get(3).get(\"a_ss\"));\n    assertEquals(3L, tuples.get(3).get(\"b_ls\"));\n    assertEquals(\"e\", tuples.get(4).get(\"a_ss\"));\n    assertEquals(3L, tuples.get(4).get(\"b_ls\"));\n    \n    assertEquals(\"a\", tuples.get(5).get(\"a_ss\"));\n    assertEquals(2L, tuples.get(5).get(\"b_ls\"));\n    assertEquals(\"b\", tuples.get(6).get(\"a_ss\"));\n    assertEquals(2L, tuples.get(6).get(\"b_ls\"));\n    assertEquals(\"c\", tuples.get(7).get(\"a_ss\"));\n    assertEquals(2L, tuples.get(7).get(\"b_ls\"));\n    assertEquals(\"d\", tuples.get(8).get(\"a_ss\"));\n    assertEquals(2L, tuples.get(8).get(\"b_ls\"));\n    assertEquals(\"e\", tuples.get(9).get(\"a_ss\"));\n    assertEquals(2L, tuples.get(9).get(\"b_ls\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testCartesianProductStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCartesianProductStream().mjava","sourceNew":"  @Test\n  public void testCartesianProductStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_ss\", \"a\", \"a_ss\", \"b\", \"a_ss\", \"c\", \"a_ss\", \"d\", \"a_ss\", \"e\", \"b_ls\", \"1\", \"b_ls\", \"2\", \"b_ls\", \"3\")\n        .add(id, \"1\", \"a_ss\", \"a\", \"a_ss\", \"b\", \"a_ss\", \"c\", \"a_ss\", \"d\", \"a_ss\", \"e\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"cartesian\", CartesianProductStream.class);\n      \n    // single selection, no sort\n    try {\n      stream = factory.constructStream(\"cartesian(\"\n          + \"search(collection1, q=*:*, fl=\\\"id,a_ss\\\", sort=\\\"id asc\\\"),\"\n          + \"a_ss\"\n          + \")\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assertEquals(10, tuples.size());\n      assertOrder(tuples, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1);\n      assertEquals(\"a\", tuples.get(0).get(\"a_ss\"));\n      assertEquals(\"c\", tuples.get(2).get(\"a_ss\"));\n      assertEquals(\"a\", tuples.get(5).get(\"a_ss\"));\n      assertEquals(\"c\", tuples.get(7).get(\"a_ss\"));\n\n      // single selection, sort\n      stream = factory.constructStream(\"cartesian(\"\n          + \"search(collection1, q=*:*, fl=\\\"id,a_ss\\\", sort=\\\"id asc\\\"),\"\n          + \"a_ss,\"\n          + \"productSort=\\\"a_ss DESC\\\"\"\n          + \")\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assertEquals(10, tuples.size());\n      assertOrder(tuples, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1);\n      assertEquals(\"e\", tuples.get(0).get(\"a_ss\"));\n      assertEquals(\"c\", tuples.get(2).get(\"a_ss\"));\n      assertEquals(\"e\", tuples.get(5).get(\"a_ss\"));\n      assertEquals(\"c\", tuples.get(7).get(\"a_ss\"));\n\n      // multi selection, sort\n      stream = factory.constructStream(\"cartesian(\"\n          + \"search(collection1, q=*:*, fl=\\\"id,a_ss,b_ls\\\", sort=\\\"id asc\\\"),\"\n          + \"a_ss,\"\n          + \"b_ls,\"\n          + \"productSort=\\\"a_ss ASC\\\"\"\n          + \")\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assertEquals(20, tuples.size()); // (5 * 3) + 5\n      assertOrder(tuples, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1);\n      assertEquals(\"a\", tuples.get(0).get(\"a_ss\"));\n      assertEquals(1L, tuples.get(0).get(\"b_ls\"));\n      assertEquals(\"a\", tuples.get(1).get(\"a_ss\"));\n      assertEquals(2L, tuples.get(1).get(\"b_ls\"));\n      assertEquals(\"a\", tuples.get(2).get(\"a_ss\"));\n      assertEquals(3L, tuples.get(2).get(\"b_ls\"));\n\n      assertEquals(\"b\", tuples.get(3).get(\"a_ss\"));\n      assertEquals(1L, tuples.get(3).get(\"b_ls\"));\n      assertEquals(\"b\", tuples.get(4).get(\"a_ss\"));\n      assertEquals(2L, tuples.get(4).get(\"b_ls\"));\n      assertEquals(\"b\", tuples.get(5).get(\"a_ss\"));\n      assertEquals(3L, tuples.get(5).get(\"b_ls\"));\n\n      // multi selection, sort\n      stream = factory.constructStream(\"cartesian(\"\n          + \"search(collection1, q=*:*, fl=\\\"id,a_ss,b_ls\\\", sort=\\\"id asc\\\"),\"\n          + \"a_ss,\"\n          + \"b_ls,\"\n          + \"productSort=\\\"a_ss ASC, b_ls DESC\\\"\"\n          + \")\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assertEquals(20, tuples.size()); // (5 * 3) + 5\n      assertOrder(tuples, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1);\n      assertEquals(\"a\", tuples.get(0).get(\"a_ss\"));\n      assertEquals(3L, tuples.get(0).get(\"b_ls\"));\n      assertEquals(\"a\", tuples.get(1).get(\"a_ss\"));\n      assertEquals(2L, tuples.get(1).get(\"b_ls\"));\n      assertEquals(\"a\", tuples.get(2).get(\"a_ss\"));\n      assertEquals(1L, tuples.get(2).get(\"b_ls\"));\n\n      assertEquals(\"b\", tuples.get(3).get(\"a_ss\"));\n      assertEquals(3L, tuples.get(3).get(\"b_ls\"));\n      assertEquals(\"b\", tuples.get(4).get(\"a_ss\"));\n      assertEquals(2L, tuples.get(4).get(\"b_ls\"));\n      assertEquals(\"b\", tuples.get(5).get(\"a_ss\"));\n      assertEquals(1L, tuples.get(5).get(\"b_ls\"));\n\n      // multi selection, sort\n      stream = factory.constructStream(\"cartesian(\"\n          + \"search(collection1, q=*:*, fl=\\\"id,a_ss,b_ls\\\", sort=\\\"id asc\\\"),\"\n          + \"a_ss,\"\n          + \"b_ls,\"\n          + \"productSort=\\\"b_ls DESC\\\"\"\n          + \")\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assertEquals(20, tuples.size()); // (5 * 3) + 5\n      assertOrder(tuples, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1);\n      assertEquals(\"a\", tuples.get(0).get(\"a_ss\"));\n      assertEquals(3L, tuples.get(0).get(\"b_ls\"));\n      assertEquals(\"b\", tuples.get(1).get(\"a_ss\"));\n      assertEquals(3L, tuples.get(1).get(\"b_ls\"));\n      assertEquals(\"c\", tuples.get(2).get(\"a_ss\"));\n      assertEquals(3L, tuples.get(2).get(\"b_ls\"));\n      assertEquals(\"d\", tuples.get(3).get(\"a_ss\"));\n      assertEquals(3L, tuples.get(3).get(\"b_ls\"));\n      assertEquals(\"e\", tuples.get(4).get(\"a_ss\"));\n      assertEquals(3L, tuples.get(4).get(\"b_ls\"));\n\n      assertEquals(\"a\", tuples.get(5).get(\"a_ss\"));\n      assertEquals(2L, tuples.get(5).get(\"b_ls\"));\n      assertEquals(\"b\", tuples.get(6).get(\"a_ss\"));\n      assertEquals(2L, tuples.get(6).get(\"b_ls\"));\n      assertEquals(\"c\", tuples.get(7).get(\"a_ss\"));\n      assertEquals(2L, tuples.get(7).get(\"b_ls\"));\n      assertEquals(\"d\", tuples.get(8).get(\"a_ss\"));\n      assertEquals(2L, tuples.get(8).get(\"b_ls\"));\n      assertEquals(\"e\", tuples.get(9).get(\"a_ss\"));\n      assertEquals(2L, tuples.get(9).get(\"b_ls\"));\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCartesianProductStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_ss\", \"a\", \"a_ss\", \"b\", \"a_ss\", \"c\", \"a_ss\", \"d\", \"a_ss\", \"e\", \"b_ls\", \"1\", \"b_ls\", \"2\", \"b_ls\", \"3\")\n        .add(id, \"1\", \"a_ss\", \"a\", \"a_ss\", \"b\", \"a_ss\", \"c\", \"a_ss\", \"d\", \"a_ss\", \"e\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"cartesian\", CartesianProductStream.class);\n      \n    // single selection, no sort\n    try {\n      stream = factory.constructStream(\"cartesian(\"\n          + \"search(collection1, q=*:*, fl=\\\"id,a_ss\\\", sort=\\\"id asc\\\"),\"\n          + \"a_ss\"\n          + \")\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assertEquals(10, tuples.size());\n      assertOrder(tuples, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1);\n      assertEquals(\"a\", tuples.get(0).get(\"a_ss\"));\n      assertEquals(\"c\", tuples.get(2).get(\"a_ss\"));\n      assertEquals(\"a\", tuples.get(5).get(\"a_ss\"));\n      assertEquals(\"c\", tuples.get(7).get(\"a_ss\"));\n\n      // single selection, sort\n      stream = factory.constructStream(\"cartesian(\"\n          + \"search(collection1, q=*:*, fl=\\\"id,a_ss\\\", sort=\\\"id asc\\\"),\"\n          + \"a_ss,\"\n          + \"productSort=\\\"a_ss DESC\\\"\"\n          + \")\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assertEquals(10, tuples.size());\n      assertOrder(tuples, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1);\n      assertEquals(\"e\", tuples.get(0).get(\"a_ss\"));\n      assertEquals(\"c\", tuples.get(2).get(\"a_ss\"));\n      assertEquals(\"e\", tuples.get(5).get(\"a_ss\"));\n      assertEquals(\"c\", tuples.get(7).get(\"a_ss\"));\n\n      // multi selection, sort\n      stream = factory.constructStream(\"cartesian(\"\n          + \"search(collection1, q=*:*, fl=\\\"id,a_ss,b_ls\\\", sort=\\\"id asc\\\"),\"\n          + \"a_ss,\"\n          + \"b_ls,\"\n          + \"productSort=\\\"a_ss ASC\\\"\"\n          + \")\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assertEquals(20, tuples.size()); // (5 * 3) + 5\n      assertOrder(tuples, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1);\n      assertEquals(\"a\", tuples.get(0).get(\"a_ss\"));\n      assertEquals(1L, tuples.get(0).get(\"b_ls\"));\n      assertEquals(\"a\", tuples.get(1).get(\"a_ss\"));\n      assertEquals(2L, tuples.get(1).get(\"b_ls\"));\n      assertEquals(\"a\", tuples.get(2).get(\"a_ss\"));\n      assertEquals(3L, tuples.get(2).get(\"b_ls\"));\n\n      assertEquals(\"b\", tuples.get(3).get(\"a_ss\"));\n      assertEquals(1L, tuples.get(3).get(\"b_ls\"));\n      assertEquals(\"b\", tuples.get(4).get(\"a_ss\"));\n      assertEquals(2L, tuples.get(4).get(\"b_ls\"));\n      assertEquals(\"b\", tuples.get(5).get(\"a_ss\"));\n      assertEquals(3L, tuples.get(5).get(\"b_ls\"));\n\n      // multi selection, sort\n      stream = factory.constructStream(\"cartesian(\"\n          + \"search(collection1, q=*:*, fl=\\\"id,a_ss,b_ls\\\", sort=\\\"id asc\\\"),\"\n          + \"a_ss,\"\n          + \"b_ls,\"\n          + \"productSort=\\\"a_ss ASC, b_ls DESC\\\"\"\n          + \")\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assertEquals(20, tuples.size()); // (5 * 3) + 5\n      assertOrder(tuples, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1);\n      assertEquals(\"a\", tuples.get(0).get(\"a_ss\"));\n      assertEquals(3L, tuples.get(0).get(\"b_ls\"));\n      assertEquals(\"a\", tuples.get(1).get(\"a_ss\"));\n      assertEquals(2L, tuples.get(1).get(\"b_ls\"));\n      assertEquals(\"a\", tuples.get(2).get(\"a_ss\"));\n      assertEquals(1L, tuples.get(2).get(\"b_ls\"));\n\n      assertEquals(\"b\", tuples.get(3).get(\"a_ss\"));\n      assertEquals(3L, tuples.get(3).get(\"b_ls\"));\n      assertEquals(\"b\", tuples.get(4).get(\"a_ss\"));\n      assertEquals(2L, tuples.get(4).get(\"b_ls\"));\n      assertEquals(\"b\", tuples.get(5).get(\"a_ss\"));\n      assertEquals(1L, tuples.get(5).get(\"b_ls\"));\n\n      // multi selection, sort\n      stream = factory.constructStream(\"cartesian(\"\n          + \"search(collection1, q=*:*, fl=\\\"id,a_ss,b_ls\\\", sort=\\\"id asc\\\"),\"\n          + \"a_ss,\"\n          + \"b_ls,\"\n          + \"productSort=\\\"b_ls DESC\\\"\"\n          + \")\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assertEquals(20, tuples.size()); // (5 * 3) + 5\n      assertOrder(tuples, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1);\n      assertEquals(\"a\", tuples.get(0).get(\"a_ss\"));\n      assertEquals(3L, tuples.get(0).get(\"b_ls\"));\n      assertEquals(\"b\", tuples.get(1).get(\"a_ss\"));\n      assertEquals(3L, tuples.get(1).get(\"b_ls\"));\n      assertEquals(\"c\", tuples.get(2).get(\"a_ss\"));\n      assertEquals(3L, tuples.get(2).get(\"b_ls\"));\n      assertEquals(\"d\", tuples.get(3).get(\"a_ss\"));\n      assertEquals(3L, tuples.get(3).get(\"b_ls\"));\n      assertEquals(\"e\", tuples.get(4).get(\"a_ss\"));\n      assertEquals(3L, tuples.get(4).get(\"b_ls\"));\n\n      assertEquals(\"a\", tuples.get(5).get(\"a_ss\"));\n      assertEquals(2L, tuples.get(5).get(\"b_ls\"));\n      assertEquals(\"b\", tuples.get(6).get(\"a_ss\"));\n      assertEquals(2L, tuples.get(6).get(\"b_ls\"));\n      assertEquals(\"c\", tuples.get(7).get(\"a_ss\"));\n      assertEquals(2L, tuples.get(7).get(\"b_ls\"));\n      assertEquals(\"d\", tuples.get(8).get(\"a_ss\"));\n      assertEquals(2L, tuples.get(8).get(\"b_ls\"));\n      assertEquals(\"e\", tuples.get(9).get(\"a_ss\"));\n      assertEquals(2L, tuples.get(9).get(\"b_ls\"));\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["869bbd0c59fee20268facd5a2e0d3c77e34500ed"],"869bbd0c59fee20268facd5a2e0d3c77e34500ed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["d492b24eb91b29b3fb6bca5b158bec326fbc12df"],"d492b24eb91b29b3fb6bca5b158bec326fbc12df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["c405288c4553ffb50ab8ca5adbdde9881bcec4e4"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"869bbd0c59fee20268facd5a2e0d3c77e34500ed":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["869bbd0c59fee20268facd5a2e0d3c77e34500ed","d492b24eb91b29b3fb6bca5b158bec326fbc12df"],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"d492b24eb91b29b3fb6bca5b158bec326fbc12df":["c405288c4553ffb50ab8ca5adbdde9881bcec4e4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}