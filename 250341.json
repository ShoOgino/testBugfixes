{"path":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peekElements(int,long,Predicate[String]).mjava","commits":[{"id":"c39bfb3a9d82dcb144aeef9d625f5f8d95619cc0","date":1465495031,"type":1,"author":"Scott Blum","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peekElements(int,long,Predicate[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peekElements(int,long,Function[String,Boolean]).mjava","sourceNew":"  /**\n   * Return the currently-known set of elements, using child names from memory. If no children are found, or no\n   * children pass {@code acceptFilter}, waits up to {@code waitMillis} for at least one child to become available.\n   * <p/>\n   * Package-private to support {@link OverseerTaskQueue} specifically.\n   */\n  Collection<Pair<String, byte[]>> peekElements(int max, long waitMillis, Predicate<String> acceptFilter) throws KeeperException, InterruptedException {\n    List<String> foundChildren = new ArrayList<>();\n    long waitNanos = TimeUnit.MILLISECONDS.toNanos(waitMillis);\n    while (true) {\n      // Trigger a fetch if needed.\n      firstChild(false);\n\n      updateLock.lockInterruptibly();\n      try {\n        for (String child : knownChildren) {\n          if (acceptFilter.apply(child)) {\n            foundChildren.add(child);\n          }\n        }\n        if (!foundChildren.isEmpty()) {\n          break;\n        }\n        if (waitNanos <= 0) {\n          break;\n        }\n        waitNanos = changed.awaitNanos(waitNanos);\n      } finally {\n        updateLock.unlock();\n      }\n\n      if (!foundChildren.isEmpty()) {\n        break;\n      }\n    }\n\n    // Technically we could restart the method if we fail to actually obtain any valid children\n    // from ZK, but this is a super rare case, and the latency of the ZK fetches would require\n    // much more sophisticated waitNanos tracking.\n    List<Pair<String, byte[]>> result = new ArrayList<>();\n    for (String child : foundChildren) {\n      if (result.size() >= max) {\n        break;\n      }\n      try {\n        byte[] data = zookeeper.getData(dir + \"/\" + child, null, null, true);\n        result.add(new Pair<>(child, data));\n      } catch (KeeperException.NoNodeException e) {\n        // Another client deleted the node first, remove the in-memory and continue.\n        updateLock.lockInterruptibly();\n        try {\n          knownChildren.remove(child);\n        } finally {\n          updateLock.unlock();\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Return the currently-known set of elements, using child names from memory. If no children are found, or no\n   * children pass {@code acceptFilter}, waits up to {@code waitMillis} for at least one child to become available.\n   * <p/>\n   * Package-private to support {@link OverseerTaskQueue} specifically.\n   */\n  Collection<Pair<String, byte[]>> peekElements(int max, long waitMillis, Function<String, Boolean> acceptFilter) throws KeeperException, InterruptedException {\n    List<String> foundChildren = new ArrayList<>();\n    long waitNanos = TimeUnit.MILLISECONDS.toNanos(waitMillis);\n    while (true) {\n      // Trigger a fetch if needed.\n      firstChild(false);\n\n      updateLock.lockInterruptibly();\n      try {\n        for (String child : knownChildren) {\n          if (acceptFilter.apply(child)) {\n            foundChildren.add(child);\n          }\n        }\n        if (!foundChildren.isEmpty()) {\n          break;\n        }\n        if (waitNanos <= 0) {\n          break;\n        }\n        waitNanos = changed.awaitNanos(waitNanos);\n      } finally {\n        updateLock.unlock();\n      }\n\n      if (!foundChildren.isEmpty()) {\n        break;\n      }\n    }\n\n    // Technically we could restart the method if we fail to actually obtain any valid children\n    // from ZK, but this is a super rare case, and the latency of the ZK fetches would require\n    // much more sophisticated waitNanos tracking.\n    List<Pair<String, byte[]>> result = new ArrayList<>();\n    for (String child : foundChildren) {\n      if (result.size() >= max) {\n        break;\n      }\n      try {\n        byte[] data = zookeeper.getData(dir + \"/\" + child, null, null, true);\n        result.add(new Pair<>(child, data));\n      } catch (KeeperException.NoNodeException e) {\n        // Another client deleted the node first, remove the in-memory and continue.\n        updateLock.lockInterruptibly();\n        try {\n          knownChildren.remove(child);\n        } finally {\n          updateLock.unlock();\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peekElements(int,long,Predicate[String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return the currently-known set of elements, using child names from memory. If no children are found, or no\n   * children pass {@code acceptFilter}, waits up to {@code waitMillis} for at least one child to become available.\n   * <p/>\n   * Package-private to support {@link OverseerTaskQueue} specifically.\n   */\n  Collection<Pair<String, byte[]>> peekElements(int max, long waitMillis, Predicate<String> acceptFilter) throws KeeperException, InterruptedException {\n    List<String> foundChildren = new ArrayList<>();\n    long waitNanos = TimeUnit.MILLISECONDS.toNanos(waitMillis);\n    while (true) {\n      // Trigger a fetch if needed.\n      firstChild(false);\n\n      updateLock.lockInterruptibly();\n      try {\n        for (String child : knownChildren) {\n          if (acceptFilter.apply(child)) {\n            foundChildren.add(child);\n          }\n        }\n        if (!foundChildren.isEmpty()) {\n          break;\n        }\n        if (waitNanos <= 0) {\n          break;\n        }\n        waitNanos = changed.awaitNanos(waitNanos);\n      } finally {\n        updateLock.unlock();\n      }\n\n      if (!foundChildren.isEmpty()) {\n        break;\n      }\n    }\n\n    // Technically we could restart the method if we fail to actually obtain any valid children\n    // from ZK, but this is a super rare case, and the latency of the ZK fetches would require\n    // much more sophisticated waitNanos tracking.\n    List<Pair<String, byte[]>> result = new ArrayList<>();\n    for (String child : foundChildren) {\n      if (result.size() >= max) {\n        break;\n      }\n      try {\n        byte[] data = zookeeper.getData(dir + \"/\" + child, null, null, true);\n        result.add(new Pair<>(child, data));\n      } catch (KeeperException.NoNodeException e) {\n        // Another client deleted the node first, remove the in-memory and continue.\n        updateLock.lockInterruptibly();\n        try {\n          knownChildren.remove(child);\n        } finally {\n          updateLock.unlock();\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c609c76a49c17e5c1c8a5d5cd2d685be9f306a47","date":1477689538,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peekElements(int,long,Predicate[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peekElements(int,long,Predicate[String]).mjava","sourceNew":"  /**\n   * Return the currently-known set of elements, using child names from memory. If no children are found, or no\n   * children pass {@code acceptFilter}, waits up to {@code waitMillis} for at least one child to become available.\n   * <p/>\n   * Package-private to support {@link OverseerTaskQueue} specifically.\n   */\n  Collection<Pair<String, byte[]>> peekElements(int max, long waitMillis, Predicate<String> acceptFilter) throws KeeperException, InterruptedException {\n    List<String> foundChildren = new ArrayList<>();\n    long waitNanos = TimeUnit.MILLISECONDS.toNanos(waitMillis);\n    while (true) {\n      // Trigger a fetch if needed.\n      firstChild(false);\n\n      updateLock.lockInterruptibly();\n      try {\n        for (String child : knownChildren) {\n          if (acceptFilter.test(child)) {\n            foundChildren.add(child);\n          }\n        }\n        if (!foundChildren.isEmpty()) {\n          break;\n        }\n        if (waitNanos <= 0) {\n          break;\n        }\n        waitNanos = changed.awaitNanos(waitNanos);\n      } finally {\n        updateLock.unlock();\n      }\n\n      if (!foundChildren.isEmpty()) {\n        break;\n      }\n    }\n\n    // Technically we could restart the method if we fail to actually obtain any valid children\n    // from ZK, but this is a super rare case, and the latency of the ZK fetches would require\n    // much more sophisticated waitNanos tracking.\n    List<Pair<String, byte[]>> result = new ArrayList<>();\n    for (String child : foundChildren) {\n      if (result.size() >= max) {\n        break;\n      }\n      try {\n        byte[] data = zookeeper.getData(dir + \"/\" + child, null, null, true);\n        result.add(new Pair<>(child, data));\n      } catch (KeeperException.NoNodeException e) {\n        // Another client deleted the node first, remove the in-memory and continue.\n        updateLock.lockInterruptibly();\n        try {\n          knownChildren.remove(child);\n        } finally {\n          updateLock.unlock();\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Return the currently-known set of elements, using child names from memory. If no children are found, or no\n   * children pass {@code acceptFilter}, waits up to {@code waitMillis} for at least one child to become available.\n   * <p/>\n   * Package-private to support {@link OverseerTaskQueue} specifically.\n   */\n  Collection<Pair<String, byte[]>> peekElements(int max, long waitMillis, Predicate<String> acceptFilter) throws KeeperException, InterruptedException {\n    List<String> foundChildren = new ArrayList<>();\n    long waitNanos = TimeUnit.MILLISECONDS.toNanos(waitMillis);\n    while (true) {\n      // Trigger a fetch if needed.\n      firstChild(false);\n\n      updateLock.lockInterruptibly();\n      try {\n        for (String child : knownChildren) {\n          if (acceptFilter.apply(child)) {\n            foundChildren.add(child);\n          }\n        }\n        if (!foundChildren.isEmpty()) {\n          break;\n        }\n        if (waitNanos <= 0) {\n          break;\n        }\n        waitNanos = changed.awaitNanos(waitNanos);\n      } finally {\n        updateLock.unlock();\n      }\n\n      if (!foundChildren.isEmpty()) {\n        break;\n      }\n    }\n\n    // Technically we could restart the method if we fail to actually obtain any valid children\n    // from ZK, but this is a super rare case, and the latency of the ZK fetches would require\n    // much more sophisticated waitNanos tracking.\n    List<Pair<String, byte[]>> result = new ArrayList<>();\n    for (String child : foundChildren) {\n      if (result.size() >= max) {\n        break;\n      }\n      try {\n        byte[] data = zookeeper.getData(dir + \"/\" + child, null, null, true);\n        result.add(new Pair<>(child, data));\n      } catch (KeeperException.NoNodeException e) {\n        // Another client deleted the node first, remove the in-memory and continue.\n        updateLock.lockInterruptibly();\n        try {\n          knownChildren.remove(child);\n        } finally {\n          updateLock.unlock();\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"320888923ec13b91f53082558f01f4c9960dd226","date":1477926871,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peekElements(int,long,Predicate[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peekElements(int,long,Predicate[String]).mjava","sourceNew":"  /**\n   * Return the currently-known set of elements, using child names from memory. If no children are found, or no\n   * children pass {@code acceptFilter}, waits up to {@code waitMillis} for at least one child to become available.\n   * <p/>\n   * Package-private to support {@link OverseerTaskQueue} specifically.\n   */\n  Collection<Pair<String, byte[]>> peekElements(int max, long waitMillis, Predicate<String> acceptFilter) throws KeeperException, InterruptedException {\n    List<String> foundChildren = new ArrayList<>();\n    long waitNanos = TimeUnit.MILLISECONDS.toNanos(waitMillis);\n    while (true) {\n      // Trigger a fetch if needed.\n      firstChild(false);\n\n      updateLock.lockInterruptibly();\n      try {\n        for (String child : knownChildren) {\n          if (acceptFilter.test(child)) {\n            foundChildren.add(child);\n          }\n        }\n        if (!foundChildren.isEmpty()) {\n          break;\n        }\n        if (waitNanos <= 0) {\n          break;\n        }\n        waitNanos = changed.awaitNanos(waitNanos);\n      } finally {\n        updateLock.unlock();\n      }\n\n      if (!foundChildren.isEmpty()) {\n        break;\n      }\n    }\n\n    // Technically we could restart the method if we fail to actually obtain any valid children\n    // from ZK, but this is a super rare case, and the latency of the ZK fetches would require\n    // much more sophisticated waitNanos tracking.\n    List<Pair<String, byte[]>> result = new ArrayList<>();\n    for (String child : foundChildren) {\n      if (result.size() >= max) {\n        break;\n      }\n      try {\n        byte[] data = zookeeper.getData(dir + \"/\" + child, null, null, true);\n        result.add(new Pair<>(child, data));\n      } catch (KeeperException.NoNodeException e) {\n        // Another client deleted the node first, remove the in-memory and continue.\n        updateLock.lockInterruptibly();\n        try {\n          knownChildren.remove(child);\n        } finally {\n          updateLock.unlock();\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Return the currently-known set of elements, using child names from memory. If no children are found, or no\n   * children pass {@code acceptFilter}, waits up to {@code waitMillis} for at least one child to become available.\n   * <p/>\n   * Package-private to support {@link OverseerTaskQueue} specifically.\n   */\n  Collection<Pair<String, byte[]>> peekElements(int max, long waitMillis, Predicate<String> acceptFilter) throws KeeperException, InterruptedException {\n    List<String> foundChildren = new ArrayList<>();\n    long waitNanos = TimeUnit.MILLISECONDS.toNanos(waitMillis);\n    while (true) {\n      // Trigger a fetch if needed.\n      firstChild(false);\n\n      updateLock.lockInterruptibly();\n      try {\n        for (String child : knownChildren) {\n          if (acceptFilter.apply(child)) {\n            foundChildren.add(child);\n          }\n        }\n        if (!foundChildren.isEmpty()) {\n          break;\n        }\n        if (waitNanos <= 0) {\n          break;\n        }\n        waitNanos = changed.awaitNanos(waitNanos);\n      } finally {\n        updateLock.unlock();\n      }\n\n      if (!foundChildren.isEmpty()) {\n        break;\n      }\n    }\n\n    // Technically we could restart the method if we fail to actually obtain any valid children\n    // from ZK, but this is a super rare case, and the latency of the ZK fetches would require\n    // much more sophisticated waitNanos tracking.\n    List<Pair<String, byte[]>> result = new ArrayList<>();\n    for (String child : foundChildren) {\n      if (result.size() >= max) {\n        break;\n      }\n      try {\n        byte[] data = zookeeper.getData(dir + \"/\" + child, null, null, true);\n        result.add(new Pair<>(child, data));\n      } catch (KeeperException.NoNodeException e) {\n        // Another client deleted the node first, remove the in-memory and continue.\n        updateLock.lockInterruptibly();\n        try {\n          knownChildren.remove(child);\n        } finally {\n          updateLock.unlock();\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"282a69d7d427c265f321423b5a3f989aa16dab10","date":1494313009,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peekElements(int,long,Predicate[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peekElements(int,long,Predicate[String]).mjava","sourceNew":"  /**\n   * Return the currently-known set of elements, using child names from memory. If no children are found, or no\n   * children pass {@code acceptFilter}, waits up to {@code waitMillis} for at least one child to become available.\n   * <p/>\n   * Package-private to support {@link OverseerTaskQueue} specifically.\n   */\n  Collection<Pair<String, byte[]>> peekElements(int max, long waitMillis, Predicate<String> acceptFilter) throws KeeperException, InterruptedException {\n    List<String> foundChildren = new ArrayList<>();\n    long waitNanos = TimeUnit.MILLISECONDS.toNanos(waitMillis);\n    boolean first = true;\n    while (true) {\n      // Trigger a refresh, but only force it if this is not the first iteration.\n      firstChild(false, !first);\n\n      updateLock.lockInterruptibly();\n      try {\n        for (String child : knownChildren) {\n          if (acceptFilter.test(child)) {\n            foundChildren.add(child);\n          }\n        }\n        if (!foundChildren.isEmpty()) {\n          break;\n        }\n        if (waitNanos <= 0) {\n          break;\n        }\n\n        // If this is our first time through, force a refresh before waiting.\n        if (first) {\n          first = false;\n          continue;\n        }\n\n        waitNanos = changed.awaitNanos(waitNanos);\n      } finally {\n        updateLock.unlock();\n      }\n\n      if (!foundChildren.isEmpty()) {\n        break;\n      }\n    }\n\n    // Technically we could restart the method if we fail to actually obtain any valid children\n    // from ZK, but this is a super rare case, and the latency of the ZK fetches would require\n    // much more sophisticated waitNanos tracking.\n    List<Pair<String, byte[]>> result = new ArrayList<>();\n    for (String child : foundChildren) {\n      if (result.size() >= max) {\n        break;\n      }\n      try {\n        byte[] data = zookeeper.getData(dir + \"/\" + child, null, null, true);\n        result.add(new Pair<>(child, data));\n      } catch (KeeperException.NoNodeException e) {\n        // Another client deleted the node first, remove the in-memory and continue.\n        updateLock.lockInterruptibly();\n        try {\n          knownChildren.remove(child);\n        } finally {\n          updateLock.unlock();\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Return the currently-known set of elements, using child names from memory. If no children are found, or no\n   * children pass {@code acceptFilter}, waits up to {@code waitMillis} for at least one child to become available.\n   * <p/>\n   * Package-private to support {@link OverseerTaskQueue} specifically.\n   */\n  Collection<Pair<String, byte[]>> peekElements(int max, long waitMillis, Predicate<String> acceptFilter) throws KeeperException, InterruptedException {\n    List<String> foundChildren = new ArrayList<>();\n    long waitNanos = TimeUnit.MILLISECONDS.toNanos(waitMillis);\n    while (true) {\n      // Trigger a fetch if needed.\n      firstChild(false);\n\n      updateLock.lockInterruptibly();\n      try {\n        for (String child : knownChildren) {\n          if (acceptFilter.test(child)) {\n            foundChildren.add(child);\n          }\n        }\n        if (!foundChildren.isEmpty()) {\n          break;\n        }\n        if (waitNanos <= 0) {\n          break;\n        }\n        waitNanos = changed.awaitNanos(waitNanos);\n      } finally {\n        updateLock.unlock();\n      }\n\n      if (!foundChildren.isEmpty()) {\n        break;\n      }\n    }\n\n    // Technically we could restart the method if we fail to actually obtain any valid children\n    // from ZK, but this is a super rare case, and the latency of the ZK fetches would require\n    // much more sophisticated waitNanos tracking.\n    List<Pair<String, byte[]>> result = new ArrayList<>();\n    for (String child : foundChildren) {\n      if (result.size() >= max) {\n        break;\n      }\n      try {\n        byte[] data = zookeeper.getData(dir + \"/\" + child, null, null, true);\n        result.add(new Pair<>(child, data));\n      } catch (KeeperException.NoNodeException e) {\n        // Another client deleted the node first, remove the in-memory and continue.\n        updateLock.lockInterruptibly();\n        try {\n          knownChildren.remove(child);\n        } finally {\n          updateLock.unlock();\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":["f7fd147f6ec145b926803480f62aa12e2aad258e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peekElements(int,long,Predicate[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peekElements(int,long,Predicate[String]).mjava","sourceNew":"  /**\n   * Return the currently-known set of elements, using child names from memory. If no children are found, or no\n   * children pass {@code acceptFilter}, waits up to {@code waitMillis} for at least one child to become available.\n   * <p/>\n   * Package-private to support {@link OverseerTaskQueue} specifically.\n   */\n  Collection<Pair<String, byte[]>> peekElements(int max, long waitMillis, Predicate<String> acceptFilter) throws KeeperException, InterruptedException {\n    List<String> foundChildren = new ArrayList<>();\n    long waitNanos = TimeUnit.MILLISECONDS.toNanos(waitMillis);\n    boolean first = true;\n    while (true) {\n      // Trigger a refresh, but only force it if this is not the first iteration.\n      firstChild(false, !first);\n\n      updateLock.lockInterruptibly();\n      try {\n        for (String child : knownChildren) {\n          if (acceptFilter.test(child)) {\n            foundChildren.add(child);\n          }\n        }\n        if (!foundChildren.isEmpty()) {\n          break;\n        }\n        if (waitNanos <= 0) {\n          break;\n        }\n\n        // If this is our first time through, force a refresh before waiting.\n        if (first) {\n          first = false;\n          continue;\n        }\n\n        waitNanos = changed.awaitNanos(waitNanos);\n      } finally {\n        updateLock.unlock();\n      }\n\n      if (!foundChildren.isEmpty()) {\n        break;\n      }\n    }\n\n    // Technically we could restart the method if we fail to actually obtain any valid children\n    // from ZK, but this is a super rare case, and the latency of the ZK fetches would require\n    // much more sophisticated waitNanos tracking.\n    List<Pair<String, byte[]>> result = new ArrayList<>();\n    for (String child : foundChildren) {\n      if (result.size() >= max) {\n        break;\n      }\n      try {\n        byte[] data = zookeeper.getData(dir + \"/\" + child, null, null, true);\n        result.add(new Pair<>(child, data));\n      } catch (KeeperException.NoNodeException e) {\n        // Another client deleted the node first, remove the in-memory and continue.\n        updateLock.lockInterruptibly();\n        try {\n          knownChildren.remove(child);\n        } finally {\n          updateLock.unlock();\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Return the currently-known set of elements, using child names from memory. If no children are found, or no\n   * children pass {@code acceptFilter}, waits up to {@code waitMillis} for at least one child to become available.\n   * <p/>\n   * Package-private to support {@link OverseerTaskQueue} specifically.\n   */\n  Collection<Pair<String, byte[]>> peekElements(int max, long waitMillis, Predicate<String> acceptFilter) throws KeeperException, InterruptedException {\n    List<String> foundChildren = new ArrayList<>();\n    long waitNanos = TimeUnit.MILLISECONDS.toNanos(waitMillis);\n    while (true) {\n      // Trigger a fetch if needed.\n      firstChild(false);\n\n      updateLock.lockInterruptibly();\n      try {\n        for (String child : knownChildren) {\n          if (acceptFilter.test(child)) {\n            foundChildren.add(child);\n          }\n        }\n        if (!foundChildren.isEmpty()) {\n          break;\n        }\n        if (waitNanos <= 0) {\n          break;\n        }\n        waitNanos = changed.awaitNanos(waitNanos);\n      } finally {\n        updateLock.unlock();\n      }\n\n      if (!foundChildren.isEmpty()) {\n        break;\n      }\n    }\n\n    // Technically we could restart the method if we fail to actually obtain any valid children\n    // from ZK, but this is a super rare case, and the latency of the ZK fetches would require\n    // much more sophisticated waitNanos tracking.\n    List<Pair<String, byte[]>> result = new ArrayList<>();\n    for (String child : foundChildren) {\n      if (result.size() >= max) {\n        break;\n      }\n      try {\n        byte[] data = zookeeper.getData(dir + \"/\" + child, null, null, true);\n        result.add(new Pair<>(child, data));\n      } catch (KeeperException.NoNodeException e) {\n        // Another client deleted the node first, remove the in-memory and continue.\n        updateLock.lockInterruptibly();\n        try {\n          knownChildren.remove(child);\n        } finally {\n          updateLock.unlock();\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#peekElements(int,long,Predicate[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peekElements(int,long,Predicate[String]).mjava","sourceNew":"  /**\n   * Return the currently-known set of elements, using child names from memory. If no children are found, or no\n   * children pass {@code acceptFilter}, waits up to {@code waitMillis} for at least one child to become available.\n   * <p/>\n   * Package-private to support {@link OverseerTaskQueue} specifically.\n   */\n  @Override\n  public Collection<Pair<String, byte[]>> peekElements(int max, long waitMillis, Predicate<String> acceptFilter) throws KeeperException, InterruptedException {\n    List<String> foundChildren = new ArrayList<>();\n    long waitNanos = TimeUnit.MILLISECONDS.toNanos(waitMillis);\n    boolean first = true;\n    while (true) {\n      // Trigger a refresh, but only force it if this is not the first iteration.\n      firstChild(false, !first);\n\n      updateLock.lockInterruptibly();\n      try {\n        for (String child : knownChildren) {\n          if (acceptFilter.test(child)) {\n            foundChildren.add(child);\n          }\n        }\n        if (!foundChildren.isEmpty()) {\n          break;\n        }\n        if (waitNanos <= 0) {\n          break;\n        }\n\n        // If this is our first time through, force a refresh before waiting.\n        if (first) {\n          first = false;\n          continue;\n        }\n\n        waitNanos = changed.awaitNanos(waitNanos);\n      } finally {\n        updateLock.unlock();\n      }\n\n      if (!foundChildren.isEmpty()) {\n        break;\n      }\n    }\n\n    // Technically we could restart the method if we fail to actually obtain any valid children\n    // from ZK, but this is a super rare case, and the latency of the ZK fetches would require\n    // much more sophisticated waitNanos tracking.\n    List<Pair<String, byte[]>> result = new ArrayList<>();\n    for (String child : foundChildren) {\n      if (result.size() >= max) {\n        break;\n      }\n      try {\n        byte[] data = zookeeper.getData(dir + \"/\" + child, null, null, true);\n        result.add(new Pair<>(child, data));\n      } catch (KeeperException.NoNodeException e) {\n        // Another client deleted the node first, remove the in-memory and continue.\n        updateLock.lockInterruptibly();\n        try {\n          knownChildren.remove(child);\n        } finally {\n          updateLock.unlock();\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Return the currently-known set of elements, using child names from memory. If no children are found, or no\n   * children pass {@code acceptFilter}, waits up to {@code waitMillis} for at least one child to become available.\n   * <p/>\n   * Package-private to support {@link OverseerTaskQueue} specifically.\n   */\n  Collection<Pair<String, byte[]>> peekElements(int max, long waitMillis, Predicate<String> acceptFilter) throws KeeperException, InterruptedException {\n    List<String> foundChildren = new ArrayList<>();\n    long waitNanos = TimeUnit.MILLISECONDS.toNanos(waitMillis);\n    boolean first = true;\n    while (true) {\n      // Trigger a refresh, but only force it if this is not the first iteration.\n      firstChild(false, !first);\n\n      updateLock.lockInterruptibly();\n      try {\n        for (String child : knownChildren) {\n          if (acceptFilter.test(child)) {\n            foundChildren.add(child);\n          }\n        }\n        if (!foundChildren.isEmpty()) {\n          break;\n        }\n        if (waitNanos <= 0) {\n          break;\n        }\n\n        // If this is our first time through, force a refresh before waiting.\n        if (first) {\n          first = false;\n          continue;\n        }\n\n        waitNanos = changed.awaitNanos(waitNanos);\n      } finally {\n        updateLock.unlock();\n      }\n\n      if (!foundChildren.isEmpty()) {\n        break;\n      }\n    }\n\n    // Technically we could restart the method if we fail to actually obtain any valid children\n    // from ZK, but this is a super rare case, and the latency of the ZK fetches would require\n    // much more sophisticated waitNanos tracking.\n    List<Pair<String, byte[]>> result = new ArrayList<>();\n    for (String child : foundChildren) {\n      if (result.size() >= max) {\n        break;\n      }\n      try {\n        byte[] data = zookeeper.getData(dir + \"/\" + child, null, null, true);\n        result.add(new Pair<>(child, data));\n      } catch (KeeperException.NoNodeException e) {\n        // Another client deleted the node first, remove the in-memory and continue.\n        updateLock.lockInterruptibly();\n        try {\n          knownChildren.remove(child);\n        } finally {\n          updateLock.unlock();\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peekElements(int,long,Predicate[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#peekElements(int,long,Predicate[String]).mjava","sourceNew":"  /**\n   * Return the currently-known set of elements, using child names from memory. If no children are found, or no\n   * children pass {@code acceptFilter}, waits up to {@code waitMillis} for at least one child to become available.\n   * <p/>\n   * Package-private to support {@link OverseerTaskQueue} specifically.\n   */\n  Collection<Pair<String, byte[]>> peekElements(int max, long waitMillis, Predicate<String> acceptFilter) throws KeeperException, InterruptedException {\n    List<String> foundChildren = new ArrayList<>();\n    long waitNanos = TimeUnit.MILLISECONDS.toNanos(waitMillis);\n    boolean first = true;\n    while (true) {\n      // Trigger a refresh, but only force it if this is not the first iteration.\n      firstChild(false, !first);\n\n      updateLock.lockInterruptibly();\n      try {\n        for (String child : knownChildren) {\n          if (acceptFilter.test(child)) {\n            foundChildren.add(child);\n          }\n        }\n        if (!foundChildren.isEmpty()) {\n          break;\n        }\n        if (waitNanos <= 0) {\n          break;\n        }\n\n        // If this is our first time through, force a refresh before waiting.\n        if (first) {\n          first = false;\n          continue;\n        }\n\n        waitNanos = changed.awaitNanos(waitNanos);\n      } finally {\n        updateLock.unlock();\n      }\n\n      if (!foundChildren.isEmpty()) {\n        break;\n      }\n    }\n\n    // Technically we could restart the method if we fail to actually obtain any valid children\n    // from ZK, but this is a super rare case, and the latency of the ZK fetches would require\n    // much more sophisticated waitNanos tracking.\n    List<Pair<String, byte[]>> result = new ArrayList<>();\n    for (String child : foundChildren) {\n      if (result.size() >= max) {\n        break;\n      }\n      try {\n        byte[] data = zookeeper.getData(dir + \"/\" + child, null, null, true);\n        result.add(new Pair<>(child, data));\n      } catch (KeeperException.NoNodeException e) {\n        // Another client deleted the node first, remove the in-memory and continue.\n        updateLock.lockInterruptibly();\n        try {\n          knownChildren.remove(child);\n        } finally {\n          updateLock.unlock();\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Return the currently-known set of elements, using child names from memory. If no children are found, or no\n   * children pass {@code acceptFilter}, waits up to {@code waitMillis} for at least one child to become available.\n   * <p/>\n   * Package-private to support {@link OverseerTaskQueue} specifically.\n   */\n  @Override\n  public Collection<Pair<String, byte[]>> peekElements(int max, long waitMillis, Predicate<String> acceptFilter) throws KeeperException, InterruptedException {\n    List<String> foundChildren = new ArrayList<>();\n    long waitNanos = TimeUnit.MILLISECONDS.toNanos(waitMillis);\n    boolean first = true;\n    while (true) {\n      // Trigger a refresh, but only force it if this is not the first iteration.\n      firstChild(false, !first);\n\n      updateLock.lockInterruptibly();\n      try {\n        for (String child : knownChildren) {\n          if (acceptFilter.test(child)) {\n            foundChildren.add(child);\n          }\n        }\n        if (!foundChildren.isEmpty()) {\n          break;\n        }\n        if (waitNanos <= 0) {\n          break;\n        }\n\n        // If this is our first time through, force a refresh before waiting.\n        if (first) {\n          first = false;\n          continue;\n        }\n\n        waitNanos = changed.awaitNanos(waitNanos);\n      } finally {\n        updateLock.unlock();\n      }\n\n      if (!foundChildren.isEmpty()) {\n        break;\n      }\n    }\n\n    // Technically we could restart the method if we fail to actually obtain any valid children\n    // from ZK, but this is a super rare case, and the latency of the ZK fetches would require\n    // much more sophisticated waitNanos tracking.\n    List<Pair<String, byte[]>> result = new ArrayList<>();\n    for (String child : foundChildren) {\n      if (result.size() >= max) {\n        break;\n      }\n      try {\n        byte[] data = zookeeper.getData(dir + \"/\" + child, null, null, true);\n        result.add(new Pair<>(child, data));\n      } catch (KeeperException.NoNodeException e) {\n        // Another client deleted the node first, remove the in-memory and continue.\n        updateLock.lockInterruptibly();\n        try {\n          knownChildren.remove(child);\n        } finally {\n          updateLock.unlock();\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e","date":1505888025,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#peekElements(int,long,Predicate[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peekElements(int,long,Predicate[String]).mjava","sourceNew":"  /**\n   * Return the currently-known set of elements, using child names from memory. If no children are found, or no\n   * children pass {@code acceptFilter}, waits up to {@code waitMillis} for at least one child to become available.\n   * Package-private to support {@link OverseerTaskQueue} specifically.\n   */\n  @Override\n  public Collection<Pair<String, byte[]>> peekElements(int max, long waitMillis, Predicate<String> acceptFilter) throws KeeperException, InterruptedException {\n    List<String> foundChildren = new ArrayList<>();\n    long waitNanos = TimeUnit.MILLISECONDS.toNanos(waitMillis);\n    boolean first = true;\n    while (true) {\n      // Trigger a refresh, but only force it if this is not the first iteration.\n      firstChild(false, !first);\n\n      updateLock.lockInterruptibly();\n      try {\n        for (String child : knownChildren) {\n          if (acceptFilter.test(child)) {\n            foundChildren.add(child);\n          }\n        }\n        if (!foundChildren.isEmpty()) {\n          break;\n        }\n        if (waitNanos <= 0) {\n          break;\n        }\n\n        // If this is our first time through, force a refresh before waiting.\n        if (first) {\n          first = false;\n          continue;\n        }\n\n        waitNanos = changed.awaitNanos(waitNanos);\n      } finally {\n        updateLock.unlock();\n      }\n\n      if (!foundChildren.isEmpty()) {\n        break;\n      }\n    }\n\n    // Technically we could restart the method if we fail to actually obtain any valid children\n    // from ZK, but this is a super rare case, and the latency of the ZK fetches would require\n    // much more sophisticated waitNanos tracking.\n    List<Pair<String, byte[]>> result = new ArrayList<>();\n    for (String child : foundChildren) {\n      if (result.size() >= max) {\n        break;\n      }\n      try {\n        byte[] data = zookeeper.getData(dir + \"/\" + child, null, null, true);\n        result.add(new Pair<>(child, data));\n      } catch (KeeperException.NoNodeException e) {\n        // Another client deleted the node first, remove the in-memory and continue.\n        updateLock.lockInterruptibly();\n        try {\n          knownChildren.remove(child);\n        } finally {\n          updateLock.unlock();\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Return the currently-known set of elements, using child names from memory. If no children are found, or no\n   * children pass {@code acceptFilter}, waits up to {@code waitMillis} for at least one child to become available.\n   * <p/>\n   * Package-private to support {@link OverseerTaskQueue} specifically.\n   */\n  Collection<Pair<String, byte[]>> peekElements(int max, long waitMillis, Predicate<String> acceptFilter) throws KeeperException, InterruptedException {\n    List<String> foundChildren = new ArrayList<>();\n    long waitNanos = TimeUnit.MILLISECONDS.toNanos(waitMillis);\n    boolean first = true;\n    while (true) {\n      // Trigger a refresh, but only force it if this is not the first iteration.\n      firstChild(false, !first);\n\n      updateLock.lockInterruptibly();\n      try {\n        for (String child : knownChildren) {\n          if (acceptFilter.test(child)) {\n            foundChildren.add(child);\n          }\n        }\n        if (!foundChildren.isEmpty()) {\n          break;\n        }\n        if (waitNanos <= 0) {\n          break;\n        }\n\n        // If this is our first time through, force a refresh before waiting.\n        if (first) {\n          first = false;\n          continue;\n        }\n\n        waitNanos = changed.awaitNanos(waitNanos);\n      } finally {\n        updateLock.unlock();\n      }\n\n      if (!foundChildren.isEmpty()) {\n        break;\n      }\n    }\n\n    // Technically we could restart the method if we fail to actually obtain any valid children\n    // from ZK, but this is a super rare case, and the latency of the ZK fetches would require\n    // much more sophisticated waitNanos tracking.\n    List<Pair<String, byte[]>> result = new ArrayList<>();\n    for (String child : foundChildren) {\n      if (result.size() >= max) {\n        break;\n      }\n      try {\n        byte[] data = zookeeper.getData(dir + \"/\" + child, null, null, true);\n        result.add(new Pair<>(child, data));\n      } catch (KeeperException.NoNodeException e) {\n        // Another client deleted the node first, remove the in-memory and continue.\n        updateLock.lockInterruptibly();\n        try {\n          knownChildren.remove(child);\n        } finally {\n          updateLock.unlock();\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#peekElements(int,long,Predicate[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peekElements(int,long,Predicate[String]).mjava","sourceNew":"  /**\n   * Return the currently-known set of elements, using child names from memory. If no children are found, or no\n   * children pass {@code acceptFilter}, waits up to {@code waitMillis} for at least one child to become available.\n   * Package-private to support {@link OverseerTaskQueue} specifically.\n   */\n  @Override\n  public Collection<Pair<String, byte[]>> peekElements(int max, long waitMillis, Predicate<String> acceptFilter) throws KeeperException, InterruptedException {\n    List<String> foundChildren = new ArrayList<>();\n    long waitNanos = TimeUnit.MILLISECONDS.toNanos(waitMillis);\n    boolean first = true;\n    while (true) {\n      // Trigger a refresh, but only force it if this is not the first iteration.\n      firstChild(false, !first);\n\n      updateLock.lockInterruptibly();\n      try {\n        for (String child : knownChildren) {\n          if (acceptFilter.test(child)) {\n            foundChildren.add(child);\n          }\n        }\n        if (!foundChildren.isEmpty()) {\n          break;\n        }\n        if (waitNanos <= 0) {\n          break;\n        }\n\n        // If this is our first time through, force a refresh before waiting.\n        if (first) {\n          first = false;\n          continue;\n        }\n\n        waitNanos = changed.awaitNanos(waitNanos);\n      } finally {\n        updateLock.unlock();\n      }\n\n      if (!foundChildren.isEmpty()) {\n        break;\n      }\n    }\n\n    // Technically we could restart the method if we fail to actually obtain any valid children\n    // from ZK, but this is a super rare case, and the latency of the ZK fetches would require\n    // much more sophisticated waitNanos tracking.\n    List<Pair<String, byte[]>> result = new ArrayList<>();\n    for (String child : foundChildren) {\n      if (result.size() >= max) {\n        break;\n      }\n      try {\n        byte[] data = zookeeper.getData(dir + \"/\" + child, null, null, true);\n        result.add(new Pair<>(child, data));\n      } catch (KeeperException.NoNodeException e) {\n        // Another client deleted the node first, remove the in-memory and continue.\n        updateLock.lockInterruptibly();\n        try {\n          knownChildren.remove(child);\n        } finally {\n          updateLock.unlock();\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Return the currently-known set of elements, using child names from memory. If no children are found, or no\n   * children pass {@code acceptFilter}, waits up to {@code waitMillis} for at least one child to become available.\n   * <p/>\n   * Package-private to support {@link OverseerTaskQueue} specifically.\n   */\n  Collection<Pair<String, byte[]>> peekElements(int max, long waitMillis, Predicate<String> acceptFilter) throws KeeperException, InterruptedException {\n    List<String> foundChildren = new ArrayList<>();\n    long waitNanos = TimeUnit.MILLISECONDS.toNanos(waitMillis);\n    boolean first = true;\n    while (true) {\n      // Trigger a refresh, but only force it if this is not the first iteration.\n      firstChild(false, !first);\n\n      updateLock.lockInterruptibly();\n      try {\n        for (String child : knownChildren) {\n          if (acceptFilter.test(child)) {\n            foundChildren.add(child);\n          }\n        }\n        if (!foundChildren.isEmpty()) {\n          break;\n        }\n        if (waitNanos <= 0) {\n          break;\n        }\n\n        // If this is our first time through, force a refresh before waiting.\n        if (first) {\n          first = false;\n          continue;\n        }\n\n        waitNanos = changed.awaitNanos(waitNanos);\n      } finally {\n        updateLock.unlock();\n      }\n\n      if (!foundChildren.isEmpty()) {\n        break;\n      }\n    }\n\n    // Technically we could restart the method if we fail to actually obtain any valid children\n    // from ZK, but this is a super rare case, and the latency of the ZK fetches would require\n    // much more sophisticated waitNanos tracking.\n    List<Pair<String, byte[]>> result = new ArrayList<>();\n    for (String child : foundChildren) {\n      if (result.size() >= max) {\n        break;\n      }\n      try {\n        byte[] data = zookeeper.getData(dir + \"/\" + child, null, null, true);\n        result.add(new Pair<>(child, data));\n      } catch (KeeperException.NoNodeException e) {\n        // Another client deleted the node first, remove the in-memory and continue.\n        updateLock.lockInterruptibly();\n        try {\n          knownChildren.remove(child);\n        } finally {\n          updateLock.unlock();\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["c609c76a49c17e5c1c8a5d5cd2d685be9f306a47","282a69d7d427c265f321423b5a3f989aa16dab10"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["b869898f50ca80263bac2e3ae0949f7700e5c977","89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"282a69d7d427c265f321423b5a3f989aa16dab10":["c609c76a49c17e5c1c8a5d5cd2d685be9f306a47"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c609c76a49c17e5c1c8a5d5cd2d685be9f306a47":["c39bfb3a9d82dcb144aeef9d625f5f8d95619cc0"],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["282a69d7d427c265f321423b5a3f989aa16dab10"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"320888923ec13b91f53082558f01f4c9960dd226":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","c609c76a49c17e5c1c8a5d5cd2d685be9f306a47"],"c39bfb3a9d82dcb144aeef9d625f5f8d95619cc0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c39bfb3a9d82dcb144aeef9d625f5f8d95619cc0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"282a69d7d427c265f321423b5a3f989aa16dab10":["e9017cf144952056066919f1ebc7897ff9bd71b1","89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c39bfb3a9d82dcb144aeef9d625f5f8d95619cc0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c609c76a49c17e5c1c8a5d5cd2d685be9f306a47":["e9017cf144952056066919f1ebc7897ff9bd71b1","282a69d7d427c265f321423b5a3f989aa16dab10","320888923ec13b91f53082558f01f4c9960dd226"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["6240b74b884c5587f2a4062dd27d6c32bf228889"],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"320888923ec13b91f53082558f01f4c9960dd226":[],"c39bfb3a9d82dcb144aeef9d625f5f8d95619cc0":["c609c76a49c17e5c1c8a5d5cd2d685be9f306a47","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["320888923ec13b91f53082558f01f4c9960dd226"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6240b74b884c5587f2a4062dd27d6c32bf228889","320888923ec13b91f53082558f01f4c9960dd226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}