{"path":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testInternals().mjava","commits":[{"id":"0ff61c2e5ce6b1f26a271d9d454206db1917d628","date":1491505661,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testInternals().mjava","pathOld":"/dev/null","sourceNew":"  public void testInternals() throws IOException {\n    String[] types = new String[]{\"i\", \"l\", \"f\", \"d\"};\n    String[] suffixes = new String[]{\"\", \"_dv\", \"_mv\", \"_mv_dv\", \"_ni\", \"_ni_dv\", \"_ni_dv_ns\", \"_ni_mv\", \"_ni_mv_dv\", \"_ni_ns\", \"_ni_ns_mv\", \"_dv_ns\", \"_ni_ns_dv\", \"_dv_ns_mv\"};\n    Set<String> typesTested = new HashSet<>();\n    for (String type:types) {\n      for (String suffix:suffixes) {\n        doTestInternals(\"number_p_\" + type + suffix, getSequentialStringArrayWithInts(10));\n        typesTested.add(\"*_p_\" + type + suffix);\n      }\n    }\n    for (String suffix:suffixes) {\n      doTestInternals(\"number_p_dt\" + suffix, getSequentialStringArrayWithDates(10));\n      typesTested.add(\"*_p_dt\" + suffix);\n    }\n    \n    Set<String> typesToTest = new HashSet<>();\n    for (DynamicField dynField:h.getCore().getLatestSchema().getDynamicFields()) {\n      if (dynField.getPrototype().getType() instanceof PointField) {\n        typesToTest.add(dynField.getRegex());\n      }\n    }\n    assertEquals(\"Missing types in the test\", typesTested, typesToTest);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["79900e89f08cc17c4bcf49789dd61a2236ee7840"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"459679dac02ecc58120b21ff31374b6ca915e88c","date":1491590182,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testInternals().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testInternals().mjava","sourceNew":"  public void testInternals() throws IOException {\n    String[] types = new String[]{\"i\", \"l\", \"f\", \"d\"};\n    String[] suffixes = new String[]{\"\", \"_dv\", \"_mv\", \"_mv_dv\", \"_ni\", \"_ni_dv\", \"_ni_dv_ns\", \"_ni_dv_ns_mv\", \"_ni_mv\", \"_ni_mv_dv\", \"_ni_ns\", \"_ni_ns_mv\", \"_dv_ns\", \"_ni_ns_dv\", \"_dv_ns_mv\"};\n    Set<String> typesTested = new HashSet<>();\n    for (String type:types) {\n      for (String suffix:suffixes) {\n        doTestInternals(\"number_p_\" + type + suffix, getSequentialStringArrayWithInts(10));\n        typesTested.add(\"*_p_\" + type + suffix);\n      }\n    }\n    for (String suffix:suffixes) {\n      doTestInternals(\"number_p_dt\" + suffix, getSequentialStringArrayWithDates(10));\n      typesTested.add(\"*_p_dt\" + suffix);\n    }\n    \n    Set<String> typesToTest = new HashSet<>();\n    for (DynamicField dynField:h.getCore().getLatestSchema().getDynamicFields()) {\n      if (dynField.getPrototype().getType() instanceof PointField) {\n        typesToTest.add(dynField.getRegex());\n      }\n    }\n    assertEquals(\"Missing types in the test\", typesTested, typesToTest);\n  }\n\n","sourceOld":"  public void testInternals() throws IOException {\n    String[] types = new String[]{\"i\", \"l\", \"f\", \"d\"};\n    String[] suffixes = new String[]{\"\", \"_dv\", \"_mv\", \"_mv_dv\", \"_ni\", \"_ni_dv\", \"_ni_dv_ns\", \"_ni_mv\", \"_ni_mv_dv\", \"_ni_ns\", \"_ni_ns_mv\", \"_dv_ns\", \"_ni_ns_dv\", \"_dv_ns_mv\"};\n    Set<String> typesTested = new HashSet<>();\n    for (String type:types) {\n      for (String suffix:suffixes) {\n        doTestInternals(\"number_p_\" + type + suffix, getSequentialStringArrayWithInts(10));\n        typesTested.add(\"*_p_\" + type + suffix);\n      }\n    }\n    for (String suffix:suffixes) {\n      doTestInternals(\"number_p_dt\" + suffix, getSequentialStringArrayWithDates(10));\n      typesTested.add(\"*_p_dt\" + suffix);\n    }\n    \n    Set<String> typesToTest = new HashSet<>();\n    for (DynamicField dynField:h.getCore().getLatestSchema().getDynamicFields()) {\n      if (dynField.getPrototype().getType() instanceof PointField) {\n        typesToTest.add(dynField.getRegex());\n      }\n    }\n    assertEquals(\"Missing types in the test\", typesTested, typesToTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"79900e89f08cc17c4bcf49789dd61a2236ee7840","date":1492541915,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testInternals().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testInternals().mjava","sourceNew":"  public void testInternals() throws IOException {\n    String[] types = new String[]{\"i\", \"l\", \"f\", \"d\"};\n    String[] suffixes = new String[]{\"\", \"_dv\", \"_mv\", \"_mv_dv\", \"_ni\", \"_ni_dv\", \"_ni_dv_ns\", \"_ni_dv_ns_mv\", \"_ni_mv\", \"_ni_mv_dv\", \"_ni_ns\", \"_ni_ns_mv\", \"_dv_ns\", \"_ni_ns_dv\", \"_dv_ns_mv\"};\n    Set<String> typesTested = new HashSet<>();\n    for (String type:types) {\n      for (String suffix:suffixes) {\n        doTestInternals(\"number_p_\" + type + suffix, getSequentialStringArrayWithInts(10));\n        typesTested.add(\"*_p_\" + type + suffix);\n      }\n    }\n    for (String suffix:suffixes) {\n      doTestInternals(\"number_p_dt\" + suffix, getSequentialStringArrayWithDates(10));\n      typesTested.add(\"*_p_dt\" + suffix);\n    }\n\n    assertEquals(\"Missing types in the test\", dynFieldRegexesForType(PointField.class), typesTested);\n  }\n\n","sourceOld":"  public void testInternals() throws IOException {\n    String[] types = new String[]{\"i\", \"l\", \"f\", \"d\"};\n    String[] suffixes = new String[]{\"\", \"_dv\", \"_mv\", \"_mv_dv\", \"_ni\", \"_ni_dv\", \"_ni_dv_ns\", \"_ni_dv_ns_mv\", \"_ni_mv\", \"_ni_mv_dv\", \"_ni_ns\", \"_ni_ns_mv\", \"_dv_ns\", \"_ni_ns_dv\", \"_dv_ns_mv\"};\n    Set<String> typesTested = new HashSet<>();\n    for (String type:types) {\n      for (String suffix:suffixes) {\n        doTestInternals(\"number_p_\" + type + suffix, getSequentialStringArrayWithInts(10));\n        typesTested.add(\"*_p_\" + type + suffix);\n      }\n    }\n    for (String suffix:suffixes) {\n      doTestInternals(\"number_p_dt\" + suffix, getSequentialStringArrayWithDates(10));\n      typesTested.add(\"*_p_dt\" + suffix);\n    }\n    \n    Set<String> typesToTest = new HashSet<>();\n    for (DynamicField dynField:h.getCore().getLatestSchema().getDynamicFields()) {\n      if (dynField.getPrototype().getType() instanceof PointField) {\n        typesToTest.add(dynField.getRegex());\n      }\n    }\n    assertEquals(\"Missing types in the test\", typesTested, typesToTest);\n  }\n\n","bugFix":["0ff61c2e5ce6b1f26a271d9d454206db1917d628"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testInternals().mjava","pathOld":"/dev/null","sourceNew":"  public void testInternals() throws IOException {\n    String[] types = new String[]{\"i\", \"l\", \"f\", \"d\"};\n    String[] suffixes = new String[]{\"\", \"_dv\", \"_mv\", \"_mv_dv\", \"_ni\", \"_ni_dv\", \"_ni_dv_ns\", \"_ni_dv_ns_mv\", \"_ni_mv\", \"_ni_mv_dv\", \"_ni_ns\", \"_ni_ns_mv\", \"_dv_ns\", \"_ni_ns_dv\", \"_dv_ns_mv\"};\n    Set<String> typesTested = new HashSet<>();\n    for (String type:types) {\n      for (String suffix:suffixes) {\n        doTestInternals(\"number_p_\" + type + suffix, getSequentialStringArrayWithInts(10));\n        typesTested.add(\"*_p_\" + type + suffix);\n      }\n    }\n    for (String suffix:suffixes) {\n      doTestInternals(\"number_p_dt\" + suffix, getSequentialStringArrayWithDates(10));\n      typesTested.add(\"*_p_dt\" + suffix);\n    }\n\n    assertEquals(\"Missing types in the test\", dynFieldRegexesForType(PointField.class), typesTested);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89c0b1a887eabf9facdf2c5d2df5e284c6d6daa","date":1496877670,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testInternals().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testInternals().mjava","sourceNew":"  public void testInternals() throws IOException {\n    String[] types = new String[]{\"i\", \"l\", \"f\", \"d\"};\n    Set<String> typesTested = new HashSet<>();\n    for (String type:types) {\n      for (String suffix:FIELD_SUFFIXES) {\n        doTestInternals(\"number_p_\" + type + suffix, getSequentialStringArrayWithInts(10));\n        typesTested.add(\"*_p_\" + type + suffix);\n      }\n    }\n    for (String suffix:FIELD_SUFFIXES) {\n      doTestInternals(\"number_p_dt\" + suffix, getSequentialStringArrayWithDates(10));\n      typesTested.add(\"*_p_dt\" + suffix);\n    }\n\n    assertEquals(\"Missing types in the test\", dynFieldRegexesForType(PointField.class), typesTested);\n  }\n\n","sourceOld":"  public void testInternals() throws IOException {\n    String[] types = new String[]{\"i\", \"l\", \"f\", \"d\"};\n    String[] suffixes = new String[]{\"\", \"_dv\", \"_mv\", \"_mv_dv\", \"_ni\", \"_ni_dv\", \"_ni_dv_ns\", \"_ni_dv_ns_mv\", \"_ni_mv\", \"_ni_mv_dv\", \"_ni_ns\", \"_ni_ns_mv\", \"_dv_ns\", \"_ni_ns_dv\", \"_dv_ns_mv\"};\n    Set<String> typesTested = new HashSet<>();\n    for (String type:types) {\n      for (String suffix:suffixes) {\n        doTestInternals(\"number_p_\" + type + suffix, getSequentialStringArrayWithInts(10));\n        typesTested.add(\"*_p_\" + type + suffix);\n      }\n    }\n    for (String suffix:suffixes) {\n      doTestInternals(\"number_p_dt\" + suffix, getSequentialStringArrayWithDates(10));\n      typesTested.add(\"*_p_dt\" + suffix);\n    }\n\n    assertEquals(\"Missing types in the test\", dynFieldRegexesForType(PointField.class), typesTested);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f344bb33ca91f48e99c061980115b46fa84fc8f5","date":1496903283,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testInternals().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testInternals().mjava","sourceNew":"  public void testInternals() throws IOException {\n    String[] types = new String[]{\"i\", \"l\", \"f\", \"d\"};\n    Set<String> typesTested = new HashSet<>();\n    for (String type:types) {\n      for (String suffix:FIELD_SUFFIXES) {\n        doTestInternals(\"number_p_\" + type + suffix, getSequentialStringArrayWithInts(10));\n        typesTested.add(\"*_p_\" + type + suffix);\n      }\n    }\n    for (String suffix:FIELD_SUFFIXES) {\n      doTestInternals(\"number_p_dt\" + suffix, getSequentialStringArrayWithDates(10));\n      typesTested.add(\"*_p_dt\" + suffix);\n    }\n\n    assertEquals(\"Missing types in the test\", dynFieldRegexesForType(PointField.class), typesTested);\n  }\n\n","sourceOld":"  public void testInternals() throws IOException {\n    String[] types = new String[]{\"i\", \"l\", \"f\", \"d\"};\n    String[] suffixes = new String[]{\"\", \"_dv\", \"_mv\", \"_mv_dv\", \"_ni\", \"_ni_dv\", \"_ni_dv_ns\", \"_ni_dv_ns_mv\", \"_ni_mv\", \"_ni_mv_dv\", \"_ni_ns\", \"_ni_ns_mv\", \"_dv_ns\", \"_ni_ns_dv\", \"_dv_ns_mv\"};\n    Set<String> typesTested = new HashSet<>();\n    for (String type:types) {\n      for (String suffix:suffixes) {\n        doTestInternals(\"number_p_\" + type + suffix, getSequentialStringArrayWithInts(10));\n        typesTested.add(\"*_p_\" + type + suffix);\n      }\n    }\n    for (String suffix:suffixes) {\n      doTestInternals(\"number_p_dt\" + suffix, getSequentialStringArrayWithDates(10));\n      typesTested.add(\"*_p_dt\" + suffix);\n    }\n\n    assertEquals(\"Missing types in the test\", dynFieldRegexesForType(PointField.class), typesTested);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testInternals().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testInternals().mjava","sourceNew":"  public void testInternals() throws IOException {\n    String[] types = new String[]{\"i\", \"l\", \"f\", \"d\"};\n    Set<String> typesTested = new HashSet<>();\n    for (String type:types) {\n      for (String suffix:FIELD_SUFFIXES) {\n        doTestInternals(\"number_p_\" + type + suffix, getSequentialStringArrayWithInts(10));\n        typesTested.add(\"*_p_\" + type + suffix);\n      }\n    }\n    for (String suffix:FIELD_SUFFIXES) {\n      doTestInternals(\"number_p_dt\" + suffix, getSequentialStringArrayWithDates(10));\n      typesTested.add(\"*_p_dt\" + suffix);\n    }\n\n    assertEquals(\"Missing types in the test\", dynFieldRegexesForType(PointField.class), typesTested);\n  }\n\n","sourceOld":"  public void testInternals() throws IOException {\n    String[] types = new String[]{\"i\", \"l\", \"f\", \"d\"};\n    String[] suffixes = new String[]{\"\", \"_dv\", \"_mv\", \"_mv_dv\", \"_ni\", \"_ni_dv\", \"_ni_dv_ns\", \"_ni_dv_ns_mv\", \"_ni_mv\", \"_ni_mv_dv\", \"_ni_ns\", \"_ni_ns_mv\", \"_dv_ns\", \"_ni_ns_dv\", \"_dv_ns_mv\"};\n    Set<String> typesTested = new HashSet<>();\n    for (String type:types) {\n      for (String suffix:suffixes) {\n        doTestInternals(\"number_p_\" + type + suffix, getSequentialStringArrayWithInts(10));\n        typesTested.add(\"*_p_\" + type + suffix);\n      }\n    }\n    for (String suffix:suffixes) {\n      doTestInternals(\"number_p_dt\" + suffix, getSequentialStringArrayWithDates(10));\n      typesTested.add(\"*_p_dt\" + suffix);\n    }\n\n    assertEquals(\"Missing types in the test\", dynFieldRegexesForType(PointField.class), typesTested);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testInternals().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testInternals().mjava","sourceNew":"  public void testInternals() throws IOException {\n    String[] types = new String[]{\"i\", \"l\", \"f\", \"d\"};\n    Set<String> typesTested = new HashSet<>();\n    for (String type:types) {\n      for (String suffix:FIELD_SUFFIXES) {\n        doTestInternals(\"number_p_\" + type + suffix, getSequentialStringArrayWithInts(10));\n        typesTested.add(\"*_p_\" + type + suffix);\n      }\n    }\n    for (String suffix:FIELD_SUFFIXES) {\n      doTestInternals(\"number_p_dt\" + suffix, getSequentialStringArrayWithDates(10));\n      typesTested.add(\"*_p_dt\" + suffix);\n    }\n\n    assertEquals(\"Missing types in the test\", dynFieldRegexesForType(PointField.class), typesTested);\n  }\n\n","sourceOld":"  public void testInternals() throws IOException {\n    String[] types = new String[]{\"i\", \"l\", \"f\", \"d\"};\n    String[] suffixes = new String[]{\"\", \"_dv\", \"_mv\", \"_mv_dv\", \"_ni\", \"_ni_dv\", \"_ni_dv_ns\", \"_ni_dv_ns_mv\", \"_ni_mv\", \"_ni_mv_dv\", \"_ni_ns\", \"_ni_ns_mv\", \"_dv_ns\", \"_ni_ns_dv\", \"_dv_ns_mv\"};\n    Set<String> typesTested = new HashSet<>();\n    for (String type:types) {\n      for (String suffix:suffixes) {\n        doTestInternals(\"number_p_\" + type + suffix, getSequentialStringArrayWithInts(10));\n        typesTested.add(\"*_p_\" + type + suffix);\n      }\n    }\n    for (String suffix:suffixes) {\n      doTestInternals(\"number_p_dt\" + suffix, getSequentialStringArrayWithDates(10));\n      typesTested.add(\"*_p_dt\" + suffix);\n    }\n\n    assertEquals(\"Missing types in the test\", dynFieldRegexesForType(PointField.class), typesTested);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac5a6354a5800dd1ade225010d614eeb8acf9152","date":1499731103,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testInternals().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testInternals().mjava","sourceNew":"  public void testInternals() throws IOException {\n    String[] types = new String[]{\"i\", \"l\", \"f\", \"d\", \"dt\"};\n    String[][] values = new String[][] {\n        toStringArray(getRandomInts(10, false)),\n        toStringArray(getRandomLongs(10, false)),\n        toStringArray(getRandomFloats(10, false)),\n        toStringArray(getRandomDoubles(10, false)),\n        toStringArray(getRandomInstants(10, false))\n    };\n    assertEquals(types.length, values.length);\n    Set<String> typesTested = new HashSet<>();\n    for (int i = 0 ; i < types.length ; ++i) {\n      for (String suffix:FIELD_SUFFIXES) {\n        doTestInternals(\"number_p_\" + types[i] + suffix, values[i]);\n        typesTested.add(\"*_p_\" + types[i] + suffix);\n      }\n    }\n    assertEquals(\"Missing types in the test\", dynFieldRegexesForType(PointField.class), typesTested);\n  }\n\n","sourceOld":"  public void testInternals() throws IOException {\n    String[] types = new String[]{\"i\", \"l\", \"f\", \"d\"};\n    Set<String> typesTested = new HashSet<>();\n    for (String type:types) {\n      for (String suffix:FIELD_SUFFIXES) {\n        doTestInternals(\"number_p_\" + type + suffix, getSequentialStringArrayWithInts(10));\n        typesTested.add(\"*_p_\" + type + suffix);\n      }\n    }\n    for (String suffix:FIELD_SUFFIXES) {\n      doTestInternals(\"number_p_dt\" + suffix, getSequentialStringArrayWithDates(10));\n      typesTested.add(\"*_p_dt\" + suffix);\n    }\n\n    assertEquals(\"Missing types in the test\", dynFieldRegexesForType(PointField.class), typesTested);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9a989a32a073c55e3aef6f807a3474184bbcf49","date":1499930209,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testInternals().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testInternals().mjava","sourceNew":"  public void testInternals() throws IOException {\n    String[] types = new String[]{\"i\", \"l\", \"f\", \"d\", \"dt\"};\n    String[][] values = new String[][] {\n        toStringArray(getRandomInts(10, false)),\n        toStringArray(getRandomLongs(10, false)),\n        toStringArray(getRandomFloats(10, false)),\n        toStringArray(getRandomDoubles(10, false)),\n        toStringArray(getRandomInstants(10, false))\n    };\n    assertEquals(types.length, values.length);\n    Set<String> typesTested = new HashSet<>();\n    for (int i = 0 ; i < types.length ; ++i) {\n      for (String suffix:FIELD_SUFFIXES) {\n        doTestInternals(\"number_p_\" + types[i] + suffix, values[i]);\n        typesTested.add(\"*_p_\" + types[i] + suffix);\n      }\n    }\n    assertEquals(\"Missing types in the test\", dynFieldRegexesForType(PointField.class), typesTested);\n  }\n\n","sourceOld":"  public void testInternals() throws IOException {\n    String[] types = new String[]{\"i\", \"l\", \"f\", \"d\"};\n    Set<String> typesTested = new HashSet<>();\n    for (String type:types) {\n      for (String suffix:FIELD_SUFFIXES) {\n        doTestInternals(\"number_p_\" + type + suffix, getSequentialStringArrayWithInts(10));\n        typesTested.add(\"*_p_\" + type + suffix);\n      }\n    }\n    for (String suffix:FIELD_SUFFIXES) {\n      doTestInternals(\"number_p_dt\" + suffix, getSequentialStringArrayWithDates(10));\n      typesTested.add(\"*_p_dt\" + suffix);\n    }\n\n    assertEquals(\"Missing types in the test\", dynFieldRegexesForType(PointField.class), typesTested);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb569fd721c41eafc2a2d788499a7df490c7f1a5","date":1499930871,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testInternals().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testInternals().mjava","sourceNew":"  public void testInternals() throws IOException {\n    String[] types = new String[]{\"i\", \"l\", \"f\", \"d\", \"dt\"};\n    String[][] values = new String[][] {\n        toStringArray(getRandomInts(10, false)),\n        toStringArray(getRandomLongs(10, false)),\n        toStringArray(getRandomFloats(10, false)),\n        toStringArray(getRandomDoubles(10, false)),\n        toStringArray(getRandomInstants(10, false))\n    };\n    assertEquals(types.length, values.length);\n    Set<String> typesTested = new HashSet<>();\n    for (int i = 0 ; i < types.length ; ++i) {\n      for (String suffix:FIELD_SUFFIXES) {\n        doTestInternals(\"number_p_\" + types[i] + suffix, values[i]);\n        typesTested.add(\"*_p_\" + types[i] + suffix);\n      }\n    }\n    assertEquals(\"Missing types in the test\", dynFieldRegexesForType(PointField.class), typesTested);\n  }\n\n","sourceOld":"  public void testInternals() throws IOException {\n    String[] types = new String[]{\"i\", \"l\", \"f\", \"d\"};\n    Set<String> typesTested = new HashSet<>();\n    for (String type:types) {\n      for (String suffix:FIELD_SUFFIXES) {\n        doTestInternals(\"number_p_\" + type + suffix, getSequentialStringArrayWithInts(10));\n        typesTested.add(\"*_p_\" + type + suffix);\n      }\n    }\n    for (String suffix:FIELD_SUFFIXES) {\n      doTestInternals(\"number_p_dt\" + suffix, getSequentialStringArrayWithDates(10));\n      typesTested.add(\"*_p_dt\" + suffix);\n    }\n\n    assertEquals(\"Missing types in the test\", dynFieldRegexesForType(PointField.class), typesTested);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"459679dac02ecc58120b21ff31374b6ca915e88c":["0ff61c2e5ce6b1f26a271d9d454206db1917d628"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b89c0b1a887eabf9facdf2c5d2df5e284c6d6daa":["79900e89f08cc17c4bcf49789dd61a2236ee7840"],"fb569fd721c41eafc2a2d788499a7df490c7f1a5":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"79900e89f08cc17c4bcf49789dd61a2236ee7840":["459679dac02ecc58120b21ff31374b6ca915e88c"],"f344bb33ca91f48e99c061980115b46fa84fc8f5":["79900e89f08cc17c4bcf49789dd61a2236ee7840","b89c0b1a887eabf9facdf2c5d2df5e284c6d6daa"],"28288370235ed02234a64753cdbf0c6ec096304a":["79900e89f08cc17c4bcf49789dd61a2236ee7840","f344bb33ca91f48e99c061980115b46fa84fc8f5"],"f9a989a32a073c55e3aef6f807a3474184bbcf49":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","ac5a6354a5800dd1ade225010d614eeb8acf9152"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ac5a6354a5800dd1ade225010d614eeb8acf9152":["28288370235ed02234a64753cdbf0c6ec096304a"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","f344bb33ca91f48e99c061980115b46fa84fc8f5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ac5a6354a5800dd1ade225010d614eeb8acf9152"],"0ff61c2e5ce6b1f26a271d9d454206db1917d628":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"459679dac02ecc58120b21ff31374b6ca915e88c":["79900e89f08cc17c4bcf49789dd61a2236ee7840"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"b89c0b1a887eabf9facdf2c5d2df5e284c6d6daa":["f344bb33ca91f48e99c061980115b46fa84fc8f5"],"fb569fd721c41eafc2a2d788499a7df490c7f1a5":[],"79900e89f08cc17c4bcf49789dd61a2236ee7840":["b89c0b1a887eabf9facdf2c5d2df5e284c6d6daa","f344bb33ca91f48e99c061980115b46fa84fc8f5","28288370235ed02234a64753cdbf0c6ec096304a"],"f344bb33ca91f48e99c061980115b46fa84fc8f5":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"f9a989a32a073c55e3aef6f807a3474184bbcf49":["fb569fd721c41eafc2a2d788499a7df490c7f1a5"],"28288370235ed02234a64753cdbf0c6ec096304a":["ac5a6354a5800dd1ade225010d614eeb8acf9152"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","0ff61c2e5ce6b1f26a271d9d454206db1917d628"],"ac5a6354a5800dd1ade225010d614eeb8acf9152":["f9a989a32a073c55e3aef6f807a3474184bbcf49","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["fb569fd721c41eafc2a2d788499a7df490c7f1a5","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"0ff61c2e5ce6b1f26a271d9d454206db1917d628":["459679dac02ecc58120b21ff31374b6ca915e88c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fb569fd721c41eafc2a2d788499a7df490c7f1a5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}