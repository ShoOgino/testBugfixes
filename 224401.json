{"path":"src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","commits":[{"id":"f011f01db72fa6f556a9a0843944ecee2de4aaa8","date":1255806907,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map).mjava","sourceNew":"  /**\n   * Commit changes resulting from delete, undeleteAll, or setNorm operations\n   * <p/>\n   * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional\n   * semantics).\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    if (hasChanges) {\n      segmentInfos.setUserData(commitUserData);\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      IndexFileDeleter deleter = new IndexFileDeleter(directory,\n                                                      deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                      segmentInfos, null, null);\n\n      // Checkpoint the state we are about to change, in\n      // case we have to roll back:\n      startCommit();\n\n      boolean success = false;\n      try {\n        for (int i = 0; i < subReaders.length; i++)\n          subReaders[i].commit();\n\n        // Sync all files we just wrote\n        final Collection<String> files = segmentInfos.files(directory, false);\n        for (final String fileName : files) { \n          if (!synced.contains(fileName)) {\n            assert directory.fileExists(fileName);\n            directory.sync(fileName);\n            synced.add(fileName);\n          }\n        }\n\n        segmentInfos.commit(directory);\n        success = true;\n      } finally {\n\n        if (!success) {\n\n          // Rollback changes that were made to\n          // SegmentInfos but failed to get [fully]\n          // committed.  This way this reader instance\n          // remains consistent (matched to what's\n          // actually in the index):\n          rollbackCommit();\n\n          // Recompute deletable files & remove them (so\n          // partially written .del files, etc, are\n          // removed):\n          deleter.refresh();\n        }\n      }\n\n      // Have the deleter remove any now unreferenced\n      // files due to this commit:\n      deleter.checkpoint(segmentInfos, true);\n      deleter.close();\n\n      if (writeLock != null) {\n        writeLock.release();  // release write lock\n        writeLock = null;\n      }\n    }\n    hasChanges = false;\n  }\n\n","sourceOld":"  /**\n   * Commit changes resulting from delete, undeleteAll, or setNorm operations\n   * <p/>\n   * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional\n   * semantics).\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  protected void doCommit(Map commitUserData) throws IOException {\n    if (hasChanges) {\n      segmentInfos.setUserData(commitUserData);\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      IndexFileDeleter deleter = new IndexFileDeleter(directory,\n                                                      deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                      segmentInfos, null, null);\n\n      // Checkpoint the state we are about to change, in\n      // case we have to roll back:\n      startCommit();\n\n      boolean success = false;\n      try {\n        for (int i = 0; i < subReaders.length; i++)\n          subReaders[i].commit();\n\n        // Sync all files we just wrote\n        Iterator it = segmentInfos.files(directory, false).iterator();\n        while (it.hasNext()) {\n          final String fileName = (String) it.next();\n          if (!synced.contains(fileName)) {\n            assert directory.fileExists(fileName);\n            directory.sync(fileName);\n            synced.add(fileName);\n          }\n        }\n\n        segmentInfos.commit(directory);\n        success = true;\n      } finally {\n\n        if (!success) {\n\n          // Rollback changes that were made to\n          // SegmentInfos but failed to get [fully]\n          // committed.  This way this reader instance\n          // remains consistent (matched to what's\n          // actually in the index):\n          rollbackCommit();\n\n          // Recompute deletable files & remove them (so\n          // partially written .del files, etc, are\n          // removed):\n          deleter.refresh();\n        }\n      }\n\n      // Have the deleter remove any now unreferenced\n      // files due to this commit:\n      deleter.checkpoint(segmentInfos, true);\n      deleter.close();\n\n      if (writeLock != null) {\n        writeLock.release();  // release write lock\n        writeLock = null;\n      }\n    }\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","sourceNew":"  /**\n   * Commit changes resulting from delete, undeleteAll, or setNorm operations\n   * <p/>\n   * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional\n   * semantics).\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    if (hasChanges) {\n      segmentInfos.setUserData(commitUserData);\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      IndexFileDeleter deleter = new IndexFileDeleter(directory,\n                                                      deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                      segmentInfos, null, null);\n\n      // Checkpoint the state we are about to change, in\n      // case we have to roll back:\n      startCommit();\n\n      boolean success = false;\n      try {\n        for (int i = 0; i < subReaders.length; i++)\n          subReaders[i].commit();\n\n        // Sync all files we just wrote\n        final Collection<String> files = segmentInfos.files(directory, false);\n        for (final String fileName : files) { \n          if (!synced.contains(fileName)) {\n            assert directory.fileExists(fileName);\n            directory.sync(fileName);\n            synced.add(fileName);\n          }\n        }\n\n        segmentInfos.commit(directory);\n        success = true;\n      } finally {\n\n        if (!success) {\n\n          // Rollback changes that were made to\n          // SegmentInfos but failed to get [fully]\n          // committed.  This way this reader instance\n          // remains consistent (matched to what's\n          // actually in the index):\n          rollbackCommit();\n\n          // Recompute deletable files & remove them (so\n          // partially written .del files, etc, are\n          // removed):\n          deleter.refresh();\n        }\n      }\n\n      // Have the deleter remove any now unreferenced\n      // files due to this commit:\n      deleter.checkpoint(segmentInfos, true);\n      deleter.close();\n\n      if (writeLock != null) {\n        writeLock.release();  // release write lock\n        writeLock = null;\n      }\n    }\n    hasChanges = false;\n  }\n\n","sourceOld":"  /**\n   * Commit changes resulting from delete, undeleteAll, or setNorm operations\n   * <p/>\n   * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional\n   * semantics).\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    if (hasChanges) {\n      segmentInfos.setUserData(commitUserData);\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      IndexFileDeleter deleter = new IndexFileDeleter(directory,\n                                                      deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                      segmentInfos, null, null);\n\n      // Checkpoint the state we are about to change, in\n      // case we have to roll back:\n      startCommit();\n\n      boolean success = false;\n      try {\n        for (int i = 0; i < subReaders.length; i++)\n          subReaders[i].commit();\n\n        // Sync all files we just wrote\n        final Collection<String> files = segmentInfos.files(directory, false);\n        for (final String fileName : files) { \n          if (!synced.contains(fileName)) {\n            assert directory.fileExists(fileName);\n            directory.sync(fileName);\n            synced.add(fileName);\n          }\n        }\n\n        segmentInfos.commit(directory);\n        success = true;\n      } finally {\n\n        if (!success) {\n\n          // Rollback changes that were made to\n          // SegmentInfos but failed to get [fully]\n          // committed.  This way this reader instance\n          // remains consistent (matched to what's\n          // actually in the index):\n          rollbackCommit();\n\n          // Recompute deletable files & remove them (so\n          // partially written .del files, etc, are\n          // removed):\n          deleter.refresh();\n        }\n      }\n\n      // Have the deleter remove any now unreferenced\n      // files due to this commit:\n      deleter.checkpoint(segmentInfos, true);\n      deleter.close();\n\n      if (writeLock != null) {\n        writeLock.release();  // release write lock\n        writeLock = null;\n      }\n    }\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","sourceNew":"  /**\n   * Commit changes resulting from delete, undeleteAll, or setNorm operations\n   * <p/>\n   * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional\n   * semantics).\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    if (hasChanges) {\n      segmentInfos.setUserData(commitUserData);\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      IndexFileDeleter deleter = new IndexFileDeleter(directory,\n                                                      deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                      segmentInfos, null, null);\n\n      // Checkpoint the state we are about to change, in\n      // case we have to roll back:\n      startCommit();\n\n      boolean success = false;\n      try {\n        for (int i = 0; i < subReaders.length; i++)\n          subReaders[i].commit();\n\n        // Sync all files we just wrote\n        final Collection<String> files = segmentInfos.files(directory, false);\n        for (final String fileName : files) { \n          if (!synced.contains(fileName)) {\n            assert directory.fileExists(fileName);\n            directory.sync(fileName);\n            synced.add(fileName);\n          }\n        }\n\n        segmentInfos.commit(directory);\n        success = true;\n      } finally {\n\n        if (!success) {\n\n          // Rollback changes that were made to\n          // SegmentInfos but failed to get [fully]\n          // committed.  This way this reader instance\n          // remains consistent (matched to what's\n          // actually in the index):\n          rollbackCommit();\n\n          // Recompute deletable files & remove them (so\n          // partially written .del files, etc, are\n          // removed):\n          deleter.refresh();\n        }\n      }\n\n      // Have the deleter remove any now unreferenced\n      // files due to this commit:\n      deleter.checkpoint(segmentInfos, true);\n      deleter.close();\n\n      if (writeLock != null) {\n        writeLock.release();  // release write lock\n        writeLock = null;\n      }\n    }\n    hasChanges = false;\n  }\n\n","sourceOld":"  /**\n   * Commit changes resulting from delete, undeleteAll, or setNorm operations\n   * <p/>\n   * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional\n   * semantics).\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    if (hasChanges) {\n      segmentInfos.setUserData(commitUserData);\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      IndexFileDeleter deleter = new IndexFileDeleter(directory,\n                                                      deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                      segmentInfos, null, null);\n\n      // Checkpoint the state we are about to change, in\n      // case we have to roll back:\n      startCommit();\n\n      boolean success = false;\n      try {\n        for (int i = 0; i < subReaders.length; i++)\n          subReaders[i].commit();\n\n        // Sync all files we just wrote\n        final Collection<String> files = segmentInfos.files(directory, false);\n        for (final String fileName : files) { \n          if (!synced.contains(fileName)) {\n            assert directory.fileExists(fileName);\n            directory.sync(fileName);\n            synced.add(fileName);\n          }\n        }\n\n        segmentInfos.commit(directory);\n        success = true;\n      } finally {\n\n        if (!success) {\n\n          // Rollback changes that were made to\n          // SegmentInfos but failed to get [fully]\n          // committed.  This way this reader instance\n          // remains consistent (matched to what's\n          // actually in the index):\n          rollbackCommit();\n\n          // Recompute deletable files & remove them (so\n          // partially written .del files, etc, are\n          // removed):\n          deleter.refresh();\n        }\n      }\n\n      // Have the deleter remove any now unreferenced\n      // files due to this commit:\n      deleter.checkpoint(segmentInfos, true);\n      deleter.close();\n\n      if (writeLock != null) {\n        writeLock.release();  // release write lock\n        writeLock = null;\n      }\n    }\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"8a9e385641d717e641408d8fbbc62be8fc766357":["f011f01db72fa6f556a9a0843944ecee2de4aaa8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f011f01db72fa6f556a9a0843944ecee2de4aaa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"]},"commit2Childs":{"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f011f01db72fa6f556a9a0843944ecee2de4aaa8"],"f011f01db72fa6f556a9a0843944ecee2de4aaa8":["8a9e385641d717e641408d8fbbc62be8fc766357"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}