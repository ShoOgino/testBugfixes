{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnlyOnFlush#eval(MockDirectoryWrapper).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnlyOnFlush#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnlyOnFlush#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawAppend = false;\n        boolean sawFlush = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (FreqProxTermsWriterPerField.class.getName().equals(trace[i].getClassName()) && \"flush\".equals(trace[i].getMethodName()))\n            sawAppend = true;\n          if (\"flush\".equals(trace[i].getMethodName()))\n            sawFlush = true;\n        }\n\n        if (sawAppend && sawFlush && count++ >= 30) {\n          doFail = false;\n          throw new IOException(\"now failing during flush\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawAppend = false;\n        boolean sawFlush = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (FreqProxTermsWriterPerField.class.getName().equals(trace[i].getClassName()) && \"flush\".equals(trace[i].getMethodName()))\n            sawAppend = true;\n          if (\"flush\".equals(trace[i].getMethodName()))\n            sawFlush = true;\n        }\n\n        if (sawAppend && sawFlush && count++ >= 30) {\n          doFail = false;\n          throw new IOException(\"now failing during flush\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66d4c05d2724c63d6dcbdb32aab67299d77e3ca1","date":1370803313,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnlyOnFlush#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnlyOnFlush#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawAppend = false;\n        boolean sawFlush = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (sawAppend && sawFlush) {\n            break;\n          }\n          if (FreqProxTermsWriterPerField.class.getName().equals(trace[i].getClassName()) && \"flush\".equals(trace[i].getMethodName())) {\n            sawAppend = true;\n          }\n          if (\"flush\".equals(trace[i].getMethodName())) {\n            sawFlush = true;\n          }\n        }\n\n        if (sawAppend && sawFlush && count++ >= 30) {\n          doFail = false;\n          throw new IOException(\"now failing during flush\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawAppend = false;\n        boolean sawFlush = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (FreqProxTermsWriterPerField.class.getName().equals(trace[i].getClassName()) && \"flush\".equals(trace[i].getMethodName()))\n            sawAppend = true;\n          if (\"flush\".equals(trace[i].getMethodName()))\n            sawFlush = true;\n        }\n\n        if (sawAppend && sawFlush && count++ >= 30) {\n          doFail = false;\n          throw new IOException(\"now failing during flush\");\n        }\n      }\n    }\n\n","bugFix":["3cc749c053615f5871f3b95715fe292f34e70a53","14975dba6846360ff627c6797726fa4899a3413d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","date":1379624229,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnlyOnFlush#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnlyOnFlush#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawFlush = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (\"flush\".equals(trace[i].getMethodName())) {\n            sawFlush = true;\n            break;\n          }\n        }\n\n        if (sawFlush && count++ >= 30) {\n          doFail = false;\n          throw new IOException(\"now failing during flush\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawAppend = false;\n        boolean sawFlush = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (sawAppend && sawFlush) {\n            break;\n          }\n          if (FreqProxTermsWriterPerField.class.getName().equals(trace[i].getClassName()) && \"flush\".equals(trace[i].getMethodName())) {\n            sawAppend = true;\n          }\n          if (\"flush\".equals(trace[i].getMethodName())) {\n            sawFlush = true;\n          }\n        }\n\n        if (sawAppend && sawFlush && count++ >= 30) {\n          doFail = false;\n          throw new IOException(\"now failing during flush\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a263b971361c67dcc8e809d6349e8940a1d5066","date":1398516528,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnlyOnFlush#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnlyOnFlush#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawFlush = false;\n        boolean sawFinishDocument = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (\"flush\".equals(trace[i].getMethodName())) {\n            sawFlush = true;\n          }\n          if (\"finishDocument\".equals(trace[i].getMethodName())) {\n            sawFinishDocument = true;\n          }\n        }\n\n        if (sawFlush && sawFinishDocument == false && count++ >= 30) {\n          doFail = false;\n          throw new IOException(\"now failing during flush\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawFlush = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (\"flush\".equals(trace[i].getMethodName())) {\n            sawFlush = true;\n            break;\n          }\n        }\n\n        if (sawFlush && count++ >= 30) {\n          doFail = false;\n          throw new IOException(\"now failing during flush\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnlyOnFlush#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnlyOnFlush#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawFlush = false;\n        boolean sawFinishDocument = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (\"flush\".equals(trace[i].getMethodName())) {\n            sawFlush = true;\n          }\n          if (\"finishDocument\".equals(trace[i].getMethodName())) {\n            sawFinishDocument = true;\n          }\n        }\n\n        if (sawFlush && sawFinishDocument == false && count++ >= 30) {\n          doFail = false;\n          throw new IOException(\"now failing during flush\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawFlush = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (\"flush\".equals(trace[i].getMethodName())) {\n            sawFlush = true;\n            break;\n          }\n        }\n\n        if (sawFlush && count++ >= 30) {\n          doFail = false;\n          throw new IOException(\"now failing during flush\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2916966cc9815e973c01452a0d76c98c5e0d0926","date":1577444040,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnlyOnFlush#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnlyOnFlush#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        if (callStackContainsAnyOf(\"flush\") && false == callStackContainsAnyOf(\"finishDocument\") && count++ >= 30) {\n          doFail = false;\n          throw new IOException(\"now failing during flush\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawFlush = false;\n        boolean sawFinishDocument = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (\"flush\".equals(trace[i].getMethodName())) {\n            sawFlush = true;\n          }\n          if (\"finishDocument\".equals(trace[i].getMethodName())) {\n            sawFinishDocument = true;\n          }\n        }\n\n        if (sawFlush && sawFinishDocument == false && count++ >= 30) {\n          doFail = false;\n          throw new IOException(\"now failing during flush\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94ec73c5617c177b1d81ddfe04bbff1d08fccecc","date":1577456244,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnlyOnFlush#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnlyOnFlush#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        if (callStackContainsAnyOf(\"flush\") && false == callStackContainsAnyOf(\"finishDocument\") && count++ >= 30) {\n          doFail = false;\n          throw new IOException(\"now failing during flush\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawFlush = false;\n        boolean sawFinishDocument = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (\"flush\".equals(trace[i].getMethodName())) {\n            sawFlush = true;\n          }\n          if (\"finishDocument\".equals(trace[i].getMethodName())) {\n            sawFinishDocument = true;\n          }\n        }\n\n        if (sawFlush && sawFinishDocument == false && count++ >= 30) {\n          doFail = false;\n          throw new IOException(\"now failing during flush\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4a263b971361c67dcc8e809d6349e8940a1d5066":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"66d4c05d2724c63d6dcbdb32aab67299d77e3ca1":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","4a263b971361c67dcc8e809d6349e8940a1d5066"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["66d4c05d2724c63d6dcbdb32aab67299d77e3ca1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2916966cc9815e973c01452a0d76c98c5e0d0926":["4a263b971361c67dcc8e809d6349e8940a1d5066"],"94ec73c5617c177b1d81ddfe04bbff1d08fccecc":["4a263b971361c67dcc8e809d6349e8940a1d5066","2916966cc9815e973c01452a0d76c98c5e0d0926"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2916966cc9815e973c01452a0d76c98c5e0d0926"]},"commit2Childs":{"4a263b971361c67dcc8e809d6349e8940a1d5066":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","2916966cc9815e973c01452a0d76c98c5e0d0926","94ec73c5617c177b1d81ddfe04bbff1d08fccecc"],"66d4c05d2724c63d6dcbdb32aab67299d77e3ca1":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["66d4c05d2724c63d6dcbdb32aab67299d77e3ca1"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["4a263b971361c67dcc8e809d6349e8940a1d5066","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2916966cc9815e973c01452a0d76c98c5e0d0926":["94ec73c5617c177b1d81ddfe04bbff1d08fccecc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"94ec73c5617c177b1d81ddfe04bbff1d08fccecc":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","94ec73c5617c177b1d81ddfe04bbff1d08fccecc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}