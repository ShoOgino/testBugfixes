{"path":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeDisjoint(Rectangle).mjava","commits":[{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeDisjoint(Rectangle).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeDisjoint(Rectangle).mjava","sourceNew":"  /**\n   * Constructs a query to retrieve documents that are disjoint to the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeDisjoint(Rectangle bbox) {\n\n    // general case\n    // docMinX > queryExtent.getMaxX() OR docMaxX < queryExtent.getMinX() OR docMinY > queryExtent.getMaxY() OR docMaxY < queryExtent.getMinY()\n\n    // Y conditions\n    // docMinY > queryExtent.getMaxY() OR docMaxY < queryExtent.getMinY()\n    Query qMinY = LegacyNumericRangeQuery.newDoubleRange(field_minY, getPrecisionStep(), bbox.getMaxY(), null, false, false);\n    Query qMaxY = LegacyNumericRangeQuery.newDoubleRange(field_maxY, getPrecisionStep(), null, bbox.getMinY(), false, false);\n    Query yConditions = this.makeQuery(BooleanClause.Occur.SHOULD, qMinY, qMaxY);\n\n    // X conditions\n    Query xConditions;\n\n    // queries that do not cross the date line\n    if (!bbox.getCrossesDateLine()) {\n\n      // X Conditions for documents that do not cross the date line,\n      // docMinX > queryExtent.getMaxX() OR docMaxX < queryExtent.getMinX()\n      Query qMinX = LegacyNumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), bbox.getMaxX(), null, false, false);\n      if (bbox.getMinX() == -180.0 && ctx.isGeo()) {//touches dateline; -180 == 180\n        BooleanQuery.Builder bq = new BooleanQuery.Builder();\n        bq.add(qMinX, BooleanClause.Occur.MUST);\n        bq.add(makeNumberTermQuery(field_maxX, 180.0), BooleanClause.Occur.MUST_NOT);\n        qMinX = bq.build();\n      }\n      Query qMaxX = LegacyNumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), null, bbox.getMinX(), false, false);\n      if (bbox.getMaxX() == 180.0 && ctx.isGeo()) {//touches dateline; -180 == 180\n        BooleanQuery.Builder bq = new BooleanQuery.Builder();\n        bq.add(qMaxX, BooleanClause.Occur.MUST);\n        bq.add(makeNumberTermQuery(field_minX, -180.0), BooleanClause.Occur.MUST_NOT);\n        qMaxX = bq.build();\n      }\n      Query qMinMax = this.makeQuery(BooleanClause.Occur.SHOULD, qMinX, qMaxX);\n      Query qNonXDL = this.makeXDL(false, qMinMax);\n\n      if (!ctx.isGeo()) {\n        xConditions = qNonXDL;\n      } else {\n        // X Conditions for documents that cross the date line,\n\n        // both the left and right portions of the document must be disjoint to the query\n        // (docMinXLeft > queryExtent.getMaxX() OR docMaxXLeft < queryExtent.getMinX()) AND\n        // (docMinXRight > queryExtent.getMaxX() OR docMaxXRight < queryExtent.getMinX())\n        // where: docMaxXLeft = 180.0, docMinXRight = -180.0\n        // (docMaxXLeft  < queryExtent.getMinX()) equates to (180.0  < queryExtent.getMinX()) and is ignored\n        // (docMinXRight > queryExtent.getMaxX()) equates to (-180.0 > queryExtent.getMaxX()) and is ignored\n        Query qMinXLeft = LegacyNumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), bbox.getMaxX(), null, false, false);\n        Query qMaxXRight = LegacyNumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), null, bbox.getMinX(), false, false);\n        Query qLeftRight = this.makeQuery(BooleanClause.Occur.MUST, qMinXLeft, qMaxXRight);\n        Query qXDL = this.makeXDL(true, qLeftRight);\n\n        // apply the non-XDL and XDL conditions\n        xConditions = this.makeQuery(BooleanClause.Occur.SHOULD, qNonXDL, qXDL);\n      }\n      // queries that cross the date line\n    } else {\n\n      // X Conditions for documents that do not cross the date line,\n      // the document must be disjoint to both the left and right query portions\n      // (docMinX > queryExtent.getMaxX()Left OR docMaxX < queryExtent.getMinX()) AND (docMinX > queryExtent.getMaxX() OR docMaxX < queryExtent.getMinX()Left)\n      // where: queryExtent.getMaxX()Left = 180.0, queryExtent.getMinX()Left = -180.0\n      Query qMinXLeft = LegacyNumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), 180.0, null, false, false);\n      Query qMaxXLeft = LegacyNumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), null, bbox.getMinX(), false, false);\n      Query qMinXRight = LegacyNumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), bbox.getMaxX(), null, false, false);\n      Query qMaxXRight = LegacyNumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), null, -180.0, false, false);\n      Query qLeft = this.makeQuery(BooleanClause.Occur.SHOULD, qMinXLeft, qMaxXLeft);\n      Query qRight = this.makeQuery(BooleanClause.Occur.SHOULD, qMinXRight, qMaxXRight);\n      Query qLeftRight = this.makeQuery(BooleanClause.Occur.MUST, qLeft, qRight);\n\n      // No need to search for documents that do not cross the date line\n\n      xConditions = this.makeXDL(false, qLeftRight);\n    }\n\n    // either X or Y conditions should occur\n    return this.makeQuery(BooleanClause.Occur.SHOULD, xConditions, yConditions);\n  }\n\n","sourceOld":"  /**\n   * Constructs a query to retrieve documents that are disjoint to the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeDisjoint(Rectangle bbox) {\n\n    // general case\n    // docMinX > queryExtent.getMaxX() OR docMaxX < queryExtent.getMinX() OR docMinY > queryExtent.getMaxY() OR docMaxY < queryExtent.getMinY()\n\n    // Y conditions\n    // docMinY > queryExtent.getMaxY() OR docMaxY < queryExtent.getMinY()\n    Query qMinY = LegacyNumericRangeQuery.newDoubleRange(field_minY, getPrecisionStep(), bbox.getMaxY(), null, false, false);\n    Query qMaxY = LegacyNumericRangeQuery.newDoubleRange(field_maxY, getPrecisionStep(), null, bbox.getMinY(), false, false);\n    Query yConditions = this.makeQuery(BooleanClause.Occur.SHOULD, qMinY, qMaxY);\n\n    // X conditions\n    Query xConditions;\n\n    // queries that do not cross the date line\n    if (!bbox.getCrossesDateLine()) {\n\n      // X Conditions for documents that do not cross the date line,\n      // docMinX > queryExtent.getMaxX() OR docMaxX < queryExtent.getMinX()\n      Query qMinX = LegacyNumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), bbox.getMaxX(), null, false, false);\n      if (bbox.getMinX() == -180.0 && ctx.isGeo()) {//touches dateline; -180 == 180\n        BooleanQuery.Builder bq = new BooleanQuery.Builder();\n        bq.add(qMinX, BooleanClause.Occur.MUST);\n        bq.add(makeNumberTermQuery(field_maxX, 180.0), BooleanClause.Occur.MUST_NOT);\n        qMinX = bq.build();\n      }\n      Query qMaxX = LegacyNumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), null, bbox.getMinX(), false, false);\n      if (bbox.getMaxX() == 180.0 && ctx.isGeo()) {//touches dateline; -180 == 180\n        BooleanQuery.Builder bq = new BooleanQuery.Builder();\n        bq.add(qMaxX, BooleanClause.Occur.MUST);\n        bq.add(makeNumberTermQuery(field_minX, -180.0), BooleanClause.Occur.MUST_NOT);\n        qMaxX = bq.build();\n      }\n      Query qMinMax = this.makeQuery(BooleanClause.Occur.SHOULD, qMinX, qMaxX);\n      Query qNonXDL = this.makeXDL(false, qMinMax);\n\n      if (!ctx.isGeo()) {\n        xConditions = qNonXDL;\n      } else {\n        // X Conditions for documents that cross the date line,\n\n        // both the left and right portions of the document must be disjoint to the query\n        // (docMinXLeft > queryExtent.getMaxX() OR docMaxXLeft < queryExtent.getMinX()) AND\n        // (docMinXRight > queryExtent.getMaxX() OR docMaxXRight < queryExtent.getMinX())\n        // where: docMaxXLeft = 180.0, docMinXRight = -180.0\n        // (docMaxXLeft  < queryExtent.getMinX()) equates to (180.0  < queryExtent.getMinX()) and is ignored\n        // (docMinXRight > queryExtent.getMaxX()) equates to (-180.0 > queryExtent.getMaxX()) and is ignored\n        Query qMinXLeft = LegacyNumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), bbox.getMaxX(), null, false, false);\n        Query qMaxXRight = LegacyNumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), null, bbox.getMinX(), false, false);\n        Query qLeftRight = this.makeQuery(BooleanClause.Occur.MUST, qMinXLeft, qMaxXRight);\n        Query qXDL = this.makeXDL(true, qLeftRight);\n\n        // apply the non-XDL and XDL conditions\n        xConditions = this.makeQuery(BooleanClause.Occur.SHOULD, qNonXDL, qXDL);\n      }\n      // queries that cross the date line\n    } else {\n\n      // X Conditions for documents that do not cross the date line,\n      // the document must be disjoint to both the left and right query portions\n      // (docMinX > queryExtent.getMaxX()Left OR docMaxX < queryExtent.getMinX()) AND (docMinX > queryExtent.getMaxX() OR docMaxX < queryExtent.getMinX()Left)\n      // where: queryExtent.getMaxX()Left = 180.0, queryExtent.getMinX()Left = -180.0\n      Query qMinXLeft = LegacyNumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), 180.0, null, false, false);\n      Query qMaxXLeft = LegacyNumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), null, bbox.getMinX(), false, false);\n      Query qMinXRight = LegacyNumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), bbox.getMaxX(), null, false, false);\n      Query qMaxXRight = LegacyNumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), null, -180.0, false, false);\n      Query qLeft = this.makeQuery(BooleanClause.Occur.SHOULD, qMinXLeft, qMaxXLeft);\n      Query qRight = this.makeQuery(BooleanClause.Occur.SHOULD, qMinXRight, qMaxXRight);\n      Query qLeftRight = this.makeQuery(BooleanClause.Occur.MUST, qLeft, qRight);\n\n      // No need to search for documents that do not cross the date line\n\n      xConditions = this.makeXDL(false, qLeftRight);\n    }\n\n    // either X or Y conditions should occur\n    return this.makeQuery(BooleanClause.Occur.SHOULD, xConditions, yConditions);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeDisjoint(Rectangle).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeDisjoint(Rectangle).mjava","sourceNew":"  /**\n   * Constructs a query to retrieve documents that are disjoint to the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeDisjoint(Rectangle bbox) {\n\n    // general case\n    // docMinX > queryExtent.getMaxX() OR docMaxX < queryExtent.getMinX() OR docMinY > queryExtent.getMaxY() OR docMaxY < queryExtent.getMinY()\n\n    // Y conditions\n    // docMinY > queryExtent.getMaxY() OR docMaxY < queryExtent.getMinY()\n    Query qMinY = LegacyNumericRangeQuery.newDoubleRange(field_minY, getPrecisionStep(), bbox.getMaxY(), null, false, false);\n    Query qMaxY = LegacyNumericRangeQuery.newDoubleRange(field_maxY, getPrecisionStep(), null, bbox.getMinY(), false, false);\n    Query yConditions = this.makeQuery(BooleanClause.Occur.SHOULD, qMinY, qMaxY);\n\n    // X conditions\n    Query xConditions;\n\n    // queries that do not cross the date line\n    if (!bbox.getCrossesDateLine()) {\n\n      // X Conditions for documents that do not cross the date line,\n      // docMinX > queryExtent.getMaxX() OR docMaxX < queryExtent.getMinX()\n      Query qMinX = LegacyNumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), bbox.getMaxX(), null, false, false);\n      if (bbox.getMinX() == -180.0 && ctx.isGeo()) {//touches dateline; -180 == 180\n        BooleanQuery.Builder bq = new BooleanQuery.Builder();\n        bq.add(qMinX, BooleanClause.Occur.MUST);\n        bq.add(makeNumberTermQuery(field_maxX, 180.0), BooleanClause.Occur.MUST_NOT);\n        qMinX = bq.build();\n      }\n      Query qMaxX = LegacyNumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), null, bbox.getMinX(), false, false);\n      if (bbox.getMaxX() == 180.0 && ctx.isGeo()) {//touches dateline; -180 == 180\n        BooleanQuery.Builder bq = new BooleanQuery.Builder();\n        bq.add(qMaxX, BooleanClause.Occur.MUST);\n        bq.add(makeNumberTermQuery(field_minX, -180.0), BooleanClause.Occur.MUST_NOT);\n        qMaxX = bq.build();\n      }\n      Query qMinMax = this.makeQuery(BooleanClause.Occur.SHOULD, qMinX, qMaxX);\n      Query qNonXDL = this.makeXDL(false, qMinMax);\n\n      if (!ctx.isGeo()) {\n        xConditions = qNonXDL;\n      } else {\n        // X Conditions for documents that cross the date line,\n\n        // both the left and right portions of the document must be disjoint to the query\n        // (docMinXLeft > queryExtent.getMaxX() OR docMaxXLeft < queryExtent.getMinX()) AND\n        // (docMinXRight > queryExtent.getMaxX() OR docMaxXRight < queryExtent.getMinX())\n        // where: docMaxXLeft = 180.0, docMinXRight = -180.0\n        // (docMaxXLeft  < queryExtent.getMinX()) equates to (180.0  < queryExtent.getMinX()) and is ignored\n        // (docMinXRight > queryExtent.getMaxX()) equates to (-180.0 > queryExtent.getMaxX()) and is ignored\n        Query qMinXLeft = LegacyNumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), bbox.getMaxX(), null, false, false);\n        Query qMaxXRight = LegacyNumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), null, bbox.getMinX(), false, false);\n        Query qLeftRight = this.makeQuery(BooleanClause.Occur.MUST, qMinXLeft, qMaxXRight);\n        Query qXDL = this.makeXDL(true, qLeftRight);\n\n        // apply the non-XDL and XDL conditions\n        xConditions = this.makeQuery(BooleanClause.Occur.SHOULD, qNonXDL, qXDL);\n      }\n      // queries that cross the date line\n    } else {\n\n      // X Conditions for documents that do not cross the date line,\n      // the document must be disjoint to both the left and right query portions\n      // (docMinX > queryExtent.getMaxX()Left OR docMaxX < queryExtent.getMinX()) AND (docMinX > queryExtent.getMaxX() OR docMaxX < queryExtent.getMinX()Left)\n      // where: queryExtent.getMaxX()Left = 180.0, queryExtent.getMinX()Left = -180.0\n      Query qMinXLeft = LegacyNumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), 180.0, null, false, false);\n      Query qMaxXLeft = LegacyNumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), null, bbox.getMinX(), false, false);\n      Query qMinXRight = LegacyNumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), bbox.getMaxX(), null, false, false);\n      Query qMaxXRight = LegacyNumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), null, -180.0, false, false);\n      Query qLeft = this.makeQuery(BooleanClause.Occur.SHOULD, qMinXLeft, qMaxXLeft);\n      Query qRight = this.makeQuery(BooleanClause.Occur.SHOULD, qMinXRight, qMaxXRight);\n      Query qLeftRight = this.makeQuery(BooleanClause.Occur.MUST, qLeft, qRight);\n\n      // No need to search for documents that do not cross the date line\n\n      xConditions = this.makeXDL(false, qLeftRight);\n    }\n\n    // either X or Y conditions should occur\n    return this.makeQuery(BooleanClause.Occur.SHOULD, xConditions, yConditions);\n  }\n\n","sourceOld":"  /**\n   * Constructs a query to retrieve documents that are disjoint to the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeDisjoint(Rectangle bbox) {\n\n    // general case\n    // docMinX > queryExtent.getMaxX() OR docMaxX < queryExtent.getMinX() OR docMinY > queryExtent.getMaxY() OR docMaxY < queryExtent.getMinY()\n\n    // Y conditions\n    // docMinY > queryExtent.getMaxY() OR docMaxY < queryExtent.getMinY()\n    Query qMinY = LegacyNumericRangeQuery.newDoubleRange(field_minY, getPrecisionStep(), bbox.getMaxY(), null, false, false);\n    Query qMaxY = LegacyNumericRangeQuery.newDoubleRange(field_maxY, getPrecisionStep(), null, bbox.getMinY(), false, false);\n    Query yConditions = this.makeQuery(BooleanClause.Occur.SHOULD, qMinY, qMaxY);\n\n    // X conditions\n    Query xConditions;\n\n    // queries that do not cross the date line\n    if (!bbox.getCrossesDateLine()) {\n\n      // X Conditions for documents that do not cross the date line,\n      // docMinX > queryExtent.getMaxX() OR docMaxX < queryExtent.getMinX()\n      Query qMinX = LegacyNumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), bbox.getMaxX(), null, false, false);\n      if (bbox.getMinX() == -180.0 && ctx.isGeo()) {//touches dateline; -180 == 180\n        BooleanQuery.Builder bq = new BooleanQuery.Builder();\n        bq.add(qMinX, BooleanClause.Occur.MUST);\n        bq.add(makeNumberTermQuery(field_maxX, 180.0), BooleanClause.Occur.MUST_NOT);\n        qMinX = bq.build();\n      }\n      Query qMaxX = LegacyNumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), null, bbox.getMinX(), false, false);\n      if (bbox.getMaxX() == 180.0 && ctx.isGeo()) {//touches dateline; -180 == 180\n        BooleanQuery.Builder bq = new BooleanQuery.Builder();\n        bq.add(qMaxX, BooleanClause.Occur.MUST);\n        bq.add(makeNumberTermQuery(field_minX, -180.0), BooleanClause.Occur.MUST_NOT);\n        qMaxX = bq.build();\n      }\n      Query qMinMax = this.makeQuery(BooleanClause.Occur.SHOULD, qMinX, qMaxX);\n      Query qNonXDL = this.makeXDL(false, qMinMax);\n\n      if (!ctx.isGeo()) {\n        xConditions = qNonXDL;\n      } else {\n        // X Conditions for documents that cross the date line,\n\n        // both the left and right portions of the document must be disjoint to the query\n        // (docMinXLeft > queryExtent.getMaxX() OR docMaxXLeft < queryExtent.getMinX()) AND\n        // (docMinXRight > queryExtent.getMaxX() OR docMaxXRight < queryExtent.getMinX())\n        // where: docMaxXLeft = 180.0, docMinXRight = -180.0\n        // (docMaxXLeft  < queryExtent.getMinX()) equates to (180.0  < queryExtent.getMinX()) and is ignored\n        // (docMinXRight > queryExtent.getMaxX()) equates to (-180.0 > queryExtent.getMaxX()) and is ignored\n        Query qMinXLeft = LegacyNumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), bbox.getMaxX(), null, false, false);\n        Query qMaxXRight = LegacyNumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), null, bbox.getMinX(), false, false);\n        Query qLeftRight = this.makeQuery(BooleanClause.Occur.MUST, qMinXLeft, qMaxXRight);\n        Query qXDL = this.makeXDL(true, qLeftRight);\n\n        // apply the non-XDL and XDL conditions\n        xConditions = this.makeQuery(BooleanClause.Occur.SHOULD, qNonXDL, qXDL);\n      }\n      // queries that cross the date line\n    } else {\n\n      // X Conditions for documents that do not cross the date line,\n      // the document must be disjoint to both the left and right query portions\n      // (docMinX > queryExtent.getMaxX()Left OR docMaxX < queryExtent.getMinX()) AND (docMinX > queryExtent.getMaxX() OR docMaxX < queryExtent.getMinX()Left)\n      // where: queryExtent.getMaxX()Left = 180.0, queryExtent.getMinX()Left = -180.0\n      Query qMinXLeft = LegacyNumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), 180.0, null, false, false);\n      Query qMaxXLeft = LegacyNumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), null, bbox.getMinX(), false, false);\n      Query qMinXRight = LegacyNumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), bbox.getMaxX(), null, false, false);\n      Query qMaxXRight = LegacyNumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), null, -180.0, false, false);\n      Query qLeft = this.makeQuery(BooleanClause.Occur.SHOULD, qMinXLeft, qMaxXLeft);\n      Query qRight = this.makeQuery(BooleanClause.Occur.SHOULD, qMinXRight, qMaxXRight);\n      Query qLeftRight = this.makeQuery(BooleanClause.Occur.MUST, qLeft, qRight);\n\n      // No need to search for documents that do not cross the date line\n\n      xConditions = this.makeXDL(false, qLeftRight);\n    }\n\n    // either X or Y conditions should occur\n    return this.makeQuery(BooleanClause.Occur.SHOULD, xConditions, yConditions);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aaa4203f9b7fbc832b95b0ab5f986b81cd12aae4","date":1459379660,"type":3,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeDisjoint(Rectangle).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeDisjoint(Rectangle).mjava","sourceNew":"  /**\n   * Constructs a query to retrieve documents that are disjoint to the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeDisjoint(Rectangle bbox) {\n\n    // general case\n    // docMinX > queryExtent.getMaxX() OR docMaxX < queryExtent.getMinX() OR docMinY > queryExtent.getMaxY() OR docMaxY < queryExtent.getMinY()\n\n    // Y conditions\n    // docMinY > queryExtent.getMaxY() OR docMaxY < queryExtent.getMinY()\n    Query qMinY = this.makeNumericRangeQuery(field_minY, bbox.getMaxY(), null, false, false);\n    Query qMaxY = this.makeNumericRangeQuery(field_maxY, null, bbox.getMinY(), false, false);\n    Query yConditions = this.makeQuery(BooleanClause.Occur.SHOULD, qMinY, qMaxY);\n\n    // X conditions\n    Query xConditions;\n\n    // queries that do not cross the date line\n    if (!bbox.getCrossesDateLine()) {\n\n      // X Conditions for documents that do not cross the date line,\n      // docMinX > queryExtent.getMaxX() OR docMaxX < queryExtent.getMinX()\n      Query qMinX = this.makeNumericRangeQuery(field_minX, bbox.getMaxX(), null, false, false);\n      if (bbox.getMinX() == -180.0 && ctx.isGeo()) {//touches dateline; -180 == 180\n        BooleanQuery.Builder bq = new BooleanQuery.Builder();\n        bq.add(qMinX, BooleanClause.Occur.MUST);\n        bq.add(makeNumberTermQuery(field_maxX, 180.0), BooleanClause.Occur.MUST_NOT);\n        qMinX = bq.build();\n      }\n      Query qMaxX = this.makeNumericRangeQuery(field_maxX, null, bbox.getMinX(), false, false);\n\n      if (bbox.getMaxX() == 180.0 && ctx.isGeo()) {//touches dateline; -180 == 180\n        BooleanQuery.Builder bq = new BooleanQuery.Builder();\n        bq.add(qMaxX, BooleanClause.Occur.MUST);\n        bq.add(makeNumberTermQuery(field_minX, -180.0), BooleanClause.Occur.MUST_NOT);\n        qMaxX = bq.build();\n      }\n      Query qMinMax = this.makeQuery(BooleanClause.Occur.SHOULD, qMinX, qMaxX);\n      Query qNonXDL = this.makeXDL(false, qMinMax);\n\n      if (!ctx.isGeo()) {\n        xConditions = qNonXDL;\n      } else {\n        // X Conditions for documents that cross the date line,\n\n        // both the left and right portions of the document must be disjoint to the query\n        // (docMinXLeft > queryExtent.getMaxX() OR docMaxXLeft < queryExtent.getMinX()) AND\n        // (docMinXRight > queryExtent.getMaxX() OR docMaxXRight < queryExtent.getMinX())\n        // where: docMaxXLeft = 180.0, docMinXRight = -180.0\n        // (docMaxXLeft  < queryExtent.getMinX()) equates to (180.0  < queryExtent.getMinX()) and is ignored\n        // (docMinXRight > queryExtent.getMaxX()) equates to (-180.0 > queryExtent.getMaxX()) and is ignored\n        Query qMinXLeft = this.makeNumericRangeQuery(field_minX, bbox.getMaxX(), null, false, false);\n        Query qMaxXRight = this.makeNumericRangeQuery(field_maxX, null, bbox.getMinX(), false, false);\n        Query qLeftRight = this.makeQuery(BooleanClause.Occur.MUST, qMinXLeft, qMaxXRight);\n        Query qXDL = this.makeXDL(true, qLeftRight);\n\n        // apply the non-XDL and XDL conditions\n        xConditions = this.makeQuery(BooleanClause.Occur.SHOULD, qNonXDL, qXDL);\n      }\n      // queries that cross the date line\n    } else {\n\n      // X Conditions for documents that do not cross the date line,\n      // the document must be disjoint to both the left and right query portions\n      // (docMinX > queryExtent.getMaxX()Left OR docMaxX < queryExtent.getMinX()) AND (docMinX > queryExtent.getMaxX() OR docMaxX < queryExtent.getMinX()Left)\n      // where: queryExtent.getMaxX()Left = 180.0, queryExtent.getMinX()Left = -180.0\n      Query qMinXLeft = this.makeNumericRangeQuery(field_minX, 180.0, null, false, false);\n      Query qMaxXLeft = this.makeNumericRangeQuery(field_maxX, null, bbox.getMinX(), false, false);\n      Query qMinXRight = this.makeNumericRangeQuery(field_minX, bbox.getMaxX(), null, false, false);\n      Query qMaxXRight = this.makeNumericRangeQuery(field_maxX, null, -180.0, false, false);\n      Query qLeft = this.makeQuery(BooleanClause.Occur.SHOULD, qMinXLeft, qMaxXLeft);\n      Query qRight = this.makeQuery(BooleanClause.Occur.SHOULD, qMinXRight, qMaxXRight);\n      Query qLeftRight = this.makeQuery(BooleanClause.Occur.MUST, qLeft, qRight);\n\n      // No need to search for documents that do not cross the date line\n\n      xConditions = this.makeXDL(false, qLeftRight);\n    }\n\n    // either X or Y conditions should occur\n    return this.makeQuery(BooleanClause.Occur.SHOULD, xConditions, yConditions);\n  }\n\n","sourceOld":"  /**\n   * Constructs a query to retrieve documents that are disjoint to the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeDisjoint(Rectangle bbox) {\n\n    // general case\n    // docMinX > queryExtent.getMaxX() OR docMaxX < queryExtent.getMinX() OR docMinY > queryExtent.getMaxY() OR docMaxY < queryExtent.getMinY()\n\n    // Y conditions\n    // docMinY > queryExtent.getMaxY() OR docMaxY < queryExtent.getMinY()\n    Query qMinY = LegacyNumericRangeQuery.newDoubleRange(field_minY, getPrecisionStep(), bbox.getMaxY(), null, false, false);\n    Query qMaxY = LegacyNumericRangeQuery.newDoubleRange(field_maxY, getPrecisionStep(), null, bbox.getMinY(), false, false);\n    Query yConditions = this.makeQuery(BooleanClause.Occur.SHOULD, qMinY, qMaxY);\n\n    // X conditions\n    Query xConditions;\n\n    // queries that do not cross the date line\n    if (!bbox.getCrossesDateLine()) {\n\n      // X Conditions for documents that do not cross the date line,\n      // docMinX > queryExtent.getMaxX() OR docMaxX < queryExtent.getMinX()\n      Query qMinX = LegacyNumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), bbox.getMaxX(), null, false, false);\n      if (bbox.getMinX() == -180.0 && ctx.isGeo()) {//touches dateline; -180 == 180\n        BooleanQuery.Builder bq = new BooleanQuery.Builder();\n        bq.add(qMinX, BooleanClause.Occur.MUST);\n        bq.add(makeNumberTermQuery(field_maxX, 180.0), BooleanClause.Occur.MUST_NOT);\n        qMinX = bq.build();\n      }\n      Query qMaxX = LegacyNumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), null, bbox.getMinX(), false, false);\n      if (bbox.getMaxX() == 180.0 && ctx.isGeo()) {//touches dateline; -180 == 180\n        BooleanQuery.Builder bq = new BooleanQuery.Builder();\n        bq.add(qMaxX, BooleanClause.Occur.MUST);\n        bq.add(makeNumberTermQuery(field_minX, -180.0), BooleanClause.Occur.MUST_NOT);\n        qMaxX = bq.build();\n      }\n      Query qMinMax = this.makeQuery(BooleanClause.Occur.SHOULD, qMinX, qMaxX);\n      Query qNonXDL = this.makeXDL(false, qMinMax);\n\n      if (!ctx.isGeo()) {\n        xConditions = qNonXDL;\n      } else {\n        // X Conditions for documents that cross the date line,\n\n        // both the left and right portions of the document must be disjoint to the query\n        // (docMinXLeft > queryExtent.getMaxX() OR docMaxXLeft < queryExtent.getMinX()) AND\n        // (docMinXRight > queryExtent.getMaxX() OR docMaxXRight < queryExtent.getMinX())\n        // where: docMaxXLeft = 180.0, docMinXRight = -180.0\n        // (docMaxXLeft  < queryExtent.getMinX()) equates to (180.0  < queryExtent.getMinX()) and is ignored\n        // (docMinXRight > queryExtent.getMaxX()) equates to (-180.0 > queryExtent.getMaxX()) and is ignored\n        Query qMinXLeft = LegacyNumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), bbox.getMaxX(), null, false, false);\n        Query qMaxXRight = LegacyNumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), null, bbox.getMinX(), false, false);\n        Query qLeftRight = this.makeQuery(BooleanClause.Occur.MUST, qMinXLeft, qMaxXRight);\n        Query qXDL = this.makeXDL(true, qLeftRight);\n\n        // apply the non-XDL and XDL conditions\n        xConditions = this.makeQuery(BooleanClause.Occur.SHOULD, qNonXDL, qXDL);\n      }\n      // queries that cross the date line\n    } else {\n\n      // X Conditions for documents that do not cross the date line,\n      // the document must be disjoint to both the left and right query portions\n      // (docMinX > queryExtent.getMaxX()Left OR docMaxX < queryExtent.getMinX()) AND (docMinX > queryExtent.getMaxX() OR docMaxX < queryExtent.getMinX()Left)\n      // where: queryExtent.getMaxX()Left = 180.0, queryExtent.getMinX()Left = -180.0\n      Query qMinXLeft = LegacyNumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), 180.0, null, false, false);\n      Query qMaxXLeft = LegacyNumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), null, bbox.getMinX(), false, false);\n      Query qMinXRight = LegacyNumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), bbox.getMaxX(), null, false, false);\n      Query qMaxXRight = LegacyNumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), null, -180.0, false, false);\n      Query qLeft = this.makeQuery(BooleanClause.Occur.SHOULD, qMinXLeft, qMaxXLeft);\n      Query qRight = this.makeQuery(BooleanClause.Occur.SHOULD, qMinXRight, qMaxXRight);\n      Query qLeftRight = this.makeQuery(BooleanClause.Occur.MUST, qLeft, qRight);\n\n      // No need to search for documents that do not cross the date line\n\n      xConditions = this.makeXDL(false, qLeftRight);\n    }\n\n    // either X or Y conditions should occur\n    return this.makeQuery(BooleanClause.Occur.SHOULD, xConditions, yConditions);\n  }\n\n","bugFix":["770342641f7b505eaa8dccdc666158bff2419109"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aaa4203f9b7fbc832b95b0ab5f986b81cd12aae4":["af2638813028b254a88b418ebeafb541afb49653"],"af2638813028b254a88b418ebeafb541afb49653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aaa4203f9b7fbc832b95b0ab5f986b81cd12aae4"]},"commit2Childs":{"aaa4203f9b7fbc832b95b0ab5f986b81cd12aae4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"af2638813028b254a88b418ebeafb541afb49653":["aaa4203f9b7fbc832b95b0ab5f986b81cd12aae4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}