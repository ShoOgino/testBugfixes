{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FileDataSource#getData(String).mjava","commits":[{"id":"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","date":1217446558,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FileDataSource#getData(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * <p>\n   * Returns a reader for the given file.\n   * </p>\n   * <p>\n   * If the given file is not absolute, we try to construct an absolute path\n   * using basePath configuration. If that fails, then the relative path is\n   * tried. If file is not found a RuntimeException is thrown.\n   * </p>\n   * <p>\n   * <b>It is the responsibility of the calling method to properly close the\n   * returned Reader</b>\n   * </p>\n   */\n  public Reader getData(String query) {\n    try {\n      File file0 = new File(query);\n      File file = file0;\n\n      if (!file.isAbsolute())\n        file = new File(basePath + query);\n\n      if (file.isFile() && file.canRead()) {\n        return openStream(file);\n      } else if (file != file0)\n        if (file0.isFile() && file0.canRead())\n          return openStream(file0);\n\n      throw new FileNotFoundException(\"Could not find file: \" + query);\n    } catch (UnsupportedEncodingException e) {\n      throw new RuntimeException(e);\n    } catch (FileNotFoundException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b748a573c805ec5a2eb0b49f143381e82e25bac","date":1240222370,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FileDataSource#getData(String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FileDataSource#getData(String).mjava","sourceNew":"  /**\n   * <p>\n   * Returns a reader for the given file.\n   * </p>\n   * <p>\n   * If the given file is not absolute, we try to construct an absolute path\n   * using basePath configuration. If that fails, then the relative path is\n   * tried. If file is not found a RuntimeException is thrown.\n   * </p>\n   * <p>\n   * <b>It is the responsibility of the calling method to properly close the\n   * returned Reader</b>\n   * </p>\n   */\n  public Reader getData(String query) {\n    try {\n      File file0 = new File(query);\n      File file = file0;\n\n      if (!file.isAbsolute())\n        file = new File(basePath + query);\n\n      if (file.isFile() && file.canRead()) {\n        LOG.debug(\"Accessing File: \" + file.toString());\n        return openStream(file);\n      } else if (file != file0)\n        if (file0.isFile() && file0.canRead()) {\n          LOG.debug(\"Accessing File0: \" + file0.toString());\n          return openStream(file0);\n        }\n\n      throw new FileNotFoundException(\"Could not find file: \" + query);\n    } catch (UnsupportedEncodingException e) {\n      throw new RuntimeException(e);\n    } catch (FileNotFoundException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns a reader for the given file.\n   * </p>\n   * <p>\n   * If the given file is not absolute, we try to construct an absolute path\n   * using basePath configuration. If that fails, then the relative path is\n   * tried. If file is not found a RuntimeException is thrown.\n   * </p>\n   * <p>\n   * <b>It is the responsibility of the calling method to properly close the\n   * returned Reader</b>\n   * </p>\n   */\n  public Reader getData(String query) {\n    try {\n      File file0 = new File(query);\n      File file = file0;\n\n      if (!file.isAbsolute())\n        file = new File(basePath + query);\n\n      if (file.isFile() && file.canRead()) {\n        return openStream(file);\n      } else if (file != file0)\n        if (file0.isFile() && file0.canRead())\n          return openStream(file0);\n\n      throw new FileNotFoundException(\"Could not find file: \" + query);\n    } catch (UnsupportedEncodingException e) {\n      throw new RuntimeException(e);\n    } catch (FileNotFoundException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62f078a48017a3d8fa3f36214f47c3c2b2df6f69","date":1260252323,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FileDataSource#getData(String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FileDataSource#getData(String).mjava","sourceNew":"  /**\n   * <p>\n   * Returns a reader for the given file.\n   * </p>\n   * <p>\n   * If the given file is not absolute, we try to construct an absolute path\n   * using basePath configuration. If that fails, then the relative path is\n   * tried. If file is not found a RuntimeException is thrown.\n   * </p>\n   * <p>\n   * <b>It is the responsibility of the calling method to properly close the\n   * returned Reader</b>\n   * </p>\n   */\n  public Reader getData(String query) {\n    File f = getFile(basePath,query);\n    try {\n      return openStream(f);\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE,e,\"Unable to open File : \"+f.getAbsolutePath());\n      return null;\n    }\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns a reader for the given file.\n   * </p>\n   * <p>\n   * If the given file is not absolute, we try to construct an absolute path\n   * using basePath configuration. If that fails, then the relative path is\n   * tried. If file is not found a RuntimeException is thrown.\n   * </p>\n   * <p>\n   * <b>It is the responsibility of the calling method to properly close the\n   * returned Reader</b>\n   * </p>\n   */\n  public Reader getData(String query) {\n    try {\n      File file0 = new File(query);\n      File file = file0;\n\n      if (!file.isAbsolute())\n        file = new File(basePath + query);\n\n      if (file.isFile() && file.canRead()) {\n        LOG.debug(\"Accessing File: \" + file.toString());\n        return openStream(file);\n      } else if (file != file0)\n        if (file0.isFile() && file0.canRead()) {\n          LOG.debug(\"Accessing File0: \" + file0.toString());\n          return openStream(file0);\n        }\n\n      throw new FileNotFoundException(\"Could not find file: \" + query);\n    } catch (UnsupportedEncodingException e) {\n      throw new RuntimeException(e);\n    } catch (FileNotFoundException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FileDataSource#getData(String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FileDataSource#getData(String).mjava","sourceNew":"  /**\n   * <p>\n   * Returns a reader for the given file.\n   * </p>\n   * <p>\n   * If the given file is not absolute, we try to construct an absolute path\n   * using basePath configuration. If that fails, then the relative path is\n   * tried. If file is not found a RuntimeException is thrown.\n   * </p>\n   * <p>\n   * <b>It is the responsibility of the calling method to properly close the\n   * returned Reader</b>\n   * </p>\n   */\n  public Reader getData(String query) {\n    File f = getFile(basePath,query);\n    try {\n      return openStream(f);\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE,e,\"Unable to open File : \"+f.getAbsolutePath());\n      return null;\n    }\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns a reader for the given file.\n   * </p>\n   * <p>\n   * If the given file is not absolute, we try to construct an absolute path\n   * using basePath configuration. If that fails, then the relative path is\n   * tried. If file is not found a RuntimeException is thrown.\n   * </p>\n   * <p>\n   * <b>It is the responsibility of the calling method to properly close the\n   * returned Reader</b>\n   * </p>\n   */\n  public Reader getData(String query) {\n    File f = getFile(basePath,query);\n    try {\n      return openStream(f);\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE,e,\"Unable to open File : \"+f.getAbsolutePath());\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"62f078a48017a3d8fa3f36214f47c3c2b2df6f69":["3b748a573c805ec5a2eb0b49f143381e82e25bac"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"3b748a573c805ec5a2eb0b49f143381e82e25bac":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"ad94625fb8d088209f46650c8097196fec67f00c":["62f078a48017a3d8fa3f36214f47c3c2b2df6f69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"62f078a48017a3d8fa3f36214f47c3c2b2df6f69":["ad94625fb8d088209f46650c8097196fec67f00c"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["3b748a573c805ec5a2eb0b49f143381e82e25bac"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3b748a573c805ec5a2eb0b49f143381e82e25bac":["62f078a48017a3d8fa3f36214f47c3c2b2df6f69"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}