{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ExecutePlanAction#saveAsyncId(DistribStateManager,TriggerEvent,String).mjava","commits":[{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ExecutePlanAction#saveAsyncId(DistribStateManager,TriggerEvent,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Saves the given asyncId in ZK as a persistent sequential node.\n   *\n   * @return the path of the newly created node in ZooKeeper\n   */\n  private String saveAsyncId(DistribStateManager stateManager, TriggerEvent event, String asyncId) throws InterruptedException, AlreadyExistsException, IOException, KeeperException {\n    String parentPath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + event.getSource() + \"/\" + getName();\n    try {\n      stateManager.makePath(parentPath);\n    } catch (AlreadyExistsException e) {\n      // ignore\n    }\n    return stateManager.createData(parentPath + \"/\" + PREFIX, Utils.toJSON(Collections.singletonMap(\"requestid\", asyncId)), CreateMode.PERSISTENT_SEQUENTIAL);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["39561034e67ea008831f095a2f7be7fcdbd37f53"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"39561034e67ea008831f095a2f7be7fcdbd37f53","date":1570744746,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ExecutePlanAction#saveAsyncId(DistribStateManager,TriggerEvent,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ExecutePlanAction#saveAsyncId(DistribStateManager,TriggerEvent,String).mjava","sourceNew":"  /**\n   * Saves the given asyncId in ZK as a persistent sequential node. This allows us to wait for the completion\n   * of pending tasks from this event in {@link ScheduledTriggers}\n   * before starting the actions of the next event.\n   *\n   * @return the path of the newly created node in ZooKeeper\n   */\n  private String saveAsyncId(DistribStateManager stateManager, TriggerEvent event, String asyncId) throws InterruptedException, AlreadyExistsException, IOException, KeeperException {\n    String parentPath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + event.getSource() + \"/\" + getName();\n    try {\n      stateManager.makePath(parentPath);\n    } catch (AlreadyExistsException e) {\n      // ignore\n    }\n    return stateManager.createData(parentPath + \"/\" + PREFIX, Utils.toJSON(Collections.singletonMap(\"requestid\", asyncId)), CreateMode.PERSISTENT_SEQUENTIAL);\n  }\n\n","sourceOld":"  /**\n   * Saves the given asyncId in ZK as a persistent sequential node.\n   *\n   * @return the path of the newly created node in ZooKeeper\n   */\n  private String saveAsyncId(DistribStateManager stateManager, TriggerEvent event, String asyncId) throws InterruptedException, AlreadyExistsException, IOException, KeeperException {\n    String parentPath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + event.getSource() + \"/\" + getName();\n    try {\n      stateManager.makePath(parentPath);\n    } catch (AlreadyExistsException e) {\n      // ignore\n    }\n    return stateManager.createData(parentPath + \"/\" + PREFIX, Utils.toJSON(Collections.singletonMap(\"requestid\", asyncId)), CreateMode.PERSISTENT_SEQUENTIAL);\n  }\n\n","bugFix":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ExecutePlanAction#saveAsyncId(DistribStateManager,TriggerEvent,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ExecutePlanAction#saveAsyncId(DistribStateManager,TriggerEvent,String).mjava","sourceNew":"  /**\n   * Saves the given asyncId in ZK as a persistent sequential node. This allows us to wait for the completion\n   * of pending tasks from this event in {@link ScheduledTriggers}\n   * before starting the actions of the next event.\n   *\n   * @return the path of the newly created node in ZooKeeper\n   */\n  private String saveAsyncId(DistribStateManager stateManager, TriggerEvent event, String asyncId) throws InterruptedException, AlreadyExistsException, IOException, KeeperException {\n    String parentPath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + event.getSource() + \"/\" + getName();\n    try {\n      stateManager.makePath(parentPath);\n    } catch (AlreadyExistsException e) {\n      // ignore\n    }\n    return stateManager.createData(parentPath + \"/\" + PREFIX, Utils.toJSON(Collections.singletonMap(\"requestid\", asyncId)), CreateMode.PERSISTENT_SEQUENTIAL);\n  }\n\n","sourceOld":"  /**\n   * Saves the given asyncId in ZK as a persistent sequential node.\n   *\n   * @return the path of the newly created node in ZooKeeper\n   */\n  private String saveAsyncId(DistribStateManager stateManager, TriggerEvent event, String asyncId) throws InterruptedException, AlreadyExistsException, IOException, KeeperException {\n    String parentPath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + event.getSource() + \"/\" + getName();\n    try {\n      stateManager.makePath(parentPath);\n    } catch (AlreadyExistsException e) {\n      // ignore\n    }\n    return stateManager.createData(parentPath + \"/\" + PREFIX, Utils.toJSON(Collections.singletonMap(\"requestid\", asyncId)), CreateMode.PERSISTENT_SEQUENTIAL);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ExecutePlanAction#saveAsyncId(DistribStateManager,TriggerEvent,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Saves the given asyncId in ZK as a persistent sequential node. This allows us to wait for the completion\n   * of pending tasks from this event in {@link ScheduledTriggers}\n   * before starting the actions of the next event.\n   *\n   * @return the path of the newly created node in ZooKeeper\n   */\n  private String saveAsyncId(DistribStateManager stateManager, TriggerEvent event, String asyncId) throws InterruptedException, AlreadyExistsException, IOException, KeeperException {\n    String parentPath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + event.getSource() + \"/\" + getName();\n    try {\n      stateManager.makePath(parentPath);\n    } catch (AlreadyExistsException e) {\n      // ignore\n    }\n    return stateManager.createData(parentPath + \"/\" + PREFIX, Utils.toJSON(Collections.singletonMap(\"requestid\", asyncId)), CreateMode.PERSISTENT_SEQUENTIAL);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"39561034e67ea008831f095a2f7be7fcdbd37f53":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"3f504512a03d978990cbff30db0522b354e846db":["39561034e67ea008831f095a2f7be7fcdbd37f53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"b0b597c65628ca9e73913a07e81691f8229bae35":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8","39561034e67ea008831f095a2f7be7fcdbd37f53"]},"commit2Childs":{"39561034e67ea008831f095a2f7be7fcdbd37f53":["3f504512a03d978990cbff30db0522b354e846db","b0b597c65628ca9e73913a07e81691f8229bae35"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["39561034e67ea008831f095a2f7be7fcdbd37f53","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}