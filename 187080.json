{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer#getSortedNumeric(FieldInfo).mjava","commits":[{"id":"a870f9917149dc600c4ad4417d615c1795de5864","date":1445975387,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer#getSortedNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer#getSortedNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedSetEntry ss = sortedNumerics.get(field.name);\n    if (ss.format == SORTED_SINGLE_VALUED) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      final Bits docsWithField = getLiveBits(numericEntry.missingOffset, maxDoc);\n      return DocValues.singleton(values, docsWithField);\n    } else if (ss.format == SORTED_WITH_ADDRESSES) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      final MonotonicBlockPackedReader ordIndex = getOrdIndexInstance(field, ordIndexes.get(field.name));\n      \n      return new SortedNumericDocValues() {\n        long startOffset;\n        long endOffset;\n        \n        @Override\n        public void setDocument(int doc) {\n          startOffset = ordIndex.get(doc);\n          endOffset = ordIndex.get(doc+1L);\n        }\n\n        @Override\n        public long valueAt(int index) {\n          return values.get(startOffset + index);\n        }\n\n        @Override\n        public int count() {\n          return (int) (endOffset - startOffset);\n        }\n      };\n    } else if (ss.format == SORTED_SET_TABLE) {\n      NumericEntry entry = ords.get(field.name);\n      final LongValues ordinals = getNumeric(entry);\n\n      final long[] table = ss.table;\n      final int[] offsets = ss.tableOffsets;\n      return new SortedNumericDocValues() {\n        int startOffset;\n        int endOffset;\n        \n        @Override\n        public void setDocument(int doc) {\n          final int ord = (int) ordinals.get(doc);\n          startOffset = offsets[ord];\n          endOffset = offsets[ord + 1];\n        }\n\n        @Override\n        public long valueAt(int index) {\n          return table[startOffset + index];\n        }\n\n        @Override\n        public int count() {\n          return endOffset - startOffset;\n        }\n      };\n    } else {\n      throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedSetEntry ss = sortedNumerics.get(field.name);\n    if (ss.format == SORTED_SINGLE_VALUED) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      final Bits docsWithField = getLiveBits(numericEntry.missingOffset, maxDoc);\n      return DocValues.singleton(values, docsWithField);\n    } else if (ss.format == SORTED_WITH_ADDRESSES) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      final MonotonicBlockPackedReader ordIndex = getOrdIndexInstance(field, ordIndexes.get(field.name));\n      \n      return new SortedNumericDocValues() {\n        long startOffset;\n        long endOffset;\n        \n        @Override\n        public void setDocument(int doc) {\n          startOffset = ordIndex.get(doc);\n          endOffset = ordIndex.get(doc+1L);\n        }\n\n        @Override\n        public long valueAt(int index) {\n          return values.get(startOffset + index);\n        }\n\n        @Override\n        public int count() {\n          return (int) (endOffset - startOffset);\n        }\n      };\n    } else if (ss.format == SORTED_SET_TABLE) {\n      NumericEntry entry = ords.get(field.name);\n      final LongValues ordinals = getNumeric(entry);\n\n      final long[] table = ss.table;\n      final int[] offsets = ss.tableOffsets;\n      return new SortedNumericDocValues() {\n        int startOffset;\n        int endOffset;\n        \n        @Override\n        public void setDocument(int doc) {\n          final int ord = (int) ordinals.get(doc);\n          startOffset = offsets[ord];\n          endOffset = offsets[ord + 1];\n        }\n\n        @Override\n        public long valueAt(int index) {\n          return table[startOffset + index];\n        }\n\n        @Override\n        public int count() {\n          return endOffset - startOffset;\n        }\n      };\n    } else {\n      throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52a55f5afb81e4ca7ec581bf1a7b8218204e8af7","date":1472142029,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer#getSortedNumeric(FieldInfo).mjava","sourceNew":null,"sourceOld":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedSetEntry ss = sortedNumerics.get(field.name);\n    if (ss.format == SORTED_SINGLE_VALUED) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      final Bits docsWithField = getLiveBits(numericEntry.missingOffset, maxDoc);\n      return DocValues.singleton(values, docsWithField);\n    } else if (ss.format == SORTED_WITH_ADDRESSES) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      final MonotonicBlockPackedReader ordIndex = getOrdIndexInstance(field, ordIndexes.get(field.name));\n      \n      return new SortedNumericDocValues() {\n        long startOffset;\n        long endOffset;\n        \n        @Override\n        public void setDocument(int doc) {\n          startOffset = ordIndex.get(doc);\n          endOffset = ordIndex.get(doc+1L);\n        }\n\n        @Override\n        public long valueAt(int index) {\n          return values.get(startOffset + index);\n        }\n\n        @Override\n        public int count() {\n          return (int) (endOffset - startOffset);\n        }\n      };\n    } else if (ss.format == SORTED_SET_TABLE) {\n      NumericEntry entry = ords.get(field.name);\n      final LongValues ordinals = getNumeric(entry);\n\n      final long[] table = ss.table;\n      final int[] offsets = ss.tableOffsets;\n      return new SortedNumericDocValues() {\n        int startOffset;\n        int endOffset;\n        \n        @Override\n        public void setDocument(int doc) {\n          final int ord = (int) ordinals.get(doc);\n          startOffset = offsets[ord];\n          endOffset = offsets[ord + 1];\n        }\n\n        @Override\n        public long valueAt(int index) {\n          return table[startOffset + index];\n        }\n\n        @Override\n        public int count() {\n          return endOffset - startOffset;\n        }\n      };\n    } else {\n      throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","date":1472163016,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer#getSortedNumeric(FieldInfo).mjava","sourceNew":null,"sourceOld":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedSetEntry ss = sortedNumerics.get(field.name);\n    if (ss.format == SORTED_SINGLE_VALUED) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      final Bits docsWithField = getLiveBits(numericEntry.missingOffset, maxDoc);\n      return DocValues.singleton(values, docsWithField);\n    } else if (ss.format == SORTED_WITH_ADDRESSES) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      final MonotonicBlockPackedReader ordIndex = getOrdIndexInstance(field, ordIndexes.get(field.name));\n      \n      return new SortedNumericDocValues() {\n        long startOffset;\n        long endOffset;\n        \n        @Override\n        public void setDocument(int doc) {\n          startOffset = ordIndex.get(doc);\n          endOffset = ordIndex.get(doc+1L);\n        }\n\n        @Override\n        public long valueAt(int index) {\n          return values.get(startOffset + index);\n        }\n\n        @Override\n        public int count() {\n          return (int) (endOffset - startOffset);\n        }\n      };\n    } else if (ss.format == SORTED_SET_TABLE) {\n      NumericEntry entry = ords.get(field.name);\n      final LongValues ordinals = getNumeric(entry);\n\n      final long[] table = ss.table;\n      final int[] offsets = ss.tableOffsets;\n      return new SortedNumericDocValues() {\n        int startOffset;\n        int endOffset;\n        \n        @Override\n        public void setDocument(int doc) {\n          final int ord = (int) ordinals.get(doc);\n          startOffset = offsets[ord];\n          endOffset = offsets[ord + 1];\n        }\n\n        @Override\n        public long valueAt(int index) {\n          return table[startOffset + index];\n        }\n\n        @Override\n        public int count() {\n          return endOffset - startOffset;\n        }\n      };\n    } else {\n      throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer#getSortedNumeric(FieldInfo).mjava","sourceNew":null,"sourceOld":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedSetEntry ss = sortedNumerics.get(field.name);\n    if (ss.format == SORTED_SINGLE_VALUED) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      final Bits docsWithField = getLiveBits(numericEntry.missingOffset, maxDoc);\n      return DocValues.singleton(values, docsWithField);\n    } else if (ss.format == SORTED_WITH_ADDRESSES) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      final MonotonicBlockPackedReader ordIndex = getOrdIndexInstance(field, ordIndexes.get(field.name));\n      \n      return new SortedNumericDocValues() {\n        long startOffset;\n        long endOffset;\n        \n        @Override\n        public void setDocument(int doc) {\n          startOffset = ordIndex.get(doc);\n          endOffset = ordIndex.get(doc+1L);\n        }\n\n        @Override\n        public long valueAt(int index) {\n          return values.get(startOffset + index);\n        }\n\n        @Override\n        public int count() {\n          return (int) (endOffset - startOffset);\n        }\n      };\n    } else if (ss.format == SORTED_SET_TABLE) {\n      NumericEntry entry = ords.get(field.name);\n      final LongValues ordinals = getNumeric(entry);\n\n      final long[] table = ss.table;\n      final int[] offsets = ss.tableOffsets;\n      return new SortedNumericDocValues() {\n        int startOffset;\n        int endOffset;\n        \n        @Override\n        public void setDocument(int doc) {\n          final int ord = (int) ordinals.get(doc);\n          startOffset = offsets[ord];\n          endOffset = offsets[ord + 1];\n        }\n\n        @Override\n        public long valueAt(int index) {\n          return table[startOffset + index];\n        }\n\n        @Override\n        public int count() {\n          return endOffset - startOffset;\n        }\n      };\n    } else {\n      throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a870f9917149dc600c4ad4417d615c1795de5864":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["a870f9917149dc600c4ad4417d615c1795de5864","52a55f5afb81e4ca7ec581bf1a7b8218204e8af7"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a870f9917149dc600c4ad4417d615c1795de5864","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"52a55f5afb81e4ca7ec581bf1a7b8218204e8af7":["a870f9917149dc600c4ad4417d615c1795de5864"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a870f9917149dc600c4ad4417d615c1795de5864"],"a870f9917149dc600c4ad4417d615c1795de5864":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","52a55f5afb81e4ca7ec581bf1a7b8218204e8af7"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"52a55f5afb81e4ca7ec581bf1a7b8218204e8af7":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}