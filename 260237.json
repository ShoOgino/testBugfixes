{"path":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testCopyOverwrite().mjava","commits":[{"id":"0a8943eb15df4a89f924a7bcea7fec04688d304c","date":1397578332,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testCopyOverwrite().mjava","pathOld":"/dev/null","sourceNew":"  // TODO: are these semantics really needed by lucene? can we just throw exception?\n  public void testCopyOverwrite() throws Exception {\n    Directory source = getDirectory(createTempDir(\"testCopyOverwrite\"));\n    Directory dest = newDirectory();\n    \n    // we are double-writing intentionally, because thats the api\n    if (dest instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) dest).setPreventDoubleWrite(false);\n    }\n    \n    IndexOutput output = source.createOutput(\"foobar\", newIOContext(random()));\n    int numBytes = random().nextInt(20000);\n    byte bytes[] = new byte[numBytes];\n    random().nextBytes(bytes);\n    output.writeBytes(bytes, bytes.length);\n    output.close();\n    \n    // create foobaz first, it should be overwritten\n    IndexOutput output2 = dest.createOutput(\"foobaz\", newIOContext(random()));\n    output2.writeString(\"bogus!\");\n    output2.close();\n    \n    source.copy(dest, \"foobar\", \"foobaz\", newIOContext(random()));\n    assertTrue(slowFileExists(dest, \"foobaz\"));\n    \n    IndexInput input = dest.openInput(\"foobaz\", newIOContext(random()));\n    byte bytes2[] = new byte[numBytes];\n    input.readBytes(bytes2, 0, bytes2.length);\n    assertEquals(input.length(), numBytes);\n    input.close();\n    \n    assertArrayEquals(bytes, bytes2);\n    \n    IOUtils.close(source, dest);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52d4cfb22484037a9b8e9080e03aeaff60954880","date":1420125313,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testCopyOverwrite().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testCopyOverwrite().mjava","sourceNew":"  // TODO: are these semantics really needed by lucene? can we just throw exception?\n  public void testCopyOverwrite() throws Exception {\n    Directory source = getDirectory(createTempDir(\"testCopyOverwrite\"));\n    Directory dest = newDirectory();\n    \n    // we are double-writing intentionally, because thats the api\n    if (dest instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) dest).setPreventDoubleWrite(false);\n    }\n    \n    IndexOutput output = source.createOutput(\"foobar\", newIOContext(random()));\n    int numBytes = random().nextInt(20000);\n    byte bytes[] = new byte[numBytes];\n    random().nextBytes(bytes);\n    output.writeBytes(bytes, bytes.length);\n    output.close();\n    \n    // create foobaz first, it should be overwritten\n    IndexOutput output2 = dest.createOutput(\"foobaz\", newIOContext(random()));\n    output2.writeString(\"bogus!\");\n    output2.close();\n    \n    dest.copyFrom(source, \"foobar\", \"foobaz\", newIOContext(random()));\n    assertTrue(slowFileExists(dest, \"foobaz\"));\n    \n    IndexInput input = dest.openInput(\"foobaz\", newIOContext(random()));\n    byte bytes2[] = new byte[numBytes];\n    input.readBytes(bytes2, 0, bytes2.length);\n    assertEquals(input.length(), numBytes);\n    input.close();\n    \n    assertArrayEquals(bytes, bytes2);\n    \n    IOUtils.close(source, dest);\n  }\n\n","sourceOld":"  // TODO: are these semantics really needed by lucene? can we just throw exception?\n  public void testCopyOverwrite() throws Exception {\n    Directory source = getDirectory(createTempDir(\"testCopyOverwrite\"));\n    Directory dest = newDirectory();\n    \n    // we are double-writing intentionally, because thats the api\n    if (dest instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) dest).setPreventDoubleWrite(false);\n    }\n    \n    IndexOutput output = source.createOutput(\"foobar\", newIOContext(random()));\n    int numBytes = random().nextInt(20000);\n    byte bytes[] = new byte[numBytes];\n    random().nextBytes(bytes);\n    output.writeBytes(bytes, bytes.length);\n    output.close();\n    \n    // create foobaz first, it should be overwritten\n    IndexOutput output2 = dest.createOutput(\"foobaz\", newIOContext(random()));\n    output2.writeString(\"bogus!\");\n    output2.close();\n    \n    source.copy(dest, \"foobar\", \"foobaz\", newIOContext(random()));\n    assertTrue(slowFileExists(dest, \"foobaz\"));\n    \n    IndexInput input = dest.openInput(\"foobaz\", newIOContext(random()));\n    byte bytes2[] = new byte[numBytes];\n    input.readBytes(bytes2, 0, bytes2.length);\n    assertEquals(input.length(), numBytes);\n    input.close();\n    \n    assertArrayEquals(bytes, bytes2);\n    \n    IOUtils.close(source, dest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11c6df42fb3eba174c3ca0d9a5194eaecd893b77","date":1465931757,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testCopyOverwrite().mjava","sourceNew":null,"sourceOld":"  // TODO: are these semantics really needed by lucene? can we just throw exception?\n  public void testCopyOverwrite() throws Exception {\n    Directory source = getDirectory(createTempDir(\"testCopyOverwrite\"));\n    Directory dest = newDirectory();\n    \n    // we are double-writing intentionally, because thats the api\n    if (dest instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) dest).setPreventDoubleWrite(false);\n    }\n    \n    IndexOutput output = source.createOutput(\"foobar\", newIOContext(random()));\n    int numBytes = random().nextInt(20000);\n    byte bytes[] = new byte[numBytes];\n    random().nextBytes(bytes);\n    output.writeBytes(bytes, bytes.length);\n    output.close();\n    \n    // create foobaz first, it should be overwritten\n    IndexOutput output2 = dest.createOutput(\"foobaz\", newIOContext(random()));\n    output2.writeString(\"bogus!\");\n    output2.close();\n    \n    dest.copyFrom(source, \"foobar\", \"foobaz\", newIOContext(random()));\n    assertTrue(slowFileExists(dest, \"foobaz\"));\n    \n    IndexInput input = dest.openInput(\"foobaz\", newIOContext(random()));\n    byte bytes2[] = new byte[numBytes];\n    input.readBytes(bytes2, 0, bytes2.length);\n    assertEquals(input.length(), numBytes);\n    input.close();\n    \n    assertArrayEquals(bytes, bytes2);\n    \n    IOUtils.close(source, dest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testCopyOverwrite().mjava","sourceNew":null,"sourceOld":"  // TODO: are these semantics really needed by lucene? can we just throw exception?\n  public void testCopyOverwrite() throws Exception {\n    Directory source = getDirectory(createTempDir(\"testCopyOverwrite\"));\n    Directory dest = newDirectory();\n    \n    // we are double-writing intentionally, because thats the api\n    if (dest instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) dest).setPreventDoubleWrite(false);\n    }\n    \n    IndexOutput output = source.createOutput(\"foobar\", newIOContext(random()));\n    int numBytes = random().nextInt(20000);\n    byte bytes[] = new byte[numBytes];\n    random().nextBytes(bytes);\n    output.writeBytes(bytes, bytes.length);\n    output.close();\n    \n    // create foobaz first, it should be overwritten\n    IndexOutput output2 = dest.createOutput(\"foobaz\", newIOContext(random()));\n    output2.writeString(\"bogus!\");\n    output2.close();\n    \n    dest.copyFrom(source, \"foobar\", \"foobaz\", newIOContext(random()));\n    assertTrue(slowFileExists(dest, \"foobaz\"));\n    \n    IndexInput input = dest.openInput(\"foobaz\", newIOContext(random()));\n    byte bytes2[] = new byte[numBytes];\n    input.readBytes(bytes2, 0, bytes2.length);\n    assertEquals(input.length(), numBytes);\n    input.close();\n    \n    assertArrayEquals(bytes, bytes2);\n    \n    IOUtils.close(source, dest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a8943eb15df4a89f924a7bcea7fec04688d304c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"11c6df42fb3eba174c3ca0d9a5194eaecd893b77":["52d4cfb22484037a9b8e9080e03aeaff60954880"],"52d4cfb22484037a9b8e9080e03aeaff60954880":["0a8943eb15df4a89f924a7bcea7fec04688d304c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["52d4cfb22484037a9b8e9080e03aeaff60954880","11c6df42fb3eba174c3ca0d9a5194eaecd893b77"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["11c6df42fb3eba174c3ca0d9a5194eaecd893b77"]},"commit2Childs":{"0a8943eb15df4a89f924a7bcea7fec04688d304c":["52d4cfb22484037a9b8e9080e03aeaff60954880"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a8943eb15df4a89f924a7bcea7fec04688d304c"],"11c6df42fb3eba174c3ca0d9a5194eaecd893b77":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"52d4cfb22484037a9b8e9080e03aeaff60954880":["11c6df42fb3eba174c3ca0d9a5194eaecd893b77","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}