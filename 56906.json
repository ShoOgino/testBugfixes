{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#setupDatabase().mjava","commits":[{"id":"b940572a59da1b42b6c20ab5278155b12816807a","date":1462388874,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#setupDatabase().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#beforeSuperClass().mjava","sourceNew":"  @BeforeClass\n  public static void setupDatabase() throws Exception {\n    \n    // Initialize Database\n    // Ok, so.....hsqldb is doing something totally weird so I thought I'd take a moment to explain it.\n    // According to http://www.hsqldb.org/doc/1.8/guide/guide.html#N101EF, section \"Components of SQL Expressions\", clause \"name\",\n    // \"When an SQL statement is issued, any lowercase characters in unquoted identifiers are converted to uppercase.\"\n    // :(   Like seriously....\n    // So, for this reason and to simplify writing these tests I've decided that in all statements all table and column names \n    // will be in UPPERCASE. This is to ensure things look and behave consistently. Note that this is not a requirement of the \n    // JDBCStream and is only a carryover from the driver we are testing with.\n    Class.forName(\"org.hsqldb.jdbcDriver\").newInstance();\n    Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n    Statement statement  = connection.createStatement();\n    statement.executeUpdate(\"create table COUNTRIES(CODE varchar(3) not null primary key, COUNTRY_NAME varchar(50), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table PEOPLE(ID int not null primary key, NAME varchar(50), COUNTRY_CODE char(2), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table PEOPLE_SPORTS(ID int not null primary key, PERSON_ID int, SPORT_NAME varchar(50), DELETED char(1) default 'N')\");\n    \n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeSuperClass() throws Exception {\n    AbstractZkTestCase.SOLRHOME = new File(SOLR_HOME());\n    \n    // Initialize Database\n    // Ok, so.....hsqldb is doing something totally weird so I thought I'd take a moment to explain it.\n    // According to http://www.hsqldb.org/doc/1.8/guide/guide.html#N101EF, section \"Components of SQL Expressions\", clause \"name\",\n    // \"When an SQL statement is issued, any lowercase characters in unquoted identifiers are converted to uppercase.\"\n    // :(   Like seriously....\n    // So, for this reason and to simplify writing these tests I've decided that in all statements all table and column names \n    // will be in UPPERCASE. This is to ensure things look and behave consistently. Note that this is not a requirement of the \n    // JDBCStream and is only a carryover from the driver we are testing with.\n    Class.forName(\"org.hsqldb.jdbcDriver\").newInstance();\n    Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n    Statement statement = connection.createStatement();\n    statement = connection.createStatement();\n    statement.executeUpdate(\"create table COUNTRIES(CODE varchar(3) not null primary key, COUNTRY_NAME varchar(50), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table PEOPLE(ID int not null primary key, NAME varchar(50), COUNTRY_CODE char(2), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table PEOPLE_SPORTS(ID int not null primary key, PERSON_ID int, SPORT_NAME varchar(50), DELETED char(1) default 'N')\");\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd78ba595fa6cdd7fff930f26d154d13a823fa47","date":1462400514,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#setupDatabase().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#beforeSuperClass().mjava","sourceNew":"  @BeforeClass\n  public static void setupDatabase() throws Exception {\n    \n    // Initialize Database\n    // Ok, so.....hsqldb is doing something totally weird so I thought I'd take a moment to explain it.\n    // According to http://www.hsqldb.org/doc/1.8/guide/guide.html#N101EF, section \"Components of SQL Expressions\", clause \"name\",\n    // \"When an SQL statement is issued, any lowercase characters in unquoted identifiers are converted to uppercase.\"\n    // :(   Like seriously....\n    // So, for this reason and to simplify writing these tests I've decided that in all statements all table and column names \n    // will be in UPPERCASE. This is to ensure things look and behave consistently. Note that this is not a requirement of the \n    // JDBCStream and is only a carryover from the driver we are testing with.\n    Class.forName(\"org.hsqldb.jdbcDriver\").newInstance();\n    Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n    Statement statement  = connection.createStatement();\n    statement.executeUpdate(\"create table COUNTRIES(CODE varchar(3) not null primary key, COUNTRY_NAME varchar(50), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table PEOPLE(ID int not null primary key, NAME varchar(50), COUNTRY_CODE char(2), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table PEOPLE_SPORTS(ID int not null primary key, PERSON_ID int, SPORT_NAME varchar(50), DELETED char(1) default 'N')\");\n    \n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeSuperClass() throws Exception {\n    AbstractZkTestCase.SOLRHOME = new File(SOLR_HOME());\n    \n    // Initialize Database\n    // Ok, so.....hsqldb is doing something totally weird so I thought I'd take a moment to explain it.\n    // According to http://www.hsqldb.org/doc/1.8/guide/guide.html#N101EF, section \"Components of SQL Expressions\", clause \"name\",\n    // \"When an SQL statement is issued, any lowercase characters in unquoted identifiers are converted to uppercase.\"\n    // :(   Like seriously....\n    // So, for this reason and to simplify writing these tests I've decided that in all statements all table and column names \n    // will be in UPPERCASE. This is to ensure things look and behave consistently. Note that this is not a requirement of the \n    // JDBCStream and is only a carryover from the driver we are testing with.\n    Class.forName(\"org.hsqldb.jdbcDriver\").newInstance();\n    Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n    Statement statement = connection.createStatement();\n    statement = connection.createStatement();\n    statement.executeUpdate(\"create table COUNTRIES(CODE varchar(3) not null primary key, COUNTRY_NAME varchar(50), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table PEOPLE(ID int not null primary key, NAME varchar(50), COUNTRY_CODE char(2), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table PEOPLE_SPORTS(ID int not null primary key, PERSON_ID int, SPORT_NAME varchar(50), DELETED char(1) default 'N')\");\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#setupDatabase().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#beforeSuperClass().mjava","sourceNew":"  @BeforeClass\n  public static void setupDatabase() throws Exception {\n    \n    // Initialize Database\n    // Ok, so.....hsqldb is doing something totally weird so I thought I'd take a moment to explain it.\n    // According to http://www.hsqldb.org/doc/1.8/guide/guide.html#N101EF, section \"Components of SQL Expressions\", clause \"name\",\n    // \"When an SQL statement is issued, any lowercase characters in unquoted identifiers are converted to uppercase.\"\n    // :(   Like seriously....\n    // So, for this reason and to simplify writing these tests I've decided that in all statements all table and column names \n    // will be in UPPERCASE. This is to ensure things look and behave consistently. Note that this is not a requirement of the \n    // JDBCStream and is only a carryover from the driver we are testing with.\n    Class.forName(\"org.hsqldb.jdbcDriver\").newInstance();\n    Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n    Statement statement  = connection.createStatement();\n    statement.executeUpdate(\"create table COUNTRIES(CODE varchar(3) not null primary key, COUNTRY_NAME varchar(50), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table PEOPLE(ID int not null primary key, NAME varchar(50), COUNTRY_CODE char(2), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table PEOPLE_SPORTS(ID int not null primary key, PERSON_ID int, SPORT_NAME varchar(50), DELETED char(1) default 'N')\");\n    \n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeSuperClass() throws Exception {\n    AbstractZkTestCase.SOLRHOME = new File(SOLR_HOME());\n    \n    // Initialize Database\n    // Ok, so.....hsqldb is doing something totally weird so I thought I'd take a moment to explain it.\n    // According to http://www.hsqldb.org/doc/1.8/guide/guide.html#N101EF, section \"Components of SQL Expressions\", clause \"name\",\n    // \"When an SQL statement is issued, any lowercase characters in unquoted identifiers are converted to uppercase.\"\n    // :(   Like seriously....\n    // So, for this reason and to simplify writing these tests I've decided that in all statements all table and column names \n    // will be in UPPERCASE. This is to ensure things look and behave consistently. Note that this is not a requirement of the \n    // JDBCStream and is only a carryover from the driver we are testing with.\n    Class.forName(\"org.hsqldb.jdbcDriver\").newInstance();\n    Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n    Statement statement = connection.createStatement();\n    statement = connection.createStatement();\n    statement.executeUpdate(\"create table COUNTRIES(CODE varchar(3) not null primary key, COUNTRY_NAME varchar(50), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table PEOPLE(ID int not null primary key, NAME varchar(50), COUNTRY_CODE char(2), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table PEOPLE_SPORTS(ID int not null primary key, PERSON_ID int, SPORT_NAME varchar(50), DELETED char(1) default 'N')\");\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#setupDatabase().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#beforeSuperClass().mjava","sourceNew":"  @BeforeClass\n  public static void setupDatabase() throws Exception {\n    \n    // Initialize Database\n    // Ok, so.....hsqldb is doing something totally weird so I thought I'd take a moment to explain it.\n    // According to http://www.hsqldb.org/doc/1.8/guide/guide.html#N101EF, section \"Components of SQL Expressions\", clause \"name\",\n    // \"When an SQL statement is issued, any lowercase characters in unquoted identifiers are converted to uppercase.\"\n    // :(   Like seriously....\n    // So, for this reason and to simplify writing these tests I've decided that in all statements all table and column names \n    // will be in UPPERCASE. This is to ensure things look and behave consistently. Note that this is not a requirement of the \n    // JDBCStream and is only a carryover from the driver we are testing with.\n    Class.forName(\"org.hsqldb.jdbcDriver\").newInstance();\n    Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n    Statement statement  = connection.createStatement();\n    statement.executeUpdate(\"create table COUNTRIES(CODE varchar(3) not null primary key, COUNTRY_NAME varchar(50), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table PEOPLE(ID int not null primary key, NAME varchar(50), COUNTRY_CODE char(2), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table PEOPLE_SPORTS(ID int not null primary key, PERSON_ID int, SPORT_NAME varchar(50), DELETED char(1) default 'N')\");\n    \n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeSuperClass() throws Exception {\n    AbstractZkTestCase.SOLRHOME = new File(SOLR_HOME());\n    \n    // Initialize Database\n    // Ok, so.....hsqldb is doing something totally weird so I thought I'd take a moment to explain it.\n    // According to http://www.hsqldb.org/doc/1.8/guide/guide.html#N101EF, section \"Components of SQL Expressions\", clause \"name\",\n    // \"When an SQL statement is issued, any lowercase characters in unquoted identifiers are converted to uppercase.\"\n    // :(   Like seriously....\n    // So, for this reason and to simplify writing these tests I've decided that in all statements all table and column names \n    // will be in UPPERCASE. This is to ensure things look and behave consistently. Note that this is not a requirement of the \n    // JDBCStream and is only a carryover from the driver we are testing with.\n    Class.forName(\"org.hsqldb.jdbcDriver\").newInstance();\n    Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n    Statement statement = connection.createStatement();\n    statement = connection.createStatement();\n    statement.executeUpdate(\"create table COUNTRIES(CODE varchar(3) not null primary key, COUNTRY_NAME varchar(50), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table PEOPLE(ID int not null primary key, NAME varchar(50), COUNTRY_CODE char(2), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table PEOPLE_SPORTS(ID int not null primary key, PERSON_ID int, SPORT_NAME varchar(50), DELETED char(1) default 'N')\");\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc6d877f6edd34437292e3f144919ceb9cd7221d","date":1467224876,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#setupDatabase().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#setupDatabase().mjava","sourceNew":"  @BeforeClass\n  public static void setupDatabase() throws Exception {\n    \n    // Initialize Database\n    // Ok, so.....hsqldb is doing something totally weird so I thought I'd take a moment to explain it.\n    // According to http://www.hsqldb.org/doc/1.8/guide/guide.html#N101EF, section \"Components of SQL Expressions\", clause \"name\",\n    // \"When an SQL statement is issued, any lowercase characters in unquoted identifiers are converted to uppercase.\"\n    // :(   Like seriously....\n    // So, for this reason and to simplify writing these tests I've decided that in all statements all table and column names \n    // will be in UPPERCASE. This is to ensure things look and behave consistently. Note that this is not a requirement of the \n    // JDBCStream and is only a carryover from the driver we are testing with.\n    Class.forName(\"org.hsqldb.jdbcDriver\").newInstance();\n    Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n    Statement statement  = connection.createStatement();\n    statement.executeUpdate(\"create table COUNTRIES(CODE varchar(3) not null primary key, COUNTRY_NAME varchar(50), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table PEOPLE(ID int not null primary key, NAME varchar(50), COUNTRY_CODE char(2), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table PEOPLE_SPORTS(ID int not null primary key, PERSON_ID int, SPORT_NAME varchar(50), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table UNSUPPORTED_COLUMNS(ID int not null primary key, UNSP binary)\");\n    \n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupDatabase() throws Exception {\n    \n    // Initialize Database\n    // Ok, so.....hsqldb is doing something totally weird so I thought I'd take a moment to explain it.\n    // According to http://www.hsqldb.org/doc/1.8/guide/guide.html#N101EF, section \"Components of SQL Expressions\", clause \"name\",\n    // \"When an SQL statement is issued, any lowercase characters in unquoted identifiers are converted to uppercase.\"\n    // :(   Like seriously....\n    // So, for this reason and to simplify writing these tests I've decided that in all statements all table and column names \n    // will be in UPPERCASE. This is to ensure things look and behave consistently. Note that this is not a requirement of the \n    // JDBCStream and is only a carryover from the driver we are testing with.\n    Class.forName(\"org.hsqldb.jdbcDriver\").newInstance();\n    Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n    Statement statement  = connection.createStatement();\n    statement.executeUpdate(\"create table COUNTRIES(CODE varchar(3) not null primary key, COUNTRY_NAME varchar(50), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table PEOPLE(ID int not null primary key, NAME varchar(50), COUNTRY_CODE char(2), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table PEOPLE_SPORTS(ID int not null primary key, PERSON_ID int, SPORT_NAME varchar(50), DELETED char(1) default 'N')\");\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#setupDatabase().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#setupDatabase().mjava","sourceNew":"  @BeforeClass\n  public static void setupDatabase() throws Exception {\n    \n    // Initialize Database\n    // Ok, so.....hsqldb is doing something totally weird so I thought I'd take a moment to explain it.\n    // According to http://www.hsqldb.org/doc/1.8/guide/guide.html#N101EF, section \"Components of SQL Expressions\", clause \"name\",\n    // \"When an SQL statement is issued, any lowercase characters in unquoted identifiers are converted to uppercase.\"\n    // :(   Like seriously....\n    // So, for this reason and to simplify writing these tests I've decided that in all statements all table and column names \n    // will be in UPPERCASE. This is to ensure things look and behave consistently. Note that this is not a requirement of the \n    // JDBCStream and is only a carryover from the driver we are testing with.\n    Class.forName(\"org.hsqldb.jdbcDriver\").newInstance();\n    Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n    Statement statement  = connection.createStatement();\n    statement.executeUpdate(\"create table COUNTRIES(CODE varchar(3) not null primary key, COUNTRY_NAME varchar(50), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table PEOPLE(ID int not null primary key, NAME varchar(50), COUNTRY_CODE char(2), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table PEOPLE_SPORTS(ID int not null primary key, PERSON_ID int, SPORT_NAME varchar(50), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table UNSUPPORTED_COLUMNS(ID int not null primary key, UNSP binary)\");\n    \n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupDatabase() throws Exception {\n    \n    // Initialize Database\n    // Ok, so.....hsqldb is doing something totally weird so I thought I'd take a moment to explain it.\n    // According to http://www.hsqldb.org/doc/1.8/guide/guide.html#N101EF, section \"Components of SQL Expressions\", clause \"name\",\n    // \"When an SQL statement is issued, any lowercase characters in unquoted identifiers are converted to uppercase.\"\n    // :(   Like seriously....\n    // So, for this reason and to simplify writing these tests I've decided that in all statements all table and column names \n    // will be in UPPERCASE. This is to ensure things look and behave consistently. Note that this is not a requirement of the \n    // JDBCStream and is only a carryover from the driver we are testing with.\n    Class.forName(\"org.hsqldb.jdbcDriver\").newInstance();\n    Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n    Statement statement  = connection.createStatement();\n    statement.executeUpdate(\"create table COUNTRIES(CODE varchar(3) not null primary key, COUNTRY_NAME varchar(50), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table PEOPLE(ID int not null primary key, NAME varchar(50), COUNTRY_CODE char(2), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table PEOPLE_SPORTS(ID int not null primary key, PERSON_ID int, SPORT_NAME varchar(50), DELETED char(1) default 'N')\");\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17361387c1023c3b72fb3bcf3d258318ab54deb7","date":1494596656,"type":3,"author":"jdyer1","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#setupDatabase().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#setupDatabase().mjava","sourceNew":"  @BeforeClass\n  public static void setupDatabase() throws Exception {\n    \n    // Initialize Database\n    // Ok, so.....hsqldb is doing something totally weird so I thought I'd take a moment to explain it.\n    // According to http://www.hsqldb.org/doc/1.8/guide/guide.html#N101EF, section \"Components of SQL Expressions\", clause \"name\",\n    // \"When an SQL statement is issued, any lowercase characters in unquoted identifiers are converted to uppercase.\"\n    // :(   Like seriously....\n    // So, for this reason and to simplify writing these tests I've decided that in all statements all table and column names \n    // will be in UPPERCASE. This is to ensure things look and behave consistently. Note that this is not a requirement of the \n    // JDBCStream and is only a carryover from the driver we are testing with.\n    Class.forName(\"org.hsqldb.jdbcDriver\").newInstance();\n    Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n    Statement statement  = connection.createStatement();\n    statement.executeUpdate(\"create table COUNTRIES(CODE varchar(3) not null primary key, COUNTRY_NAME varchar(50), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table PEOPLE(ID int not null primary key, NAME varchar(50), COUNTRY_CODE char(2), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table PEOPLE_SPORTS(ID int not null primary key, PERSON_ID int, SPORT_NAME varchar(50), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table UNSUPPORTED_COLUMNS(ID int not null primary key, UNSP binary)\");\n    statement.executeUpdate(\"create table DUAL(ID int not null primary key)\");\n    statement.executeUpdate(\"insert into DUAL values(1)\");\n    \n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupDatabase() throws Exception {\n    \n    // Initialize Database\n    // Ok, so.....hsqldb is doing something totally weird so I thought I'd take a moment to explain it.\n    // According to http://www.hsqldb.org/doc/1.8/guide/guide.html#N101EF, section \"Components of SQL Expressions\", clause \"name\",\n    // \"When an SQL statement is issued, any lowercase characters in unquoted identifiers are converted to uppercase.\"\n    // :(   Like seriously....\n    // So, for this reason and to simplify writing these tests I've decided that in all statements all table and column names \n    // will be in UPPERCASE. This is to ensure things look and behave consistently. Note that this is not a requirement of the \n    // JDBCStream and is only a carryover from the driver we are testing with.\n    Class.forName(\"org.hsqldb.jdbcDriver\").newInstance();\n    Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n    Statement statement  = connection.createStatement();\n    statement.executeUpdate(\"create table COUNTRIES(CODE varchar(3) not null primary key, COUNTRY_NAME varchar(50), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table PEOPLE(ID int not null primary key, NAME varchar(50), COUNTRY_CODE char(2), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table PEOPLE_SPORTS(ID int not null primary key, PERSON_ID int, SPORT_NAME varchar(50), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table UNSUPPORTED_COLUMNS(ID int not null primary key, UNSP binary)\");\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#setupDatabase().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#setupDatabase().mjava","sourceNew":"  @BeforeClass\n  public static void setupDatabase() throws Exception {\n    \n    // Initialize Database\n    // Ok, so.....hsqldb is doing something totally weird so I thought I'd take a moment to explain it.\n    // According to http://www.hsqldb.org/doc/1.8/guide/guide.html#N101EF, section \"Components of SQL Expressions\", clause \"name\",\n    // \"When an SQL statement is issued, any lowercase characters in unquoted identifiers are converted to uppercase.\"\n    // :(   Like seriously....\n    // So, for this reason and to simplify writing these tests I've decided that in all statements all table and column names \n    // will be in UPPERCASE. This is to ensure things look and behave consistently. Note that this is not a requirement of the \n    // JDBCStream and is only a carryover from the driver we are testing with.\n    Class.forName(\"org.hsqldb.jdbcDriver\").newInstance();\n    Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n    Statement statement  = connection.createStatement();\n    statement.executeUpdate(\"create table COUNTRIES(CODE varchar(3) not null primary key, COUNTRY_NAME varchar(50), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table PEOPLE(ID int not null primary key, NAME varchar(50), COUNTRY_CODE char(2), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table PEOPLE_SPORTS(ID int not null primary key, PERSON_ID int, SPORT_NAME varchar(50), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table UNSUPPORTED_COLUMNS(ID int not null primary key, UNSP binary)\");\n    statement.executeUpdate(\"create table DUAL(ID int not null primary key)\");\n    statement.executeUpdate(\"insert into DUAL values(1)\");\n    \n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupDatabase() throws Exception {\n    \n    // Initialize Database\n    // Ok, so.....hsqldb is doing something totally weird so I thought I'd take a moment to explain it.\n    // According to http://www.hsqldb.org/doc/1.8/guide/guide.html#N101EF, section \"Components of SQL Expressions\", clause \"name\",\n    // \"When an SQL statement is issued, any lowercase characters in unquoted identifiers are converted to uppercase.\"\n    // :(   Like seriously....\n    // So, for this reason and to simplify writing these tests I've decided that in all statements all table and column names \n    // will be in UPPERCASE. This is to ensure things look and behave consistently. Note that this is not a requirement of the \n    // JDBCStream and is only a carryover from the driver we are testing with.\n    Class.forName(\"org.hsqldb.jdbcDriver\").newInstance();\n    Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n    Statement statement  = connection.createStatement();\n    statement.executeUpdate(\"create table COUNTRIES(CODE varchar(3) not null primary key, COUNTRY_NAME varchar(50), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table PEOPLE(ID int not null primary key, NAME varchar(50), COUNTRY_CODE char(2), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table PEOPLE_SPORTS(ID int not null primary key, PERSON_ID int, SPORT_NAME varchar(50), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table UNSUPPORTED_COLUMNS(ID int not null primary key, UNSP binary)\");\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#setupDatabase().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#setupDatabase().mjava","sourceNew":"  @BeforeClass\n  public static void setupDatabase() throws Exception {\n    \n    // Initialize Database\n    // Ok, so.....hsqldb is doing something totally weird so I thought I'd take a moment to explain it.\n    // According to http://www.hsqldb.org/doc/1.8/guide/guide.html#N101EF, section \"Components of SQL Expressions\", clause \"name\",\n    // \"When an SQL statement is issued, any lowercase characters in unquoted identifiers are converted to uppercase.\"\n    // :(   Like seriously....\n    // So, for this reason and to simplify writing these tests I've decided that in all statements all table and column names \n    // will be in UPPERCASE. This is to ensure things look and behave consistently. Note that this is not a requirement of the \n    // JDBCStream and is only a carryover from the driver we are testing with.\n    Class.forName(\"org.hsqldb.jdbcDriver\").getConstructor().newInstance();\n    Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n    Statement statement  = connection.createStatement();\n    statement.executeUpdate(\"create table COUNTRIES(CODE varchar(3) not null primary key, COUNTRY_NAME varchar(50), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table PEOPLE(ID int not null primary key, NAME varchar(50), COUNTRY_CODE char(2), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table PEOPLE_SPORTS(ID int not null primary key, PERSON_ID int, SPORT_NAME varchar(50), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table UNSUPPORTED_COLUMNS(ID int not null primary key, UNSP binary)\");\n    statement.executeUpdate(\"create table DUAL(ID int not null primary key)\");\n    statement.executeUpdate(\"insert into DUAL values(1)\");\n    \n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupDatabase() throws Exception {\n    \n    // Initialize Database\n    // Ok, so.....hsqldb is doing something totally weird so I thought I'd take a moment to explain it.\n    // According to http://www.hsqldb.org/doc/1.8/guide/guide.html#N101EF, section \"Components of SQL Expressions\", clause \"name\",\n    // \"When an SQL statement is issued, any lowercase characters in unquoted identifiers are converted to uppercase.\"\n    // :(   Like seriously....\n    // So, for this reason and to simplify writing these tests I've decided that in all statements all table and column names \n    // will be in UPPERCASE. This is to ensure things look and behave consistently. Note that this is not a requirement of the \n    // JDBCStream and is only a carryover from the driver we are testing with.\n    Class.forName(\"org.hsqldb.jdbcDriver\").newInstance();\n    Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n    Statement statement  = connection.createStatement();\n    statement.executeUpdate(\"create table COUNTRIES(CODE varchar(3) not null primary key, COUNTRY_NAME varchar(50), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table PEOPLE(ID int not null primary key, NAME varchar(50), COUNTRY_CODE char(2), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table PEOPLE_SPORTS(ID int not null primary key, PERSON_ID int, SPORT_NAME varchar(50), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table UNSUPPORTED_COLUMNS(ID int not null primary key, UNSP binary)\");\n    statement.executeUpdate(\"create table DUAL(ID int not null primary key)\");\n    statement.executeUpdate(\"insert into DUAL values(1)\");\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"17361387c1023c3b72fb3bcf3d258318ab54deb7":["bc6d877f6edd34437292e3f144919ceb9cd7221d"],"bc6d877f6edd34437292e3f144919ceb9cd7221d":["73450c0955930295d34703e7ddbfc6973b7a121a"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["bc6d877f6edd34437292e3f144919ceb9cd7221d","17361387c1023c3b72fb3bcf3d258318ab54deb7"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b940572a59da1b42b6c20ab5278155b12816807a"],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["17361387c1023c3b72fb3bcf3d258318ab54deb7"],"73450c0955930295d34703e7ddbfc6973b7a121a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b940572a59da1b42b6c20ab5278155b12816807a"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","73450c0955930295d34703e7ddbfc6973b7a121a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b940572a59da1b42b6c20ab5278155b12816807a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","bc6d877f6edd34437292e3f144919ceb9cd7221d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b88a121b875f9ae2ac50f85cf46dcb680f126357"]},"commit2Childs":{"17361387c1023c3b72fb3bcf3d258318ab54deb7":["e9017cf144952056066919f1ebc7897ff9bd71b1","b88a121b875f9ae2ac50f85cf46dcb680f126357"],"bc6d877f6edd34437292e3f144919ceb9cd7221d":["17361387c1023c3b72fb3bcf3d258318ab54deb7","e9017cf144952056066919f1ebc7897ff9bd71b1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"73450c0955930295d34703e7ddbfc6973b7a121a":["bc6d877f6edd34437292e3f144919ceb9cd7221d","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","73450c0955930295d34703e7ddbfc6973b7a121a","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","b940572a59da1b42b6c20ab5278155b12816807a"],"b940572a59da1b42b6c20ab5278155b12816807a":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","73450c0955930295d34703e7ddbfc6973b7a121a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}