{"path":"solr/core/src/test/org/apache/solr/search/TestRecovery#testLogReplayWithReorderedDBQ().mjava","commits":[{"id":"72b93de9124049bdac1d82afb795dd2a463b5b37","date":1484151664,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testLogReplayWithReorderedDBQ().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testLogReplayWithReorderedDBQ() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      updateJ(jsonAdd(sdoc(\"id\",\"B1\", \"_version_\",\"1010\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonDelQ(\"id:B2\"), params(DISTRIB_UPDATE_PARAM,FROM_LEADER, \"_version_\",\"-1017\")); // This should've arrived after the 1015th update\n      updateJ(jsonAdd(sdoc(\"id\",\"B2\", \"_version_\",\"1015\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"B3\", \"_version_\",\"1020\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==2\");\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testLogReplayWithReorderedDBQ().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testLogReplayWithReorderedDBQ() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      updateJ(jsonAdd(sdoc(\"id\",\"B1\", \"_version_\",\"1010\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonDelQ(\"id:B2\"), params(DISTRIB_UPDATE_PARAM,FROM_LEADER, \"_version_\",\"-1017\")); // This should've arrived after the 1015th update\n      updateJ(jsonAdd(sdoc(\"id\",\"B2\", \"_version_\",\"1015\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"B3\", \"_version_\",\"1020\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==2\");\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407b2e02aedce6b9118323ef204a08acfd83add7","date":1487217081,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testLogReplayWithReorderedDBQ().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testLogReplayWithReorderedDBQ().mjava","sourceNew":"  @Test\n  public void testLogReplayWithReorderedDBQ() throws Exception {\n    testLogReplayWithReorderedDBQWrapper(() -> {\n          updateJ(jsonAdd(sdoc(\"id\", \"B1\", \"_version_\", \"1010\")), params(DISTRIB_UPDATE_PARAM, FROM_LEADER));\n          updateJ(jsonDelQ(\"id:B2\"), params(DISTRIB_UPDATE_PARAM, FROM_LEADER, \"_version_\", \"-1017\")); // This should've arrived after the 1015th update\n          updateJ(jsonAdd(sdoc(\"id\", \"B2\", \"_version_\", \"1015\")), params(DISTRIB_UPDATE_PARAM, FROM_LEADER));\n          updateJ(jsonAdd(sdoc(\"id\", \"B3\", \"_version_\", \"1020\")), params(DISTRIB_UPDATE_PARAM, FROM_LEADER));\n        },\n        () -> assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==2\")\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testLogReplayWithReorderedDBQ() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      updateJ(jsonAdd(sdoc(\"id\",\"B1\", \"_version_\",\"1010\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonDelQ(\"id:B2\"), params(DISTRIB_UPDATE_PARAM,FROM_LEADER, \"_version_\",\"-1017\")); // This should've arrived after the 1015th update\n      updateJ(jsonAdd(sdoc(\"id\",\"B2\", \"_version_\",\"1015\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"B3\", \"_version_\",\"1020\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==2\");\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"295e008673df441573c0d5a86837788a5279f9e2","date":1487275964,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testLogReplayWithReorderedDBQ().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testLogReplayWithReorderedDBQ().mjava","sourceNew":"  @Test\n  public void testLogReplayWithReorderedDBQ() throws Exception {\n    testLogReplayWithReorderedDBQWrapper(() -> {\n          updateJ(jsonAdd(sdoc(\"id\", \"RDBQ1_1\", \"_version_\", \"1010\")), params(DISTRIB_UPDATE_PARAM, FROM_LEADER));\n          updateJ(jsonDelQ(\"id:RDBQ1_2\"), params(DISTRIB_UPDATE_PARAM, FROM_LEADER, \"_version_\", \"-1017\")); // This should've arrived after the 1015th update\n          updateJ(jsonAdd(sdoc(\"id\", \"RDBQ1_2\", \"_version_\", \"1015\")), params(DISTRIB_UPDATE_PARAM, FROM_LEADER));\n          updateJ(jsonAdd(sdoc(\"id\", \"RDBQ1_3\", \"_version_\", \"1020\")), params(DISTRIB_UPDATE_PARAM, FROM_LEADER));\n        },\n        () -> assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==2\")\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testLogReplayWithReorderedDBQ() throws Exception {\n    testLogReplayWithReorderedDBQWrapper(() -> {\n          updateJ(jsonAdd(sdoc(\"id\", \"B1\", \"_version_\", \"1010\")), params(DISTRIB_UPDATE_PARAM, FROM_LEADER));\n          updateJ(jsonDelQ(\"id:B2\"), params(DISTRIB_UPDATE_PARAM, FROM_LEADER, \"_version_\", \"-1017\")); // This should've arrived after the 1015th update\n          updateJ(jsonAdd(sdoc(\"id\", \"B2\", \"_version_\", \"1015\")), params(DISTRIB_UPDATE_PARAM, FROM_LEADER));\n          updateJ(jsonAdd(sdoc(\"id\", \"B3\", \"_version_\", \"1020\")), params(DISTRIB_UPDATE_PARAM, FROM_LEADER));\n        },\n        () -> assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==2\")\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9efcb86f82b536ffcefcc27adbfa39b603342af1","date":1492147023,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testLogReplayWithReorderedDBQ().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testLogReplayWithReorderedDBQ().mjava","sourceNew":"  @Test\n  public void testLogReplayWithReorderedDBQ() throws Exception {\n    testLogReplayWithReorderedDBQWrapper(() -> {\n          String v1010 = getNextVersion();\n          String v1015 = getNextVersion();\n          String v1017_del = \"-\" + getNextVersion();\n          String v1020 = getNextVersion();\n          \n          updateJ(jsonAdd(sdoc(\"id\", \"RDBQ1_1\", \"_version_\", v1010)), params(DISTRIB_UPDATE_PARAM, FROM_LEADER));\n          updateJ(jsonDelQ(\"id:RDBQ1_2\"), params(DISTRIB_UPDATE_PARAM, FROM_LEADER, \"_version_\", v1017_del)); // This should've arrived after the ver2 update\n          updateJ(jsonAdd(sdoc(\"id\", \"RDBQ1_2\", \"_version_\", v1015)), params(DISTRIB_UPDATE_PARAM, FROM_LEADER));\n          updateJ(jsonAdd(sdoc(\"id\", \"RDBQ1_3\", \"_version_\", v1020)), params(DISTRIB_UPDATE_PARAM, FROM_LEADER));\n        },\n        () -> assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==2\")\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testLogReplayWithReorderedDBQ() throws Exception {\n    testLogReplayWithReorderedDBQWrapper(() -> {\n          updateJ(jsonAdd(sdoc(\"id\", \"RDBQ1_1\", \"_version_\", \"1010\")), params(DISTRIB_UPDATE_PARAM, FROM_LEADER));\n          updateJ(jsonDelQ(\"id:RDBQ1_2\"), params(DISTRIB_UPDATE_PARAM, FROM_LEADER, \"_version_\", \"-1017\")); // This should've arrived after the 1015th update\n          updateJ(jsonAdd(sdoc(\"id\", \"RDBQ1_2\", \"_version_\", \"1015\")), params(DISTRIB_UPDATE_PARAM, FROM_LEADER));\n          updateJ(jsonAdd(sdoc(\"id\", \"RDBQ1_3\", \"_version_\", \"1020\")), params(DISTRIB_UPDATE_PARAM, FROM_LEADER));\n        },\n        () -> assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==2\")\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testLogReplayWithReorderedDBQ().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testLogReplayWithReorderedDBQ().mjava","sourceNew":"  @Test\n  public void testLogReplayWithReorderedDBQ() throws Exception {\n    testLogReplayWithReorderedDBQWrapper(() -> {\n          String v1010 = getNextVersion();\n          String v1015 = getNextVersion();\n          String v1017_del = \"-\" + getNextVersion();\n          String v1020 = getNextVersion();\n          \n          updateJ(jsonAdd(sdoc(\"id\", \"RDBQ1_1\", \"_version_\", v1010)), params(DISTRIB_UPDATE_PARAM, FROM_LEADER));\n          updateJ(jsonDelQ(\"id:RDBQ1_2\"), params(DISTRIB_UPDATE_PARAM, FROM_LEADER, \"_version_\", v1017_del)); // This should've arrived after the ver2 update\n          updateJ(jsonAdd(sdoc(\"id\", \"RDBQ1_2\", \"_version_\", v1015)), params(DISTRIB_UPDATE_PARAM, FROM_LEADER));\n          updateJ(jsonAdd(sdoc(\"id\", \"RDBQ1_3\", \"_version_\", v1020)), params(DISTRIB_UPDATE_PARAM, FROM_LEADER));\n        },\n        () -> assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==2\")\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testLogReplayWithReorderedDBQ() throws Exception {\n    testLogReplayWithReorderedDBQWrapper(() -> {\n          updateJ(jsonAdd(sdoc(\"id\", \"RDBQ1_1\", \"_version_\", \"1010\")), params(DISTRIB_UPDATE_PARAM, FROM_LEADER));\n          updateJ(jsonDelQ(\"id:RDBQ1_2\"), params(DISTRIB_UPDATE_PARAM, FROM_LEADER, \"_version_\", \"-1017\")); // This should've arrived after the 1015th update\n          updateJ(jsonAdd(sdoc(\"id\", \"RDBQ1_2\", \"_version_\", \"1015\")), params(DISTRIB_UPDATE_PARAM, FROM_LEADER));\n          updateJ(jsonAdd(sdoc(\"id\", \"RDBQ1_3\", \"_version_\", \"1020\")), params(DISTRIB_UPDATE_PARAM, FROM_LEADER));\n        },\n        () -> assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==2\")\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9efcb86f82b536ffcefcc27adbfa39b603342af1":["295e008673df441573c0d5a86837788a5279f9e2"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["295e008673df441573c0d5a86837788a5279f9e2"],"295e008673df441573c0d5a86837788a5279f9e2":["407b2e02aedce6b9118323ef204a08acfd83add7"],"72b93de9124049bdac1d82afb795dd2a463b5b37":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","72b93de9124049bdac1d82afb795dd2a463b5b37"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9efcb86f82b536ffcefcc27adbfa39b603342af1"],"407b2e02aedce6b9118323ef204a08acfd83add7":["72b93de9124049bdac1d82afb795dd2a463b5b37"]},"commit2Childs":{"9efcb86f82b536ffcefcc27adbfa39b603342af1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"295e008673df441573c0d5a86837788a5279f9e2":["9efcb86f82b536ffcefcc27adbfa39b603342af1","54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"72b93de9124049bdac1d82afb795dd2a463b5b37":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","407b2e02aedce6b9118323ef204a08acfd83add7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["72b93de9124049bdac1d82afb795dd2a463b5b37","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"407b2e02aedce6b9118323ef204a08acfd83add7":["295e008673df441573c0d5a86837788a5279f9e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}