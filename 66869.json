{"path":"lucene/core/src/java/org/apache/lucene/util/fst/FST#writeArrayPacked(Builder[T],Builder.UnCompiledNode[T],long,int).mjava","commits":[{"id":"ae67e1f82a53594208ca929f382ee861dad3d7a8","date":1557134375,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#writeArrayPacked(Builder[T],Builder.UnCompiledNode[T],long,int).mjava","pathOld":"/dev/null","sourceNew":"  private void writeArrayPacked(Builder<T> builder, Builder.UnCompiledNode<T> nodeIn, long fixedArrayStart, int maxBytesPerArc) {\n    // expand the arcs in place, backwards\n    long srcPos = builder.bytes.getPosition();\n    long destPos = fixedArrayStart + nodeIn.numArcs * maxBytesPerArc;\n    assert destPos >= srcPos;\n    if (destPos > srcPos) {\n      builder.bytes.skipBytes((int) (destPos - srcPos));\n      for(int arcIdx = nodeIn.numArcs - 1; arcIdx >= 0; arcIdx--) {\n        destPos -= maxBytesPerArc;\n        srcPos -= builder.reusedBytesPerArc[arcIdx];\n        //System.out.println(\"  repack arcIdx=\" + arcIdx + \" srcPos=\" + srcPos + \" destPos=\" + destPos);\n        if (srcPos != destPos) {\n          //System.out.println(\"  copy len=\" + builder.reusedBytesPerArc[arcIdx]);\n          assert destPos > srcPos: \"destPos=\" + destPos + \" srcPos=\" + srcPos + \" arcIdx=\" + arcIdx + \" maxBytesPerArc=\" + maxBytesPerArc + \" reusedBytesPerArc[arcIdx]=\" + builder.reusedBytesPerArc[arcIdx] + \" nodeIn.numArcs=\" + nodeIn.numArcs;\n          builder.bytes.copyBytes(srcPos, destPos, builder.reusedBytesPerArc[arcIdx]);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71d31a7d5773508492505519bb5230b87c8937ad","date":1573681693,"type":4,"author":"Bruno Roustant","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#writeArrayPacked(Builder[T],Builder.UnCompiledNode[T],long,int).mjava","sourceNew":null,"sourceOld":"  private void writeArrayPacked(Builder<T> builder, Builder.UnCompiledNode<T> nodeIn, long fixedArrayStart, int maxBytesPerArc) {\n    // expand the arcs in place, backwards\n    long srcPos = builder.bytes.getPosition();\n    long destPos = fixedArrayStart + nodeIn.numArcs * maxBytesPerArc;\n    assert destPos >= srcPos;\n    if (destPos > srcPos) {\n      builder.bytes.skipBytes((int) (destPos - srcPos));\n      for(int arcIdx = nodeIn.numArcs - 1; arcIdx >= 0; arcIdx--) {\n        destPos -= maxBytesPerArc;\n        srcPos -= builder.reusedBytesPerArc[arcIdx];\n        //System.out.println(\"  repack arcIdx=\" + arcIdx + \" srcPos=\" + srcPos + \" destPos=\" + destPos);\n        if (srcPos != destPos) {\n          //System.out.println(\"  copy len=\" + builder.reusedBytesPerArc[arcIdx]);\n          assert destPos > srcPos: \"destPos=\" + destPos + \" srcPos=\" + srcPos + \" arcIdx=\" + arcIdx + \" maxBytesPerArc=\" + maxBytesPerArc + \" reusedBytesPerArc[arcIdx]=\" + builder.reusedBytesPerArc[arcIdx] + \" nodeIn.numArcs=\" + nodeIn.numArcs;\n          builder.bytes.copyBytes(srcPos, destPos, builder.reusedBytesPerArc[arcIdx]);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"71d31a7d5773508492505519bb5230b87c8937ad":["ae67e1f82a53594208ca929f382ee861dad3d7a8"],"ae67e1f82a53594208ca929f382ee861dad3d7a8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71d31a7d5773508492505519bb5230b87c8937ad"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ae67e1f82a53594208ca929f382ee861dad3d7a8"],"71d31a7d5773508492505519bb5230b87c8937ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ae67e1f82a53594208ca929f382ee861dad3d7a8":["71d31a7d5773508492505519bb5230b87c8937ad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}