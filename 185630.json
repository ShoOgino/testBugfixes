{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#testEquals().mjava","commits":[{"id":"d2270976e274799939e1b5339eb6c16c7601dfda","date":1458767534,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#testEquals().mjava","pathOld":"/dev/null","sourceNew":"  public void testEquals() throws Exception {   \n    Query q1, q2;\n\n    GeoRect rect = randomRect(false, true);\n\n    q1 = newRectQuery(\"field\", rect);\n    q2 = newRectQuery(\"field\", rect);\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newRectQuery(\"field2\", rect)));\n\n    double lat = randomLat(false);\n    double lon = randomLon(false);\n    q1 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    q2 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newDistanceQuery(\"field2\", lat, lon, 10000.0)));\n\n    q1 = newDistanceRangeQuery(\"field\", lat, lon, 10000.0, 100000.0);\n    if (q1 != null) {\n      // Not all subclasses can make distance range query!\n      q2 = newDistanceRangeQuery(\"field\", lat, lon, 10000.0, 100000.0);\n      assertEquals(q1, q2);\n      assertFalse(q1.equals(newDistanceRangeQuery(\"field2\", lat, lon, 10000.0, 100000.0)));\n    }\n\n    double[] lats = new double[5];\n    double[] lons = new double[5];\n    lats[0] = rect.minLat;\n    lons[0] = rect.minLon;\n    lats[1] = rect.maxLat;\n    lons[1] = rect.minLon;\n    lats[2] = rect.maxLat;\n    lons[2] = rect.maxLon;\n    lats[3] = rect.minLat;\n    lons[3] = rect.maxLon;\n    lats[4] = rect.minLat;\n    lons[4] = rect.minLon;\n    q1 = newPolygonQuery(\"field\", lats, lons);\n    q2 = newPolygonQuery(\"field\", lats, lons);\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newPolygonQuery(\"field2\", lats, lons)));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f9686ea8f446704d6bb22f2cb00a63aa9ca52400"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d6c59bc551f4e523ce6a321280cc6733424fb824","date":1458837690,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#testEquals().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#testEquals().mjava","sourceNew":"  public void testEquals() throws Exception {   \n    Query q1, q2;\n\n    GeoRect rect = randomRect(false, true);\n\n    q1 = newRectQuery(\"field\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    q2 = newRectQuery(\"field\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newRectQuery(\"field2\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon)));\n\n    double lat = randomLat(false);\n    double lon = randomLon(false);\n    q1 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    q2 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newDistanceQuery(\"field2\", lat, lon, 10000.0)));\n\n    q1 = newDistanceRangeQuery(\"field\", lat, lon, 10000.0, 100000.0);\n    if (q1 != null) {\n      // Not all subclasses can make distance range query!\n      q2 = newDistanceRangeQuery(\"field\", lat, lon, 10000.0, 100000.0);\n      assertEquals(q1, q2);\n      assertFalse(q1.equals(newDistanceRangeQuery(\"field2\", lat, lon, 10000.0, 100000.0)));\n    }\n\n    double[] lats = new double[5];\n    double[] lons = new double[5];\n    lats[0] = rect.minLat;\n    lons[0] = rect.minLon;\n    lats[1] = rect.maxLat;\n    lons[1] = rect.minLon;\n    lats[2] = rect.maxLat;\n    lons[2] = rect.maxLon;\n    lats[3] = rect.minLat;\n    lons[3] = rect.maxLon;\n    lats[4] = rect.minLat;\n    lons[4] = rect.minLon;\n    q1 = newPolygonQuery(\"field\", lats, lons);\n    q2 = newPolygonQuery(\"field\", lats, lons);\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newPolygonQuery(\"field2\", lats, lons)));\n  }\n\n","sourceOld":"  public void testEquals() throws Exception {   \n    Query q1, q2;\n\n    GeoRect rect = randomRect(false, true);\n\n    q1 = newRectQuery(\"field\", rect);\n    q2 = newRectQuery(\"field\", rect);\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newRectQuery(\"field2\", rect)));\n\n    double lat = randomLat(false);\n    double lon = randomLon(false);\n    q1 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    q2 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newDistanceQuery(\"field2\", lat, lon, 10000.0)));\n\n    q1 = newDistanceRangeQuery(\"field\", lat, lon, 10000.0, 100000.0);\n    if (q1 != null) {\n      // Not all subclasses can make distance range query!\n      q2 = newDistanceRangeQuery(\"field\", lat, lon, 10000.0, 100000.0);\n      assertEquals(q1, q2);\n      assertFalse(q1.equals(newDistanceRangeQuery(\"field2\", lat, lon, 10000.0, 100000.0)));\n    }\n\n    double[] lats = new double[5];\n    double[] lons = new double[5];\n    lats[0] = rect.minLat;\n    lons[0] = rect.minLon;\n    lats[1] = rect.maxLat;\n    lons[1] = rect.minLon;\n    lats[2] = rect.maxLat;\n    lons[2] = rect.maxLon;\n    lats[3] = rect.minLat;\n    lons[3] = rect.maxLon;\n    lats[4] = rect.minLat;\n    lons[4] = rect.minLon;\n    q1 = newPolygonQuery(\"field\", lats, lons);\n    q2 = newPolygonQuery(\"field\", lats, lons);\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newPolygonQuery(\"field2\", lats, lons)));\n  }\n\n","bugFix":null,"bugIntro":["be12adb82269c3fbde9105b6e82c51c3f495295a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f9686ea8f446704d6bb22f2cb00a63aa9ca52400","date":1459165568,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#testEquals().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#testEquals().mjava","sourceNew":"  public void testEquals() throws Exception {   \n    Query q1, q2;\n\n    GeoRect rect = randomRect(false, true);\n\n    q1 = newRectQuery(\"field\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    q2 = newRectQuery(\"field\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newRectQuery(\"field2\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon)));\n\n    double lat = randomLat(false);\n    double lon = randomLon(false);\n    q1 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    q2 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newDistanceQuery(\"field2\", lat, lon, 10000.0)));\n\n    double[] lats = new double[5];\n    double[] lons = new double[5];\n    lats[0] = rect.minLat;\n    lons[0] = rect.minLon;\n    lats[1] = rect.maxLat;\n    lons[1] = rect.minLon;\n    lats[2] = rect.maxLat;\n    lons[2] = rect.maxLon;\n    lats[3] = rect.minLat;\n    lons[3] = rect.maxLon;\n    lats[4] = rect.minLat;\n    lons[4] = rect.minLon;\n    q1 = newPolygonQuery(\"field\", lats, lons);\n    q2 = newPolygonQuery(\"field\", lats, lons);\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newPolygonQuery(\"field2\", lats, lons)));\n  }\n\n","sourceOld":"  public void testEquals() throws Exception {   \n    Query q1, q2;\n\n    GeoRect rect = randomRect(false, true);\n\n    q1 = newRectQuery(\"field\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    q2 = newRectQuery(\"field\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newRectQuery(\"field2\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon)));\n\n    double lat = randomLat(false);\n    double lon = randomLon(false);\n    q1 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    q2 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newDistanceQuery(\"field2\", lat, lon, 10000.0)));\n\n    q1 = newDistanceRangeQuery(\"field\", lat, lon, 10000.0, 100000.0);\n    if (q1 != null) {\n      // Not all subclasses can make distance range query!\n      q2 = newDistanceRangeQuery(\"field\", lat, lon, 10000.0, 100000.0);\n      assertEquals(q1, q2);\n      assertFalse(q1.equals(newDistanceRangeQuery(\"field2\", lat, lon, 10000.0, 100000.0)));\n    }\n\n    double[] lats = new double[5];\n    double[] lons = new double[5];\n    lats[0] = rect.minLat;\n    lons[0] = rect.minLon;\n    lats[1] = rect.maxLat;\n    lons[1] = rect.minLon;\n    lats[2] = rect.maxLat;\n    lons[2] = rect.maxLon;\n    lats[3] = rect.minLat;\n    lons[3] = rect.maxLon;\n    lats[4] = rect.minLat;\n    lons[4] = rect.minLon;\n    q1 = newPolygonQuery(\"field\", lats, lons);\n    q2 = newPolygonQuery(\"field\", lats, lons);\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newPolygonQuery(\"field2\", lats, lons)));\n  }\n\n","bugFix":["d2270976e274799939e1b5339eb6c16c7601dfda"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1419d3974886c9518c259c786492b4d3660b0b8e","date":1459180094,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#testEquals().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#testEquals().mjava","sourceNew":"  public void testEquals() throws Exception {   \n    Query q1, q2;\n\n    GeoRect rect = randomRect(false);\n\n    q1 = newRectQuery(\"field\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    q2 = newRectQuery(\"field\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newRectQuery(\"field2\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon)));\n\n    double lat = randomLat(false);\n    double lon = randomLon(false);\n    q1 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    q2 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newDistanceQuery(\"field2\", lat, lon, 10000.0)));\n\n    double[] lats = new double[5];\n    double[] lons = new double[5];\n    lats[0] = rect.minLat;\n    lons[0] = rect.minLon;\n    lats[1] = rect.maxLat;\n    lons[1] = rect.minLon;\n    lats[2] = rect.maxLat;\n    lons[2] = rect.maxLon;\n    lats[3] = rect.minLat;\n    lons[3] = rect.maxLon;\n    lats[4] = rect.minLat;\n    lons[4] = rect.minLon;\n    q1 = newPolygonQuery(\"field\", lats, lons);\n    q2 = newPolygonQuery(\"field\", lats, lons);\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newPolygonQuery(\"field2\", lats, lons)));\n  }\n\n","sourceOld":"  public void testEquals() throws Exception {   \n    Query q1, q2;\n\n    GeoRect rect = randomRect(false, true);\n\n    q1 = newRectQuery(\"field\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    q2 = newRectQuery(\"field\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newRectQuery(\"field2\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon)));\n\n    double lat = randomLat(false);\n    double lon = randomLon(false);\n    q1 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    q2 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newDistanceQuery(\"field2\", lat, lon, 10000.0)));\n\n    double[] lats = new double[5];\n    double[] lons = new double[5];\n    lats[0] = rect.minLat;\n    lons[0] = rect.minLon;\n    lats[1] = rect.maxLat;\n    lons[1] = rect.minLon;\n    lats[2] = rect.maxLat;\n    lons[2] = rect.maxLon;\n    lats[3] = rect.minLat;\n    lons[3] = rect.maxLon;\n    lats[4] = rect.minLat;\n    lons[4] = rect.minLon;\n    q1 = newPolygonQuery(\"field\", lats, lons);\n    q2 = newPolygonQuery(\"field\", lats, lons);\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newPolygonQuery(\"field2\", lats, lons)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"95ddcac9ac08381985af6eac8f8b77ba881d4ad8","date":1459477726,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#testEquals().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#testEquals().mjava","sourceNew":"  public void testEquals() throws Exception {   \n    Query q1, q2;\n\n    GeoRect rect = randomRect(false);\n\n    q1 = newRectQuery(\"field\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    q2 = newRectQuery(\"field\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newRectQuery(\"field2\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon)));\n\n    double lat = randomLat(false);\n    double lon = randomLon(false);\n    q1 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    q2 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newDistanceQuery(\"field2\", lat, lon, 10000.0)));\n\n    double[] lats = new double[5];\n    double[] lons = new double[5];\n    lats[0] = rect.minLat;\n    lons[0] = rect.minLon;\n    lats[1] = rect.maxLat;\n    lons[1] = rect.minLon;\n    lats[2] = rect.maxLat;\n    lons[2] = rect.maxLon;\n    lats[3] = rect.minLat;\n    lons[3] = rect.maxLon;\n    lats[4] = rect.minLat;\n    lons[4] = rect.minLon;\n    q1 = newPolygonQuery(\"field\", new Polygon(lats, lons));\n    q2 = newPolygonQuery(\"field\", new Polygon(lats, lons));\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newPolygonQuery(\"field2\", new Polygon(lats, lons))));\n  }\n\n","sourceOld":"  public void testEquals() throws Exception {   \n    Query q1, q2;\n\n    GeoRect rect = randomRect(false);\n\n    q1 = newRectQuery(\"field\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    q2 = newRectQuery(\"field\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newRectQuery(\"field2\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon)));\n\n    double lat = randomLat(false);\n    double lon = randomLon(false);\n    q1 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    q2 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newDistanceQuery(\"field2\", lat, lon, 10000.0)));\n\n    double[] lats = new double[5];\n    double[] lons = new double[5];\n    lats[0] = rect.minLat;\n    lons[0] = rect.minLon;\n    lats[1] = rect.maxLat;\n    lons[1] = rect.minLon;\n    lats[2] = rect.maxLat;\n    lons[2] = rect.maxLon;\n    lats[3] = rect.minLat;\n    lons[3] = rect.maxLon;\n    lats[4] = rect.minLat;\n    lons[4] = rect.minLon;\n    q1 = newPolygonQuery(\"field\", lats, lons);\n    q2 = newPolygonQuery(\"field\", lats, lons);\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newPolygonQuery(\"field2\", lats, lons)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"546f71f5b1e19230d6e7e59f117d08dbcf59fbfe","date":1459623422,"type":3,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#testEquals().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#testEquals().mjava","sourceNew":"  public void testEquals() throws Exception {   \n    Query q1, q2;\n\n    Rectangle rect = randomRect(false);\n\n    q1 = newRectQuery(\"field\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    q2 = newRectQuery(\"field\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newRectQuery(\"field2\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon)));\n\n    double lat = randomLat(false);\n    double lon = randomLon(false);\n    q1 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    q2 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newDistanceQuery(\"field2\", lat, lon, 10000.0)));\n\n    double[] lats = new double[5];\n    double[] lons = new double[5];\n    lats[0] = rect.minLat;\n    lons[0] = rect.minLon;\n    lats[1] = rect.maxLat;\n    lons[1] = rect.minLon;\n    lats[2] = rect.maxLat;\n    lons[2] = rect.maxLon;\n    lats[3] = rect.minLat;\n    lons[3] = rect.maxLon;\n    lats[4] = rect.minLat;\n    lons[4] = rect.minLon;\n    q1 = newPolygonQuery(\"field\", new Polygon(lats, lons));\n    q2 = newPolygonQuery(\"field\", new Polygon(lats, lons));\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newPolygonQuery(\"field2\", new Polygon(lats, lons))));\n  }\n\n","sourceOld":"  public void testEquals() throws Exception {   \n    Query q1, q2;\n\n    GeoRect rect = randomRect(false);\n\n    q1 = newRectQuery(\"field\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    q2 = newRectQuery(\"field\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newRectQuery(\"field2\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon)));\n\n    double lat = randomLat(false);\n    double lon = randomLon(false);\n    q1 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    q2 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newDistanceQuery(\"field2\", lat, lon, 10000.0)));\n\n    double[] lats = new double[5];\n    double[] lons = new double[5];\n    lats[0] = rect.minLat;\n    lons[0] = rect.minLon;\n    lats[1] = rect.maxLat;\n    lons[1] = rect.minLon;\n    lats[2] = rect.maxLat;\n    lons[2] = rect.maxLon;\n    lats[3] = rect.minLat;\n    lons[3] = rect.maxLon;\n    lats[4] = rect.minLat;\n    lons[4] = rect.minLon;\n    q1 = newPolygonQuery(\"field\", new Polygon(lats, lons));\n    q2 = newPolygonQuery(\"field\", new Polygon(lats, lons));\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newPolygonQuery(\"field2\", new Polygon(lats, lons))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"be12adb82269c3fbde9105b6e82c51c3f495295a","date":1460587952,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#testEquals().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#testEquals().mjava","sourceNew":"  public void testEquals() throws Exception {   \n    Query q1, q2;\n\n    Rectangle rect = randomRect(false);\n\n    q1 = newRectQuery(\"field\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    q2 = newRectQuery(\"field\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    assertEquals(q1, q2);\n    // for \"impossible\" ranges LatLonPoint.newBoxQuery will return MatchNoDocsQuery\n    // changing the field is unrelated to that.\n    if (q1 instanceof MatchNoDocsQuery == false) {\n      assertFalse(q1.equals(newRectQuery(\"field2\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon)));\n    }\n\n    double lat = randomLat(false);\n    double lon = randomLon(false);\n    q1 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    q2 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newDistanceQuery(\"field2\", lat, lon, 10000.0)));\n\n    double[] lats = new double[5];\n    double[] lons = new double[5];\n    lats[0] = rect.minLat;\n    lons[0] = rect.minLon;\n    lats[1] = rect.maxLat;\n    lons[1] = rect.minLon;\n    lats[2] = rect.maxLat;\n    lons[2] = rect.maxLon;\n    lats[3] = rect.minLat;\n    lons[3] = rect.maxLon;\n    lats[4] = rect.minLat;\n    lons[4] = rect.minLon;\n    q1 = newPolygonQuery(\"field\", new Polygon(lats, lons));\n    q2 = newPolygonQuery(\"field\", new Polygon(lats, lons));\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newPolygonQuery(\"field2\", new Polygon(lats, lons))));\n  }\n\n","sourceOld":"  public void testEquals() throws Exception {   \n    Query q1, q2;\n\n    Rectangle rect = randomRect(false);\n\n    q1 = newRectQuery(\"field\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    q2 = newRectQuery(\"field\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newRectQuery(\"field2\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon)));\n\n    double lat = randomLat(false);\n    double lon = randomLon(false);\n    q1 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    q2 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newDistanceQuery(\"field2\", lat, lon, 10000.0)));\n\n    double[] lats = new double[5];\n    double[] lons = new double[5];\n    lats[0] = rect.minLat;\n    lons[0] = rect.minLon;\n    lats[1] = rect.maxLat;\n    lons[1] = rect.minLon;\n    lats[2] = rect.maxLat;\n    lons[2] = rect.maxLon;\n    lats[3] = rect.minLat;\n    lons[3] = rect.maxLon;\n    lats[4] = rect.minLat;\n    lons[4] = rect.minLon;\n    q1 = newPolygonQuery(\"field\", new Polygon(lats, lons));\n    q2 = newPolygonQuery(\"field\", new Polygon(lats, lons));\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newPolygonQuery(\"field2\", new Polygon(lats, lons))));\n  }\n\n","bugFix":["d6c59bc551f4e523ce6a321280cc6733424fb824"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e21d7642ee7e0c00429964e5b47504602fe218c","date":1460897579,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#testEquals().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#testEquals().mjava","sourceNew":"  public void testEquals() throws Exception {   \n    Query q1, q2;\n\n    Rectangle rect = randomRect(false);\n\n    q1 = newRectQuery(\"field\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    q2 = newRectQuery(\"field\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    assertEquals(q1, q2);\n    // for \"impossible\" ranges LatLonPoint.newBoxQuery will return MatchNoDocsQuery\n    // changing the field is unrelated to that.\n    if (q1 instanceof MatchNoDocsQuery == false) {\n      assertFalse(q1.equals(newRectQuery(\"field2\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon)));\n    }\n\n    double lat = randomLat(false);\n    double lon = randomLon(false);\n    q1 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    q2 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newDistanceQuery(\"field2\", lat, lon, 10000.0)));\n\n    double[] lats = new double[5];\n    double[] lons = new double[5];\n    lats[0] = rect.minLat;\n    lons[0] = rect.minLon;\n    lats[1] = rect.maxLat;\n    lons[1] = rect.minLon;\n    lats[2] = rect.maxLat;\n    lons[2] = rect.maxLon;\n    lats[3] = rect.minLat;\n    lons[3] = rect.maxLon;\n    lats[4] = rect.minLat;\n    lons[4] = rect.minLon;\n    q1 = newPolygonQuery(\"field\", new Polygon(lats, lons));\n    q2 = newPolygonQuery(\"field\", new Polygon(lats, lons));\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newPolygonQuery(\"field2\", new Polygon(lats, lons))));\n  }\n\n","sourceOld":"  public void testEquals() throws Exception {   \n    Query q1, q2;\n\n    Rectangle rect = randomRect(false);\n\n    q1 = newRectQuery(\"field\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    q2 = newRectQuery(\"field\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    assertEquals(q1, q2);\n    // for \"impossible\" ranges LatLonPoint.newBoxQuery will return MatchNoDocsQuery\n    // changing the field is unrelated to that.\n    if (q1 instanceof MatchNoDocsQuery == false) {\n      assertFalse(q1.equals(newRectQuery(\"field2\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon)));\n    }\n\n    double lat = randomLat(false);\n    double lon = randomLon(false);\n    q1 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    q2 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newDistanceQuery(\"field2\", lat, lon, 10000.0)));\n\n    double[] lats = new double[5];\n    double[] lons = new double[5];\n    lats[0] = rect.minLat;\n    lons[0] = rect.minLon;\n    lats[1] = rect.maxLat;\n    lons[1] = rect.minLon;\n    lats[2] = rect.maxLat;\n    lons[2] = rect.maxLon;\n    lats[3] = rect.minLat;\n    lons[3] = rect.maxLon;\n    lats[4] = rect.minLat;\n    lons[4] = rect.minLon;\n    q1 = newPolygonQuery(\"field\", new Polygon(lats, lons));\n    q2 = newPolygonQuery(\"field\", new Polygon(lats, lons));\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newPolygonQuery(\"field2\", new Polygon(lats, lons))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8cb57c50beb99a1245256e866350af8e5ea1f36","date":1460921840,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#testEquals().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#testEquals().mjava","sourceNew":"  public void testEquals() throws Exception {   \n    Query q1, q2;\n\n    Rectangle rect = randomRect(false);\n\n    q1 = newRectQuery(\"field\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    q2 = newRectQuery(\"field\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    assertEquals(q1, q2);\n    // for \"impossible\" ranges LatLonPoint.newBoxQuery will return MatchNoDocsQuery\n    // changing the field is unrelated to that.\n    if (q1 instanceof MatchNoDocsQuery == false) {\n      assertFalse(q1.equals(newRectQuery(\"field2\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon)));\n    }\n\n    double lat = randomLat(false);\n    double lon = randomLon(false);\n    q1 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    q2 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newDistanceQuery(\"field2\", lat, lon, 10000.0)));\n\n    double[] lats = new double[5];\n    double[] lons = new double[5];\n    lats[0] = rect.minLat;\n    lons[0] = rect.minLon;\n    lats[1] = rect.maxLat;\n    lons[1] = rect.minLon;\n    lats[2] = rect.maxLat;\n    lons[2] = rect.maxLon;\n    lats[3] = rect.minLat;\n    lons[3] = rect.maxLon;\n    lats[4] = rect.minLat;\n    lons[4] = rect.minLon;\n    q1 = newPolygonQuery(\"field\", new Polygon(lats, lons));\n    q2 = newPolygonQuery(\"field\", new Polygon(lats, lons));\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newPolygonQuery(\"field2\", new Polygon(lats, lons))));\n  }\n\n","sourceOld":"  public void testEquals() throws Exception {   \n    Query q1, q2;\n\n    Rectangle rect = randomRect(false);\n\n    q1 = newRectQuery(\"field\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    q2 = newRectQuery(\"field\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    assertEquals(q1, q2);\n    // for \"impossible\" ranges LatLonPoint.newBoxQuery will return MatchNoDocsQuery\n    // changing the field is unrelated to that.\n    if (q1 instanceof MatchNoDocsQuery == false) {\n      assertFalse(q1.equals(newRectQuery(\"field2\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon)));\n    }\n\n    double lat = randomLat(false);\n    double lon = randomLon(false);\n    q1 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    q2 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newDistanceQuery(\"field2\", lat, lon, 10000.0)));\n\n    double[] lats = new double[5];\n    double[] lons = new double[5];\n    lats[0] = rect.minLat;\n    lons[0] = rect.minLon;\n    lats[1] = rect.maxLat;\n    lons[1] = rect.minLon;\n    lats[2] = rect.maxLat;\n    lons[2] = rect.maxLon;\n    lats[3] = rect.minLat;\n    lons[3] = rect.maxLon;\n    lats[4] = rect.minLat;\n    lons[4] = rect.minLon;\n    q1 = newPolygonQuery(\"field\", new Polygon(lats, lons));\n    q2 = newPolygonQuery(\"field\", new Polygon(lats, lons));\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newPolygonQuery(\"field2\", new Polygon(lats, lons))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"be12adb82269c3fbde9105b6e82c51c3f495295a":["546f71f5b1e19230d6e7e59f117d08dbcf59fbfe"],"95ddcac9ac08381985af6eac8f8b77ba881d4ad8":["1419d3974886c9518c259c786492b4d3660b0b8e"],"d2270976e274799939e1b5339eb6c16c7601dfda":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"546f71f5b1e19230d6e7e59f117d08dbcf59fbfe":["95ddcac9ac08381985af6eac8f8b77ba881d4ad8"],"1419d3974886c9518c259c786492b4d3660b0b8e":["f9686ea8f446704d6bb22f2cb00a63aa9ca52400"],"3e21d7642ee7e0c00429964e5b47504602fe218c":["be12adb82269c3fbde9105b6e82c51c3f495295a"],"f9686ea8f446704d6bb22f2cb00a63aa9ca52400":["d6c59bc551f4e523ce6a321280cc6733424fb824"],"f8cb57c50beb99a1245256e866350af8e5ea1f36":["be12adb82269c3fbde9105b6e82c51c3f495295a","3e21d7642ee7e0c00429964e5b47504602fe218c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f8cb57c50beb99a1245256e866350af8e5ea1f36"],"d6c59bc551f4e523ce6a321280cc6733424fb824":["d2270976e274799939e1b5339eb6c16c7601dfda"]},"commit2Childs":{"be12adb82269c3fbde9105b6e82c51c3f495295a":["3e21d7642ee7e0c00429964e5b47504602fe218c","f8cb57c50beb99a1245256e866350af8e5ea1f36"],"95ddcac9ac08381985af6eac8f8b77ba881d4ad8":["546f71f5b1e19230d6e7e59f117d08dbcf59fbfe"],"d2270976e274799939e1b5339eb6c16c7601dfda":["d6c59bc551f4e523ce6a321280cc6733424fb824"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d2270976e274799939e1b5339eb6c16c7601dfda"],"546f71f5b1e19230d6e7e59f117d08dbcf59fbfe":["be12adb82269c3fbde9105b6e82c51c3f495295a"],"1419d3974886c9518c259c786492b4d3660b0b8e":["95ddcac9ac08381985af6eac8f8b77ba881d4ad8"],"3e21d7642ee7e0c00429964e5b47504602fe218c":["f8cb57c50beb99a1245256e866350af8e5ea1f36"],"f9686ea8f446704d6bb22f2cb00a63aa9ca52400":["1419d3974886c9518c259c786492b4d3660b0b8e"],"f8cb57c50beb99a1245256e866350af8e5ea1f36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6c59bc551f4e523ce6a321280cc6733424fb824":["f9686ea8f446704d6bb22f2cb00a63aa9ca52400"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}