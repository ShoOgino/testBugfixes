{"path":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#mergeResponses(ResponseBuilder).mjava","commits":[{"id":"0c197a6fac0ddfa4c18b4683b906f7e31e4c6652","date":1332881914,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#mergeResponses(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  private void mergeResponses(ResponseBuilder rb) {\n    SolrDocumentList docList = new SolrDocumentList();\n    \n    for (ShardRequest sreq : rb.finished) {\n      // if shards=shard1,shard2 was used, then  we query both shards for each id and\n      // can get more than one response\n      for (ShardResponse srsp : sreq.responses) {\n        SolrResponse sr = srsp.getSolrResponse();\n        NamedList nl = sr.getResponse();\n        SolrDocumentList subList = (SolrDocumentList)nl.get(\"response\");\n        docList.addAll(subList);\n      }\n    }\n\n    if (docList.size() <= 1 && rb.req.getParams().getParams(\"ids\")==null) {\n      // if the doc was not found, then use a value of null.\n      rb.rsp.add(\"doc\", docList.size() > 0 ? docList.get(0) : null);\n    } else {\n      docList.setNumFound(docList.size());\n      rb.rsp.add(\"response\", docList);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4c58bab35e821e15dc6b8669d2f15c2e3cc6d9ce"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ecd75942508378ccc92c3a26f71db6cba9f25784","date":1450708761,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#mergeResponses(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#mergeResponses(ResponseBuilder).mjava","sourceNew":"  private void mergeResponses(ResponseBuilder rb) {\n    SolrDocumentList docList = new SolrDocumentList();\n    \n    for (ShardRequest sreq : rb.finished) {\n      // if shards=shard1,shard2 was used, then  we query both shards for each id and\n      // can get more than one response\n      for (ShardResponse srsp : sreq.responses) {\n        SolrResponse sr = srsp.getSolrResponse();\n        NamedList nl = sr.getResponse();\n        SolrDocumentList subList = (SolrDocumentList)nl.get(\"response\");\n        docList.addAll(subList);\n      }\n    }\n\n    if (docList.size() <= 1 && rb.req.getParams().getParams(\"ids\")==null) {\n      // if the doc was not found, then use a value of null.\n      rb.rsp.add(\"doc\", docList.size() > 0 ? docList.get(0) : null);\n    } else {\n      docList.setNumFound(docList.size());\n      rb.rsp.addResponse(docList);\n    }\n  }\n\n","sourceOld":"  private void mergeResponses(ResponseBuilder rb) {\n    SolrDocumentList docList = new SolrDocumentList();\n    \n    for (ShardRequest sreq : rb.finished) {\n      // if shards=shard1,shard2 was used, then  we query both shards for each id and\n      // can get more than one response\n      for (ShardResponse srsp : sreq.responses) {\n        SolrResponse sr = srsp.getSolrResponse();\n        NamedList nl = sr.getResponse();\n        SolrDocumentList subList = (SolrDocumentList)nl.get(\"response\");\n        docList.addAll(subList);\n      }\n    }\n\n    if (docList.size() <= 1 && rb.req.getParams().getParams(\"ids\")==null) {\n      // if the doc was not found, then use a value of null.\n      rb.rsp.add(\"doc\", docList.size() > 0 ? docList.get(0) : null);\n    } else {\n      docList.setNumFound(docList.size());\n      rb.rsp.add(\"response\", docList);\n    }\n  }\n\n","bugFix":null,"bugIntro":["4c58bab35e821e15dc6b8669d2f15c2e3cc6d9ce"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4c58bab35e821e15dc6b8669d2f15c2e3cc6d9ce","date":1468951909,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#mergeResponses(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#mergeResponses(ResponseBuilder).mjava","sourceNew":"  private void mergeResponses(ResponseBuilder rb) {\n    SolrDocumentList docList = new SolrDocumentList();\n    \n    for (ShardRequest sreq : rb.finished) {\n      // if shards=shard1,shard2 was used, then  we query both shards for each id and\n      // can get more than one response\n      for (ShardResponse srsp : sreq.responses) {\n        SolrResponse sr = srsp.getSolrResponse();\n        NamedList nl = sr.getResponse();\n        SolrDocumentList subList = (SolrDocumentList)nl.get(\"response\");\n        docList.addAll(subList);\n      }\n    }\n    \n    addDocListToResponse(rb, docList);\n  }\n\n","sourceOld":"  private void mergeResponses(ResponseBuilder rb) {\n    SolrDocumentList docList = new SolrDocumentList();\n    \n    for (ShardRequest sreq : rb.finished) {\n      // if shards=shard1,shard2 was used, then  we query both shards for each id and\n      // can get more than one response\n      for (ShardResponse srsp : sreq.responses) {\n        SolrResponse sr = srsp.getSolrResponse();\n        NamedList nl = sr.getResponse();\n        SolrDocumentList subList = (SolrDocumentList)nl.get(\"response\");\n        docList.addAll(subList);\n      }\n    }\n\n    if (docList.size() <= 1 && rb.req.getParams().getParams(\"ids\")==null) {\n      // if the doc was not found, then use a value of null.\n      rb.rsp.add(\"doc\", docList.size() > 0 ? docList.get(0) : null);\n    } else {\n      docList.setNumFound(docList.size());\n      rb.rsp.addResponse(docList);\n    }\n  }\n\n","bugFix":["0c197a6fac0ddfa4c18b4683b906f7e31e4c6652","ecd75942508378ccc92c3a26f71db6cba9f25784"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#mergeResponses(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#mergeResponses(ResponseBuilder).mjava","sourceNew":"  private void mergeResponses(ResponseBuilder rb) {\n    SolrDocumentList docList = new SolrDocumentList();\n    \n    for (ShardRequest sreq : rb.finished) {\n      // if shards=shard1,shard2 was used, then  we query both shards for each id and\n      // can get more than one response\n      for (ShardResponse srsp : sreq.responses) {\n        SolrResponse sr = srsp.getSolrResponse();\n        NamedList nl = sr.getResponse();\n        SolrDocumentList subList = (SolrDocumentList)nl.get(\"response\");\n        docList.addAll(subList);\n      }\n    }\n    \n    addDocListToResponse(rb, docList);\n  }\n\n","sourceOld":"  private void mergeResponses(ResponseBuilder rb) {\n    SolrDocumentList docList = new SolrDocumentList();\n    \n    for (ShardRequest sreq : rb.finished) {\n      // if shards=shard1,shard2 was used, then  we query both shards for each id and\n      // can get more than one response\n      for (ShardResponse srsp : sreq.responses) {\n        SolrResponse sr = srsp.getSolrResponse();\n        NamedList nl = sr.getResponse();\n        SolrDocumentList subList = (SolrDocumentList)nl.get(\"response\");\n        docList.addAll(subList);\n      }\n    }\n\n    if (docList.size() <= 1 && rb.req.getParams().getParams(\"ids\")==null) {\n      // if the doc was not found, then use a value of null.\n      rb.rsp.add(\"doc\", docList.size() > 0 ? docList.get(0) : null);\n    } else {\n      docList.setNumFound(docList.size());\n      rb.rsp.addResponse(docList);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8582f07e9350eaeb33bf6c4617b8c9895d99c839","date":1591307386,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#mergeResponses(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#mergeResponses(ResponseBuilder).mjava","sourceNew":"  private void mergeResponses(ResponseBuilder rb) {\n    SolrDocumentList docList = new SolrDocumentList();\n    \n    for (ShardRequest sreq : rb.finished) {\n      // if shards=shard1,shard2 was used, then  we query both shards for each id and\n      // can get more than one response\n      for (ShardResponse srsp : sreq.responses) {\n        SolrResponse sr = srsp.getSolrResponse();\n        @SuppressWarnings({\"rawtypes\"})\n        NamedList nl = sr.getResponse();\n        SolrDocumentList subList = (SolrDocumentList)nl.get(\"response\");\n        docList.addAll(subList);\n      }\n    }\n    \n    addDocListToResponse(rb, docList);\n  }\n\n","sourceOld":"  private void mergeResponses(ResponseBuilder rb) {\n    SolrDocumentList docList = new SolrDocumentList();\n    \n    for (ShardRequest sreq : rb.finished) {\n      // if shards=shard1,shard2 was used, then  we query both shards for each id and\n      // can get more than one response\n      for (ShardResponse srsp : sreq.responses) {\n        SolrResponse sr = srsp.getSolrResponse();\n        NamedList nl = sr.getResponse();\n        SolrDocumentList subList = (SolrDocumentList)nl.get(\"response\");\n        docList.addAll(subList);\n      }\n    }\n    \n    addDocListToResponse(rb, docList);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0c197a6fac0ddfa4c18b4683b906f7e31e4c6652":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ecd75942508378ccc92c3a26f71db6cba9f25784":["0c197a6fac0ddfa4c18b4683b906f7e31e4c6652"],"4c58bab35e821e15dc6b8669d2f15c2e3cc6d9ce":["ecd75942508378ccc92c3a26f71db6cba9f25784"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["ecd75942508378ccc92c3a26f71db6cba9f25784","4c58bab35e821e15dc6b8669d2f15c2e3cc6d9ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["4c58bab35e821e15dc6b8669d2f15c2e3cc6d9ce"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0c197a6fac0ddfa4c18b4683b906f7e31e4c6652"],"0c197a6fac0ddfa4c18b4683b906f7e31e4c6652":["ecd75942508378ccc92c3a26f71db6cba9f25784"],"ecd75942508378ccc92c3a26f71db6cba9f25784":["4c58bab35e821e15dc6b8669d2f15c2e3cc6d9ce","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4c58bab35e821e15dc6b8669d2f15c2e3cc6d9ce":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}