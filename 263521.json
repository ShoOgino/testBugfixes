{"path":"client/java/solrj/src/org/apache/solr/client/solrj/response/SpellCheckResponse#SpellCheckResponse(NamedList[Object]).mjava","commits":[{"id":"7b58c10d3071acfc0277e964ed8714e9746b4206","date":1219166991,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/response/SpellCheckResponse#SpellCheckResponse(NamedList[Object]).mjava","pathOld":"/dev/null","sourceNew":"  public SpellCheckResponse(NamedList<Object> spellInfo) {\n    NamedList<Object> sugg = (NamedList<Object>) spellInfo.get(\"suggestions\");\n    if (sugg == null) {\n      correctlySpelled = true;\n      return;\n    }\n    for (int i = 0; i < sugg.size(); i++) {\n      String n = sugg.getName(i);\n      if (\"correctlySpelled\".equals(n)) {\n        correctlySpelled = (Boolean) sugg.getVal(i);\n      } else if (\"collation\".equals(n)) {\n        collation = (String) sugg.getVal(i);\n      } else {\n        Suggestion s = new Suggestion(n, (NamedList<Object>) sugg.getVal(i));\n        suggestionMap.put(n, s);\n        suggestions.add(s);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/solrj/org/apache/solr/client/solrj/response/SpellCheckResponse#SpellCheckResponse(NamedList[Object]).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/response/SpellCheckResponse#SpellCheckResponse(NamedList[Object]).mjava","sourceNew":"  public SpellCheckResponse(NamedList<Object> spellInfo) {\n    NamedList<Object> sugg = (NamedList<Object>) spellInfo.get(\"suggestions\");\n    if (sugg == null) {\n      correctlySpelled = true;\n      return;\n    }\n    for (int i = 0; i < sugg.size(); i++) {\n      String n = sugg.getName(i);\n      if (\"correctlySpelled\".equals(n)) {\n        correctlySpelled = (Boolean) sugg.getVal(i);\n      } else if (\"collation\".equals(n)) {\n        collation = (String) sugg.getVal(i);\n      } else {\n        Suggestion s = new Suggestion(n, (NamedList<Object>) sugg.getVal(i));\n        suggestionMap.put(n, s);\n        suggestions.add(s);\n      }\n    }\n  }\n\n","sourceOld":"  public SpellCheckResponse(NamedList<Object> spellInfo) {\n    NamedList<Object> sugg = (NamedList<Object>) spellInfo.get(\"suggestions\");\n    if (sugg == null) {\n      correctlySpelled = true;\n      return;\n    }\n    for (int i = 0; i < sugg.size(); i++) {\n      String n = sugg.getName(i);\n      if (\"correctlySpelled\".equals(n)) {\n        correctlySpelled = (Boolean) sugg.getVal(i);\n      } else if (\"collation\".equals(n)) {\n        collation = (String) sugg.getVal(i);\n      } else {\n        Suggestion s = new Suggestion(n, (NamedList<Object>) sugg.getVal(i));\n        suggestionMap.put(n, s);\n        suggestions.add(s);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["7b58c10d3071acfc0277e964ed8714e9746b4206"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"7b58c10d3071acfc0277e964ed8714e9746b4206":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["7b58c10d3071acfc0277e964ed8714e9746b4206"],"7b58c10d3071acfc0277e964ed8714e9746b4206":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e3602d5eab954caecc726ab136ad580ac1ceb917","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}