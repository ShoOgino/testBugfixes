{"path":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#updateDocument(Term,Document,Analyzer).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#updateDocument(Term,Document,Analyzer).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#updateDocument(Term,Document,Analyzer).mjava","sourceNew":"  boolean updateDocument(Term t, Document doc, Analyzer analyzer)\n    throws CorruptIndexException, IOException {\n    return updateDocument(doc, analyzer, t);\n  }\n\n","sourceOld":"  boolean updateDocument(Term t, Document doc, Analyzer analyzer)\n    throws CorruptIndexException, IOException {\n    return updateDocument(doc, analyzer, t);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b832cbed6eb3d54a8bb9339296bdda8eeb53014","date":1279708040,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#updateDocument(Term,Document,Analyzer).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#updateDocument(Term,Document,Analyzer).mjava","sourceNew":"  long updateDocument(final Term delTerm, final Document doc, final Analyzer analyzer)\n      throws CorruptIndexException, IOException {\n\n    return threadPool.executePerThread(this, doc,\n        new DocumentsWriterThreadPool.PerThreadTask<Long>() {\n          @Override\n          public Long process(final DocumentsWriterPerThread perThread) throws IOException {\n            long perThreadRAMUsedBeforeAdd = perThread.numBytesUsed;\n            perThread.addDocument(doc, analyzer);\n\n            final long sequenceID;\n            sequenceIDLock.lock();\n            try {\n              ensureOpen();\n              sequenceID = nextSequenceID();\n              if (delTerm != null) {\n                deletesInRAM.addDeleteTerm(delTerm, sequenceID, numDocumentsWriterPerThreads);\n              }\n              perThread.commitDocument(sequenceID);\n              if (!minSequenceIDsPerThread.containsKey(perThread)) {\n                minSequenceIDsPerThread.put(perThread, sequenceID);\n              }\n              numDocsInRAM.incrementAndGet();\n            } finally {\n              sequenceIDLock.unlock();\n            }\n\n            if (finishAddDocument(perThread, perThreadRAMUsedBeforeAdd)) {\n              super.clearThreadBindings();\n              indexWriter.maybeMerge();\n            }\n            return sequenceID;\n          }\n        });\n  }\n\n","sourceOld":"  boolean updateDocument(Term t, Document doc, Analyzer analyzer)\n    throws CorruptIndexException, IOException {\n    return updateDocument(doc, analyzer, t);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"334c1175813aea771a71728cd2c4ee4754fd0603","date":1279710173,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#updateDocument(Term,Document,Analyzer).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#updateDocument(Term,Document,Analyzer).mjava","sourceNew":"  boolean updateDocument(Term t, Document doc, Analyzer analyzer)\n    throws CorruptIndexException, IOException {\n    return updateDocument(doc, analyzer, t);\n  }\n\n","sourceOld":"  long updateDocument(final Term delTerm, final Document doc, final Analyzer analyzer)\n      throws CorruptIndexException, IOException {\n\n    return threadPool.executePerThread(this, doc,\n        new DocumentsWriterThreadPool.PerThreadTask<Long>() {\n          @Override\n          public Long process(final DocumentsWriterPerThread perThread) throws IOException {\n            long perThreadRAMUsedBeforeAdd = perThread.numBytesUsed;\n            perThread.addDocument(doc, analyzer);\n\n            final long sequenceID;\n            sequenceIDLock.lock();\n            try {\n              ensureOpen();\n              sequenceID = nextSequenceID();\n              if (delTerm != null) {\n                deletesInRAM.addDeleteTerm(delTerm, sequenceID, numDocumentsWriterPerThreads);\n              }\n              perThread.commitDocument(sequenceID);\n              if (!minSequenceIDsPerThread.containsKey(perThread)) {\n                minSequenceIDsPerThread.put(perThread, sequenceID);\n              }\n              numDocsInRAM.incrementAndGet();\n            } finally {\n              sequenceIDLock.unlock();\n            }\n\n            if (finishAddDocument(perThread, perThreadRAMUsedBeforeAdd)) {\n              super.clearThreadBindings();\n              indexWriter.maybeMerge();\n            }\n            return sequenceID;\n          }\n        });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fe956d65251358d755c56f14fe8380644790e47","date":1279711318,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#updateDocument(Term,Document,Analyzer).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#updateDocument(Term,Document,Analyzer).mjava","sourceNew":"  long updateDocument(final Term delTerm, final Document doc, final Analyzer analyzer)\n      throws CorruptIndexException, IOException {\n\n    return threadPool.executePerThread(this, doc,\n        new DocumentsWriterThreadPool.PerThreadTask<Long>() {\n          @Override\n          public Long process(final DocumentsWriterPerThread perThread) throws IOException {\n            long perThreadRAMUsedBeforeAdd = perThread.numBytesUsed;\n            perThread.addDocument(doc, analyzer);\n\n            final long sequenceID;\n            sequenceIDLock.lock();\n            try {\n              ensureOpen();\n              sequenceID = nextSequenceID();\n              if (delTerm != null) {\n                deletesInRAM.addDeleteTerm(delTerm, sequenceID, numDocumentsWriterPerThreads);\n              }\n              perThread.commitDocument(sequenceID);\n              if (!minSequenceIDsPerThread.containsKey(perThread)) {\n                minSequenceIDsPerThread.put(perThread, sequenceID);\n              }\n              numDocsInRAM.incrementAndGet();\n            } finally {\n              sequenceIDLock.unlock();\n            }\n\n            if (finishAddDocument(perThread, perThreadRAMUsedBeforeAdd)) {\n              super.clearThreadBindings();\n              indexWriter.maybeMerge();\n            }\n            return sequenceID;\n          }\n        });\n  }\n\n","sourceOld":"  boolean updateDocument(Term t, Document doc, Analyzer analyzer)\n    throws CorruptIndexException, IOException {\n    return updateDocument(doc, analyzer, t);\n  }\n\n","bugFix":null,"bugIntro":["5ef87af8c7bd0f8429622b83aa74202383f2e757"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"833a7987bc1c94455fde83e3311f72bddedcfb93","date":1279951470,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#updateDocument(Term,Document,Analyzer).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#updateDocument(Term,Document,Analyzer).mjava","sourceNew":"  long updateDocument(final Term delTerm, final Document doc, final Analyzer analyzer)\n      throws CorruptIndexException, IOException {\n\n    long seqID = threadPool.executePerThread(this, doc,\n        new DocumentsWriterThreadPool.PerThreadTask<Long>() {\n          @Override\n          public Long process(final DocumentsWriterPerThread perThread) throws IOException {\n            long perThreadRAMUsedBeforeAdd = perThread.numBytesUsed;\n            perThread.addDocument(doc, analyzer);\n\n            final long sequenceID;\n            sequenceIDLock.lock();\n            try {\n              ensureOpen();\n              sequenceID = nextSequenceID();\n              if (delTerm != null) {\n                deletesInRAM.addDeleteTerm(delTerm, sequenceID, numDocumentsWriterPerThreads);\n              }\n              perThread.commitDocument(sequenceID);\n              if (!minSequenceIDsPerThread.containsKey(perThread)) {\n                minSequenceIDsPerThread.put(perThread, sequenceID);\n              }\n              numDocsInRAM.incrementAndGet();\n            } finally {\n              sequenceIDLock.unlock();\n            }\n\n            if (finishAddDocument(perThread, perThreadRAMUsedBeforeAdd)) {\n              super.clearThreadBindings();\n            }\n            return sequenceID;\n          }\n        });\n    \n    indexWriter.maybeMerge();\n    \n    return seqID;\n  }\n\n","sourceOld":"  long updateDocument(final Term delTerm, final Document doc, final Analyzer analyzer)\n      throws CorruptIndexException, IOException {\n\n    return threadPool.executePerThread(this, doc,\n        new DocumentsWriterThreadPool.PerThreadTask<Long>() {\n          @Override\n          public Long process(final DocumentsWriterPerThread perThread) throws IOException {\n            long perThreadRAMUsedBeforeAdd = perThread.numBytesUsed;\n            perThread.addDocument(doc, analyzer);\n\n            final long sequenceID;\n            sequenceIDLock.lock();\n            try {\n              ensureOpen();\n              sequenceID = nextSequenceID();\n              if (delTerm != null) {\n                deletesInRAM.addDeleteTerm(delTerm, sequenceID, numDocumentsWriterPerThreads);\n              }\n              perThread.commitDocument(sequenceID);\n              if (!minSequenceIDsPerThread.containsKey(perThread)) {\n                minSequenceIDsPerThread.put(perThread, sequenceID);\n              }\n              numDocsInRAM.incrementAndGet();\n            } finally {\n              sequenceIDLock.unlock();\n            }\n\n            if (finishAddDocument(perThread, perThreadRAMUsedBeforeAdd)) {\n              super.clearThreadBindings();\n              indexWriter.maybeMerge();\n            }\n            return sequenceID;\n          }\n        });\n  }\n\n","bugFix":null,"bugIntro":["5ef87af8c7bd0f8429622b83aa74202383f2e757"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ef87af8c7bd0f8429622b83aa74202383f2e757","date":1280262785,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#updateDocument(Term,Document,Analyzer).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#updateDocument(Term,Document,Analyzer).mjava","sourceNew":"  long updateDocument(final Term delTerm, final Document doc, final Analyzer analyzer)\n      throws CorruptIndexException, IOException {\n\n    UpdateResult result = threadPool.executePerThread(this, doc,\n        new DocumentsWriterThreadPool.PerThreadTask<UpdateResult>() {\n          @Override\n          public UpdateResult process(final DocumentsWriterPerThread perThread) throws IOException {\n            long perThreadRAMUsedBeforeAdd = perThread.numBytesUsed;\n            perThread.addDocument(doc, analyzer);\n\n            final long sequenceID;\n            sequenceIDLock.lock();\n            try {\n              ensureOpen();\n              sequenceID = nextSequenceID();\n              if (delTerm != null) {\n                deletesInRAM.addDeleteTerm(delTerm, sequenceID, numDocumentsWriterPerThreads);\n              }\n              perThread.commitDocument(sequenceID);\n              if (!minSequenceIDsPerThread.containsKey(perThread)) {\n                minSequenceIDsPerThread.put(perThread, sequenceID);\n              }\n              numDocsInRAM.incrementAndGet();\n            } finally {\n              sequenceIDLock.unlock();\n            }\n\n            UpdateResult result = new UpdateResult(sequenceID);\n            if (finishAddDocument(perThread, perThreadRAMUsedBeforeAdd)) {\n              result.flushed = true;\n              super.clearThreadBindings();\n            }\n            return result;\n          }\n        });\n        \n    if (result == null) {\n      return -1;\n    }\n    \n    if (result.flushed) {\n      indexWriter.maybeMerge();\n    }\n    return result.sequenceID;\n  }\n\n","sourceOld":"  long updateDocument(final Term delTerm, final Document doc, final Analyzer analyzer)\n      throws CorruptIndexException, IOException {\n\n    long seqID = threadPool.executePerThread(this, doc,\n        new DocumentsWriterThreadPool.PerThreadTask<Long>() {\n          @Override\n          public Long process(final DocumentsWriterPerThread perThread) throws IOException {\n            long perThreadRAMUsedBeforeAdd = perThread.numBytesUsed;\n            perThread.addDocument(doc, analyzer);\n\n            final long sequenceID;\n            sequenceIDLock.lock();\n            try {\n              ensureOpen();\n              sequenceID = nextSequenceID();\n              if (delTerm != null) {\n                deletesInRAM.addDeleteTerm(delTerm, sequenceID, numDocumentsWriterPerThreads);\n              }\n              perThread.commitDocument(sequenceID);\n              if (!minSequenceIDsPerThread.containsKey(perThread)) {\n                minSequenceIDsPerThread.put(perThread, sequenceID);\n              }\n              numDocsInRAM.incrementAndGet();\n            } finally {\n              sequenceIDLock.unlock();\n            }\n\n            if (finishAddDocument(perThread, perThreadRAMUsedBeforeAdd)) {\n              super.clearThreadBindings();\n            }\n            return sequenceID;\n          }\n        });\n    \n    indexWriter.maybeMerge();\n    \n    return seqID;\n  }\n\n","bugFix":["833a7987bc1c94455fde83e3311f72bddedcfb93","8fe956d65251358d755c56f14fe8380644790e47"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44fcbde6fb2ac44ee3b45e013e54a42911e689ff","date":1292065621,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#updateDocument(Term,Document,Analyzer).mjava","sourceNew":null,"sourceOld":"  boolean updateDocument(Term t, Document doc, Analyzer analyzer)\n    throws CorruptIndexException, IOException {\n    return updateDocument(doc, analyzer, t);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#updateDocument(Term,Document,Analyzer).mjava","sourceNew":null,"sourceOld":"  boolean updateDocument(Term t, Document doc, Analyzer analyzer)\n    throws CorruptIndexException, IOException {\n    return updateDocument(doc, analyzer, t);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#updateDocument(Term,Document,Analyzer).mjava","sourceNew":null,"sourceOld":"  long updateDocument(final Term delTerm, final Document doc, final Analyzer analyzer)\n      throws CorruptIndexException, IOException {\n\n    UpdateResult result = threadPool.executePerThread(this, doc,\n        new DocumentsWriterThreadPool.PerThreadTask<UpdateResult>() {\n          @Override\n          public UpdateResult process(final DocumentsWriterPerThread perThread) throws IOException {\n            long perThreadRAMUsedBeforeAdd = perThread.numBytesUsed;\n            perThread.addDocument(doc, analyzer);\n\n            final long sequenceID;\n            sequenceIDLock.lock();\n            try {\n              ensureOpen();\n              sequenceID = nextSequenceID();\n              if (delTerm != null) {\n                deletesInRAM.addDeleteTerm(delTerm, sequenceID, numDocumentsWriterPerThreads);\n              }\n              perThread.commitDocument(sequenceID);\n              if (!minSequenceIDsPerThread.containsKey(perThread)) {\n                minSequenceIDsPerThread.put(perThread, sequenceID);\n              }\n              numDocsInRAM.incrementAndGet();\n            } finally {\n              sequenceIDLock.unlock();\n            }\n\n            UpdateResult result = new UpdateResult(sequenceID);\n            if (finishAddDocument(perThread, perThreadRAMUsedBeforeAdd)) {\n              result.flushed = true;\n              super.clearThreadBindings();\n            }\n            return result;\n          }\n        });\n        \n    if (result == null) {\n      return -1;\n    }\n    \n    if (result.flushed) {\n      indexWriter.maybeMerge();\n    }\n    return result.sequenceID;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["334c1175813aea771a71728cd2c4ee4754fd0603"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8fe956d65251358d755c56f14fe8380644790e47":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5ef87af8c7bd0f8429622b83aa74202383f2e757":["833a7987bc1c94455fde83e3311f72bddedcfb93"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["334c1175813aea771a71728cd2c4ee4754fd0603","44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"334c1175813aea771a71728cd2c4ee4754fd0603":["9b832cbed6eb3d54a8bb9339296bdda8eeb53014"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5ef87af8c7bd0f8429622b83aa74202383f2e757","44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"9b832cbed6eb3d54a8bb9339296bdda8eeb53014":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"833a7987bc1c94455fde83e3311f72bddedcfb93":["8fe956d65251358d755c56f14fe8380644790e47"]},"commit2Childs":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8fe956d65251358d755c56f14fe8380644790e47":["833a7987bc1c94455fde83e3311f72bddedcfb93"],"5ef87af8c7bd0f8429622b83aa74202383f2e757":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":[],"334c1175813aea771a71728cd2c4ee4754fd0603":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9b832cbed6eb3d54a8bb9339296bdda8eeb53014":["334c1175813aea771a71728cd2c4ee4754fd0603"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8fe956d65251358d755c56f14fe8380644790e47","9b832cbed6eb3d54a8bb9339296bdda8eeb53014"],"833a7987bc1c94455fde83e3311f72bddedcfb93":["5ef87af8c7bd0f8429622b83aa74202383f2e757"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}