{"path":"solr/core/src/test/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,String,String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,String,String).mjava","pathOld":"solr/src/test/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,String,String).mjava","sourceNew":"  // static to share with distrib test\n  static void buildZooKeeper(String zkHost, String zkAddress, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\");\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    ZkNodeProps props = new ZkNodeProps();\n    props.put(\"configName\", \"conf1\");\n    zkClient.makePath(\"/collections/collection1\", props.store(), CreateMode.PERSISTENT);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT);\n\n    zkClient.makePath(\"/collections/control_collection\", props.store(), CreateMode.PERSISTENT);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT);\n\n    putConfig(zkClient, config);\n    putConfig(zkClient, schema);\n    putConfig(zkClient, \"stopwords.txt\");\n    putConfig(zkClient, \"protwords.txt\");\n    putConfig(zkClient, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(zkClient, \"old_synonyms.txt\");\n    putConfig(zkClient, \"synonyms.txt\");\n    \n    zkClient.close();\n  }\n\n","sourceOld":"  // static to share with distrib test\n  static void buildZooKeeper(String zkHost, String zkAddress, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\");\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    ZkNodeProps props = new ZkNodeProps();\n    props.put(\"configName\", \"conf1\");\n    zkClient.makePath(\"/collections/collection1\", props.store(), CreateMode.PERSISTENT);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT);\n\n    zkClient.makePath(\"/collections/control_collection\", props.store(), CreateMode.PERSISTENT);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT);\n\n    putConfig(zkClient, config);\n    putConfig(zkClient, schema);\n    putConfig(zkClient, \"stopwords.txt\");\n    putConfig(zkClient, \"protwords.txt\");\n    putConfig(zkClient, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(zkClient, \"old_synonyms.txt\");\n    putConfig(zkClient, \"synonyms.txt\");\n    \n    zkClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,String,String).mjava","pathOld":"solr/src/test/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,String,String).mjava","sourceNew":"  // static to share with distrib test\n  static void buildZooKeeper(String zkHost, String zkAddress, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\");\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    ZkNodeProps props = new ZkNodeProps();\n    props.put(\"configName\", \"conf1\");\n    zkClient.makePath(\"/collections/collection1\", props.store(), CreateMode.PERSISTENT);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT);\n\n    zkClient.makePath(\"/collections/control_collection\", props.store(), CreateMode.PERSISTENT);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT);\n\n    putConfig(zkClient, config);\n    putConfig(zkClient, schema);\n    putConfig(zkClient, \"stopwords.txt\");\n    putConfig(zkClient, \"protwords.txt\");\n    putConfig(zkClient, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(zkClient, \"old_synonyms.txt\");\n    putConfig(zkClient, \"synonyms.txt\");\n    \n    zkClient.close();\n  }\n\n","sourceOld":"  // static to share with distrib test\n  static void buildZooKeeper(String zkHost, String zkAddress, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\");\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    ZkNodeProps props = new ZkNodeProps();\n    props.put(\"configName\", \"conf1\");\n    zkClient.makePath(\"/collections/collection1\", props.store(), CreateMode.PERSISTENT);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT);\n\n    zkClient.makePath(\"/collections/control_collection\", props.store(), CreateMode.PERSISTENT);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT);\n\n    putConfig(zkClient, config);\n    putConfig(zkClient, schema);\n    putConfig(zkClient, \"stopwords.txt\");\n    putConfig(zkClient, \"protwords.txt\");\n    putConfig(zkClient, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(zkClient, \"old_synonyms.txt\");\n    putConfig(zkClient, \"synonyms.txt\");\n    \n    zkClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,String,String).mjava","pathOld":"solr/src/test/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,String,String).mjava","sourceNew":"  // static to share with distrib test\n  static void buildZooKeeper(String zkHost, String zkAddress, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\");\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    ZkNodeProps props = new ZkNodeProps();\n    props.put(\"configName\", \"conf1\");\n    zkClient.makePath(\"/collections/collection1\", props.store(), CreateMode.PERSISTENT);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT);\n\n    zkClient.makePath(\"/collections/control_collection\", props.store(), CreateMode.PERSISTENT);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT);\n\n    putConfig(zkClient, config);\n    putConfig(zkClient, schema);\n    putConfig(zkClient, \"stopwords.txt\");\n    putConfig(zkClient, \"protwords.txt\");\n    putConfig(zkClient, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(zkClient, \"old_synonyms.txt\");\n    putConfig(zkClient, \"synonyms.txt\");\n    \n    zkClient.close();\n  }\n\n","sourceOld":"  // static to share with distrib test\n  static void buildZooKeeper(String zkHost, String zkAddress, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\");\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    ZkNodeProps props = new ZkNodeProps();\n    props.put(\"configName\", \"conf1\");\n    zkClient.makePath(\"/collections/collection1\", props.store(), CreateMode.PERSISTENT);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT);\n\n    zkClient.makePath(\"/collections/control_collection\", props.store(), CreateMode.PERSISTENT);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT);\n\n    putConfig(zkClient, config);\n    putConfig(zkClient, schema);\n    putConfig(zkClient, \"stopwords.txt\");\n    putConfig(zkClient, \"protwords.txt\");\n    putConfig(zkClient, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(zkClient, \"old_synonyms.txt\");\n    putConfig(zkClient, \"synonyms.txt\");\n    \n    zkClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,String,String).mjava","sourceNew":"  // static to share with distrib test\n  static void buildZooKeeper(String zkHost, String zkAddress, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    Map<String,String> props = new HashMap<String,String>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n    \n    zkClient.makePath(\"/collections/collection1\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT, true);\n\n    putConfig(zkClient, config);\n    putConfig(zkClient, schema);\n    putConfig(zkClient, \"solrconfig.xml\");\n    putConfig(zkClient, \"stopwords.txt\");\n    putConfig(zkClient, \"protwords.txt\");\n    putConfig(zkClient, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(zkClient, \"old_synonyms.txt\");\n    putConfig(zkClient, \"synonyms.txt\");\n    \n    zkClient.close();\n  }\n\n","sourceOld":"  // static to share with distrib test\n  static void buildZooKeeper(String zkHost, String zkAddress, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\");\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    ZkNodeProps props = new ZkNodeProps();\n    props.put(\"configName\", \"conf1\");\n    zkClient.makePath(\"/collections/collection1\", props.store(), CreateMode.PERSISTENT);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT);\n\n    zkClient.makePath(\"/collections/control_collection\", props.store(), CreateMode.PERSISTENT);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT);\n\n    putConfig(zkClient, config);\n    putConfig(zkClient, schema);\n    putConfig(zkClient, \"stopwords.txt\");\n    putConfig(zkClient, \"protwords.txt\");\n    putConfig(zkClient, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(zkClient, \"old_synonyms.txt\");\n    putConfig(zkClient, \"synonyms.txt\");\n    \n    zkClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,String,String).mjava","sourceNew":"  // static to share with distrib test\n  static void buildZooKeeper(String zkHost, String zkAddress, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    Map<String,String> props = new HashMap<String,String>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n    \n    zkClient.makePath(\"/collections/collection1\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT, true);\n\n    putConfig(zkClient, config);\n    putConfig(zkClient, schema);\n    putConfig(zkClient, \"solrconfig.xml\");\n    putConfig(zkClient, \"stopwords.txt\");\n    putConfig(zkClient, \"protwords.txt\");\n    putConfig(zkClient, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(zkClient, \"old_synonyms.txt\");\n    putConfig(zkClient, \"synonyms.txt\");\n    \n    zkClient.close();\n  }\n\n","sourceOld":"  // static to share with distrib test\n  static void buildZooKeeper(String zkHost, String zkAddress, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\");\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    ZkNodeProps props = new ZkNodeProps();\n    props.put(\"configName\", \"conf1\");\n    zkClient.makePath(\"/collections/collection1\", props.store(), CreateMode.PERSISTENT);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT);\n\n    zkClient.makePath(\"/collections/control_collection\", props.store(), CreateMode.PERSISTENT);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT);\n\n    putConfig(zkClient, config);\n    putConfig(zkClient, schema);\n    putConfig(zkClient, \"stopwords.txt\");\n    putConfig(zkClient, \"protwords.txt\");\n    putConfig(zkClient, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(zkClient, \"old_synonyms.txt\");\n    putConfig(zkClient, \"synonyms.txt\");\n    \n    zkClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,String,String).mjava","sourceNew":"  // static to share with distrib test\n  static void buildZooKeeper(String zkHost, String zkAddress, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    Map<String,String> props = new HashMap<String,String>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n    \n    zkClient.makePath(\"/collections/collection1\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT, true);\n\n    putConfig(zkClient, config);\n    putConfig(zkClient, schema);\n    putConfig(zkClient, \"solrconfig.xml\");\n    putConfig(zkClient, \"stopwords.txt\");\n    putConfig(zkClient, \"protwords.txt\");\n    putConfig(zkClient, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(zkClient, \"old_synonyms.txt\");\n    putConfig(zkClient, \"synonyms.txt\");\n    \n    zkClient.close();\n  }\n\n","sourceOld":"  // static to share with distrib test\n  static void buildZooKeeper(String zkHost, String zkAddress, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\");\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    ZkNodeProps props = new ZkNodeProps();\n    props.put(\"configName\", \"conf1\");\n    zkClient.makePath(\"/collections/collection1\", props.store(), CreateMode.PERSISTENT);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT);\n\n    zkClient.makePath(\"/collections/control_collection\", props.store(), CreateMode.PERSISTENT);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT);\n\n    putConfig(zkClient, config);\n    putConfig(zkClient, schema);\n    putConfig(zkClient, \"stopwords.txt\");\n    putConfig(zkClient, \"protwords.txt\");\n    putConfig(zkClient, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(zkClient, \"old_synonyms.txt\");\n    putConfig(zkClient, \"synonyms.txt\");\n    \n    zkClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2635332d49f7c5a0b484950462a01775512628e","date":1331332806,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,String,String).mjava","sourceNew":"  // static to share with distrib test\n  static void buildZooKeeper(String zkHost, String zkAddress, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    Map<String,String> props = new HashMap<String,String>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n    \n    zkClient.makePath(\"/collections/collection1\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT, true);\n\n    putConfig(zkClient, config);\n    putConfig(zkClient, schema);\n    putConfig(zkClient, \"solrconfig.xml\");\n    putConfig(zkClient, \"stopwords.txt\");\n    putConfig(zkClient, \"protwords.txt\");\n    putConfig(zkClient, \"currency.xml\");\n    putConfig(zkClient, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(zkClient, \"old_synonyms.txt\");\n    putConfig(zkClient, \"synonyms.txt\");\n    \n    zkClient.close();\n  }\n\n","sourceOld":"  // static to share with distrib test\n  static void buildZooKeeper(String zkHost, String zkAddress, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    Map<String,String> props = new HashMap<String,String>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n    \n    zkClient.makePath(\"/collections/collection1\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT, true);\n\n    putConfig(zkClient, config);\n    putConfig(zkClient, schema);\n    putConfig(zkClient, \"solrconfig.xml\");\n    putConfig(zkClient, \"stopwords.txt\");\n    putConfig(zkClient, \"protwords.txt\");\n    putConfig(zkClient, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(zkClient, \"old_synonyms.txt\");\n    putConfig(zkClient, \"synonyms.txt\");\n    \n    zkClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,String,String).mjava","sourceNew":"  // static to share with distrib test\n  static void buildZooKeeper(String zkHost, String zkAddress, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    Map<String,String> props = new HashMap<String,String>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n    \n    zkClient.makePath(\"/collections/collection1\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT, true);\n\n    putConfig(zkClient, config);\n    putConfig(zkClient, schema);\n    putConfig(zkClient, \"solrconfig.xml\");\n    putConfig(zkClient, \"stopwords.txt\");\n    putConfig(zkClient, \"protwords.txt\");\n    putConfig(zkClient, \"currency.xml\");\n    putConfig(zkClient, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(zkClient, \"old_synonyms.txt\");\n    putConfig(zkClient, \"synonyms.txt\");\n    \n    zkClient.close();\n  }\n\n","sourceOld":"  // static to share with distrib test\n  static void buildZooKeeper(String zkHost, String zkAddress, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    Map<String,String> props = new HashMap<String,String>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n    \n    zkClient.makePath(\"/collections/collection1\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT, true);\n\n    putConfig(zkClient, config);\n    putConfig(zkClient, schema);\n    putConfig(zkClient, \"solrconfig.xml\");\n    putConfig(zkClient, \"stopwords.txt\");\n    putConfig(zkClient, \"protwords.txt\");\n    putConfig(zkClient, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(zkClient, \"old_synonyms.txt\");\n    putConfig(zkClient, \"synonyms.txt\");\n    \n    zkClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a62481aacca928b5c069e6f825ef49c7b6586d8","date":1333048447,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,String,String).mjava","sourceNew":"  // static to share with distrib test\n  static void buildZooKeeper(String zkHost, String zkAddress, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    Map<String,String> props = new HashMap<String,String>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n    \n    zkClient.makePath(\"/collections/collection1\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT, true);\n\n    putConfig(zkClient, config);\n    putConfig(zkClient, schema);\n    putConfig(zkClient, \"solrconfig.xml\");\n    putConfig(zkClient, \"stopwords.txt\");\n    putConfig(zkClient, \"protwords.txt\");\n    putConfig(zkClient, \"currency.xml\");\n    putConfig(zkClient, \"open-exchange-rates.json\");\n    putConfig(zkClient, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(zkClient, \"old_synonyms.txt\");\n    putConfig(zkClient, \"synonyms.txt\");\n    \n    zkClient.close();\n  }\n\n","sourceOld":"  // static to share with distrib test\n  static void buildZooKeeper(String zkHost, String zkAddress, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    Map<String,String> props = new HashMap<String,String>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n    \n    zkClient.makePath(\"/collections/collection1\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT, true);\n\n    putConfig(zkClient, config);\n    putConfig(zkClient, schema);\n    putConfig(zkClient, \"solrconfig.xml\");\n    putConfig(zkClient, \"stopwords.txt\");\n    putConfig(zkClient, \"protwords.txt\");\n    putConfig(zkClient, \"currency.xml\");\n    putConfig(zkClient, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(zkClient, \"old_synonyms.txt\");\n    putConfig(zkClient, \"synonyms.txt\");\n    \n    zkClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c30e4c1cee08b3b229a77991882594fe7250b66","date":1344448871,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,File,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,String,String).mjava","sourceNew":"  // static to share with distrib test\n  static void buildZooKeeper(String zkHost, String zkAddress, File solrhome, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    Map<String,String> props = new HashMap<String,String>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n    \n    zkClient.makePath(\"/collections/collection1\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT, true);\n\n    putConfig(zkClient, solrhome, config);\n    putConfig(zkClient, solrhome, schema);\n    putConfig(zkClient, solrhome, \"solrconfig.xml\");\n    putConfig(zkClient, solrhome, \"stopwords.txt\");\n    putConfig(zkClient, solrhome, \"protwords.txt\");\n    putConfig(zkClient, solrhome, \"currency.xml\");\n    putConfig(zkClient, solrhome, \"open-exchange-rates.json\");\n    putConfig(zkClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(zkClient, solrhome, \"old_synonyms.txt\");\n    putConfig(zkClient, solrhome, \"synonyms.txt\");\n    \n    zkClient.close();\n  }\n\n","sourceOld":"  // static to share with distrib test\n  static void buildZooKeeper(String zkHost, String zkAddress, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    Map<String,String> props = new HashMap<String,String>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n    \n    zkClient.makePath(\"/collections/collection1\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT, true);\n\n    putConfig(zkClient, config);\n    putConfig(zkClient, schema);\n    putConfig(zkClient, \"solrconfig.xml\");\n    putConfig(zkClient, \"stopwords.txt\");\n    putConfig(zkClient, \"protwords.txt\");\n    putConfig(zkClient, \"currency.xml\");\n    putConfig(zkClient, \"open-exchange-rates.json\");\n    putConfig(zkClient, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(zkClient, \"old_synonyms.txt\");\n    putConfig(zkClient, \"synonyms.txt\");\n    \n    zkClient.close();\n  }\n\n","bugFix":null,"bugIntro":["2a2d5d7d5a5bc6b66022afef3bcc646148c796b2","2a2d5d7d5a5bc6b66022afef3bcc646148c796b2","5a82d855abc18f7ee3e1ec359d8f256c8c86977a","5a82d855abc18f7ee3e1ec359d8f256c8c86977a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,String,String).mjava","sourceNew":null,"sourceOld":"  // static to share with distrib test\n  static void buildZooKeeper(String zkHost, String zkAddress, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    Map<String,String> props = new HashMap<String,String>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n    \n    zkClient.makePath(\"/collections/collection1\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT, true);\n\n    putConfig(zkClient, config);\n    putConfig(zkClient, schema);\n    putConfig(zkClient, \"solrconfig.xml\");\n    putConfig(zkClient, \"stopwords.txt\");\n    putConfig(zkClient, \"protwords.txt\");\n    putConfig(zkClient, \"currency.xml\");\n    putConfig(zkClient, \"open-exchange-rates.json\");\n    putConfig(zkClient, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(zkClient, \"old_synonyms.txt\");\n    putConfig(zkClient, \"synonyms.txt\");\n    \n    zkClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,File,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,String,String).mjava","sourceNew":"  // static to share with distrib test\n  static void buildZooKeeper(String zkHost, String zkAddress, File solrhome, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    Map<String,String> props = new HashMap<String,String>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n    \n    zkClient.makePath(\"/collections/collection1\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT, true);\n\n    putConfig(zkClient, solrhome, config);\n    putConfig(zkClient, solrhome, schema);\n    putConfig(zkClient, solrhome, \"solrconfig.xml\");\n    putConfig(zkClient, solrhome, \"stopwords.txt\");\n    putConfig(zkClient, solrhome, \"protwords.txt\");\n    putConfig(zkClient, solrhome, \"currency.xml\");\n    putConfig(zkClient, solrhome, \"open-exchange-rates.json\");\n    putConfig(zkClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(zkClient, solrhome, \"old_synonyms.txt\");\n    putConfig(zkClient, solrhome, \"synonyms.txt\");\n    \n    zkClient.close();\n  }\n\n","sourceOld":"  // static to share with distrib test\n  static void buildZooKeeper(String zkHost, String zkAddress, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    Map<String,String> props = new HashMap<String,String>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n    \n    zkClient.makePath(\"/collections/collection1\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT, true);\n\n    putConfig(zkClient, config);\n    putConfig(zkClient, schema);\n    putConfig(zkClient, \"solrconfig.xml\");\n    putConfig(zkClient, \"stopwords.txt\");\n    putConfig(zkClient, \"protwords.txt\");\n    putConfig(zkClient, \"currency.xml\");\n    putConfig(zkClient, \"open-exchange-rates.json\");\n    putConfig(zkClient, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(zkClient, \"old_synonyms.txt\");\n    putConfig(zkClient, \"synonyms.txt\");\n    \n    zkClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","c2635332d49f7c5a0b484950462a01775512628e"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["7a62481aacca928b5c069e6f825ef49c7b6586d8","2c30e4c1cee08b3b229a77991882594fe7250b66"],"7a62481aacca928b5c069e6f825ef49c7b6586d8":["c2635332d49f7c5a0b484950462a01775512628e"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c2635332d49f7c5a0b484950462a01775512628e":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["7a62481aacca928b5c069e6f825ef49c7b6586d8","2c30e4c1cee08b3b229a77991882594fe7250b66"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c30e4c1cee08b3b229a77991882594fe7250b66"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["7a62481aacca928b5c069e6f825ef49c7b6586d8"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"c26f00b574427b55127e869b935845554afde1fa":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"7a62481aacca928b5c069e6f825ef49c7b6586d8":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","2c30e4c1cee08b3b229a77991882594fe7250b66"],"c2635332d49f7c5a0b484950462a01775512628e":["38e3b736c7ca086d61b7dbb841c905ee115490da","7a62481aacca928b5c069e6f825ef49c7b6586d8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["38e3b736c7ca086d61b7dbb841c905ee115490da","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","c2635332d49f7c5a0b484950462a01775512628e"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"2c30e4c1cee08b3b229a77991882594fe7250b66":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}