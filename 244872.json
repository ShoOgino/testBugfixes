{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testCollectionParameters().mjava","commits":[{"id":"5c7e2b481e19bdaf52e10f5b2fd6faecc4ec952f","date":1425902085,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testCollectionParameters().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCollectionParameters() throws IOException, SolrServerException {\n\n    try (HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString())) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"collection\");\n      client.add(\"collection1\", doc);\n      client.commit(\"collection1\");\n\n      assertEquals(1, client.query(\"collection1\", new SolrQuery(\"id:collection\")).getResults().getNumFound());\n    }\n\n    try (HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + \"/collection1\")) {\n      assertEquals(1, client.query(new SolrQuery(\"id:collection\")).getResults().getNumFound());\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testCollectionParameters().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCollectionParameters() throws IOException, SolrServerException {\n\n    try (HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString())) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"collection\");\n      client.add(\"collection1\", doc);\n      client.commit(\"collection1\");\n\n      assertEquals(1, client.query(\"collection1\", new SolrQuery(\"id:collection\")).getResults().getNumFound());\n    }\n\n    try (HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + \"/collection1\")) {\n      assertEquals(1, client.query(new SolrQuery(\"id:collection\")).getResults().getNumFound());\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testCollectionParameters().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testCollectionParameters().mjava","sourceNew":"  @Test\n  public void testCollectionParameters() throws IOException, SolrServerException {\n\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString())) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"collection\");\n      client.add(\"collection1\", doc);\n      client.commit(\"collection1\");\n\n      assertEquals(1, client.query(\"collection1\", new SolrQuery(\"id:collection\")).getResults().getNumFound());\n    }\n\n    final String collection1Url = jetty.getBaseUrl().toString() + \"/collection1\";\n    try (HttpSolrClient client = getHttpSolrClient(collection1Url)) {\n      assertEquals(1, client.query(new SolrQuery(\"id:collection\")).getResults().getNumFound());\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testCollectionParameters() throws IOException, SolrServerException {\n\n    try (HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString())) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"collection\");\n      client.add(\"collection1\", doc);\n      client.commit(\"collection1\");\n\n      assertEquals(1, client.query(\"collection1\", new SolrQuery(\"id:collection\")).getResults().getNumFound());\n    }\n\n    try (HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + \"/collection1\")) {\n      assertEquals(1, client.query(new SolrQuery(\"id:collection\")).getResults().getNumFound());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testCollectionParameters().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testCollectionParameters().mjava","sourceNew":"  @Test\n  public void testCollectionParameters() throws IOException, SolrServerException {\n\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString())) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"collection\");\n      client.add(\"collection1\", doc);\n      client.commit(\"collection1\");\n\n      assertEquals(1, client.query(\"collection1\", new SolrQuery(\"id:collection\")).getResults().getNumFound());\n    }\n\n    final String collection1Url = jetty.getBaseUrl().toString() + \"/collection1\";\n    try (HttpSolrClient client = getHttpSolrClient(collection1Url)) {\n      assertEquals(1, client.query(new SolrQuery(\"id:collection\")).getResults().getNumFound());\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testCollectionParameters() throws IOException, SolrServerException {\n\n    try (HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString())) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"collection\");\n      client.add(\"collection1\", doc);\n      client.commit(\"collection1\");\n\n      assertEquals(1, client.query(\"collection1\", new SolrQuery(\"id:collection\")).getResults().getNumFound());\n    }\n\n    try (HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + \"/collection1\")) {\n      assertEquals(1, client.query(new SolrQuery(\"id:collection\")).getResults().getNumFound());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5c7e2b481e19bdaf52e10f5b2fd6faecc4ec952f"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5c7e2b481e19bdaf52e10f5b2fd6faecc4ec952f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["5c7e2b481e19bdaf52e10f5b2fd6faecc4ec952f","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"5c7e2b481e19bdaf52e10f5b2fd6faecc4ec952f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","5c7e2b481e19bdaf52e10f5b2fd6faecc4ec952f"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5c7e2b481e19bdaf52e10f5b2fd6faecc4ec952f":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}