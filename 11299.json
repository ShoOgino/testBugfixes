{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#checkRogueThreadsAfter().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#checkRogueThreadsAfter().mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#checkRogueThreadsAfter().mjava","sourceNew":"  /** check if the test still has threads running, we don't want them to \n   *  fail in a subsequent test and pass the blame to the wrong test */\n  private void checkRogueThreadsAfter() {\n    if (\"perMethod\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test method: '\" + getName() + \"'\");\n      if (!testsFailed && rogueThreads > 0) {\n        System.err.println(\"RESOURCE LEAK: test method: '\" + getName()\n            + \"' left \" + rogueThreads + \" thread(s) running\");\n        // TODO: fail, but print seed for now\n        if (uncaughtExceptions.isEmpty()) {\n          reportAdditionalFailureInfo();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** check if the test still has threads running, we don't want them to \n   *  fail in a subsequent test and pass the blame to the wrong test */\n  private void checkRogueThreadsAfter() {\n    if (\"perMethod\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test method: '\" + getName() + \"'\");\n      if (!testsFailed && rogueThreads > 0) {\n        System.err.println(\"RESOURCE LEAK: test method: '\" + getName()\n            + \"' left \" + rogueThreads + \" thread(s) running\");\n        // TODO: fail, but print seed for now\n        if (uncaughtExceptions.isEmpty()) {\n          reportAdditionalFailureInfo();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c7c93dea6a7e2cd67285cfa6cc4f2404ae098cd","date":1331279405,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#checkRogueThreadsAfter().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#checkRogueThreadsAfter().mjava","sourceNew":"  /** check if the test still has threads running, we don't want them to \n   *  fail in a subsequent test and pass the blame to the wrong test */\n  private void checkRogueThreadsAfter() {\n    if (\"perMethod\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test method: '\" + getName() + \"'\");\n      if (!testsFailed && rogueThreads > 0) {\n        System.err.println(\"RESOURCE LEAK: test method: '\" + getName()\n            + \"' left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n  }\n\n","sourceOld":"  /** check if the test still has threads running, we don't want them to \n   *  fail in a subsequent test and pass the blame to the wrong test */\n  private void checkRogueThreadsAfter() {\n    if (\"perMethod\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test method: '\" + getName() + \"'\");\n      if (!testsFailed && rogueThreads > 0) {\n        System.err.println(\"RESOURCE LEAK: test method: '\" + getName()\n            + \"' left \" + rogueThreads + \" thread(s) running\");\n        // TODO: fail, but print seed for now\n        if (uncaughtExceptions.isEmpty()) {\n          reportAdditionalFailureInfo();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#checkRogueThreadsAfter().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#checkRogueThreadsAfter().mjava","sourceNew":"  /** check if the test still has threads running, we don't want them to \n   *  fail in a subsequent test and pass the blame to the wrong test */\n  private void checkRogueThreadsAfter() {\n    if (\"perMethod\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test method: '\" + getName() + \"'\");\n      if (!testsFailed && rogueThreads > 0) {\n        System.err.println(\"RESOURCE LEAK: test method: '\" + getName()\n            + \"' left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n  }\n\n","sourceOld":"  /** check if the test still has threads running, we don't want them to \n   *  fail in a subsequent test and pass the blame to the wrong test */\n  private void checkRogueThreadsAfter() {\n    if (\"perMethod\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test method: '\" + getName() + \"'\");\n      if (!testsFailed && rogueThreads > 0) {\n        System.err.println(\"RESOURCE LEAK: test method: '\" + getName()\n            + \"' left \" + rogueThreads + \" thread(s) running\");\n        // TODO: fail, but print seed for now\n        if (uncaughtExceptions.isEmpty()) {\n          reportAdditionalFailureInfo();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5da0b42730b6b99b31389ef94cb97384e83b9ede","date":1337107665,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#checkRogueThreadsAfter().mjava","sourceNew":null,"sourceOld":"  /** check if the test still has threads running, we don't want them to \n   *  fail in a subsequent test and pass the blame to the wrong test */\n  private void checkRogueThreadsAfter() {\n    if (\"perMethod\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test method: '\" + getName() + \"'\");\n      if (!testsFailed && rogueThreads > 0) {\n        System.err.println(\"RESOURCE LEAK: test method: '\" + getName()\n            + \"' left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","6c7c93dea6a7e2cd67285cfa6cc4f2404ae098cd"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["6c7c93dea6a7e2cd67285cfa6cc4f2404ae098cd"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6c7c93dea6a7e2cd67285cfa6cc4f2404ae098cd":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5da0b42730b6b99b31389ef94cb97384e83b9ede"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["38e3b736c7ca086d61b7dbb841c905ee115490da","6c7c93dea6a7e2cd67285cfa6cc4f2404ae098cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"6c7c93dea6a7e2cd67285cfa6cc4f2404ae098cd":["38e3b736c7ca086d61b7dbb841c905ee115490da","5da0b42730b6b99b31389ef94cb97384e83b9ede"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}