{"path":"lucene/src/test/org/apache/lucene/search/TestSort#testSortMissingLast().mjava","commits":[{"id":"ff1421d1974cfd5072e195bbb63592657da2f66e","date":1285733489,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testSortMissingLast().mjava","pathOld":"/dev/null","sourceNew":"  // test sorts where the type of field is specified\n  public void testSortMissingLast() throws Exception {\n    \n    SortMissingLastTestHelper[] testers = new SortMissingLastTestHelper[] {\n        new SortMissingLastTestHelper( new ByteValuesCreator(   \"byte\",   null ), Byte.MIN_VALUE,    Byte.MAX_VALUE ),\n        new SortMissingLastTestHelper( new ShortValuesCreator(  \"short\",  null ), Short.MIN_VALUE,   Short.MAX_VALUE ),\n        new SortMissingLastTestHelper( new IntValuesCreator(    \"int\",    null ), Integer.MIN_VALUE, Integer.MAX_VALUE ),\n        new SortMissingLastTestHelper( new LongValuesCreator(   \"long\",   null ), Long.MIN_VALUE,    Long.MAX_VALUE ),\n        new SortMissingLastTestHelper( new FloatValuesCreator(  \"float\",  null ), Float.MIN_VALUE,   Float.MAX_VALUE ),\n        new SortMissingLastTestHelper( new DoubleValuesCreator( \"double\", null ), Double.MIN_VALUE,  Double.MAX_VALUE ),\n    };\n    \n    for( SortMissingLastTestHelper t : testers ) {\n      sort.setSort (new SortField( t.creator, false ), SortField.FIELD_DOC );\n      assertMatches(\"creator:\"+t.creator, full, queryM, sort, \"adbc\" );\n\n      sort.setSort (new SortField( t.creator, false ).setMissingValue( t.max ), SortField.FIELD_DOC );\n      assertMatches(\"creator:\"+t.creator, full, queryM, sort, \"bcad\" );\n\n      sort.setSort (new SortField( t.creator, false ).setMissingValue( t.min ), SortField.FIELD_DOC );\n      assertMatches(\"creator:\"+t.creator, full, queryM, sort, \"adbc\" );\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testSortMissingLast().mjava","pathOld":"/dev/null","sourceNew":"  // test sorts where the type of field is specified\n  public void testSortMissingLast() throws Exception {\n    \n    SortMissingLastTestHelper[] testers = new SortMissingLastTestHelper[] {\n        new SortMissingLastTestHelper( new ByteValuesCreator(   \"byte\",   null ), Byte.MIN_VALUE,    Byte.MAX_VALUE ),\n        new SortMissingLastTestHelper( new ShortValuesCreator(  \"short\",  null ), Short.MIN_VALUE,   Short.MAX_VALUE ),\n        new SortMissingLastTestHelper( new IntValuesCreator(    \"int\",    null ), Integer.MIN_VALUE, Integer.MAX_VALUE ),\n        new SortMissingLastTestHelper( new LongValuesCreator(   \"long\",   null ), Long.MIN_VALUE,    Long.MAX_VALUE ),\n        new SortMissingLastTestHelper( new FloatValuesCreator(  \"float\",  null ), Float.MIN_VALUE,   Float.MAX_VALUE ),\n        new SortMissingLastTestHelper( new DoubleValuesCreator( \"double\", null ), Double.MIN_VALUE,  Double.MAX_VALUE ),\n    };\n    \n    for( SortMissingLastTestHelper t : testers ) {\n      sort.setSort (new SortField( t.creator, false ), SortField.FIELD_DOC );\n      assertMatches(\"creator:\"+t.creator, full, queryM, sort, \"adbc\" );\n\n      sort.setSort (new SortField( t.creator, false ).setMissingValue( t.max ), SortField.FIELD_DOC );\n      assertMatches(\"creator:\"+t.creator, full, queryM, sort, \"bcad\" );\n\n      sort.setSort (new SortField( t.creator, false ).setMissingValue( t.min ), SortField.FIELD_DOC );\n      assertMatches(\"creator:\"+t.creator, full, queryM, sort, \"adbc\" );\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"382fe3a6ca9745891afebda9b9a57cc158305545","date":1320952430,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testSortMissingLast().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testSortMissingLast().mjava","sourceNew":"  // test sorts where the type of field is specified\n  public void testSortMissingLast() throws Exception {\n    \n    @SuppressWarnings(\"boxing\")\n    SortMissingLastTestHelper[] ascendTesters = new SortMissingLastTestHelper[] {\n        new SortMissingLastTestHelper( new SortField(   \"byte\",   SortField.Type.BYTE ), Byte.MIN_VALUE,    Byte.MAX_VALUE ),\n        new SortMissingLastTestHelper( new SortField(  \"short\",  SortField.Type.SHORT ), Short.MIN_VALUE,   Short.MAX_VALUE ),\n        new SortMissingLastTestHelper( new SortField(    \"int\",    SortField.Type.INT ), Integer.MIN_VALUE, Integer.MAX_VALUE ),\n        new SortMissingLastTestHelper( new SortField(   \"long\",   SortField.Type.LONG ), Long.MIN_VALUE,    Long.MAX_VALUE ),\n        new SortMissingLastTestHelper( new SortField(  \"float\",  SortField.Type.FLOAT ), Float.MIN_VALUE,   Float.MAX_VALUE ),\n        new SortMissingLastTestHelper( new SortField( \"double\", SortField.Type.DOUBLE ), Double.MIN_VALUE,  Double.MAX_VALUE ),\n    };\n    \n    @SuppressWarnings(\"boxing\")\n    SortMissingLastTestHelper[] descendTesters = new SortMissingLastTestHelper[] {\n      new SortMissingLastTestHelper( new SortField(   \"byte\",   SortField.Type.BYTE, true ), Byte.MIN_VALUE,    Byte.MAX_VALUE ),\n      new SortMissingLastTestHelper( new SortField(  \"short\",  SortField.Type.SHORT, true ), Short.MIN_VALUE,   Short.MAX_VALUE ),\n      new SortMissingLastTestHelper( new SortField(    \"int\",    SortField.Type.INT, true ), Integer.MIN_VALUE, Integer.MAX_VALUE ),\n      new SortMissingLastTestHelper( new SortField(   \"long\",   SortField.Type.LONG, true ), Long.MIN_VALUE,    Long.MAX_VALUE ),\n      new SortMissingLastTestHelper( new SortField(  \"float\",  SortField.Type.FLOAT, true ), Float.MIN_VALUE,   Float.MAX_VALUE ),\n      new SortMissingLastTestHelper( new SortField( \"double\", SortField.Type.DOUBLE, true ), Double.MIN_VALUE,  Double.MAX_VALUE ),\n    };\n    \n    // Default order: ascending\n    for(SortMissingLastTestHelper t : ascendTesters) {\n      sort.setSort(t.sortField, SortField.FIELD_DOC);\n      assertMatches(\"sortField:\"+t.sortField, full, queryM, sort, \"adbc\");\n\n      sort.setSort(t.sortField.setMissingValue(t.max), SortField.FIELD_DOC);\n      assertMatches(\"sortField:\"+t.sortField, full, queryM, sort, \"bcad\");\n\n      sort.setSort(t.sortField.setMissingValue(t.min), SortField.FIELD_DOC);\n      assertMatches(\"sortField:\"+t.sortField, full, queryM, sort, \"adbc\");\n    }\n    \n    // Reverse order: descending (Note: Order for un-valued documents remains the same due to tie breaker: a,d)\n    for(SortMissingLastTestHelper t : descendTesters) {\n      sort.setSort(t.sortField, SortField.FIELD_DOC);\n      assertMatches(\"sortField:\"+t.sortField, full, queryM, sort, \"cbad\");\n      \n      sort.setSort(t.sortField.setMissingValue( t.max ), SortField.FIELD_DOC);\n      assertMatches(\"sortField:\"+t.sortField, full, queryM, sort, \"adcb\");\n      \n      sort.setSort(t.sortField.setMissingValue( t.min ), SortField.FIELD_DOC);\n      assertMatches(\"sortField:\"+t.sortField, full, queryM, sort, \"cbad\");\n    }\n  }\n\n","sourceOld":"  // test sorts where the type of field is specified\n  public void testSortMissingLast() throws Exception {\n    \n    SortMissingLastTestHelper[] testers = new SortMissingLastTestHelper[] {\n        new SortMissingLastTestHelper( new ByteValuesCreator(   \"byte\",   null ), Byte.MIN_VALUE,    Byte.MAX_VALUE ),\n        new SortMissingLastTestHelper( new ShortValuesCreator(  \"short\",  null ), Short.MIN_VALUE,   Short.MAX_VALUE ),\n        new SortMissingLastTestHelper( new IntValuesCreator(    \"int\",    null ), Integer.MIN_VALUE, Integer.MAX_VALUE ),\n        new SortMissingLastTestHelper( new LongValuesCreator(   \"long\",   null ), Long.MIN_VALUE,    Long.MAX_VALUE ),\n        new SortMissingLastTestHelper( new FloatValuesCreator(  \"float\",  null ), Float.MIN_VALUE,   Float.MAX_VALUE ),\n        new SortMissingLastTestHelper( new DoubleValuesCreator( \"double\", null ), Double.MIN_VALUE,  Double.MAX_VALUE ),\n    };\n    \n    for( SortMissingLastTestHelper t : testers ) {\n      sort.setSort (new SortField( t.creator, false ), SortField.FIELD_DOC );\n      assertMatches(\"creator:\"+t.creator, full, queryM, sort, \"adbc\" );\n\n      sort.setSort (new SortField( t.creator, false ).setMissingValue( t.max ), SortField.FIELD_DOC );\n      assertMatches(\"creator:\"+t.creator, full, queryM, sort, \"bcad\" );\n\n      sort.setSort (new SortField( t.creator, false ).setMissingValue( t.min ), SortField.FIELD_DOC );\n      assertMatches(\"creator:\"+t.creator, full, queryM, sort, \"adbc\" );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testSortMissingLast().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testSortMissingLast().mjava","sourceNew":"  // test sorts where the type of field is specified\n  public void testSortMissingLast() throws Exception {\n    \n    @SuppressWarnings(\"boxing\")\n    SortMissingLastTestHelper[] ascendTesters = new SortMissingLastTestHelper[] {\n        new SortMissingLastTestHelper( new SortField(   \"byte\",   SortField.Type.BYTE ), Byte.MIN_VALUE,    Byte.MAX_VALUE ),\n        new SortMissingLastTestHelper( new SortField(  \"short\",  SortField.Type.SHORT ), Short.MIN_VALUE,   Short.MAX_VALUE ),\n        new SortMissingLastTestHelper( new SortField(    \"int\",    SortField.Type.INT ), Integer.MIN_VALUE, Integer.MAX_VALUE ),\n        new SortMissingLastTestHelper( new SortField(   \"long\",   SortField.Type.LONG ), Long.MIN_VALUE,    Long.MAX_VALUE ),\n        new SortMissingLastTestHelper( new SortField(  \"float\",  SortField.Type.FLOAT ), Float.MIN_VALUE,   Float.MAX_VALUE ),\n        new SortMissingLastTestHelper( new SortField( \"double\", SortField.Type.DOUBLE ), Double.MIN_VALUE,  Double.MAX_VALUE ),\n    };\n    \n    @SuppressWarnings(\"boxing\")\n    SortMissingLastTestHelper[] descendTesters = new SortMissingLastTestHelper[] {\n      new SortMissingLastTestHelper( new SortField(   \"byte\",   SortField.Type.BYTE, true ), Byte.MIN_VALUE,    Byte.MAX_VALUE ),\n      new SortMissingLastTestHelper( new SortField(  \"short\",  SortField.Type.SHORT, true ), Short.MIN_VALUE,   Short.MAX_VALUE ),\n      new SortMissingLastTestHelper( new SortField(    \"int\",    SortField.Type.INT, true ), Integer.MIN_VALUE, Integer.MAX_VALUE ),\n      new SortMissingLastTestHelper( new SortField(   \"long\",   SortField.Type.LONG, true ), Long.MIN_VALUE,    Long.MAX_VALUE ),\n      new SortMissingLastTestHelper( new SortField(  \"float\",  SortField.Type.FLOAT, true ), Float.MIN_VALUE,   Float.MAX_VALUE ),\n      new SortMissingLastTestHelper( new SortField( \"double\", SortField.Type.DOUBLE, true ), Double.MIN_VALUE,  Double.MAX_VALUE ),\n    };\n    \n    // Default order: ascending\n    for(SortMissingLastTestHelper t : ascendTesters) {\n      sort.setSort(t.sortField, SortField.FIELD_DOC);\n      assertMatches(\"sortField:\"+t.sortField, full, queryM, sort, \"adbc\");\n\n      sort.setSort(t.sortField.setMissingValue(t.max), SortField.FIELD_DOC);\n      assertMatches(\"sortField:\"+t.sortField, full, queryM, sort, \"bcad\");\n\n      sort.setSort(t.sortField.setMissingValue(t.min), SortField.FIELD_DOC);\n      assertMatches(\"sortField:\"+t.sortField, full, queryM, sort, \"adbc\");\n    }\n    \n    // Reverse order: descending (Note: Order for un-valued documents remains the same due to tie breaker: a,d)\n    for(SortMissingLastTestHelper t : descendTesters) {\n      sort.setSort(t.sortField, SortField.FIELD_DOC);\n      assertMatches(\"sortField:\"+t.sortField, full, queryM, sort, \"cbad\");\n      \n      sort.setSort(t.sortField.setMissingValue( t.max ), SortField.FIELD_DOC);\n      assertMatches(\"sortField:\"+t.sortField, full, queryM, sort, \"adcb\");\n      \n      sort.setSort(t.sortField.setMissingValue( t.min ), SortField.FIELD_DOC);\n      assertMatches(\"sortField:\"+t.sortField, full, queryM, sort, \"cbad\");\n    }\n  }\n\n","sourceOld":"  // test sorts where the type of field is specified\n  public void testSortMissingLast() throws Exception {\n    \n    @SuppressWarnings(\"boxing\")\n    SortMissingLastTestHelper[] ascendTesters = new SortMissingLastTestHelper[] {\n        new SortMissingLastTestHelper( new SortField(   \"byte\",   SortField.Type.BYTE ), Byte.MIN_VALUE,    Byte.MAX_VALUE ),\n        new SortMissingLastTestHelper( new SortField(  \"short\",  SortField.Type.SHORT ), Short.MIN_VALUE,   Short.MAX_VALUE ),\n        new SortMissingLastTestHelper( new SortField(    \"int\",    SortField.Type.INT ), Integer.MIN_VALUE, Integer.MAX_VALUE ),\n        new SortMissingLastTestHelper( new SortField(   \"long\",   SortField.Type.LONG ), Long.MIN_VALUE,    Long.MAX_VALUE ),\n        new SortMissingLastTestHelper( new SortField(  \"float\",  SortField.Type.FLOAT ), Float.MIN_VALUE,   Float.MAX_VALUE ),\n        new SortMissingLastTestHelper( new SortField( \"double\", SortField.Type.DOUBLE ), Double.MIN_VALUE,  Double.MAX_VALUE ),\n    };\n    \n    @SuppressWarnings(\"boxing\")\n    SortMissingLastTestHelper[] descendTesters = new SortMissingLastTestHelper[] {\n      new SortMissingLastTestHelper( new SortField(   \"byte\",   SortField.Type.BYTE, true ), Byte.MIN_VALUE,    Byte.MAX_VALUE ),\n      new SortMissingLastTestHelper( new SortField(  \"short\",  SortField.Type.SHORT, true ), Short.MIN_VALUE,   Short.MAX_VALUE ),\n      new SortMissingLastTestHelper( new SortField(    \"int\",    SortField.Type.INT, true ), Integer.MIN_VALUE, Integer.MAX_VALUE ),\n      new SortMissingLastTestHelper( new SortField(   \"long\",   SortField.Type.LONG, true ), Long.MIN_VALUE,    Long.MAX_VALUE ),\n      new SortMissingLastTestHelper( new SortField(  \"float\",  SortField.Type.FLOAT, true ), Float.MIN_VALUE,   Float.MAX_VALUE ),\n      new SortMissingLastTestHelper( new SortField( \"double\", SortField.Type.DOUBLE, true ), Double.MIN_VALUE,  Double.MAX_VALUE ),\n    };\n    \n    // Default order: ascending\n    for(SortMissingLastTestHelper t : ascendTesters) {\n      sort.setSort(t.sortField, SortField.FIELD_DOC);\n      assertMatches(\"sortField:\"+t.sortField, full, queryM, sort, \"adbc\");\n\n      sort.setSort(t.sortField.setMissingValue(t.max), SortField.FIELD_DOC);\n      assertMatches(\"sortField:\"+t.sortField, full, queryM, sort, \"bcad\");\n\n      sort.setSort(t.sortField.setMissingValue(t.min), SortField.FIELD_DOC);\n      assertMatches(\"sortField:\"+t.sortField, full, queryM, sort, \"adbc\");\n    }\n    \n    // Reverse order: descending (Note: Order for un-valued documents remains the same due to tie breaker: a,d)\n    for(SortMissingLastTestHelper t : descendTesters) {\n      sort.setSort(t.sortField, SortField.FIELD_DOC);\n      assertMatches(\"sortField:\"+t.sortField, full, queryM, sort, \"cbad\");\n      \n      sort.setSort(t.sortField.setMissingValue( t.max ), SortField.FIELD_DOC);\n      assertMatches(\"sortField:\"+t.sortField, full, queryM, sort, \"adcb\");\n      \n      sort.setSort(t.sortField.setMissingValue( t.min ), SortField.FIELD_DOC);\n      assertMatches(\"sortField:\"+t.sortField, full, queryM, sort, \"cbad\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["382fe3a6ca9745891afebda9b9a57cc158305545"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ff1421d1974cfd5072e195bbb63592657da2f66e"],"382fe3a6ca9745891afebda9b9a57cc158305545":["ff1421d1974cfd5072e195bbb63592657da2f66e"],"ff1421d1974cfd5072e195bbb63592657da2f66e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ff1421d1974cfd5072e195bbb63592657da2f66e"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"382fe3a6ca9745891afebda9b9a57cc158305545":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ff1421d1974cfd5072e195bbb63592657da2f66e":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","382fe3a6ca9745891afebda9b9a57cc158305545"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}