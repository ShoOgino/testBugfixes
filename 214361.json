{"path":"solr/core/src/test/org/apache/solr/cloud/PeerSyncReplicationTest.IndexInBackGround#run().mjava","commits":[{"id":"919560b37ad88ad944e3073977d184fd663f2981","date":1487792657,"type":1,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/PeerSyncReplicationTest.IndexInBackGround#run().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/PeerSyncReplicationTest#indexInBackground(int).mjava","sourceNew":"    public void run() {\n      try {\n        for (int i = 0; i < numDocs; i++) {\n          indexDoc(id, docId, i1, 50, tlong, 50, t1, \"document number \" + docId);\n          docId++;\n          // slow down adds, to get documents indexed while in PeerSync\n          Thread.sleep(100);\n        }\n      } catch (Exception e) {\n        log.error(\"Error indexing doc in background\", e);\n        //Throwing an error here will kill the thread\n      }\n    }\n\n","sourceOld":"  private void indexInBackground(int numDocs) {\n    new Thread(() -> {\n      try {\n        for (int i = 0; i < numDocs; i++) {\n          indexDoc(id, docId, i1, 50, tlong, 50, t1, \"document number \" + docId);\n          docId++;\n          // slow down adds, to get documents indexed while in PeerSync\n          Thread.sleep(100);\n        }\n      } catch (Exception e) {\n        log.error(\"Error indexing doc in background\", e);\n        //Throwing an error here will kill the thread\n      }\n    }, getClassName())\n        .start();\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56fa6695578129446663f523f13cc1c89f17f4b7","date":1502361381,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/PeerSyncReplicationTest.IndexInBackGround#run().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/PeerSyncReplicationTest.IndexInBackGround#run().mjava","sourceNew":"    public void run() {\n      try {\n        // If we don't wait for cores get loaded, the leader may put this replica into LIR state\n        waitForCoreLoading();\n        for (int i = 0; i < numDocs; i++) {\n          indexDoc(id, docId, i1, 50, tlong, 50, t1, \"document number \" + docId);\n          docId++;\n          // slow down adds, to get documents indexed while in PeerSync\n          Thread.sleep(100);\n        }\n      } catch (Exception e) {\n        log.error(\"Error indexing doc in background\", e);\n        //Throwing an error here will kill the thread\n      }\n    }\n\n","sourceOld":"    public void run() {\n      try {\n        for (int i = 0; i < numDocs; i++) {\n          indexDoc(id, docId, i1, 50, tlong, 50, t1, \"document number \" + docId);\n          docId++;\n          // slow down adds, to get documents indexed while in PeerSync\n          Thread.sleep(100);\n        }\n      } catch (Exception e) {\n        log.error(\"Error indexing doc in background\", e);\n        //Throwing an error here will kill the thread\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58884af1f68e9d61c217c753fbd6266d86a63b14","date":1502363401,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/PeerSyncReplicationTest.IndexInBackGround#run().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/PeerSyncReplicationTest.IndexInBackGround#run().mjava","sourceNew":"    public void run() {\n      try {\n        // If we don't wait for cores get loaded, the leader may put this replica into LIR state\n        waitForCoreLoading();\n        for (int i = 0; i < numDocs; i++) {\n          indexDoc(id, docId, i1, 50, tlong, 50, t1, \"document number \" + docId);\n          docId++;\n          // slow down adds, to get documents indexed while in PeerSync\n          Thread.sleep(100);\n        }\n      } catch (Exception e) {\n        log.error(\"Error indexing doc in background\", e);\n        //Throwing an error here will kill the thread\n      }\n    }\n\n","sourceOld":"    public void run() {\n      try {\n        for (int i = 0; i < numDocs; i++) {\n          indexDoc(id, docId, i1, 50, tlong, 50, t1, \"document number \" + docId);\n          docId++;\n          // slow down adds, to get documents indexed while in PeerSync\n          Thread.sleep(100);\n        }\n      } catch (Exception e) {\n        log.error(\"Error indexing doc in background\", e);\n        //Throwing an error here will kill the thread\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","date":1502692251,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/PeerSyncReplicationTest.IndexInBackGround#run().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/PeerSyncReplicationTest.IndexInBackGround#run().mjava","sourceNew":"    public void run() {\n      try {\n        // If we don't wait for cores get loaded, the leader may put this replica into LIR state\n        waitForCoreLoading();\n        for (int i = 0; i < numDocs; i++) {\n          indexDoc(id, docId, i1, 50, tlong, 50, t1, \"document number \" + docId);\n          docId++;\n          // slow down adds, to get documents indexed while in PeerSync\n          Thread.sleep(100);\n        }\n      } catch (Exception e) {\n        log.error(\"Error indexing doc in background\", e);\n        //Throwing an error here will kill the thread\n      }\n    }\n\n","sourceOld":"    public void run() {\n      try {\n        for (int i = 0; i < numDocs; i++) {\n          indexDoc(id, docId, i1, 50, tlong, 50, t1, \"document number \" + docId);\n          docId++;\n          // slow down adds, to get documents indexed while in PeerSync\n          Thread.sleep(100);\n        }\n      } catch (Exception e) {\n        log.error(\"Error indexing doc in background\", e);\n        //Throwing an error here will kill the thread\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"56fa6695578129446663f523f13cc1c89f17f4b7":["919560b37ad88ad944e3073977d184fd663f2981"],"919560b37ad88ad944e3073977d184fd663f2981":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"58884af1f68e9d61c217c753fbd6266d86a63b14":["919560b37ad88ad944e3073977d184fd663f2981","56fa6695578129446663f523f13cc1c89f17f4b7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["919560b37ad88ad944e3073977d184fd663f2981","56fa6695578129446663f523f13cc1c89f17f4b7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["56fa6695578129446663f523f13cc1c89f17f4b7"]},"commit2Childs":{"56fa6695578129446663f523f13cc1c89f17f4b7":["58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"919560b37ad88ad944e3073977d184fd663f2981":["56fa6695578129446663f523f13cc1c89f17f4b7","58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"58884af1f68e9d61c217c753fbd6266d86a63b14":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["919560b37ad88ad944e3073977d184fd663f2981"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}