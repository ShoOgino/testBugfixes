{"path":"lucene/src/test/org/apache/lucene/analysis/TestToken#testTokenAttributeFactory().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":2,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestToken#testTokenAttributeFactory().mjava","pathOld":"backwards/src/test/org/apache/lucene/analysis/TestToken#testTokenAttributeFactory().mjava","sourceNew":"  public void testTokenAttributeFactory() throws Exception {\n    TokenStream ts = new WhitespaceTokenizer(Token.TOKEN_ATTRIBUTE_FACTORY, new StringReader(\"foo bar\"));\n    \n    assertTrue(\"TypeAttribute is not implemented by SenselessAttributeImpl\",\n      ts.addAttribute(SenselessAttribute.class) instanceof SenselessAttributeImpl);\n    \n    assertTrue(\"TermAttribute is not implemented by Token\",\n      ts.addAttribute(TermAttribute.class) instanceof Token);\n    assertTrue(\"OffsetAttribute is not implemented by Token\",\n      ts.addAttribute(OffsetAttribute.class) instanceof Token);\n    assertTrue(\"FlagsAttribute is not implemented by Token\",\n      ts.addAttribute(FlagsAttribute.class) instanceof Token);\n    assertTrue(\"PayloadAttribute is not implemented by Token\",\n      ts.addAttribute(PayloadAttribute.class) instanceof Token);\n    assertTrue(\"PositionIncrementAttribute is not implemented by Token\", \n      ts.addAttribute(PositionIncrementAttribute.class) instanceof Token);\n    assertTrue(\"TypeAttribute is not implemented by Token\",\n      ts.addAttribute(TypeAttribute.class) instanceof Token);\n  }\n\n","sourceOld":"  public void testTokenAttributeFactory() throws Exception {\n    TokenStream ts = new WhitespaceTokenizer(Token.TOKEN_ATTRIBUTE_FACTORY, new StringReader(\"foo bar\"));\n    \n    assertTrue(\"TypeAttribute is not implemented by SenselessAttributeImpl\",\n      ts.addAttribute(SenselessAttribute.class) instanceof SenselessAttributeImpl);\n    \n    assertTrue(\"TermAttribute is not implemented by Token\",\n      ts.addAttribute(TermAttribute.class) instanceof Token);\n    assertTrue(\"OffsetAttribute is not implemented by Token\",\n      ts.addAttribute(OffsetAttribute.class) instanceof Token);\n    assertTrue(\"FlagsAttribute is not implemented by Token\",\n      ts.addAttribute(FlagsAttribute.class) instanceof Token);\n    assertTrue(\"PayloadAttribute is not implemented by Token\",\n      ts.addAttribute(PayloadAttribute.class) instanceof Token);\n    assertTrue(\"PositionIncrementAttribute is not implemented by Token\", \n      ts.addAttribute(PositionIncrementAttribute.class) instanceof Token);\n    assertTrue(\"TypeAttribute is not implemented by Token\",\n      ts.addAttribute(TypeAttribute.class) instanceof Token);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a775c547c3519b47efd41c09cb47100ddb9604c7","date":1270914087,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestToken#testTokenAttributeFactory().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestToken#testTokenAttributeFactory().mjava","sourceNew":"  public void testTokenAttributeFactory() throws Exception {\n    TokenStream ts = new WhitespaceTokenizer(Token.TOKEN_ATTRIBUTE_FACTORY, new StringReader(\"foo bar\"));\n    \n    assertTrue(\"TypeAttribute is not implemented by SenselessAttributeImpl\",\n      ts.addAttribute(SenselessAttribute.class) instanceof SenselessAttributeImpl);\n    \n    assertTrue(\"CharTermAttribute is not implemented by Token\",\n      ts.addAttribute(CharTermAttribute.class) instanceof Token);\n    assertTrue(\"OffsetAttribute is not implemented by Token\",\n      ts.addAttribute(OffsetAttribute.class) instanceof Token);\n    assertTrue(\"FlagsAttribute is not implemented by Token\",\n      ts.addAttribute(FlagsAttribute.class) instanceof Token);\n    assertTrue(\"PayloadAttribute is not implemented by Token\",\n      ts.addAttribute(PayloadAttribute.class) instanceof Token);\n    assertTrue(\"PositionIncrementAttribute is not implemented by Token\", \n      ts.addAttribute(PositionIncrementAttribute.class) instanceof Token);\n    assertTrue(\"TypeAttribute is not implemented by Token\",\n      ts.addAttribute(TypeAttribute.class) instanceof Token);\n  }\n\n","sourceOld":"  public void testTokenAttributeFactory() throws Exception {\n    TokenStream ts = new WhitespaceTokenizer(Token.TOKEN_ATTRIBUTE_FACTORY, new StringReader(\"foo bar\"));\n    \n    assertTrue(\"TypeAttribute is not implemented by SenselessAttributeImpl\",\n      ts.addAttribute(SenselessAttribute.class) instanceof SenselessAttributeImpl);\n    \n    assertTrue(\"TermAttribute is not implemented by Token\",\n      ts.addAttribute(TermAttribute.class) instanceof Token);\n    assertTrue(\"OffsetAttribute is not implemented by Token\",\n      ts.addAttribute(OffsetAttribute.class) instanceof Token);\n    assertTrue(\"FlagsAttribute is not implemented by Token\",\n      ts.addAttribute(FlagsAttribute.class) instanceof Token);\n    assertTrue(\"PayloadAttribute is not implemented by Token\",\n      ts.addAttribute(PayloadAttribute.class) instanceof Token);\n    assertTrue(\"PositionIncrementAttribute is not implemented by Token\", \n      ts.addAttribute(PositionIncrementAttribute.class) instanceof Token);\n    assertTrue(\"TypeAttribute is not implemented by Token\",\n      ts.addAttribute(TypeAttribute.class) instanceof Token);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790c3f61c9b891d66d919c5d10db9fa5216eb0f1","date":1274818604,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestToken#testTokenAttributeFactory().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestToken#testTokenAttributeFactory().mjava","sourceNew":"  public void testTokenAttributeFactory() throws Exception {\n    TokenStream ts = new MockTokenizer(Token.TOKEN_ATTRIBUTE_FACTORY, new StringReader(\"foo bar\"), MockTokenizer.WHITESPACE, false);\n    \n    assertTrue(\"TypeAttribute is not implemented by SenselessAttributeImpl\",\n      ts.addAttribute(SenselessAttribute.class) instanceof SenselessAttributeImpl);\n    \n    assertTrue(\"CharTermAttribute is not implemented by Token\",\n      ts.addAttribute(CharTermAttribute.class) instanceof Token);\n    assertTrue(\"OffsetAttribute is not implemented by Token\",\n      ts.addAttribute(OffsetAttribute.class) instanceof Token);\n    assertTrue(\"FlagsAttribute is not implemented by Token\",\n      ts.addAttribute(FlagsAttribute.class) instanceof Token);\n    assertTrue(\"PayloadAttribute is not implemented by Token\",\n      ts.addAttribute(PayloadAttribute.class) instanceof Token);\n    assertTrue(\"PositionIncrementAttribute is not implemented by Token\", \n      ts.addAttribute(PositionIncrementAttribute.class) instanceof Token);\n    assertTrue(\"TypeAttribute is not implemented by Token\",\n      ts.addAttribute(TypeAttribute.class) instanceof Token);\n  }\n\n","sourceOld":"  public void testTokenAttributeFactory() throws Exception {\n    TokenStream ts = new WhitespaceTokenizer(Token.TOKEN_ATTRIBUTE_FACTORY, new StringReader(\"foo bar\"));\n    \n    assertTrue(\"TypeAttribute is not implemented by SenselessAttributeImpl\",\n      ts.addAttribute(SenselessAttribute.class) instanceof SenselessAttributeImpl);\n    \n    assertTrue(\"CharTermAttribute is not implemented by Token\",\n      ts.addAttribute(CharTermAttribute.class) instanceof Token);\n    assertTrue(\"OffsetAttribute is not implemented by Token\",\n      ts.addAttribute(OffsetAttribute.class) instanceof Token);\n    assertTrue(\"FlagsAttribute is not implemented by Token\",\n      ts.addAttribute(FlagsAttribute.class) instanceof Token);\n    assertTrue(\"PayloadAttribute is not implemented by Token\",\n      ts.addAttribute(PayloadAttribute.class) instanceof Token);\n    assertTrue(\"PositionIncrementAttribute is not implemented by Token\", \n      ts.addAttribute(PositionIncrementAttribute.class) instanceof Token);\n    assertTrue(\"TypeAttribute is not implemented by Token\",\n      ts.addAttribute(TypeAttribute.class) instanceof Token);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3ba5366b7a7f11839e9c824b23007f048d002f6","date":1275996475,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestToken#testTokenAttributeFactory().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestToken#testTokenAttributeFactory().mjava","sourceNew":"  public void testTokenAttributeFactory() throws Exception {\n    TokenStream ts = new MockTokenizer(Token.TOKEN_ATTRIBUTE_FACTORY, new StringReader(\"foo bar\"), MockTokenizer.WHITESPACE, false);\n    \n    assertTrue(\"SenselessAttribute is not implemented by SenselessAttributeImpl\",\n      ts.addAttribute(SenselessAttribute.class) instanceof SenselessAttributeImpl);\n    \n    assertTrue(\"CharTermAttribute is not implemented by Token\",\n      ts.addAttribute(CharTermAttribute.class) instanceof Token);\n    assertTrue(\"OffsetAttribute is not implemented by Token\",\n      ts.addAttribute(OffsetAttribute.class) instanceof Token);\n    assertTrue(\"FlagsAttribute is not implemented by Token\",\n      ts.addAttribute(FlagsAttribute.class) instanceof Token);\n    assertTrue(\"PayloadAttribute is not implemented by Token\",\n      ts.addAttribute(PayloadAttribute.class) instanceof Token);\n    assertTrue(\"PositionIncrementAttribute is not implemented by Token\", \n      ts.addAttribute(PositionIncrementAttribute.class) instanceof Token);\n    assertTrue(\"TypeAttribute is not implemented by Token\",\n      ts.addAttribute(TypeAttribute.class) instanceof Token);\n  }\n\n","sourceOld":"  public void testTokenAttributeFactory() throws Exception {\n    TokenStream ts = new MockTokenizer(Token.TOKEN_ATTRIBUTE_FACTORY, new StringReader(\"foo bar\"), MockTokenizer.WHITESPACE, false);\n    \n    assertTrue(\"TypeAttribute is not implemented by SenselessAttributeImpl\",\n      ts.addAttribute(SenselessAttribute.class) instanceof SenselessAttributeImpl);\n    \n    assertTrue(\"CharTermAttribute is not implemented by Token\",\n      ts.addAttribute(CharTermAttribute.class) instanceof Token);\n    assertTrue(\"OffsetAttribute is not implemented by Token\",\n      ts.addAttribute(OffsetAttribute.class) instanceof Token);\n    assertTrue(\"FlagsAttribute is not implemented by Token\",\n      ts.addAttribute(FlagsAttribute.class) instanceof Token);\n    assertTrue(\"PayloadAttribute is not implemented by Token\",\n      ts.addAttribute(PayloadAttribute.class) instanceof Token);\n    assertTrue(\"PositionIncrementAttribute is not implemented by Token\", \n      ts.addAttribute(PositionIncrementAttribute.class) instanceof Token);\n    assertTrue(\"TypeAttribute is not implemented by Token\",\n      ts.addAttribute(TypeAttribute.class) instanceof Token);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84fc017ed7c9f13d0cb96bce55a5909f7d6161b6","date":1306073935,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestToken#testTokenAttributeFactory().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestToken#testTokenAttributeFactory().mjava","sourceNew":"  public void testTokenAttributeFactory() throws Exception {\n    TokenStream ts = new MockTokenizer(Token.TOKEN_ATTRIBUTE_FACTORY, new StringReader(\"foo bar\"), MockTokenizer.WHITESPACE, false, MockTokenizer.DEFAULT_MAX_TOKEN_LENGTH);\n    \n    assertTrue(\"SenselessAttribute is not implemented by SenselessAttributeImpl\",\n      ts.addAttribute(SenselessAttribute.class) instanceof SenselessAttributeImpl);\n    \n    assertTrue(\"CharTermAttribute is not implemented by Token\",\n      ts.addAttribute(CharTermAttribute.class) instanceof Token);\n    assertTrue(\"OffsetAttribute is not implemented by Token\",\n      ts.addAttribute(OffsetAttribute.class) instanceof Token);\n    assertTrue(\"FlagsAttribute is not implemented by Token\",\n      ts.addAttribute(FlagsAttribute.class) instanceof Token);\n    assertTrue(\"PayloadAttribute is not implemented by Token\",\n      ts.addAttribute(PayloadAttribute.class) instanceof Token);\n    assertTrue(\"PositionIncrementAttribute is not implemented by Token\", \n      ts.addAttribute(PositionIncrementAttribute.class) instanceof Token);\n    assertTrue(\"TypeAttribute is not implemented by Token\",\n      ts.addAttribute(TypeAttribute.class) instanceof Token);\n  }\n\n","sourceOld":"  public void testTokenAttributeFactory() throws Exception {\n    TokenStream ts = new MockTokenizer(Token.TOKEN_ATTRIBUTE_FACTORY, new StringReader(\"foo bar\"), MockTokenizer.WHITESPACE, false);\n    \n    assertTrue(\"SenselessAttribute is not implemented by SenselessAttributeImpl\",\n      ts.addAttribute(SenselessAttribute.class) instanceof SenselessAttributeImpl);\n    \n    assertTrue(\"CharTermAttribute is not implemented by Token\",\n      ts.addAttribute(CharTermAttribute.class) instanceof Token);\n    assertTrue(\"OffsetAttribute is not implemented by Token\",\n      ts.addAttribute(OffsetAttribute.class) instanceof Token);\n    assertTrue(\"FlagsAttribute is not implemented by Token\",\n      ts.addAttribute(FlagsAttribute.class) instanceof Token);\n    assertTrue(\"PayloadAttribute is not implemented by Token\",\n      ts.addAttribute(PayloadAttribute.class) instanceof Token);\n    assertTrue(\"PositionIncrementAttribute is not implemented by Token\", \n      ts.addAttribute(PositionIncrementAttribute.class) instanceof Token);\n    assertTrue(\"TypeAttribute is not implemented by Token\",\n      ts.addAttribute(TypeAttribute.class) instanceof Token);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestToken#testTokenAttributeFactory().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestToken#testTokenAttributeFactory().mjava","sourceNew":"  public void testTokenAttributeFactory() throws Exception {\n    TokenStream ts = new MockTokenizer(Token.TOKEN_ATTRIBUTE_FACTORY, new StringReader(\"foo bar\"), MockTokenizer.WHITESPACE, false, MockTokenizer.DEFAULT_MAX_TOKEN_LENGTH);\n    \n    assertTrue(\"SenselessAttribute is not implemented by SenselessAttributeImpl\",\n      ts.addAttribute(SenselessAttribute.class) instanceof SenselessAttributeImpl);\n    \n    assertTrue(\"CharTermAttribute is not implemented by Token\",\n      ts.addAttribute(CharTermAttribute.class) instanceof Token);\n    assertTrue(\"OffsetAttribute is not implemented by Token\",\n      ts.addAttribute(OffsetAttribute.class) instanceof Token);\n    assertTrue(\"FlagsAttribute is not implemented by Token\",\n      ts.addAttribute(FlagsAttribute.class) instanceof Token);\n    assertTrue(\"PayloadAttribute is not implemented by Token\",\n      ts.addAttribute(PayloadAttribute.class) instanceof Token);\n    assertTrue(\"PositionIncrementAttribute is not implemented by Token\", \n      ts.addAttribute(PositionIncrementAttribute.class) instanceof Token);\n    assertTrue(\"TypeAttribute is not implemented by Token\",\n      ts.addAttribute(TypeAttribute.class) instanceof Token);\n  }\n\n","sourceOld":"  public void testTokenAttributeFactory() throws Exception {\n    TokenStream ts = new MockTokenizer(Token.TOKEN_ATTRIBUTE_FACTORY, new StringReader(\"foo bar\"), MockTokenizer.WHITESPACE, false);\n    \n    assertTrue(\"SenselessAttribute is not implemented by SenselessAttributeImpl\",\n      ts.addAttribute(SenselessAttribute.class) instanceof SenselessAttributeImpl);\n    \n    assertTrue(\"CharTermAttribute is not implemented by Token\",\n      ts.addAttribute(CharTermAttribute.class) instanceof Token);\n    assertTrue(\"OffsetAttribute is not implemented by Token\",\n      ts.addAttribute(OffsetAttribute.class) instanceof Token);\n    assertTrue(\"FlagsAttribute is not implemented by Token\",\n      ts.addAttribute(FlagsAttribute.class) instanceof Token);\n    assertTrue(\"PayloadAttribute is not implemented by Token\",\n      ts.addAttribute(PayloadAttribute.class) instanceof Token);\n    assertTrue(\"PositionIncrementAttribute is not implemented by Token\", \n      ts.addAttribute(PositionIncrementAttribute.class) instanceof Token);\n    assertTrue(\"TypeAttribute is not implemented by Token\",\n      ts.addAttribute(TypeAttribute.class) instanceof Token);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","date":1306150983,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestToken#testTokenAttributeFactory().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestToken#testTokenAttributeFactory().mjava","sourceNew":"  public void testTokenAttributeFactory() throws Exception {\n    TokenStream ts = new MockTokenizer(Token.TOKEN_ATTRIBUTE_FACTORY, new StringReader(\"foo bar\"), MockTokenizer.WHITESPACE, false, MockTokenizer.DEFAULT_MAX_TOKEN_LENGTH);\n    \n    assertTrue(\"SenselessAttribute is not implemented by SenselessAttributeImpl\",\n      ts.addAttribute(SenselessAttribute.class) instanceof SenselessAttributeImpl);\n    \n    assertTrue(\"CharTermAttribute is not implemented by Token\",\n      ts.addAttribute(CharTermAttribute.class) instanceof Token);\n    assertTrue(\"OffsetAttribute is not implemented by Token\",\n      ts.addAttribute(OffsetAttribute.class) instanceof Token);\n    assertTrue(\"FlagsAttribute is not implemented by Token\",\n      ts.addAttribute(FlagsAttribute.class) instanceof Token);\n    assertTrue(\"PayloadAttribute is not implemented by Token\",\n      ts.addAttribute(PayloadAttribute.class) instanceof Token);\n    assertTrue(\"PositionIncrementAttribute is not implemented by Token\", \n      ts.addAttribute(PositionIncrementAttribute.class) instanceof Token);\n    assertTrue(\"TypeAttribute is not implemented by Token\",\n      ts.addAttribute(TypeAttribute.class) instanceof Token);\n  }\n\n","sourceOld":"  public void testTokenAttributeFactory() throws Exception {\n    TokenStream ts = new MockTokenizer(Token.TOKEN_ATTRIBUTE_FACTORY, new StringReader(\"foo bar\"), MockTokenizer.WHITESPACE, false);\n    \n    assertTrue(\"SenselessAttribute is not implemented by SenselessAttributeImpl\",\n      ts.addAttribute(SenselessAttribute.class) instanceof SenselessAttributeImpl);\n    \n    assertTrue(\"CharTermAttribute is not implemented by Token\",\n      ts.addAttribute(CharTermAttribute.class) instanceof Token);\n    assertTrue(\"OffsetAttribute is not implemented by Token\",\n      ts.addAttribute(OffsetAttribute.class) instanceof Token);\n    assertTrue(\"FlagsAttribute is not implemented by Token\",\n      ts.addAttribute(FlagsAttribute.class) instanceof Token);\n    assertTrue(\"PayloadAttribute is not implemented by Token\",\n      ts.addAttribute(PayloadAttribute.class) instanceof Token);\n    assertTrue(\"PositionIncrementAttribute is not implemented by Token\", \n      ts.addAttribute(PositionIncrementAttribute.class) instanceof Token);\n    assertTrue(\"TypeAttribute is not implemented by Token\",\n      ts.addAttribute(TypeAttribute.class) instanceof Token);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestToken#testTokenAttributeFactory().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestToken#testTokenAttributeFactory().mjava","sourceNew":"  public void testTokenAttributeFactory() throws Exception {\n    TokenStream ts = new MockTokenizer(Token.TOKEN_ATTRIBUTE_FACTORY, new StringReader(\"foo bar\"), MockTokenizer.WHITESPACE, false, MockTokenizer.DEFAULT_MAX_TOKEN_LENGTH);\n    \n    assertTrue(\"SenselessAttribute is not implemented by SenselessAttributeImpl\",\n      ts.addAttribute(SenselessAttribute.class) instanceof SenselessAttributeImpl);\n    \n    assertTrue(\"CharTermAttribute is not implemented by Token\",\n      ts.addAttribute(CharTermAttribute.class) instanceof Token);\n    assertTrue(\"OffsetAttribute is not implemented by Token\",\n      ts.addAttribute(OffsetAttribute.class) instanceof Token);\n    assertTrue(\"FlagsAttribute is not implemented by Token\",\n      ts.addAttribute(FlagsAttribute.class) instanceof Token);\n    assertTrue(\"PayloadAttribute is not implemented by Token\",\n      ts.addAttribute(PayloadAttribute.class) instanceof Token);\n    assertTrue(\"PositionIncrementAttribute is not implemented by Token\", \n      ts.addAttribute(PositionIncrementAttribute.class) instanceof Token);\n    assertTrue(\"TypeAttribute is not implemented by Token\",\n      ts.addAttribute(TypeAttribute.class) instanceof Token);\n  }\n\n","sourceOld":"  public void testTokenAttributeFactory() throws Exception {\n    TokenStream ts = new MockTokenizer(Token.TOKEN_ATTRIBUTE_FACTORY, new StringReader(\"foo bar\"), MockTokenizer.WHITESPACE, false, MockTokenizer.DEFAULT_MAX_TOKEN_LENGTH);\n    \n    assertTrue(\"SenselessAttribute is not implemented by SenselessAttributeImpl\",\n      ts.addAttribute(SenselessAttribute.class) instanceof SenselessAttributeImpl);\n    \n    assertTrue(\"CharTermAttribute is not implemented by Token\",\n      ts.addAttribute(CharTermAttribute.class) instanceof Token);\n    assertTrue(\"OffsetAttribute is not implemented by Token\",\n      ts.addAttribute(OffsetAttribute.class) instanceof Token);\n    assertTrue(\"FlagsAttribute is not implemented by Token\",\n      ts.addAttribute(FlagsAttribute.class) instanceof Token);\n    assertTrue(\"PayloadAttribute is not implemented by Token\",\n      ts.addAttribute(PayloadAttribute.class) instanceof Token);\n    assertTrue(\"PositionIncrementAttribute is not implemented by Token\", \n      ts.addAttribute(PositionIncrementAttribute.class) instanceof Token);\n    assertTrue(\"TypeAttribute is not implemented by Token\",\n      ts.addAttribute(TypeAttribute.class) instanceof Token);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c3ba5366b7a7f11839e9c824b23007f048d002f6":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a":["c3ba5366b7a7f11839e9c824b23007f048d002f6","84fc017ed7c9f13d0cb96bce55a5909f7d6161b6"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["84fc017ed7c9f13d0cb96bce55a5909f7d6161b6"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c3ba5366b7a7f11839e9c824b23007f048d002f6","84fc017ed7c9f13d0cb96bce55a5909f7d6161b6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"84fc017ed7c9f13d0cb96bce55a5909f7d6161b6":["c3ba5366b7a7f11839e9c824b23007f048d002f6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["a775c547c3519b47efd41c09cb47100ddb9604c7"],"a775c547c3519b47efd41c09cb47100ddb9604c7":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c3ba5366b7a7f11839e9c824b23007f048d002f6":["5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","a3776dccca01c11e7046323cfad46a3b4a471233","84fc017ed7c9f13d0cb96bce55a5909f7d6161b6"],"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"84fc017ed7c9f13d0cb96bce55a5909f7d6161b6":["5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","3a119bbc8703c10faa329ec201c654b3a35a1e3e","a3776dccca01c11e7046323cfad46a3b4a471233"],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["c3ba5366b7a7f11839e9c824b23007f048d002f6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"a775c547c3519b47efd41c09cb47100ddb9604c7":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a775c547c3519b47efd41c09cb47100ddb9604c7"]},"heads":["5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}