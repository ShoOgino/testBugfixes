{"path":"src/test/org/apache/lucene/index/TestIndexReaderClone#testSegmentReaderDelDocsReferenceCounting().mjava","commits":[{"id":"6db660b56f04fdb2853d25cdee8ee0d36559a521","date":1233313968,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderClone#testSegmentReaderDelDocsReferenceCounting().mjava","pathOld":"/dev/null","sourceNew":"  public void testSegmentReaderDelDocsReferenceCounting() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n    TestIndexReaderReopen.createIndex(dir1, false);\n    SegmentReader origSegmentReader = (SegmentReader) IndexReader.open(dir1);\n    // deletedDocsRef should be null because nothing has updated yet\n    assertNull(origSegmentReader.deletedDocsRef);\n\n    // we deleted a document, so there is now a deletedDocs bitvector and a\n    // reference to it\n    origSegmentReader.deleteDocument(1);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n\n    // the cloned segmentreader should have 2 references, 1 to itself, and 1 to\n    // the original segmentreader\n    SegmentReader clonedSegmentReader = (SegmentReader) origSegmentReader\n        .clone();\n    assertDelDocsRefCountEquals(2, origSegmentReader);\n    // deleting a document creates a new deletedDocs bitvector, the refs goes to\n    // 1\n    clonedSegmentReader.deleteDocument(2);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // make sure the deletedocs objects are different (copy\n    // on write)\n    assertTrue(origSegmentReader.deletedDocs != clonedSegmentReader.deletedDocs);\n\n    assertDocDeleted(origSegmentReader, clonedSegmentReader, 1);\n    assertTrue(!origSegmentReader.isDeleted(2)); // doc 2 should not be deleted\n                                                  // in original segmentreader\n    assertTrue(clonedSegmentReader.isDeleted(2)); // doc 2 should be deleted in\n                                                  // cloned segmentreader\n\n    // deleting a doc from the original segmentreader should throw an exception\n    try {\n      origSegmentReader.deleteDocument(4);\n      fail(\"expected exception\");\n    } catch (LockObtainFailedException lbfe) {\n      // expected\n    }\n\n    origSegmentReader.close();\n    // try closing the original segment reader to see if it affects the\n    // clonedSegmentReader\n    clonedSegmentReader.deleteDocument(3);\n    clonedSegmentReader.flush();\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // test a reopened reader\n    SegmentReader reopenedSegmentReader = (SegmentReader) clonedSegmentReader\n        .reopen();\n    SegmentReader cloneSegmentReader2 = (SegmentReader) reopenedSegmentReader\n        .clone();\n    assertDelDocsRefCountEquals(2, cloneSegmentReader2);\n    clonedSegmentReader.close();\n    reopenedSegmentReader.close();\n    cloneSegmentReader2.close();\n\n    dir1.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["406e7055a3e99d3fa6ce49a555a51dd18b321806"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1","date":1244392278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderClone#testSegmentReaderDelDocsReferenceCounting().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderClone#testSegmentReaderDelDocsReferenceCounting().mjava","sourceNew":"  public void testSegmentReaderDelDocsReferenceCounting() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n    TestIndexReaderReopen.createIndex(dir1, false);\n\n    IndexReader origReader = IndexReader.open(dir1);\n    SegmentReader origSegmentReader = SegmentReader.getOnlySegmentReader(origReader);\n    // deletedDocsRef should be null because nothing has updated yet\n    assertNull(origSegmentReader.deletedDocsRef);\n\n    // we deleted a document, so there is now a deletedDocs bitvector and a\n    // reference to it\n    origReader.deleteDocument(1);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n\n    // the cloned segmentreader should have 2 references, 1 to itself, and 1 to\n    // the original segmentreader\n    IndexReader clonedReader = (IndexReader) origReader.clone();\n    SegmentReader clonedSegmentReader = SegmentReader.getOnlySegmentReader(clonedReader);\n    assertDelDocsRefCountEquals(2, origSegmentReader);\n    // deleting a document creates a new deletedDocs bitvector, the refs goes to\n    // 1\n    clonedReader.deleteDocument(2);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // make sure the deletedocs objects are different (copy\n    // on write)\n    assertTrue(origSegmentReader.deletedDocs != clonedSegmentReader.deletedDocs);\n\n    assertDocDeleted(origSegmentReader, clonedSegmentReader, 1);\n    assertTrue(!origSegmentReader.isDeleted(2)); // doc 2 should not be deleted\n                                                  // in original segmentreader\n    assertTrue(clonedSegmentReader.isDeleted(2)); // doc 2 should be deleted in\n                                                  // cloned segmentreader\n\n    // deleting a doc from the original segmentreader should throw an exception\n    try {\n      origReader.deleteDocument(4);\n      fail(\"expected exception\");\n    } catch (LockObtainFailedException lbfe) {\n      // expected\n    }\n\n    origReader.close();\n    // try closing the original segment reader to see if it affects the\n    // clonedSegmentReader\n    clonedReader.deleteDocument(3);\n    clonedReader.flush();\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // test a reopened reader\n    IndexReader reopenedReader = clonedReader.reopen();\n    IndexReader cloneReader2 = (IndexReader) reopenedReader.clone();\n    SegmentReader cloneSegmentReader2 = SegmentReader.getOnlySegmentReader(cloneReader2);\n    assertDelDocsRefCountEquals(2, cloneSegmentReader2);\n    clonedReader.close();\n    reopenedReader.close();\n    cloneReader2.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  public void testSegmentReaderDelDocsReferenceCounting() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n    TestIndexReaderReopen.createIndex(dir1, false);\n    SegmentReader origSegmentReader = (SegmentReader) IndexReader.open(dir1);\n    // deletedDocsRef should be null because nothing has updated yet\n    assertNull(origSegmentReader.deletedDocsRef);\n\n    // we deleted a document, so there is now a deletedDocs bitvector and a\n    // reference to it\n    origSegmentReader.deleteDocument(1);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n\n    // the cloned segmentreader should have 2 references, 1 to itself, and 1 to\n    // the original segmentreader\n    SegmentReader clonedSegmentReader = (SegmentReader) origSegmentReader\n        .clone();\n    assertDelDocsRefCountEquals(2, origSegmentReader);\n    // deleting a document creates a new deletedDocs bitvector, the refs goes to\n    // 1\n    clonedSegmentReader.deleteDocument(2);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // make sure the deletedocs objects are different (copy\n    // on write)\n    assertTrue(origSegmentReader.deletedDocs != clonedSegmentReader.deletedDocs);\n\n    assertDocDeleted(origSegmentReader, clonedSegmentReader, 1);\n    assertTrue(!origSegmentReader.isDeleted(2)); // doc 2 should not be deleted\n                                                  // in original segmentreader\n    assertTrue(clonedSegmentReader.isDeleted(2)); // doc 2 should be deleted in\n                                                  // cloned segmentreader\n\n    // deleting a doc from the original segmentreader should throw an exception\n    try {\n      origSegmentReader.deleteDocument(4);\n      fail(\"expected exception\");\n    } catch (LockObtainFailedException lbfe) {\n      // expected\n    }\n\n    origSegmentReader.close();\n    // try closing the original segment reader to see if it affects the\n    // clonedSegmentReader\n    clonedSegmentReader.deleteDocument(3);\n    clonedSegmentReader.flush();\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // test a reopened reader\n    SegmentReader reopenedSegmentReader = (SegmentReader) clonedSegmentReader\n        .reopen();\n    SegmentReader cloneSegmentReader2 = (SegmentReader) reopenedSegmentReader\n        .clone();\n    assertDelDocsRefCountEquals(2, cloneSegmentReader2);\n    clonedSegmentReader.close();\n    reopenedSegmentReader.close();\n    cloneSegmentReader2.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderClone#testSegmentReaderDelDocsReferenceCounting().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderClone#testSegmentReaderDelDocsReferenceCounting().mjava","sourceNew":"  public void testSegmentReaderDelDocsReferenceCounting() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n    TestIndexReaderReopen.createIndex(dir1, false);\n\n    IndexReader origReader = IndexReader.open(dir1, false);\n    SegmentReader origSegmentReader = SegmentReader.getOnlySegmentReader(origReader);\n    // deletedDocsRef should be null because nothing has updated yet\n    assertNull(origSegmentReader.deletedDocsRef);\n\n    // we deleted a document, so there is now a deletedDocs bitvector and a\n    // reference to it\n    origReader.deleteDocument(1);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n\n    // the cloned segmentreader should have 2 references, 1 to itself, and 1 to\n    // the original segmentreader\n    IndexReader clonedReader = (IndexReader) origReader.clone();\n    SegmentReader clonedSegmentReader = SegmentReader.getOnlySegmentReader(clonedReader);\n    assertDelDocsRefCountEquals(2, origSegmentReader);\n    // deleting a document creates a new deletedDocs bitvector, the refs goes to\n    // 1\n    clonedReader.deleteDocument(2);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // make sure the deletedocs objects are different (copy\n    // on write)\n    assertTrue(origSegmentReader.deletedDocs != clonedSegmentReader.deletedDocs);\n\n    assertDocDeleted(origSegmentReader, clonedSegmentReader, 1);\n    assertTrue(!origSegmentReader.isDeleted(2)); // doc 2 should not be deleted\n                                                  // in original segmentreader\n    assertTrue(clonedSegmentReader.isDeleted(2)); // doc 2 should be deleted in\n                                                  // cloned segmentreader\n\n    // deleting a doc from the original segmentreader should throw an exception\n    try {\n      origReader.deleteDocument(4);\n      fail(\"expected exception\");\n    } catch (LockObtainFailedException lbfe) {\n      // expected\n    }\n\n    origReader.close();\n    // try closing the original segment reader to see if it affects the\n    // clonedSegmentReader\n    clonedReader.deleteDocument(3);\n    clonedReader.flush();\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // test a reopened reader\n    IndexReader reopenedReader = clonedReader.reopen();\n    IndexReader cloneReader2 = (IndexReader) reopenedReader.clone();\n    SegmentReader cloneSegmentReader2 = SegmentReader.getOnlySegmentReader(cloneReader2);\n    assertDelDocsRefCountEquals(2, cloneSegmentReader2);\n    clonedReader.close();\n    reopenedReader.close();\n    cloneReader2.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  public void testSegmentReaderDelDocsReferenceCounting() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n    TestIndexReaderReopen.createIndex(dir1, false);\n\n    IndexReader origReader = IndexReader.open(dir1);\n    SegmentReader origSegmentReader = SegmentReader.getOnlySegmentReader(origReader);\n    // deletedDocsRef should be null because nothing has updated yet\n    assertNull(origSegmentReader.deletedDocsRef);\n\n    // we deleted a document, so there is now a deletedDocs bitvector and a\n    // reference to it\n    origReader.deleteDocument(1);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n\n    // the cloned segmentreader should have 2 references, 1 to itself, and 1 to\n    // the original segmentreader\n    IndexReader clonedReader = (IndexReader) origReader.clone();\n    SegmentReader clonedSegmentReader = SegmentReader.getOnlySegmentReader(clonedReader);\n    assertDelDocsRefCountEquals(2, origSegmentReader);\n    // deleting a document creates a new deletedDocs bitvector, the refs goes to\n    // 1\n    clonedReader.deleteDocument(2);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // make sure the deletedocs objects are different (copy\n    // on write)\n    assertTrue(origSegmentReader.deletedDocs != clonedSegmentReader.deletedDocs);\n\n    assertDocDeleted(origSegmentReader, clonedSegmentReader, 1);\n    assertTrue(!origSegmentReader.isDeleted(2)); // doc 2 should not be deleted\n                                                  // in original segmentreader\n    assertTrue(clonedSegmentReader.isDeleted(2)); // doc 2 should be deleted in\n                                                  // cloned segmentreader\n\n    // deleting a doc from the original segmentreader should throw an exception\n    try {\n      origReader.deleteDocument(4);\n      fail(\"expected exception\");\n    } catch (LockObtainFailedException lbfe) {\n      // expected\n    }\n\n    origReader.close();\n    // try closing the original segment reader to see if it affects the\n    // clonedSegmentReader\n    clonedReader.deleteDocument(3);\n    clonedReader.flush();\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // test a reopened reader\n    IndexReader reopenedReader = clonedReader.reopen();\n    IndexReader cloneReader2 = (IndexReader) reopenedReader.clone();\n    SegmentReader cloneSegmentReader2 = SegmentReader.getOnlySegmentReader(cloneReader2);\n    assertDelDocsRefCountEquals(2, cloneSegmentReader2);\n    clonedReader.close();\n    reopenedReader.close();\n    cloneReader2.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderClone#testSegmentReaderDelDocsReferenceCounting().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderClone#testSegmentReaderDelDocsReferenceCounting().mjava","sourceNew":"  public void testSegmentReaderDelDocsReferenceCounting() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n    TestIndexReaderReopen.createIndex(dir1, false);\n\n    IndexReader origReader = IndexReader.open(dir1, false);\n    SegmentReader origSegmentReader = SegmentReader.getOnlySegmentReader(origReader);\n    // deletedDocsRef should be null because nothing has updated yet\n    assertNull(origSegmentReader.deletedDocsRef);\n\n    // we deleted a document, so there is now a deletedDocs bitvector and a\n    // reference to it\n    origReader.deleteDocument(1);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n\n    // the cloned segmentreader should have 2 references, 1 to itself, and 1 to\n    // the original segmentreader\n    IndexReader clonedReader = (IndexReader) origReader.clone();\n    SegmentReader clonedSegmentReader = SegmentReader.getOnlySegmentReader(clonedReader);\n    assertDelDocsRefCountEquals(2, origSegmentReader);\n    // deleting a document creates a new deletedDocs bitvector, the refs goes to\n    // 1\n    clonedReader.deleteDocument(2);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // make sure the deletedocs objects are different (copy\n    // on write)\n    assertTrue(origSegmentReader.deletedDocs != clonedSegmentReader.deletedDocs);\n\n    assertDocDeleted(origSegmentReader, clonedSegmentReader, 1);\n    assertTrue(!origSegmentReader.isDeleted(2)); // doc 2 should not be deleted\n                                                  // in original segmentreader\n    assertTrue(clonedSegmentReader.isDeleted(2)); // doc 2 should be deleted in\n                                                  // cloned segmentreader\n\n    // deleting a doc from the original segmentreader should throw an exception\n    try {\n      origReader.deleteDocument(4);\n      fail(\"expected exception\");\n    } catch (LockObtainFailedException lbfe) {\n      // expected\n    }\n\n    origReader.close();\n    // try closing the original segment reader to see if it affects the\n    // clonedSegmentReader\n    clonedReader.deleteDocument(3);\n    clonedReader.flush();\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // test a reopened reader\n    IndexReader reopenedReader = clonedReader.reopen();\n    IndexReader cloneReader2 = (IndexReader) reopenedReader.clone();\n    SegmentReader cloneSegmentReader2 = SegmentReader.getOnlySegmentReader(cloneReader2);\n    assertDelDocsRefCountEquals(2, cloneSegmentReader2);\n    clonedReader.close();\n    reopenedReader.close();\n    cloneReader2.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  public void testSegmentReaderDelDocsReferenceCounting() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n    TestIndexReaderReopen.createIndex(dir1, false);\n\n    IndexReader origReader = IndexReader.open(dir1);\n    SegmentReader origSegmentReader = SegmentReader.getOnlySegmentReader(origReader);\n    // deletedDocsRef should be null because nothing has updated yet\n    assertNull(origSegmentReader.deletedDocsRef);\n\n    // we deleted a document, so there is now a deletedDocs bitvector and a\n    // reference to it\n    origReader.deleteDocument(1);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n\n    // the cloned segmentreader should have 2 references, 1 to itself, and 1 to\n    // the original segmentreader\n    IndexReader clonedReader = (IndexReader) origReader.clone();\n    SegmentReader clonedSegmentReader = SegmentReader.getOnlySegmentReader(clonedReader);\n    assertDelDocsRefCountEquals(2, origSegmentReader);\n    // deleting a document creates a new deletedDocs bitvector, the refs goes to\n    // 1\n    clonedReader.deleteDocument(2);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // make sure the deletedocs objects are different (copy\n    // on write)\n    assertTrue(origSegmentReader.deletedDocs != clonedSegmentReader.deletedDocs);\n\n    assertDocDeleted(origSegmentReader, clonedSegmentReader, 1);\n    assertTrue(!origSegmentReader.isDeleted(2)); // doc 2 should not be deleted\n                                                  // in original segmentreader\n    assertTrue(clonedSegmentReader.isDeleted(2)); // doc 2 should be deleted in\n                                                  // cloned segmentreader\n\n    // deleting a doc from the original segmentreader should throw an exception\n    try {\n      origReader.deleteDocument(4);\n      fail(\"expected exception\");\n    } catch (LockObtainFailedException lbfe) {\n      // expected\n    }\n\n    origReader.close();\n    // try closing the original segment reader to see if it affects the\n    // clonedSegmentReader\n    clonedReader.deleteDocument(3);\n    clonedReader.flush();\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // test a reopened reader\n    IndexReader reopenedReader = clonedReader.reopen();\n    IndexReader cloneReader2 = (IndexReader) reopenedReader.clone();\n    SegmentReader cloneSegmentReader2 = SegmentReader.getOnlySegmentReader(cloneReader2);\n    assertDelDocsRefCountEquals(2, cloneSegmentReader2);\n    clonedReader.close();\n    reopenedReader.close();\n    cloneReader2.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testSegmentReaderDelDocsReferenceCounting().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderClone#testSegmentReaderDelDocsReferenceCounting().mjava","sourceNew":"  public void testSegmentReaderDelDocsReferenceCounting() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n    TestIndexReaderReopen.createIndex(dir1, false);\n\n    IndexReader origReader = IndexReader.open(dir1, false);\n    SegmentReader origSegmentReader = SegmentReader.getOnlySegmentReader(origReader);\n    // deletedDocsRef should be null because nothing has updated yet\n    assertNull(origSegmentReader.deletedDocsRef);\n\n    // we deleted a document, so there is now a deletedDocs bitvector and a\n    // reference to it\n    origReader.deleteDocument(1);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n\n    // the cloned segmentreader should have 2 references, 1 to itself, and 1 to\n    // the original segmentreader\n    IndexReader clonedReader = (IndexReader) origReader.clone();\n    SegmentReader clonedSegmentReader = SegmentReader.getOnlySegmentReader(clonedReader);\n    assertDelDocsRefCountEquals(2, origSegmentReader);\n    // deleting a document creates a new deletedDocs bitvector, the refs goes to\n    // 1\n    clonedReader.deleteDocument(2);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // make sure the deletedocs objects are different (copy\n    // on write)\n    assertTrue(origSegmentReader.deletedDocs != clonedSegmentReader.deletedDocs);\n\n    assertDocDeleted(origSegmentReader, clonedSegmentReader, 1);\n    assertTrue(!origSegmentReader.isDeleted(2)); // doc 2 should not be deleted\n                                                  // in original segmentreader\n    assertTrue(clonedSegmentReader.isDeleted(2)); // doc 2 should be deleted in\n                                                  // cloned segmentreader\n\n    // deleting a doc from the original segmentreader should throw an exception\n    try {\n      origReader.deleteDocument(4);\n      fail(\"expected exception\");\n    } catch (LockObtainFailedException lbfe) {\n      // expected\n    }\n\n    origReader.close();\n    // try closing the original segment reader to see if it affects the\n    // clonedSegmentReader\n    clonedReader.deleteDocument(3);\n    clonedReader.flush();\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // test a reopened reader\n    IndexReader reopenedReader = clonedReader.reopen();\n    IndexReader cloneReader2 = (IndexReader) reopenedReader.clone();\n    SegmentReader cloneSegmentReader2 = SegmentReader.getOnlySegmentReader(cloneReader2);\n    assertDelDocsRefCountEquals(2, cloneSegmentReader2);\n    clonedReader.close();\n    reopenedReader.close();\n    cloneReader2.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  public void testSegmentReaderDelDocsReferenceCounting() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n    TestIndexReaderReopen.createIndex(dir1, false);\n\n    IndexReader origReader = IndexReader.open(dir1, false);\n    SegmentReader origSegmentReader = SegmentReader.getOnlySegmentReader(origReader);\n    // deletedDocsRef should be null because nothing has updated yet\n    assertNull(origSegmentReader.deletedDocsRef);\n\n    // we deleted a document, so there is now a deletedDocs bitvector and a\n    // reference to it\n    origReader.deleteDocument(1);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n\n    // the cloned segmentreader should have 2 references, 1 to itself, and 1 to\n    // the original segmentreader\n    IndexReader clonedReader = (IndexReader) origReader.clone();\n    SegmentReader clonedSegmentReader = SegmentReader.getOnlySegmentReader(clonedReader);\n    assertDelDocsRefCountEquals(2, origSegmentReader);\n    // deleting a document creates a new deletedDocs bitvector, the refs goes to\n    // 1\n    clonedReader.deleteDocument(2);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // make sure the deletedocs objects are different (copy\n    // on write)\n    assertTrue(origSegmentReader.deletedDocs != clonedSegmentReader.deletedDocs);\n\n    assertDocDeleted(origSegmentReader, clonedSegmentReader, 1);\n    assertTrue(!origSegmentReader.isDeleted(2)); // doc 2 should not be deleted\n                                                  // in original segmentreader\n    assertTrue(clonedSegmentReader.isDeleted(2)); // doc 2 should be deleted in\n                                                  // cloned segmentreader\n\n    // deleting a doc from the original segmentreader should throw an exception\n    try {\n      origReader.deleteDocument(4);\n      fail(\"expected exception\");\n    } catch (LockObtainFailedException lbfe) {\n      // expected\n    }\n\n    origReader.close();\n    // try closing the original segment reader to see if it affects the\n    // clonedSegmentReader\n    clonedReader.deleteDocument(3);\n    clonedReader.flush();\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // test a reopened reader\n    IndexReader reopenedReader = clonedReader.reopen();\n    IndexReader cloneReader2 = (IndexReader) reopenedReader.clone();\n    SegmentReader cloneSegmentReader2 = SegmentReader.getOnlySegmentReader(cloneReader2);\n    assertDelDocsRefCountEquals(2, cloneSegmentReader2);\n    clonedReader.close();\n    reopenedReader.close();\n    cloneReader2.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6db660b56f04fdb2853d25cdee8ee0d36559a521":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0a046c0c310bc77931fc8441bd920053b607dd14"]},"commit2Childs":{"6db660b56f04fdb2853d25cdee8ee0d36559a521":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"0a046c0c310bc77931fc8441bd920053b607dd14":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}