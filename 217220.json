{"path":"solr/contrib/analysis-extras/src/test/org/apache/solr/analysis/TestICUCollationKeyFilterFactory#testNormalization().mjava","commits":[{"id":"f0c5ccd1fd9ff98f683730d84e4768468ed0da6c","date":1288699398,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/analysis-extras/src/test/org/apache/solr/analysis/TestICUCollationKeyFilterFactory#testNormalization().mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * Test usage of the decomposition option for unicode normalization.\n   */\n  public void testNormalization() throws IOException {\n    String turkishUpperCase = \"I W\\u0049\\u0307LL USE TURKİSH CASING\";\n    String turkishLowerCase = \"ı will use turkish casıng\";\n    ICUCollationKeyFilterFactory factory = new ICUCollationKeyFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"locale\", \"tr\");\n    args.put(\"strength\", \"primary\");\n    args.put(\"decomposition\", \"canonical\");\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(\"\"));\n    TokenStream tsUpper = factory.create(\n        new KeywordTokenizer(new StringReader(turkishUpperCase)));\n    TokenStream tsLower = factory.create(\n        new KeywordTokenizer(new StringReader(turkishLowerCase)));\n    assertCollatesToSame(tsUpper, tsLower);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/analysis-extras/src/test/org/apache/solr/analysis/TestICUCollationKeyFilterFactory#testNormalization().mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * Test usage of the decomposition option for unicode normalization.\n   */\n  public void testNormalization() throws IOException {\n    String turkishUpperCase = \"I W\\u0049\\u0307LL USE TURKİSH CASING\";\n    String turkishLowerCase = \"ı will use turkish casıng\";\n    ICUCollationKeyFilterFactory factory = new ICUCollationKeyFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"locale\", \"tr\");\n    args.put(\"strength\", \"primary\");\n    args.put(\"decomposition\", \"canonical\");\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(\"\"));\n    TokenStream tsUpper = factory.create(\n        new KeywordTokenizer(new StringReader(turkishUpperCase)));\n    TokenStream tsLower = factory.create(\n        new KeywordTokenizer(new StringReader(turkishLowerCase)));\n    assertCollatesToSame(tsUpper, tsLower);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/contrib/analysis-extras/src/test/org/apache/solr/analysis/TestICUCollationKeyFilterFactory#testNormalization().mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * Test usage of the decomposition option for unicode normalization.\n   */\n  public void testNormalization() throws IOException {\n    String turkishUpperCase = \"I W\\u0049\\u0307LL USE TURKİSH CASING\";\n    String turkishLowerCase = \"ı will use turkish casıng\";\n    ICUCollationKeyFilterFactory factory = new ICUCollationKeyFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"locale\", \"tr\");\n    args.put(\"strength\", \"primary\");\n    args.put(\"decomposition\", \"canonical\");\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(\"\"));\n    TokenStream tsUpper = factory.create(\n        new KeywordTokenizer(new StringReader(turkishUpperCase)));\n    TokenStream tsLower = factory.create(\n        new KeywordTokenizer(new StringReader(turkishLowerCase)));\n    assertCollatesToSame(tsUpper, tsLower);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/analysis-extras/src/test/java/org/apache/solr/analysis/TestICUCollationKeyFilterFactory#testNormalization().mjava","pathOld":"solr/contrib/analysis-extras/src/test/org/apache/solr/analysis/TestICUCollationKeyFilterFactory#testNormalization().mjava","sourceNew":"  /*\n   * Test usage of the decomposition option for unicode normalization.\n   */\n  public void testNormalization() throws IOException {\n    String turkishUpperCase = \"I W\\u0049\\u0307LL USE TURKİSH CASING\";\n    String turkishLowerCase = \"ı will use turkish casıng\";\n    ICUCollationKeyFilterFactory factory = new ICUCollationKeyFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"locale\", \"tr\");\n    args.put(\"strength\", \"primary\");\n    args.put(\"decomposition\", \"canonical\");\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(\"\"));\n    TokenStream tsUpper = factory.create(\n        new KeywordTokenizer(new StringReader(turkishUpperCase)));\n    TokenStream tsLower = factory.create(\n        new KeywordTokenizer(new StringReader(turkishLowerCase)));\n    assertCollatesToSame(tsUpper, tsLower);\n  }\n\n","sourceOld":"  /*\n   * Test usage of the decomposition option for unicode normalization.\n   */\n  public void testNormalization() throws IOException {\n    String turkishUpperCase = \"I W\\u0049\\u0307LL USE TURKİSH CASING\";\n    String turkishLowerCase = \"ı will use turkish casıng\";\n    ICUCollationKeyFilterFactory factory = new ICUCollationKeyFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"locale\", \"tr\");\n    args.put(\"strength\", \"primary\");\n    args.put(\"decomposition\", \"canonical\");\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(\"\"));\n    TokenStream tsUpper = factory.create(\n        new KeywordTokenizer(new StringReader(turkishUpperCase)));\n    TokenStream tsLower = factory.create(\n        new KeywordTokenizer(new StringReader(turkishLowerCase)));\n    assertCollatesToSame(tsUpper, tsLower);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/analysis-extras/src/test/org/apache/solr/analysis/TestICUCollationKeyFilterFactory#testNormalization().mjava","pathOld":"solr/contrib/analysis-extras/src/test/java/org/apache/solr/analysis/TestICUCollationKeyFilterFactory#testNormalization().mjava","sourceNew":"  /*\n   * Test usage of the decomposition option for unicode normalization.\n   */\n  public void testNormalization() throws IOException {\n    String turkishUpperCase = \"I W\\u0049\\u0307LL USE TURKİSH CASING\";\n    String turkishLowerCase = \"ı will use turkish casıng\";\n    ICUCollationKeyFilterFactory factory = new ICUCollationKeyFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"locale\", \"tr\");\n    args.put(\"strength\", \"primary\");\n    args.put(\"decomposition\", \"canonical\");\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(\"\"));\n    TokenStream tsUpper = factory.create(\n        new KeywordTokenizer(new StringReader(turkishUpperCase)));\n    TokenStream tsLower = factory.create(\n        new KeywordTokenizer(new StringReader(turkishLowerCase)));\n    assertCollatesToSame(tsUpper, tsLower);\n  }\n\n","sourceOld":"  /*\n   * Test usage of the decomposition option for unicode normalization.\n   */\n  public void testNormalization() throws IOException {\n    String turkishUpperCase = \"I W\\u0049\\u0307LL USE TURKİSH CASING\";\n    String turkishLowerCase = \"ı will use turkish casıng\";\n    ICUCollationKeyFilterFactory factory = new ICUCollationKeyFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"locale\", \"tr\");\n    args.put(\"strength\", \"primary\");\n    args.put(\"decomposition\", \"canonical\");\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(\"\"));\n    TokenStream tsUpper = factory.create(\n        new KeywordTokenizer(new StringReader(turkishUpperCase)));\n    TokenStream tsLower = factory.create(\n        new KeywordTokenizer(new StringReader(turkishLowerCase)));\n    assertCollatesToSame(tsUpper, tsLower);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/analysis-extras/src/test/org/apache/solr/analysis/TestICUCollationKeyFilterFactory#testNormalization().mjava","sourceNew":null,"sourceOld":"  /*\n   * Test usage of the decomposition option for unicode normalization.\n   */\n  public void testNormalization() throws IOException {\n    String turkishUpperCase = \"I W\\u0049\\u0307LL USE TURKİSH CASING\";\n    String turkishLowerCase = \"ı will use turkish casıng\";\n    ICUCollationKeyFilterFactory factory = new ICUCollationKeyFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"locale\", \"tr\");\n    args.put(\"strength\", \"primary\");\n    args.put(\"decomposition\", \"canonical\");\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(\"\"));\n    TokenStream tsUpper = factory.create(\n        new KeywordTokenizer(new StringReader(turkishUpperCase)));\n    TokenStream tsLower = factory.create(\n        new KeywordTokenizer(new StringReader(turkishLowerCase)));\n    assertCollatesToSame(tsUpper, tsLower);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f0c5ccd1fd9ff98f683730d84e4768468ed0da6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["f0c5ccd1fd9ff98f683730d84e4768468ed0da6c"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","f0c5ccd1fd9ff98f683730d84e4768468ed0da6c"],"a3776dccca01c11e7046323cfad46a3b4a471233":["f0c5ccd1fd9ff98f683730d84e4768468ed0da6c","f0c5ccd1fd9ff98f683730d84e4768468ed0da6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a883878c0af761245ab048babc63d099f835f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0c5ccd1fd9ff98f683730d84e4768468ed0da6c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0c5ccd1fd9ff98f683730d84e4768468ed0da6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"]},"commit2Childs":{"f0c5ccd1fd9ff98f683730d84e4768468ed0da6c":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","a3776dccca01c11e7046323cfad46a3b4a471233","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f0c5ccd1fd9ff98f683730d84e4768468ed0da6c","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"85a883878c0af761245ab048babc63d099f835f3":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}