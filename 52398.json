{"path":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fillSolrCloudSection(NamedList[Object]).mjava","commits":[{"id":"e15199583d3635cb940942caed05132dd6c4c7c6","date":1424875551,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fillSolrCloudSection(NamedList[Object]).mjava","pathOld":"/dev/null","sourceNew":"  private static CloudConfig fillSolrCloudSection(NamedList<Object> nl) {\n\n    String hostName = required(\"solrcloud\", \"host\", removeValue(nl, \"host\"));\n    int hostPort = parseInt(\"hostPort\", required(\"solrcloud\", \"hostPort\", removeValue(nl, \"hostPort\")));\n    String hostContext = required(\"solrcloud\", \"hostContext\", removeValue(nl, \"hostContext\"));\n\n    CloudConfig.CloudConfigBuilder builder = new CloudConfig.CloudConfigBuilder(hostName, hostPort, hostContext);\n\n    for (Map.Entry<String, Object> entry : nl) {\n      String name = entry.getKey();\n      if (entry.getValue() == null)\n        continue;\n      String value = entry.getValue().toString();\n      switch (name) {\n        case \"leaderVoteWait\":\n          builder.setLeaderVoteWait(parseInt(name, value));\n          break;\n        case \"leaderConflictResolveWait\":\n          builder.setLeaderConflictResolveWait(parseInt(name, value));\n          break;\n        case \"zkClientTimeout\":\n          builder.setZkClientTimeout(parseInt(name, value));\n          break;\n        case \"autoReplicaFailoverBadNodeExpiration\":\n          builder.setAutoReplicaFailoverBadNodeExpiration(parseInt(name, value));\n          break;\n        case \"autoReplicaFailoverWaitAfterExpiration\":\n          builder.setAutoReplicaFailoverWaitAfterExpiration(parseInt(name, value));\n          break;\n        case \"autoReplicaFailoverWorkLoopDelay\":\n          builder.setAutoReplicaFailoverWorkLoopDelay(parseInt(name, value));\n          break;\n        case \"zkHost\":\n          builder.setZkHost(value);\n          break;\n        case \"genericCoreNodeNames\":\n          builder.setUseGenericCoreNames(Boolean.parseBoolean(value));\n          break;\n        case \"zkACLProvider\":\n          builder.setZkACLProviderClass(value);\n          break;\n        case \"zkCredientialsProvider\":\n          builder.setZkCredentialsProviderClass(value);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown configuration parameter in <solrcloud> section of solr.xml: \" + name);\n      }\n    }\n\n    return builder.build();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f94e3cd399f3275b48f601d95bc80d6d9b7fc4ca"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fillSolrCloudSection(NamedList[Object]).mjava","pathOld":"/dev/null","sourceNew":"  private static CloudConfig fillSolrCloudSection(NamedList<Object> nl) {\n\n    String hostName = required(\"solrcloud\", \"host\", removeValue(nl, \"host\"));\n    int hostPort = parseInt(\"hostPort\", required(\"solrcloud\", \"hostPort\", removeValue(nl, \"hostPort\")));\n    String hostContext = required(\"solrcloud\", \"hostContext\", removeValue(nl, \"hostContext\"));\n\n    CloudConfig.CloudConfigBuilder builder = new CloudConfig.CloudConfigBuilder(hostName, hostPort, hostContext);\n\n    for (Map.Entry<String, Object> entry : nl) {\n      String name = entry.getKey();\n      if (entry.getValue() == null)\n        continue;\n      String value = entry.getValue().toString();\n      switch (name) {\n        case \"leaderVoteWait\":\n          builder.setLeaderVoteWait(parseInt(name, value));\n          break;\n        case \"leaderConflictResolveWait\":\n          builder.setLeaderConflictResolveWait(parseInt(name, value));\n          break;\n        case \"zkClientTimeout\":\n          builder.setZkClientTimeout(parseInt(name, value));\n          break;\n        case \"autoReplicaFailoverBadNodeExpiration\":\n          builder.setAutoReplicaFailoverBadNodeExpiration(parseInt(name, value));\n          break;\n        case \"autoReplicaFailoverWaitAfterExpiration\":\n          builder.setAutoReplicaFailoverWaitAfterExpiration(parseInt(name, value));\n          break;\n        case \"autoReplicaFailoverWorkLoopDelay\":\n          builder.setAutoReplicaFailoverWorkLoopDelay(parseInt(name, value));\n          break;\n        case \"zkHost\":\n          builder.setZkHost(value);\n          break;\n        case \"genericCoreNodeNames\":\n          builder.setUseGenericCoreNames(Boolean.parseBoolean(value));\n          break;\n        case \"zkACLProvider\":\n          builder.setZkACLProviderClass(value);\n          break;\n        case \"zkCredientialsProvider\":\n          builder.setZkCredentialsProviderClass(value);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown configuration parameter in <solrcloud> section of solr.xml: \" + name);\n      }\n    }\n\n    return builder.build();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04983a1b95aca878f0db04dda112e321ea6483f8","date":1434226973,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fillSolrCloudSection(NamedList[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fillSolrCloudSection(NamedList[Object]).mjava","sourceNew":"  private static CloudConfig fillSolrCloudSection(NamedList<Object> nl) {\n\n    String hostName = required(\"solrcloud\", \"host\", removeValue(nl, \"host\"));\n    int hostPort = parseInt(\"hostPort\", required(\"solrcloud\", \"hostPort\", removeValue(nl, \"hostPort\")));\n    String hostContext = required(\"solrcloud\", \"hostContext\", removeValue(nl, \"hostContext\"));\n\n    CloudConfig.CloudConfigBuilder builder = new CloudConfig.CloudConfigBuilder(hostName, hostPort, hostContext);\n\n    for (Map.Entry<String, Object> entry : nl) {\n      String name = entry.getKey();\n      if (entry.getValue() == null)\n        continue;\n      String value = entry.getValue().toString();\n      switch (name) {\n        case \"leaderVoteWait\":\n          builder.setLeaderVoteWait(parseInt(name, value));\n          break;\n        case \"leaderConflictResolveWait\":\n          builder.setLeaderConflictResolveWait(parseInt(name, value));\n          break;\n        case \"zkClientTimeout\":\n          builder.setZkClientTimeout(parseInt(name, value));\n          break;\n        case \"autoReplicaFailoverBadNodeExpiration\":\n          builder.setAutoReplicaFailoverBadNodeExpiration(parseInt(name, value));\n          break;\n        case \"autoReplicaFailoverWaitAfterExpiration\":\n          builder.setAutoReplicaFailoverWaitAfterExpiration(parseInt(name, value));\n          break;\n        case \"autoReplicaFailoverWorkLoopDelay\":\n          builder.setAutoReplicaFailoverWorkLoopDelay(parseInt(name, value));\n          break;\n        case \"zkHost\":\n          builder.setZkHost(value);\n          break;\n        case \"genericCoreNodeNames\":\n          builder.setUseGenericCoreNames(Boolean.parseBoolean(value));\n          break;\n        case \"zkACLProvider\":\n          builder.setZkACLProviderClass(value);\n          break;\n        case \"zkCredientialsProvider\": // deprecated\n        case \"zkCredentialsProvider\":\n          builder.setZkCredentialsProviderClass(value);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown configuration parameter in <solrcloud> section of solr.xml: \" + name);\n      }\n    }\n\n    return builder.build();\n  }\n\n","sourceOld":"  private static CloudConfig fillSolrCloudSection(NamedList<Object> nl) {\n\n    String hostName = required(\"solrcloud\", \"host\", removeValue(nl, \"host\"));\n    int hostPort = parseInt(\"hostPort\", required(\"solrcloud\", \"hostPort\", removeValue(nl, \"hostPort\")));\n    String hostContext = required(\"solrcloud\", \"hostContext\", removeValue(nl, \"hostContext\"));\n\n    CloudConfig.CloudConfigBuilder builder = new CloudConfig.CloudConfigBuilder(hostName, hostPort, hostContext);\n\n    for (Map.Entry<String, Object> entry : nl) {\n      String name = entry.getKey();\n      if (entry.getValue() == null)\n        continue;\n      String value = entry.getValue().toString();\n      switch (name) {\n        case \"leaderVoteWait\":\n          builder.setLeaderVoteWait(parseInt(name, value));\n          break;\n        case \"leaderConflictResolveWait\":\n          builder.setLeaderConflictResolveWait(parseInt(name, value));\n          break;\n        case \"zkClientTimeout\":\n          builder.setZkClientTimeout(parseInt(name, value));\n          break;\n        case \"autoReplicaFailoverBadNodeExpiration\":\n          builder.setAutoReplicaFailoverBadNodeExpiration(parseInt(name, value));\n          break;\n        case \"autoReplicaFailoverWaitAfterExpiration\":\n          builder.setAutoReplicaFailoverWaitAfterExpiration(parseInt(name, value));\n          break;\n        case \"autoReplicaFailoverWorkLoopDelay\":\n          builder.setAutoReplicaFailoverWorkLoopDelay(parseInt(name, value));\n          break;\n        case \"zkHost\":\n          builder.setZkHost(value);\n          break;\n        case \"genericCoreNodeNames\":\n          builder.setUseGenericCoreNames(Boolean.parseBoolean(value));\n          break;\n        case \"zkACLProvider\":\n          builder.setZkACLProviderClass(value);\n          break;\n        case \"zkCredientialsProvider\":\n          builder.setZkCredentialsProviderClass(value);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown configuration parameter in <solrcloud> section of solr.xml: \" + name);\n      }\n    }\n\n    return builder.build();\n  }\n\n","bugFix":null,"bugIntro":["30f0564eb9a880c95340d28e0bf3d2aebb9997bc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"30f0564eb9a880c95340d28e0bf3d2aebb9997bc","date":1434227675,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fillSolrCloudSection(NamedList[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fillSolrCloudSection(NamedList[Object]).mjava","sourceNew":"  private static CloudConfig fillSolrCloudSection(NamedList<Object> nl) {\n\n    String hostName = required(\"solrcloud\", \"host\", removeValue(nl, \"host\"));\n    int hostPort = parseInt(\"hostPort\", required(\"solrcloud\", \"hostPort\", removeValue(nl, \"hostPort\")));\n    String hostContext = required(\"solrcloud\", \"hostContext\", removeValue(nl, \"hostContext\"));\n\n    CloudConfig.CloudConfigBuilder builder = new CloudConfig.CloudConfigBuilder(hostName, hostPort, hostContext);\n\n    for (Map.Entry<String, Object> entry : nl) {\n      String name = entry.getKey();\n      if (entry.getValue() == null)\n        continue;\n      String value = entry.getValue().toString();\n      switch (name) {\n        case \"leaderVoteWait\":\n          builder.setLeaderVoteWait(parseInt(name, value));\n          break;\n        case \"leaderConflictResolveWait\":\n          builder.setLeaderConflictResolveWait(parseInt(name, value));\n          break;\n        case \"zkClientTimeout\":\n          builder.setZkClientTimeout(parseInt(name, value));\n          break;\n        case \"autoReplicaFailoverBadNodeExpiration\":\n          builder.setAutoReplicaFailoverBadNodeExpiration(parseInt(name, value));\n          break;\n        case \"autoReplicaFailoverWaitAfterExpiration\":\n          builder.setAutoReplicaFailoverWaitAfterExpiration(parseInt(name, value));\n          break;\n        case \"autoReplicaFailoverWorkLoopDelay\":\n          builder.setAutoReplicaFailoverWorkLoopDelay(parseInt(name, value));\n          break;\n        case \"zkHost\":\n          builder.setZkHost(value);\n          break;\n        case \"genericCoreNodeNames\":\n          builder.setUseGenericCoreNames(Boolean.parseBoolean(value));\n          break;\n        case \"zkACLProvider\":\n          builder.setZkACLProviderClass(value);\n          break;\n        case \"zkCredentialsProvider\":\n          builder.setZkCredentialsProviderClass(value);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown configuration parameter in <solrcloud> section of solr.xml: \" + name);\n      }\n    }\n\n    return builder.build();\n  }\n\n","sourceOld":"  private static CloudConfig fillSolrCloudSection(NamedList<Object> nl) {\n\n    String hostName = required(\"solrcloud\", \"host\", removeValue(nl, \"host\"));\n    int hostPort = parseInt(\"hostPort\", required(\"solrcloud\", \"hostPort\", removeValue(nl, \"hostPort\")));\n    String hostContext = required(\"solrcloud\", \"hostContext\", removeValue(nl, \"hostContext\"));\n\n    CloudConfig.CloudConfigBuilder builder = new CloudConfig.CloudConfigBuilder(hostName, hostPort, hostContext);\n\n    for (Map.Entry<String, Object> entry : nl) {\n      String name = entry.getKey();\n      if (entry.getValue() == null)\n        continue;\n      String value = entry.getValue().toString();\n      switch (name) {\n        case \"leaderVoteWait\":\n          builder.setLeaderVoteWait(parseInt(name, value));\n          break;\n        case \"leaderConflictResolveWait\":\n          builder.setLeaderConflictResolveWait(parseInt(name, value));\n          break;\n        case \"zkClientTimeout\":\n          builder.setZkClientTimeout(parseInt(name, value));\n          break;\n        case \"autoReplicaFailoverBadNodeExpiration\":\n          builder.setAutoReplicaFailoverBadNodeExpiration(parseInt(name, value));\n          break;\n        case \"autoReplicaFailoverWaitAfterExpiration\":\n          builder.setAutoReplicaFailoverWaitAfterExpiration(parseInt(name, value));\n          break;\n        case \"autoReplicaFailoverWorkLoopDelay\":\n          builder.setAutoReplicaFailoverWorkLoopDelay(parseInt(name, value));\n          break;\n        case \"zkHost\":\n          builder.setZkHost(value);\n          break;\n        case \"genericCoreNodeNames\":\n          builder.setUseGenericCoreNames(Boolean.parseBoolean(value));\n          break;\n        case \"zkACLProvider\":\n          builder.setZkACLProviderClass(value);\n          break;\n        case \"zkCredientialsProvider\": // deprecated\n        case \"zkCredentialsProvider\":\n          builder.setZkCredentialsProviderClass(value);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown configuration parameter in <solrcloud> section of solr.xml: \" + name);\n      }\n    }\n\n    return builder.build();\n  }\n\n","bugFix":["04983a1b95aca878f0db04dda112e321ea6483f8"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b1197d6f54676973038ad402280d80a139dfd27b","date":1455734228,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fillSolrCloudSection(NamedList[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fillSolrCloudSection(NamedList[Object]).mjava","sourceNew":"  private static CloudConfig fillSolrCloudSection(NamedList<Object> nl) {\n\n    String hostName = required(\"solrcloud\", \"host\", removeValue(nl, \"host\"));\n    int hostPort = parseInt(\"hostPort\", required(\"solrcloud\", \"hostPort\", removeValue(nl, \"hostPort\")));\n    String hostContext = required(\"solrcloud\", \"hostContext\", removeValue(nl, \"hostContext\"));\n\n    CloudConfig.CloudConfigBuilder builder = new CloudConfig.CloudConfigBuilder(hostName, hostPort, hostContext);\n\n    for (Map.Entry<String, Object> entry : nl) {\n      String name = entry.getKey();\n      if (entry.getValue() == null)\n        continue;\n      String value = entry.getValue().toString();\n      switch (name) {\n        case \"leaderVoteWait\":\n          builder.setLeaderVoteWait(parseInt(name, value));\n          break;\n        case \"leaderConflictResolveWait\":\n          builder.setLeaderConflictResolveWait(parseInt(name, value));\n          break;\n        case \"zkClientTimeout\":\n          builder.setZkClientTimeout(parseInt(name, value));\n          break;\n        case \"autoReplicaFailoverBadNodeExpiration\":\n          builder.setAutoReplicaFailoverBadNodeExpiration(parseInt(name, value));\n          break;\n        case \"autoReplicaFailoverWaitAfterExpiration\":\n          builder.setAutoReplicaFailoverWaitAfterExpiration(parseInt(name, value));\n          break;\n        case \"autoReplicaFailoverWorkLoopDelay\":\n          builder.setAutoReplicaFailoverWorkLoopDelay(parseInt(name, value));\n          break;\n        case \"zkHost\":\n          builder.setZkHost(value);\n          break;\n        case \"genericCoreNodeNames\":\n          builder.setUseGenericCoreNames(Boolean.parseBoolean(value));\n          break;\n        case \"zkACLProvider\":\n          builder.setZkACLProviderClass(value);\n          break;\n        case \"zkCredentialsProvider\":\n          builder.setZkCredentialsProviderClass(value);\n          break;\n        case \"createCollectionWaitTimeTillActive\":\n          builder.setCreateCollectionWaitTimeTillActive(parseInt(name, value));\n          break;\n        case \"createCollectionCheckLeaderActive\":\n          builder.setCreateCollectionCheckLeaderActive(Boolean.parseBoolean(value));\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown configuration parameter in <solrcloud> section of solr.xml: \" + name);\n      }\n    }\n\n    return builder.build();\n  }\n\n","sourceOld":"  private static CloudConfig fillSolrCloudSection(NamedList<Object> nl) {\n\n    String hostName = required(\"solrcloud\", \"host\", removeValue(nl, \"host\"));\n    int hostPort = parseInt(\"hostPort\", required(\"solrcloud\", \"hostPort\", removeValue(nl, \"hostPort\")));\n    String hostContext = required(\"solrcloud\", \"hostContext\", removeValue(nl, \"hostContext\"));\n\n    CloudConfig.CloudConfigBuilder builder = new CloudConfig.CloudConfigBuilder(hostName, hostPort, hostContext);\n\n    for (Map.Entry<String, Object> entry : nl) {\n      String name = entry.getKey();\n      if (entry.getValue() == null)\n        continue;\n      String value = entry.getValue().toString();\n      switch (name) {\n        case \"leaderVoteWait\":\n          builder.setLeaderVoteWait(parseInt(name, value));\n          break;\n        case \"leaderConflictResolveWait\":\n          builder.setLeaderConflictResolveWait(parseInt(name, value));\n          break;\n        case \"zkClientTimeout\":\n          builder.setZkClientTimeout(parseInt(name, value));\n          break;\n        case \"autoReplicaFailoverBadNodeExpiration\":\n          builder.setAutoReplicaFailoverBadNodeExpiration(parseInt(name, value));\n          break;\n        case \"autoReplicaFailoverWaitAfterExpiration\":\n          builder.setAutoReplicaFailoverWaitAfterExpiration(parseInt(name, value));\n          break;\n        case \"autoReplicaFailoverWorkLoopDelay\":\n          builder.setAutoReplicaFailoverWorkLoopDelay(parseInt(name, value));\n          break;\n        case \"zkHost\":\n          builder.setZkHost(value);\n          break;\n        case \"genericCoreNodeNames\":\n          builder.setUseGenericCoreNames(Boolean.parseBoolean(value));\n          break;\n        case \"zkACLProvider\":\n          builder.setZkACLProviderClass(value);\n          break;\n        case \"zkCredentialsProvider\":\n          builder.setZkCredentialsProviderClass(value);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown configuration parameter in <solrcloud> section of solr.xml: \" + name);\n      }\n    }\n\n    return builder.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"717e5ceb2acae36d422ec75e5a4ce9fac40506e1","date":1501239603,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fillSolrCloudSection(NamedList[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fillSolrCloudSection(NamedList[Object]).mjava","sourceNew":"  private static CloudConfig fillSolrCloudSection(NamedList<Object> nl) {\n\n    String hostName = required(\"solrcloud\", \"host\", removeValue(nl, \"host\"));\n    int hostPort = parseInt(\"hostPort\", required(\"solrcloud\", \"hostPort\", removeValue(nl, \"hostPort\")));\n    String hostContext = required(\"solrcloud\", \"hostContext\", removeValue(nl, \"hostContext\"));\n\n    CloudConfig.CloudConfigBuilder builder = new CloudConfig.CloudConfigBuilder(hostName, hostPort, hostContext);\n\n    for (Map.Entry<String, Object> entry : nl) {\n      String name = entry.getKey();\n      if (entry.getValue() == null)\n        continue;\n      String value = entry.getValue().toString();\n      switch (name) {\n        case \"leaderVoteWait\":\n          builder.setLeaderVoteWait(parseInt(name, value));\n          break;\n        case \"leaderConflictResolveWait\":\n          builder.setLeaderConflictResolveWait(parseInt(name, value));\n          break;\n        case \"zkClientTimeout\":\n          builder.setZkClientTimeout(parseInt(name, value));\n          break;\n        case \"autoReplicaFailoverBadNodeExpiration\": case \"autoReplicaFailoverWorkLoopDelay\":\n          //TODO remove this in Solr 8.0\n          log.info(\"Configuration parameter \" + name + \" is ignored\");\n          break;\n        case \"autoReplicaFailoverWaitAfterExpiration\":\n          builder.setAutoReplicaFailoverWaitAfterExpiration(parseInt(name, value));\n          break;\n        case \"zkHost\":\n          builder.setZkHost(value);\n          break;\n        case \"genericCoreNodeNames\":\n          builder.setUseGenericCoreNames(Boolean.parseBoolean(value));\n          break;\n        case \"zkACLProvider\":\n          builder.setZkACLProviderClass(value);\n          break;\n        case \"zkCredentialsProvider\":\n          builder.setZkCredentialsProviderClass(value);\n          break;\n        case \"createCollectionWaitTimeTillActive\":\n          builder.setCreateCollectionWaitTimeTillActive(parseInt(name, value));\n          break;\n        case \"createCollectionCheckLeaderActive\":\n          builder.setCreateCollectionCheckLeaderActive(Boolean.parseBoolean(value));\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown configuration parameter in <solrcloud> section of solr.xml: \" + name);\n      }\n    }\n\n    return builder.build();\n  }\n\n","sourceOld":"  private static CloudConfig fillSolrCloudSection(NamedList<Object> nl) {\n\n    String hostName = required(\"solrcloud\", \"host\", removeValue(nl, \"host\"));\n    int hostPort = parseInt(\"hostPort\", required(\"solrcloud\", \"hostPort\", removeValue(nl, \"hostPort\")));\n    String hostContext = required(\"solrcloud\", \"hostContext\", removeValue(nl, \"hostContext\"));\n\n    CloudConfig.CloudConfigBuilder builder = new CloudConfig.CloudConfigBuilder(hostName, hostPort, hostContext);\n\n    for (Map.Entry<String, Object> entry : nl) {\n      String name = entry.getKey();\n      if (entry.getValue() == null)\n        continue;\n      String value = entry.getValue().toString();\n      switch (name) {\n        case \"leaderVoteWait\":\n          builder.setLeaderVoteWait(parseInt(name, value));\n          break;\n        case \"leaderConflictResolveWait\":\n          builder.setLeaderConflictResolveWait(parseInt(name, value));\n          break;\n        case \"zkClientTimeout\":\n          builder.setZkClientTimeout(parseInt(name, value));\n          break;\n        case \"autoReplicaFailoverBadNodeExpiration\":\n          builder.setAutoReplicaFailoverBadNodeExpiration(parseInt(name, value));\n          break;\n        case \"autoReplicaFailoverWaitAfterExpiration\":\n          builder.setAutoReplicaFailoverWaitAfterExpiration(parseInt(name, value));\n          break;\n        case \"autoReplicaFailoverWorkLoopDelay\":\n          builder.setAutoReplicaFailoverWorkLoopDelay(parseInt(name, value));\n          break;\n        case \"zkHost\":\n          builder.setZkHost(value);\n          break;\n        case \"genericCoreNodeNames\":\n          builder.setUseGenericCoreNames(Boolean.parseBoolean(value));\n          break;\n        case \"zkACLProvider\":\n          builder.setZkACLProviderClass(value);\n          break;\n        case \"zkCredentialsProvider\":\n          builder.setZkCredentialsProviderClass(value);\n          break;\n        case \"createCollectionWaitTimeTillActive\":\n          builder.setCreateCollectionWaitTimeTillActive(parseInt(name, value));\n          break;\n        case \"createCollectionCheckLeaderActive\":\n          builder.setCreateCollectionCheckLeaderActive(Boolean.parseBoolean(value));\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown configuration parameter in <solrcloud> section of solr.xml: \" + name);\n      }\n    }\n\n    return builder.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fillSolrCloudSection(NamedList[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fillSolrCloudSection(NamedList[Object]).mjava","sourceNew":"  private static CloudConfig fillSolrCloudSection(NamedList<Object> nl) {\n\n    String hostName = required(\"solrcloud\", \"host\", removeValue(nl, \"host\"));\n    int hostPort = parseInt(\"hostPort\", required(\"solrcloud\", \"hostPort\", removeValue(nl, \"hostPort\")));\n    String hostContext = required(\"solrcloud\", \"hostContext\", removeValue(nl, \"hostContext\"));\n\n    CloudConfig.CloudConfigBuilder builder = new CloudConfig.CloudConfigBuilder(hostName, hostPort, hostContext);\n\n    for (Map.Entry<String, Object> entry : nl) {\n      String name = entry.getKey();\n      if (entry.getValue() == null)\n        continue;\n      String value = entry.getValue().toString();\n      switch (name) {\n        case \"leaderVoteWait\":\n          builder.setLeaderVoteWait(parseInt(name, value));\n          break;\n        case \"leaderConflictResolveWait\":\n          builder.setLeaderConflictResolveWait(parseInt(name, value));\n          break;\n        case \"zkClientTimeout\":\n          builder.setZkClientTimeout(parseInt(name, value));\n          break;\n        case \"autoReplicaFailoverBadNodeExpiration\": case \"autoReplicaFailoverWorkLoopDelay\":\n          //TODO remove this in Solr 8.0\n          log.info(\"Configuration parameter \" + name + \" is ignored\");\n          break;\n        case \"autoReplicaFailoverWaitAfterExpiration\":\n          builder.setAutoReplicaFailoverWaitAfterExpiration(parseInt(name, value));\n          break;\n        case \"zkHost\":\n          builder.setZkHost(value);\n          break;\n        case \"genericCoreNodeNames\":\n          builder.setUseGenericCoreNames(Boolean.parseBoolean(value));\n          break;\n        case \"zkACLProvider\":\n          builder.setZkACLProviderClass(value);\n          break;\n        case \"zkCredentialsProvider\":\n          builder.setZkCredentialsProviderClass(value);\n          break;\n        case \"createCollectionWaitTimeTillActive\":\n          builder.setCreateCollectionWaitTimeTillActive(parseInt(name, value));\n          break;\n        case \"createCollectionCheckLeaderActive\":\n          builder.setCreateCollectionCheckLeaderActive(Boolean.parseBoolean(value));\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown configuration parameter in <solrcloud> section of solr.xml: \" + name);\n      }\n    }\n\n    return builder.build();\n  }\n\n","sourceOld":"  private static CloudConfig fillSolrCloudSection(NamedList<Object> nl) {\n\n    String hostName = required(\"solrcloud\", \"host\", removeValue(nl, \"host\"));\n    int hostPort = parseInt(\"hostPort\", required(\"solrcloud\", \"hostPort\", removeValue(nl, \"hostPort\")));\n    String hostContext = required(\"solrcloud\", \"hostContext\", removeValue(nl, \"hostContext\"));\n\n    CloudConfig.CloudConfigBuilder builder = new CloudConfig.CloudConfigBuilder(hostName, hostPort, hostContext);\n\n    for (Map.Entry<String, Object> entry : nl) {\n      String name = entry.getKey();\n      if (entry.getValue() == null)\n        continue;\n      String value = entry.getValue().toString();\n      switch (name) {\n        case \"leaderVoteWait\":\n          builder.setLeaderVoteWait(parseInt(name, value));\n          break;\n        case \"leaderConflictResolveWait\":\n          builder.setLeaderConflictResolveWait(parseInt(name, value));\n          break;\n        case \"zkClientTimeout\":\n          builder.setZkClientTimeout(parseInt(name, value));\n          break;\n        case \"autoReplicaFailoverBadNodeExpiration\":\n          builder.setAutoReplicaFailoverBadNodeExpiration(parseInt(name, value));\n          break;\n        case \"autoReplicaFailoverWaitAfterExpiration\":\n          builder.setAutoReplicaFailoverWaitAfterExpiration(parseInt(name, value));\n          break;\n        case \"autoReplicaFailoverWorkLoopDelay\":\n          builder.setAutoReplicaFailoverWorkLoopDelay(parseInt(name, value));\n          break;\n        case \"zkHost\":\n          builder.setZkHost(value);\n          break;\n        case \"genericCoreNodeNames\":\n          builder.setUseGenericCoreNames(Boolean.parseBoolean(value));\n          break;\n        case \"zkACLProvider\":\n          builder.setZkACLProviderClass(value);\n          break;\n        case \"zkCredentialsProvider\":\n          builder.setZkCredentialsProviderClass(value);\n          break;\n        case \"createCollectionWaitTimeTillActive\":\n          builder.setCreateCollectionWaitTimeTillActive(parseInt(name, value));\n          break;\n        case \"createCollectionCheckLeaderActive\":\n          builder.setCreateCollectionCheckLeaderActive(Boolean.parseBoolean(value));\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown configuration parameter in <solrcloud> section of solr.xml: \" + name);\n      }\n    }\n\n    return builder.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fillSolrCloudSection(NamedList[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fillSolrCloudSection(NamedList[Object]).mjava","sourceNew":"  private static CloudConfig fillSolrCloudSection(NamedList<Object> nl) {\n\n    String hostName = required(\"solrcloud\", \"host\", removeValue(nl, \"host\"));\n    int hostPort = parseInt(\"hostPort\", required(\"solrcloud\", \"hostPort\", removeValue(nl, \"hostPort\")));\n    String hostContext = required(\"solrcloud\", \"hostContext\", removeValue(nl, \"hostContext\"));\n\n    CloudConfig.CloudConfigBuilder builder = new CloudConfig.CloudConfigBuilder(hostName, hostPort, hostContext);\n\n    for (Map.Entry<String, Object> entry : nl) {\n      String name = entry.getKey();\n      if (entry.getValue() == null)\n        continue;\n      String value = entry.getValue().toString();\n      switch (name) {\n        case \"leaderVoteWait\":\n          builder.setLeaderVoteWait(parseInt(name, value));\n          break;\n        case \"leaderConflictResolveWait\":\n          builder.setLeaderConflictResolveWait(parseInt(name, value));\n          break;\n        case \"zkClientTimeout\":\n          builder.setZkClientTimeout(parseInt(name, value));\n          break;\n        case \"autoReplicaFailoverBadNodeExpiration\": case \"autoReplicaFailoverWorkLoopDelay\":\n          //TODO remove this in Solr 8.0\n          log.info(\"Configuration parameter \" + name + \" is ignored\");\n          break;\n        case \"autoReplicaFailoverWaitAfterExpiration\":\n          builder.setAutoReplicaFailoverWaitAfterExpiration(parseInt(name, value));\n          break;\n        case \"zkHost\":\n          builder.setZkHost(value);\n          break;\n        case \"genericCoreNodeNames\":\n          builder.setUseGenericCoreNames(Boolean.parseBoolean(value));\n          break;\n        case \"zkACLProvider\":\n          builder.setZkACLProviderClass(value);\n          break;\n        case \"zkCredentialsProvider\":\n          builder.setZkCredentialsProviderClass(value);\n          break;\n        case \"createCollectionWaitTimeTillActive\":\n          builder.setCreateCollectionWaitTimeTillActive(parseInt(name, value));\n          break;\n        case \"createCollectionCheckLeaderActive\":\n          builder.setCreateCollectionCheckLeaderActive(Boolean.parseBoolean(value));\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown configuration parameter in <solrcloud> section of solr.xml: \" + name);\n      }\n    }\n\n    return builder.build();\n  }\n\n","sourceOld":"  private static CloudConfig fillSolrCloudSection(NamedList<Object> nl) {\n\n    String hostName = required(\"solrcloud\", \"host\", removeValue(nl, \"host\"));\n    int hostPort = parseInt(\"hostPort\", required(\"solrcloud\", \"hostPort\", removeValue(nl, \"hostPort\")));\n    String hostContext = required(\"solrcloud\", \"hostContext\", removeValue(nl, \"hostContext\"));\n\n    CloudConfig.CloudConfigBuilder builder = new CloudConfig.CloudConfigBuilder(hostName, hostPort, hostContext);\n\n    for (Map.Entry<String, Object> entry : nl) {\n      String name = entry.getKey();\n      if (entry.getValue() == null)\n        continue;\n      String value = entry.getValue().toString();\n      switch (name) {\n        case \"leaderVoteWait\":\n          builder.setLeaderVoteWait(parseInt(name, value));\n          break;\n        case \"leaderConflictResolveWait\":\n          builder.setLeaderConflictResolveWait(parseInt(name, value));\n          break;\n        case \"zkClientTimeout\":\n          builder.setZkClientTimeout(parseInt(name, value));\n          break;\n        case \"autoReplicaFailoverBadNodeExpiration\":\n          builder.setAutoReplicaFailoverBadNodeExpiration(parseInt(name, value));\n          break;\n        case \"autoReplicaFailoverWaitAfterExpiration\":\n          builder.setAutoReplicaFailoverWaitAfterExpiration(parseInt(name, value));\n          break;\n        case \"autoReplicaFailoverWorkLoopDelay\":\n          builder.setAutoReplicaFailoverWorkLoopDelay(parseInt(name, value));\n          break;\n        case \"zkHost\":\n          builder.setZkHost(value);\n          break;\n        case \"genericCoreNodeNames\":\n          builder.setUseGenericCoreNames(Boolean.parseBoolean(value));\n          break;\n        case \"zkACLProvider\":\n          builder.setZkACLProviderClass(value);\n          break;\n        case \"zkCredentialsProvider\":\n          builder.setZkCredentialsProviderClass(value);\n          break;\n        case \"createCollectionWaitTimeTillActive\":\n          builder.setCreateCollectionWaitTimeTillActive(parseInt(name, value));\n          break;\n        case \"createCollectionCheckLeaderActive\":\n          builder.setCreateCollectionCheckLeaderActive(Boolean.parseBoolean(value));\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown configuration parameter in <solrcloud> section of solr.xml: \" + name);\n      }\n    }\n\n    return builder.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fdae77e30ba2f5f5d26355a2b7007b48093da17d","date":1582566365,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fillSolrCloudSection(NamedList[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fillSolrCloudSection(NamedList[Object]).mjava","sourceNew":"  private static CloudConfig fillSolrCloudSection(NamedList<Object> nl) {\n\n    String hostName = required(\"solrcloud\", \"host\", removeValue(nl, \"host\"));\n    int hostPort = parseInt(\"hostPort\", required(\"solrcloud\", \"hostPort\", removeValue(nl, \"hostPort\")));\n    String hostContext = required(\"solrcloud\", \"hostContext\", removeValue(nl, \"hostContext\"));\n\n    CloudConfig.CloudConfigBuilder builder = new CloudConfig.CloudConfigBuilder(hostName, hostPort, hostContext);\n\n    for (Map.Entry<String, Object> entry : nl) {\n      String name = entry.getKey();\n      if (entry.getValue() == null)\n        continue;\n      String value = entry.getValue().toString();\n      switch (name) {\n        case \"leaderVoteWait\":\n          builder.setLeaderVoteWait(parseInt(name, value));\n          break;\n        case \"leaderConflictResolveWait\":\n          builder.setLeaderConflictResolveWait(parseInt(name, value));\n          break;\n        case \"zkClientTimeout\":\n          builder.setZkClientTimeout(parseInt(name, value));\n          break;\n        case \"autoReplicaFailoverWaitAfterExpiration\":\n          builder.setAutoReplicaFailoverWaitAfterExpiration(parseInt(name, value));\n          break;\n        case \"zkHost\":\n          builder.setZkHost(value);\n          break;\n        case \"genericCoreNodeNames\":\n          builder.setUseGenericCoreNames(Boolean.parseBoolean(value));\n          break;\n        case \"zkACLProvider\":\n          builder.setZkACLProviderClass(value);\n          break;\n        case \"zkCredentialsProvider\":\n          builder.setZkCredentialsProviderClass(value);\n          break;\n        case \"createCollectionWaitTimeTillActive\":\n          builder.setCreateCollectionWaitTimeTillActive(parseInt(name, value));\n          break;\n        case \"createCollectionCheckLeaderActive\":\n          builder.setCreateCollectionCheckLeaderActive(Boolean.parseBoolean(value));\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown configuration parameter in <solrcloud> section of solr.xml: \" + name);\n      }\n    }\n\n    return builder.build();\n  }\n\n","sourceOld":"  private static CloudConfig fillSolrCloudSection(NamedList<Object> nl) {\n\n    String hostName = required(\"solrcloud\", \"host\", removeValue(nl, \"host\"));\n    int hostPort = parseInt(\"hostPort\", required(\"solrcloud\", \"hostPort\", removeValue(nl, \"hostPort\")));\n    String hostContext = required(\"solrcloud\", \"hostContext\", removeValue(nl, \"hostContext\"));\n\n    CloudConfig.CloudConfigBuilder builder = new CloudConfig.CloudConfigBuilder(hostName, hostPort, hostContext);\n\n    for (Map.Entry<String, Object> entry : nl) {\n      String name = entry.getKey();\n      if (entry.getValue() == null)\n        continue;\n      String value = entry.getValue().toString();\n      switch (name) {\n        case \"leaderVoteWait\":\n          builder.setLeaderVoteWait(parseInt(name, value));\n          break;\n        case \"leaderConflictResolveWait\":\n          builder.setLeaderConflictResolveWait(parseInt(name, value));\n          break;\n        case \"zkClientTimeout\":\n          builder.setZkClientTimeout(parseInt(name, value));\n          break;\n        case \"autoReplicaFailoverBadNodeExpiration\": case \"autoReplicaFailoverWorkLoopDelay\":\n          //TODO remove this in Solr 8.0\n          log.info(\"Configuration parameter \" + name + \" is ignored\");\n          break;\n        case \"autoReplicaFailoverWaitAfterExpiration\":\n          builder.setAutoReplicaFailoverWaitAfterExpiration(parseInt(name, value));\n          break;\n        case \"zkHost\":\n          builder.setZkHost(value);\n          break;\n        case \"genericCoreNodeNames\":\n          builder.setUseGenericCoreNames(Boolean.parseBoolean(value));\n          break;\n        case \"zkACLProvider\":\n          builder.setZkACLProviderClass(value);\n          break;\n        case \"zkCredentialsProvider\":\n          builder.setZkCredentialsProviderClass(value);\n          break;\n        case \"createCollectionWaitTimeTillActive\":\n          builder.setCreateCollectionWaitTimeTillActive(parseInt(name, value));\n          break;\n        case \"createCollectionCheckLeaderActive\":\n          builder.setCreateCollectionCheckLeaderActive(Boolean.parseBoolean(value));\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown configuration parameter in <solrcloud> section of solr.xml: \" + name);\n      }\n    }\n\n    return builder.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b409047f69fb85704c506753bc23a37d7ad37b54","date":1582574830,"type":3,"author":"Mike","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fillSolrCloudSection(NamedList[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fillSolrCloudSection(NamedList[Object]).mjava","sourceNew":"  private static CloudConfig fillSolrCloudSection(NamedList<Object> nl) {\n\n    String hostName = required(\"solrcloud\", \"host\", removeValue(nl, \"host\"));\n    int hostPort = parseInt(\"hostPort\", required(\"solrcloud\", \"hostPort\", removeValue(nl, \"hostPort\")));\n    String hostContext = required(\"solrcloud\", \"hostContext\", removeValue(nl, \"hostContext\"));\n\n    CloudConfig.CloudConfigBuilder builder = new CloudConfig.CloudConfigBuilder(hostName, hostPort, hostContext);\n\n    for (Map.Entry<String, Object> entry : nl) {\n      String name = entry.getKey();\n      if (entry.getValue() == null)\n        continue;\n      String value = entry.getValue().toString();\n      switch (name) {\n        case \"leaderVoteWait\":\n          builder.setLeaderVoteWait(parseInt(name, value));\n          break;\n        case \"leaderConflictResolveWait\":\n          builder.setLeaderConflictResolveWait(parseInt(name, value));\n          break;\n        case \"zkClientTimeout\":\n          builder.setZkClientTimeout(parseInt(name, value));\n          break;\n        case \"autoReplicaFailoverWaitAfterExpiration\":\n          builder.setAutoReplicaFailoverWaitAfterExpiration(parseInt(name, value));\n          break;\n        case \"zkHost\":\n          builder.setZkHost(value);\n          break;\n        case \"genericCoreNodeNames\":\n          builder.setUseGenericCoreNames(Boolean.parseBoolean(value));\n          break;\n        case \"zkACLProvider\":\n          builder.setZkACLProviderClass(value);\n          break;\n        case \"zkCredentialsProvider\":\n          builder.setZkCredentialsProviderClass(value);\n          break;\n        case \"createCollectionWaitTimeTillActive\":\n          builder.setCreateCollectionWaitTimeTillActive(parseInt(name, value));\n          break;\n        case \"createCollectionCheckLeaderActive\":\n          builder.setCreateCollectionCheckLeaderActive(Boolean.parseBoolean(value));\n          break;\n        case \"pkiHandlerPrivateKeyPath\":\n          builder.setPkiHandlerPrivateKeyPath(value);\n          break;\n        case \"pkiHandlerPublicKeyPath\":\n          builder.setPkiHandlerPublicKeyPath(value);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown configuration parameter in <solrcloud> section of solr.xml: \" + name);\n      }\n    }\n\n    return builder.build();\n  }\n\n","sourceOld":"  private static CloudConfig fillSolrCloudSection(NamedList<Object> nl) {\n\n    String hostName = required(\"solrcloud\", \"host\", removeValue(nl, \"host\"));\n    int hostPort = parseInt(\"hostPort\", required(\"solrcloud\", \"hostPort\", removeValue(nl, \"hostPort\")));\n    String hostContext = required(\"solrcloud\", \"hostContext\", removeValue(nl, \"hostContext\"));\n\n    CloudConfig.CloudConfigBuilder builder = new CloudConfig.CloudConfigBuilder(hostName, hostPort, hostContext);\n\n    for (Map.Entry<String, Object> entry : nl) {\n      String name = entry.getKey();\n      if (entry.getValue() == null)\n        continue;\n      String value = entry.getValue().toString();\n      switch (name) {\n        case \"leaderVoteWait\":\n          builder.setLeaderVoteWait(parseInt(name, value));\n          break;\n        case \"leaderConflictResolveWait\":\n          builder.setLeaderConflictResolveWait(parseInt(name, value));\n          break;\n        case \"zkClientTimeout\":\n          builder.setZkClientTimeout(parseInt(name, value));\n          break;\n        case \"autoReplicaFailoverWaitAfterExpiration\":\n          builder.setAutoReplicaFailoverWaitAfterExpiration(parseInt(name, value));\n          break;\n        case \"zkHost\":\n          builder.setZkHost(value);\n          break;\n        case \"genericCoreNodeNames\":\n          builder.setUseGenericCoreNames(Boolean.parseBoolean(value));\n          break;\n        case \"zkACLProvider\":\n          builder.setZkACLProviderClass(value);\n          break;\n        case \"zkCredentialsProvider\":\n          builder.setZkCredentialsProviderClass(value);\n          break;\n        case \"createCollectionWaitTimeTillActive\":\n          builder.setCreateCollectionWaitTimeTillActive(parseInt(name, value));\n          break;\n        case \"createCollectionCheckLeaderActive\":\n          builder.setCreateCollectionCheckLeaderActive(Boolean.parseBoolean(value));\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown configuration parameter in <solrcloud> section of solr.xml: \" + name);\n      }\n    }\n\n    return builder.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f94e3cd399f3275b48f601d95bc80d6d9b7fc4ca","date":1586138114,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fillSolrCloudSection(NamedList[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fillSolrCloudSection(NamedList[Object]).mjava","sourceNew":"  private static CloudConfig fillSolrCloudSection(NamedList<Object> nl) {\n\n    String hostName = required(\"solrcloud\", \"host\", removeValue(nl, \"host\"));\n    int hostPort = parseInt(\"hostPort\", required(\"solrcloud\", \"hostPort\", removeValue(nl, \"hostPort\")));\n    String hostContext = required(\"solrcloud\", \"hostContext\", removeValue(nl, \"hostContext\"));\n\n    CloudConfig.CloudConfigBuilder builder = new CloudConfig.CloudConfigBuilder(hostName, hostPort, hostContext);\n\n    for (Map.Entry<String, Object> entry : nl) {\n      String name = entry.getKey();\n      if (entry.getValue() == null)\n        continue;\n      String value = entry.getValue().toString();\n      switch (name) {\n        case \"leaderVoteWait\":\n          builder.setLeaderVoteWait(parseInt(name, value));\n          break;\n        case \"leaderConflictResolveWait\":\n          builder.setLeaderConflictResolveWait(parseInt(name, value));\n          break;\n        case \"zkClientTimeout\":\n          builder.setZkClientTimeout(parseInt(name, value));\n          break;\n        case \"zkHost\":\n          builder.setZkHost(value);\n          break;\n        case \"genericCoreNodeNames\":\n          builder.setUseGenericCoreNames(Boolean.parseBoolean(value));\n          break;\n        case \"zkACLProvider\":\n          builder.setZkACLProviderClass(value);\n          break;\n        case \"zkCredentialsProvider\":\n          builder.setZkCredentialsProviderClass(value);\n          break;\n        case \"createCollectionWaitTimeTillActive\":\n          builder.setCreateCollectionWaitTimeTillActive(parseInt(name, value));\n          break;\n        case \"createCollectionCheckLeaderActive\":\n          builder.setCreateCollectionCheckLeaderActive(Boolean.parseBoolean(value));\n          break;\n        case \"pkiHandlerPrivateKeyPath\":\n          builder.setPkiHandlerPrivateKeyPath(value);\n          break;\n        case \"pkiHandlerPublicKeyPath\":\n          builder.setPkiHandlerPublicKeyPath(value);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown configuration parameter in <solrcloud> section of solr.xml: \" + name);\n      }\n    }\n\n    return builder.build();\n  }\n\n","sourceOld":"  private static CloudConfig fillSolrCloudSection(NamedList<Object> nl) {\n\n    String hostName = required(\"solrcloud\", \"host\", removeValue(nl, \"host\"));\n    int hostPort = parseInt(\"hostPort\", required(\"solrcloud\", \"hostPort\", removeValue(nl, \"hostPort\")));\n    String hostContext = required(\"solrcloud\", \"hostContext\", removeValue(nl, \"hostContext\"));\n\n    CloudConfig.CloudConfigBuilder builder = new CloudConfig.CloudConfigBuilder(hostName, hostPort, hostContext);\n\n    for (Map.Entry<String, Object> entry : nl) {\n      String name = entry.getKey();\n      if (entry.getValue() == null)\n        continue;\n      String value = entry.getValue().toString();\n      switch (name) {\n        case \"leaderVoteWait\":\n          builder.setLeaderVoteWait(parseInt(name, value));\n          break;\n        case \"leaderConflictResolveWait\":\n          builder.setLeaderConflictResolveWait(parseInt(name, value));\n          break;\n        case \"zkClientTimeout\":\n          builder.setZkClientTimeout(parseInt(name, value));\n          break;\n        case \"autoReplicaFailoverWaitAfterExpiration\":\n          builder.setAutoReplicaFailoverWaitAfterExpiration(parseInt(name, value));\n          break;\n        case \"zkHost\":\n          builder.setZkHost(value);\n          break;\n        case \"genericCoreNodeNames\":\n          builder.setUseGenericCoreNames(Boolean.parseBoolean(value));\n          break;\n        case \"zkACLProvider\":\n          builder.setZkACLProviderClass(value);\n          break;\n        case \"zkCredentialsProvider\":\n          builder.setZkCredentialsProviderClass(value);\n          break;\n        case \"createCollectionWaitTimeTillActive\":\n          builder.setCreateCollectionWaitTimeTillActive(parseInt(name, value));\n          break;\n        case \"createCollectionCheckLeaderActive\":\n          builder.setCreateCollectionCheckLeaderActive(Boolean.parseBoolean(value));\n          break;\n        case \"pkiHandlerPrivateKeyPath\":\n          builder.setPkiHandlerPrivateKeyPath(value);\n          break;\n        case \"pkiHandlerPublicKeyPath\":\n          builder.setPkiHandlerPublicKeyPath(value);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown configuration parameter in <solrcloud> section of solr.xml: \" + name);\n      }\n    }\n\n    return builder.build();\n  }\n\n","bugFix":["e15199583d3635cb940942caed05132dd6c4c7c6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f94e3cd399f3275b48f601d95bc80d6d9b7fc4ca":["b409047f69fb85704c506753bc23a37d7ad37b54"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["b1197d6f54676973038ad402280d80a139dfd27b","717e5ceb2acae36d422ec75e5a4ce9fac40506e1"],"717e5ceb2acae36d422ec75e5a4ce9fac40506e1":["b1197d6f54676973038ad402280d80a139dfd27b"],"30f0564eb9a880c95340d28e0bf3d2aebb9997bc":["04983a1b95aca878f0db04dda112e321ea6483f8"],"e15199583d3635cb940942caed05132dd6c4c7c6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"04983a1b95aca878f0db04dda112e321ea6483f8":["e15199583d3635cb940942caed05132dd6c4c7c6"],"b1197d6f54676973038ad402280d80a139dfd27b":["30f0564eb9a880c95340d28e0bf3d2aebb9997bc"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e15199583d3635cb940942caed05132dd6c4c7c6"],"b409047f69fb85704c506753bc23a37d7ad37b54":["fdae77e30ba2f5f5d26355a2b7007b48093da17d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"560c18d71dad43d675158783c3840f8c80d6d39c":["b1197d6f54676973038ad402280d80a139dfd27b","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"fdae77e30ba2f5f5d26355a2b7007b48093da17d":["560c18d71dad43d675158783c3840f8c80d6d39c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f94e3cd399f3275b48f601d95bc80d6d9b7fc4ca"]},"commit2Childs":{"f94e3cd399f3275b48f601d95bc80d6d9b7fc4ca":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"717e5ceb2acae36d422ec75e5a4ce9fac40506e1":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"30f0564eb9a880c95340d28e0bf3d2aebb9997bc":["b1197d6f54676973038ad402280d80a139dfd27b"],"e15199583d3635cb940942caed05132dd6c4c7c6":["04983a1b95aca878f0db04dda112e321ea6483f8","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"04983a1b95aca878f0db04dda112e321ea6483f8":["30f0564eb9a880c95340d28e0bf3d2aebb9997bc"],"b1197d6f54676973038ad402280d80a139dfd27b":["c304e97e7c1d472bc70e801b35ee78583916c6cd","717e5ceb2acae36d422ec75e5a4ce9fac40506e1","560c18d71dad43d675158783c3840f8c80d6d39c"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b409047f69fb85704c506753bc23a37d7ad37b54":["f94e3cd399f3275b48f601d95bc80d6d9b7fc4ca"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e15199583d3635cb940942caed05132dd6c4c7c6","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"560c18d71dad43d675158783c3840f8c80d6d39c":["fdae77e30ba2f5f5d26355a2b7007b48093da17d"],"fdae77e30ba2f5f5d26355a2b7007b48093da17d":["b409047f69fb85704c506753bc23a37d7ad37b54"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}