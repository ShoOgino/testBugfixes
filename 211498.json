{"path":"src/java/org/apache/lucene/analysis/ru/RussianStemmer#findEnding(StringBuffer,int,char[][]).mjava","commits":[{"id":"70aa49bffe8257a0135ed4eea2633937e92e99a6","date":1032144718,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/ru/RussianStemmer#findEnding(StringBuffer,int,char[][]).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Finds ending among given ending class and returns the length of ending found(0, if not found).\n     * Creation date: (17/03/2002 8:18:34 PM)\n     * @return int\n     * @param word java.lang.StringBuffer\n     * @param theEnding char[]\n     */\n    private int findEnding(StringBuffer stemmingZone, int startIndex, char[][] theEndingClass)\n    {\n        boolean match = false;\n        for (int i = theEndingClass.length - 1; i >= 0; i--)\n        {\n            char[] theEnding = theEndingClass[i];\n            // check if the ending is bigger than stemming zone\n            if (startIndex < theEnding.length - 1)\n            {\n                match = false;\n                continue;\n            }\n            match = true;\n            int stemmingIndex = startIndex;\n            for (int j = theEnding.length - 1; j >= 0; j--)\n            {\n                if (stemmingZone.charAt(stemmingIndex--) != charset[theEnding[j]])\n                {\n                    match = false;\n                    break;\n                }\n            }\n            // check if ending was found\n            if (match)\n            {\n                return theEndingClass[i].length; // cut ending\n            }\n        }\n        return 0;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0859992fd49ca637e9f00011fa4b0281196a9c58","date":1065658314,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/ru/RussianStemmer#findEnding(StringBuffer,int,char[][]).mjava","pathOld":"src/java/org/apache/lucene/analysis/ru/RussianStemmer#findEnding(StringBuffer,int,char[][]).mjava","sourceNew":"    /**\n     * Finds ending among given ending class and returns the length of ending found(0, if not found).\n     * Creation date: (17/03/2002 8:18:34 PM)\n     */\n    private int findEnding(StringBuffer stemmingZone, int startIndex, char[][] theEndingClass)\n    {\n        boolean match = false;\n        for (int i = theEndingClass.length - 1; i >= 0; i--)\n        {\n            char[] theEnding = theEndingClass[i];\n            // check if the ending is bigger than stemming zone\n            if (startIndex < theEnding.length - 1)\n            {\n                match = false;\n                continue;\n            }\n            match = true;\n            int stemmingIndex = startIndex;\n            for (int j = theEnding.length - 1; j >= 0; j--)\n            {\n                if (stemmingZone.charAt(stemmingIndex--) != charset[theEnding[j]])\n                {\n                    match = false;\n                    break;\n                }\n            }\n            // check if ending was found\n            if (match)\n            {\n                return theEndingClass[i].length; // cut ending\n            }\n        }\n        return 0;\n    }\n\n","sourceOld":"    /**\n     * Finds ending among given ending class and returns the length of ending found(0, if not found).\n     * Creation date: (17/03/2002 8:18:34 PM)\n     * @return int\n     * @param word java.lang.StringBuffer\n     * @param theEnding char[]\n     */\n    private int findEnding(StringBuffer stemmingZone, int startIndex, char[][] theEndingClass)\n    {\n        boolean match = false;\n        for (int i = theEndingClass.length - 1; i >= 0; i--)\n        {\n            char[] theEnding = theEndingClass[i];\n            // check if the ending is bigger than stemming zone\n            if (startIndex < theEnding.length - 1)\n            {\n                match = false;\n                continue;\n            }\n            match = true;\n            int stemmingIndex = startIndex;\n            for (int j = theEnding.length - 1; j >= 0; j--)\n            {\n                if (stemmingZone.charAt(stemmingIndex--) != charset[theEnding[j]])\n                {\n                    match = false;\n                    break;\n                }\n            }\n            // check if ending was found\n            if (match)\n            {\n                return theEndingClass[i].length; // cut ending\n            }\n        }\n        return 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb502dc71e908fb2c30e64b73e1f7e7b6238f5a2","date":1092688309,"type":4,"author":"Daniel Naber","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/analysis/ru/RussianStemmer#findEnding(StringBuffer,int,char[][]).mjava","sourceNew":null,"sourceOld":"    /**\n     * Finds ending among given ending class and returns the length of ending found(0, if not found).\n     * Creation date: (17/03/2002 8:18:34 PM)\n     */\n    private int findEnding(StringBuffer stemmingZone, int startIndex, char[][] theEndingClass)\n    {\n        boolean match = false;\n        for (int i = theEndingClass.length - 1; i >= 0; i--)\n        {\n            char[] theEnding = theEndingClass[i];\n            // check if the ending is bigger than stemming zone\n            if (startIndex < theEnding.length - 1)\n            {\n                match = false;\n                continue;\n            }\n            match = true;\n            int stemmingIndex = startIndex;\n            for (int j = theEnding.length - 1; j >= 0; j--)\n            {\n                if (stemmingZone.charAt(stemmingIndex--) != charset[theEnding[j]])\n                {\n                    match = false;\n                    break;\n                }\n            }\n            // check if ending was found\n            if (match)\n            {\n                return theEndingClass[i].length; // cut ending\n            }\n        }\n        return 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0859992fd49ca637e9f00011fa4b0281196a9c58":["70aa49bffe8257a0135ed4eea2633937e92e99a6"],"eb502dc71e908fb2c30e64b73e1f7e7b6238f5a2":["0859992fd49ca637e9f00011fa4b0281196a9c58"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eb502dc71e908fb2c30e64b73e1f7e7b6238f5a2"],"70aa49bffe8257a0135ed4eea2633937e92e99a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0859992fd49ca637e9f00011fa4b0281196a9c58":["eb502dc71e908fb2c30e64b73e1f7e7b6238f5a2"],"eb502dc71e908fb2c30e64b73e1f7e7b6238f5a2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70aa49bffe8257a0135ed4eea2633937e92e99a6"],"70aa49bffe8257a0135ed4eea2633937e92e99a6":["0859992fd49ca637e9f00011fa4b0281196a9c58"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}