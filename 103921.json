{"path":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTerms(AtomicReader,String,float).mjava","commits":[{"id":"4a470c93b2b0f8f51241f52705fc110a01f27ad2","date":1337969379,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTerms(AtomicReader,String,float).mjava","pathOld":"/dev/null","sourceNew":"  public DocTerms getTerms(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    return (DocTerms) caches.get(DocTerms.class).get(reader, new Entry(field, acceptableOverheadRatio), false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a4d374b2bebd0d52acaa61038fbf23068620fba7","date":1353240004,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTerms(AtomicReader,String,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTerms(AtomicReader,String,float).mjava","sourceNew":"  public DocTerms getTerms(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    return (DocTerms) caches.get(DocTerms.class).get(reader, new CacheKey(field, acceptableOverheadRatio), false);\n  }\n\n","sourceOld":"  public DocTerms getTerms(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    return (DocTerms) caches.get(DocTerms.class).get(reader, new Entry(field, acceptableOverheadRatio), false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2dd9934a49477c83301120ba51827d91eb3606d5","date":1353767072,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTerms(AtomicReader,String,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTerms(AtomicReader,String,float).mjava","sourceNew":"  public BinaryDocValues getTerms(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    return (BinaryDocValues) caches.get(BinaryDocValues.class).get(reader, new CacheKey(field, acceptableOverheadRatio), false);\n  }\n\n","sourceOld":"  public DocTerms getTerms(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    return (DocTerms) caches.get(DocTerms.class).get(reader, new CacheKey(field, acceptableOverheadRatio), false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTerms(AtomicReader,String,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTerms(AtomicReader,String,float).mjava","sourceNew":"  @Override\n  public DocTerms getTerms(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    return (DocTerms) caches.get(DocTerms.class).get(reader, new Entry(field, acceptableOverheadRatio), false);\n  }\n\n","sourceOld":"  public DocTerms getTerms(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    return (DocTerms) caches.get(DocTerms.class).get(reader, new Entry(field, acceptableOverheadRatio), false);\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6312aec6ba581f919d406ceff362bef430382c31","date":1358775555,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTerms(AtomicReader,String,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTerms(AtomicReader,String,float).mjava","sourceNew":"  public BinaryDocValues getTerms(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    BinaryDocValues valuesIn = reader.getBinaryDocValues(field);\n    if (valuesIn == null) {\n      // nocommit is this auto-fallback ... OK?\n      valuesIn = reader.getSortedDocValues(field);\n    }\n\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    }\n\n    return (BinaryDocValues) caches.get(BinaryDocValues.class).get(reader, new CacheKey(field, acceptableOverheadRatio), false);\n  }\n\n","sourceOld":"  public BinaryDocValues getTerms(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    return (BinaryDocValues) caches.get(BinaryDocValues.class).get(reader, new CacheKey(field, acceptableOverheadRatio), false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dfc9a1c0f8c40dae949281597c97e61defe903fc","date":1359040461,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTerms(AtomicReader,String,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTerms(AtomicReader,String,float).mjava","sourceNew":"  public BinaryDocValues getTerms(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    BinaryDocValues valuesIn = reader.getBinaryDocValues(field);\n    if (valuesIn == null) {\n      valuesIn = reader.getSortedDocValues(field);\n    }\n\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    }\n\n    return (BinaryDocValues) caches.get(BinaryDocValues.class).get(reader, new CacheKey(field, acceptableOverheadRatio), false);\n  }\n\n","sourceOld":"  public BinaryDocValues getTerms(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    BinaryDocValues valuesIn = reader.getBinaryDocValues(field);\n    if (valuesIn == null) {\n      // nocommit is this auto-fallback ... OK?\n      valuesIn = reader.getSortedDocValues(field);\n    }\n\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    }\n\n    return (BinaryDocValues) caches.get(BinaryDocValues.class).get(reader, new CacheKey(field, acceptableOverheadRatio), false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTerms(AtomicReader,String,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTerms(AtomicReader,String,float).mjava","sourceNew":"  public BinaryDocValues getTerms(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    BinaryDocValues valuesIn = reader.getBinaryDocValues(field);\n    if (valuesIn == null) {\n      valuesIn = reader.getSortedDocValues(field);\n    }\n\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    }\n\n    return (BinaryDocValues) caches.get(BinaryDocValues.class).get(reader, new CacheKey(field, acceptableOverheadRatio), false);\n  }\n\n","sourceOld":"  @Override\n  public DocTerms getTerms(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    return (DocTerms) caches.get(DocTerms.class).get(reader, new Entry(field, acceptableOverheadRatio), false);\n  }\n\n","bugFix":["7530de27b87b961b51f01bd1299b7004d46e8823","4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd4c0978a282e44867032b4d99f280a07fa16321","date":1360738062,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTerms(AtomicReader,String,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTerms(AtomicReader,String,float).mjava","sourceNew":"  public BinaryDocValues getTerms(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    BinaryDocValues valuesIn = reader.getBinaryDocValues(field);\n    if (valuesIn == null) {\n      valuesIn = reader.getSortedDocValues(field);\n    }\n\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    }\n\n    final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n    if (info != null && info.hasDocValues()) {\n      throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n    }\n\n    return (BinaryDocValues) caches.get(BinaryDocValues.class).get(reader, new CacheKey(field, acceptableOverheadRatio), false);\n  }\n\n","sourceOld":"  public BinaryDocValues getTerms(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    BinaryDocValues valuesIn = reader.getBinaryDocValues(field);\n    if (valuesIn == null) {\n      valuesIn = reader.getSortedDocValues(field);\n    }\n\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    }\n\n    return (BinaryDocValues) caches.get(BinaryDocValues.class).get(reader, new CacheKey(field, acceptableOverheadRatio), false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08df901046e2bf7914ed4e142aa64ca7b2f40114","date":1360778343,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTerms(AtomicReader,String,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTerms(AtomicReader,String,float).mjava","sourceNew":"  public BinaryDocValues getTerms(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    BinaryDocValues valuesIn = reader.getBinaryDocValues(field);\n    if (valuesIn == null) {\n      valuesIn = reader.getSortedDocValues(field);\n    }\n\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    }\n\n    final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n    if (info != null && info.hasDocValues()) {\n      throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n    }\n\n    return (BinaryDocValues) caches.get(BinaryDocValues.class).get(reader, new CacheKey(field, acceptableOverheadRatio), false);\n  }\n\n","sourceOld":"  public BinaryDocValues getTerms(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    BinaryDocValues valuesIn = reader.getBinaryDocValues(field);\n    if (valuesIn == null) {\n      valuesIn = reader.getSortedDocValues(field);\n    }\n\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    }\n\n    return (BinaryDocValues) caches.get(BinaryDocValues.class).get(reader, new CacheKey(field, acceptableOverheadRatio), false);\n  }\n\n","bugFix":null,"bugIntro":["b4e0d3f6116e64a8ab4c338fed19498407856738"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b4e0d3f6116e64a8ab4c338fed19498407856738","date":1360786773,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTerms(AtomicReader,String,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTerms(AtomicReader,String,float).mjava","sourceNew":"  public BinaryDocValues getTerms(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    BinaryDocValues valuesIn = reader.getBinaryDocValues(field);\n    if (valuesIn == null) {\n      valuesIn = reader.getSortedDocValues(field);\n    }\n\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    }\n\n    final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n    if (info == null) {\n      return BinaryDocValues.EMPTY;\n    } else if (info.hasDocValues()) {\n      throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n    } else if (!info.isIndexed()) {\n      return BinaryDocValues.EMPTY;\n    }\n\n    return (BinaryDocValues) caches.get(BinaryDocValues.class).get(reader, new CacheKey(field, acceptableOverheadRatio), false);\n  }\n\n","sourceOld":"  public BinaryDocValues getTerms(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    BinaryDocValues valuesIn = reader.getBinaryDocValues(field);\n    if (valuesIn == null) {\n      valuesIn = reader.getSortedDocValues(field);\n    }\n\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    }\n\n    final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n    if (info != null && info.hasDocValues()) {\n      throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n    }\n\n    return (BinaryDocValues) caches.get(BinaryDocValues.class).get(reader, new CacheKey(field, acceptableOverheadRatio), false);\n  }\n\n","bugFix":["08df901046e2bf7914ed4e142aa64ca7b2f40114"],"bugIntro":["8429ddf2214f2bf8abcbb5484fefef6aaf5c417e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0f9453e226f2896430e77ec8e7837c1441a9aeb0","date":1360788152,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTerms(AtomicReader,String,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTerms(AtomicReader,String,float).mjava","sourceNew":"  public BinaryDocValues getTerms(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    BinaryDocValues valuesIn = reader.getBinaryDocValues(field);\n    if (valuesIn == null) {\n      valuesIn = reader.getSortedDocValues(field);\n    }\n\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    }\n\n    final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n    if (info == null) {\n      return BinaryDocValues.EMPTY;\n    } else if (info.hasDocValues()) {\n      throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n    } else if (!info.isIndexed()) {\n      return BinaryDocValues.EMPTY;\n    }\n\n    return (BinaryDocValues) caches.get(BinaryDocValues.class).get(reader, new CacheKey(field, acceptableOverheadRatio), false);\n  }\n\n","sourceOld":"  public BinaryDocValues getTerms(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    BinaryDocValues valuesIn = reader.getBinaryDocValues(field);\n    if (valuesIn == null) {\n      valuesIn = reader.getSortedDocValues(field);\n    }\n\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    }\n\n    final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n    if (info != null && info.hasDocValues()) {\n      throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n    }\n\n    return (BinaryDocValues) caches.get(BinaryDocValues.class).get(reader, new CacheKey(field, acceptableOverheadRatio), false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87d6f9603307ae2ad642fb01deedf031320fd0c3","date":1377877563,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTerms(AtomicReader,String,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTerms(AtomicReader,String,float).mjava","sourceNew":"  public BinaryDocValues getTerms(AtomicReader reader, String field, boolean setDocsWithField, float acceptableOverheadRatio) throws IOException {\n    BinaryDocValues valuesIn = reader.getBinaryDocValues(field);\n    if (valuesIn == null) {\n      valuesIn = reader.getSortedDocValues(field);\n    }\n\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    }\n\n    final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n    if (info == null) {\n      return BinaryDocValues.EMPTY;\n    } else if (info.hasDocValues()) {\n      throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n    } else if (!info.isIndexed()) {\n      return BinaryDocValues.EMPTY;\n    }\n\n    return (BinaryDocValues) caches.get(BinaryDocValues.class).get(reader, new CacheKey(field, acceptableOverheadRatio), setDocsWithField);\n  }\n\n","sourceOld":"  public BinaryDocValues getTerms(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    BinaryDocValues valuesIn = reader.getBinaryDocValues(field);\n    if (valuesIn == null) {\n      valuesIn = reader.getSortedDocValues(field);\n    }\n\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    }\n\n    final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n    if (info == null) {\n      return BinaryDocValues.EMPTY;\n    } else if (info.hasDocValues()) {\n      throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n    } else if (!info.isIndexed()) {\n      return BinaryDocValues.EMPTY;\n    }\n\n    return (BinaryDocValues) caches.get(BinaryDocValues.class).get(reader, new CacheKey(field, acceptableOverheadRatio), false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"2dd9934a49477c83301120ba51827d91eb3606d5":["a4d374b2bebd0d52acaa61038fbf23068620fba7"],"a4d374b2bebd0d52acaa61038fbf23068620fba7":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"87d6f9603307ae2ad642fb01deedf031320fd0c3":["b4e0d3f6116e64a8ab4c338fed19498407856738"],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b4e0d3f6116e64a8ab4c338fed19498407856738":["08df901046e2bf7914ed4e142aa64ca7b2f40114"],"dfc9a1c0f8c40dae949281597c97e61defe903fc":["6312aec6ba581f919d406ceff362bef430382c31"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["7530de27b87b961b51f01bd1299b7004d46e8823","dfc9a1c0f8c40dae949281597c97e61defe903fc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f9453e226f2896430e77ec8e7837c1441a9aeb0":["fd4c0978a282e44867032b4d99f280a07fa16321","b4e0d3f6116e64a8ab4c338fed19498407856738"],"6312aec6ba581f919d406ceff362bef430382c31":["2dd9934a49477c83301120ba51827d91eb3606d5"],"fd4c0978a282e44867032b4d99f280a07fa16321":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"08df901046e2bf7914ed4e142aa64ca7b2f40114":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"7530de27b87b961b51f01bd1299b7004d46e8823":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["87d6f9603307ae2ad642fb01deedf031320fd0c3"]},"commit2Childs":{"2dd9934a49477c83301120ba51827d91eb3606d5":["6312aec6ba581f919d406ceff362bef430382c31"],"a4d374b2bebd0d52acaa61038fbf23068620fba7":["2dd9934a49477c83301120ba51827d91eb3606d5"],"87d6f9603307ae2ad642fb01deedf031320fd0c3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["a4d374b2bebd0d52acaa61038fbf23068620fba7","7530de27b87b961b51f01bd1299b7004d46e8823"],"b4e0d3f6116e64a8ab4c338fed19498407856738":["87d6f9603307ae2ad642fb01deedf031320fd0c3","0f9453e226f2896430e77ec8e7837c1441a9aeb0"],"dfc9a1c0f8c40dae949281597c97e61defe903fc":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["fd4c0978a282e44867032b4d99f280a07fa16321","08df901046e2bf7914ed4e142aa64ca7b2f40114"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"0f9453e226f2896430e77ec8e7837c1441a9aeb0":[],"6312aec6ba581f919d406ceff362bef430382c31":["dfc9a1c0f8c40dae949281597c97e61defe903fc"],"fd4c0978a282e44867032b4d99f280a07fa16321":["0f9453e226f2896430e77ec8e7837c1441a9aeb0"],"08df901046e2bf7914ed4e142aa64ca7b2f40114":["b4e0d3f6116e64a8ab4c338fed19498407856738"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0f9453e226f2896430e77ec8e7837c1441a9aeb0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}