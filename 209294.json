{"path":"solr/core/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#getMBeanInfo(SolrQueryRequest).mjava","commits":[{"id":"2396be4785ec8ca6c942dff4d20c1c93dd03db6d","date":1333735663,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#getMBeanInfo(SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  protected NamedList<NamedList<NamedList<Object>>> getMBeanInfo(SolrQueryRequest req) {\n\n    NamedList<NamedList<NamedList<Object>>> cats = new NamedList<NamedList<NamedList<Object>>>();\n    \n    String[] requestedCats = req.getParams().getParams(\"cat\");\n    if (null == requestedCats || 0 == requestedCats.length) {\n      for (SolrInfoMBean.Category cat : SolrInfoMBean.Category.values()) {\n        cats.add(cat.name(), new SimpleOrderedMap<NamedList<Object>>());\n      }\n    } else {\n      for (String catName : requestedCats) {\n        cats.add(catName,new SimpleOrderedMap<NamedList<Object>>());\n      }\n    }\n         \n    Set<String> requestedKeys = arrayToSet(req.getParams().getParams(\"key\"));\n    \n    Map<String, SolrInfoMBean> reg = req.getCore().getInfoRegistry();\n    for (Map.Entry<String, SolrInfoMBean> entry : reg.entrySet()) {\n      String key = entry.getKey();\n      SolrInfoMBean m = entry.getValue();\n\n      if ( ! ( requestedKeys.isEmpty() || requestedKeys.contains(key) ) ) continue;\n\n      NamedList<NamedList<Object>> catInfo = cats.get(m.getCategory().name());\n      if ( null == catInfo ) continue;\n\n      NamedList<Object> mBeanInfo = new SimpleOrderedMap<Object>();\n      mBeanInfo.add(\"class\", m.getName());\n      mBeanInfo.add(\"version\", m.getVersion());\n      mBeanInfo.add(\"description\", m.getDescription());\n      mBeanInfo.add(\"src\", m.getSource());\n      \n      // Use an external form\n      URL[] urls = m.getDocs();\n      if(urls!=null) {\n        List<String> docs = new ArrayList<String>(urls.length);\n        for(URL url : urls) {\n          docs.add(url.toExternalForm());\n        }\n        mBeanInfo.add(\"docs\", docs);\n      }\n      \n      if (req.getParams().getFieldBool(key, \"stats\", false))\n        mBeanInfo.add(\"stats\", m.getStatistics());\n      \n      catInfo.add(key, mBeanInfo);\n    }\n    return cats;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#getMBeanInfo(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#getMBeanInfo(SolrQueryRequest).mjava","sourceNew":"  protected NamedList<NamedList<NamedList<Object>>> getMBeanInfo(SolrQueryRequest req) {\n\n    NamedList<NamedList<NamedList<Object>>> cats = new NamedList<>();\n    \n    String[] requestedCats = req.getParams().getParams(\"cat\");\n    if (null == requestedCats || 0 == requestedCats.length) {\n      for (SolrInfoMBean.Category cat : SolrInfoMBean.Category.values()) {\n        cats.add(cat.name(), new SimpleOrderedMap<NamedList<Object>>());\n      }\n    } else {\n      for (String catName : requestedCats) {\n        cats.add(catName,new SimpleOrderedMap<NamedList<Object>>());\n      }\n    }\n         \n    Set<String> requestedKeys = arrayToSet(req.getParams().getParams(\"key\"));\n    \n    Map<String, SolrInfoMBean> reg = req.getCore().getInfoRegistry();\n    for (Map.Entry<String, SolrInfoMBean> entry : reg.entrySet()) {\n      String key = entry.getKey();\n      SolrInfoMBean m = entry.getValue();\n\n      if ( ! ( requestedKeys.isEmpty() || requestedKeys.contains(key) ) ) continue;\n\n      NamedList<NamedList<Object>> catInfo = cats.get(m.getCategory().name());\n      if ( null == catInfo ) continue;\n\n      NamedList<Object> mBeanInfo = new SimpleOrderedMap<>();\n      mBeanInfo.add(\"class\", m.getName());\n      mBeanInfo.add(\"version\", m.getVersion());\n      mBeanInfo.add(\"description\", m.getDescription());\n      mBeanInfo.add(\"src\", m.getSource());\n      \n      // Use an external form\n      URL[] urls = m.getDocs();\n      if(urls!=null) {\n        List<String> docs = new ArrayList<>(urls.length);\n        for(URL url : urls) {\n          docs.add(url.toExternalForm());\n        }\n        mBeanInfo.add(\"docs\", docs);\n      }\n      \n      if (req.getParams().getFieldBool(key, \"stats\", false))\n        mBeanInfo.add(\"stats\", m.getStatistics());\n      \n      catInfo.add(key, mBeanInfo);\n    }\n    return cats;\n  }\n\n","sourceOld":"  protected NamedList<NamedList<NamedList<Object>>> getMBeanInfo(SolrQueryRequest req) {\n\n    NamedList<NamedList<NamedList<Object>>> cats = new NamedList<NamedList<NamedList<Object>>>();\n    \n    String[] requestedCats = req.getParams().getParams(\"cat\");\n    if (null == requestedCats || 0 == requestedCats.length) {\n      for (SolrInfoMBean.Category cat : SolrInfoMBean.Category.values()) {\n        cats.add(cat.name(), new SimpleOrderedMap<NamedList<Object>>());\n      }\n    } else {\n      for (String catName : requestedCats) {\n        cats.add(catName,new SimpleOrderedMap<NamedList<Object>>());\n      }\n    }\n         \n    Set<String> requestedKeys = arrayToSet(req.getParams().getParams(\"key\"));\n    \n    Map<String, SolrInfoMBean> reg = req.getCore().getInfoRegistry();\n    for (Map.Entry<String, SolrInfoMBean> entry : reg.entrySet()) {\n      String key = entry.getKey();\n      SolrInfoMBean m = entry.getValue();\n\n      if ( ! ( requestedKeys.isEmpty() || requestedKeys.contains(key) ) ) continue;\n\n      NamedList<NamedList<Object>> catInfo = cats.get(m.getCategory().name());\n      if ( null == catInfo ) continue;\n\n      NamedList<Object> mBeanInfo = new SimpleOrderedMap<Object>();\n      mBeanInfo.add(\"class\", m.getName());\n      mBeanInfo.add(\"version\", m.getVersion());\n      mBeanInfo.add(\"description\", m.getDescription());\n      mBeanInfo.add(\"src\", m.getSource());\n      \n      // Use an external form\n      URL[] urls = m.getDocs();\n      if(urls!=null) {\n        List<String> docs = new ArrayList<String>(urls.length);\n        for(URL url : urls) {\n          docs.add(url.toExternalForm());\n        }\n        mBeanInfo.add(\"docs\", docs);\n      }\n      \n      if (req.getParams().getFieldBool(key, \"stats\", false))\n        mBeanInfo.add(\"stats\", m.getStatistics());\n      \n      catInfo.add(key, mBeanInfo);\n    }\n    return cats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbe30a91ef129cf3467a1598f9a437af92cdde80","date":1403618032,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#getMBeanInfo(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#getMBeanInfo(SolrQueryRequest).mjava","sourceNew":"  protected NamedList<NamedList<NamedList<Object>>> getMBeanInfo(SolrQueryRequest req) {\n\n    NamedList<NamedList<NamedList<Object>>> cats = new NamedList<>();\n    \n    String[] requestedCats = req.getParams().getParams(\"cat\");\n    if (null == requestedCats || 0 == requestedCats.length) {\n      for (SolrInfoMBean.Category cat : SolrInfoMBean.Category.values()) {\n        cats.add(cat.name(), new SimpleOrderedMap<NamedList<Object>>());\n      }\n    } else {\n      for (String catName : requestedCats) {\n        cats.add(catName,new SimpleOrderedMap<NamedList<Object>>());\n      }\n    }\n         \n    Set<String> requestedKeys = arrayToSet(req.getParams().getParams(\"key\"));\n    \n    Map<String, SolrInfoMBean> reg = req.getCore().getInfoRegistry();\n    for (Map.Entry<String, SolrInfoMBean> entry : reg.entrySet()) {\n      addMBean(req, cats, requestedKeys, entry.getKey(),entry.getValue());\n    }\n\n    for (SolrInfoMBean infoMBean : req.getCore().getCoreDescriptor().getCoreContainer().getResourceLoader().getInfoMBeans()) {\n      addMBean(req,cats,requestedKeys,infoMBean.getName(),infoMBean);\n    }\n    return cats;\n  }\n\n","sourceOld":"  protected NamedList<NamedList<NamedList<Object>>> getMBeanInfo(SolrQueryRequest req) {\n\n    NamedList<NamedList<NamedList<Object>>> cats = new NamedList<>();\n    \n    String[] requestedCats = req.getParams().getParams(\"cat\");\n    if (null == requestedCats || 0 == requestedCats.length) {\n      for (SolrInfoMBean.Category cat : SolrInfoMBean.Category.values()) {\n        cats.add(cat.name(), new SimpleOrderedMap<NamedList<Object>>());\n      }\n    } else {\n      for (String catName : requestedCats) {\n        cats.add(catName,new SimpleOrderedMap<NamedList<Object>>());\n      }\n    }\n         \n    Set<String> requestedKeys = arrayToSet(req.getParams().getParams(\"key\"));\n    \n    Map<String, SolrInfoMBean> reg = req.getCore().getInfoRegistry();\n    for (Map.Entry<String, SolrInfoMBean> entry : reg.entrySet()) {\n      String key = entry.getKey();\n      SolrInfoMBean m = entry.getValue();\n\n      if ( ! ( requestedKeys.isEmpty() || requestedKeys.contains(key) ) ) continue;\n\n      NamedList<NamedList<Object>> catInfo = cats.get(m.getCategory().name());\n      if ( null == catInfo ) continue;\n\n      NamedList<Object> mBeanInfo = new SimpleOrderedMap<>();\n      mBeanInfo.add(\"class\", m.getName());\n      mBeanInfo.add(\"version\", m.getVersion());\n      mBeanInfo.add(\"description\", m.getDescription());\n      mBeanInfo.add(\"src\", m.getSource());\n      \n      // Use an external form\n      URL[] urls = m.getDocs();\n      if(urls!=null) {\n        List<String> docs = new ArrayList<>(urls.length);\n        for(URL url : urls) {\n          docs.add(url.toExternalForm());\n        }\n        mBeanInfo.add(\"docs\", docs);\n      }\n      \n      if (req.getParams().getFieldBool(key, \"stats\", false))\n        mBeanInfo.add(\"stats\", m.getStatistics());\n      \n      catInfo.add(key, mBeanInfo);\n    }\n    return cats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#getMBeanInfo(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#getMBeanInfo(SolrQueryRequest).mjava","sourceNew":"  protected NamedList<NamedList<NamedList<Object>>> getMBeanInfo(SolrQueryRequest req) {\n\n    NamedList<NamedList<NamedList<Object>>> cats = new NamedList<>();\n    \n    String[] requestedCats = req.getParams().getParams(\"cat\");\n    if (null == requestedCats || 0 == requestedCats.length) {\n      for (SolrInfoBean.Category cat : SolrInfoBean.Category.values()) {\n        cats.add(cat.name(), new SimpleOrderedMap<NamedList<Object>>());\n      }\n    } else {\n      for (String catName : requestedCats) {\n        cats.add(catName,new SimpleOrderedMap<NamedList<Object>>());\n      }\n    }\n         \n    Set<String> requestedKeys = arrayToSet(req.getParams().getParams(\"key\"));\n    \n    Map<String, SolrInfoBean> reg = req.getCore().getInfoRegistry();\n    for (Map.Entry<String, SolrInfoBean> entry : reg.entrySet()) {\n      addMBean(req, cats, requestedKeys, entry.getKey(),entry.getValue());\n    }\n\n    for (SolrInfoBean infoMBean : req.getCore().getCoreDescriptor().getCoreContainer().getResourceLoader().getInfoMBeans()) {\n      addMBean(req,cats,requestedKeys,infoMBean.getName(),infoMBean);\n    }\n    return cats;\n  }\n\n","sourceOld":"  protected NamedList<NamedList<NamedList<Object>>> getMBeanInfo(SolrQueryRequest req) {\n\n    NamedList<NamedList<NamedList<Object>>> cats = new NamedList<>();\n    \n    String[] requestedCats = req.getParams().getParams(\"cat\");\n    if (null == requestedCats || 0 == requestedCats.length) {\n      for (SolrInfoMBean.Category cat : SolrInfoMBean.Category.values()) {\n        cats.add(cat.name(), new SimpleOrderedMap<NamedList<Object>>());\n      }\n    } else {\n      for (String catName : requestedCats) {\n        cats.add(catName,new SimpleOrderedMap<NamedList<Object>>());\n      }\n    }\n         \n    Set<String> requestedKeys = arrayToSet(req.getParams().getParams(\"key\"));\n    \n    Map<String, SolrInfoMBean> reg = req.getCore().getInfoRegistry();\n    for (Map.Entry<String, SolrInfoMBean> entry : reg.entrySet()) {\n      addMBean(req, cats, requestedKeys, entry.getKey(),entry.getValue());\n    }\n\n    for (SolrInfoMBean infoMBean : req.getCore().getCoreDescriptor().getCoreContainer().getResourceLoader().getInfoMBeans()) {\n      addMBean(req,cats,requestedKeys,infoMBean.getName(),infoMBean);\n    }\n    return cats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#getMBeanInfo(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#getMBeanInfo(SolrQueryRequest).mjava","sourceNew":"  protected NamedList<NamedList<NamedList<Object>>> getMBeanInfo(SolrQueryRequest req) {\n\n    NamedList<NamedList<NamedList<Object>>> cats = new NamedList<>();\n    \n    String[] requestedCats = req.getParams().getParams(\"cat\");\n    if (null == requestedCats || 0 == requestedCats.length) {\n      for (SolrInfoBean.Category cat : SolrInfoBean.Category.values()) {\n        cats.add(cat.name(), new SimpleOrderedMap<NamedList<Object>>());\n      }\n    } else {\n      for (String catName : requestedCats) {\n        cats.add(catName,new SimpleOrderedMap<NamedList<Object>>());\n      }\n    }\n         \n    Set<String> requestedKeys = arrayToSet(req.getParams().getParams(\"key\"));\n    \n    Map<String, SolrInfoBean> reg = req.getCore().getInfoRegistry();\n    for (Map.Entry<String, SolrInfoBean> entry : reg.entrySet()) {\n      addMBean(req, cats, requestedKeys, entry.getKey(),entry.getValue());\n    }\n\n    for (SolrInfoBean infoMBean : req.getCore().getCoreContainer().getResourceLoader().getInfoMBeans()) {\n      addMBean(req,cats,requestedKeys,infoMBean.getName(),infoMBean);\n    }\n    return cats;\n  }\n\n","sourceOld":"  protected NamedList<NamedList<NamedList<Object>>> getMBeanInfo(SolrQueryRequest req) {\n\n    NamedList<NamedList<NamedList<Object>>> cats = new NamedList<>();\n    \n    String[] requestedCats = req.getParams().getParams(\"cat\");\n    if (null == requestedCats || 0 == requestedCats.length) {\n      for (SolrInfoBean.Category cat : SolrInfoBean.Category.values()) {\n        cats.add(cat.name(), new SimpleOrderedMap<NamedList<Object>>());\n      }\n    } else {\n      for (String catName : requestedCats) {\n        cats.add(catName,new SimpleOrderedMap<NamedList<Object>>());\n      }\n    }\n         \n    Set<String> requestedKeys = arrayToSet(req.getParams().getParams(\"key\"));\n    \n    Map<String, SolrInfoBean> reg = req.getCore().getInfoRegistry();\n    for (Map.Entry<String, SolrInfoBean> entry : reg.entrySet()) {\n      addMBean(req, cats, requestedKeys, entry.getKey(),entry.getValue());\n    }\n\n    for (SolrInfoBean infoMBean : req.getCore().getCoreDescriptor().getCoreContainer().getResourceLoader().getInfoMBeans()) {\n      addMBean(req,cats,requestedKeys,infoMBean.getName(),infoMBean);\n    }\n    return cats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#getMBeanInfo(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#getMBeanInfo(SolrQueryRequest).mjava","sourceNew":"  protected NamedList<NamedList<NamedList<Object>>> getMBeanInfo(SolrQueryRequest req) {\n\n    NamedList<NamedList<NamedList<Object>>> cats = new NamedList<>();\n    \n    String[] requestedCats = req.getParams().getParams(\"cat\");\n    if (null == requestedCats || 0 == requestedCats.length) {\n      for (SolrInfoBean.Category cat : SolrInfoBean.Category.values()) {\n        cats.add(cat.name(), new SimpleOrderedMap<NamedList<Object>>());\n      }\n    } else {\n      for (String catName : requestedCats) {\n        cats.add(catName,new SimpleOrderedMap<NamedList<Object>>());\n      }\n    }\n         \n    Set<String> requestedKeys = arrayToSet(req.getParams().getParams(\"key\"));\n    \n    Map<String, SolrInfoBean> reg = req.getCore().getInfoRegistry();\n    for (Map.Entry<String, SolrInfoBean> entry : reg.entrySet()) {\n      addMBean(req, cats, requestedKeys, entry.getKey(),entry.getValue());\n    }\n\n    for (SolrInfoBean infoMBean : req.getCore().getCoreContainer().getResourceLoader().getInfoMBeans()) {\n      addMBean(req,cats,requestedKeys,infoMBean.getName(),infoMBean);\n    }\n    return cats;\n  }\n\n","sourceOld":"  protected NamedList<NamedList<NamedList<Object>>> getMBeanInfo(SolrQueryRequest req) {\n\n    NamedList<NamedList<NamedList<Object>>> cats = new NamedList<>();\n    \n    String[] requestedCats = req.getParams().getParams(\"cat\");\n    if (null == requestedCats || 0 == requestedCats.length) {\n      for (SolrInfoMBean.Category cat : SolrInfoMBean.Category.values()) {\n        cats.add(cat.name(), new SimpleOrderedMap<NamedList<Object>>());\n      }\n    } else {\n      for (String catName : requestedCats) {\n        cats.add(catName,new SimpleOrderedMap<NamedList<Object>>());\n      }\n    }\n         \n    Set<String> requestedKeys = arrayToSet(req.getParams().getParams(\"key\"));\n    \n    Map<String, SolrInfoMBean> reg = req.getCore().getInfoRegistry();\n    for (Map.Entry<String, SolrInfoMBean> entry : reg.entrySet()) {\n      addMBean(req, cats, requestedKeys, entry.getKey(),entry.getValue());\n    }\n\n    for (SolrInfoMBean infoMBean : req.getCore().getCoreDescriptor().getCoreContainer().getResourceLoader().getInfoMBeans()) {\n      addMBean(req,cats,requestedKeys,infoMBean.getName(),infoMBean);\n    }\n    return cats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["fbe30a91ef129cf3467a1598f9a437af92cdde80"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["2396be4785ec8ca6c942dff4d20c1c93dd03db6d"],"fbe30a91ef129cf3467a1598f9a437af92cdde80":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2396be4785ec8ca6c942dff4d20c1c93dd03db6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["816521ebaad5add9cb96bb88c577394e2938c40b"],"816521ebaad5add9cb96bb88c577394e2938c40b":["fbe30a91ef129cf3467a1598f9a437af92cdde80"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["fbe30a91ef129cf3467a1598f9a437af92cdde80"],"fbe30a91ef129cf3467a1598f9a437af92cdde80":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2396be4785ec8ca6c942dff4d20c1c93dd03db6d"],"2396be4785ec8ca6c942dff4d20c1c93dd03db6d":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"816521ebaad5add9cb96bb88c577394e2938c40b":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}