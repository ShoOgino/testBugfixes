{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.EverythingEnum#EverythingEnum(FieldInfo).mjava","commits":[{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.EverythingEnum#EverythingEnum(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.EverythingEnum#EverythingEnum(FieldInfo).mjava","sourceNew":"    public EverythingEnum(FieldInfo fieldInfo) throws IOException {\n      this.startDocIn = Lucene41PostingsReader.this.docIn;\n      this.docIn = null;\n      this.posIn = Lucene41PostingsReader.this.posIn.clone();\n      this.payIn = Lucene41PostingsReader.this.payIn.clone();\n      encoded = new byte[MAX_ENCODED_SIZE];\n      indexHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      if (indexHasOffsets) {\n        offsetStartDeltaBuffer = new int[MAX_DATA_SIZE];\n        offsetLengthBuffer = new int[MAX_DATA_SIZE];\n      } else {\n        offsetStartDeltaBuffer = null;\n        offsetLengthBuffer = null;\n        startOffset = -1;\n        endOffset = -1;\n      }\n\n      indexHasPayloads = fieldInfo.hasPayloads();\n      if (indexHasPayloads) {\n        payloadLengthBuffer = new int[MAX_DATA_SIZE];\n        payloadBytes = new byte[128];\n        payload = new BytesRef();\n      } else {\n        payloadLengthBuffer = null;\n        payloadBytes = null;\n        payload = null;\n      }\n    }\n\n","sourceOld":"    public EverythingEnum(FieldInfo fieldInfo) throws IOException {\n      this.startDocIn = Lucene41PostingsReader.this.docIn;\n      this.docIn = null;\n      this.posIn = Lucene41PostingsReader.this.posIn.clone();\n      this.payIn = Lucene41PostingsReader.this.payIn.clone();\n      encoded = new byte[MAX_ENCODED_SIZE];\n      indexHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      if (indexHasOffsets) {\n        offsetStartDeltaBuffer = new int[MAX_DATA_SIZE];\n        offsetLengthBuffer = new int[MAX_DATA_SIZE];\n      } else {\n        offsetStartDeltaBuffer = null;\n        offsetLengthBuffer = null;\n        startOffset = -1;\n        endOffset = -1;\n      }\n\n      indexHasPayloads = fieldInfo.hasPayloads();\n      if (indexHasPayloads) {\n        payloadLengthBuffer = new int[MAX_DATA_SIZE];\n        payloadBytes = new byte[128];\n        payload = new BytesRef();\n      } else {\n        payloadLengthBuffer = null;\n        payloadBytes = null;\n        payload = null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.EverythingEnum#EverythingEnum(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.EverythingEnum#EverythingEnum(FieldInfo).mjava","sourceNew":"    public EverythingEnum(FieldInfo fieldInfo) throws IOException {\n      this.startDocIn = Lucene41PostingsReader.this.docIn;\n      this.docIn = null;\n      this.posIn = Lucene41PostingsReader.this.posIn.clone();\n      this.payIn = Lucene41PostingsReader.this.payIn.clone();\n      encoded = new byte[MAX_ENCODED_SIZE];\n      indexHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      if (indexHasOffsets) {\n        offsetStartDeltaBuffer = new int[MAX_DATA_SIZE];\n        offsetLengthBuffer = new int[MAX_DATA_SIZE];\n      } else {\n        offsetStartDeltaBuffer = null;\n        offsetLengthBuffer = null;\n        startOffset = -1;\n        endOffset = -1;\n      }\n\n      indexHasPayloads = fieldInfo.hasPayloads();\n      if (indexHasPayloads) {\n        payloadLengthBuffer = new int[MAX_DATA_SIZE];\n        payloadBytes = new byte[128];\n        payload = new BytesRef();\n      } else {\n        payloadLengthBuffer = null;\n        payloadBytes = null;\n        payload = null;\n      }\n    }\n\n","sourceOld":"    public EverythingEnum(FieldInfo fieldInfo) throws IOException {\n      this.startDocIn = Lucene41PostingsReader.this.docIn;\n      this.docIn = null;\n      this.posIn = Lucene41PostingsReader.this.posIn.clone();\n      this.payIn = Lucene41PostingsReader.this.payIn.clone();\n      encoded = new byte[MAX_ENCODED_SIZE];\n      indexHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      if (indexHasOffsets) {\n        offsetStartDeltaBuffer = new int[MAX_DATA_SIZE];\n        offsetLengthBuffer = new int[MAX_DATA_SIZE];\n      } else {\n        offsetStartDeltaBuffer = null;\n        offsetLengthBuffer = null;\n        startOffset = -1;\n        endOffset = -1;\n      }\n\n      indexHasPayloads = fieldInfo.hasPayloads();\n      if (indexHasPayloads) {\n        payloadLengthBuffer = new int[MAX_DATA_SIZE];\n        payloadBytes = new byte[128];\n        payload = new BytesRef();\n      } else {\n        payloadLengthBuffer = null;\n        payloadBytes = null;\n        payload = null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.EverythingEnum#EverythingEnum(FieldInfo).mjava","sourceNew":null,"sourceOld":"    public EverythingEnum(FieldInfo fieldInfo) throws IOException {\n      this.startDocIn = Lucene41PostingsReader.this.docIn;\n      this.docIn = null;\n      this.posIn = Lucene41PostingsReader.this.posIn.clone();\n      this.payIn = Lucene41PostingsReader.this.payIn.clone();\n      encoded = new byte[MAX_ENCODED_SIZE];\n      indexHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      if (indexHasOffsets) {\n        offsetStartDeltaBuffer = new int[MAX_DATA_SIZE];\n        offsetLengthBuffer = new int[MAX_DATA_SIZE];\n      } else {\n        offsetStartDeltaBuffer = null;\n        offsetLengthBuffer = null;\n        startOffset = -1;\n        endOffset = -1;\n      }\n\n      indexHasPayloads = fieldInfo.hasPayloads();\n      if (indexHasPayloads) {\n        payloadLengthBuffer = new int[MAX_DATA_SIZE];\n        payloadBytes = new byte[128];\n        payload = new BytesRef();\n      } else {\n        payloadLengthBuffer = null;\n        payloadBytes = null;\n        payload = null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"99eb4a732d1a908f4636ace52928876136bf1896":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","99eb4a732d1a908f4636ace52928876136bf1896"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99eb4a732d1a908f4636ace52928876136bf1896","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}