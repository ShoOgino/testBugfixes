{"path":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#doHighlightingOfField(SolrDocument,int,SchemaField,FvhContainer,Query,IndexReader,SolrQueryRequest,SolrParams).mjava","commits":[{"id":"1a9aeb4a98b03660f065aa31f6b3f2251a12b613","date":1581405488,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#doHighlightingOfField(SolrDocument,int,SchemaField,FvhContainer,Query,IndexReader,SolrQueryRequest,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#doHighlightingOfField(Document,int,SchemaField,FvhContainer,Query,IndexReader,SolrQueryRequest,SolrParams).mjava","sourceNew":"  protected Object doHighlightingOfField(SolrDocument doc, int docId, SchemaField schemaField,\n                                         FvhContainer fvhContainer, Query query, IndexReader reader, SolrQueryRequest req,\n                                         SolrParams params) throws IOException {\n    Object fieldHighlights;\n    if (schemaField == null) {\n      fieldHighlights = null;\n    } else if (schemaField.getType() instanceof org.apache.solr.schema.TrieField) {\n      // TODO: highlighting numeric fields is broken (Lucene) - so we disable them until fixed (see LUCENE-3080)!\n      fieldHighlights = null;\n    } else if (useFastVectorHighlighter(params, schemaField)) {\n      if (fvhContainer.fieldQuery == null) {\n        FastVectorHighlighter fvh = new FastVectorHighlighter(\n            // FVH cannot process hl.usePhraseHighlighter parameter per-field basis\n            params.getBool(HighlightParams.USE_PHRASE_HIGHLIGHTER, true),\n            // FVH cannot process hl.requireFieldMatch parameter per-field basis\n            params.getBool(HighlightParams.FIELD_MATCH, false)) {\n          @Override\n          public FieldQuery getFieldQuery(Query query, IndexReader reader) throws IOException {\n            return new FieldQuery(query, reader, phraseHighlight, fieldMatch) {\n              @Override\n              protected void flatten(Query sourceQuery, IndexReader reader, Collection<Query> flatQueries, float boost) throws IOException {\n                if (sourceQuery instanceof ToParentBlockJoinQuery) {\n                  Query childQuery = ((ToParentBlockJoinQuery) sourceQuery).getChildQuery();\n                  if (childQuery != null) {\n                    flatten(childQuery, reader, flatQueries, boost);\n                  }\n                } else {\n                  super.flatten(sourceQuery, reader, flatQueries, boost);\n                }\n              }\n            };\n          }\n        };\n        fvh.setPhraseLimit(params.getInt(HighlightParams.PHRASE_LIMIT, SolrHighlighter.DEFAULT_PHRASE_LIMIT));\n        fvhContainer.fvh = fvh;\n        fvhContainer.fieldQuery = fvh.getFieldQuery(query, reader);\n      }\n      fieldHighlights =\n          doHighlightingByFastVectorHighlighter(doc, docId, schemaField, fvhContainer, reader, req);\n    } else { // standard/default highlighter\n      fieldHighlights = doHighlightingByHighlighter(doc, docId, schemaField, query, reader, req);\n    }\n    return fieldHighlights;\n  }\n\n","sourceOld":"  protected Object doHighlightingOfField(Document doc, int docId, SchemaField schemaField,\n                                       FvhContainer fvhContainer, Query query, IndexReader reader, SolrQueryRequest req,\n                                       SolrParams params) throws IOException {\n    Object fieldHighlights;\n    if (schemaField == null) {\n      fieldHighlights = null;\n    } else if (schemaField.getType() instanceof org.apache.solr.schema.TrieField) {\n      // TODO: highlighting numeric fields is broken (Lucene) - so we disable them until fixed (see LUCENE-3080)!\n      fieldHighlights = null;\n    } else if (useFastVectorHighlighter(params, schemaField)) {\n      if (fvhContainer.fieldQuery == null) {\n        FastVectorHighlighter fvh = new FastVectorHighlighter(\n            // FVH cannot process hl.usePhraseHighlighter parameter per-field basis\n            params.getBool(HighlightParams.USE_PHRASE_HIGHLIGHTER, true),\n            // FVH cannot process hl.requireFieldMatch parameter per-field basis\n            params.getBool(HighlightParams.FIELD_MATCH, false)) {\n          @Override\n          public FieldQuery getFieldQuery(Query query, IndexReader reader) throws IOException {\n            return new FieldQuery(query, reader, phraseHighlight, fieldMatch) {\n              @Override\n              protected void flatten(Query sourceQuery, IndexReader reader, Collection<Query> flatQueries, float boost) throws IOException {\n                if (sourceQuery instanceof ToParentBlockJoinQuery) {\n                  Query childQuery = ((ToParentBlockJoinQuery) sourceQuery).getChildQuery();\n                  if (childQuery != null) {\n                    flatten(childQuery, reader, flatQueries, boost);\n                  }\n                } else {\n                  super.flatten(sourceQuery, reader, flatQueries, boost);\n                }\n              }\n            };\n          }\n        };\n        fvh.setPhraseLimit(params.getInt(HighlightParams.PHRASE_LIMIT, SolrHighlighter.DEFAULT_PHRASE_LIMIT));\n        fvhContainer.fvh = fvh;\n        fvhContainer.fieldQuery = fvh.getFieldQuery(query, reader);\n      }\n      fieldHighlights =\n          doHighlightingByFastVectorHighlighter(doc, docId, schemaField, fvhContainer, reader, req);\n    } else { // standard/default highlighter\n      fieldHighlights = doHighlightingByHighlighter(doc, docId, schemaField, query, reader, req);\n    }\n    return fieldHighlights;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#doHighlightingOfField(SolrDocument,int,SchemaField,FvhContainer,Query,IndexReader,SolrQueryRequest,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#doHighlightingOfField(SolrDocument,int,SchemaField,FvhContainer,Query,IndexReader,SolrQueryRequest,SolrParams).mjava","sourceNew":"  protected Object doHighlightingOfField(SolrDocument doc, int docId, SchemaField schemaField,\n                                         FvhContainer fvhContainer, Query query, IndexReader reader, SolrQueryRequest req,\n                                         SolrParams params) throws IOException {\n    Object fieldHighlights;\n    if (schemaField == null) {\n      fieldHighlights = null;\n    } else if (schemaField.getType() instanceof org.apache.solr.schema.TrieField) {\n      // TODO: highlighting numeric fields is broken (Lucene) - so we disable them until fixed (see LUCENE-3080)!\n      fieldHighlights = null;\n    } else if (useFastVectorHighlighter(params, schemaField)) {\n      if (fvhContainer.fieldQuery == null) {\n        FastVectorHighlighter fvh = new FastVectorHighlighter(\n                // FVH cannot process hl.usePhraseHighlighter parameter per-field basis\n                params.getBool(HighlightParams.USE_PHRASE_HIGHLIGHTER, true),\n                // FVH cannot process hl.requireFieldMatch parameter per-field basis\n                params.getBool(HighlightParams.FIELD_MATCH, false)) {\n          @Override\n          public FieldQuery getFieldQuery(Query query, IndexReader reader) throws IOException {\n            return new FieldQuery(query, reader, phraseHighlight, fieldMatch) {\n              @Override\n              protected void flatten(Query sourceQuery, IndexReader reader, Collection<Query> flatQueries, float boost) throws IOException {\n                if (sourceQuery instanceof ToParentBlockJoinQuery) {\n                  Query childQuery = ((ToParentBlockJoinQuery) sourceQuery).getChildQuery();\n                  if (childQuery != null) {\n                    flatten(childQuery, reader, flatQueries, boost);\n                  }\n                } else {\n                  super.flatten(sourceQuery, reader, flatQueries, boost);\n                }\n              }\n            };\n          }\n        };\n        fvh.setPhraseLimit(params.getInt(HighlightParams.PHRASE_LIMIT, SolrHighlighter.DEFAULT_PHRASE_LIMIT));\n        fvhContainer.fvh = fvh;\n        fvhContainer.fieldQuery = fvh.getFieldQuery(query, reader);\n      }\n      fieldHighlights =\n              doHighlightingByFastVectorHighlighter(doc, docId, schemaField, fvhContainer, reader, req);\n    } else { // standard/default highlighter\n      fieldHighlights = doHighlightingByHighlighter(doc, docId, schemaField, query, reader, req);\n    }\n    return fieldHighlights;\n  }\n\n","sourceOld":"  protected Object doHighlightingOfField(SolrDocument doc, int docId, SchemaField schemaField,\n                                         FvhContainer fvhContainer, Query query, IndexReader reader, SolrQueryRequest req,\n                                         SolrParams params) throws IOException {\n    Object fieldHighlights;\n    if (schemaField == null) {\n      fieldHighlights = null;\n    } else if (schemaField.getType() instanceof org.apache.solr.schema.TrieField) {\n      // TODO: highlighting numeric fields is broken (Lucene) - so we disable them until fixed (see LUCENE-3080)!\n      fieldHighlights = null;\n    } else if (useFastVectorHighlighter(params, schemaField)) {\n      if (fvhContainer.fieldQuery == null) {\n        FastVectorHighlighter fvh = new FastVectorHighlighter(\n            // FVH cannot process hl.usePhraseHighlighter parameter per-field basis\n            params.getBool(HighlightParams.USE_PHRASE_HIGHLIGHTER, true),\n            // FVH cannot process hl.requireFieldMatch parameter per-field basis\n            params.getBool(HighlightParams.FIELD_MATCH, false)) {\n          @Override\n          public FieldQuery getFieldQuery(Query query, IndexReader reader) throws IOException {\n            return new FieldQuery(query, reader, phraseHighlight, fieldMatch) {\n              @Override\n              protected void flatten(Query sourceQuery, IndexReader reader, Collection<Query> flatQueries, float boost) throws IOException {\n                if (sourceQuery instanceof ToParentBlockJoinQuery) {\n                  Query childQuery = ((ToParentBlockJoinQuery) sourceQuery).getChildQuery();\n                  if (childQuery != null) {\n                    flatten(childQuery, reader, flatQueries, boost);\n                  }\n                } else {\n                  super.flatten(sourceQuery, reader, flatQueries, boost);\n                }\n              }\n            };\n          }\n        };\n        fvh.setPhraseLimit(params.getInt(HighlightParams.PHRASE_LIMIT, SolrHighlighter.DEFAULT_PHRASE_LIMIT));\n        fvhContainer.fvh = fvh;\n        fvhContainer.fieldQuery = fvh.getFieldQuery(query, reader);\n      }\n      fieldHighlights =\n          doHighlightingByFastVectorHighlighter(doc, docId, schemaField, fvhContainer, reader, req);\n    } else { // standard/default highlighter\n      fieldHighlights = doHighlightingByHighlighter(doc, docId, schemaField, query, reader, req);\n    }\n    return fieldHighlights;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["1a9aeb4a98b03660f065aa31f6b3f2251a12b613"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1a9aeb4a98b03660f065aa31f6b3f2251a12b613":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"]},"commit2Childs":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1a9aeb4a98b03660f065aa31f6b3f2251a12b613"],"1a9aeb4a98b03660f065aa31f6b3f2251a12b613":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}