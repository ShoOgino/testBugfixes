{"path":"lucene/src/java/org/apache/lucene/search/NRTManager#close().mjava","commits":[{"id":"df16fc2e9b615e0138edac46655ae628f5d098ad","date":1320876869,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/NRTManager#close().mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManager#close().mjava","sourceNew":"  /**\n   * Close this NRTManager to future searching. Any searches still in process in\n   * other threads won't be affected, and they should still call\n   * {@link SearcherManager#release(IndexSearcher)} after they are done.\n   * \n   * <p>\n   * <b>NOTE</b>: caller must separately close the writer.\n   */\n  public void close() throws IOException {\n    reopenLock.lock();\n    try {\n      try {\n        IOUtils.close(withDeletes, withoutDeletes);\n      } finally { // make sure we signal even if close throws an exception\n        newGeneration.signalAll();\n      }\n    } finally {\n      reopenLock.unlock();\n      assert withDeletes.generation == MAX_SEARCHER_GEN && withoutDeletes.generation == MAX_SEARCHER_GEN;\n    }\n  }\n\n","sourceOld":"  /**\n   * Close this NRTManager to future searching. Any searches still in process in\n   * other threads won't be affected, and they should still call\n   * {@link SearcherManager#release(IndexSearcher)} after they are done.\n   * \n   * <p>\n   * <b>NOTE</b>: caller must separately close the writer.\n   */\n  public void close() throws IOException {\n    reopenLock.lock();\n    try {\n      try {\n        IOUtils.close(withDeletes, withoutDeletes);\n      } finally { // make sure we signal even if close throws an exception\n        newGeneration.signalAll();\n      }\n    } finally {\n      reopenLock.unlock();\n      assert withDeletes.generation == MAX_SEARCHER_GEN && withoutDeletes.generation == MAX_SEARCHER_GEN;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/NRTManager#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/NRTManager#close().mjava","sourceNew":"  /**\n   * Close this NRTManager to future searching. Any searches still in process in\n   * other threads won't be affected, and they should still call\n   * {@link SearcherManager#release(IndexSearcher)} after they are done.\n   * \n   * <p>\n   * <b>NOTE</b>: caller must separately close the writer.\n   */\n  public void close() throws IOException {\n    reopenLock.lock();\n    try {\n      try {\n        IOUtils.close(withDeletes, withoutDeletes);\n      } finally { // make sure we signal even if close throws an exception\n        newGeneration.signalAll();\n      }\n    } finally {\n      reopenLock.unlock();\n      assert withDeletes.generation == MAX_SEARCHER_GEN && withoutDeletes.generation == MAX_SEARCHER_GEN;\n    }\n  }\n\n","sourceOld":"  /**\n   * Close this NRTManager to future searching. Any searches still in process in\n   * other threads won't be affected, and they should still call\n   * {@link SearcherManager#release(IndexSearcher)} after they are done.\n   * \n   * <p>\n   * <b>NOTE</b>: caller must separately close the writer.\n   */\n  public void close() throws IOException {\n    reopenLock.lock();\n    try {\n      try {\n        IOUtils.close(withDeletes, withoutDeletes);\n      } finally { // make sure we signal even if close throws an exception\n        newGeneration.signalAll();\n      }\n    } finally {\n      reopenLock.unlock();\n      assert withDeletes.generation == MAX_SEARCHER_GEN && withoutDeletes.generation == MAX_SEARCHER_GEN;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df16fc2e9b615e0138edac46655ae628f5d098ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["df16fc2e9b615e0138edac46655ae628f5d098ad"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"df16fc2e9b615e0138edac46655ae628f5d098ad":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["df16fc2e9b615e0138edac46655ae628f5d098ad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}