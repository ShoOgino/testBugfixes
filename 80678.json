{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AbstractAnalysisFactory#splitAt(char,String).mjava","commits":[{"id":"9809bf55e3bf03659b8b93fd16170aaa7eb92012","date":1526860327,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AbstractAnalysisFactory#splitAt(char,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Splits a list separated by zero or more given separator characters.\n   * List items can contain comma characters escaped by backslash '\\'.\n   * Whitespace is NOT trimmed from the returned list items.\n   *\n   * @param list the string containing the split list items\n   * @return a list of items with the escaping backslashes removed\n   */\n  protected final List<String> splitAt(char separator, String list) {\n    if (list == null)\n      return Collections.emptyList();\n\n    List<String> result = new ArrayList<>();\n    for (String item : list.split(\"(?<!\\\\\\\\)[\" + separator + \"]\")) {\n      result.add(item.replaceAll(\"\\\\\\\\(?=[\" + separator + \"])\", \"\"));\n    }\n\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"313c36388b6cae6118f75a1860ad0ba0af7e1344","date":1601279368,"type":5,"author":"Tomoko Uchida","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/AbstractAnalysisFactory#splitAt(char,String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AbstractAnalysisFactory#splitAt(char,String).mjava","sourceNew":"  /**\n   * Splits a list separated by zero or more given separator characters.\n   * List items can contain comma characters escaped by backslash '\\'.\n   * Whitespace is NOT trimmed from the returned list items.\n   *\n   * @param list the string containing the split list items\n   * @return a list of items with the escaping backslashes removed\n   */\n  protected final List<String> splitAt(char separator, String list) {\n    if (list == null)\n      return Collections.emptyList();\n\n    List<String> result = new ArrayList<>();\n    for (String item : list.split(\"(?<!\\\\\\\\)[\" + separator + \"]\")) {\n      result.add(item.replaceAll(\"\\\\\\\\(?=[\" + separator + \"])\", \"\"));\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Splits a list separated by zero or more given separator characters.\n   * List items can contain comma characters escaped by backslash '\\'.\n   * Whitespace is NOT trimmed from the returned list items.\n   *\n   * @param list the string containing the split list items\n   * @return a list of items with the escaping backslashes removed\n   */\n  protected final List<String> splitAt(char separator, String list) {\n    if (list == null)\n      return Collections.emptyList();\n\n    List<String> result = new ArrayList<>();\n    for (String item : list.split(\"(?<!\\\\\\\\)[\" + separator + \"]\")) {\n      result.add(item.replaceAll(\"\\\\\\\\(?=[\" + separator + \"])\", \"\"));\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"313c36388b6cae6118f75a1860ad0ba0af7e1344":["9809bf55e3bf03659b8b93fd16170aaa7eb92012"],"9809bf55e3bf03659b8b93fd16170aaa7eb92012":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["313c36388b6cae6118f75a1860ad0ba0af7e1344"]},"commit2Childs":{"313c36388b6cae6118f75a1860ad0ba0af7e1344":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9809bf55e3bf03659b8b93fd16170aaa7eb92012":["313c36388b6cae6118f75a1860ad0ba0af7e1344"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9809bf55e3bf03659b8b93fd16170aaa7eb92012"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}