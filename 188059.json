{"path":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#parse().mjava","commits":[{"id":"c7e79e31f55cbb444e3023d430a340658755aa31","date":1357666399,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#parse().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Query parse() throws SyntaxError {\n    \n    /* the main query we will execute.  we disable the coord because\n     * this query is an artificial construct\n     */\n    BooleanQuery query = new BooleanQuery(true);\n    \n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if( userQuery == null || userQuery.trim().length() == 0 ) {\n      // If no query is specified, we may have an alternate\n      if (config.altQ != null) {\n        QParser altQParser = subQuery(config.altQ, null);\n        altUserQuery = altQParser.getQuery();\n        query.add( altUserQuery , BooleanClause.Occur.MUST );\n      } else {\n        return null;\n        // throw new SyntaxError(\"missing query string\" );\n      }\n    } else {\n      // There is a valid query string\n      ExtendedSolrQueryParser up = createEdismaxQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n      up.addAlias(IMPOSSIBLE_FIELD_NAME, config.tiebreaker, config.queryFields);\n      addAliasesFromRequest(up, config.tiebreaker);\n      up.setPhraseSlop(config.qslop);     // slop for explicit user phrase queries\n      up.setAllowLeadingWildcard(true);\n      \n      // defer escaping and only do if lucene parsing fails, or we need phrases\n      // parsing fails.  Need to sloppy phrase queries anyway though.\n      List<Clause> clauses = splitIntoClauses(userQuery, false);\n      \n      // Always rebuild mainUserQuery from clauses to catch modifications from splitIntoClauses\n      // This was necessary for userFields modifications to get propagated into the query.\n      // Convert lower or mixed case operators to uppercase if we saw them.\n      // only do this for the lucene query part and not for phrase query boosting\n      // since some fields might not be case insensitive.\n      // We don't use a regex for this because it might change and AND or OR in\n      // a phrase query in a case sensitive field.\n      String mainUserQuery = rebuildUserQuery(clauses, config.lowercaseOperators);\n      \n      // but always for unstructured implicit bqs created by getFieldQuery\n      up.minShouldMatch = config.minShouldMatch;\n      \n      parsedUserQuery = parseOriginalQuery(up, mainUserQuery, clauses, config);\n      \n      if (parsedUserQuery == null) {\n        parsedUserQuery = parseEscapedQuery(up, escapeUserQuery(clauses), config);\n      }\n      \n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n      \n      addPhraseFieldQueries(query, clauses, config);\n      \n    }\n    \n    /* * * Boosting Query * * */\n    boostQueries = getBoostQueries();\n    for(Query f : boostQueries) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    /* * * Boosting Functions * * */\n    List<Query> boostFunctions = getBoostFunctions();\n    for(Query f : boostFunctions) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    //\n    // create a boosted query (scores multiplied by boosts)\n    //\n    Query topQuery = query;\n    List<ValueSource> boosts = getMultiplicativeBoosts();\n    if (boosts.size()>1) {\n      ValueSource prod = new ProductFloatFunction(boosts.toArray(new ValueSource[boosts.size()]));\n      topQuery = new BoostedQuery(query, prod);\n    } else if (boosts.size() == 1) {\n      topQuery = new BoostedQuery(query, boosts.get(0));\n    }\n    \n    return topQuery;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#parse().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Query parse() throws SyntaxError {\n    \n    /* the main query we will execute.  we disable the coord because\n     * this query is an artificial construct\n     */\n    BooleanQuery query = new BooleanQuery(true);\n    \n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if( userQuery == null || userQuery.trim().length() == 0 ) {\n      // If no query is specified, we may have an alternate\n      if (config.altQ != null) {\n        QParser altQParser = subQuery(config.altQ, null);\n        altUserQuery = altQParser.getQuery();\n        query.add( altUserQuery , BooleanClause.Occur.MUST );\n      } else {\n        return null;\n        // throw new SyntaxError(\"missing query string\" );\n      }\n    } else {\n      // There is a valid query string\n      ExtendedSolrQueryParser up = createEdismaxQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n      up.addAlias(IMPOSSIBLE_FIELD_NAME, config.tiebreaker, config.queryFields);\n      addAliasesFromRequest(up, config.tiebreaker);\n      up.setPhraseSlop(config.qslop);     // slop for explicit user phrase queries\n      up.setAllowLeadingWildcard(true);\n      \n      // defer escaping and only do if lucene parsing fails, or we need phrases\n      // parsing fails.  Need to sloppy phrase queries anyway though.\n      List<Clause> clauses = splitIntoClauses(userQuery, false);\n      \n      // Always rebuild mainUserQuery from clauses to catch modifications from splitIntoClauses\n      // This was necessary for userFields modifications to get propagated into the query.\n      // Convert lower or mixed case operators to uppercase if we saw them.\n      // only do this for the lucene query part and not for phrase query boosting\n      // since some fields might not be case insensitive.\n      // We don't use a regex for this because it might change and AND or OR in\n      // a phrase query in a case sensitive field.\n      String mainUserQuery = rebuildUserQuery(clauses, config.lowercaseOperators);\n      \n      // but always for unstructured implicit bqs created by getFieldQuery\n      up.minShouldMatch = config.minShouldMatch;\n      \n      parsedUserQuery = parseOriginalQuery(up, mainUserQuery, clauses, config);\n      \n      if (parsedUserQuery == null) {\n        parsedUserQuery = parseEscapedQuery(up, escapeUserQuery(clauses), config);\n      }\n      \n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n      \n      addPhraseFieldQueries(query, clauses, config);\n      \n    }\n    \n    /* * * Boosting Query * * */\n    boostQueries = getBoostQueries();\n    for(Query f : boostQueries) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    /* * * Boosting Functions * * */\n    List<Query> boostFunctions = getBoostFunctions();\n    for(Query f : boostFunctions) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    //\n    // create a boosted query (scores multiplied by boosts)\n    //\n    Query topQuery = query;\n    List<ValueSource> boosts = getMultiplicativeBoosts();\n    if (boosts.size()>1) {\n      ValueSource prod = new ProductFloatFunction(boosts.toArray(new ValueSource[boosts.size()]));\n      topQuery = new BoostedQuery(query, prod);\n    } else if (boosts.size() == 1) {\n      topQuery = new BoostedQuery(query, boosts.get(0));\n    }\n    \n    return topQuery;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aed6b9dbf4e4cfb1a522030abd1f47bc053b9821","date":1395136008,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws SyntaxError {\n\n    parsed = true;\n    \n    /* the main query we will execute.  we disable the coord because\n     * this query is an artificial construct\n     */\n    BooleanQuery query = new BooleanQuery(true);\n    \n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if( userQuery == null || userQuery.trim().length() == 0 ) {\n      // If no query is specified, we may have an alternate\n      if (config.altQ != null) {\n        QParser altQParser = subQuery(config.altQ, null);\n        altUserQuery = altQParser.getQuery();\n        query.add( altUserQuery , BooleanClause.Occur.MUST );\n      } else {\n        return null;\n        // throw new SyntaxError(\"missing query string\" );\n      }\n    } else {\n      // There is a valid query string\n      ExtendedSolrQueryParser up = createEdismaxQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n      up.addAlias(IMPOSSIBLE_FIELD_NAME, config.tiebreaker, config.queryFields);\n      addAliasesFromRequest(up, config.tiebreaker);\n      up.setPhraseSlop(config.qslop);     // slop for explicit user phrase queries\n      up.setAllowLeadingWildcard(true);\n      \n      // defer escaping and only do if lucene parsing fails, or we need phrases\n      // parsing fails.  Need to sloppy phrase queries anyway though.\n      List<Clause> clauses = splitIntoClauses(userQuery, false);\n      \n      // Always rebuild mainUserQuery from clauses to catch modifications from splitIntoClauses\n      // This was necessary for userFields modifications to get propagated into the query.\n      // Convert lower or mixed case operators to uppercase if we saw them.\n      // only do this for the lucene query part and not for phrase query boosting\n      // since some fields might not be case insensitive.\n      // We don't use a regex for this because it might change and AND or OR in\n      // a phrase query in a case sensitive field.\n      String mainUserQuery = rebuildUserQuery(clauses, config.lowercaseOperators);\n      \n      // but always for unstructured implicit bqs created by getFieldQuery\n      up.minShouldMatch = config.minShouldMatch;\n      \n      parsedUserQuery = parseOriginalQuery(up, mainUserQuery, clauses, config);\n      \n      if (parsedUserQuery == null) {\n        parsedUserQuery = parseEscapedQuery(up, escapeUserQuery(clauses), config);\n      }\n      \n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n      \n      addPhraseFieldQueries(query, clauses, config);\n      \n    }\n    \n    /* * * Boosting Query * * */\n    boostQueries = getBoostQueries();\n    for(Query f : boostQueries) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    /* * * Boosting Functions * * */\n    List<Query> boostFunctions = getBoostFunctions();\n    for(Query f : boostFunctions) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    //\n    // create a boosted query (scores multiplied by boosts)\n    //\n    Query topQuery = query;\n    List<ValueSource> boosts = getMultiplicativeBoosts();\n    if (boosts.size()>1) {\n      ValueSource prod = new ProductFloatFunction(boosts.toArray(new ValueSource[boosts.size()]));\n      topQuery = new BoostedQuery(query, prod);\n    } else if (boosts.size() == 1) {\n      topQuery = new BoostedQuery(query, boosts.get(0));\n    }\n    \n    return topQuery;\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws SyntaxError {\n    \n    /* the main query we will execute.  we disable the coord because\n     * this query is an artificial construct\n     */\n    BooleanQuery query = new BooleanQuery(true);\n    \n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if( userQuery == null || userQuery.trim().length() == 0 ) {\n      // If no query is specified, we may have an alternate\n      if (config.altQ != null) {\n        QParser altQParser = subQuery(config.altQ, null);\n        altUserQuery = altQParser.getQuery();\n        query.add( altUserQuery , BooleanClause.Occur.MUST );\n      } else {\n        return null;\n        // throw new SyntaxError(\"missing query string\" );\n      }\n    } else {\n      // There is a valid query string\n      ExtendedSolrQueryParser up = createEdismaxQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n      up.addAlias(IMPOSSIBLE_FIELD_NAME, config.tiebreaker, config.queryFields);\n      addAliasesFromRequest(up, config.tiebreaker);\n      up.setPhraseSlop(config.qslop);     // slop for explicit user phrase queries\n      up.setAllowLeadingWildcard(true);\n      \n      // defer escaping and only do if lucene parsing fails, or we need phrases\n      // parsing fails.  Need to sloppy phrase queries anyway though.\n      List<Clause> clauses = splitIntoClauses(userQuery, false);\n      \n      // Always rebuild mainUserQuery from clauses to catch modifications from splitIntoClauses\n      // This was necessary for userFields modifications to get propagated into the query.\n      // Convert lower or mixed case operators to uppercase if we saw them.\n      // only do this for the lucene query part and not for phrase query boosting\n      // since some fields might not be case insensitive.\n      // We don't use a regex for this because it might change and AND or OR in\n      // a phrase query in a case sensitive field.\n      String mainUserQuery = rebuildUserQuery(clauses, config.lowercaseOperators);\n      \n      // but always for unstructured implicit bqs created by getFieldQuery\n      up.minShouldMatch = config.minShouldMatch;\n      \n      parsedUserQuery = parseOriginalQuery(up, mainUserQuery, clauses, config);\n      \n      if (parsedUserQuery == null) {\n        parsedUserQuery = parseEscapedQuery(up, escapeUserQuery(clauses), config);\n      }\n      \n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n      \n      addPhraseFieldQueries(query, clauses, config);\n      \n    }\n    \n    /* * * Boosting Query * * */\n    boostQueries = getBoostQueries();\n    for(Query f : boostQueries) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    /* * * Boosting Functions * * */\n    List<Query> boostFunctions = getBoostFunctions();\n    for(Query f : boostFunctions) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    //\n    // create a boosted query (scores multiplied by boosts)\n    //\n    Query topQuery = query;\n    List<ValueSource> boosts = getMultiplicativeBoosts();\n    if (boosts.size()>1) {\n      ValueSource prod = new ProductFloatFunction(boosts.toArray(new ValueSource[boosts.size()]));\n      topQuery = new BoostedQuery(query, prod);\n    } else if (boosts.size() == 1) {\n      topQuery = new BoostedQuery(query, boosts.get(0));\n    }\n    \n    return topQuery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws SyntaxError {\n\n    parsed = true;\n    \n    /* the main query we will execute.  we disable the coord because\n     * this query is an artificial construct\n     */\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.setDisableCoord(true);\n    \n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if( userQuery == null || userQuery.trim().length() == 0 ) {\n      // If no query is specified, we may have an alternate\n      if (config.altQ != null) {\n        QParser altQParser = subQuery(config.altQ, null);\n        altUserQuery = altQParser.getQuery();\n        query.add( altUserQuery , BooleanClause.Occur.MUST );\n      } else {\n        return null;\n        // throw new SyntaxError(\"missing query string\" );\n      }\n    } else {\n      // There is a valid query string\n      ExtendedSolrQueryParser up = createEdismaxQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n      up.addAlias(IMPOSSIBLE_FIELD_NAME, config.tiebreaker, config.queryFields);\n      addAliasesFromRequest(up, config.tiebreaker);\n      up.setPhraseSlop(config.qslop);     // slop for explicit user phrase queries\n      up.setAllowLeadingWildcard(true);\n      \n      // defer escaping and only do if lucene parsing fails, or we need phrases\n      // parsing fails.  Need to sloppy phrase queries anyway though.\n      List<Clause> clauses = splitIntoClauses(userQuery, false);\n      \n      // Always rebuild mainUserQuery from clauses to catch modifications from splitIntoClauses\n      // This was necessary for userFields modifications to get propagated into the query.\n      // Convert lower or mixed case operators to uppercase if we saw them.\n      // only do this for the lucene query part and not for phrase query boosting\n      // since some fields might not be case insensitive.\n      // We don't use a regex for this because it might change and AND or OR in\n      // a phrase query in a case sensitive field.\n      String mainUserQuery = rebuildUserQuery(clauses, config.lowercaseOperators);\n      \n      // but always for unstructured implicit bqs created by getFieldQuery\n      up.minShouldMatch = config.minShouldMatch;\n      \n      parsedUserQuery = parseOriginalQuery(up, mainUserQuery, clauses, config);\n      \n      if (parsedUserQuery == null) {\n        parsedUserQuery = parseEscapedQuery(up, escapeUserQuery(clauses), config);\n      }\n      \n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n      \n      addPhraseFieldQueries(query, clauses, config);\n      \n    }\n    \n    /* * * Boosting Query * * */\n    boostQueries = getBoostQueries();\n    for(Query f : boostQueries) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    /* * * Boosting Functions * * */\n    List<Query> boostFunctions = getBoostFunctions();\n    for(Query f : boostFunctions) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    //\n    // create a boosted query (scores multiplied by boosts)\n    //\n    Query topQuery = query.build();\n    List<ValueSource> boosts = getMultiplicativeBoosts();\n    if (boosts.size()>1) {\n      ValueSource prod = new ProductFloatFunction(boosts.toArray(new ValueSource[boosts.size()]));\n      topQuery = new BoostedQuery(topQuery, prod);\n    } else if (boosts.size() == 1) {\n      topQuery = new BoostedQuery(topQuery, boosts.get(0));\n    }\n    \n    return topQuery;\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws SyntaxError {\n\n    parsed = true;\n    \n    /* the main query we will execute.  we disable the coord because\n     * this query is an artificial construct\n     */\n    BooleanQuery query = new BooleanQuery(true);\n    \n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if( userQuery == null || userQuery.trim().length() == 0 ) {\n      // If no query is specified, we may have an alternate\n      if (config.altQ != null) {\n        QParser altQParser = subQuery(config.altQ, null);\n        altUserQuery = altQParser.getQuery();\n        query.add( altUserQuery , BooleanClause.Occur.MUST );\n      } else {\n        return null;\n        // throw new SyntaxError(\"missing query string\" );\n      }\n    } else {\n      // There is a valid query string\n      ExtendedSolrQueryParser up = createEdismaxQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n      up.addAlias(IMPOSSIBLE_FIELD_NAME, config.tiebreaker, config.queryFields);\n      addAliasesFromRequest(up, config.tiebreaker);\n      up.setPhraseSlop(config.qslop);     // slop for explicit user phrase queries\n      up.setAllowLeadingWildcard(true);\n      \n      // defer escaping and only do if lucene parsing fails, or we need phrases\n      // parsing fails.  Need to sloppy phrase queries anyway though.\n      List<Clause> clauses = splitIntoClauses(userQuery, false);\n      \n      // Always rebuild mainUserQuery from clauses to catch modifications from splitIntoClauses\n      // This was necessary for userFields modifications to get propagated into the query.\n      // Convert lower or mixed case operators to uppercase if we saw them.\n      // only do this for the lucene query part and not for phrase query boosting\n      // since some fields might not be case insensitive.\n      // We don't use a regex for this because it might change and AND or OR in\n      // a phrase query in a case sensitive field.\n      String mainUserQuery = rebuildUserQuery(clauses, config.lowercaseOperators);\n      \n      // but always for unstructured implicit bqs created by getFieldQuery\n      up.minShouldMatch = config.minShouldMatch;\n      \n      parsedUserQuery = parseOriginalQuery(up, mainUserQuery, clauses, config);\n      \n      if (parsedUserQuery == null) {\n        parsedUserQuery = parseEscapedQuery(up, escapeUserQuery(clauses), config);\n      }\n      \n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n      \n      addPhraseFieldQueries(query, clauses, config);\n      \n    }\n    \n    /* * * Boosting Query * * */\n    boostQueries = getBoostQueries();\n    for(Query f : boostQueries) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    /* * * Boosting Functions * * */\n    List<Query> boostFunctions = getBoostFunctions();\n    for(Query f : boostFunctions) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    //\n    // create a boosted query (scores multiplied by boosts)\n    //\n    Query topQuery = query;\n    List<ValueSource> boosts = getMultiplicativeBoosts();\n    if (boosts.size()>1) {\n      ValueSource prod = new ProductFloatFunction(boosts.toArray(new ValueSource[boosts.size()]));\n      topQuery = new BoostedQuery(query, prod);\n    } else if (boosts.size() == 1) {\n      topQuery = new BoostedQuery(query, boosts.get(0));\n    }\n    \n    return topQuery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws SyntaxError {\n\n    parsed = true;\n    \n    /* the main query we will execute.  we disable the coord because\n     * this query is an artificial construct\n     */\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    \n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if( userQuery == null || userQuery.trim().length() == 0 ) {\n      // If no query is specified, we may have an alternate\n      if (config.altQ != null) {\n        QParser altQParser = subQuery(config.altQ, null);\n        altUserQuery = altQParser.getQuery();\n        query.add( altUserQuery , BooleanClause.Occur.MUST );\n      } else {\n        return null;\n        // throw new SyntaxError(\"missing query string\" );\n      }\n    } else {\n      // There is a valid query string\n      ExtendedSolrQueryParser up = createEdismaxQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n      up.addAlias(IMPOSSIBLE_FIELD_NAME, config.tiebreaker, config.queryFields);\n      addAliasesFromRequest(up, config.tiebreaker);\n      up.setPhraseSlop(config.qslop);     // slop for explicit user phrase queries\n      up.setAllowLeadingWildcard(true);\n      \n      // defer escaping and only do if lucene parsing fails, or we need phrases\n      // parsing fails.  Need to sloppy phrase queries anyway though.\n      List<Clause> clauses = splitIntoClauses(userQuery, false);\n      \n      // Always rebuild mainUserQuery from clauses to catch modifications from splitIntoClauses\n      // This was necessary for userFields modifications to get propagated into the query.\n      // Convert lower or mixed case operators to uppercase if we saw them.\n      // only do this for the lucene query part and not for phrase query boosting\n      // since some fields might not be case insensitive.\n      // We don't use a regex for this because it might change and AND or OR in\n      // a phrase query in a case sensitive field.\n      String mainUserQuery = rebuildUserQuery(clauses, config.lowercaseOperators);\n      \n      // but always for unstructured implicit bqs created by getFieldQuery\n      up.minShouldMatch = config.minShouldMatch;\n      \n      parsedUserQuery = parseOriginalQuery(up, mainUserQuery, clauses, config);\n      \n      if (parsedUserQuery == null) {\n        parsedUserQuery = parseEscapedQuery(up, escapeUserQuery(clauses), config);\n      }\n      \n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n      \n      addPhraseFieldQueries(query, clauses, config);\n      \n    }\n    \n    /* * * Boosting Query * * */\n    boostQueries = getBoostQueries();\n    for(Query f : boostQueries) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    /* * * Boosting Functions * * */\n    List<Query> boostFunctions = getBoostFunctions();\n    for(Query f : boostFunctions) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    //\n    // create a boosted query (scores multiplied by boosts)\n    //\n    Query topQuery = query.build();\n    List<ValueSource> boosts = getMultiplicativeBoosts();\n    if (boosts.size()>1) {\n      ValueSource prod = new ProductFloatFunction(boosts.toArray(new ValueSource[boosts.size()]));\n      topQuery = new BoostedQuery(topQuery, prod);\n    } else if (boosts.size() == 1) {\n      topQuery = new BoostedQuery(topQuery, boosts.get(0));\n    }\n    \n    return topQuery;\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws SyntaxError {\n\n    parsed = true;\n    \n    /* the main query we will execute.  we disable the coord because\n     * this query is an artificial construct\n     */\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.setDisableCoord(true);\n    \n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if( userQuery == null || userQuery.trim().length() == 0 ) {\n      // If no query is specified, we may have an alternate\n      if (config.altQ != null) {\n        QParser altQParser = subQuery(config.altQ, null);\n        altUserQuery = altQParser.getQuery();\n        query.add( altUserQuery , BooleanClause.Occur.MUST );\n      } else {\n        return null;\n        // throw new SyntaxError(\"missing query string\" );\n      }\n    } else {\n      // There is a valid query string\n      ExtendedSolrQueryParser up = createEdismaxQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n      up.addAlias(IMPOSSIBLE_FIELD_NAME, config.tiebreaker, config.queryFields);\n      addAliasesFromRequest(up, config.tiebreaker);\n      up.setPhraseSlop(config.qslop);     // slop for explicit user phrase queries\n      up.setAllowLeadingWildcard(true);\n      \n      // defer escaping and only do if lucene parsing fails, or we need phrases\n      // parsing fails.  Need to sloppy phrase queries anyway though.\n      List<Clause> clauses = splitIntoClauses(userQuery, false);\n      \n      // Always rebuild mainUserQuery from clauses to catch modifications from splitIntoClauses\n      // This was necessary for userFields modifications to get propagated into the query.\n      // Convert lower or mixed case operators to uppercase if we saw them.\n      // only do this for the lucene query part and not for phrase query boosting\n      // since some fields might not be case insensitive.\n      // We don't use a regex for this because it might change and AND or OR in\n      // a phrase query in a case sensitive field.\n      String mainUserQuery = rebuildUserQuery(clauses, config.lowercaseOperators);\n      \n      // but always for unstructured implicit bqs created by getFieldQuery\n      up.minShouldMatch = config.minShouldMatch;\n      \n      parsedUserQuery = parseOriginalQuery(up, mainUserQuery, clauses, config);\n      \n      if (parsedUserQuery == null) {\n        parsedUserQuery = parseEscapedQuery(up, escapeUserQuery(clauses), config);\n      }\n      \n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n      \n      addPhraseFieldQueries(query, clauses, config);\n      \n    }\n    \n    /* * * Boosting Query * * */\n    boostQueries = getBoostQueries();\n    for(Query f : boostQueries) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    /* * * Boosting Functions * * */\n    List<Query> boostFunctions = getBoostFunctions();\n    for(Query f : boostFunctions) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    //\n    // create a boosted query (scores multiplied by boosts)\n    //\n    Query topQuery = query.build();\n    List<ValueSource> boosts = getMultiplicativeBoosts();\n    if (boosts.size()>1) {\n      ValueSource prod = new ProductFloatFunction(boosts.toArray(new ValueSource[boosts.size()]));\n      topQuery = new BoostedQuery(topQuery, prod);\n    } else if (boosts.size() == 1) {\n      topQuery = new BoostedQuery(topQuery, boosts.get(0));\n    }\n    \n    return topQuery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws SyntaxError {\n\n    parsed = true;\n    \n    /* the main query we will execute.  we disable the coord because\n     * this query is an artificial construct\n     */\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    \n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if( userQuery == null || userQuery.trim().length() == 0 ) {\n      // If no query is specified, we may have an alternate\n      if (config.altQ != null) {\n        QParser altQParser = subQuery(config.altQ, null);\n        altUserQuery = altQParser.getQuery();\n        query.add( altUserQuery , BooleanClause.Occur.MUST );\n      } else {\n        return null;\n        // throw new SyntaxError(\"missing query string\" );\n      }\n    } else {\n      // There is a valid query string\n      ExtendedSolrQueryParser up = createEdismaxQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n      up.addAlias(IMPOSSIBLE_FIELD_NAME, config.tiebreaker, config.queryFields);\n      addAliasesFromRequest(up, config.tiebreaker);\n      up.setPhraseSlop(config.qslop);     // slop for explicit user phrase queries\n      up.setAllowLeadingWildcard(true);\n      \n      // defer escaping and only do if lucene parsing fails, or we need phrases\n      // parsing fails.  Need to sloppy phrase queries anyway though.\n      List<Clause> clauses = splitIntoClauses(userQuery, false);\n      \n      // Always rebuild mainUserQuery from clauses to catch modifications from splitIntoClauses\n      // This was necessary for userFields modifications to get propagated into the query.\n      // Convert lower or mixed case operators to uppercase if we saw them.\n      // only do this for the lucene query part and not for phrase query boosting\n      // since some fields might not be case insensitive.\n      // We don't use a regex for this because it might change and AND or OR in\n      // a phrase query in a case sensitive field.\n      String mainUserQuery = rebuildUserQuery(clauses, config.lowercaseOperators);\n      \n      // but always for unstructured implicit bqs created by getFieldQuery\n      up.minShouldMatch = config.minShouldMatch;\n      \n      parsedUserQuery = parseOriginalQuery(up, mainUserQuery, clauses, config);\n      \n      if (parsedUserQuery == null) {\n        parsedUserQuery = parseEscapedQuery(up, escapeUserQuery(clauses), config);\n      }\n      \n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n      \n      addPhraseFieldQueries(query, clauses, config);\n      \n    }\n    \n    /* * * Boosting Query * * */\n    boostQueries = getBoostQueries();\n    for(Query f : boostQueries) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    /* * * Boosting Functions * * */\n    List<Query> boostFunctions = getBoostFunctions();\n    for(Query f : boostFunctions) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    //\n    // create a boosted query (scores multiplied by boosts)\n    //\n    Query topQuery = query.build();\n    List<ValueSource> boosts = getMultiplicativeBoosts();\n    if (boosts.size()>1) {\n      ValueSource prod = new ProductFloatFunction(boosts.toArray(new ValueSource[boosts.size()]));\n      topQuery = new BoostedQuery(topQuery, prod);\n    } else if (boosts.size() == 1) {\n      topQuery = new BoostedQuery(topQuery, boosts.get(0));\n    }\n    \n    return topQuery;\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws SyntaxError {\n\n    parsed = true;\n    \n    /* the main query we will execute.  we disable the coord because\n     * this query is an artificial construct\n     */\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.setDisableCoord(true);\n    \n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if( userQuery == null || userQuery.trim().length() == 0 ) {\n      // If no query is specified, we may have an alternate\n      if (config.altQ != null) {\n        QParser altQParser = subQuery(config.altQ, null);\n        altUserQuery = altQParser.getQuery();\n        query.add( altUserQuery , BooleanClause.Occur.MUST );\n      } else {\n        return null;\n        // throw new SyntaxError(\"missing query string\" );\n      }\n    } else {\n      // There is a valid query string\n      ExtendedSolrQueryParser up = createEdismaxQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n      up.addAlias(IMPOSSIBLE_FIELD_NAME, config.tiebreaker, config.queryFields);\n      addAliasesFromRequest(up, config.tiebreaker);\n      up.setPhraseSlop(config.qslop);     // slop for explicit user phrase queries\n      up.setAllowLeadingWildcard(true);\n      \n      // defer escaping and only do if lucene parsing fails, or we need phrases\n      // parsing fails.  Need to sloppy phrase queries anyway though.\n      List<Clause> clauses = splitIntoClauses(userQuery, false);\n      \n      // Always rebuild mainUserQuery from clauses to catch modifications from splitIntoClauses\n      // This was necessary for userFields modifications to get propagated into the query.\n      // Convert lower or mixed case operators to uppercase if we saw them.\n      // only do this for the lucene query part and not for phrase query boosting\n      // since some fields might not be case insensitive.\n      // We don't use a regex for this because it might change and AND or OR in\n      // a phrase query in a case sensitive field.\n      String mainUserQuery = rebuildUserQuery(clauses, config.lowercaseOperators);\n      \n      // but always for unstructured implicit bqs created by getFieldQuery\n      up.minShouldMatch = config.minShouldMatch;\n      \n      parsedUserQuery = parseOriginalQuery(up, mainUserQuery, clauses, config);\n      \n      if (parsedUserQuery == null) {\n        parsedUserQuery = parseEscapedQuery(up, escapeUserQuery(clauses), config);\n      }\n      \n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n      \n      addPhraseFieldQueries(query, clauses, config);\n      \n    }\n    \n    /* * * Boosting Query * * */\n    boostQueries = getBoostQueries();\n    for(Query f : boostQueries) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    /* * * Boosting Functions * * */\n    List<Query> boostFunctions = getBoostFunctions();\n    for(Query f : boostFunctions) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    //\n    // create a boosted query (scores multiplied by boosts)\n    //\n    Query topQuery = query.build();\n    List<ValueSource> boosts = getMultiplicativeBoosts();\n    if (boosts.size()>1) {\n      ValueSource prod = new ProductFloatFunction(boosts.toArray(new ValueSource[boosts.size()]));\n      topQuery = new BoostedQuery(topQuery, prod);\n    } else if (boosts.size() == 1) {\n      topQuery = new BoostedQuery(topQuery, boosts.get(0));\n    }\n    \n    return topQuery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e55782fb51a6e9789542818eb2161a3247f39ace","date":1489707707,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws SyntaxError {\n\n    parsed = true;\n    \n    /* the main query we will execute.  we disable the coord because\n     * this query is an artificial construct\n     */\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    \n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if( userQuery == null || userQuery.trim().length() == 0 ) {\n      // If no query is specified, we may have an alternate\n      if (config.altQ != null) {\n        QParser altQParser = subQuery(config.altQ, null);\n        altUserQuery = altQParser.getQuery();\n        query.add( altUserQuery , BooleanClause.Occur.MUST );\n      } else {\n        return null;\n        // throw new SyntaxError(\"missing query string\" );\n      }\n    } else {\n      // There is a valid query string\n      ExtendedSolrQueryParser up = createEdismaxQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n      up.addAlias(IMPOSSIBLE_FIELD_NAME, config.tiebreaker, config.queryFields);\n      addAliasesFromRequest(up, config.tiebreaker);\n      up.setPhraseSlop(config.qslop);     // slop for explicit user phrase queries\n      up.setAllowLeadingWildcard(true);\n      \n      // defer escaping and only do if lucene parsing fails, or we need phrases\n      // parsing fails.  Need to sloppy phrase queries anyway though.\n      List<Clause> clauses = splitIntoClauses(userQuery, false);\n      \n      // Always rebuild mainUserQuery from clauses to catch modifications from splitIntoClauses\n      // This was necessary for userFields modifications to get propagated into the query.\n      // Convert lower or mixed case operators to uppercase if we saw them.\n      // only do this for the lucene query part and not for phrase query boosting\n      // since some fields might not be case insensitive.\n      // We don't use a regex for this because it might change and AND or OR in\n      // a phrase query in a case sensitive field.\n      String mainUserQuery = rebuildUserQuery(clauses, config.lowercaseOperators);\n      \n      // but always for unstructured implicit bqs created by getFieldQuery\n      up.minShouldMatch = config.minShouldMatch;\n\n      up.setSplitOnWhitespace(config.splitOnWhitespace);\n      \n      parsedUserQuery = parseOriginalQuery(up, mainUserQuery, clauses, config);\n      \n      if (parsedUserQuery == null) {\n        parsedUserQuery = parseEscapedQuery(up, escapeUserQuery(clauses), config);\n      }\n      \n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n      \n      addPhraseFieldQueries(query, clauses, config);\n      \n    }\n    \n    /* * * Boosting Query * * */\n    boostQueries = getBoostQueries();\n    for(Query f : boostQueries) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    /* * * Boosting Functions * * */\n    List<Query> boostFunctions = getBoostFunctions();\n    for(Query f : boostFunctions) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    //\n    // create a boosted query (scores multiplied by boosts)\n    //\n    Query topQuery = query.build();\n    List<ValueSource> boosts = getMultiplicativeBoosts();\n    if (boosts.size()>1) {\n      ValueSource prod = new ProductFloatFunction(boosts.toArray(new ValueSource[boosts.size()]));\n      topQuery = new BoostedQuery(topQuery, prod);\n    } else if (boosts.size() == 1) {\n      topQuery = new BoostedQuery(topQuery, boosts.get(0));\n    }\n    \n    return topQuery;\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws SyntaxError {\n\n    parsed = true;\n    \n    /* the main query we will execute.  we disable the coord because\n     * this query is an artificial construct\n     */\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    \n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if( userQuery == null || userQuery.trim().length() == 0 ) {\n      // If no query is specified, we may have an alternate\n      if (config.altQ != null) {\n        QParser altQParser = subQuery(config.altQ, null);\n        altUserQuery = altQParser.getQuery();\n        query.add( altUserQuery , BooleanClause.Occur.MUST );\n      } else {\n        return null;\n        // throw new SyntaxError(\"missing query string\" );\n      }\n    } else {\n      // There is a valid query string\n      ExtendedSolrQueryParser up = createEdismaxQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n      up.addAlias(IMPOSSIBLE_FIELD_NAME, config.tiebreaker, config.queryFields);\n      addAliasesFromRequest(up, config.tiebreaker);\n      up.setPhraseSlop(config.qslop);     // slop for explicit user phrase queries\n      up.setAllowLeadingWildcard(true);\n      \n      // defer escaping and only do if lucene parsing fails, or we need phrases\n      // parsing fails.  Need to sloppy phrase queries anyway though.\n      List<Clause> clauses = splitIntoClauses(userQuery, false);\n      \n      // Always rebuild mainUserQuery from clauses to catch modifications from splitIntoClauses\n      // This was necessary for userFields modifications to get propagated into the query.\n      // Convert lower or mixed case operators to uppercase if we saw them.\n      // only do this for the lucene query part and not for phrase query boosting\n      // since some fields might not be case insensitive.\n      // We don't use a regex for this because it might change and AND or OR in\n      // a phrase query in a case sensitive field.\n      String mainUserQuery = rebuildUserQuery(clauses, config.lowercaseOperators);\n      \n      // but always for unstructured implicit bqs created by getFieldQuery\n      up.minShouldMatch = config.minShouldMatch;\n      \n      parsedUserQuery = parseOriginalQuery(up, mainUserQuery, clauses, config);\n      \n      if (parsedUserQuery == null) {\n        parsedUserQuery = parseEscapedQuery(up, escapeUserQuery(clauses), config);\n      }\n      \n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n      \n      addPhraseFieldQueries(query, clauses, config);\n      \n    }\n    \n    /* * * Boosting Query * * */\n    boostQueries = getBoostQueries();\n    for(Query f : boostQueries) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    /* * * Boosting Functions * * */\n    List<Query> boostFunctions = getBoostFunctions();\n    for(Query f : boostFunctions) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    //\n    // create a boosted query (scores multiplied by boosts)\n    //\n    Query topQuery = query.build();\n    List<ValueSource> boosts = getMultiplicativeBoosts();\n    if (boosts.size()>1) {\n      ValueSource prod = new ProductFloatFunction(boosts.toArray(new ValueSource[boosts.size()]));\n      topQuery = new BoostedQuery(topQuery, prod);\n    } else if (boosts.size() == 1) {\n      topQuery = new BoostedQuery(topQuery, boosts.get(0));\n    }\n    \n    return topQuery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c03778630c4604270d88c148afb8c7de35b51d3c","date":1490280010,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws SyntaxError {\n\n    parsed = true;\n    \n    /* the main query we will execute.  we disable the coord because\n     * this query is an artificial construct\n     */\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    \n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if( userQuery == null || userQuery.trim().length() == 0 ) {\n      // If no query is specified, we may have an alternate\n      if (config.altQ != null) {\n        QParser altQParser = subQuery(config.altQ, null);\n        altUserQuery = altQParser.getQuery();\n        query.add( altUserQuery , BooleanClause.Occur.MUST );\n      } else {\n        return null;\n        // throw new SyntaxError(\"missing query string\" );\n      }\n    } else {\n      // There is a valid query string\n      ExtendedSolrQueryParser up = createEdismaxQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n      up.addAlias(IMPOSSIBLE_FIELD_NAME, config.tiebreaker, config.queryFields);\n      addAliasesFromRequest(up, config.tiebreaker);\n      up.setPhraseSlop(config.qslop);     // slop for explicit user phrase queries\n      up.setAllowLeadingWildcard(true);\n      \n      // defer escaping and only do if lucene parsing fails, or we need phrases\n      // parsing fails.  Need to sloppy phrase queries anyway though.\n      List<Clause> clauses = splitIntoClauses(userQuery, false);\n      \n      // Always rebuild mainUserQuery from clauses to catch modifications from splitIntoClauses\n      // This was necessary for userFields modifications to get propagated into the query.\n      // Convert lower or mixed case operators to uppercase if we saw them.\n      // only do this for the lucene query part and not for phrase query boosting\n      // since some fields might not be case insensitive.\n      // We don't use a regex for this because it might change and AND or OR in\n      // a phrase query in a case sensitive field.\n      String mainUserQuery = rebuildUserQuery(clauses, config.lowercaseOperators);\n      \n      // but always for unstructured implicit bqs created by getFieldQuery\n      up.minShouldMatch = config.minShouldMatch;\n\n      up.setSplitOnWhitespace(config.splitOnWhitespace);\n      \n      parsedUserQuery = parseOriginalQuery(up, mainUserQuery, clauses, config);\n      \n      if (parsedUserQuery == null) {\n        parsedUserQuery = parseEscapedQuery(up, escapeUserQuery(clauses), config);\n      }\n      \n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n      \n      addPhraseFieldQueries(query, clauses, config);\n      \n    }\n    \n    /* * * Boosting Query * * */\n    boostQueries = getBoostQueries();\n    for(Query f : boostQueries) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    /* * * Boosting Functions * * */\n    List<Query> boostFunctions = getBoostFunctions();\n    for(Query f : boostFunctions) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    //\n    // create a boosted query (scores multiplied by boosts)\n    //\n    Query topQuery = query.build();\n    List<ValueSource> boosts = getMultiplicativeBoosts();\n    if (boosts.size()>1) {\n      ValueSource prod = new ProductFloatFunction(boosts.toArray(new ValueSource[boosts.size()]));\n      topQuery = new BoostedQuery(topQuery, prod);\n    } else if (boosts.size() == 1) {\n      topQuery = new BoostedQuery(topQuery, boosts.get(0));\n    }\n    \n    return topQuery;\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws SyntaxError {\n\n    parsed = true;\n    \n    /* the main query we will execute.  we disable the coord because\n     * this query is an artificial construct\n     */\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    \n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if( userQuery == null || userQuery.trim().length() == 0 ) {\n      // If no query is specified, we may have an alternate\n      if (config.altQ != null) {\n        QParser altQParser = subQuery(config.altQ, null);\n        altUserQuery = altQParser.getQuery();\n        query.add( altUserQuery , BooleanClause.Occur.MUST );\n      } else {\n        return null;\n        // throw new SyntaxError(\"missing query string\" );\n      }\n    } else {\n      // There is a valid query string\n      ExtendedSolrQueryParser up = createEdismaxQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n      up.addAlias(IMPOSSIBLE_FIELD_NAME, config.tiebreaker, config.queryFields);\n      addAliasesFromRequest(up, config.tiebreaker);\n      up.setPhraseSlop(config.qslop);     // slop for explicit user phrase queries\n      up.setAllowLeadingWildcard(true);\n      \n      // defer escaping and only do if lucene parsing fails, or we need phrases\n      // parsing fails.  Need to sloppy phrase queries anyway though.\n      List<Clause> clauses = splitIntoClauses(userQuery, false);\n      \n      // Always rebuild mainUserQuery from clauses to catch modifications from splitIntoClauses\n      // This was necessary for userFields modifications to get propagated into the query.\n      // Convert lower or mixed case operators to uppercase if we saw them.\n      // only do this for the lucene query part and not for phrase query boosting\n      // since some fields might not be case insensitive.\n      // We don't use a regex for this because it might change and AND or OR in\n      // a phrase query in a case sensitive field.\n      String mainUserQuery = rebuildUserQuery(clauses, config.lowercaseOperators);\n      \n      // but always for unstructured implicit bqs created by getFieldQuery\n      up.minShouldMatch = config.minShouldMatch;\n      \n      parsedUserQuery = parseOriginalQuery(up, mainUserQuery, clauses, config);\n      \n      if (parsedUserQuery == null) {\n        parsedUserQuery = parseEscapedQuery(up, escapeUserQuery(clauses), config);\n      }\n      \n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n      \n      addPhraseFieldQueries(query, clauses, config);\n      \n    }\n    \n    /* * * Boosting Query * * */\n    boostQueries = getBoostQueries();\n    for(Query f : boostQueries) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    /* * * Boosting Functions * * */\n    List<Query> boostFunctions = getBoostFunctions();\n    for(Query f : boostFunctions) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    //\n    // create a boosted query (scores multiplied by boosts)\n    //\n    Query topQuery = query.build();\n    List<ValueSource> boosts = getMultiplicativeBoosts();\n    if (boosts.size()>1) {\n      ValueSource prod = new ProductFloatFunction(boosts.toArray(new ValueSource[boosts.size()]));\n      topQuery = new BoostedQuery(topQuery, prod);\n    } else if (boosts.size() == 1) {\n      topQuery = new BoostedQuery(topQuery, boosts.get(0));\n    }\n    \n    return topQuery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39fdbc59d893f5a211736e861fe145798a40b9ff","date":1498161919,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws SyntaxError {\n\n    parsed = true;\n    \n    /* the main query we will execute.  we disable the coord because\n     * this query is an artificial construct\n     */\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    \n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if( userQuery == null || userQuery.trim().length() == 0 ) {\n      // If no query is specified, we may have an alternate\n      if (config.altQ != null) {\n        QParser altQParser = subQuery(config.altQ, null);\n        altUserQuery = altQParser.getQuery();\n        query.add( altUserQuery , BooleanClause.Occur.MUST );\n      } else {\n        return null;\n        // throw new SyntaxError(\"missing query string\" );\n      }\n    } else {\n      // There is a valid query string\n      ExtendedSolrQueryParser up = createEdismaxQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n      up.addAlias(IMPOSSIBLE_FIELD_NAME, config.tiebreaker, config.queryFields);\n      addAliasesFromRequest(up, config.tiebreaker);\n      up.setPhraseSlop(config.qslop);     // slop for explicit user phrase queries\n      up.setAllowLeadingWildcard(true);\n      \n      // defer escaping and only do if lucene parsing fails, or we need phrases\n      // parsing fails.  Need to sloppy phrase queries anyway though.\n      List<Clause> clauses = splitIntoClauses(userQuery, false);\n      \n      // Always rebuild mainUserQuery from clauses to catch modifications from splitIntoClauses\n      // This was necessary for userFields modifications to get propagated into the query.\n      // Convert lower or mixed case operators to uppercase if we saw them.\n      // only do this for the lucene query part and not for phrase query boosting\n      // since some fields might not be case insensitive.\n      // We don't use a regex for this because it might change and AND or OR in\n      // a phrase query in a case sensitive field.\n      String mainUserQuery = rebuildUserQuery(clauses, config.lowercaseOperators);\n      \n      // but always for unstructured implicit bqs created by getFieldQuery\n      up.minShouldMatch = config.minShouldMatch;\n\n      up.setSplitOnWhitespace(config.splitOnWhitespace);\n      \n      parsedUserQuery = parseOriginalQuery(up, mainUserQuery, clauses, config);\n      \n      if (parsedUserQuery == null) {\n        parsedUserQuery = parseEscapedQuery(up, escapeUserQuery(clauses), config);\n      }\n      \n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n      \n      addPhraseFieldQueries(query, clauses, config);\n      \n    }\n    \n    /* * * Boosting Query * * */\n    boostQueries = getBoostQueries();\n    for(Query f : boostQueries) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    /* * * Boosting Functions * * */\n    List<Query> boostFunctions = getBoostFunctions();\n    for(Query f : boostFunctions) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    //\n    // create a boosted query (scores multiplied by boosts)\n    //\n    Query topQuery = QueryUtils.build(query, this);\n    List<ValueSource> boosts = getMultiplicativeBoosts();\n    if (boosts.size()>1) {\n      ValueSource prod = new ProductFloatFunction(boosts.toArray(new ValueSource[boosts.size()]));\n      topQuery = new BoostedQuery(topQuery, prod);\n    } else if (boosts.size() == 1) {\n      topQuery = new BoostedQuery(topQuery, boosts.get(0));\n    }\n    \n    return topQuery;\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws SyntaxError {\n\n    parsed = true;\n    \n    /* the main query we will execute.  we disable the coord because\n     * this query is an artificial construct\n     */\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    \n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if( userQuery == null || userQuery.trim().length() == 0 ) {\n      // If no query is specified, we may have an alternate\n      if (config.altQ != null) {\n        QParser altQParser = subQuery(config.altQ, null);\n        altUserQuery = altQParser.getQuery();\n        query.add( altUserQuery , BooleanClause.Occur.MUST );\n      } else {\n        return null;\n        // throw new SyntaxError(\"missing query string\" );\n      }\n    } else {\n      // There is a valid query string\n      ExtendedSolrQueryParser up = createEdismaxQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n      up.addAlias(IMPOSSIBLE_FIELD_NAME, config.tiebreaker, config.queryFields);\n      addAliasesFromRequest(up, config.tiebreaker);\n      up.setPhraseSlop(config.qslop);     // slop for explicit user phrase queries\n      up.setAllowLeadingWildcard(true);\n      \n      // defer escaping and only do if lucene parsing fails, or we need phrases\n      // parsing fails.  Need to sloppy phrase queries anyway though.\n      List<Clause> clauses = splitIntoClauses(userQuery, false);\n      \n      // Always rebuild mainUserQuery from clauses to catch modifications from splitIntoClauses\n      // This was necessary for userFields modifications to get propagated into the query.\n      // Convert lower or mixed case operators to uppercase if we saw them.\n      // only do this for the lucene query part and not for phrase query boosting\n      // since some fields might not be case insensitive.\n      // We don't use a regex for this because it might change and AND or OR in\n      // a phrase query in a case sensitive field.\n      String mainUserQuery = rebuildUserQuery(clauses, config.lowercaseOperators);\n      \n      // but always for unstructured implicit bqs created by getFieldQuery\n      up.minShouldMatch = config.minShouldMatch;\n\n      up.setSplitOnWhitespace(config.splitOnWhitespace);\n      \n      parsedUserQuery = parseOriginalQuery(up, mainUserQuery, clauses, config);\n      \n      if (parsedUserQuery == null) {\n        parsedUserQuery = parseEscapedQuery(up, escapeUserQuery(clauses), config);\n      }\n      \n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n      \n      addPhraseFieldQueries(query, clauses, config);\n      \n    }\n    \n    /* * * Boosting Query * * */\n    boostQueries = getBoostQueries();\n    for(Query f : boostQueries) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    /* * * Boosting Functions * * */\n    List<Query> boostFunctions = getBoostFunctions();\n    for(Query f : boostFunctions) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    //\n    // create a boosted query (scores multiplied by boosts)\n    //\n    Query topQuery = query.build();\n    List<ValueSource> boosts = getMultiplicativeBoosts();\n    if (boosts.size()>1) {\n      ValueSource prod = new ProductFloatFunction(boosts.toArray(new ValueSource[boosts.size()]));\n      topQuery = new BoostedQuery(topQuery, prod);\n    } else if (boosts.size() == 1) {\n      topQuery = new BoostedQuery(topQuery, boosts.get(0));\n    }\n    \n    return topQuery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws SyntaxError {\n\n    parsed = true;\n    \n    /* the main query we will execute.  we disable the coord because\n     * this query is an artificial construct\n     */\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    \n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if( userQuery == null || userQuery.trim().length() == 0 ) {\n      // If no query is specified, we may have an alternate\n      if (config.altQ != null) {\n        QParser altQParser = subQuery(config.altQ, null);\n        altUserQuery = altQParser.getQuery();\n        query.add( altUserQuery , BooleanClause.Occur.MUST );\n      } else {\n        return null;\n        // throw new SyntaxError(\"missing query string\" );\n      }\n    } else {\n      // There is a valid query string\n      ExtendedSolrQueryParser up = createEdismaxQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n      up.addAlias(IMPOSSIBLE_FIELD_NAME, config.tiebreaker, config.queryFields);\n      addAliasesFromRequest(up, config.tiebreaker);\n      up.setPhraseSlop(config.qslop);     // slop for explicit user phrase queries\n      up.setAllowLeadingWildcard(true);\n      \n      // defer escaping and only do if lucene parsing fails, or we need phrases\n      // parsing fails.  Need to sloppy phrase queries anyway though.\n      List<Clause> clauses = splitIntoClauses(userQuery, false);\n      \n      // Always rebuild mainUserQuery from clauses to catch modifications from splitIntoClauses\n      // This was necessary for userFields modifications to get propagated into the query.\n      // Convert lower or mixed case operators to uppercase if we saw them.\n      // only do this for the lucene query part and not for phrase query boosting\n      // since some fields might not be case insensitive.\n      // We don't use a regex for this because it might change and AND or OR in\n      // a phrase query in a case sensitive field.\n      String mainUserQuery = rebuildUserQuery(clauses, config.lowercaseOperators);\n      \n      // but always for unstructured implicit bqs created by getFieldQuery\n      up.minShouldMatch = config.minShouldMatch;\n\n      up.setSplitOnWhitespace(config.splitOnWhitespace);\n      \n      parsedUserQuery = parseOriginalQuery(up, mainUserQuery, clauses, config);\n      \n      if (parsedUserQuery == null) {\n        parsedUserQuery = parseEscapedQuery(up, escapeUserQuery(clauses), config);\n      }\n      \n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n      \n      addPhraseFieldQueries(query, clauses, config);\n      \n    }\n    \n    /* * * Boosting Query * * */\n    boostQueries = getBoostQueries();\n    for(Query f : boostQueries) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    /* * * Boosting Functions * * */\n    List<Query> boostFunctions = getBoostFunctions();\n    for(Query f : boostFunctions) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    //\n    // create a boosted query (scores multiplied by boosts)\n    //\n    Query topQuery = QueryUtils.build(query, this);\n    List<ValueSource> boosts = getMultiplicativeBoosts();\n    if (boosts.size()>1) {\n      ValueSource prod = new ProductFloatFunction(boosts.toArray(new ValueSource[boosts.size()]));\n      topQuery = new BoostedQuery(topQuery, prod);\n    } else if (boosts.size() == 1) {\n      topQuery = new BoostedQuery(topQuery, boosts.get(0));\n    }\n    \n    return topQuery;\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws SyntaxError {\n\n    parsed = true;\n    \n    /* the main query we will execute.  we disable the coord because\n     * this query is an artificial construct\n     */\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    \n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if( userQuery == null || userQuery.trim().length() == 0 ) {\n      // If no query is specified, we may have an alternate\n      if (config.altQ != null) {\n        QParser altQParser = subQuery(config.altQ, null);\n        altUserQuery = altQParser.getQuery();\n        query.add( altUserQuery , BooleanClause.Occur.MUST );\n      } else {\n        return null;\n        // throw new SyntaxError(\"missing query string\" );\n      }\n    } else {\n      // There is a valid query string\n      ExtendedSolrQueryParser up = createEdismaxQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n      up.addAlias(IMPOSSIBLE_FIELD_NAME, config.tiebreaker, config.queryFields);\n      addAliasesFromRequest(up, config.tiebreaker);\n      up.setPhraseSlop(config.qslop);     // slop for explicit user phrase queries\n      up.setAllowLeadingWildcard(true);\n      \n      // defer escaping and only do if lucene parsing fails, or we need phrases\n      // parsing fails.  Need to sloppy phrase queries anyway though.\n      List<Clause> clauses = splitIntoClauses(userQuery, false);\n      \n      // Always rebuild mainUserQuery from clauses to catch modifications from splitIntoClauses\n      // This was necessary for userFields modifications to get propagated into the query.\n      // Convert lower or mixed case operators to uppercase if we saw them.\n      // only do this for the lucene query part and not for phrase query boosting\n      // since some fields might not be case insensitive.\n      // We don't use a regex for this because it might change and AND or OR in\n      // a phrase query in a case sensitive field.\n      String mainUserQuery = rebuildUserQuery(clauses, config.lowercaseOperators);\n      \n      // but always for unstructured implicit bqs created by getFieldQuery\n      up.minShouldMatch = config.minShouldMatch;\n\n      up.setSplitOnWhitespace(config.splitOnWhitespace);\n      \n      parsedUserQuery = parseOriginalQuery(up, mainUserQuery, clauses, config);\n      \n      if (parsedUserQuery == null) {\n        parsedUserQuery = parseEscapedQuery(up, escapeUserQuery(clauses), config);\n      }\n      \n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n      \n      addPhraseFieldQueries(query, clauses, config);\n      \n    }\n    \n    /* * * Boosting Query * * */\n    boostQueries = getBoostQueries();\n    for(Query f : boostQueries) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    /* * * Boosting Functions * * */\n    List<Query> boostFunctions = getBoostFunctions();\n    for(Query f : boostFunctions) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    //\n    // create a boosted query (scores multiplied by boosts)\n    //\n    Query topQuery = query.build();\n    List<ValueSource> boosts = getMultiplicativeBoosts();\n    if (boosts.size()>1) {\n      ValueSource prod = new ProductFloatFunction(boosts.toArray(new ValueSource[boosts.size()]));\n      topQuery = new BoostedQuery(topQuery, prod);\n    } else if (boosts.size() == 1) {\n      topQuery = new BoostedQuery(topQuery, boosts.get(0));\n    }\n    \n    return topQuery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws SyntaxError {\n\n    parsed = true;\n    \n    /* the main query we will execute.  we disable the coord because\n     * this query is an artificial construct\n     */\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    \n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if( userQuery == null || userQuery.trim().length() == 0 ) {\n      // If no query is specified, we may have an alternate\n      if (config.altQ != null) {\n        QParser altQParser = subQuery(config.altQ, null);\n        altUserQuery = altQParser.getQuery();\n        query.add( altUserQuery , BooleanClause.Occur.MUST );\n      } else {\n        return null;\n        // throw new SyntaxError(\"missing query string\" );\n      }\n    } else {\n      // There is a valid query string\n      ExtendedSolrQueryParser up = createEdismaxQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n      up.addAlias(IMPOSSIBLE_FIELD_NAME, config.tiebreaker, config.queryFields);\n      addAliasesFromRequest(up, config.tiebreaker);\n      up.setPhraseSlop(config.qslop);     // slop for explicit user phrase queries\n      up.setAllowLeadingWildcard(true);\n      \n      // defer escaping and only do if lucene parsing fails, or we need phrases\n      // parsing fails.  Need to sloppy phrase queries anyway though.\n      List<Clause> clauses = splitIntoClauses(userQuery, false);\n      \n      // Always rebuild mainUserQuery from clauses to catch modifications from splitIntoClauses\n      // This was necessary for userFields modifications to get propagated into the query.\n      // Convert lower or mixed case operators to uppercase if we saw them.\n      // only do this for the lucene query part and not for phrase query boosting\n      // since some fields might not be case insensitive.\n      // We don't use a regex for this because it might change and AND or OR in\n      // a phrase query in a case sensitive field.\n      String mainUserQuery = rebuildUserQuery(clauses, config.lowercaseOperators);\n      \n      // but always for unstructured implicit bqs created by getFieldQuery\n      up.minShouldMatch = config.minShouldMatch;\n\n      up.setSplitOnWhitespace(config.splitOnWhitespace);\n      \n      parsedUserQuery = parseOriginalQuery(up, mainUserQuery, clauses, config);\n      \n      if (parsedUserQuery == null) {\n        parsedUserQuery = parseEscapedQuery(up, escapeUserQuery(clauses), config);\n      }\n      \n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n      \n      addPhraseFieldQueries(query, clauses, config);\n      \n    }\n    \n    /* * * Boosting Query * * */\n    boostQueries = getBoostQueries();\n    for(Query f : boostQueries) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    /* * * Boosting Functions * * */\n    List<Query> boostFunctions = getBoostFunctions();\n    for(Query f : boostFunctions) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    //\n    // create a boosted query (scores multiplied by boosts)\n    //\n    Query topQuery = QueryUtils.build(query, this);\n    List<ValueSource> boosts = getMultiplicativeBoosts();\n    if (boosts.size()>1) {\n      ValueSource prod = new ProductFloatFunction(boosts.toArray(new ValueSource[boosts.size()]));\n      topQuery = new BoostedQuery(topQuery, prod);\n    } else if (boosts.size() == 1) {\n      topQuery = new BoostedQuery(topQuery, boosts.get(0));\n    }\n    \n    return topQuery;\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws SyntaxError {\n\n    parsed = true;\n    \n    /* the main query we will execute.  we disable the coord because\n     * this query is an artificial construct\n     */\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    \n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if( userQuery == null || userQuery.trim().length() == 0 ) {\n      // If no query is specified, we may have an alternate\n      if (config.altQ != null) {\n        QParser altQParser = subQuery(config.altQ, null);\n        altUserQuery = altQParser.getQuery();\n        query.add( altUserQuery , BooleanClause.Occur.MUST );\n      } else {\n        return null;\n        // throw new SyntaxError(\"missing query string\" );\n      }\n    } else {\n      // There is a valid query string\n      ExtendedSolrQueryParser up = createEdismaxQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n      up.addAlias(IMPOSSIBLE_FIELD_NAME, config.tiebreaker, config.queryFields);\n      addAliasesFromRequest(up, config.tiebreaker);\n      up.setPhraseSlop(config.qslop);     // slop for explicit user phrase queries\n      up.setAllowLeadingWildcard(true);\n      \n      // defer escaping and only do if lucene parsing fails, or we need phrases\n      // parsing fails.  Need to sloppy phrase queries anyway though.\n      List<Clause> clauses = splitIntoClauses(userQuery, false);\n      \n      // Always rebuild mainUserQuery from clauses to catch modifications from splitIntoClauses\n      // This was necessary for userFields modifications to get propagated into the query.\n      // Convert lower or mixed case operators to uppercase if we saw them.\n      // only do this for the lucene query part and not for phrase query boosting\n      // since some fields might not be case insensitive.\n      // We don't use a regex for this because it might change and AND or OR in\n      // a phrase query in a case sensitive field.\n      String mainUserQuery = rebuildUserQuery(clauses, config.lowercaseOperators);\n      \n      // but always for unstructured implicit bqs created by getFieldQuery\n      up.minShouldMatch = config.minShouldMatch;\n\n      up.setSplitOnWhitespace(config.splitOnWhitespace);\n      \n      parsedUserQuery = parseOriginalQuery(up, mainUserQuery, clauses, config);\n      \n      if (parsedUserQuery == null) {\n        parsedUserQuery = parseEscapedQuery(up, escapeUserQuery(clauses), config);\n      }\n      \n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n      \n      addPhraseFieldQueries(query, clauses, config);\n      \n    }\n    \n    /* * * Boosting Query * * */\n    boostQueries = getBoostQueries();\n    for(Query f : boostQueries) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    /* * * Boosting Functions * * */\n    List<Query> boostFunctions = getBoostFunctions();\n    for(Query f : boostFunctions) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    //\n    // create a boosted query (scores multiplied by boosts)\n    //\n    Query topQuery = query.build();\n    List<ValueSource> boosts = getMultiplicativeBoosts();\n    if (boosts.size()>1) {\n      ValueSource prod = new ProductFloatFunction(boosts.toArray(new ValueSource[boosts.size()]));\n      topQuery = new BoostedQuery(topQuery, prod);\n    } else if (boosts.size() == 1) {\n      topQuery = new BoostedQuery(topQuery, boosts.get(0));\n    }\n    \n    return topQuery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a91f19e3f7576973404e13b7ecfb8ae94f313921","date":1511358452,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws SyntaxError {\n\n    parsed = true;\n    \n    /* the main query we will execute.  we disable the coord because\n     * this query is an artificial construct\n     */\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    \n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if( userQuery == null || userQuery.trim().length() == 0 ) {\n      // If no query is specified, we may have an alternate\n      if (config.altQ != null) {\n        QParser altQParser = subQuery(config.altQ, null);\n        altUserQuery = altQParser.getQuery();\n        query.add( altUserQuery , BooleanClause.Occur.MUST );\n      } else {\n        return null;\n        // throw new SyntaxError(\"missing query string\" );\n      }\n    } else {\n      // There is a valid query string\n      ExtendedSolrQueryParser up = createEdismaxQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n      up.addAlias(IMPOSSIBLE_FIELD_NAME, config.tiebreaker, config.queryFields);\n      addAliasesFromRequest(up, config.tiebreaker);\n      up.setPhraseSlop(config.qslop);     // slop for explicit user phrase queries\n      up.setAllowLeadingWildcard(true);\n      up.setAllowSubQueryParsing(config.userFields.isAllowed(MagicFieldName.QUERY.field));\n      \n      // defer escaping and only do if lucene parsing fails, or we need phrases\n      // parsing fails.  Need to sloppy phrase queries anyway though.\n      List<Clause> clauses = splitIntoClauses(userQuery, false);\n      \n      // Always rebuild mainUserQuery from clauses to catch modifications from splitIntoClauses\n      // This was necessary for userFields modifications to get propagated into the query.\n      // Convert lower or mixed case operators to uppercase if we saw them.\n      // only do this for the lucene query part and not for phrase query boosting\n      // since some fields might not be case insensitive.\n      // We don't use a regex for this because it might change and AND or OR in\n      // a phrase query in a case sensitive field.\n      String mainUserQuery = rebuildUserQuery(clauses, config.lowercaseOperators);\n      \n      // but always for unstructured implicit bqs created by getFieldQuery\n      up.minShouldMatch = config.minShouldMatch;\n\n      up.setSplitOnWhitespace(config.splitOnWhitespace);\n      \n      parsedUserQuery = parseOriginalQuery(up, mainUserQuery, clauses, config);\n      \n      if (parsedUserQuery == null) {\n        parsedUserQuery = parseEscapedQuery(up, escapeUserQuery(clauses), config);\n      }\n      \n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n      \n      addPhraseFieldQueries(query, clauses, config);\n      \n    }\n    \n    /* * * Boosting Query * * */\n    boostQueries = getBoostQueries();\n    for(Query f : boostQueries) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    /* * * Boosting Functions * * */\n    List<Query> boostFunctions = getBoostFunctions();\n    for(Query f : boostFunctions) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    //\n    // create a boosted query (scores multiplied by boosts)\n    //\n    Query topQuery = QueryUtils.build(query, this);\n    List<ValueSource> boosts = getMultiplicativeBoosts();\n    if (boosts.size()>1) {\n      ValueSource prod = new ProductFloatFunction(boosts.toArray(new ValueSource[boosts.size()]));\n      topQuery = new BoostedQuery(topQuery, prod);\n    } else if (boosts.size() == 1) {\n      topQuery = new BoostedQuery(topQuery, boosts.get(0));\n    }\n    \n    return topQuery;\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws SyntaxError {\n\n    parsed = true;\n    \n    /* the main query we will execute.  we disable the coord because\n     * this query is an artificial construct\n     */\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    \n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if( userQuery == null || userQuery.trim().length() == 0 ) {\n      // If no query is specified, we may have an alternate\n      if (config.altQ != null) {\n        QParser altQParser = subQuery(config.altQ, null);\n        altUserQuery = altQParser.getQuery();\n        query.add( altUserQuery , BooleanClause.Occur.MUST );\n      } else {\n        return null;\n        // throw new SyntaxError(\"missing query string\" );\n      }\n    } else {\n      // There is a valid query string\n      ExtendedSolrQueryParser up = createEdismaxQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n      up.addAlias(IMPOSSIBLE_FIELD_NAME, config.tiebreaker, config.queryFields);\n      addAliasesFromRequest(up, config.tiebreaker);\n      up.setPhraseSlop(config.qslop);     // slop for explicit user phrase queries\n      up.setAllowLeadingWildcard(true);\n      \n      // defer escaping and only do if lucene parsing fails, or we need phrases\n      // parsing fails.  Need to sloppy phrase queries anyway though.\n      List<Clause> clauses = splitIntoClauses(userQuery, false);\n      \n      // Always rebuild mainUserQuery from clauses to catch modifications from splitIntoClauses\n      // This was necessary for userFields modifications to get propagated into the query.\n      // Convert lower or mixed case operators to uppercase if we saw them.\n      // only do this for the lucene query part and not for phrase query boosting\n      // since some fields might not be case insensitive.\n      // We don't use a regex for this because it might change and AND or OR in\n      // a phrase query in a case sensitive field.\n      String mainUserQuery = rebuildUserQuery(clauses, config.lowercaseOperators);\n      \n      // but always for unstructured implicit bqs created by getFieldQuery\n      up.minShouldMatch = config.minShouldMatch;\n\n      up.setSplitOnWhitespace(config.splitOnWhitespace);\n      \n      parsedUserQuery = parseOriginalQuery(up, mainUserQuery, clauses, config);\n      \n      if (parsedUserQuery == null) {\n        parsedUserQuery = parseEscapedQuery(up, escapeUserQuery(clauses), config);\n      }\n      \n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n      \n      addPhraseFieldQueries(query, clauses, config);\n      \n    }\n    \n    /* * * Boosting Query * * */\n    boostQueries = getBoostQueries();\n    for(Query f : boostQueries) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    /* * * Boosting Functions * * */\n    List<Query> boostFunctions = getBoostFunctions();\n    for(Query f : boostFunctions) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    //\n    // create a boosted query (scores multiplied by boosts)\n    //\n    Query topQuery = QueryUtils.build(query, this);\n    List<ValueSource> boosts = getMultiplicativeBoosts();\n    if (boosts.size()>1) {\n      ValueSource prod = new ProductFloatFunction(boosts.toArray(new ValueSource[boosts.size()]));\n      topQuery = new BoostedQuery(topQuery, prod);\n    } else if (boosts.size() == 1) {\n      topQuery = new BoostedQuery(topQuery, boosts.get(0));\n    }\n    \n    return topQuery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4aee4980038a10791618ea04e79233ce5cbf6607","date":1511366888,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws SyntaxError {\n\n    parsed = true;\n    \n    /* the main query we will execute.  we disable the coord because\n     * this query is an artificial construct\n     */\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    \n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if( userQuery == null || userQuery.trim().length() == 0 ) {\n      // If no query is specified, we may have an alternate\n      if (config.altQ != null) {\n        QParser altQParser = subQuery(config.altQ, null);\n        altUserQuery = altQParser.getQuery();\n        query.add( altUserQuery , BooleanClause.Occur.MUST );\n      } else {\n        return null;\n        // throw new SyntaxError(\"missing query string\" );\n      }\n    } else {\n      // There is a valid query string\n      ExtendedSolrQueryParser up = createEdismaxQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n      up.addAlias(IMPOSSIBLE_FIELD_NAME, config.tiebreaker, config.queryFields);\n      addAliasesFromRequest(up, config.tiebreaker);\n      up.setPhraseSlop(config.qslop);     // slop for explicit user phrase queries\n      up.setAllowLeadingWildcard(true);\n      up.setAllowSubQueryParsing(config.userFields.isAllowed(MagicFieldName.QUERY.field));\n      \n      // defer escaping and only do if lucene parsing fails, or we need phrases\n      // parsing fails.  Need to sloppy phrase queries anyway though.\n      List<Clause> clauses = splitIntoClauses(userQuery, false);\n      \n      // Always rebuild mainUserQuery from clauses to catch modifications from splitIntoClauses\n      // This was necessary for userFields modifications to get propagated into the query.\n      // Convert lower or mixed case operators to uppercase if we saw them.\n      // only do this for the lucene query part and not for phrase query boosting\n      // since some fields might not be case insensitive.\n      // We don't use a regex for this because it might change and AND or OR in\n      // a phrase query in a case sensitive field.\n      String mainUserQuery = rebuildUserQuery(clauses, config.lowercaseOperators);\n      \n      // but always for unstructured implicit bqs created by getFieldQuery\n      up.minShouldMatch = config.minShouldMatch;\n\n      up.setSplitOnWhitespace(config.splitOnWhitespace);\n      \n      parsedUserQuery = parseOriginalQuery(up, mainUserQuery, clauses, config);\n      \n      if (parsedUserQuery == null) {\n        parsedUserQuery = parseEscapedQuery(up, escapeUserQuery(clauses), config);\n      }\n      \n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n      \n      addPhraseFieldQueries(query, clauses, config);\n      \n    }\n    \n    /* * * Boosting Query * * */\n    boostQueries = getBoostQueries();\n    for(Query f : boostQueries) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    /* * * Boosting Functions * * */\n    List<Query> boostFunctions = getBoostFunctions();\n    for(Query f : boostFunctions) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    //\n    // create a boosted query (scores multiplied by boosts)\n    //\n    Query topQuery = QueryUtils.build(query, this);\n    List<ValueSource> boosts = getMultiplicativeBoosts();\n    if (boosts.size()>1) {\n      ValueSource prod = new ProductFloatFunction(boosts.toArray(new ValueSource[boosts.size()]));\n      topQuery = new BoostedQuery(topQuery, prod);\n    } else if (boosts.size() == 1) {\n      topQuery = new BoostedQuery(topQuery, boosts.get(0));\n    }\n    \n    return topQuery;\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws SyntaxError {\n\n    parsed = true;\n    \n    /* the main query we will execute.  we disable the coord because\n     * this query is an artificial construct\n     */\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    \n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if( userQuery == null || userQuery.trim().length() == 0 ) {\n      // If no query is specified, we may have an alternate\n      if (config.altQ != null) {\n        QParser altQParser = subQuery(config.altQ, null);\n        altUserQuery = altQParser.getQuery();\n        query.add( altUserQuery , BooleanClause.Occur.MUST );\n      } else {\n        return null;\n        // throw new SyntaxError(\"missing query string\" );\n      }\n    } else {\n      // There is a valid query string\n      ExtendedSolrQueryParser up = createEdismaxQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n      up.addAlias(IMPOSSIBLE_FIELD_NAME, config.tiebreaker, config.queryFields);\n      addAliasesFromRequest(up, config.tiebreaker);\n      up.setPhraseSlop(config.qslop);     // slop for explicit user phrase queries\n      up.setAllowLeadingWildcard(true);\n      \n      // defer escaping and only do if lucene parsing fails, or we need phrases\n      // parsing fails.  Need to sloppy phrase queries anyway though.\n      List<Clause> clauses = splitIntoClauses(userQuery, false);\n      \n      // Always rebuild mainUserQuery from clauses to catch modifications from splitIntoClauses\n      // This was necessary for userFields modifications to get propagated into the query.\n      // Convert lower or mixed case operators to uppercase if we saw them.\n      // only do this for the lucene query part and not for phrase query boosting\n      // since some fields might not be case insensitive.\n      // We don't use a regex for this because it might change and AND or OR in\n      // a phrase query in a case sensitive field.\n      String mainUserQuery = rebuildUserQuery(clauses, config.lowercaseOperators);\n      \n      // but always for unstructured implicit bqs created by getFieldQuery\n      up.minShouldMatch = config.minShouldMatch;\n\n      up.setSplitOnWhitespace(config.splitOnWhitespace);\n      \n      parsedUserQuery = parseOriginalQuery(up, mainUserQuery, clauses, config);\n      \n      if (parsedUserQuery == null) {\n        parsedUserQuery = parseEscapedQuery(up, escapeUserQuery(clauses), config);\n      }\n      \n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n      \n      addPhraseFieldQueries(query, clauses, config);\n      \n    }\n    \n    /* * * Boosting Query * * */\n    boostQueries = getBoostQueries();\n    for(Query f : boostQueries) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    /* * * Boosting Functions * * */\n    List<Query> boostFunctions = getBoostFunctions();\n    for(Query f : boostFunctions) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    //\n    // create a boosted query (scores multiplied by boosts)\n    //\n    Query topQuery = QueryUtils.build(query, this);\n    List<ValueSource> boosts = getMultiplicativeBoosts();\n    if (boosts.size()>1) {\n      ValueSource prod = new ProductFloatFunction(boosts.toArray(new ValueSource[boosts.size()]));\n      topQuery = new BoostedQuery(topQuery, prod);\n    } else if (boosts.size() == 1) {\n      topQuery = new BoostedQuery(topQuery, boosts.get(0));\n    }\n    \n    return topQuery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62f3efc82b1ead830448bb27e2af9f89417401ea","date":1513619223,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws SyntaxError {\n\n    parsed = true;\n    \n    /* the main query we will execute.  we disable the coord because\n     * this query is an artificial construct\n     */\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    \n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if( userQuery == null || userQuery.trim().length() == 0 ) {\n      // If no query is specified, we may have an alternate\n      if (config.altQ != null) {\n        QParser altQParser = subQuery(config.altQ, null);\n        altUserQuery = altQParser.getQuery();\n        query.add( altUserQuery , BooleanClause.Occur.MUST );\n      } else {\n        return null;\n        // throw new SyntaxError(\"missing query string\" );\n      }\n    } else {\n      // There is a valid query string\n      ExtendedSolrQueryParser up = createEdismaxQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n      up.addAlias(IMPOSSIBLE_FIELD_NAME, config.tiebreaker, config.queryFields);\n      addAliasesFromRequest(up, config.tiebreaker);\n      up.setPhraseSlop(config.qslop);     // slop for explicit user phrase queries\n      up.setAllowLeadingWildcard(true);\n      up.setAllowSubQueryParsing(config.userFields.isAllowed(MagicFieldName.QUERY.field));\n      \n      // defer escaping and only do if lucene parsing fails, or we need phrases\n      // parsing fails.  Need to sloppy phrase queries anyway though.\n      List<Clause> clauses = splitIntoClauses(userQuery, false);\n      \n      // Always rebuild mainUserQuery from clauses to catch modifications from splitIntoClauses\n      // This was necessary for userFields modifications to get propagated into the query.\n      // Convert lower or mixed case operators to uppercase if we saw them.\n      // only do this for the lucene query part and not for phrase query boosting\n      // since some fields might not be case insensitive.\n      // We don't use a regex for this because it might change and AND or OR in\n      // a phrase query in a case sensitive field.\n      String mainUserQuery = rebuildUserQuery(clauses, config.lowercaseOperators);\n      \n      // but always for unstructured implicit bqs created by getFieldQuery\n      up.minShouldMatch = config.minShouldMatch;\n\n      up.setSplitOnWhitespace(config.splitOnWhitespace);\n      \n      parsedUserQuery = parseOriginalQuery(up, mainUserQuery, clauses, config);\n      \n      if (parsedUserQuery == null) {\n        parsedUserQuery = parseEscapedQuery(up, escapeUserQuery(clauses), config);\n      }\n      \n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n      \n      addPhraseFieldQueries(query, clauses, config);\n      \n    }\n    \n    /* * * Boosting Query * * */\n    boostQueries = getBoostQueries();\n    for(Query f : boostQueries) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    /* * * Boosting Functions * * */\n    List<Query> boostFunctions = getBoostFunctions();\n    for(Query f : boostFunctions) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    //\n    // create a boosted query (scores multiplied by boosts)\n    //\n    Query topQuery = QueryUtils.build(query, this);\n    List<ValueSource> boosts = getMultiplicativeBoosts();\n    if (boosts.size()>1) {\n      ValueSource prod = new ProductFloatFunction(boosts.toArray(new ValueSource[boosts.size()]));\n      topQuery = BoostQParserPlugin.boostQuery(topQuery, prod);\n    } else if (boosts.size() == 1) {\n      topQuery = BoostQParserPlugin.boostQuery(topQuery, boosts.get(0));\n    }\n    \n    return topQuery;\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws SyntaxError {\n\n    parsed = true;\n    \n    /* the main query we will execute.  we disable the coord because\n     * this query is an artificial construct\n     */\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    \n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if( userQuery == null || userQuery.trim().length() == 0 ) {\n      // If no query is specified, we may have an alternate\n      if (config.altQ != null) {\n        QParser altQParser = subQuery(config.altQ, null);\n        altUserQuery = altQParser.getQuery();\n        query.add( altUserQuery , BooleanClause.Occur.MUST );\n      } else {\n        return null;\n        // throw new SyntaxError(\"missing query string\" );\n      }\n    } else {\n      // There is a valid query string\n      ExtendedSolrQueryParser up = createEdismaxQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n      up.addAlias(IMPOSSIBLE_FIELD_NAME, config.tiebreaker, config.queryFields);\n      addAliasesFromRequest(up, config.tiebreaker);\n      up.setPhraseSlop(config.qslop);     // slop for explicit user phrase queries\n      up.setAllowLeadingWildcard(true);\n      up.setAllowSubQueryParsing(config.userFields.isAllowed(MagicFieldName.QUERY.field));\n      \n      // defer escaping and only do if lucene parsing fails, or we need phrases\n      // parsing fails.  Need to sloppy phrase queries anyway though.\n      List<Clause> clauses = splitIntoClauses(userQuery, false);\n      \n      // Always rebuild mainUserQuery from clauses to catch modifications from splitIntoClauses\n      // This was necessary for userFields modifications to get propagated into the query.\n      // Convert lower or mixed case operators to uppercase if we saw them.\n      // only do this for the lucene query part and not for phrase query boosting\n      // since some fields might not be case insensitive.\n      // We don't use a regex for this because it might change and AND or OR in\n      // a phrase query in a case sensitive field.\n      String mainUserQuery = rebuildUserQuery(clauses, config.lowercaseOperators);\n      \n      // but always for unstructured implicit bqs created by getFieldQuery\n      up.minShouldMatch = config.minShouldMatch;\n\n      up.setSplitOnWhitespace(config.splitOnWhitespace);\n      \n      parsedUserQuery = parseOriginalQuery(up, mainUserQuery, clauses, config);\n      \n      if (parsedUserQuery == null) {\n        parsedUserQuery = parseEscapedQuery(up, escapeUserQuery(clauses), config);\n      }\n      \n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n      \n      addPhraseFieldQueries(query, clauses, config);\n      \n    }\n    \n    /* * * Boosting Query * * */\n    boostQueries = getBoostQueries();\n    for(Query f : boostQueries) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    /* * * Boosting Functions * * */\n    List<Query> boostFunctions = getBoostFunctions();\n    for(Query f : boostFunctions) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    //\n    // create a boosted query (scores multiplied by boosts)\n    //\n    Query topQuery = QueryUtils.build(query, this);\n    List<ValueSource> boosts = getMultiplicativeBoosts();\n    if (boosts.size()>1) {\n      ValueSource prod = new ProductFloatFunction(boosts.toArray(new ValueSource[boosts.size()]));\n      topQuery = new BoostedQuery(topQuery, prod);\n    } else if (boosts.size() == 1) {\n      topQuery = new BoostedQuery(topQuery, boosts.get(0));\n    }\n    \n    return topQuery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d4a607d2b3ec6943d58f8ed873827c2552aee80","date":1515405666,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws SyntaxError {\n\n    parsed = true;\n    \n    /* the main query we will execute.  we disable the coord because\n     * this query is an artificial construct\n     */\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    \n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if( userQuery == null || userQuery.trim().length() == 0 ) {\n      // If no query is specified, we may have an alternate\n      if (config.altQ != null) {\n        QParser altQParser = subQuery(config.altQ, null);\n        altUserQuery = altQParser.getQuery();\n        query.add( altUserQuery , BooleanClause.Occur.MUST );\n      } else {\n        return null;\n        // throw new SyntaxError(\"missing query string\" );\n      }\n    } else {\n      // There is a valid query string\n      ExtendedSolrQueryParser up = createEdismaxQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n      up.addAlias(IMPOSSIBLE_FIELD_NAME, config.tiebreaker, config.queryFields);\n      addAliasesFromRequest(up, config.tiebreaker);\n      up.setPhraseSlop(config.qslop);     // slop for explicit user phrase queries\n      up.setAllowLeadingWildcard(true);\n      up.setAllowSubQueryParsing(config.userFields.isAllowed(MagicFieldName.QUERY.field));\n      \n      // defer escaping and only do if lucene parsing fails, or we need phrases\n      // parsing fails.  Need to sloppy phrase queries anyway though.\n      List<Clause> clauses = splitIntoClauses(userQuery, false);\n      \n      // Always rebuild mainUserQuery from clauses to catch modifications from splitIntoClauses\n      // This was necessary for userFields modifications to get propagated into the query.\n      // Convert lower or mixed case operators to uppercase if we saw them.\n      // only do this for the lucene query part and not for phrase query boosting\n      // since some fields might not be case insensitive.\n      // We don't use a regex for this because it might change and AND or OR in\n      // a phrase query in a case sensitive field.\n      String mainUserQuery = rebuildUserQuery(clauses, config.lowercaseOperators);\n      \n      // but always for unstructured implicit bqs created by getFieldQuery\n      up.minShouldMatch = config.minShouldMatch;\n\n      up.setSplitOnWhitespace(config.splitOnWhitespace);\n      \n      parsedUserQuery = parseOriginalQuery(up, mainUserQuery, clauses, config);\n      \n      if (parsedUserQuery == null) {\n        parsedUserQuery = parseEscapedQuery(up, escapeUserQuery(clauses), config);\n      }\n      \n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n      \n      addPhraseFieldQueries(query, clauses, config);\n      \n    }\n    \n    /* * * Boosting Query * * */\n    boostQueries = getBoostQueries();\n    for(Query f : boostQueries) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    /* * * Boosting Functions * * */\n    List<Query> boostFunctions = getBoostFunctions();\n    for(Query f : boostFunctions) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    //\n    // create a boosted query (scores multiplied by boosts)\n    //\n    Query topQuery = QueryUtils.build(query, this);\n    List<ValueSource> boosts = getMultiplicativeBoosts();\n    if (boosts.size()>1) {\n      ValueSource prod = new ProductFloatFunction(boosts.toArray(new ValueSource[boosts.size()]));\n      topQuery = FunctionScoreQuery.boostByValue(topQuery, prod.asDoubleValuesSource());\n    } else if (boosts.size() == 1) {\n      topQuery = FunctionScoreQuery.boostByValue(topQuery, boosts.get(0).asDoubleValuesSource());\n    }\n    \n    return topQuery;\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws SyntaxError {\n\n    parsed = true;\n    \n    /* the main query we will execute.  we disable the coord because\n     * this query is an artificial construct\n     */\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    \n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if( userQuery == null || userQuery.trim().length() == 0 ) {\n      // If no query is specified, we may have an alternate\n      if (config.altQ != null) {\n        QParser altQParser = subQuery(config.altQ, null);\n        altUserQuery = altQParser.getQuery();\n        query.add( altUserQuery , BooleanClause.Occur.MUST );\n      } else {\n        return null;\n        // throw new SyntaxError(\"missing query string\" );\n      }\n    } else {\n      // There is a valid query string\n      ExtendedSolrQueryParser up = createEdismaxQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n      up.addAlias(IMPOSSIBLE_FIELD_NAME, config.tiebreaker, config.queryFields);\n      addAliasesFromRequest(up, config.tiebreaker);\n      up.setPhraseSlop(config.qslop);     // slop for explicit user phrase queries\n      up.setAllowLeadingWildcard(true);\n      up.setAllowSubQueryParsing(config.userFields.isAllowed(MagicFieldName.QUERY.field));\n      \n      // defer escaping and only do if lucene parsing fails, or we need phrases\n      // parsing fails.  Need to sloppy phrase queries anyway though.\n      List<Clause> clauses = splitIntoClauses(userQuery, false);\n      \n      // Always rebuild mainUserQuery from clauses to catch modifications from splitIntoClauses\n      // This was necessary for userFields modifications to get propagated into the query.\n      // Convert lower or mixed case operators to uppercase if we saw them.\n      // only do this for the lucene query part and not for phrase query boosting\n      // since some fields might not be case insensitive.\n      // We don't use a regex for this because it might change and AND or OR in\n      // a phrase query in a case sensitive field.\n      String mainUserQuery = rebuildUserQuery(clauses, config.lowercaseOperators);\n      \n      // but always for unstructured implicit bqs created by getFieldQuery\n      up.minShouldMatch = config.minShouldMatch;\n\n      up.setSplitOnWhitespace(config.splitOnWhitespace);\n      \n      parsedUserQuery = parseOriginalQuery(up, mainUserQuery, clauses, config);\n      \n      if (parsedUserQuery == null) {\n        parsedUserQuery = parseEscapedQuery(up, escapeUserQuery(clauses), config);\n      }\n      \n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n      \n      addPhraseFieldQueries(query, clauses, config);\n      \n    }\n    \n    /* * * Boosting Query * * */\n    boostQueries = getBoostQueries();\n    for(Query f : boostQueries) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    /* * * Boosting Functions * * */\n    List<Query> boostFunctions = getBoostFunctions();\n    for(Query f : boostFunctions) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    //\n    // create a boosted query (scores multiplied by boosts)\n    //\n    Query topQuery = QueryUtils.build(query, this);\n    List<ValueSource> boosts = getMultiplicativeBoosts();\n    if (boosts.size()>1) {\n      ValueSource prod = new ProductFloatFunction(boosts.toArray(new ValueSource[boosts.size()]));\n      topQuery = BoostQParserPlugin.boostQuery(topQuery, prod);\n    } else if (boosts.size() == 1) {\n      topQuery = BoostQParserPlugin.boostQuery(topQuery, boosts.get(0));\n    }\n    \n    return topQuery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws SyntaxError {\n\n    parsed = true;\n    \n    /* the main query we will execute.  we disable the coord because\n     * this query is an artificial construct\n     */\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    \n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if( userQuery == null || userQuery.trim().length() == 0 ) {\n      // If no query is specified, we may have an alternate\n      if (config.altQ != null) {\n        QParser altQParser = subQuery(config.altQ, null);\n        altUserQuery = altQParser.getQuery();\n        query.add( altUserQuery , BooleanClause.Occur.MUST );\n      } else {\n        return null;\n        // throw new SyntaxError(\"missing query string\" );\n      }\n    } else {\n      // There is a valid query string\n      ExtendedSolrQueryParser up = createEdismaxQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n      up.addAlias(IMPOSSIBLE_FIELD_NAME, config.tiebreaker, config.queryFields);\n      addAliasesFromRequest(up, config.tiebreaker);\n      up.setPhraseSlop(config.qslop);     // slop for explicit user phrase queries\n      up.setAllowLeadingWildcard(true);\n      up.setAllowSubQueryParsing(config.userFields.isAllowed(MagicFieldName.QUERY.field));\n      \n      // defer escaping and only do if lucene parsing fails, or we need phrases\n      // parsing fails.  Need to sloppy phrase queries anyway though.\n      List<Clause> clauses = splitIntoClauses(userQuery, false);\n      \n      // Always rebuild mainUserQuery from clauses to catch modifications from splitIntoClauses\n      // This was necessary for userFields modifications to get propagated into the query.\n      // Convert lower or mixed case operators to uppercase if we saw them.\n      // only do this for the lucene query part and not for phrase query boosting\n      // since some fields might not be case insensitive.\n      // We don't use a regex for this because it might change and AND or OR in\n      // a phrase query in a case sensitive field.\n      String mainUserQuery = rebuildUserQuery(clauses, config.lowercaseOperators);\n      \n      // but always for unstructured implicit bqs created by getFieldQuery\n      up.minShouldMatch = config.minShouldMatch;\n\n      up.setSplitOnWhitespace(config.splitOnWhitespace);\n      \n      parsedUserQuery = parseOriginalQuery(up, mainUserQuery, clauses, config);\n      \n      if (parsedUserQuery == null) {\n        parsedUserQuery = parseEscapedQuery(up, escapeUserQuery(clauses), config);\n      }\n      \n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n      \n      addPhraseFieldQueries(query, clauses, config);\n      \n    }\n    \n    /* * * Boosting Query * * */\n    boostQueries = getBoostQueries();\n    for(Query f : boostQueries) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    /* * * Boosting Functions * * */\n    List<Query> boostFunctions = getBoostFunctions();\n    for(Query f : boostFunctions) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    //\n    // create a boosted query (scores multiplied by boosts)\n    //\n    Query topQuery = QueryUtils.build(query, this);\n    List<ValueSource> boosts = getMultiplicativeBoosts();\n    if (boosts.size()>1) {\n      ValueSource prod = new ProductFloatFunction(boosts.toArray(new ValueSource[boosts.size()]));\n      topQuery = FunctionScoreQuery.boostByValue(topQuery, prod.asDoubleValuesSource());\n    } else if (boosts.size() == 1) {\n      topQuery = FunctionScoreQuery.boostByValue(topQuery, boosts.get(0).asDoubleValuesSource());\n    }\n    \n    return topQuery;\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws SyntaxError {\n\n    parsed = true;\n    \n    /* the main query we will execute.  we disable the coord because\n     * this query is an artificial construct\n     */\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    \n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if( userQuery == null || userQuery.trim().length() == 0 ) {\n      // If no query is specified, we may have an alternate\n      if (config.altQ != null) {\n        QParser altQParser = subQuery(config.altQ, null);\n        altUserQuery = altQParser.getQuery();\n        query.add( altUserQuery , BooleanClause.Occur.MUST );\n      } else {\n        return null;\n        // throw new SyntaxError(\"missing query string\" );\n      }\n    } else {\n      // There is a valid query string\n      ExtendedSolrQueryParser up = createEdismaxQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n      up.addAlias(IMPOSSIBLE_FIELD_NAME, config.tiebreaker, config.queryFields);\n      addAliasesFromRequest(up, config.tiebreaker);\n      up.setPhraseSlop(config.qslop);     // slop for explicit user phrase queries\n      up.setAllowLeadingWildcard(true);\n      up.setAllowSubQueryParsing(config.userFields.isAllowed(MagicFieldName.QUERY.field));\n      \n      // defer escaping and only do if lucene parsing fails, or we need phrases\n      // parsing fails.  Need to sloppy phrase queries anyway though.\n      List<Clause> clauses = splitIntoClauses(userQuery, false);\n      \n      // Always rebuild mainUserQuery from clauses to catch modifications from splitIntoClauses\n      // This was necessary for userFields modifications to get propagated into the query.\n      // Convert lower or mixed case operators to uppercase if we saw them.\n      // only do this for the lucene query part and not for phrase query boosting\n      // since some fields might not be case insensitive.\n      // We don't use a regex for this because it might change and AND or OR in\n      // a phrase query in a case sensitive field.\n      String mainUserQuery = rebuildUserQuery(clauses, config.lowercaseOperators);\n      \n      // but always for unstructured implicit bqs created by getFieldQuery\n      up.minShouldMatch = config.minShouldMatch;\n\n      up.setSplitOnWhitespace(config.splitOnWhitespace);\n      \n      parsedUserQuery = parseOriginalQuery(up, mainUserQuery, clauses, config);\n      \n      if (parsedUserQuery == null) {\n        parsedUserQuery = parseEscapedQuery(up, escapeUserQuery(clauses), config);\n      }\n      \n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n      \n      addPhraseFieldQueries(query, clauses, config);\n      \n    }\n    \n    /* * * Boosting Query * * */\n    boostQueries = getBoostQueries();\n    for(Query f : boostQueries) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    /* * * Boosting Functions * * */\n    List<Query> boostFunctions = getBoostFunctions();\n    for(Query f : boostFunctions) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    //\n    // create a boosted query (scores multiplied by boosts)\n    //\n    Query topQuery = QueryUtils.build(query, this);\n    List<ValueSource> boosts = getMultiplicativeBoosts();\n    if (boosts.size()>1) {\n      ValueSource prod = new ProductFloatFunction(boosts.toArray(new ValueSource[boosts.size()]));\n      topQuery = BoostQParserPlugin.boostQuery(topQuery, prod);\n    } else if (boosts.size() == 1) {\n      topQuery = BoostQParserPlugin.boostQuery(topQuery, boosts.get(0));\n    }\n    \n    return topQuery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d0ddc75fb2855fca36e3a81b86228b660cbf465","date":1538078006,"type":3,"author":"Charles Sanders","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws SyntaxError {\n\n    parsed = true;\n    \n    /* the main query we will execute.  we disable the coord because\n     * this query is an artificial construct\n     */\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    \n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if( userQuery == null || userQuery.trim().length() == 0 ) {\n      // If no query is specified, we may have an alternate\n      if (config.altQ != null) {\n        QParser altQParser = subQuery(config.altQ, null);\n        altUserQuery = altQParser.getQuery();\n        query.add( altUserQuery , BooleanClause.Occur.MUST );\n      } else {\n        return null;\n        // throw new SyntaxError(\"missing query string\" );\n      }\n    } else {\n      // There is a valid query string\n      ExtendedSolrQueryParser up = createEdismaxQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n      up.addAlias(IMPOSSIBLE_FIELD_NAME, config.tiebreaker, config.queryFields);\n      addAliasesFromRequest(up, config.tiebreaker);\n      validateQueryFields(up);\n      up.setPhraseSlop(config.qslop);     // slop for explicit user phrase queries\n      up.setAllowLeadingWildcard(true);\n      up.setAllowSubQueryParsing(config.userFields.isAllowed(MagicFieldName.QUERY.field));\n      \n      // defer escaping and only do if lucene parsing fails, or we need phrases\n      // parsing fails.  Need to sloppy phrase queries anyway though.\n      List<Clause> clauses = splitIntoClauses(userQuery, false);\n      \n      // Always rebuild mainUserQuery from clauses to catch modifications from splitIntoClauses\n      // This was necessary for userFields modifications to get propagated into the query.\n      // Convert lower or mixed case operators to uppercase if we saw them.\n      // only do this for the lucene query part and not for phrase query boosting\n      // since some fields might not be case insensitive.\n      // We don't use a regex for this because it might change and AND or OR in\n      // a phrase query in a case sensitive field.\n      String mainUserQuery = rebuildUserQuery(clauses, config.lowercaseOperators);\n      \n      // but always for unstructured implicit bqs created by getFieldQuery\n      up.minShouldMatch = config.minShouldMatch;\n\n      up.setSplitOnWhitespace(config.splitOnWhitespace);\n      \n      parsedUserQuery = parseOriginalQuery(up, mainUserQuery, clauses, config);\n      \n      if (parsedUserQuery == null) {\n        parsedUserQuery = parseEscapedQuery(up, escapeUserQuery(clauses), config);\n      }\n      \n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n      \n      addPhraseFieldQueries(query, clauses, config);\n      \n    }\n    \n    /* * * Boosting Query * * */\n    boostQueries = getBoostQueries();\n    for(Query f : boostQueries) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    /* * * Boosting Functions * * */\n    List<Query> boostFunctions = getBoostFunctions();\n    for(Query f : boostFunctions) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    //\n    // create a boosted query (scores multiplied by boosts)\n    //\n    Query topQuery = QueryUtils.build(query, this);\n    List<ValueSource> boosts = getMultiplicativeBoosts();\n    if (boosts.size()>1) {\n      ValueSource prod = new ProductFloatFunction(boosts.toArray(new ValueSource[boosts.size()]));\n      topQuery = FunctionScoreQuery.boostByValue(topQuery, prod.asDoubleValuesSource());\n    } else if (boosts.size() == 1) {\n      topQuery = FunctionScoreQuery.boostByValue(topQuery, boosts.get(0).asDoubleValuesSource());\n    }\n    \n    return topQuery;\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws SyntaxError {\n\n    parsed = true;\n    \n    /* the main query we will execute.  we disable the coord because\n     * this query is an artificial construct\n     */\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    \n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if( userQuery == null || userQuery.trim().length() == 0 ) {\n      // If no query is specified, we may have an alternate\n      if (config.altQ != null) {\n        QParser altQParser = subQuery(config.altQ, null);\n        altUserQuery = altQParser.getQuery();\n        query.add( altUserQuery , BooleanClause.Occur.MUST );\n      } else {\n        return null;\n        // throw new SyntaxError(\"missing query string\" );\n      }\n    } else {\n      // There is a valid query string\n      ExtendedSolrQueryParser up = createEdismaxQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n      up.addAlias(IMPOSSIBLE_FIELD_NAME, config.tiebreaker, config.queryFields);\n      addAliasesFromRequest(up, config.tiebreaker);\n      up.setPhraseSlop(config.qslop);     // slop for explicit user phrase queries\n      up.setAllowLeadingWildcard(true);\n      up.setAllowSubQueryParsing(config.userFields.isAllowed(MagicFieldName.QUERY.field));\n      \n      // defer escaping and only do if lucene parsing fails, or we need phrases\n      // parsing fails.  Need to sloppy phrase queries anyway though.\n      List<Clause> clauses = splitIntoClauses(userQuery, false);\n      \n      // Always rebuild mainUserQuery from clauses to catch modifications from splitIntoClauses\n      // This was necessary for userFields modifications to get propagated into the query.\n      // Convert lower or mixed case operators to uppercase if we saw them.\n      // only do this for the lucene query part and not for phrase query boosting\n      // since some fields might not be case insensitive.\n      // We don't use a regex for this because it might change and AND or OR in\n      // a phrase query in a case sensitive field.\n      String mainUserQuery = rebuildUserQuery(clauses, config.lowercaseOperators);\n      \n      // but always for unstructured implicit bqs created by getFieldQuery\n      up.minShouldMatch = config.minShouldMatch;\n\n      up.setSplitOnWhitespace(config.splitOnWhitespace);\n      \n      parsedUserQuery = parseOriginalQuery(up, mainUserQuery, clauses, config);\n      \n      if (parsedUserQuery == null) {\n        parsedUserQuery = parseEscapedQuery(up, escapeUserQuery(clauses), config);\n      }\n      \n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n      \n      addPhraseFieldQueries(query, clauses, config);\n      \n    }\n    \n    /* * * Boosting Query * * */\n    boostQueries = getBoostQueries();\n    for(Query f : boostQueries) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    /* * * Boosting Functions * * */\n    List<Query> boostFunctions = getBoostFunctions();\n    for(Query f : boostFunctions) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    //\n    // create a boosted query (scores multiplied by boosts)\n    //\n    Query topQuery = QueryUtils.build(query, this);\n    List<ValueSource> boosts = getMultiplicativeBoosts();\n    if (boosts.size()>1) {\n      ValueSource prod = new ProductFloatFunction(boosts.toArray(new ValueSource[boosts.size()]));\n      topQuery = FunctionScoreQuery.boostByValue(topQuery, prod.asDoubleValuesSource());\n    } else if (boosts.size() == 1) {\n      topQuery = FunctionScoreQuery.boostByValue(topQuery, boosts.get(0).asDoubleValuesSource());\n    }\n    \n    return topQuery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf9d6fd2b46a1c50382c5cef6be68fd0525946ff","date":1580036619,"type":3,"author":"andywebb1975","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws SyntaxError {\n\n    parsed = true;\n    \n    /* the main query we will execute.  we disable the coord because\n     * this query is an artificial construct\n     */\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    \n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if (StringUtils.isBlank(userQuery)) {\n      // If no query is specified, we may have an alternate\n      if (config.altQ != null) {\n        QParser altQParser = subQuery(config.altQ, null);\n        altUserQuery = altQParser.getQuery();\n        query.add( altUserQuery , BooleanClause.Occur.MUST );\n      } else {\n        return null;\n        // throw new SyntaxError(\"missing query string\" );\n      }\n    } else {\n      // There is a valid query string\n      ExtendedSolrQueryParser up = createEdismaxQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n      up.addAlias(IMPOSSIBLE_FIELD_NAME, config.tiebreaker, config.queryFields);\n      addAliasesFromRequest(up, config.tiebreaker);\n      validateQueryFields(up);\n      up.setPhraseSlop(config.qslop);     // slop for explicit user phrase queries\n      up.setAllowLeadingWildcard(true);\n      up.setAllowSubQueryParsing(config.userFields.isAllowed(MagicFieldName.QUERY.field));\n      \n      // defer escaping and only do if lucene parsing fails, or we need phrases\n      // parsing fails.  Need to sloppy phrase queries anyway though.\n      List<Clause> clauses = splitIntoClauses(userQuery, false);\n      \n      // Always rebuild mainUserQuery from clauses to catch modifications from splitIntoClauses\n      // This was necessary for userFields modifications to get propagated into the query.\n      // Convert lower or mixed case operators to uppercase if we saw them.\n      // only do this for the lucene query part and not for phrase query boosting\n      // since some fields might not be case insensitive.\n      // We don't use a regex for this because it might change and AND or OR in\n      // a phrase query in a case sensitive field.\n      String mainUserQuery = rebuildUserQuery(clauses, config.lowercaseOperators);\n      \n      // but always for unstructured implicit bqs created by getFieldQuery\n      up.minShouldMatch = config.minShouldMatch;\n\n      up.setSplitOnWhitespace(config.splitOnWhitespace);\n      \n      parsedUserQuery = parseOriginalQuery(up, mainUserQuery, clauses, config);\n      \n      if (parsedUserQuery == null) {\n        parsedUserQuery = parseEscapedQuery(up, escapeUserQuery(clauses), config);\n      }\n      \n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n      \n      addPhraseFieldQueries(query, clauses, config);\n      \n    }\n    \n    /* * * Boosting Query * * */\n    boostQueries = getBoostQueries();\n    for(Query f : boostQueries) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    /* * * Boosting Functions * * */\n    List<Query> boostFunctions = getBoostFunctions();\n    for(Query f : boostFunctions) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    //\n    // create a boosted query (scores multiplied by boosts)\n    //\n    Query topQuery = QueryUtils.build(query, this);\n    List<ValueSource> boosts = getMultiplicativeBoosts();\n    if (boosts.size()>1) {\n      ValueSource prod = new ProductFloatFunction(boosts.toArray(new ValueSource[boosts.size()]));\n      topQuery = FunctionScoreQuery.boostByValue(topQuery, prod.asDoubleValuesSource());\n    } else if (boosts.size() == 1) {\n      topQuery = FunctionScoreQuery.boostByValue(topQuery, boosts.get(0).asDoubleValuesSource());\n    }\n    \n    return topQuery;\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws SyntaxError {\n\n    parsed = true;\n    \n    /* the main query we will execute.  we disable the coord because\n     * this query is an artificial construct\n     */\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    \n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if( userQuery == null || userQuery.trim().length() == 0 ) {\n      // If no query is specified, we may have an alternate\n      if (config.altQ != null) {\n        QParser altQParser = subQuery(config.altQ, null);\n        altUserQuery = altQParser.getQuery();\n        query.add( altUserQuery , BooleanClause.Occur.MUST );\n      } else {\n        return null;\n        // throw new SyntaxError(\"missing query string\" );\n      }\n    } else {\n      // There is a valid query string\n      ExtendedSolrQueryParser up = createEdismaxQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n      up.addAlias(IMPOSSIBLE_FIELD_NAME, config.tiebreaker, config.queryFields);\n      addAliasesFromRequest(up, config.tiebreaker);\n      validateQueryFields(up);\n      up.setPhraseSlop(config.qslop);     // slop for explicit user phrase queries\n      up.setAllowLeadingWildcard(true);\n      up.setAllowSubQueryParsing(config.userFields.isAllowed(MagicFieldName.QUERY.field));\n      \n      // defer escaping and only do if lucene parsing fails, or we need phrases\n      // parsing fails.  Need to sloppy phrase queries anyway though.\n      List<Clause> clauses = splitIntoClauses(userQuery, false);\n      \n      // Always rebuild mainUserQuery from clauses to catch modifications from splitIntoClauses\n      // This was necessary for userFields modifications to get propagated into the query.\n      // Convert lower or mixed case operators to uppercase if we saw them.\n      // only do this for the lucene query part and not for phrase query boosting\n      // since some fields might not be case insensitive.\n      // We don't use a regex for this because it might change and AND or OR in\n      // a phrase query in a case sensitive field.\n      String mainUserQuery = rebuildUserQuery(clauses, config.lowercaseOperators);\n      \n      // but always for unstructured implicit bqs created by getFieldQuery\n      up.minShouldMatch = config.minShouldMatch;\n\n      up.setSplitOnWhitespace(config.splitOnWhitespace);\n      \n      parsedUserQuery = parseOriginalQuery(up, mainUserQuery, clauses, config);\n      \n      if (parsedUserQuery == null) {\n        parsedUserQuery = parseEscapedQuery(up, escapeUserQuery(clauses), config);\n      }\n      \n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n      \n      addPhraseFieldQueries(query, clauses, config);\n      \n    }\n    \n    /* * * Boosting Query * * */\n    boostQueries = getBoostQueries();\n    for(Query f : boostQueries) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    /* * * Boosting Functions * * */\n    List<Query> boostFunctions = getBoostFunctions();\n    for(Query f : boostFunctions) {\n      query.add(f, BooleanClause.Occur.SHOULD);\n    }\n    \n    //\n    // create a boosted query (scores multiplied by boosts)\n    //\n    Query topQuery = QueryUtils.build(query, this);\n    List<ValueSource> boosts = getMultiplicativeBoosts();\n    if (boosts.size()>1) {\n      ValueSource prod = new ProductFloatFunction(boosts.toArray(new ValueSource[boosts.size()]));\n      topQuery = FunctionScoreQuery.boostByValue(topQuery, prod.asDoubleValuesSource());\n    } else if (boosts.size() == 1) {\n      topQuery = FunctionScoreQuery.boostByValue(topQuery, boosts.get(0).asDoubleValuesSource());\n    }\n    \n    return topQuery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aed6b9dbf4e4cfb1a522030abd1f47bc053b9821":["c7e79e31f55cbb444e3023d430a340658755aa31"],"b94236357aaa22b76c10629851fe4e376e0cea82":["62f3efc82b1ead830448bb27e2af9f89417401ea","2d4a607d2b3ec6943d58f8ed873827c2552aee80"],"2d4a607d2b3ec6943d58f8ed873827c2552aee80":["62f3efc82b1ead830448bb27e2af9f89417401ea"],"39fdbc59d893f5a211736e861fe145798a40b9ff":["e55782fb51a6e9789542818eb2161a3247f39ace"],"cf9d6fd2b46a1c50382c5cef6be68fd0525946ff":["4d0ddc75fb2855fca36e3a81b86228b660cbf465"],"a91f19e3f7576973404e13b7ecfb8ae94f313921":["28288370235ed02234a64753cdbf0c6ec096304a"],"62f3efc82b1ead830448bb27e2af9f89417401ea":["4aee4980038a10791618ea04e79233ce5cbf6607"],"c03778630c4604270d88c148afb8c7de35b51d3c":["c8a0e442f7b61f811680273b25da95994a724466"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["c03778630c4604270d88c148afb8c7de35b51d3c","39fdbc59d893f5a211736e861fe145798a40b9ff"],"e55782fb51a6e9789542818eb2161a3247f39ace":["c8a0e442f7b61f811680273b25da95994a724466"],"28288370235ed02234a64753cdbf0c6ec096304a":["e55782fb51a6e9789542818eb2161a3247f39ace","39fdbc59d893f5a211736e861fe145798a40b9ff"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","c8a0e442f7b61f811680273b25da95994a724466"],"4d0ddc75fb2855fca36e3a81b86228b660cbf465":["b94236357aaa22b76c10629851fe4e376e0cea82"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["aed6b9dbf4e4cfb1a522030abd1f47bc053b9821"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4aee4980038a10791618ea04e79233ce5cbf6607":["28288370235ed02234a64753cdbf0c6ec096304a","a91f19e3f7576973404e13b7ecfb8ae94f313921"],"c8a0e442f7b61f811680273b25da95994a724466":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"c7e79e31f55cbb444e3023d430a340658755aa31":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7e79e31f55cbb444e3023d430a340658755aa31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf9d6fd2b46a1c50382c5cef6be68fd0525946ff"]},"commit2Childs":{"aed6b9dbf4e4cfb1a522030abd1f47bc053b9821":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"b94236357aaa22b76c10629851fe4e376e0cea82":["4d0ddc75fb2855fca36e3a81b86228b660cbf465"],"2d4a607d2b3ec6943d58f8ed873827c2552aee80":["b94236357aaa22b76c10629851fe4e376e0cea82"],"39fdbc59d893f5a211736e861fe145798a40b9ff":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"cf9d6fd2b46a1c50382c5cef6be68fd0525946ff":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a91f19e3f7576973404e13b7ecfb8ae94f313921":["4aee4980038a10791618ea04e79233ce5cbf6607"],"62f3efc82b1ead830448bb27e2af9f89417401ea":["b94236357aaa22b76c10629851fe4e376e0cea82","2d4a607d2b3ec6943d58f8ed873827c2552aee80"],"c03778630c4604270d88c148afb8c7de35b51d3c":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"e55782fb51a6e9789542818eb2161a3247f39ace":["39fdbc59d893f5a211736e861fe145798a40b9ff","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["a91f19e3f7576973404e13b7ecfb8ae94f313921","4aee4980038a10791618ea04e79233ce5cbf6607"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"4d0ddc75fb2855fca36e3a81b86228b660cbf465":["cf9d6fd2b46a1c50382c5cef6be68fd0525946ff"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","c8a0e442f7b61f811680273b25da95994a724466"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7e79e31f55cbb444e3023d430a340658755aa31","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"4aee4980038a10791618ea04e79233ce5cbf6607":["62f3efc82b1ead830448bb27e2af9f89417401ea"],"c8a0e442f7b61f811680273b25da95994a724466":["c03778630c4604270d88c148afb8c7de35b51d3c","e55782fb51a6e9789542818eb2161a3247f39ace","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c7e79e31f55cbb444e3023d430a340658755aa31":["aed6b9dbf4e4cfb1a522030abd1f47bc053b9821","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}