{"path":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShape#createIndexableFields(String,Line).mjava","commits":[{"id":"6345300cb90308ddf9579f7a7396a32d98795311","date":1533248257,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShape#createIndexableFields(String,Line).mjava","pathOld":"/dev/null","sourceNew":"  /** create indexable fields for line geometry */\n  public static Field[] createIndexableFields(String fieldName, Line line) {\n    int numPoints = line.numPoints();\n    List<LatLonTriangle> fields = new ArrayList<>(numPoints - 1);\n\n    // encode the line vertices\n    int[] encodedLats = new int[numPoints];\n    int[] encodedLons = new int[numPoints];\n    for (int i = 0; i < numPoints; ++i) {\n      encodedLats[i] = encodeLatitude(line.getLat(i));\n      encodedLons[i] = encodeLongitude(line.getLon(i));\n    }\n\n    // create \"flat\" triangles\n    int aLat, bLat, aLon, bLon, temp;\n    for (int i = 0, j = 1; j < numPoints; ++i, ++j) {\n      aLat = encodedLats[i];\n      aLon = encodedLons[i];\n      bLat = encodedLats[j];\n      bLon = encodedLons[j];\n      if (aLat > bLat) {\n        temp = aLat;\n        aLat = bLat;\n        bLat = temp;\n        temp = aLon;\n        aLon = bLon;\n        bLon = temp;\n      } else if (aLat == bLat) {\n        if (aLon > bLon) {\n          temp = aLat;\n          aLat = bLat;\n          bLat = temp;\n          temp = aLon;\n          aLon = bLon;\n          bLon = temp;\n        }\n      }\n      fields.add(new LatLonTriangle(fieldName, aLon, aLat, bLon, bLat, aLon, aLat));\n    }\n    return fields.toArray(new Field[fields.size()]);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e48f589a9604e11db23a025a27efbf3d14ab4e3b","date":1539887418,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShape#createIndexableFields(String,Line).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShape#createIndexableFields(String,Line).mjava","sourceNew":"  /** create indexable fields for line geometry */\n  public static Field[] createIndexableFields(String fieldName, Line line) {\n    int numPoints = line.numPoints();\n    List<LatLonTriangle> fields = new ArrayList<>(numPoints - 1);\n\n    // create \"flat\" triangles\n    double aLat, bLat, aLon, bLon, temp;\n    double size;\n    for (int i = 0, j = 1; j < numPoints; ++i, ++j) {\n      aLat = line.getLat(i);\n      aLon = line.getLon(i);\n      bLat = line.getLat(j);\n      bLon = line.getLon(j);\n      if (aLat > bLat) {\n        temp = aLat;\n        aLat = bLat;\n        bLat = temp;\n        temp = aLon;\n        aLon = bLon;\n        bLon = temp;\n      } else if (aLat == bLat) {\n        if (aLon > bLon) {\n          temp = aLat;\n          aLat = bLat;\n          bLat = temp;\n          temp = aLon;\n          aLon = bLon;\n          bLon = temp;\n        }\n      }\n      size = StrictMath.sqrt(StrictMath.pow(aLat - bLat, 2d) + StrictMath.pow(aLon - bLon, 2d));\n      fields.add(new LatLonTriangle(fieldName, aLat, aLon, bLat, bLon, aLat, aLon, size));\n    }\n    return fields.toArray(new Field[fields.size()]);\n  }\n\n","sourceOld":"  /** create indexable fields for line geometry */\n  public static Field[] createIndexableFields(String fieldName, Line line) {\n    int numPoints = line.numPoints();\n    List<LatLonTriangle> fields = new ArrayList<>(numPoints - 1);\n\n    // encode the line vertices\n    int[] encodedLats = new int[numPoints];\n    int[] encodedLons = new int[numPoints];\n    for (int i = 0; i < numPoints; ++i) {\n      encodedLats[i] = encodeLatitude(line.getLat(i));\n      encodedLons[i] = encodeLongitude(line.getLon(i));\n    }\n\n    // create \"flat\" triangles\n    int aLat, bLat, aLon, bLon, temp;\n    for (int i = 0, j = 1; j < numPoints; ++i, ++j) {\n      aLat = encodedLats[i];\n      aLon = encodedLons[i];\n      bLat = encodedLats[j];\n      bLon = encodedLons[j];\n      if (aLat > bLat) {\n        temp = aLat;\n        aLat = bLat;\n        bLat = temp;\n        temp = aLon;\n        aLon = bLon;\n        bLon = temp;\n      } else if (aLat == bLat) {\n        if (aLon > bLon) {\n          temp = aLat;\n          aLat = bLat;\n          bLat = temp;\n          temp = aLon;\n          aLon = bLon;\n          bLon = temp;\n        }\n      }\n      fields.add(new LatLonTriangle(fieldName, aLon, aLat, bLon, bLat, aLon, aLat));\n    }\n    return fields.toArray(new Field[fields.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24491e12b0e85893eccafcbaef34f087deedb9f5","date":1541174782,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShape#createIndexableFields(String,Line).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShape#createIndexableFields(String,Line).mjava","sourceNew":"  /** create indexable fields for line geometry */\n  public static Field[] createIndexableFields(String fieldName, Line line) {\n    int numPoints = line.numPoints();\n    List<LatLonTriangle> fields = new ArrayList<>(numPoints - 1);\n\n    // create \"flat\" triangles\n    double aLat, bLat, aLon, bLon, temp;\n    for (int i = 0, j = 1; j < numPoints; ++i, ++j) {\n      aLat = line.getLat(i);\n      aLon = line.getLon(i);\n      bLat = line.getLat(j);\n      bLon = line.getLon(j);\n      if (aLat > bLat) {\n        temp = aLat;\n        aLat = bLat;\n        bLat = temp;\n        temp = aLon;\n        aLon = bLon;\n        bLon = temp;\n      } else if (aLat == bLat) {\n        if (aLon > bLon) {\n          temp = aLat;\n          aLat = bLat;\n          bLat = temp;\n          temp = aLon;\n          aLon = bLon;\n          bLon = temp;\n        }\n      }\n      fields.add(new LatLonTriangle(fieldName, aLat, aLon, bLat, bLon, aLat, aLon));\n    }\n    return fields.toArray(new Field[fields.size()]);\n  }\n\n","sourceOld":"  /** create indexable fields for line geometry */\n  public static Field[] createIndexableFields(String fieldName, Line line) {\n    int numPoints = line.numPoints();\n    List<LatLonTriangle> fields = new ArrayList<>(numPoints - 1);\n\n    // create \"flat\" triangles\n    double aLat, bLat, aLon, bLon, temp;\n    double size;\n    for (int i = 0, j = 1; j < numPoints; ++i, ++j) {\n      aLat = line.getLat(i);\n      aLon = line.getLon(i);\n      bLat = line.getLat(j);\n      bLon = line.getLon(j);\n      if (aLat > bLat) {\n        temp = aLat;\n        aLat = bLat;\n        bLat = temp;\n        temp = aLon;\n        aLon = bLon;\n        bLon = temp;\n      } else if (aLat == bLat) {\n        if (aLon > bLon) {\n          temp = aLat;\n          aLat = bLat;\n          bLat = temp;\n          temp = aLon;\n          aLon = bLon;\n          bLon = temp;\n        }\n      }\n      size = StrictMath.sqrt(StrictMath.pow(aLat - bLat, 2d) + StrictMath.pow(aLon - bLon, 2d));\n      fields.add(new LatLonTriangle(fieldName, aLat, aLon, bLat, bLon, aLat, aLon, size));\n    }\n    return fields.toArray(new Field[fields.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2aeefba8262036d422d639e48c49d51316bea138","date":1545148224,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShape#createIndexableFields(String,Line).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShape#createIndexableFields(String,Line).mjava","sourceNew":"  /** create indexable fields for line geometry */\n  public static Field[] createIndexableFields(String fieldName, Line line) {\n    int numPoints = line.numPoints();\n    Field[] fields = new Field[numPoints - 1];\n    // create \"flat\" triangles\n    for (int i = 0, j = 1; j < numPoints; ++i, ++j) {\n      fields[i] = new LatLonTriangle(fieldName, line.getLat(i), line.getLon(i), line.getLat(j), line.getLon(j), line.getLat(i), line.getLon(i));\n    }\n    return fields;\n  }\n\n","sourceOld":"  /** create indexable fields for line geometry */\n  public static Field[] createIndexableFields(String fieldName, Line line) {\n    int numPoints = line.numPoints();\n    List<LatLonTriangle> fields = new ArrayList<>(numPoints - 1);\n\n    // create \"flat\" triangles\n    double aLat, bLat, aLon, bLon, temp;\n    for (int i = 0, j = 1; j < numPoints; ++i, ++j) {\n      aLat = line.getLat(i);\n      aLon = line.getLon(i);\n      bLat = line.getLat(j);\n      bLon = line.getLon(j);\n      if (aLat > bLat) {\n        temp = aLat;\n        aLat = bLat;\n        bLat = temp;\n        temp = aLon;\n        aLon = bLon;\n        bLon = temp;\n      } else if (aLat == bLat) {\n        if (aLon > bLon) {\n          temp = aLat;\n          aLat = bLat;\n          bLat = temp;\n          temp = aLon;\n          aLon = bLon;\n          bLon = temp;\n        }\n      }\n      fields.add(new LatLonTriangle(fieldName, aLat, aLon, bLat, bLon, aLat, aLon));\n    }\n    return fields.toArray(new Field[fields.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c286b0d8c507a88b289407e2fe161effa275c6b0","date":1562615977,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShape#createIndexableFields(String,Line).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShape#createIndexableFields(String,Line).mjava","sourceNew":"  /** create indexable fields for line geometry */\n  public static Field[] createIndexableFields(String fieldName, Line line) {\n    int numPoints = line.numPoints();\n    Field[] fields = new Field[numPoints - 1];\n    // create \"flat\" triangles\n    for (int i = 0, j = 1; j < numPoints; ++i, ++j) {\n      fields[i] = new Triangle(fieldName,\n          encodeLongitude(line.getLon(i)), encodeLatitude(line.getLat(i)),\n          encodeLongitude(line.getLon(j)), encodeLatitude(line.getLat(j)),\n          encodeLongitude(line.getLon(i)), encodeLatitude(line.getLat(i)));\n    }\n    return fields;\n  }\n\n","sourceOld":"  /** create indexable fields for line geometry */\n  public static Field[] createIndexableFields(String fieldName, Line line) {\n    int numPoints = line.numPoints();\n    Field[] fields = new Field[numPoints - 1];\n    // create \"flat\" triangles\n    for (int i = 0, j = 1; j < numPoints; ++i, ++j) {\n      fields[i] = new LatLonTriangle(fieldName, line.getLat(i), line.getLon(i), line.getLat(j), line.getLon(j), line.getLat(i), line.getLon(i));\n    }\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LatLonShape#createIndexableFields(String,Line).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShape#createIndexableFields(String,Line).mjava","sourceNew":"  /** create indexable fields for line geometry */\n  public static Field[] createIndexableFields(String fieldName, Line line) {\n    int numPoints = line.numPoints();\n    Field[] fields = new Field[numPoints - 1];\n    // create \"flat\" triangles\n    for (int i = 0, j = 1; j < numPoints; ++i, ++j) {\n      fields[i] = new Triangle(fieldName,\n          encodeLongitude(line.getLon(i)), encodeLatitude(line.getLat(i)),\n          encodeLongitude(line.getLon(j)), encodeLatitude(line.getLat(j)),\n          encodeLongitude(line.getLon(i)), encodeLatitude(line.getLat(i)));\n    }\n    return fields;\n  }\n\n","sourceOld":"  /** create indexable fields for line geometry */\n  public static Field[] createIndexableFields(String fieldName, Line line) {\n    int numPoints = line.numPoints();\n    Field[] fields = new Field[numPoints - 1];\n    // create \"flat\" triangles\n    for (int i = 0, j = 1; j < numPoints; ++i, ++j) {\n      fields[i] = new Triangle(fieldName,\n          encodeLongitude(line.getLon(i)), encodeLatitude(line.getLat(i)),\n          encodeLongitude(line.getLon(j)), encodeLatitude(line.getLat(j)),\n          encodeLongitude(line.getLon(i)), encodeLatitude(line.getLat(i)));\n    }\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e48f589a9604e11db23a025a27efbf3d14ab4e3b":["6345300cb90308ddf9579f7a7396a32d98795311"],"2aeefba8262036d422d639e48c49d51316bea138":["24491e12b0e85893eccafcbaef34f087deedb9f5"],"24491e12b0e85893eccafcbaef34f087deedb9f5":["e48f589a9604e11db23a025a27efbf3d14ab4e3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["2aeefba8262036d422d639e48c49d51316bea138"],"6345300cb90308ddf9579f7a7396a32d98795311":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"]},"commit2Childs":{"e48f589a9604e11db23a025a27efbf3d14ab4e3b":["24491e12b0e85893eccafcbaef34f087deedb9f5"],"2aeefba8262036d422d639e48c49d51316bea138":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"24491e12b0e85893eccafcbaef34f087deedb9f5":["2aeefba8262036d422d639e48c49d51316bea138"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6345300cb90308ddf9579f7a7396a32d98795311"],"6345300cb90308ddf9579f7a7396a32d98795311":["e48f589a9604e11db23a025a27efbf3d14ab4e3b"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}