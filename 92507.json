{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEnsureMaxSeqNoIsAccurateDuringFlush().mjava","commits":[{"id":"b07024a7318c25225dc4d070cf6d047315b73aaf","date":1586885963,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEnsureMaxSeqNoIsAccurateDuringFlush().mjava","pathOld":"/dev/null","sourceNew":"  public void testEnsureMaxSeqNoIsAccurateDuringFlush() throws IOException, InterruptedException {\n    AtomicReference<CountDownLatch> waitRef = new AtomicReference<>(new CountDownLatch(0));\n    AtomicReference<CountDownLatch> arrivedRef = new AtomicReference<>(new CountDownLatch(0));\n    InfoStream stream = new InfoStream() {\n      @Override\n      public void message(String component, String message) {\n        if (\"TP\".equals(component) && \"DocumentsWriterPerThread addDocuments start\".equals(message)) {\n          try {\n            arrivedRef.get().countDown();\n            waitRef.get().await();\n          } catch (InterruptedException e) {\n            throw new AssertionError(e);\n          }\n        }\n      }\n\n      @Override\n      public boolean isEnabled(String component) {\n        return \"TP\".equals(component);\n      }\n\n      @Override\n      public void close() throws IOException {\n      }\n    };\n    IndexWriterConfig indexWriterConfig = newIndexWriterConfig();\n    indexWriterConfig.setInfoStream(stream);\n    try (Directory dir = newDirectory();\n         IndexWriter writer = new IndexWriter(dir, indexWriterConfig) {\n           @Override\n           protected boolean isEnableTestPoints() {\n             return true;\n           }\n         }) {\n      // we produce once DWPT with 1 doc\n      writer.addDocument(new Document());\n      assertEquals(1, writer.docWriter.perThreadPool.size());\n      long maxCompletedSequenceNumber = writer.getMaxCompletedSequenceNumber();\n      // safe the seqNo and use the latches to block this DWPT such that a refresh must wait for it\n      waitRef.set(new CountDownLatch(1));\n      arrivedRef.set(new CountDownLatch(1));\n      Thread waiterThread = new Thread(() -> {\n        try {\n          writer.addDocument(new Document());\n        } catch (IOException e) {\n          throw new AssertionError(e);\n        }\n      });\n      waiterThread.start();\n      arrivedRef.get().await();\n      Thread refreshThread = new Thread(() -> {\n        try {\n          writer.getReader().close();\n        } catch (IOException e) {\n          throw new AssertionError(e);\n        }\n      });\n      DocumentsWriterDeleteQueue deleteQueue = writer.docWriter.deleteQueue;\n      refreshThread.start();\n      // now we wait until the refresh has swapped the deleted queue and assert that\n      // we see an accurate seqId\n      while (writer.docWriter.deleteQueue == deleteQueue) {\n        Thread.yield(); // busy wait for refresh to swap the queue\n      }\n      try {\n        assertEquals(maxCompletedSequenceNumber, writer.getMaxCompletedSequenceNumber());\n      } finally {\n        waitRef.get().countDown();\n        waiterThread.join();\n        refreshThread.join();\n      }\n      assertEquals(maxCompletedSequenceNumber+2, writer.getMaxCompletedSequenceNumber());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b07024a7318c25225dc4d070cf6d047315b73aaf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b07024a7318c25225dc4d070cf6d047315b73aaf"]},"commit2Childs":{"b07024a7318c25225dc4d070cf6d047315b73aaf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b07024a7318c25225dc4d070cf6d047315b73aaf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}