{"path":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArraySet#testSingleHighSurrogate().mjava","commits":[{"id":"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","date":1465936684,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArraySet#testSingleHighSurrogate().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testSingleHighSurrogate().mjava","sourceNew":"  public void testSingleHighSurrogate() {\n    String missing = \"Term %s is missing in the set\";\n    String falsePos = \"Term %s is in the set but shouldn't\";\n    String[] upperArr = new String[] { \"ABC\\uD800\", \"ABC\\uD800EfG\",\n        \"\\uD800EfG\", \"\\uD800\\ud801\\udc1cB\" };\n\n    String[] lowerArr = new String[] { \"abc\\uD800\", \"abc\\uD800efg\",\n        \"\\uD800efg\", \"\\uD800\\ud801\\udc44b\" };\n    CharArraySet set = new CharArraySet(Arrays\n        .asList(TEST_STOP_WORDS), true);\n    for (String upper : upperArr) {\n      set.add(upper);\n    }\n    for (int i = 0; i < upperArr.length; i++) {\n      assertTrue(String.format(Locale.ROOT, missing, upperArr[i]), set.contains(upperArr[i]));\n      assertTrue(String.format(Locale.ROOT, missing, lowerArr[i]), set.contains(lowerArr[i]));\n    }\n    set = new CharArraySet(Arrays.asList(TEST_STOP_WORDS),\n        false);\n    for (String upper : upperArr) {\n      set.add(upper);\n    }\n    for (int i = 0; i < upperArr.length; i++) {\n      assertTrue(String.format(Locale.ROOT, missing, upperArr[i]), set.contains(upperArr[i]));\n      assertFalse(String.format(Locale.ROOT, falsePos, upperArr[i]), set\n          .contains(lowerArr[i]));\n    }\n  }\n\n","sourceOld":"  public void testSingleHighSurrogate() {\n    String missing = \"Term %s is missing in the set\";\n    String falsePos = \"Term %s is in the set but shouldn't\";\n    String[] upperArr = new String[] { \"ABC\\uD800\", \"ABC\\uD800EfG\",\n        \"\\uD800EfG\", \"\\uD800\\ud801\\udc1cB\" };\n\n    String[] lowerArr = new String[] { \"abc\\uD800\", \"abc\\uD800efg\",\n        \"\\uD800efg\", \"\\uD800\\ud801\\udc44b\" };\n    CharArraySet set = new CharArraySet(Arrays\n        .asList(TEST_STOP_WORDS), true);\n    for (String upper : upperArr) {\n      set.add(upper);\n    }\n    for (int i = 0; i < upperArr.length; i++) {\n      assertTrue(String.format(Locale.ROOT, missing, upperArr[i]), set.contains(upperArr[i]));\n      assertTrue(String.format(Locale.ROOT, missing, lowerArr[i]), set.contains(lowerArr[i]));\n    }\n    set = new CharArraySet(Arrays.asList(TEST_STOP_WORDS),\n        false);\n    for (String upper : upperArr) {\n      set.add(upper);\n    }\n    for (int i = 0; i < upperArr.length; i++) {\n      assertTrue(String.format(Locale.ROOT, missing, upperArr[i]), set.contains(upperArr[i]));\n      assertFalse(String.format(Locale.ROOT, falsePos, upperArr[i]), set\n          .contains(lowerArr[i]));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArraySet#testSingleHighSurrogate().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testSingleHighSurrogate().mjava","sourceNew":"  public void testSingleHighSurrogate() {\n    String missing = \"Term %s is missing in the set\";\n    String falsePos = \"Term %s is in the set but shouldn't\";\n    String[] upperArr = new String[] { \"ABC\\uD800\", \"ABC\\uD800EfG\",\n        \"\\uD800EfG\", \"\\uD800\\ud801\\udc1cB\" };\n\n    String[] lowerArr = new String[] { \"abc\\uD800\", \"abc\\uD800efg\",\n        \"\\uD800efg\", \"\\uD800\\ud801\\udc44b\" };\n    CharArraySet set = new CharArraySet(Arrays\n        .asList(TEST_STOP_WORDS), true);\n    for (String upper : upperArr) {\n      set.add(upper);\n    }\n    for (int i = 0; i < upperArr.length; i++) {\n      assertTrue(String.format(Locale.ROOT, missing, upperArr[i]), set.contains(upperArr[i]));\n      assertTrue(String.format(Locale.ROOT, missing, lowerArr[i]), set.contains(lowerArr[i]));\n    }\n    set = new CharArraySet(Arrays.asList(TEST_STOP_WORDS),\n        false);\n    for (String upper : upperArr) {\n      set.add(upper);\n    }\n    for (int i = 0; i < upperArr.length; i++) {\n      assertTrue(String.format(Locale.ROOT, missing, upperArr[i]), set.contains(upperArr[i]));\n      assertFalse(String.format(Locale.ROOT, falsePos, upperArr[i]), set\n          .contains(lowerArr[i]));\n    }\n  }\n\n","sourceOld":"  public void testSingleHighSurrogate() {\n    String missing = \"Term %s is missing in the set\";\n    String falsePos = \"Term %s is in the set but shouldn't\";\n    String[] upperArr = new String[] { \"ABC\\uD800\", \"ABC\\uD800EfG\",\n        \"\\uD800EfG\", \"\\uD800\\ud801\\udc1cB\" };\n\n    String[] lowerArr = new String[] { \"abc\\uD800\", \"abc\\uD800efg\",\n        \"\\uD800efg\", \"\\uD800\\ud801\\udc44b\" };\n    CharArraySet set = new CharArraySet(Arrays\n        .asList(TEST_STOP_WORDS), true);\n    for (String upper : upperArr) {\n      set.add(upper);\n    }\n    for (int i = 0; i < upperArr.length; i++) {\n      assertTrue(String.format(Locale.ROOT, missing, upperArr[i]), set.contains(upperArr[i]));\n      assertTrue(String.format(Locale.ROOT, missing, lowerArr[i]), set.contains(lowerArr[i]));\n    }\n    set = new CharArraySet(Arrays.asList(TEST_STOP_WORDS),\n        false);\n    for (String upper : upperArr) {\n      set.add(upper);\n    }\n    for (int i = 0; i < upperArr.length; i++) {\n      assertTrue(String.format(Locale.ROOT, missing, upperArr[i]), set.contains(upperArr[i]));\n      assertFalse(String.format(Locale.ROOT, falsePos, upperArr[i]), set\n          .contains(lowerArr[i]));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}