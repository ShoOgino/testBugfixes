{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer#toString(Reader).mjava","commits":[{"id":"0d8c222875ac4ef7e08f3e25d40508b821d711ff","date":1257374221,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer#toString(Reader).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/PatternAnalyzer#toString(Reader).mjava","sourceNew":"  /**\n   * Reads until end-of-stream and returns all read chars, finally closes the stream.\n   * \n   * @param input the input stream\n   * @throws IOException if an I/O error occurs while reading the stream\n   */\n  private static String toString(Reader input) throws IOException {\n    try {\n      int len = 256;\n      char[] buffer = new char[len];\n      char[] output = new char[len];\n      \n      len = 0;\n      int n;\n      while ((n = input.read(buffer)) >= 0) {\n        if (len + n > output.length) { // grow capacity\n          char[] tmp = new char[Math.max(output.length << 1, len + n)];\n          System.arraycopy(output, 0, tmp, 0, len);\n          System.arraycopy(buffer, 0, tmp, len, n);\n          buffer = output; // use larger buffer for future larger bulk reads\n          output = tmp;\n        } else {\n          System.arraycopy(buffer, 0, output, len, n);\n        }\n        len += n;\n      }\n\n      return new String(output, 0, len);\n    } finally {\n      if (input != null) input.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Reads until end-of-stream and returns all read chars, finally closes the stream.\n   * \n   * @param input the input stream\n   * @throws IOException if an I/O error occurs while reading the stream\n   */\n  private static String toString(Reader input) throws IOException {\n    try {\n      int len = 256;\n      char[] buffer = new char[len];\n      char[] output = new char[len];\n      \n      len = 0;\n      int n;\n      while ((n = input.read(buffer)) >= 0) {\n        if (len + n > output.length) { // grow capacity\n          char[] tmp = new char[Math.max(output.length << 1, len + n)];\n          System.arraycopy(output, 0, tmp, 0, len);\n          System.arraycopy(buffer, 0, tmp, len, n);\n          buffer = output; // use larger buffer for future larger bulk reads\n          output = tmp;\n        } else {\n          System.arraycopy(buffer, 0, output, len, n);\n        }\n        len += n;\n      }\n\n      return new String(output, 0, len);\n    } finally {\n      if (input != null) input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer#toString(Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer#toString(Reader).mjava","sourceNew":"  /**\n   * Reads until end-of-stream and returns all read chars, finally closes the stream.\n   * \n   * @param input the input stream\n   * @throws IOException if an I/O error occurs while reading the stream\n   */\n  private static String toString(Reader input) throws IOException {\n    try {\n      int len = 256;\n      char[] buffer = new char[len];\n      char[] output = new char[len];\n      \n      len = 0;\n      int n;\n      while ((n = input.read(buffer)) >= 0) {\n        if (len + n > output.length) { // grow capacity\n          char[] tmp = new char[Math.max(output.length << 1, len + n)];\n          System.arraycopy(output, 0, tmp, 0, len);\n          System.arraycopy(buffer, 0, tmp, len, n);\n          buffer = output; // use larger buffer for future larger bulk reads\n          output = tmp;\n        } else {\n          System.arraycopy(buffer, 0, output, len, n);\n        }\n        len += n;\n      }\n\n      return new String(output, 0, len);\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Reads until end-of-stream and returns all read chars, finally closes the stream.\n   * \n   * @param input the input stream\n   * @throws IOException if an I/O error occurs while reading the stream\n   */\n  private static String toString(Reader input) throws IOException {\n    try {\n      int len = 256;\n      char[] buffer = new char[len];\n      char[] output = new char[len];\n      \n      len = 0;\n      int n;\n      while ((n = input.read(buffer)) >= 0) {\n        if (len + n > output.length) { // grow capacity\n          char[] tmp = new char[Math.max(output.length << 1, len + n)];\n          System.arraycopy(output, 0, tmp, 0, len);\n          System.arraycopy(buffer, 0, tmp, len, n);\n          buffer = output; // use larger buffer for future larger bulk reads\n          output = tmp;\n        } else {\n          System.arraycopy(buffer, 0, output, len, n);\n        }\n        len += n;\n      }\n\n      return new String(output, 0, len);\n    } finally {\n      if (input != null) input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer#toString(Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer#toString(Reader).mjava","sourceNew":"  /**\n   * Reads until end-of-stream and returns all read chars, finally closes the stream.\n   * \n   * @param input the input stream\n   * @throws IOException if an I/O error occurs while reading the stream\n   */\n  private static String toString(Reader input) throws IOException {\n    try {\n      int len = 256;\n      char[] buffer = new char[len];\n      char[] output = new char[len];\n      \n      len = 0;\n      int n;\n      while ((n = input.read(buffer)) >= 0) {\n        if (len + n > output.length) { // grow capacity\n          char[] tmp = new char[Math.max(output.length << 1, len + n)];\n          System.arraycopy(output, 0, tmp, 0, len);\n          System.arraycopy(buffer, 0, tmp, len, n);\n          buffer = output; // use larger buffer for future larger bulk reads\n          output = tmp;\n        } else {\n          System.arraycopy(buffer, 0, output, len, n);\n        }\n        len += n;\n      }\n\n      return new String(output, 0, len);\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Reads until end-of-stream and returns all read chars, finally closes the stream.\n   * \n   * @param input the input stream\n   * @throws IOException if an I/O error occurs while reading the stream\n   */\n  private static String toString(Reader input) throws IOException {\n    try {\n      int len = 256;\n      char[] buffer = new char[len];\n      char[] output = new char[len];\n      \n      len = 0;\n      int n;\n      while ((n = input.read(buffer)) >= 0) {\n        if (len + n > output.length) { // grow capacity\n          char[] tmp = new char[Math.max(output.length << 1, len + n)];\n          System.arraycopy(output, 0, tmp, 0, len);\n          System.arraycopy(buffer, 0, tmp, len, n);\n          buffer = output; // use larger buffer for future larger bulk reads\n          output = tmp;\n        } else {\n          System.arraycopy(buffer, 0, output, len, n);\n        }\n        len += n;\n      }\n\n      return new String(output, 0, len);\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d8c222875ac4ef7e08f3e25d40508b821d711ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["0d8c222875ac4ef7e08f3e25d40508b821d711ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"0d8c222875ac4ef7e08f3e25d40508b821d711ff":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d8c222875ac4ef7e08f3e25d40508b821d711ff"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}