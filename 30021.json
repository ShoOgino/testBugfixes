{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosReader#getDocValuesTypeFake(byte).mjava","commits":[{"id":"1af57d1da0dceaad2640da652698505d6a621ce5","date":1358285398,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosReader#getDocValuesTypeFake(byte).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosReader#getDocValuesType(byte).mjava","sourceNew":"  private static DocValuesType getDocValuesTypeFake(byte b) {\n    if (b == 0) {\n      return null;\n    } else if (b == 1) {\n      return DocValuesType.NUMERIC;\n    } else if (b == 2) {\n      return DocValuesType.BINARY;\n    } else if (b == 3) {\n      return DocValuesType.SORTED;\n    } else {\n      throw new AssertionError();\n    }\n  }\n/*\n  private static DocValues.Type getDocValuesType(final byte b) {\n    switch(b) {\n      case 0:\n        return null;\n      case 1:\n        return DocValues.Type.VAR_INTS;\n      case 2:\n        return DocValues.Type.FLOAT_32;\n      case 3:\n        return DocValues.Type.FLOAT_64;\n      case 4:\n        return DocValues.Type.BYTES_FIXED_STRAIGHT;\n      case 5:\n        return DocValues.Type.BYTES_FIXED_DEREF;\n      case 6:\n        return DocValues.Type.BYTES_VAR_STRAIGHT;\n      case 7:\n        return DocValues.Type.BYTES_VAR_DEREF;\n      case 8:\n        return DocValues.Type.FIXED_INTS_16;\n      case 9:\n        return DocValues.Type.FIXED_INTS_32;\n      case 10:\n        return DocValues.Type.FIXED_INTS_64;\n      case 11:\n        return DocValues.Type.FIXED_INTS_8;\n      case 12:\n        return DocValues.Type.BYTES_FIXED_SORTED;\n      case 13:\n        return DocValues.Type.BYTES_VAR_SORTED;\n      default:\n        throw new IllegalStateException(\"unhandled indexValues type \" + b);\n    }\n  }*/\n\n","sourceOld":"  private static DocValues.Type getDocValuesType(final byte b) {\n    switch(b) {\n      case 0:\n        return null;\n      case 1:\n        return DocValues.Type.VAR_INTS;\n      case 2:\n        return DocValues.Type.FLOAT_32;\n      case 3:\n        return DocValues.Type.FLOAT_64;\n      case 4:\n        return DocValues.Type.BYTES_FIXED_STRAIGHT;\n      case 5:\n        return DocValues.Type.BYTES_FIXED_DEREF;\n      case 6:\n        return DocValues.Type.BYTES_VAR_STRAIGHT;\n      case 7:\n        return DocValues.Type.BYTES_VAR_DEREF;\n      case 8:\n        return DocValues.Type.FIXED_INTS_16;\n      case 9:\n        return DocValues.Type.FIXED_INTS_32;\n      case 10:\n        return DocValues.Type.FIXED_INTS_64;\n      case 11:\n        return DocValues.Type.FIXED_INTS_8;\n      case 12:\n        return DocValues.Type.BYTES_FIXED_SORTED;\n      case 13:\n        return DocValues.Type.BYTES_VAR_SORTED;\n      default:\n        throw new IllegalStateException(\"unhandled indexValues type \" + b);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e4c8573e7baf60b3f39be994bd2f2c36385d03b","date":1358869567,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosReader#getDocValuesTypeFake(byte).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosReader#getDocValuesTypeFake(byte).mjava","sourceNew":"  // nocommit: this is not actually how 4.0 was encoded\n  private static DocValuesType getDocValuesTypeFake(byte b) {\n    if (b == 0) {\n      return null;\n    } else if (b == 1) {\n      return DocValuesType.NUMERIC;\n    } else if (b == 2) {\n      return DocValuesType.BINARY;\n    } else if (b == 3) {\n      return DocValuesType.SORTED;\n    } else {\n      throw new AssertionError();\n    }\n  }\n/*\n  private static DocValues.Type getDocValuesType(final byte b) {\n    switch(b) {\n      case 0:\n        return null;\n      case 1:\n        return DocValues.Type.VAR_INTS;\n      case 2:\n        return DocValues.Type.FLOAT_32;\n      case 3:\n        return DocValues.Type.FLOAT_64;\n      case 4:\n        return DocValues.Type.BYTES_FIXED_STRAIGHT;\n      case 5:\n        return DocValues.Type.BYTES_FIXED_DEREF;\n      case 6:\n        return DocValues.Type.BYTES_VAR_STRAIGHT;\n      case 7:\n        return DocValues.Type.BYTES_VAR_DEREF;\n      case 8:\n        return DocValues.Type.FIXED_INTS_16;\n      case 9:\n        return DocValues.Type.FIXED_INTS_32;\n      case 10:\n        return DocValues.Type.FIXED_INTS_64;\n      case 11:\n        return DocValues.Type.FIXED_INTS_8;\n      case 12:\n        return DocValues.Type.BYTES_FIXED_SORTED;\n      case 13:\n        return DocValues.Type.BYTES_VAR_SORTED;\n      default:\n        throw new IllegalStateException(\"unhandled indexValues type \" + b);\n    }\n  }*/\n\n","sourceOld":"  private static DocValuesType getDocValuesTypeFake(byte b) {\n    if (b == 0) {\n      return null;\n    } else if (b == 1) {\n      return DocValuesType.NUMERIC;\n    } else if (b == 2) {\n      return DocValuesType.BINARY;\n    } else if (b == 3) {\n      return DocValuesType.SORTED;\n    } else {\n      throw new AssertionError();\n    }\n  }\n/*\n  private static DocValues.Type getDocValuesType(final byte b) {\n    switch(b) {\n      case 0:\n        return null;\n      case 1:\n        return DocValues.Type.VAR_INTS;\n      case 2:\n        return DocValues.Type.FLOAT_32;\n      case 3:\n        return DocValues.Type.FLOAT_64;\n      case 4:\n        return DocValues.Type.BYTES_FIXED_STRAIGHT;\n      case 5:\n        return DocValues.Type.BYTES_FIXED_DEREF;\n      case 6:\n        return DocValues.Type.BYTES_VAR_STRAIGHT;\n      case 7:\n        return DocValues.Type.BYTES_VAR_DEREF;\n      case 8:\n        return DocValues.Type.FIXED_INTS_16;\n      case 9:\n        return DocValues.Type.FIXED_INTS_32;\n      case 10:\n        return DocValues.Type.FIXED_INTS_64;\n      case 11:\n        return DocValues.Type.FIXED_INTS_8;\n      case 12:\n        return DocValues.Type.BYTES_FIXED_SORTED;\n      case 13:\n        return DocValues.Type.BYTES_VAR_SORTED;\n      default:\n        throw new IllegalStateException(\"unhandled indexValues type \" + b);\n    }\n  }*/\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a061a4d303d4aee0918ec2e41c078d900ec23f6","date":1358896586,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosReader#getDocValuesTypeFake(byte).mjava","sourceNew":null,"sourceOld":"  // nocommit: this is not actually how 4.0 was encoded\n  private static DocValuesType getDocValuesTypeFake(byte b) {\n    if (b == 0) {\n      return null;\n    } else if (b == 1) {\n      return DocValuesType.NUMERIC;\n    } else if (b == 2) {\n      return DocValuesType.BINARY;\n    } else if (b == 3) {\n      return DocValuesType.SORTED;\n    } else {\n      throw new AssertionError();\n    }\n  }\n/*\n  private static DocValues.Type getDocValuesType(final byte b) {\n    switch(b) {\n      case 0:\n        return null;\n      case 1:\n        return DocValues.Type.VAR_INTS;\n      case 2:\n        return DocValues.Type.FLOAT_32;\n      case 3:\n        return DocValues.Type.FLOAT_64;\n      case 4:\n        return DocValues.Type.BYTES_FIXED_STRAIGHT;\n      case 5:\n        return DocValues.Type.BYTES_FIXED_DEREF;\n      case 6:\n        return DocValues.Type.BYTES_VAR_STRAIGHT;\n      case 7:\n        return DocValues.Type.BYTES_VAR_DEREF;\n      case 8:\n        return DocValues.Type.FIXED_INTS_16;\n      case 9:\n        return DocValues.Type.FIXED_INTS_32;\n      case 10:\n        return DocValues.Type.FIXED_INTS_64;\n      case 11:\n        return DocValues.Type.FIXED_INTS_8;\n      case 12:\n        return DocValues.Type.BYTES_FIXED_SORTED;\n      case 13:\n        return DocValues.Type.BYTES_VAR_SORTED;\n      default:\n        throw new IllegalStateException(\"unhandled indexValues type \" + b);\n    }\n  }*/\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1af57d1da0dceaad2640da652698505d6a621ce5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4e4c8573e7baf60b3f39be994bd2f2c36385d03b":["1af57d1da0dceaad2640da652698505d6a621ce5"],"3a061a4d303d4aee0918ec2e41c078d900ec23f6":["4e4c8573e7baf60b3f39be994bd2f2c36385d03b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1af57d1da0dceaad2640da652698505d6a621ce5":["4e4c8573e7baf60b3f39be994bd2f2c36385d03b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1af57d1da0dceaad2640da652698505d6a621ce5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4e4c8573e7baf60b3f39be994bd2f2c36385d03b":["3a061a4d303d4aee0918ec2e41c078d900ec23f6"],"3a061a4d303d4aee0918ec2e41c078d900ec23f6":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a061a4d303d4aee0918ec2e41c078d900ec23f6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}