{"path":"src/java/org/apache/lucene/search/IndexSearcher#doSearch(IndexReader,Weight,Filter,Collector).mjava","commits":[{"id":"64714133cf5ec732e3bbceee63351bb9af0117dc","date":1239647636,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#doSearch(IndexReader,Weight,Filter,Collector).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#doSearch(IndexReader,Weight,Filter,HitCollector).mjava","sourceNew":"  private void doSearch(IndexReader reader, Weight weight, Filter filter,\n      final Collector collector) throws IOException {\n\n    Scorer scorer = weight.scorer(reader);\n    if (scorer == null)\n      return;\n\n    if (filter == null) {\n      scorer.score(collector);\n      return;\n    }\n\n    DocIdSetIterator filterDocIdIterator = filter.getDocIdSet(reader).iterator(); // CHECKME: use ConjunctionScorer here?\n    \n    boolean more = filterDocIdIterator.next() && scorer.skipTo(filterDocIdIterator.doc());\n\n    collector.setScorer(scorer);\n    while (more) {\n      int filterDocId = filterDocIdIterator.doc();\n      if (filterDocId > scorer.doc() && !scorer.skipTo(filterDocId)) {\n        more = false;\n      } else {\n        int scorerDocId = scorer.doc();\n        if (scorerDocId == filterDocId) { // permitted by filter\n          collector.collect(scorerDocId);\n          more = filterDocIdIterator.next();\n        } else {\n          more = filterDocIdIterator.skipTo(scorerDocId);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void doSearch(IndexReader reader, Weight weight, Filter filter,\n      final HitCollector results) throws IOException {\n\n    Scorer scorer = weight.scorer(reader);\n    if (scorer == null)\n      return;\n\n    if (filter == null) {\n      scorer.score(results);\n      return;\n    }\n\n    DocIdSetIterator filterDocIdIterator = filter.getDocIdSet(reader).iterator(); // CHECKME: use ConjunctionScorer here?\n    \n    boolean more = filterDocIdIterator.next() && scorer.skipTo(filterDocIdIterator.doc());\n\n    while (more) {\n      int filterDocId = filterDocIdIterator.doc();\n      if (filterDocId > scorer.doc() && !scorer.skipTo(filterDocId)) {\n        more = false;\n      } else {\n        int scorerDocId = scorer.doc();\n        if (scorerDocId == filterDocId) { // permitted by filter\n          results.collect(scorerDocId, scorer.score());\n          more = filterDocIdIterator.next();\n        } else {\n          more = filterDocIdIterator.skipTo(scorerDocId);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30a558487f2298c2c19ceca9103c1b6865d64708","date":1244393921,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#doSearch(IndexReader,Weight,Filter,Collector).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#doSearch(IndexReader,Weight,Filter,Collector).mjava","sourceNew":"  private void doSearch(IndexReader reader, Weight weight, Filter filter,\n      final Collector collector) throws IOException {\n\n    Scorer scorer = weight.scorer(reader);\n    if (scorer == null)\n      return;\n\n    int docID = scorer.docID();\n    assert docID == -1 || docID == DocIdSetIterator.NO_MORE_DOCS;\n    \n    if (filter == null) {\n      scorer.score(collector);\n      return;\n    }\n\n    // CHECKME: use ConjunctionScorer here?\n    DocIdSetIterator filterIter = filter.getDocIdSet(reader).iterator();\n    \n    int filterDoc = filterIter.nextDoc();\n    int scorerDoc = scorer.advance(filterDoc);\n    \n    collector.setScorer(scorer);\n    while (true) {\n      if (scorerDoc == filterDoc) {\n        // Check if scorer has exhausted, only before collecting.\n        if (scorerDoc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        collector.collect(scorerDoc);\n        filterDoc = filterIter.nextDoc();\n        scorerDoc = scorer.advance(filterDoc);\n      } else if (scorerDoc > filterDoc) {\n        filterDoc = filterIter.advance(scorerDoc);\n      } else {\n        scorerDoc = scorer.advance(filterDoc);\n      }\n    }\n  }\n\n","sourceOld":"  private void doSearch(IndexReader reader, Weight weight, Filter filter,\n      final Collector collector) throws IOException {\n\n    Scorer scorer = weight.scorer(reader);\n    if (scorer == null)\n      return;\n\n    if (filter == null) {\n      scorer.score(collector);\n      return;\n    }\n\n    DocIdSetIterator filterDocIdIterator = filter.getDocIdSet(reader).iterator(); // CHECKME: use ConjunctionScorer here?\n    \n    boolean more = filterDocIdIterator.next() && scorer.skipTo(filterDocIdIterator.doc());\n\n    collector.setScorer(scorer);\n    while (more) {\n      int filterDocId = filterDocIdIterator.doc();\n      if (filterDocId > scorer.doc() && !scorer.skipTo(filterDocId)) {\n        more = false;\n      } else {\n        int scorerDocId = scorer.doc();\n        if (scorerDocId == filterDocId) { // permitted by filter\n          collector.collect(scorerDocId);\n          more = filterDocIdIterator.next();\n        } else {\n          more = filterDocIdIterator.skipTo(scorerDocId);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"052fac7830290bd38a04cddee1a121ee07656b56","date":1245780702,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#searchWithFilter(IndexReader,QueryWeight,Filter,Collector).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#doSearch(IndexReader,Weight,Filter,Collector).mjava","sourceNew":"  private void searchWithFilter(IndexReader reader, QueryWeight weight,\n      final Filter filter, final Collector collector) throws IOException {\n\n    assert filter != null;\n    \n    Scorer scorer = weight.scorer(reader, true, false);\n    if (scorer == null) {\n      return;\n    }\n\n    int docID = scorer.docID();\n    assert docID == -1 || docID == DocIdSetIterator.NO_MORE_DOCS;\n\n    // CHECKME: use ConjunctionScorer here?\n    DocIdSetIterator filterIter = filter.getDocIdSet(reader).iterator();\n    \n    int filterDoc = filterIter.nextDoc();\n    int scorerDoc = scorer.advance(filterDoc);\n    \n    collector.setScorer(scorer);\n    while (true) {\n      if (scorerDoc == filterDoc) {\n        // Check if scorer has exhausted, only before collecting.\n        if (scorerDoc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        collector.collect(scorerDoc);\n        filterDoc = filterIter.nextDoc();\n        scorerDoc = scorer.advance(filterDoc);\n      } else if (scorerDoc > filterDoc) {\n        filterDoc = filterIter.advance(scorerDoc);\n      } else {\n        scorerDoc = scorer.advance(filterDoc);\n      }\n    }\n  }\n\n","sourceOld":"  private void doSearch(IndexReader reader, Weight weight, Filter filter,\n      final Collector collector) throws IOException {\n\n    Scorer scorer = weight.scorer(reader);\n    if (scorer == null)\n      return;\n\n    int docID = scorer.docID();\n    assert docID == -1 || docID == DocIdSetIterator.NO_MORE_DOCS;\n    \n    if (filter == null) {\n      scorer.score(collector);\n      return;\n    }\n\n    // CHECKME: use ConjunctionScorer here?\n    DocIdSetIterator filterIter = filter.getDocIdSet(reader).iterator();\n    \n    int filterDoc = filterIter.nextDoc();\n    int scorerDoc = scorer.advance(filterDoc);\n    \n    collector.setScorer(scorer);\n    while (true) {\n      if (scorerDoc == filterDoc) {\n        // Check if scorer has exhausted, only before collecting.\n        if (scorerDoc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        collector.collect(scorerDoc);\n        filterDoc = filterIter.nextDoc();\n        scorerDoc = scorer.advance(filterDoc);\n      } else if (scorerDoc > filterDoc) {\n        filterDoc = filterIter.advance(scorerDoc);\n      } else {\n        scorerDoc = scorer.advance(filterDoc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"30a558487f2298c2c19ceca9103c1b6865d64708":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"64714133cf5ec732e3bbceee63351bb9af0117dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"052fac7830290bd38a04cddee1a121ee07656b56":["30a558487f2298c2c19ceca9103c1b6865d64708"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["052fac7830290bd38a04cddee1a121ee07656b56"]},"commit2Childs":{"30a558487f2298c2c19ceca9103c1b6865d64708":["052fac7830290bd38a04cddee1a121ee07656b56"],"64714133cf5ec732e3bbceee63351bb9af0117dc":["30a558487f2298c2c19ceca9103c1b6865d64708"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"052fac7830290bd38a04cddee1a121ee07656b56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}