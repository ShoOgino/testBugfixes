{"path":"src/solrj/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#storeName(Field).mjava","commits":[{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/solrj/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#storeName(Field).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#storeName(Field).mjava","sourceNew":"    private void storeName(Field annotation) {\n      if (annotation.value().equals(Field.DEFAULT)) {\n        if (field != null) {\n          name = field.getName();\n        } else {\n          String setterName = setter.getName();\n          if (setterName.startsWith(\"set\") && setterName.length() > 3) {\n            name = setterName.substring(3, 4).toLowerCase() + setterName.substring(4);\n          } else {\n            name = setter.getName();\n          }\n        }\n      } else {\n        name = annotation.value();\n      }\n    }\n\n","sourceOld":"    private void storeName(Field annotation) {\n      if (annotation.value().equals(Field.DEFAULT)) {\n        if (field != null) {\n          name = field.getName();\n        } else {\n          String setterName = setter.getName();\n          if (setterName.startsWith(\"set\") && setterName.length() > 3) {\n            name = setterName.substring(3, 4).toLowerCase() + setterName.substring(4);\n          } else {\n            name = setter.getName();\n          }\n        }\n      } else {\n        name = annotation.value();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc29674855884c7ea8ac29eeb09a0276a16f334f","date":1247637346,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/solrj/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#storeName(Field).mjava","pathOld":"src/solrj/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#storeName(Field).mjava","sourceNew":"    private void storeName(Field annotation) {\n      if (annotation.value().equals(Field.DEFAULT)) {\n        if (field != null) {\n          name = field.getName();\n        } else {\n          String setterName = setter.getName();\n          if (setterName.startsWith(\"set\") && setterName.length() > 3) {\n            name = setterName.substring(3, 4).toLowerCase() + setterName.substring(4);\n          } else {\n            name = setter.getName();\n          }\n        }\n      }\n      //dynamic fields are annotated as @Field(\"categories_*\")\n      else if(annotation.value().indexOf('*') >= 0){\n        //if the field was annotated as a dynamic field, convert the name into a pattern\n        //the wildcard (*) is supposed to be either a prefix or a suffix, hence the use of replaceFirst\n        name = annotation.value().replaceFirst(\"\\\\*\", \"\\\\.*\");\n        dynamicFieldNamePatternMatcher = Pattern.compile(\"^\"+name+\"$\");\n      } else {\n        name = annotation.value();\n      }\n    }\n\n","sourceOld":"    private void storeName(Field annotation) {\n      if (annotation.value().equals(Field.DEFAULT)) {\n        if (field != null) {\n          name = field.getName();\n        } else {\n          String setterName = setter.getName();\n          if (setterName.startsWith(\"set\") && setterName.length() > 3) {\n            name = setterName.substring(3, 4).toLowerCase() + setterName.substring(4);\n          } else {\n            name = setter.getName();\n          }\n        }\n      } else {\n        name = annotation.value();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#storeName(Field).mjava","pathOld":"src/solrj/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#storeName(Field).mjava","sourceNew":"    private void storeName(Field annotation) {\n      if (annotation.value().equals(Field.DEFAULT)) {\n        if (field != null) {\n          name = field.getName();\n        } else {\n          String setterName = setter.getName();\n          if (setterName.startsWith(\"set\") && setterName.length() > 3) {\n            name = setterName.substring(3, 4).toLowerCase() + setterName.substring(4);\n          } else {\n            name = setter.getName();\n          }\n        }\n      }\n      //dynamic fields are annotated as @Field(\"categories_*\")\n      else if(annotation.value().indexOf('*') >= 0){\n        //if the field was annotated as a dynamic field, convert the name into a pattern\n        //the wildcard (*) is supposed to be either a prefix or a suffix, hence the use of replaceFirst\n        name = annotation.value().replaceFirst(\"\\\\*\", \"\\\\.*\");\n        dynamicFieldNamePatternMatcher = Pattern.compile(\"^\"+name+\"$\");\n      } else {\n        name = annotation.value();\n      }\n    }\n\n","sourceOld":"    private void storeName(Field annotation) {\n      if (annotation.value().equals(Field.DEFAULT)) {\n        if (field != null) {\n          name = field.getName();\n        } else {\n          String setterName = setter.getName();\n          if (setterName.startsWith(\"set\") && setterName.length() > 3) {\n            name = setterName.substring(3, 4).toLowerCase() + setterName.substring(4);\n          } else {\n            name = setter.getName();\n          }\n        }\n      }\n      //dynamic fields are annotated as @Field(\"categories_*\")\n      else if(annotation.value().indexOf('*') >= 0){\n        //if the field was annotated as a dynamic field, convert the name into a pattern\n        //the wildcard (*) is supposed to be either a prefix or a suffix, hence the use of replaceFirst\n        name = annotation.value().replaceFirst(\"\\\\*\", \"\\\\.*\");\n        dynamicFieldNamePatternMatcher = Pattern.compile(\"^\"+name+\"$\");\n      } else {\n        name = annotation.value();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["cc29674855884c7ea8ac29eeb09a0276a16f334f"],"cc29674855884c7ea8ac29eeb09a0276a16f334f":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["cc29674855884c7ea8ac29eeb09a0276a16f334f"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cc29674855884c7ea8ac29eeb09a0276a16f334f":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}