{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateAliasCmd#call(ClusterState,CloudConfig,ZkNodeProps,NamedList).mjava","commits":[{"id":"c526352db87264a72a7a9ad68c1b769b81e54305","date":1598780188,"type":1,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateAliasCmd#call(ClusterState,CloudConfig,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, CloudConfig cloudConfig, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results)\n      throws Exception {\n    final String aliasName = message.getStr(CommonParams.NAME);\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    // make sure we have the latest version of existing aliases\n    if (zkStateReader.aliasesManager != null) { // not a mock ZkStateReader\n      zkStateReader.aliasesManager.update();\n    }\n\n    if (!anyRoutingParams(message)) {\n      callCreatePlainAlias(message, aliasName, zkStateReader);\n    } else {\n      callCreateRoutedAlias(message, aliasName, zkStateReader, state, cloudConfig);\n    }\n\n    // Sleep a bit to allow ZooKeeper state propagation.\n    //\n    // THIS IS A KLUDGE.\n    //\n    // Solr's view of the cluster is eventually consistent. *Eventually* all nodes and CloudSolrClients will be aware of\n    // alias changes, but not immediately. If a newly created alias is queried, things should work right away since Solr\n    // will attempt to see if it needs to get the latest aliases when it can't otherwise resolve the name.  However\n    // modifications to an alias will take some time.\n    //\n    // We could levy this requirement on the client but they would probably always add an obligatory sleep, which is\n    // just kicking the can down the road.  Perhaps ideally at this juncture here we could somehow wait until all\n    // Solr nodes in the cluster have the latest aliases?\n    Thread.sleep(100);\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results)\n      throws Exception {\n    final String aliasName = message.getStr(CommonParams.NAME);\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    // make sure we have the latest version of existing aliases\n    if (zkStateReader.aliasesManager != null) { // not a mock ZkStateReader\n      zkStateReader.aliasesManager.update();\n    }\n\n    if (!anyRoutingParams(message)) {\n      callCreatePlainAlias(message, aliasName, zkStateReader);\n    } else {\n      callCreateRoutedAlias(message, aliasName, zkStateReader, state);\n    }\n\n    // Sleep a bit to allow ZooKeeper state propagation.\n    //\n    // THIS IS A KLUDGE.\n    //\n    // Solr's view of the cluster is eventually consistent. *Eventually* all nodes and CloudSolrClients will be aware of\n    // alias changes, but not immediately. If a newly created alias is queried, things should work right away since Solr\n    // will attempt to see if it needs to get the latest aliases when it can't otherwise resolve the name.  However\n    // modifications to an alias will take some time.\n    //\n    // We could levy this requirement on the client but they would probably always add an obligatory sleep, which is\n    // just kicking the can down the road.  Perhaps ideally at this juncture here we could somehow wait until all\n    // Solr nodes in the cluster have the latest aliases?\n    Thread.sleep(100);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7b17e79a71117668ecbf8d3417c876e41396565","date":1598973672,"type":5,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateAliasCmd#call(ClusterState,CloudConfig,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results)\n      throws Exception {\n    final String aliasName = message.getStr(CommonParams.NAME);\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    // make sure we have the latest version of existing aliases\n    if (zkStateReader.aliasesManager != null) { // not a mock ZkStateReader\n      zkStateReader.aliasesManager.update();\n    }\n\n    if (!anyRoutingParams(message)) {\n      callCreatePlainAlias(message, aliasName, zkStateReader);\n    } else {\n      callCreateRoutedAlias(message, aliasName, zkStateReader, state);\n    }\n\n    // Sleep a bit to allow ZooKeeper state propagation.\n    //\n    // THIS IS A KLUDGE.\n    //\n    // Solr's view of the cluster is eventually consistent. *Eventually* all nodes and CloudSolrClients will be aware of\n    // alias changes, but not immediately. If a newly created alias is queried, things should work right away since Solr\n    // will attempt to see if it needs to get the latest aliases when it can't otherwise resolve the name.  However\n    // modifications to an alias will take some time.\n    //\n    // We could levy this requirement on the client but they would probably always add an obligatory sleep, which is\n    // just kicking the can down the road.  Perhaps ideally at this juncture here we could somehow wait until all\n    // Solr nodes in the cluster have the latest aliases?\n    Thread.sleep(100);\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState state, CloudConfig cloudConfig, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results)\n      throws Exception {\n    final String aliasName = message.getStr(CommonParams.NAME);\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    // make sure we have the latest version of existing aliases\n    if (zkStateReader.aliasesManager != null) { // not a mock ZkStateReader\n      zkStateReader.aliasesManager.update();\n    }\n\n    if (!anyRoutingParams(message)) {\n      callCreatePlainAlias(message, aliasName, zkStateReader);\n    } else {\n      callCreateRoutedAlias(message, aliasName, zkStateReader, state, cloudConfig);\n    }\n\n    // Sleep a bit to allow ZooKeeper state propagation.\n    //\n    // THIS IS A KLUDGE.\n    //\n    // Solr's view of the cluster is eventually consistent. *Eventually* all nodes and CloudSolrClients will be aware of\n    // alias changes, but not immediately. If a newly created alias is queried, things should work right away since Solr\n    // will attempt to see if it needs to get the latest aliases when it can't otherwise resolve the name.  However\n    // modifications to an alias will take some time.\n    //\n    // We could levy this requirement on the client but they would probably always add an obligatory sleep, which is\n    // just kicking the can down the road.  Perhaps ideally at this juncture here we could somehow wait until all\n    // Solr nodes in the cluster have the latest aliases?\n    Thread.sleep(100);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7b17e79a71117668ecbf8d3417c876e41396565":["c526352db87264a72a7a9ad68c1b769b81e54305"],"c526352db87264a72a7a9ad68c1b769b81e54305":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7b17e79a71117668ecbf8d3417c876e41396565"]},"commit2Childs":{"e7b17e79a71117668ecbf8d3417c876e41396565":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c526352db87264a72a7a9ad68c1b769b81e54305":["e7b17e79a71117668ecbf8d3417c876e41396565"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c526352db87264a72a7a9ad68c1b769b81e54305"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}