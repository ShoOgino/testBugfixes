{"path":"solr/core/src/java/org/apache/solr/search/BoolQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","commits":[{"id":"10eda272dbca4b0397f9b0c2aa6fadad3601db47","date":1504272103,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/BoolQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        BooleanQuery.Builder builder = new BooleanQuery.Builder();\n        SolrParams solrParams = SolrParams.wrapDefaults(localParams, params);\n        addQueries(builder, solrParams.getParams(\"must\"), BooleanClause.Occur.MUST);\n        addQueries(builder, solrParams.getParams(\"must_not\"), BooleanClause.Occur.MUST_NOT);\n        addQueries(builder, solrParams.getParams(\"filter\"), BooleanClause.Occur.FILTER);\n        addQueries(builder, solrParams.getParams(\"should\"), BooleanClause.Occur.SHOULD);\n        return builder.build();\n      }\n\n      private void addQueries(BooleanQuery.Builder builder, String[] subQueries, BooleanClause.Occur occur) throws SyntaxError {\n        if (subQueries != null) {\n          for (String subQuery : subQueries) {\n            builder.add(subQuery(subQuery, null).parse(), occur);\n          }\n        }\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/BoolQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        BooleanQuery.Builder builder = new BooleanQuery.Builder();\n        SolrParams solrParams = SolrParams.wrapDefaults(localParams, params);\n        addQueries(builder, solrParams.getParams(\"must\"), BooleanClause.Occur.MUST);\n        addQueries(builder, solrParams.getParams(\"must_not\"), BooleanClause.Occur.MUST_NOT);\n        addQueries(builder, solrParams.getParams(\"filter\"), BooleanClause.Occur.FILTER);\n        addQueries(builder, solrParams.getParams(\"should\"), BooleanClause.Occur.SHOULD);\n        return builder.build();\n      }\n\n      private void addQueries(BooleanQuery.Builder builder, String[] subQueries, BooleanClause.Occur occur) throws SyntaxError {\n        if (subQueries != null) {\n          for (String subQuery : subQueries) {\n            builder.add(subQuery(subQuery, null).parse(), occur);\n          }\n        }\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21283ed01203901a7257aa4b7f0a0899c86e56e","date":1504689720,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/BoolQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        BooleanQuery.Builder builder = new BooleanQuery.Builder();\n        SolrParams solrParams = SolrParams.wrapDefaults(localParams, params);\n        addQueries(builder, solrParams.getParams(\"must\"), BooleanClause.Occur.MUST);\n        addQueries(builder, solrParams.getParams(\"must_not\"), BooleanClause.Occur.MUST_NOT);\n        addQueries(builder, solrParams.getParams(\"filter\"), BooleanClause.Occur.FILTER);\n        addQueries(builder, solrParams.getParams(\"should\"), BooleanClause.Occur.SHOULD);\n        return builder.build();\n      }\n\n      private void addQueries(BooleanQuery.Builder builder, String[] subQueries, BooleanClause.Occur occur) throws SyntaxError {\n        if (subQueries != null) {\n          for (String subQuery : subQueries) {\n            builder.add(subQuery(subQuery, null).parse(), occur);\n          }\n        }\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","date":1504848000,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/BoolQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        BooleanQuery.Builder builder = new BooleanQuery.Builder();\n        SolrParams solrParams = SolrParams.wrapDefaults(localParams, params);\n        addQueries(builder, solrParams.getParams(\"must\"), BooleanClause.Occur.MUST);\n        addQueries(builder, solrParams.getParams(\"must_not\"), BooleanClause.Occur.MUST_NOT);\n        addQueries(builder, solrParams.getParams(\"filter\"), BooleanClause.Occur.FILTER);\n        addQueries(builder, solrParams.getParams(\"should\"), BooleanClause.Occur.SHOULD);\n        return builder.build();\n      }\n\n      private void addQueries(BooleanQuery.Builder builder, String[] subQueries, BooleanClause.Occur occur) throws SyntaxError {\n        if (subQueries != null) {\n          for (String subQuery : subQueries) {\n            builder.add(subQuery(subQuery, null).parse(), occur);\n          }\n        }\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e927cf171dca7f8ff7b206baec5eb7fadadccb92","date":1577558891,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/BoolQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/BoolQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        BooleanQuery.Builder builder = new BooleanQuery.Builder();\n        SolrParams solrParams = SolrParams.wrapDefaults(localParams, params);\n        addQueries(builder, solrParams.getParams(\"must\"), BooleanClause.Occur.MUST);\n        addQueries(builder, solrParams.getParams(\"must_not\"), BooleanClause.Occur.MUST_NOT);\n        addQueries(builder, solrParams.getParams(\"filter\"), BooleanClause.Occur.FILTER);\n        addQueries(builder, solrParams.getParams(\"should\"), BooleanClause.Occur.SHOULD);\n        return builder.build();\n      }\n\n      private void addQueries(BooleanQuery.Builder builder, String[] subQueries, BooleanClause.Occur occur) throws SyntaxError {\n        if (subQueries != null) {\n          for (String subQuery : subQueries) {\n            final QParser subParser = subQuery(subQuery, null);\n            Query extQuery;\n            if (BooleanClause.Occur.FILTER.equals(occur)) {\n              extQuery = subParser.getQuery();\n              if (!(extQuery instanceof ExtendedQuery) || (\n                  ((ExtendedQuery) extQuery).getCache())) {\n                  extQuery = new FilterQuery(extQuery);\n              }\n            } else {\n              extQuery = subParser.parse();\n            }\n            builder.add(extQuery, occur);\n          }\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        BooleanQuery.Builder builder = new BooleanQuery.Builder();\n        SolrParams solrParams = SolrParams.wrapDefaults(localParams, params);\n        addQueries(builder, solrParams.getParams(\"must\"), BooleanClause.Occur.MUST);\n        addQueries(builder, solrParams.getParams(\"must_not\"), BooleanClause.Occur.MUST_NOT);\n        addQueries(builder, solrParams.getParams(\"filter\"), BooleanClause.Occur.FILTER);\n        addQueries(builder, solrParams.getParams(\"should\"), BooleanClause.Occur.SHOULD);\n        return builder.build();\n      }\n\n      private void addQueries(BooleanQuery.Builder builder, String[] subQueries, BooleanClause.Occur occur) throws SyntaxError {\n        if (subQueries != null) {\n          for (String subQuery : subQueries) {\n            builder.add(subQuery(subQuery, null).parse(), occur);\n          }\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4414d09a90891bc59e6e5fec445b178928fc4ca3","date":1577694286,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/BoolQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/BoolQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        BooleanQuery.Builder builder = new BooleanQuery.Builder();\n        SolrParams solrParams = SolrParams.wrapDefaults(localParams, params);\n        addQueries(builder, solrParams.getParams(\"must\"), BooleanClause.Occur.MUST);\n        addQueries(builder, solrParams.getParams(\"must_not\"), BooleanClause.Occur.MUST_NOT);\n        addQueries(builder, solrParams.getParams(\"filter\"), BooleanClause.Occur.FILTER);\n        addQueries(builder, solrParams.getParams(\"should\"), BooleanClause.Occur.SHOULD);\n        return builder.build();\n      }\n\n      private void addQueries(BooleanQuery.Builder builder, String[] subQueries, BooleanClause.Occur occur) throws SyntaxError {\n        if (subQueries != null) {\n          for (String subQuery : subQueries) {\n            final QParser subParser = subQuery(subQuery, null);\n            Query extQuery;\n            if (BooleanClause.Occur.FILTER.equals(occur)) {\n              extQuery = subParser.getQuery();\n              if (!(extQuery instanceof ExtendedQuery) || (\n                  ((ExtendedQuery) extQuery).getCache())) {\n                  extQuery = new FilterQuery(extQuery);\n              }\n            } else {\n              extQuery = subParser.parse();\n            }\n            builder.add(extQuery, occur);\n          }\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        BooleanQuery.Builder builder = new BooleanQuery.Builder();\n        SolrParams solrParams = SolrParams.wrapDefaults(localParams, params);\n        addQueries(builder, solrParams.getParams(\"must\"), BooleanClause.Occur.MUST);\n        addQueries(builder, solrParams.getParams(\"must_not\"), BooleanClause.Occur.MUST_NOT);\n        addQueries(builder, solrParams.getParams(\"filter\"), BooleanClause.Occur.FILTER);\n        addQueries(builder, solrParams.getParams(\"should\"), BooleanClause.Occur.SHOULD);\n        return builder.build();\n      }\n\n      private void addQueries(BooleanQuery.Builder builder, String[] subQueries, BooleanClause.Occur occur) throws SyntaxError {\n        if (subQueries != null) {\n          for (String subQuery : subQueries) {\n            builder.add(subQuery(subQuery, null).parse(), occur);\n          }\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b2cebce8aded9fff0c315c32efe811679c29d47","date":1593532507,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/BoolQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/BoolQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new FiltersQParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        return parseImpl();\n      }\n\n      @Override\n      protected Query unwrapQuery(Query query, BooleanClause.Occur occur) {\n        if (occur== BooleanClause.Occur.FILTER) {\n          if (!(query instanceof ExtendedQuery) || (\n                  ((ExtendedQuery) query).getCache())) {\n            return new FilterQuery(query);\n          }\n        } else {\n          if (query instanceof WrappedQuery) {\n            return ((WrappedQuery)query).getWrappedQuery();\n          }\n        }\n        return query;\n      }\n\n      @Override\n      protected Map<QParser, BooleanClause.Occur> clauses() throws SyntaxError {\n        Map<QParser, BooleanClause.Occur> clauses = new IdentityHashMap<>();\n        SolrParams solrParams = SolrParams.wrapDefaults(localParams, params);\n        addQueries(clauses, solrParams.getParams(\"must\"), BooleanClause.Occur.MUST);\n        addQueries(clauses, solrParams.getParams(\"must_not\"), BooleanClause.Occur.MUST_NOT);\n        addQueries(clauses, solrParams.getParams(\"filter\"), BooleanClause.Occur.FILTER);\n        addQueries(clauses, solrParams.getParams(\"should\"), BooleanClause.Occur.SHOULD);\n        return clauses;\n      }\n\n      private void addQueries(Map<QParser, BooleanClause.Occur> clausesDest, String[] subQueries, BooleanClause.Occur occur) throws SyntaxError {\n        if (subQueries != null) {\n          for (String subQuery : subQueries) {\n            final QParser subParser = subQuery(subQuery, null);\n            clausesDest.put(subParser, occur);\n          }\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        BooleanQuery.Builder builder = new BooleanQuery.Builder();\n        SolrParams solrParams = SolrParams.wrapDefaults(localParams, params);\n        addQueries(builder, solrParams.getParams(\"must\"), BooleanClause.Occur.MUST);\n        addQueries(builder, solrParams.getParams(\"must_not\"), BooleanClause.Occur.MUST_NOT);\n        addQueries(builder, solrParams.getParams(\"filter\"), BooleanClause.Occur.FILTER);\n        addQueries(builder, solrParams.getParams(\"should\"), BooleanClause.Occur.SHOULD);\n        return builder.build();\n      }\n\n      private void addQueries(BooleanQuery.Builder builder, String[] subQueries, BooleanClause.Occur occur) throws SyntaxError {\n        if (subQueries != null) {\n          for (String subQuery : subQueries) {\n            final QParser subParser = subQuery(subQuery, null);\n            Query extQuery;\n            if (BooleanClause.Occur.FILTER.equals(occur)) {\n              extQuery = subParser.getQuery();\n              if (!(extQuery instanceof ExtendedQuery) || (\n                  ((ExtendedQuery) extQuery).getCache())) {\n                  extQuery = new FilterQuery(extQuery);\n              }\n            } else {\n              extQuery = subParser.parse();\n            }\n            builder.add(extQuery, occur);\n          }\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b21283ed01203901a7257aa4b7f0a0899c86e56e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","10eda272dbca4b0397f9b0c2aa6fadad3601db47"],"5b2cebce8aded9fff0c315c32efe811679c29d47":["e927cf171dca7f8ff7b206baec5eb7fadadccb92"],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b21283ed01203901a7257aa4b7f0a0899c86e56e"],"10eda272dbca4b0397f9b0c2aa6fadad3601db47":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","10eda272dbca4b0397f9b0c2aa6fadad3601db47"],"4414d09a90891bc59e6e5fec445b178928fc4ca3":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","e927cf171dca7f8ff7b206baec5eb7fadadccb92"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e927cf171dca7f8ff7b206baec5eb7fadadccb92":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5b2cebce8aded9fff0c315c32efe811679c29d47"]},"commit2Childs":{"b21283ed01203901a7257aa4b7f0a0899c86e56e":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"5b2cebce8aded9fff0c315c32efe811679c29d47":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"10eda272dbca4b0397f9b0c2aa6fadad3601db47":["b21283ed01203901a7257aa4b7f0a0899c86e56e","3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["4414d09a90891bc59e6e5fec445b178928fc4ca3","e927cf171dca7f8ff7b206baec5eb7fadadccb92"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"4414d09a90891bc59e6e5fec445b178928fc4ca3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b21283ed01203901a7257aa4b7f0a0899c86e56e","104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","10eda272dbca4b0397f9b0c2aa6fadad3601db47","3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"e927cf171dca7f8ff7b206baec5eb7fadadccb92":["5b2cebce8aded9fff0c315c32efe811679c29d47","4414d09a90891bc59e6e5fec445b178928fc4ca3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","4414d09a90891bc59e6e5fec445b178928fc4ca3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}