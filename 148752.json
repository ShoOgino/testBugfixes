{"path":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser.FuzzyDismaxQParser.FuzzyQueryParser#newFieldQuery(Analyzer,String,String,boolean,boolean,boolean).mjava","commits":[{"id":"7a4260b228cfff6ad78ac88d519f0f7746529c3c","date":1493136145,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser.FuzzyDismaxQParser.FuzzyQueryParser#newFieldQuery(Analyzer,String,String,boolean,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"      /** \n       * Handle multi-term queries by repacking boolean queries with frequently misspelled term\n       * queries rewritten as fuzzy queries.\n       **/\n      @Override\n      protected Query newFieldQuery(Analyzer analyzer, String field, String queryText,\n                                    boolean quoted, boolean fieldAutoGenPhraseQueries, boolean fieldEnableGraphQueries)\n          throws SyntaxError {\n        Query q = super.newFieldQuery\n            (analyzer, field, queryText, quoted, fieldAutoGenPhraseQueries, fieldEnableGraphQueries);\n        if (q instanceof BooleanQuery) {\n          boolean rewrittenSubQ = false; // dirty flag: rebuild the repacked query?\n          BooleanQuery.Builder builder = newBooleanQuery();\n          for (BooleanClause clause : ((BooleanQuery)q).clauses()) {\n            Query subQ = clause.getQuery();\n            if (subQ instanceof TermQuery) {\n              Term subTerm = ((TermQuery)subQ).getTerm(); \n              if (frequentlyMisspelledWords.contains(subTerm.text())) {\n                rewrittenSubQ = true;\n                Query fuzzySubQ = newFuzzyQuery(subTerm, MIN_SIMILARITY, getFuzzyPrefixLength());\n                clause = newBooleanClause(fuzzySubQ, clause.getOccur());\n              } \n            } \n            builder.add(clause);\n          }\n          if (rewrittenSubQ) {\n            builder.setMinimumNumberShouldMatch(((BooleanQuery)q).getMinimumNumberShouldMatch());\n            q = builder.build();\n          }\n        }\n        return q;\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser.FuzzyDismaxQParser.FuzzyQueryParser#newFieldQuery(Analyzer,String,String,boolean,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"      /** \n       * Handle multi-term queries by repacking boolean queries with frequently misspelled term\n       * queries rewritten as fuzzy queries.\n       **/\n      @Override\n      protected Query newFieldQuery(Analyzer analyzer, String field, String queryText,\n                                    boolean quoted, boolean fieldAutoGenPhraseQueries, boolean fieldEnableGraphQueries)\n          throws SyntaxError {\n        Query q = super.newFieldQuery\n            (analyzer, field, queryText, quoted, fieldAutoGenPhraseQueries, fieldEnableGraphQueries);\n        if (q instanceof BooleanQuery) {\n          boolean rewrittenSubQ = false; // dirty flag: rebuild the repacked query?\n          BooleanQuery.Builder builder = newBooleanQuery();\n          for (BooleanClause clause : ((BooleanQuery)q).clauses()) {\n            Query subQ = clause.getQuery();\n            if (subQ instanceof TermQuery) {\n              Term subTerm = ((TermQuery)subQ).getTerm(); \n              if (frequentlyMisspelledWords.contains(subTerm.text())) {\n                rewrittenSubQ = true;\n                Query fuzzySubQ = newFuzzyQuery(subTerm, MIN_SIMILARITY, getFuzzyPrefixLength());\n                clause = newBooleanClause(fuzzySubQ, clause.getOccur());\n              } \n            } \n            builder.add(clause);\n          }\n          if (rewrittenSubQ) {\n            builder.setMinimumNumberShouldMatch(((BooleanQuery)q).getMinimumNumberShouldMatch());\n            q = builder.build();\n          }\n        }\n        return q;\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"47d74fab5d64854ddafa81b65ed399b192f2d947","date":1512411916,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser.FuzzyDismaxQParser.FuzzyQueryParser#newFieldQuery(Analyzer,String,String,boolean,boolean,boolean,SynonymQueryStyle).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser.FuzzyDismaxQParser.FuzzyQueryParser#newFieldQuery(Analyzer,String,String,boolean,boolean,boolean).mjava","sourceNew":"      /** \n       * Handle multi-term queries by repacking boolean queries with frequently misspelled term\n       * queries rewritten as fuzzy queries.\n       **/\n      @Override\n      protected Query newFieldQuery(Analyzer analyzer, String field, String queryText,\n                                    boolean quoted, boolean fieldAutoGenPhraseQueries,\n                                    boolean fieldEnableGraphQueries, SynonymQueryStyle synonymQueryStyle)\n          throws SyntaxError {\n        Query q = super.newFieldQuery\n            (analyzer, field, queryText, quoted, fieldAutoGenPhraseQueries, fieldEnableGraphQueries, synonymQueryStyle);\n        if (q instanceof BooleanQuery) {\n          boolean rewrittenSubQ = false; // dirty flag: rebuild the repacked query?\n          BooleanQuery.Builder builder = newBooleanQuery();\n          for (BooleanClause clause : ((BooleanQuery)q).clauses()) {\n            Query subQ = clause.getQuery();\n            if (subQ instanceof TermQuery) {\n              Term subTerm = ((TermQuery)subQ).getTerm(); \n              if (frequentlyMisspelledWords.contains(subTerm.text())) {\n                rewrittenSubQ = true;\n                Query fuzzySubQ = newFuzzyQuery(subTerm, MIN_SIMILARITY, getFuzzyPrefixLength());\n                clause = newBooleanClause(fuzzySubQ, clause.getOccur());\n              } \n            } \n            builder.add(clause);\n          }\n          if (rewrittenSubQ) {\n            builder.setMinimumNumberShouldMatch(((BooleanQuery)q).getMinimumNumberShouldMatch());\n            q = builder.build();\n          }\n        }\n        return q;\n      }\n\n","sourceOld":"      /** \n       * Handle multi-term queries by repacking boolean queries with frequently misspelled term\n       * queries rewritten as fuzzy queries.\n       **/\n      @Override\n      protected Query newFieldQuery(Analyzer analyzer, String field, String queryText,\n                                    boolean quoted, boolean fieldAutoGenPhraseQueries, boolean fieldEnableGraphQueries)\n          throws SyntaxError {\n        Query q = super.newFieldQuery\n            (analyzer, field, queryText, quoted, fieldAutoGenPhraseQueries, fieldEnableGraphQueries);\n        if (q instanceof BooleanQuery) {\n          boolean rewrittenSubQ = false; // dirty flag: rebuild the repacked query?\n          BooleanQuery.Builder builder = newBooleanQuery();\n          for (BooleanClause clause : ((BooleanQuery)q).clauses()) {\n            Query subQ = clause.getQuery();\n            if (subQ instanceof TermQuery) {\n              Term subTerm = ((TermQuery)subQ).getTerm(); \n              if (frequentlyMisspelledWords.contains(subTerm.text())) {\n                rewrittenSubQ = true;\n                Query fuzzySubQ = newFuzzyQuery(subTerm, MIN_SIMILARITY, getFuzzyPrefixLength());\n                clause = newBooleanClause(fuzzySubQ, clause.getOccur());\n              } \n            } \n            builder.add(clause);\n          }\n          if (rewrittenSubQ) {\n            builder.setMinimumNumberShouldMatch(((BooleanQuery)q).getMinimumNumberShouldMatch());\n            q = builder.build();\n          }\n        }\n        return q;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a4260b228cfff6ad78ac88d519f0f7746529c3c"],"47d74fab5d64854ddafa81b65ed399b192f2d947":["7a4260b228cfff6ad78ac88d519f0f7746529c3c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["47d74fab5d64854ddafa81b65ed399b192f2d947"],"7a4260b228cfff6ad78ac88d519f0f7746529c3c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"47d74fab5d64854ddafa81b65ed399b192f2d947":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","7a4260b228cfff6ad78ac88d519f0f7746529c3c"],"7a4260b228cfff6ad78ac88d519f0f7746529c3c":["e9017cf144952056066919f1ebc7897ff9bd71b1","47d74fab5d64854ddafa81b65ed399b192f2d947"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}