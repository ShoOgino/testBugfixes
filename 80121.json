{"path":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#renameFile(String,String).mjava","commits":[{"id":"46e4a8bdfbafda795ef9c39a2bc2d47095770299","date":1410411846,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#renameFile(String,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public synchronized void renameFile(String source, String dest) throws IOException {\n    maybeYield();\n    maybeThrowDeterministicException();\n\n    if (crashed) {\n      throw new IOException(\"cannot rename after crash\");\n    }\n    \n    if (openFiles.containsKey(source)) {\n      if (assertNoDeleteOpenFile) {\n        throw (AssertionError) fillOpenTrace(new AssertionError(\"MockDirectoryWrapper: file \\\"\" + source + \"\\\" is still open: cannot rename\"), source, true);\n      } else if (noDeleteOpenFile) {\n        throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + source + \"\\\" is still open: cannot rename\"), source, true);\n      }\n    }\n\n    boolean success = false;\n    try {\n      in.renameFile(source, dest);\n      success = true;\n    } finally {\n      if (success) {\n        // we don't do this stuff with lucene's commit, but its just for completeness\n        if (unSyncedFiles.contains(source)) {\n          unSyncedFiles.remove(source);\n          unSyncedFiles.add(dest);\n        }\n        openFilesDeleted.remove(source);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#renameFile(String,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#renameFile(String,String).mjava","sourceNew":"  @Override\n  public synchronized void renameFile(String source, String dest) throws IOException {\n    maybeYield();\n    maybeThrowDeterministicException();\n\n    if (crashed) {\n      throw new IOException(\"cannot rename after crash\");\n    }\n    \n    if (openFiles.containsKey(source)) {\n      if (assertNoDeleteOpenFile) {\n        throw (AssertionError) fillOpenTrace(new AssertionError(\"MockDirectoryWrapper: file \\\"\" + source + \"\\\" is still open: cannot rename\"), source, true);\n      } else if (noDeleteOpenFile) {\n        throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + source + \"\\\" is still open: cannot rename\"), source, true);\n      }\n    }\n\n    boolean success = false;\n    try {\n      in.renameFile(source, dest);\n      success = true;\n    } finally {\n      if (success) {\n        // we don't do this stuff with lucene's commit, but it's just for completeness\n        if (unSyncedFiles.contains(source)) {\n          unSyncedFiles.remove(source);\n          unSyncedFiles.add(dest);\n        }\n        openFilesDeleted.remove(source);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized void renameFile(String source, String dest) throws IOException {\n    maybeYield();\n    maybeThrowDeterministicException();\n\n    if (crashed) {\n      throw new IOException(\"cannot rename after crash\");\n    }\n    \n    if (openFiles.containsKey(source)) {\n      if (assertNoDeleteOpenFile) {\n        throw (AssertionError) fillOpenTrace(new AssertionError(\"MockDirectoryWrapper: file \\\"\" + source + \"\\\" is still open: cannot rename\"), source, true);\n      } else if (noDeleteOpenFile) {\n        throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + source + \"\\\" is still open: cannot rename\"), source, true);\n      }\n    }\n\n    boolean success = false;\n    try {\n      in.renameFile(source, dest);\n      success = true;\n    } finally {\n      if (success) {\n        // we don't do this stuff with lucene's commit, but its just for completeness\n        if (unSyncedFiles.contains(source)) {\n          unSyncedFiles.remove(source);\n          unSyncedFiles.add(dest);\n        }\n        openFilesDeleted.remove(source);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d49a158012a8ff48f328a4558e4bfcffbaed16f","date":1453677440,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#renameFile(String,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#renameFile(String,String).mjava","sourceNew":"  @Override\n  public synchronized void renameFile(String source, String dest) throws IOException {\n    maybeYield();\n    maybeThrowDeterministicException();\n\n    if (crashed) {\n      throw new IOException(\"cannot rename after crash\");\n    }\n    \n    if (openFiles.containsKey(source)) {\n      if (assertNoDeleteOpenFile) {\n        throw (AssertionError) fillOpenTrace(new AssertionError(\"MockDirectoryWrapper: source file \\\"\" + source + \"\\\" is still open: cannot rename\"), source, true);\n      } else if (noDeleteOpenFile) {\n        throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: source file \\\"\" + source + \"\\\" is still open: cannot rename\"), source, true);\n      }\n    }\n\n    if (openFiles.containsKey(dest)) {\n      if (assertNoDeleteOpenFile) {\n        throw (AssertionError) fillOpenTrace(new AssertionError(\"MockDirectoryWrapper: dest file \\\"\" + dest + \"\\\" is still open: cannot rename\"), dest, true);\n      } else if (noDeleteOpenFile) {\n        throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: dest file \\\"\" + dest + \"\\\" is still open: cannot rename\"), dest, true);\n      }\n    }\n\n    if (createdFiles.contains(dest)) {\n      throw new IOException(\"MockDirectoryWrapper: dest file \\\"\" + dest + \"\\\" already exists: cannot rename\");\n    }\n\n    boolean success = false;\n    try {\n      in.renameFile(source, dest);\n      success = true;\n    } finally {\n      if (success) {\n        // we don't do this stuff with lucene's commit, but it's just for completeness\n        if (unSyncedFiles.contains(source)) {\n          unSyncedFiles.remove(source);\n          unSyncedFiles.add(dest);\n        }\n        openFilesDeleted.remove(source);\n        triedToDelete.remove(dest);\n        createdFiles.add(dest);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized void renameFile(String source, String dest) throws IOException {\n    maybeYield();\n    maybeThrowDeterministicException();\n\n    if (crashed) {\n      throw new IOException(\"cannot rename after crash\");\n    }\n    \n    if (openFiles.containsKey(source)) {\n      if (assertNoDeleteOpenFile) {\n        throw (AssertionError) fillOpenTrace(new AssertionError(\"MockDirectoryWrapper: file \\\"\" + source + \"\\\" is still open: cannot rename\"), source, true);\n      } else if (noDeleteOpenFile) {\n        throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + source + \"\\\" is still open: cannot rename\"), source, true);\n      }\n    }\n\n    boolean success = false;\n    try {\n      in.renameFile(source, dest);\n      success = true;\n    } finally {\n      if (success) {\n        // we don't do this stuff with lucene's commit, but it's just for completeness\n        if (unSyncedFiles.contains(source)) {\n          unSyncedFiles.remove(source);\n          unSyncedFiles.add(dest);\n        }\n        openFilesDeleted.remove(source);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#renameFile(String,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#renameFile(String,String).mjava","sourceNew":"  @Override\n  public synchronized void renameFile(String source, String dest) throws IOException {\n    maybeYield();\n    maybeThrowDeterministicException();\n\n    if (crashed) {\n      throw new IOException(\"cannot rename after crash\");\n    }\n    \n    if (assertNoDeleteOpenFile && openFiles.containsKey(source)) {\n      throw (AssertionError) fillOpenTrace(new AssertionError(\"MockDirectoryWrapper: file \\\"\" + source + \"\\\" is still open: cannot rename\"), source, true);\n    }\n\n    boolean success = false;\n    try {\n      in.renameFile(source, dest);\n      success = true;\n    } finally {\n      if (success) {\n        // we don't do this stuff with lucene's commit, but it's just for completeness\n        if (unSyncedFiles.contains(source)) {\n          unSyncedFiles.remove(source);\n          unSyncedFiles.add(dest);\n        }\n        openFilesDeleted.remove(source);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized void renameFile(String source, String dest) throws IOException {\n    maybeYield();\n    maybeThrowDeterministicException();\n\n    if (crashed) {\n      throw new IOException(\"cannot rename after crash\");\n    }\n    \n    if (openFiles.containsKey(source)) {\n      if (assertNoDeleteOpenFile) {\n        throw (AssertionError) fillOpenTrace(new AssertionError(\"MockDirectoryWrapper: file \\\"\" + source + \"\\\" is still open: cannot rename\"), source, true);\n      } else if (noDeleteOpenFile) {\n        throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + source + \"\\\" is still open: cannot rename\"), source, true);\n      }\n    }\n\n    boolean success = false;\n    try {\n      in.renameFile(source, dest);\n      success = true;\n    } finally {\n      if (success) {\n        // we don't do this stuff with lucene's commit, but it's just for completeness\n        if (unSyncedFiles.contains(source)) {\n          unSyncedFiles.remove(source);\n          unSyncedFiles.add(dest);\n        }\n        openFilesDeleted.remove(source);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#renameFile(String,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#renameFile(String,String).mjava","sourceNew":"  @Override\n  public synchronized void renameFile(String source, String dest) throws IOException {\n    maybeYield();\n    maybeThrowDeterministicException();\n\n    if (crashed) {\n      throw new IOException(\"cannot rename after crash\");\n    }\n    \n    if (assertNoDeleteOpenFile && openFiles.containsKey(source)) {\n      throw (AssertionError) fillOpenTrace(new AssertionError(\"MockDirectoryWrapper: file \\\"\" + source + \"\\\" is still open: cannot rename\"), source, true);\n    }\n\n    boolean success = false;\n    try {\n      in.renameFile(source, dest);\n      success = true;\n    } finally {\n      if (success) {\n        // we don't do this stuff with lucene's commit, but it's just for completeness\n        if (unSyncedFiles.contains(source)) {\n          unSyncedFiles.remove(source);\n          unSyncedFiles.add(dest);\n        }\n        openFilesDeleted.remove(source);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized void renameFile(String source, String dest) throws IOException {\n    maybeYield();\n    maybeThrowDeterministicException();\n\n    if (crashed) {\n      throw new IOException(\"cannot rename after crash\");\n    }\n    \n    if (openFiles.containsKey(source)) {\n      if (assertNoDeleteOpenFile) {\n        throw (AssertionError) fillOpenTrace(new AssertionError(\"MockDirectoryWrapper: file \\\"\" + source + \"\\\" is still open: cannot rename\"), source, true);\n      } else if (noDeleteOpenFile) {\n        throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + source + \"\\\" is still open: cannot rename\"), source, true);\n      }\n    }\n\n    boolean success = false;\n    try {\n      in.renameFile(source, dest);\n      success = true;\n    } finally {\n      if (success) {\n        // we don't do this stuff with lucene's commit, but it's just for completeness\n        if (unSyncedFiles.contains(source)) {\n          unSyncedFiles.remove(source);\n          unSyncedFiles.add(dest);\n        }\n        openFilesDeleted.remove(source);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#renameFile(String,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#renameFile(String,String).mjava","sourceNew":"  @Override\n  public synchronized void renameFile(String source, String dest) throws IOException {\n    maybeYield();\n    maybeThrowDeterministicException();\n\n    if (crashed) {\n      throw new IOException(\"cannot rename after crash\");\n    }\n    \n    if (openFiles.containsKey(source) && assertNoDeleteOpenFile) {\n      throw (AssertionError) fillOpenTrace(new AssertionError(\"MockDirectoryWrapper: source file \\\"\" + source + \"\\\" is still open: cannot rename\"), source, true);\n    }\n\n    if (openFiles.containsKey(dest) && assertNoDeleteOpenFile) {\n      throw (AssertionError) fillOpenTrace(new AssertionError(\"MockDirectoryWrapper: dest file \\\"\" + dest + \"\\\" is still open: cannot rename\"), dest, true);\n    }\n\n    if (createdFiles.contains(dest)) {\n      throw new IOException(\"MockDirectoryWrapper: dest file \\\"\" + dest + \"\\\" already exists: cannot rename\");\n    }\n\n    boolean success = false;\n    try {\n      in.renameFile(source, dest);\n      success = true;\n    } finally {\n      if (success) {\n        // we don't do this stuff with lucene's commit, but it's just for completeness\n        if (unSyncedFiles.contains(source)) {\n          unSyncedFiles.remove(source);\n          unSyncedFiles.add(dest);\n        }\n        openFilesDeleted.remove(source);\n        createdFiles.add(dest);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized void renameFile(String source, String dest) throws IOException {\n    maybeYield();\n    maybeThrowDeterministicException();\n\n    if (crashed) {\n      throw new IOException(\"cannot rename after crash\");\n    }\n    \n    if (openFiles.containsKey(source)) {\n      if (assertNoDeleteOpenFile) {\n        throw (AssertionError) fillOpenTrace(new AssertionError(\"MockDirectoryWrapper: source file \\\"\" + source + \"\\\" is still open: cannot rename\"), source, true);\n      } else if (noDeleteOpenFile) {\n        throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: source file \\\"\" + source + \"\\\" is still open: cannot rename\"), source, true);\n      }\n    }\n\n    if (openFiles.containsKey(dest)) {\n      if (assertNoDeleteOpenFile) {\n        throw (AssertionError) fillOpenTrace(new AssertionError(\"MockDirectoryWrapper: dest file \\\"\" + dest + \"\\\" is still open: cannot rename\"), dest, true);\n      } else if (noDeleteOpenFile) {\n        throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: dest file \\\"\" + dest + \"\\\" is still open: cannot rename\"), dest, true);\n      }\n    }\n\n    if (createdFiles.contains(dest)) {\n      throw new IOException(\"MockDirectoryWrapper: dest file \\\"\" + dest + \"\\\" already exists: cannot rename\");\n    }\n\n    boolean success = false;\n    try {\n      in.renameFile(source, dest);\n      success = true;\n    } finally {\n      if (success) {\n        // we don't do this stuff with lucene's commit, but it's just for completeness\n        if (unSyncedFiles.contains(source)) {\n          unSyncedFiles.remove(source);\n          unSyncedFiles.add(dest);\n        }\n        openFilesDeleted.remove(source);\n        triedToDelete.remove(dest);\n        createdFiles.add(dest);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#renameFile(String,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#renameFile(String,String).mjava","sourceNew":"  @Override\n  public synchronized void renameFile(String source, String dest) throws IOException {\n    maybeYield();\n    maybeThrowDeterministicException();\n\n    if (crashed) {\n      throw new IOException(\"cannot rename after crash\");\n    }\n    \n    if (assertNoDeleteOpenFile && openFiles.containsKey(source)) {\n      throw (AssertionError) fillOpenTrace(new AssertionError(\"MockDirectoryWrapper: file \\\"\" + source + \"\\\" is still open: cannot rename\"), source, true);\n    }\n\n    boolean success = false;\n    try {\n      in.renameFile(source, dest);\n      success = true;\n    } finally {\n      if (success) {\n        // we don't do this stuff with lucene's commit, but it's just for completeness\n        if (unSyncedFiles.contains(source)) {\n          unSyncedFiles.remove(source);\n          unSyncedFiles.add(dest);\n        }\n        openFilesDeleted.remove(source);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized void renameFile(String source, String dest) throws IOException {\n    maybeYield();\n    maybeThrowDeterministicException();\n\n    if (crashed) {\n      throw new IOException(\"cannot rename after crash\");\n    }\n    \n    if (openFiles.containsKey(source)) {\n      if (assertNoDeleteOpenFile) {\n        throw (AssertionError) fillOpenTrace(new AssertionError(\"MockDirectoryWrapper: file \\\"\" + source + \"\\\" is still open: cannot rename\"), source, true);\n      } else if (noDeleteOpenFile) {\n        throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + source + \"\\\" is still open: cannot rename\"), source, true);\n      }\n    }\n\n    boolean success = false;\n    try {\n      in.renameFile(source, dest);\n      success = true;\n    } finally {\n      if (success) {\n        // we don't do this stuff with lucene's commit, but it's just for completeness\n        if (unSyncedFiles.contains(source)) {\n          unSyncedFiles.remove(source);\n          unSyncedFiles.add(dest);\n        }\n        openFilesDeleted.remove(source);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a8ec0889b27701f0ad90a25c95b75454e898cf3","date":1454871481,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#renameFile(String,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#renameFile(String,String).mjava","sourceNew":"  @Override\n  public synchronized void renameFile(String source, String dest) throws IOException {\n    maybeYield();\n    maybeThrowDeterministicException();\n\n    if (crashed) {\n      throw new IOException(\"cannot rename after crash\");\n    }\n    \n    if (openFiles.containsKey(source) && assertNoDeleteOpenFile) {\n      throw (AssertionError) fillOpenTrace(new AssertionError(\"MockDirectoryWrapper: source file \\\"\" + source + \"\\\" is still open: cannot rename\"), source, true);\n    }\n\n    if (openFiles.containsKey(dest) && assertNoDeleteOpenFile) {\n      throw (AssertionError) fillOpenTrace(new AssertionError(\"MockDirectoryWrapper: dest file \\\"\" + dest + \"\\\" is still open: cannot rename\"), dest, true);\n    }\n\n    boolean success = false;\n    try {\n      in.renameFile(source, dest);\n      success = true;\n    } finally {\n      if (success) {\n        // we don't do this stuff with lucene's commit, but it's just for completeness\n        if (unSyncedFiles.contains(source)) {\n          unSyncedFiles.remove(source);\n          unSyncedFiles.add(dest);\n        }\n        openFilesDeleted.remove(source);\n        createdFiles.add(dest);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized void renameFile(String source, String dest) throws IOException {\n    maybeYield();\n    maybeThrowDeterministicException();\n\n    if (crashed) {\n      throw new IOException(\"cannot rename after crash\");\n    }\n    \n    if (openFiles.containsKey(source) && assertNoDeleteOpenFile) {\n      throw (AssertionError) fillOpenTrace(new AssertionError(\"MockDirectoryWrapper: source file \\\"\" + source + \"\\\" is still open: cannot rename\"), source, true);\n    }\n\n    if (openFiles.containsKey(dest) && assertNoDeleteOpenFile) {\n      throw (AssertionError) fillOpenTrace(new AssertionError(\"MockDirectoryWrapper: dest file \\\"\" + dest + \"\\\" is still open: cannot rename\"), dest, true);\n    }\n\n    if (createdFiles.contains(dest)) {\n      throw new IOException(\"MockDirectoryWrapper: dest file \\\"\" + dest + \"\\\" already exists: cannot rename\");\n    }\n\n    boolean success = false;\n    try {\n      in.renameFile(source, dest);\n      success = true;\n    } finally {\n      if (success) {\n        // we don't do this stuff with lucene's commit, but it's just for completeness\n        if (unSyncedFiles.contains(source)) {\n          unSyncedFiles.remove(source);\n          unSyncedFiles.add(dest);\n        }\n        openFilesDeleted.remove(source);\n        createdFiles.add(dest);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68496c2200e559fb7802f7575427b7a482659afb","date":1455207618,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#renameFile(String,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#renameFile(String,String).mjava","sourceNew":"  @Override\n  public synchronized void renameFile(String source, String dest) throws IOException {\n    maybeYield();\n    maybeThrowDeterministicException();\n\n    if (crashed) {\n      throw new IOException(\"cannot rename after crash\");\n    }\n    \n    if (openFiles.containsKey(source) && assertNoDeleteOpenFile) {\n      throw (AssertionError) fillOpenTrace(new AssertionError(\"MockDirectoryWrapper: source file \\\"\" + source + \"\\\" is still open: cannot rename\"), source, true);\n    }\n\n    if (openFiles.containsKey(dest) && assertNoDeleteOpenFile) {\n      throw (AssertionError) fillOpenTrace(new AssertionError(\"MockDirectoryWrapper: dest file \\\"\" + dest + \"\\\" is still open: cannot rename\"), dest, true);\n    }\n\n    boolean success = false;\n    try {\n      in.renameFile(source, dest);\n      success = true;\n    } finally {\n      if (success) {\n        // we don't do this stuff with lucene's commit, but it's just for completeness\n        if (unSyncedFiles.contains(source)) {\n          unSyncedFiles.remove(source);\n          unSyncedFiles.add(dest);\n        }\n        openFilesDeleted.remove(source);\n        createdFiles.add(dest);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized void renameFile(String source, String dest) throws IOException {\n    maybeYield();\n    maybeThrowDeterministicException();\n\n    if (crashed) {\n      throw new IOException(\"cannot rename after crash\");\n    }\n    \n    if (assertNoDeleteOpenFile && openFiles.containsKey(source)) {\n      throw (AssertionError) fillOpenTrace(new AssertionError(\"MockDirectoryWrapper: file \\\"\" + source + \"\\\" is still open: cannot rename\"), source, true);\n    }\n\n    boolean success = false;\n    try {\n      in.renameFile(source, dest);\n      success = true;\n    } finally {\n      if (success) {\n        // we don't do this stuff with lucene's commit, but it's just for completeness\n        if (unSyncedFiles.contains(source)) {\n          unSyncedFiles.remove(source);\n          unSyncedFiles.add(dest);\n        }\n        openFilesDeleted.remove(source);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11c6df42fb3eba174c3ca0d9a5194eaecd893b77","date":1465931757,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#renameFile(String,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#renameFile(String,String).mjava","sourceNew":"  @Override\n  public synchronized void renameFile(String source, String dest) throws IOException {\n    maybeYield();\n    maybeThrowDeterministicException();\n\n    if (crashed) {\n      throw new IOException(\"cannot rename after crash\");\n    }\n    \n    if (openFiles.containsKey(source) && assertNoDeleteOpenFile) {\n      throw (AssertionError) fillOpenTrace(new AssertionError(\"MockDirectoryWrapper: source file \\\"\" + source + \"\\\" is still open: cannot rename\"), source, true);\n    }\n\n    if (openFiles.containsKey(dest) && assertNoDeleteOpenFile) {\n      throw (AssertionError) fillOpenTrace(new AssertionError(\"MockDirectoryWrapper: dest file \\\"\" + dest + \"\\\" is still open: cannot rename\"), dest, true);\n    }\n\n    boolean success = false;\n    try {\n      in.renameFile(source, dest);\n      success = true;\n    } finally {\n      if (success) {\n        // we don't do this stuff with lucene's commit, but it's just for completeness\n        if (unSyncedFiles.contains(source)) {\n          unSyncedFiles.remove(source);\n          unSyncedFiles.add(dest);\n        }\n        openFilesDeleted.remove(source);\n        createdFiles.remove(source);\n        createdFiles.add(dest);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized void renameFile(String source, String dest) throws IOException {\n    maybeYield();\n    maybeThrowDeterministicException();\n\n    if (crashed) {\n      throw new IOException(\"cannot rename after crash\");\n    }\n    \n    if (openFiles.containsKey(source) && assertNoDeleteOpenFile) {\n      throw (AssertionError) fillOpenTrace(new AssertionError(\"MockDirectoryWrapper: source file \\\"\" + source + \"\\\" is still open: cannot rename\"), source, true);\n    }\n\n    if (openFiles.containsKey(dest) && assertNoDeleteOpenFile) {\n      throw (AssertionError) fillOpenTrace(new AssertionError(\"MockDirectoryWrapper: dest file \\\"\" + dest + \"\\\" is still open: cannot rename\"), dest, true);\n    }\n\n    boolean success = false;\n    try {\n      in.renameFile(source, dest);\n      success = true;\n    } finally {\n      if (success) {\n        // we don't do this stuff with lucene's commit, but it's just for completeness\n        if (unSyncedFiles.contains(source)) {\n          unSyncedFiles.remove(source);\n          unSyncedFiles.add(dest);\n        }\n        openFilesDeleted.remove(source);\n        createdFiles.add(dest);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"214256b5eeeaba88b8293b37d30460b462b19562","date":1468250146,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#rename(String,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#renameFile(String,String).mjava","sourceNew":"  @Override\n  public synchronized void rename(String source, String dest) throws IOException {\n    maybeYield();\n    maybeThrowDeterministicException();\n\n    if (crashed) {\n      throw new IOException(\"cannot rename after crash\");\n    }\n    \n    if (openFiles.containsKey(source) && assertNoDeleteOpenFile) {\n      throw (AssertionError) fillOpenTrace(new AssertionError(\"MockDirectoryWrapper: source file \\\"\" + source + \"\\\" is still open: cannot rename\"), source, true);\n    }\n\n    if (openFiles.containsKey(dest) && assertNoDeleteOpenFile) {\n      throw (AssertionError) fillOpenTrace(new AssertionError(\"MockDirectoryWrapper: dest file \\\"\" + dest + \"\\\" is still open: cannot rename\"), dest, true);\n    }\n\n    boolean success = false;\n    try {\n      in.rename(source, dest);\n      success = true;\n    } finally {\n      if (success) {\n        // we don't do this stuff with lucene's commit, but it's just for completeness\n        if (unSyncedFiles.contains(source)) {\n          unSyncedFiles.remove(source);\n          unSyncedFiles.add(dest);\n        }\n        openFilesDeleted.remove(source);\n        createdFiles.remove(source);\n        createdFiles.add(dest);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized void renameFile(String source, String dest) throws IOException {\n    maybeYield();\n    maybeThrowDeterministicException();\n\n    if (crashed) {\n      throw new IOException(\"cannot rename after crash\");\n    }\n    \n    if (openFiles.containsKey(source) && assertNoDeleteOpenFile) {\n      throw (AssertionError) fillOpenTrace(new AssertionError(\"MockDirectoryWrapper: source file \\\"\" + source + \"\\\" is still open: cannot rename\"), source, true);\n    }\n\n    if (openFiles.containsKey(dest) && assertNoDeleteOpenFile) {\n      throw (AssertionError) fillOpenTrace(new AssertionError(\"MockDirectoryWrapper: dest file \\\"\" + dest + \"\\\" is still open: cannot rename\"), dest, true);\n    }\n\n    boolean success = false;\n    try {\n      in.renameFile(source, dest);\n      success = true;\n    } finally {\n      if (success) {\n        // we don't do this stuff with lucene's commit, but it's just for completeness\n        if (unSyncedFiles.contains(source)) {\n          unSyncedFiles.remove(source);\n          unSyncedFiles.add(dest);\n        }\n        openFilesDeleted.remove(source);\n        createdFiles.remove(source);\n        createdFiles.add(dest);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#renameFile(String,String).mjava","sourceNew":null,"sourceOld":"  @Override\n  public synchronized void renameFile(String source, String dest) throws IOException {\n    maybeYield();\n    maybeThrowDeterministicException();\n\n    if (crashed) {\n      throw new IOException(\"cannot rename after crash\");\n    }\n    \n    if (openFiles.containsKey(source) && assertNoDeleteOpenFile) {\n      throw (AssertionError) fillOpenTrace(new AssertionError(\"MockDirectoryWrapper: source file \\\"\" + source + \"\\\" is still open: cannot rename\"), source, true);\n    }\n\n    if (openFiles.containsKey(dest) && assertNoDeleteOpenFile) {\n      throw (AssertionError) fillOpenTrace(new AssertionError(\"MockDirectoryWrapper: dest file \\\"\" + dest + \"\\\" is still open: cannot rename\"), dest, true);\n    }\n\n    boolean success = false;\n    try {\n      in.renameFile(source, dest);\n      success = true;\n    } finally {\n      if (success) {\n        // we don't do this stuff with lucene's commit, but it's just for completeness\n        if (unSyncedFiles.contains(source)) {\n          unSyncedFiles.remove(source);\n          unSyncedFiles.add(dest);\n        }\n        openFilesDeleted.remove(source);\n        createdFiles.add(dest);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4a8ec0889b27701f0ad90a25c95b75454e898cf3":["1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"214256b5eeeaba88b8293b37d30460b462b19562":["11c6df42fb3eba174c3ca0d9a5194eaecd893b77"],"5a207d19eac354d649c3f0e2cce070017c78125e":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","b470f36a9372c97283360b1304eacbde22df6c0d"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["0d49a158012a8ff48f328a4558e4bfcffbaed16f","b470f36a9372c97283360b1304eacbde22df6c0d"],"11c6df42fb3eba174c3ca0d9a5194eaecd893b77":["68496c2200e559fb7802f7575427b7a482659afb"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["68496c2200e559fb7802f7575427b7a482659afb","214256b5eeeaba88b8293b37d30460b462b19562"],"46e4a8bdfbafda795ef9c39a2bc2d47095770299":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["46e4a8bdfbafda795ef9c39a2bc2d47095770299"],"b470f36a9372c97283360b1304eacbde22df6c0d":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"68496c2200e559fb7802f7575427b7a482659afb":["5a207d19eac354d649c3f0e2cce070017c78125e","4a8ec0889b27701f0ad90a25c95b75454e898cf3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["214256b5eeeaba88b8293b37d30460b462b19562"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"]},"commit2Childs":{"4a8ec0889b27701f0ad90a25c95b75454e898cf3":["68496c2200e559fb7802f7575427b7a482659afb"],"214256b5eeeaba88b8293b37d30460b462b19562":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5a207d19eac354d649c3f0e2cce070017c78125e":["68496c2200e559fb7802f7575427b7a482659afb"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["4a8ec0889b27701f0ad90a25c95b75454e898cf3"],"11c6df42fb3eba174c3ca0d9a5194eaecd893b77":["214256b5eeeaba88b8293b37d30460b462b19562"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"46e4a8bdfbafda795ef9c39a2bc2d47095770299":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["5a207d19eac354d649c3f0e2cce070017c78125e","b470f36a9372c97283360b1304eacbde22df6c0d","6bfe104fc023fadc9e709f8d17403d2cc61133fe","0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["46e4a8bdfbafda795ef9c39a2bc2d47095770299"],"68496c2200e559fb7802f7575427b7a482659afb":["11c6df42fb3eba174c3ca0d9a5194eaecd893b77","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["b470f36a9372c97283360b1304eacbde22df6c0d"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}