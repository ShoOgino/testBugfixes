{"path":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsWriter#writeField(FieldInfo,IndexableField).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsWriter#writeField(FieldInfo,IndexableField).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextStoredFieldsWriter#writeField(FieldInfo,IndexableField).mjava","sourceNew":"  @Override\n  public void writeField(FieldInfo info, IndexableField field) throws IOException {\n    write(FIELD);\n    write(Integer.toString(info.number));\n    newLine();\n    \n    write(NAME);\n    write(field.name());\n    newLine();\n    \n    write(TYPE);\n    if (field.numeric()) {\n      switch (field.numericDataType()) {\n        case INT:\n          write(TYPE_INT);\n          newLine();\n          \n          write(VALUE);\n          write(Integer.toString(field.numericValue().intValue()));\n          newLine();\n          \n          break;\n        case LONG:\n          write(TYPE_LONG);\n          newLine();\n          \n          write(VALUE);\n          write(Long.toString(field.numericValue().longValue()));\n          newLine();\n          \n          break;\n        case FLOAT:\n          write(TYPE_FLOAT);\n          newLine();\n          \n          write(VALUE);\n          write(Float.toString(field.numericValue().floatValue()));\n          newLine();\n          \n          break;\n        case DOUBLE:\n          write(TYPE_DOUBLE);\n          newLine();\n          \n          write(VALUE);\n          write(Double.toString(field.numericValue().doubleValue()));\n          newLine();\n          \n          break;\n        default:\n          assert false : \"Should never get here\";\n      }\n    } else { \n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        write(TYPE_BINARY);\n        newLine();\n        \n        write(VALUE);\n        write(bytes);\n        newLine();\n      } else if (field.stringValue() == null) {\n        throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n      } else {\n        write(TYPE_STRING);\n        newLine();\n        \n        write(VALUE);\n        write(field.stringValue());\n        newLine();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeField(FieldInfo info, IndexableField field) throws IOException {\n    write(FIELD);\n    write(Integer.toString(info.number));\n    newLine();\n    \n    write(NAME);\n    write(field.name());\n    newLine();\n    \n    write(TYPE);\n    if (field.numeric()) {\n      switch (field.numericDataType()) {\n        case INT:\n          write(TYPE_INT);\n          newLine();\n          \n          write(VALUE);\n          write(Integer.toString(field.numericValue().intValue()));\n          newLine();\n          \n          break;\n        case LONG:\n          write(TYPE_LONG);\n          newLine();\n          \n          write(VALUE);\n          write(Long.toString(field.numericValue().longValue()));\n          newLine();\n          \n          break;\n        case FLOAT:\n          write(TYPE_FLOAT);\n          newLine();\n          \n          write(VALUE);\n          write(Float.toString(field.numericValue().floatValue()));\n          newLine();\n          \n          break;\n        case DOUBLE:\n          write(TYPE_DOUBLE);\n          newLine();\n          \n          write(VALUE);\n          write(Double.toString(field.numericValue().doubleValue()));\n          newLine();\n          \n          break;\n        default:\n          assert false : \"Should never get here\";\n      }\n    } else { \n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        write(TYPE_BINARY);\n        newLine();\n        \n        write(VALUE);\n        write(bytes);\n        newLine();\n      } else if (field.stringValue() == null) {\n        throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n      } else {\n        write(TYPE_STRING);\n        newLine();\n        \n        write(VALUE);\n        write(field.stringValue());\n        newLine();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa0f44f887719e97183771e977cfc4bfb485b766","date":1326668713,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsWriter#writeField(FieldInfo,IndexableField).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsWriter#writeField(FieldInfo,IndexableField).mjava","sourceNew":"  @Override\n  public void writeField(FieldInfo info, IndexableField field) throws IOException {\n    write(FIELD);\n    write(Integer.toString(info.number));\n    newLine();\n    \n    write(NAME);\n    write(field.name());\n    newLine();\n    \n    write(TYPE);\n    final Number n = field.numericValue();\n\n    if (n != null) {\n      if (n instanceof Byte || n instanceof Short || n instanceof Integer) {\n        write(TYPE_INT);\n        newLine();\n          \n        write(VALUE);\n        write(Integer.toString(n.intValue()));\n        newLine();\n      } else if (n instanceof Long) {\n        write(TYPE_LONG);\n        newLine();\n\n        write(VALUE);\n        write(Long.toString(n.longValue()));\n        newLine();\n      } else if (n instanceof Float) {\n        write(TYPE_FLOAT);\n        newLine();\n          \n        write(VALUE);\n        write(Float.toString(n.floatValue()));\n        newLine();\n      } else if (n instanceof Double) {\n        write(TYPE_DOUBLE);\n        newLine();\n          \n        write(VALUE);\n        write(Double.toString(n.doubleValue()));\n        newLine();\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + n.getClass());\n      }\n    } else { \n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        write(TYPE_BINARY);\n        newLine();\n        \n        write(VALUE);\n        write(bytes);\n        newLine();\n      } else if (field.stringValue() == null) {\n        throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n      } else {\n        write(TYPE_STRING);\n        newLine();\n        \n        write(VALUE);\n        write(field.stringValue());\n        newLine();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeField(FieldInfo info, IndexableField field) throws IOException {\n    write(FIELD);\n    write(Integer.toString(info.number));\n    newLine();\n    \n    write(NAME);\n    write(field.name());\n    newLine();\n    \n    write(TYPE);\n    if (field.numeric()) {\n      switch (field.numericDataType()) {\n        case INT:\n          write(TYPE_INT);\n          newLine();\n          \n          write(VALUE);\n          write(Integer.toString(field.numericValue().intValue()));\n          newLine();\n          \n          break;\n        case LONG:\n          write(TYPE_LONG);\n          newLine();\n          \n          write(VALUE);\n          write(Long.toString(field.numericValue().longValue()));\n          newLine();\n          \n          break;\n        case FLOAT:\n          write(TYPE_FLOAT);\n          newLine();\n          \n          write(VALUE);\n          write(Float.toString(field.numericValue().floatValue()));\n          newLine();\n          \n          break;\n        case DOUBLE:\n          write(TYPE_DOUBLE);\n          newLine();\n          \n          write(VALUE);\n          write(Double.toString(field.numericValue().doubleValue()));\n          newLine();\n          \n          break;\n        default:\n          assert false : \"Should never get here\";\n      }\n    } else { \n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        write(TYPE_BINARY);\n        newLine();\n        \n        write(VALUE);\n        write(bytes);\n        newLine();\n      } else if (field.stringValue() == null) {\n        throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n      } else {\n        write(TYPE_STRING);\n        newLine();\n        \n        write(VALUE);\n        write(field.stringValue());\n        newLine();\n      }\n    }\n  }\n\n","bugFix":["3cc749c053615f5871f3b95715fe292f34e70a53"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsWriter#writeField(FieldInfo,IndexableField).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsWriter#writeField(FieldInfo,IndexableField).mjava","sourceNew":"  @Override\n  public void writeField(FieldInfo info, IndexableField field) throws IOException {\n    write(FIELD);\n    write(Integer.toString(info.number));\n    newLine();\n    \n    write(NAME);\n    write(field.name());\n    newLine();\n    \n    write(TYPE);\n    final Number n = field.numericValue();\n\n    if (n != null) {\n      if (n instanceof Byte || n instanceof Short || n instanceof Integer) {\n        write(TYPE_INT);\n        newLine();\n          \n        write(VALUE);\n        write(Integer.toString(n.intValue()));\n        newLine();\n      } else if (n instanceof Long) {\n        write(TYPE_LONG);\n        newLine();\n\n        write(VALUE);\n        write(Long.toString(n.longValue()));\n        newLine();\n      } else if (n instanceof Float) {\n        write(TYPE_FLOAT);\n        newLine();\n          \n        write(VALUE);\n        write(Float.toString(n.floatValue()));\n        newLine();\n      } else if (n instanceof Double) {\n        write(TYPE_DOUBLE);\n        newLine();\n          \n        write(VALUE);\n        write(Double.toString(n.doubleValue()));\n        newLine();\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + n.getClass());\n      }\n    } else { \n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        write(TYPE_BINARY);\n        newLine();\n        \n        write(VALUE);\n        write(bytes);\n        newLine();\n      } else if (field.stringValue() == null) {\n        throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n      } else {\n        write(TYPE_STRING);\n        newLine();\n        \n        write(VALUE);\n        write(field.stringValue());\n        newLine();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeField(FieldInfo info, IndexableField field) throws IOException {\n    write(FIELD);\n    write(Integer.toString(info.number));\n    newLine();\n    \n    write(NAME);\n    write(field.name());\n    newLine();\n    \n    write(TYPE);\n    final Number n = field.numericValue();\n\n    if (n != null) {\n      if (n instanceof Byte || n instanceof Short || n instanceof Integer) {\n        write(TYPE_INT);\n        newLine();\n          \n        write(VALUE);\n        write(Integer.toString(n.intValue()));\n        newLine();\n      } else if (n instanceof Long) {\n        write(TYPE_LONG);\n        newLine();\n\n        write(VALUE);\n        write(Long.toString(n.longValue()));\n        newLine();\n      } else if (n instanceof Float) {\n        write(TYPE_FLOAT);\n        newLine();\n          \n        write(VALUE);\n        write(Float.toString(n.floatValue()));\n        newLine();\n      } else if (n instanceof Double) {\n        write(TYPE_DOUBLE);\n        newLine();\n          \n        write(VALUE);\n        write(Double.toString(n.doubleValue()));\n        newLine();\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + n.getClass());\n      }\n    } else { \n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        write(TYPE_BINARY);\n        newLine();\n        \n        write(VALUE);\n        write(bytes);\n        newLine();\n      } else if (field.stringValue() == null) {\n        throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n      } else {\n        write(TYPE_STRING);\n        newLine();\n        \n        write(VALUE);\n        write(field.stringValue());\n        newLine();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fa0f44f887719e97183771e977cfc4bfb485b766"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa0f44f887719e97183771e977cfc4bfb485b766":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"fa0f44f887719e97183771e977cfc4bfb485b766":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["fa0f44f887719e97183771e977cfc4bfb485b766"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}