{"path":"lucene/core/src/test/org/apache/lucene/search/TestSimpleExplanations#testBQ20().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimpleExplanations#testBQ20().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSimpleExplanations#testBQ20().mjava","sourceNew":"  public void testBQ20() throws Exception {\n    BooleanQuery q = new BooleanQuery();\n    q.setMinimumNumberShouldMatch(2);\n    q.add(new TermQuery(new Term(FIELD, \"QQQQQ\")), BooleanClause.Occur.SHOULD);\n    q.add(new TermQuery(new Term(FIELD, \"yy\")), BooleanClause.Occur.SHOULD);\n    q.add(new TermQuery(new Term(FIELD, \"zz\")), BooleanClause.Occur.SHOULD);\n    q.add(new TermQuery(new Term(FIELD, \"w5\")), BooleanClause.Occur.SHOULD);\n    q.add(new TermQuery(new Term(FIELD, \"w4\")), BooleanClause.Occur.SHOULD);\n    \n    qtest(q, new int[] { 0,3 });\n    \n  }\n\n","sourceOld":"  public void testBQ20() throws Exception {\n    BooleanQuery q = new BooleanQuery();\n    q.setMinimumNumberShouldMatch(2);\n    q.add(new TermQuery(new Term(FIELD, \"QQQQQ\")), BooleanClause.Occur.SHOULD);\n    q.add(new TermQuery(new Term(FIELD, \"yy\")), BooleanClause.Occur.SHOULD);\n    q.add(new TermQuery(new Term(FIELD, \"zz\")), BooleanClause.Occur.SHOULD);\n    q.add(new TermQuery(new Term(FIELD, \"w5\")), BooleanClause.Occur.SHOULD);\n    q.add(new TermQuery(new Term(FIELD, \"w4\")), BooleanClause.Occur.SHOULD);\n    \n    qtest(q, new int[] { 0,3 });\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimpleExplanations#testBQ20().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSimpleExplanations#testBQ20().mjava","sourceNew":"  public void testBQ20() throws Exception {\n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n    q.setMinimumNumberShouldMatch(2);\n    q.add(new TermQuery(new Term(FIELD, \"QQQQQ\")), BooleanClause.Occur.SHOULD);\n    q.add(new TermQuery(new Term(FIELD, \"yy\")), BooleanClause.Occur.SHOULD);\n    q.add(new TermQuery(new Term(FIELD, \"zz\")), BooleanClause.Occur.SHOULD);\n    q.add(new TermQuery(new Term(FIELD, \"w5\")), BooleanClause.Occur.SHOULD);\n    q.add(new TermQuery(new Term(FIELD, \"w4\")), BooleanClause.Occur.SHOULD);\n    \n    qtest(q.build(), new int[] { 0,3 });\n    \n  }\n\n","sourceOld":"  public void testBQ20() throws Exception {\n    BooleanQuery q = new BooleanQuery();\n    q.setMinimumNumberShouldMatch(2);\n    q.add(new TermQuery(new Term(FIELD, \"QQQQQ\")), BooleanClause.Occur.SHOULD);\n    q.add(new TermQuery(new Term(FIELD, \"yy\")), BooleanClause.Occur.SHOULD);\n    q.add(new TermQuery(new Term(FIELD, \"zz\")), BooleanClause.Occur.SHOULD);\n    q.add(new TermQuery(new Term(FIELD, \"w5\")), BooleanClause.Occur.SHOULD);\n    q.add(new TermQuery(new Term(FIELD, \"w4\")), BooleanClause.Occur.SHOULD);\n    \n    qtest(q, new int[] { 0,3 });\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c82b0d4b7bf499a159eeff92add20bac6599cc1","date":1465223716,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimpleExplanations#testBQ20().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSimpleExplanations#testBQ20().mjava","sourceNew":"  public void testBQ20() throws Exception {\n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n    q.setDisableCoord(random().nextBoolean());\n    q.setMinimumNumberShouldMatch(2);\n    q.add(new TermQuery(new Term(FIELD, \"QQQQQ\")), BooleanClause.Occur.SHOULD);\n    q.add(new TermQuery(new Term(FIELD, \"yy\")), BooleanClause.Occur.SHOULD);\n    q.add(new TermQuery(new Term(FIELD, \"zz\")), BooleanClause.Occur.SHOULD);\n    q.add(new TermQuery(new Term(FIELD, \"w5\")), BooleanClause.Occur.SHOULD);\n    q.add(new TermQuery(new Term(FIELD, \"w4\")), BooleanClause.Occur.SHOULD);\n    \n    qtest(q.build(), new int[] { 0,3 });\n    \n  }\n\n","sourceOld":"  public void testBQ20() throws Exception {\n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n    q.setMinimumNumberShouldMatch(2);\n    q.add(new TermQuery(new Term(FIELD, \"QQQQQ\")), BooleanClause.Occur.SHOULD);\n    q.add(new TermQuery(new Term(FIELD, \"yy\")), BooleanClause.Occur.SHOULD);\n    q.add(new TermQuery(new Term(FIELD, \"zz\")), BooleanClause.Occur.SHOULD);\n    q.add(new TermQuery(new Term(FIELD, \"w5\")), BooleanClause.Occur.SHOULD);\n    q.add(new TermQuery(new Term(FIELD, \"w4\")), BooleanClause.Occur.SHOULD);\n    \n    qtest(q.build(), new int[] { 0,3 });\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"191128ac5b85671b1671e2c857437694283b6ebf","date":1465297861,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimpleExplanations#testBQ20().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSimpleExplanations#testBQ20().mjava","sourceNew":"  public void testBQ20() throws Exception {\n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n    q.setDisableCoord(random().nextBoolean());\n    q.setMinimumNumberShouldMatch(2);\n    q.add(new TermQuery(new Term(FIELD, \"QQQQQ\")), BooleanClause.Occur.SHOULD);\n    q.add(new TermQuery(new Term(FIELD, \"yy\")), BooleanClause.Occur.SHOULD);\n    q.add(new TermQuery(new Term(FIELD, \"zz\")), BooleanClause.Occur.SHOULD);\n    q.add(new TermQuery(new Term(FIELD, \"w5\")), BooleanClause.Occur.SHOULD);\n    q.add(new TermQuery(new Term(FIELD, \"w4\")), BooleanClause.Occur.SHOULD);\n    \n    qtest(q.build(), new int[] { 0,3 });\n    \n  }\n\n","sourceOld":"  public void testBQ20() throws Exception {\n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n    q.setMinimumNumberShouldMatch(2);\n    q.add(new TermQuery(new Term(FIELD, \"QQQQQ\")), BooleanClause.Occur.SHOULD);\n    q.add(new TermQuery(new Term(FIELD, \"yy\")), BooleanClause.Occur.SHOULD);\n    q.add(new TermQuery(new Term(FIELD, \"zz\")), BooleanClause.Occur.SHOULD);\n    q.add(new TermQuery(new Term(FIELD, \"w5\")), BooleanClause.Occur.SHOULD);\n    q.add(new TermQuery(new Term(FIELD, \"w4\")), BooleanClause.Occur.SHOULD);\n    \n    qtest(q.build(), new int[] { 0,3 });\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimpleExplanations#testBQ20().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSimpleExplanations#testBQ20().mjava","sourceNew":"  public void testBQ20() throws Exception {\n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n    q.setMinimumNumberShouldMatch(2);\n    q.add(new TermQuery(new Term(FIELD, \"QQQQQ\")), BooleanClause.Occur.SHOULD);\n    q.add(new TermQuery(new Term(FIELD, \"yy\")), BooleanClause.Occur.SHOULD);\n    q.add(new TermQuery(new Term(FIELD, \"zz\")), BooleanClause.Occur.SHOULD);\n    q.add(new TermQuery(new Term(FIELD, \"w5\")), BooleanClause.Occur.SHOULD);\n    q.add(new TermQuery(new Term(FIELD, \"w4\")), BooleanClause.Occur.SHOULD);\n    \n    qtest(q.build(), new int[] { 0,3 });\n    \n  }\n\n","sourceOld":"  public void testBQ20() throws Exception {\n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n    q.setDisableCoord(random().nextBoolean());\n    q.setMinimumNumberShouldMatch(2);\n    q.add(new TermQuery(new Term(FIELD, \"QQQQQ\")), BooleanClause.Occur.SHOULD);\n    q.add(new TermQuery(new Term(FIELD, \"yy\")), BooleanClause.Occur.SHOULD);\n    q.add(new TermQuery(new Term(FIELD, \"zz\")), BooleanClause.Occur.SHOULD);\n    q.add(new TermQuery(new Term(FIELD, \"w5\")), BooleanClause.Occur.SHOULD);\n    q.add(new TermQuery(new Term(FIELD, \"w4\")), BooleanClause.Occur.SHOULD);\n    \n    qtest(q.build(), new int[] { 0,3 });\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7c82b0d4b7bf499a159eeff92add20bac6599cc1":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c8a0e442f7b61f811680273b25da95994a724466":["191128ac5b85671b1671e2c857437694283b6ebf"],"191128ac5b85671b1671e2c857437694283b6ebf":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","7c82b0d4b7bf499a159eeff92add20bac6599cc1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c8a0e442f7b61f811680273b25da95994a724466"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["7c82b0d4b7bf499a159eeff92add20bac6599cc1","191128ac5b85671b1671e2c857437694283b6ebf"],"7c82b0d4b7bf499a159eeff92add20bac6599cc1":["191128ac5b85671b1671e2c857437694283b6ebf"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c8a0e442f7b61f811680273b25da95994a724466":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"191128ac5b85671b1671e2c857437694283b6ebf":["c8a0e442f7b61f811680273b25da95994a724466"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}