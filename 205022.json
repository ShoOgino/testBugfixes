{"path":"lucene/core/src/java/org/apache/lucene/index/LeafReader#termPositionsEnum(Term).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":1,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LeafReader#termPositionsEnum(Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#termPositionsEnum(Term).mjava","sourceNew":"  /** Returns {@link DocsAndPositionsEnum} for the specified\n   *  term.  This will return null if the\n   *  field or term does not exist or positions weren't indexed.\n   *  @see TermsEnum#docsAndPositions(Bits, DocsAndPositionsEnum) */\n  public final DocsAndPositionsEnum termPositionsEnum(Term term) throws IOException {\n    assert term.field() != null;\n    assert term.bytes() != null;\n    final Fields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(term.field());\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term.bytes())) {\n          return termsEnum.docsAndPositions(getLiveDocs(), null);\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /** Returns {@link DocsAndPositionsEnum} for the specified\n   *  term.  This will return null if the\n   *  field or term does not exist or positions weren't indexed.\n   *  @see TermsEnum#docsAndPositions(Bits, DocsAndPositionsEnum) */\n  public final DocsAndPositionsEnum termPositionsEnum(Term term) throws IOException {\n    assert term.field() != null;\n    assert term.bytes() != null;\n    final Fields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(term.field());\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term.bytes())) {\n          return termsEnum.docsAndPositions(getLiveDocs(), null);\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8028ab7a24273833d53d35eb160dba5b57283cf5","date":1416767720,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LeafReader#termPositionsEnum(Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LeafReader#termPositionsEnum(Term).mjava","sourceNew":"  /** Returns {@link DocsAndPositionsEnum} for the specified\n   *  term.  This will return null if the\n   *  field or term does not exist or positions weren't indexed.\n   *  @see TermsEnum#docsAndPositions(Bits, DocsAndPositionsEnum) */\n  public final DocsAndPositionsEnum termPositionsEnum(Term term) throws IOException {\n    assert term.field() != null;\n    assert term.bytes() != null;\n    final Terms terms = terms(term.field());\n    if (terms != null) {\n      final TermsEnum termsEnum = terms.iterator(null);\n      if (termsEnum.seekExact(term.bytes())) {\n        return termsEnum.docsAndPositions(getLiveDocs(), null);\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /** Returns {@link DocsAndPositionsEnum} for the specified\n   *  term.  This will return null if the\n   *  field or term does not exist or positions weren't indexed.\n   *  @see TermsEnum#docsAndPositions(Bits, DocsAndPositionsEnum) */\n  public final DocsAndPositionsEnum termPositionsEnum(Term term) throws IOException {\n    assert term.field() != null;\n    assert term.bytes() != null;\n    final Fields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(term.field());\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term.bytes())) {\n          return termsEnum.docsAndPositions(getLiveDocs(), null);\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":["b6a0e3c1c21aac8ecf75706605133012833585c7","eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LeafReader#termDocsEnum(Term,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LeafReader#termPositionsEnum(Term).mjava","sourceNew":"  /** Returns {@link PostingsEnum} for the specified term.\n   *  This will return null if either the field or\n   *  term does not exist.\n   *  @see TermsEnum#postings(Bits, PostingsEnum) */\n  public final PostingsEnum termDocsEnum(Term term, int flags) throws IOException {\n    assert term.field() != null;\n    assert term.bytes() != null;\n    final Terms terms = terms(term.field());\n    if (terms != null) {\n      final TermsEnum termsEnum = terms.iterator(null);\n      if (termsEnum.seekExact(term.bytes())) {\n        return termsEnum.postings(getLiveDocs(), null, flags);\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /** Returns {@link DocsAndPositionsEnum} for the specified\n   *  term.  This will return null if the\n   *  field or term does not exist or positions weren't indexed.\n   *  @see TermsEnum#docsAndPositions(Bits, DocsAndPositionsEnum) */\n  public final DocsAndPositionsEnum termPositionsEnum(Term term) throws IOException {\n    assert term.field() != null;\n    assert term.bytes() != null;\n    final Terms terms = terms(term.field());\n    if (terms != null) {\n      final TermsEnum termsEnum = terms.iterator(null);\n      if (termsEnum.seekExact(term.bytes())) {\n        return termsEnum.docsAndPositions(getLiveDocs(), null);\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8028ab7a24273833d53d35eb160dba5b57283cf5":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"51f5280f31484820499077f41fcdfe92d527d9dc":["8028ab7a24273833d53d35eb160dba5b57283cf5"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["51f5280f31484820499077f41fcdfe92d527d9dc"]},"commit2Childs":{"8028ab7a24273833d53d35eb160dba5b57283cf5":["51f5280f31484820499077f41fcdfe92d527d9dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"51f5280f31484820499077f41fcdfe92d527d9dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["8028ab7a24273833d53d35eb160dba5b57283cf5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}