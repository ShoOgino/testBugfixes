{"path":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CompactLabelToOrdinal#grow().mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CompactLabelToOrdinal#grow().mjava","pathOld":"/dev/null","sourceNew":"  private void grow() {\n    HashArray temp = this.hashArrays[this.hashArrays.length - 1];\n\n    for (int i = this.hashArrays.length - 1; i > 0; i--) {\n      this.hashArrays[i] = this.hashArrays[i - 1];\n    }\n\n    this.capacity *= 2;\n    this.hashArrays[0] = new HashArray(this.capacity);\n\n    for (int i = 1; i < this.hashArrays.length; i++) {\n      int[] sourceOffsetArray = this.hashArrays[i].offsets;\n      int[] sourceCidsArray = this.hashArrays[i].cids;\n\n      for (int k = 0; k < sourceOffsetArray.length; k++) {\n\n        for (int j = 0; j < i && sourceOffsetArray[k] != 0; j++) {\n          int[] targetOffsetArray = this.hashArrays[j].offsets;\n          int[] targetCidsArray = this.hashArrays[j].cids;\n\n          int newIndex = indexFor(stringHashCode(\n              this.labelRepository, sourceOffsetArray[k]),\n              targetOffsetArray.length);\n          if (targetOffsetArray[newIndex] == 0) {\n            targetOffsetArray[newIndex] = sourceOffsetArray[k];\n            targetCidsArray[newIndex] = sourceCidsArray[k];\n            sourceOffsetArray[k] = 0;\n          }\n        }\n      }\n    }\n\n    for (int i = 0; i < temp.offsets.length; i++) {\n      int offset = temp.offsets[i];\n      if (offset > 0) {\n        int hash = stringHashCode(this.labelRepository, offset);\n        addLabelOffset(hash, temp.cids[i], offset);\n      }\n    }\n\n    CollisionMap oldCollisionMap = this.collisionMap;\n    this.collisionMap = new CollisionMap(oldCollisionMap.capacity(),\n        this.labelRepository);\n    this.threshold = (int) (this.capacity * this.loadFactor);\n\n    Iterator<CollisionMap.Entry> it = oldCollisionMap.entryIterator();\n    while (it.hasNext()) {\n      CollisionMap.Entry e = it.next();\n      addLabelOffset(stringHashCode(this.labelRepository, e.offset),\n          e.cid, e.offset);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CompactLabelToOrdinal#grow().mjava","pathOld":"/dev/null","sourceNew":"  private void grow() {\n    HashArray temp = this.hashArrays[this.hashArrays.length - 1];\n\n    for (int i = this.hashArrays.length - 1; i > 0; i--) {\n      this.hashArrays[i] = this.hashArrays[i - 1];\n    }\n\n    this.capacity *= 2;\n    this.hashArrays[0] = new HashArray(this.capacity);\n\n    for (int i = 1; i < this.hashArrays.length; i++) {\n      int[] sourceOffsetArray = this.hashArrays[i].offsets;\n      int[] sourceCidsArray = this.hashArrays[i].cids;\n\n      for (int k = 0; k < sourceOffsetArray.length; k++) {\n\n        for (int j = 0; j < i && sourceOffsetArray[k] != 0; j++) {\n          int[] targetOffsetArray = this.hashArrays[j].offsets;\n          int[] targetCidsArray = this.hashArrays[j].cids;\n\n          int newIndex = indexFor(stringHashCode(\n              this.labelRepository, sourceOffsetArray[k]),\n              targetOffsetArray.length);\n          if (targetOffsetArray[newIndex] == 0) {\n            targetOffsetArray[newIndex] = sourceOffsetArray[k];\n            targetCidsArray[newIndex] = sourceCidsArray[k];\n            sourceOffsetArray[k] = 0;\n          }\n        }\n      }\n    }\n\n    for (int i = 0; i < temp.offsets.length; i++) {\n      int offset = temp.offsets[i];\n      if (offset > 0) {\n        int hash = stringHashCode(this.labelRepository, offset);\n        addLabelOffset(hash, temp.cids[i], offset);\n      }\n    }\n\n    CollisionMap oldCollisionMap = this.collisionMap;\n    this.collisionMap = new CollisionMap(oldCollisionMap.capacity(),\n        this.labelRepository);\n    this.threshold = (int) (this.capacity * this.loadFactor);\n\n    Iterator<CollisionMap.Entry> it = oldCollisionMap.entryIterator();\n    while (it.hasNext()) {\n      CollisionMap.Entry e = it.next();\n      addLabelOffset(stringHashCode(this.labelRepository, e.offset),\n          e.cid, e.offset);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CompactLabelToOrdinal#grow().mjava","pathOld":"/dev/null","sourceNew":"  private void grow() {\n    HashArray temp = this.hashArrays[this.hashArrays.length - 1];\n\n    for (int i = this.hashArrays.length - 1; i > 0; i--) {\n      this.hashArrays[i] = this.hashArrays[i - 1];\n    }\n\n    this.capacity *= 2;\n    this.hashArrays[0] = new HashArray(this.capacity);\n\n    for (int i = 1; i < this.hashArrays.length; i++) {\n      int[] sourceOffsetArray = this.hashArrays[i].offsets;\n      int[] sourceCidsArray = this.hashArrays[i].cids;\n\n      for (int k = 0; k < sourceOffsetArray.length; k++) {\n\n        for (int j = 0; j < i && sourceOffsetArray[k] != 0; j++) {\n          int[] targetOffsetArray = this.hashArrays[j].offsets;\n          int[] targetCidsArray = this.hashArrays[j].cids;\n\n          int newIndex = indexFor(stringHashCode(\n              this.labelRepository, sourceOffsetArray[k]),\n              targetOffsetArray.length);\n          if (targetOffsetArray[newIndex] == 0) {\n            targetOffsetArray[newIndex] = sourceOffsetArray[k];\n            targetCidsArray[newIndex] = sourceCidsArray[k];\n            sourceOffsetArray[k] = 0;\n          }\n        }\n      }\n    }\n\n    for (int i = 0; i < temp.offsets.length; i++) {\n      int offset = temp.offsets[i];\n      if (offset > 0) {\n        int hash = stringHashCode(this.labelRepository, offset);\n        addLabelOffset(hash, temp.cids[i], offset);\n      }\n    }\n\n    CollisionMap oldCollisionMap = this.collisionMap;\n    this.collisionMap = new CollisionMap(oldCollisionMap.capacity(),\n        this.labelRepository);\n    this.threshold = (int) (this.capacity * this.loadFactor);\n\n    Iterator<CollisionMap.Entry> it = oldCollisionMap.entryIterator();\n    while (it.hasNext()) {\n      CollisionMap.Entry e = it.next();\n      addLabelOffset(stringHashCode(this.labelRepository, e.offset),\n          e.cid, e.offset);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CompactLabelToOrdinal#grow().mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CompactLabelToOrdinal#grow().mjava","sourceNew":"  private void grow() {\n    HashArray temp = this.hashArrays[this.hashArrays.length - 1];\n\n    for (int i = this.hashArrays.length - 1; i > 0; i--) {\n      this.hashArrays[i] = this.hashArrays[i - 1];\n    }\n\n    this.capacity *= 2;\n    this.hashArrays[0] = new HashArray(this.capacity);\n\n    for (int i = 1; i < this.hashArrays.length; i++) {\n      int[] sourceOffsetArray = this.hashArrays[i].offsets;\n      int[] sourceCidsArray = this.hashArrays[i].cids;\n\n      for (int k = 0; k < sourceOffsetArray.length; k++) {\n\n        for (int j = 0; j < i && sourceOffsetArray[k] != 0; j++) {\n          int[] targetOffsetArray = this.hashArrays[j].offsets;\n          int[] targetCidsArray = this.hashArrays[j].cids;\n\n          int newIndex = indexFor(stringHashCode(\n              this.labelRepository, sourceOffsetArray[k]),\n              targetOffsetArray.length);\n          if (targetOffsetArray[newIndex] == 0) {\n            targetOffsetArray[newIndex] = sourceOffsetArray[k];\n            targetCidsArray[newIndex] = sourceCidsArray[k];\n            sourceOffsetArray[k] = 0;\n          }\n        }\n      }\n    }\n\n    for (int i = 0; i < temp.offsets.length; i++) {\n      int offset = temp.offsets[i];\n      if (offset > 0) {\n        int hash = stringHashCode(this.labelRepository, offset);\n        addLabelOffset(hash, temp.cids[i], offset);\n      }\n    }\n\n    CollisionMap oldCollisionMap = this.collisionMap;\n    this.collisionMap = new CollisionMap(oldCollisionMap.capacity(),\n        this.labelRepository);\n    this.threshold = (int) (this.capacity * this.loadFactor);\n\n    Iterator<CollisionMap.Entry> it = oldCollisionMap.entryIterator();\n    while (it.hasNext()) {\n      CollisionMap.Entry e = it.next();\n      addLabelOffset(stringHashCode(this.labelRepository, e.offset),\n          e.cid, e.offset);\n    }\n  }\n\n","sourceOld":"  private void grow() {\n    HashArray temp = this.hashArrays[this.hashArrays.length - 1];\n\n    for (int i = this.hashArrays.length - 1; i > 0; i--) {\n      this.hashArrays[i] = this.hashArrays[i - 1];\n    }\n\n    this.capacity *= 2;\n    this.hashArrays[0] = new HashArray(this.capacity);\n\n    for (int i = 1; i < this.hashArrays.length; i++) {\n      int[] sourceOffsetArray = this.hashArrays[i].offsets;\n      int[] sourceCidsArray = this.hashArrays[i].cids;\n\n      for (int k = 0; k < sourceOffsetArray.length; k++) {\n\n        for (int j = 0; j < i && sourceOffsetArray[k] != 0; j++) {\n          int[] targetOffsetArray = this.hashArrays[j].offsets;\n          int[] targetCidsArray = this.hashArrays[j].cids;\n\n          int newIndex = indexFor(stringHashCode(\n              this.labelRepository, sourceOffsetArray[k]),\n              targetOffsetArray.length);\n          if (targetOffsetArray[newIndex] == 0) {\n            targetOffsetArray[newIndex] = sourceOffsetArray[k];\n            targetCidsArray[newIndex] = sourceCidsArray[k];\n            sourceOffsetArray[k] = 0;\n          }\n        }\n      }\n    }\n\n    for (int i = 0; i < temp.offsets.length; i++) {\n      int offset = temp.offsets[i];\n      if (offset > 0) {\n        int hash = stringHashCode(this.labelRepository, offset);\n        addLabelOffset(hash, temp.cids[i], offset);\n      }\n    }\n\n    CollisionMap oldCollisionMap = this.collisionMap;\n    this.collisionMap = new CollisionMap(oldCollisionMap.capacity(),\n        this.labelRepository);\n    this.threshold = (int) (this.capacity * this.loadFactor);\n\n    Iterator<CollisionMap.Entry> it = oldCollisionMap.entryIterator();\n    while (it.hasNext()) {\n      CollisionMap.Entry e = it.next();\n      addLabelOffset(stringHashCode(this.labelRepository, e.offset),\n          e.cid, e.offset);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}