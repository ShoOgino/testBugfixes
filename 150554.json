{"path":"lucene/core/src/java/org/apache/lucene/index/MergePolicy#useCompoundFile(SegmentInfos,SegmentCommitInfo,MergeContext).mjava","commits":[{"id":"1d28f215464f76024caf026606f8ea51a5319c53","date":1527226629,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy#useCompoundFile(SegmentInfos,SegmentCommitInfo,MergeContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy#useCompoundFile(SegmentInfos,SegmentCommitInfo,IndexWriter).mjava","sourceNew":"  /**\n   * Returns true if a new segment (regardless of its origin) should use the\n   * compound file format. The default implementation returns <code>true</code>\n   * iff the size of the given mergedInfo is less or equal to\n   * {@link #getMaxCFSSegmentSizeMB()} and the size is less or equal to the\n   * TotalIndexSize * {@link #getNoCFSRatio()} otherwise <code>false</code>.\n   */\n  public boolean useCompoundFile(SegmentInfos infos, SegmentCommitInfo mergedInfo, MergeContext mergeContext) throws IOException {\n    if (getNoCFSRatio() == 0.0) {\n      return false;\n    }\n    long mergedInfoSize = size(mergedInfo, mergeContext);\n    if (mergedInfoSize > maxCFSSegmentSize) {\n      return false;\n    }\n    if (getNoCFSRatio() >= 1.0) {\n      return true;\n    }\n    long totalSize = 0;\n    for (SegmentCommitInfo info : infos) {\n      totalSize += size(info, mergeContext);\n    }\n    return mergedInfoSize <= getNoCFSRatio() * totalSize;\n  }\n\n","sourceOld":"  /**\n   * Returns true if a new segment (regardless of its origin) should use the\n   * compound file format. The default implementation returns <code>true</code>\n   * iff the size of the given mergedInfo is less or equal to\n   * {@link #getMaxCFSSegmentSizeMB()} and the size is less or equal to the\n   * TotalIndexSize * {@link #getNoCFSRatio()} otherwise <code>false</code>.\n   */\n  public boolean useCompoundFile(SegmentInfos infos, SegmentCommitInfo mergedInfo, IndexWriter writer) throws IOException {\n    if (getNoCFSRatio() == 0.0) {\n      return false;\n    }\n    long mergedInfoSize = size(mergedInfo, writer);\n    if (mergedInfoSize > maxCFSSegmentSize) {\n      return false;\n    }\n    if (getNoCFSRatio() >= 1.0) {\n      return true;\n    }\n    long totalSize = 0;\n    for (SegmentCommitInfo info : infos) {\n      totalSize += size(info, writer);\n    }\n    return mergedInfoSize <= getNoCFSRatio() * totalSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d28f215464f76024caf026606f8ea51a5319c53":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1d28f215464f76024caf026606f8ea51a5319c53"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d28f215464f76024caf026606f8ea51a5319c53"],"1d28f215464f76024caf026606f8ea51a5319c53":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}