{"path":"solr/core/src/java/org/apache/solr/update/UpdateLog#postCommit(CommitUpdateCommand).mjava","commits":[{"id":"bd0ef6574805f3cb9880e0983b7548a6aa933508","date":1315345052,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#postCommit(CommitUpdateCommand).mjava","pathOld":"/dev/null","sourceNew":"  public abstract void postCommit(CommitUpdateCommand cmd);\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#postCommit(CommitUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#postCommit(CommitUpdateCommand).mjava","sourceNew":"  public void postCommit(CommitUpdateCommand cmd) {\n    synchronized (this) {\n      if (debug) {\n        log.debug(\"TLOG: postCommit\");\n      }\n      if (prevTlog != null) {\n        // if we made it through the commit, write a commit command to the log\n        // TODO: check that this works to cap a tlog we were using to buffer so we don't replay on startup.\n        prevTlog.writeCommit(cmd);\n        // the old log list will decref when no longer needed\n        // prevTlog.decref();\n        prevTlog = null;\n      }\n    }\n  }\n\n","sourceOld":"  public abstract void postCommit(CommitUpdateCommand cmd);\n\n","bugFix":null,"bugIntro":["e99829242bceda4cf974ec0eb5d82d713615b3da"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#postCommit(CommitUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#postCommit(CommitUpdateCommand).mjava","sourceNew":"  public void postCommit(CommitUpdateCommand cmd) {\n    synchronized (this) {\n      if (debug) {\n        log.debug(\"TLOG: postCommit\");\n      }\n      if (prevTlog != null) {\n        // if we made it through the commit, write a commit command to the log\n        // TODO: check that this works to cap a tlog we were using to buffer so we don't replay on startup.\n        prevTlog.writeCommit(cmd);\n        // the old log list will decref when no longer needed\n        // prevTlog.decref();\n        prevTlog = null;\n      }\n    }\n  }\n\n","sourceOld":"  public abstract void postCommit(CommitUpdateCommand cmd);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#postCommit(CommitUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#postCommit(CommitUpdateCommand).mjava","sourceNew":"  public void postCommit(CommitUpdateCommand cmd) {\n    synchronized (this) {\n      if (debug) {\n        log.debug(\"TLOG: postCommit\");\n      }\n      if (prevTlog != null) {\n        // if we made it through the commit, write a commit command to the log\n        // TODO: check that this works to cap a tlog we were using to buffer so we don't replay on startup.\n        prevTlog.writeCommit(cmd);\n        // the old log list will decref when no longer needed\n        // prevTlog.decref();\n        prevTlog = null;\n      }\n    }\n  }\n\n","sourceOld":"  public abstract void postCommit(CommitUpdateCommand cmd);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a9e81d464930e5664da049442e2630d4b9b00d5","date":1330726364,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#postCommit(CommitUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#postCommit(CommitUpdateCommand).mjava","sourceNew":"  public void postCommit(CommitUpdateCommand cmd) {\n    synchronized (this) {\n      if (debug) {\n        log.debug(\"TLOG: postCommit\");\n      }\n      if (prevTlog != null) {\n        // if we made it through the commit, write a commit command to the log\n        // TODO: check that this works to cap a tlog we were using to buffer so we don't replay on startup.\n        prevTlog.writeCommit(cmd);\n\n        addOldLog(prevTlog, true);\n        // the old log list will decref when no longer needed\n        // prevTlog.decref();\n        prevTlog = null;\n      }\n    }\n  }\n\n","sourceOld":"  public void postCommit(CommitUpdateCommand cmd) {\n    synchronized (this) {\n      if (debug) {\n        log.debug(\"TLOG: postCommit\");\n      }\n      if (prevTlog != null) {\n        // if we made it through the commit, write a commit command to the log\n        // TODO: check that this works to cap a tlog we were using to buffer so we don't replay on startup.\n        prevTlog.writeCommit(cmd);\n        // the old log list will decref when no longer needed\n        // prevTlog.decref();\n        prevTlog = null;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#postCommit(CommitUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#postCommit(CommitUpdateCommand).mjava","sourceNew":"  public void postCommit(CommitUpdateCommand cmd) {\n    synchronized (this) {\n      if (debug) {\n        log.debug(\"TLOG: postCommit\");\n      }\n      if (prevTlog != null) {\n        // if we made it through the commit, write a commit command to the log\n        // TODO: check that this works to cap a tlog we were using to buffer so we don't replay on startup.\n        prevTlog.writeCommit(cmd);\n\n        addOldLog(prevTlog, true);\n        // the old log list will decref when no longer needed\n        // prevTlog.decref();\n        prevTlog = null;\n      }\n    }\n  }\n\n","sourceOld":"  public void postCommit(CommitUpdateCommand cmd) {\n    synchronized (this) {\n      if (debug) {\n        log.debug(\"TLOG: postCommit\");\n      }\n      if (prevTlog != null) {\n        // if we made it through the commit, write a commit command to the log\n        // TODO: check that this works to cap a tlog we were using to buffer so we don't replay on startup.\n        prevTlog.writeCommit(cmd);\n        // the old log list will decref when no longer needed\n        // prevTlog.decref();\n        prevTlog = null;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e99829242bceda4cf974ec0eb5d82d713615b3da","date":1337646971,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#postCommit(CommitUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#postCommit(CommitUpdateCommand).mjava","sourceNew":"  public void postCommit(CommitUpdateCommand cmd) {\n    synchronized (this) {\n      if (debug) {\n        log.debug(\"TLOG: postCommit\");\n      }\n      if (prevTlog != null) {\n        // if we made it through the commit, write a commit command to the log\n        // TODO: check that this works to cap a tlog we were using to buffer so we don't replay on startup.\n        prevTlog.writeCommit(cmd, operationFlags);\n\n        addOldLog(prevTlog, true);\n        // the old log list will decref when no longer needed\n        // prevTlog.decref();\n        prevTlog = null;\n      }\n    }\n  }\n\n","sourceOld":"  public void postCommit(CommitUpdateCommand cmd) {\n    synchronized (this) {\n      if (debug) {\n        log.debug(\"TLOG: postCommit\");\n      }\n      if (prevTlog != null) {\n        // if we made it through the commit, write a commit command to the log\n        // TODO: check that this works to cap a tlog we were using to buffer so we don't replay on startup.\n        prevTlog.writeCommit(cmd);\n\n        addOldLog(prevTlog, true);\n        // the old log list will decref when no longer needed\n        // prevTlog.decref();\n        prevTlog = null;\n      }\n    }\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3599646b4d4c346cf74d334813488b8b337b5bf5","date":1337790261,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#postCommit(CommitUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#postCommit(CommitUpdateCommand).mjava","sourceNew":"  public void postCommit(CommitUpdateCommand cmd) {\n    synchronized (this) {\n      if (debug) {\n        log.debug(\"TLOG: postCommit\");\n      }\n      if (prevTlog != null) {\n        // if we made it through the commit, write a commit command to the log\n        // TODO: check that this works to cap a tlog we were using to buffer so we don't replay on startup.\n        prevTlog.writeCommit(cmd, operationFlags);\n\n        addOldLog(prevTlog, true);\n        // the old log list will decref when no longer needed\n        // prevTlog.decref();\n        prevTlog = null;\n      }\n    }\n  }\n\n","sourceOld":"  public void postCommit(CommitUpdateCommand cmd) {\n    synchronized (this) {\n      if (debug) {\n        log.debug(\"TLOG: postCommit\");\n      }\n      if (prevTlog != null) {\n        // if we made it through the commit, write a commit command to the log\n        // TODO: check that this works to cap a tlog we were using to buffer so we don't replay on startup.\n        prevTlog.writeCommit(cmd);\n\n        addOldLog(prevTlog, true);\n        // the old log list will decref when no longer needed\n        // prevTlog.decref();\n        prevTlog = null;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1455c941cc4ce652efc776fc23471b0e499246f6","date":1528086751,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#postCommit(CommitUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#postCommit(CommitUpdateCommand).mjava","sourceNew":"  public void postCommit(CommitUpdateCommand cmd) {\n    synchronized (this) {\n      if (debug) {\n        log.debug(\"TLOG: postCommit\");\n      }\n      if (prevTlog != null) {\n        // if we made it through the commit, write a commit command to the log\n        // TODO: check that this works to cap a tlog we were using to buffer so we don't replay on startup.\n        prevTlog.writeCommit(cmd);\n\n        addOldLog(prevTlog, true);\n        // the old log list will decref when no longer needed\n        // prevTlog.decref();\n        prevTlog = null;\n      }\n    }\n  }\n\n","sourceOld":"  public void postCommit(CommitUpdateCommand cmd) {\n    synchronized (this) {\n      if (debug) {\n        log.debug(\"TLOG: postCommit\");\n      }\n      if (prevTlog != null) {\n        // if we made it through the commit, write a commit command to the log\n        // TODO: check that this works to cap a tlog we were using to buffer so we don't replay on startup.\n        prevTlog.writeCommit(cmd, operationFlags);\n\n        addOldLog(prevTlog, true);\n        // the old log list will decref when no longer needed\n        // prevTlog.decref();\n        prevTlog = null;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#postCommit(CommitUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#postCommit(CommitUpdateCommand).mjava","sourceNew":"  public void postCommit(CommitUpdateCommand cmd) {\n    synchronized (this) {\n      if (debug) {\n        log.debug(\"TLOG: postCommit\");\n      }\n      if (prevTlog != null) {\n        // if we made it through the commit, write a commit command to the log\n        // TODO: check that this works to cap a tlog we were using to buffer so we don't replay on startup.\n        prevTlog.writeCommit(cmd);\n\n        addOldLog(prevTlog, true);\n        // the old log list will decref when no longer needed\n        // prevTlog.decref();\n        prevTlog = null;\n      }\n    }\n  }\n\n","sourceOld":"  public void postCommit(CommitUpdateCommand cmd) {\n    synchronized (this) {\n      if (debug) {\n        log.debug(\"TLOG: postCommit\");\n      }\n      if (prevTlog != null) {\n        // if we made it through the commit, write a commit command to the log\n        // TODO: check that this works to cap a tlog we were using to buffer so we don't replay on startup.\n        prevTlog.writeCommit(cmd, operationFlags);\n\n        addOldLog(prevTlog, true);\n        // the old log list will decref when no longer needed\n        // prevTlog.decref();\n        prevTlog = null;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#postCommit(CommitUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#postCommit(CommitUpdateCommand).mjava","sourceNew":"  public void postCommit(CommitUpdateCommand cmd) {\n    synchronized (this) {\n      if (debug) {\n        log.debug(\"TLOG: postCommit\");\n      }\n      if (prevTlog != null) {\n        // if we made it through the commit, write a commit command to the log\n        // TODO: check that this works to cap a tlog we were using to buffer so we don't replay on startup.\n        prevTlog.writeCommit(cmd);\n\n        addOldLog(prevTlog, true);\n        // the old log list will decref when no longer needed\n        // prevTlog.decref();\n        prevTlog = null;\n      }\n    }\n  }\n\n","sourceOld":"  public void postCommit(CommitUpdateCommand cmd) {\n    synchronized (this) {\n      if (debug) {\n        log.debug(\"TLOG: postCommit\");\n      }\n      if (prevTlog != null) {\n        // if we made it through the commit, write a commit command to the log\n        // TODO: check that this works to cap a tlog we were using to buffer so we don't replay on startup.\n        prevTlog.writeCommit(cmd, operationFlags);\n\n        addOldLog(prevTlog, true);\n        // the old log list will decref when no longer needed\n        // prevTlog.decref();\n        prevTlog = null;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","1a9e81d464930e5664da049442e2630d4b9b00d5"],"1a9e81d464930e5664da049442e2630d4b9b00d5":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["bd0ef6574805f3cb9880e0983b7548a6aa933508","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"1455c941cc4ce652efc776fc23471b0e499246f6":["e99829242bceda4cf974ec0eb5d82d713615b3da"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["bd0ef6574805f3cb9880e0983b7548a6aa933508","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bd0ef6574805f3cb9880e0983b7548a6aa933508":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["e99829242bceda4cf974ec0eb5d82d713615b3da","1455c941cc4ce652efc776fc23471b0e499246f6"],"3599646b4d4c346cf74d334813488b8b337b5bf5":["1a9e81d464930e5664da049442e2630d4b9b00d5","e99829242bceda4cf974ec0eb5d82d713615b3da"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["bd0ef6574805f3cb9880e0983b7548a6aa933508"],"e99829242bceda4cf974ec0eb5d82d713615b3da":["1a9e81d464930e5664da049442e2630d4b9b00d5"],"f592209545c71895260367152601e9200399776d":["e99829242bceda4cf974ec0eb5d82d713615b3da","1455c941cc4ce652efc776fc23471b0e499246f6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1455c941cc4ce652efc776fc23471b0e499246f6"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"1a9e81d464930e5664da049442e2630d4b9b00d5":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","3599646b4d4c346cf74d334813488b8b337b5bf5","e99829242bceda4cf974ec0eb5d82d713615b3da"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"1455c941cc4ce652efc776fc23471b0e499246f6":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"bd0ef6574805f3cb9880e0983b7548a6aa933508":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bd0ef6574805f3cb9880e0983b7548a6aa933508"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"3599646b4d4c346cf74d334813488b8b337b5bf5":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","1a9e81d464930e5664da049442e2630d4b9b00d5","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92"],"e99829242bceda4cf974ec0eb5d82d713615b3da":["1455c941cc4ce652efc776fc23471b0e499246f6","b70042a8a492f7054d480ccdd2be9796510d4327","3599646b4d4c346cf74d334813488b8b337b5bf5","f592209545c71895260367152601e9200399776d"],"f592209545c71895260367152601e9200399776d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","b70042a8a492f7054d480ccdd2be9796510d4327","3599646b4d4c346cf74d334813488b8b337b5bf5","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}