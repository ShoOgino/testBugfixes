{"path":"sandbox/contributions/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","commits":[{"id":"4836b0ad75558e4c39cb1c6ca188c153a48f8e98","date":1090874387,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"sandbox/contributions/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","pathOld":"/dev/null","sourceNew":"\t// tests a \"complex\" analyzer that produces multiple \n\t// overlapping tokens \n\tpublic void testOverlapAnalyzer() throws Exception\n\t{\n\t\tHashMap synonyms = new HashMap();\n\t\tsynonyms.put(\"football\", \"soccer,footie\");\n\t\tAnalyzer analyzer = new SynonymAnalyzer(synonyms);\n\t\tString srchkey = \"football\";\n\n\t\tString s = \"football-soccer in the euro 2004 footie competition\";\n\t\tQuery query = QueryParser.parse(srchkey, \"bookid\", analyzer);\n\n\t\tHighlighter highlighter = new Highlighter(new QueryScorer(query));\n\t\tTokenStream tokenStream =\n\t\t\tanalyzer.tokenStream(null, new StringReader(s));\n\t\t// Get 3 best fragments and seperate with a \"...\"\n\t\tString result = highlighter.getBestFragments(tokenStream, s, 3, \"...\");\n\t\tString expectedResult=\"<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition\";\n\t\tassertTrue(\"overlapping analyzer should handle highlights OK\",expectedResult.equals(result));\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"043c298cb215f13ba7b9b81d20760704e8f93d66","date":1107566743,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","pathOld":"sandbox/contributions/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","sourceNew":"\t// tests a \"complex\" analyzer that produces multiple \n\t// overlapping tokens \n\tpublic void testOverlapAnalyzer() throws Exception\n\t{\n\t\tHashMap synonyms = new HashMap();\n\t\tsynonyms.put(\"football\", \"soccer,footie\");\n\t\tAnalyzer analyzer = new SynonymAnalyzer(synonyms);\n\t\tString srchkey = \"football\";\n\n\t\tString s = \"football-soccer in the euro 2004 footie competition\";\n\t\tQuery query = QueryParser.parse(srchkey, \"bookid\", analyzer);\n\n\t\tHighlighter highlighter = new Highlighter(new QueryScorer(query));\n\t\tTokenStream tokenStream =\n\t\t\tanalyzer.tokenStream(null, new StringReader(s));\n\t\t// Get 3 best fragments and seperate with a \"...\"\n\t\tString result = highlighter.getBestFragments(tokenStream, s, 3, \"...\");\n\t\tString expectedResult=\"<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition\";\n\t\tassertTrue(\"overlapping analyzer should handle highlights OK\",expectedResult.equals(result));\n\t}\n\n","sourceOld":"\t// tests a \"complex\" analyzer that produces multiple \n\t// overlapping tokens \n\tpublic void testOverlapAnalyzer() throws Exception\n\t{\n\t\tHashMap synonyms = new HashMap();\n\t\tsynonyms.put(\"football\", \"soccer,footie\");\n\t\tAnalyzer analyzer = new SynonymAnalyzer(synonyms);\n\t\tString srchkey = \"football\";\n\n\t\tString s = \"football-soccer in the euro 2004 footie competition\";\n\t\tQuery query = QueryParser.parse(srchkey, \"bookid\", analyzer);\n\n\t\tHighlighter highlighter = new Highlighter(new QueryScorer(query));\n\t\tTokenStream tokenStream =\n\t\t\tanalyzer.tokenStream(null, new StringReader(s));\n\t\t// Get 3 best fragments and seperate with a \"...\"\n\t\tString result = highlighter.getBestFragments(tokenStream, s, 3, \"...\");\n\t\tString expectedResult=\"<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition\";\n\t\tassertTrue(\"overlapping analyzer should handle highlights OK\",expectedResult.equals(result));\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["4836b0ad75558e4c39cb1c6ca188c153a48f8e98"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4836b0ad75558e4c39cb1c6ca188c153a48f8e98":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["043c298cb215f13ba7b9b81d20760704e8f93d66"]},"commit2Childs":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4836b0ad75558e4c39cb1c6ca188c153a48f8e98"],"4836b0ad75558e4c39cb1c6ca188c153a48f8e98":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}