{"path":"src/test/org/apache/lucene/index/TestIndexWriter#testCloseWithThreads().mjava","commits":[{"id":"83bbb041887bbef07b8a98d08a0e1713ce137039","date":1200330381,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCloseWithThreads().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws IOException {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<50;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer());\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n      boolean diskFull = false;\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      try {\n        Thread.sleep(50);\n      } catch (InterruptedException ie) {\n        Thread.currentThread().interrupt();\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        while(true) {\n          try {\n            // Without fix for LUCENE-1130: one of the\n            // threads will hang\n            threads[i].join();\n            break;\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n        }\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir);\n      TermDocs tdocs = reader.termDocs(new Term(\"field\", \"aaa\"));\n      int count = 0;\n      while(tdocs.next()) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9aba6db0f2adde620bb61f591ed18dcfee36ac","date":1201778618,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCloseWithThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws IOException {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<50;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n      boolean diskFull = false;\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      try {\n        Thread.sleep(50);\n      } catch (InterruptedException ie) {\n        Thread.currentThread().interrupt();\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        while(true) {\n          try {\n            // Without fix for LUCENE-1130: one of the\n            // threads will hang\n            threads[i].join();\n            break;\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n        }\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir);\n      TermDocs tdocs = reader.termDocs(new Term(\"field\", \"aaa\"));\n      int count = 0;\n      while(tdocs.next()) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws IOException {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<50;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer());\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n      boolean diskFull = false;\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      try {\n        Thread.sleep(50);\n      } catch (InterruptedException ie) {\n        Thread.currentThread().interrupt();\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        while(true) {\n          try {\n            // Without fix for LUCENE-1130: one of the\n            // threads will hang\n            threads[i].join();\n            break;\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n        }\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir);\n      TermDocs tdocs = reader.termDocs(new Term(\"field\", \"aaa\"));\n      int count = 0;\n      while(tdocs.next()) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e82780afe6097066eb5befb86e9432f077667e3d","date":1202756169,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCloseWithThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws IOException {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<20;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      try {\n        Thread.sleep(100);\n      } catch (InterruptedException ie) {\n        Thread.currentThread().interrupt();\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        while(true) {\n          try {\n            // Without fix for LUCENE-1130: one of the\n            // threads will hang\n            threads[i].join();\n            break;\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n        }\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir);\n      TermDocs tdocs = reader.termDocs(new Term(\"field\", \"aaa\"));\n      int count = 0;\n      while(tdocs.next()) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws IOException {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<50;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n      boolean diskFull = false;\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      try {\n        Thread.sleep(50);\n      } catch (InterruptedException ie) {\n        Thread.currentThread().interrupt();\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        while(true) {\n          try {\n            // Without fix for LUCENE-1130: one of the\n            // threads will hang\n            threads[i].join();\n            break;\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n        }\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir);\n      TermDocs tdocs = reader.termDocs(new Term(\"field\", \"aaa\"));\n      int count = 0;\n      while(tdocs.next()) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81d7aae5c7b7b8c1d8cf15b7fb78037b3a47f60c","date":1206174221,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCloseWithThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws IOException {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<20;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        try {\n          Thread.sleep(100);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n        }\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        while(true) {\n          try {\n            // Without fix for LUCENE-1130: one of the\n            // threads will hang\n            threads[i].join();\n            break;\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n        }\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir);\n      TermDocs tdocs = reader.termDocs(new Term(\"field\", \"aaa\"));\n      int count = 0;\n      while(tdocs.next()) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws IOException {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<20;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      try {\n        Thread.sleep(100);\n      } catch (InterruptedException ie) {\n        Thread.currentThread().interrupt();\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        while(true) {\n          try {\n            // Without fix for LUCENE-1130: one of the\n            // threads will hang\n            threads[i].join();\n            break;\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n        }\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir);\n      TermDocs tdocs = reader.termDocs(new Term(\"field\", \"aaa\"));\n      int count = 0;\n      while(tdocs.next()) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2586f96f60332eb97ecd2934b0763791462568b2","date":1220116589,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCloseWithThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws IOException {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<20;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n\n      // We expect AlreadyClosedException\n      cms.setSuppressExceptions();\n\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        try {\n          Thread.sleep(100);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n        }\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        while(true) {\n          try {\n            // Without fix for LUCENE-1130: one of the\n            // threads will hang\n            threads[i].join();\n            break;\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n        }\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir);\n      TermDocs tdocs = reader.termDocs(new Term(\"field\", \"aaa\"));\n      int count = 0;\n      while(tdocs.next()) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws IOException {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<20;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        try {\n          Thread.sleep(100);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n        }\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        while(true) {\n          try {\n            // Without fix for LUCENE-1130: one of the\n            // threads will hang\n            threads[i].join();\n            break;\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n        }\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir);\n      TermDocs tdocs = reader.termDocs(new Term(\"field\", \"aaa\"));\n      int count = 0;\n      while(tdocs.next()) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestCloseWithThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void xxxtestCloseWithThreads() throws IOException {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<20;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n\n      // We expect AlreadyClosedException\n      cms.setSuppressExceptions();\n\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        try {\n          Thread.sleep(100);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n        }\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        while(true) {\n          try {\n            // Without fix for LUCENE-1130: one of the\n            // threads will hang\n            threads[i].join();\n            break;\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n        }\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir);\n      TermDocs tdocs = reader.termDocs(new Term(\"field\", \"aaa\"));\n      int count = 0;\n      while(tdocs.next()) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws IOException {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<20;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n\n      // We expect AlreadyClosedException\n      cms.setSuppressExceptions();\n\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        try {\n          Thread.sleep(100);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n        }\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        while(true) {\n          try {\n            // Without fix for LUCENE-1130: one of the\n            // threads will hang\n            threads[i].join();\n            break;\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n        }\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir);\n      TermDocs tdocs = reader.termDocs(new Term(\"field\", \"aaa\"));\n      int count = 0;\n      while(tdocs.next()) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCloseWithThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws IOException {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<20;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n\n      // We expect AlreadyClosedException\n      cms.setSuppressExceptions();\n\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        try {\n          Thread.sleep(100);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n        }\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        while(true) {\n          try {\n            // Without fix for LUCENE-1130: one of the\n            // threads will hang\n            threads[i].join();\n            break;\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n        }\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir);\n      TermDocs tdocs = reader.termDocs(new Term(\"field\", \"aaa\"));\n      int count = 0;\n      while(tdocs.next()) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void xxxtestCloseWithThreads() throws IOException {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<20;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n\n      // We expect AlreadyClosedException\n      cms.setSuppressExceptions();\n\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        try {\n          Thread.sleep(100);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n        }\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        while(true) {\n          try {\n            // Without fix for LUCENE-1130: one of the\n            // threads will hang\n            threads[i].join();\n            break;\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n        }\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir);\n      TermDocs tdocs = reader.termDocs(new Term(\"field\", \"aaa\"));\n      int count = 0;\n      while(tdocs.next()) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba7fd1181f778e9954547e8e6a47587ebf08e3fb","date":1238267455,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCloseWithThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<20;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n\n      // We expect AlreadyClosedException\n      cms.setSuppressExceptions();\n\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir);\n      TermDocs tdocs = reader.termDocs(new Term(\"field\", \"aaa\"));\n      int count = 0;\n      while(tdocs.next()) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws IOException {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<20;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n\n      // We expect AlreadyClosedException\n      cms.setSuppressExceptions();\n\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        try {\n          Thread.sleep(100);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n        }\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        while(true) {\n          try {\n            // Without fix for LUCENE-1130: one of the\n            // threads will hang\n            threads[i].join();\n            break;\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n        }\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir);\n      TermDocs tdocs = reader.termDocs(new Term(\"field\", \"aaa\"));\n      int count = 0;\n      while(tdocs.next()) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCloseWithThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<20;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n\n      // We expect AlreadyClosedException\n      cms.setSuppressExceptions();\n\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir, true);\n      TermDocs tdocs = reader.termDocs(new Term(\"field\", \"aaa\"));\n      int count = 0;\n      while(tdocs.next()) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<20;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n\n      // We expect AlreadyClosedException\n      cms.setSuppressExceptions();\n\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir);\n      TermDocs tdocs = reader.termDocs(new Term(\"field\", \"aaa\"));\n      int count = 0;\n      while(tdocs.next()) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCloseWithThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<20;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n\n      // We expect AlreadyClosedException\n      cms.setSuppressExceptions();\n\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir, true);\n      TermDocs tdocs = reader.termDocs(new Term(\"field\", \"aaa\"));\n      int count = 0;\n      while(tdocs.next()) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<20;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n\n      // We expect AlreadyClosedException\n      cms.setSuppressExceptions();\n\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir);\n      TermDocs tdocs = reader.termDocs(new Term(\"field\", \"aaa\"));\n      int count = 0;\n      while(tdocs.next()) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90cb6b3f4e5652555b614adc90204287fbebd27c","date":1259494272,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCloseWithThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<7;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n\n      // We expect AlreadyClosedException\n      cms.setSuppressExceptions();\n\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir, true);\n      TermDocs tdocs = reader.termDocs(new Term(\"field\", \"aaa\"));\n      int count = 0;\n      while(tdocs.next()) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<20;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n\n      // We expect AlreadyClosedException\n      cms.setSuppressExceptions();\n\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir, true);\n      TermDocs tdocs = reader.termDocs(new Term(\"field\", \"aaa\"));\n      int count = 0;\n      while(tdocs.next()) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCloseWithThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<7;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n\n      // We expect AlreadyClosedException\n      cms.setSuppressExceptions();\n\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir, true);\n      TermDocs tdocs = reader.termDocs(new Term(\"field\", \"aaa\"));\n      int count = 0;\n      while(tdocs.next()) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<7;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n\n      // We expect AlreadyClosedException\n      cms.setSuppressExceptions();\n\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir, true);\n      TermDocs tdocs = reader.termDocs(new Term(\"field\", \"aaa\"));\n      int count = 0;\n      while(tdocs.next()) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCloseWithThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<7;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n\n      // We expect AlreadyClosedException\n      cms.setSuppressExceptions();\n\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir, true);\n      TermDocs tdocs = reader.termDocs(new Term(\"field\", \"aaa\"));\n      int count = 0;\n      while(tdocs.next()) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<7;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n\n      // We expect AlreadyClosedException\n      cms.setSuppressExceptions();\n\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir, true);\n      TermDocs tdocs = reader.termDocs(new Term(\"field\", \"aaa\"));\n      int count = 0;\n      while(tdocs.next()) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCloseWithThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<7;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT).setMaxBufferedDocs(10);\n      // We expect AlreadyClosedException\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir, true);\n      TermDocs tdocs = reader.termDocs(new Term(\"field\", \"aaa\"));\n      int count = 0;\n      while(tdocs.next()) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<7;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n\n      // We expect AlreadyClosedException\n      cms.setSuppressExceptions();\n\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir, true);\n      TermDocs tdocs = reader.termDocs(new Term(\"field\", \"aaa\"));\n      int count = 0;\n      while(tdocs.next()) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCloseWithThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<7;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n\n      // We expect AlreadyClosedException\n      cms.setSuppressExceptions();\n\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir, true);\n      TermDocs tdocs = reader.termDocs(new Term(\"field\", \"aaa\"));\n      int count = 0;\n      while(tdocs.next()) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<7;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT).setMaxBufferedDocs(10);\n      // We expect AlreadyClosedException\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir, true);\n      TermDocs tdocs = reader.termDocs(new Term(\"field\", \"aaa\"));\n      int count = 0;\n      while(tdocs.next()) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCloseWithThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<7;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(10);\n      // We expect AlreadyClosedException\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir, true);\n      TermDocs tdocs = reader.termDocs(new Term(\"field\", \"aaa\"));\n      int count = 0;\n      while(tdocs.next()) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<7;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n\n      // We expect AlreadyClosedException\n      cms.setSuppressExceptions();\n\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir, true);\n      TermDocs tdocs = reader.termDocs(new Term(\"field\", \"aaa\"));\n      int count = 0;\n      while(tdocs.next()) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCloseWithThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<7;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(10);\n      // We expect AlreadyClosedException\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir, true);\n      TermDocs tdocs = reader.termDocs(new Term(\"field\", \"aaa\"));\n      int count = 0;\n      while(tdocs.next()) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<7;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(10);\n      // We expect AlreadyClosedException\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir, true);\n      TermDocs tdocs = reader.termDocs(new Term(\"field\", \"aaa\"));\n      int count = 0;\n      while(tdocs.next()) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"83bbb041887bbef07b8a98d08a0e1713ce137039":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["ba7fd1181f778e9954547e8e6a47587ebf08e3fb","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["2586f96f60332eb97ecd2934b0763791462568b2"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"ba7fd1181f778e9954547e8e6a47587ebf08e3fb":["09c482d1e63332617181729a225b215c452d8a79"],"fd9aba6db0f2adde620bb61f591ed18dcfee36ac":["83bbb041887bbef07b8a98d08a0e1713ce137039"],"81d7aae5c7b7b8c1d8cf15b7fb78037b3a47f60c":["e82780afe6097066eb5befb86e9432f077667e3d"],"90cb6b3f4e5652555b614adc90204287fbebd27c":["0a046c0c310bc77931fc8441bd920053b607dd14"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["ba7fd1181f778e9954547e8e6a47587ebf08e3fb"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["90cb6b3f4e5652555b614adc90204287fbebd27c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e82780afe6097066eb5befb86e9432f077667e3d":["fd9aba6db0f2adde620bb61f591ed18dcfee36ac"],"2586f96f60332eb97ecd2934b0763791462568b2":["81d7aae5c7b7b8c1d8cf15b7fb78037b3a47f60c"],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"83bbb041887bbef07b8a98d08a0e1713ce137039":["fd9aba6db0f2adde620bb61f591ed18dcfee36ac"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["90cb6b3f4e5652555b614adc90204287fbebd27c"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"ba7fd1181f778e9954547e8e6a47587ebf08e3fb":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"fd9aba6db0f2adde620bb61f591ed18dcfee36ac":["e82780afe6097066eb5befb86e9432f077667e3d"],"81d7aae5c7b7b8c1d8cf15b7fb78037b3a47f60c":["2586f96f60332eb97ecd2934b0763791462568b2"],"90cb6b3f4e5652555b614adc90204287fbebd27c":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["83bbb041887bbef07b8a98d08a0e1713ce137039"],"e82780afe6097066eb5befb86e9432f077667e3d":["81d7aae5c7b7b8c1d8cf15b7fb78037b3a47f60c"],"2586f96f60332eb97ecd2934b0763791462568b2":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"09c482d1e63332617181729a225b215c452d8a79":["ba7fd1181f778e9954547e8e6a47587ebf08e3fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}