{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TestData#toString().mjava","commits":[{"id":"226abb667f503323e0d9473af1883fa03ef3a3fd","date":1163596173,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TestData#toString().mjava","pathOld":"/dev/null","sourceNew":"    public String toString()\r\n    {\r\n        StringBuffer res = new StringBuffer();\r\n        res.append(\"#-- ID: \").append(id).append(\", \").append(new Date()).append(\", heap=\").append(heap).append(\" --\\n\");\r\n        res.append(\"# source=\").append(source).append(\", directory=\").append(directory).append(\"\\n\");\r\n        res.append(\"# maxBufferedDocs=\").append(maxBufferedDocs).append(\", mergeFactor=\").append(mergeFactor);\r\n        res.append(\", compound=\").append(compound).append(\", optimize=\").append(optimize).append(\"\\n\");\r\n        if (queries != null)\r\n        {\r\n            res.append(QueryData.getLabels()).append(\"\\n\");\r\n            for (int i = 0; i < queries.length; i++)\r\n            {\r\n                res.append(\"# \").append(queries[i].toString()).append(\"\\n\");\r\n            }\r\n        }\r\n        return res.toString();\r\n    }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3738fa43eaa87dc7b393fe98b04cde1019e20bac","date":1175557034,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TestData#toString().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TestData#toString().mjava","sourceNew":"    public String toString()\n    {\n        StringBuffer res = new StringBuffer();\n        res.append(\"#-- ID: \").append(id).append(\", \").append(new Date()).append(\", heap=\").append(heap).append(\" --\\n\");\n        res.append(\"# source=\").append(source).append(\", directory=\").append(directory).append(\"\\n\");\n        res.append(\"# maxBufferedDocs=\").append(maxBufferedDocs).append(\", mergeFactor=\").append(mergeFactor);\n        res.append(\", compound=\").append(compound).append(\", optimize=\").append(optimize).append(\"\\n\");\n        if (queries != null)\n        {\n            res.append(QueryData.getLabels()).append(\"\\n\");\n            for (int i = 0; i < queries.length; i++)\n            {\n                res.append(\"# \").append(queries[i].toString()).append(\"\\n\");\n            }\n        }\n        return res.toString();\n    }\n\n","sourceOld":"    public String toString()\r\n    {\r\n        StringBuffer res = new StringBuffer();\r\n        res.append(\"#-- ID: \").append(id).append(\", \").append(new Date()).append(\", heap=\").append(heap).append(\" --\\n\");\r\n        res.append(\"# source=\").append(source).append(\", directory=\").append(directory).append(\"\\n\");\r\n        res.append(\"# maxBufferedDocs=\").append(maxBufferedDocs).append(\", mergeFactor=\").append(mergeFactor);\r\n        res.append(\", compound=\").append(compound).append(\", optimize=\").append(optimize).append(\"\\n\");\r\n        if (queries != null)\r\n        {\r\n            res.append(QueryData.getLabels()).append(\"\\n\");\r\n            for (int i = 0; i < queries.length; i++)\r\n            {\r\n                res.append(\"# \").append(queries[i].toString()).append(\"\\n\");\r\n            }\r\n        }\r\n        return res.toString();\r\n    }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TestData#toString().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TestData#toString().mjava","sourceNew":"    @Override\n    public String toString()\n    {\n        StringBuffer res = new StringBuffer();\n        res.append(\"#-- ID: \").append(id).append(\", \").append(new Date()).append(\", heap=\").append(heap).append(\" --\\n\");\n        res.append(\"# source=\").append(source).append(\", directory=\").append(directory).append(\"\\n\");\n        res.append(\"# maxBufferedDocs=\").append(maxBufferedDocs).append(\", mergeFactor=\").append(mergeFactor);\n        res.append(\", compound=\").append(compound).append(\", optimize=\").append(optimize).append(\"\\n\");\n        if (queries != null)\n        {\n            res.append(QueryData.getLabels()).append(\"\\n\");\n            for (int i = 0; i < queries.length; i++)\n            {\n                res.append(\"# \").append(queries[i].toString()).append(\"\\n\");\n            }\n        }\n        return res.toString();\n    }\n\n","sourceOld":"    public String toString()\n    {\n        StringBuffer res = new StringBuffer();\n        res.append(\"#-- ID: \").append(id).append(\", \").append(new Date()).append(\", heap=\").append(heap).append(\" --\\n\");\n        res.append(\"# source=\").append(source).append(\", directory=\").append(directory).append(\"\\n\");\n        res.append(\"# maxBufferedDocs=\").append(maxBufferedDocs).append(\", mergeFactor=\").append(mergeFactor);\n        res.append(\", compound=\").append(compound).append(\", optimize=\").append(optimize).append(\"\\n\");\n        if (queries != null)\n        {\n            res.append(QueryData.getLabels()).append(\"\\n\");\n            for (int i = 0; i < queries.length; i++)\n            {\n                res.append(\"# \").append(queries[i].toString()).append(\"\\n\");\n            }\n        }\n        return res.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TestData#toString().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TestData#toString().mjava","sourceNew":"    @Override\n    public String toString()\n    {\n        StringBuffer res = new StringBuffer();\n        res.append(\"#-- ID: \").append(id).append(\", \").append(new Date()).append(\", heap=\").append(heap).append(\" --\\n\");\n        res.append(\"# source=\").append(source).append(\", directory=\").append(directory).append(\"\\n\");\n        res.append(\"# maxBufferedDocs=\").append(maxBufferedDocs).append(\", mergeFactor=\").append(mergeFactor);\n        res.append(\", compound=\").append(compound).append(\", optimize=\").append(optimize).append(\"\\n\");\n        if (queries != null)\n        {\n            res.append(QueryData.getLabels()).append(\"\\n\");\n            for (int i = 0; i < queries.length; i++)\n            {\n                res.append(\"# \").append(queries[i].toString()).append(\"\\n\");\n            }\n        }\n        return res.toString();\n    }\n\n","sourceOld":"    @Override\n    public String toString()\n    {\n        StringBuffer res = new StringBuffer();\n        res.append(\"#-- ID: \").append(id).append(\", \").append(new Date()).append(\", heap=\").append(heap).append(\" --\\n\");\n        res.append(\"# source=\").append(source).append(\", directory=\").append(directory).append(\"\\n\");\n        res.append(\"# maxBufferedDocs=\").append(maxBufferedDocs).append(\", mergeFactor=\").append(mergeFactor);\n        res.append(\", compound=\").append(compound).append(\", optimize=\").append(optimize).append(\"\\n\");\n        if (queries != null)\n        {\n            res.append(QueryData.getLabels()).append(\"\\n\");\n            for (int i = 0; i < queries.length; i++)\n            {\n                res.append(\"# \").append(queries[i].toString()).append(\"\\n\");\n            }\n        }\n        return res.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"226abb667f503323e0d9473af1883fa03ef3a3fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3738fa43eaa87dc7b393fe98b04cde1019e20bac":["226abb667f503323e0d9473af1883fa03ef3a3fd"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["3738fa43eaa87dc7b393fe98b04cde1019e20bac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"]},"commit2Childs":{"226abb667f503323e0d9473af1883fa03ef3a3fd":["3738fa43eaa87dc7b393fe98b04cde1019e20bac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["226abb667f503323e0d9473af1883fa03ef3a3fd"],"3738fa43eaa87dc7b393fe98b04cde1019e20bac":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}