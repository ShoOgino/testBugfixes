{"path":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked11#decode(byte[],int,long[],int,int).mjava","commits":[{"id":"3edb451c214b0d41e9d16514e3a1d6984ca2ca5f","date":1345677220,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked11#decode(byte[],int,long[],int,int).mjava","pathOld":"/dev/null","sourceNew":"    public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final long byte0 = blocks[blocksOffset++] & 0xFF;\n        final long byte1 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte0 << 3) | (byte1 >>> 5);\n        final long byte2 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte1 & 31) << 6) | (byte2 >>> 2);\n        final long byte3 = blocks[blocksOffset++] & 0xFF;\n        final long byte4 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte2 & 3) << 9) | (byte3 << 1) | (byte4 >>> 7);\n        final long byte5 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte4 & 127) << 4) | (byte5 >>> 4);\n        final long byte6 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte5 & 15) << 7) | (byte6 >>> 1);\n        final long byte7 = blocks[blocksOffset++] & 0xFF;\n        final long byte8 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte6 & 1) << 10) | (byte7 << 2) | (byte8 >>> 6);\n        final long byte9 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte8 & 63) << 5) | (byte9 >>> 3);\n        final long byte10 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte9 & 7) << 8) | byte10;\n        final long byte11 = blocks[blocksOffset++] & 0xFF;\n        final long byte12 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte11 << 3) | (byte12 >>> 5);\n        final long byte13 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte12 & 31) << 6) | (byte13 >>> 2);\n        final long byte14 = blocks[blocksOffset++] & 0xFF;\n        final long byte15 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte13 & 3) << 9) | (byte14 << 1) | (byte15 >>> 7);\n        final long byte16 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte15 & 127) << 4) | (byte16 >>> 4);\n        final long byte17 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte16 & 15) << 7) | (byte17 >>> 1);\n        final long byte18 = blocks[blocksOffset++] & 0xFF;\n        final long byte19 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte17 & 1) << 10) | (byte18 << 2) | (byte19 >>> 6);\n        final long byte20 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte19 & 63) << 5) | (byte20 >>> 3);\n        final long byte21 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte20 & 7) << 8) | byte21;\n        final long byte22 = blocks[blocksOffset++] & 0xFF;\n        final long byte23 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte22 << 3) | (byte23 >>> 5);\n        final long byte24 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte23 & 31) << 6) | (byte24 >>> 2);\n        final long byte25 = blocks[blocksOffset++] & 0xFF;\n        final long byte26 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte24 & 3) << 9) | (byte25 << 1) | (byte26 >>> 7);\n        final long byte27 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte26 & 127) << 4) | (byte27 >>> 4);\n        final long byte28 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte27 & 15) << 7) | (byte28 >>> 1);\n        final long byte29 = blocks[blocksOffset++] & 0xFF;\n        final long byte30 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte28 & 1) << 10) | (byte29 << 2) | (byte30 >>> 6);\n        final long byte31 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte30 & 63) << 5) | (byte31 >>> 3);\n        final long byte32 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte31 & 7) << 8) | byte32;\n        final long byte33 = blocks[blocksOffset++] & 0xFF;\n        final long byte34 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte33 << 3) | (byte34 >>> 5);\n        final long byte35 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte34 & 31) << 6) | (byte35 >>> 2);\n        final long byte36 = blocks[blocksOffset++] & 0xFF;\n        final long byte37 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte35 & 3) << 9) | (byte36 << 1) | (byte37 >>> 7);\n        final long byte38 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte37 & 127) << 4) | (byte38 >>> 4);\n        final long byte39 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte38 & 15) << 7) | (byte39 >>> 1);\n        final long byte40 = blocks[blocksOffset++] & 0xFF;\n        final long byte41 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte39 & 1) << 10) | (byte40 << 2) | (byte41 >>> 6);\n        final long byte42 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte41 & 63) << 5) | (byte42 >>> 3);\n        final long byte43 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte42 & 7) << 8) | byte43;\n        final long byte44 = blocks[blocksOffset++] & 0xFF;\n        final long byte45 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte44 << 3) | (byte45 >>> 5);\n        final long byte46 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte45 & 31) << 6) | (byte46 >>> 2);\n        final long byte47 = blocks[blocksOffset++] & 0xFF;\n        final long byte48 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte46 & 3) << 9) | (byte47 << 1) | (byte48 >>> 7);\n        final long byte49 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte48 & 127) << 4) | (byte49 >>> 4);\n        final long byte50 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte49 & 15) << 7) | (byte50 >>> 1);\n        final long byte51 = blocks[blocksOffset++] & 0xFF;\n        final long byte52 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte50 & 1) << 10) | (byte51 << 2) | (byte52 >>> 6);\n        final long byte53 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte52 & 63) << 5) | (byte53 >>> 3);\n        final long byte54 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte53 & 7) << 8) | byte54;\n        final long byte55 = blocks[blocksOffset++] & 0xFF;\n        final long byte56 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte55 << 3) | (byte56 >>> 5);\n        final long byte57 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte56 & 31) << 6) | (byte57 >>> 2);\n        final long byte58 = blocks[blocksOffset++] & 0xFF;\n        final long byte59 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte57 & 3) << 9) | (byte58 << 1) | (byte59 >>> 7);\n        final long byte60 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte59 & 127) << 4) | (byte60 >>> 4);\n        final long byte61 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte60 & 15) << 7) | (byte61 >>> 1);\n        final long byte62 = blocks[blocksOffset++] & 0xFF;\n        final long byte63 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte61 & 1) << 10) | (byte62 << 2) | (byte63 >>> 6);\n        final long byte64 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte63 & 63) << 5) | (byte64 >>> 3);\n        final long byte65 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte64 & 7) << 8) | byte65;\n        final long byte66 = blocks[blocksOffset++] & 0xFF;\n        final long byte67 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte66 << 3) | (byte67 >>> 5);\n        final long byte68 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte67 & 31) << 6) | (byte68 >>> 2);\n        final long byte69 = blocks[blocksOffset++] & 0xFF;\n        final long byte70 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte68 & 3) << 9) | (byte69 << 1) | (byte70 >>> 7);\n        final long byte71 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte70 & 127) << 4) | (byte71 >>> 4);\n        final long byte72 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte71 & 15) << 7) | (byte72 >>> 1);\n        final long byte73 = blocks[blocksOffset++] & 0xFF;\n        final long byte74 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte72 & 1) << 10) | (byte73 << 2) | (byte74 >>> 6);\n        final long byte75 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte74 & 63) << 5) | (byte75 >>> 3);\n        final long byte76 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte75 & 7) << 8) | byte76;\n        final long byte77 = blocks[blocksOffset++] & 0xFF;\n        final long byte78 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte77 << 3) | (byte78 >>> 5);\n        final long byte79 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte78 & 31) << 6) | (byte79 >>> 2);\n        final long byte80 = blocks[blocksOffset++] & 0xFF;\n        final long byte81 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte79 & 3) << 9) | (byte80 << 1) | (byte81 >>> 7);\n        final long byte82 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte81 & 127) << 4) | (byte82 >>> 4);\n        final long byte83 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte82 & 15) << 7) | (byte83 >>> 1);\n        final long byte84 = blocks[blocksOffset++] & 0xFF;\n        final long byte85 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte83 & 1) << 10) | (byte84 << 2) | (byte85 >>> 6);\n        final long byte86 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte85 & 63) << 5) | (byte86 >>> 3);\n        final long byte87 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte86 & 7) << 8) | byte87;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["818b04e906a094f03512fe99c83e359da8277708"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"353f5909b00345d98d079a7db9a1bbe7485b1ea6","date":1345745476,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked11#decode(byte[],int,long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked11#decode(byte[],int,long[],int,int).mjava","sourceNew":"    @Override\n    public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final long byte0 = blocks[blocksOffset++] & 0xFF;\n        final long byte1 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte0 << 3) | (byte1 >>> 5);\n        final long byte2 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte1 & 31) << 6) | (byte2 >>> 2);\n        final long byte3 = blocks[blocksOffset++] & 0xFF;\n        final long byte4 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte2 & 3) << 9) | (byte3 << 1) | (byte4 >>> 7);\n        final long byte5 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte4 & 127) << 4) | (byte5 >>> 4);\n        final long byte6 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte5 & 15) << 7) | (byte6 >>> 1);\n        final long byte7 = blocks[blocksOffset++] & 0xFF;\n        final long byte8 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte6 & 1) << 10) | (byte7 << 2) | (byte8 >>> 6);\n        final long byte9 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte8 & 63) << 5) | (byte9 >>> 3);\n        final long byte10 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte9 & 7) << 8) | byte10;\n        final long byte11 = blocks[blocksOffset++] & 0xFF;\n        final long byte12 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte11 << 3) | (byte12 >>> 5);\n        final long byte13 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte12 & 31) << 6) | (byte13 >>> 2);\n        final long byte14 = blocks[blocksOffset++] & 0xFF;\n        final long byte15 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte13 & 3) << 9) | (byte14 << 1) | (byte15 >>> 7);\n        final long byte16 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte15 & 127) << 4) | (byte16 >>> 4);\n        final long byte17 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte16 & 15) << 7) | (byte17 >>> 1);\n        final long byte18 = blocks[blocksOffset++] & 0xFF;\n        final long byte19 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte17 & 1) << 10) | (byte18 << 2) | (byte19 >>> 6);\n        final long byte20 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte19 & 63) << 5) | (byte20 >>> 3);\n        final long byte21 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte20 & 7) << 8) | byte21;\n        final long byte22 = blocks[blocksOffset++] & 0xFF;\n        final long byte23 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte22 << 3) | (byte23 >>> 5);\n        final long byte24 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte23 & 31) << 6) | (byte24 >>> 2);\n        final long byte25 = blocks[blocksOffset++] & 0xFF;\n        final long byte26 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte24 & 3) << 9) | (byte25 << 1) | (byte26 >>> 7);\n        final long byte27 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte26 & 127) << 4) | (byte27 >>> 4);\n        final long byte28 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte27 & 15) << 7) | (byte28 >>> 1);\n        final long byte29 = blocks[blocksOffset++] & 0xFF;\n        final long byte30 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte28 & 1) << 10) | (byte29 << 2) | (byte30 >>> 6);\n        final long byte31 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte30 & 63) << 5) | (byte31 >>> 3);\n        final long byte32 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte31 & 7) << 8) | byte32;\n        final long byte33 = blocks[blocksOffset++] & 0xFF;\n        final long byte34 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte33 << 3) | (byte34 >>> 5);\n        final long byte35 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte34 & 31) << 6) | (byte35 >>> 2);\n        final long byte36 = blocks[blocksOffset++] & 0xFF;\n        final long byte37 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte35 & 3) << 9) | (byte36 << 1) | (byte37 >>> 7);\n        final long byte38 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte37 & 127) << 4) | (byte38 >>> 4);\n        final long byte39 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte38 & 15) << 7) | (byte39 >>> 1);\n        final long byte40 = blocks[blocksOffset++] & 0xFF;\n        final long byte41 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte39 & 1) << 10) | (byte40 << 2) | (byte41 >>> 6);\n        final long byte42 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte41 & 63) << 5) | (byte42 >>> 3);\n        final long byte43 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte42 & 7) << 8) | byte43;\n        final long byte44 = blocks[blocksOffset++] & 0xFF;\n        final long byte45 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte44 << 3) | (byte45 >>> 5);\n        final long byte46 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte45 & 31) << 6) | (byte46 >>> 2);\n        final long byte47 = blocks[blocksOffset++] & 0xFF;\n        final long byte48 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte46 & 3) << 9) | (byte47 << 1) | (byte48 >>> 7);\n        final long byte49 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte48 & 127) << 4) | (byte49 >>> 4);\n        final long byte50 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte49 & 15) << 7) | (byte50 >>> 1);\n        final long byte51 = blocks[blocksOffset++] & 0xFF;\n        final long byte52 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte50 & 1) << 10) | (byte51 << 2) | (byte52 >>> 6);\n        final long byte53 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte52 & 63) << 5) | (byte53 >>> 3);\n        final long byte54 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte53 & 7) << 8) | byte54;\n        final long byte55 = blocks[blocksOffset++] & 0xFF;\n        final long byte56 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte55 << 3) | (byte56 >>> 5);\n        final long byte57 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte56 & 31) << 6) | (byte57 >>> 2);\n        final long byte58 = blocks[blocksOffset++] & 0xFF;\n        final long byte59 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte57 & 3) << 9) | (byte58 << 1) | (byte59 >>> 7);\n        final long byte60 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte59 & 127) << 4) | (byte60 >>> 4);\n        final long byte61 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte60 & 15) << 7) | (byte61 >>> 1);\n        final long byte62 = blocks[blocksOffset++] & 0xFF;\n        final long byte63 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte61 & 1) << 10) | (byte62 << 2) | (byte63 >>> 6);\n        final long byte64 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte63 & 63) << 5) | (byte64 >>> 3);\n        final long byte65 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte64 & 7) << 8) | byte65;\n        final long byte66 = blocks[blocksOffset++] & 0xFF;\n        final long byte67 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte66 << 3) | (byte67 >>> 5);\n        final long byte68 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte67 & 31) << 6) | (byte68 >>> 2);\n        final long byte69 = blocks[blocksOffset++] & 0xFF;\n        final long byte70 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte68 & 3) << 9) | (byte69 << 1) | (byte70 >>> 7);\n        final long byte71 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte70 & 127) << 4) | (byte71 >>> 4);\n        final long byte72 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte71 & 15) << 7) | (byte72 >>> 1);\n        final long byte73 = blocks[blocksOffset++] & 0xFF;\n        final long byte74 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte72 & 1) << 10) | (byte73 << 2) | (byte74 >>> 6);\n        final long byte75 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte74 & 63) << 5) | (byte75 >>> 3);\n        final long byte76 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte75 & 7) << 8) | byte76;\n        final long byte77 = blocks[blocksOffset++] & 0xFF;\n        final long byte78 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte77 << 3) | (byte78 >>> 5);\n        final long byte79 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte78 & 31) << 6) | (byte79 >>> 2);\n        final long byte80 = blocks[blocksOffset++] & 0xFF;\n        final long byte81 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte79 & 3) << 9) | (byte80 << 1) | (byte81 >>> 7);\n        final long byte82 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte81 & 127) << 4) | (byte82 >>> 4);\n        final long byte83 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte82 & 15) << 7) | (byte83 >>> 1);\n        final long byte84 = blocks[blocksOffset++] & 0xFF;\n        final long byte85 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte83 & 1) << 10) | (byte84 << 2) | (byte85 >>> 6);\n        final long byte86 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte85 & 63) << 5) | (byte86 >>> 3);\n        final long byte87 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte86 & 7) << 8) | byte87;\n      }\n    }\n\n","sourceOld":"    public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final long byte0 = blocks[blocksOffset++] & 0xFF;\n        final long byte1 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte0 << 3) | (byte1 >>> 5);\n        final long byte2 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte1 & 31) << 6) | (byte2 >>> 2);\n        final long byte3 = blocks[blocksOffset++] & 0xFF;\n        final long byte4 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte2 & 3) << 9) | (byte3 << 1) | (byte4 >>> 7);\n        final long byte5 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte4 & 127) << 4) | (byte5 >>> 4);\n        final long byte6 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte5 & 15) << 7) | (byte6 >>> 1);\n        final long byte7 = blocks[blocksOffset++] & 0xFF;\n        final long byte8 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte6 & 1) << 10) | (byte7 << 2) | (byte8 >>> 6);\n        final long byte9 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte8 & 63) << 5) | (byte9 >>> 3);\n        final long byte10 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte9 & 7) << 8) | byte10;\n        final long byte11 = blocks[blocksOffset++] & 0xFF;\n        final long byte12 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte11 << 3) | (byte12 >>> 5);\n        final long byte13 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte12 & 31) << 6) | (byte13 >>> 2);\n        final long byte14 = blocks[blocksOffset++] & 0xFF;\n        final long byte15 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte13 & 3) << 9) | (byte14 << 1) | (byte15 >>> 7);\n        final long byte16 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte15 & 127) << 4) | (byte16 >>> 4);\n        final long byte17 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte16 & 15) << 7) | (byte17 >>> 1);\n        final long byte18 = blocks[blocksOffset++] & 0xFF;\n        final long byte19 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte17 & 1) << 10) | (byte18 << 2) | (byte19 >>> 6);\n        final long byte20 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte19 & 63) << 5) | (byte20 >>> 3);\n        final long byte21 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte20 & 7) << 8) | byte21;\n        final long byte22 = blocks[blocksOffset++] & 0xFF;\n        final long byte23 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte22 << 3) | (byte23 >>> 5);\n        final long byte24 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte23 & 31) << 6) | (byte24 >>> 2);\n        final long byte25 = blocks[blocksOffset++] & 0xFF;\n        final long byte26 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte24 & 3) << 9) | (byte25 << 1) | (byte26 >>> 7);\n        final long byte27 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte26 & 127) << 4) | (byte27 >>> 4);\n        final long byte28 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte27 & 15) << 7) | (byte28 >>> 1);\n        final long byte29 = blocks[blocksOffset++] & 0xFF;\n        final long byte30 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte28 & 1) << 10) | (byte29 << 2) | (byte30 >>> 6);\n        final long byte31 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte30 & 63) << 5) | (byte31 >>> 3);\n        final long byte32 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte31 & 7) << 8) | byte32;\n        final long byte33 = blocks[blocksOffset++] & 0xFF;\n        final long byte34 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte33 << 3) | (byte34 >>> 5);\n        final long byte35 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte34 & 31) << 6) | (byte35 >>> 2);\n        final long byte36 = blocks[blocksOffset++] & 0xFF;\n        final long byte37 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte35 & 3) << 9) | (byte36 << 1) | (byte37 >>> 7);\n        final long byte38 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte37 & 127) << 4) | (byte38 >>> 4);\n        final long byte39 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte38 & 15) << 7) | (byte39 >>> 1);\n        final long byte40 = blocks[blocksOffset++] & 0xFF;\n        final long byte41 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte39 & 1) << 10) | (byte40 << 2) | (byte41 >>> 6);\n        final long byte42 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte41 & 63) << 5) | (byte42 >>> 3);\n        final long byte43 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte42 & 7) << 8) | byte43;\n        final long byte44 = blocks[blocksOffset++] & 0xFF;\n        final long byte45 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte44 << 3) | (byte45 >>> 5);\n        final long byte46 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte45 & 31) << 6) | (byte46 >>> 2);\n        final long byte47 = blocks[blocksOffset++] & 0xFF;\n        final long byte48 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte46 & 3) << 9) | (byte47 << 1) | (byte48 >>> 7);\n        final long byte49 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte48 & 127) << 4) | (byte49 >>> 4);\n        final long byte50 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte49 & 15) << 7) | (byte50 >>> 1);\n        final long byte51 = blocks[blocksOffset++] & 0xFF;\n        final long byte52 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte50 & 1) << 10) | (byte51 << 2) | (byte52 >>> 6);\n        final long byte53 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte52 & 63) << 5) | (byte53 >>> 3);\n        final long byte54 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte53 & 7) << 8) | byte54;\n        final long byte55 = blocks[blocksOffset++] & 0xFF;\n        final long byte56 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte55 << 3) | (byte56 >>> 5);\n        final long byte57 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte56 & 31) << 6) | (byte57 >>> 2);\n        final long byte58 = blocks[blocksOffset++] & 0xFF;\n        final long byte59 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte57 & 3) << 9) | (byte58 << 1) | (byte59 >>> 7);\n        final long byte60 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte59 & 127) << 4) | (byte60 >>> 4);\n        final long byte61 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte60 & 15) << 7) | (byte61 >>> 1);\n        final long byte62 = blocks[blocksOffset++] & 0xFF;\n        final long byte63 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte61 & 1) << 10) | (byte62 << 2) | (byte63 >>> 6);\n        final long byte64 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte63 & 63) << 5) | (byte64 >>> 3);\n        final long byte65 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte64 & 7) << 8) | byte65;\n        final long byte66 = blocks[blocksOffset++] & 0xFF;\n        final long byte67 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte66 << 3) | (byte67 >>> 5);\n        final long byte68 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte67 & 31) << 6) | (byte68 >>> 2);\n        final long byte69 = blocks[blocksOffset++] & 0xFF;\n        final long byte70 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte68 & 3) << 9) | (byte69 << 1) | (byte70 >>> 7);\n        final long byte71 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte70 & 127) << 4) | (byte71 >>> 4);\n        final long byte72 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte71 & 15) << 7) | (byte72 >>> 1);\n        final long byte73 = blocks[blocksOffset++] & 0xFF;\n        final long byte74 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte72 & 1) << 10) | (byte73 << 2) | (byte74 >>> 6);\n        final long byte75 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte74 & 63) << 5) | (byte75 >>> 3);\n        final long byte76 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte75 & 7) << 8) | byte76;\n        final long byte77 = blocks[blocksOffset++] & 0xFF;\n        final long byte78 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte77 << 3) | (byte78 >>> 5);\n        final long byte79 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte78 & 31) << 6) | (byte79 >>> 2);\n        final long byte80 = blocks[blocksOffset++] & 0xFF;\n        final long byte81 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte79 & 3) << 9) | (byte80 << 1) | (byte81 >>> 7);\n        final long byte82 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte81 & 127) << 4) | (byte82 >>> 4);\n        final long byte83 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte82 & 15) << 7) | (byte83 >>> 1);\n        final long byte84 = blocks[blocksOffset++] & 0xFF;\n        final long byte85 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte83 & 1) << 10) | (byte84 << 2) | (byte85 >>> 6);\n        final long byte86 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte85 & 63) << 5) | (byte86 >>> 3);\n        final long byte87 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte86 & 7) << 8) | byte87;\n      }\n    }\n\n","bugFix":null,"bugIntro":["818b04e906a094f03512fe99c83e359da8277708"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked11#decode(byte[],int,long[],int,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final long byte0 = blocks[blocksOffset++] & 0xFF;\n        final long byte1 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte0 << 3) | (byte1 >>> 5);\n        final long byte2 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte1 & 31) << 6) | (byte2 >>> 2);\n        final long byte3 = blocks[blocksOffset++] & 0xFF;\n        final long byte4 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte2 & 3) << 9) | (byte3 << 1) | (byte4 >>> 7);\n        final long byte5 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte4 & 127) << 4) | (byte5 >>> 4);\n        final long byte6 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte5 & 15) << 7) | (byte6 >>> 1);\n        final long byte7 = blocks[blocksOffset++] & 0xFF;\n        final long byte8 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte6 & 1) << 10) | (byte7 << 2) | (byte8 >>> 6);\n        final long byte9 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte8 & 63) << 5) | (byte9 >>> 3);\n        final long byte10 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte9 & 7) << 8) | byte10;\n        final long byte11 = blocks[blocksOffset++] & 0xFF;\n        final long byte12 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte11 << 3) | (byte12 >>> 5);\n        final long byte13 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte12 & 31) << 6) | (byte13 >>> 2);\n        final long byte14 = blocks[blocksOffset++] & 0xFF;\n        final long byte15 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte13 & 3) << 9) | (byte14 << 1) | (byte15 >>> 7);\n        final long byte16 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte15 & 127) << 4) | (byte16 >>> 4);\n        final long byte17 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte16 & 15) << 7) | (byte17 >>> 1);\n        final long byte18 = blocks[blocksOffset++] & 0xFF;\n        final long byte19 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte17 & 1) << 10) | (byte18 << 2) | (byte19 >>> 6);\n        final long byte20 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte19 & 63) << 5) | (byte20 >>> 3);\n        final long byte21 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte20 & 7) << 8) | byte21;\n        final long byte22 = blocks[blocksOffset++] & 0xFF;\n        final long byte23 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte22 << 3) | (byte23 >>> 5);\n        final long byte24 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte23 & 31) << 6) | (byte24 >>> 2);\n        final long byte25 = blocks[blocksOffset++] & 0xFF;\n        final long byte26 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte24 & 3) << 9) | (byte25 << 1) | (byte26 >>> 7);\n        final long byte27 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte26 & 127) << 4) | (byte27 >>> 4);\n        final long byte28 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte27 & 15) << 7) | (byte28 >>> 1);\n        final long byte29 = blocks[blocksOffset++] & 0xFF;\n        final long byte30 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte28 & 1) << 10) | (byte29 << 2) | (byte30 >>> 6);\n        final long byte31 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte30 & 63) << 5) | (byte31 >>> 3);\n        final long byte32 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte31 & 7) << 8) | byte32;\n        final long byte33 = blocks[blocksOffset++] & 0xFF;\n        final long byte34 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte33 << 3) | (byte34 >>> 5);\n        final long byte35 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte34 & 31) << 6) | (byte35 >>> 2);\n        final long byte36 = blocks[blocksOffset++] & 0xFF;\n        final long byte37 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte35 & 3) << 9) | (byte36 << 1) | (byte37 >>> 7);\n        final long byte38 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte37 & 127) << 4) | (byte38 >>> 4);\n        final long byte39 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte38 & 15) << 7) | (byte39 >>> 1);\n        final long byte40 = blocks[blocksOffset++] & 0xFF;\n        final long byte41 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte39 & 1) << 10) | (byte40 << 2) | (byte41 >>> 6);\n        final long byte42 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte41 & 63) << 5) | (byte42 >>> 3);\n        final long byte43 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte42 & 7) << 8) | byte43;\n        final long byte44 = blocks[blocksOffset++] & 0xFF;\n        final long byte45 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte44 << 3) | (byte45 >>> 5);\n        final long byte46 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte45 & 31) << 6) | (byte46 >>> 2);\n        final long byte47 = blocks[blocksOffset++] & 0xFF;\n        final long byte48 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte46 & 3) << 9) | (byte47 << 1) | (byte48 >>> 7);\n        final long byte49 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte48 & 127) << 4) | (byte49 >>> 4);\n        final long byte50 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte49 & 15) << 7) | (byte50 >>> 1);\n        final long byte51 = blocks[blocksOffset++] & 0xFF;\n        final long byte52 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte50 & 1) << 10) | (byte51 << 2) | (byte52 >>> 6);\n        final long byte53 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte52 & 63) << 5) | (byte53 >>> 3);\n        final long byte54 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte53 & 7) << 8) | byte54;\n        final long byte55 = blocks[blocksOffset++] & 0xFF;\n        final long byte56 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte55 << 3) | (byte56 >>> 5);\n        final long byte57 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte56 & 31) << 6) | (byte57 >>> 2);\n        final long byte58 = blocks[blocksOffset++] & 0xFF;\n        final long byte59 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte57 & 3) << 9) | (byte58 << 1) | (byte59 >>> 7);\n        final long byte60 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte59 & 127) << 4) | (byte60 >>> 4);\n        final long byte61 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte60 & 15) << 7) | (byte61 >>> 1);\n        final long byte62 = blocks[blocksOffset++] & 0xFF;\n        final long byte63 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte61 & 1) << 10) | (byte62 << 2) | (byte63 >>> 6);\n        final long byte64 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte63 & 63) << 5) | (byte64 >>> 3);\n        final long byte65 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte64 & 7) << 8) | byte65;\n        final long byte66 = blocks[blocksOffset++] & 0xFF;\n        final long byte67 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte66 << 3) | (byte67 >>> 5);\n        final long byte68 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte67 & 31) << 6) | (byte68 >>> 2);\n        final long byte69 = blocks[blocksOffset++] & 0xFF;\n        final long byte70 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte68 & 3) << 9) | (byte69 << 1) | (byte70 >>> 7);\n        final long byte71 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte70 & 127) << 4) | (byte71 >>> 4);\n        final long byte72 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte71 & 15) << 7) | (byte72 >>> 1);\n        final long byte73 = blocks[blocksOffset++] & 0xFF;\n        final long byte74 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte72 & 1) << 10) | (byte73 << 2) | (byte74 >>> 6);\n        final long byte75 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte74 & 63) << 5) | (byte75 >>> 3);\n        final long byte76 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte75 & 7) << 8) | byte76;\n        final long byte77 = blocks[blocksOffset++] & 0xFF;\n        final long byte78 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte77 << 3) | (byte78 >>> 5);\n        final long byte79 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte78 & 31) << 6) | (byte79 >>> 2);\n        final long byte80 = blocks[blocksOffset++] & 0xFF;\n        final long byte81 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte79 & 3) << 9) | (byte80 << 1) | (byte81 >>> 7);\n        final long byte82 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte81 & 127) << 4) | (byte82 >>> 4);\n        final long byte83 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte82 & 15) << 7) | (byte83 >>> 1);\n        final long byte84 = blocks[blocksOffset++] & 0xFF;\n        final long byte85 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte83 & 1) << 10) | (byte84 << 2) | (byte85 >>> 6);\n        final long byte86 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte85 & 63) << 5) | (byte86 >>> 3);\n        final long byte87 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte86 & 7) << 8) | byte87;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"818b04e906a094f03512fe99c83e359da8277708","date":1346427149,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked11#decode(byte[],int,long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked11#decode(byte[],int,long[],int,int).mjava","sourceNew":"  @Override\n  public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n    for (int i = 0; i < 8 * iterations; ++i) {\n      final long byte0 = blocks[blocksOffset++] & 0xFF;\n      final long byte1 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = (byte0 << 3) | (byte1 >>> 5);\n      final long byte2 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte1 & 31) << 6) | (byte2 >>> 2);\n      final long byte3 = blocks[blocksOffset++] & 0xFF;\n      final long byte4 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte2 & 3) << 9) | (byte3 << 1) | (byte4 >>> 7);\n      final long byte5 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte4 & 127) << 4) | (byte5 >>> 4);\n      final long byte6 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte5 & 15) << 7) | (byte6 >>> 1);\n      final long byte7 = blocks[blocksOffset++] & 0xFF;\n      final long byte8 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte6 & 1) << 10) | (byte7 << 2) | (byte8 >>> 6);\n      final long byte9 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte8 & 63) << 5) | (byte9 >>> 3);\n      final long byte10 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte9 & 7) << 8) | byte10;\n    }\n  }\n\n","sourceOld":"    @Override\n    public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final long byte0 = blocks[blocksOffset++] & 0xFF;\n        final long byte1 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte0 << 3) | (byte1 >>> 5);\n        final long byte2 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte1 & 31) << 6) | (byte2 >>> 2);\n        final long byte3 = blocks[blocksOffset++] & 0xFF;\n        final long byte4 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte2 & 3) << 9) | (byte3 << 1) | (byte4 >>> 7);\n        final long byte5 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte4 & 127) << 4) | (byte5 >>> 4);\n        final long byte6 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte5 & 15) << 7) | (byte6 >>> 1);\n        final long byte7 = blocks[blocksOffset++] & 0xFF;\n        final long byte8 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte6 & 1) << 10) | (byte7 << 2) | (byte8 >>> 6);\n        final long byte9 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte8 & 63) << 5) | (byte9 >>> 3);\n        final long byte10 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte9 & 7) << 8) | byte10;\n        final long byte11 = blocks[blocksOffset++] & 0xFF;\n        final long byte12 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte11 << 3) | (byte12 >>> 5);\n        final long byte13 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte12 & 31) << 6) | (byte13 >>> 2);\n        final long byte14 = blocks[blocksOffset++] & 0xFF;\n        final long byte15 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte13 & 3) << 9) | (byte14 << 1) | (byte15 >>> 7);\n        final long byte16 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte15 & 127) << 4) | (byte16 >>> 4);\n        final long byte17 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte16 & 15) << 7) | (byte17 >>> 1);\n        final long byte18 = blocks[blocksOffset++] & 0xFF;\n        final long byte19 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte17 & 1) << 10) | (byte18 << 2) | (byte19 >>> 6);\n        final long byte20 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte19 & 63) << 5) | (byte20 >>> 3);\n        final long byte21 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte20 & 7) << 8) | byte21;\n        final long byte22 = blocks[blocksOffset++] & 0xFF;\n        final long byte23 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte22 << 3) | (byte23 >>> 5);\n        final long byte24 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte23 & 31) << 6) | (byte24 >>> 2);\n        final long byte25 = blocks[blocksOffset++] & 0xFF;\n        final long byte26 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte24 & 3) << 9) | (byte25 << 1) | (byte26 >>> 7);\n        final long byte27 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte26 & 127) << 4) | (byte27 >>> 4);\n        final long byte28 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte27 & 15) << 7) | (byte28 >>> 1);\n        final long byte29 = blocks[blocksOffset++] & 0xFF;\n        final long byte30 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte28 & 1) << 10) | (byte29 << 2) | (byte30 >>> 6);\n        final long byte31 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte30 & 63) << 5) | (byte31 >>> 3);\n        final long byte32 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte31 & 7) << 8) | byte32;\n        final long byte33 = blocks[blocksOffset++] & 0xFF;\n        final long byte34 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte33 << 3) | (byte34 >>> 5);\n        final long byte35 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte34 & 31) << 6) | (byte35 >>> 2);\n        final long byte36 = blocks[blocksOffset++] & 0xFF;\n        final long byte37 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte35 & 3) << 9) | (byte36 << 1) | (byte37 >>> 7);\n        final long byte38 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte37 & 127) << 4) | (byte38 >>> 4);\n        final long byte39 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte38 & 15) << 7) | (byte39 >>> 1);\n        final long byte40 = blocks[blocksOffset++] & 0xFF;\n        final long byte41 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte39 & 1) << 10) | (byte40 << 2) | (byte41 >>> 6);\n        final long byte42 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte41 & 63) << 5) | (byte42 >>> 3);\n        final long byte43 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte42 & 7) << 8) | byte43;\n        final long byte44 = blocks[blocksOffset++] & 0xFF;\n        final long byte45 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte44 << 3) | (byte45 >>> 5);\n        final long byte46 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte45 & 31) << 6) | (byte46 >>> 2);\n        final long byte47 = blocks[blocksOffset++] & 0xFF;\n        final long byte48 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte46 & 3) << 9) | (byte47 << 1) | (byte48 >>> 7);\n        final long byte49 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte48 & 127) << 4) | (byte49 >>> 4);\n        final long byte50 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte49 & 15) << 7) | (byte50 >>> 1);\n        final long byte51 = blocks[blocksOffset++] & 0xFF;\n        final long byte52 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte50 & 1) << 10) | (byte51 << 2) | (byte52 >>> 6);\n        final long byte53 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte52 & 63) << 5) | (byte53 >>> 3);\n        final long byte54 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte53 & 7) << 8) | byte54;\n        final long byte55 = blocks[blocksOffset++] & 0xFF;\n        final long byte56 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte55 << 3) | (byte56 >>> 5);\n        final long byte57 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte56 & 31) << 6) | (byte57 >>> 2);\n        final long byte58 = blocks[blocksOffset++] & 0xFF;\n        final long byte59 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte57 & 3) << 9) | (byte58 << 1) | (byte59 >>> 7);\n        final long byte60 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte59 & 127) << 4) | (byte60 >>> 4);\n        final long byte61 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte60 & 15) << 7) | (byte61 >>> 1);\n        final long byte62 = blocks[blocksOffset++] & 0xFF;\n        final long byte63 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte61 & 1) << 10) | (byte62 << 2) | (byte63 >>> 6);\n        final long byte64 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte63 & 63) << 5) | (byte64 >>> 3);\n        final long byte65 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte64 & 7) << 8) | byte65;\n        final long byte66 = blocks[blocksOffset++] & 0xFF;\n        final long byte67 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte66 << 3) | (byte67 >>> 5);\n        final long byte68 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte67 & 31) << 6) | (byte68 >>> 2);\n        final long byte69 = blocks[blocksOffset++] & 0xFF;\n        final long byte70 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte68 & 3) << 9) | (byte69 << 1) | (byte70 >>> 7);\n        final long byte71 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte70 & 127) << 4) | (byte71 >>> 4);\n        final long byte72 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte71 & 15) << 7) | (byte72 >>> 1);\n        final long byte73 = blocks[blocksOffset++] & 0xFF;\n        final long byte74 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte72 & 1) << 10) | (byte73 << 2) | (byte74 >>> 6);\n        final long byte75 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte74 & 63) << 5) | (byte75 >>> 3);\n        final long byte76 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte75 & 7) << 8) | byte76;\n        final long byte77 = blocks[blocksOffset++] & 0xFF;\n        final long byte78 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte77 << 3) | (byte78 >>> 5);\n        final long byte79 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte78 & 31) << 6) | (byte79 >>> 2);\n        final long byte80 = blocks[blocksOffset++] & 0xFF;\n        final long byte81 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte79 & 3) << 9) | (byte80 << 1) | (byte81 >>> 7);\n        final long byte82 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte81 & 127) << 4) | (byte82 >>> 4);\n        final long byte83 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte82 & 15) << 7) | (byte83 >>> 1);\n        final long byte84 = blocks[blocksOffset++] & 0xFF;\n        final long byte85 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte83 & 1) << 10) | (byte84 << 2) | (byte85 >>> 6);\n        final long byte86 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte85 & 63) << 5) | (byte86 >>> 3);\n        final long byte87 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte86 & 7) << 8) | byte87;\n      }\n    }\n\n","bugFix":["353f5909b00345d98d079a7db9a1bbe7485b1ea6","3edb451c214b0d41e9d16514e3a1d6984ca2ca5f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d1f90e969803cc84174589b5e4a39b7935fecd","date":1346584861,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked11#decode(byte[],int,long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked11#decode(byte[],int,long[],int,int).mjava","sourceNew":"  @Override\n  public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n    for (int i = 0; i < 8 * iterations; ++i) {\n      final long byte0 = blocks[blocksOffset++] & 0xFF;\n      final long byte1 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = (byte0 << 3) | (byte1 >>> 5);\n      final long byte2 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte1 & 31) << 6) | (byte2 >>> 2);\n      final long byte3 = blocks[blocksOffset++] & 0xFF;\n      final long byte4 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte2 & 3) << 9) | (byte3 << 1) | (byte4 >>> 7);\n      final long byte5 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte4 & 127) << 4) | (byte5 >>> 4);\n      final long byte6 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte5 & 15) << 7) | (byte6 >>> 1);\n      final long byte7 = blocks[blocksOffset++] & 0xFF;\n      final long byte8 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte6 & 1) << 10) | (byte7 << 2) | (byte8 >>> 6);\n      final long byte9 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte8 & 63) << 5) | (byte9 >>> 3);\n      final long byte10 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte9 & 7) << 8) | byte10;\n    }\n  }\n\n","sourceOld":"    @Override\n    public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final long byte0 = blocks[blocksOffset++] & 0xFF;\n        final long byte1 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte0 << 3) | (byte1 >>> 5);\n        final long byte2 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte1 & 31) << 6) | (byte2 >>> 2);\n        final long byte3 = blocks[blocksOffset++] & 0xFF;\n        final long byte4 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte2 & 3) << 9) | (byte3 << 1) | (byte4 >>> 7);\n        final long byte5 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte4 & 127) << 4) | (byte5 >>> 4);\n        final long byte6 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte5 & 15) << 7) | (byte6 >>> 1);\n        final long byte7 = blocks[blocksOffset++] & 0xFF;\n        final long byte8 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte6 & 1) << 10) | (byte7 << 2) | (byte8 >>> 6);\n        final long byte9 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte8 & 63) << 5) | (byte9 >>> 3);\n        final long byte10 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte9 & 7) << 8) | byte10;\n        final long byte11 = blocks[blocksOffset++] & 0xFF;\n        final long byte12 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte11 << 3) | (byte12 >>> 5);\n        final long byte13 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte12 & 31) << 6) | (byte13 >>> 2);\n        final long byte14 = blocks[blocksOffset++] & 0xFF;\n        final long byte15 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte13 & 3) << 9) | (byte14 << 1) | (byte15 >>> 7);\n        final long byte16 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte15 & 127) << 4) | (byte16 >>> 4);\n        final long byte17 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte16 & 15) << 7) | (byte17 >>> 1);\n        final long byte18 = blocks[blocksOffset++] & 0xFF;\n        final long byte19 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte17 & 1) << 10) | (byte18 << 2) | (byte19 >>> 6);\n        final long byte20 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte19 & 63) << 5) | (byte20 >>> 3);\n        final long byte21 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte20 & 7) << 8) | byte21;\n        final long byte22 = blocks[blocksOffset++] & 0xFF;\n        final long byte23 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte22 << 3) | (byte23 >>> 5);\n        final long byte24 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte23 & 31) << 6) | (byte24 >>> 2);\n        final long byte25 = blocks[blocksOffset++] & 0xFF;\n        final long byte26 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte24 & 3) << 9) | (byte25 << 1) | (byte26 >>> 7);\n        final long byte27 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte26 & 127) << 4) | (byte27 >>> 4);\n        final long byte28 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte27 & 15) << 7) | (byte28 >>> 1);\n        final long byte29 = blocks[blocksOffset++] & 0xFF;\n        final long byte30 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte28 & 1) << 10) | (byte29 << 2) | (byte30 >>> 6);\n        final long byte31 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte30 & 63) << 5) | (byte31 >>> 3);\n        final long byte32 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte31 & 7) << 8) | byte32;\n        final long byte33 = blocks[blocksOffset++] & 0xFF;\n        final long byte34 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte33 << 3) | (byte34 >>> 5);\n        final long byte35 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte34 & 31) << 6) | (byte35 >>> 2);\n        final long byte36 = blocks[blocksOffset++] & 0xFF;\n        final long byte37 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte35 & 3) << 9) | (byte36 << 1) | (byte37 >>> 7);\n        final long byte38 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte37 & 127) << 4) | (byte38 >>> 4);\n        final long byte39 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte38 & 15) << 7) | (byte39 >>> 1);\n        final long byte40 = blocks[blocksOffset++] & 0xFF;\n        final long byte41 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte39 & 1) << 10) | (byte40 << 2) | (byte41 >>> 6);\n        final long byte42 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte41 & 63) << 5) | (byte42 >>> 3);\n        final long byte43 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte42 & 7) << 8) | byte43;\n        final long byte44 = blocks[blocksOffset++] & 0xFF;\n        final long byte45 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte44 << 3) | (byte45 >>> 5);\n        final long byte46 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte45 & 31) << 6) | (byte46 >>> 2);\n        final long byte47 = blocks[blocksOffset++] & 0xFF;\n        final long byte48 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte46 & 3) << 9) | (byte47 << 1) | (byte48 >>> 7);\n        final long byte49 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte48 & 127) << 4) | (byte49 >>> 4);\n        final long byte50 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte49 & 15) << 7) | (byte50 >>> 1);\n        final long byte51 = blocks[blocksOffset++] & 0xFF;\n        final long byte52 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte50 & 1) << 10) | (byte51 << 2) | (byte52 >>> 6);\n        final long byte53 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte52 & 63) << 5) | (byte53 >>> 3);\n        final long byte54 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte53 & 7) << 8) | byte54;\n        final long byte55 = blocks[blocksOffset++] & 0xFF;\n        final long byte56 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte55 << 3) | (byte56 >>> 5);\n        final long byte57 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte56 & 31) << 6) | (byte57 >>> 2);\n        final long byte58 = blocks[blocksOffset++] & 0xFF;\n        final long byte59 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte57 & 3) << 9) | (byte58 << 1) | (byte59 >>> 7);\n        final long byte60 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte59 & 127) << 4) | (byte60 >>> 4);\n        final long byte61 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte60 & 15) << 7) | (byte61 >>> 1);\n        final long byte62 = blocks[blocksOffset++] & 0xFF;\n        final long byte63 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte61 & 1) << 10) | (byte62 << 2) | (byte63 >>> 6);\n        final long byte64 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte63 & 63) << 5) | (byte64 >>> 3);\n        final long byte65 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte64 & 7) << 8) | byte65;\n        final long byte66 = blocks[blocksOffset++] & 0xFF;\n        final long byte67 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte66 << 3) | (byte67 >>> 5);\n        final long byte68 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte67 & 31) << 6) | (byte68 >>> 2);\n        final long byte69 = blocks[blocksOffset++] & 0xFF;\n        final long byte70 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte68 & 3) << 9) | (byte69 << 1) | (byte70 >>> 7);\n        final long byte71 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte70 & 127) << 4) | (byte71 >>> 4);\n        final long byte72 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte71 & 15) << 7) | (byte72 >>> 1);\n        final long byte73 = blocks[blocksOffset++] & 0xFF;\n        final long byte74 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte72 & 1) << 10) | (byte73 << 2) | (byte74 >>> 6);\n        final long byte75 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte74 & 63) << 5) | (byte75 >>> 3);\n        final long byte76 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte75 & 7) << 8) | byte76;\n        final long byte77 = blocks[blocksOffset++] & 0xFF;\n        final long byte78 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte77 << 3) | (byte78 >>> 5);\n        final long byte79 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte78 & 31) << 6) | (byte79 >>> 2);\n        final long byte80 = blocks[blocksOffset++] & 0xFF;\n        final long byte81 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte79 & 3) << 9) | (byte80 << 1) | (byte81 >>> 7);\n        final long byte82 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte81 & 127) << 4) | (byte82 >>> 4);\n        final long byte83 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte82 & 15) << 7) | (byte83 >>> 1);\n        final long byte84 = blocks[blocksOffset++] & 0xFF;\n        final long byte85 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte83 & 1) << 10) | (byte84 << 2) | (byte85 >>> 6);\n        final long byte86 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte85 & 63) << 5) | (byte86 >>> 3);\n        final long byte87 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte86 & 7) << 8) | byte87;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e29d4d91327929d477b701d3ef2f5b3457d26ec5","date":1359465689,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked11#decode(byte[],int,long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked11#decode(byte[],int,long[],int,int).mjava","sourceNew":"  @Override\n  public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n    for (int i = 0; i < iterations; ++i) {\n      final long byte0 = blocks[blocksOffset++] & 0xFF;\n      final long byte1 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = (byte0 << 3) | (byte1 >>> 5);\n      final long byte2 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte1 & 31) << 6) | (byte2 >>> 2);\n      final long byte3 = blocks[blocksOffset++] & 0xFF;\n      final long byte4 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte2 & 3) << 9) | (byte3 << 1) | (byte4 >>> 7);\n      final long byte5 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte4 & 127) << 4) | (byte5 >>> 4);\n      final long byte6 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte5 & 15) << 7) | (byte6 >>> 1);\n      final long byte7 = blocks[blocksOffset++] & 0xFF;\n      final long byte8 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte6 & 1) << 10) | (byte7 << 2) | (byte8 >>> 6);\n      final long byte9 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte8 & 63) << 5) | (byte9 >>> 3);\n      final long byte10 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte9 & 7) << 8) | byte10;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n    for (int i = 0; i < 8 * iterations; ++i) {\n      final long byte0 = blocks[blocksOffset++] & 0xFF;\n      final long byte1 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = (byte0 << 3) | (byte1 >>> 5);\n      final long byte2 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte1 & 31) << 6) | (byte2 >>> 2);\n      final long byte3 = blocks[blocksOffset++] & 0xFF;\n      final long byte4 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte2 & 3) << 9) | (byte3 << 1) | (byte4 >>> 7);\n      final long byte5 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte4 & 127) << 4) | (byte5 >>> 4);\n      final long byte6 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte5 & 15) << 7) | (byte6 >>> 1);\n      final long byte7 = blocks[blocksOffset++] & 0xFF;\n      final long byte8 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte6 & 1) << 10) | (byte7 << 2) | (byte8 >>> 6);\n      final long byte9 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte8 & 63) << 5) | (byte9 >>> 3);\n      final long byte10 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte9 & 7) << 8) | byte10;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de522d9303bd67c8473a269a1319125d1f3700e0","date":1359477856,"type":3,"author":"Adrien Grand","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked11#decode(byte[],int,long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked11#decode(byte[],int,long[],int,int).mjava","sourceNew":"  @Override\n  public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n    for (int i = 0; i < iterations; ++i) {\n      final long byte0 = blocks[blocksOffset++] & 0xFF;\n      final long byte1 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = (byte0 << 3) | (byte1 >>> 5);\n      final long byte2 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte1 & 31) << 6) | (byte2 >>> 2);\n      final long byte3 = blocks[blocksOffset++] & 0xFF;\n      final long byte4 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte2 & 3) << 9) | (byte3 << 1) | (byte4 >>> 7);\n      final long byte5 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte4 & 127) << 4) | (byte5 >>> 4);\n      final long byte6 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte5 & 15) << 7) | (byte6 >>> 1);\n      final long byte7 = blocks[blocksOffset++] & 0xFF;\n      final long byte8 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte6 & 1) << 10) | (byte7 << 2) | (byte8 >>> 6);\n      final long byte9 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte8 & 63) << 5) | (byte9 >>> 3);\n      final long byte10 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte9 & 7) << 8) | byte10;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n    for (int i = 0; i < 8 * iterations; ++i) {\n      final long byte0 = blocks[blocksOffset++] & 0xFF;\n      final long byte1 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = (byte0 << 3) | (byte1 >>> 5);\n      final long byte2 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte1 & 31) << 6) | (byte2 >>> 2);\n      final long byte3 = blocks[blocksOffset++] & 0xFF;\n      final long byte4 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte2 & 3) << 9) | (byte3 << 1) | (byte4 >>> 7);\n      final long byte5 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte4 & 127) << 4) | (byte5 >>> 4);\n      final long byte6 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte5 & 15) << 7) | (byte6 >>> 1);\n      final long byte7 = blocks[blocksOffset++] & 0xFF;\n      final long byte8 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte6 & 1) << 10) | (byte7 << 2) | (byte8 >>> 6);\n      final long byte9 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte8 & 63) << 5) | (byte9 >>> 3);\n      final long byte10 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte9 & 7) << 8) | byte10;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e29d4d91327929d477b701d3ef2f5b3457d26ec5":["818b04e906a094f03512fe99c83e359da8277708"],"353f5909b00345d98d079a7db9a1bbe7485b1ea6":["3edb451c214b0d41e9d16514e3a1d6984ca2ca5f"],"001b25b42373b22a52f399dbf072f1224632e8e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","353f5909b00345d98d079a7db9a1bbe7485b1ea6"],"d0d1f90e969803cc84174589b5e4a39b7935fecd":["001b25b42373b22a52f399dbf072f1224632e8e6","818b04e906a094f03512fe99c83e359da8277708"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"de522d9303bd67c8473a269a1319125d1f3700e0":["818b04e906a094f03512fe99c83e359da8277708","e29d4d91327929d477b701d3ef2f5b3457d26ec5"],"818b04e906a094f03512fe99c83e359da8277708":["353f5909b00345d98d079a7db9a1bbe7485b1ea6"],"3edb451c214b0d41e9d16514e3a1d6984ca2ca5f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e29d4d91327929d477b701d3ef2f5b3457d26ec5"]},"commit2Childs":{"e29d4d91327929d477b701d3ef2f5b3457d26ec5":["de522d9303bd67c8473a269a1319125d1f3700e0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"353f5909b00345d98d079a7db9a1bbe7485b1ea6":["001b25b42373b22a52f399dbf072f1224632e8e6","818b04e906a094f03512fe99c83e359da8277708"],"001b25b42373b22a52f399dbf072f1224632e8e6":["d0d1f90e969803cc84174589b5e4a39b7935fecd"],"d0d1f90e969803cc84174589b5e4a39b7935fecd":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["001b25b42373b22a52f399dbf072f1224632e8e6","3edb451c214b0d41e9d16514e3a1d6984ca2ca5f"],"de522d9303bd67c8473a269a1319125d1f3700e0":[],"818b04e906a094f03512fe99c83e359da8277708":["e29d4d91327929d477b701d3ef2f5b3457d26ec5","d0d1f90e969803cc84174589b5e4a39b7935fecd","de522d9303bd67c8473a269a1319125d1f3700e0"],"3edb451c214b0d41e9d16514e3a1d6984ca2ca5f":["353f5909b00345d98d079a7db9a1bbe7485b1ea6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d0d1f90e969803cc84174589b5e4a39b7935fecd","de522d9303bd67c8473a269a1319125d1f3700e0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}