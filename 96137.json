{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40SegmentTermsEnumFrame#scanToSubBlock(long).mjava","commits":[{"id":"0628077afea69a2955260949478afabab8e500d8","date":1413915332,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40SegmentTermsEnumFrame#scanToSubBlock(long).mjava","pathOld":"/dev/null","sourceNew":"  // Scans to sub-block that has this target fp; only\n  // called by next(); NOTE: does not set\n  // startBytePos/suffix as a side effect\n  public void scanToSubBlock(long subFP) {\n    assert !isLeafBlock;\n    //if (DEBUG) System.out.println(\"  scanToSubBlock fp=\" + fp + \" subFP=\" + subFP + \" entCount=\" + entCount + \" lastSubFP=\" + lastSubFP);\n    //assert nextEnt == 0;\n    if (lastSubFP == subFP) {\n      //if (DEBUG) System.out.println(\"    already positioned\");\n      return;\n    }\n    assert subFP < fp : \"fp=\" + fp + \" subFP=\" + subFP;\n    final long targetSubCode = fp - subFP;\n    //if (DEBUG) System.out.println(\"    targetSubCode=\" + targetSubCode);\n    while(true) {\n      assert nextEnt < entCount;\n      nextEnt++;\n      final int code = suffixesReader.readVInt();\n      suffixesReader.skipBytes(isLeafBlock ? code : code >>> 1);\n      //if (DEBUG) System.out.println(\"    \" + nextEnt + \" (of \" + entCount + \") ent isSubBlock=\" + ((code&1)==1));\n      if ((code & 1) != 0) {\n        final long subCode = suffixesReader.readVLong();\n        //if (DEBUG) System.out.println(\"      subCode=\" + subCode);\n        if (targetSubCode == subCode) {\n          //if (DEBUG) System.out.println(\"        match!\");\n          lastSubFP = subFP;\n          return;\n        }\n      } else {\n        state.termBlockOrd++;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40SegmentTermsEnumFrame#scanToSubBlock(long).mjava","pathOld":"/dev/null","sourceNew":"  // Scans to sub-block that has this target fp; only\n  // called by next(); NOTE: does not set\n  // startBytePos/suffix as a side effect\n  public void scanToSubBlock(long subFP) {\n    assert !isLeafBlock;\n    //if (DEBUG) System.out.println(\"  scanToSubBlock fp=\" + fp + \" subFP=\" + subFP + \" entCount=\" + entCount + \" lastSubFP=\" + lastSubFP);\n    //assert nextEnt == 0;\n    if (lastSubFP == subFP) {\n      //if (DEBUG) System.out.println(\"    already positioned\");\n      return;\n    }\n    assert subFP < fp : \"fp=\" + fp + \" subFP=\" + subFP;\n    final long targetSubCode = fp - subFP;\n    //if (DEBUG) System.out.println(\"    targetSubCode=\" + targetSubCode);\n    while(true) {\n      assert nextEnt < entCount;\n      nextEnt++;\n      final int code = suffixesReader.readVInt();\n      suffixesReader.skipBytes(isLeafBlock ? code : code >>> 1);\n      //if (DEBUG) System.out.println(\"    \" + nextEnt + \" (of \" + entCount + \") ent isSubBlock=\" + ((code&1)==1));\n      if ((code & 1) != 0) {\n        final long subCode = suffixesReader.readVLong();\n        //if (DEBUG) System.out.println(\"      subCode=\" + subCode);\n        if (targetSubCode == subCode) {\n          //if (DEBUG) System.out.println(\"        match!\");\n          lastSubFP = subFP;\n          return;\n        }\n      } else {\n        state.termBlockOrd++;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40SegmentTermsEnumFrame#scanToSubBlock(long).mjava","sourceNew":null,"sourceOld":"  // Scans to sub-block that has this target fp; only\n  // called by next(); NOTE: does not set\n  // startBytePos/suffix as a side effect\n  public void scanToSubBlock(long subFP) {\n    assert !isLeafBlock;\n    //if (DEBUG) System.out.println(\"  scanToSubBlock fp=\" + fp + \" subFP=\" + subFP + \" entCount=\" + entCount + \" lastSubFP=\" + lastSubFP);\n    //assert nextEnt == 0;\n    if (lastSubFP == subFP) {\n      //if (DEBUG) System.out.println(\"    already positioned\");\n      return;\n    }\n    assert subFP < fp : \"fp=\" + fp + \" subFP=\" + subFP;\n    final long targetSubCode = fp - subFP;\n    //if (DEBUG) System.out.println(\"    targetSubCode=\" + targetSubCode);\n    while(true) {\n      assert nextEnt < entCount;\n      nextEnt++;\n      final int code = suffixesReader.readVInt();\n      suffixesReader.skipBytes(isLeafBlock ? code : code >>> 1);\n      //if (DEBUG) System.out.println(\"    \" + nextEnt + \" (of \" + entCount + \") ent isSubBlock=\" + ((code&1)==1));\n      if ((code & 1) != 0) {\n        final long subCode = suffixesReader.readVLong();\n        //if (DEBUG) System.out.println(\"      subCode=\" + subCode);\n        if (targetSubCode == subCode) {\n          //if (DEBUG) System.out.println(\"        match!\");\n          lastSubFP = subFP;\n          return;\n        }\n      } else {\n        state.termBlockOrd++;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0628077afea69a2955260949478afabab8e500d8"],"0628077afea69a2955260949478afabab8e500d8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","0628077afea69a2955260949478afabab8e500d8"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"0628077afea69a2955260949478afabab8e500d8":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}