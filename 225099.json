{"path":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#addDocument(Term,Iterable[#-extends-IndexableField]).mjava","commits":[{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#addDocument(Term,Iterable[#-extends-IndexableField]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#addDocument(Term,IndexDocument).mjava","sourceNew":"  @Override\n  protected void addDocument(Term id, Iterable<? extends IndexableField> doc) throws Exception {\n    final long gen = genWriter.addDocument(doc);\n\n    // Randomly verify the add \"took\":\n    if (random().nextInt(20) == 2) {\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: verify \" + id);\n      }\n      nrtNoDeletesThread.waitForGeneration(gen);\n      assertTrue(gen <= nrtNoDeletesThread.getSearchingGen());\n      final IndexSearcher s = nrtNoDeletes.acquire();\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: got searcher=\" + s);\n      }\n      try {\n        assertEquals(1, s.search(new TermQuery(id), 10).totalHits);\n      } finally {\n        nrtNoDeletes.release(s);\n      }\n    }\n    lastGens.set(gen);\n  }\n\n","sourceOld":"  @Override\n  protected void addDocument(Term id, IndexDocument doc) throws Exception {\n    final long gen = genWriter.addDocument(doc);\n\n    // Randomly verify the add \"took\":\n    if (random().nextInt(20) == 2) {\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: verify \" + id);\n      }\n      nrtNoDeletesThread.waitForGeneration(gen);\n      assertTrue(gen <= nrtNoDeletesThread.getSearchingGen());\n      final IndexSearcher s = nrtNoDeletes.acquire();\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: got searcher=\" + s);\n      }\n      try {\n        assertEquals(1, s.search(new TermQuery(id), 10).totalHits);\n      } finally {\n        nrtNoDeletes.release(s);\n      }\n    }\n    lastGens.set(gen);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"730b7b729dd280f1fec51e6b252f24c4de2a68e1","date":1465891767,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#addDocument(Term,Iterable[#-extends-IndexableField]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#addDocument(Term,Iterable[#-extends-IndexableField]).mjava","sourceNew":"  @Override\n  protected void addDocument(Term id, Iterable<? extends IndexableField> doc) throws Exception {\n    final long gen = genWriter.addDocument(doc);\n\n    // Randomly verify the add \"took\":\n    if (random().nextInt(20) == 2) {\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: verify addDocument \" + id + \" gen=\" + gen);\n      }\n      nrtNoDeletesThread.waitForGeneration(gen);\n      assertTrue(gen <= nrtNoDeletesThread.getSearchingGen());\n      final IndexSearcher s = nrtNoDeletes.acquire();\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: got noDeletes searcher=\" + s);\n      }\n      try {\n        assertEquals(1, s.search(new TermQuery(id), 10).totalHits);\n      } finally {\n        nrtNoDeletes.release(s);\n      }\n    }\n    lastGens.set(gen);\n  }\n\n","sourceOld":"  @Override\n  protected void addDocument(Term id, Iterable<? extends IndexableField> doc) throws Exception {\n    final long gen = genWriter.addDocument(doc);\n\n    // Randomly verify the add \"took\":\n    if (random().nextInt(20) == 2) {\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: verify \" + id);\n      }\n      nrtNoDeletesThread.waitForGeneration(gen);\n      assertTrue(gen <= nrtNoDeletesThread.getSearchingGen());\n      final IndexSearcher s = nrtNoDeletes.acquire();\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: got searcher=\" + s);\n      }\n      try {\n        assertEquals(1, s.search(new TermQuery(id), 10).totalHits);\n      } finally {\n        nrtNoDeletes.release(s);\n      }\n    }\n    lastGens.set(gen);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","date":1465913303,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#addDocument(Term,Iterable[#-extends-IndexableField]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#addDocument(Term,Iterable[#-extends-IndexableField]).mjava","sourceNew":"  @Override\n  protected void addDocument(Term id, Iterable<? extends IndexableField> doc) throws Exception {\n    final long gen = genWriter.addDocument(doc);\n\n    // Randomly verify the add \"took\":\n    if (random().nextInt(20) == 2) {\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: verify addDocument \" + id + \" gen=\" + gen);\n      }\n      nrtNoDeletesThread.waitForGeneration(gen);\n      assertTrue(gen <= nrtNoDeletesThread.getSearchingGen());\n      final IndexSearcher s = nrtNoDeletes.acquire();\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: got noDeletes searcher=\" + s);\n      }\n      try {\n        assertEquals(1, s.search(new TermQuery(id), 10).totalHits);\n      } finally {\n        nrtNoDeletes.release(s);\n      }\n    }\n    lastGens.set(gen);\n  }\n\n","sourceOld":"  @Override\n  protected void addDocument(Term id, Iterable<? extends IndexableField> doc) throws Exception {\n    final long gen = genWriter.addDocument(doc);\n\n    // Randomly verify the add \"took\":\n    if (random().nextInt(20) == 2) {\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: verify \" + id);\n      }\n      nrtNoDeletesThread.waitForGeneration(gen);\n      assertTrue(gen <= nrtNoDeletesThread.getSearchingGen());\n      final IndexSearcher s = nrtNoDeletes.acquire();\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: got searcher=\" + s);\n      }\n      try {\n        assertEquals(1, s.search(new TermQuery(id), 10).totalHits);\n      } finally {\n        nrtNoDeletes.release(s);\n      }\n    }\n    lastGens.set(gen);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#addDocument(Term,Iterable[#-extends-IndexableField]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#addDocument(Term,Iterable[#-extends-IndexableField]).mjava","sourceNew":"  @Override\n  protected void addDocument(Term id, Iterable<? extends IndexableField> doc) throws Exception {\n    final long gen = genWriter.addDocument(doc);\n\n    // Randomly verify the add \"took\":\n    if (random().nextInt(20) == 2) {\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: verify addDocument \" + id + \" gen=\" + gen);\n      }\n      nrtNoDeletesThread.waitForGeneration(gen);\n      assertTrue(gen <= nrtNoDeletesThread.getSearchingGen());\n      final IndexSearcher s = nrtNoDeletes.acquire();\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: got noDeletes searcher=\" + s);\n      }\n      try {\n        assertEquals(1, s.search(new TermQuery(id), 10).totalHits);\n      } finally {\n        nrtNoDeletes.release(s);\n      }\n    }\n    lastGens.set(gen);\n  }\n\n","sourceOld":"  @Override\n  protected void addDocument(Term id, Iterable<? extends IndexableField> doc) throws Exception {\n    final long gen = genWriter.addDocument(doc);\n\n    // Randomly verify the add \"took\":\n    if (random().nextInt(20) == 2) {\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: verify \" + id);\n      }\n      nrtNoDeletesThread.waitForGeneration(gen);\n      assertTrue(gen <= nrtNoDeletesThread.getSearchingGen());\n      final IndexSearcher s = nrtNoDeletes.acquire();\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: got searcher=\" + s);\n      }\n      try {\n        assertEquals(1, s.search(new TermQuery(id), 10).totalHits);\n      } finally {\n        nrtNoDeletes.release(s);\n      }\n    }\n    lastGens.set(gen);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#addDocument(Term,Iterable[#-extends-IndexableField]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#addDocument(Term,Iterable[#-extends-IndexableField]).mjava","sourceNew":"  @Override\n  protected void addDocument(Term id, Iterable<? extends IndexableField> doc) throws Exception {\n    final long gen = genWriter.addDocument(doc);\n\n    // Randomly verify the add \"took\":\n    if (random().nextInt(20) == 2) {\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: verify addDocument \" + id + \" gen=\" + gen);\n      }\n      nrtNoDeletesThread.waitForGeneration(gen);\n      assertTrue(gen <= nrtNoDeletesThread.getSearchingGen());\n      final IndexSearcher s = nrtNoDeletes.acquire();\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: got noDeletes searcher=\" + s);\n      }\n      try {\n        assertEquals(1, s.search(new TermQuery(id), 10).totalHits.value);\n      } finally {\n        nrtNoDeletes.release(s);\n      }\n    }\n    lastGens.set(gen);\n  }\n\n","sourceOld":"  @Override\n  protected void addDocument(Term id, Iterable<? extends IndexableField> doc) throws Exception {\n    final long gen = genWriter.addDocument(doc);\n\n    // Randomly verify the add \"took\":\n    if (random().nextInt(20) == 2) {\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: verify addDocument \" + id + \" gen=\" + gen);\n      }\n      nrtNoDeletesThread.waitForGeneration(gen);\n      assertTrue(gen <= nrtNoDeletesThread.getSearchingGen());\n      final IndexSearcher s = nrtNoDeletes.acquire();\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: got noDeletes searcher=\" + s);\n      }\n      try {\n        assertEquals(1, s.search(new TermQuery(id), 10).totalHits);\n      } finally {\n        nrtNoDeletes.release(s);\n      }\n    }\n    lastGens.set(gen);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b07024a7318c25225dc4d070cf6d047315b73aaf","date":1586885963,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#addDocument(Term,Iterable[#-extends-IndexableField]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#addDocument(Term,Iterable[#-extends-IndexableField]).mjava","sourceNew":"  @Override\n  protected void addDocument(Term id, Iterable<? extends IndexableField> doc) throws Exception {\n    final long gen = genWriter.addDocument(doc);\n\n    // Randomly verify the add \"took\":\n    if (random().nextInt(20) == 2) {\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: verify addDocument \" + id + \" gen=\" + gen);\n      }\n      nrtNoDeletesThread.waitForGeneration(gen);\n      assertTrue(gen <= nrtNoDeletesThread.getSearchingGen());\n      final IndexSearcher s = nrtNoDeletes.acquire();\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: got noDeletes searcher=\" + s);\n      }\n      try {\n        assertEquals(\"generation: \" + gen, 1, s.search(new TermQuery(id), 10).totalHits.value);\n      } finally {\n        nrtNoDeletes.release(s);\n      }\n    }\n    lastGens.set(gen);\n  }\n\n","sourceOld":"  @Override\n  protected void addDocument(Term id, Iterable<? extends IndexableField> doc) throws Exception {\n    final long gen = genWriter.addDocument(doc);\n\n    // Randomly verify the add \"took\":\n    if (random().nextInt(20) == 2) {\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: verify addDocument \" + id + \" gen=\" + gen);\n      }\n      nrtNoDeletesThread.waitForGeneration(gen);\n      assertTrue(gen <= nrtNoDeletesThread.getSearchingGen());\n      final IndexSearcher s = nrtNoDeletes.acquire();\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: got noDeletes searcher=\" + s);\n      }\n      try {\n        assertEquals(1, s.search(new TermQuery(id), 10).totalHits.value);\n      } finally {\n        nrtNoDeletes.release(s);\n      }\n    }\n    lastGens.set(gen);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b07024a7318c25225dc4d070cf6d047315b73aaf":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"730b7b729dd280f1fec51e6b252f24c4de2a68e1":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","730b7b729dd280f1fec51e6b252f24c4de2a68e1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b07024a7318c25225dc4d070cf6d047315b73aaf"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b07024a7318c25225dc4d070cf6d047315b73aaf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"730b7b729dd280f1fec51e6b252f24c4de2a68e1":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["b07024a7318c25225dc4d070cf6d047315b73aaf"],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["83788ad129a5154d5c6562c4e8ce3db48793aada","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["730b7b729dd280f1fec51e6b252f24c4de2a68e1","57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}