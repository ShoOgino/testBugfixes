{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#queryWithPreferReplicaTypes(CloudSolrClient,String,boolean,String).mjava","commits":[{"id":"a2576170b353998ba9157b6d148ebfde21138316","date":1523488980,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#queryWithPreferReplicaTypes(CloudSolrClient,String,boolean,String).mjava","pathOld":"/dev/null","sourceNew":"  private void queryWithPreferReplicaTypes(CloudSolrClient cloudClient,\n                                           String preferReplicaTypes,\n                                           boolean preferLocalShards,\n                                           String collectionName)\n      throws Exception\n  {\n    SolrQuery qRequest = new SolrQuery(\"*:*\");\n    ModifiableSolrParams qParams = new ModifiableSolrParams();\n\n    final List<String> preferredTypes = Arrays.asList(preferReplicaTypes.split(\"\\\\|\"));\n    StringBuilder rule = new StringBuilder();\n    preferredTypes.forEach(type -> {\n      if (rule.length() != 0) {\n        rule.append(',');\n      }\n      rule.append(ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE);\n      rule.append(':');\n      rule.append(type);\n    });\n    if (preferLocalShards) {\n      if (rule.length() != 0) {\n        rule.append(',');\n      }\n      rule.append(ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION);\n      rule.append(\":local\");\n    }\n    qParams.add(ShardParams.SHARDS_PREFERENCE, rule.toString());  \n    qParams.add(ShardParams.SHARDS_INFO, \"true\");\n    qRequest.add(qParams);\n\n    // CloudSolrClient sends the request to some node.\n    // And since all the nodes are hosting cores from all shards, the\n    // distributed query formed by this node will select cores from the\n    // local shards only\n    QueryResponse qResponse = cloudClient.query(collectionName, qRequest);\n\n    Object shardsInfo = qResponse.getResponse().get(ShardParams.SHARDS_INFO);\n    assertNotNull(\"Unable to obtain \"+ShardParams.SHARDS_INFO, shardsInfo);\n\n    Map<String, String> replicaTypeMap = new HashMap<String, String>();\n    DocCollection collection = getCollectionState(collectionName);\n    for (Slice slice : collection.getSlices()) {\n      for (Replica replica : slice.getReplicas()) {\n        String coreUrl = replica.getCoreUrl();\n        // It seems replica reports its core URL with a trailing slash while shard\n        // info returned from the query doesn't. Oh well.\n        if (coreUrl.endsWith(\"/\")) {\n          coreUrl = coreUrl.substring(0, coreUrl.length() - 1);\n        }\n        replicaTypeMap.put(coreUrl, replica.getType().toString());\n      }\n    }\n\n    // Iterate over shards-info and check that replicas of correct type responded\n    SimpleOrderedMap<?> shardsInfoMap = (SimpleOrderedMap<?>)shardsInfo;\n    Iterator<Map.Entry<String, ?>> itr = shardsInfoMap.asMap(100).entrySet().iterator();\n    List<String> shardAddresses = new ArrayList<String>();\n    while (itr.hasNext()) {\n      Map.Entry<String, ?> e = itr.next();\n      assertTrue(\"Did not find map-type value in \"+ShardParams.SHARDS_INFO, e.getValue() instanceof Map);\n      String shardAddress = (String)((Map)e.getValue()).get(\"shardAddress\");\n      assertNotNull(ShardParams.SHARDS_INFO+\" did not return 'shardAddress' parameter\", shardAddress);\n      assertTrue(replicaTypeMap.containsKey(shardAddress));\n      assertTrue(preferredTypes.indexOf(replicaTypeMap.get(shardAddress)) == 0);\n      shardAddresses.add(shardAddress);\n    }\n    assertTrue(\"No responses\", shardAddresses.size() > 0);\n    log.info(\"Shards giving the response: \" + Arrays.toString(shardAddresses.toArray()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f5a9deac6e313e80a1f56468e14bb4c491b83d7","date":1523529596,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#queryWithPreferReplicaTypes(CloudSolrClient,String,boolean,String).mjava","pathOld":"/dev/null","sourceNew":"  private void queryWithPreferReplicaTypes(CloudSolrClient cloudClient,\n                                           String preferReplicaTypes,\n                                           boolean preferLocalShards,\n                                           String collectionName)\n      throws Exception\n  {\n    SolrQuery qRequest = new SolrQuery(\"*:*\");\n    ModifiableSolrParams qParams = new ModifiableSolrParams();\n\n    final List<String> preferredTypes = Arrays.asList(preferReplicaTypes.split(\"\\\\|\"));\n    StringBuilder rule = new StringBuilder();\n    preferredTypes.forEach(type -> {\n      if (rule.length() != 0) {\n        rule.append(',');\n      }\n      rule.append(ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE);\n      rule.append(':');\n      rule.append(type);\n    });\n    if (preferLocalShards) {\n      if (rule.length() != 0) {\n        rule.append(',');\n      }\n      rule.append(ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION);\n      rule.append(\":local\");\n    }\n    qParams.add(ShardParams.SHARDS_PREFERENCE, rule.toString());  \n    qParams.add(ShardParams.SHARDS_INFO, \"true\");\n    qRequest.add(qParams);\n\n    // CloudSolrClient sends the request to some node.\n    // And since all the nodes are hosting cores from all shards, the\n    // distributed query formed by this node will select cores from the\n    // local shards only\n    QueryResponse qResponse = cloudClient.query(collectionName, qRequest);\n\n    Object shardsInfo = qResponse.getResponse().get(ShardParams.SHARDS_INFO);\n    assertNotNull(\"Unable to obtain \"+ShardParams.SHARDS_INFO, shardsInfo);\n\n    Map<String, String> replicaTypeMap = new HashMap<String, String>();\n    DocCollection collection = getCollectionState(collectionName);\n    for (Slice slice : collection.getSlices()) {\n      for (Replica replica : slice.getReplicas()) {\n        String coreUrl = replica.getCoreUrl();\n        // It seems replica reports its core URL with a trailing slash while shard\n        // info returned from the query doesn't. Oh well.\n        if (coreUrl.endsWith(\"/\")) {\n          coreUrl = coreUrl.substring(0, coreUrl.length() - 1);\n        }\n        replicaTypeMap.put(coreUrl, replica.getType().toString());\n      }\n    }\n\n    // Iterate over shards-info and check that replicas of correct type responded\n    SimpleOrderedMap<?> shardsInfoMap = (SimpleOrderedMap<?>)shardsInfo;\n    Iterator<Map.Entry<String, ?>> itr = shardsInfoMap.asMap(100).entrySet().iterator();\n    List<String> shardAddresses = new ArrayList<String>();\n    while (itr.hasNext()) {\n      Map.Entry<String, ?> e = itr.next();\n      assertTrue(\"Did not find map-type value in \"+ShardParams.SHARDS_INFO, e.getValue() instanceof Map);\n      String shardAddress = (String)((Map)e.getValue()).get(\"shardAddress\");\n      assertNotNull(ShardParams.SHARDS_INFO+\" did not return 'shardAddress' parameter\", shardAddress);\n      assertTrue(replicaTypeMap.containsKey(shardAddress));\n      assertTrue(preferredTypes.indexOf(replicaTypeMap.get(shardAddress)) == 0);\n      shardAddresses.add(shardAddress);\n    }\n    assertTrue(\"No responses\", shardAddresses.size() > 0);\n    log.info(\"Shards giving the response: \" + Arrays.toString(shardAddresses.toArray()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dc613ed6f75d1988140301ee8de8fdb056fa337","date":1588034757,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#queryWithPreferReplicaTypes(CloudSolrClient,String,boolean,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#queryWithPreferReplicaTypes(CloudSolrClient,String,boolean,String).mjava","sourceNew":"  private void queryWithPreferReplicaTypes(CloudSolrClient cloudClient,\n                                           String preferReplicaTypes,\n                                           boolean preferLocalShards,\n                                           String collectionName)\n      throws Exception\n  {\n    SolrQuery qRequest = new SolrQuery(\"*:*\");\n    ModifiableSolrParams qParams = new ModifiableSolrParams();\n\n    final List<String> preferredTypes = Arrays.asList(preferReplicaTypes.split(\"\\\\|\"));\n    StringBuilder rule = new StringBuilder();\n    preferredTypes.forEach(type -> {\n      if (rule.length() != 0) {\n        rule.append(',');\n      }\n      rule.append(ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE);\n      rule.append(':');\n      rule.append(type);\n    });\n    if (preferLocalShards) {\n      if (rule.length() != 0) {\n        rule.append(',');\n      }\n      rule.append(ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION);\n      rule.append(\":local\");\n    }\n    qParams.add(ShardParams.SHARDS_PREFERENCE, rule.toString());  \n    qParams.add(ShardParams.SHARDS_INFO, \"true\");\n    qRequest.add(qParams);\n\n    // CloudSolrClient sends the request to some node.\n    // And since all the nodes are hosting cores from all shards, the\n    // distributed query formed by this node will select cores from the\n    // local shards only\n    QueryResponse qResponse = cloudClient.query(collectionName, qRequest);\n\n    Object shardsInfo = qResponse.getResponse().get(ShardParams.SHARDS_INFO);\n    assertNotNull(\"Unable to obtain \"+ShardParams.SHARDS_INFO, shardsInfo);\n\n    Map<String, String> replicaTypeMap = new HashMap<String, String>();\n    DocCollection collection = getCollectionState(collectionName);\n    for (Slice slice : collection.getSlices()) {\n      for (Replica replica : slice.getReplicas()) {\n        String coreUrl = replica.getCoreUrl();\n        // It seems replica reports its core URL with a trailing slash while shard\n        // info returned from the query doesn't. Oh well.\n        if (coreUrl.endsWith(\"/\")) {\n          coreUrl = coreUrl.substring(0, coreUrl.length() - 1);\n        }\n        replicaTypeMap.put(coreUrl, replica.getType().toString());\n      }\n    }\n\n    // Iterate over shards-info and check that replicas of correct type responded\n    SimpleOrderedMap<?> shardsInfoMap = (SimpleOrderedMap<?>)shardsInfo;\n    Iterator<Map.Entry<String, ?>> itr = shardsInfoMap.asMap(100).entrySet().iterator();\n    List<String> shardAddresses = new ArrayList<String>();\n    while (itr.hasNext()) {\n      Map.Entry<String, ?> e = itr.next();\n      assertTrue(\"Did not find map-type value in \"+ShardParams.SHARDS_INFO, e.getValue() instanceof Map);\n      String shardAddress = (String)((Map)e.getValue()).get(\"shardAddress\");\n      assertNotNull(ShardParams.SHARDS_INFO+\" did not return 'shardAddress' parameter\", shardAddress);\n      assertTrue(replicaTypeMap.containsKey(shardAddress));\n      assertTrue(preferredTypes.indexOf(replicaTypeMap.get(shardAddress)) == 0);\n      shardAddresses.add(shardAddress);\n    }\n    assertTrue(\"No responses\", shardAddresses.size() > 0);\n    if (log.isInfoEnabled()) {\n      log.info(\"Shards giving the response: {}\", Arrays.toString(shardAddresses.toArray())); // logOk\n    }\n  }\n\n","sourceOld":"  private void queryWithPreferReplicaTypes(CloudSolrClient cloudClient,\n                                           String preferReplicaTypes,\n                                           boolean preferLocalShards,\n                                           String collectionName)\n      throws Exception\n  {\n    SolrQuery qRequest = new SolrQuery(\"*:*\");\n    ModifiableSolrParams qParams = new ModifiableSolrParams();\n\n    final List<String> preferredTypes = Arrays.asList(preferReplicaTypes.split(\"\\\\|\"));\n    StringBuilder rule = new StringBuilder();\n    preferredTypes.forEach(type -> {\n      if (rule.length() != 0) {\n        rule.append(',');\n      }\n      rule.append(ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE);\n      rule.append(':');\n      rule.append(type);\n    });\n    if (preferLocalShards) {\n      if (rule.length() != 0) {\n        rule.append(',');\n      }\n      rule.append(ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION);\n      rule.append(\":local\");\n    }\n    qParams.add(ShardParams.SHARDS_PREFERENCE, rule.toString());  \n    qParams.add(ShardParams.SHARDS_INFO, \"true\");\n    qRequest.add(qParams);\n\n    // CloudSolrClient sends the request to some node.\n    // And since all the nodes are hosting cores from all shards, the\n    // distributed query formed by this node will select cores from the\n    // local shards only\n    QueryResponse qResponse = cloudClient.query(collectionName, qRequest);\n\n    Object shardsInfo = qResponse.getResponse().get(ShardParams.SHARDS_INFO);\n    assertNotNull(\"Unable to obtain \"+ShardParams.SHARDS_INFO, shardsInfo);\n\n    Map<String, String> replicaTypeMap = new HashMap<String, String>();\n    DocCollection collection = getCollectionState(collectionName);\n    for (Slice slice : collection.getSlices()) {\n      for (Replica replica : slice.getReplicas()) {\n        String coreUrl = replica.getCoreUrl();\n        // It seems replica reports its core URL with a trailing slash while shard\n        // info returned from the query doesn't. Oh well.\n        if (coreUrl.endsWith(\"/\")) {\n          coreUrl = coreUrl.substring(0, coreUrl.length() - 1);\n        }\n        replicaTypeMap.put(coreUrl, replica.getType().toString());\n      }\n    }\n\n    // Iterate over shards-info and check that replicas of correct type responded\n    SimpleOrderedMap<?> shardsInfoMap = (SimpleOrderedMap<?>)shardsInfo;\n    Iterator<Map.Entry<String, ?>> itr = shardsInfoMap.asMap(100).entrySet().iterator();\n    List<String> shardAddresses = new ArrayList<String>();\n    while (itr.hasNext()) {\n      Map.Entry<String, ?> e = itr.next();\n      assertTrue(\"Did not find map-type value in \"+ShardParams.SHARDS_INFO, e.getValue() instanceof Map);\n      String shardAddress = (String)((Map)e.getValue()).get(\"shardAddress\");\n      assertNotNull(ShardParams.SHARDS_INFO+\" did not return 'shardAddress' parameter\", shardAddress);\n      assertTrue(replicaTypeMap.containsKey(shardAddress));\n      assertTrue(preferredTypes.indexOf(replicaTypeMap.get(shardAddress)) == 0);\n      shardAddresses.add(shardAddress);\n    }\n    assertTrue(\"No responses\", shardAddresses.size() > 0);\n    log.info(\"Shards giving the response: \" + Arrays.toString(shardAddresses.toArray()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#queryWithPreferReplicaTypes(CloudSolrClient,String,boolean,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#queryWithPreferReplicaTypes(CloudSolrClient,String,boolean,String).mjava","sourceNew":"  private void queryWithPreferReplicaTypes(CloudSolrClient cloudClient,\n                                           String preferReplicaTypes,\n                                           boolean preferLocalShards,\n                                           String collectionName)\n      throws Exception\n  {\n    SolrQuery qRequest = new SolrQuery(\"*:*\");\n    ModifiableSolrParams qParams = new ModifiableSolrParams();\n\n    final List<String> preferredTypes = Arrays.asList(preferReplicaTypes.split(\"\\\\|\"));\n    StringBuilder rule = new StringBuilder();\n    preferredTypes.forEach(type -> {\n      if (rule.length() != 0) {\n        rule.append(',');\n      }\n      rule.append(ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE);\n      rule.append(':');\n      rule.append(type);\n    });\n    if (preferLocalShards) {\n      if (rule.length() != 0) {\n        rule.append(',');\n      }\n      rule.append(ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION);\n      rule.append(\":local\");\n    }\n    qParams.add(ShardParams.SHARDS_PREFERENCE, rule.toString());  \n    qParams.add(ShardParams.SHARDS_INFO, \"true\");\n    qRequest.add(qParams);\n\n    // CloudSolrClient sends the request to some node.\n    // And since all the nodes are hosting cores from all shards, the\n    // distributed query formed by this node will select cores from the\n    // local shards only\n    QueryResponse qResponse = cloudClient.query(collectionName, qRequest);\n\n    Object shardsInfo = qResponse.getResponse().get(ShardParams.SHARDS_INFO);\n    assertNotNull(\"Unable to obtain \"+ShardParams.SHARDS_INFO, shardsInfo);\n\n    Map<String, String> replicaTypeMap = new HashMap<String, String>();\n    DocCollection collection = getCollectionState(collectionName);\n    for (Slice slice : collection.getSlices()) {\n      for (Replica replica : slice.getReplicas()) {\n        String coreUrl = replica.getCoreUrl();\n        // It seems replica reports its core URL with a trailing slash while shard\n        // info returned from the query doesn't. Oh well.\n        if (coreUrl.endsWith(\"/\")) {\n          coreUrl = coreUrl.substring(0, coreUrl.length() - 1);\n        }\n        replicaTypeMap.put(coreUrl, replica.getType().toString());\n      }\n    }\n\n    // Iterate over shards-info and check that replicas of correct type responded\n    SimpleOrderedMap<?> shardsInfoMap = (SimpleOrderedMap<?>)shardsInfo;\n    Iterator<Map.Entry<String, ?>> itr = shardsInfoMap.asMap(100).entrySet().iterator();\n    List<String> shardAddresses = new ArrayList<String>();\n    while (itr.hasNext()) {\n      Map.Entry<String, ?> e = itr.next();\n      assertTrue(\"Did not find map-type value in \"+ShardParams.SHARDS_INFO, e.getValue() instanceof Map);\n      String shardAddress = (String)((Map)e.getValue()).get(\"shardAddress\");\n      assertNotNull(ShardParams.SHARDS_INFO+\" did not return 'shardAddress' parameter\", shardAddress);\n      assertTrue(replicaTypeMap.containsKey(shardAddress));\n      assertTrue(preferredTypes.indexOf(replicaTypeMap.get(shardAddress)) == 0);\n      shardAddresses.add(shardAddress);\n    }\n    assertTrue(\"No responses\", shardAddresses.size() > 0);\n    if (log.isInfoEnabled()) {\n      log.info(\"Shards giving the response: {}\", Arrays.toString(shardAddresses.toArray()));\n    }\n  }\n\n","sourceOld":"  private void queryWithPreferReplicaTypes(CloudSolrClient cloudClient,\n                                           String preferReplicaTypes,\n                                           boolean preferLocalShards,\n                                           String collectionName)\n      throws Exception\n  {\n    SolrQuery qRequest = new SolrQuery(\"*:*\");\n    ModifiableSolrParams qParams = new ModifiableSolrParams();\n\n    final List<String> preferredTypes = Arrays.asList(preferReplicaTypes.split(\"\\\\|\"));\n    StringBuilder rule = new StringBuilder();\n    preferredTypes.forEach(type -> {\n      if (rule.length() != 0) {\n        rule.append(',');\n      }\n      rule.append(ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE);\n      rule.append(':');\n      rule.append(type);\n    });\n    if (preferLocalShards) {\n      if (rule.length() != 0) {\n        rule.append(',');\n      }\n      rule.append(ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION);\n      rule.append(\":local\");\n    }\n    qParams.add(ShardParams.SHARDS_PREFERENCE, rule.toString());  \n    qParams.add(ShardParams.SHARDS_INFO, \"true\");\n    qRequest.add(qParams);\n\n    // CloudSolrClient sends the request to some node.\n    // And since all the nodes are hosting cores from all shards, the\n    // distributed query formed by this node will select cores from the\n    // local shards only\n    QueryResponse qResponse = cloudClient.query(collectionName, qRequest);\n\n    Object shardsInfo = qResponse.getResponse().get(ShardParams.SHARDS_INFO);\n    assertNotNull(\"Unable to obtain \"+ShardParams.SHARDS_INFO, shardsInfo);\n\n    Map<String, String> replicaTypeMap = new HashMap<String, String>();\n    DocCollection collection = getCollectionState(collectionName);\n    for (Slice slice : collection.getSlices()) {\n      for (Replica replica : slice.getReplicas()) {\n        String coreUrl = replica.getCoreUrl();\n        // It seems replica reports its core URL with a trailing slash while shard\n        // info returned from the query doesn't. Oh well.\n        if (coreUrl.endsWith(\"/\")) {\n          coreUrl = coreUrl.substring(0, coreUrl.length() - 1);\n        }\n        replicaTypeMap.put(coreUrl, replica.getType().toString());\n      }\n    }\n\n    // Iterate over shards-info and check that replicas of correct type responded\n    SimpleOrderedMap<?> shardsInfoMap = (SimpleOrderedMap<?>)shardsInfo;\n    Iterator<Map.Entry<String, ?>> itr = shardsInfoMap.asMap(100).entrySet().iterator();\n    List<String> shardAddresses = new ArrayList<String>();\n    while (itr.hasNext()) {\n      Map.Entry<String, ?> e = itr.next();\n      assertTrue(\"Did not find map-type value in \"+ShardParams.SHARDS_INFO, e.getValue() instanceof Map);\n      String shardAddress = (String)((Map)e.getValue()).get(\"shardAddress\");\n      assertNotNull(ShardParams.SHARDS_INFO+\" did not return 'shardAddress' parameter\", shardAddress);\n      assertTrue(replicaTypeMap.containsKey(shardAddress));\n      assertTrue(preferredTypes.indexOf(replicaTypeMap.get(shardAddress)) == 0);\n      shardAddresses.add(shardAddress);\n    }\n    assertTrue(\"No responses\", shardAddresses.size() > 0);\n    if (log.isInfoEnabled()) {\n      log.info(\"Shards giving the response: {}\", Arrays.toString(shardAddresses.toArray())); // logOk\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#queryWithPreferReplicaTypes(CloudSolrClient,String,boolean,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#queryWithPreferReplicaTypes(CloudSolrClient,String,boolean,String).mjava","sourceNew":"  private void queryWithPreferReplicaTypes(CloudSolrClient cloudClient,\n                                           String preferReplicaTypes,\n                                           boolean preferLocalShards,\n                                           String collectionName)\n      throws Exception\n  {\n    SolrQuery qRequest = new SolrQuery(\"*:*\");\n    ModifiableSolrParams qParams = new ModifiableSolrParams();\n\n    final List<String> preferredTypes = Arrays.asList(preferReplicaTypes.split(\"\\\\|\"));\n    StringBuilder rule = new StringBuilder();\n    preferredTypes.forEach(type -> {\n      if (rule.length() != 0) {\n        rule.append(',');\n      }\n      rule.append(ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE);\n      rule.append(':');\n      rule.append(type);\n    });\n    if (preferLocalShards) {\n      if (rule.length() != 0) {\n        rule.append(',');\n      }\n      rule.append(ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION);\n      rule.append(\":local\");\n    }\n    qParams.add(ShardParams.SHARDS_PREFERENCE, rule.toString());  \n    qParams.add(ShardParams.SHARDS_INFO, \"true\");\n    qRequest.add(qParams);\n\n    // CloudSolrClient sends the request to some node.\n    // And since all the nodes are hosting cores from all shards, the\n    // distributed query formed by this node will select cores from the\n    // local shards only\n    QueryResponse qResponse = cloudClient.query(collectionName, qRequest);\n\n    Object shardsInfo = qResponse.getResponse().get(ShardParams.SHARDS_INFO);\n    assertNotNull(\"Unable to obtain \"+ShardParams.SHARDS_INFO, shardsInfo);\n\n    Map<String, String> replicaTypeMap = new HashMap<String, String>();\n    DocCollection collection = getCollectionState(collectionName);\n    for (Slice slice : collection.getSlices()) {\n      for (Replica replica : slice.getReplicas()) {\n        String coreUrl = replica.getCoreUrl();\n        // It seems replica reports its core URL with a trailing slash while shard\n        // info returned from the query doesn't. Oh well.\n        if (coreUrl.endsWith(\"/\")) {\n          coreUrl = coreUrl.substring(0, coreUrl.length() - 1);\n        }\n        replicaTypeMap.put(coreUrl, replica.getType().toString());\n      }\n    }\n\n    // Iterate over shards-info and check that replicas of correct type responded\n    SimpleOrderedMap<?> shardsInfoMap = (SimpleOrderedMap<?>)shardsInfo;\n    @SuppressWarnings({\"unchecked\"})\n    Iterator<Map.Entry<String, ?>> itr = shardsInfoMap.asMap(100).entrySet().iterator();\n    List<String> shardAddresses = new ArrayList<String>();\n    while (itr.hasNext()) {\n      Map.Entry<String, ?> e = itr.next();\n      assertTrue(\"Did not find map-type value in \"+ShardParams.SHARDS_INFO, e.getValue() instanceof Map);\n      String shardAddress = (String)((Map)e.getValue()).get(\"shardAddress\");\n      assertNotNull(ShardParams.SHARDS_INFO+\" did not return 'shardAddress' parameter\", shardAddress);\n      assertTrue(replicaTypeMap.containsKey(shardAddress));\n      assertTrue(preferredTypes.indexOf(replicaTypeMap.get(shardAddress)) == 0);\n      shardAddresses.add(shardAddress);\n    }\n    assertTrue(\"No responses\", shardAddresses.size() > 0);\n    if (log.isInfoEnabled()) {\n      log.info(\"Shards giving the response: {}\", Arrays.toString(shardAddresses.toArray()));\n    }\n  }\n\n","sourceOld":"  private void queryWithPreferReplicaTypes(CloudSolrClient cloudClient,\n                                           String preferReplicaTypes,\n                                           boolean preferLocalShards,\n                                           String collectionName)\n      throws Exception\n  {\n    SolrQuery qRequest = new SolrQuery(\"*:*\");\n    ModifiableSolrParams qParams = new ModifiableSolrParams();\n\n    final List<String> preferredTypes = Arrays.asList(preferReplicaTypes.split(\"\\\\|\"));\n    StringBuilder rule = new StringBuilder();\n    preferredTypes.forEach(type -> {\n      if (rule.length() != 0) {\n        rule.append(',');\n      }\n      rule.append(ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE);\n      rule.append(':');\n      rule.append(type);\n    });\n    if (preferLocalShards) {\n      if (rule.length() != 0) {\n        rule.append(',');\n      }\n      rule.append(ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION);\n      rule.append(\":local\");\n    }\n    qParams.add(ShardParams.SHARDS_PREFERENCE, rule.toString());  \n    qParams.add(ShardParams.SHARDS_INFO, \"true\");\n    qRequest.add(qParams);\n\n    // CloudSolrClient sends the request to some node.\n    // And since all the nodes are hosting cores from all shards, the\n    // distributed query formed by this node will select cores from the\n    // local shards only\n    QueryResponse qResponse = cloudClient.query(collectionName, qRequest);\n\n    Object shardsInfo = qResponse.getResponse().get(ShardParams.SHARDS_INFO);\n    assertNotNull(\"Unable to obtain \"+ShardParams.SHARDS_INFO, shardsInfo);\n\n    Map<String, String> replicaTypeMap = new HashMap<String, String>();\n    DocCollection collection = getCollectionState(collectionName);\n    for (Slice slice : collection.getSlices()) {\n      for (Replica replica : slice.getReplicas()) {\n        String coreUrl = replica.getCoreUrl();\n        // It seems replica reports its core URL with a trailing slash while shard\n        // info returned from the query doesn't. Oh well.\n        if (coreUrl.endsWith(\"/\")) {\n          coreUrl = coreUrl.substring(0, coreUrl.length() - 1);\n        }\n        replicaTypeMap.put(coreUrl, replica.getType().toString());\n      }\n    }\n\n    // Iterate over shards-info and check that replicas of correct type responded\n    SimpleOrderedMap<?> shardsInfoMap = (SimpleOrderedMap<?>)shardsInfo;\n    Iterator<Map.Entry<String, ?>> itr = shardsInfoMap.asMap(100).entrySet().iterator();\n    List<String> shardAddresses = new ArrayList<String>();\n    while (itr.hasNext()) {\n      Map.Entry<String, ?> e = itr.next();\n      assertTrue(\"Did not find map-type value in \"+ShardParams.SHARDS_INFO, e.getValue() instanceof Map);\n      String shardAddress = (String)((Map)e.getValue()).get(\"shardAddress\");\n      assertNotNull(ShardParams.SHARDS_INFO+\" did not return 'shardAddress' parameter\", shardAddress);\n      assertTrue(replicaTypeMap.containsKey(shardAddress));\n      assertTrue(preferredTypes.indexOf(replicaTypeMap.get(shardAddress)) == 0);\n      shardAddresses.add(shardAddress);\n    }\n    assertTrue(\"No responses\", shardAddresses.size() > 0);\n    if (log.isInfoEnabled()) {\n      log.info(\"Shards giving the response: {}\", Arrays.toString(shardAddresses.toArray()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"6dc613ed6f75d1988140301ee8de8fdb056fa337":["1f5a9deac6e313e80a1f56468e14bb4c491b83d7"],"1f5a9deac6e313e80a1f56468e14bb4c491b83d7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a2576170b353998ba9157b6d148ebfde21138316"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["6dc613ed6f75d1988140301ee8de8fdb056fa337"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a2576170b353998ba9157b6d148ebfde21138316":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6dc613ed6f75d1988140301ee8de8fdb056fa337":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"1f5a9deac6e313e80a1f56468e14bb4c491b83d7":["6dc613ed6f75d1988140301ee8de8fdb056fa337"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["9ba1b632c041956c93c41aa1143d16a567014891"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f5a9deac6e313e80a1f56468e14bb4c491b83d7","a2576170b353998ba9157b6d148ebfde21138316"],"a2576170b353998ba9157b6d148ebfde21138316":["1f5a9deac6e313e80a1f56468e14bb4c491b83d7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}