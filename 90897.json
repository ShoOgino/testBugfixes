{"path":"src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getBooleanQuery(Vector,boolean).mjava","commits":[{"id":"1e16e7ef936840b5da4d9741c9965a38841d280f","date":1110226738,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getBooleanQuery(Vector,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Factory method for generating query, given a set of clauses.\n   * By default creates a boolean query composed of clauses passed in.\n   *\n   * Can be overridden by extending classes, to modify query being\n   * returned.\n   *\n   * @param clauses Vector that contains {@link BooleanClause} instances\n   *    to join.\n   * @param disableCoord true if coord scoring should be disabled.\n   *\n   * @return Resulting {@link Query} object.\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getBooleanQuery(Vector clauses, boolean disableCoord)\n    throws ParseException\n  {\n    if (clauses == null || clauses.size() == 0)\n      return null;\n\n    BooleanQuery query = new BooleanQuery(disableCoord);\n    for (int i = 0; i < clauses.size(); i++) {\n      query.add((BooleanClause)clauses.elementAt(i));\n    }\n    return query;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9a6ad8e299e8d7e15e32e68d75b73ed7d04756a","date":1114594353,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/miscellaneous/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getBooleanQuery(Vector,boolean).mjava","pathOld":"src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getBooleanQuery(Vector,boolean).mjava","sourceNew":"  /**\n   * Factory method for generating query, given a set of clauses.\n   * By default creates a boolean query composed of clauses passed in.\n   *\n   * Can be overridden by extending classes, to modify query being\n   * returned.\n   *\n   * @param clauses Vector that contains {@link BooleanClause} instances\n   *    to join.\n   * @param disableCoord true if coord scoring should be disabled.\n   *\n   * @return Resulting {@link Query} object.\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getBooleanQuery(Vector clauses, boolean disableCoord)\n    throws ParseException\n  {\n    if (clauses == null || clauses.size() == 0)\n      return null;\n\n    BooleanQuery query = new BooleanQuery(disableCoord);\n    for (int i = 0; i < clauses.size(); i++) {\n      query.add((BooleanClause)clauses.elementAt(i));\n    }\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Factory method for generating query, given a set of clauses.\n   * By default creates a boolean query composed of clauses passed in.\n   *\n   * Can be overridden by extending classes, to modify query being\n   * returned.\n   *\n   * @param clauses Vector that contains {@link BooleanClause} instances\n   *    to join.\n   * @param disableCoord true if coord scoring should be disabled.\n   *\n   * @return Resulting {@link Query} object.\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getBooleanQuery(Vector clauses, boolean disableCoord)\n    throws ParseException\n  {\n    if (clauses == null || clauses.size() == 0)\n      return null;\n\n    BooleanQuery query = new BooleanQuery(disableCoord);\n    for (int i = 0; i < clauses.size(); i++) {\n      query.add((BooleanClause)clauses.elementAt(i));\n    }\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9a6ad8e299e8d7e15e32e68d75b73ed7d04756a":["1e16e7ef936840b5da4d9741c9965a38841d280f"],"1e16e7ef936840b5da4d9741c9965a38841d280f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e9a6ad8e299e8d7e15e32e68d75b73ed7d04756a"]},"commit2Childs":{"e9a6ad8e299e8d7e15e32e68d75b73ed7d04756a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1e16e7ef936840b5da4d9741c9965a38841d280f":["e9a6ad8e299e8d7e15e32e68d75b73ed7d04756a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e16e7ef936840b5da4d9741c9965a38841d280f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}