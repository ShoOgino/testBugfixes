{"path":"lucene/core/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.DirectTermsEnum#findTerm(BytesRef).mjava","commits":[{"id":"172cf08877d0e6738a51edd238c4dc5ffc088345","date":1342794823,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.DirectTermsEnum#findTerm(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"      // If non-negative, exact match; else, -ord-1, where ord\n      // is where you would insert the term.\n      private int findTerm(BytesRef term) {\n\n        // Just do binary search: should be (constant factor)\n        // faster than using the skip list:\n        int low = 0;\n        int high = terms.length-1;\n\n        while (low <= high) {\n          int mid = (low + high) >>> 1;\n          int cmp = compare(mid, term);\n          if (cmp < 0) {\n            low = mid + 1;\n          } else if (cmp > 0) {\n            high = mid - 1;\n          } else {\n            return mid; // key found\n          }\n        }\n\n        return -(low + 1);  // key not found.\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.DirectTermsEnum#findTerm(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"      // If non-negative, exact match; else, -ord-1, where ord\n      // is where you would insert the term.\n      private int findTerm(BytesRef term) {\n\n        // Just do binary search: should be (constant factor)\n        // faster than using the skip list:\n        int low = 0;\n        int high = terms.length-1;\n\n        while (low <= high) {\n          int mid = (low + high) >>> 1;\n          int cmp = compare(mid, term);\n          if (cmp < 0) {\n            low = mid + 1;\n          } else if (cmp > 0) {\n            high = mid - 1;\n          } else {\n            return mid; // key found\n          }\n        }\n\n        return -(low + 1);  // key not found.\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.DirectTermsEnum#findTerm(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"      // If non-negative, exact match; else, -ord-1, where ord\n      // is where you would insert the term.\n      private int findTerm(BytesRef term) {\n\n        // Just do binary search: should be (constant factor)\n        // faster than using the skip list:\n        int low = 0;\n        int high = terms.length-1;\n\n        while (low <= high) {\n          int mid = (low + high) >>> 1;\n          int cmp = compare(mid, term);\n          if (cmp < 0) {\n            low = mid + 1;\n          } else if (cmp > 0) {\n            high = mid - 1;\n          } else {\n            return mid; // key found\n          }\n        }\n\n        return -(low + 1);  // key not found.\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.DirectTermsEnum#findTerm(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.DirectTermsEnum#findTerm(BytesRef).mjava","sourceNew":"      // If non-negative, exact match; else, -ord-1, where ord\n      // is where you would insert the term.\n      private int findTerm(BytesRef term) {\n\n        // Just do binary search: should be (constant factor)\n        // faster than using the skip list:\n        int low = 0;\n        int high = terms.length-1;\n\n        while (low <= high) {\n          int mid = (low + high) >>> 1;\n          int cmp = compare(mid, term);\n          if (cmp < 0) {\n            low = mid + 1;\n          } else if (cmp > 0) {\n            high = mid - 1;\n          } else {\n            return mid; // key found\n          }\n        }\n\n        return -(low + 1);  // key not found.\n      }\n\n","sourceOld":"      // If non-negative, exact match; else, -ord-1, where ord\n      // is where you would insert the term.\n      private int findTerm(BytesRef term) {\n\n        // Just do binary search: should be (constant factor)\n        // faster than using the skip list:\n        int low = 0;\n        int high = terms.length-1;\n\n        while (low <= high) {\n          int mid = (low + high) >>> 1;\n          int cmp = compare(mid, term);\n          if (cmp < 0) {\n            low = mid + 1;\n          } else if (cmp > 0) {\n            high = mid - 1;\n          } else {\n            return mid; // key found\n          }\n        }\n\n        return -(low + 1);  // key not found.\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","172cf08877d0e6738a51edd238c4dc5ffc088345"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["172cf08877d0e6738a51edd238c4dc5ffc088345"],"172cf08877d0e6738a51edd238c4dc5ffc088345":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","172cf08877d0e6738a51edd238c4dc5ffc088345"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","172cf08877d0e6738a51edd238c4dc5ffc088345","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"172cf08877d0e6738a51edd238c4dc5ffc088345":["aba371508186796cc6151d8223a5b4e16d02e26e","3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}