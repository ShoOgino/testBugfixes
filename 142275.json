{"path":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#saveTerms(Collection[Query],IndexReader).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#saveTerms(Collection[Query],IndexReader).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#saveTerms(Collection[Query],IndexReader).mjava","sourceNew":"  /*\n   * Save the set of terms in the queries to termSetMap.\n   * \n   * ex1) q=name:john\n   *      - fieldMatch==true\n   *          termSetMap=Map<\"name\",Set<\"john\">>\n   *      - fieldMatch==false\n   *          termSetMap=Map<null,Set<\"john\">>\n   *          \n   * ex2) q=name:john title:manager\n   *      - fieldMatch==true\n   *          termSetMap=Map<\"name\",Set<\"john\">,\n   *                         \"title\",Set<\"manager\">>\n   *      - fieldMatch==false\n   *          termSetMap=Map<null,Set<\"john\",\"manager\">>\n   *          \n   * ex3) q=name:\"john lennon\"\n   *      - fieldMatch==true\n   *          termSetMap=Map<\"name\",Set<\"john\",\"lennon\">>\n   *      - fieldMatch==false\n   *          termSetMap=Map<null,Set<\"john\",\"lennon\">>\n   */\n    void saveTerms( Collection<Query> flatQueries, IndexReader reader ) throws IOException{\n    for( Query query : flatQueries ){\n      Set<String> termSet = getTermSet( query );\n      if( query instanceof TermQuery )\n        termSet.add( ((TermQuery)query).getTerm().text() );\n      else if( query instanceof PhraseQuery ){\n        for( Term term : ((PhraseQuery)query).getTerms() )\n          termSet.add( term.text() );\n      }\n      else if (query instanceof MultiTermQuery && reader != null) {\n        BooleanQuery mtqTerms = (BooleanQuery) query.rewrite(reader);\n        for (BooleanClause clause : mtqTerms.getClauses()) {\n          termSet.add (((TermQuery) clause.getQuery()).getTerm().text());\n        }\n      }\n      else\n        throw new RuntimeException( \"query \\\"\" + query.toString() + \"\\\" must be flatten first.\" );\n    }\n  }\n\n","sourceOld":"  /*\n   * Save the set of terms in the queries to termSetMap.\n   * \n   * ex1) q=name:john\n   *      - fieldMatch==true\n   *          termSetMap=Map<\"name\",Set<\"john\">>\n   *      - fieldMatch==false\n   *          termSetMap=Map<null,Set<\"john\">>\n   *          \n   * ex2) q=name:john title:manager\n   *      - fieldMatch==true\n   *          termSetMap=Map<\"name\",Set<\"john\">,\n   *                         \"title\",Set<\"manager\">>\n   *      - fieldMatch==false\n   *          termSetMap=Map<null,Set<\"john\",\"manager\">>\n   *          \n   * ex3) q=name:\"john lennon\"\n   *      - fieldMatch==true\n   *          termSetMap=Map<\"name\",Set<\"john\",\"lennon\">>\n   *      - fieldMatch==false\n   *          termSetMap=Map<null,Set<\"john\",\"lennon\">>\n   */\n    void saveTerms( Collection<Query> flatQueries, IndexReader reader ) throws IOException{\n    for( Query query : flatQueries ){\n      Set<String> termSet = getTermSet( query );\n      if( query instanceof TermQuery )\n        termSet.add( ((TermQuery)query).getTerm().text() );\n      else if( query instanceof PhraseQuery ){\n        for( Term term : ((PhraseQuery)query).getTerms() )\n          termSet.add( term.text() );\n      }\n      else if (query instanceof MultiTermQuery && reader != null) {\n        BooleanQuery mtqTerms = (BooleanQuery) query.rewrite(reader);\n        for (BooleanClause clause : mtqTerms.getClauses()) {\n          termSet.add (((TermQuery) clause.getQuery()).getTerm().text());\n        }\n      }\n      else\n        throw new RuntimeException( \"query \\\"\" + query.toString() + \"\\\" must be flatten first.\" );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#saveTerms(Collection[Query],IndexReader).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#saveTerms(Collection[Query],IndexReader).mjava","sourceNew":"  /*\n   * Save the set of terms in the queries to termSetMap.\n   * \n   * ex1) q=name:john\n   *      - fieldMatch==true\n   *          termSetMap=Map<\"name\",Set<\"john\">>\n   *      - fieldMatch==false\n   *          termSetMap=Map<null,Set<\"john\">>\n   *          \n   * ex2) q=name:john title:manager\n   *      - fieldMatch==true\n   *          termSetMap=Map<\"name\",Set<\"john\">,\n   *                         \"title\",Set<\"manager\">>\n   *      - fieldMatch==false\n   *          termSetMap=Map<null,Set<\"john\",\"manager\">>\n   *          \n   * ex3) q=name:\"john lennon\"\n   *      - fieldMatch==true\n   *          termSetMap=Map<\"name\",Set<\"john\",\"lennon\">>\n   *      - fieldMatch==false\n   *          termSetMap=Map<null,Set<\"john\",\"lennon\">>\n   */\n    void saveTerms( Collection<Query> flatQueries, IndexReader reader ) throws IOException{\n    for( Query query : flatQueries ){\n      Set<String> termSet = getTermSet( query );\n      if( query instanceof TermQuery )\n        termSet.add( ((TermQuery)query).getTerm().text() );\n      else if( query instanceof PhraseQuery ){\n        for( Term term : ((PhraseQuery)query).getTerms() )\n          termSet.add( term.text() );\n      }\n      else if (query instanceof MultiTermQuery && reader != null) {\n        BooleanQuery mtqTerms = (BooleanQuery) query.rewrite(reader);\n        for (BooleanClause clause : mtqTerms) {\n          termSet.add (((TermQuery) clause.getQuery()).getTerm().text());\n        }\n      }\n      else\n        throw new RuntimeException( \"query \\\"\" + query.toString() + \"\\\" must be flatten first.\" );\n    }\n  }\n\n","sourceOld":"  /*\n   * Save the set of terms in the queries to termSetMap.\n   * \n   * ex1) q=name:john\n   *      - fieldMatch==true\n   *          termSetMap=Map<\"name\",Set<\"john\">>\n   *      - fieldMatch==false\n   *          termSetMap=Map<null,Set<\"john\">>\n   *          \n   * ex2) q=name:john title:manager\n   *      - fieldMatch==true\n   *          termSetMap=Map<\"name\",Set<\"john\">,\n   *                         \"title\",Set<\"manager\">>\n   *      - fieldMatch==false\n   *          termSetMap=Map<null,Set<\"john\",\"manager\">>\n   *          \n   * ex3) q=name:\"john lennon\"\n   *      - fieldMatch==true\n   *          termSetMap=Map<\"name\",Set<\"john\",\"lennon\">>\n   *      - fieldMatch==false\n   *          termSetMap=Map<null,Set<\"john\",\"lennon\">>\n   */\n    void saveTerms( Collection<Query> flatQueries, IndexReader reader ) throws IOException{\n    for( Query query : flatQueries ){\n      Set<String> termSet = getTermSet( query );\n      if( query instanceof TermQuery )\n        termSet.add( ((TermQuery)query).getTerm().text() );\n      else if( query instanceof PhraseQuery ){\n        for( Term term : ((PhraseQuery)query).getTerms() )\n          termSet.add( term.text() );\n      }\n      else if (query instanceof MultiTermQuery && reader != null) {\n        BooleanQuery mtqTerms = (BooleanQuery) query.rewrite(reader);\n        for (BooleanClause clause : mtqTerms.getClauses()) {\n          termSet.add (((TermQuery) clause.getQuery()).getTerm().text());\n        }\n      }\n      else\n        throw new RuntimeException( \"query \\\"\" + query.toString() + \"\\\" must be flatten first.\" );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#saveTerms(Collection[Query],IndexReader).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#saveTerms(Collection[Query],IndexReader).mjava","sourceNew":"  /*\n   * Save the set of terms in the queries to termSetMap.\n   * \n   * ex1) q=name:john\n   *      - fieldMatch==true\n   *          termSetMap=Map<\"name\",Set<\"john\">>\n   *      - fieldMatch==false\n   *          termSetMap=Map<null,Set<\"john\">>\n   *          \n   * ex2) q=name:john title:manager\n   *      - fieldMatch==true\n   *          termSetMap=Map<\"name\",Set<\"john\">,\n   *                         \"title\",Set<\"manager\">>\n   *      - fieldMatch==false\n   *          termSetMap=Map<null,Set<\"john\",\"manager\">>\n   *          \n   * ex3) q=name:\"john lennon\"\n   *      - fieldMatch==true\n   *          termSetMap=Map<\"name\",Set<\"john\",\"lennon\">>\n   *      - fieldMatch==false\n   *          termSetMap=Map<null,Set<\"john\",\"lennon\">>\n   */\n  void saveTerms( Collection<Query> flatQueries, IndexReader reader ) throws IOException{\n    for( Query query : flatQueries ){\n      while (query instanceof BoostQuery) {\n        query = ((BoostQuery) query).getQuery();\n      }\n      Set<String> termSet = getTermSet( query );\n      if( query instanceof TermQuery )\n        termSet.add( ((TermQuery)query).getTerm().text() );\n      else if( query instanceof PhraseQuery ){\n        for( Term term : ((PhraseQuery)query).getTerms() )\n          termSet.add( term.text() );\n      }\n      else if (query instanceof MultiTermQuery && reader != null) {\n        BooleanQuery mtqTerms = (BooleanQuery) query.rewrite(reader);\n        for (BooleanClause clause : mtqTerms) {\n          termSet.add (((TermQuery) clause.getQuery()).getTerm().text());\n        }\n      }\n      else\n        throw new RuntimeException( \"query \\\"\" + query.toString() + \"\\\" must be flatten first.\" );\n    }\n  }\n\n","sourceOld":"  /*\n   * Save the set of terms in the queries to termSetMap.\n   * \n   * ex1) q=name:john\n   *      - fieldMatch==true\n   *          termSetMap=Map<\"name\",Set<\"john\">>\n   *      - fieldMatch==false\n   *          termSetMap=Map<null,Set<\"john\">>\n   *          \n   * ex2) q=name:john title:manager\n   *      - fieldMatch==true\n   *          termSetMap=Map<\"name\",Set<\"john\">,\n   *                         \"title\",Set<\"manager\">>\n   *      - fieldMatch==false\n   *          termSetMap=Map<null,Set<\"john\",\"manager\">>\n   *          \n   * ex3) q=name:\"john lennon\"\n   *      - fieldMatch==true\n   *          termSetMap=Map<\"name\",Set<\"john\",\"lennon\">>\n   *      - fieldMatch==false\n   *          termSetMap=Map<null,Set<\"john\",\"lennon\">>\n   */\n    void saveTerms( Collection<Query> flatQueries, IndexReader reader ) throws IOException{\n    for( Query query : flatQueries ){\n      Set<String> termSet = getTermSet( query );\n      if( query instanceof TermQuery )\n        termSet.add( ((TermQuery)query).getTerm().text() );\n      else if( query instanceof PhraseQuery ){\n        for( Term term : ((PhraseQuery)query).getTerms() )\n          termSet.add( term.text() );\n      }\n      else if (query instanceof MultiTermQuery && reader != null) {\n        BooleanQuery mtqTerms = (BooleanQuery) query.rewrite(reader);\n        for (BooleanClause clause : mtqTerms) {\n          termSet.add (((TermQuery) clause.getQuery()).getTerm().text());\n        }\n      }\n      else\n        throw new RuntimeException( \"query \\\"\" + query.toString() + \"\\\" must be flatten first.\" );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2dfdf766e55e943d942055d7de53c7ad6bc45283"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}