{"path":"lucene/backwards/src/test/org/apache/lucene/analysis/TestToken#testGrow().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/analysis/TestToken#testGrow().mjava","pathOld":"backwards/src/test/org/apache/lucene/analysis/TestToken#testGrow().mjava","sourceNew":"  public void testGrow() {\n    Token t = new Token();\n    StringBuilder buf = new StringBuilder(\"ab\");\n    for (int i = 0; i < 20; i++)\n    {\n      char[] content = buf.toString().toCharArray();\n      t.setTermBuffer(content, 0, content.length);\n      assertEquals(buf.length(), t.termLength());\n      assertEquals(buf.toString(), t.term());\n      buf.append(buf.toString());\n    }\n    assertEquals(1048576, t.termLength());\n\n    // now as a string, first variant\n    t = new Token();\n    buf = new StringBuilder(\"ab\");\n    for (int i = 0; i < 20; i++)\n    {\n      String content = buf.toString();\n      t.setTermBuffer(content, 0, content.length());\n      assertEquals(content.length(), t.termLength());\n      assertEquals(content, t.term());\n      buf.append(content);\n    }\n    assertEquals(1048576, t.termLength());\n\n    // now as a string, second variant\n    t = new Token();\n    buf = new StringBuilder(\"ab\");\n    for (int i = 0; i < 20; i++)\n    {\n      String content = buf.toString();\n      t.setTermBuffer(content);\n      assertEquals(content.length(), t.termLength());\n      assertEquals(content, t.term());\n      buf.append(content);\n    }\n    assertEquals(1048576, t.termLength());\n\n    // Test for slow growth to a long term\n    t = new Token();\n    buf = new StringBuilder(\"a\");\n    for (int i = 0; i < 20000; i++)\n    {\n      String content = buf.toString();\n      t.setTermBuffer(content);\n      assertEquals(content.length(), t.termLength());\n      assertEquals(content, t.term());\n      buf.append(\"a\");\n    }\n    assertEquals(20000, t.termLength());\n\n    // Test for slow growth to a long term\n    t = new Token();\n    buf = new StringBuilder(\"a\");\n    for (int i = 0; i < 20000; i++)\n    {\n      String content = buf.toString();\n      t.setTermBuffer(content);\n      assertEquals(content.length(), t.termLength());\n      assertEquals(content, t.term());\n      buf.append(\"a\");\n    }\n    assertEquals(20000, t.termLength());\n  }\n\n","sourceOld":"  public void testGrow() {\n    Token t = new Token();\n    StringBuilder buf = new StringBuilder(\"ab\");\n    for (int i = 0; i < 20; i++)\n    {\n      char[] content = buf.toString().toCharArray();\n      t.setTermBuffer(content, 0, content.length);\n      assertEquals(buf.length(), t.termLength());\n      assertEquals(buf.toString(), t.term());\n      buf.append(buf.toString());\n    }\n    assertEquals(1048576, t.termLength());\n\n    // now as a string, first variant\n    t = new Token();\n    buf = new StringBuilder(\"ab\");\n    for (int i = 0; i < 20; i++)\n    {\n      String content = buf.toString();\n      t.setTermBuffer(content, 0, content.length());\n      assertEquals(content.length(), t.termLength());\n      assertEquals(content, t.term());\n      buf.append(content);\n    }\n    assertEquals(1048576, t.termLength());\n\n    // now as a string, second variant\n    t = new Token();\n    buf = new StringBuilder(\"ab\");\n    for (int i = 0; i < 20; i++)\n    {\n      String content = buf.toString();\n      t.setTermBuffer(content);\n      assertEquals(content.length(), t.termLength());\n      assertEquals(content, t.term());\n      buf.append(content);\n    }\n    assertEquals(1048576, t.termLength());\n\n    // Test for slow growth to a long term\n    t = new Token();\n    buf = new StringBuilder(\"a\");\n    for (int i = 0; i < 20000; i++)\n    {\n      String content = buf.toString();\n      t.setTermBuffer(content);\n      assertEquals(content.length(), t.termLength());\n      assertEquals(content, t.term());\n      buf.append(\"a\");\n    }\n    assertEquals(20000, t.termLength());\n\n    // Test for slow growth to a long term\n    t = new Token();\n    buf = new StringBuilder(\"a\");\n    for (int i = 0; i < 20000; i++)\n    {\n      String content = buf.toString();\n      t.setTermBuffer(content);\n      assertEquals(content.length(), t.termLength());\n      assertEquals(content, t.term());\n      buf.append(\"a\");\n    }\n    assertEquals(20000, t.termLength());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/analysis/TestToken#testGrow().mjava","sourceNew":null,"sourceOld":"  public void testGrow() {\n    Token t = new Token();\n    StringBuilder buf = new StringBuilder(\"ab\");\n    for (int i = 0; i < 20; i++)\n    {\n      char[] content = buf.toString().toCharArray();\n      t.setTermBuffer(content, 0, content.length);\n      assertEquals(buf.length(), t.termLength());\n      assertEquals(buf.toString(), t.term());\n      buf.append(buf.toString());\n    }\n    assertEquals(1048576, t.termLength());\n\n    // now as a string, first variant\n    t = new Token();\n    buf = new StringBuilder(\"ab\");\n    for (int i = 0; i < 20; i++)\n    {\n      String content = buf.toString();\n      t.setTermBuffer(content, 0, content.length());\n      assertEquals(content.length(), t.termLength());\n      assertEquals(content, t.term());\n      buf.append(content);\n    }\n    assertEquals(1048576, t.termLength());\n\n    // now as a string, second variant\n    t = new Token();\n    buf = new StringBuilder(\"ab\");\n    for (int i = 0; i < 20; i++)\n    {\n      String content = buf.toString();\n      t.setTermBuffer(content);\n      assertEquals(content.length(), t.termLength());\n      assertEquals(content, t.term());\n      buf.append(content);\n    }\n    assertEquals(1048576, t.termLength());\n\n    // Test for slow growth to a long term\n    t = new Token();\n    buf = new StringBuilder(\"a\");\n    for (int i = 0; i < 20000; i++)\n    {\n      String content = buf.toString();\n      t.setTermBuffer(content);\n      assertEquals(content.length(), t.termLength());\n      assertEquals(content, t.term());\n      buf.append(\"a\");\n    }\n    assertEquals(20000, t.termLength());\n\n    // Test for slow growth to a long term\n    t = new Token();\n    buf = new StringBuilder(\"a\");\n    for (int i = 0; i < 20000; i++)\n    {\n      String content = buf.toString();\n      t.setTermBuffer(content);\n      assertEquals(content.length(), t.termLength());\n      assertEquals(content, t.term());\n      buf.append(\"a\");\n    }\n    assertEquals(20000, t.termLength());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}