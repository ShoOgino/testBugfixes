{"path":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testArrayOfRootObjects().mjava","commits":[{"id":"7272013f8448f299f54112ec41cb3dc047cda543","date":1453483707,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testArrayOfRootObjects().mjava","pathOld":"/dev/null","sourceNew":"  public void testArrayOfRootObjects() throws Exception {\n    String json = \"[{'fieldA':'A1'}, {'fieldB':'B2'}]\";\n    JsonRecordReader streamer;\n    List<Map<String, Object>> records;\n\n    final AtomicReference<WeakReference<String>> ref = new AtomicReference<>();\n    streamer = JsonRecordReader.getInst(\"/\", Collections.singletonList(\"$FQN:/**\"));\n    streamer.streamRecords(new StringReader(json), new JsonRecordReader.Handler() {\n      @Override\n      public void handle(Map<String, Object> record, String path) {\n        System.gc();\n        if (ref.get() != null) {\n          assertNull(\"This reference is still intact :\" +ref.get().get() ,ref.get().get());\n        }\n        String fName = record.keySet().iterator().next();\n        ref.set(new WeakReference<String>(fName));\n      }\n    });\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e08e2b6886d78c91752d82ea2b436c4324cd55","date":1464786234,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testArrayOfRootObjects().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testArrayOfRootObjects().mjava","sourceNew":"  public void testArrayOfRootObjects() throws Exception {\n    String json = \"[{'fieldA':'A1'}, {'fieldB':'B2'}]\";\n    JsonRecordReader streamer;\n    List<Map<String, Object>> records;\n\n    final AtomicReference<WeakReference<String>> ref = new AtomicReference<>();\n    streamer = JsonRecordReader.getInst(\"/\", Collections.singletonList(\"$FQN:/**\"));\n    streamer.streamRecords(new StringReader(json), (record, path) -> {\n      System.gc();\n      if (ref.get() != null) {\n        assertNull(\"This reference is still intact :\" + ref.get().get(), ref.get().get());\n      }\n      String fName = record.keySet().iterator().next();\n      ref.set(new WeakReference<>(fName));\n    });\n\n\n  }\n\n","sourceOld":"  public void testArrayOfRootObjects() throws Exception {\n    String json = \"[{'fieldA':'A1'}, {'fieldB':'B2'}]\";\n    JsonRecordReader streamer;\n    List<Map<String, Object>> records;\n\n    final AtomicReference<WeakReference<String>> ref = new AtomicReference<>();\n    streamer = JsonRecordReader.getInst(\"/\", Collections.singletonList(\"$FQN:/**\"));\n    streamer.streamRecords(new StringReader(json), new JsonRecordReader.Handler() {\n      @Override\n      public void handle(Map<String, Object> record, String path) {\n        System.gc();\n        if (ref.get() != null) {\n          assertNull(\"This reference is still intact :\" +ref.get().get() ,ref.get().get());\n        }\n        String fName = record.keySet().iterator().next();\n        ref.set(new WeakReference<String>(fName));\n      }\n    });\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"611f7ea4eee5babadf4129bfa5fbae964738cd7c","date":1464787051,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testArrayOfRootObjects().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testArrayOfRootObjects().mjava","sourceNew":"  public void testArrayOfRootObjects() throws Exception {\n    String json = \"[{'fieldA':'A1'}, {'fieldB':'B2'}]\";\n    JsonRecordReader streamer;\n    List<Map<String, Object>> records;\n\n    final AtomicReference<WeakReference<String>> ref = new AtomicReference<>();\n    streamer = JsonRecordReader.getInst(\"/\", Collections.singletonList(\"$FQN:/**\"));\n    streamer.streamRecords(new StringReader(json), (record, path) -> {\n      System.gc();\n      if (ref.get() != null) {\n        assertNull(\"This reference is still intact :\" + ref.get().get(), ref.get().get());\n      }\n      String fName = record.keySet().iterator().next();\n      ref.set(new WeakReference<>(fName));\n    });\n\n\n  }\n\n","sourceOld":"  public void testArrayOfRootObjects() throws Exception {\n    String json = \"[{'fieldA':'A1'}, {'fieldB':'B2'}]\";\n    JsonRecordReader streamer;\n    List<Map<String, Object>> records;\n\n    final AtomicReference<WeakReference<String>> ref = new AtomicReference<>();\n    streamer = JsonRecordReader.getInst(\"/\", Collections.singletonList(\"$FQN:/**\"));\n    streamer.streamRecords(new StringReader(json), new JsonRecordReader.Handler() {\n      @Override\n      public void handle(Map<String, Object> record, String path) {\n        System.gc();\n        if (ref.get() != null) {\n          assertNull(\"This reference is still intact :\" +ref.get().get() ,ref.get().get());\n        }\n        String fName = record.keySet().iterator().next();\n        ref.set(new WeakReference<String>(fName));\n      }\n    });\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b8ee93140fd0efef7e101786e3ed5160a700b5f","date":1464820111,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testArrayOfRootObjects().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testArrayOfRootObjects().mjava","sourceNew":"  public void testArrayOfRootObjects() throws Exception {\n    String json = \"[{'fieldA':'A1'}, {'fieldB':'B2'}]\";\n    JsonRecordReader streamer;\n    List<Map<String, Object>> records;\n\n    final AtomicReference<WeakReference<String>> ref = new AtomicReference<>();\n    streamer = JsonRecordReader.getInst(\"/\", Collections.singletonList(\"$FQN:/**\"));\n    streamer.streamRecords(new StringReader(json), (record, path) -> {\n      System.gc();\n      if (ref.get() != null) {\n        assertNull(\"This reference is still intact :\" + ref.get().get(), ref.get().get());\n      }\n      String fName = record.keySet().iterator().next();\n      ref.set(new WeakReference<>(fName));\n    });\n\n\n  }\n\n","sourceOld":"  public void testArrayOfRootObjects() throws Exception {\n    String json = \"[{'fieldA':'A1'}, {'fieldB':'B2'}]\";\n    JsonRecordReader streamer;\n    List<Map<String, Object>> records;\n\n    final AtomicReference<WeakReference<String>> ref = new AtomicReference<>();\n    streamer = JsonRecordReader.getInst(\"/\", Collections.singletonList(\"$FQN:/**\"));\n    streamer.streamRecords(new StringReader(json), new JsonRecordReader.Handler() {\n      @Override\n      public void handle(Map<String, Object> record, String path) {\n        System.gc();\n        if (ref.get() != null) {\n          assertNull(\"This reference is still intact :\" +ref.get().get() ,ref.get().get());\n        }\n        String fName = record.keySet().iterator().next();\n        ref.set(new WeakReference<String>(fName));\n      }\n    });\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","date":1464821470,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testArrayOfRootObjects().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testArrayOfRootObjects().mjava","sourceNew":"  public void testArrayOfRootObjects() throws Exception {\n    String json = \"[{'fieldA':'A1'}, {'fieldB':'B2'}]\";\n    JsonRecordReader streamer;\n    List<Map<String, Object>> records;\n\n    final AtomicReference<WeakReference<String>> ref = new AtomicReference<>();\n    streamer = JsonRecordReader.getInst(\"/\", Collections.singletonList(\"$FQN:/**\"));\n    streamer.streamRecords(new StringReader(json), (record, path) -> {\n      System.gc();\n      if (ref.get() != null) {\n        assertNull(\"This reference is still intact :\" + ref.get().get(), ref.get().get());\n      }\n      String fName = record.keySet().iterator().next();\n      ref.set(new WeakReference<>(fName));\n    });\n\n\n  }\n\n","sourceOld":"  public void testArrayOfRootObjects() throws Exception {\n    String json = \"[{'fieldA':'A1'}, {'fieldB':'B2'}]\";\n    JsonRecordReader streamer;\n    List<Map<String, Object>> records;\n\n    final AtomicReference<WeakReference<String>> ref = new AtomicReference<>();\n    streamer = JsonRecordReader.getInst(\"/\", Collections.singletonList(\"$FQN:/**\"));\n    streamer.streamRecords(new StringReader(json), new JsonRecordReader.Handler() {\n      @Override\n      public void handle(Map<String, Object> record, String path) {\n        System.gc();\n        if (ref.get() != null) {\n          assertNull(\"This reference is still intact :\" +ref.get().get() ,ref.get().get());\n        }\n        String fName = record.keySet().iterator().next();\n        ref.set(new WeakReference<String>(fName));\n      }\n    });\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testArrayOfRootObjects().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testArrayOfRootObjects().mjava","sourceNew":"  public void testArrayOfRootObjects() throws Exception {\n    String json = \"[{'fieldA':'A1'}, {'fieldB':'B2'}]\";\n    JsonRecordReader streamer;\n    List<Map<String, Object>> records;\n\n    final AtomicReference<WeakReference<String>> ref = new AtomicReference<>();\n    streamer = JsonRecordReader.getInst(\"/\", Collections.singletonList(\"$FQN:/**\"));\n    streamer.streamRecords(new StringReader(json), (record, path) -> {\n      System.gc();\n      if (ref.get() != null) {\n        assertNull(\"This reference is still intact :\" + ref.get().get(), ref.get().get());\n      }\n      String fName = record.keySet().iterator().next();\n      ref.set(new WeakReference<>(fName));\n    });\n\n\n  }\n\n","sourceOld":"  public void testArrayOfRootObjects() throws Exception {\n    String json = \"[{'fieldA':'A1'}, {'fieldB':'B2'}]\";\n    JsonRecordReader streamer;\n    List<Map<String, Object>> records;\n\n    final AtomicReference<WeakReference<String>> ref = new AtomicReference<>();\n    streamer = JsonRecordReader.getInst(\"/\", Collections.singletonList(\"$FQN:/**\"));\n    streamer.streamRecords(new StringReader(json), new JsonRecordReader.Handler() {\n      @Override\n      public void handle(Map<String, Object> record, String path) {\n        System.gc();\n        if (ref.get() != null) {\n          assertNull(\"This reference is still intact :\" +ref.get().get() ,ref.get().get());\n        }\n        String fName = record.keySet().iterator().next();\n        ref.set(new WeakReference<String>(fName));\n      }\n    });\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b4e08e2b6886d78c91752d82ea2b436c4324cd55":["7272013f8448f299f54112ec41cb3dc047cda543"],"7272013f8448f299f54112ec41cb3dc047cda543":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"611f7ea4eee5babadf4129bfa5fbae964738cd7c":["7272013f8448f299f54112ec41cb3dc047cda543","b4e08e2b6886d78c91752d82ea2b436c4324cd55"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["7272013f8448f299f54112ec41cb3dc047cda543","611f7ea4eee5babadf4129bfa5fbae964738cd7c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7272013f8448f299f54112ec41cb3dc047cda543","b4e08e2b6886d78c91752d82ea2b436c4324cd55"],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":["7272013f8448f299f54112ec41cb3dc047cda543","5b8ee93140fd0efef7e101786e3ed5160a700b5f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4e08e2b6886d78c91752d82ea2b436c4324cd55"]},"commit2Childs":{"b4e08e2b6886d78c91752d82ea2b436c4324cd55":["611f7ea4eee5babadf4129bfa5fbae964738cd7c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7272013f8448f299f54112ec41cb3dc047cda543":["b4e08e2b6886d78c91752d82ea2b436c4324cd55","611f7ea4eee5babadf4129bfa5fbae964738cd7c","5b8ee93140fd0efef7e101786e3ed5160a700b5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7272013f8448f299f54112ec41cb3dc047cda543"],"611f7ea4eee5babadf4129bfa5fbae964738cd7c":["5b8ee93140fd0efef7e101786e3ed5160a700b5f"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}