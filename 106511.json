{"path":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterTermIntervals#testEncode().mjava","commits":[{"id":"68a600ba48cf2abfb5af305ebbf96bb6e2d820ea","date":1574601528,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterTermIntervals#testEncode().mjava","pathOld":"/dev/null","sourceNew":"  public void testEncode() throws Exception {\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);\n\n    Field body = new Field(\"body\", \"\", fieldType);\n    Document doc = new Document();\n    doc.add(body);\n\n    body.setStringValue(\"This is a test. Just a test highlighting from <i>postings</i>. Feel free to ignore.\");\n    iw.addDocument(doc);\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer) {\n      @Override\n      protected PassageFormatter getFormatter(String field) {\n        return new DefaultPassageFormatter(\"<b>\", \"</b>\", \"... \", true);\n      }\n    };\n    \n    Query query = new IntervalQuery(\"body\", Intervals.term(\"highlighting\"));\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits.value);\n    String snippets[] = highlighter.highlight(\"body\", query, topDocs);\n    assertEquals(1, snippets.length);\n    assertEquals(\"Just&#32;a&#32;test&#32;<b>highlighting</b>&#32;from&#32;&lt;i&gt;postings&lt;&#x2F;i&gt;&#46;&#32;\", snippets[0]);\n    ir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3ba86d243e38281200fd85e0d48b3fe5c0b260b","date":1577139648,"type":3,"author":"Nándor Mátravölgyi","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterTermIntervals#testEncode().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterTermIntervals#testEncode().mjava","sourceNew":"  public void testEncode() throws Exception {\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);\n\n    Field body = new Field(\"body\", \"\", fieldType);\n    Document doc = new Document();\n    doc.add(body);\n\n    body.setStringValue(\"This is a test. Just a test highlighting from <i>postings</i>. Feel free to ignore.\");\n    iw.addDocument(doc);\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer) {\n      @Override\n      protected PassageFormatter getFormatter(String field) {\n        return new DefaultPassageFormatter(\"<b>\", \"</b>\", \"... \", true);\n      }\n    };\n    \n    Query query = new IntervalQuery(\"body\", Intervals.term(\"highlighting\"));\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits.value);\n    String snippets[] = highlighter.highlight(\"body\", query, topDocs);\n    assertEquals(1, snippets.length);\n    assertEquals(\"Just a test <b>highlighting</b> from &lt;i&gt;postings&lt;&#x2F;i&gt;. \", snippets[0]);\n    ir.close();\n  }\n\n","sourceOld":"  public void testEncode() throws Exception {\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);\n\n    Field body = new Field(\"body\", \"\", fieldType);\n    Document doc = new Document();\n    doc.add(body);\n\n    body.setStringValue(\"This is a test. Just a test highlighting from <i>postings</i>. Feel free to ignore.\");\n    iw.addDocument(doc);\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer) {\n      @Override\n      protected PassageFormatter getFormatter(String field) {\n        return new DefaultPassageFormatter(\"<b>\", \"</b>\", \"... \", true);\n      }\n    };\n    \n    Query query = new IntervalQuery(\"body\", Intervals.term(\"highlighting\"));\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits.value);\n    String snippets[] = highlighter.highlight(\"body\", query, topDocs);\n    assertEquals(1, snippets.length);\n    assertEquals(\"Just&#32;a&#32;test&#32;<b>highlighting</b>&#32;from&#32;&lt;i&gt;postings&lt;&#x2F;i&gt;&#46;&#32;\", snippets[0]);\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","date":1577276097,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterTermIntervals#testEncode().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterTermIntervals#testEncode().mjava","sourceNew":"  public void testEncode() throws Exception {\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);\n\n    Field body = new Field(\"body\", \"\", fieldType);\n    Document doc = new Document();\n    doc.add(body);\n\n    body.setStringValue(\"This is a test. Just a test highlighting from <i>postings</i>. Feel free to ignore.\");\n    iw.addDocument(doc);\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer) {\n      @Override\n      protected PassageFormatter getFormatter(String field) {\n        return new DefaultPassageFormatter(\"<b>\", \"</b>\", \"... \", true);\n      }\n    };\n    \n    Query query = new IntervalQuery(\"body\", Intervals.term(\"highlighting\"));\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits.value);\n    String snippets[] = highlighter.highlight(\"body\", query, topDocs);\n    assertEquals(1, snippets.length);\n    assertEquals(\"Just a test <b>highlighting</b> from &lt;i&gt;postings&lt;&#x2F;i&gt;. \", snippets[0]);\n    ir.close();\n  }\n\n","sourceOld":"  public void testEncode() throws Exception {\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);\n\n    Field body = new Field(\"body\", \"\", fieldType);\n    Document doc = new Document();\n    doc.add(body);\n\n    body.setStringValue(\"This is a test. Just a test highlighting from <i>postings</i>. Feel free to ignore.\");\n    iw.addDocument(doc);\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer) {\n      @Override\n      protected PassageFormatter getFormatter(String field) {\n        return new DefaultPassageFormatter(\"<b>\", \"</b>\", \"... \", true);\n      }\n    };\n    \n    Query query = new IntervalQuery(\"body\", Intervals.term(\"highlighting\"));\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits.value);\n    String snippets[] = highlighter.highlight(\"body\", query, topDocs);\n    assertEquals(1, snippets.length);\n    assertEquals(\"Just&#32;a&#32;test&#32;<b>highlighting</b>&#32;from&#32;&lt;i&gt;postings&lt;&#x2F;i&gt;&#46;&#32;\", snippets[0]);\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a3ba86d243e38281200fd85e0d48b3fe5c0b260b":["68a600ba48cf2abfb5af305ebbf96bb6e2d820ea"],"96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a":["68a600ba48cf2abfb5af305ebbf96bb6e2d820ea","a3ba86d243e38281200fd85e0d48b3fe5c0b260b"],"68a600ba48cf2abfb5af305ebbf96bb6e2d820ea":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a3ba86d243e38281200fd85e0d48b3fe5c0b260b"]},"commit2Childs":{"a3ba86d243e38281200fd85e0d48b3fe5c0b260b":["96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a":[],"68a600ba48cf2abfb5af305ebbf96bb6e2d820ea":["a3ba86d243e38281200fd85e0d48b3fe5c0b260b","96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["68a600ba48cf2abfb5af305ebbf96bb6e2d820ea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}