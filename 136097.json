{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/HashBasedRouter#hashToSlice(int,DocCollection).mjava","commits":[{"id":"c78bb747213f4a3449337db2399309566a08241a","date":1354823430,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/HashBasedRouter#hashToSlice(int,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/HashBasedRouter[DocRouter]#hashToSlice(int,DocCollection).mjava","sourceNew":"  protected Slice hashToSlice(int hash, DocCollection collection) {\n    for (Slice slice : collection.getSlices()) {\n      Range range = slice.getRange();\n      if (range != null && range.includes(hash)) return slice;\n    }\n    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No slice servicing hash code \" + Integer.toHexString(hash) + \" in \" + collection);\n  }\n\n","sourceOld":"  protected Slice hashToSlice(int hash, DocCollection collection) {\n    for (Slice slice : collection.getSlices()) {\n      DocRouter.Range range = slice.getRange();\n      if (range != null && range.includes(hash)) return slice;\n    }\n    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No slice servicing hash code \" + Integer.toHexString(hash) + \" in \" + collection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/HashBasedRouter#hashToSlice(int,DocCollection).mjava","pathOld":"/dev/null","sourceNew":"  protected Slice hashToSlice(int hash, DocCollection collection) {\n    for (Slice slice : collection.getSlices()) {\n      Range range = slice.getRange();\n      if (range != null && range.includes(hash)) return slice;\n    }\n    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No slice servicing hash code \" + Integer.toHexString(hash) + \" in \" + collection);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0beaed456aa3358e5e4a99ea2aea994ef6c81de3","date":1365434191,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/HashBasedRouter#hashToSlice(int,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/HashBasedRouter#hashToSlice(int,DocCollection).mjava","sourceNew":"  protected Slice hashToSlice(int hash, DocCollection collection) {\n    for (Slice slice : collection.getActiveSlices()) {\n      Range range = slice.getRange();\n      if (range != null && range.includes(hash)) return slice;\n    }\n    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active slice servicing hash code \" + Integer.toHexString(hash) + \" in \" + collection);\n  }\n\n","sourceOld":"  protected Slice hashToSlice(int hash, DocCollection collection) {\n    for (Slice slice : collection.getSlices()) {\n      Range range = slice.getRange();\n      if (range != null && range.includes(hash)) return slice;\n    }\n    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No slice servicing hash code \" + Integer.toHexString(hash) + \" in \" + collection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c84df91ca6a2e8d6f26f185663112546a27f6b45","date":1536077760,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/HashBasedRouter#hashToSlice(int,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/HashBasedRouter#hashToSlice(int,DocCollection).mjava","sourceNew":"  protected Slice hashToSlice(int hash, DocCollection collection) {\n    final Slice[] slices = collection.getActiveSlicesArr();\n    for (Slice slice : slices) {\n      Range range = slice.getRange();\n      if (range != null && range.includes(hash)) return slice;\n    }\n    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active slice servicing hash code \" + Integer.toHexString(hash) + \" in \" + collection);\n  }\n\n","sourceOld":"  protected Slice hashToSlice(int hash, DocCollection collection) {\n    for (Slice slice : collection.getActiveSlices()) {\n      Range range = slice.getRange();\n      if (range != null && range.includes(hash)) return slice;\n    }\n    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active slice servicing hash code \" + Integer.toHexString(hash) + \" in \" + collection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d9256b6a94b18d6da94417475505b2389aa8e5","date":1556568471,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/HashBasedRouter#hashToSlice(int,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/HashBasedRouter#hashToSlice(int,DocCollection).mjava","sourceNew":"  protected Slice hashToSlice(int hash, DocCollection collection) {\n    final Slice[] slices = collection.getActiveSlicesArr();\n    for (Slice slice : slices) {\n      Range range = slice.getRange();\n      if (range != null && range.includes(hash)) return slice;\n    }\n    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active slice servicing hash code \" + Integer.toHexString(hash) + \" in \" + collection.getName());\n  }\n\n","sourceOld":"  protected Slice hashToSlice(int hash, DocCollection collection) {\n    final Slice[] slices = collection.getActiveSlicesArr();\n    for (Slice slice : slices) {\n      Range range = slice.getRange();\n      if (range != null && range.includes(hash)) return slice;\n    }\n    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active slice servicing hash code \" + Integer.toHexString(hash) + \" in \" + collection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c84df91ca6a2e8d6f26f185663112546a27f6b45":["0beaed456aa3358e5e4a99ea2aea994ef6c81de3"],"c78bb747213f4a3449337db2399309566a08241a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c78bb747213f4a3449337db2399309566a08241a"],"46d9256b6a94b18d6da94417475505b2389aa8e5":["c84df91ca6a2e8d6f26f185663112546a27f6b45"],"0beaed456aa3358e5e4a99ea2aea994ef6c81de3":["c78bb747213f4a3449337db2399309566a08241a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["46d9256b6a94b18d6da94417475505b2389aa8e5"]},"commit2Childs":{"c84df91ca6a2e8d6f26f185663112546a27f6b45":["46d9256b6a94b18d6da94417475505b2389aa8e5"],"c78bb747213f4a3449337db2399309566a08241a":["407687e67faf6e1f02a211ca078d8e3eed631027","0beaed456aa3358e5e4a99ea2aea994ef6c81de3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c78bb747213f4a3449337db2399309566a08241a","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"46d9256b6a94b18d6da94417475505b2389aa8e5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0beaed456aa3358e5e4a99ea2aea994ef6c81de3":["c84df91ca6a2e8d6f26f185663112546a27f6b45"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}