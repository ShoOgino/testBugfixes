{"path":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#getBooleanArg(String).mjava","commits":[{"id":"afb6bf9ce227ab6aac5068547e286ecc958b8b9d","date":1394661169,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#getBooleanArg(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Used for getting a boolean argument from a NamedList object.  If the name\n   * is not present, returns null.  If there is more than one value with that\n   * name, or if the value found is not a Boolean or a String, throws an\n   * exception.  If there is only one value present and it is a Boolean or a\n   * String, the value is returned as a Boolean.  The NamedList is not\n   * modified. See {@link #remove(String)}, {@link #removeAll(String)}\n   * and {@link #removeConfigArgs(String)} for additional ways of gathering\n   * configuration information from a NamedList.\n   *\n   * @param name The key to look up in the NamedList.\n   * @return The boolean value found.\n   * @throws SolrException\n   *           If multiple values are found for the name or the value found is\n   *           not a Boolean or a String.\n   */\n  public Boolean getBooleanArg(final String name) {\n    Boolean bool;\n    List<T> values = getAll(name);\n    if (0 == values.size()) {\n      return null;\n    }\n    if (values.size() > 1) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Only one '\" + name + \"' is allowed\");\n    }\n    Object o = get(name);\n    if (o instanceof Boolean) {\n      bool = (Boolean)o;\n    } else if (o instanceof CharSequence) {\n      bool = Boolean.parseBoolean(o.toString());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"'\" + name + \"' must have type Boolean or CharSequence; found \" + o.getClass());\n    }\n    return bool;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"afb6bf9ce227ab6aac5068547e286ecc958b8b9d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["afb6bf9ce227ab6aac5068547e286ecc958b8b9d"]},"commit2Childs":{"afb6bf9ce227ab6aac5068547e286ecc958b8b9d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["afb6bf9ce227ab6aac5068547e286ecc958b8b9d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}