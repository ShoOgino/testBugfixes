{"path":"solr/core/src/test/org/apache/solr/cloud/AsyncMigrateRouteKeyTest#checkAsyncRequestForCompletion(String).mjava","commits":[{"id":"058f5a3debcfa0ea477da3eabb4cbe2ec0fac211","date":1394784078,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AsyncMigrateRouteKeyTest#checkAsyncRequestForCompletion(String).mjava","pathOld":"/dev/null","sourceNew":"  protected void checkAsyncRequestForCompletion(String asyncId) throws SolrServerException, IOException {\n    ModifiableSolrParams params;\n    String message;\n    params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionProcessor.REQUESTID, asyncId);\n    message = sendStatusRequestWithRetry(params, 10);\n    assertEquals(\"Task \" + asyncId + \" not found in completed tasks.\",\n        \"found \" + asyncId + \" in completed tasks\", message);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb7299fddbea34e76b950854f150f14b895ba68","date":1396327974,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AsyncMigrateRouteKeyTest#checkAsyncRequestForCompletion(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AsyncMigrateRouteKeyTest#checkAsyncRequestForCompletion(String).mjava","sourceNew":"  protected void checkAsyncRequestForCompletion(String asyncId) throws SolrServerException, IOException {\n    ModifiableSolrParams params;\n    String message;\n    params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionProcessor.REQUESTID, asyncId);\n    // This task takes long enough to run. Also check for the current state of the task to be running.\n    message = sendStatusRequestWithRetry(params, 2);\n    assertEquals(\"found \" + asyncId + \" in submitted tasks\", message);\n    // Now wait until the task actually completes successfully/fails.\n    message = sendStatusRequestWithRetry(params, 20);\n    assertEquals(\"Task \" + asyncId + \" not found in completed tasks.\",\n        \"found \" + asyncId + \" in completed tasks\", message);\n  }\n\n","sourceOld":"  protected void checkAsyncRequestForCompletion(String asyncId) throws SolrServerException, IOException {\n    ModifiableSolrParams params;\n    String message;\n    params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionProcessor.REQUESTID, asyncId);\n    message = sendStatusRequestWithRetry(params, 10);\n    assertEquals(\"Task \" + asyncId + \" not found in completed tasks.\",\n        \"found \" + asyncId + \" in completed tasks\", message);\n  }\n\n","bugFix":null,"bugIntro":["e599803c720d7623dd9c029dce651cd7811c82d9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AsyncMigrateRouteKeyTest#checkAsyncRequestForCompletion(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AsyncMigrateRouteKeyTest#checkAsyncRequestForCompletion(String).mjava","sourceNew":"  protected void checkAsyncRequestForCompletion(String asyncId) throws SolrServerException, IOException {\n    ModifiableSolrParams params;\n    String message;\n    params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionProcessor.REQUESTID, asyncId);\n    // This task takes long enough to run. Also check for the current state of the task to be running.\n    message = sendStatusRequestWithRetry(params, 2);\n    assertEquals(\"found \" + asyncId + \" in submitted tasks\", message);\n    // Now wait until the task actually completes successfully/fails.\n    message = sendStatusRequestWithRetry(params, 20);\n    assertEquals(\"Task \" + asyncId + \" not found in completed tasks.\",\n        \"found \" + asyncId + \" in completed tasks\", message);\n  }\n\n","sourceOld":"  protected void checkAsyncRequestForCompletion(String asyncId) throws SolrServerException, IOException {\n    ModifiableSolrParams params;\n    String message;\n    params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionProcessor.REQUESTID, asyncId);\n    message = sendStatusRequestWithRetry(params, 10);\n    assertEquals(\"Task \" + asyncId + \" not found in completed tasks.\",\n        \"found \" + asyncId + \" in completed tasks\", message);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74fe755c1cb9c998d933b455c573e86e9ef5d2aa","date":1401724046,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AsyncMigrateRouteKeyTest#checkAsyncRequestForCompletion(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AsyncMigrateRouteKeyTest#checkAsyncRequestForCompletion(String).mjava","sourceNew":"  protected void checkAsyncRequestForCompletion(String asyncId) throws SolrServerException, IOException {\n    ModifiableSolrParams params;\n    String message;\n    params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionProcessor.REQUESTID, asyncId);\n    // This task takes long enough to run. Also check for the current state of the task to be running.\n    message = sendStatusRequestWithRetry(params, 2);\n    assertEquals(\"found \" + asyncId + \" in running tasks\", message);\n    // Now wait until the task actually completes successfully/fails.\n    message = sendStatusRequestWithRetry(params, 20);\n    assertEquals(\"Task \" + asyncId + \" not found in completed tasks.\",\n        \"found \" + asyncId + \" in completed tasks\", message);\n  }\n\n","sourceOld":"  protected void checkAsyncRequestForCompletion(String asyncId) throws SolrServerException, IOException {\n    ModifiableSolrParams params;\n    String message;\n    params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionProcessor.REQUESTID, asyncId);\n    // This task takes long enough to run. Also check for the current state of the task to be running.\n    message = sendStatusRequestWithRetry(params, 2);\n    assertEquals(\"found \" + asyncId + \" in submitted tasks\", message);\n    // Now wait until the task actually completes successfully/fails.\n    message = sendStatusRequestWithRetry(params, 20);\n    assertEquals(\"Task \" + asyncId + \" not found in completed tasks.\",\n        \"found \" + asyncId + \" in completed tasks\", message);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e599803c720d7623dd9c029dce651cd7811c82d9","date":1406894812,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AsyncMigrateRouteKeyTest#checkAsyncRequestForCompletion(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AsyncMigrateRouteKeyTest#checkAsyncRequestForCompletion(String).mjava","sourceNew":"  protected void checkAsyncRequestForCompletion(String asyncId) throws SolrServerException, IOException {\n    ModifiableSolrParams params;\n    String message;\n    params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionProcessor.REQUESTID, asyncId);\n    // This task takes long enough to run. Also check for the current state of the task to be running.\n    message = sendStatusRequestWithRetry(params, 5);\n    assertEquals(\"found \" + asyncId + \" in running tasks\", message);\n    // Now wait until the task actually completes successfully/fails.\n    message = sendStatusRequestWithRetry(params, MAX_WAIT_SECONDS);\n    assertEquals(\"Task \" + asyncId + \" not found in completed tasks.\",\n        \"found \" + asyncId + \" in completed tasks\", message);\n  }\n\n","sourceOld":"  protected void checkAsyncRequestForCompletion(String asyncId) throws SolrServerException, IOException {\n    ModifiableSolrParams params;\n    String message;\n    params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionProcessor.REQUESTID, asyncId);\n    // This task takes long enough to run. Also check for the current state of the task to be running.\n    message = sendStatusRequestWithRetry(params, 2);\n    assertEquals(\"found \" + asyncId + \" in running tasks\", message);\n    // Now wait until the task actually completes successfully/fails.\n    message = sendStatusRequestWithRetry(params, 20);\n    assertEquals(\"Task \" + asyncId + \" not found in completed tasks.\",\n        \"found \" + asyncId + \" in completed tasks\", message);\n  }\n\n","bugFix":["5eb7299fddbea34e76b950854f150f14b895ba68"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","date":1438841252,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AsyncMigrateRouteKeyTest#checkAsyncRequestForCompletion(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AsyncMigrateRouteKeyTest#checkAsyncRequestForCompletion(String).mjava","sourceNew":"  protected void checkAsyncRequestForCompletion(String asyncId) throws SolrServerException, IOException {\n    ModifiableSolrParams params;\n    String message;\n    params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionMessageHandler.REQUESTID, asyncId);\n    // This task takes long enough to run. Also check for the current state of the task to be running.\n    message = sendStatusRequestWithRetry(params, 5);\n    assertEquals(\"found \" + asyncId + \" in running tasks\", message);\n    // Now wait until the task actually completes successfully/fails.\n    message = sendStatusRequestWithRetry(params, MAX_WAIT_SECONDS);\n    assertEquals(\"Task \" + asyncId + \" not found in completed tasks.\",\n        \"found \" + asyncId + \" in completed tasks\", message);\n  }\n\n","sourceOld":"  protected void checkAsyncRequestForCompletion(String asyncId) throws SolrServerException, IOException {\n    ModifiableSolrParams params;\n    String message;\n    params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionProcessor.REQUESTID, asyncId);\n    // This task takes long enough to run. Also check for the current state of the task to be running.\n    message = sendStatusRequestWithRetry(params, 5);\n    assertEquals(\"found \" + asyncId + \" in running tasks\", message);\n    // Now wait until the task actually completes successfully/fails.\n    message = sendStatusRequestWithRetry(params, MAX_WAIT_SECONDS);\n    assertEquals(\"Task \" + asyncId + \" not found in completed tasks.\",\n        \"found \" + asyncId + \" in completed tasks\", message);\n  }\n\n","bugFix":["058f5a3debcfa0ea477da3eabb4cbe2ec0fac211"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3088cdaa24ffe3ef44713ac9484114bd56eca2af","date":1453441194,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AsyncMigrateRouteKeyTest#checkAsyncRequestForCompletion(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AsyncMigrateRouteKeyTest#checkAsyncRequestForCompletion(String).mjava","sourceNew":"  protected void checkAsyncRequestForCompletion(String asyncId) throws SolrServerException, IOException {\n    ModifiableSolrParams params;\n    String message;\n    params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionMessageHandler.REQUESTID, asyncId);\n    // This task takes long enough to run. Also check for the current state of the task to be running.\n    message = sendStatusRequestWithRetry(params, 5);\n    assertEquals(\"found [\" + asyncId + \"] in running tasks\", message);\n    // Now wait until the task actually completes successfully/fails.\n    message = sendStatusRequestWithRetry(params, MAX_WAIT_SECONDS);\n    assertEquals(\"Task \" + asyncId + \" not found in completed tasks.\", \n        \"found [\" + asyncId + \"] in completed tasks\", message);\n  }\n\n","sourceOld":"  protected void checkAsyncRequestForCompletion(String asyncId) throws SolrServerException, IOException {\n    ModifiableSolrParams params;\n    String message;\n    params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionMessageHandler.REQUESTID, asyncId);\n    // This task takes long enough to run. Also check for the current state of the task to be running.\n    message = sendStatusRequestWithRetry(params, 5);\n    assertEquals(\"found \" + asyncId + \" in running tasks\", message);\n    // Now wait until the task actually completes successfully/fails.\n    message = sendStatusRequestWithRetry(params, MAX_WAIT_SECONDS);\n    assertEquals(\"Task \" + asyncId + \" not found in completed tasks.\",\n        \"found \" + asyncId + \" in completed tasks\", message);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a02c54923e5f4de08097fa9028e09e8cf5caa82","date":1475573567,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/AsyncMigrateRouteKeyTest#checkAsyncRequestForCompletion(String).mjava","sourceNew":null,"sourceOld":"  protected void checkAsyncRequestForCompletion(String asyncId) throws SolrServerException, IOException {\n    ModifiableSolrParams params;\n    String message;\n    params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionMessageHandler.REQUESTID, asyncId);\n    // This task takes long enough to run. Also check for the current state of the task to be running.\n    message = sendStatusRequestWithRetry(params, 5);\n    assertEquals(\"found [\" + asyncId + \"] in running tasks\", message);\n    // Now wait until the task actually completes successfully/fails.\n    message = sendStatusRequestWithRetry(params, MAX_WAIT_SECONDS);\n    assertEquals(\"Task \" + asyncId + \" not found in completed tasks.\", \n        \"found [\" + asyncId + \"] in completed tasks\", message);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1967bed916cc89da82a1c2085f27976da6d08cbd","date":1475588750,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/AsyncMigrateRouteKeyTest#checkAsyncRequestForCompletion(String).mjava","sourceNew":null,"sourceOld":"  protected void checkAsyncRequestForCompletion(String asyncId) throws SolrServerException, IOException {\n    ModifiableSolrParams params;\n    String message;\n    params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionMessageHandler.REQUESTID, asyncId);\n    // This task takes long enough to run. Also check for the current state of the task to be running.\n    message = sendStatusRequestWithRetry(params, 5);\n    assertEquals(\"found [\" + asyncId + \"] in running tasks\", message);\n    // Now wait until the task actually completes successfully/fails.\n    message = sendStatusRequestWithRetry(params, MAX_WAIT_SECONDS);\n    assertEquals(\"Task \" + asyncId + \" not found in completed tasks.\", \n        \"found [\" + asyncId + \"] in completed tasks\", message);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/AsyncMigrateRouteKeyTest#checkAsyncRequestForCompletion(String).mjava","sourceNew":null,"sourceOld":"  protected void checkAsyncRequestForCompletion(String asyncId) throws SolrServerException, IOException {\n    ModifiableSolrParams params;\n    String message;\n    params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionMessageHandler.REQUESTID, asyncId);\n    // This task takes long enough to run. Also check for the current state of the task to be running.\n    message = sendStatusRequestWithRetry(params, 5);\n    assertEquals(\"found [\" + asyncId + \"] in running tasks\", message);\n    // Now wait until the task actually completes successfully/fails.\n    message = sendStatusRequestWithRetry(params, MAX_WAIT_SECONDS);\n    assertEquals(\"Task \" + asyncId + \" not found in completed tasks.\", \n        \"found [\" + asyncId + \"] in completed tasks\", message);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb7299fddbea34e76b950854f150f14b895ba68":["058f5a3debcfa0ea477da3eabb4cbe2ec0fac211"],"5eb2511ababf862ea11e10761c70ee560cd84510":["058f5a3debcfa0ea477da3eabb4cbe2ec0fac211","5eb7299fddbea34e76b950854f150f14b895ba68"],"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["e599803c720d7623dd9c029dce651cd7811c82d9"],"3088cdaa24ffe3ef44713ac9484114bd56eca2af":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["3088cdaa24ffe3ef44713ac9484114bd56eca2af","5a02c54923e5f4de08097fa9028e09e8cf5caa82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"058f5a3debcfa0ea477da3eabb4cbe2ec0fac211":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e599803c720d7623dd9c029dce651cd7811c82d9":["74fe755c1cb9c998d933b455c573e86e9ef5d2aa"],"74fe755c1cb9c998d933b455c573e86e9ef5d2aa":["5eb7299fddbea34e76b950854f150f14b895ba68"],"5a02c54923e5f4de08097fa9028e09e8cf5caa82":["3088cdaa24ffe3ef44713ac9484114bd56eca2af"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["3088cdaa24ffe3ef44713ac9484114bd56eca2af","1967bed916cc89da82a1c2085f27976da6d08cbd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1967bed916cc89da82a1c2085f27976da6d08cbd"]},"commit2Childs":{"5eb7299fddbea34e76b950854f150f14b895ba68":["5eb2511ababf862ea11e10761c70ee560cd84510","74fe755c1cb9c998d933b455c573e86e9ef5d2aa"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["3088cdaa24ffe3ef44713ac9484114bd56eca2af"],"3088cdaa24ffe3ef44713ac9484114bd56eca2af":["1967bed916cc89da82a1c2085f27976da6d08cbd","5a02c54923e5f4de08097fa9028e09e8cf5caa82","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["058f5a3debcfa0ea477da3eabb4cbe2ec0fac211"],"058f5a3debcfa0ea477da3eabb4cbe2ec0fac211":["5eb7299fddbea34e76b950854f150f14b895ba68","5eb2511ababf862ea11e10761c70ee560cd84510"],"e599803c720d7623dd9c029dce651cd7811c82d9":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"5a02c54923e5f4de08097fa9028e09e8cf5caa82":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"74fe755c1cb9c998d933b455c573e86e9ef5d2aa":["e599803c720d7623dd9c029dce651cd7811c82d9"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}