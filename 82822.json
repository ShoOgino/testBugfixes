{"path":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/SimpleEndResultTransformer#transform(Map[String,#],SolrQueryResponse,GroupingSpecification,SolrDocumentSource).mjava","commits":[{"id":"ccc08aa684aee4964baee0644a6ba047bfd70829","date":1316263707,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/SimpleEndResultTransformer#transform(Map[String,#],SolrQueryResponse,GroupingSpecification,SolrDocumentSource).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void transform(Map<String, ?> result, SolrQueryResponse response, GroupingSpecification groupingSpecification, SolrDocumentSource solrDocumentSource) {\n    NamedList<Object> commands = new SimpleOrderedMap<Object>();\n    for (Map.Entry<String, ?> entry : result.entrySet()) {\n      Object value = entry.getValue();\n      if (TopGroups.class.isInstance(value)) {\n        @SuppressWarnings(\"unchecked\")\n        TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n        NamedList<Object> command = new SimpleOrderedMap<Object>();\n        command.add(\"matches\", topGroups.totalHitCount);\n        if (topGroups.totalGroupCount != null) {\n          command.add(\"ngroups\", topGroups.totalGroupCount);\n        }\n        SolrDocumentList docList = new SolrDocumentList();\n        docList.setStart(groupingSpecification.getOffset());\n        docList.setNumFound(topGroups.totalHitCount);\n\n        Float maxScore = Float.NEGATIVE_INFINITY;\n        for (GroupDocs<BytesRef> group : topGroups.groups) {\n          for (ScoreDoc scoreDoc : group.scoreDocs) {\n            if (maxScore < scoreDoc.score) {\n              maxScore = scoreDoc.score;\n            }\n            docList.add(solrDocumentSource.retrieve(scoreDoc));\n          }\n        }\n        if (maxScore != Float.NEGATIVE_INFINITY) {\n          docList.setMaxScore(maxScore);\n        }\n        command.add(\"doclist\", docList);\n        commands.add(entry.getKey(), command);\n      }\n    }\n\n    response.add(\"grouped\", commands);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"612521de57bdf68711c68b6d8565e4a80ca0d7f6","date":1333716414,"type":5,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/SimpleEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/SimpleEndResultTransformer#transform(Map[String,#],SolrQueryResponse,GroupingSpecification,SolrDocumentSource).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    NamedList<Object> commands = new SimpleOrderedMap<Object>();\n    for (Map.Entry<String, ?> entry : result.entrySet()) {\n      Object value = entry.getValue();\n      if (TopGroups.class.isInstance(value)) {\n        @SuppressWarnings(\"unchecked\")\n        TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n        NamedList<Object> command = new SimpleOrderedMap<Object>();\n        command.add(\"matches\", rb.totalHitCount);\n        if (topGroups.totalGroupCount != null) {\n          command.add(\"ngroups\", topGroups.totalGroupCount);\n        }\n        SolrDocumentList docList = new SolrDocumentList();\n        docList.setStart(rb.getGroupingSpec().getOffset());\n        docList.setNumFound(topGroups.totalHitCount);\n\n        Float maxScore = Float.NEGATIVE_INFINITY;\n        for (GroupDocs<BytesRef> group : topGroups.groups) {\n          for (ScoreDoc scoreDoc : group.scoreDocs) {\n            if (maxScore < scoreDoc.score) {\n              maxScore = scoreDoc.score;\n            }\n            docList.add(solrDocumentSource.retrieve(scoreDoc));\n          }\n        }\n        if (maxScore != Float.NEGATIVE_INFINITY) {\n          docList.setMaxScore(maxScore);\n        }\n        command.add(\"doclist\", docList);\n        commands.add(entry.getKey(), command);\n      }\n    }\n\n    rb.rsp.add(\"grouped\", commands);\n  }\n\n","sourceOld":"  @Override\n  public void transform(Map<String, ?> result, SolrQueryResponse response, GroupingSpecification groupingSpecification, SolrDocumentSource solrDocumentSource) {\n    NamedList<Object> commands = new SimpleOrderedMap<Object>();\n    for (Map.Entry<String, ?> entry : result.entrySet()) {\n      Object value = entry.getValue();\n      if (TopGroups.class.isInstance(value)) {\n        @SuppressWarnings(\"unchecked\")\n        TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n        NamedList<Object> command = new SimpleOrderedMap<Object>();\n        command.add(\"matches\", topGroups.totalHitCount);\n        if (topGroups.totalGroupCount != null) {\n          command.add(\"ngroups\", topGroups.totalGroupCount);\n        }\n        SolrDocumentList docList = new SolrDocumentList();\n        docList.setStart(groupingSpecification.getOffset());\n        docList.setNumFound(topGroups.totalHitCount);\n\n        Float maxScore = Float.NEGATIVE_INFINITY;\n        for (GroupDocs<BytesRef> group : topGroups.groups) {\n          for (ScoreDoc scoreDoc : group.scoreDocs) {\n            if (maxScore < scoreDoc.score) {\n              maxScore = scoreDoc.score;\n            }\n            docList.add(solrDocumentSource.retrieve(scoreDoc));\n          }\n        }\n        if (maxScore != Float.NEGATIVE_INFINITY) {\n          docList.setMaxScore(maxScore);\n        }\n        command.add(\"doclist\", docList);\n        commands.add(entry.getKey(), command);\n      }\n    }\n\n    response.add(\"grouped\", commands);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ccc08aa684aee4964baee0644a6ba047bfd70829":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"612521de57bdf68711c68b6d8565e4a80ca0d7f6":["ccc08aa684aee4964baee0644a6ba047bfd70829"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["612521de57bdf68711c68b6d8565e4a80ca0d7f6"]},"commit2Childs":{"ccc08aa684aee4964baee0644a6ba047bfd70829":["612521de57bdf68711c68b6d8565e4a80ca0d7f6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ccc08aa684aee4964baee0644a6ba047bfd70829"],"612521de57bdf68711c68b6d8565e4a80ca0d7f6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}