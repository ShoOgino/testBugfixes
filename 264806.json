{"path":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactoryLockExists().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactoryLockExists().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactoryLockExists().mjava","sourceNew":"    // Verify: NativeFSLockFactory works correctly if the lock file exists\n    public void testNativeFSLockFactoryLockExists() throws IOException {\n      \n      File lockFile = new File(TEMP_DIR, \"test.lock\");\n      lockFile.createNewFile();\n      \n      Lock l = new NativeFSLockFactory(TEMP_DIR).makeLock(\"test.lock\");\n      assertTrue(\"failed to obtain lock\", l.obtain());\n      l.release();\n      assertFalse(\"failed to release lock\", l.isLocked());\n      if (lockFile.exists()) {\n        lockFile.delete();\n      }\n    }\n\n","sourceOld":"    // Verify: NativeFSLockFactory works correctly if the lock file exists\n    public void testNativeFSLockFactoryLockExists() throws IOException {\n      \n      File lockFile = new File(TEMP_DIR, \"test.lock\");\n      lockFile.createNewFile();\n      \n      Lock l = new NativeFSLockFactory(TEMP_DIR).makeLock(\"test.lock\");\n      assertTrue(\"failed to obtain lock\", l.obtain());\n      l.release();\n      assertFalse(\"failed to release lock\", l.isLocked());\n      if (lockFile.exists()) {\n        lockFile.delete();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactoryLockExists().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactoryLockExists().mjava","sourceNew":"    // Verify: NativeFSLockFactory works correctly if the lock file exists\n    public void testNativeFSLockFactoryLockExists() throws IOException {\n      \n      File lockFile = new File(TEMP_DIR, \"test.lock\");\n      lockFile.createNewFile();\n      \n      Lock l = new NativeFSLockFactory(TEMP_DIR).makeLock(\"test.lock\");\n      assertTrue(\"failed to obtain lock\", l.obtain());\n      l.release();\n      assertFalse(\"failed to release lock\", l.isLocked());\n      if (lockFile.exists()) {\n        lockFile.delete();\n      }\n    }\n\n","sourceOld":"    // Verify: NativeFSLockFactory works correctly if the lock file exists\n    public void testNativeFSLockFactoryLockExists() throws IOException {\n      \n      File lockFile = new File(TEMP_DIR, \"test.lock\");\n      lockFile.createNewFile();\n      \n      Lock l = new NativeFSLockFactory(TEMP_DIR).makeLock(\"test.lock\");\n      assertTrue(\"failed to obtain lock\", l.obtain());\n      l.release();\n      assertFalse(\"failed to release lock\", l.isLocked());\n      if (lockFile.exists()) {\n        lockFile.delete();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactoryLockExists().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactoryLockExists().mjava","sourceNew":"    // Verify: NativeFSLockFactory works correctly if the lock file exists\n    public void testNativeFSLockFactoryLockExists() throws IOException {\n      \n      File lockFile = new File(TEMP_DIR, \"test.lock\");\n      lockFile.createNewFile();\n      \n      Lock l = new NativeFSLockFactory(TEMP_DIR).makeLock(\"test.lock\");\n      assertTrue(\"failed to obtain lock\", l.obtain());\n      l.release();\n      assertFalse(\"failed to release lock\", l.isLocked());\n      if (lockFile.exists()) {\n        lockFile.delete();\n      }\n    }\n\n","sourceOld":"    // Verify: NativeFSLockFactory works correctly if the lock file exists\n    public void testNativeFSLockFactoryLockExists() throws IOException {\n      \n      File lockFile = new File(TEMP_DIR, \"test.lock\");\n      lockFile.createNewFile();\n      \n      Lock l = new NativeFSLockFactory(TEMP_DIR).makeLock(\"test.lock\");\n      assertTrue(\"failed to obtain lock\", l.obtain());\n      l.release();\n      assertFalse(\"failed to release lock\", l.isLocked());\n      if (lockFile.exists()) {\n        lockFile.delete();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0fcdcf196523675146a4df3193e91413533857ab","date":1390686560,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactoryLockExists().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactoryLockExists().mjava","sourceNew":"    // Verify: NativeFSLockFactory works correctly if the lock file exists\n    public void testNativeFSLockFactoryLockExists() throws IOException {\n      \n      File lockFile = new File(TEMP_DIR, \"test.lock\");\n      lockFile.createNewFile();\n      \n      Lock l = new NativeFSLockFactory(TEMP_DIR).makeLock(\"test.lock\");\n      assertTrue(\"failed to obtain lock\", l.obtain());\n      l.close();\n      assertFalse(\"failed to release lock\", l.isLocked());\n      if (lockFile.exists()) {\n        lockFile.delete();\n      }\n    }\n\n","sourceOld":"    // Verify: NativeFSLockFactory works correctly if the lock file exists\n    public void testNativeFSLockFactoryLockExists() throws IOException {\n      \n      File lockFile = new File(TEMP_DIR, \"test.lock\");\n      lockFile.createNewFile();\n      \n      Lock l = new NativeFSLockFactory(TEMP_DIR).makeLock(\"test.lock\");\n      assertTrue(\"failed to obtain lock\", l.obtain());\n      l.release();\n      assertFalse(\"failed to release lock\", l.isLocked());\n      if (lockFile.exists()) {\n        lockFile.delete();\n      }\n    }\n\n","bugFix":["91425189981f3694858ce3b8637bc8aa0502e79a"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactoryLockExists().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactoryLockExists().mjava","sourceNew":"    // Verify: NativeFSLockFactory works correctly if the lock file exists\n    public void testNativeFSLockFactoryLockExists() throws IOException {\n      File tempDir = TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n      File lockFile = new File(tempDir, \"test.lock\");\n      lockFile.createNewFile();\n      \n      Lock l = new NativeFSLockFactory(tempDir).makeLock(\"test.lock\");\n      assertTrue(\"failed to obtain lock\", l.obtain());\n      l.close();\n      assertFalse(\"failed to release lock\", l.isLocked());\n      if (lockFile.exists()) {\n        lockFile.delete();\n      }\n    }\n\n","sourceOld":"    // Verify: NativeFSLockFactory works correctly if the lock file exists\n    public void testNativeFSLockFactoryLockExists() throws IOException {\n      \n      File lockFile = new File(TEMP_DIR, \"test.lock\");\n      lockFile.createNewFile();\n      \n      Lock l = new NativeFSLockFactory(TEMP_DIR).makeLock(\"test.lock\");\n      assertTrue(\"failed to obtain lock\", l.obtain());\n      l.close();\n      assertFalse(\"failed to release lock\", l.isLocked());\n      if (lockFile.exists()) {\n        lockFile.delete();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c","date":1396633078,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactoryLockExists().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactoryLockExists().mjava","sourceNew":"    // Verify: NativeFSLockFactory works correctly if the lock file exists\n    public void testNativeFSLockFactoryLockExists() throws IOException {\n      File tempDir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n      File lockFile = new File(tempDir, \"test.lock\");\n      lockFile.createNewFile();\n      \n      Lock l = new NativeFSLockFactory(tempDir).makeLock(\"test.lock\");\n      assertTrue(\"failed to obtain lock\", l.obtain());\n      l.close();\n      assertFalse(\"failed to release lock\", l.isLocked());\n      if (lockFile.exists()) {\n        lockFile.delete();\n      }\n    }\n\n","sourceOld":"    // Verify: NativeFSLockFactory works correctly if the lock file exists\n    public void testNativeFSLockFactoryLockExists() throws IOException {\n      File tempDir = TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n      File lockFile = new File(tempDir, \"test.lock\");\n      lockFile.createNewFile();\n      \n      Lock l = new NativeFSLockFactory(tempDir).makeLock(\"test.lock\");\n      assertTrue(\"failed to obtain lock\", l.obtain());\n      l.close();\n      assertFalse(\"failed to release lock\", l.isLocked());\n      if (lockFile.exists()) {\n        lockFile.delete();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactoryLockExists().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactoryLockExists().mjava","sourceNew":"    // Verify: NativeFSLockFactory works correctly if the lock file exists\n    public void testNativeFSLockFactoryLockExists() throws IOException {\n      File tempDir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n      File lockFile = new File(tempDir, \"test.lock\");\n      lockFile.createNewFile();\n      \n      Lock l = new NativeFSLockFactory(tempDir).makeLock(\"test.lock\");\n      assertTrue(\"failed to obtain lock\", l.obtain());\n      l.close();\n      assertFalse(\"failed to release lock\", l.isLocked());\n      if (lockFile.exists()) {\n        lockFile.delete();\n      }\n    }\n\n","sourceOld":"    // Verify: NativeFSLockFactory works correctly if the lock file exists\n    public void testNativeFSLockFactoryLockExists() throws IOException {\n      \n      File lockFile = new File(TEMP_DIR, \"test.lock\");\n      lockFile.createNewFile();\n      \n      Lock l = new NativeFSLockFactory(TEMP_DIR).makeLock(\"test.lock\");\n      assertTrue(\"failed to obtain lock\", l.obtain());\n      l.close();\n      assertFalse(\"failed to release lock\", l.isLocked());\n      if (lockFile.exists()) {\n        lockFile.delete();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cbc3688252d4a8045d69a164236b2cf87b721f17","date":1409846185,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactoryLockExists().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactoryLockExists().mjava","sourceNew":"    // Verify: NativeFSLockFactory works correctly if the lock file exists\n    public void testNativeFSLockFactoryLockExists() throws IOException {\n      File tempDir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n      File lockFile = new File(tempDir, \"test.lock\");\n      lockFile.createNewFile();\n      \n      Lock l = new NativeFSLockFactory(tempDir).makeLock(\"test.lock\");\n      assertTrue(\"failed to obtain lock\", l.obtain());\n      l.close();\n      assertFalse(\"failed to release lock\", l.isLocked());\n      Files.deleteIfExists(lockFile.toPath());\n    }\n\n","sourceOld":"    // Verify: NativeFSLockFactory works correctly if the lock file exists\n    public void testNativeFSLockFactoryLockExists() throws IOException {\n      File tempDir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n      File lockFile = new File(tempDir, \"test.lock\");\n      lockFile.createNewFile();\n      \n      Lock l = new NativeFSLockFactory(tempDir).makeLock(\"test.lock\");\n      assertTrue(\"failed to obtain lock\", l.obtain());\n      l.close();\n      assertFalse(\"failed to release lock\", l.isLocked());\n      if (lockFile.exists()) {\n        lockFile.delete();\n      }\n    }\n\n","bugFix":["91425189981f3694858ce3b8637bc8aa0502e79a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactoryLockExists().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactoryLockExists().mjava","sourceNew":"    // Verify: NativeFSLockFactory works correctly if the lock file exists\n    public void testNativeFSLockFactoryLockExists() throws IOException {\n      Path tempDir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n      Path lockFile = tempDir.resolve(\"test.lock\");\n      Files.createFile(lockFile);\n      \n      Lock l = new NativeFSLockFactory(tempDir).makeLock(\"test.lock\");\n      assertTrue(\"failed to obtain lock\", l.obtain());\n      l.close();\n      assertFalse(\"failed to release lock\", l.isLocked());\n      Files.deleteIfExists(lockFile);\n    }\n\n","sourceOld":"    // Verify: NativeFSLockFactory works correctly if the lock file exists\n    public void testNativeFSLockFactoryLockExists() throws IOException {\n      File tempDir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n      File lockFile = new File(tempDir, \"test.lock\");\n      lockFile.createNewFile();\n      \n      Lock l = new NativeFSLockFactory(tempDir).makeLock(\"test.lock\");\n      assertTrue(\"failed to obtain lock\", l.obtain());\n      l.close();\n      assertFalse(\"failed to release lock\", l.isLocked());\n      Files.deleteIfExists(lockFile.toPath());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285cdc737de75b7cc7c284a156b20214deb67bca","date":1415535483,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactoryLockExists().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactoryLockExists().mjava","sourceNew":"    // Verify: NativeFSLockFactory works correctly if the lock file exists\n    public void testNativeFSLockFactoryLockExists() throws IOException {\n      Path tempDir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n      Path lockFile = tempDir.resolve(\"test.lock\");\n      Files.createFile(lockFile);\n      \n      Directory dir = FSDirectory.open(tempDir, NativeFSLockFactory.INSTANCE);\n      Lock l = dir.makeLock(\"test.lock\");\n      assertTrue(\"failed to obtain lock\", l.obtain());\n      l.close();\n      assertFalse(\"failed to release lock\", l.isLocked());\n      Files.deleteIfExists(lockFile);\n    }\n\n","sourceOld":"    // Verify: NativeFSLockFactory works correctly if the lock file exists\n    public void testNativeFSLockFactoryLockExists() throws IOException {\n      Path tempDir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n      Path lockFile = tempDir.resolve(\"test.lock\");\n      Files.createFile(lockFile);\n      \n      Lock l = new NativeFSLockFactory(tempDir).makeLock(\"test.lock\");\n      assertTrue(\"failed to obtain lock\", l.obtain());\n      l.close();\n      assertFalse(\"failed to release lock\", l.isLocked());\n      Files.deleteIfExists(lockFile);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"618635065f043788c9e034f96ca5cd5cea1b4592","date":1433442044,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactoryLockExists().mjava","sourceNew":null,"sourceOld":"    // Verify: NativeFSLockFactory works correctly if the lock file exists\n    public void testNativeFSLockFactoryLockExists() throws IOException {\n      Path tempDir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n      Path lockFile = tempDir.resolve(\"test.lock\");\n      Files.createFile(lockFile);\n      \n      Directory dir = FSDirectory.open(tempDir, NativeFSLockFactory.INSTANCE);\n      Lock l = dir.makeLock(\"test.lock\");\n      assertTrue(\"failed to obtain lock\", l.obtain());\n      l.close();\n      assertFalse(\"failed to release lock\", l.isLocked());\n      Files.deleteIfExists(lockFile);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["0fcdcf196523675146a4df3193e91413533857ab","a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"285cdc737de75b7cc7c284a156b20214deb67bca":["f4abec28b874149a7223e32cc7a01704c27790de"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f4abec28b874149a7223e32cc7a01704c27790de":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"d0d579490a72f2e6297eaa648940611234c57cf1":["0fcdcf196523675146a4df3193e91413533857ab"],"618635065f043788c9e034f96ca5cd5cea1b4592":["285cdc737de75b7cc7c284a156b20214deb67bca"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["d0d579490a72f2e6297eaa648940611234c57cf1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0fcdcf196523675146a4df3193e91413533857ab":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["618635065f043788c9e034f96ca5cd5cea1b4592"]},"commit2Childs":{"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["19275ba31e621f6da1b83bf13af75233876fd3d4","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"285cdc737de75b7cc7c284a156b20214deb67bca":["618635065f043788c9e034f96ca5cd5cea1b4592"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["0fcdcf196523675146a4df3193e91413533857ab"],"f4abec28b874149a7223e32cc7a01704c27790de":["285cdc737de75b7cc7c284a156b20214deb67bca"],"d0d579490a72f2e6297eaa648940611234c57cf1":["a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"618635065f043788c9e034f96ca5cd5cea1b4592":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["f4abec28b874149a7223e32cc7a01704c27790de"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"0fcdcf196523675146a4df3193e91413533857ab":["2a0f5bb79c600763ffe7b8141df59a3169d31e48","d0d579490a72f2e6297eaa648940611234c57cf1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}