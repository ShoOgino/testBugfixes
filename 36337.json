{"path":"src/test/org/apache/solr/handler/TestReplicationHandler#testIndexAndConfigAliasReplication().mjava","commits":[{"id":"9be231d18ef58129524215a1d30331523320b744","date":1229505566,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/TestReplicationHandler#testIndexAndConfigAliasReplication().mjava","pathOld":"/dev/null","sourceNew":"  public void testIndexAndConfigAliasReplication() throws Exception {\n\n    //add 500 docs to master\n    for (int i = 0; i < 500; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = query(\"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(500, masterQueryResult.getNumFound());\n\n    //sleep for pollinterval time 3s, to let slave pull data.\n    Thread.sleep(3000);\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = query(\"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(500, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    //start config files replication test\n    //clear master index\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change solrconfig on master\n    copyFile(new File(\".\" + File.separator +\n            \"solr\" + File.separator +\n            \"conf\" + File.separator + \"solrconfig-master1.xml\"),\n            new File(master.getConfDir(), \"solrconfig.xml\"));\n\n    //change schema on master\n    copyFile(new File(\".\" + File.separator +\n            \"solr\" + File.separator +\n            \"conf\" + File.separator + \"schema-replication2.xml\"),\n            new File(master.getConfDir(), \"schema.xml\"));\n\n    //keep a copy of the new schema\n    copyFile(new File(\".\" + File.separator +\n            \"solr\" + File.separator +\n            \"conf\" + File.separator + \"schema-replication2.xml\"),\n            new File(master.getConfDir(), \"schema-replication2.xml\"));\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master, 9999);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    //add a doc with new field and commit on master to trigger snappull from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    //sleep for 3s for replication to happen.\n    Thread.sleep(3000);\n\n    index(slaveClient, \"id\", \"2000\", \"name\", \"name = \" + 2001, \"newname\", \"newname = \" + 2001);\n    slaveClient.commit();\n\n    slaveQueryRsp = query(\"*:*\", slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2001\", (String) d.getFieldValue(\"newname\"));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["379ec215b82e132c6741b5211d9cd8cfc30aa02a","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"efab8c7286516f937e01cc69275841cfb09d90b9","date":1233948104,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/TestReplicationHandler#testIndexAndConfigAliasReplication().mjava","pathOld":"src/test/org/apache/solr/handler/TestReplicationHandler#testIndexAndConfigAliasReplication().mjava","sourceNew":"  public void testIndexAndConfigAliasReplication() throws Exception {\n\n    //add 500 docs to master\n    for (int i = 0; i < 500; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = query(\"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(500, masterQueryResult.getNumFound());\n\n    //sleep for pollinterval time 3s, to let slave pull data.\n    Thread.sleep(3000);\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = query(\"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(500, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    //start config files replication test\n    //clear master index\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change solrconfig on master\n    copyFile(new File(CONF_DIR + \"solrconfig-master1.xml\"), new File(master.getConfDir(), \"solrconfig.xml\"));\n\n    //change schema on master\n    copyFile(new File(CONF_DIR + \"schema-replication2.xml\"), new File(master.getConfDir(), \"schema.xml\"));\n\n    //keep a copy of the new schema\n    copyFile(new File(CONF_DIR + \"schema-replication2.xml\"), new File(master.getConfDir(), \"schema-replication2.xml\"));\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    copyFile(new File(SLAVE_CONFIG), new File(slave.getConfDir(), \"solrconfig.xml\"), masterJetty.getLocalPort());\n\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //add a doc with new field and commit on master to trigger snappull from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    //sleep for 3s for replication to happen.\n    Thread.sleep(3000);\n\n    index(slaveClient, \"id\", \"2000\", \"name\", \"name = \" + 2001, \"newname\", \"newname = \" + 2001);\n    slaveClient.commit();\n\n    slaveQueryRsp = query(\"*:*\", slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2001\", (String) d.getFieldValue(\"newname\"));\n\n  }\n\n","sourceOld":"  public void testIndexAndConfigAliasReplication() throws Exception {\n\n    //add 500 docs to master\n    for (int i = 0; i < 500; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = query(\"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(500, masterQueryResult.getNumFound());\n\n    //sleep for pollinterval time 3s, to let slave pull data.\n    Thread.sleep(3000);\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = query(\"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(500, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    //start config files replication test\n    //clear master index\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change solrconfig on master\n    copyFile(new File(\".\" + File.separator +\n            \"solr\" + File.separator +\n            \"conf\" + File.separator + \"solrconfig-master1.xml\"),\n            new File(master.getConfDir(), \"solrconfig.xml\"));\n\n    //change schema on master\n    copyFile(new File(\".\" + File.separator +\n            \"solr\" + File.separator +\n            \"conf\" + File.separator + \"schema-replication2.xml\"),\n            new File(master.getConfDir(), \"schema.xml\"));\n\n    //keep a copy of the new schema\n    copyFile(new File(\".\" + File.separator +\n            \"solr\" + File.separator +\n            \"conf\" + File.separator + \"schema-replication2.xml\"),\n            new File(master.getConfDir(), \"schema-replication2.xml\"));\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master, 9999);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    //add a doc with new field and commit on master to trigger snappull from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    //sleep for 3s for replication to happen.\n    Thread.sleep(3000);\n\n    index(slaveClient, \"id\", \"2000\", \"name\", \"name = \" + 2001, \"newname\", \"newname = \" + 2001);\n    slaveClient.commit();\n\n    slaveQueryRsp = query(\"*:*\", slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2001\", (String) d.getFieldValue(\"newname\"));\n\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"64f429291bbfbef035d02f443700f87ae462f236","date":1240850048,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/TestReplicationHandler#testIndexAndConfigAliasReplication().mjava","pathOld":"src/test/org/apache/solr/handler/TestReplicationHandler#testIndexAndConfigAliasReplication().mjava","sourceNew":"  public void testIndexAndConfigAliasReplication() throws Exception {\n\n    //add 500 docs to master\n    for (int i = 0; i < 500; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = query(\"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(500, masterQueryResult.getNumFound());\n\n    //sleep for pollinterval time 3s, to let slave pull data.\n    Thread.sleep(3000);\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = query(\"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    \n    if(slaveQueryResult.getNumFound() == 0) {\n      //try sleeping again in case of slower comp\n      Thread.sleep(5000);\n      \n       slaveQueryRsp = query(\"*:*\", slaveClient);\n       slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    }\n    \n    assertEquals(500, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    //start config files replication test\n    //clear master index\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change solrconfig on master\n    copyFile(new File(CONF_DIR + \"solrconfig-master1.xml\"), new File(master.getConfDir(), \"solrconfig.xml\"));\n\n    //change schema on master\n    copyFile(new File(CONF_DIR + \"schema-replication2.xml\"), new File(master.getConfDir(), \"schema.xml\"));\n\n    //keep a copy of the new schema\n    copyFile(new File(CONF_DIR + \"schema-replication2.xml\"), new File(master.getConfDir(), \"schema-replication2.xml\"));\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    copyFile(new File(SLAVE_CONFIG), new File(slave.getConfDir(), \"solrconfig.xml\"), masterJetty.getLocalPort());\n\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //add a doc with new field and commit on master to trigger snappull from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    //sleep for 3s for replication to happen.\n    Thread.sleep(3000);\n\n    index(slaveClient, \"id\", \"2000\", \"name\", \"name = \" + 2001, \"newname\", \"newname = \" + 2001);\n    slaveClient.commit();\n\n    slaveQueryRsp = query(\"*:*\", slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2001\", (String) d.getFieldValue(\"newname\"));\n\n  }\n\n","sourceOld":"  public void testIndexAndConfigAliasReplication() throws Exception {\n\n    //add 500 docs to master\n    for (int i = 0; i < 500; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = query(\"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(500, masterQueryResult.getNumFound());\n\n    //sleep for pollinterval time 3s, to let slave pull data.\n    Thread.sleep(3000);\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = query(\"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(500, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    //start config files replication test\n    //clear master index\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change solrconfig on master\n    copyFile(new File(CONF_DIR + \"solrconfig-master1.xml\"), new File(master.getConfDir(), \"solrconfig.xml\"));\n\n    //change schema on master\n    copyFile(new File(CONF_DIR + \"schema-replication2.xml\"), new File(master.getConfDir(), \"schema.xml\"));\n\n    //keep a copy of the new schema\n    copyFile(new File(CONF_DIR + \"schema-replication2.xml\"), new File(master.getConfDir(), \"schema-replication2.xml\"));\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    copyFile(new File(SLAVE_CONFIG), new File(slave.getConfDir(), \"solrconfig.xml\"), masterJetty.getLocalPort());\n\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //add a doc with new field and commit on master to trigger snappull from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    //sleep for 3s for replication to happen.\n    Thread.sleep(3000);\n\n    index(slaveClient, \"id\", \"2000\", \"name\", \"name = \" + 2001, \"newname\", \"newname = \" + 2001);\n    slaveClient.commit();\n\n    slaveQueryRsp = query(\"*:*\", slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2001\", (String) d.getFieldValue(\"newname\"));\n\n  }\n\n","bugFix":null,"bugIntro":["68a5c887424a2c6209bb3e87715125a2d398f6b9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"68a5c887424a2c6209bb3e87715125a2d398f6b9","date":1247133435,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/TestReplicationHandler#testIndexAndConfigAliasReplication().mjava","pathOld":"src/test/org/apache/solr/handler/TestReplicationHandler#testIndexAndConfigAliasReplication().mjava","sourceNew":"  public void testIndexAndConfigAliasReplication() throws Exception {\n\n    //add 500 docs to master\n    for (int i = 0; i < 500; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = query(\"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(500, masterQueryResult.getNumFound());\n\n    //sleep for pollinterval time 3s, to let slave pull data.\n    Thread.sleep(3000);\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = query(\"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n\n    if (slaveQueryResult.getNumFound() == 0) {\n      //try sleeping again in case of slower comp\n      Thread.sleep(5000);\n\n      slaveQueryRsp = query(\"*:*\", slaveClient);\n      slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    }\n\n    assertEquals(500, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    //start config files replication test\n    //clear master index\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change solrconfig on master\n    copyFile(new File(CONF_DIR + \"solrconfig-master1.xml\"), new File(master.getConfDir(), \"solrconfig.xml\"));\n\n    //change schema on master\n    copyFile(new File(CONF_DIR + \"schema-replication2.xml\"), new File(master.getConfDir(), \"schema.xml\"));\n\n    //keep a copy of the new schema\n    copyFile(new File(CONF_DIR + \"schema-replication2.xml\"), new File(master.getConfDir(), \"schema-replication2.xml\"));\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    copyFile(new File(SLAVE_CONFIG), new File(slave.getConfDir(), \"solrconfig.xml\"), masterJetty.getLocalPort());\n\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //add a doc with new field and commit on master to trigger snappull from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    //sleep for 3s for replication to happen.\n    Thread.sleep(3000);\n\n    index(slaveClient, \"id\", \"2000\", \"name\", \"name = \" + 2001, \"newname\", \"newname = \" + 2001);\n    slaveClient.commit();\n\n    slaveQueryRsp = query(\"*:*\", slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2001\", (String) d.getFieldValue(\"newname\"));\n\n  }\n\n","sourceOld":"  public void testIndexAndConfigAliasReplication() throws Exception {\n\n    //add 500 docs to master\n    for (int i = 0; i < 500; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = query(\"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(500, masterQueryResult.getNumFound());\n\n    //sleep for pollinterval time 3s, to let slave pull data.\n    Thread.sleep(3000);\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = query(\"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    \n    if(slaveQueryResult.getNumFound() == 0) {\n      //try sleeping again in case of slower comp\n      Thread.sleep(5000);\n      \n       slaveQueryRsp = query(\"*:*\", slaveClient);\n       slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    }\n    \n    assertEquals(500, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    //start config files replication test\n    //clear master index\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change solrconfig on master\n    copyFile(new File(CONF_DIR + \"solrconfig-master1.xml\"), new File(master.getConfDir(), \"solrconfig.xml\"));\n\n    //change schema on master\n    copyFile(new File(CONF_DIR + \"schema-replication2.xml\"), new File(master.getConfDir(), \"schema.xml\"));\n\n    //keep a copy of the new schema\n    copyFile(new File(CONF_DIR + \"schema-replication2.xml\"), new File(master.getConfDir(), \"schema-replication2.xml\"));\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    copyFile(new File(SLAVE_CONFIG), new File(slave.getConfDir(), \"solrconfig.xml\"), masterJetty.getLocalPort());\n\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //add a doc with new field and commit on master to trigger snappull from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    //sleep for 3s for replication to happen.\n    Thread.sleep(3000);\n\n    index(slaveClient, \"id\", \"2000\", \"name\", \"name = \" + 2001, \"newname\", \"newname = \" + 2001);\n    slaveClient.commit();\n\n    slaveQueryRsp = query(\"*:*\", slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2001\", (String) d.getFieldValue(\"newname\"));\n\n  }\n\n","bugFix":["64f429291bbfbef035d02f443700f87ae462f236"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testIndexAndConfigAliasReplication().mjava","pathOld":"src/test/org/apache/solr/handler/TestReplicationHandler#testIndexAndConfigAliasReplication().mjava","sourceNew":"  public void testIndexAndConfigAliasReplication() throws Exception {\n\n    //add 500 docs to master\n    for (int i = 0; i < 500; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = query(\"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(500, masterQueryResult.getNumFound());\n\n    //sleep for pollinterval time 3s, to let slave pull data.\n    Thread.sleep(3000);\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = query(\"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n\n    if (slaveQueryResult.getNumFound() == 0) {\n      //try sleeping again in case of slower comp\n      Thread.sleep(5000);\n\n      slaveQueryRsp = query(\"*:*\", slaveClient);\n      slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    }\n\n    assertEquals(500, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    //start config files replication test\n    //clear master index\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change solrconfig on master\n    copyFile(new File(CONF_DIR + \"solrconfig-master1.xml\"), new File(master.getConfDir(), \"solrconfig.xml\"));\n\n    //change schema on master\n    copyFile(new File(CONF_DIR + \"schema-replication2.xml\"), new File(master.getConfDir(), \"schema.xml\"));\n\n    //keep a copy of the new schema\n    copyFile(new File(CONF_DIR + \"schema-replication2.xml\"), new File(master.getConfDir(), \"schema-replication2.xml\"));\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    copyFile(new File(SLAVE_CONFIG), new File(slave.getConfDir(), \"solrconfig.xml\"), masterJetty.getLocalPort());\n\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //add a doc with new field and commit on master to trigger snappull from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    //sleep for 3s for replication to happen.\n    Thread.sleep(3000);\n\n    index(slaveClient, \"id\", \"2000\", \"name\", \"name = \" + 2001, \"newname\", \"newname = \" + 2001);\n    slaveClient.commit();\n\n    slaveQueryRsp = query(\"*:*\", slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2001\", (String) d.getFieldValue(\"newname\"));\n\n  }\n\n","sourceOld":"  public void testIndexAndConfigAliasReplication() throws Exception {\n\n    //add 500 docs to master\n    for (int i = 0; i < 500; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = query(\"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(500, masterQueryResult.getNumFound());\n\n    //sleep for pollinterval time 3s, to let slave pull data.\n    Thread.sleep(3000);\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = query(\"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n\n    if (slaveQueryResult.getNumFound() == 0) {\n      //try sleeping again in case of slower comp\n      Thread.sleep(5000);\n\n      slaveQueryRsp = query(\"*:*\", slaveClient);\n      slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    }\n\n    assertEquals(500, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    //start config files replication test\n    //clear master index\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change solrconfig on master\n    copyFile(new File(CONF_DIR + \"solrconfig-master1.xml\"), new File(master.getConfDir(), \"solrconfig.xml\"));\n\n    //change schema on master\n    copyFile(new File(CONF_DIR + \"schema-replication2.xml\"), new File(master.getConfDir(), \"schema.xml\"));\n\n    //keep a copy of the new schema\n    copyFile(new File(CONF_DIR + \"schema-replication2.xml\"), new File(master.getConfDir(), \"schema-replication2.xml\"));\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    copyFile(new File(SLAVE_CONFIG), new File(slave.getConfDir(), \"solrconfig.xml\"), masterJetty.getLocalPort());\n\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //add a doc with new field and commit on master to trigger snappull from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    //sleep for 3s for replication to happen.\n    Thread.sleep(3000);\n\n    index(slaveClient, \"id\", \"2000\", \"name\", \"name = \" + 2001, \"newname\", \"newname = \" + 2001);\n    slaveClient.commit();\n\n    slaveQueryRsp = query(\"*:*\", slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2001\", (String) d.getFieldValue(\"newname\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"64f429291bbfbef035d02f443700f87ae462f236":["efab8c7286516f937e01cc69275841cfb09d90b9"],"9be231d18ef58129524215a1d30331523320b744":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"68a5c887424a2c6209bb3e87715125a2d398f6b9":["64f429291bbfbef035d02f443700f87ae462f236"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["68a5c887424a2c6209bb3e87715125a2d398f6b9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"efab8c7286516f937e01cc69275841cfb09d90b9":["9be231d18ef58129524215a1d30331523320b744"]},"commit2Childs":{"64f429291bbfbef035d02f443700f87ae462f236":["68a5c887424a2c6209bb3e87715125a2d398f6b9"],"9be231d18ef58129524215a1d30331523320b744":["efab8c7286516f937e01cc69275841cfb09d90b9"],"68a5c887424a2c6209bb3e87715125a2d398f6b9":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["9be231d18ef58129524215a1d30331523320b744"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"efab8c7286516f937e01cc69275841cfb09d90b9":["64f429291bbfbef035d02f443700f87ae462f236"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}