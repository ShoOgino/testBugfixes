{"path":"solr/core/src/java/org/apache/solr/update/processor/RegexpBoostProcessor#processBoost(AddUpdateCommand).mjava","commits":[{"id":"acb8905efb68758118cfb4ff3c75d2169aa0182b","date":1359637120,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/RegexpBoostProcessor#processBoost(AddUpdateCommand).mjava","pathOld":"/dev/null","sourceNew":"  public void processBoost(AddUpdateCommand command) {\n    SolrInputDocument document = command.getSolrInputDocument();\n    if (document.containsKey(inputFieldname)) {\n      String value = (String) document.getFieldValue(inputFieldname);\n      double boost = 1.0f;\n      for (BoostEntry boostEntry : boostEntries) {\n        if (boostEntry.getPattern().matcher(value).matches()) {\n          if (log.isDebugEnabled()) {\n            log.debug(\"Pattern match \" + boostEntry.getPattern().pattern() + \" for \" + value);\n          }\n          boost = (boostEntry.getBoost() * 1000) * (boost * 1000) / 1000000;\n        }\n      }\n      document.setField(boostFieldname, boost);\n\n      if (log.isDebugEnabled()) {\n        log.debug(\"Value \" + boost + \", applied to field \" + boostFieldname);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0bf1d4eb51af6e03fffcbf80f0b5d69923c9f86","date":1359670147,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/RegexpBoostProcessor#processBoost(AddUpdateCommand).mjava","pathOld":"/dev/null","sourceNew":"  public void processBoost(AddUpdateCommand command) {\n    SolrInputDocument document = command.getSolrInputDocument();\n    if (document.containsKey(inputFieldname)) {\n      String value = (String) document.getFieldValue(inputFieldname);\n      double boost = 1.0f;\n      for (BoostEntry boostEntry : boostEntries) {\n        if (boostEntry.getPattern().matcher(value).matches()) {\n          if (log.isDebugEnabled()) {\n            log.debug(\"Pattern match \" + boostEntry.getPattern().pattern() + \" for \" + value);\n          }\n          boost = (boostEntry.getBoost() * 1000) * (boost * 1000) / 1000000;\n        }\n      }\n      document.setField(boostFieldname, boost);\n\n      if (log.isDebugEnabled()) {\n        log.debug(\"Value \" + boost + \", applied to field \" + boostFieldname);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/RegexpBoostProcessor#processBoost(AddUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/RegexpBoostProcessor#processBoost(AddUpdateCommand).mjava","sourceNew":"  public void processBoost(AddUpdateCommand command) {\n    SolrInputDocument document = command.getSolrInputDocument();\n    if (document.containsKey(inputFieldname)) {\n      String value = (String) document.getFieldValue(inputFieldname);\n      double boost = 1.0f;\n      for (BoostEntry boostEntry : boostEntries) {\n        if (boostEntry.getPattern().matcher(value).matches()) {\n          if (log.isDebugEnabled()) {\n            log.debug(\"Pattern match {} for {}\", boostEntry.getPattern().pattern(), value);\n          }\n          boost = (boostEntry.getBoost() * 1000) * (boost * 1000) / 1000000;\n        }\n      }\n      document.setField(boostFieldname, boost);\n\n      if (log.isDebugEnabled()) {\n        log.debug(\"Value {}, applied to field {}\", boost, boostFieldname);\n      }\n    }\n  }\n\n","sourceOld":"  public void processBoost(AddUpdateCommand command) {\n    SolrInputDocument document = command.getSolrInputDocument();\n    if (document.containsKey(inputFieldname)) {\n      String value = (String) document.getFieldValue(inputFieldname);\n      double boost = 1.0f;\n      for (BoostEntry boostEntry : boostEntries) {\n        if (boostEntry.getPattern().matcher(value).matches()) {\n          if (log.isDebugEnabled()) {\n            log.debug(\"Pattern match \" + boostEntry.getPattern().pattern() + \" for \" + value);\n          }\n          boost = (boostEntry.getBoost() * 1000) * (boost * 1000) / 1000000;\n        }\n      }\n      document.setField(boostFieldname, boost);\n\n      if (log.isDebugEnabled()) {\n        log.debug(\"Value \" + boost + \", applied to field \" + boostFieldname);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b0bf1d4eb51af6e03fffcbf80f0b5d69923c9f86":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","acb8905efb68758118cfb4ff3c75d2169aa0182b"],"acb8905efb68758118cfb4ff3c75d2169aa0182b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"575e66bd4b2349209027f6801184da7fc3cba13f":["acb8905efb68758118cfb4ff3c75d2169aa0182b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575e66bd4b2349209027f6801184da7fc3cba13f"]},"commit2Childs":{"b0bf1d4eb51af6e03fffcbf80f0b5d69923c9f86":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b0bf1d4eb51af6e03fffcbf80f0b5d69923c9f86","acb8905efb68758118cfb4ff3c75d2169aa0182b"],"acb8905efb68758118cfb4ff3c75d2169aa0182b":["b0bf1d4eb51af6e03fffcbf80f0b5d69923c9f86","575e66bd4b2349209027f6801184da7fc3cba13f"],"575e66bd4b2349209027f6801184da7fc3cba13f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b0bf1d4eb51af6e03fffcbf80f0b5d69923c9f86","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}