{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextPostingsEnum#nextDoc().mjava","commits":[{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextPostingsEnum#nextDoc().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsAndPositionsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      boolean first = true;\n      in.seek(nextDocStart);\n      long posStart = 0;\n      while(true) {\n        final long lineStart = in.getFilePointer();\n        SimpleTextUtil.readLine(in, scratch);\n        //System.out.println(\"NEXT DOC: \" + scratch.utf8ToString());\n        if (StringHelper.startsWith(scratch.get(), DOC)) {\n          if (!first && (liveDocs == null || liveDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          scratchUTF16.copyUTF8Bytes(scratch.bytes(), DOC.length, scratch.length()-DOC.length);\n          docID = ArrayUtil.parseInt(scratchUTF16.chars(), 0, scratchUTF16.length());\n          tf = 0;\n          first = false;\n        } else if (StringHelper.startsWith(scratch.get(), FREQ)) {\n          scratchUTF16.copyUTF8Bytes(scratch.bytes(), FREQ.length, scratch.length()-FREQ.length);\n          tf = ArrayUtil.parseInt(scratchUTF16.chars(), 0, scratchUTF16.length());\n          posStart = in.getFilePointer();\n        } else if (StringHelper.startsWith(scratch.get(), POS)) {\n          // skip\n        } else if (StringHelper.startsWith(scratch.get(), START_OFFSET)) {\n          // skip\n        } else if (StringHelper.startsWith(scratch.get(), END_OFFSET)) {\n          // skip\n        } else if (StringHelper.startsWith(scratch.get(), PAYLOAD)) {\n          // skip\n        } else {\n          assert StringHelper.startsWith(scratch.get(), TERM) || StringHelper.startsWith(scratch.get(), FIELD) || StringHelper.startsWith(scratch.get(), END);\n          if (!first && (liveDocs == null || liveDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          return docID = NO_MORE_DOCS;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      boolean first = true;\n      in.seek(nextDocStart);\n      long posStart = 0;\n      while(true) {\n        final long lineStart = in.getFilePointer();\n        SimpleTextUtil.readLine(in, scratch);\n        //System.out.println(\"NEXT DOC: \" + scratch.utf8ToString());\n        if (StringHelper.startsWith(scratch.get(), DOC)) {\n          if (!first && (liveDocs == null || liveDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          scratchUTF16.copyUTF8Bytes(scratch.bytes(), DOC.length, scratch.length()-DOC.length);\n          docID = ArrayUtil.parseInt(scratchUTF16.chars(), 0, scratchUTF16.length());\n          tf = 0;\n          first = false;\n        } else if (StringHelper.startsWith(scratch.get(), FREQ)) {\n          scratchUTF16.copyUTF8Bytes(scratch.bytes(), FREQ.length, scratch.length()-FREQ.length);\n          tf = ArrayUtil.parseInt(scratchUTF16.chars(), 0, scratchUTF16.length());\n          posStart = in.getFilePointer();\n        } else if (StringHelper.startsWith(scratch.get(), POS)) {\n          // skip\n        } else if (StringHelper.startsWith(scratch.get(), START_OFFSET)) {\n          // skip\n        } else if (StringHelper.startsWith(scratch.get(), END_OFFSET)) {\n          // skip\n        } else if (StringHelper.startsWith(scratch.get(), PAYLOAD)) {\n          // skip\n        } else {\n          assert StringHelper.startsWith(scratch.get(), TERM) || StringHelper.startsWith(scratch.get(), FIELD) || StringHelper.startsWith(scratch.get(), END);\n          if (!first && (liveDocs == null || liveDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          return docID = NO_MORE_DOCS;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextPostingsEnum#nextDoc().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextPostingsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      boolean first = true;\n      in.seek(nextDocStart);\n      long posStart = 0;\n      while(true) {\n        final long lineStart = in.getFilePointer();\n        SimpleTextUtil.readLine(in, scratch);\n        //System.out.println(\"NEXT DOC: \" + scratch.utf8ToString());\n        if (StringHelper.startsWith(scratch.get(), DOC)) {\n          if (!first) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          scratchUTF16.copyUTF8Bytes(scratch.bytes(), DOC.length, scratch.length()-DOC.length);\n          docID = ArrayUtil.parseInt(scratchUTF16.chars(), 0, scratchUTF16.length());\n          tf = 0;\n          first = false;\n        } else if (StringHelper.startsWith(scratch.get(), FREQ)) {\n          scratchUTF16.copyUTF8Bytes(scratch.bytes(), FREQ.length, scratch.length()-FREQ.length);\n          tf = ArrayUtil.parseInt(scratchUTF16.chars(), 0, scratchUTF16.length());\n          posStart = in.getFilePointer();\n        } else if (StringHelper.startsWith(scratch.get(), POS)) {\n          // skip\n        } else if (StringHelper.startsWith(scratch.get(), START_OFFSET)) {\n          // skip\n        } else if (StringHelper.startsWith(scratch.get(), END_OFFSET)) {\n          // skip\n        } else if (StringHelper.startsWith(scratch.get(), PAYLOAD)) {\n          // skip\n        } else {\n          assert StringHelper.startsWith(scratch.get(), TERM) || StringHelper.startsWith(scratch.get(), FIELD) || StringHelper.startsWith(scratch.get(), END);\n          if (!first) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          return docID = NO_MORE_DOCS;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      boolean first = true;\n      in.seek(nextDocStart);\n      long posStart = 0;\n      while(true) {\n        final long lineStart = in.getFilePointer();\n        SimpleTextUtil.readLine(in, scratch);\n        //System.out.println(\"NEXT DOC: \" + scratch.utf8ToString());\n        if (StringHelper.startsWith(scratch.get(), DOC)) {\n          if (!first && (liveDocs == null || liveDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          scratchUTF16.copyUTF8Bytes(scratch.bytes(), DOC.length, scratch.length()-DOC.length);\n          docID = ArrayUtil.parseInt(scratchUTF16.chars(), 0, scratchUTF16.length());\n          tf = 0;\n          first = false;\n        } else if (StringHelper.startsWith(scratch.get(), FREQ)) {\n          scratchUTF16.copyUTF8Bytes(scratch.bytes(), FREQ.length, scratch.length()-FREQ.length);\n          tf = ArrayUtil.parseInt(scratchUTF16.chars(), 0, scratchUTF16.length());\n          posStart = in.getFilePointer();\n        } else if (StringHelper.startsWith(scratch.get(), POS)) {\n          // skip\n        } else if (StringHelper.startsWith(scratch.get(), START_OFFSET)) {\n          // skip\n        } else if (StringHelper.startsWith(scratch.get(), END_OFFSET)) {\n          // skip\n        } else if (StringHelper.startsWith(scratch.get(), PAYLOAD)) {\n          // skip\n        } else {\n          assert StringHelper.startsWith(scratch.get(), TERM) || StringHelper.startsWith(scratch.get(), FIELD) || StringHelper.startsWith(scratch.get(), END);\n          if (!first && (liveDocs == null || liveDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          return docID = NO_MORE_DOCS;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["51f5280f31484820499077f41fcdfe92d527d9dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"51f5280f31484820499077f41fcdfe92d527d9dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4464508ee83288c8c4585b533f9faaa93aa314"]},"commit2Childs":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["51f5280f31484820499077f41fcdfe92d527d9dc"],"51f5280f31484820499077f41fcdfe92d527d9dc":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}