{"path":"lucene/core/src/java/org/apache/lucene/util/compress/LowercaseAsciiCompression#compress(byte[],int,byte[],DataOutput).mjava","commits":[{"id":"9407318969e8504257b4c5764c65755a043e5404","date":1579873617,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/compress/LowercaseAsciiCompression#compress(byte[],int,byte[],DataOutput).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Compress {@code in[0:len]} into {@code out}.\n   * This returns {@code false} if the content cannot be compressed. The number\n   * of bytes written is guaranteed to be less than {@code len} otherwise.\n   */\n  public static boolean compress(byte[] in, int len, byte[] tmp, DataOutput out) throws IOException {\n    if (len < 8) {\n      return false;\n    }\n\n    // 1. Count exceptions and fail compression if there are too many of them.\n    final int maxExceptions = len >>> 5;\n    int previousExceptionIndex = 0;\n    int numExceptions = 0;\n    for (int i = 0; i < len; ++i) {\n      final int b = in[i] & 0xFF;\n      if (isCompressible(b) == false) {\n        while (i - previousExceptionIndex > 0xFF) {\n          ++numExceptions;\n          previousExceptionIndex += 0xFF;\n        }\n        if (++numExceptions > maxExceptions) {\n          return false;\n        }\n        previousExceptionIndex = i;\n      }\n    }\n    assert numExceptions <= maxExceptions;\n\n    // 2. Now move all bytes to the [0,0x40) range (6 bits). This loop gets auto-vectorized on JDK13+.\n    final int compressedLen = len - (len >>> 2); // ignores exceptions\n    assert compressedLen < len;\n    for (int i = 0; i < len; ++i) {\n      int b = (in[i] & 0xFF) + 1;\n      tmp[i] = (byte) ((b & 0x1F) | ((b & 0x40) >>> 1));\n    }\n\n    // 3. Now pack the bytes so that we record 4 ASCII chars in 3 bytes\n    int o = 0;\n    for (int i = compressedLen; i < len; ++i) {\n      tmp[o++] |= (tmp[i] & 0x30) << 2; // bits 4-5\n    }\n    for (int i = compressedLen; i < len; ++i) {\n      tmp[o++] |= (tmp[i] & 0x0C) << 4; // bits 2-3\n    }\n    for (int i = compressedLen; i < len; ++i) {\n      tmp[o++] |= (tmp[i] & 0x03) << 6; // bits 0-1\n    }\n    assert o <= compressedLen;\n\n    out.writeBytes(tmp, 0, compressedLen);\n\n    // 4. Finally record exceptions\n    out.writeVInt(numExceptions);\n    if (numExceptions > 0) {\n      previousExceptionIndex = 0;\n      int numExceptions2 = 0;\n      for (int i = 0; i < len; ++i) {\n        int b = in[i] & 0xFF;\n        if (isCompressible(b) == false) {\n          while (i - previousExceptionIndex > 0xFF) {\n            // We record deltas between exceptions as bytes, so we need to create\n            // \"artificial\" exceptions if the delta between two of them is greater\n            // than the maximum unsigned byte value.\n            out.writeByte((byte) 0xFF);\n            previousExceptionIndex += 0xFF;\n            out.writeByte(in[previousExceptionIndex]);\n            numExceptions2++;\n          }\n          out.writeByte((byte) (i - previousExceptionIndex));\n          previousExceptionIndex = i;\n          out.writeByte((byte) b);\n          numExceptions2++;\n        }\n      }\n      if (numExceptions != numExceptions2) {\n        throw new IllegalStateException(\"\" + numExceptions + \" <> \" + numExceptions2 + \" \" + new BytesRef(in, 0, len).utf8ToString());\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9407318969e8504257b4c5764c65755a043e5404":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9407318969e8504257b4c5764c65755a043e5404"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9407318969e8504257b4c5764c65755a043e5404"],"9407318969e8504257b4c5764c65755a043e5404":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}