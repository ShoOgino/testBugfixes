{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#getBinary(FieldInfo).mjava","commits":[{"id":"a4d374b2bebd0d52acaa61038fbf23068620fba7","date":1353240004,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#getBinary(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#getDirectBinary(FieldInfo).mjava","sourceNew":"    @Override\n    public BinaryDocValues getBinary(FieldInfo fieldInfo) throws IOException {\n      final OneField field = fields.get(fieldInfo.name);\n\n      // SegmentCoreReaders already verifies this field is\n      // valid:\n      assert field != null;\n\n      final IndexInput in = data.clone();\n      final BytesRef scratch = new BytesRef();\n      final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          try {\n            // nocommit bounds check docID?  spooky\n            // because if we don't you can maybe get\n            // value from the wrong field ...\n            in.seek(field.dataStartFilePointer + (9+field.pattern.length() + field.maxLength)*docID);\n            SimpleTextUtil.readLine(in, scratch);\n            assert StringHelper.startsWith(scratch, LENGTH);\n            int len;\n            try {\n              len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, \"UTF-8\")).intValue();\n            } catch (ParseException pe) {\n              // nocommit add message\n              CorruptIndexException e = new CorruptIndexException(\"failed to parse int length\");\n              e.initCause(pe);\n              throw e;\n            }\n            result.bytes = new byte[len];\n            result.offset = 0;\n            result.length = len;\n            in.readBytes(result.bytes, 0, len);\n          } catch (IOException ioe) {\n            // nocommit should .get() just throw IOE...\n            throw new RuntimeException(ioe);\n          }\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public BinaryDocValues getDirectBinary(FieldInfo fieldInfo) throws IOException {\n      final OneField field = fields.get(fieldInfo.name);\n\n      // SegmentCoreReaders already verifies this field is\n      // valid:\n      assert field != null;\n\n      final IndexInput in = data.clone();\n      final BytesRef scratch = new BytesRef();\n      final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          try {\n            // nocommit bounds check docID?  spooky\n            // because if we don't you can maybe get\n            // value from the wrong field ...\n            in.seek(field.dataStartFilePointer + (9+field.pattern.length() + field.maxLength)*docID);\n            SimpleTextUtil.readLine(in, scratch);\n            assert StringHelper.startsWith(scratch, LENGTH);\n            int len;\n            try {\n              len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, \"UTF-8\")).intValue();\n            } catch (ParseException pe) {\n              // nocommit add message\n              CorruptIndexException e = new CorruptIndexException(\"failed to parse int length\");\n              e.initCause(pe);\n              throw e;\n            }\n            result.bytes = new byte[len];\n            result.offset = 0;\n            result.length = len;\n            in.readBytes(result.bytes, 0, len);\n          } catch (IOException ioe) {\n            // nocommit should .get() just throw IOE...\n            throw new RuntimeException(ioe);\n          }\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e05b279040cd7b938223b77c3772786678160cf6","date":1353297629,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#getBinary(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#getBinary(FieldInfo).mjava","sourceNew":"    @Override\n    public BinaryDocValues getBinary(FieldInfo fieldInfo) throws IOException {\n      final OneField field = fields.get(fieldInfo.name);\n\n      // SegmentCoreReaders already verifies this field is\n      // valid:\n      assert field != null;\n\n      final IndexInput in = data.clone();\n      final BytesRef scratch = new BytesRef();\n      final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          try {\n            // nocommit bounds check docID?  spooky\n            // because if we don't you can maybe get\n            // value from the wrong field ...\n            in.seek(field.dataStartFilePointer + (9+field.pattern.length() + field.maxLength)*docID);\n            SimpleTextUtil.readLine(in, scratch);\n            assert StringHelper.startsWith(scratch, LENGTH);\n            int len;\n            try {\n              len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, \"UTF-8\")).intValue();\n            } catch (ParseException pe) {\n              // nocommit add message\n              CorruptIndexException e = new CorruptIndexException(\"failed to parse int length\");\n              e.initCause(pe);\n              throw e;\n            }\n            result.bytes = new byte[len];\n            result.offset = 0;\n            result.length = len;\n            in.readBytes(result.bytes, 0, len);\n          } catch (IOException ioe) {\n            // nocommit should .get() just throw IOE...\n            throw new RuntimeException(ioe);\n          }\n        }\n\n        @Override\n        public int size() {\n          return maxDoc;\n        }\n\n        @Override\n        public boolean isFixedLength() {\n          return field.fixedLength;\n        }\n\n        @Override\n        public int maxLength() {\n          return field.maxLength;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public BinaryDocValues getBinary(FieldInfo fieldInfo) throws IOException {\n      final OneField field = fields.get(fieldInfo.name);\n\n      // SegmentCoreReaders already verifies this field is\n      // valid:\n      assert field != null;\n\n      final IndexInput in = data.clone();\n      final BytesRef scratch = new BytesRef();\n      final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          try {\n            // nocommit bounds check docID?  spooky\n            // because if we don't you can maybe get\n            // value from the wrong field ...\n            in.seek(field.dataStartFilePointer + (9+field.pattern.length() + field.maxLength)*docID);\n            SimpleTextUtil.readLine(in, scratch);\n            assert StringHelper.startsWith(scratch, LENGTH);\n            int len;\n            try {\n              len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, \"UTF-8\")).intValue();\n            } catch (ParseException pe) {\n              // nocommit add message\n              CorruptIndexException e = new CorruptIndexException(\"failed to parse int length\");\n              e.initCause(pe);\n              throw e;\n            }\n            result.bytes = new byte[len];\n            result.offset = 0;\n            result.length = len;\n            in.readBytes(result.bytes, 0, len);\n          } catch (IOException ioe) {\n            // nocommit should .get() just throw IOE...\n            throw new RuntimeException(ioe);\n          }\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7178a82d1134111f4511f28bb9ad57573a57d93","date":1354112608,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#getBinary(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#getBinary(FieldInfo).mjava","sourceNew":"    @Override\n    public BinaryDocValues getBinary(FieldInfo fieldInfo) throws IOException {\n      final OneField field = fields.get(fieldInfo.name);\n\n      // SegmentCoreReaders already verifies this field is\n      // valid:\n      assert field != null;\n\n      final IndexInput in = data.clone();\n      final BytesRef scratch = new BytesRef();\n      final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          try {\n            if (docID < 0 || docID >= maxDoc) {\n              throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n            }\n            in.seek(field.dataStartFilePointer + (9+field.pattern.length() + field.maxLength)*docID);\n            SimpleTextUtil.readLine(in, scratch);\n            assert StringHelper.startsWith(scratch, LENGTH);\n            int len;\n            try {\n              len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, \"UTF-8\")).intValue();\n            } catch (ParseException pe) {\n              CorruptIndexException e = new CorruptIndexException(\"failed to parse int length\");\n              e.initCause(pe);\n              throw e;\n            }\n            result.bytes = new byte[len];\n            result.offset = 0;\n            result.length = len;\n            in.readBytes(result.bytes, 0, len);\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n        }\n\n        @Override\n        public int size() {\n          return maxDoc;\n        }\n\n        @Override\n        public boolean isFixedLength() {\n          return field.fixedLength;\n        }\n\n        @Override\n        public int maxLength() {\n          return field.maxLength;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public BinaryDocValues getBinary(FieldInfo fieldInfo) throws IOException {\n      final OneField field = fields.get(fieldInfo.name);\n\n      // SegmentCoreReaders already verifies this field is\n      // valid:\n      assert field != null;\n\n      final IndexInput in = data.clone();\n      final BytesRef scratch = new BytesRef();\n      final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          try {\n            // nocommit bounds check docID?  spooky\n            // because if we don't you can maybe get\n            // value from the wrong field ...\n            in.seek(field.dataStartFilePointer + (9+field.pattern.length() + field.maxLength)*docID);\n            SimpleTextUtil.readLine(in, scratch);\n            assert StringHelper.startsWith(scratch, LENGTH);\n            int len;\n            try {\n              len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, \"UTF-8\")).intValue();\n            } catch (ParseException pe) {\n              // nocommit add message\n              CorruptIndexException e = new CorruptIndexException(\"failed to parse int length\");\n              e.initCause(pe);\n              throw e;\n            }\n            result.bytes = new byte[len];\n            result.offset = 0;\n            result.length = len;\n            in.readBytes(result.bytes, 0, len);\n          } catch (IOException ioe) {\n            // nocommit should .get() just throw IOE...\n            throw new RuntimeException(ioe);\n          }\n        }\n\n        @Override\n        public int size() {\n          return maxDoc;\n        }\n\n        @Override\n        public boolean isFixedLength() {\n          return field.fixedLength;\n        }\n\n        @Override\n        public int maxLength() {\n          return field.maxLength;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2899ae5069a2533466ac842042478e67263e1f43","date":1354624628,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#getBinary(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#getBinary(FieldInfo).mjava","sourceNew":"    @Override\n    public BinaryDocValues getBinary(FieldInfo fieldInfo) throws IOException {\n      final OneField field = fields.get(fieldInfo.name);\n\n      // SegmentCoreReaders already verifies this field is\n      // valid:\n      assert field != null;\n\n      final IndexInput in = data;\n      final BytesRef scratch = new BytesRef();\n      final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          try {\n            if (docID < 0 || docID >= maxDoc) {\n              throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n            }\n            in.seek(field.dataStartFilePointer + (9+field.pattern.length() + field.maxLength)*docID);\n            SimpleTextUtil.readLine(in, scratch);\n            assert StringHelper.startsWith(scratch, LENGTH);\n            int len;\n            try {\n              len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, \"UTF-8\")).intValue();\n            } catch (ParseException pe) {\n              CorruptIndexException e = new CorruptIndexException(\"failed to parse int length\");\n              e.initCause(pe);\n              throw e;\n            }\n            result.bytes = new byte[len];\n            result.offset = 0;\n            result.length = len;\n            in.readBytes(result.bytes, 0, len);\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n        }\n\n        @Override\n        public int size() {\n          return maxDoc;\n        }\n\n        @Override\n        public boolean isFixedLength() {\n          return field.fixedLength;\n        }\n\n        @Override\n        public int maxLength() {\n          return field.maxLength;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public BinaryDocValues getBinary(FieldInfo fieldInfo) throws IOException {\n      final OneField field = fields.get(fieldInfo.name);\n\n      // SegmentCoreReaders already verifies this field is\n      // valid:\n      assert field != null;\n\n      final IndexInput in = data.clone();\n      final BytesRef scratch = new BytesRef();\n      final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          try {\n            if (docID < 0 || docID >= maxDoc) {\n              throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n            }\n            in.seek(field.dataStartFilePointer + (9+field.pattern.length() + field.maxLength)*docID);\n            SimpleTextUtil.readLine(in, scratch);\n            assert StringHelper.startsWith(scratch, LENGTH);\n            int len;\n            try {\n              len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, \"UTF-8\")).intValue();\n            } catch (ParseException pe) {\n              CorruptIndexException e = new CorruptIndexException(\"failed to parse int length\");\n              e.initCause(pe);\n              throw e;\n            }\n            result.bytes = new byte[len];\n            result.offset = 0;\n            result.length = len;\n            in.readBytes(result.bytes, 0, len);\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n        }\n\n        @Override\n        public int size() {\n          return maxDoc;\n        }\n\n        @Override\n        public boolean isFixedLength() {\n          return field.fixedLength;\n        }\n\n        @Override\n        public int maxLength() {\n          return field.maxLength;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed00c8118962f490744732ab611c595c91b80d1c","date":1356020966,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#getBinary(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#getBinary(FieldInfo).mjava","sourceNew":"    @Override\n    public BinaryDocValues getBinary(FieldInfo fieldInfo) throws IOException {\n      final OneField field = fields.get(fieldInfo.name);\n\n      // SegmentCoreReaders already verifies this field is\n      // valid:\n      assert field != null;\n\n      final IndexInput in = data.clone();\n      final BytesRef scratch = new BytesRef();\n      final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          try {\n            if (docID < 0 || docID >= maxDoc) {\n              throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n            }\n            in.seek(field.dataStartFilePointer + (9+field.pattern.length() + field.maxLength)*docID);\n            SimpleTextUtil.readLine(in, scratch);\n            assert StringHelper.startsWith(scratch, LENGTH);\n            int len;\n            try {\n              len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, \"UTF-8\")).intValue();\n            } catch (ParseException pe) {\n              CorruptIndexException e = new CorruptIndexException(\"failed to parse int length\");\n              e.initCause(pe);\n              throw e;\n            }\n            result.bytes = new byte[len];\n            result.offset = 0;\n            result.length = len;\n            in.readBytes(result.bytes, 0, len);\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n        }\n\n        @Override\n        public int size() {\n          return maxDoc;\n        }\n\n        @Override\n        public boolean isFixedLength() {\n          return field.fixedLength;\n        }\n\n        @Override\n        public int maxLength() {\n          return field.maxLength;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public BinaryDocValues getBinary(FieldInfo fieldInfo) throws IOException {\n      final OneField field = fields.get(fieldInfo.name);\n\n      // SegmentCoreReaders already verifies this field is\n      // valid:\n      assert field != null;\n\n      final IndexInput in = data;\n      final BytesRef scratch = new BytesRef();\n      final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          try {\n            if (docID < 0 || docID >= maxDoc) {\n              throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n            }\n            in.seek(field.dataStartFilePointer + (9+field.pattern.length() + field.maxLength)*docID);\n            SimpleTextUtil.readLine(in, scratch);\n            assert StringHelper.startsWith(scratch, LENGTH);\n            int len;\n            try {\n              len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, \"UTF-8\")).intValue();\n            } catch (ParseException pe) {\n              CorruptIndexException e = new CorruptIndexException(\"failed to parse int length\");\n              e.initCause(pe);\n              throw e;\n            }\n            result.bytes = new byte[len];\n            result.offset = 0;\n            result.length = len;\n            in.readBytes(result.bytes, 0, len);\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n        }\n\n        @Override\n        public int size() {\n          return maxDoc;\n        }\n\n        @Override\n        public boolean isFixedLength() {\n          return field.fixedLength;\n        }\n\n        @Override\n        public int maxLength() {\n          return field.maxLength;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"746e3645169db50c8f53252b30d6bc9ac21dea7c","date":1357597773,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#getBinary(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#getBinary(FieldInfo).mjava","sourceNew":"    @Override\n    public BinaryDocValues getBinary(FieldInfo fieldInfo) throws IOException {\n      final OneField field = fields.get(fieldInfo.name);\n\n      // SegmentCoreReaders already verifies this field is\n      // valid:\n      assert field != null;\n\n      final IndexInput in = data.clone();\n      final BytesRef scratch = new BytesRef();\n      final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          try {\n            if (docID < 0 || docID >= maxDoc) {\n              throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n            }\n            in.seek(field.dataStartFilePointer + (9+field.pattern.length() + field.maxLength)*docID);\n            SimpleTextUtil.readLine(in, scratch);\n            assert StringHelper.startsWith(scratch, LENGTH);\n            int len;\n            try {\n              len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, \"UTF-8\")).intValue();\n            } catch (ParseException pe) {\n              CorruptIndexException e = new CorruptIndexException(\"failed to parse int length\");\n              e.initCause(pe);\n              throw e;\n            }\n            result.bytes = new byte[len];\n            result.offset = 0;\n            result.length = len;\n            in.readBytes(result.bytes, 0, len);\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n        }\n\n        @Override\n        public int size() {\n          return maxDoc;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public BinaryDocValues getBinary(FieldInfo fieldInfo) throws IOException {\n      final OneField field = fields.get(fieldInfo.name);\n\n      // SegmentCoreReaders already verifies this field is\n      // valid:\n      assert field != null;\n\n      final IndexInput in = data.clone();\n      final BytesRef scratch = new BytesRef();\n      final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          try {\n            if (docID < 0 || docID >= maxDoc) {\n              throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n            }\n            in.seek(field.dataStartFilePointer + (9+field.pattern.length() + field.maxLength)*docID);\n            SimpleTextUtil.readLine(in, scratch);\n            assert StringHelper.startsWith(scratch, LENGTH);\n            int len;\n            try {\n              len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, \"UTF-8\")).intValue();\n            } catch (ParseException pe) {\n              CorruptIndexException e = new CorruptIndexException(\"failed to parse int length\");\n              e.initCause(pe);\n              throw e;\n            }\n            result.bytes = new byte[len];\n            result.offset = 0;\n            result.length = len;\n            in.readBytes(result.bytes, 0, len);\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n        }\n\n        @Override\n        public int size() {\n          return maxDoc;\n        }\n\n        @Override\n        public boolean isFixedLength() {\n          return field.fixedLength;\n        }\n\n        @Override\n        public int maxLength() {\n          return field.maxLength;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32608e0a08e76fe8668cd1dcca0e7a8f6d7f3f0a","date":1357739321,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#getBinary(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#getBinary(FieldInfo).mjava","sourceNew":"    @Override\n    public BinaryDocValues getBinary(FieldInfo fieldInfo) throws IOException {\n      final OneField field = fields.get(fieldInfo.name);\n\n      // SegmentCoreReaders already verifies this field is\n      // valid:\n      assert field != null;\n\n      final IndexInput in = data.clone();\n      final BytesRef scratch = new BytesRef();\n      final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          try {\n            if (docID < 0 || docID >= maxDoc) {\n              throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n            }\n            in.seek(field.dataStartFilePointer + (9+field.pattern.length() + field.maxLength)*docID);\n            SimpleTextUtil.readLine(in, scratch);\n            assert StringHelper.startsWith(scratch, LENGTH);\n            int len;\n            try {\n              len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, \"UTF-8\")).intValue();\n            } catch (ParseException pe) {\n              CorruptIndexException e = new CorruptIndexException(\"failed to parse int length\");\n              e.initCause(pe);\n              throw e;\n            }\n            result.bytes = new byte[len];\n            result.offset = 0;\n            result.length = len;\n            in.readBytes(result.bytes, 0, len);\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public BinaryDocValues getBinary(FieldInfo fieldInfo) throws IOException {\n      final OneField field = fields.get(fieldInfo.name);\n\n      // SegmentCoreReaders already verifies this field is\n      // valid:\n      assert field != null;\n\n      final IndexInput in = data.clone();\n      final BytesRef scratch = new BytesRef();\n      final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          try {\n            if (docID < 0 || docID >= maxDoc) {\n              throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n            }\n            in.seek(field.dataStartFilePointer + (9+field.pattern.length() + field.maxLength)*docID);\n            SimpleTextUtil.readLine(in, scratch);\n            assert StringHelper.startsWith(scratch, LENGTH);\n            int len;\n            try {\n              len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, \"UTF-8\")).intValue();\n            } catch (ParseException pe) {\n              CorruptIndexException e = new CorruptIndexException(\"failed to parse int length\");\n              e.initCause(pe);\n              throw e;\n            }\n            result.bytes = new byte[len];\n            result.offset = 0;\n            result.length = len;\n            in.readBytes(result.bytes, 0, len);\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n        }\n\n        @Override\n        public int size() {\n          return maxDoc;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200","date":1358521790,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesFormat.SimpleTextDocValuesReader#getBinary(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#getBinary(FieldInfo).mjava","sourceNew":"    @Override\n    public BinaryDocValues getBinary(FieldInfo fieldInfo) throws IOException {\n      final OneField field = fields.get(fieldInfo.name);\n\n      // SegmentCoreReaders already verifies this field is\n      // valid:\n      assert field != null;\n\n      final IndexInput in = data.clone();\n      final BytesRef scratch = new BytesRef();\n      final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          try {\n            if (docID < 0 || docID >= maxDoc) {\n              throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n            }\n            in.seek(field.dataStartFilePointer + (9+field.pattern.length() + field.maxLength)*docID);\n            SimpleTextUtil.readLine(in, scratch);\n            assert StringHelper.startsWith(scratch, LENGTH);\n            int len;\n            try {\n              len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, \"UTF-8\")).intValue();\n            } catch (ParseException pe) {\n              CorruptIndexException e = new CorruptIndexException(\"failed to parse int length\");\n              e.initCause(pe);\n              throw e;\n            }\n            result.bytes = new byte[len];\n            result.offset = 0;\n            result.length = len;\n            in.readBytes(result.bytes, 0, len);\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public BinaryDocValues getBinary(FieldInfo fieldInfo) throws IOException {\n      final OneField field = fields.get(fieldInfo.name);\n\n      // SegmentCoreReaders already verifies this field is\n      // valid:\n      assert field != null;\n\n      final IndexInput in = data.clone();\n      final BytesRef scratch = new BytesRef();\n      final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          try {\n            if (docID < 0 || docID >= maxDoc) {\n              throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n            }\n            in.seek(field.dataStartFilePointer + (9+field.pattern.length() + field.maxLength)*docID);\n            SimpleTextUtil.readLine(in, scratch);\n            assert StringHelper.startsWith(scratch, LENGTH);\n            int len;\n            try {\n              len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, \"UTF-8\")).intValue();\n            } catch (ParseException pe) {\n              CorruptIndexException e = new CorruptIndexException(\"failed to parse int length\");\n              e.initCause(pe);\n              throw e;\n            }\n            result.bytes = new byte[len];\n            result.offset = 0;\n            result.length = len;\n            in.readBytes(result.bytes, 0, len);\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e05b279040cd7b938223b77c3772786678160cf6":["a4d374b2bebd0d52acaa61038fbf23068620fba7"],"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["32608e0a08e76fe8668cd1dcca0e7a8f6d7f3f0a"],"746e3645169db50c8f53252b30d6bc9ac21dea7c":["ed00c8118962f490744732ab611c595c91b80d1c"],"ed00c8118962f490744732ab611c595c91b80d1c":["2899ae5069a2533466ac842042478e67263e1f43"],"2899ae5069a2533466ac842042478e67263e1f43":["f7178a82d1134111f4511f28bb9ad57573a57d93"],"f7178a82d1134111f4511f28bb9ad57573a57d93":["e05b279040cd7b938223b77c3772786678160cf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a4d374b2bebd0d52acaa61038fbf23068620fba7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"32608e0a08e76fe8668cd1dcca0e7a8f6d7f3f0a":["746e3645169db50c8f53252b30d6bc9ac21dea7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e05b279040cd7b938223b77c3772786678160cf6":["f7178a82d1134111f4511f28bb9ad57573a57d93"],"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":[],"746e3645169db50c8f53252b30d6bc9ac21dea7c":["32608e0a08e76fe8668cd1dcca0e7a8f6d7f3f0a"],"ed00c8118962f490744732ab611c595c91b80d1c":["746e3645169db50c8f53252b30d6bc9ac21dea7c"],"2899ae5069a2533466ac842042478e67263e1f43":["ed00c8118962f490744732ab611c595c91b80d1c"],"f7178a82d1134111f4511f28bb9ad57573a57d93":["2899ae5069a2533466ac842042478e67263e1f43"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a4d374b2bebd0d52acaa61038fbf23068620fba7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a4d374b2bebd0d52acaa61038fbf23068620fba7":["e05b279040cd7b938223b77c3772786678160cf6"],"32608e0a08e76fe8668cd1dcca0e7a8f6d7f3f0a":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}