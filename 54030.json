{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsIntersectTermsEnum#pushFrame(int).mjava","commits":[{"id":"0cdf9cc6702d60334a616bd7db3ae91501d1dce7","date":1405858112,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsIntersectTermsEnum#pushFrame(int).mjava","pathOld":"/dev/null","sourceNew":"  private OrdsIntersectTermsEnumFrame pushFrame(int state) throws IOException {\n    final OrdsIntersectTermsEnumFrame f = getFrame(currentFrame == null ? 0 : 1+currentFrame.ord);\n        \n    f.fp = f.fpOrig = currentFrame.lastSubFP;\n    f.prefix = currentFrame.prefix + currentFrame.suffix;\n    // if (DEBUG) System.out.println(\"    pushFrame state=\" + state + \" prefix=\" + f.prefix);\n    f.setState(state);\n\n    // Walk the arc through the index -- we only\n    // \"bother\" with this so we can get the floor data\n    // from the index and skip floor blocks when\n    // possible:\n    FST.Arc<Output> arc = currentFrame.arc;\n    int idx = currentFrame.prefix;\n    assert currentFrame.suffix > 0;\n    Output output = currentFrame.outputPrefix;\n    while (idx < f.prefix) {\n      final int target = term.bytes[idx] & 0xff;\n      // TODO: we could be more efficient for the next()\n      // case by using current arc as starting point,\n      // passed to findTargetArc\n      arc = fr.index.findTargetArc(target, arc, getArc(1+idx), fstReader);\n      assert arc != null;\n      output = OrdsBlockTreeTermsWriter.FST_OUTPUTS.add(output, arc.output);\n      idx++;\n    }\n\n    f.arc = arc;\n    f.outputPrefix = output;\n    assert arc.isFinal();\n    f.load(OrdsBlockTreeTermsWriter.FST_OUTPUTS.add(output, arc.nextFinalOutput));\n    return f;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54204c8a3ca26aeafd273139fc29baf70d0f6786","date":1564170395,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsIntersectTermsEnum#pushFrame(int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsIntersectTermsEnum#pushFrame(int).mjava","sourceNew":"  private OrdsIntersectTermsEnumFrame pushFrame(int state) throws IOException {\n    final OrdsIntersectTermsEnumFrame f = getFrame(currentFrame == null ? 0 : 1+currentFrame.ord);\n        \n    f.fp = f.fpOrig = currentFrame.lastSubFP;\n    f.prefix = currentFrame.prefix + currentFrame.suffix;\n    // if (DEBUG) System.out.println(\"    pushFrame state=\" + state + \" prefix=\" + f.prefix);\n    f.setState(state);\n\n    // Walk the arc through the index -- we only\n    // \"bother\" with this so we can get the floor data\n    // from the index and skip floor blocks when\n    // possible:\n    FST.Arc<Output> arc = currentFrame.arc;\n    int idx = currentFrame.prefix;\n    assert currentFrame.suffix > 0;\n    Output output = currentFrame.outputPrefix;\n    while (idx < f.prefix) {\n      final int target = term.bytes[idx] & 0xff;\n      // TODO: we could be more efficient for the next()\n      // case by using current arc as starting point,\n      // passed to findTargetArc\n      arc = fr.index.findTargetArc(target, arc, getArc(1+idx), fstReader);\n      assert arc != null;\n      output = OrdsBlockTreeTermsWriter.FST_OUTPUTS.add(output, arc.output());\n      idx++;\n    }\n\n    f.arc = arc;\n    f.outputPrefix = output;\n    assert arc.isFinal();\n    f.load(OrdsBlockTreeTermsWriter.FST_OUTPUTS.add(output, arc.nextFinalOutput()));\n    return f;\n  }\n\n","sourceOld":"  private OrdsIntersectTermsEnumFrame pushFrame(int state) throws IOException {\n    final OrdsIntersectTermsEnumFrame f = getFrame(currentFrame == null ? 0 : 1+currentFrame.ord);\n        \n    f.fp = f.fpOrig = currentFrame.lastSubFP;\n    f.prefix = currentFrame.prefix + currentFrame.suffix;\n    // if (DEBUG) System.out.println(\"    pushFrame state=\" + state + \" prefix=\" + f.prefix);\n    f.setState(state);\n\n    // Walk the arc through the index -- we only\n    // \"bother\" with this so we can get the floor data\n    // from the index and skip floor blocks when\n    // possible:\n    FST.Arc<Output> arc = currentFrame.arc;\n    int idx = currentFrame.prefix;\n    assert currentFrame.suffix > 0;\n    Output output = currentFrame.outputPrefix;\n    while (idx < f.prefix) {\n      final int target = term.bytes[idx] & 0xff;\n      // TODO: we could be more efficient for the next()\n      // case by using current arc as starting point,\n      // passed to findTargetArc\n      arc = fr.index.findTargetArc(target, arc, getArc(1+idx), fstReader);\n      assert arc != null;\n      output = OrdsBlockTreeTermsWriter.FST_OUTPUTS.add(output, arc.output);\n      idx++;\n    }\n\n    f.arc = arc;\n    f.outputPrefix = output;\n    assert arc.isFinal();\n    f.load(OrdsBlockTreeTermsWriter.FST_OUTPUTS.add(output, arc.nextFinalOutput));\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsIntersectTermsEnum#pushFrame(int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsIntersectTermsEnum#pushFrame(int).mjava","sourceNew":"  private OrdsIntersectTermsEnumFrame pushFrame(int state) throws IOException {\n    final OrdsIntersectTermsEnumFrame f = getFrame(currentFrame == null ? 0 : 1+currentFrame.ord);\n        \n    f.fp = f.fpOrig = currentFrame.lastSubFP;\n    f.prefix = currentFrame.prefix + currentFrame.suffix;\n    // if (DEBUG) System.out.println(\"    pushFrame state=\" + state + \" prefix=\" + f.prefix);\n    f.setState(state);\n\n    // Walk the arc through the index -- we only\n    // \"bother\" with this so we can get the floor data\n    // from the index and skip floor blocks when\n    // possible:\n    FST.Arc<Output> arc = currentFrame.arc;\n    int idx = currentFrame.prefix;\n    assert currentFrame.suffix > 0;\n    Output output = currentFrame.outputPrefix;\n    while (idx < f.prefix) {\n      final int target = term.bytes[idx] & 0xff;\n      // TODO: we could be more efficient for the next()\n      // case by using current arc as starting point,\n      // passed to findTargetArc\n      arc = fr.index.findTargetArc(target, arc, getArc(1+idx), fstReader);\n      assert arc != null;\n      output = OrdsBlockTreeTermsWriter.FST_OUTPUTS.add(output, arc.output());\n      idx++;\n    }\n\n    f.arc = arc;\n    f.outputPrefix = output;\n    assert arc.isFinal();\n    f.load(OrdsBlockTreeTermsWriter.FST_OUTPUTS.add(output, arc.nextFinalOutput()));\n    return f;\n  }\n\n","sourceOld":"  private OrdsIntersectTermsEnumFrame pushFrame(int state) throws IOException {\n    final OrdsIntersectTermsEnumFrame f = getFrame(currentFrame == null ? 0 : 1+currentFrame.ord);\n        \n    f.fp = f.fpOrig = currentFrame.lastSubFP;\n    f.prefix = currentFrame.prefix + currentFrame.suffix;\n    // if (DEBUG) System.out.println(\"    pushFrame state=\" + state + \" prefix=\" + f.prefix);\n    f.setState(state);\n\n    // Walk the arc through the index -- we only\n    // \"bother\" with this so we can get the floor data\n    // from the index and skip floor blocks when\n    // possible:\n    FST.Arc<Output> arc = currentFrame.arc;\n    int idx = currentFrame.prefix;\n    assert currentFrame.suffix > 0;\n    Output output = currentFrame.outputPrefix;\n    while (idx < f.prefix) {\n      final int target = term.bytes[idx] & 0xff;\n      // TODO: we could be more efficient for the next()\n      // case by using current arc as starting point,\n      // passed to findTargetArc\n      arc = fr.index.findTargetArc(target, arc, getArc(1+idx), fstReader);\n      assert arc != null;\n      output = OrdsBlockTreeTermsWriter.FST_OUTPUTS.add(output, arc.output);\n      idx++;\n    }\n\n    f.arc = arc;\n    f.outputPrefix = output;\n    assert arc.isFinal();\n    f.load(OrdsBlockTreeTermsWriter.FST_OUTPUTS.add(output, arc.nextFinalOutput));\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7"],"0cdf9cc6702d60334a616bd7db3ae91501d1dce7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8061ddd97f3352007d927dae445884a6f3d857b":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7","54204c8a3ca26aeafd273139fc29baf70d0f6786"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["54204c8a3ca26aeafd273139fc29baf70d0f6786"]},"commit2Childs":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0cdf9cc6702d60334a616bd7db3ae91501d1dce7":["54204c8a3ca26aeafd273139fc29baf70d0f6786","f8061ddd97f3352007d927dae445884a6f3d857b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}