{"path":"modules/spatial/strategy/src/test/org/apache/lucene/spatial/strategy/prefix/TestTermQueryPrefixGridStrategy#testNGramPrefixGridLosAngeles().mjava","commits":[{"id":"c2047ba81272a0c4edeb11b1c7810ee23ba73502","date":1329808655,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"modules/spatial/strategy/src/test/org/apache/lucene/spatial/strategy/prefix/TestTermQueryPrefixGridStrategy#testNGramPrefixGridLosAngeles().mjava","pathOld":"modules/spatial-TEMP/src/test/org/apache/lucene/spatial/strategy/prefix/TestTermQueryPrefixGridStrategy#testNGramPrefixGridLosAngeles().mjava","sourceNew":"  @Test\n  public void testNGramPrefixGridLosAngeles() throws IOException {\n    SimpleSpatialFieldInfo fieldInfo = new SimpleSpatialFieldInfo(\"geo\");\n    SpatialContext ctx = SimpleSpatialContext.GEO_KM;\n    TermQueryPrefixTreeStrategy prefixGridStrategy = new TermQueryPrefixTreeStrategy(new QuadPrefixTree(ctx));\n\n    Shape point = new PointImpl(-118.243680, 34.052230);\n\n    Document losAngeles = new Document();\n    losAngeles.add(new Field(\"name\", \"Los Angeles\", StringField.TYPE_STORED));\n    losAngeles.add(prefixGridStrategy.createField(fieldInfo, point, true, true));\n\n    addDocumentsAndCommit(Arrays.asList(losAngeles));\n\n    // This won't work with simple spatial context...\n    SpatialArgsParser spatialArgsParser = new SpatialArgsParser();\n    // TODO... use a non polygon query\n//    SpatialArgs spatialArgs = spatialArgsParser.parse(\n//        \"IsWithin(POLYGON((-127.00390625 39.8125,-112.765625 39.98828125,-111.53515625 31.375,-125.94921875 30.14453125,-127.00390625 39.8125)))\",\n//        new SimpleSpatialContext());\n\n//    Query query = prefixGridStrategy.makeQuery(spatialArgs, fieldInfo);\n//    SearchResults searchResults = executeQuery(query, 1);\n//    assertEquals(1, searchResults.numFound);\n  }\n\n","sourceOld":"  @Test\n  public void testNGramPrefixGridLosAngeles() throws IOException {\n    SimpleSpatialFieldInfo fieldInfo = new SimpleSpatialFieldInfo(\"geo\");\n    SpatialContext ctx = SimpleSpatialContext.GEO_KM;\n    TermQueryPrefixTreeStrategy prefixGridStrategy = new TermQueryPrefixTreeStrategy(new QuadPrefixTree(ctx));\n\n    Shape point = new PointImpl(-118.243680, 34.052230);\n\n    Document losAngeles = new Document();\n    losAngeles.add(new Field(\"name\", \"Los Angeles\", StringField.TYPE_STORED));\n    losAngeles.add(prefixGridStrategy.createField(fieldInfo, point, true, true));\n\n    addDocumentsAndCommit(Arrays.asList(losAngeles));\n\n    // This won't work with simple spatial context...\n    SpatialArgsParser spatialArgsParser = new SpatialArgsParser();\n    // TODO... use a non polygon query\n//    SpatialArgs spatialArgs = spatialArgsParser.parse(\n//        \"IsWithin(POLYGON((-127.00390625 39.8125,-112.765625 39.98828125,-111.53515625 31.375,-125.94921875 30.14453125,-127.00390625 39.8125)))\",\n//        new SimpleSpatialContext());\n\n//    Query query = prefixGridStrategy.makeQuery(spatialArgs, fieldInfo);\n//    SearchResults searchResults = executeQuery(query, 1);\n//    assertEquals(1, searchResults.numFound);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a24bff9b8b5990b2e39206b8742b848c8d88181","date":1330491455,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"modules/spatial/src/test/org/apache/lucene/spatial/strategy/prefix/TestTermQueryPrefixGridStrategy#testNGramPrefixGridLosAngeles().mjava","pathOld":"modules/spatial/strategy/src/test/org/apache/lucene/spatial/strategy/prefix/TestTermQueryPrefixGridStrategy#testNGramPrefixGridLosAngeles().mjava","sourceNew":"  @Test\n  public void testNGramPrefixGridLosAngeles() throws IOException {\n    SimpleSpatialFieldInfo fieldInfo = new SimpleSpatialFieldInfo(\"geo\");\n    SpatialContext ctx = SimpleSpatialContext.GEO_KM;\n    TermQueryPrefixTreeStrategy prefixGridStrategy = new TermQueryPrefixTreeStrategy(new QuadPrefixTree(ctx));\n\n    Shape point = new PointImpl(-118.243680, 34.052230);\n\n    Document losAngeles = new Document();\n    losAngeles.add(new Field(\"name\", \"Los Angeles\", StringField.TYPE_STORED));\n    losAngeles.add(prefixGridStrategy.createField(fieldInfo, point, true, true));\n\n    addDocumentsAndCommit(Arrays.asList(losAngeles));\n\n    // This won't work with simple spatial context...\n    SpatialArgsParser spatialArgsParser = new SpatialArgsParser();\n    // TODO... use a non polygon query\n//    SpatialArgs spatialArgs = spatialArgsParser.parse(\n//        \"IsWithin(POLYGON((-127.00390625 39.8125,-112.765625 39.98828125,-111.53515625 31.375,-125.94921875 30.14453125,-127.00390625 39.8125)))\",\n//        new SimpleSpatialContext());\n\n//    Query query = prefixGridStrategy.makeQuery(spatialArgs, fieldInfo);\n//    SearchResults searchResults = executeQuery(query, 1);\n//    assertEquals(1, searchResults.numFound);\n  }\n\n","sourceOld":"  @Test\n  public void testNGramPrefixGridLosAngeles() throws IOException {\n    SimpleSpatialFieldInfo fieldInfo = new SimpleSpatialFieldInfo(\"geo\");\n    SpatialContext ctx = SimpleSpatialContext.GEO_KM;\n    TermQueryPrefixTreeStrategy prefixGridStrategy = new TermQueryPrefixTreeStrategy(new QuadPrefixTree(ctx));\n\n    Shape point = new PointImpl(-118.243680, 34.052230);\n\n    Document losAngeles = new Document();\n    losAngeles.add(new Field(\"name\", \"Los Angeles\", StringField.TYPE_STORED));\n    losAngeles.add(prefixGridStrategy.createField(fieldInfo, point, true, true));\n\n    addDocumentsAndCommit(Arrays.asList(losAngeles));\n\n    // This won't work with simple spatial context...\n    SpatialArgsParser spatialArgsParser = new SpatialArgsParser();\n    // TODO... use a non polygon query\n//    SpatialArgs spatialArgs = spatialArgsParser.parse(\n//        \"IsWithin(POLYGON((-127.00390625 39.8125,-112.765625 39.98828125,-111.53515625 31.375,-125.94921875 30.14453125,-127.00390625 39.8125)))\",\n//        new SimpleSpatialContext());\n\n//    Query query = prefixGridStrategy.makeQuery(spatialArgs, fieldInfo);\n//    SearchResults searchResults = executeQuery(query, 1);\n//    assertEquals(1, searchResults.numFound);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6a24bff9b8b5990b2e39206b8742b848c8d88181":["c2047ba81272a0c4edeb11b1c7810ee23ba73502"],"c2047ba81272a0c4edeb11b1c7810ee23ba73502":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6a24bff9b8b5990b2e39206b8742b848c8d88181":[],"c2047ba81272a0c4edeb11b1c7810ee23ba73502":["6a24bff9b8b5990b2e39206b8742b848c8d88181"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c2047ba81272a0c4edeb11b1c7810ee23ba73502","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6a24bff9b8b5990b2e39206b8742b848c8d88181","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}