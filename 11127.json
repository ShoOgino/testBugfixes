{"path":"lucene/src/test-framework/java/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStrings#getRandomAcceptedString(Random).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStrings#getRandomAcceptedString(Random).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStrings#getRandomAcceptedString(Random).mjava","sourceNew":"    public int[] getRandomAcceptedString(Random r) {\n\n      final List<Integer> soFar = new ArrayList<Integer>();\n      if (a.isSingleton()) {\n        // accepts only one\n        final String s = a.singleton;\n      \n        int charUpto = 0;\n        while(charUpto < s.length()) {\n          final int cp = s.codePointAt(charUpto);\n          charUpto += Character.charCount(cp);\n          soFar.add(cp);\n        }\n      } else {\n\n        State s = a.initial;\n\n        while(true) {\n      \n          if (s.accept) {\n            if (s.numTransitions == 0) {\n              // stop now\n              break;\n            } else {\n              if (r.nextBoolean()) {\n                break;\n              }\n            }\n          }\n\n          if (s.numTransitions == 0) {\n            throw new RuntimeException(\"this automaton has dead states\");\n          }\n\n          boolean cheat = r.nextBoolean();\n\n          final Transition t;\n          if (cheat) {\n            // pick a transition that we know is the fastest\n            // path to an accept state\n            List<Transition> toAccept = new ArrayList<Transition>();\n            for(int i=0;i<s.numTransitions;i++) {\n              final Transition t0 = s.transitionsArray[i];\n              if (leadsToAccept.containsKey(t0)) {\n                toAccept.add(t0);\n              }\n            }\n            if (toAccept.size() == 0) {\n              // this is OK -- it means we jumped into a cycle\n              t = s.transitionsArray[r.nextInt(s.numTransitions)];\n            } else {\n              t = toAccept.get(r.nextInt(toAccept.size()));\n            }\n          } else {\n            t = s.transitionsArray[r.nextInt(s.numTransitions)];\n          }\n          soFar.add(getRandomCodePoint(r, t));\n          s = t.to;\n        }\n      }\n\n      return ArrayUtil.toIntArray(soFar);\n    }\n\n","sourceOld":"    public int[] getRandomAcceptedString(Random r) {\n\n      final List<Integer> soFar = new ArrayList<Integer>();\n      if (a.isSingleton()) {\n        // accepts only one\n        final String s = a.singleton;\n      \n        int charUpto = 0;\n        while(charUpto < s.length()) {\n          final int cp = s.codePointAt(charUpto);\n          charUpto += Character.charCount(cp);\n          soFar.add(cp);\n        }\n      } else {\n\n        State s = a.initial;\n\n        while(true) {\n      \n          if (s.accept) {\n            if (s.numTransitions == 0) {\n              // stop now\n              break;\n            } else {\n              if (r.nextBoolean()) {\n                break;\n              }\n            }\n          }\n\n          if (s.numTransitions == 0) {\n            throw new RuntimeException(\"this automaton has dead states\");\n          }\n\n          boolean cheat = r.nextBoolean();\n\n          final Transition t;\n          if (cheat) {\n            // pick a transition that we know is the fastest\n            // path to an accept state\n            List<Transition> toAccept = new ArrayList<Transition>();\n            for(int i=0;i<s.numTransitions;i++) {\n              final Transition t0 = s.transitionsArray[i];\n              if (leadsToAccept.containsKey(t0)) {\n                toAccept.add(t0);\n              }\n            }\n            if (toAccept.size() == 0) {\n              // this is OK -- it means we jumped into a cycle\n              t = s.transitionsArray[r.nextInt(s.numTransitions)];\n            } else {\n              t = toAccept.get(r.nextInt(toAccept.size()));\n            }\n          } else {\n            t = s.transitionsArray[r.nextInt(s.numTransitions)];\n          }\n          soFar.add(getRandomCodePoint(r, t));\n          s = t.to;\n        }\n      }\n\n      return ArrayUtil.toIntArray(soFar);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStrings#getRandomAcceptedString(Random).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStrings#getRandomAcceptedString(Random).mjava","sourceNew":"    public int[] getRandomAcceptedString(Random r) {\n\n      final List<Integer> soFar = new ArrayList<Integer>();\n      if (a.isSingleton()) {\n        // accepts only one\n        final String s = a.singleton;\n      \n        int charUpto = 0;\n        while(charUpto < s.length()) {\n          final int cp = s.codePointAt(charUpto);\n          charUpto += Character.charCount(cp);\n          soFar.add(cp);\n        }\n      } else {\n\n        State s = a.initial;\n\n        while(true) {\n      \n          if (s.accept) {\n            if (s.numTransitions == 0) {\n              // stop now\n              break;\n            } else {\n              if (r.nextBoolean()) {\n                break;\n              }\n            }\n          }\n\n          if (s.numTransitions == 0) {\n            throw new RuntimeException(\"this automaton has dead states\");\n          }\n\n          boolean cheat = r.nextBoolean();\n\n          final Transition t;\n          if (cheat) {\n            // pick a transition that we know is the fastest\n            // path to an accept state\n            List<Transition> toAccept = new ArrayList<Transition>();\n            for(int i=0;i<s.numTransitions;i++) {\n              final Transition t0 = s.transitionsArray[i];\n              if (leadsToAccept.containsKey(t0)) {\n                toAccept.add(t0);\n              }\n            }\n            if (toAccept.size() == 0) {\n              // this is OK -- it means we jumped into a cycle\n              t = s.transitionsArray[r.nextInt(s.numTransitions)];\n            } else {\n              t = toAccept.get(r.nextInt(toAccept.size()));\n            }\n          } else {\n            t = s.transitionsArray[r.nextInt(s.numTransitions)];\n          }\n          soFar.add(getRandomCodePoint(r, t));\n          s = t.to;\n        }\n      }\n\n      return ArrayUtil.toIntArray(soFar);\n    }\n\n","sourceOld":"    public int[] getRandomAcceptedString(Random r) {\n\n      final List<Integer> soFar = new ArrayList<Integer>();\n      if (a.isSingleton()) {\n        // accepts only one\n        final String s = a.singleton;\n      \n        int charUpto = 0;\n        while(charUpto < s.length()) {\n          final int cp = s.codePointAt(charUpto);\n          charUpto += Character.charCount(cp);\n          soFar.add(cp);\n        }\n      } else {\n\n        State s = a.initial;\n\n        while(true) {\n      \n          if (s.accept) {\n            if (s.numTransitions == 0) {\n              // stop now\n              break;\n            } else {\n              if (r.nextBoolean()) {\n                break;\n              }\n            }\n          }\n\n          if (s.numTransitions == 0) {\n            throw new RuntimeException(\"this automaton has dead states\");\n          }\n\n          boolean cheat = r.nextBoolean();\n\n          final Transition t;\n          if (cheat) {\n            // pick a transition that we know is the fastest\n            // path to an accept state\n            List<Transition> toAccept = new ArrayList<Transition>();\n            for(int i=0;i<s.numTransitions;i++) {\n              final Transition t0 = s.transitionsArray[i];\n              if (leadsToAccept.containsKey(t0)) {\n                toAccept.add(t0);\n              }\n            }\n            if (toAccept.size() == 0) {\n              // this is OK -- it means we jumped into a cycle\n              t = s.transitionsArray[r.nextInt(s.numTransitions)];\n            } else {\n              t = toAccept.get(r.nextInt(toAccept.size()));\n            }\n          } else {\n            t = s.transitionsArray[r.nextInt(s.numTransitions)];\n          }\n          soFar.add(getRandomCodePoint(r, t));\n          s = t.to;\n        }\n      }\n\n      return ArrayUtil.toIntArray(soFar);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7b91922b55d15444d554721b352861d028eb8278"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}