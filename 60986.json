{"path":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene60/Lucene60PointsWriter#writeField(FieldInfo,PointsReader).mjava","commits":[{"id":"78e689a3b60e84c75dc6dd7b181a71fc19ef8482","date":1591689554,"type":2,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene60/Lucene60PointsWriter#writeField(FieldInfo,PointsReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60PointsWriter#writeField(FieldInfo,PointsReader).mjava","sourceNew":"  @Override\n  public void writeField(FieldInfo fieldInfo, PointsReader reader) throws IOException {\n\n    PointValues values = reader.getValues(fieldInfo.name);\n\n    try (BKDWriter writer = new BKDWriter(writeState.segmentInfo.maxDoc(),\n                                          writeState.directory,\n                                          writeState.segmentInfo.name,\n                                          fieldInfo.getPointDimensionCount(),\n                                          fieldInfo.getPointIndexDimensionCount(),\n                                          fieldInfo.getPointNumBytes(),\n                                          maxPointsInLeafNode,\n                                          maxMBSortInHeap,\n                                          values.size())) {\n\n      if (values instanceof MutablePointValues) {\n        Runnable finalizer = writer.writeField(dataOut, dataOut, dataOut, fieldInfo.name, (MutablePointValues) values);\n        if (finalizer != null) {\n          indexFPs.put(fieldInfo.name, dataOut.getFilePointer());\n          finalizer.run();\n        }\n        return;\n      }\n\n      values.intersect(new IntersectVisitor() {\n          @Override\n          public void visit(int docID) {\n            throw new IllegalStateException();\n          }\n\n          public void visit(int docID, byte[] packedValue) throws IOException {\n            writer.add(packedValue, docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            return Relation.CELL_CROSSES_QUERY;\n          }\n        });\n\n      // We could have 0 points on merge since all docs with dimensional fields may be deleted:\n      Runnable finalizer = writer.finish(dataOut, dataOut, dataOut);\n      if (finalizer != null) {\n        indexFPs.put(fieldInfo.name, dataOut.getFilePointer());\n        finalizer.run();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeField(FieldInfo fieldInfo, PointsReader reader) throws IOException {\n\n    PointValues values = reader.getValues(fieldInfo.name);\n\n    try (BKDWriter writer = new BKDWriter(writeState.segmentInfo.maxDoc(),\n                                          writeState.directory,\n                                          writeState.segmentInfo.name,\n                                          fieldInfo.getPointDimensionCount(),\n                                          fieldInfo.getPointIndexDimensionCount(),\n                                          fieldInfo.getPointNumBytes(),\n                                          maxPointsInLeafNode,\n                                          maxMBSortInHeap,\n                                          values.size())) {\n\n      if (values instanceof MutablePointValues) {\n        final long fp = writer.writeField(dataOut, fieldInfo.name, (MutablePointValues) values);\n        if (fp != -1) {\n          indexFPs.put(fieldInfo.name, fp);\n        }\n        return;\n      }\n\n      values.intersect(new IntersectVisitor() {\n          @Override\n          public void visit(int docID) {\n            throw new IllegalStateException();\n          }\n\n          public void visit(int docID, byte[] packedValue) throws IOException {\n            writer.add(packedValue, docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            return Relation.CELL_CROSSES_QUERY;\n          }\n        });\n\n      // We could have 0 points on merge since all docs with dimensional fields may be deleted:\n      if (writer.getPointCount() > 0) {\n        indexFPs.put(fieldInfo.name, writer.finish(dataOut));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene60/Lucene60PointsWriter#writeField(FieldInfo,PointsReader).mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene60/Lucene60PointsWriter#writeField(FieldInfo,PointsReader).mjava","sourceNew":"  @Override\n  public void writeField(FieldInfo fieldInfo, PointsReader reader) throws IOException {\n\n    PointValues values = reader.getValues(fieldInfo.name);\n\n    BKDConfig config = new BKDConfig(fieldInfo.getPointDimensionCount(),\n                                     fieldInfo.getPointIndexDimensionCount(),\n                                     fieldInfo.getPointNumBytes(),\n                                     maxPointsInLeafNode);\n\n    try (BKDWriter writer = new BKDWriter(writeState.segmentInfo.maxDoc(),\n                                          writeState.directory,\n                                          writeState.segmentInfo.name,\n                                          config,\n                                          maxMBSortInHeap,\n                                          values.size())) {\n\n      if (values instanceof MutablePointValues) {\n        Runnable finalizer = writer.writeField(dataOut, dataOut, dataOut, fieldInfo.name, (MutablePointValues) values);\n        if (finalizer != null) {\n          indexFPs.put(fieldInfo.name, dataOut.getFilePointer());\n          finalizer.run();\n        }\n        return;\n      }\n\n      values.intersect(new IntersectVisitor() {\n          @Override\n          public void visit(int docID) {\n            throw new IllegalStateException();\n          }\n\n          public void visit(int docID, byte[] packedValue) throws IOException {\n            writer.add(packedValue, docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            return Relation.CELL_CROSSES_QUERY;\n          }\n        });\n\n      // We could have 0 points on merge since all docs with dimensional fields may be deleted:\n      Runnable finalizer = writer.finish(dataOut, dataOut, dataOut);\n      if (finalizer != null) {\n        indexFPs.put(fieldInfo.name, dataOut.getFilePointer());\n        finalizer.run();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeField(FieldInfo fieldInfo, PointsReader reader) throws IOException {\n\n    PointValues values = reader.getValues(fieldInfo.name);\n\n    try (BKDWriter writer = new BKDWriter(writeState.segmentInfo.maxDoc(),\n                                          writeState.directory,\n                                          writeState.segmentInfo.name,\n                                          fieldInfo.getPointDimensionCount(),\n                                          fieldInfo.getPointIndexDimensionCount(),\n                                          fieldInfo.getPointNumBytes(),\n                                          maxPointsInLeafNode,\n                                          maxMBSortInHeap,\n                                          values.size())) {\n\n      if (values instanceof MutablePointValues) {\n        Runnable finalizer = writer.writeField(dataOut, dataOut, dataOut, fieldInfo.name, (MutablePointValues) values);\n        if (finalizer != null) {\n          indexFPs.put(fieldInfo.name, dataOut.getFilePointer());\n          finalizer.run();\n        }\n        return;\n      }\n\n      values.intersect(new IntersectVisitor() {\n          @Override\n          public void visit(int docID) {\n            throw new IllegalStateException();\n          }\n\n          public void visit(int docID, byte[] packedValue) throws IOException {\n            writer.add(packedValue, docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            return Relation.CELL_CROSSES_QUERY;\n          }\n        });\n\n      // We could have 0 points on merge since all docs with dimensional fields may be deleted:\n      Runnable finalizer = writer.finish(dataOut, dataOut, dataOut);\n      if (finalizer != null) {\n        indexFPs.put(fieldInfo.name, dataOut.getFilePointer());\n        finalizer.run();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["78e689a3b60e84c75dc6dd7b181a71fc19ef8482"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78e689a3b60e84c75dc6dd7b181a71fc19ef8482":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"]},"commit2Childs":{"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["78e689a3b60e84c75dc6dd7b181a71fc19ef8482"],"78e689a3b60e84c75dc6dd7b181a71fc19ef8482":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}