{"path":"src/java/org/apache/lucene/index/MultiReader#reopen().mjava","commits":[{"id":"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8","date":1195335263,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiReader#reopen().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tries to reopen the subreaders.\n   * <br>\n   * If one or more subreaders could be re-opened (i. e. subReader.reopen() \n   * returned a new instance != subReader), then a new MultiReader instance \n   * is returned, otherwise this instance is returned.\n   * <p>\n   * A re-opened instance might share one or more subreaders with the old \n   * instance. Index modification operations result in undefined behavior\n   * when performed before the old instance is closed.\n   * (see {@link IndexReader#reopen()}).\n   * <p>\n   * If subreaders are shared, then the reference count of those\n   * readers is increased to ensure that the subreaders remain open\n   * until the last referring reader is closed.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error \n   */\n  public IndexReader reopen() throws CorruptIndexException, IOException {\n    ensureOpen();\n    \n    boolean reopened = false;\n    IndexReader[] newSubReaders = new IndexReader[subReaders.length];\n    boolean[] newDecrefOnClose = new boolean[subReaders.length];\n    \n    boolean success = false;\n    try {\n      for (int i = 0; i < subReaders.length; i++) {\n        newSubReaders[i] = subReaders[i].reopen();\n        // if at least one of the subreaders was updated we remember that\n        // and return a new MultiReader\n        if (newSubReaders[i] != subReaders[i]) {\n          reopened = true;\n          // this is a new subreader instance, so on close() we don't\n          // decRef but close it \n          newDecrefOnClose[i] = false;\n        }\n      }\n\n      if (reopened) {\n        for (int i = 0; i < subReaders.length; i++) {\n          if (newSubReaders[i] == subReaders[i]) {\n            newSubReaders[i].incRef();\n            newDecrefOnClose[i] = true;\n          }\n        }\n        \n        MultiReader mr = new MultiReader(newSubReaders);\n        mr.decrefOnClose = newDecrefOnClose;\n        success = true;\n        return mr;\n      } else {\n        success = true;\n        return this;\n      }\n    } finally {\n      if (!success && reopened) {\n        for (int i = 0; i < newSubReaders.length; i++) {\n          if (newSubReaders[i] != null) {\n            try {\n              if (newDecrefOnClose[i]) {\n                newSubReaders[i].decRef();\n              } else {\n                newSubReaders[i].close();\n              }\n            } catch (IOException ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6db660b56f04fdb2853d25cdee8ee0d36559a521","date":1233313968,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiReader#reopen().mjava","pathOld":"src/java/org/apache/lucene/index/MultiReader#reopen().mjava","sourceNew":"  /**\n   * Tries to reopen the subreaders.\n   * <br>\n   * If one or more subreaders could be re-opened (i. e. subReader.reopen() \n   * returned a new instance != subReader), then a new MultiReader instance \n   * is returned, otherwise this instance is returned.\n   * <p>\n   * A re-opened instance might share one or more subreaders with the old \n   * instance. Index modification operations result in undefined behavior\n   * when performed before the old instance is closed.\n   * (see {@link IndexReader#reopen()}).\n   * <p>\n   * If subreaders are shared, then the reference count of those\n   * readers is increased to ensure that the subreaders remain open\n   * until the last referring reader is closed.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error \n   */\n  public synchronized IndexReader reopen() throws CorruptIndexException, IOException {\n    return doReopen(false);\n  }\n\n","sourceOld":"  /**\n   * Tries to reopen the subreaders.\n   * <br>\n   * If one or more subreaders could be re-opened (i. e. subReader.reopen() \n   * returned a new instance != subReader), then a new MultiReader instance \n   * is returned, otherwise this instance is returned.\n   * <p>\n   * A re-opened instance might share one or more subreaders with the old \n   * instance. Index modification operations result in undefined behavior\n   * when performed before the old instance is closed.\n   * (see {@link IndexReader#reopen()}).\n   * <p>\n   * If subreaders are shared, then the reference count of those\n   * readers is increased to ensure that the subreaders remain open\n   * until the last referring reader is closed.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error \n   */\n  public IndexReader reopen() throws CorruptIndexException, IOException {\n    ensureOpen();\n    \n    boolean reopened = false;\n    IndexReader[] newSubReaders = new IndexReader[subReaders.length];\n    boolean[] newDecrefOnClose = new boolean[subReaders.length];\n    \n    boolean success = false;\n    try {\n      for (int i = 0; i < subReaders.length; i++) {\n        newSubReaders[i] = subReaders[i].reopen();\n        // if at least one of the subreaders was updated we remember that\n        // and return a new MultiReader\n        if (newSubReaders[i] != subReaders[i]) {\n          reopened = true;\n          // this is a new subreader instance, so on close() we don't\n          // decRef but close it \n          newDecrefOnClose[i] = false;\n        }\n      }\n\n      if (reopened) {\n        for (int i = 0; i < subReaders.length; i++) {\n          if (newSubReaders[i] == subReaders[i]) {\n            newSubReaders[i].incRef();\n            newDecrefOnClose[i] = true;\n          }\n        }\n        \n        MultiReader mr = new MultiReader(newSubReaders);\n        mr.decrefOnClose = newDecrefOnClose;\n        success = true;\n        return mr;\n      } else {\n        success = true;\n        return this;\n      }\n    } finally {\n      if (!success && reopened) {\n        for (int i = 0; i < newSubReaders.length; i++) {\n          if (newSubReaders[i] != null) {\n            try {\n              if (newDecrefOnClose[i]) {\n                newSubReaders[i].decRef();\n              } else {\n                newSubReaders[i].close();\n              }\n            } catch (IOException ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiReader#reopen().mjava","pathOld":"src/java/org/apache/lucene/index/MultiReader#reopen().mjava","sourceNew":"  /**\n   * Tries to reopen the subreaders.\n   * <br>\n   * If one or more subreaders could be re-opened (i. e. subReader.reopen() \n   * returned a new instance != subReader), then a new MultiReader instance \n   * is returned, otherwise this instance is returned.\n   * <p>\n   * A re-opened instance might share one or more subreaders with the old \n   * instance. Index modification operations result in undefined behavior\n   * when performed before the old instance is closed.\n   * (see {@link IndexReader#reopen()}).\n   * <p>\n   * If subreaders are shared, then the reference count of those\n   * readers is increased to ensure that the subreaders remain open\n   * until the last referring reader is closed.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error \n   */\n  @Override\n  public synchronized IndexReader reopen() throws CorruptIndexException, IOException {\n    return doReopen(false);\n  }\n\n","sourceOld":"  /**\n   * Tries to reopen the subreaders.\n   * <br>\n   * If one or more subreaders could be re-opened (i. e. subReader.reopen() \n   * returned a new instance != subReader), then a new MultiReader instance \n   * is returned, otherwise this instance is returned.\n   * <p>\n   * A re-opened instance might share one or more subreaders with the old \n   * instance. Index modification operations result in undefined behavior\n   * when performed before the old instance is closed.\n   * (see {@link IndexReader#reopen()}).\n   * <p>\n   * If subreaders are shared, then the reference count of those\n   * readers is increased to ensure that the subreaders remain open\n   * until the last referring reader is closed.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error \n   */\n  public synchronized IndexReader reopen() throws CorruptIndexException, IOException {\n    return doReopen(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#reopen().mjava","pathOld":"src/java/org/apache/lucene/index/MultiReader#reopen().mjava","sourceNew":"  /**\n   * Tries to reopen the subreaders.\n   * <br>\n   * If one or more subreaders could be re-opened (i. e. subReader.reopen() \n   * returned a new instance != subReader), then a new MultiReader instance \n   * is returned, otherwise this instance is returned.\n   * <p>\n   * A re-opened instance might share one or more subreaders with the old \n   * instance. Index modification operations result in undefined behavior\n   * when performed before the old instance is closed.\n   * (see {@link IndexReader#reopen()}).\n   * <p>\n   * If subreaders are shared, then the reference count of those\n   * readers is increased to ensure that the subreaders remain open\n   * until the last referring reader is closed.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error \n   */\n  @Override\n  public synchronized IndexReader reopen() throws CorruptIndexException, IOException {\n    return doReopen(false);\n  }\n\n","sourceOld":"  /**\n   * Tries to reopen the subreaders.\n   * <br>\n   * If one or more subreaders could be re-opened (i. e. subReader.reopen() \n   * returned a new instance != subReader), then a new MultiReader instance \n   * is returned, otherwise this instance is returned.\n   * <p>\n   * A re-opened instance might share one or more subreaders with the old \n   * instance. Index modification operations result in undefined behavior\n   * when performed before the old instance is closed.\n   * (see {@link IndexReader#reopen()}).\n   * <p>\n   * If subreaders are shared, then the reference count of those\n   * readers is increased to ensure that the subreaders remain open\n   * until the last referring reader is closed.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error \n   */\n  @Override\n  public synchronized IndexReader reopen() throws CorruptIndexException, IOException {\n    return doReopen(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6db660b56f04fdb2853d25cdee8ee0d36559a521":["3b9d7142a399ac70a71ce5b40ee66695eda5b7e8"],"8a9e385641d717e641408d8fbbc62be8fc766357":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"]},"commit2Childs":{"6db660b56f04fdb2853d25cdee8ee0d36559a521":["8a9e385641d717e641408d8fbbc62be8fc766357"],"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b9d7142a399ac70a71ce5b40ee66695eda5b7e8"],"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}