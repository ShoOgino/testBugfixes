{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FileListEntityProcessor#getDate(String).mjava","commits":[{"id":"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","date":1217446558,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FileListEntityProcessor#getDate(String).mjava","pathOld":"/dev/null","sourceNew":"  private Date getDate(String dateStr) {\n    if (dateStr == null)\n      return null;\n\n    Matcher m = PLACE_HOLDER_PATTERN.matcher(dateStr);\n    if (m.find()) {\n      return (Date) resolver.resolve(dateStr);\n    }\n    m = EvaluatorBag.IN_SINGLE_QUOTES.matcher(dateStr);\n    if (m.find()) {\n      String expr = null;\n      expr = m.group(1).replaceAll(\"NOW\", \"\");\n      try {\n        return EvaluatorBag.dateMathParser.parseMath(expr);\n      } catch (ParseException exp) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n                \"Invalid expression for date\", exp);\n      }\n    }\n    try {\n      return DataImporter.DATE_TIME_FORMAT.parse(dateStr);\n    } catch (ParseException exp) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"Invalid expression for date\", exp);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["3f89819f2d2ba23f608c6d0ea155524f95a29aa4","ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29","ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3f89819f2d2ba23f608c6d0ea155524f95a29aa4","date":1234350104,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FileListEntityProcessor#getDate(String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FileListEntityProcessor#getDate(String).mjava","sourceNew":"  private Date getDate(String dateStr) {\n    if (dateStr == null)\n      return null;\n\n    Matcher m = PLACE_HOLDER_PATTERN.matcher(dateStr);\n    if (m.find()) {\n      return (Date) resolver.resolve(dateStr);\n    }\n    m = EvaluatorBag.IN_SINGLE_QUOTES.matcher(dateStr);\n    if (m.find()) {\n      String expr = null;\n      expr = m.group(1).replaceAll(\"NOW\", \"\");\n      try {\n        return EvaluatorBag.dateMathParser.parseMath(expr);\n      } catch (ParseException exp) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n                \"Invalid expression for date\", exp);\n      }\n    }\n    try {\n      return DataImporter.DATE_TIME_FORMAT.get().parse(dateStr);\n    } catch (ParseException exp) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"Invalid expression for date\", exp);\n    }\n  }\n\n","sourceOld":"  private Date getDate(String dateStr) {\n    if (dateStr == null)\n      return null;\n\n    Matcher m = PLACE_HOLDER_PATTERN.matcher(dateStr);\n    if (m.find()) {\n      return (Date) resolver.resolve(dateStr);\n    }\n    m = EvaluatorBag.IN_SINGLE_QUOTES.matcher(dateStr);\n    if (m.find()) {\n      String expr = null;\n      expr = m.group(1).replaceAll(\"NOW\", \"\");\n      try {\n        return EvaluatorBag.dateMathParser.parseMath(expr);\n      } catch (ParseException exp) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n                \"Invalid expression for date\", exp);\n      }\n    }\n    try {\n      return DataImporter.DATE_TIME_FORMAT.parse(dateStr);\n    } catch (ParseException exp) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"Invalid expression for date\", exp);\n    }\n  }\n\n","bugFix":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ee545e24d7448c1c28710f34a22e32bd1d7cf83b","date":1252329121,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FileListEntityProcessor#getDate(String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FileListEntityProcessor#getDate(String).mjava","sourceNew":"  /**\n   * Get the Date object corresponding to the given string.\n   *\n   * @param dateStr the date string. It can be a DateMath string or it may have a evaluator function\n   * @return a Date instance corresponding to the input string\n   */\n  private Date getDate(String dateStr) {\n    if (dateStr == null)\n      return null;\n\n    Matcher m = PLACE_HOLDER_PATTERN.matcher(dateStr);\n    if (m.find()) {\n      Object o = resolver.resolve(m.group(1));\n      if (o instanceof Date)  return (Date)o;\n      dateStr = (String) o;\n    } else  {\n      dateStr = resolver.replaceTokens(dateStr);\n    }\n    m = EvaluatorBag.IN_SINGLE_QUOTES.matcher(dateStr);\n    if (m.find()) {\n      String expr = null;\n      expr = m.group(1).replaceAll(\"NOW\", \"\");\n      try {\n        return EvaluatorBag.dateMathParser.parseMath(expr);\n      } catch (ParseException exp) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n                \"Invalid expression for date\", exp);\n      }\n    }\n    try {\n      return DataImporter.DATE_TIME_FORMAT.get().parse(dateStr);\n    } catch (ParseException exp) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"Invalid expression for date\", exp);\n    }\n  }\n\n","sourceOld":"  private Date getDate(String dateStr) {\n    if (dateStr == null)\n      return null;\n\n    Matcher m = PLACE_HOLDER_PATTERN.matcher(dateStr);\n    if (m.find()) {\n      return (Date) resolver.resolve(dateStr);\n    }\n    m = EvaluatorBag.IN_SINGLE_QUOTES.matcher(dateStr);\n    if (m.find()) {\n      String expr = null;\n      expr = m.group(1).replaceAll(\"NOW\", \"\");\n      try {\n        return EvaluatorBag.dateMathParser.parseMath(expr);\n      } catch (ParseException exp) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n                \"Invalid expression for date\", exp);\n      }\n    }\n    try {\n      return DataImporter.DATE_TIME_FORMAT.get().parse(dateStr);\n    } catch (ParseException exp) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"Invalid expression for date\", exp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"153cc06382fdc94d0ea3db127eab860ae4310525","date":1260181667,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FileListEntityProcessor#getDate(String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FileListEntityProcessor#getDate(String).mjava","sourceNew":"  /**\n   * Get the Date object corresponding to the given string.\n   *\n   * @param dateStr the date string. It can be a DateMath string or it may have a evaluator function\n   * @return a Date instance corresponding to the input string\n   */\n  private Date getDate(String dateStr) {\n    if (dateStr == null)\n      return null;\n\n    Matcher m = PLACE_HOLDER_PATTERN.matcher(dateStr);\n    if (m.find()) {\n      Object o = context.resolve(m.group(1));\n      if (o instanceof Date)  return (Date)o;\n      dateStr = (String) o;\n    } else  {\n      dateStr = context.replaceTokens(dateStr);\n    }\n    m = EvaluatorBag.IN_SINGLE_QUOTES.matcher(dateStr);\n    if (m.find()) {\n      String expr = null;\n      expr = m.group(1).replaceAll(\"NOW\", \"\");\n      try {\n        return EvaluatorBag.dateMathParser.parseMath(expr);\n      } catch (ParseException exp) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n                \"Invalid expression for date\", exp);\n      }\n    }\n    try {\n      return DataImporter.DATE_TIME_FORMAT.get().parse(dateStr);\n    } catch (ParseException exp) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"Invalid expression for date\", exp);\n    }\n  }\n\n","sourceOld":"  /**\n   * Get the Date object corresponding to the given string.\n   *\n   * @param dateStr the date string. It can be a DateMath string or it may have a evaluator function\n   * @return a Date instance corresponding to the input string\n   */\n  private Date getDate(String dateStr) {\n    if (dateStr == null)\n      return null;\n\n    Matcher m = PLACE_HOLDER_PATTERN.matcher(dateStr);\n    if (m.find()) {\n      Object o = resolver.resolve(m.group(1));\n      if (o instanceof Date)  return (Date)o;\n      dateStr = (String) o;\n    } else  {\n      dateStr = resolver.replaceTokens(dateStr);\n    }\n    m = EvaluatorBag.IN_SINGLE_QUOTES.matcher(dateStr);\n    if (m.find()) {\n      String expr = null;\n      expr = m.group(1).replaceAll(\"NOW\", \"\");\n      try {\n        return EvaluatorBag.dateMathParser.parseMath(expr);\n      } catch (ParseException exp) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n                \"Invalid expression for date\", exp);\n      }\n    }\n    try {\n      return DataImporter.DATE_TIME_FORMAT.get().parse(dateStr);\n    } catch (ParseException exp) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"Invalid expression for date\", exp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FileListEntityProcessor#getDate(String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FileListEntityProcessor#getDate(String).mjava","sourceNew":"  /**\n   * Get the Date object corresponding to the given string.\n   *\n   * @param dateStr the date string. It can be a DateMath string or it may have a evaluator function\n   * @return a Date instance corresponding to the input string\n   */\n  private Date getDate(String dateStr) {\n    if (dateStr == null)\n      return null;\n\n    Matcher m = PLACE_HOLDER_PATTERN.matcher(dateStr);\n    if (m.find()) {\n      Object o = context.resolve(m.group(1));\n      if (o instanceof Date)  return (Date)o;\n      dateStr = (String) o;\n    } else  {\n      dateStr = context.replaceTokens(dateStr);\n    }\n    m = EvaluatorBag.IN_SINGLE_QUOTES.matcher(dateStr);\n    if (m.find()) {\n      String expr = null;\n      expr = m.group(1).replaceAll(\"NOW\", \"\");\n      try {\n        return EvaluatorBag.dateMathParser.parseMath(expr);\n      } catch (ParseException exp) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n                \"Invalid expression for date\", exp);\n      }\n    }\n    try {\n      return DataImporter.DATE_TIME_FORMAT.get().parse(dateStr);\n    } catch (ParseException exp) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"Invalid expression for date\", exp);\n    }\n  }\n\n","sourceOld":"  /**\n   * Get the Date object corresponding to the given string.\n   *\n   * @param dateStr the date string. It can be a DateMath string or it may have a evaluator function\n   * @return a Date instance corresponding to the input string\n   */\n  private Date getDate(String dateStr) {\n    if (dateStr == null)\n      return null;\n\n    Matcher m = PLACE_HOLDER_PATTERN.matcher(dateStr);\n    if (m.find()) {\n      Object o = context.resolve(m.group(1));\n      if (o instanceof Date)  return (Date)o;\n      dateStr = (String) o;\n    } else  {\n      dateStr = context.replaceTokens(dateStr);\n    }\n    m = EvaluatorBag.IN_SINGLE_QUOTES.matcher(dateStr);\n    if (m.find()) {\n      String expr = null;\n      expr = m.group(1).replaceAll(\"NOW\", \"\");\n      try {\n        return EvaluatorBag.dateMathParser.parseMath(expr);\n      } catch (ParseException exp) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n                \"Invalid expression for date\", exp);\n      }\n    }\n    try {\n      return DataImporter.DATE_TIME_FORMAT.get().parse(dateStr);\n    } catch (ParseException exp) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"Invalid expression for date\", exp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ee545e24d7448c1c28710f34a22e32bd1d7cf83b":["3f89819f2d2ba23f608c6d0ea155524f95a29aa4"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3f89819f2d2ba23f608c6d0ea155524f95a29aa4":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["153cc06382fdc94d0ea3db127eab860ae4310525"],"153cc06382fdc94d0ea3db127eab860ae4310525":["ee545e24d7448c1c28710f34a22e32bd1d7cf83b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ee545e24d7448c1c28710f34a22e32bd1d7cf83b":["153cc06382fdc94d0ea3db127eab860ae4310525"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["3f89819f2d2ba23f608c6d0ea155524f95a29aa4"],"3f89819f2d2ba23f608c6d0ea155524f95a29aa4":["ee545e24d7448c1c28710f34a22e32bd1d7cf83b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"153cc06382fdc94d0ea3db127eab860ae4310525":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}