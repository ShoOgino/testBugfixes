{"path":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].DynamicField#compareTo(DynamicField).mjava","commits":[{"id":"245c71087515ed70d4fb9d9484f9dcbd79eebdfc","date":1331372561,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].DynamicField#compareTo(DynamicField).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Sort order is based on length of regex.  Longest comes first.\n     * @param other The object to compare to.\n     * @return a negative integer, zero, or a positive integer\n     * as this object is less than, equal to, or greater than\n     * the specified object.\n     */\n    public int compareTo(DynamicField other) {\n      return other.wildcard.length() - wildcard.length();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].DynamicField#compareTo(DynamicField).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Sort order is based on length of regex.  Longest comes first.\n     * @param other The object to compare to.\n     * @return a negative integer, zero, or a positive integer\n     * as this object is less than, equal to, or greater than\n     * the specified object.\n     */\n    public int compareTo(DynamicField other) {\n      return other.wildcard.length() - wildcard.length();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].DynamicField#compareTo(DynamicField).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].DynamicField#compareTo(DynamicField).mjava","sourceNew":"    /**\n     * Sort order is based on length of regex.  Longest comes first.\n     * @param other The object to compare to.\n     * @return a negative integer, zero, or a positive integer\n     * as this object is less than, equal to, or greater than\n     * the specified object.\n     */\n    @Override\n    public int compareTo(DynamicField other) {\n      return other.wildcard.length() - wildcard.length();\n    }\n\n","sourceOld":"    /**\n     * Sort order is based on length of regex.  Longest comes first.\n     * @param other The object to compare to.\n     * @return a negative integer, zero, or a positive integer\n     * as this object is less than, equal to, or greater than\n     * the specified object.\n     */\n    public int compareTo(DynamicField other) {\n      return other.wildcard.length() - wildcard.length();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].DynamicField#compareTo(DynamicField).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].DynamicField#compareTo(DynamicField).mjava","sourceNew":"    /**\n     * Sort order is based on length of regex.  Longest comes first.\n     * @param other The object to compare to.\n     * @return a negative integer, zero, or a positive integer\n     * as this object is less than, equal to, or greater than\n     * the specified object.\n     */\n    @Override\n    public int compareTo(DynamicField other) {\n      return other.wildcard.length() - wildcard.length();\n    }\n\n","sourceOld":"    /**\n     * Sort order is based on length of regex.  Longest comes first.\n     * @param other The object to compare to.\n     * @return a negative integer, zero, or a positive integer\n     * as this object is less than, equal to, or greater than\n     * the specified object.\n     */\n    public int compareTo(DynamicField other) {\n      return other.wildcard.length() - wildcard.length();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7e79e31f55cbb444e3023d430a340658755aa31","date":1357666399,"type":5,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.DynamicField#compareTo(DynamicField).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].DynamicField#compareTo(DynamicField).mjava","sourceNew":"    /**\n     * Sort order is based on length of regex.  Longest comes first.\n     * @param other The object to compare to.\n     * @return a negative integer, zero, or a positive integer\n     * as this object is less than, equal to, or greater than\n     * the specified object.\n     */\n    @Override\n    public int compareTo(DynamicField other) {\n      return other.wildcard.length() - wildcard.length();\n    }\n\n","sourceOld":"    /**\n     * Sort order is based on length of regex.  Longest comes first.\n     * @param other The object to compare to.\n     * @return a negative integer, zero, or a positive integer\n     * as this object is less than, equal to, or greater than\n     * the specified object.\n     */\n    @Override\n    public int compareTo(DynamicField other) {\n      return other.wildcard.length() - wildcard.length();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.DynamicField#compareTo(DynamicField).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].DynamicField#compareTo(DynamicField).mjava","sourceNew":"    /**\n     * Sort order is based on length of regex.  Longest comes first.\n     * @param other The object to compare to.\n     * @return a negative integer, zero, or a positive integer\n     * as this object is less than, equal to, or greater than\n     * the specified object.\n     */\n    @Override\n    public int compareTo(DynamicField other) {\n      return other.wildcard.length() - wildcard.length();\n    }\n\n","sourceOld":"    /**\n     * Sort order is based on length of regex.  Longest comes first.\n     * @param other The object to compare to.\n     * @return a negative integer, zero, or a positive integer\n     * as this object is less than, equal to, or greater than\n     * the specified object.\n     */\n    @Override\n    public int compareTo(DynamicField other) {\n      return other.wildcard.length() - wildcard.length();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["245c71087515ed70d4fb9d9484f9dcbd79eebdfc","7530de27b87b961b51f01bd1299b7004d46e8823"],"38e3b736c7ca086d61b7dbb841c905ee115490da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","245c71087515ed70d4fb9d9484f9dcbd79eebdfc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c7e79e31f55cbb444e3023d430a340658755aa31":["7530de27b87b961b51f01bd1299b7004d46e8823"],"7530de27b87b961b51f01bd1299b7004d46e8823":["245c71087515ed70d4fb9d9484f9dcbd79eebdfc"],"245c71087515ed70d4fb9d9484f9dcbd79eebdfc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c7e79e31f55cbb444e3023d430a340658755aa31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7e79e31f55cbb444e3023d430a340658755aa31"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["4e6354dd7c71fe122926fc53d7d29f715b1283db"],"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38e3b736c7ca086d61b7dbb841c905ee115490da","245c71087515ed70d4fb9d9484f9dcbd79eebdfc"],"c7e79e31f55cbb444e3023d430a340658755aa31":["4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"245c71087515ed70d4fb9d9484f9dcbd79eebdfc":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","38e3b736c7ca086d61b7dbb841c905ee115490da","7530de27b87b961b51f01bd1299b7004d46e8823"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c7e79e31f55cbb444e3023d430a340658755aa31"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}