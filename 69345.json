{"path":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#waitForNodeChange(String,Slice,String).mjava","commits":[{"id":"4e6b620c271c84c0f14919eec7b90083b292ee51","date":1419461736,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#waitForNodeChange(String,Slice,String).mjava","pathOld":"/dev/null","sourceNew":"  int waitForNodeChange(String collectionName, Slice slice, String electionNode) throws InterruptedException, KeeperException {\n    String nodeName = LeaderElector.getNodeName(electionNode);\n    int oldSeq = LeaderElector.getSeq(electionNode);\n     for (int idx = 0; idx < 600; ++idx) {\n      ZkStateReader zkStateReader = coreContainer.getZkController().getZkStateReader();\n      List<String> electionNodes = OverseerCollectionProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n          ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n      for (String testNode : electionNodes) {\n        if (LeaderElector.getNodeName(testNode).equals(nodeName) && oldSeq != LeaderElector.getSeq(testNode)) {\n          return LeaderElector.getSeq(testNode);\n        }\n      }\n\n      Thread.sleep(100);\n    }\n    return -1;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ebd3a557326ef3eab85b73a8cff781f7d801248","date":1431620752,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#waitForNodeChange(String,Slice,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#waitForNodeChange(String,Slice,String).mjava","sourceNew":"  int waitForNodeChange(String collectionName, Slice slice, String electionNode) throws InterruptedException, KeeperException {\n    String nodeName = LeaderElector.getNodeName(electionNode);\n    int oldSeq = LeaderElector.getSeq(electionNode);\n    for (int idx = 0; idx < 600; ++idx) {\n      ZkStateReader zkStateReader = coreContainer.getZkController().getZkStateReader();\n      List<String> electionNodes = OverseerCollectionProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n          ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n      for (String testNode : electionNodes) {\n        if (LeaderElector.getNodeName(testNode).equals(nodeName) && oldSeq != LeaderElector.getSeq(testNode)) {\n          return LeaderElector.getSeq(testNode);\n        }\n      }\n\n      Thread.sleep(100);\n    }\n    return -1;\n  }\n\n","sourceOld":"  int waitForNodeChange(String collectionName, Slice slice, String electionNode) throws InterruptedException, KeeperException {\n    String nodeName = LeaderElector.getNodeName(electionNode);\n    int oldSeq = LeaderElector.getSeq(electionNode);\n     for (int idx = 0; idx < 600; ++idx) {\n      ZkStateReader zkStateReader = coreContainer.getZkController().getZkStateReader();\n      List<String> electionNodes = OverseerCollectionProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n          ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n      for (String testNode : electionNodes) {\n        if (LeaderElector.getNodeName(testNode).equals(nodeName) && oldSeq != LeaderElector.getSeq(testNode)) {\n          return LeaderElector.getSeq(testNode);\n        }\n      }\n\n      Thread.sleep(100);\n    }\n    return -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ebd3a557326ef3eab85b73a8cff781f7d801248":["4e6b620c271c84c0f14919eec7b90083b292ee51"],"4e6b620c271c84c0f14919eec7b90083b292ee51":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ebd3a557326ef3eab85b73a8cff781f7d801248"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4e6b620c271c84c0f14919eec7b90083b292ee51"],"9ebd3a557326ef3eab85b73a8cff781f7d801248":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4e6b620c271c84c0f14919eec7b90083b292ee51":["9ebd3a557326ef3eab85b73a8cff781f7d801248"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}