{"path":"lucene/src/test/org/apache/lucene/index/TestPerSegmentDeletes#part2(IndexWriter,RangeMergePolicy).mjava","commits":[{"id":"44fcbde6fb2ac44ee3b45e013e54a42911e689ff","date":1292065621,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerSegmentDeletes#part2(IndexWriter,RangeMergePolicy).mjava","pathOld":"/dev/null","sourceNew":"  /**\n  static boolean hasPendingDeletes(SegmentInfos infos) {\n    for (SegmentInfo info : infos) {\n      if (info.deletes.any()) {\n        return true;\n      }\n    }\n    return false;\n  }\n  **/\n  void part2(IndexWriter writer, RangeMergePolicy fsmp) throws Exception {\n    for (int x = 20; x < 25; x++) {\n      writer.addDocument(TestIndexWriterReader.createDocument(x, \"5\", 2));\n      //System.out.println(\"numRamDocs(\" + x + \")\" + writer.numRamDocs());\n    }\n    writer.flush(false, true, false);\n    for (int x = 25; x < 30; x++) {\n      writer.addDocument(TestIndexWriterReader.createDocument(x, \"5\", 2));\n      //System.out.println(\"numRamDocs(\" + x + \")\" + writer.numRamDocs());\n    }\n    writer.flush(false, true, false);\n    \n    //System.out.println(\"infos3:\"+writer.segmentInfos);\n    \n    Term delterm = new Term(\"id\", \"8\");\n    writer.deleteDocuments(delterm);\n    //System.out.println(\"segdels3:\" + writer.docWriter.deletesToString());\n    \n    fsmp.doMerge = true;\n    fsmp.start = 1;\n    fsmp.length = 2;\n    writer.maybeMerge();\n    \n    // deletes for info1, the newly created segment from the \n    // merge should have no deletes because they were applied in\n    // the merge\n    //SegmentInfo info1 = writer.segmentInfos.get(1);\n    //assertFalse(exists(info1, writer.docWriter.segmentDeletes));\n    \n    //System.out.println(\"infos4:\"+writer.segmentInfos);\n    //System.out.println(\"segdels4:\" + writer.docWriter.deletesToString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","date":1292695408,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerSegmentDeletes#part2(IndexWriter,RangeMergePolicy).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPerSegmentDeletes#part2(IndexWriter,RangeMergePolicy).mjava","sourceNew":"  /**\n  static boolean hasPendingDeletes(SegmentInfos infos) {\n    for (SegmentInfo info : infos) {\n      if (info.deletes.any()) {\n        return true;\n      }\n    }\n    return false;\n  }\n  **/\n  void part2(IndexWriter writer, RangeMergePolicy fsmp) throws Exception {\n    for (int x = 20; x < 25; x++) {\n      writer.addDocument(TestIndexWriterReader.createDocument(x, \"5\", 2));\n      //System.out.println(\"numRamDocs(\" + x + \")\" + writer.numRamDocs());\n    }\n    writer.flush(false, false);\n    for (int x = 25; x < 30; x++) {\n      writer.addDocument(TestIndexWriterReader.createDocument(x, \"5\", 2));\n      //System.out.println(\"numRamDocs(\" + x + \")\" + writer.numRamDocs());\n    }\n    writer.flush(false, false);\n    \n    //System.out.println(\"infos3:\"+writer.segmentInfos);\n    \n    Term delterm = new Term(\"id\", \"8\");\n    writer.deleteDocuments(delterm);\n    //System.out.println(\"segdels3:\" + writer.docWriter.deletesToString());\n    \n    fsmp.doMerge = true;\n    fsmp.start = 1;\n    fsmp.length = 2;\n    writer.maybeMerge();\n    \n    // deletes for info1, the newly created segment from the \n    // merge should have no deletes because they were applied in\n    // the merge\n    //SegmentInfo info1 = writer.segmentInfos.get(1);\n    //assertFalse(exists(info1, writer.docWriter.segmentDeletes));\n    \n    //System.out.println(\"infos4:\"+writer.segmentInfos);\n    //System.out.println(\"segdels4:\" + writer.docWriter.deletesToString());\n  }\n\n","sourceOld":"  /**\n  static boolean hasPendingDeletes(SegmentInfos infos) {\n    for (SegmentInfo info : infos) {\n      if (info.deletes.any()) {\n        return true;\n      }\n    }\n    return false;\n  }\n  **/\n  void part2(IndexWriter writer, RangeMergePolicy fsmp) throws Exception {\n    for (int x = 20; x < 25; x++) {\n      writer.addDocument(TestIndexWriterReader.createDocument(x, \"5\", 2));\n      //System.out.println(\"numRamDocs(\" + x + \")\" + writer.numRamDocs());\n    }\n    writer.flush(false, true, false);\n    for (int x = 25; x < 30; x++) {\n      writer.addDocument(TestIndexWriterReader.createDocument(x, \"5\", 2));\n      //System.out.println(\"numRamDocs(\" + x + \")\" + writer.numRamDocs());\n    }\n    writer.flush(false, true, false);\n    \n    //System.out.println(\"infos3:\"+writer.segmentInfos);\n    \n    Term delterm = new Term(\"id\", \"8\");\n    writer.deleteDocuments(delterm);\n    //System.out.println(\"segdels3:\" + writer.docWriter.deletesToString());\n    \n    fsmp.doMerge = true;\n    fsmp.start = 1;\n    fsmp.length = 2;\n    writer.maybeMerge();\n    \n    // deletes for info1, the newly created segment from the \n    // merge should have no deletes because they were applied in\n    // the merge\n    //SegmentInfo info1 = writer.segmentInfos.get(1);\n    //assertFalse(exists(info1, writer.docWriter.segmentDeletes));\n    \n    //System.out.println(\"infos4:\"+writer.segmentInfos);\n    //System.out.println(\"segdels4:\" + writer.docWriter.deletesToString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerSegmentDeletes#part2(IndexWriter,RangeMergePolicy).mjava","pathOld":"/dev/null","sourceNew":"  /**\n  static boolean hasPendingDeletes(SegmentInfos infos) {\n    for (SegmentInfo info : infos) {\n      if (info.deletes.any()) {\n        return true;\n      }\n    }\n    return false;\n  }\n  **/\n  void part2(IndexWriter writer, RangeMergePolicy fsmp) throws Exception {\n    for (int x = 20; x < 25; x++) {\n      writer.addDocument(TestIndexWriterReader.createDocument(x, \"5\", 2));\n      //System.out.println(\"numRamDocs(\" + x + \")\" + writer.numRamDocs());\n    }\n    writer.flush(false, false);\n    for (int x = 25; x < 30; x++) {\n      writer.addDocument(TestIndexWriterReader.createDocument(x, \"5\", 2));\n      //System.out.println(\"numRamDocs(\" + x + \")\" + writer.numRamDocs());\n    }\n    writer.flush(false, false);\n    \n    //System.out.println(\"infos3:\"+writer.segmentInfos);\n    \n    Term delterm = new Term(\"id\", \"8\");\n    writer.deleteDocuments(delterm);\n    //System.out.println(\"segdels3:\" + writer.docWriter.deletesToString());\n    \n    fsmp.doMerge = true;\n    fsmp.start = 1;\n    fsmp.length = 2;\n    writer.maybeMerge();\n    \n    // deletes for info1, the newly created segment from the \n    // merge should have no deletes because they were applied in\n    // the merge\n    //SegmentInfo info1 = writer.segmentInfos.get(1);\n    //assertFalse(exists(info1, writer.docWriter.segmentDeletes));\n    \n    //System.out.println(\"infos4:\"+writer.segmentInfos);\n    //System.out.println(\"segdels4:\" + writer.docWriter.deletesToString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerSegmentDeletes#part2(IndexWriter,RangeMergePolicy).mjava","pathOld":"/dev/null","sourceNew":"  /**\n  static boolean hasPendingDeletes(SegmentInfos infos) {\n    for (SegmentInfo info : infos) {\n      if (info.deletes.any()) {\n        return true;\n      }\n    }\n    return false;\n  }\n  **/\n  void part2(IndexWriter writer, RangeMergePolicy fsmp) throws Exception {\n    for (int x = 20; x < 25; x++) {\n      writer.addDocument(TestIndexWriterReader.createDocument(x, \"5\", 2));\n      //System.out.println(\"numRamDocs(\" + x + \")\" + writer.numRamDocs());\n    }\n    writer.flush(false, false);\n    for (int x = 25; x < 30; x++) {\n      writer.addDocument(TestIndexWriterReader.createDocument(x, \"5\", 2));\n      //System.out.println(\"numRamDocs(\" + x + \")\" + writer.numRamDocs());\n    }\n    writer.flush(false, false);\n\n    //System.out.println(\"infos3:\"+writer.segmentInfos);\n\n    Term delterm = new Term(\"id\", \"8\");\n    writer.deleteDocuments(delterm);\n    //System.out.println(\"segdels3:\" + writer.docWriter.deletesToString());\n\n    fsmp.doMerge = true;\n    fsmp.start = 1;\n    fsmp.length = 2;\n    writer.maybeMerge();\n\n    // deletes for info1, the newly created segment from the\n    // merge should have no deletes because they were applied in\n    // the merge\n    //SegmentInfo info1 = writer.segmentInfos.get(1);\n    //assertFalse(exists(info1, writer.docWriter.segmentDeletes));\n\n    //System.out.println(\"infos4:\"+writer.segmentInfos);\n    //System.out.println(\"segdels4:\" + writer.docWriter.deletesToString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerSegmentDeletes#part2(IndexWriter,RangeMergePolicy).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPerSegmentDeletes#part2(IndexWriter,RangeMergePolicy).mjava","sourceNew":"  /**\n  static boolean hasPendingDeletes(SegmentInfos infos) {\n    for (SegmentInfo info : infos) {\n      if (info.deletes.any()) {\n        return true;\n      }\n    }\n    return false;\n  }\n  **/\n  void part2(IndexWriter writer, RangeMergePolicy fsmp) throws Exception {\n    for (int x = 20; x < 25; x++) {\n      writer.addDocument(TestIndexWriterReader.createDocument(x, \"5\", 2));\n      //System.out.println(\"numRamDocs(\" + x + \")\" + writer.numRamDocs());\n    }\n    writer.flush(false, false);\n    for (int x = 25; x < 30; x++) {\n      writer.addDocument(TestIndexWriterReader.createDocument(x, \"5\", 2));\n      //System.out.println(\"numRamDocs(\" + x + \")\" + writer.numRamDocs());\n    }\n    writer.flush(false, false);\n\n    //System.out.println(\"infos3:\"+writer.segmentInfos);\n\n    Term delterm = new Term(\"id\", \"8\");\n    writer.deleteDocuments(delterm);\n    //System.out.println(\"segdels3:\" + writer.docWriter.deletesToString());\n\n    fsmp.doMerge = true;\n    fsmp.start = 1;\n    fsmp.length = 2;\n    writer.maybeMerge();\n\n    // deletes for info1, the newly created segment from the\n    // merge should have no deletes because they were applied in\n    // the merge\n    //SegmentInfo info1 = writer.segmentInfos.get(1);\n    //assertFalse(exists(info1, writer.docWriter.segmentDeletes));\n\n    //System.out.println(\"infos4:\"+writer.segmentInfos);\n    //System.out.println(\"segdels4:\" + writer.docWriter.deletesToString());\n  }\n\n","sourceOld":"  /**\n  static boolean hasPendingDeletes(SegmentInfos infos) {\n    for (SegmentInfo info : infos) {\n      if (info.deletes.any()) {\n        return true;\n      }\n    }\n    return false;\n  }\n  **/\n  void part2(IndexWriter writer, RangeMergePolicy fsmp) throws Exception {\n    for (int x = 20; x < 25; x++) {\n      writer.addDocument(TestIndexWriterReader.createDocument(x, \"5\", 2));\n      //System.out.println(\"numRamDocs(\" + x + \")\" + writer.numRamDocs());\n    }\n    writer.flush(false, false);\n    for (int x = 25; x < 30; x++) {\n      writer.addDocument(TestIndexWriterReader.createDocument(x, \"5\", 2));\n      //System.out.println(\"numRamDocs(\" + x + \")\" + writer.numRamDocs());\n    }\n    writer.flush(false, false);\n    \n    //System.out.println(\"infos3:\"+writer.segmentInfos);\n    \n    Term delterm = new Term(\"id\", \"8\");\n    writer.deleteDocuments(delterm);\n    //System.out.println(\"segdels3:\" + writer.docWriter.deletesToString());\n    \n    fsmp.doMerge = true;\n    fsmp.start = 1;\n    fsmp.length = 2;\n    writer.maybeMerge();\n    \n    // deletes for info1, the newly created segment from the \n    // merge should have no deletes because they were applied in\n    // the merge\n    //SegmentInfo info1 = writer.segmentInfos.get(1);\n    //assertFalse(exists(info1, writer.docWriter.segmentDeletes));\n    \n    //System.out.println(\"infos4:\"+writer.segmentInfos);\n    //System.out.println(\"segdels4:\" + writer.docWriter.deletesToString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerSegmentDeletes#part2(IndexWriter,RangeMergePolicy).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPerSegmentDeletes#part2(IndexWriter,RangeMergePolicy).mjava","sourceNew":"  /**\n  static boolean hasPendingDeletes(SegmentInfos infos) {\n    for (SegmentInfo info : infos) {\n      if (info.deletes.any()) {\n        return true;\n      }\n    }\n    return false;\n  }\n  **/\n  void part2(IndexWriter writer, RangeMergePolicy fsmp) throws Exception {\n    for (int x = 20; x < 25; x++) {\n      writer.addDocument(TestIndexWriterReader.createDocument(x, \"5\", 2));\n      //System.out.println(\"numRamDocs(\" + x + \")\" + writer.numRamDocs());\n    }\n    writer.flush(false, false);\n    for (int x = 25; x < 30; x++) {\n      writer.addDocument(TestIndexWriterReader.createDocument(x, \"5\", 2));\n      //System.out.println(\"numRamDocs(\" + x + \")\" + writer.numRamDocs());\n    }\n    writer.flush(false, false);\n\n    //System.out.println(\"infos3:\"+writer.segmentInfos);\n\n    Term delterm = new Term(\"id\", \"8\");\n    writer.deleteDocuments(delterm);\n    //System.out.println(\"segdels3:\" + writer.docWriter.deletesToString());\n\n    fsmp.doMerge = true;\n    fsmp.start = 1;\n    fsmp.length = 2;\n    writer.maybeMerge();\n\n    // deletes for info1, the newly created segment from the\n    // merge should have no deletes because they were applied in\n    // the merge\n    //SegmentInfo info1 = writer.segmentInfos.get(1);\n    //assertFalse(exists(info1, writer.docWriter.segmentDeletes));\n\n    //System.out.println(\"infos4:\"+writer.segmentInfos);\n    //System.out.println(\"segdels4:\" + writer.docWriter.deletesToString());\n  }\n\n","sourceOld":"  /**\n  static boolean hasPendingDeletes(SegmentInfos infos) {\n    for (SegmentInfo info : infos) {\n      if (info.deletes.any()) {\n        return true;\n      }\n    }\n    return false;\n  }\n  **/\n  void part2(IndexWriter writer, RangeMergePolicy fsmp) throws Exception {\n    for (int x = 20; x < 25; x++) {\n      writer.addDocument(TestIndexWriterReader.createDocument(x, \"5\", 2));\n      //System.out.println(\"numRamDocs(\" + x + \")\" + writer.numRamDocs());\n    }\n    writer.flush(false, false);\n    for (int x = 25; x < 30; x++) {\n      writer.addDocument(TestIndexWriterReader.createDocument(x, \"5\", 2));\n      //System.out.println(\"numRamDocs(\" + x + \")\" + writer.numRamDocs());\n    }\n    writer.flush(false, false);\n    \n    //System.out.println(\"infos3:\"+writer.segmentInfos);\n    \n    Term delterm = new Term(\"id\", \"8\");\n    writer.deleteDocuments(delterm);\n    //System.out.println(\"segdels3:\" + writer.docWriter.deletesToString());\n    \n    fsmp.doMerge = true;\n    fsmp.start = 1;\n    fsmp.length = 2;\n    writer.maybeMerge();\n    \n    // deletes for info1, the newly created segment from the \n    // merge should have no deletes because they were applied in\n    // the merge\n    //SegmentInfo info1 = writer.segmentInfos.get(1);\n    //assertFalse(exists(info1, writer.docWriter.segmentDeletes));\n    \n    //System.out.println(\"infos4:\"+writer.segmentInfos);\n    //System.out.println(\"segdels4:\" + writer.docWriter.deletesToString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"786a4d25ca958a1f315a9d6a74f0441fdafcd522","date":1305734256,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerSegmentDeletes#part2(IndexWriter,RangeMergePolicy).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPerSegmentDeletes#part2(IndexWriter,RangeMergePolicy).mjava","sourceNew":"  /**\n  static boolean hasPendingDeletes(SegmentInfos infos) {\n    for (SegmentInfo info : infos) {\n      if (info.deletes.any()) {\n        return true;\n      }\n    }\n    return false;\n  }\n  **/\n  void part2(IndexWriter writer, RangeMergePolicy fsmp) throws Exception {\n    for (int x = 20; x < 25; x++) {\n      writer.addDocument(TestIndexWriterReader.createDocument(x, \"5\", 2));\n      //System.out.println(\"numRamDocs(\" + x + \")\" + writer.numRamDocs());\n    }\n    writer.flush(false, false);\n    for (int x = 25; x < 30; x++) {\n      writer.addDocument(TestIndexWriterReader.createDocument(x, \"5\", 2));\n      //System.out.println(\"numRamDocs(\" + x + \")\" + writer.numRamDocs());\n    }\n    writer.flush(false, false);\n\n    //System.out.println(\"infos3:\"+writer.segmentInfos);\n\n    Term delterm = new Term(\"id\", \"8\");\n    writer.deleteDocuments(delterm);\n    //System.out.println(\"segdels3:\" + writer.docWriter.deletesToString());\n\n    fsmp.doMerge = true;\n    fsmp.start = 1;\n    fsmp.length = 2;\n    writer.maybeMerge();\n\n    // deletes for info1, the newly created segment from the\n    // merge should have no deletes because they were applied in\n    // the merge\n    //SegmentInfo info1 = writer.segmentInfos.info(1);\n    //assertFalse(exists(info1, writer.docWriter.segmentDeletes));\n\n    //System.out.println(\"infos4:\"+writer.segmentInfos);\n    //System.out.println(\"segdels4:\" + writer.docWriter.deletesToString());\n  }\n\n","sourceOld":"  /**\n  static boolean hasPendingDeletes(SegmentInfos infos) {\n    for (SegmentInfo info : infos) {\n      if (info.deletes.any()) {\n        return true;\n      }\n    }\n    return false;\n  }\n  **/\n  void part2(IndexWriter writer, RangeMergePolicy fsmp) throws Exception {\n    for (int x = 20; x < 25; x++) {\n      writer.addDocument(TestIndexWriterReader.createDocument(x, \"5\", 2));\n      //System.out.println(\"numRamDocs(\" + x + \")\" + writer.numRamDocs());\n    }\n    writer.flush(false, false);\n    for (int x = 25; x < 30; x++) {\n      writer.addDocument(TestIndexWriterReader.createDocument(x, \"5\", 2));\n      //System.out.println(\"numRamDocs(\" + x + \")\" + writer.numRamDocs());\n    }\n    writer.flush(false, false);\n\n    //System.out.println(\"infos3:\"+writer.segmentInfos);\n\n    Term delterm = new Term(\"id\", \"8\");\n    writer.deleteDocuments(delterm);\n    //System.out.println(\"segdels3:\" + writer.docWriter.deletesToString());\n\n    fsmp.doMerge = true;\n    fsmp.start = 1;\n    fsmp.length = 2;\n    writer.maybeMerge();\n\n    // deletes for info1, the newly created segment from the\n    // merge should have no deletes because they were applied in\n    // the merge\n    //SegmentInfo info1 = writer.segmentInfos.get(1);\n    //assertFalse(exists(info1, writer.docWriter.segmentDeletes));\n\n    //System.out.println(\"infos4:\"+writer.segmentInfos);\n    //System.out.println(\"segdels4:\" + writer.docWriter.deletesToString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerSegmentDeletes#part2(IndexWriter,RangeMergePolicy).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPerSegmentDeletes#part2(IndexWriter,RangeMergePolicy).mjava","sourceNew":"  /**\n  static boolean hasPendingDeletes(SegmentInfos infos) {\n    for (SegmentInfo info : infos) {\n      if (info.deletes.any()) {\n        return true;\n      }\n    }\n    return false;\n  }\n  **/\n  void part2(IndexWriter writer, RangeMergePolicy fsmp) throws Exception {\n    for (int x = 20; x < 25; x++) {\n      writer.addDocument(TestIndexWriterReader.createDocument(x, \"5\", 2));\n      //System.out.println(\"numRamDocs(\" + x + \")\" + writer.numRamDocs());\n    }\n    writer.flush(false, false);\n    for (int x = 25; x < 30; x++) {\n      writer.addDocument(TestIndexWriterReader.createDocument(x, \"5\", 2));\n      //System.out.println(\"numRamDocs(\" + x + \")\" + writer.numRamDocs());\n    }\n    writer.flush(false, false);\n\n    //System.out.println(\"infos3:\"+writer.segmentInfos);\n\n    Term delterm = new Term(\"id\", \"8\");\n    writer.deleteDocuments(delterm);\n    //System.out.println(\"segdels3:\" + writer.docWriter.deletesToString());\n\n    fsmp.doMerge = true;\n    fsmp.start = 1;\n    fsmp.length = 2;\n    writer.maybeMerge();\n\n    // deletes for info1, the newly created segment from the\n    // merge should have no deletes because they were applied in\n    // the merge\n    //SegmentInfo info1 = writer.segmentInfos.info(1);\n    //assertFalse(exists(info1, writer.docWriter.segmentDeletes));\n\n    //System.out.println(\"infos4:\"+writer.segmentInfos);\n    //System.out.println(\"segdels4:\" + writer.docWriter.deletesToString());\n  }\n\n","sourceOld":"  /**\n  static boolean hasPendingDeletes(SegmentInfos infos) {\n    for (SegmentInfo info : infos) {\n      if (info.deletes.any()) {\n        return true;\n      }\n    }\n    return false;\n  }\n  **/\n  void part2(IndexWriter writer, RangeMergePolicy fsmp) throws Exception {\n    for (int x = 20; x < 25; x++) {\n      writer.addDocument(TestIndexWriterReader.createDocument(x, \"5\", 2));\n      //System.out.println(\"numRamDocs(\" + x + \")\" + writer.numRamDocs());\n    }\n    writer.flush(false, false);\n    for (int x = 25; x < 30; x++) {\n      writer.addDocument(TestIndexWriterReader.createDocument(x, \"5\", 2));\n      //System.out.println(\"numRamDocs(\" + x + \")\" + writer.numRamDocs());\n    }\n    writer.flush(false, false);\n\n    //System.out.println(\"infos3:\"+writer.segmentInfos);\n\n    Term delterm = new Term(\"id\", \"8\");\n    writer.deleteDocuments(delterm);\n    //System.out.println(\"segdels3:\" + writer.docWriter.deletesToString());\n\n    fsmp.doMerge = true;\n    fsmp.start = 1;\n    fsmp.length = 2;\n    writer.maybeMerge();\n\n    // deletes for info1, the newly created segment from the\n    // merge should have no deletes because they were applied in\n    // the merge\n    //SegmentInfo info1 = writer.segmentInfos.get(1);\n    //assertFalse(exists(info1, writer.docWriter.segmentDeletes));\n\n    //System.out.println(\"infos4:\"+writer.segmentInfos);\n    //System.out.println(\"segdels4:\" + writer.docWriter.deletesToString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerSegmentDeletes#part2(IndexWriter,RangeMergePolicy).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPerSegmentDeletes#part2(IndexWriter,RangeMergePolicy).mjava","sourceNew":"  /**\n  static boolean hasPendingDeletes(SegmentInfos infos) {\n    for (SegmentInfo info : infos) {\n      if (info.deletes.any()) {\n        return true;\n      }\n    }\n    return false;\n  }\n  **/\n  void part2(IndexWriter writer, RangeMergePolicy fsmp) throws Exception {\n    for (int x = 20; x < 25; x++) {\n      writer.addDocument(TestIndexWriterReader.createDocument(x, \"5\", 2));\n      //System.out.println(\"numRamDocs(\" + x + \")\" + writer.numRamDocs());\n    }\n    writer.flush(false, false);\n    for (int x = 25; x < 30; x++) {\n      writer.addDocument(TestIndexWriterReader.createDocument(x, \"5\", 2));\n      //System.out.println(\"numRamDocs(\" + x + \")\" + writer.numRamDocs());\n    }\n    writer.flush(false, false);\n\n    //System.out.println(\"infos3:\"+writer.segmentInfos);\n\n    Term delterm = new Term(\"id\", \"8\");\n    writer.deleteDocuments(delterm);\n    //System.out.println(\"segdels3:\" + writer.docWriter.deletesToString());\n\n    fsmp.doMerge = true;\n    fsmp.start = 1;\n    fsmp.length = 2;\n    writer.maybeMerge();\n\n    // deletes for info1, the newly created segment from the\n    // merge should have no deletes because they were applied in\n    // the merge\n    //SegmentInfo info1 = writer.segmentInfos.info(1);\n    //assertFalse(exists(info1, writer.docWriter.segmentDeletes));\n\n    //System.out.println(\"infos4:\"+writer.segmentInfos);\n    //System.out.println(\"segdels4:\" + writer.docWriter.deletesToString());\n  }\n\n","sourceOld":"  /**\n  static boolean hasPendingDeletes(SegmentInfos infos) {\n    for (SegmentInfo info : infos) {\n      if (info.deletes.any()) {\n        return true;\n      }\n    }\n    return false;\n  }\n  **/\n  void part2(IndexWriter writer, RangeMergePolicy fsmp) throws Exception {\n    for (int x = 20; x < 25; x++) {\n      writer.addDocument(TestIndexWriterReader.createDocument(x, \"5\", 2));\n      //System.out.println(\"numRamDocs(\" + x + \")\" + writer.numRamDocs());\n    }\n    writer.flush(false, false);\n    for (int x = 25; x < 30; x++) {\n      writer.addDocument(TestIndexWriterReader.createDocument(x, \"5\", 2));\n      //System.out.println(\"numRamDocs(\" + x + \")\" + writer.numRamDocs());\n    }\n    writer.flush(false, false);\n    \n    //System.out.println(\"infos3:\"+writer.segmentInfos);\n    \n    Term delterm = new Term(\"id\", \"8\");\n    writer.deleteDocuments(delterm);\n    //System.out.println(\"segdels3:\" + writer.docWriter.deletesToString());\n    \n    fsmp.doMerge = true;\n    fsmp.start = 1;\n    fsmp.length = 2;\n    writer.maybeMerge();\n    \n    // deletes for info1, the newly created segment from the \n    // merge should have no deletes because they were applied in\n    // the merge\n    //SegmentInfo info1 = writer.segmentInfos.get(1);\n    //assertFalse(exists(info1, writer.docWriter.segmentDeletes));\n    \n    //System.out.println(\"infos4:\"+writer.segmentInfos);\n    //System.out.println(\"segdels4:\" + writer.docWriter.deletesToString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00743482822ec0841b0344a37944b666e6a0228d","date":1313588663,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerSegmentDeletes#part2(IndexWriter,RangeMergePolicy).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPerSegmentDeletes#part2(IndexWriter,RangeMergePolicy).mjava","sourceNew":"  /**\n  static boolean hasPendingDeletes(SegmentInfos infos) {\n    for (SegmentInfo info : infos) {\n      if (info.deletes.any()) {\n        return true;\n      }\n    }\n    return false;\n  }\n  **/\n  void part2(IndexWriter writer, RangeMergePolicy fsmp) throws Exception {\n    for (int x = 20; x < 25; x++) {\n      writer.addDocument(DocHelper.createDocument(x, \"5\", 2));\n      //System.out.println(\"numRamDocs(\" + x + \")\" + writer.numRamDocs());\n    }\n    writer.flush(false, false);\n    for (int x = 25; x < 30; x++) {\n      writer.addDocument(DocHelper.createDocument(x, \"5\", 2));\n      //System.out.println(\"numRamDocs(\" + x + \")\" + writer.numRamDocs());\n    }\n    writer.flush(false, false);\n\n    //System.out.println(\"infos3:\"+writer.segmentInfos);\n\n    Term delterm = new Term(\"id\", \"8\");\n    writer.deleteDocuments(delterm);\n    //System.out.println(\"segdels3:\" + writer.docWriter.deletesToString());\n\n    fsmp.doMerge = true;\n    fsmp.start = 1;\n    fsmp.length = 2;\n    writer.maybeMerge();\n\n    // deletes for info1, the newly created segment from the\n    // merge should have no deletes because they were applied in\n    // the merge\n    //SegmentInfo info1 = writer.segmentInfos.info(1);\n    //assertFalse(exists(info1, writer.docWriter.segmentDeletes));\n\n    //System.out.println(\"infos4:\"+writer.segmentInfos);\n    //System.out.println(\"segdels4:\" + writer.docWriter.deletesToString());\n  }\n\n","sourceOld":"  /**\n  static boolean hasPendingDeletes(SegmentInfos infos) {\n    for (SegmentInfo info : infos) {\n      if (info.deletes.any()) {\n        return true;\n      }\n    }\n    return false;\n  }\n  **/\n  void part2(IndexWriter writer, RangeMergePolicy fsmp) throws Exception {\n    for (int x = 20; x < 25; x++) {\n      writer.addDocument(TestIndexWriterReader.createDocument(x, \"5\", 2));\n      //System.out.println(\"numRamDocs(\" + x + \")\" + writer.numRamDocs());\n    }\n    writer.flush(false, false);\n    for (int x = 25; x < 30; x++) {\n      writer.addDocument(TestIndexWriterReader.createDocument(x, \"5\", 2));\n      //System.out.println(\"numRamDocs(\" + x + \")\" + writer.numRamDocs());\n    }\n    writer.flush(false, false);\n\n    //System.out.println(\"infos3:\"+writer.segmentInfos);\n\n    Term delterm = new Term(\"id\", \"8\");\n    writer.deleteDocuments(delterm);\n    //System.out.println(\"segdels3:\" + writer.docWriter.deletesToString());\n\n    fsmp.doMerge = true;\n    fsmp.start = 1;\n    fsmp.length = 2;\n    writer.maybeMerge();\n\n    // deletes for info1, the newly created segment from the\n    // merge should have no deletes because they were applied in\n    // the merge\n    //SegmentInfo info1 = writer.segmentInfos.info(1);\n    //assertFalse(exists(info1, writer.docWriter.segmentDeletes));\n\n    //System.out.println(\"infos4:\"+writer.segmentInfos);\n    //System.out.println(\"segdels4:\" + writer.docWriter.deletesToString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPerSegmentDeletes#part2(IndexWriter,RangeMergePolicy).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPerSegmentDeletes#part2(IndexWriter,RangeMergePolicy).mjava","sourceNew":"  /**\n  static boolean hasPendingDeletes(SegmentInfos infos) {\n    for (SegmentInfo info : infos) {\n      if (info.deletes.any()) {\n        return true;\n      }\n    }\n    return false;\n  }\n  **/\n  void part2(IndexWriter writer, RangeMergePolicy fsmp) throws Exception {\n    for (int x = 20; x < 25; x++) {\n      writer.addDocument(DocHelper.createDocument(x, \"5\", 2));\n      //System.out.println(\"numRamDocs(\" + x + \")\" + writer.numRamDocs());\n    }\n    writer.flush(false, false);\n    for (int x = 25; x < 30; x++) {\n      writer.addDocument(DocHelper.createDocument(x, \"5\", 2));\n      //System.out.println(\"numRamDocs(\" + x + \")\" + writer.numRamDocs());\n    }\n    writer.flush(false, false);\n\n    //System.out.println(\"infos3:\"+writer.segmentInfos);\n\n    Term delterm = new Term(\"id\", \"8\");\n    writer.deleteDocuments(delterm);\n    //System.out.println(\"segdels3:\" + writer.docWriter.deletesToString());\n\n    fsmp.doMerge = true;\n    fsmp.start = 1;\n    fsmp.length = 2;\n    writer.maybeMerge();\n\n    // deletes for info1, the newly created segment from the\n    // merge should have no deletes because they were applied in\n    // the merge\n    //SegmentInfo info1 = writer.segmentInfos.info(1);\n    //assertFalse(exists(info1, writer.docWriter.segmentDeletes));\n\n    //System.out.println(\"infos4:\"+writer.segmentInfos);\n    //System.out.println(\"segdels4:\" + writer.docWriter.deletesToString());\n  }\n\n","sourceOld":"  /**\n  static boolean hasPendingDeletes(SegmentInfos infos) {\n    for (SegmentInfo info : infos) {\n      if (info.deletes.any()) {\n        return true;\n      }\n    }\n    return false;\n  }\n  **/\n  void part2(IndexWriter writer, RangeMergePolicy fsmp) throws Exception {\n    for (int x = 20; x < 25; x++) {\n      writer.addDocument(DocHelper.createDocument(x, \"5\", 2));\n      //System.out.println(\"numRamDocs(\" + x + \")\" + writer.numRamDocs());\n    }\n    writer.flush(false, false);\n    for (int x = 25; x < 30; x++) {\n      writer.addDocument(DocHelper.createDocument(x, \"5\", 2));\n      //System.out.println(\"numRamDocs(\" + x + \")\" + writer.numRamDocs());\n    }\n    writer.flush(false, false);\n\n    //System.out.println(\"infos3:\"+writer.segmentInfos);\n\n    Term delterm = new Term(\"id\", \"8\");\n    writer.deleteDocuments(delterm);\n    //System.out.println(\"segdels3:\" + writer.docWriter.deletesToString());\n\n    fsmp.doMerge = true;\n    fsmp.start = 1;\n    fsmp.length = 2;\n    writer.maybeMerge();\n\n    // deletes for info1, the newly created segment from the\n    // merge should have no deletes because they were applied in\n    // the merge\n    //SegmentInfo info1 = writer.segmentInfos.info(1);\n    //assertFalse(exists(info1, writer.docWriter.segmentDeletes));\n\n    //System.out.println(\"infos4:\"+writer.segmentInfos);\n    //System.out.println(\"segdels4:\" + writer.docWriter.deletesToString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["00743482822ec0841b0344a37944b666e6a0228d"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"00743482822ec0841b0344a37944b666e6a0228d":["786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"786a4d25ca958a1f315a9d6a74f0441fdafcd522":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["135621f3a0670a9394eb563224a3b76cc4dddc0f","786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"a3776dccca01c11e7046323cfad46a3b4a471233":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["c3a8a449466c1ff7ce2274fe73dab487256964b4"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["135621f3a0670a9394eb563224a3b76cc4dddc0f","786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"00743482822ec0841b0344a37944b666e6a0228d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"786a4d25ca958a1f315a9d6a74f0441fdafcd522":["00743482822ec0841b0344a37944b666e6a0228d","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["b3e06be49006ecac364d39d12b9c9f74882f9b9f","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a3776dccca01c11e7046323cfad46a3b4a471233"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}