{"path":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#getMatches(IndexSearcher,Query).mjava","commits":[{"id":"25f698887111a682424e759ba36083180899a1fd","date":1423588899,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#getMatches(IndexSearcher,Query).mjava","pathOld":"/dev/null","sourceNew":"  private static BitSet getMatches(IndexSearcher searcher, Query query) throws IOException {\n    BitSet set = new BitSet();\n    searcher.search(query, new SimpleCollector() {\n      int docBase = 0;\n      @Override\n      public boolean needsScores() {\n        return random().nextBoolean();\n      }\n      @Override\n      protected void doSetNextReader(LeafReaderContext context)\n          throws IOException {\n        super.doSetNextReader(context);\n        docBase = context.docBase;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        set.set(docBase + doc);\n      }\n    });\n    return set;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#getMatches(IndexSearcher,Query).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#getMatches(IndexSearcher,Query).mjava","sourceNew":"  private static BitSet getMatches(IndexSearcher searcher, Query query) throws IOException {\n    BitSet set = new BitSet();\n    searcher.search(query, new SimpleCollector() {\n      int docBase = 0;\n      @Override\n      public ScoreMode scoreMode() {\n        return ScoreMode.COMPLETE_NO_SCORES;\n      }\n      @Override\n      protected void doSetNextReader(LeafReaderContext context)\n          throws IOException {\n        super.doSetNextReader(context);\n        docBase = context.docBase;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        set.set(docBase + doc);\n      }\n    });\n    return set;\n  }\n\n","sourceOld":"  private static BitSet getMatches(IndexSearcher searcher, Query query) throws IOException {\n    BitSet set = new BitSet();\n    searcher.search(query, new SimpleCollector() {\n      int docBase = 0;\n      @Override\n      public boolean needsScores() {\n        return random().nextBoolean();\n      }\n      @Override\n      protected void doSetNextReader(LeafReaderContext context)\n          throws IOException {\n        super.doSetNextReader(context);\n        docBase = context.docBase;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        set.set(docBase + doc);\n      }\n    });\n    return set;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#getMatches(IndexSearcher,Query).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#getMatches(IndexSearcher,Query).mjava","sourceNew":"  private static BitSet getMatches(IndexSearcher searcher, Query query) throws IOException {\n    BitSet set = new BitSet();\n    searcher.search(query, new SimpleCollector() {\n      int docBase = 0;\n      @Override\n      public ScoreMode scoreMode() {\n        return ScoreMode.COMPLETE_NO_SCORES;\n      }\n      @Override\n      protected void doSetNextReader(LeafReaderContext context)\n          throws IOException {\n        super.doSetNextReader(context);\n        docBase = context.docBase;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        set.set(docBase + doc);\n      }\n    });\n    return set;\n  }\n\n","sourceOld":"  private static BitSet getMatches(IndexSearcher searcher, Query query) throws IOException {\n    BitSet set = new BitSet();\n    searcher.search(query, new SimpleCollector() {\n      int docBase = 0;\n      @Override\n      public boolean needsScores() {\n        return random().nextBoolean();\n      }\n      @Override\n      protected void doSetNextReader(LeafReaderContext context)\n          throws IOException {\n        super.doSetNextReader(context);\n        docBase = context.docBase;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        set.set(docBase + doc);\n      }\n    });\n    return set;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["25f698887111a682424e759ba36083180899a1fd"],"25f698887111a682424e759ba36083180899a1fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["25f698887111a682424e759ba36083180899a1fd","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["25f698887111a682424e759ba36083180899a1fd"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"25f698887111a682424e759ba36083180899a1fd":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"417142ff08fda9cf0b72d5133e63097a166c6458":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}