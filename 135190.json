{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.SmallDocSet#iterator().mjava","commits":[{"id":"69da1c397a55d488a19e555c8da635417e2dfd47","date":1365020983,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.SmallDocSet#iterator().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public DocIdSetIterator iterator() throws IOException {\n      if (size() == 0)\n        return null;\n      //copy the unsorted values to a new array then sort them\n      int d = 0;\n      final int[] docs = new int[intSet.size()];\n      for (int v : intSet.keys) {\n        if (v == intSet.emptyVal)\n          continue;\n        docs[d++] = v;\n      }\n      assert d == intSet.size();\n      final int size = d;\n\n      //sort them\n      Arrays.sort(docs, 0, size);\n\n      return new DocIdSetIterator() {\n        int idx = -1;\n        @Override\n        public int docID() {\n          if (idx >= 0 && idx < size)\n            return docs[idx];\n          else\n            return -1;\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          if (++idx < size)\n            return docs[idx];\n          return NO_MORE_DOCS;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          //for this small set this is likely faster vs. a binary search\n          // into the sorted array\n          int doc;\n          while ((doc = nextDoc()) < target) {\n          }\n          return doc;\n        }\n\n        @Override\n        public long cost() {\n          return size;\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fe43a17fb193c95257604ee5486e9f6e2a392c28"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe43a17fb193c95257604ee5486e9f6e2a392c28","date":1365104925,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.SmallDocSet#iterator().mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.SmallDocSet#iterator().mjava","sourceNew":"    @Override\n    public DocIdSetIterator iterator() throws IOException {\n      if (size() == 0)\n        return null;\n      //copy the unsorted values to a new array then sort them\n      int d = 0;\n      final int[] docs = new int[intSet.size()];\n      for (int v : intSet.keys) {\n        if (v == intSet.emptyVal)\n          continue;\n        docs[d++] = v;\n      }\n      assert d == intSet.size();\n      final int size = d;\n\n      //sort them\n      Arrays.sort(docs, 0, size);\n\n      return new DocIdSetIterator() {\n        int idx = -1;\n        @Override\n        public int docID() {\n          if (idx >= 0 && idx < size)\n            return docs[idx];\n          else\n            return -1;\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          if (++idx < size)\n            return docs[idx];\n          return NO_MORE_DOCS;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          //for this small set this is likely faster vs. a binary search\n          // into the sorted array\n          return slowAdvance(target);\n        }\n\n        @Override\n        public long cost() {\n          return size;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public DocIdSetIterator iterator() throws IOException {\n      if (size() == 0)\n        return null;\n      //copy the unsorted values to a new array then sort them\n      int d = 0;\n      final int[] docs = new int[intSet.size()];\n      for (int v : intSet.keys) {\n        if (v == intSet.emptyVal)\n          continue;\n        docs[d++] = v;\n      }\n      assert d == intSet.size();\n      final int size = d;\n\n      //sort them\n      Arrays.sort(docs, 0, size);\n\n      return new DocIdSetIterator() {\n        int idx = -1;\n        @Override\n        public int docID() {\n          if (idx >= 0 && idx < size)\n            return docs[idx];\n          else\n            return -1;\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          if (++idx < size)\n            return docs[idx];\n          return NO_MORE_DOCS;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          //for this small set this is likely faster vs. a binary search\n          // into the sorted array\n          int doc;\n          while ((doc = nextDoc()) < target) {\n          }\n          return doc;\n        }\n\n        @Override\n        public long cost() {\n          return size;\n        }\n      };\n    }\n\n","bugFix":["69da1c397a55d488a19e555c8da635417e2dfd47"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac499dbbdb250b9bf6a4846ff4db7b1cb304f9c5","date":1429083443,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.SmallDocSet#iterator().mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.SmallDocSet#iterator().mjava","sourceNew":"    @Override\n    public DocIdSetIterator iterator() throws IOException {\n      if (size() == 0)\n        return null;\n      //copy the unsorted values to a new array then sort them\n      int d = 0;\n      final int[] docs = new int[intSet.size()];\n      for (int v : intSet.keys) {\n        if (v == intSet.emptyVal)\n          continue;\n        docs[d++] = v;\n      }\n      assert d == intSet.size();\n      final int size = d;\n\n      //sort them\n      Arrays.sort(docs, 0, size);\n\n      return new DocIdSetIterator() {\n        int idx = -1;\n        @Override\n        public int docID() {\n          if (idx < 0) {\n            return -1;\n          } else if (idx < size) {\n            return docs[idx];\n          } else {\n            return NO_MORE_DOCS;\n          }\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          if (++idx < size)\n            return docs[idx];\n          return NO_MORE_DOCS;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          //for this small set this is likely faster vs. a binary search\n          // into the sorted array\n          return slowAdvance(target);\n        }\n\n        @Override\n        public long cost() {\n          return size;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public DocIdSetIterator iterator() throws IOException {\n      if (size() == 0)\n        return null;\n      //copy the unsorted values to a new array then sort them\n      int d = 0;\n      final int[] docs = new int[intSet.size()];\n      for (int v : intSet.keys) {\n        if (v == intSet.emptyVal)\n          continue;\n        docs[d++] = v;\n      }\n      assert d == intSet.size();\n      final int size = d;\n\n      //sort them\n      Arrays.sort(docs, 0, size);\n\n      return new DocIdSetIterator() {\n        int idx = -1;\n        @Override\n        public int docID() {\n          if (idx >= 0 && idx < size)\n            return docs[idx];\n          else\n            return -1;\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          if (++idx < size)\n            return docs[idx];\n          return NO_MORE_DOCS;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          //for this small set this is likely faster vs. a binary search\n          // into the sorted array\n          return slowAdvance(target);\n        }\n\n        @Override\n        public long cost() {\n          return size;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"672b198fc3dce868916c727917cae58c2906763d","date":1443669960,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeQuery.SmallDocSet#iterator().mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.SmallDocSet#iterator().mjava","sourceNew":"    @Override\n    public DocIdSetIterator iterator() throws IOException {\n      if (size() == 0)\n        return null;\n      //copy the unsorted values to a new array then sort them\n      int d = 0;\n      final int[] docs = new int[intSet.size()];\n      for (int v : intSet.keys) {\n        if (v == intSet.emptyVal)\n          continue;\n        docs[d++] = v;\n      }\n      assert d == intSet.size();\n      final int size = d;\n\n      //sort them\n      Arrays.sort(docs, 0, size);\n\n      return new DocIdSetIterator() {\n        int idx = -1;\n        @Override\n        public int docID() {\n          if (idx < 0) {\n            return -1;\n          } else if (idx < size) {\n            return docs[idx];\n          } else {\n            return NO_MORE_DOCS;\n          }\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          if (++idx < size)\n            return docs[idx];\n          return NO_MORE_DOCS;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          //for this small set this is likely faster vs. a binary search\n          // into the sorted array\n          return slowAdvance(target);\n        }\n\n        @Override\n        public long cost() {\n          return size;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public DocIdSetIterator iterator() throws IOException {\n      if (size() == 0)\n        return null;\n      //copy the unsorted values to a new array then sort them\n      int d = 0;\n      final int[] docs = new int[intSet.size()];\n      for (int v : intSet.keys) {\n        if (v == intSet.emptyVal)\n          continue;\n        docs[d++] = v;\n      }\n      assert d == intSet.size();\n      final int size = d;\n\n      //sort them\n      Arrays.sort(docs, 0, size);\n\n      return new DocIdSetIterator() {\n        int idx = -1;\n        @Override\n        public int docID() {\n          if (idx < 0) {\n            return -1;\n          } else if (idx < size) {\n            return docs[idx];\n          } else {\n            return NO_MORE_DOCS;\n          }\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          if (++idx < size)\n            return docs[idx];\n          return NO_MORE_DOCS;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          //for this small set this is likely faster vs. a binary search\n          // into the sorted array\n          return slowAdvance(target);\n        }\n\n        @Override\n        public long cost() {\n          return size;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fe43a17fb193c95257604ee5486e9f6e2a392c28":["69da1c397a55d488a19e555c8da635417e2dfd47"],"672b198fc3dce868916c727917cae58c2906763d":["ac499dbbdb250b9bf6a4846ff4db7b1cb304f9c5"],"69da1c397a55d488a19e555c8da635417e2dfd47":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ac499dbbdb250b9bf6a4846ff4db7b1cb304f9c5":["fe43a17fb193c95257604ee5486e9f6e2a392c28"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["672b198fc3dce868916c727917cae58c2906763d"]},"commit2Childs":{"fe43a17fb193c95257604ee5486e9f6e2a392c28":["ac499dbbdb250b9bf6a4846ff4db7b1cb304f9c5"],"69da1c397a55d488a19e555c8da635417e2dfd47":["fe43a17fb193c95257604ee5486e9f6e2a392c28"],"672b198fc3dce868916c727917cae58c2906763d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ac499dbbdb250b9bf6a4846ff4db7b1cb304f9c5":["672b198fc3dce868916c727917cae58c2906763d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["69da1c397a55d488a19e555c8da635417e2dfd47"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}