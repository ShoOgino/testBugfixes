{"path":"lucene/test-framework/src/java/org/apache/lucene/util/RunListenerPrintReproduceInfo#printDebuggingInformation().mjava","commits":[{"id":"5da0b42730b6b99b31389ef94cb97384e83b9ede","date":1337107665,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/RunListenerPrintReproduceInfo#printDebuggingInformation().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#printDebuggingInformation(String).mjava","sourceNew":"  /** print some useful debugging information about the environment */\n  static void printDebuggingInformation() {\n    if (classEnvRule != null) {\n      System.err.println(\"NOTE: test params are: codec=\" + Codec.getDefault() +\n          \", sim=\" + classEnvRule.similarity +\n          \", locale=\" + classEnvRule.locale +\n          \", timezone=\" + (classEnvRule.timeZone == null ? \"(null)\" : classEnvRule.timeZone.getID()));\n    }\n    System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \"\n        + System.getProperty(\"os.version\") + \" \"\n        + System.getProperty(\"os.arch\") + \"/\"\n        + System.getProperty(\"java.vendor\") + \" \"\n        + System.getProperty(\"java.version\") + \" \"\n        + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n        + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n        + \"threads=\" + Thread.activeCount() + \",\"\n        + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n        + \"total=\" + Runtime.getRuntime().totalMemory());\n    System.err.println(\"NOTE: All tests run in this JVM: \" + Arrays.toString(testClassesRun.toArray()));\n  }\n\n","sourceOld":"  /** print some useful debugging information about the environment */\n  private static void printDebuggingInformation(String codecDescription) {\n    System.err.println(\"NOTE: test params are: codec=\" + codecDescription +\n        \", sim=\" + similarity +\n        \", locale=\" + locale +\n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    System.err.println(\"NOTE: all tests run in this JVM:\");\n    System.err.println(Arrays.toString(testClassesRun.toArray()));\n    System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \"\n        + System.getProperty(\"os.version\") + \" \"\n        + System.getProperty(\"os.arch\") + \"/\"\n        + System.getProperty(\"java.vendor\") + \" \"\n        + System.getProperty(\"java.version\") + \" \"\n        + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n        + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n        + \"threads=\" + Thread.activeCount() + \",\"\n        + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n        + \"total=\" + Runtime.getRuntime().totalMemory());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a88536886c93d729596349585802a38c63436ce","date":1338402624,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/RunListenerPrintReproduceInfo#printDebuggingInformation().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/RunListenerPrintReproduceInfo#printDebuggingInformation().mjava","sourceNew":"  /** print some useful debugging information about the environment */\n  static void printDebuggingInformation() {\n    if (classEnvRule != null) {\n      System.err.println(\"NOTE: test params are: codec=\" + classEnvRule.codec +\n          \", sim=\" + classEnvRule.similarity +\n          \", locale=\" + classEnvRule.locale +\n          \", timezone=\" + (classEnvRule.timeZone == null ? \"(null)\" : classEnvRule.timeZone.getID()));\n    }\n    System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \"\n        + System.getProperty(\"os.version\") + \" \"\n        + System.getProperty(\"os.arch\") + \"/\"\n        + System.getProperty(\"java.vendor\") + \" \"\n        + System.getProperty(\"java.version\") + \" \"\n        + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n        + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n        + \"threads=\" + Thread.activeCount() + \",\"\n        + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n        + \"total=\" + Runtime.getRuntime().totalMemory());\n    System.err.println(\"NOTE: All tests run in this JVM: \" + Arrays.toString(testClassesRun.toArray()));\n  }\n\n","sourceOld":"  /** print some useful debugging information about the environment */\n  static void printDebuggingInformation() {\n    if (classEnvRule != null) {\n      System.err.println(\"NOTE: test params are: codec=\" + Codec.getDefault() +\n          \", sim=\" + classEnvRule.similarity +\n          \", locale=\" + classEnvRule.locale +\n          \", timezone=\" + (classEnvRule.timeZone == null ? \"(null)\" : classEnvRule.timeZone.getID()));\n    }\n    System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \"\n        + System.getProperty(\"os.version\") + \" \"\n        + System.getProperty(\"os.arch\") + \"/\"\n        + System.getProperty(\"java.vendor\") + \" \"\n        + System.getProperty(\"java.version\") + \" \"\n        + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n        + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n        + \"threads=\" + Thread.activeCount() + \",\"\n        + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n        + \"total=\" + Runtime.getRuntime().totalMemory());\n    System.err.println(\"NOTE: All tests run in this JVM: \" + Arrays.toString(testClassesRun.toArray()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9e4c52ba7e637d69fc83a489586479d19fe1672b","date":1338413823,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/RunListenerPrintReproduceInfo#printDebuggingInformation().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/RunListenerPrintReproduceInfo#printDebuggingInformation().mjava","sourceNew":"  /** print some useful debugging information about the environment */\n  private static void printDebuggingInformation() {\n    if (classEnvRule != null) {\n      System.err.println(\"NOTE: test params are: codec=\" + classEnvRule.codec +\n          \", sim=\" + classEnvRule.similarity +\n          \", locale=\" + classEnvRule.locale +\n          \", timezone=\" + (classEnvRule.timeZone == null ? \"(null)\" : classEnvRule.timeZone.getID()));\n    }\n    System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \"\n        + System.getProperty(\"os.version\") + \" \"\n        + System.getProperty(\"os.arch\") + \"/\"\n        + System.getProperty(\"java.vendor\") + \" \"\n        + System.getProperty(\"java.version\") + \" \"\n        + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n        + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n        + \"threads=\" + Thread.activeCount() + \",\"\n        + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n        + \"total=\" + Runtime.getRuntime().totalMemory());\n    System.err.println(\"NOTE: All tests run in this JVM: \" + Arrays.toString(testClassesRun.toArray()));\n  }\n\n","sourceOld":"  /** print some useful debugging information about the environment */\n  static void printDebuggingInformation() {\n    if (classEnvRule != null) {\n      System.err.println(\"NOTE: test params are: codec=\" + classEnvRule.codec +\n          \", sim=\" + classEnvRule.similarity +\n          \", locale=\" + classEnvRule.locale +\n          \", timezone=\" + (classEnvRule.timeZone == null ? \"(null)\" : classEnvRule.timeZone.getID()));\n    }\n    System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \"\n        + System.getProperty(\"os.version\") + \" \"\n        + System.getProperty(\"os.arch\") + \"/\"\n        + System.getProperty(\"java.vendor\") + \" \"\n        + System.getProperty(\"java.version\") + \" \"\n        + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n        + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n        + \"threads=\" + Thread.activeCount() + \",\"\n        + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n        + \"total=\" + Runtime.getRuntime().totalMemory());\n    System.err.println(\"NOTE: All tests run in this JVM: \" + Arrays.toString(testClassesRun.toArray()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1a72cdac51dd6e3756b9d267dd995bf7b0718d90","date":1452897717,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/RunListenerPrintReproduceInfo#printDebuggingInformation().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/RunListenerPrintReproduceInfo#printDebuggingInformation().mjava","sourceNew":"  /** print some useful debugging information about the environment */\n  private static void printDebuggingInformation() {\n    if (classEnvRule != null) {\n      System.err.println(\"NOTE: test params are: codec=\" + classEnvRule.codec +\n          \", sim=\" + classEnvRule.similarity +\n          \", locale=\" + classEnvRule.locale.toLanguageTag() +\n          \", timezone=\" + (classEnvRule.timeZone == null ? \"(null)\" : classEnvRule.timeZone.getID()));\n    }\n    System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \"\n        + System.getProperty(\"os.version\") + \" \"\n        + System.getProperty(\"os.arch\") + \"/\"\n        + System.getProperty(\"java.vendor\") + \" \"\n        + System.getProperty(\"java.version\") + \" \"\n        + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n        + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n        + \"threads=\" + Thread.activeCount() + \",\"\n        + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n        + \"total=\" + Runtime.getRuntime().totalMemory());\n    System.err.println(\"NOTE: All tests run in this JVM: \" + Arrays.toString(testClassesRun.toArray()));\n  }\n\n","sourceOld":"  /** print some useful debugging information about the environment */\n  private static void printDebuggingInformation() {\n    if (classEnvRule != null) {\n      System.err.println(\"NOTE: test params are: codec=\" + classEnvRule.codec +\n          \", sim=\" + classEnvRule.similarity +\n          \", locale=\" + classEnvRule.locale +\n          \", timezone=\" + (classEnvRule.timeZone == null ? \"(null)\" : classEnvRule.timeZone.getID()));\n    }\n    System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \"\n        + System.getProperty(\"os.version\") + \" \"\n        + System.getProperty(\"os.arch\") + \"/\"\n        + System.getProperty(\"java.vendor\") + \" \"\n        + System.getProperty(\"java.version\") + \" \"\n        + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n        + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n        + \"threads=\" + Thread.activeCount() + \",\"\n        + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n        + \"total=\" + Runtime.getRuntime().totalMemory());\n    System.err.println(\"NOTE: All tests run in this JVM: \" + Arrays.toString(testClassesRun.toArray()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8414c6a288704914389b19a9b51705f9733bd6e","date":1477041552,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/RunListenerPrintReproduceInfo#printDebuggingInformation().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/RunListenerPrintReproduceInfo#printDebuggingInformation().mjava","sourceNew":"  /** print some useful debugging information about the environment */\n  private static void printDebuggingInformation() {\n    if (classEnvRule != null && classEnvRule.isInitialized()) {\n      System.err.println(\"NOTE: test params are: codec=\" + classEnvRule.codec +\n          \", sim=\" + classEnvRule.similarity +\n          \", locale=\" + classEnvRule.locale.toLanguageTag() +\n          \", timezone=\" + (classEnvRule.timeZone == null ? \"(null)\" : classEnvRule.timeZone.getID()));\n    }\n    System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \"\n        + System.getProperty(\"os.version\") + \" \"\n        + System.getProperty(\"os.arch\") + \"/\"\n        + System.getProperty(\"java.vendor\") + \" \"\n        + System.getProperty(\"java.version\") + \" \"\n        + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n        + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n        + \"threads=\" + Thread.activeCount() + \",\"\n        + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n        + \"total=\" + Runtime.getRuntime().totalMemory());\n    System.err.println(\"NOTE: All tests run in this JVM: \" + Arrays.toString(testClassesRun.toArray()));\n  }\n\n","sourceOld":"  /** print some useful debugging information about the environment */\n  private static void printDebuggingInformation() {\n    if (classEnvRule != null) {\n      System.err.println(\"NOTE: test params are: codec=\" + classEnvRule.codec +\n          \", sim=\" + classEnvRule.similarity +\n          \", locale=\" + classEnvRule.locale.toLanguageTag() +\n          \", timezone=\" + (classEnvRule.timeZone == null ? \"(null)\" : classEnvRule.timeZone.getID()));\n    }\n    System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \"\n        + System.getProperty(\"os.version\") + \" \"\n        + System.getProperty(\"os.arch\") + \"/\"\n        + System.getProperty(\"java.vendor\") + \" \"\n        + System.getProperty(\"java.version\") + \" \"\n        + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n        + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n        + \"threads=\" + Thread.activeCount() + \",\"\n        + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n        + \"total=\" + Runtime.getRuntime().totalMemory());\n    System.err.println(\"NOTE: All tests run in this JVM: \" + Arrays.toString(testClassesRun.toArray()));\n  }\n\n","bugFix":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/RunListenerPrintReproduceInfo#printDebuggingInformation().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/RunListenerPrintReproduceInfo#printDebuggingInformation().mjava","sourceNew":"  /** print some useful debugging information about the environment */\n  private static void printDebuggingInformation() {\n    if (classEnvRule != null && classEnvRule.isInitialized()) {\n      System.err.println(\"NOTE: test params are: codec=\" + classEnvRule.codec +\n          \", sim=\" + classEnvRule.similarity +\n          \", locale=\" + classEnvRule.locale.toLanguageTag() +\n          \", timezone=\" + (classEnvRule.timeZone == null ? \"(null)\" : classEnvRule.timeZone.getID()));\n    }\n    System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \"\n        + System.getProperty(\"os.version\") + \" \"\n        + System.getProperty(\"os.arch\") + \"/\"\n        + System.getProperty(\"java.vendor\") + \" \"\n        + System.getProperty(\"java.version\") + \" \"\n        + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n        + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n        + \"threads=\" + Thread.activeCount() + \",\"\n        + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n        + \"total=\" + Runtime.getRuntime().totalMemory());\n    System.err.println(\"NOTE: All tests run in this JVM: \" + Arrays.toString(testClassesRun.toArray()));\n  }\n\n","sourceOld":"  /** print some useful debugging information about the environment */\n  private static void printDebuggingInformation() {\n    if (classEnvRule != null) {\n      System.err.println(\"NOTE: test params are: codec=\" + classEnvRule.codec +\n          \", sim=\" + classEnvRule.similarity +\n          \", locale=\" + classEnvRule.locale.toLanguageTag() +\n          \", timezone=\" + (classEnvRule.timeZone == null ? \"(null)\" : classEnvRule.timeZone.getID()));\n    }\n    System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \"\n        + System.getProperty(\"os.version\") + \" \"\n        + System.getProperty(\"os.arch\") + \"/\"\n        + System.getProperty(\"java.vendor\") + \" \"\n        + System.getProperty(\"java.version\") + \" \"\n        + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n        + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n        + \"threads=\" + Thread.activeCount() + \",\"\n        + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n        + \"total=\" + Runtime.getRuntime().totalMemory());\n    System.err.println(\"NOTE: All tests run in this JVM: \" + Arrays.toString(testClassesRun.toArray()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f8414c6a288704914389b19a9b51705f9733bd6e":["1a72cdac51dd6e3756b9d267dd995bf7b0718d90"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["1a72cdac51dd6e3756b9d267dd995bf7b0718d90","f8414c6a288704914389b19a9b51705f9733bd6e"],"9e4c52ba7e637d69fc83a489586479d19fe1672b":["6a88536886c93d729596349585802a38c63436ce"],"6a88536886c93d729596349585802a38c63436ce":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"1a72cdac51dd6e3756b9d267dd995bf7b0718d90":["9e4c52ba7e637d69fc83a489586479d19fe1672b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f8414c6a288704914389b19a9b51705f9733bd6e"]},"commit2Childs":{"f8414c6a288704914389b19a9b51705f9733bd6e":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["6a88536886c93d729596349585802a38c63436ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"9e4c52ba7e637d69fc83a489586479d19fe1672b":["1a72cdac51dd6e3756b9d267dd995bf7b0718d90"],"6a88536886c93d729596349585802a38c63436ce":["9e4c52ba7e637d69fc83a489586479d19fe1672b"],"1a72cdac51dd6e3756b9d267dd995bf7b0718d90":["f8414c6a288704914389b19a9b51705f9733bd6e","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}