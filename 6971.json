{"path":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,String,File,SortedMap[ServletHolder,String],SortedMap[Class,String]).mjava","commits":[{"id":"6e619491f96eb1c2c64d9f8134326816b0bcd2e4","date":1395198663,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,String,File,SortedMap[ServletHolder,String],SortedMap[Class,String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * \"Mini\" SolrCloud cluster to be used for testing\n   * @param numServers number of Solr servers to start\n   * @param hostContext context path of Solr servers used by Jetty\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param extraServlets Extra servlets to be started by Jetty\n   * @param extraRequestFilters extra filters to be started by Jetty\n   */\n  public MiniSolrCloudCluster(int numServers, String hostContext, File solrXml,\n      SortedMap<ServletHolder, String> extraServlets,\n      SortedMap<Class, String> extraRequestFilters) throws Exception {\n    testDir = Files.createTempDir();\n\n    String zkDir = testDir.getAbsolutePath() + File.separator\n      + \"zookeeper/server1/data\";\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n\n    SolrZkClient zkClient = null;\n    InputStream is = null;\n    try {\n      zkClient = new SolrZkClient(zkServer.getZkHost(),\n        AbstractZkTestCase.TIMEOUT, 45000, null);\n      zkClient.makePath(\"/solr\", false, true);\n      is = new FileInputStream(solrXml);\n      zkClient.create(\"/solr/solr.xml\", IOUtils.toByteArray(is),\n        ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT, true);\n    } finally {\n      IOUtils.closeQuietly(is);\n      if (zkClient != null) zkClient.close();\n    }\n\n    // tell solr to look in zookeeper for solr.xml\n    System.setProperty(\"solr.solrxml.location\",\"zookeeper\");\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    jettys = new LinkedList<JettySolrRunner>();\n    for (int i = 0; i < numServers; ++i) {\n      startJettySolrRunner(hostContext, extraServlets, extraRequestFilters);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ccd5879f653e621285dee30b556303244d9ec4a3","ccd5879f653e621285dee30b556303244d9ec4a3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4a9c941a7004ea2e95b10aa67dafa319ff8d8c19","date":1400739326,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,String,File,File,SortedMap[ServletHolder,String],SortedMap[Class,String]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,String,File,SortedMap[ServletHolder,String],SortedMap[Class,String]).mjava","sourceNew":"  /**\n   * \"Mini\" SolrCloud cluster to be used for testing\n   * @param numServers number of Solr servers to start\n   * @param hostContext context path of Solr servers used by Jetty\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param extraServlets Extra servlets to be started by Jetty\n   * @param extraRequestFilters extra filters to be started by Jetty\n   */\n  public MiniSolrCloudCluster(int numServers, String hostContext, File baseDir, File solrXml,\n      SortedMap<ServletHolder, String> extraServlets,\n      SortedMap<Class, String> extraRequestFilters) throws Exception {\n    testDir = baseDir;\n\n    String zkDir = testDir.getAbsolutePath() + File.separator\n      + \"zookeeper/server1/data\";\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n\n    SolrZkClient zkClient = null;\n    InputStream is = null;\n    try {\n      zkClient = new SolrZkClient(zkServer.getZkHost(),\n        AbstractZkTestCase.TIMEOUT, 45000, null);\n      zkClient.makePath(\"/solr\", false, true);\n      is = new FileInputStream(solrXml);\n      zkClient.create(\"/solr/solr.xml\", IOUtils.toByteArray(is),\n        ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT, true);\n    } finally {\n      IOUtils.closeQuietly(is);\n      if (zkClient != null) zkClient.close();\n    }\n\n    // tell solr to look in zookeeper for solr.xml\n    System.setProperty(\"solr.solrxml.location\",\"zookeeper\");\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    jettys = new LinkedList<JettySolrRunner>();\n    for (int i = 0; i < numServers; ++i) {\n      startJettySolrRunner(hostContext, extraServlets, extraRequestFilters);\n    }\n  }\n\n","sourceOld":"  /**\n   * \"Mini\" SolrCloud cluster to be used for testing\n   * @param numServers number of Solr servers to start\n   * @param hostContext context path of Solr servers used by Jetty\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param extraServlets Extra servlets to be started by Jetty\n   * @param extraRequestFilters extra filters to be started by Jetty\n   */\n  public MiniSolrCloudCluster(int numServers, String hostContext, File solrXml,\n      SortedMap<ServletHolder, String> extraServlets,\n      SortedMap<Class, String> extraRequestFilters) throws Exception {\n    testDir = Files.createTempDir();\n\n    String zkDir = testDir.getAbsolutePath() + File.separator\n      + \"zookeeper/server1/data\";\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n\n    SolrZkClient zkClient = null;\n    InputStream is = null;\n    try {\n      zkClient = new SolrZkClient(zkServer.getZkHost(),\n        AbstractZkTestCase.TIMEOUT, 45000, null);\n      zkClient.makePath(\"/solr\", false, true);\n      is = new FileInputStream(solrXml);\n      zkClient.create(\"/solr/solr.xml\", IOUtils.toByteArray(is),\n        ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT, true);\n    } finally {\n      IOUtils.closeQuietly(is);\n      if (zkClient != null) zkClient.close();\n    }\n\n    // tell solr to look in zookeeper for solr.xml\n    System.setProperty(\"solr.solrxml.location\",\"zookeeper\");\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    jettys = new LinkedList<JettySolrRunner>();\n    for (int i = 0; i < numServers; ++i) {\n      startJettySolrRunner(hostContext, extraServlets, extraRequestFilters);\n    }\n  }\n\n","bugFix":null,"bugIntro":["ccd5879f653e621285dee30b556303244d9ec4a3","ccd5879f653e621285dee30b556303244d9ec4a3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,String,File,File,SortedMap[ServletHolder,String],SortedMap[Class,String]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,String,File,SortedMap[ServletHolder,String],SortedMap[Class,String]).mjava","sourceNew":"  /**\n   * \"Mini\" SolrCloud cluster to be used for testing\n   * @param numServers number of Solr servers to start\n   * @param hostContext context path of Solr servers used by Jetty\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param extraServlets Extra servlets to be started by Jetty\n   * @param extraRequestFilters extra filters to be started by Jetty\n   */\n  public MiniSolrCloudCluster(int numServers, String hostContext, File baseDir, File solrXml,\n      SortedMap<ServletHolder, String> extraServlets,\n      SortedMap<Class, String> extraRequestFilters) throws Exception {\n    testDir = baseDir;\n\n    String zkDir = testDir.getAbsolutePath() + File.separator\n      + \"zookeeper/server1/data\";\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n\n    SolrZkClient zkClient = null;\n    InputStream is = null;\n    try {\n      zkClient = new SolrZkClient(zkServer.getZkHost(),\n        AbstractZkTestCase.TIMEOUT, 45000, null);\n      zkClient.makePath(\"/solr\", false, true);\n      is = new FileInputStream(solrXml);\n      zkClient.create(\"/solr/solr.xml\", IOUtils.toByteArray(is),\n        ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT, true);\n    } finally {\n      IOUtils.closeQuietly(is);\n      if (zkClient != null) zkClient.close();\n    }\n\n    // tell solr to look in zookeeper for solr.xml\n    System.setProperty(\"solr.solrxml.location\",\"zookeeper\");\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    jettys = new LinkedList<JettySolrRunner>();\n    for (int i = 0; i < numServers; ++i) {\n      startJettySolrRunner(hostContext, extraServlets, extraRequestFilters);\n    }\n  }\n\n","sourceOld":"  /**\n   * \"Mini\" SolrCloud cluster to be used for testing\n   * @param numServers number of Solr servers to start\n   * @param hostContext context path of Solr servers used by Jetty\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param extraServlets Extra servlets to be started by Jetty\n   * @param extraRequestFilters extra filters to be started by Jetty\n   */\n  public MiniSolrCloudCluster(int numServers, String hostContext, File solrXml,\n      SortedMap<ServletHolder, String> extraServlets,\n      SortedMap<Class, String> extraRequestFilters) throws Exception {\n    testDir = Files.createTempDir();\n\n    String zkDir = testDir.getAbsolutePath() + File.separator\n      + \"zookeeper/server1/data\";\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n\n    SolrZkClient zkClient = null;\n    InputStream is = null;\n    try {\n      zkClient = new SolrZkClient(zkServer.getZkHost(),\n        AbstractZkTestCase.TIMEOUT, 45000, null);\n      zkClient.makePath(\"/solr\", false, true);\n      is = new FileInputStream(solrXml);\n      zkClient.create(\"/solr/solr.xml\", IOUtils.toByteArray(is),\n        ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT, true);\n    } finally {\n      IOUtils.closeQuietly(is);\n      if (zkClient != null) zkClient.close();\n    }\n\n    // tell solr to look in zookeeper for solr.xml\n    System.setProperty(\"solr.solrxml.location\",\"zookeeper\");\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    jettys = new LinkedList<JettySolrRunner>();\n    for (int i = 0; i < numServers; ++i) {\n      startJettySolrRunner(hostContext, extraServlets, extraRequestFilters);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6e619491f96eb1c2c64d9f8134326816b0bcd2e4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7605579001505896d48b07160075a5c8b8e128e":["6e619491f96eb1c2c64d9f8134326816b0bcd2e4","4a9c941a7004ea2e95b10aa67dafa319ff8d8c19"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4a9c941a7004ea2e95b10aa67dafa319ff8d8c19"],"4a9c941a7004ea2e95b10aa67dafa319ff8d8c19":["6e619491f96eb1c2c64d9f8134326816b0bcd2e4"]},"commit2Childs":{"6e619491f96eb1c2c64d9f8134326816b0bcd2e4":["b7605579001505896d48b07160075a5c8b8e128e","4a9c941a7004ea2e95b10aa67dafa319ff8d8c19"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6e619491f96eb1c2c64d9f8134326816b0bcd2e4"],"b7605579001505896d48b07160075a5c8b8e128e":[],"4a9c941a7004ea2e95b10aa67dafa319ff8d8c19":["b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}