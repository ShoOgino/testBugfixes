{"path":"solr/core/src/test/org/apache/solr/search/join/TestScoreJoinQPNoScore#testJoin().mjava","commits":[{"id":"6eecfe8d494cb2e3ead94e9cdb9381bfe4993dcd","date":1438089844,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/join/TestScoreJoinQPNoScore#testJoin().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testJoin() throws Exception {\n    assertU(add(doc(\"id\", \"1\",\"name_s\", \"john\", \"title_s\", \"Director\", \"dept_ss\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"2\",\"name_s\", \"mark\", \"title_s\", \"VP\", \"dept_ss\",\"Marketing\")));\n    assertU(add(doc(\"id\", \"3\",\"name_s\", \"nancy\", \"title_s\", \"MTS\", \"dept_ss\",\"Sales\")));\n    assertU(add(doc(\"id\", \"4\",\"name_s\", \"dave\", \"title_s\", \"MTS\", \"dept_ss\",\"Support\", \"dept_ss\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"5\",\"name_s\", \"tina\", \"title_s\", \"VP\", \"dept_ss\",\"Engineering\")));\n\n    assertU(add(doc(\"id\",\"10\", \"dept_id_s\", \"Engineering\", \"text_t\",\"These guys develop stuff\")));\n    assertU(add(doc(\"id\",\"11\", \"dept_id_s\", \"Marketing\", \"text_t\",\"These guys make you look good\")));\n    assertU(add(doc(\"id\",\"12\", \"dept_id_s\", \"Sales\", \"text_t\",\"These guys sell stuff\")));\n    assertU(add(doc(\"id\",\"13\", \"dept_id_s\", \"Support\", \"text_t\",\"These guys help customers\")));\n\n    assertU(commit());\n\n    // test debugging TODO no debug in JoinUtil\n  //  assertJQ(req(\"q\",\"{!join from=dept_ss to=dept_id_s\"+whateverScore()+\"}title_s:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n  //      ,\"/debug/join/{!join from=dept_ss to=dept_id_s\"+whateverScore()+\"}title_s:MTS=={'_MATCH_':'fromSetSize,toSetSize', 'fromSetSize':2, 'toSetSize':3}\"\n  //  );\n\n    assertJQ(req(\"q\",\"{!join from=dept_ss to=dept_id_s\"+whateverScore()+\"}title_s:MTS\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n    // empty from\n    assertJQ(req(\"q\",\"{!join from=noexist_s to=dept_id_s\"+whateverScore()+\"}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // empty to\n    assertJQ(req(\"q\",\"{!join from=dept_ss to=noexist_s\"+whateverScore()+\"}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // self join... return everyone with she same title as Dave\n    assertJQ(req(\"q\",\"{!join from=title_s to=title_s\"+whateverScore()+\"}name_s:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    // find people that develop stuff\n    assertJQ(req(\"q\",\"{!join from=dept_id_s to=dept_ss\"+whateverScore()+\"}text_t:develop\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'1'},{'id':'4'},{'id':'5'}]}\"\n    );\n\n    // self join on multivalued text_t field\n    assertJQ(req(\"q\",\"{!join from=title_s to=title_s\"+whateverScore()+\"}name_s:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    assertJQ(req(\"q\",\"{!join from=dept_ss to=dept_id_s\"+whateverScore()+\"}title_s:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n    \n    // expected outcome for a sub query matching dave joined against departments\n    final String davesDepartments = \n      \"/response=={'numFound':2,'start':0,'docs':[{'id':'10'},{'id':'13'}]}\";\n\n    // straight forward query\n    assertJQ(req(\"q\",\"{!join from=dept_ss to=dept_id_s\"+whateverScore()+\"}name_s:dave\", \n                 \"fl\",\"id\"),\n             davesDepartments);\n\n    // variable deref for sub-query parsing\n    assertJQ(req(\"q\",\"{!join from=dept_ss to=dept_id_s v=$qq\"+whateverScore()+\"}\", \n                 \"qq\",\"{!dismax}dave\",\n                 \"qf\",\"name_s\",\n                 \"fl\",\"id\", \n                 \"debugQuery\",\"true\"),\n             davesDepartments);\n\n    // variable deref for sub-query parsing w/localparams\n    assertJQ(req(\"q\",\"{!join from=dept_ss to=dept_id_s v=$qq\"+whateverScore()+\"}\", \n                 \"qq\",\"{!dismax qf=name_s}dave\",\n                 \"fl\",\"id\", \n                 \"debugQuery\",\"true\"),\n             davesDepartments);\n\n    // defType local param to control sub-query parsing\n    assertJQ(req(\"q\",\"{!join from=dept_ss to=dept_id_s defType=dismax\"+whateverScore()+\"}dave\", \n                 \"qf\",\"name_s\",\n                 \"fl\",\"id\", \n                 \"debugQuery\",\"true\"),\n             davesDepartments);\n\n    // find people that develop stuff - but limit via filter query to a name of \"john\"\n    // this tests filters being pushed down to queries (SOLR-3062)\n    assertJQ(req(\"q\",\"{!join from=dept_id_s to=dept_ss\"+whateverScore()+\"}text_t:develop\", \"fl\",\"id\", \"fq\", \"name_s:john\")\n             ,\"/response=={'numFound':1,'start':0,'docs':[{'id':'1'}]}\"\n            );\n    \n\n   assertJQ(req(\"q\",\"{!join from=dept_ss to=dept_id_s\"+whateverScore()+\"}title_s:MTS\", \"fl\",\"id\"\n          )\n          ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\");\n\n      // find people that develop stuff, even if it's requested as single value\n    assertJQ(req(\"q\",\"{!join from=dept_id_s to=dept_ss\"+whateverScore()+\"}text_t:develop\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'1'},{'id':'4'},{'id':'5'}]}\"\n    );\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"640ded7811e1b7d29236a5e2934ec3cd266a8199","date":1588973147,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/join/TestScoreJoinQPNoScore#testJoin().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/TestScoreJoinQPNoScore#testJoin().mjava","sourceNew":"  @Test\n  public void testJoin() throws Exception {\n    assertU(add(doc(\"id\", \"1\",\"name_s\", \"john\", \"title_s\", \"Director\", \"dept_ss\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"2\",\"name_s\", \"mark\", \"title_s\", \"VP\", \"dept_ss\",\"Marketing\")));\n    assertU(add(doc(\"id\", \"3\",\"name_s\", \"nancy\", \"title_s\", \"MTS\", \"dept_ss\",\"Sales\")));\n    assertU(add(doc(\"id\", \"4\",\"name_s\", \"dave\", \"title_s\", \"MTS\", \"dept_ss\",\"Support\", \"dept_ss\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"5\",\"name_s\", \"tina\", \"title_s\", \"VP\", \"dept_ss\",\"Engineering\")));\n\n    assertU(add(doc(\"id\",\"10\", \"dept_id_s\", \"Engineering\", \"text_t\",\"These guys develop stuff\")));\n    assertU(add(doc(\"id\",\"11\", \"dept_id_s\", \"Marketing\", \"text_t\",\"These guys make you look good\")));\n    assertU(add(doc(\"id\",\"12\", \"dept_id_s\", \"Sales\", \"text_t\",\"These guys sell stuff\")));\n    assertU(add(doc(\"id\",\"13\", \"dept_id_s\", \"Support\", \"text_t\",\"These guys help customers\")));\n\n    assertU(commit());\n\n    // test debugging TODO no debug in JoinUtil\n  //  assertJQ(req(\"q\",\"{!join from=dept_ss to=dept_id_s\"+whateverScore()+\"}title_s:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n  //      ,\"/debug/join/{!join from=dept_ss to=dept_id_s\"+whateverScore()+\"}title_s:MTS=={'_MATCH_':'fromSetSize,toSetSize', 'fromSetSize':2, 'toSetSize':3}\"\n  //  );\n\n    assertJQ(req(\"q\",\"{!join from=dept_ss to=dept_id_s\"+whateverScore()+\"}title_s:MTS\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'numFoundExact':true,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n    // empty from\n    assertJQ(req(\"q\",\"{!join from=noexist_s to=dept_id_s\"+whateverScore()+\"}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'numFoundExact':true,'docs':[]}\"\n    );\n\n    // empty to\n    assertJQ(req(\"q\",\"{!join from=dept_ss to=noexist_s\"+whateverScore()+\"}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'numFoundExact':true,'docs':[]}\"\n    );\n\n    // self join... return everyone with she same title as Dave\n    assertJQ(req(\"q\",\"{!join from=title_s to=title_s\"+whateverScore()+\"}name_s:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'numFoundExact':true,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    // find people that develop stuff\n    assertJQ(req(\"q\",\"{!join from=dept_id_s to=dept_ss\"+whateverScore()+\"}text_t:develop\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'numFoundExact':true,'docs':[{'id':'1'},{'id':'4'},{'id':'5'}]}\"\n    );\n\n    // self join on multivalued text_t field\n    assertJQ(req(\"q\",\"{!join from=title_s to=title_s\"+whateverScore()+\"}name_s:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'numFoundExact':true,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    assertJQ(req(\"q\",\"{!join from=dept_ss to=dept_id_s\"+whateverScore()+\"}title_s:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/response=={'numFound':3,'start':0,'numFoundExact':true,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n    \n    // expected outcome for a sub query matching dave joined against departments\n    final String davesDepartments = \n      \"/response=={'numFound':2,'start':0,'numFoundExact':true,'docs':[{'id':'10'},{'id':'13'}]}\";\n\n    // straight forward query\n    assertJQ(req(\"q\",\"{!join from=dept_ss to=dept_id_s\"+whateverScore()+\"}name_s:dave\", \n                 \"fl\",\"id\"),\n             davesDepartments);\n\n    // variable deref for sub-query parsing\n    assertJQ(req(\"q\",\"{!join from=dept_ss to=dept_id_s v=$qq\"+whateverScore()+\"}\", \n                 \"qq\",\"{!dismax}dave\",\n                 \"qf\",\"name_s\",\n                 \"fl\",\"id\", \n                 \"debugQuery\",\"true\"),\n             davesDepartments);\n\n    // variable deref for sub-query parsing w/localparams\n    assertJQ(req(\"q\",\"{!join from=dept_ss to=dept_id_s v=$qq\"+whateverScore()+\"}\", \n                 \"qq\",\"{!dismax qf=name_s}dave\",\n                 \"fl\",\"id\", \n                 \"debugQuery\",\"true\"),\n             davesDepartments);\n\n    // defType local param to control sub-query parsing\n    assertJQ(req(\"q\",\"{!join from=dept_ss to=dept_id_s defType=dismax\"+whateverScore()+\"}dave\", \n                 \"qf\",\"name_s\",\n                 \"fl\",\"id\", \n                 \"debugQuery\",\"true\"),\n             davesDepartments);\n\n    // find people that develop stuff - but limit via filter query to a name of \"john\"\n    // this tests filters being pushed down to queries (SOLR-3062)\n    assertJQ(req(\"q\",\"{!join from=dept_id_s to=dept_ss\"+whateverScore()+\"}text_t:develop\", \"fl\",\"id\", \"fq\", \"name_s:john\")\n             ,\"/response=={'numFound':1,'start':0,'numFoundExact':true,'docs':[{'id':'1'}]}\"\n            );\n    \n\n   assertJQ(req(\"q\",\"{!join from=dept_ss to=dept_id_s\"+whateverScore()+\"}title_s:MTS\", \"fl\",\"id\"\n          )\n          ,\"/response=={'numFound':3,'start':0,'numFoundExact':true,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\");\n\n      // find people that develop stuff, even if it's requested as single value\n    assertJQ(req(\"q\",\"{!join from=dept_id_s to=dept_ss\"+whateverScore()+\"}text_t:develop\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'numFoundExact':true,'docs':[{'id':'1'},{'id':'4'},{'id':'5'}]}\"\n    );\n\n  }\n\n","sourceOld":"  @Test\n  public void testJoin() throws Exception {\n    assertU(add(doc(\"id\", \"1\",\"name_s\", \"john\", \"title_s\", \"Director\", \"dept_ss\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"2\",\"name_s\", \"mark\", \"title_s\", \"VP\", \"dept_ss\",\"Marketing\")));\n    assertU(add(doc(\"id\", \"3\",\"name_s\", \"nancy\", \"title_s\", \"MTS\", \"dept_ss\",\"Sales\")));\n    assertU(add(doc(\"id\", \"4\",\"name_s\", \"dave\", \"title_s\", \"MTS\", \"dept_ss\",\"Support\", \"dept_ss\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"5\",\"name_s\", \"tina\", \"title_s\", \"VP\", \"dept_ss\",\"Engineering\")));\n\n    assertU(add(doc(\"id\",\"10\", \"dept_id_s\", \"Engineering\", \"text_t\",\"These guys develop stuff\")));\n    assertU(add(doc(\"id\",\"11\", \"dept_id_s\", \"Marketing\", \"text_t\",\"These guys make you look good\")));\n    assertU(add(doc(\"id\",\"12\", \"dept_id_s\", \"Sales\", \"text_t\",\"These guys sell stuff\")));\n    assertU(add(doc(\"id\",\"13\", \"dept_id_s\", \"Support\", \"text_t\",\"These guys help customers\")));\n\n    assertU(commit());\n\n    // test debugging TODO no debug in JoinUtil\n  //  assertJQ(req(\"q\",\"{!join from=dept_ss to=dept_id_s\"+whateverScore()+\"}title_s:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n  //      ,\"/debug/join/{!join from=dept_ss to=dept_id_s\"+whateverScore()+\"}title_s:MTS=={'_MATCH_':'fromSetSize,toSetSize', 'fromSetSize':2, 'toSetSize':3}\"\n  //  );\n\n    assertJQ(req(\"q\",\"{!join from=dept_ss to=dept_id_s\"+whateverScore()+\"}title_s:MTS\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n    // empty from\n    assertJQ(req(\"q\",\"{!join from=noexist_s to=dept_id_s\"+whateverScore()+\"}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // empty to\n    assertJQ(req(\"q\",\"{!join from=dept_ss to=noexist_s\"+whateverScore()+\"}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // self join... return everyone with she same title as Dave\n    assertJQ(req(\"q\",\"{!join from=title_s to=title_s\"+whateverScore()+\"}name_s:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    // find people that develop stuff\n    assertJQ(req(\"q\",\"{!join from=dept_id_s to=dept_ss\"+whateverScore()+\"}text_t:develop\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'1'},{'id':'4'},{'id':'5'}]}\"\n    );\n\n    // self join on multivalued text_t field\n    assertJQ(req(\"q\",\"{!join from=title_s to=title_s\"+whateverScore()+\"}name_s:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    assertJQ(req(\"q\",\"{!join from=dept_ss to=dept_id_s\"+whateverScore()+\"}title_s:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n    \n    // expected outcome for a sub query matching dave joined against departments\n    final String davesDepartments = \n      \"/response=={'numFound':2,'start':0,'docs':[{'id':'10'},{'id':'13'}]}\";\n\n    // straight forward query\n    assertJQ(req(\"q\",\"{!join from=dept_ss to=dept_id_s\"+whateverScore()+\"}name_s:dave\", \n                 \"fl\",\"id\"),\n             davesDepartments);\n\n    // variable deref for sub-query parsing\n    assertJQ(req(\"q\",\"{!join from=dept_ss to=dept_id_s v=$qq\"+whateverScore()+\"}\", \n                 \"qq\",\"{!dismax}dave\",\n                 \"qf\",\"name_s\",\n                 \"fl\",\"id\", \n                 \"debugQuery\",\"true\"),\n             davesDepartments);\n\n    // variable deref for sub-query parsing w/localparams\n    assertJQ(req(\"q\",\"{!join from=dept_ss to=dept_id_s v=$qq\"+whateverScore()+\"}\", \n                 \"qq\",\"{!dismax qf=name_s}dave\",\n                 \"fl\",\"id\", \n                 \"debugQuery\",\"true\"),\n             davesDepartments);\n\n    // defType local param to control sub-query parsing\n    assertJQ(req(\"q\",\"{!join from=dept_ss to=dept_id_s defType=dismax\"+whateverScore()+\"}dave\", \n                 \"qf\",\"name_s\",\n                 \"fl\",\"id\", \n                 \"debugQuery\",\"true\"),\n             davesDepartments);\n\n    // find people that develop stuff - but limit via filter query to a name of \"john\"\n    // this tests filters being pushed down to queries (SOLR-3062)\n    assertJQ(req(\"q\",\"{!join from=dept_id_s to=dept_ss\"+whateverScore()+\"}text_t:develop\", \"fl\",\"id\", \"fq\", \"name_s:john\")\n             ,\"/response=={'numFound':1,'start':0,'docs':[{'id':'1'}]}\"\n            );\n    \n\n   assertJQ(req(\"q\",\"{!join from=dept_ss to=dept_id_s\"+whateverScore()+\"}title_s:MTS\", \"fl\",\"id\"\n          )\n          ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\");\n\n      // find people that develop stuff, even if it's requested as single value\n    assertJQ(req(\"q\",\"{!join from=dept_id_s to=dept_ss\"+whateverScore()+\"}text_t:develop\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'1'},{'id':'4'},{'id':'5'}]}\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"640ded7811e1b7d29236a5e2934ec3cd266a8199":["6eecfe8d494cb2e3ead94e9cdb9381bfe4993dcd"],"6eecfe8d494cb2e3ead94e9cdb9381bfe4993dcd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["640ded7811e1b7d29236a5e2934ec3cd266a8199"]},"commit2Childs":{"640ded7811e1b7d29236a5e2934ec3cd266a8199":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6eecfe8d494cb2e3ead94e9cdb9381bfe4993dcd":["640ded7811e1b7d29236a5e2934ec3cd266a8199"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6eecfe8d494cb2e3ead94e9cdb9381bfe4993dcd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}