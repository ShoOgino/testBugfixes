{"path":"solr/core/src/test/org/apache/solr/store/blockcache/BlockCacheTest#getByte(long).mjava","commits":[{"id":"92304613d4e239eb290f8879c862a0656cc41638","date":1486746489,"type":0,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/store/blockcache/BlockCacheTest#getByte(long).mjava","pathOld":"/dev/null","sourceNew":"  // given a position, return the appropriate byte.\n  // always returns the same thing so we don't actually have to store the bytes redundantly to check them.\n  private static byte getByte(long pos) {\n    // knuth multiplicative hash method, then take top 8 bits\n    return (byte) ((((int)pos) * (int)(2654435761L)) >> 24);\n\n    // just the lower bits of the block number, to aid in debugging...\n    // return (byte)(pos>>10);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87f0484c38f986062889ed50f3bf3bd462848c26","date":1570108628,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/store/blockcache/BlockCacheTest#getByte(long).mjava","pathOld":"solr/core/src/test/org/apache/solr/store/blockcache/BlockCacheTest#getByte(long).mjava","sourceNew":"  // given a position, return the appropriate byte.\n  // always returns the same thing so we don't actually have to store the bytes redundantly to check them.\n  private static byte getByte(long pos) {\n    // knuth multiplicative hash method, then take top 8 bits\n    return (byte) ((((int) pos) * (int) (2654435761L)) >> 24);\n\n    // just the lower bits of the block number, to aid in debugging...\n    // return (byte)(pos>>10);\n  }\n\n","sourceOld":"  // given a position, return the appropriate byte.\n  // always returns the same thing so we don't actually have to store the bytes redundantly to check them.\n  private static byte getByte(long pos) {\n    // knuth multiplicative hash method, then take top 8 bits\n    return (byte) ((((int)pos) * (int)(2654435761L)) >> 24);\n\n    // just the lower bits of the block number, to aid in debugging...\n    // return (byte)(pos>>10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/store/blockcache/BlockCacheTest#getByte(long).mjava","pathOld":"solr/core/src/test/org/apache/solr/store/blockcache/BlockCacheTest#getByte(long).mjava","sourceNew":"  // given a position, return the appropriate byte.\n  // always returns the same thing so we don't actually have to store the bytes redundantly to check them.\n  private static byte getByte(long pos) {\n    // knuth multiplicative hash method, then take top 8 bits\n    return (byte) ((((int) pos) * (int) (2654435761L)) >> 24);\n\n    // just the lower bits of the block number, to aid in debugging...\n    // return (byte)(pos>>10);\n  }\n\n","sourceOld":"  // given a position, return the appropriate byte.\n  // always returns the same thing so we don't actually have to store the bytes redundantly to check them.\n  private static byte getByte(long pos) {\n    // knuth multiplicative hash method, then take top 8 bits\n    return (byte) ((((int)pos) * (int)(2654435761L)) >> 24);\n\n    // just the lower bits of the block number, to aid in debugging...\n    // return (byte)(pos>>10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"92304613d4e239eb290f8879c862a0656cc41638":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"87f0484c38f986062889ed50f3bf3bd462848c26":["92304613d4e239eb290f8879c862a0656cc41638"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["87f0484c38f986062889ed50f3bf3bd462848c26"],"b0b597c65628ca9e73913a07e81691f8229bae35":["92304613d4e239eb290f8879c862a0656cc41638","87f0484c38f986062889ed50f3bf3bd462848c26"]},"commit2Childs":{"92304613d4e239eb290f8879c862a0656cc41638":["87f0484c38f986062889ed50f3bf3bd462848c26","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["92304613d4e239eb290f8879c862a0656cc41638"],"87f0484c38f986062889ed50f3bf3bd462848c26":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}