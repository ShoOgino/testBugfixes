{"path":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/PlaneTest#testIdenticalPlanes().mjava","commits":[{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/PlaneTest#testIdenticalPlanes().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/PlaneTest#testIdenticalPlanes().mjava","sourceNew":"  @Test\n  public void testIdenticalPlanes() {\n    final GeoPoint p = new GeoPoint(PlanetModel.SPHERE, 0.123, -0.456);\n    final Plane plane1 = new Plane(p, 0.0);\n    final Plane plane2 = new Plane(p, 0.0);\n    assertTrue(plane1.isNumericallyIdentical(plane2));\n    final Plane plane3 = new Plane(p, 0.1);\n    assertFalse(plane1.isNumericallyIdentical(plane3));\n    final Vector v1 = new Vector(0.1, -0.732, 0.9);\n    final double constant = 0.432;\n    final Vector v2 = new Vector(v1.x * constant, v1.y * constant, v1.z * constant);\n    final Plane p1 = new Plane(v1, 0.2);\n    final Plane p2 = new Plane(v2, 0.2 * constant);\n    assertTrue(p1.isNumericallyIdentical(p2));\n  }\n\n","sourceOld":"  @Test\n  public void testIdenticalPlanes() {\n    final GeoPoint p = new GeoPoint(PlanetModel.SPHERE, 0.123, -0.456);\n    final Plane plane1 = new Plane(p, 0.0);\n    final Plane plane2 = new Plane(p, 0.0);\n    assertTrue(plane1.isNumericallyIdentical(plane2));\n    final Plane plane3 = new Plane(p, 0.1);\n    assertFalse(plane1.isNumericallyIdentical(plane3));\n    final Vector v1 = new Vector(0.1, -0.732, 0.9);\n    final double constant = 0.432;\n    final Vector v2 = new Vector(v1.x * constant, v1.y * constant, v1.z * constant);\n    final Plane p1 = new Plane(v1, 0.2);\n    final Plane p2 = new Plane(v2, 0.2 * constant);\n    assertTrue(p1.isNumericallyIdentical(p2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e444678504caf66a8060b1d514383aa4feac0c","date":1457399659,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/PlaneTest#testIdenticalPlanes().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/PlaneTest#testIdenticalPlanes().mjava","sourceNew":"  @Test\n  public void testIdenticalPlanes() {\n    final GeoPoint p = new GeoPoint(PlanetModel.SPHERE, 0.123, -0.456);\n    final Plane plane1 = new Plane(p, 0.0);\n    final Plane plane2 = new Plane(p, 0.0);\n    assertTrue(plane1.isNumericallyIdentical(plane2));\n    final Plane plane3 = new Plane(p, 0.1);\n    assertFalse(plane1.isNumericallyIdentical(plane3));\n    final Vector v1 = new Vector(0.1, -0.732, 0.9);\n    final double constant = 0.432;\n    final Vector v2 = new Vector(v1.x * constant, v1.y * constant, v1.z * constant);\n    final Plane p1 = new Plane(v1, 0.2);\n    final Plane p2 = new Plane(v2, 0.2 * constant);\n    assertTrue(p1.isNumericallyIdentical(p2));\n  }\n\n","sourceOld":"  @Test\n  public void testIdenticalPlanes() {\n    final GeoPoint p = new GeoPoint(PlanetModel.SPHERE, 0.123, -0.456);\n    final Plane plane1 = new Plane(p, 0.0);\n    final Plane plane2 = new Plane(p, 0.0);\n    assertTrue(plane1.isNumericallyIdentical(plane2));\n    final Plane plane3 = new Plane(p, 0.1);\n    assertFalse(plane1.isNumericallyIdentical(plane3));\n    final Vector v1 = new Vector(0.1, -0.732, 0.9);\n    final double constant = 0.432;\n    final Vector v2 = new Vector(v1.x * constant, v1.y * constant, v1.z * constant);\n    final Plane p1 = new Plane(v1, 0.2);\n    final Plane p2 = new Plane(v2, 0.2 * constant);\n    assertTrue(p1.isNumericallyIdentical(p2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3022be5842502b7c2a57a5124199bbc30236f0a0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b4e444678504caf66a8060b1d514383aa4feac0c":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4e444678504caf66a8060b1d514383aa4feac0c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["b4e444678504caf66a8060b1d514383aa4feac0c"],"b4e444678504caf66a8060b1d514383aa4feac0c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}