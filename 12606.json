{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#beforeClass().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#beforeClass().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    //initialize the parser\n    builder = new CorePlusExtensionsParser(\"contents\", analyzer);\n\n    BufferedReader d = new BufferedReader(new InputStreamReader(TestParser.class.getResourceAsStream(\"reuters21578.txt\")));\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(Version.LUCENE_40, analyzer));\n    String line = d.readLine();\n    while (line != null) {\n      int endOfDate = line.indexOf('\\t');\n      String date = line.substring(0, endOfDate).trim();\n      String content = line.substring(endOfDate).trim();\n      Document doc = new Document();\n      doc.add(newField(\"date\", date, TextField.TYPE_STORED));\n      doc.add(newField(\"contents\", content, TextField.TYPE_STORED));\n      doc.add(new IntField(\"date2\", Integer.valueOf(date)));\n      writer.addDocument(doc);\n      line = d.readLine();\n    }\n    d.close();\n    writer.close();\n    reader = IndexReader.open(dir);\n    searcher = newSearcher(reader);\n\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    //initialize the parser\n    builder = new CorePlusExtensionsParser(\"contents\", analyzer);\n\n    BufferedReader d = new BufferedReader(new InputStreamReader(TestParser.class.getResourceAsStream(\"reuters21578.txt\")));\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(Version.LUCENE_40, analyzer));\n    String line = d.readLine();\n    while (line != null) {\n      int endOfDate = line.indexOf('\\t');\n      String date = line.substring(0, endOfDate).trim();\n      String content = line.substring(endOfDate).trim();\n      Document doc = new Document();\n      doc.add(newField(\"date\", date, TextField.TYPE_STORED));\n      doc.add(newField(\"contents\", content, TextField.TYPE_STORED));\n      doc.add(new IntField(\"date2\", Integer.valueOf(date)));\n      writer.addDocument(doc);\n      line = d.readLine();\n    }\n    d.close();\n    writer.close();\n    reader = IndexReader.open(dir);\n    searcher = newSearcher(reader);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#beforeClass().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    //initialize the parser\n    builder = new CorePlusExtensionsParser(\"contents\", analyzer);\n\n    BufferedReader d = new BufferedReader(new InputStreamReader(TestParser.class.getResourceAsStream(\"reuters21578.txt\")));\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(Version.LUCENE_40, analyzer));\n    String line = d.readLine();\n    while (line != null) {\n      int endOfDate = line.indexOf('\\t');\n      String date = line.substring(0, endOfDate).trim();\n      String content = line.substring(endOfDate).trim();\n      Document doc = new Document();\n      doc.add(newField(\"date\", date, TextField.TYPE_STORED));\n      doc.add(newField(\"contents\", content, TextField.TYPE_STORED));\n      doc.add(new IntField(\"date2\", Integer.valueOf(date)));\n      writer.addDocument(doc);\n      line = d.readLine();\n    }\n    d.close();\n    writer.close();\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    //initialize the parser\n    builder = new CorePlusExtensionsParser(\"contents\", analyzer);\n\n    BufferedReader d = new BufferedReader(new InputStreamReader(TestParser.class.getResourceAsStream(\"reuters21578.txt\")));\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(Version.LUCENE_40, analyzer));\n    String line = d.readLine();\n    while (line != null) {\n      int endOfDate = line.indexOf('\\t');\n      String date = line.substring(0, endOfDate).trim();\n      String content = line.substring(endOfDate).trim();\n      Document doc = new Document();\n      doc.add(newField(\"date\", date, TextField.TYPE_STORED));\n      doc.add(newField(\"contents\", content, TextField.TYPE_STORED));\n      doc.add(new IntField(\"date2\", Integer.valueOf(date)));\n      writer.addDocument(doc);\n      line = d.readLine();\n    }\n    d.close();\n    writer.close();\n    reader = IndexReader.open(dir);\n    searcher = newSearcher(reader);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#beforeClass().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    //initialize the parser\n    builder = new CorePlusExtensionsParser(\"contents\", analyzer);\n\n    BufferedReader d = new BufferedReader(new InputStreamReader(TestParser.class.getResourceAsStream(\"reuters21578.txt\")));\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(Version.LUCENE_40, analyzer));\n    String line = d.readLine();\n    while (line != null) {\n      int endOfDate = line.indexOf('\\t');\n      String date = line.substring(0, endOfDate).trim();\n      String content = line.substring(endOfDate).trim();\n      Document doc = new Document();\n      doc.add(newTextField(\"date\", date, Field.Store.YES));\n      doc.add(newTextField(\"contents\", content, Field.Store.YES));\n      doc.add(new IntField(\"date2\", Integer.valueOf(date), Field.Store.NO));\n      writer.addDocument(doc);\n      line = d.readLine();\n    }\n    d.close();\n    writer.close();\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    //initialize the parser\n    builder = new CorePlusExtensionsParser(\"contents\", analyzer);\n\n    BufferedReader d = new BufferedReader(new InputStreamReader(TestParser.class.getResourceAsStream(\"reuters21578.txt\")));\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(Version.LUCENE_40, analyzer));\n    String line = d.readLine();\n    while (line != null) {\n      int endOfDate = line.indexOf('\\t');\n      String date = line.substring(0, endOfDate).trim();\n      String content = line.substring(endOfDate).trim();\n      Document doc = new Document();\n      doc.add(newField(\"date\", date, TextField.TYPE_STORED));\n      doc.add(newField(\"contents\", content, TextField.TYPE_STORED));\n      doc.add(new IntField(\"date2\", Integer.valueOf(date)));\n      writer.addDocument(doc);\n      line = d.readLine();\n    }\n    d.close();\n    writer.close();\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n\n  }\n\n","bugFix":["a78a90fc9701e511308346ea29f4f5e548bb39fe","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"58b927ebb36b8784b0b3f719b1ef2752336a2e77","date":1341499263,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#beforeClass().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    //initialize the parser\n    builder = new CorePlusExtensionsParser(\"contents\", analyzer);\n\n    BufferedReader d = new BufferedReader(new InputStreamReader(\n        TestParser.class.getResourceAsStream(\"reuters21578.txt\"), \"US-ASCII\"));\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(Version.LUCENE_40, analyzer));\n    String line = d.readLine();\n    while (line != null) {\n      int endOfDate = line.indexOf('\\t');\n      String date = line.substring(0, endOfDate).trim();\n      String content = line.substring(endOfDate).trim();\n      Document doc = new Document();\n      doc.add(newTextField(\"date\", date, Field.Store.YES));\n      doc.add(newTextField(\"contents\", content, Field.Store.YES));\n      doc.add(new IntField(\"date2\", Integer.valueOf(date), Field.Store.NO));\n      writer.addDocument(doc);\n      line = d.readLine();\n    }\n    d.close();\n    writer.close();\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    //initialize the parser\n    builder = new CorePlusExtensionsParser(\"contents\", analyzer);\n\n    BufferedReader d = new BufferedReader(new InputStreamReader(TestParser.class.getResourceAsStream(\"reuters21578.txt\")));\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(Version.LUCENE_40, analyzer));\n    String line = d.readLine();\n    while (line != null) {\n      int endOfDate = line.indexOf('\\t');\n      String date = line.substring(0, endOfDate).trim();\n      String content = line.substring(endOfDate).trim();\n      Document doc = new Document();\n      doc.add(newTextField(\"date\", date, Field.Store.YES));\n      doc.add(newTextField(\"contents\", content, Field.Store.YES));\n      doc.add(new IntField(\"date2\", Integer.valueOf(date), Field.Store.NO));\n      writer.addDocument(doc);\n      line = d.readLine();\n    }\n    d.close();\n    writer.close();\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#beforeClass().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    //initialize the parser\n    builder = new CorePlusExtensionsParser(\"contents\", analyzer);\n\n    BufferedReader d = new BufferedReader(new InputStreamReader(\n        TestParser.class.getResourceAsStream(\"reuters21578.txt\"), \"US-ASCII\"));\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(Version.LUCENE_40, analyzer));\n    String line = d.readLine();\n    while (line != null) {\n      int endOfDate = line.indexOf('\\t');\n      String date = line.substring(0, endOfDate).trim();\n      String content = line.substring(endOfDate).trim();\n      Document doc = new Document();\n      doc.add(newTextField(\"date\", date, Field.Store.YES));\n      doc.add(newTextField(\"contents\", content, Field.Store.YES));\n      doc.add(new IntField(\"date2\", Integer.valueOf(date), Field.Store.NO));\n      writer.addDocument(doc);\n      line = d.readLine();\n    }\n    d.close();\n    writer.close();\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    //initialize the parser\n    builder = new CorePlusExtensionsParser(\"contents\", analyzer);\n\n    BufferedReader d = new BufferedReader(new InputStreamReader(TestParser.class.getResourceAsStream(\"reuters21578.txt\")));\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(Version.LUCENE_40, analyzer));\n    String line = d.readLine();\n    while (line != null) {\n      int endOfDate = line.indexOf('\\t');\n      String date = line.substring(0, endOfDate).trim();\n      String content = line.substring(endOfDate).trim();\n      Document doc = new Document();\n      doc.add(newTextField(\"date\", date, Field.Store.YES));\n      doc.add(newTextField(\"contents\", content, Field.Store.YES));\n      doc.add(new IntField(\"date2\", Integer.valueOf(date), Field.Store.NO));\n      writer.addDocument(doc);\n      line = d.readLine();\n    }\n    d.close();\n    writer.close();\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eafa8c5eabc3dacd34680054e6a33bda024080ac","date":1367691488,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#beforeClass().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET);\n    //initialize the parser\n    builder = new CorePlusExtensionsParser(\"contents\", analyzer);\n\n    BufferedReader d = new BufferedReader(new InputStreamReader(\n        TestParser.class.getResourceAsStream(\"reuters21578.txt\"), \"US-ASCII\"));\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(Version.LUCENE_40, analyzer));\n    String line = d.readLine();\n    while (line != null) {\n      int endOfDate = line.indexOf('\\t');\n      String date = line.substring(0, endOfDate).trim();\n      String content = line.substring(endOfDate).trim();\n      Document doc = new Document();\n      doc.add(newTextField(\"date\", date, Field.Store.YES));\n      doc.add(newTextField(\"contents\", content, Field.Store.YES));\n      doc.add(new IntField(\"date2\", Integer.valueOf(date), Field.Store.NO));\n      writer.addDocument(doc);\n      line = d.readLine();\n    }\n    d.close();\n    writer.close();\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    //initialize the parser\n    builder = new CorePlusExtensionsParser(\"contents\", analyzer);\n\n    BufferedReader d = new BufferedReader(new InputStreamReader(\n        TestParser.class.getResourceAsStream(\"reuters21578.txt\"), \"US-ASCII\"));\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(Version.LUCENE_40, analyzer));\n    String line = d.readLine();\n    while (line != null) {\n      int endOfDate = line.indexOf('\\t');\n      String date = line.substring(0, endOfDate).trim();\n      String content = line.substring(endOfDate).trim();\n      Document doc = new Document();\n      doc.add(newTextField(\"date\", date, Field.Store.YES));\n      doc.add(newTextField(\"contents\", content, Field.Store.YES));\n      doc.add(new IntField(\"date2\", Integer.valueOf(date), Field.Store.NO));\n      writer.addDocument(doc);\n      line = d.readLine();\n    }\n    d.close();\n    writer.close();\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bf41419d452997826ec5f17684993377be77f49","date":1386629618,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#beforeClass().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET);\n    //initialize the parser\n    builder = new CorePlusExtensionsParser(\"contents\", analyzer);\n\n    BufferedReader d = new BufferedReader(new InputStreamReader(\n        TestParser.class.getResourceAsStream(\"reuters21578.txt\"), \"US-ASCII\"));\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    String line = d.readLine();\n    while (line != null) {\n      int endOfDate = line.indexOf('\\t');\n      String date = line.substring(0, endOfDate).trim();\n      String content = line.substring(endOfDate).trim();\n      Document doc = new Document();\n      doc.add(newTextField(\"date\", date, Field.Store.YES));\n      doc.add(newTextField(\"contents\", content, Field.Store.YES));\n      doc.add(new IntField(\"date2\", Integer.valueOf(date), Field.Store.NO));\n      writer.addDocument(doc);\n      line = d.readLine();\n    }\n    d.close();\n    writer.close();\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET);\n    //initialize the parser\n    builder = new CorePlusExtensionsParser(\"contents\", analyzer);\n\n    BufferedReader d = new BufferedReader(new InputStreamReader(\n        TestParser.class.getResourceAsStream(\"reuters21578.txt\"), \"US-ASCII\"));\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(Version.LUCENE_40, analyzer));\n    String line = d.readLine();\n    while (line != null) {\n      int endOfDate = line.indexOf('\\t');\n      String date = line.substring(0, endOfDate).trim();\n      String content = line.substring(endOfDate).trim();\n      Document doc = new Document();\n      doc.add(newTextField(\"date\", date, Field.Store.YES));\n      doc.add(newTextField(\"contents\", content, Field.Store.YES));\n      doc.add(new IntField(\"date2\", Integer.valueOf(date), Field.Store.NO));\n      writer.addDocument(doc);\n      line = d.readLine();\n    }\n    d.close();\n    writer.close();\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n\n  }\n\n","bugFix":["b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#beforeClass().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET);\n    //initialize the parser\n    builder = new CorePlusExtensionsParser(\"contents\", analyzer);\n\n    BufferedReader d = new BufferedReader(new InputStreamReader(\n        TestParser.class.getResourceAsStream(\"reuters21578.txt\"), \"US-ASCII\"));\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    String line = d.readLine();\n    while (line != null) {\n      int endOfDate = line.indexOf('\\t');\n      String date = line.substring(0, endOfDate).trim();\n      String content = line.substring(endOfDate).trim();\n      Document doc = new Document();\n      doc.add(newTextField(\"date\", date, Field.Store.YES));\n      doc.add(newTextField(\"contents\", content, Field.Store.YES));\n      doc.add(new IntField(\"date2\", Integer.valueOf(date), Field.Store.NO));\n      writer.addDocument(doc);\n      line = d.readLine();\n    }\n    d.close();\n    writer.close();\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET);\n    //initialize the parser\n    builder = new CorePlusExtensionsParser(\"contents\", analyzer);\n\n    BufferedReader d = new BufferedReader(new InputStreamReader(\n        TestParser.class.getResourceAsStream(\"reuters21578.txt\"), \"US-ASCII\"));\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(Version.LUCENE_40, analyzer));\n    String line = d.readLine();\n    while (line != null) {\n      int endOfDate = line.indexOf('\\t');\n      String date = line.substring(0, endOfDate).trim();\n      String content = line.substring(endOfDate).trim();\n      Document doc = new Document();\n      doc.add(newTextField(\"date\", date, Field.Store.YES));\n      doc.add(newTextField(\"contents\", content, Field.Store.YES));\n      doc.add(new IntField(\"date2\", Integer.valueOf(date), Field.Store.NO));\n      writer.addDocument(doc);\n      line = d.readLine();\n    }\n    d.close();\n    writer.close();\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#beforeClass().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET);\n    //initialize the parser\n    builder = new CorePlusExtensionsParser(\"contents\", analyzer);\n\n    BufferedReader d = new BufferedReader(new InputStreamReader(\n        TestParser.class.getResourceAsStream(\"reuters21578.txt\"), StandardCharsets.US_ASCII));\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    String line = d.readLine();\n    while (line != null) {\n      int endOfDate = line.indexOf('\\t');\n      String date = line.substring(0, endOfDate).trim();\n      String content = line.substring(endOfDate).trim();\n      Document doc = new Document();\n      doc.add(newTextField(\"date\", date, Field.Store.YES));\n      doc.add(newTextField(\"contents\", content, Field.Store.YES));\n      doc.add(new IntField(\"date2\", Integer.valueOf(date), Field.Store.NO));\n      writer.addDocument(doc);\n      line = d.readLine();\n    }\n    d.close();\n    writer.close();\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET);\n    //initialize the parser\n    builder = new CorePlusExtensionsParser(\"contents\", analyzer);\n\n    BufferedReader d = new BufferedReader(new InputStreamReader(\n        TestParser.class.getResourceAsStream(\"reuters21578.txt\"), \"US-ASCII\"));\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    String line = d.readLine();\n    while (line != null) {\n      int endOfDate = line.indexOf('\\t');\n      String date = line.substring(0, endOfDate).trim();\n      String content = line.substring(endOfDate).trim();\n      Document doc = new Document();\n      doc.add(newTextField(\"date\", date, Field.Store.YES));\n      doc.add(newTextField(\"contents\", content, Field.Store.YES));\n      doc.add(new IntField(\"date2\", Integer.valueOf(date), Field.Store.NO));\n      writer.addDocument(doc);\n      line = d.readLine();\n    }\n    d.close();\n    writer.close();\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#beforeClass().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET);\n    //initialize the parser\n    builder = new CorePlusExtensionsParser(\"contents\", analyzer);\n\n    BufferedReader d = new BufferedReader(new InputStreamReader(\n        TestParser.class.getResourceAsStream(\"reuters21578.txt\"), StandardCharsets.US_ASCII));\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    String line = d.readLine();\n    while (line != null) {\n      int endOfDate = line.indexOf('\\t');\n      String date = line.substring(0, endOfDate).trim();\n      String content = line.substring(endOfDate).trim();\n      Document doc = new Document();\n      doc.add(newTextField(\"date\", date, Field.Store.YES));\n      doc.add(newTextField(\"contents\", content, Field.Store.YES));\n      doc.add(new IntField(\"date2\", Integer.valueOf(date), Field.Store.NO));\n      writer.addDocument(doc);\n      line = d.readLine();\n    }\n    d.close();\n    writer.close();\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET);\n    //initialize the parser\n    builder = new CorePlusExtensionsParser(\"contents\", analyzer);\n\n    BufferedReader d = new BufferedReader(new InputStreamReader(\n        TestParser.class.getResourceAsStream(\"reuters21578.txt\"), \"US-ASCII\"));\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    String line = d.readLine();\n    while (line != null) {\n      int endOfDate = line.indexOf('\\t');\n      String date = line.substring(0, endOfDate).trim();\n      String content = line.substring(endOfDate).trim();\n      Document doc = new Document();\n      doc.add(newTextField(\"date\", date, Field.Store.YES));\n      doc.add(newTextField(\"contents\", content, Field.Store.YES));\n      doc.add(new IntField(\"date2\", Integer.valueOf(date), Field.Store.NO));\n      writer.addDocument(doc);\n      line = d.readLine();\n    }\n    d.close();\n    writer.close();\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#beforeClass().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET);\n    //initialize the parser\n    builder = new CorePlusExtensionsParser(\"contents\", analyzer);\n\n    BufferedReader d = new BufferedReader(new InputStreamReader(\n        TestParser.class.getResourceAsStream(\"reuters21578.txt\"), StandardCharsets.US_ASCII));\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    String line = d.readLine();\n    while (line != null) {\n      int endOfDate = line.indexOf('\\t');\n      String date = line.substring(0, endOfDate).trim();\n      String content = line.substring(endOfDate).trim();\n      Document doc = new Document();\n      doc.add(newTextField(\"date\", date, Field.Store.YES));\n      doc.add(newTextField(\"contents\", content, Field.Store.YES));\n      doc.add(new IntField(\"date2\", Integer.valueOf(date), Field.Store.NO));\n      writer.addDocument(doc);\n      line = d.readLine();\n    }\n    d.close();\n    writer.shutdown();\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET);\n    //initialize the parser\n    builder = new CorePlusExtensionsParser(\"contents\", analyzer);\n\n    BufferedReader d = new BufferedReader(new InputStreamReader(\n        TestParser.class.getResourceAsStream(\"reuters21578.txt\"), StandardCharsets.US_ASCII));\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    String line = d.readLine();\n    while (line != null) {\n      int endOfDate = line.indexOf('\\t');\n      String date = line.substring(0, endOfDate).trim();\n      String content = line.substring(endOfDate).trim();\n      Document doc = new Document();\n      doc.add(newTextField(\"date\", date, Field.Store.YES));\n      doc.add(newTextField(\"contents\", content, Field.Store.YES));\n      doc.add(new IntField(\"date2\", Integer.valueOf(date), Field.Store.NO));\n      writer.addDocument(doc);\n      line = d.readLine();\n    }\n    d.close();\n    writer.close();\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#beforeClass().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET);\n    //initialize the parser\n    builder = new CorePlusExtensionsParser(\"contents\", analyzer);\n\n    BufferedReader d = new BufferedReader(new InputStreamReader(\n        TestParser.class.getResourceAsStream(\"reuters21578.txt\"), StandardCharsets.US_ASCII));\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(analyzer));\n    String line = d.readLine();\n    while (line != null) {\n      int endOfDate = line.indexOf('\\t');\n      String date = line.substring(0, endOfDate).trim();\n      String content = line.substring(endOfDate).trim();\n      Document doc = new Document();\n      doc.add(newTextField(\"date\", date, Field.Store.YES));\n      doc.add(newTextField(\"contents\", content, Field.Store.YES));\n      doc.add(new IntField(\"date2\", Integer.valueOf(date), Field.Store.NO));\n      writer.addDocument(doc);\n      line = d.readLine();\n    }\n    d.close();\n    writer.shutdown();\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET);\n    //initialize the parser\n    builder = new CorePlusExtensionsParser(\"contents\", analyzer);\n\n    BufferedReader d = new BufferedReader(new InputStreamReader(\n        TestParser.class.getResourceAsStream(\"reuters21578.txt\"), StandardCharsets.US_ASCII));\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    String line = d.readLine();\n    while (line != null) {\n      int endOfDate = line.indexOf('\\t');\n      String date = line.substring(0, endOfDate).trim();\n      String content = line.substring(endOfDate).trim();\n      Document doc = new Document();\n      doc.add(newTextField(\"date\", date, Field.Store.YES));\n      doc.add(newTextField(\"contents\", content, Field.Store.YES));\n      doc.add(new IntField(\"date2\", Integer.valueOf(date), Field.Store.NO));\n      writer.addDocument(doc);\n      line = d.readLine();\n    }\n    d.close();\n    writer.shutdown();\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#beforeClass().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET);\n    //initialize the parser\n    builder = new CorePlusExtensionsParser(\"contents\", analyzer);\n\n    BufferedReader d = new BufferedReader(new InputStreamReader(\n        TestParser.class.getResourceAsStream(\"reuters21578.txt\"), StandardCharsets.US_ASCII));\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(analyzer));\n    String line = d.readLine();\n    while (line != null) {\n      int endOfDate = line.indexOf('\\t');\n      String date = line.substring(0, endOfDate).trim();\n      String content = line.substring(endOfDate).trim();\n      Document doc = new Document();\n      doc.add(newTextField(\"date\", date, Field.Store.YES));\n      doc.add(newTextField(\"contents\", content, Field.Store.YES));\n      doc.add(new IntField(\"date2\", Integer.valueOf(date), Field.Store.NO));\n      writer.addDocument(doc);\n      line = d.readLine();\n    }\n    d.close();\n    writer.close();\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET);\n    //initialize the parser\n    builder = new CorePlusExtensionsParser(\"contents\", analyzer);\n\n    BufferedReader d = new BufferedReader(new InputStreamReader(\n        TestParser.class.getResourceAsStream(\"reuters21578.txt\"), StandardCharsets.US_ASCII));\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(analyzer));\n    String line = d.readLine();\n    while (line != null) {\n      int endOfDate = line.indexOf('\\t');\n      String date = line.substring(0, endOfDate).trim();\n      String content = line.substring(endOfDate).trim();\n      Document doc = new Document();\n      doc.add(newTextField(\"date\", date, Field.Store.YES));\n      doc.add(newTextField(\"contents\", content, Field.Store.YES));\n      doc.add(new IntField(\"date2\", Integer.valueOf(date), Field.Store.NO));\n      writer.addDocument(doc);\n      line = d.readLine();\n    }\n    d.close();\n    writer.shutdown();\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb8f5756bc9cba776ca3eafb39ae93ad684911a5","date":1449509020,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#beforeClass().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n    analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET);\n    //initialize the parser\n    coreParser = new CorePlusExtensionsParser(\"contents\", analyzer);\n\n    BufferedReader d = new BufferedReader(new InputStreamReader(\n        TestParser.class.getResourceAsStream(\"reuters21578.txt\"), StandardCharsets.US_ASCII));\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(analyzer));\n    String line = d.readLine();\n    while (line != null) {\n      int endOfDate = line.indexOf('\\t');\n      String date = line.substring(0, endOfDate).trim();\n      String content = line.substring(endOfDate).trim();\n      Document doc = new Document();\n      doc.add(newTextField(\"date\", date, Field.Store.YES));\n      doc.add(newTextField(\"contents\", content, Field.Store.YES));\n      doc.add(new IntField(\"date2\", Integer.valueOf(date), Field.Store.NO));\n      writer.addDocument(doc);\n      line = d.readLine();\n    }\n    d.close();\n    writer.close();\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET);\n    //initialize the parser\n    builder = new CorePlusExtensionsParser(\"contents\", analyzer);\n\n    BufferedReader d = new BufferedReader(new InputStreamReader(\n        TestParser.class.getResourceAsStream(\"reuters21578.txt\"), StandardCharsets.US_ASCII));\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(analyzer));\n    String line = d.readLine();\n    while (line != null) {\n      int endOfDate = line.indexOf('\\t');\n      String date = line.substring(0, endOfDate).trim();\n      String content = line.substring(endOfDate).trim();\n      Document doc = new Document();\n      doc.add(newTextField(\"date\", date, Field.Store.YES));\n      doc.add(newTextField(\"contents\", content, Field.Store.YES));\n      doc.add(new IntField(\"date2\", Integer.valueOf(date), Field.Store.NO));\n      writer.addDocument(doc);\n      line = d.readLine();\n    }\n    d.close();\n    writer.close();\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#beforeClass().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n    analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET);\n    //initialize the parser\n    coreParser = new CorePlusExtensionsParser(\"contents\", analyzer);\n\n    BufferedReader d = new BufferedReader(new InputStreamReader(\n        TestParser.class.getResourceAsStream(\"reuters21578.txt\"), StandardCharsets.US_ASCII));\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(analyzer));\n    String line = d.readLine();\n    while (line != null) {\n      int endOfDate = line.indexOf('\\t');\n      String date = line.substring(0, endOfDate).trim();\n      String content = line.substring(endOfDate).trim();\n      Document doc = new Document();\n      doc.add(newTextField(\"date\", date, Field.Store.YES));\n      doc.add(newTextField(\"contents\", content, Field.Store.YES));\n      doc.add(new LegacyIntField(\"date2\", Integer.valueOf(date), Field.Store.NO));\n      writer.addDocument(doc);\n      line = d.readLine();\n    }\n    d.close();\n    writer.close();\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n    analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET);\n    //initialize the parser\n    coreParser = new CorePlusExtensionsParser(\"contents\", analyzer);\n\n    BufferedReader d = new BufferedReader(new InputStreamReader(\n        TestParser.class.getResourceAsStream(\"reuters21578.txt\"), StandardCharsets.US_ASCII));\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(analyzer));\n    String line = d.readLine();\n    while (line != null) {\n      int endOfDate = line.indexOf('\\t');\n      String date = line.substring(0, endOfDate).trim();\n      String content = line.substring(endOfDate).trim();\n      Document doc = new Document();\n      doc.add(newTextField(\"date\", date, Field.Store.YES));\n      doc.add(newTextField(\"contents\", content, Field.Store.YES));\n      doc.add(new IntField(\"date2\", Integer.valueOf(date), Field.Store.NO));\n      writer.addDocument(doc);\n      line = d.readLine();\n    }\n    d.close();\n    writer.close();\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"388b4c6df4255b848d4c97621ebcf07cc4c46a2a","date":1450786558,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#beforeClass().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n    analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET);\n    //initialize the parser\n    coreParser = new CoreParser(defaultField, analyzer);\n\n    BufferedReader d = new BufferedReader(new InputStreamReader(\n        TestParser.class.getResourceAsStream(\"reuters21578.txt\"), StandardCharsets.US_ASCII));\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(analyzer));\n    String line = d.readLine();\n    while (line != null) {\n      int endOfDate = line.indexOf('\\t');\n      String date = line.substring(0, endOfDate).trim();\n      String content = line.substring(endOfDate).trim();\n      Document doc = new Document();\n      doc.add(newTextField(\"date\", date, Field.Store.YES));\n      doc.add(newTextField(\"contents\", content, Field.Store.YES));\n      doc.add(new LegacyIntField(\"date2\", Integer.valueOf(date), Field.Store.NO));\n      writer.addDocument(doc);\n      line = d.readLine();\n    }\n    d.close();\n    writer.close();\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n    analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET);\n    //initialize the parser\n    coreParser = new CorePlusExtensionsParser(\"contents\", analyzer);\n\n    BufferedReader d = new BufferedReader(new InputStreamReader(\n        TestParser.class.getResourceAsStream(\"reuters21578.txt\"), StandardCharsets.US_ASCII));\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(analyzer));\n    String line = d.readLine();\n    while (line != null) {\n      int endOfDate = line.indexOf('\\t');\n      String date = line.substring(0, endOfDate).trim();\n      String content = line.substring(endOfDate).trim();\n      Document doc = new Document();\n      doc.add(newTextField(\"date\", date, Field.Store.YES));\n      doc.add(newTextField(\"contents\", content, Field.Store.YES));\n      doc.add(new LegacyIntField(\"date2\", Integer.valueOf(date), Field.Store.NO));\n      writer.addDocument(doc);\n      line = d.readLine();\n    }\n    d.close();\n    writer.close();\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f054843acc706da8f2f007c842699d62e4af736c","date":1450870707,"type":5,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestCoreParser#beforeClass().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n    analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET);\n    //initialize the parser\n    coreParser = new CoreParser(defaultField, analyzer);\n\n    BufferedReader d = new BufferedReader(new InputStreamReader(\n        TestCoreParser.class.getResourceAsStream(\"reuters21578.txt\"), StandardCharsets.US_ASCII));\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(analyzer));\n    String line = d.readLine();\n    while (line != null) {\n      int endOfDate = line.indexOf('\\t');\n      String date = line.substring(0, endOfDate).trim();\n      String content = line.substring(endOfDate).trim();\n      Document doc = new Document();\n      doc.add(newTextField(\"date\", date, Field.Store.YES));\n      doc.add(newTextField(\"contents\", content, Field.Store.YES));\n      doc.add(new LegacyIntField(\"date2\", Integer.valueOf(date), Field.Store.NO));\n      writer.addDocument(doc);\n      line = d.readLine();\n    }\n    d.close();\n    writer.close();\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n    analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET);\n    //initialize the parser\n    coreParser = new CoreParser(defaultField, analyzer);\n\n    BufferedReader d = new BufferedReader(new InputStreamReader(\n        TestParser.class.getResourceAsStream(\"reuters21578.txt\"), StandardCharsets.US_ASCII));\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(analyzer));\n    String line = d.readLine();\n    while (line != null) {\n      int endOfDate = line.indexOf('\\t');\n      String date = line.substring(0, endOfDate).trim();\n      String content = line.substring(endOfDate).trim();\n      Document doc = new Document();\n      doc.add(newTextField(\"date\", date, Field.Store.YES));\n      doc.add(newTextField(\"contents\", content, Field.Store.YES));\n      doc.add(new LegacyIntField(\"date2\", Integer.valueOf(date), Field.Store.NO));\n      writer.addDocument(doc);\n      line = d.readLine();\n    }\n    d.close();\n    writer.close();\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["0bf41419d452997826ec5f17684993377be77f49","7d89d7e4e5101347833eea558851bf4209218619"],"388b4c6df4255b848d4c97621ebcf07cc4c46a2a":["770342641f7b505eaa8dccdc666158bff2419109"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"eafa8c5eabc3dacd34680054e6a33bda024080ac":["58b927ebb36b8784b0b3f719b1ef2752336a2e77"],"eb8f5756bc9cba776ca3eafb39ae93ad684911a5":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"7d89d7e4e5101347833eea558851bf4209218619":["0bf41419d452997826ec5f17684993377be77f49"],"770342641f7b505eaa8dccdc666158bff2419109":["eb8f5756bc9cba776ca3eafb39ae93ad684911a5"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"58b927ebb36b8784b0b3f719b1ef2752336a2e77":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0bf41419d452997826ec5f17684993377be77f49":["eafa8c5eabc3dacd34680054e6a33bda024080ac"],"f054843acc706da8f2f007c842699d62e4af736c":["388b4c6df4255b848d4c97621ebcf07cc4c46a2a"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["04f07771a2a7dd3a395700665ed839c3dae2def2","58b927ebb36b8784b0b3f719b1ef2752336a2e77"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["eafa8c5eabc3dacd34680054e6a33bda024080ac","0bf41419d452997826ec5f17684993377be77f49"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["7d89d7e4e5101347833eea558851bf4209218619"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f054843acc706da8f2f007c842699d62e4af736c"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"388b4c6df4255b848d4c97621ebcf07cc4c46a2a":["f054843acc706da8f2f007c842699d62e4af736c"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"eafa8c5eabc3dacd34680054e6a33bda024080ac":["0bf41419d452997826ec5f17684993377be77f49","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"eb8f5756bc9cba776ca3eafb39ae93ad684911a5":["770342641f7b505eaa8dccdc666158bff2419109"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"770342641f7b505eaa8dccdc666158bff2419109":["388b4c6df4255b848d4c97621ebcf07cc4c46a2a"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["58b927ebb36b8784b0b3f719b1ef2752336a2e77","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"58b927ebb36b8784b0b3f719b1ef2752336a2e77":["eafa8c5eabc3dacd34680054e6a33bda024080ac","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"0bf41419d452997826ec5f17684993377be77f49":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"f054843acc706da8f2f007c842699d62e4af736c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["eb8f5756bc9cba776ca3eafb39ae93ad684911a5"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","fe33227f6805edab2036cbb80645cc4e2d1fa424","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}