{"path":"src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","commits":[{"id":"9a5ad5c18e239ce1e266fa045f3016ec1cb80cdc","date":1131138902,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandomQueries() throws Exception {\n    Random rnd = new Random(0);\n\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n    // increase number of iterations for more complete testing\n    for (int i=0; i<1000; i++) {\n      int level = rnd.nextInt(3);\n      BooleanQuery q1 = randBoolQuery(new Random(i), level, field, vals, null);\n\n      // Can't sort by relevance since floating point numbers may not quite\n      // match up.\n      Sort sort = Sort.INDEXORDER;\n\n      BooleanQuery.setUseScorer14(false);\n      Hits hits1 = searcher.search(q1,sort);\n      if (hits1.length()>0) hits1.id(hits1.length()-1);\n\n      BooleanQuery.setUseScorer14(true);\n      Hits hits2 = searcher.search(q1,sort);\n      if (hits2.length()>0) hits2.id(hits1.length()-1);\n      tot+=hits2.length();\n      CheckHits.checkEqual(q1, hits1, hits2);\n    }\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ea6fc03e82fd6d988bc20c201471202ceca0f0e","date":1131291148,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","pathOld":"src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","sourceNew":"  public void testRandomQueries() throws Exception {\n    Random rnd = new Random(0);\n\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    try {\n\n      // increase number of iterations for more complete testing\n      for (int i=0; i<1000; i++) {\n        int level = rnd.nextInt(3);\n        BooleanQuery q1 = randBoolQuery(new Random(i), level, field, vals, null);\n\n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        BooleanQuery.setUseScorer14(false);\n        Hits hits1 = searcher.search(q1,sort);\n        if (hits1.length()>0) hits1.id(hits1.length()-1);\n\n        BooleanQuery.setUseScorer14(true);\n        Hits hits2 = searcher.search(q1,sort);\n        if (hits2.length()>0) hits2.id(hits1.length()-1);\n        tot+=hits2.length();\n        CheckHits.checkEqual(q1, hits1, hits2);\n      }\n\n    } finally { // even when a test fails.\n      BooleanQuery.setUseScorer14(false);\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","sourceOld":"  public void testRandomQueries() throws Exception {\n    Random rnd = new Random(0);\n\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n    // increase number of iterations for more complete testing\n    for (int i=0; i<1000; i++) {\n      int level = rnd.nextInt(3);\n      BooleanQuery q1 = randBoolQuery(new Random(i), level, field, vals, null);\n\n      // Can't sort by relevance since floating point numbers may not quite\n      // match up.\n      Sort sort = Sort.INDEXORDER;\n\n      BooleanQuery.setUseScorer14(false);\n      Hits hits1 = searcher.search(q1,sort);\n      if (hits1.length()>0) hits1.id(hits1.length()-1);\n\n      BooleanQuery.setUseScorer14(true);\n      Hits hits2 = searcher.search(q1,sort);\n      if (hits2.length()>0) hits2.id(hits1.length()-1);\n      tot+=hits2.length();\n      CheckHits.checkEqual(q1, hits1, hits2);\n    }\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","bugFix":null,"bugIntro":["7c82b0d4b7bf499a159eeff92add20bac6599cc1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aabae793f43472efdf1dcdaae4e01e28cfc23ccd","date":1161750034,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","pathOld":"src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","sourceNew":"  public void testRandomQueries() throws Exception {\n    Random rnd = new Random(0);\n\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    try {\n\n      // increase number of iterations for more complete testing\n      for (int i=0; i<1000; i++) {\n        int level = rnd.nextInt(3);\n        BooleanQuery q1 = randBoolQuery(new Random(i), level, field, vals, null);\n\n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        BooleanQuery.setUseScorer14(false);\n\n        QueryUtils.check(q1,searcher);\n\n        Hits hits1 = searcher.search(q1,sort);\n        if (hits1.length()>0) hits1.id(hits1.length()-1);\n\n        BooleanQuery.setUseScorer14(true);\n        Hits hits2 = searcher.search(q1,sort);\n        if (hits2.length()>0) hits2.id(hits1.length()-1);\n        tot+=hits2.length();\n        CheckHits.checkEqual(q1, hits1, hits2);\n      }\n\n    } finally { // even when a test fails.\n      BooleanQuery.setUseScorer14(false);\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","sourceOld":"  public void testRandomQueries() throws Exception {\n    Random rnd = new Random(0);\n\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    try {\n\n      // increase number of iterations for more complete testing\n      for (int i=0; i<1000; i++) {\n        int level = rnd.nextInt(3);\n        BooleanQuery q1 = randBoolQuery(new Random(i), level, field, vals, null);\n\n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        BooleanQuery.setUseScorer14(false);\n        Hits hits1 = searcher.search(q1,sort);\n        if (hits1.length()>0) hits1.id(hits1.length()-1);\n\n        BooleanQuery.setUseScorer14(true);\n        Hits hits2 = searcher.search(q1,sort);\n        if (hits2.length()>0) hits2.id(hits1.length()-1);\n        tot+=hits2.length();\n        CheckHits.checkEqual(q1, hits1, hits2);\n      }\n\n    } finally { // even when a test fails.\n      BooleanQuery.setUseScorer14(false);\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6212677fdd165340d4284ad2530970c664042d6e","date":1180380790,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","pathOld":"src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","sourceNew":"  public void testRandomQueries() throws Exception {\n    Random rnd = new Random(0);\n\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    try {\n\n      // increase number of iterations for more complete testing\n      for (int i=0; i<1000; i++) {\n        int level = rnd.nextInt(3);\n        BooleanQuery q1 = randBoolQuery(new Random(i), level, field, vals, null);\n\n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        BooleanQuery.setAllowDocsOutOfOrder(false);\n\n        QueryUtils.check(q1,searcher);\n\n        Hits hits1 = searcher.search(q1,sort);\n        if (hits1.length()>0) hits1.id(hits1.length()-1);\n\n        BooleanQuery.setAllowDocsOutOfOrder(true);\n        Hits hits2 = searcher.search(q1,sort);\n        if (hits2.length()>0) hits2.id(hits1.length()-1);\n        tot+=hits2.length();\n        CheckHits.checkEqual(q1, hits1, hits2);\n      }\n\n    } finally { // even when a test fails.\n      BooleanQuery.setAllowDocsOutOfOrder(false);\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","sourceOld":"  public void testRandomQueries() throws Exception {\n    Random rnd = new Random(0);\n\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    try {\n\n      // increase number of iterations for more complete testing\n      for (int i=0; i<1000; i++) {\n        int level = rnd.nextInt(3);\n        BooleanQuery q1 = randBoolQuery(new Random(i), level, field, vals, null);\n\n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        BooleanQuery.setUseScorer14(false);\n\n        QueryUtils.check(q1,searcher);\n\n        Hits hits1 = searcher.search(q1,sort);\n        if (hits1.length()>0) hits1.id(hits1.length()-1);\n\n        BooleanQuery.setUseScorer14(true);\n        Hits hits2 = searcher.search(q1,sort);\n        if (hits2.length()>0) hits2.id(hits1.length()-1);\n        tot+=hits2.length();\n        CheckHits.checkEqual(q1, hits1, hits2);\n      }\n\n    } finally { // even when a test fails.\n      BooleanQuery.setUseScorer14(false);\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","pathOld":"src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","sourceNew":"  public void testRandomQueries() throws Exception {\n    Random rnd = new Random(0);\n\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    try {\n\n      // increase number of iterations for more complete testing\n      for (int i=0; i<1000; i++) {\n        int level = rnd.nextInt(3);\n        BooleanQuery q1 = randBoolQuery(new Random(i), level, field, vals, null);\n\n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        BooleanQuery.setAllowDocsOutOfOrder(false);\n\n        QueryUtils.check(q1,searcher);\n\n        ScoreDoc[] hits1 = searcher.search(q1,null, 1000, sort).scoreDocs;\n\n        BooleanQuery.setAllowDocsOutOfOrder(true);\n        ScoreDoc[] hits2 = searcher.search(q1,null, 1000, sort).scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n      }\n\n    } finally { // even when a test fails.\n      BooleanQuery.setAllowDocsOutOfOrder(false);\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","sourceOld":"  public void testRandomQueries() throws Exception {\n    Random rnd = new Random(0);\n\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    try {\n\n      // increase number of iterations for more complete testing\n      for (int i=0; i<1000; i++) {\n        int level = rnd.nextInt(3);\n        BooleanQuery q1 = randBoolQuery(new Random(i), level, field, vals, null);\n\n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        BooleanQuery.setAllowDocsOutOfOrder(false);\n\n        QueryUtils.check(q1,searcher);\n\n        Hits hits1 = searcher.search(q1,sort);\n        if (hits1.length()>0) hits1.id(hits1.length()-1);\n\n        BooleanQuery.setAllowDocsOutOfOrder(true);\n        Hits hits2 = searcher.search(q1,sort);\n        if (hits2.length()>0) hits2.id(hits1.length()-1);\n        tot+=hits2.length();\n        CheckHits.checkEqual(q1, hits1, hits2);\n      }\n\n    } finally { // even when a test fails.\n      BooleanQuery.setAllowDocsOutOfOrder(false);\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cb1066f2afe9450585d0d10063ea4450085236f1","date":1233870820,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","pathOld":"src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","sourceNew":"  public void testRandomQueries() throws Exception {\n    Random rnd = newRandom();\n\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    try {\n\n      // increase number of iterations for more complete testing\n      for (int i=0; i<1000; i++) {\n        int level = rnd.nextInt(3);\n        BooleanQuery q1 = randBoolQuery(new Random(rnd.nextLong()), level, field, vals, null);\n\n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        BooleanQuery.setAllowDocsOutOfOrder(false);\n\n        QueryUtils.check(q1,searcher);\n\n        ScoreDoc[] hits1 = searcher.search(q1,null, 1000, sort).scoreDocs;\n\n        BooleanQuery.setAllowDocsOutOfOrder(true);\n        ScoreDoc[] hits2 = searcher.search(q1,null, 1000, sort).scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n      }\n\n    } finally { // even when a test fails.\n      BooleanQuery.setAllowDocsOutOfOrder(false);\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","sourceOld":"  public void testRandomQueries() throws Exception {\n    Random rnd = new Random(0);\n\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    try {\n\n      // increase number of iterations for more complete testing\n      for (int i=0; i<1000; i++) {\n        int level = rnd.nextInt(3);\n        BooleanQuery q1 = randBoolQuery(new Random(i), level, field, vals, null);\n\n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        BooleanQuery.setAllowDocsOutOfOrder(false);\n\n        QueryUtils.check(q1,searcher);\n\n        ScoreDoc[] hits1 = searcher.search(q1,null, 1000, sort).scoreDocs;\n\n        BooleanQuery.setAllowDocsOutOfOrder(true);\n        ScoreDoc[] hits2 = searcher.search(q1,null, 1000, sort).scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n      }\n\n    } finally { // even when a test fails.\n      BooleanQuery.setAllowDocsOutOfOrder(false);\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"30a558487f2298c2c19ceca9103c1b6865d64708","date":1244393921,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","pathOld":"src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","sourceNew":"  public void testRandomQueries() throws Exception {\n    Random rnd = newRandom();\n\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      for (int i=0; i<1000; i++) {\n        int level = rnd.nextInt(3);\n        q1 = randBoolQuery(new Random(rnd.nextLong()), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        BooleanQuery.setAllowDocsOutOfOrder(false);\n\n        QueryUtils.check(q1,searcher);\n\n        ScoreDoc[] hits1 = searcher.search(q1,null, 1000, sort).scoreDocs;\n\n        BooleanQuery.setAllowDocsOutOfOrder(true);\n        ScoreDoc[] hits2 = searcher.search(q1,null, 1000, sort).scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    } finally { // even when a test fails.\n      BooleanQuery.setAllowDocsOutOfOrder(false);\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","sourceOld":"  public void testRandomQueries() throws Exception {\n    Random rnd = newRandom();\n\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    try {\n\n      // increase number of iterations for more complete testing\n      for (int i=0; i<1000; i++) {\n        int level = rnd.nextInt(3);\n        BooleanQuery q1 = randBoolQuery(new Random(rnd.nextLong()), level, field, vals, null);\n\n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        BooleanQuery.setAllowDocsOutOfOrder(false);\n\n        QueryUtils.check(q1,searcher);\n\n        ScoreDoc[] hits1 = searcher.search(q1,null, 1000, sort).scoreDocs;\n\n        BooleanQuery.setAllowDocsOutOfOrder(true);\n        ScoreDoc[] hits2 = searcher.search(q1,null, 1000, sort).scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n      }\n\n    } finally { // even when a test fails.\n      BooleanQuery.setAllowDocsOutOfOrder(false);\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","bugFix":null,"bugIntro":["97358022f8fb21ca48fc5f2eb205c98a484e2174"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"131a9e895609b4da33662dc087e0bc6303e1e29c","date":1255458397,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","pathOld":"src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","sourceNew":"  public void testRandomQueries() throws Exception {\n    Random rnd = newRandom();\n\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      for (int i=0; i<1000; i++) {\n        int level = rnd.nextInt(3);\n        q1 = randBoolQuery(new Random(rnd.nextLong()), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(q1,searcher);\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, false);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","sourceOld":"  public void testRandomQueries() throws Exception {\n    Random rnd = newRandom();\n\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      for (int i=0; i<1000; i++) {\n        int level = rnd.nextInt(3);\n        q1 = randBoolQuery(new Random(rnd.nextLong()), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        BooleanQuery.setAllowDocsOutOfOrder(false);\n\n        QueryUtils.check(q1,searcher);\n\n        ScoreDoc[] hits1 = searcher.search(q1,null, 1000, sort).scoreDocs;\n\n        BooleanQuery.setAllowDocsOutOfOrder(true);\n        ScoreDoc[] hits2 = searcher.search(q1,null, 1000, sort).scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    } finally { // even when a test fails.\n      BooleanQuery.setAllowDocsOutOfOrder(false);\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","bugFix":null,"bugIntro":["7c82b0d4b7bf499a159eeff92add20bac6599cc1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"97358022f8fb21ca48fc5f2eb205c98a484e2174","date":1255525101,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","pathOld":"src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","sourceNew":"  public void testRandomQueries() throws Exception {\n    Random rnd = newRandom();\n\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      for (int i=0; i<1000; i++) {\n        int level = rnd.nextInt(3);\n        q1 = randBoolQuery(new Random(rnd.nextLong()), rnd.nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(q1,searcher);\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, false);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","sourceOld":"  public void testRandomQueries() throws Exception {\n    Random rnd = newRandom();\n\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      for (int i=0; i<1000; i++) {\n        int level = rnd.nextInt(3);\n        q1 = randBoolQuery(new Random(rnd.nextLong()), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(q1,searcher);\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, false);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","bugFix":["30a558487f2298c2c19ceca9103c1b6865d64708"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"90cb6b3f4e5652555b614adc90204287fbebd27c","date":1259494272,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","pathOld":"src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","sourceNew":"  public void testRandomQueries() throws Exception {\n    Random rnd = newRandom();\n\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      for (int i=0; i<50; i++) {\n        int level = rnd.nextInt(3);\n        q1 = randBoolQuery(new Random(rnd.nextLong()), rnd.nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(q1,searcher);\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, false);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","sourceOld":"  public void testRandomQueries() throws Exception {\n    Random rnd = newRandom();\n\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      for (int i=0; i<1000; i++) {\n        int level = rnd.nextInt(3);\n        q1 = randBoolQuery(new Random(rnd.nextLong()), rnd.nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(q1,searcher);\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, false);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","pathOld":"src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","sourceNew":"  public void testRandomQueries() throws Exception {\n    Random rnd = newRandom();\n\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      for (int i=0; i<50; i++) {\n        int level = rnd.nextInt(3);\n        q1 = randBoolQuery(new Random(rnd.nextLong()), rnd.nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(q1,searcher);\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, false);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","sourceOld":"  public void testRandomQueries() throws Exception {\n    Random rnd = newRandom();\n\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      for (int i=0; i<50; i++) {\n        int level = rnd.nextInt(3);\n        q1 = randBoolQuery(new Random(rnd.nextLong()), rnd.nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(q1,searcher);\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, false);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"cb1066f2afe9450585d0d10063ea4450085236f1":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"9a5ad5c18e239ce1e266fa045f3016ec1cb80cdc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5ea6fc03e82fd6d988bc20c201471202ceca0f0e":["9a5ad5c18e239ce1e266fa045f3016ec1cb80cdc"],"131a9e895609b4da33662dc087e0bc6303e1e29c":["30a558487f2298c2c19ceca9103c1b6865d64708"],"6212677fdd165340d4284ad2530970c664042d6e":["aabae793f43472efdf1dcdaae4e01e28cfc23ccd"],"aabae793f43472efdf1dcdaae4e01e28cfc23ccd":["5ea6fc03e82fd6d988bc20c201471202ceca0f0e"],"97358022f8fb21ca48fc5f2eb205c98a484e2174":["131a9e895609b4da33662dc087e0bc6303e1e29c"],"90cb6b3f4e5652555b614adc90204287fbebd27c":["97358022f8fb21ca48fc5f2eb205c98a484e2174"],"30a558487f2298c2c19ceca9103c1b6865d64708":["cb1066f2afe9450585d0d10063ea4450085236f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af07783dbc171e26a694c4f7d735e30c2769faa":["6212677fdd165340d4284ad2530970c664042d6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90cb6b3f4e5652555b614adc90204287fbebd27c"]},"commit2Childs":{"cb1066f2afe9450585d0d10063ea4450085236f1":["30a558487f2298c2c19ceca9103c1b6865d64708"],"9a5ad5c18e239ce1e266fa045f3016ec1cb80cdc":["5ea6fc03e82fd6d988bc20c201471202ceca0f0e"],"5ea6fc03e82fd6d988bc20c201471202ceca0f0e":["aabae793f43472efdf1dcdaae4e01e28cfc23ccd"],"131a9e895609b4da33662dc087e0bc6303e1e29c":["97358022f8fb21ca48fc5f2eb205c98a484e2174"],"6212677fdd165340d4284ad2530970c664042d6e":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"aabae793f43472efdf1dcdaae4e01e28cfc23ccd":["6212677fdd165340d4284ad2530970c664042d6e"],"97358022f8fb21ca48fc5f2eb205c98a484e2174":["90cb6b3f4e5652555b614adc90204287fbebd27c"],"90cb6b3f4e5652555b614adc90204287fbebd27c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"30a558487f2298c2c19ceca9103c1b6865d64708":["131a9e895609b4da33662dc087e0bc6303e1e29c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9a5ad5c18e239ce1e266fa045f3016ec1cb80cdc"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["cb1066f2afe9450585d0d10063ea4450085236f1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}