{"path":"contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#assembleDocument(Document,int).mjava","commits":[{"id":"e7a005111928c661ab5d236ed6a3a079b438d2cf","date":1205411670,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#assembleDocument(Document,int).mjava","pathOld":"/dev/null","sourceNew":"  private void assembleDocument(Document document, int i) {\n    document.add(new Field(\"a\", i + \" Do you really want to go and live in that house all winter?\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    if (i > 0) {\n      document.add(new Field(\"b0\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      document.add(new Field(\"b1\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.NO_NORMS, Field.TermVector.NO));\n      document.add(new Field(\"b2\", i + \" All work and no play makes Jack a dull boy\", Field.Store.NO, Field.Index.UN_TOKENIZED, Field.TermVector.NO));\n      document.add(new Field(\"b3\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.NO, Field.TermVector.NO));\n      if (i > 1) {\n        document.add(new Field(\"c\", i + \" Redrum redrum\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        if (i > 2) {\n          document.add(new Field(\"d\", i + \" Hello Danny, come and play with us... forever and ever. and ever.\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          if (i > 3) {\n            Field f = new Field(\"e\", i + \" Heres Johnny!\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n            f.setOmitNorms(true);\n            document.add(f);\n            if (i > 4) {\n              final List<Token> tokens = new ArrayList<Token>(2);\n              Token t = new Token(\"the\", 0, 2, \"text\");\n              t.setPayload(new Payload(new byte[]{1, 2, 3}));\n              tokens.add(t);\n              t = new Token(\"end\", 3, 5, \"text\");\n              t.setPayload(new Payload(new byte[]{2}));\n              tokens.add(t);\n              tokens.add(new Token(\"fin\", 7, 9));\n              document.add(new Field(\"f\", new TokenStream() {\n                Iterator<Token> it = tokens.iterator();\n\n                public Token next() throws IOException {\n                  if (!it.hasNext()) {\n                    return null;\n                  }\n                  return it.next();\n                }\n\n                public void reset() throws IOException {\n                  it = tokens.iterator();\n                }\n              }));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#assembleDocument(Document,int).mjava","pathOld":"contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#assembleDocument(Document,int).mjava","sourceNew":"  private void assembleDocument(Document document, int i) {\n    document.add(new Field(\"a\", i + \" Do you really want to go and live in that house all winter?\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    if (i > 0) {\n      document.add(new Field(\"b0\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      document.add(new Field(\"b1\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.NO_NORMS, Field.TermVector.NO));\n      document.add(new Field(\"b2\", i + \" All work and no play makes Jack a dull boy\", Field.Store.NO, Field.Index.UN_TOKENIZED, Field.TermVector.NO));\n      document.add(new Field(\"b3\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.NO, Field.TermVector.NO));\n      if (i > 1) {\n        document.add(new Field(\"c\", i + \" Redrum redrum\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        if (i > 2) {\n          document.add(new Field(\"d\", i + \" Hello Danny, come and play with us... forever and ever. and ever.\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          if (i > 3) {\n            Field f = new Field(\"e\", i + \" Heres Johnny!\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n            f.setOmitNorms(true);\n            document.add(f);\n            if (i > 4) {\n              final List<Token> tokens = new ArrayList<Token>(2);\n              Token t = createToken(\"the\", 0, 2, \"text\");\n              t.setPayload(new Payload(new byte[]{1, 2, 3}));\n              tokens.add(t);\n              t = createToken(\"end\", 3, 5, \"text\");\n              t.setPayload(new Payload(new byte[]{2}));\n              tokens.add(t);\n              tokens.add(createToken(\"fin\", 7, 9));\n              document.add(new Field(\"f\", new TokenStream() {\n                Iterator<Token> it = tokens.iterator();\n\n                public Token next(final Token reusableToken) throws IOException {\n                  assert reusableToken != null;\n                  if (!it.hasNext()) {\n                    return null;\n                  }\n                  // Resettable token streams need to return clones.\n                  Token nextToken = (Token) it.next();\n                  return (Token) nextToken.clone();\n                }\n\n                public void reset() throws IOException {\n                  it = tokens.iterator();\n                }\n              }));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void assembleDocument(Document document, int i) {\n    document.add(new Field(\"a\", i + \" Do you really want to go and live in that house all winter?\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    if (i > 0) {\n      document.add(new Field(\"b0\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      document.add(new Field(\"b1\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.NO_NORMS, Field.TermVector.NO));\n      document.add(new Field(\"b2\", i + \" All work and no play makes Jack a dull boy\", Field.Store.NO, Field.Index.UN_TOKENIZED, Field.TermVector.NO));\n      document.add(new Field(\"b3\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.NO, Field.TermVector.NO));\n      if (i > 1) {\n        document.add(new Field(\"c\", i + \" Redrum redrum\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        if (i > 2) {\n          document.add(new Field(\"d\", i + \" Hello Danny, come and play with us... forever and ever. and ever.\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          if (i > 3) {\n            Field f = new Field(\"e\", i + \" Heres Johnny!\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n            f.setOmitNorms(true);\n            document.add(f);\n            if (i > 4) {\n              final List<Token> tokens = new ArrayList<Token>(2);\n              Token t = new Token(\"the\", 0, 2, \"text\");\n              t.setPayload(new Payload(new byte[]{1, 2, 3}));\n              tokens.add(t);\n              t = new Token(\"end\", 3, 5, \"text\");\n              t.setPayload(new Payload(new byte[]{2}));\n              tokens.add(t);\n              tokens.add(new Token(\"fin\", 7, 9));\n              document.add(new Field(\"f\", new TokenStream() {\n                Iterator<Token> it = tokens.iterator();\n\n                public Token next() throws IOException {\n                  if (!it.hasNext()) {\n                    return null;\n                  }\n                  return it.next();\n                }\n\n                public void reset() throws IOException {\n                  it = tokens.iterator();\n                }\n              }));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#assembleDocument(Document,int).mjava","pathOld":"contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#assembleDocument(Document,int).mjava","sourceNew":"  private void assembleDocument(Document document, int i) {\n    document.add(new Field(\"a\", i + \" Do you really want to go and live in that house all winter?\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    if (i > 0) {\n      document.add(new Field(\"b0\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      document.add(new Field(\"b1\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS, Field.TermVector.NO));\n      document.add(new Field(\"b2\", i + \" All work and no play makes Jack a dull boy\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.NO));\n      document.add(new Field(\"b3\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.NO, Field.TermVector.NO));\n      if (i > 1) {\n        document.add(new Field(\"c\", i + \" Redrum redrum\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        if (i > 2) {\n          document.add(new Field(\"d\", i + \" Hello Danny, come and play with us... forever and ever. and ever.\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          if (i > 3) {\n            Field f = new Field(\"e\", i + \" Heres Johnny!\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n            f.setOmitNorms(true);\n            document.add(f);\n            if (i > 4) {\n              final List<Token> tokens = new ArrayList<Token>(2);\n              Token t = createToken(\"the\", 0, 2, \"text\");\n              t.setPayload(new Payload(new byte[]{1, 2, 3}));\n              tokens.add(t);\n              t = createToken(\"end\", 3, 5, \"text\");\n              t.setPayload(new Payload(new byte[]{2}));\n              tokens.add(t);\n              tokens.add(createToken(\"fin\", 7, 9));\n              document.add(new Field(\"f\", new TokenStream() {\n                Iterator<Token> it = tokens.iterator();\n\n                public Token next(final Token reusableToken) throws IOException {\n                  assert reusableToken != null;\n                  if (!it.hasNext()) {\n                    return null;\n                  }\n                  // Resettable token streams need to return clones.\n                  Token nextToken = (Token) it.next();\n                  return (Token) nextToken.clone();\n                }\n\n                public void reset() throws IOException {\n                  it = tokens.iterator();\n                }\n              }));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void assembleDocument(Document document, int i) {\n    document.add(new Field(\"a\", i + \" Do you really want to go and live in that house all winter?\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    if (i > 0) {\n      document.add(new Field(\"b0\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      document.add(new Field(\"b1\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.NO_NORMS, Field.TermVector.NO));\n      document.add(new Field(\"b2\", i + \" All work and no play makes Jack a dull boy\", Field.Store.NO, Field.Index.UN_TOKENIZED, Field.TermVector.NO));\n      document.add(new Field(\"b3\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.NO, Field.TermVector.NO));\n      if (i > 1) {\n        document.add(new Field(\"c\", i + \" Redrum redrum\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        if (i > 2) {\n          document.add(new Field(\"d\", i + \" Hello Danny, come and play with us... forever and ever. and ever.\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          if (i > 3) {\n            Field f = new Field(\"e\", i + \" Heres Johnny!\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n            f.setOmitNorms(true);\n            document.add(f);\n            if (i > 4) {\n              final List<Token> tokens = new ArrayList<Token>(2);\n              Token t = createToken(\"the\", 0, 2, \"text\");\n              t.setPayload(new Payload(new byte[]{1, 2, 3}));\n              tokens.add(t);\n              t = createToken(\"end\", 3, 5, \"text\");\n              t.setPayload(new Payload(new byte[]{2}));\n              tokens.add(t);\n              tokens.add(createToken(\"fin\", 7, 9));\n              document.add(new Field(\"f\", new TokenStream() {\n                Iterator<Token> it = tokens.iterator();\n\n                public Token next(final Token reusableToken) throws IOException {\n                  assert reusableToken != null;\n                  if (!it.hasNext()) {\n                    return null;\n                  }\n                  // Resettable token streams need to return clones.\n                  Token nextToken = (Token) it.next();\n                  return (Token) nextToken.clone();\n                }\n\n                public void reset() throws IOException {\n                  it = tokens.iterator();\n                }\n              }));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b5756469957918cac40a831acec9cf01c8c2bb3","date":1249167152,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#assembleDocument(Document,int).mjava","pathOld":"contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#assembleDocument(Document,int).mjava","sourceNew":"  private void assembleDocument(Document document, int i) {\n    document.add(new Field(\"a\", i + \" Do you really want to go and live in that house all winter?\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    if (i > 0) {\n      document.add(new Field(\"b0\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      document.add(new Field(\"b1\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS, Field.TermVector.NO));\n      document.add(new Field(\"b2\", i + \" All work and no play makes Jack a dull boy\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.NO));\n      document.add(new Field(\"b3\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.NO, Field.TermVector.NO));\n      if (i > 1) {\n        document.add(new Field(\"c\", i + \" Redrum redrum\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        if (i > 2) {\n          document.add(new Field(\"d\", i + \" Hello Danny, come and play with us... forever and ever. and ever.\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          if (i > 3) {\n            Field f = new Field(\"e\", i + \" Heres Johnny!\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n            f.setOmitNorms(true);\n            document.add(f);\n            if (i > 4) {\n              final List<Token> tokens = new ArrayList<Token>(2);\n              Token t = createToken(\"the\", 0, 2, \"text\");\n              t.setPayload(new Payload(new byte[]{1, 2, 3}));\n              tokens.add(t);\n              t = createToken(\"end\", 3, 5, \"text\");\n              t.setPayload(new Payload(new byte[]{2}));\n              tokens.add(t);\n              tokens.add(createToken(\"fin\", 7, 9));\n              final Token reusableToken = new Token();\n              TokenStream ts = new TokenStream() {\n                Iterator<Token> it = tokens.iterator();\n                \n                public final boolean incrementToken() throws IOException {\n                  if (!it.hasNext()) {\n                    return false;\n                  }\n\n                  reusableToken.reinit(it.next());\n                  return true;\n                }\n\n                public void reset() throws IOException {\n                  it = tokens.iterator();\n                }\n              };\n              ts.addAttributeImpl(reusableToken);\n              \n              document.add(new Field(\"f\", ts));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void assembleDocument(Document document, int i) {\n    document.add(new Field(\"a\", i + \" Do you really want to go and live in that house all winter?\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    if (i > 0) {\n      document.add(new Field(\"b0\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      document.add(new Field(\"b1\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS, Field.TermVector.NO));\n      document.add(new Field(\"b2\", i + \" All work and no play makes Jack a dull boy\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.NO));\n      document.add(new Field(\"b3\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.NO, Field.TermVector.NO));\n      if (i > 1) {\n        document.add(new Field(\"c\", i + \" Redrum redrum\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        if (i > 2) {\n          document.add(new Field(\"d\", i + \" Hello Danny, come and play with us... forever and ever. and ever.\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          if (i > 3) {\n            Field f = new Field(\"e\", i + \" Heres Johnny!\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n            f.setOmitNorms(true);\n            document.add(f);\n            if (i > 4) {\n              final List<Token> tokens = new ArrayList<Token>(2);\n              Token t = createToken(\"the\", 0, 2, \"text\");\n              t.setPayload(new Payload(new byte[]{1, 2, 3}));\n              tokens.add(t);\n              t = createToken(\"end\", 3, 5, \"text\");\n              t.setPayload(new Payload(new byte[]{2}));\n              tokens.add(t);\n              tokens.add(createToken(\"fin\", 7, 9));\n              document.add(new Field(\"f\", new TokenStream() {\n                Iterator<Token> it = tokens.iterator();\n\n                public Token next(final Token reusableToken) throws IOException {\n                  assert reusableToken != null;\n                  if (!it.hasNext()) {\n                    return null;\n                  }\n                  // Resettable token streams need to return clones.\n                  Token nextToken = (Token) it.next();\n                  return (Token) nextToken.clone();\n                }\n\n                public void reset() throws IOException {\n                  it = tokens.iterator();\n                }\n              }));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4819d0d39bf17025f344afc085c1356e85075d76","date":1254404986,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#assembleDocument(Document,int).mjava","pathOld":"contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#assembleDocument(Document,int).mjava","sourceNew":"  private void assembleDocument(Document document, int i) {\n    document.add(new Field(\"a\", i + \" Do you really want to go and live in that house all winter?\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    if (i > 0) {\n      document.add(new Field(\"b0\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      document.add(new Field(\"b1\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS, Field.TermVector.NO));\n      document.add(new Field(\"b2\", i + \" All work and no play makes Jack a dull boy\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.NO));\n      document.add(new Field(\"b3\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.NO, Field.TermVector.NO));\n      if (i > 1) {\n        document.add(new Field(\"c\", i + \" Redrum redrum\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        if (i > 2) {\n          document.add(new Field(\"d\", i + \" Hello Danny, come and play with us... forever and ever. and ever.\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          if (i > 3) {\n            Field f = new Field(\"e\", i + \" Heres Johnny!\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n            f.setOmitNorms(true);\n            document.add(f);\n            if (i > 4) {\n              final List<Token> tokens = new ArrayList<Token>(2);\n              Token t = createToken(\"the\", 0, 2, \"text\");\n              t.setPayload(new Payload(new byte[]{1, 2, 3}));\n              tokens.add(t);\n              t = createToken(\"end\", 3, 5, \"text\");\n              t.setPayload(new Payload(new byte[]{2}));\n              tokens.add(t);\n              tokens.add(createToken(\"fin\", 7, 9));\n              TokenStream ts = new TokenStream(Token.TOKEN_ATTRIBUTE_FACTORY) {\n                final AttributeImpl reusableToken = (AttributeImpl) addAttribute(TermAttribute.class);\n                Iterator<Token> it = tokens.iterator();\n                \n                public final boolean incrementToken() throws IOException {\n                  if (!it.hasNext()) {\n                    return false;\n                  }\n                  clearAttributes();\n                  it.next().copyTo(reusableToken);\n                  return true;\n                }\n\n                public void reset() throws IOException {\n                  it = tokens.iterator();\n                }\n              };\n              \n              document.add(new Field(\"f\", ts));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void assembleDocument(Document document, int i) {\n    document.add(new Field(\"a\", i + \" Do you really want to go and live in that house all winter?\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    if (i > 0) {\n      document.add(new Field(\"b0\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      document.add(new Field(\"b1\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS, Field.TermVector.NO));\n      document.add(new Field(\"b2\", i + \" All work and no play makes Jack a dull boy\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.NO));\n      document.add(new Field(\"b3\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.NO, Field.TermVector.NO));\n      if (i > 1) {\n        document.add(new Field(\"c\", i + \" Redrum redrum\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        if (i > 2) {\n          document.add(new Field(\"d\", i + \" Hello Danny, come and play with us... forever and ever. and ever.\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          if (i > 3) {\n            Field f = new Field(\"e\", i + \" Heres Johnny!\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n            f.setOmitNorms(true);\n            document.add(f);\n            if (i > 4) {\n              final List<Token> tokens = new ArrayList<Token>(2);\n              Token t = createToken(\"the\", 0, 2, \"text\");\n              t.setPayload(new Payload(new byte[]{1, 2, 3}));\n              tokens.add(t);\n              t = createToken(\"end\", 3, 5, \"text\");\n              t.setPayload(new Payload(new byte[]{2}));\n              tokens.add(t);\n              tokens.add(createToken(\"fin\", 7, 9));\n              final Token reusableToken = new Token();\n              TokenStream ts = new TokenStream() {\n                Iterator<Token> it = tokens.iterator();\n                \n                public final boolean incrementToken() throws IOException {\n                  if (!it.hasNext()) {\n                    return false;\n                  }\n\n                  reusableToken.reinit(it.next());\n                  return true;\n                }\n\n                public void reset() throws IOException {\n                  it = tokens.iterator();\n                }\n              };\n              ts.addAttributeImpl(reusableToken);\n              \n              document.add(new Field(\"f\", ts));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#assembleDocument(Document,int).mjava","pathOld":"contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#assembleDocument(Document,int).mjava","sourceNew":"  private void assembleDocument(Document document, int i) {\n    document.add(new Field(\"a\", i + \" Do you really want to go and live in that house all winter?\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    if (i > 0) {\n      document.add(new Field(\"b0\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      document.add(new Field(\"b1\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS, Field.TermVector.NO));\n      document.add(new Field(\"b2\", i + \" All work and no play makes Jack a dull boy\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.NO));\n      document.add(new Field(\"b3\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.NO, Field.TermVector.NO));\n      if (i > 1) {\n        document.add(new Field(\"c\", i + \" Redrum redrum\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        if (i > 2) {\n          document.add(new Field(\"d\", i + \" Hello Danny, come and play with us... forever and ever. and ever.\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          if (i > 3) {\n            Field f = new Field(\"e\", i + \" Heres Johnny!\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n            f.setOmitNorms(true);\n            document.add(f);\n            if (i > 4) {\n              final List<Token> tokens = new ArrayList<Token>(2);\n              Token t = createToken(\"the\", 0, 2, \"text\");\n              t.setPayload(new Payload(new byte[]{1, 2, 3}));\n              tokens.add(t);\n              t = createToken(\"end\", 3, 5, \"text\");\n              t.setPayload(new Payload(new byte[]{2}));\n              tokens.add(t);\n              tokens.add(createToken(\"fin\", 7, 9));\n              TokenStream ts = new TokenStream(Token.TOKEN_ATTRIBUTE_FACTORY) {\n                final AttributeImpl reusableToken = (AttributeImpl) addAttribute(TermAttribute.class);\n                Iterator<Token> it = tokens.iterator();\n                \n                @Override\n                public final boolean incrementToken() throws IOException {\n                  if (!it.hasNext()) {\n                    return false;\n                  }\n                  clearAttributes();\n                  it.next().copyTo(reusableToken);\n                  return true;\n                }\n\n                @Override\n                public void reset() throws IOException {\n                  it = tokens.iterator();\n                }\n              };\n              \n              document.add(new Field(\"f\", ts));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void assembleDocument(Document document, int i) {\n    document.add(new Field(\"a\", i + \" Do you really want to go and live in that house all winter?\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    if (i > 0) {\n      document.add(new Field(\"b0\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      document.add(new Field(\"b1\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS, Field.TermVector.NO));\n      document.add(new Field(\"b2\", i + \" All work and no play makes Jack a dull boy\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.NO));\n      document.add(new Field(\"b3\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.NO, Field.TermVector.NO));\n      if (i > 1) {\n        document.add(new Field(\"c\", i + \" Redrum redrum\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        if (i > 2) {\n          document.add(new Field(\"d\", i + \" Hello Danny, come and play with us... forever and ever. and ever.\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          if (i > 3) {\n            Field f = new Field(\"e\", i + \" Heres Johnny!\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n            f.setOmitNorms(true);\n            document.add(f);\n            if (i > 4) {\n              final List<Token> tokens = new ArrayList<Token>(2);\n              Token t = createToken(\"the\", 0, 2, \"text\");\n              t.setPayload(new Payload(new byte[]{1, 2, 3}));\n              tokens.add(t);\n              t = createToken(\"end\", 3, 5, \"text\");\n              t.setPayload(new Payload(new byte[]{2}));\n              tokens.add(t);\n              tokens.add(createToken(\"fin\", 7, 9));\n              TokenStream ts = new TokenStream(Token.TOKEN_ATTRIBUTE_FACTORY) {\n                final AttributeImpl reusableToken = (AttributeImpl) addAttribute(TermAttribute.class);\n                Iterator<Token> it = tokens.iterator();\n                \n                public final boolean incrementToken() throws IOException {\n                  if (!it.hasNext()) {\n                    return false;\n                  }\n                  clearAttributes();\n                  it.next().copyTo(reusableToken);\n                  return true;\n                }\n\n                public void reset() throws IOException {\n                  it = tokens.iterator();\n                }\n              };\n              \n              document.add(new Field(\"f\", ts));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#assembleDocument(Document,int).mjava","pathOld":"contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#assembleDocument(Document,int).mjava","sourceNew":"  private void assembleDocument(Document document, int i) {\n    document.add(new Field(\"a\", i + \" Do you really want to go and live in that house all winter?\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    if (i > 0) {\n      document.add(new Field(\"b0\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      document.add(new Field(\"b1\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS, Field.TermVector.NO));\n      document.add(new Field(\"b2\", i + \" All work and no play makes Jack a dull boy\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.NO));\n      document.add(new Field(\"b3\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.NO, Field.TermVector.NO));\n      if (i > 1) {\n        document.add(new Field(\"c\", i + \" Redrum redrum\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        if (i > 2) {\n          document.add(new Field(\"d\", i + \" Hello Danny, come and play with us... forever and ever. and ever.\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          if (i > 3) {\n            Field f = new Field(\"e\", i + \" Heres Johnny!\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n            f.setOmitNorms(true);\n            document.add(f);\n            if (i > 4) {\n              final List<Token> tokens = new ArrayList<Token>(2);\n              Token t = createToken(\"the\", 0, 2, \"text\");\n              t.setPayload(new Payload(new byte[]{1, 2, 3}));\n              tokens.add(t);\n              t = createToken(\"end\", 3, 5, \"text\");\n              t.setPayload(new Payload(new byte[]{2}));\n              tokens.add(t);\n              tokens.add(createToken(\"fin\", 7, 9));\n              TokenStream ts = new TokenStream(Token.TOKEN_ATTRIBUTE_FACTORY) {\n                final AttributeImpl reusableToken = (AttributeImpl) addAttribute(TermAttribute.class);\n                Iterator<Token> it = tokens.iterator();\n                \n                @Override\n                public final boolean incrementToken() throws IOException {\n                  if (!it.hasNext()) {\n                    return false;\n                  }\n                  clearAttributes();\n                  it.next().copyTo(reusableToken);\n                  return true;\n                }\n\n                @Override\n                public void reset() throws IOException {\n                  it = tokens.iterator();\n                }\n              };\n              \n              document.add(new Field(\"f\", ts));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void assembleDocument(Document document, int i) {\n    document.add(new Field(\"a\", i + \" Do you really want to go and live in that house all winter?\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    if (i > 0) {\n      document.add(new Field(\"b0\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      document.add(new Field(\"b1\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS, Field.TermVector.NO));\n      document.add(new Field(\"b2\", i + \" All work and no play makes Jack a dull boy\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.NO));\n      document.add(new Field(\"b3\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.NO, Field.TermVector.NO));\n      if (i > 1) {\n        document.add(new Field(\"c\", i + \" Redrum redrum\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        if (i > 2) {\n          document.add(new Field(\"d\", i + \" Hello Danny, come and play with us... forever and ever. and ever.\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          if (i > 3) {\n            Field f = new Field(\"e\", i + \" Heres Johnny!\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n            f.setOmitNorms(true);\n            document.add(f);\n            if (i > 4) {\n              final List<Token> tokens = new ArrayList<Token>(2);\n              Token t = createToken(\"the\", 0, 2, \"text\");\n              t.setPayload(new Payload(new byte[]{1, 2, 3}));\n              tokens.add(t);\n              t = createToken(\"end\", 3, 5, \"text\");\n              t.setPayload(new Payload(new byte[]{2}));\n              tokens.add(t);\n              tokens.add(createToken(\"fin\", 7, 9));\n              TokenStream ts = new TokenStream(Token.TOKEN_ATTRIBUTE_FACTORY) {\n                final AttributeImpl reusableToken = (AttributeImpl) addAttribute(TermAttribute.class);\n                Iterator<Token> it = tokens.iterator();\n                \n                @Override\n                public final boolean incrementToken() throws IOException {\n                  if (!it.hasNext()) {\n                    return false;\n                  }\n                  clearAttributes();\n                  it.next().copyTo(reusableToken);\n                  return true;\n                }\n\n                @Override\n                public void reset() throws IOException {\n                  it = tokens.iterator();\n                }\n              };\n              \n              document.add(new Field(\"f\", ts));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["e7a005111928c661ab5d236ed6a3a079b438d2cf"],"4819d0d39bf17025f344afc085c1356e85075d76":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b5756469957918cac40a831acec9cf01c8c2bb3":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"e7a005111928c661ab5d236ed6a3a079b438d2cf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["4819d0d39bf17025f344afc085c1356e85075d76"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"4819d0d39bf17025f344afc085c1356e85075d76":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e7a005111928c661ab5d236ed6a3a079b438d2cf"],"e7a005111928c661ab5d236ed6a3a079b438d2cf":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"9b5756469957918cac40a831acec9cf01c8c2bb3":["4819d0d39bf17025f344afc085c1356e85075d76"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}