{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#writeDocValuesUpdatesForMerge(List[SegmentCommitInfo]).mjava","commits":[{"id":"636c73dfa97dd282a3089d4239620475f2633519","date":1499025533,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#writeDocValuesUpdatesForMerge(List[SegmentCommitInfo]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#writeDocValuesUpdates(List[SegmentCommitInfo]).mjava","sourceNew":"    void writeDocValuesUpdatesForMerge(List<SegmentCommitInfo> infos) throws IOException {\n      boolean any = false;\n      for (SegmentCommitInfo info : infos) {\n        ReadersAndUpdates rld = get(info, false);\n        if (rld != null) {\n          any |= rld.writeFieldUpdates(directory, bufferedUpdatesStream.getCompletedDelGen(), infoStream);\n          rld.setIsMerging();\n        }\n      }\n      if (any) {\n        checkpoint();\n      }\n    }\n\n","sourceOld":"    void writeDocValuesUpdates(List<SegmentCommitInfo> infos) throws IOException {\n      boolean any = false;\n      for (SegmentCommitInfo info : infos) {\n        ReadersAndUpdates rld = get(info, false);\n        if (rld != null) {\n          any |= rld.writeFieldUpdates(directory, bufferedUpdatesStream.getCompletedDelGen(), infoStream);\n        }\n      }\n      if (any) {\n        checkpoint();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6324f236dd5a5430f2ff91ebd6cb3f0ae8d34a35","date":1499066739,"type":1,"author":"Adrien Grand","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#writeDocValuesUpdatesForMerge(List[SegmentCommitInfo]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#writeDocValuesUpdates(List[SegmentCommitInfo]).mjava","sourceNew":"    void writeDocValuesUpdatesForMerge(List<SegmentCommitInfo> infos) throws IOException {\n      boolean any = false;\n      for (SegmentCommitInfo info : infos) {\n        ReadersAndUpdates rld = get(info, false);\n        if (rld != null) {\n          any |= rld.writeFieldUpdates(directory, bufferedUpdatesStream.getCompletedDelGen(), infoStream);\n          rld.setIsMerging();\n        }\n      }\n      if (any) {\n        checkpoint();\n      }\n    }\n\n","sourceOld":"    void writeDocValuesUpdates(List<SegmentCommitInfo> infos) throws IOException {\n      boolean any = false;\n      for (SegmentCommitInfo info : infos) {\n        ReadersAndUpdates rld = get(info, false);\n        if (rld != null) {\n          any |= rld.writeFieldUpdates(directory, bufferedUpdatesStream.getCompletedDelGen(), infoStream);\n        }\n      }\n      if (any) {\n        checkpoint();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#writeDocValuesUpdatesForMerge(List[SegmentCommitInfo]).mjava","pathOld":"/dev/null","sourceNew":"    void writeDocValuesUpdatesForMerge(List<SegmentCommitInfo> infos) throws IOException {\n      boolean any = false;\n      for (SegmentCommitInfo info : infos) {\n        ReadersAndUpdates rld = get(info, false);\n        if (rld != null) {\n          any |= rld.writeFieldUpdates(directory, bufferedUpdatesStream.getCompletedDelGen(), infoStream);\n          rld.setIsMerging();\n        }\n      }\n      if (any) {\n        checkpoint();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d60c1bb96a28a26d197c36299f7b6c9c5da617a1","date":1522484702,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#writeDocValuesUpdatesForMerge(List[SegmentCommitInfo]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#writeDocValuesUpdatesForMerge(List[SegmentCommitInfo]).mjava","sourceNew":"    void writeDocValuesUpdatesForMerge(List<SegmentCommitInfo> infos) throws IOException {\n      assert Thread.holdsLock(IndexWriter.this);\n      boolean any = false;\n      for (SegmentCommitInfo info : infos) {\n        ReadersAndUpdates rld = get(info, false);\n        if (rld != null) {\n          any |= rld.writeFieldUpdates(directory, globalFieldNumberMap, bufferedUpdatesStream.getCompletedDelGen(), infoStream);\n          rld.setIsMerging();\n        }\n      }\n      if (any) {\n        checkpoint();\n      }\n    }\n\n","sourceOld":"    void writeDocValuesUpdatesForMerge(List<SegmentCommitInfo> infos) throws IOException {\n      boolean any = false;\n      for (SegmentCommitInfo info : infos) {\n        ReadersAndUpdates rld = get(info, false);\n        if (rld != null) {\n          any |= rld.writeFieldUpdates(directory, bufferedUpdatesStream.getCompletedDelGen(), infoStream);\n          rld.setIsMerging();\n        }\n      }\n      if (any) {\n        checkpoint();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa5e39259dfd4a68287c824d3b7e1bc9097dc895","date":1522505041,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#writeDocValuesUpdatesForMerge(List[SegmentCommitInfo]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#writeDocValuesUpdatesForMerge(List[SegmentCommitInfo]).mjava","sourceNew":"    void writeDocValuesUpdatesForMerge(List<SegmentCommitInfo> infos) throws IOException {\n      assert Thread.holdsLock(IndexWriter.this);\n      boolean any = false;\n      for (SegmentCommitInfo info : infos) {\n        ReadersAndUpdates rld = get(info, false);\n        if (rld != null) {\n          any |= rld.writeFieldUpdates(directory, globalFieldNumberMap, bufferedUpdatesStream.getCompletedDelGen(), infoStream);\n          rld.setIsMerging();\n        }\n      }\n      if (any) {\n        checkpoint();\n      }\n    }\n\n","sourceOld":"    void writeDocValuesUpdatesForMerge(List<SegmentCommitInfo> infos) throws IOException {\n      boolean any = false;\n      for (SegmentCommitInfo info : infos) {\n        ReadersAndUpdates rld = get(info, false);\n        if (rld != null) {\n          any |= rld.writeFieldUpdates(directory, bufferedUpdatesStream.getCompletedDelGen(), infoStream);\n          rld.setIsMerging();\n        }\n      }\n      if (any) {\n        checkpoint();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1926100d9b67becc9701c54266fee3ba7878a5f0","date":1524472150,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#writeDocValuesUpdatesForMerge(List[SegmentCommitInfo]).mjava","sourceNew":null,"sourceOld":"    void writeDocValuesUpdatesForMerge(List<SegmentCommitInfo> infos) throws IOException {\n      assert Thread.holdsLock(IndexWriter.this);\n      boolean any = false;\n      for (SegmentCommitInfo info : infos) {\n        ReadersAndUpdates rld = get(info, false);\n        if (rld != null) {\n          any |= rld.writeFieldUpdates(directory, globalFieldNumberMap, bufferedUpdatesStream.getCompletedDelGen(), infoStream);\n          rld.setIsMerging();\n        }\n      }\n      if (any) {\n        checkpoint();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"636c73dfa97dd282a3089d4239620475f2633519":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","636c73dfa97dd282a3089d4239620475f2633519"],"aa5e39259dfd4a68287c824d3b7e1bc9097dc895":["636c73dfa97dd282a3089d4239620475f2633519","d60c1bb96a28a26d197c36299f7b6c9c5da617a1"],"1926100d9b67becc9701c54266fee3ba7878a5f0":["aa5e39259dfd4a68287c824d3b7e1bc9097dc895"],"d60c1bb96a28a26d197c36299f7b6c9c5da617a1":["636c73dfa97dd282a3089d4239620475f2633519"],"6324f236dd5a5430f2ff91ebd6cb3f0ae8d34a35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","636c73dfa97dd282a3089d4239620475f2633519"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1926100d9b67becc9701c54266fee3ba7878a5f0"]},"commit2Childs":{"636c73dfa97dd282a3089d4239620475f2633519":["30c8e5574b55d57947e989443dfde611646530ee","aa5e39259dfd4a68287c824d3b7e1bc9097dc895","d60c1bb96a28a26d197c36299f7b6c9c5da617a1","6324f236dd5a5430f2ff91ebd6cb3f0ae8d34a35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["636c73dfa97dd282a3089d4239620475f2633519","30c8e5574b55d57947e989443dfde611646530ee","6324f236dd5a5430f2ff91ebd6cb3f0ae8d34a35"],"30c8e5574b55d57947e989443dfde611646530ee":[],"aa5e39259dfd4a68287c824d3b7e1bc9097dc895":["1926100d9b67becc9701c54266fee3ba7878a5f0"],"d60c1bb96a28a26d197c36299f7b6c9c5da617a1":["aa5e39259dfd4a68287c824d3b7e1bc9097dc895"],"1926100d9b67becc9701c54266fee3ba7878a5f0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6324f236dd5a5430f2ff91ebd6cb3f0ae8d34a35":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","6324f236dd5a5430f2ff91ebd6cb3f0ae8d34a35","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}