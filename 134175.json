{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateStateFormat(ClusterState,ZkNodeProps,NamedList).mjava","commits":[{"id":"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","date":1471585465,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateStateFormat(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateStateFormat(ZkNodeProps,NamedList).mjava","sourceNew":"  //TODO should we not remove in the next release ?\n  private void migrateStateFormat(ClusterState state, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    final String collectionName = message.getStr(COLLECTION_PROP);\n\n    boolean firstLoop = true;\n    // wait for a while until the state format changes\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    while (! timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collectionName + \" not found\");\n      }\n      if (collection.getStateFormat() == 2) {\n        // Done.\n        results.add(\"success\", new SimpleOrderedMap<>());\n        return;\n      }\n\n      if (firstLoop) {\n        // Actually queue the migration command.\n        firstLoop = false;\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, MIGRATESTATEFORMAT.toLower(), COLLECTION_PROP, collectionName);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      }\n      Thread.sleep(100);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not migrate state format for collection: \" + collectionName);\n  }\n\n","sourceOld":"  private void migrateStateFormat(ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    final String collectionName = message.getStr(COLLECTION_PROP);\n\n    boolean firstLoop = true;\n    // wait for a while until the state format changes\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    while (! timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collectionName + \" not found\");\n      }\n      if (collection.getStateFormat() == 2) {\n        // Done.\n        results.add(\"success\", new SimpleOrderedMap<>());\n        return;\n      }\n\n      if (firstLoop) {\n        // Actually queue the migration command.\n        firstLoop = false;\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, MIGRATESTATEFORMAT.toLower(), COLLECTION_PROP, collectionName);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      }\n      Thread.sleep(100);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not migrate state format for collection: \" + collectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateStateFormat(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateStateFormat(ZkNodeProps,NamedList).mjava","sourceNew":"  //TODO should we not remove in the next release ?\n  private void migrateStateFormat(ClusterState state, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    final String collectionName = message.getStr(COLLECTION_PROP);\n\n    boolean firstLoop = true;\n    // wait for a while until the state format changes\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    while (! timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collectionName + \" not found\");\n      }\n      if (collection.getStateFormat() == 2) {\n        // Done.\n        results.add(\"success\", new SimpleOrderedMap<>());\n        return;\n      }\n\n      if (firstLoop) {\n        // Actually queue the migration command.\n        firstLoop = false;\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, MIGRATESTATEFORMAT.toLower(), COLLECTION_PROP, collectionName);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      }\n      Thread.sleep(100);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not migrate state format for collection: \" + collectionName);\n  }\n\n","sourceOld":"  private void migrateStateFormat(ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    final String collectionName = message.getStr(COLLECTION_PROP);\n\n    boolean firstLoop = true;\n    // wait for a while until the state format changes\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    while (! timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collectionName + \" not found\");\n      }\n      if (collection.getStateFormat() == 2) {\n        // Done.\n        results.add(\"success\", new SimpleOrderedMap<>());\n        return;\n      }\n\n      if (firstLoop) {\n        // Actually queue the migration command.\n        firstLoop = false;\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, MIGRATESTATEFORMAT.toLower(), COLLECTION_PROP, collectionName);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      }\n      Thread.sleep(100);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not migrate state format for collection: \" + collectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateStateFormat(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  //TODO should we not remove in the next release ?\n  private void migrateStateFormat(ClusterState state, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    final String collectionName = message.getStr(COLLECTION_PROP);\n\n    boolean firstLoop = true;\n    // wait for a while until the state format changes\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    while (! timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collectionName + \" not found\");\n      }\n      if (collection.getStateFormat() == 2) {\n        // Done.\n        results.add(\"success\", new SimpleOrderedMap<>());\n        return;\n      }\n\n      if (firstLoop) {\n        // Actually queue the migration command.\n        firstLoop = false;\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, MIGRATESTATEFORMAT.toLower(), COLLECTION_PROP, collectionName);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      }\n      Thread.sleep(100);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not migrate state format for collection: \" + collectionName);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateStateFormat(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateStateFormat(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  //TODO should we not remove in the next release ?\n  private void migrateStateFormat(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    final String collectionName = message.getStr(COLLECTION_PROP);\n\n    boolean firstLoop = true;\n    // wait for a while until the state format changes\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    while (! timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collectionName + \" not found\");\n      }\n      if (collection.getStateFormat() == 2) {\n        // Done.\n        results.add(\"success\", new SimpleOrderedMap<>());\n        return;\n      }\n\n      if (firstLoop) {\n        // Actually queue the migration command.\n        firstLoop = false;\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, MIGRATESTATEFORMAT.toLower(), COLLECTION_PROP, collectionName);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      }\n      Thread.sleep(100);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not migrate state format for collection: \" + collectionName);\n  }\n\n","sourceOld":"  //TODO should we not remove in the next release ?\n  private void migrateStateFormat(ClusterState state, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    final String collectionName = message.getStr(COLLECTION_PROP);\n\n    boolean firstLoop = true;\n    // wait for a while until the state format changes\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    while (! timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collectionName + \" not found\");\n      }\n      if (collection.getStateFormat() == 2) {\n        // Done.\n        results.add(\"success\", new SimpleOrderedMap<>());\n        return;\n      }\n\n      if (firstLoop) {\n        // Actually queue the migration command.\n        firstLoop = false;\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, MIGRATESTATEFORMAT.toLower(), COLLECTION_PROP, collectionName);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      }\n      Thread.sleep(100);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not migrate state format for collection: \" + collectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateStateFormat(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateStateFormat(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  //TODO should we not remove in the next release ?\n  private void migrateStateFormat(ClusterState state, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    final String collectionName = message.getStr(COLLECTION_PROP);\n\n    boolean firstLoop = true;\n    // wait for a while until the state format changes\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    while (! timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collectionName + \" not found\");\n      }\n      if (collection.getStateFormat() == 2) {\n        // Done.\n        results.add(\"success\", new SimpleOrderedMap<>());\n        return;\n      }\n\n      if (firstLoop) {\n        // Actually queue the migration command.\n        firstLoop = false;\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, MIGRATESTATEFORMAT.toLower(), COLLECTION_PROP, collectionName);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      }\n      Thread.sleep(100);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not migrate state format for collection: \" + collectionName);\n  }\n\n","sourceOld":"  //TODO should we not remove in the next release ?\n  private void migrateStateFormat(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    final String collectionName = message.getStr(COLLECTION_PROP);\n\n    boolean firstLoop = true;\n    // wait for a while until the state format changes\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    while (! timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collectionName + \" not found\");\n      }\n      if (collection.getStateFormat() == 2) {\n        // Done.\n        results.add(\"success\", new SimpleOrderedMap<>());\n        return;\n      }\n\n      if (firstLoop) {\n        // Actually queue the migration command.\n        firstLoop = false;\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, MIGRATESTATEFORMAT.toLower(), COLLECTION_PROP, collectionName);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      }\n      Thread.sleep(100);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not migrate state format for collection: \" + collectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e","date":1505888025,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateStateFormat(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateStateFormat(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  //TODO should we not remove in the next release ?\n  private void migrateStateFormat(ClusterState state, ZkNodeProps message, NamedList results)\n      throws Exception {\n    final String collectionName = message.getStr(COLLECTION_PROP);\n\n    boolean firstLoop = true;\n    // wait for a while until the state format changes\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    while (! timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collectionName + \" not found\");\n      }\n      if (collection.getStateFormat() == 2) {\n        // Done.\n        results.add(\"success\", new SimpleOrderedMap<>());\n        return;\n      }\n\n      if (firstLoop) {\n        // Actually queue the migration command.\n        firstLoop = false;\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, MIGRATESTATEFORMAT.toLower(), COLLECTION_PROP, collectionName);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      }\n      Thread.sleep(100);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not migrate state format for collection: \" + collectionName);\n  }\n\n","sourceOld":"  //TODO should we not remove in the next release ?\n  private void migrateStateFormat(ClusterState state, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    final String collectionName = message.getStr(COLLECTION_PROP);\n\n    boolean firstLoop = true;\n    // wait for a while until the state format changes\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    while (! timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collectionName + \" not found\");\n      }\n      if (collection.getStateFormat() == 2) {\n        // Done.\n        results.add(\"success\", new SimpleOrderedMap<>());\n        return;\n      }\n\n      if (firstLoop) {\n        // Actually queue the migration command.\n        firstLoop = false;\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, MIGRATESTATEFORMAT.toLower(), COLLECTION_PROP, collectionName);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      }\n      Thread.sleep(100);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not migrate state format for collection: \" + collectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateStateFormat(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateStateFormat(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  //TODO should we not remove in the next release ?\n  private void migrateStateFormat(ClusterState state, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    final String collectionName = message.getStr(COLLECTION_PROP);\n\n    boolean firstLoop = true;\n    // wait for a while until the state format changes\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    while (! timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collectionName + \" not found\");\n      }\n      if (collection.getStateFormat() == 2) {\n        // Done.\n        results.add(\"success\", new SimpleOrderedMap<>());\n        return;\n      }\n\n      if (firstLoop) {\n        // Actually queue the migration command.\n        firstLoop = false;\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, MIGRATESTATEFORMAT.toLower(), COLLECTION_PROP, collectionName);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      }\n      Thread.sleep(100);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not migrate state format for collection: \" + collectionName);\n  }\n\n","sourceOld":"  //TODO should we not remove in the next release ?\n  private void migrateStateFormat(ClusterState state, ZkNodeProps message, NamedList results)\n      throws Exception {\n    final String collectionName = message.getStr(COLLECTION_PROP);\n\n    boolean firstLoop = true;\n    // wait for a while until the state format changes\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    while (! timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collectionName + \" not found\");\n      }\n      if (collection.getStateFormat() == 2) {\n        // Done.\n        results.add(\"success\", new SimpleOrderedMap<>());\n        return;\n      }\n\n      if (firstLoop) {\n        // Actually queue the migration command.\n        firstLoop = false;\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, MIGRATESTATEFORMAT.toLower(), COLLECTION_PROP, collectionName);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      }\n      Thread.sleep(100);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not migrate state format for collection: \" + collectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateStateFormat(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateStateFormat(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  //TODO should we not remove in the next release ?\n  private void migrateStateFormat(ClusterState state, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    final String collectionName = message.getStr(COLLECTION_PROP);\n\n    boolean firstLoop = true;\n    // wait for a while until the state format changes\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    while (! timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collectionName + \" not found\");\n      }\n      if (collection.getStateFormat() == 2) {\n        // Done.\n        results.add(\"success\", new SimpleOrderedMap<>());\n        return;\n      }\n\n      if (firstLoop) {\n        // Actually queue the migration command.\n        firstLoop = false;\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, MIGRATESTATEFORMAT.toLower(), COLLECTION_PROP, collectionName);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      }\n      Thread.sleep(100);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not migrate state format for collection: \" + collectionName);\n  }\n\n","sourceOld":"  //TODO should we not remove in the next release ?\n  private void migrateStateFormat(ClusterState state, ZkNodeProps message, NamedList results)\n      throws Exception {\n    final String collectionName = message.getStr(COLLECTION_PROP);\n\n    boolean firstLoop = true;\n    // wait for a while until the state format changes\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    while (! timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collectionName + \" not found\");\n      }\n      if (collection.getStateFormat() == 2) {\n        // Done.\n        results.add(\"success\", new SimpleOrderedMap<>());\n        return;\n      }\n\n      if (firstLoop) {\n        // Actually queue the migration command.\n        firstLoop = false;\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, MIGRATESTATEFORMAT.toLower(), COLLECTION_PROP, collectionName);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      }\n      Thread.sleep(100);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not migrate state format for collection: \" + collectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateStateFormat(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateStateFormat(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  //TODO should we not remove in the next release ?\n  private void migrateStateFormat(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    final String collectionName = message.getStr(COLLECTION_PROP);\n\n    boolean firstLoop = true;\n    // wait for a while until the state format changes\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    while (! timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collectionName + \" not found\");\n      }\n      if (collection.getStateFormat() == 2) {\n        // Done.\n        results.add(\"success\", new SimpleOrderedMap<>());\n        return;\n      }\n\n      if (firstLoop) {\n        // Actually queue the migration command.\n        firstLoop = false;\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, MIGRATESTATEFORMAT.toLower(), COLLECTION_PROP, collectionName);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      }\n      Thread.sleep(100);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not migrate state format for collection: \" + collectionName);\n  }\n\n","sourceOld":"  //TODO should we not remove in the next release ?\n  private void migrateStateFormat(ClusterState state, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    final String collectionName = message.getStr(COLLECTION_PROP);\n\n    boolean firstLoop = true;\n    // wait for a while until the state format changes\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    while (! timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collectionName + \" not found\");\n      }\n      if (collection.getStateFormat() == 2) {\n        // Done.\n        results.add(\"success\", new SimpleOrderedMap<>());\n        return;\n      }\n\n      if (firstLoop) {\n        // Actually queue the migration command.\n        firstLoop = false;\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, MIGRATESTATEFORMAT.toLower(), COLLECTION_PROP, collectionName);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      }\n      Thread.sleep(100);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not migrate state format for collection: \" + collectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateStateFormat(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateStateFormat(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  //TODO should we not remove in the next release ?\n  private void migrateStateFormat(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    final String collectionName = message.getStr(COLLECTION_PROP);\n\n    boolean firstLoop = true;\n    // wait for a while until the state format changes\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    while (! timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collectionName + \" not found\");\n      }\n      if (collection.getStateFormat() == 2) {\n        // Done.\n        results.add(\"success\", new SimpleOrderedMap<>());\n        return;\n      }\n\n      if (firstLoop) {\n        // Actually queue the migration command.\n        firstLoop = false;\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, MIGRATESTATEFORMAT.toLower(), COLLECTION_PROP, collectionName);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      }\n      timeout.sleep(100);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not migrate state format for collection: \" + collectionName);\n  }\n\n","sourceOld":"  //TODO should we not remove in the next release ?\n  private void migrateStateFormat(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    final String collectionName = message.getStr(COLLECTION_PROP);\n\n    boolean firstLoop = true;\n    // wait for a while until the state format changes\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    while (! timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collectionName + \" not found\");\n      }\n      if (collection.getStateFormat() == 2) {\n        // Done.\n        results.add(\"success\", new SimpleOrderedMap<>());\n        return;\n      }\n\n      if (firstLoop) {\n        // Actually queue the migration command.\n        firstLoop = false;\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, MIGRATESTATEFORMAT.toLower(), COLLECTION_PROP, collectionName);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      }\n      Thread.sleep(100);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not migrate state format for collection: \" + collectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#migrateStateFormat(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateStateFormat(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  //TODO should we not remove in the next release ?\n  private void migrateStateFormat(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    final String collectionName = message.getStr(COLLECTION_PROP);\n\n    boolean firstLoop = true;\n    // wait for a while until the state format changes\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    while (! timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collectionName + \" not found\");\n      }\n      if (collection.getStateFormat() == 2) {\n        // Done.\n        results.add(\"success\", new SimpleOrderedMap<>());\n        return;\n      }\n\n      if (firstLoop) {\n        // Actually queue the migration command.\n        firstLoop = false;\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, MIGRATESTATEFORMAT.toLower(), COLLECTION_PROP, collectionName);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      }\n      timeout.sleep(100);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not migrate state format for collection: \" + collectionName);\n  }\n\n","sourceOld":"  //TODO should we not remove in the next release ?\n  private void migrateStateFormat(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    final String collectionName = message.getStr(COLLECTION_PROP);\n\n    boolean firstLoop = true;\n    // wait for a while until the state format changes\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    while (! timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collectionName + \" not found\");\n      }\n      if (collection.getStateFormat() == 2) {\n        // Done.\n        results.add(\"success\", new SimpleOrderedMap<>());\n        return;\n      }\n\n      if (firstLoop) {\n        // Actually queue the migration command.\n        firstLoop = false;\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, MIGRATESTATEFORMAT.toLower(), COLLECTION_PROP, collectionName);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      }\n      timeout.sleep(100);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not migrate state format for collection: \" + collectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#migrateStateFormat(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateStateFormat(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  //TODO should we not remove in the next release ?\n  private void migrateStateFormat(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    final String collectionName = message.getStr(COLLECTION_PROP);\n\n    boolean firstLoop = true;\n    // wait for a while until the state format changes\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    while (! timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collectionName + \" not found\");\n      }\n      if (collection.getStateFormat() == 2) {\n        // Done.\n        results.add(\"success\", new SimpleOrderedMap<>());\n        return;\n      }\n\n      if (firstLoop) {\n        // Actually queue the migration command.\n        firstLoop = false;\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, MIGRATESTATEFORMAT.toLower(), COLLECTION_PROP, collectionName);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      }\n      timeout.sleep(100);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not migrate state format for collection: \" + collectionName);\n  }\n\n","sourceOld":"  //TODO should we not remove in the next release ?\n  private void migrateStateFormat(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    final String collectionName = message.getStr(COLLECTION_PROP);\n\n    boolean firstLoop = true;\n    // wait for a while until the state format changes\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    while (! timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collectionName + \" not found\");\n      }\n      if (collection.getStateFormat() == 2) {\n        // Done.\n        results.add(\"success\", new SimpleOrderedMap<>());\n        return;\n      }\n\n      if (firstLoop) {\n        // Actually queue the migration command.\n        firstLoop = false;\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, MIGRATESTATEFORMAT.toLower(), COLLECTION_PROP, collectionName);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      }\n      timeout.sleep(100);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not migrate state format for collection: \" + collectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["89c102d671c256ef8dd67b3ecb3ab96fe7a8006e","b869898f50ca80263bac2e3ae0949f7700e5c977"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["560c18d71dad43d675158783c3840f8c80d6d39c"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"560c18d71dad43d675158783c3840f8c80d6d39c":["89c102d671c256ef8dd67b3ecb3ab96fe7a8006e","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["403d05f7f8d69b65659157eff1bc1d2717f04c66","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"560c18d71dad43d675158783c3840f8c80d6d39c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}