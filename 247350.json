{"path":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#mockShardHandlerForCreateJob(Integer,Integer).mjava","commits":[{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":1,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#mockShardHandlerForCreateJob(Integer,Integer).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#mockShardHandlerForCreateJob(Integer,Integer).mjava","sourceNew":"  protected List<SubmitCapture> mockShardHandlerForCreateJob(\n      Integer numberOfSlices, Integer numberOfReplica) {\n    List<SubmitCapture> submitCaptures = new ArrayList<>();\n    for (int i = 0; i < (numberOfSlices * numberOfReplica); i++) {\n      SubmitCapture submitCapture = new SubmitCapture();\n      shardHandlerMock.submit(capture(submitCapture.shardRequestCapture),\n          capture(submitCapture.nodeUrlsWithoutProtocolPartCapture),\n          capture(submitCapture.params));\n      expectLastCall();\n      submitCaptures.add(submitCapture);\n      ShardResponse shardResponseWithoutException = new ShardResponse();\n      shardResponseWithoutException.setSolrResponse(new QueryResponse());\n      expect(shardHandlerMock.takeCompletedOrError()).andReturn(\n          shardResponseWithoutException);\n    }\n    expect(shardHandlerMock.takeCompletedOrError()).andReturn(null);\n    return submitCaptures;\n  }\n\n","sourceOld":"  protected List<SubmitCapture> mockShardHandlerForCreateJob(\n      Integer numberOfSlices, Integer numberOfReplica) {\n    List<SubmitCapture> submitCaptures = new ArrayList<>();\n    for (int i = 0; i < (numberOfSlices * numberOfReplica); i++) {\n      SubmitCapture submitCapture = new SubmitCapture();\n      shardHandlerMock.submit(capture(submitCapture.shardRequestCapture),\n          capture(submitCapture.nodeUrlsWithoutProtocolPartCapture),\n          capture(submitCapture.params));\n      expectLastCall();\n      submitCaptures.add(submitCapture);\n      ShardResponse shardResponseWithoutException = new ShardResponse();\n      shardResponseWithoutException.setSolrResponse(new QueryResponse());\n      expect(shardHandlerMock.takeCompletedOrError()).andReturn(\n          shardResponseWithoutException);\n    }\n    expect(shardHandlerMock.takeCompletedOrError()).andReturn(null);\n    return submitCaptures;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e","date":1487462440,"type":4,"author":"Cao Manh Dat","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#mockShardHandlerForCreateJob(Integer,Integer).mjava","sourceNew":null,"sourceOld":"  protected List<SubmitCapture> mockShardHandlerForCreateJob(\n      Integer numberOfSlices, Integer numberOfReplica) {\n    List<SubmitCapture> submitCaptures = new ArrayList<>();\n    for (int i = 0; i < (numberOfSlices * numberOfReplica); i++) {\n      SubmitCapture submitCapture = new SubmitCapture();\n      shardHandlerMock.submit(capture(submitCapture.shardRequestCapture),\n          capture(submitCapture.nodeUrlsWithoutProtocolPartCapture),\n          capture(submitCapture.params));\n      expectLastCall();\n      submitCaptures.add(submitCapture);\n      ShardResponse shardResponseWithoutException = new ShardResponse();\n      shardResponseWithoutException.setSolrResponse(new QueryResponse());\n      expect(shardHandlerMock.takeCompletedOrError()).andReturn(\n          shardResponseWithoutException);\n    }\n    expect(shardHandlerMock.takeCompletedOrError()).andReturn(null);\n    return submitCaptures;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2209af2c265d2258ec4b29c8cc78622d36994a15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e"]},"commit2Childs":{"2209af2c265d2258ec4b29c8cc78622d36994a15":["f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}