{"path":"solr/core/src/java/org/apache/solr/util/hll/BitVector#registerIterator().mjava","commits":[{"id":"6d8714f9ceaaff94f0968d1c2d037978c3fde569","date":1437042727,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/hll/BitVector#registerIterator().mjava","pathOld":"/dev/null","sourceNew":"    // ------------------------------------------------------------------------\n    /**\n     * @return a <code>LongIterator</code> for iterating starting at the register\n     *         with index zero. This will never be <code>null</code>.\n     */\n    public LongIterator registerIterator() {\n        return new LongIterator() {\n            final int registerWidth = BitVector.this.registerWidth;\n            final long[] words = BitVector.this.words;\n            final long registerMask = BitVector.this.registerMask;\n\n            // register setup\n            long registerIndex = 0;\n            int wordIndex = 0;\n            int remainingWordBits = BITS_PER_WORD;\n            long word = words[wordIndex];\n\n            @Override public long next() {\n                long register;\n                if(remainingWordBits >= registerWidth) {\n                    register = word & registerMask;\n\n                    // shift to the next register\n                    word >>>= registerWidth;\n                    remainingWordBits -= registerWidth;\n                } else { /*insufficient bits remaining in current word*/\n                    wordIndex++/*move to the next word*/;\n\n                    register = (word | (words[wordIndex] << remainingWordBits)) & registerMask;\n\n                    // shift to the next partial register (word)\n                    word = words[wordIndex] >>> (registerWidth - remainingWordBits);\n                    remainingWordBits += BITS_PER_WORD - registerWidth;\n                }\n                registerIndex++;\n                return register;\n            }\n\n            @Override public boolean hasNext() {\n                return registerIndex < count;\n            }\n        };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b5ee4c66244bdfcc4796a114519d47701b2c026","date":1437132013,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/hll/BitVector#registerIterator().mjava","pathOld":"/dev/null","sourceNew":"    // ------------------------------------------------------------------------\n    /**\n     * @return a <code>LongIterator</code> for iterating starting at the register\n     *         with index zero. This will never be <code>null</code>.\n     */\n    public LongIterator registerIterator() {\n        return new LongIterator() {\n            final int registerWidth = BitVector.this.registerWidth;\n            final long[] words = BitVector.this.words;\n            final long registerMask = BitVector.this.registerMask;\n\n            // register setup\n            long registerIndex = 0;\n            int wordIndex = 0;\n            int remainingWordBits = BITS_PER_WORD;\n            long word = words[wordIndex];\n\n            @Override public long next() {\n                long register;\n                if(remainingWordBits >= registerWidth) {\n                    register = word & registerMask;\n\n                    // shift to the next register\n                    word >>>= registerWidth;\n                    remainingWordBits -= registerWidth;\n                } else { /*insufficient bits remaining in current word*/\n                    wordIndex++/*move to the next word*/;\n\n                    register = (word | (words[wordIndex] << remainingWordBits)) & registerMask;\n\n                    // shift to the next partial register (word)\n                    word = words[wordIndex] >>> (registerWidth - remainingWordBits);\n                    remainingWordBits += BITS_PER_WORD - registerWidth;\n                }\n                registerIndex++;\n                return register;\n            }\n\n            @Override public boolean hasNext() {\n                return registerIndex < count;\n            }\n        };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6d8714f9ceaaff94f0968d1c2d037978c3fde569"],"6d8714f9ceaaff94f0968d1c2d037978c3fde569":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3b5ee4c66244bdfcc4796a114519d47701b2c026"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b5ee4c66244bdfcc4796a114519d47701b2c026","6d8714f9ceaaff94f0968d1c2d037978c3fde569"],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6d8714f9ceaaff94f0968d1c2d037978c3fde569":["3b5ee4c66244bdfcc4796a114519d47701b2c026"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}