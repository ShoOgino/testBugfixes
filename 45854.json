{"path":"lucene/src/test/org/apache/lucene/search/TestSort#verifyStringSort(Sort).mjava","commits":[{"id":"28088b0a688977b79dec2cc9119cff2fb4aab7ee","date":1321197996,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#verifyStringSort(Sort).mjava","pathOld":"/dev/null","sourceNew":"  private void verifyStringSort(Sort sort) throws Exception {\n    final IndexSearcher searcher = getFullStrings();\n    final ScoreDoc[] result = searcher.search(new MatchAllDocsQuery(), null, _TestUtil.nextInt(random, 500, searcher.getIndexReader().maxDoc()), sort).scoreDocs;\n    StringBuilder buff = new StringBuilder();\n    int n = result.length;\n    String last = null;\n    String lastSub = null;\n    int lastDocId = 0;\n    boolean fail = false;\n    final String fieldSuffix = sort.getSort()[0].getField().endsWith(\"_fixed\") ? \"_fixed\" : \"\";\n    for (int x = 0; x < n; ++x) {\n      Document doc2 = searcher.doc(result[x].doc);\n      IndexableField[] v = doc2.getFields(\"tracer\" + fieldSuffix);\n      IndexableField[] v2 = doc2.getFields(\"tracer2\" + fieldSuffix);\n      for (int j = 0; j < v.length; ++j) {\n        buff.append(v[j] + \"(\" + v2[j] + \")(\" + result[x].doc+\")\\n\");\n        if (last != null) {\n          int cmp = v[j].stringValue().compareTo(last);\n          if (!(cmp >= 0)) { // ensure first field is in order\n            fail = true;\n            System.out.println(\"fail:\" + v[j] + \" < \" + last);\n            buff.append(\"  WRONG tracer\\n\");\n          }\n          if (cmp == 0) { // ensure second field is in reverse order\n            cmp = v2[j].stringValue().compareTo(lastSub);\n            if (cmp > 0) {\n              fail = true;\n              System.out.println(\"rev field fail:\" + v2[j] + \" > \" + lastSub);\n              buff.append(\"  WRONG tracer2\\n\");\n            } else if(cmp == 0) { // ensure docid is in order\n              if (result[x].doc < lastDocId) {\n                fail = true;\n                System.out.println(\"doc fail:\" + result[x].doc + \" > \" + lastDocId);\n                buff.append(\"  WRONG docID\\n\");\n              }\n            }\n          }\n        }\n        last = v[j].stringValue();\n        lastSub = v2[j].stringValue();\n        lastDocId = result[x].doc;\n      }\n    }\n    if (fail) {\n      System.out.println(\"topn field1(field2)(docID):\\n\" + buff);\n    }\n    assertFalse(\"Found sort results out of order\", fail);\n    searcher.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3a0403b45dfe384fae4a1b6e96c3265d000c498","date":1321445981,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#verifyStringSort(Sort).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#verifyStringSort(Sort).mjava","sourceNew":"  private void verifyStringSort(Sort sort) throws Exception {\n    final IndexSearcher searcher = getFullStrings();\n    final ScoreDoc[] result = searcher.search(new MatchAllDocsQuery(), null, _TestUtil.nextInt(random, 500, searcher.getIndexReader().maxDoc()), sort).scoreDocs;\n    StringBuilder buff = new StringBuilder();\n    int n = result.length;\n    String last = null;\n    String lastSub = null;\n    int lastDocId = 0;\n    boolean fail = false;\n    final String fieldSuffix = sort.getSort()[0].getField().endsWith(\"_fixed\") ? \"_fixed\" : \"\";\n    for (int x = 0; x < n; ++x) {\n      Document doc2 = searcher.doc(result[x].doc);\n      IndexableField[] v = doc2.getFields(\"tracer\" + fieldSuffix);\n      IndexableField[] v2 = doc2.getFields(\"tracer2\" + fieldSuffix);\n      for (int j = 0; j < v.length; ++j) {\n        buff.append(v[j] + \"(\" + v2[j] + \")(\" + result[x].doc+\")\\n\");\n        if (last != null) {\n          int cmp = v[j].stringValue().compareTo(last);\n          if (!(cmp >= 0)) { // ensure first field is in order\n            fail = true;\n            System.out.println(\"fail:\" + v[j] + \" < \" + last);\n            buff.append(\"  WRONG tracer\\n\");\n          }\n          if (cmp == 0) { // ensure second field is in reverse order\n            cmp = v2[j].stringValue().compareTo(lastSub);\n            if (cmp > 0) {\n              fail = true;\n              System.out.println(\"rev field fail:\" + v2[j] + \" > \" + lastSub);\n              buff.append(\"  WRONG tracer2\\n\");\n            } else if(cmp == 0) { // ensure docid is in order\n              if (result[x].doc < lastDocId) {\n                fail = true;\n                System.out.println(\"doc fail:\" + result[x].doc + \" > \" + lastDocId);\n                buff.append(\"  WRONG docID\\n\");\n              }\n            }\n          }\n        }\n        last = v[j].stringValue();\n        lastSub = v2[j].stringValue();\n        lastDocId = result[x].doc;\n      }\n    }\n    if (fail) {\n      System.out.println(\"topn field1(field2)(docID):\\n\" + buff);\n    }\n    assertFalse(\"Found sort results out of order\", fail);\n    searcher.getIndexReader().close();\n    searcher.close();\n  }\n\n","sourceOld":"  private void verifyStringSort(Sort sort) throws Exception {\n    final IndexSearcher searcher = getFullStrings();\n    final ScoreDoc[] result = searcher.search(new MatchAllDocsQuery(), null, _TestUtil.nextInt(random, 500, searcher.getIndexReader().maxDoc()), sort).scoreDocs;\n    StringBuilder buff = new StringBuilder();\n    int n = result.length;\n    String last = null;\n    String lastSub = null;\n    int lastDocId = 0;\n    boolean fail = false;\n    final String fieldSuffix = sort.getSort()[0].getField().endsWith(\"_fixed\") ? \"_fixed\" : \"\";\n    for (int x = 0; x < n; ++x) {\n      Document doc2 = searcher.doc(result[x].doc);\n      IndexableField[] v = doc2.getFields(\"tracer\" + fieldSuffix);\n      IndexableField[] v2 = doc2.getFields(\"tracer2\" + fieldSuffix);\n      for (int j = 0; j < v.length; ++j) {\n        buff.append(v[j] + \"(\" + v2[j] + \")(\" + result[x].doc+\")\\n\");\n        if (last != null) {\n          int cmp = v[j].stringValue().compareTo(last);\n          if (!(cmp >= 0)) { // ensure first field is in order\n            fail = true;\n            System.out.println(\"fail:\" + v[j] + \" < \" + last);\n            buff.append(\"  WRONG tracer\\n\");\n          }\n          if (cmp == 0) { // ensure second field is in reverse order\n            cmp = v2[j].stringValue().compareTo(lastSub);\n            if (cmp > 0) {\n              fail = true;\n              System.out.println(\"rev field fail:\" + v2[j] + \" > \" + lastSub);\n              buff.append(\"  WRONG tracer2\\n\");\n            } else if(cmp == 0) { // ensure docid is in order\n              if (result[x].doc < lastDocId) {\n                fail = true;\n                System.out.println(\"doc fail:\" + result[x].doc + \" > \" + lastDocId);\n                buff.append(\"  WRONG docID\\n\");\n              }\n            }\n          }\n        }\n        last = v[j].stringValue();\n        lastSub = v2[j].stringValue();\n        lastDocId = result[x].doc;\n      }\n    }\n    if (fail) {\n      System.out.println(\"topn field1(field2)(docID):\\n\" + buff);\n    }\n    assertFalse(\"Found sort results out of order\", fail);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#verifyStringSort(Sort).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#verifyStringSort(Sort).mjava","sourceNew":"  private void verifyStringSort(Sort sort) throws Exception {\n    final IndexSearcher searcher = getFullStrings();\n    final ScoreDoc[] result = searcher.search(new MatchAllDocsQuery(), null, _TestUtil.nextInt(random, 500, searcher.getIndexReader().maxDoc()), sort).scoreDocs;\n    StringBuilder buff = new StringBuilder();\n    int n = result.length;\n    String last = null;\n    String lastSub = null;\n    int lastDocId = 0;\n    boolean fail = false;\n    final String fieldSuffix = sort.getSort()[0].getField().endsWith(\"_fixed\") ? \"_fixed\" : \"\";\n    for (int x = 0; x < n; ++x) {\n      Document doc2 = searcher.doc(result[x].doc);\n      IndexableField[] v = doc2.getFields(\"tracer\" + fieldSuffix);\n      IndexableField[] v2 = doc2.getFields(\"tracer2\" + fieldSuffix);\n      for (int j = 0; j < v.length; ++j) {\n        buff.append(v[j] + \"(\" + v2[j] + \")(\" + result[x].doc+\")\\n\");\n        if (last != null) {\n          int cmp = v[j].stringValue().compareTo(last);\n          if (!(cmp >= 0)) { // ensure first field is in order\n            fail = true;\n            System.out.println(\"fail:\" + v[j] + \" < \" + last);\n            buff.append(\"  WRONG tracer\\n\");\n          }\n          if (cmp == 0) { // ensure second field is in reverse order\n            cmp = v2[j].stringValue().compareTo(lastSub);\n            if (cmp > 0) {\n              fail = true;\n              System.out.println(\"rev field fail:\" + v2[j] + \" > \" + lastSub);\n              buff.append(\"  WRONG tracer2\\n\");\n            } else if(cmp == 0) { // ensure docid is in order\n              if (result[x].doc < lastDocId) {\n                fail = true;\n                System.out.println(\"doc fail:\" + result[x].doc + \" > \" + lastDocId);\n                buff.append(\"  WRONG docID\\n\");\n              }\n            }\n          }\n        }\n        last = v[j].stringValue();\n        lastSub = v2[j].stringValue();\n        lastDocId = result[x].doc;\n      }\n    }\n    if (fail) {\n      System.out.println(\"topn field1(field2)(docID):\\n\" + buff);\n    }\n    assertFalse(\"Found sort results out of order\", fail);\n    searcher.getIndexReader().close();\n  }\n\n","sourceOld":"  private void verifyStringSort(Sort sort) throws Exception {\n    final IndexSearcher searcher = getFullStrings();\n    final ScoreDoc[] result = searcher.search(new MatchAllDocsQuery(), null, _TestUtil.nextInt(random, 500, searcher.getIndexReader().maxDoc()), sort).scoreDocs;\n    StringBuilder buff = new StringBuilder();\n    int n = result.length;\n    String last = null;\n    String lastSub = null;\n    int lastDocId = 0;\n    boolean fail = false;\n    final String fieldSuffix = sort.getSort()[0].getField().endsWith(\"_fixed\") ? \"_fixed\" : \"\";\n    for (int x = 0; x < n; ++x) {\n      Document doc2 = searcher.doc(result[x].doc);\n      IndexableField[] v = doc2.getFields(\"tracer\" + fieldSuffix);\n      IndexableField[] v2 = doc2.getFields(\"tracer2\" + fieldSuffix);\n      for (int j = 0; j < v.length; ++j) {\n        buff.append(v[j] + \"(\" + v2[j] + \")(\" + result[x].doc+\")\\n\");\n        if (last != null) {\n          int cmp = v[j].stringValue().compareTo(last);\n          if (!(cmp >= 0)) { // ensure first field is in order\n            fail = true;\n            System.out.println(\"fail:\" + v[j] + \" < \" + last);\n            buff.append(\"  WRONG tracer\\n\");\n          }\n          if (cmp == 0) { // ensure second field is in reverse order\n            cmp = v2[j].stringValue().compareTo(lastSub);\n            if (cmp > 0) {\n              fail = true;\n              System.out.println(\"rev field fail:\" + v2[j] + \" > \" + lastSub);\n              buff.append(\"  WRONG tracer2\\n\");\n            } else if(cmp == 0) { // ensure docid is in order\n              if (result[x].doc < lastDocId) {\n                fail = true;\n                System.out.println(\"doc fail:\" + result[x].doc + \" > \" + lastDocId);\n                buff.append(\"  WRONG docID\\n\");\n              }\n            }\n          }\n        }\n        last = v[j].stringValue();\n        lastSub = v2[j].stringValue();\n        lastDocId = result[x].doc;\n      }\n    }\n    if (fail) {\n      System.out.println(\"topn field1(field2)(docID):\\n\" + buff);\n    }\n    assertFalse(\"Found sort results out of order\", fail);\n    searcher.getIndexReader().close();\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#verifyStringSort(Sort).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#verifyStringSort(Sort).mjava","sourceNew":"  private void verifyStringSort(Sort sort) throws Exception {\n    final IndexSearcher searcher = getFullStrings();\n    final ScoreDoc[] result = searcher.search(new MatchAllDocsQuery(), null, _TestUtil.nextInt(random, 500, searcher.getIndexReader().maxDoc()), sort).scoreDocs;\n    StringBuilder buff = new StringBuilder();\n    int n = result.length;\n    String last = null;\n    String lastSub = null;\n    int lastDocId = 0;\n    boolean fail = false;\n    final String fieldSuffix = sort.getSort()[0].getField().endsWith(\"_fixed\") ? \"_fixed\" : \"\";\n    for (int x = 0; x < n; ++x) {\n      Document doc2 = searcher.doc(result[x].doc);\n      IndexableField[] v = doc2.getFields(\"tracer\" + fieldSuffix);\n      IndexableField[] v2 = doc2.getFields(\"tracer2\" + fieldSuffix);\n      for (int j = 0; j < v.length; ++j) {\n        buff.append(v[j] + \"(\" + v2[j] + \")(\" + result[x].doc+\")\\n\");\n        if (last != null) {\n          int cmp = v[j].stringValue().compareTo(last);\n          if (!(cmp >= 0)) { // ensure first field is in order\n            fail = true;\n            System.out.println(\"fail:\" + v[j] + \" < \" + last);\n            buff.append(\"  WRONG tracer\\n\");\n          }\n          if (cmp == 0) { // ensure second field is in reverse order\n            cmp = v2[j].stringValue().compareTo(lastSub);\n            if (cmp > 0) {\n              fail = true;\n              System.out.println(\"rev field fail:\" + v2[j] + \" > \" + lastSub);\n              buff.append(\"  WRONG tracer2\\n\");\n            } else if(cmp == 0) { // ensure docid is in order\n              if (result[x].doc < lastDocId) {\n                fail = true;\n                System.out.println(\"doc fail:\" + result[x].doc + \" > \" + lastDocId);\n                buff.append(\"  WRONG docID\\n\");\n              }\n            }\n          }\n        }\n        last = v[j].stringValue();\n        lastSub = v2[j].stringValue();\n        lastDocId = result[x].doc;\n      }\n    }\n    if (fail) {\n      System.out.println(\"topn field1(field2)(docID):\\n\" + buff);\n    }\n    assertFalse(\"Found sort results out of order\", fail);\n    searcher.getIndexReader().close();\n  }\n\n","sourceOld":"  private void verifyStringSort(Sort sort) throws Exception {\n    final IndexSearcher searcher = getFullStrings();\n    final ScoreDoc[] result = searcher.search(new MatchAllDocsQuery(), null, _TestUtil.nextInt(random, 500, searcher.getIndexReader().maxDoc()), sort).scoreDocs;\n    StringBuilder buff = new StringBuilder();\n    int n = result.length;\n    String last = null;\n    String lastSub = null;\n    int lastDocId = 0;\n    boolean fail = false;\n    final String fieldSuffix = sort.getSort()[0].getField().endsWith(\"_fixed\") ? \"_fixed\" : \"\";\n    for (int x = 0; x < n; ++x) {\n      Document doc2 = searcher.doc(result[x].doc);\n      IndexableField[] v = doc2.getFields(\"tracer\" + fieldSuffix);\n      IndexableField[] v2 = doc2.getFields(\"tracer2\" + fieldSuffix);\n      for (int j = 0; j < v.length; ++j) {\n        buff.append(v[j] + \"(\" + v2[j] + \")(\" + result[x].doc+\")\\n\");\n        if (last != null) {\n          int cmp = v[j].stringValue().compareTo(last);\n          if (!(cmp >= 0)) { // ensure first field is in order\n            fail = true;\n            System.out.println(\"fail:\" + v[j] + \" < \" + last);\n            buff.append(\"  WRONG tracer\\n\");\n          }\n          if (cmp == 0) { // ensure second field is in reverse order\n            cmp = v2[j].stringValue().compareTo(lastSub);\n            if (cmp > 0) {\n              fail = true;\n              System.out.println(\"rev field fail:\" + v2[j] + \" > \" + lastSub);\n              buff.append(\"  WRONG tracer2\\n\");\n            } else if(cmp == 0) { // ensure docid is in order\n              if (result[x].doc < lastDocId) {\n                fail = true;\n                System.out.println(\"doc fail:\" + result[x].doc + \" > \" + lastDocId);\n                buff.append(\"  WRONG docID\\n\");\n              }\n            }\n          }\n        }\n        last = v[j].stringValue();\n        lastSub = v2[j].stringValue();\n        lastDocId = result[x].doc;\n      }\n    }\n    if (fail) {\n      System.out.println(\"topn field1(field2)(docID):\\n\" + buff);\n    }\n    assertFalse(\"Found sort results out of order\", fail);\n    searcher.getIndexReader().close();\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#verifyStringSort(Sort).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#verifyStringSort(Sort).mjava","sourceNew":"  private void verifyStringSort(Sort sort) throws Exception {\n    final IndexSearcher searcher = getFullStrings();\n    final ScoreDoc[] result = searcher.search(new MatchAllDocsQuery(), null, _TestUtil.nextInt(random, 500, searcher.getIndexReader().maxDoc()), sort).scoreDocs;\n    StringBuilder buff = new StringBuilder();\n    int n = result.length;\n    String last = null;\n    String lastSub = null;\n    int lastDocId = 0;\n    boolean fail = false;\n    final String fieldSuffix = sort.getSort()[0].getField().endsWith(\"_fixed\") ? \"_fixed\" : \"\";\n    for (int x = 0; x < n; ++x) {\n      Document doc2 = searcher.doc(result[x].doc);\n      IndexableField[] v = doc2.getFields(\"tracer\" + fieldSuffix);\n      IndexableField[] v2 = doc2.getFields(\"tracer2\" + fieldSuffix);\n      for (int j = 0; j < v.length; ++j) {\n        buff.append(v[j] + \"(\" + v2[j] + \")(\" + result[x].doc+\")\\n\");\n        if (last != null) {\n          int cmp = v[j].stringValue().compareTo(last);\n          if (!(cmp >= 0)) { // ensure first field is in order\n            fail = true;\n            System.out.println(\"fail:\" + v[j] + \" < \" + last);\n            buff.append(\"  WRONG tracer\\n\");\n          }\n          if (cmp == 0) { // ensure second field is in reverse order\n            cmp = v2[j].stringValue().compareTo(lastSub);\n            if (cmp > 0) {\n              fail = true;\n              System.out.println(\"rev field fail:\" + v2[j] + \" > \" + lastSub);\n              buff.append(\"  WRONG tracer2\\n\");\n            } else if(cmp == 0) { // ensure docid is in order\n              if (result[x].doc < lastDocId) {\n                fail = true;\n                System.out.println(\"doc fail:\" + result[x].doc + \" > \" + lastDocId);\n                buff.append(\"  WRONG docID\\n\");\n              }\n            }\n          }\n        }\n        last = v[j].stringValue();\n        lastSub = v2[j].stringValue();\n        lastDocId = result[x].doc;\n      }\n    }\n    if (fail) {\n      System.out.println(\"topn field1(field2)(docID):\\n\" + buff);\n    }\n    assertFalse(\"Found sort results out of order\", fail);\n    searcher.getIndexReader().close();\n  }\n\n","sourceOld":"  private void verifyStringSort(Sort sort) throws Exception {\n    final IndexSearcher searcher = getFullStrings();\n    final ScoreDoc[] result = searcher.search(new MatchAllDocsQuery(), null, _TestUtil.nextInt(random, 500, searcher.getIndexReader().maxDoc()), sort).scoreDocs;\n    StringBuilder buff = new StringBuilder();\n    int n = result.length;\n    String last = null;\n    String lastSub = null;\n    int lastDocId = 0;\n    boolean fail = false;\n    final String fieldSuffix = sort.getSort()[0].getField().endsWith(\"_fixed\") ? \"_fixed\" : \"\";\n    for (int x = 0; x < n; ++x) {\n      Document doc2 = searcher.doc(result[x].doc);\n      IndexableField[] v = doc2.getFields(\"tracer\" + fieldSuffix);\n      IndexableField[] v2 = doc2.getFields(\"tracer2\" + fieldSuffix);\n      for (int j = 0; j < v.length; ++j) {\n        buff.append(v[j] + \"(\" + v2[j] + \")(\" + result[x].doc+\")\\n\");\n        if (last != null) {\n          int cmp = v[j].stringValue().compareTo(last);\n          if (!(cmp >= 0)) { // ensure first field is in order\n            fail = true;\n            System.out.println(\"fail:\" + v[j] + \" < \" + last);\n            buff.append(\"  WRONG tracer\\n\");\n          }\n          if (cmp == 0) { // ensure second field is in reverse order\n            cmp = v2[j].stringValue().compareTo(lastSub);\n            if (cmp > 0) {\n              fail = true;\n              System.out.println(\"rev field fail:\" + v2[j] + \" > \" + lastSub);\n              buff.append(\"  WRONG tracer2\\n\");\n            } else if(cmp == 0) { // ensure docid is in order\n              if (result[x].doc < lastDocId) {\n                fail = true;\n                System.out.println(\"doc fail:\" + result[x].doc + \" > \" + lastDocId);\n                buff.append(\"  WRONG docID\\n\");\n              }\n            }\n          }\n        }\n        last = v[j].stringValue();\n        lastSub = v2[j].stringValue();\n        lastDocId = result[x].doc;\n      }\n    }\n    if (fail) {\n      System.out.println(\"topn field1(field2)(docID):\\n\" + buff);\n    }\n    assertFalse(\"Found sort results out of order\", fail);\n    searcher.getIndexReader().close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0e7c2454a6a8237bfd0e953f5b940838408c9055":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["a3a0403b45dfe384fae4a1b6e96c3265d000c498","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["28088b0a688977b79dec2cc9119cff2fb4aab7ee"],"28088b0a688977b79dec2cc9119cff2fb4aab7ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["28088b0a688977b79dec2cc9119cff2fb4aab7ee"],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["0e7c2454a6a8237bfd0e953f5b940838408c9055","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"28088b0a688977b79dec2cc9119cff2fb4aab7ee":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}