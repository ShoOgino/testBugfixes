{"path":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdateNonNumericDocValuesField().mjava","commits":[{"id":"1cff1deb788b9babb942b20707a93e1ab902ce37","date":1380805349,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdateNonNumericDocValuesField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdateNonDocValueField().mjava","sourceNew":"  @Test\n  public void testUpdateNonNumericDocValuesField() throws Exception {\n    // we don't support adding new fields or updating existing non-numeric-dv\n    // fields through numeric updates\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"doc\", Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    writer.addDocument(doc); // flushed document\n    writer.commit();\n    writer.addDocument(doc); // in-memory document\n    \n    try {\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"ndv\", 17L);\n      fail(\"should not have allowed creating new fields through update\");\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n    \n    try {\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"foo\", 17L);\n      fail(\"should not have allowed updating an existing field to numeric-dv\");\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testUpdateNonDocValueField() throws Exception {\n    // we don't support adding new fields or updating existing non-numeric-dv\n    // fields through numeric updates\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"doc\", Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    writer.addDocument(doc); // flushed document\n    writer.commit();\n    writer.addDocument(doc); // in-memory document\n    \n    try {\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"ndv\", 17L);\n      fail(\"should not have allowed creating new fields through update\");\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n    \n    try {\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"foo\", 17L);\n      fail(\"should not have allowed updating an existing field to numeric-dv\");\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdateNonNumericDocValuesField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdateNonNumericDocValuesField().mjava","sourceNew":"  @Test\n  public void testUpdateNonNumericDocValuesField() throws Exception {\n    // we don't support adding new fields or updating existing non-numeric-dv\n    // fields through numeric updates\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"doc\", Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    writer.addDocument(doc); // flushed document\n    writer.commit();\n    writer.addDocument(doc); // in-memory document\n    \n    try {\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"ndv\", 17L);\n      fail(\"should not have allowed creating new fields through update\");\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n    \n    try {\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"foo\", 17L);\n      fail(\"should not have allowed updating an existing field to numeric-dv\");\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n    \n    writer.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testUpdateNonNumericDocValuesField() throws Exception {\n    // we don't support adding new fields or updating existing non-numeric-dv\n    // fields through numeric updates\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"doc\", Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    writer.addDocument(doc); // flushed document\n    writer.commit();\n    writer.addDocument(doc); // in-memory document\n    \n    try {\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"ndv\", 17L);\n      fail(\"should not have allowed creating new fields through update\");\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n    \n    try {\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"foo\", 17L);\n      fail(\"should not have allowed updating an existing field to numeric-dv\");\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdateNonNumericDocValuesField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdateNonNumericDocValuesField().mjava","sourceNew":"  @Test\n  public void testUpdateNonNumericDocValuesField() throws Exception {\n    // we don't support adding new fields or updating existing non-numeric-dv\n    // fields through numeric updates\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"doc\", Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    writer.addDocument(doc); // flushed document\n    writer.commit();\n    writer.addDocument(doc); // in-memory document\n    \n    try {\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"ndv\", 17L);\n      fail(\"should not have allowed creating new fields through update\");\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n    \n    try {\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"foo\", 17L);\n      fail(\"should not have allowed updating an existing field to numeric-dv\");\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n    \n    writer.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testUpdateNonNumericDocValuesField() throws Exception {\n    // we don't support adding new fields or updating existing non-numeric-dv\n    // fields through numeric updates\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"doc\", Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    writer.addDocument(doc); // flushed document\n    writer.commit();\n    writer.addDocument(doc); // in-memory document\n    \n    try {\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"ndv\", 17L);\n      fail(\"should not have allowed creating new fields through update\");\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n    \n    try {\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"foo\", 17L);\n      fail(\"should not have allowed updating an existing field to numeric-dv\");\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n    \n    writer.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdateNonNumericDocValuesField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdateNonNumericDocValuesField().mjava","sourceNew":"  @Test\n  public void testUpdateNonNumericDocValuesField() throws Exception {\n    // we don't support adding new fields or updating existing non-numeric-dv\n    // fields through numeric updates\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"doc\", Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    writer.addDocument(doc); // flushed document\n    writer.commit();\n    writer.addDocument(doc); // in-memory document\n    \n    try {\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"ndv\", 17L);\n      fail(\"should not have allowed creating new fields through update\");\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n    \n    try {\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"foo\", 17L);\n      fail(\"should not have allowed updating an existing field to numeric-dv\");\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testUpdateNonNumericDocValuesField() throws Exception {\n    // we don't support adding new fields or updating existing non-numeric-dv\n    // fields through numeric updates\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"doc\", Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    writer.addDocument(doc); // flushed document\n    writer.commit();\n    writer.addDocument(doc); // in-memory document\n    \n    try {\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"ndv\", 17L);\n      fail(\"should not have allowed creating new fields through update\");\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n    \n    try {\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"foo\", 17L);\n      fail(\"should not have allowed updating an existing field to numeric-dv\");\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n    \n    writer.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdateNonNumericDocValuesField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdateNonNumericDocValuesField().mjava","sourceNew":"  @Test\n  public void testUpdateNonNumericDocValuesField() throws Exception {\n    // we don't support adding new fields or updating existing non-numeric-dv\n    // fields through numeric updates\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"doc\", Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    writer.addDocument(doc); // flushed document\n    writer.commit();\n    writer.addDocument(doc); // in-memory document\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"ndv\", 17L);\n    });\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"foo\", 17L);\n    });\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testUpdateNonNumericDocValuesField() throws Exception {\n    // we don't support adding new fields or updating existing non-numeric-dv\n    // fields through numeric updates\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"doc\", Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    writer.addDocument(doc); // flushed document\n    writer.commit();\n    writer.addDocument(doc); // in-memory document\n    \n    try {\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"ndv\", 17L);\n      fail(\"should not have allowed creating new fields through update\");\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n    \n    try {\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"foo\", 17L);\n      fail(\"should not have allowed updating an existing field to numeric-dv\");\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":["4962e8a1c440950d757f5e295b4f6106ba2ab420"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdateNonNumericDocValuesField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdateNonNumericDocValuesField().mjava","sourceNew":"  public void testUpdateNonNumericDocValuesField() throws Exception {\n    // we don't support adding new fields or updating existing non-numeric-dv\n    // fields through numeric updates\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"doc\", Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    writer.addDocument(doc); // flushed document\n    writer.commit();\n    writer.addDocument(doc); // in-memory document\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"ndv\", 17L);\n    });\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"foo\", 17L);\n    });\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testUpdateNonNumericDocValuesField() throws Exception {\n    // we don't support adding new fields or updating existing non-numeric-dv\n    // fields through numeric updates\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"doc\", Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    writer.addDocument(doc); // flushed document\n    writer.commit();\n    writer.addDocument(doc); // in-memory document\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"ndv\", 17L);\n    });\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"foo\", 17L);\n    });\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdateNonNumericDocValuesField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdateNonNumericDocValuesField().mjava","sourceNew":"  public void testUpdateNonNumericDocValuesField() throws Exception {\n    // we don't support adding new fields or updating existing non-numeric-dv\n    // fields through numeric updates\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"doc\", Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    writer.addDocument(doc); // flushed document\n    writer.commit();\n    writer.addDocument(doc); // in-memory document\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"ndv\", 17L);\n    });\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"foo\", 17L);\n    });\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testUpdateNonNumericDocValuesField() throws Exception {\n    // we don't support adding new fields or updating existing non-numeric-dv\n    // fields through numeric updates\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"doc\", Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    writer.addDocument(doc); // flushed document\n    writer.commit();\n    writer.addDocument(doc); // in-memory document\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"ndv\", 17L);\n    });\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"foo\", 17L);\n    });\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdateNonNumericDocValuesField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdateNonNumericDocValuesField().mjava","sourceNew":"  public void testUpdateNonNumericDocValuesField() throws Exception {\n    // we don't support adding new fields or updating existing non-numeric-dv\n    // fields through numeric updates\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"doc\", Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    writer.addDocument(doc); // flushed document\n    writer.commit();\n    writer.addDocument(doc); // in-memory document\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"ndv\", 17L);\n    });\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"foo\", 17L);\n    });\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testUpdateNonNumericDocValuesField() throws Exception {\n    // we don't support adding new fields or updating existing non-numeric-dv\n    // fields through numeric updates\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"doc\", Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    writer.addDocument(doc); // flushed document\n    writer.commit();\n    writer.addDocument(doc); // in-memory document\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"ndv\", 17L);\n    });\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"foo\", 17L);\n    });\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1cff1deb788b9babb942b20707a93e1ab902ce37":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["05fe562aa248790944d43cdd478f512572835ba0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["1cff1deb788b9babb942b20707a93e1ab902ce37"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["05fe562aa248790944d43cdd478f512572835ba0","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["05fe562aa248790944d43cdd478f512572835ba0","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"1cff1deb788b9babb942b20707a93e1ab902ce37":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1cff1deb788b9babb942b20707a93e1ab902ce37"],"05fe562aa248790944d43cdd478f512572835ba0":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["05fe562aa248790944d43cdd478f512572835ba0"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}