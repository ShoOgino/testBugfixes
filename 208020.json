{"path":"contrib/analyzers/src/test/org/apache/lucene/analysis/ru/TestRussianStem#testStem().mjava","commits":[{"id":"043c298cb215f13ba7b9b81d20760704e8f93d66","date":1107566743,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/analyzers/src/test/org/apache/lucene/analysis/ru/TestRussianStem#testStem().mjava","pathOld":"sandbox/contributions/analyzers/src/test/org/apache/lucene/analysis/ru/TestRussianStem#testStem().mjava","sourceNew":"    public void testStem()\n    {\n        for (int i = 0; i < words.size(); i++)\n        {\n            //if ( (i % 100) == 0 ) System.err.println(i);\n            String realStem =\n                RussianStemmer.stem(\n                    (String) words.get(i),\n                    RussianCharsets.UnicodeRussian);\n            assertEquals(\"unicode\", stems.get(i), realStem);\n        }\n    }\n\n","sourceOld":"    public void testStem()\n    {\n        for (int i = 0; i < words.size(); i++)\n        {\n            //if ( (i % 100) == 0 ) System.err.println(i);\n            String realStem =\n                RussianStemmer.stem(\n                    (String) words.get(i),\n                    RussianCharsets.UnicodeRussian);\n            assertEquals(\"unicode\", stems.get(i), realStem);\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/ru/TestRussianStem#testStem().mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/ru/TestRussianStem#testStem().mjava","sourceNew":"    public void testStem()\n    {\n        for (int i = 0; i < words.size(); i++)\n        {\n            //if ( (i % 100) == 0 ) System.err.println(i);\n            String realStem =\n                RussianStemmer.stem(\n                    (String) words.get(i),\n                    RussianCharsets.UnicodeRussian);\n            assertEquals(\"unicode\", stems.get(i), realStem);\n        }\n    }\n\n","sourceOld":"    public void testStem()\n    {\n        for (int i = 0; i < words.size(); i++)\n        {\n            //if ( (i % 100) == 0 ) System.err.println(i);\n            String realStem =\n                RussianStemmer.stem(\n                    (String) words.get(i),\n                    RussianCharsets.UnicodeRussian);\n            assertEquals(\"unicode\", stems.get(i), realStem);\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"043c298cb215f13ba7b9b81d20760704e8f93d66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd745d580729e528151b58aeda87ef82f1b95c9b"]},"commit2Childs":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"043c298cb215f13ba7b9b81d20760704e8f93d66":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}