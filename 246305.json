{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","sourceNew":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        rnd = newRandom();\n        Directory ram = new RAMDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", 1, \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();        \n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n        FieldInfos fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        writer = new IndexWriter(ram, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n        d = new Document();\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n        // force merge\n        writer.optimize();\n        // flush\n        writer.close();\n\n        reader = SegmentReader.getOnlySegmentReader(ram);\n        fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();        \n    }\n\n","sourceOld":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        rnd = newRandom();\n        Directory ram = new RAMDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", 1, \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();        \n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n        FieldInfos fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        writer = new IndexWriter(ram, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n        d = new Document();\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n        // force merge\n        writer.optimize();\n        // flush\n        writer.close();\n\n        reader = SegmentReader.getOnlySegmentReader(ram);\n        fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","sourceNew":null,"sourceOld":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        rnd = newRandom();\n        Directory ram = new RAMDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", 1, \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();        \n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n        FieldInfos fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        writer = new IndexWriter(ram, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n        d = new Document();\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n        // force merge\n        writer.optimize();\n        // flush\n        writer.close();\n\n        reader = SegmentReader.getOnlySegmentReader(ram);\n        fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}