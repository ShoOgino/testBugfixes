{"path":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTermsReader.FieldReader.IntersectEnum.Frame#decodeMetaData().mjava","commits":[{"id":"0a570bec4aec8585a4eea44849bfb2bc264208c4","date":1371308653,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTermsReader.FieldReader.IntersectEnum.Frame#decodeMetaData().mjava","pathOld":"/dev/null","sourceNew":"        public void decodeMetaData() throws IOException {\n\n          // lazily catch up on metadata decode:\n          final int limit = getTermBlockOrd();\n          assert limit > 0;\n\n          // We must set/incr state.termCount because\n          // postings impl can look at this\n          termState.termBlockOrd = metaDataUpto;\n      \n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n            termState.docFreq = statsReader.readVInt();\n            //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n            if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n              termState.totalTermFreq = termState.docFreq + statsReader.readVLong();\n              //if (DEBUG) System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n\n            postingsReader.nextTerm(fieldInfo, termState);\n            metaDataUpto++;\n            termState.termBlockOrd++;\n          }\n        }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a10f5f1c7f2dcd4a60664dd5c34d803794e023c9","date":1371380031,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTermsReader.FieldReader.IntersectEnum.Frame#decodeMetaData().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTermsReader.FieldReader.IntersectEnum.Frame#decodeMetaData().mjava","sourceNew":"        public void decodeMetaData() throws IOException {\n\n          // lazily catch up on metadata decode:\n          final int limit = getTermBlockOrd();\n          assert limit > 0;\n\n          if (metaDataUpto == 0) {\n            Arrays.fill(longs, 0);\n          }\n          final int longSize = longs.length;\n      \n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n\n            // stats\n            termState.docFreq = statsReader.readVInt();\n            if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n              termState.totalTermFreq = termState.docFreq + statsReader.readVLong();\n            }\n            // metadata \n            for (int i = 0; i < longSize; i++) {\n              longs[i] += bytesReader.readVLong();\n            }\n            postingsReader.nextTerm(longs, bytesReader, fieldInfo, termState);\n\n            metaDataUpto++;\n          }\n          termState.termBlockOrd = metaDataUpto;\n        }\n\n","sourceOld":"        public void decodeMetaData() throws IOException {\n\n          // lazily catch up on metadata decode:\n          final int limit = getTermBlockOrd();\n          assert limit > 0;\n\n          // We must set/incr state.termCount because\n          // postings impl can look at this\n          termState.termBlockOrd = metaDataUpto;\n      \n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n            termState.docFreq = statsReader.readVInt();\n            //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n            if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n              termState.totalTermFreq = termState.docFreq + statsReader.readVLong();\n              //if (DEBUG) System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n\n            postingsReader.nextTerm(fieldInfo, termState);\n            metaDataUpto++;\n            termState.termBlockOrd++;\n          }\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f9e2db1c8ec255bc436c6cf0a92979efdfe2f90","date":1371385497,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTermsReader.FieldReader.IntersectEnum.Frame#decodeMetaData().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTermsReader.FieldReader.IntersectEnum.Frame#decodeMetaData().mjava","sourceNew":"        public void decodeMetaData() throws IOException {\n\n          // lazily catch up on metadata decode:\n          final int limit = getTermBlockOrd();\n          assert limit > 0;\n\n          if (metaDataUpto == 0) {\n            Arrays.fill(longs, 0);\n          }\n          final int longSize = longs.length;\n      \n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n\n            // stats\n            termState.docFreq = statsReader.readVInt();\n            if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n              termState.totalTermFreq = termState.docFreq + statsReader.readVLong();\n            }\n            // metadata \n            for (int i = 0; i < longSize; i++) {\n              longs[i] += bytesReader.readVLong();\n            }\n            postingsReader.decodeTerm(longs, bytesReader, fieldInfo, termState);\n\n            metaDataUpto++;\n          }\n          termState.termBlockOrd = metaDataUpto;\n        }\n\n","sourceOld":"        public void decodeMetaData() throws IOException {\n\n          // lazily catch up on metadata decode:\n          final int limit = getTermBlockOrd();\n          assert limit > 0;\n\n          if (metaDataUpto == 0) {\n            Arrays.fill(longs, 0);\n          }\n          final int longSize = longs.length;\n      \n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n\n            // stats\n            termState.docFreq = statsReader.readVInt();\n            if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n              termState.totalTermFreq = termState.docFreq + statsReader.readVLong();\n            }\n            // metadata \n            for (int i = 0; i < longSize; i++) {\n              longs[i] += bytesReader.readVLong();\n            }\n            postingsReader.nextTerm(longs, bytesReader, fieldInfo, termState);\n\n            metaDataUpto++;\n          }\n          termState.termBlockOrd = metaDataUpto;\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d01ed6d1df51191983f4dd157aedf5f4650e2b3","date":1376572546,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTreeTermsReader.FieldReader.IntersectEnum.Frame#decodeMetaData().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTermsReader.FieldReader.IntersectEnum.Frame#decodeMetaData().mjava","sourceNew":"        public void decodeMetaData() throws IOException {\n\n          // lazily catch up on metadata decode:\n          final int limit = getTermBlockOrd();\n          assert limit > 0;\n\n          if (metaDataUpto == 0) {\n            Arrays.fill(longs, 0);\n          }\n          final int longSize = longs.length;\n      \n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n\n            // stats\n            termState.docFreq = statsReader.readVInt();\n            if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n              termState.totalTermFreq = termState.docFreq + statsReader.readVLong();\n            }\n            // metadata \n            for (int i = 0; i < longSize; i++) {\n              longs[i] += bytesReader.readVLong();\n            }\n            postingsReader.decodeTerm(longs, bytesReader, fieldInfo, termState);\n\n            metaDataUpto++;\n          }\n          termState.termBlockOrd = metaDataUpto;\n        }\n\n","sourceOld":"        public void decodeMetaData() throws IOException {\n\n          // lazily catch up on metadata decode:\n          final int limit = getTermBlockOrd();\n          assert limit > 0;\n\n          if (metaDataUpto == 0) {\n            Arrays.fill(longs, 0);\n          }\n          final int longSize = longs.length;\n      \n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n\n            // stats\n            termState.docFreq = statsReader.readVInt();\n            if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n              termState.totalTermFreq = termState.docFreq + statsReader.readVLong();\n            }\n            // metadata \n            for (int i = 0; i < longSize; i++) {\n              longs[i] += bytesReader.readVLong();\n            }\n            postingsReader.decodeTerm(longs, bytesReader, fieldInfo, termState);\n\n            metaDataUpto++;\n          }\n          termState.termBlockOrd = metaDataUpto;\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8f9e2db1c8ec255bc436c6cf0a92979efdfe2f90":["a10f5f1c7f2dcd4a60664dd5c34d803794e023c9"],"0a570bec4aec8585a4eea44849bfb2bc264208c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6d01ed6d1df51191983f4dd157aedf5f4650e2b3":["8f9e2db1c8ec255bc436c6cf0a92979efdfe2f90"],"a10f5f1c7f2dcd4a60664dd5c34d803794e023c9":["0a570bec4aec8585a4eea44849bfb2bc264208c4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"8f9e2db1c8ec255bc436c6cf0a92979efdfe2f90":["6d01ed6d1df51191983f4dd157aedf5f4650e2b3"],"0a570bec4aec8585a4eea44849bfb2bc264208c4":["a10f5f1c7f2dcd4a60664dd5c34d803794e023c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a570bec4aec8585a4eea44849bfb2bc264208c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6d01ed6d1df51191983f4dd157aedf5f4650e2b3":[],"a10f5f1c7f2dcd4a60664dd5c34d803794e023c9":["8f9e2db1c8ec255bc436c6cf0a92979efdfe2f90"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6d01ed6d1df51191983f4dd157aedf5f4650e2b3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}