{"path":"solr/core/src/java/org/apache/solr/legacy/LegacyNumericUtils#splitRange(Object,int,int,long,long).mjava","commits":[{"id":"a178ac3dec643551e66363c457a9074f55545f86","date":1496133188,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/legacy/LegacyNumericUtils#splitRange(Object,int,int,long,long).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/legacy/LegacyNumericUtils#splitRange(Object,int,int,long,long).mjava","sourceNew":"  /** This helper does the splitting for both 32 and 64 bit. */\n  private static void splitRange(\n    final Object builder, final int valSize,\n    final int precisionStep, long minBound, long maxBound\n  ) {\n    if (precisionStep < 1)\n      throw new IllegalArgumentException(\"precisionStep must be >=1\");\n    if (minBound > maxBound) return;\n    for (int shift=0; ; shift += precisionStep) {\n      // calculate new bounds for inner precision\n      final long diff = 1L << (shift+precisionStep),\n        mask = ((1L<<precisionStep) - 1L) << shift;\n      final boolean\n        hasLower = (minBound & mask) != 0L,\n        hasUpper = (maxBound & mask) != mask;\n      final long\n        nextMinBound = (hasLower ? (minBound + diff) : minBound) & ~mask,\n        nextMaxBound = (hasUpper ? (maxBound - diff) : maxBound) & ~mask;\n      final boolean\n        lowerWrapped = nextMinBound < minBound,\n        upperWrapped = nextMaxBound > maxBound;\n      \n      if (shift+precisionStep>=valSize || nextMinBound>nextMaxBound || lowerWrapped || upperWrapped) {\n        // We are in the lowest precision or the next precision is not available.\n        addRange(builder, valSize, minBound, maxBound, shift);\n        // exit the split recursion loop\n        break;\n      }\n      \n      if (hasLower)\n        addRange(builder, valSize, minBound, minBound | mask, shift);\n      if (hasUpper)\n        addRange(builder, valSize, maxBound & ~mask, maxBound, shift);\n      \n      // recurse to next precision\n      minBound = nextMinBound;\n      maxBound = nextMaxBound;\n    }\n  }\n\n","sourceOld":"  /** This helper does the splitting for both 32 and 64 bit. */\n  private static void splitRange(\n    final Object builder, final int valSize,\n    final int precisionStep, long minBound, long maxBound\n  ) {\n    if (precisionStep < 1)\n      throw new IllegalArgumentException(\"precisionStep must be >=1\");\n    if (minBound > maxBound) return;\n    for (int shift=0; ; shift += precisionStep) {\n      // calculate new bounds for inner precision\n      final long diff = 1L << (shift+precisionStep),\n        mask = ((1L<<precisionStep) - 1L) << shift;\n      final boolean\n        hasLower = (minBound & mask) != 0L,\n        hasUpper = (maxBound & mask) != mask;\n      final long\n        nextMinBound = (hasLower ? (minBound + diff) : minBound) & ~mask,\n        nextMaxBound = (hasUpper ? (maxBound - diff) : maxBound) & ~mask;\n      final boolean\n        lowerWrapped = nextMinBound < minBound,\n        upperWrapped = nextMaxBound > maxBound;\n      \n      if (shift+precisionStep>=valSize || nextMinBound>nextMaxBound || lowerWrapped || upperWrapped) {\n        // We are in the lowest precision or the next precision is not available.\n        addRange(builder, valSize, minBound, maxBound, shift);\n        // exit the split recursion loop\n        break;\n      }\n      \n      if (hasLower)\n        addRange(builder, valSize, minBound, minBound | mask, shift);\n      if (hasUpper)\n        addRange(builder, valSize, maxBound & ~mask, maxBound, shift);\n      \n      // recurse to next precision\n      minBound = nextMinBound;\n      maxBound = nextMaxBound;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/legacy/LegacyNumericUtils#splitRange(Object,int,int,long,long).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/legacy/LegacyNumericUtils#splitRange(Object,int,int,long,long).mjava","sourceNew":"  /** This helper does the splitting for both 32 and 64 bit. */\n  private static void splitRange(\n    final Object builder, final int valSize,\n    final int precisionStep, long minBound, long maxBound\n  ) {\n    if (precisionStep < 1)\n      throw new IllegalArgumentException(\"precisionStep must be >=1\");\n    if (minBound > maxBound) return;\n    for (int shift=0; ; shift += precisionStep) {\n      // calculate new bounds for inner precision\n      final long diff = 1L << (shift+precisionStep),\n        mask = ((1L<<precisionStep) - 1L) << shift;\n      final boolean\n        hasLower = (minBound & mask) != 0L,\n        hasUpper = (maxBound & mask) != mask;\n      final long\n        nextMinBound = (hasLower ? (minBound + diff) : minBound) & ~mask,\n        nextMaxBound = (hasUpper ? (maxBound - diff) : maxBound) & ~mask;\n      final boolean\n        lowerWrapped = nextMinBound < minBound,\n        upperWrapped = nextMaxBound > maxBound;\n      \n      if (shift+precisionStep>=valSize || nextMinBound>nextMaxBound || lowerWrapped || upperWrapped) {\n        // We are in the lowest precision or the next precision is not available.\n        addRange(builder, valSize, minBound, maxBound, shift);\n        // exit the split recursion loop\n        break;\n      }\n      \n      if (hasLower)\n        addRange(builder, valSize, minBound, minBound | mask, shift);\n      if (hasUpper)\n        addRange(builder, valSize, maxBound & ~mask, maxBound, shift);\n      \n      // recurse to next precision\n      minBound = nextMinBound;\n      maxBound = nextMaxBound;\n    }\n  }\n\n","sourceOld":"  /** This helper does the splitting for both 32 and 64 bit. */\n  private static void splitRange(\n    final Object builder, final int valSize,\n    final int precisionStep, long minBound, long maxBound\n  ) {\n    if (precisionStep < 1)\n      throw new IllegalArgumentException(\"precisionStep must be >=1\");\n    if (minBound > maxBound) return;\n    for (int shift=0; ; shift += precisionStep) {\n      // calculate new bounds for inner precision\n      final long diff = 1L << (shift+precisionStep),\n        mask = ((1L<<precisionStep) - 1L) << shift;\n      final boolean\n        hasLower = (minBound & mask) != 0L,\n        hasUpper = (maxBound & mask) != mask;\n      final long\n        nextMinBound = (hasLower ? (minBound + diff) : minBound) & ~mask,\n        nextMaxBound = (hasUpper ? (maxBound - diff) : maxBound) & ~mask;\n      final boolean\n        lowerWrapped = nextMinBound < minBound,\n        upperWrapped = nextMaxBound > maxBound;\n      \n      if (shift+precisionStep>=valSize || nextMinBound>nextMaxBound || lowerWrapped || upperWrapped) {\n        // We are in the lowest precision or the next precision is not available.\n        addRange(builder, valSize, minBound, maxBound, shift);\n        // exit the split recursion loop\n        break;\n      }\n      \n      if (hasLower)\n        addRange(builder, valSize, minBound, minBound | mask, shift);\n      if (hasUpper)\n        addRange(builder, valSize, maxBound & ~mask, maxBound, shift);\n      \n      // recurse to next precision\n      minBound = nextMinBound;\n      maxBound = nextMaxBound;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/legacy/LegacyNumericUtils#splitRange(Object,int,int,long,long).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/legacy/LegacyNumericUtils#splitRange(Object,int,int,long,long).mjava","sourceNew":"  /** This helper does the splitting for both 32 and 64 bit. */\n  private static void splitRange(\n    final Object builder, final int valSize,\n    final int precisionStep, long minBound, long maxBound\n  ) {\n    if (precisionStep < 1)\n      throw new IllegalArgumentException(\"precisionStep must be >=1\");\n    if (minBound > maxBound) return;\n    for (int shift=0; ; shift += precisionStep) {\n      // calculate new bounds for inner precision\n      final long diff = 1L << (shift+precisionStep),\n        mask = ((1L<<precisionStep) - 1L) << shift;\n      final boolean\n        hasLower = (minBound & mask) != 0L,\n        hasUpper = (maxBound & mask) != mask;\n      final long\n        nextMinBound = (hasLower ? (minBound + diff) : minBound) & ~mask,\n        nextMaxBound = (hasUpper ? (maxBound - diff) : maxBound) & ~mask;\n      final boolean\n        lowerWrapped = nextMinBound < minBound,\n        upperWrapped = nextMaxBound > maxBound;\n      \n      if (shift+precisionStep>=valSize || nextMinBound>nextMaxBound || lowerWrapped || upperWrapped) {\n        // We are in the lowest precision or the next precision is not available.\n        addRange(builder, valSize, minBound, maxBound, shift);\n        // exit the split recursion loop\n        break;\n      }\n      \n      if (hasLower)\n        addRange(builder, valSize, minBound, minBound | mask, shift);\n      if (hasUpper)\n        addRange(builder, valSize, maxBound & ~mask, maxBound, shift);\n      \n      // recurse to next precision\n      minBound = nextMinBound;\n      maxBound = nextMaxBound;\n    }\n  }\n\n","sourceOld":"  /** This helper does the splitting for both 32 and 64 bit. */\n  private static void splitRange(\n    final Object builder, final int valSize,\n    final int precisionStep, long minBound, long maxBound\n  ) {\n    if (precisionStep < 1)\n      throw new IllegalArgumentException(\"precisionStep must be >=1\");\n    if (minBound > maxBound) return;\n    for (int shift=0; ; shift += precisionStep) {\n      // calculate new bounds for inner precision\n      final long diff = 1L << (shift+precisionStep),\n        mask = ((1L<<precisionStep) - 1L) << shift;\n      final boolean\n        hasLower = (minBound & mask) != 0L,\n        hasUpper = (maxBound & mask) != mask;\n      final long\n        nextMinBound = (hasLower ? (minBound + diff) : minBound) & ~mask,\n        nextMaxBound = (hasUpper ? (maxBound - diff) : maxBound) & ~mask;\n      final boolean\n        lowerWrapped = nextMinBound < minBound,\n        upperWrapped = nextMaxBound > maxBound;\n      \n      if (shift+precisionStep>=valSize || nextMinBound>nextMaxBound || lowerWrapped || upperWrapped) {\n        // We are in the lowest precision or the next precision is not available.\n        addRange(builder, valSize, minBound, maxBound, shift);\n        // exit the split recursion loop\n        break;\n      }\n      \n      if (hasLower)\n        addRange(builder, valSize, minBound, minBound | mask, shift);\n      if (hasUpper)\n        addRange(builder, valSize, maxBound & ~mask, maxBound, shift);\n      \n      // recurse to next precision\n      minBound = nextMinBound;\n      maxBound = nextMaxBound;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a178ac3dec643551e66363c457a9074f55545f86":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a178ac3dec643551e66363c457a9074f55545f86"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a178ac3dec643551e66363c457a9074f55545f86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"]},"commit2Childs":{"a178ac3dec643551e66363c457a9074f55545f86":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a178ac3dec643551e66363c457a9074f55545f86","e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}