{"path":"modules/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#doExplain(AtomicReaderContext,int).mjava","commits":[{"id":"c8fda790e002fff32e201cbd0f7bed4c2b333a64","date":1309401082,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#doExplain(AtomicReaderContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/function/CustomScoreQuery.CustomWeight#doExplain(AtomicReaderContext,int).mjava","sourceNew":"    private Explanation doExplain(AtomicReaderContext info, int doc) throws IOException {\n      Explanation subQueryExpl = subQueryWeight.explain(info, doc);\n      if (!subQueryExpl.isMatch()) {\n        return subQueryExpl;\n      }\n      // match\n      Explanation[] valSrcExpls = new Explanation[valSrcWeights.length];\n      for(int i = 0; i < valSrcWeights.length; i++) {\n        valSrcExpls[i] = valSrcWeights[i].explain(info, doc);\n      }\n      Explanation customExp = CustomScoreQuery.this.getCustomScoreProvider(info).customExplain(doc,subQueryExpl,valSrcExpls);\n      float sc = getValue() * customExp.getValue();\n      Explanation res = new ComplexExplanation(\n        true, sc, CustomScoreQuery.this.toString() + \", product of:\");\n      res.addDetail(customExp);\n      res.addDetail(new Explanation(getValue(), \"queryBoost\")); // actually using the q boost as q weight (== weight value)\n      return res;\n    }\n\n","sourceOld":"    private Explanation doExplain(AtomicReaderContext info, int doc) throws IOException {\n      Explanation subQueryExpl = subQueryWeight.explain(info, doc);\n      if (!subQueryExpl.isMatch()) {\n        return subQueryExpl;\n      }\n      // match\n      Explanation[] valSrcExpls = new Explanation[valSrcWeights.length];\n      for(int i = 0; i < valSrcWeights.length; i++) {\n        valSrcExpls[i] = valSrcWeights[i].explain(info, doc);\n      }\n      Explanation customExp = CustomScoreQuery.this.getCustomScoreProvider(info).customExplain(doc,subQueryExpl,valSrcExpls);\n      float sc = getValue() * customExp.getValue();\n      Explanation res = new ComplexExplanation(\n        true, sc, CustomScoreQuery.this.toString() + \", product of:\");\n      res.addDetail(customExp);\n      res.addDetail(new Explanation(getValue(), \"queryBoost\")); // actually using the q boost as q weight (== weight value)\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#doExplain(AtomicReaderContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/function/CustomScoreQuery.CustomWeight#doExplain(AtomicReaderContext,int).mjava","sourceNew":"    private Explanation doExplain(AtomicReaderContext info, int doc) throws IOException {\n      Explanation subQueryExpl = subQueryWeight.explain(info, doc);\n      if (!subQueryExpl.isMatch()) {\n        return subQueryExpl;\n      }\n      // match\n      Explanation[] valSrcExpls = new Explanation[valSrcWeights.length];\n      for(int i = 0; i < valSrcWeights.length; i++) {\n        valSrcExpls[i] = valSrcWeights[i].explain(info, doc);\n      }\n      Explanation customExp = CustomScoreQuery.this.getCustomScoreProvider(info).customExplain(doc,subQueryExpl,valSrcExpls);\n      float sc = getValue() * customExp.getValue();\n      Explanation res = new ComplexExplanation(\n        true, sc, CustomScoreQuery.this.toString() + \", product of:\");\n      res.addDetail(customExp);\n      res.addDetail(new Explanation(getValue(), \"queryBoost\")); // actually using the q boost as q weight (== weight value)\n      return res;\n    }\n\n","sourceOld":"    private Explanation doExplain(AtomicReaderContext info, int doc) throws IOException {\n      Explanation subQueryExpl = subQueryWeight.explain(info, doc);\n      if (!subQueryExpl.isMatch()) {\n        return subQueryExpl;\n      }\n      // match\n      Explanation[] valSrcExpls = new Explanation[valSrcWeights.length];\n      for(int i = 0; i < valSrcWeights.length; i++) {\n        valSrcExpls[i] = valSrcWeights[i].explain(info, doc);\n      }\n      Explanation customExp = CustomScoreQuery.this.getCustomScoreProvider(info).customExplain(doc,subQueryExpl,valSrcExpls);\n      float sc = getValue() * customExp.getValue();\n      Explanation res = new ComplexExplanation(\n        true, sc, CustomScoreQuery.this.toString() + \", product of:\");\n      res.addDetail(customExp);\n      res.addDetail(new Explanation(getValue(), \"queryBoost\")); // actually using the q boost as q weight (== weight value)\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#doExplain(AtomicReaderContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/function/CustomScoreQuery.CustomWeight#doExplain(AtomicReaderContext,int).mjava","sourceNew":"    private Explanation doExplain(AtomicReaderContext info, int doc) throws IOException {\n      Explanation subQueryExpl = subQueryWeight.explain(info, doc);\n      if (!subQueryExpl.isMatch()) {\n        return subQueryExpl;\n      }\n      // match\n      Explanation[] valSrcExpls = new Explanation[valSrcWeights.length];\n      for(int i = 0; i < valSrcWeights.length; i++) {\n        valSrcExpls[i] = valSrcWeights[i].explain(info, doc);\n      }\n      Explanation customExp = CustomScoreQuery.this.getCustomScoreProvider(info).customExplain(doc,subQueryExpl,valSrcExpls);\n      float sc = getValue() * customExp.getValue();\n      Explanation res = new ComplexExplanation(\n        true, sc, CustomScoreQuery.this.toString() + \", product of:\");\n      res.addDetail(customExp);\n      res.addDetail(new Explanation(getValue(), \"queryBoost\")); // actually using the q boost as q weight (== weight value)\n      return res;\n    }\n\n","sourceOld":"    private Explanation doExplain(AtomicReaderContext info, int doc) throws IOException {\n      Explanation subQueryExpl = subQueryWeight.explain(info, doc);\n      if (!subQueryExpl.isMatch()) {\n        return subQueryExpl;\n      }\n      // match\n      Explanation[] valSrcExpls = new Explanation[valSrcWeights.length];\n      for(int i = 0; i < valSrcWeights.length; i++) {\n        valSrcExpls[i] = valSrcWeights[i].explain(info, doc);\n      }\n      Explanation customExp = CustomScoreQuery.this.getCustomScoreProvider(info).customExplain(doc,subQueryExpl,valSrcExpls);\n      float sc = getValue() * customExp.getValue();\n      Explanation res = new ComplexExplanation(\n        true, sc, CustomScoreQuery.this.toString() + \", product of:\");\n      res.addDetail(customExp);\n      res.addDetail(new Explanation(getValue(), \"queryBoost\")); // actually using the q boost as q weight (== weight value)\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f3cee3d20b0c786e6fca20539454262e29edcab","date":1310101685,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#doExplain(AtomicReaderContext,int).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#doExplain(AtomicReaderContext,int).mjava","sourceNew":"    private Explanation doExplain(AtomicReaderContext info, int doc) throws IOException {\n      Explanation subQueryExpl = subQueryWeight.explain(info, doc);\n      if (!subQueryExpl.isMatch()) {\n        return subQueryExpl;\n      }\n      // match\n      Explanation[] valSrcExpls = new Explanation[valSrcWeights.length];\n      for(int i = 0; i < valSrcWeights.length; i++) {\n        valSrcExpls[i] = valSrcWeights[i].explain(info, doc);\n      }\n      Explanation customExp = CustomScoreQuery.this.getCustomScoreProvider(info).customExplain(doc,subQueryExpl,valSrcExpls);\n      float sc = getBoost() * customExp.getValue();\n      Explanation res = new ComplexExplanation(\n        true, sc, CustomScoreQuery.this.toString() + \", product of:\");\n      res.addDetail(customExp);\n      res.addDetail(new Explanation(getBoost(), \"queryBoost\")); // actually using the q boost as q weight (== weight value)\n      return res;\n    }\n\n","sourceOld":"    private Explanation doExplain(AtomicReaderContext info, int doc) throws IOException {\n      Explanation subQueryExpl = subQueryWeight.explain(info, doc);\n      if (!subQueryExpl.isMatch()) {\n        return subQueryExpl;\n      }\n      // match\n      Explanation[] valSrcExpls = new Explanation[valSrcWeights.length];\n      for(int i = 0; i < valSrcWeights.length; i++) {\n        valSrcExpls[i] = valSrcWeights[i].explain(info, doc);\n      }\n      Explanation customExp = CustomScoreQuery.this.getCustomScoreProvider(info).customExplain(doc,subQueryExpl,valSrcExpls);\n      float sc = getValue() * customExp.getValue();\n      Explanation res = new ComplexExplanation(\n        true, sc, CustomScoreQuery.this.toString() + \", product of:\");\n      res.addDetail(customExp);\n      res.addDetail(new Explanation(getValue(), \"queryBoost\")); // actually using the q boost as q weight (== weight value)\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#doExplain(AtomicReaderContext,int).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#doExplain(AtomicReaderContext,int).mjava","sourceNew":"    private Explanation doExplain(AtomicReaderContext info, int doc) throws IOException {\n      Explanation subQueryExpl = subQueryWeight.explain(info, doc);\n      if (!subQueryExpl.isMatch()) {\n        return subQueryExpl;\n      }\n      // match\n      Explanation[] valSrcExpls = new Explanation[valSrcWeights.length];\n      for(int i = 0; i < valSrcWeights.length; i++) {\n        valSrcExpls[i] = valSrcWeights[i].explain(info, doc);\n      }\n      Explanation customExp = CustomScoreQuery.this.getCustomScoreProvider(info).customExplain(doc,subQueryExpl,valSrcExpls);\n      float sc = getBoost() * customExp.getValue();\n      Explanation res = new ComplexExplanation(\n        true, sc, CustomScoreQuery.this.toString() + \", product of:\");\n      res.addDetail(customExp);\n      res.addDetail(new Explanation(getBoost(), \"queryBoost\")); // actually using the q boost as q weight (== weight value)\n      return res;\n    }\n\n","sourceOld":"    private Explanation doExplain(AtomicReaderContext info, int doc) throws IOException {\n      Explanation subQueryExpl = subQueryWeight.explain(info, doc);\n      if (!subQueryExpl.isMatch()) {\n        return subQueryExpl;\n      }\n      // match\n      Explanation[] valSrcExpls = new Explanation[valSrcWeights.length];\n      for(int i = 0; i < valSrcWeights.length; i++) {\n        valSrcExpls[i] = valSrcWeights[i].explain(info, doc);\n      }\n      Explanation customExp = CustomScoreQuery.this.getCustomScoreProvider(info).customExplain(doc,subQueryExpl,valSrcExpls);\n      float sc = getValue() * customExp.getValue();\n      Explanation res = new ComplexExplanation(\n        true, sc, CustomScoreQuery.this.toString() + \", product of:\");\n      res.addDetail(customExp);\n      res.addDetail(new Explanation(getValue(), \"queryBoost\")); // actually using the q boost as q weight (== weight value)\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#doExplain(AtomicReaderContext,int).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#doExplain(AtomicReaderContext,int).mjava","sourceNew":"    private Explanation doExplain(AtomicReaderContext info, int doc) throws IOException {\n      Explanation subQueryExpl = subQueryWeight.explain(info, doc);\n      if (!subQueryExpl.isMatch()) {\n        return subQueryExpl;\n      }\n      // match\n      Explanation[] valSrcExpls = new Explanation[valSrcWeights.length];\n      for(int i = 0; i < valSrcWeights.length; i++) {\n        valSrcExpls[i] = valSrcWeights[i].explain(info, doc);\n      }\n      Explanation customExp = CustomScoreQuery.this.getCustomScoreProvider(info).customExplain(doc,subQueryExpl,valSrcExpls);\n      float sc = getBoost() * customExp.getValue();\n      Explanation res = new ComplexExplanation(\n        true, sc, CustomScoreQuery.this.toString() + \", product of:\");\n      res.addDetail(customExp);\n      res.addDetail(new Explanation(getBoost(), \"queryBoost\")); // actually using the q boost as q weight (== weight value)\n      return res;\n    }\n\n","sourceOld":"    private Explanation doExplain(AtomicReaderContext info, int doc) throws IOException {\n      Explanation subQueryExpl = subQueryWeight.explain(info, doc);\n      if (!subQueryExpl.isMatch()) {\n        return subQueryExpl;\n      }\n      // match\n      Explanation[] valSrcExpls = new Explanation[valSrcWeights.length];\n      for(int i = 0; i < valSrcWeights.length; i++) {\n        valSrcExpls[i] = valSrcWeights[i].explain(info, doc);\n      }\n      Explanation customExp = CustomScoreQuery.this.getCustomScoreProvider(info).customExplain(doc,subQueryExpl,valSrcExpls);\n      float sc = getValue() * customExp.getValue();\n      Explanation res = new ComplexExplanation(\n        true, sc, CustomScoreQuery.this.toString() + \", product of:\");\n      res.addDetail(customExp);\n      res.addDetail(new Explanation(getValue(), \"queryBoost\")); // actually using the q boost as q weight (== weight value)\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#doExplain(AtomicReaderContext,int).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#doExplain(AtomicReaderContext,int).mjava","sourceNew":"    private Explanation doExplain(AtomicReaderContext info, int doc) throws IOException {\n      Explanation subQueryExpl = subQueryWeight.explain(info, doc);\n      if (!subQueryExpl.isMatch()) {\n        return subQueryExpl;\n      }\n      // match\n      Explanation[] valSrcExpls = new Explanation[valSrcWeights.length];\n      for(int i = 0; i < valSrcWeights.length; i++) {\n        valSrcExpls[i] = valSrcWeights[i].explain(info, doc);\n      }\n      Explanation customExp = CustomScoreQuery.this.getCustomScoreProvider(info).customExplain(doc,subQueryExpl,valSrcExpls);\n      float sc = getBoost() * customExp.getValue();\n      Explanation res = new ComplexExplanation(\n        true, sc, CustomScoreQuery.this.toString() + \", product of:\");\n      res.addDetail(customExp);\n      res.addDetail(new Explanation(getBoost(), \"queryBoost\")); // actually using the q boost as q weight (== weight value)\n      return res;\n    }\n\n","sourceOld":"    private Explanation doExplain(AtomicReaderContext info, int doc) throws IOException {\n      Explanation subQueryExpl = subQueryWeight.explain(info, doc);\n      if (!subQueryExpl.isMatch()) {\n        return subQueryExpl;\n      }\n      // match\n      Explanation[] valSrcExpls = new Explanation[valSrcWeights.length];\n      for(int i = 0; i < valSrcWeights.length; i++) {\n        valSrcExpls[i] = valSrcWeights[i].explain(info, doc);\n      }\n      Explanation customExp = CustomScoreQuery.this.getCustomScoreProvider(info).customExplain(doc,subQueryExpl,valSrcExpls);\n      float sc = getBoost() * customExp.getValue();\n      Explanation res = new ComplexExplanation(\n        true, sc, CustomScoreQuery.this.toString() + \", product of:\");\n      res.addDetail(customExp);\n      res.addDetail(new Explanation(getBoost(), \"queryBoost\")); // actually using the q boost as q weight (== weight value)\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1291e4568eb7d9463d751627596ef14baf4c1603":["d083e83f225b11e5fdd900e83d26ddb385b6955c","0f3cee3d20b0c786e6fca20539454262e29edcab"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["0f3cee3d20b0c786e6fca20539454262e29edcab"],"0f3cee3d20b0c786e6fca20539454262e29edcab":["c8fda790e002fff32e201cbd0f7bed4c2b333a64"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["817d8435e9135b756f08ce6710ab0baac51bdf88","0f3cee3d20b0c786e6fca20539454262e29edcab"],"c8fda790e002fff32e201cbd0f7bed4c2b333a64":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c8fda790e002fff32e201cbd0f7bed4c2b333a64"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c8fda790e002fff32e201cbd0f7bed4c2b333a64"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"1291e4568eb7d9463d751627596ef14baf4c1603":[],"0f3cee3d20b0c786e6fca20539454262e29edcab":["1291e4568eb7d9463d751627596ef14baf4c1603","b89678825b68eccaf09e6ab71675fc0b0af1e099","f0b9507caf22f292ac0e5e59f62db4275adf4511"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":[],"c8fda790e002fff32e201cbd0f7bed4c2b333a64":["0f3cee3d20b0c786e6fca20539454262e29edcab","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c8fda790e002fff32e201cbd0f7bed4c2b333a64","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["1291e4568eb7d9463d751627596ef14baf4c1603"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["f0b9507caf22f292ac0e5e59f62db4275adf4511"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}