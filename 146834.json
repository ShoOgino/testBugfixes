{"path":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#verifyLeaderAssignment(CloudSolrClient,String).mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#verifyLeaderAssignment(CloudSolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#verifyLeaderAssignment(CloudSolrServer,String).mjava","sourceNew":"  private void verifyLeaderAssignment(CloudSolrClient client, String collectionName)\n      throws InterruptedException, KeeperException {\n    String lastFailMsg = \"\";\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      lastFailMsg = \"\";\n      client.getZkStateReader().updateClusterState(true);\n      ClusterState clusterState = client.getZkStateReader().getClusterState();\n      for (Slice slice : clusterState.getSlices(collectionName)) {\n        Boolean foundLeader = false;\n        Boolean foundPreferred = false;\n        for (Replica replica : slice.getReplicas()) {\n          Boolean isLeader = replica.getBool(\"leader\", false);\n          Boolean isPreferred = replica.getBool(\"property.preferredleader\", false);\n          if (isLeader != isPreferred) {\n            lastFailMsg = \"Replica should NOT have preferredLeader != leader. Preferred: \" + isPreferred.toString() +\n                \" leader is \" + isLeader.toString();\n          }\n          if (foundLeader && isLeader) {\n            lastFailMsg = \"There should only be a single leader in _any_ shard! Replica \" + replica.getName() +\n                \" is the second leader in slice \" + slice.getName();\n          }\n          if (foundPreferred && isPreferred) {\n            lastFailMsg = \"There should only be a single preferredLeader in _any_ shard! Replica \" + replica.getName() +\n                \" is the second preferredLeader in slice \" + slice.getName();\n          }\n          foundLeader = foundLeader ? foundLeader : isLeader;\n          foundPreferred = foundPreferred ? foundPreferred : isPreferred;\n        }\n      }\n      if (lastFailMsg.length() == 0) return;\n      Thread.sleep(100);\n    }\n    fail(lastFailMsg);\n  }\n\n","sourceOld":"  private void verifyLeaderAssignment(CloudSolrServer client, String collectionName)\n      throws InterruptedException, KeeperException {\n    String lastFailMsg = \"\";\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      lastFailMsg = \"\";\n      client.getZkStateReader().updateClusterState(true);\n      ClusterState clusterState = client.getZkStateReader().getClusterState();\n      for (Slice slice : clusterState.getSlices(collectionName)) {\n        Boolean foundLeader = false;\n        Boolean foundPreferred = false;\n        for (Replica replica : slice.getReplicas()) {\n          Boolean isLeader = replica.getBool(\"leader\", false);\n          Boolean isPreferred = replica.getBool(\"property.preferredleader\", false);\n          if (isLeader != isPreferred) {\n            lastFailMsg = \"Replica should NOT have preferredLeader != leader. Preferred: \" + isPreferred.toString() +\n                \" leader is \" + isLeader.toString();\n          }\n          if (foundLeader && isLeader) {\n            lastFailMsg = \"There should only be a single leader in _any_ shard! Replica \" + replica.getName() +\n                \" is the second leader in slice \" + slice.getName();\n          }\n          if (foundPreferred && isPreferred) {\n            lastFailMsg = \"There should only be a single preferredLeader in _any_ shard! Replica \" + replica.getName() +\n                \" is the second preferredLeader in slice \" + slice.getName();\n          }\n          foundLeader = foundLeader ? foundLeader : isLeader;\n          foundPreferred = foundPreferred ? foundPreferred : isPreferred;\n        }\n      }\n      if (lastFailMsg.length() == 0) return;\n      Thread.sleep(100);\n    }\n    fail(lastFailMsg);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"102da6baafc0f534a59f31729343dbab9d3b9e9a","date":1438410244,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#verifyLeaderAssignment(CloudSolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#verifyLeaderAssignment(CloudSolrClient,String).mjava","sourceNew":"  private void verifyLeaderAssignment(CloudSolrClient client, String collectionName)\n      throws InterruptedException, KeeperException {\n    String lastFailMsg = \"\";\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      lastFailMsg = \"\";\n      client.getZkStateReader().updateClusterState();\n      ClusterState clusterState = client.getZkStateReader().getClusterState();\n      for (Slice slice : clusterState.getSlices(collectionName)) {\n        Boolean foundLeader = false;\n        Boolean foundPreferred = false;\n        for (Replica replica : slice.getReplicas()) {\n          Boolean isLeader = replica.getBool(\"leader\", false);\n          Boolean isPreferred = replica.getBool(\"property.preferredleader\", false);\n          if (isLeader != isPreferred) {\n            lastFailMsg = \"Replica should NOT have preferredLeader != leader. Preferred: \" + isPreferred.toString() +\n                \" leader is \" + isLeader.toString();\n          }\n          if (foundLeader && isLeader) {\n            lastFailMsg = \"There should only be a single leader in _any_ shard! Replica \" + replica.getName() +\n                \" is the second leader in slice \" + slice.getName();\n          }\n          if (foundPreferred && isPreferred) {\n            lastFailMsg = \"There should only be a single preferredLeader in _any_ shard! Replica \" + replica.getName() +\n                \" is the second preferredLeader in slice \" + slice.getName();\n          }\n          foundLeader = foundLeader ? foundLeader : isLeader;\n          foundPreferred = foundPreferred ? foundPreferred : isPreferred;\n        }\n      }\n      if (lastFailMsg.length() == 0) return;\n      Thread.sleep(100);\n    }\n    fail(lastFailMsg);\n  }\n\n","sourceOld":"  private void verifyLeaderAssignment(CloudSolrClient client, String collectionName)\n      throws InterruptedException, KeeperException {\n    String lastFailMsg = \"\";\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      lastFailMsg = \"\";\n      client.getZkStateReader().updateClusterState(true);\n      ClusterState clusterState = client.getZkStateReader().getClusterState();\n      for (Slice slice : clusterState.getSlices(collectionName)) {\n        Boolean foundLeader = false;\n        Boolean foundPreferred = false;\n        for (Replica replica : slice.getReplicas()) {\n          Boolean isLeader = replica.getBool(\"leader\", false);\n          Boolean isPreferred = replica.getBool(\"property.preferredleader\", false);\n          if (isLeader != isPreferred) {\n            lastFailMsg = \"Replica should NOT have preferredLeader != leader. Preferred: \" + isPreferred.toString() +\n                \" leader is \" + isLeader.toString();\n          }\n          if (foundLeader && isLeader) {\n            lastFailMsg = \"There should only be a single leader in _any_ shard! Replica \" + replica.getName() +\n                \" is the second leader in slice \" + slice.getName();\n          }\n          if (foundPreferred && isPreferred) {\n            lastFailMsg = \"There should only be a single preferredLeader in _any_ shard! Replica \" + replica.getName() +\n                \" is the second preferredLeader in slice \" + slice.getName();\n          }\n          foundLeader = foundLeader ? foundLeader : isLeader;\n          foundPreferred = foundPreferred ? foundPreferred : isPreferred;\n        }\n      }\n      if (lastFailMsg.length() == 0) return;\n      Thread.sleep(100);\n    }\n    fail(lastFailMsg);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","date":1457343183,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#verifyLeaderAssignment(CloudSolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#verifyLeaderAssignment(CloudSolrClient,String).mjava","sourceNew":"  private void verifyLeaderAssignment(CloudSolrClient client, String collectionName)\n      throws InterruptedException, KeeperException {\n    String lastFailMsg = \"\";\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      lastFailMsg = \"\";\n      ClusterState clusterState = client.getZkStateReader().getClusterState();\n      for (Slice slice : clusterState.getSlices(collectionName)) {\n        Boolean foundLeader = false;\n        Boolean foundPreferred = false;\n        for (Replica replica : slice.getReplicas()) {\n          Boolean isLeader = replica.getBool(\"leader\", false);\n          Boolean isPreferred = replica.getBool(\"property.preferredleader\", false);\n          if (isLeader != isPreferred) {\n            lastFailMsg = \"Replica should NOT have preferredLeader != leader. Preferred: \" + isPreferred.toString() +\n                \" leader is \" + isLeader.toString();\n          }\n          if (foundLeader && isLeader) {\n            lastFailMsg = \"There should only be a single leader in _any_ shard! Replica \" + replica.getName() +\n                \" is the second leader in slice \" + slice.getName();\n          }\n          if (foundPreferred && isPreferred) {\n            lastFailMsg = \"There should only be a single preferredLeader in _any_ shard! Replica \" + replica.getName() +\n                \" is the second preferredLeader in slice \" + slice.getName();\n          }\n          foundLeader = foundLeader ? foundLeader : isLeader;\n          foundPreferred = foundPreferred ? foundPreferred : isPreferred;\n        }\n      }\n      if (lastFailMsg.length() == 0) return;\n      Thread.sleep(100);\n    }\n    fail(lastFailMsg);\n  }\n\n","sourceOld":"  private void verifyLeaderAssignment(CloudSolrClient client, String collectionName)\n      throws InterruptedException, KeeperException {\n    String lastFailMsg = \"\";\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      lastFailMsg = \"\";\n      client.getZkStateReader().updateClusterState();\n      ClusterState clusterState = client.getZkStateReader().getClusterState();\n      for (Slice slice : clusterState.getSlices(collectionName)) {\n        Boolean foundLeader = false;\n        Boolean foundPreferred = false;\n        for (Replica replica : slice.getReplicas()) {\n          Boolean isLeader = replica.getBool(\"leader\", false);\n          Boolean isPreferred = replica.getBool(\"property.preferredleader\", false);\n          if (isLeader != isPreferred) {\n            lastFailMsg = \"Replica should NOT have preferredLeader != leader. Preferred: \" + isPreferred.toString() +\n                \" leader is \" + isLeader.toString();\n          }\n          if (foundLeader && isLeader) {\n            lastFailMsg = \"There should only be a single leader in _any_ shard! Replica \" + replica.getName() +\n                \" is the second leader in slice \" + slice.getName();\n          }\n          if (foundPreferred && isPreferred) {\n            lastFailMsg = \"There should only be a single preferredLeader in _any_ shard! Replica \" + replica.getName() +\n                \" is the second preferredLeader in slice \" + slice.getName();\n          }\n          foundLeader = foundLeader ? foundLeader : isLeader;\n          foundPreferred = foundPreferred ? foundPreferred : isPreferred;\n        }\n      }\n      if (lastFailMsg.length() == 0) return;\n      Thread.sleep(100);\n    }\n    fail(lastFailMsg);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"344b0840364d990b29b97467bfcc766ff8325d11","date":1501574100,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#verifyLeaderAssignment(CloudSolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#verifyLeaderAssignment(CloudSolrClient,String).mjava","sourceNew":"  private void verifyLeaderAssignment(CloudSolrClient client, String collectionName)\n      throws InterruptedException, KeeperException {\n    String lastFailMsg = \"\";\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      lastFailMsg = \"\";\n      ClusterState clusterState = client.getZkStateReader().getClusterState();\n      for (Slice slice : clusterState.getCollection(collectionName).getSlices()) {\n        Boolean foundLeader = false;\n        Boolean foundPreferred = false;\n        for (Replica replica : slice.getReplicas()) {\n          Boolean isLeader = replica.getBool(\"leader\", false);\n          Boolean isPreferred = replica.getBool(\"property.preferredleader\", false);\n          if (isLeader != isPreferred) {\n            lastFailMsg = \"Replica should NOT have preferredLeader != leader. Preferred: \" + isPreferred.toString() +\n                \" leader is \" + isLeader.toString();\n          }\n          if (foundLeader && isLeader) {\n            lastFailMsg = \"There should only be a single leader in _any_ shard! Replica \" + replica.getName() +\n                \" is the second leader in slice \" + slice.getName();\n          }\n          if (foundPreferred && isPreferred) {\n            lastFailMsg = \"There should only be a single preferredLeader in _any_ shard! Replica \" + replica.getName() +\n                \" is the second preferredLeader in slice \" + slice.getName();\n          }\n          foundLeader = foundLeader ? foundLeader : isLeader;\n          foundPreferred = foundPreferred ? foundPreferred : isPreferred;\n        }\n      }\n      if (lastFailMsg.length() == 0) return;\n      Thread.sleep(100);\n    }\n    fail(lastFailMsg);\n  }\n\n","sourceOld":"  private void verifyLeaderAssignment(CloudSolrClient client, String collectionName)\n      throws InterruptedException, KeeperException {\n    String lastFailMsg = \"\";\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      lastFailMsg = \"\";\n      ClusterState clusterState = client.getZkStateReader().getClusterState();\n      for (Slice slice : clusterState.getSlices(collectionName)) {\n        Boolean foundLeader = false;\n        Boolean foundPreferred = false;\n        for (Replica replica : slice.getReplicas()) {\n          Boolean isLeader = replica.getBool(\"leader\", false);\n          Boolean isPreferred = replica.getBool(\"property.preferredleader\", false);\n          if (isLeader != isPreferred) {\n            lastFailMsg = \"Replica should NOT have preferredLeader != leader. Preferred: \" + isPreferred.toString() +\n                \" leader is \" + isLeader.toString();\n          }\n          if (foundLeader && isLeader) {\n            lastFailMsg = \"There should only be a single leader in _any_ shard! Replica \" + replica.getName() +\n                \" is the second leader in slice \" + slice.getName();\n          }\n          if (foundPreferred && isPreferred) {\n            lastFailMsg = \"There should only be a single preferredLeader in _any_ shard! Replica \" + replica.getName() +\n                \" is the second preferredLeader in slice \" + slice.getName();\n          }\n          foundLeader = foundLeader ? foundLeader : isLeader;\n          foundPreferred = foundPreferred ? foundPreferred : isPreferred;\n        }\n      }\n      if (lastFailMsg.length() == 0) return;\n      Thread.sleep(100);\n    }\n    fail(lastFailMsg);\n  }\n\n","bugFix":["bafca15d8e408346a67f4282ad1143b88023893b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#verifyLeaderAssignment(CloudSolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#verifyLeaderAssignment(CloudSolrClient,String).mjava","sourceNew":"  private void verifyLeaderAssignment(CloudSolrClient client, String collectionName)\n      throws InterruptedException, KeeperException {\n    String lastFailMsg = \"\";\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      lastFailMsg = \"\";\n      ClusterState clusterState = client.getZkStateReader().getClusterState();\n      for (Slice slice : clusterState.getCollection(collectionName).getSlices()) {\n        Boolean foundLeader = false;\n        Boolean foundPreferred = false;\n        for (Replica replica : slice.getReplicas()) {\n          Boolean isLeader = replica.getBool(\"leader\", false);\n          Boolean isPreferred = replica.getBool(\"property.preferredleader\", false);\n          if (isLeader != isPreferred) {\n            lastFailMsg = \"Replica should NOT have preferredLeader != leader. Preferred: \" + isPreferred.toString() +\n                \" leader is \" + isLeader.toString();\n          }\n          if (foundLeader && isLeader) {\n            lastFailMsg = \"There should only be a single leader in _any_ shard! Replica \" + replica.getName() +\n                \" is the second leader in slice \" + slice.getName();\n          }\n          if (foundPreferred && isPreferred) {\n            lastFailMsg = \"There should only be a single preferredLeader in _any_ shard! Replica \" + replica.getName() +\n                \" is the second preferredLeader in slice \" + slice.getName();\n          }\n          foundLeader = foundLeader ? foundLeader : isLeader;\n          foundPreferred = foundPreferred ? foundPreferred : isPreferred;\n        }\n      }\n      if (lastFailMsg.length() == 0) return;\n      Thread.sleep(100);\n    }\n    fail(lastFailMsg);\n  }\n\n","sourceOld":"  private void verifyLeaderAssignment(CloudSolrClient client, String collectionName)\n      throws InterruptedException, KeeperException {\n    String lastFailMsg = \"\";\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      lastFailMsg = \"\";\n      ClusterState clusterState = client.getZkStateReader().getClusterState();\n      for (Slice slice : clusterState.getSlices(collectionName)) {\n        Boolean foundLeader = false;\n        Boolean foundPreferred = false;\n        for (Replica replica : slice.getReplicas()) {\n          Boolean isLeader = replica.getBool(\"leader\", false);\n          Boolean isPreferred = replica.getBool(\"property.preferredleader\", false);\n          if (isLeader != isPreferred) {\n            lastFailMsg = \"Replica should NOT have preferredLeader != leader. Preferred: \" + isPreferred.toString() +\n                \" leader is \" + isLeader.toString();\n          }\n          if (foundLeader && isLeader) {\n            lastFailMsg = \"There should only be a single leader in _any_ shard! Replica \" + replica.getName() +\n                \" is the second leader in slice \" + slice.getName();\n          }\n          if (foundPreferred && isPreferred) {\n            lastFailMsg = \"There should only be a single preferredLeader in _any_ shard! Replica \" + replica.getName() +\n                \" is the second preferredLeader in slice \" + slice.getName();\n          }\n          foundLeader = foundLeader ? foundLeader : isLeader;\n          foundPreferred = foundPreferred ? foundPreferred : isPreferred;\n        }\n      }\n      if (lastFailMsg.length() == 0) return;\n      Thread.sleep(100);\n    }\n    fail(lastFailMsg);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestReplicaProperties#verifyLeaderAssignment(CloudSolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#verifyLeaderAssignment(CloudSolrClient,String).mjava","sourceNew":"  private void verifyLeaderAssignment(CloudSolrClient client, String collectionName)\n      throws InterruptedException, KeeperException {\n    String lastFailMsg = \"\";\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      lastFailMsg = \"\";\n      ClusterState clusterState = client.getZkStateReader().getClusterState();\n      for (Slice slice : clusterState.getCollection(collectionName).getSlices()) {\n        Boolean foundLeader = false;\n        Boolean foundPreferred = false;\n        for (Replica replica : slice.getReplicas()) {\n          Boolean isLeader = replica.getBool(\"leader\", false);\n          Boolean isPreferred = replica.getBool(\"property.preferredleader\", false);\n          if (isLeader != isPreferred) {\n            lastFailMsg = \"Replica should NOT have preferredLeader != leader. Preferred: \" + isPreferred.toString() +\n                \" leader is \" + isLeader.toString();\n          }\n          if (foundLeader && isLeader) {\n            lastFailMsg = \"There should only be a single leader in _any_ shard! Replica \" + replica.getName() +\n                \" is the second leader in slice \" + slice.getName();\n          }\n          if (foundPreferred && isPreferred) {\n            lastFailMsg = \"There should only be a single preferredLeader in _any_ shard! Replica \" + replica.getName() +\n                \" is the second preferredLeader in slice \" + slice.getName();\n          }\n          foundLeader = foundLeader ? foundLeader : isLeader;\n          foundPreferred = foundPreferred ? foundPreferred : isPreferred;\n        }\n      }\n      if (lastFailMsg.length() == 0) return;\n      Thread.sleep(100);\n    }\n    fail(lastFailMsg);\n  }\n\n","sourceOld":"  private void verifyLeaderAssignment(CloudSolrClient client, String collectionName)\n      throws InterruptedException, KeeperException {\n    String lastFailMsg = \"\";\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      lastFailMsg = \"\";\n      ClusterState clusterState = client.getZkStateReader().getClusterState();\n      for (Slice slice : clusterState.getCollection(collectionName).getSlices()) {\n        Boolean foundLeader = false;\n        Boolean foundPreferred = false;\n        for (Replica replica : slice.getReplicas()) {\n          Boolean isLeader = replica.getBool(\"leader\", false);\n          Boolean isPreferred = replica.getBool(\"property.preferredleader\", false);\n          if (isLeader != isPreferred) {\n            lastFailMsg = \"Replica should NOT have preferredLeader != leader. Preferred: \" + isPreferred.toString() +\n                \" leader is \" + isLeader.toString();\n          }\n          if (foundLeader && isLeader) {\n            lastFailMsg = \"There should only be a single leader in _any_ shard! Replica \" + replica.getName() +\n                \" is the second leader in slice \" + slice.getName();\n          }\n          if (foundPreferred && isPreferred) {\n            lastFailMsg = \"There should only be a single preferredLeader in _any_ shard! Replica \" + replica.getName() +\n                \" is the second preferredLeader in slice \" + slice.getName();\n          }\n          foundLeader = foundLeader ? foundLeader : isLeader;\n          foundPreferred = foundPreferred ? foundPreferred : isPreferred;\n        }\n      }\n      if (lastFailMsg.length() == 0) return;\n      Thread.sleep(100);\n    }\n    fail(lastFailMsg);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestReplicaProperties#verifyLeaderAssignment(CloudSolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#verifyLeaderAssignment(CloudSolrClient,String).mjava","sourceNew":"  private void verifyLeaderAssignment(CloudSolrClient client, String collectionName)\n      throws InterruptedException, KeeperException {\n    String lastFailMsg = \"\";\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      lastFailMsg = \"\";\n      ClusterState clusterState = client.getZkStateReader().getClusterState();\n      for (Slice slice : clusterState.getCollection(collectionName).getSlices()) {\n        Boolean foundLeader = false;\n        Boolean foundPreferred = false;\n        for (Replica replica : slice.getReplicas()) {\n          Boolean isLeader = replica.getBool(\"leader\", false);\n          Boolean isPreferred = replica.getBool(\"property.preferredleader\", false);\n          if (isLeader != isPreferred) {\n            lastFailMsg = \"Replica should NOT have preferredLeader != leader. Preferred: \" + isPreferred.toString() +\n                \" leader is \" + isLeader.toString();\n          }\n          if (foundLeader && isLeader) {\n            lastFailMsg = \"There should only be a single leader in _any_ shard! Replica \" + replica.getName() +\n                \" is the second leader in slice \" + slice.getName();\n          }\n          if (foundPreferred && isPreferred) {\n            lastFailMsg = \"There should only be a single preferredLeader in _any_ shard! Replica \" + replica.getName() +\n                \" is the second preferredLeader in slice \" + slice.getName();\n          }\n          foundLeader = foundLeader ? foundLeader : isLeader;\n          foundPreferred = foundPreferred ? foundPreferred : isPreferred;\n        }\n      }\n      if (lastFailMsg.length() == 0) return;\n      Thread.sleep(100);\n    }\n    fail(lastFailMsg);\n  }\n\n","sourceOld":"  private void verifyLeaderAssignment(CloudSolrClient client, String collectionName)\n      throws InterruptedException, KeeperException {\n    String lastFailMsg = \"\";\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      lastFailMsg = \"\";\n      ClusterState clusterState = client.getZkStateReader().getClusterState();\n      for (Slice slice : clusterState.getCollection(collectionName).getSlices()) {\n        Boolean foundLeader = false;\n        Boolean foundPreferred = false;\n        for (Replica replica : slice.getReplicas()) {\n          Boolean isLeader = replica.getBool(\"leader\", false);\n          Boolean isPreferred = replica.getBool(\"property.preferredleader\", false);\n          if (isLeader != isPreferred) {\n            lastFailMsg = \"Replica should NOT have preferredLeader != leader. Preferred: \" + isPreferred.toString() +\n                \" leader is \" + isLeader.toString();\n          }\n          if (foundLeader && isLeader) {\n            lastFailMsg = \"There should only be a single leader in _any_ shard! Replica \" + replica.getName() +\n                \" is the second leader in slice \" + slice.getName();\n          }\n          if (foundPreferred && isPreferred) {\n            lastFailMsg = \"There should only be a single preferredLeader in _any_ shard! Replica \" + replica.getName() +\n                \" is the second preferredLeader in slice \" + slice.getName();\n          }\n          foundLeader = foundLeader ? foundLeader : isLeader;\n          foundPreferred = foundPreferred ? foundPreferred : isPreferred;\n        }\n      }\n      if (lastFailMsg.length() == 0) return;\n      Thread.sleep(100);\n    }\n    fail(lastFailMsg);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["344b0840364d990b29b97467bfcc766ff8325d11","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","344b0840364d990b29b97467bfcc766ff8325d11"],"344b0840364d990b29b97467bfcc766ff8325d11":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["344b0840364d990b29b97467bfcc766ff8325d11"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"344b0840364d990b29b97467bfcc766ff8325d11":["b94236357aaa22b76c10629851fe4e376e0cea82","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"bafca15d8e408346a67f4282ad1143b88023893b":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","344b0840364d990b29b97467bfcc766ff8325d11"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}