{"path":"lucene/core/src/java/org/apache/lucene/util/SloppyMath#asin(double).mjava","commits":[{"id":"7d3e011ea56c513db42a835815963831340a78ea","date":1381092452,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SloppyMath#asin(double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the arc sine of a value.\n   * <p>\n   * The returned angle is in the range <i>-pi</i>/2 through <i>pi</i>/2. \n   * Error is around 1E-7.\n   * <p>\n   * Special cases:\n   * <ul>\n   *  <li>If the argument is {@code NaN} or its absolute value is greater than 1, then the result is {@code NaN}.\n   * </ul>\n   * @param a the value whose arc sine is to be returned.\n   * @return arc sine of the argument\n   * @see Math#asin(double)\n   */\n  // because asin(-x) = -asin(x), asin(x) only needs to be computed on [0,1].\n  // ---> we only have to compute asin(x) on [0,1].\n  // For values not close to +-1, we use look-up tables;\n  // for values near +-1, we use code derived from fdlibm.\n  public static double asin(double a) { \n    boolean negateResult;\n    if (a < 0.0) {\n      a = -a;\n      negateResult = true;\n    } else {\n      negateResult = false;\n    }\n    if (a <= ASIN_MAX_VALUE_FOR_TABS) {\n      int index = (int)(a * ASIN_INDEXER + 0.5);\n      double delta = a - index * ASIN_DELTA;\n      double result = asinTab[index] + delta * (asinDer1DivF1Tab[index] + delta * (asinDer2DivF2Tab[index] + delta * (asinDer3DivF3Tab[index] + delta * asinDer4DivF4Tab[index])));\n      return negateResult ? -result : result;\n    } else { // value > ASIN_MAX_VALUE_FOR_TABS, or value is NaN\n      // This part is derived from fdlibm.\n      if (a < 1.0) {\n        double t = (1.0 - a)*0.5;\n        double p = t*(ASIN_PS0+t*(ASIN_PS1+t*(ASIN_PS2+t*(ASIN_PS3+t*(ASIN_PS4+t*ASIN_PS5)))));\n        double q = 1.0+t*(ASIN_QS1+t*(ASIN_QS2+t*(ASIN_QS3+t*ASIN_QS4)));\n        double s = Math.sqrt(t);\n        double z = s+s*(p/q);\n        double result = ASIN_PIO2_HI-((z+z)-ASIN_PIO2_LO);\n        return negateResult ? -result : result;\n      } else { // value >= 1.0, or value is NaN\n        if (a == 1.0) {\n          return negateResult ? -Math.PI/2 : Math.PI/2;\n        } else {\n          return Double.NaN;\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7d3e011ea56c513db42a835815963831340a78ea":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7d3e011ea56c513db42a835815963831340a78ea"]},"commit2Childs":{"7d3e011ea56c513db42a835815963831340a78ea":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7d3e011ea56c513db42a835815963831340a78ea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}