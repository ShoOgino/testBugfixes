{"path":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/Lucene50RWSegmentInfoFormat#write(Directory,SegmentInfo,IOContext).mjava","commits":[{"id":"fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8","date":1462567286,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/Lucene50RWSegmentInfoFormat#write(Directory,SegmentInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoFormat#write(Directory,SegmentInfo,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory dir, SegmentInfo si, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    // nocommit indexSort\n    if (si.getIndexSort() != null) {\n      throw new IllegalArgumentException(\"teach me to write indexSort\");\n    }\n\n    try (IndexOutput output = dir.createOutput(fileName, ioContext)) {\n      // Only add the file once we've successfully created it, else IFD assert can trip:\n      si.addFile(fileName);\n      CodecUtil.writeIndexHeader(output, \n                                   Lucene50SegmentInfoFormat.CODEC_NAME, \n                                   Lucene50SegmentInfoFormat.VERSION_CURRENT,\n                                   si.getId(),\n                                   \"\");\n      Version version = si.getVersion();\n      if (version.major < 5) {\n        throw new IllegalArgumentException(\"invalid major version: should be >= 5 but got: \" + version.major + \" segment=\" + si);\n      }\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeInt(version.major);\n      output.writeInt(version.minor);\n      output.writeInt(version.bugfix);\n      assert version.prerelease == 0;\n      output.writeInt(si.maxDoc());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeMapOfStrings(si.getDiagnostics());\n      Set<String> files = si.files();\n      for (String file : files) {\n        if (!IndexFileNames.parseSegmentName(file).equals(si.name)) {\n          throw new IllegalArgumentException(\"invalid files: expected segment=\" + si.name + \", got=\" + files);\n        }\n      }\n      output.writeSetOfStrings(files);\n      output.writeMapOfStrings(si.getAttributes());\n      \n      CodecUtil.writeFooter(output);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory dir, SegmentInfo si, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    // nocommit indexSort\n    if (si.getIndexSort() != null) {\n      throw new IllegalArgumentException(\"teach me to write indexSort\");\n    }\n\n    try (IndexOutput output = dir.createOutput(fileName, ioContext)) {\n      // Only add the file once we've successfully created it, else IFD assert can trip:\n      si.addFile(fileName);\n      CodecUtil.writeIndexHeader(output, \n                                   Lucene50SegmentInfoFormat.CODEC_NAME, \n                                   Lucene50SegmentInfoFormat.VERSION_CURRENT,\n                                   si.getId(),\n                                   \"\");\n      Version version = si.getVersion();\n      if (version.major < 5) {\n        throw new IllegalArgumentException(\"invalid major version: should be >= 5 but got: \" + version.major + \" segment=\" + si);\n      }\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeInt(version.major);\n      output.writeInt(version.minor);\n      output.writeInt(version.bugfix);\n      assert version.prerelease == 0;\n      output.writeInt(si.maxDoc());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeMapOfStrings(si.getDiagnostics());\n      Set<String> files = si.files();\n      for (String file : files) {\n        if (!IndexFileNames.parseSegmentName(file).equals(si.name)) {\n          throw new IllegalArgumentException(\"invalid files: expected segment=\" + si.name + \", got=\" + files);\n        }\n      }\n      output.writeSetOfStrings(files);\n      output.writeMapOfStrings(si.getAttributes());\n      \n      CodecUtil.writeFooter(output);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22aab7a3b640b0dba26cc5e9416bc7af93614b46","date":1462575761,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/Lucene50RWSegmentInfoFormat#write(Directory,SegmentInfo,IOContext).mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/Lucene50RWSegmentInfoFormat#write(Directory,SegmentInfo,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory dir, SegmentInfo si, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n\n    assert si.getIndexSort() == null;\n\n    try (IndexOutput output = dir.createOutput(fileName, ioContext)) {\n      // Only add the file once we've successfully created it, else IFD assert can trip:\n      si.addFile(fileName);\n      CodecUtil.writeIndexHeader(output, \n                                   Lucene50SegmentInfoFormat.CODEC_NAME, \n                                   Lucene50SegmentInfoFormat.VERSION_CURRENT,\n                                   si.getId(),\n                                   \"\");\n      Version version = si.getVersion();\n      if (version.major < 5) {\n        throw new IllegalArgumentException(\"invalid major version: should be >= 5 but got: \" + version.major + \" segment=\" + si);\n      }\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeInt(version.major);\n      output.writeInt(version.minor);\n      output.writeInt(version.bugfix);\n      assert version.prerelease == 0;\n      output.writeInt(si.maxDoc());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeMapOfStrings(si.getDiagnostics());\n      Set<String> files = si.files();\n      for (String file : files) {\n        if (!IndexFileNames.parseSegmentName(file).equals(si.name)) {\n          throw new IllegalArgumentException(\"invalid files: expected segment=\" + si.name + \", got=\" + files);\n        }\n      }\n      output.writeSetOfStrings(files);\n      output.writeMapOfStrings(si.getAttributes());\n      \n      CodecUtil.writeFooter(output);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory dir, SegmentInfo si, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    // nocommit indexSort\n    if (si.getIndexSort() != null) {\n      throw new IllegalArgumentException(\"teach me to write indexSort\");\n    }\n\n    try (IndexOutput output = dir.createOutput(fileName, ioContext)) {\n      // Only add the file once we've successfully created it, else IFD assert can trip:\n      si.addFile(fileName);\n      CodecUtil.writeIndexHeader(output, \n                                   Lucene50SegmentInfoFormat.CODEC_NAME, \n                                   Lucene50SegmentInfoFormat.VERSION_CURRENT,\n                                   si.getId(),\n                                   \"\");\n      Version version = si.getVersion();\n      if (version.major < 5) {\n        throw new IllegalArgumentException(\"invalid major version: should be >= 5 but got: \" + version.major + \" segment=\" + si);\n      }\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeInt(version.major);\n      output.writeInt(version.minor);\n      output.writeInt(version.bugfix);\n      assert version.prerelease == 0;\n      output.writeInt(si.maxDoc());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeMapOfStrings(si.getDiagnostics());\n      Set<String> files = si.files();\n      for (String file : files) {\n        if (!IndexFileNames.parseSegmentName(file).equals(si.name)) {\n          throw new IllegalArgumentException(\"invalid files: expected segment=\" + si.name + \", got=\" + files);\n        }\n      }\n      output.writeSetOfStrings(files);\n      output.writeMapOfStrings(si.getAttributes());\n      \n      CodecUtil.writeFooter(output);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/Lucene50RWSegmentInfoFormat#write(Directory,SegmentInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoFormat#write(Directory,SegmentInfo,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory dir, SegmentInfo si, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n\n    assert si.getIndexSort() == null;\n\n    try (IndexOutput output = dir.createOutput(fileName, ioContext)) {\n      // Only add the file once we've successfully created it, else IFD assert can trip:\n      si.addFile(fileName);\n      CodecUtil.writeIndexHeader(output, \n                                   Lucene50SegmentInfoFormat.CODEC_NAME, \n                                   Lucene50SegmentInfoFormat.VERSION_CURRENT,\n                                   si.getId(),\n                                   \"\");\n      Version version = si.getVersion();\n      if (version.major < 5) {\n        throw new IllegalArgumentException(\"invalid major version: should be >= 5 but got: \" + version.major + \" segment=\" + si);\n      }\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeInt(version.major);\n      output.writeInt(version.minor);\n      output.writeInt(version.bugfix);\n      assert version.prerelease == 0;\n      output.writeInt(si.maxDoc());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeMapOfStrings(si.getDiagnostics());\n      Set<String> files = si.files();\n      for (String file : files) {\n        if (!IndexFileNames.parseSegmentName(file).equals(si.name)) {\n          throw new IllegalArgumentException(\"invalid files: expected segment=\" + si.name + \", got=\" + files);\n        }\n      }\n      output.writeSetOfStrings(files);\n      output.writeMapOfStrings(si.getAttributes());\n      \n      CodecUtil.writeFooter(output);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory dir, SegmentInfo si, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n\n    try (IndexOutput output = dir.createOutput(fileName, ioContext)) {\n      // Only add the file once we've successfully created it, else IFD assert can trip:\n      si.addFile(fileName);\n      CodecUtil.writeIndexHeader(output, \n                                   Lucene50SegmentInfoFormat.CODEC_NAME, \n                                   Lucene50SegmentInfoFormat.VERSION_CURRENT,\n                                   si.getId(),\n                                   \"\");\n      Version version = si.getVersion();\n      if (version.major < 5) {\n        throw new IllegalArgumentException(\"invalid major version: should be >= 5 but got: \" + version.major + \" segment=\" + si);\n      }\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeInt(version.major);\n      output.writeInt(version.minor);\n      output.writeInt(version.bugfix);\n      assert version.prerelease == 0;\n      output.writeInt(si.maxDoc());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeMapOfStrings(si.getDiagnostics());\n      Set<String> files = si.files();\n      for (String file : files) {\n        if (!IndexFileNames.parseSegmentName(file).equals(si.name)) {\n          throw new IllegalArgumentException(\"invalid files: expected segment=\" + si.name + \", got=\" + files);\n        }\n      }\n      output.writeSetOfStrings(files);\n      output.writeMapOfStrings(si.getAttributes());\n      CodecUtil.writeFooter(output);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/Lucene50RWSegmentInfoFormat#write(Directory,SegmentInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoFormat#write(Directory,SegmentInfo,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory dir, SegmentInfo si, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n\n    assert si.getIndexSort() == null;\n\n    try (IndexOutput output = dir.createOutput(fileName, ioContext)) {\n      // Only add the file once we've successfully created it, else IFD assert can trip:\n      si.addFile(fileName);\n      CodecUtil.writeIndexHeader(output, \n                                   Lucene50SegmentInfoFormat.CODEC_NAME, \n                                   Lucene50SegmentInfoFormat.VERSION_CURRENT,\n                                   si.getId(),\n                                   \"\");\n      Version version = si.getVersion();\n      if (version.major < 5) {\n        throw new IllegalArgumentException(\"invalid major version: should be >= 5 but got: \" + version.major + \" segment=\" + si);\n      }\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeInt(version.major);\n      output.writeInt(version.minor);\n      output.writeInt(version.bugfix);\n      assert version.prerelease == 0;\n      output.writeInt(si.maxDoc());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeMapOfStrings(si.getDiagnostics());\n      Set<String> files = si.files();\n      for (String file : files) {\n        if (!IndexFileNames.parseSegmentName(file).equals(si.name)) {\n          throw new IllegalArgumentException(\"invalid files: expected segment=\" + si.name + \", got=\" + files);\n        }\n      }\n      output.writeSetOfStrings(files);\n      output.writeMapOfStrings(si.getAttributes());\n      \n      CodecUtil.writeFooter(output);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory dir, SegmentInfo si, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n\n    try (IndexOutput output = dir.createOutput(fileName, ioContext)) {\n      // Only add the file once we've successfully created it, else IFD assert can trip:\n      si.addFile(fileName);\n      CodecUtil.writeIndexHeader(output, \n                                   Lucene50SegmentInfoFormat.CODEC_NAME, \n                                   Lucene50SegmentInfoFormat.VERSION_CURRENT,\n                                   si.getId(),\n                                   \"\");\n      Version version = si.getVersion();\n      if (version.major < 5) {\n        throw new IllegalArgumentException(\"invalid major version: should be >= 5 but got: \" + version.major + \" segment=\" + si);\n      }\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeInt(version.major);\n      output.writeInt(version.minor);\n      output.writeInt(version.bugfix);\n      assert version.prerelease == 0;\n      output.writeInt(si.maxDoc());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeMapOfStrings(si.getDiagnostics());\n      Set<String> files = si.files();\n      for (String file : files) {\n        if (!IndexFileNames.parseSegmentName(file).equals(si.name)) {\n          throw new IllegalArgumentException(\"invalid files: expected segment=\" + si.name + \", got=\" + files);\n        }\n      }\n      output.writeSetOfStrings(files);\n      output.writeMapOfStrings(si.getAttributes());\n      CodecUtil.writeFooter(output);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/Lucene50RWSegmentInfoFormat#write(Directory,SegmentInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoFormat#write(Directory,SegmentInfo,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory dir, SegmentInfo si, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n\n    assert si.getIndexSort() == null;\n\n    try (IndexOutput output = dir.createOutput(fileName, ioContext)) {\n      // Only add the file once we've successfully created it, else IFD assert can trip:\n      si.addFile(fileName);\n      CodecUtil.writeIndexHeader(output, \n                                   Lucene50SegmentInfoFormat.CODEC_NAME, \n                                   Lucene50SegmentInfoFormat.VERSION_CURRENT,\n                                   si.getId(),\n                                   \"\");\n      Version version = si.getVersion();\n      if (version.major < 5) {\n        throw new IllegalArgumentException(\"invalid major version: should be >= 5 but got: \" + version.major + \" segment=\" + si);\n      }\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeInt(version.major);\n      output.writeInt(version.minor);\n      output.writeInt(version.bugfix);\n      assert version.prerelease == 0;\n      output.writeInt(si.maxDoc());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeMapOfStrings(si.getDiagnostics());\n      Set<String> files = si.files();\n      for (String file : files) {\n        if (!IndexFileNames.parseSegmentName(file).equals(si.name)) {\n          throw new IllegalArgumentException(\"invalid files: expected segment=\" + si.name + \", got=\" + files);\n        }\n      }\n      output.writeSetOfStrings(files);\n      output.writeMapOfStrings(si.getAttributes());\n      \n      CodecUtil.writeFooter(output);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory dir, SegmentInfo si, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n\n    try (IndexOutput output = dir.createOutput(fileName, ioContext)) {\n      // Only add the file once we've successfully created it, else IFD assert can trip:\n      si.addFile(fileName);\n      CodecUtil.writeIndexHeader(output, \n                                   Lucene50SegmentInfoFormat.CODEC_NAME, \n                                   Lucene50SegmentInfoFormat.VERSION_CURRENT,\n                                   si.getId(),\n                                   \"\");\n      Version version = si.getVersion();\n      if (version.major < 5) {\n        throw new IllegalArgumentException(\"invalid major version: should be >= 5 but got: \" + version.major + \" segment=\" + si);\n      }\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeInt(version.major);\n      output.writeInt(version.minor);\n      output.writeInt(version.bugfix);\n      assert version.prerelease == 0;\n      output.writeInt(si.maxDoc());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeMapOfStrings(si.getDiagnostics());\n      Set<String> files = si.files();\n      for (String file : files) {\n        if (!IndexFileNames.parseSegmentName(file).equals(si.name)) {\n          throw new IllegalArgumentException(\"invalid files: expected segment=\" + si.name + \", got=\" + files);\n        }\n      }\n      output.writeSetOfStrings(files);\n      output.writeMapOfStrings(si.getAttributes());\n      CodecUtil.writeFooter(output);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/Lucene50RWSegmentInfoFormat#write(Directory,SegmentInfo,IOContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void write(Directory dir, SegmentInfo si, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n\n    assert si.getIndexSort() == null;\n\n    try (IndexOutput output = dir.createOutput(fileName, ioContext)) {\n      // Only add the file once we've successfully created it, else IFD assert can trip:\n      si.addFile(fileName);\n      CodecUtil.writeIndexHeader(output, \n                                   Lucene50SegmentInfoFormat.CODEC_NAME, \n                                   Lucene50SegmentInfoFormat.VERSION_CURRENT,\n                                   si.getId(),\n                                   \"\");\n      Version version = si.getVersion();\n      if (version.major < 5) {\n        throw new IllegalArgumentException(\"invalid major version: should be >= 5 but got: \" + version.major + \" segment=\" + si);\n      }\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeInt(version.major);\n      output.writeInt(version.minor);\n      output.writeInt(version.bugfix);\n      assert version.prerelease == 0;\n      output.writeInt(si.maxDoc());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeMapOfStrings(si.getDiagnostics());\n      Set<String> files = si.files();\n      for (String file : files) {\n        if (!IndexFileNames.parseSegmentName(file).equals(si.name)) {\n          throw new IllegalArgumentException(\"invalid files: expected segment=\" + si.name + \", got=\" + files);\n        }\n      }\n      output.writeSetOfStrings(files);\n      output.writeMapOfStrings(si.getAttributes());\n      \n      CodecUtil.writeFooter(output);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85b9829d27224bda451a373a47f081afb1c664b8","date":1498846708,"type":4,"author":"Anshum Gupta","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/Lucene50RWSegmentInfoFormat#write(Directory,SegmentInfo,IOContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void write(Directory dir, SegmentInfo si, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n\n    assert si.getIndexSort() == null;\n\n    try (IndexOutput output = dir.createOutput(fileName, ioContext)) {\n      // Only add the file once we've successfully created it, else IFD assert can trip:\n      si.addFile(fileName);\n      CodecUtil.writeIndexHeader(output, \n                                   Lucene50SegmentInfoFormat.CODEC_NAME, \n                                   Lucene50SegmentInfoFormat.VERSION_CURRENT,\n                                   si.getId(),\n                                   \"\");\n      Version version = si.getVersion();\n      if (version.major < 5) {\n        throw new IllegalArgumentException(\"invalid major version: should be >= 5 but got: \" + version.major + \" segment=\" + si);\n      }\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeInt(version.major);\n      output.writeInt(version.minor);\n      output.writeInt(version.bugfix);\n      assert version.prerelease == 0;\n      output.writeInt(si.maxDoc());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeMapOfStrings(si.getDiagnostics());\n      Set<String> files = si.files();\n      for (String file : files) {\n        if (!IndexFileNames.parseSegmentName(file).equals(si.name)) {\n          throw new IllegalArgumentException(\"invalid files: expected segment=\" + si.name + \", got=\" + files);\n        }\n      }\n      output.writeSetOfStrings(files);\n      output.writeMapOfStrings(si.getAttributes());\n      \n      CodecUtil.writeFooter(output);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc018b79379c67835b40b1259cd3dc931df60944","date":1499109112,"type":4,"author":"Anshum Gupta","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/Lucene50RWSegmentInfoFormat#write(Directory,SegmentInfo,IOContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void write(Directory dir, SegmentInfo si, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n\n    assert si.getIndexSort() == null;\n\n    try (IndexOutput output = dir.createOutput(fileName, ioContext)) {\n      // Only add the file once we've successfully created it, else IFD assert can trip:\n      si.addFile(fileName);\n      CodecUtil.writeIndexHeader(output, \n                                   Lucene50SegmentInfoFormat.CODEC_NAME, \n                                   Lucene50SegmentInfoFormat.VERSION_CURRENT,\n                                   si.getId(),\n                                   \"\");\n      Version version = si.getVersion();\n      if (version.major < 5) {\n        throw new IllegalArgumentException(\"invalid major version: should be >= 5 but got: \" + version.major + \" segment=\" + si);\n      }\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeInt(version.major);\n      output.writeInt(version.minor);\n      output.writeInt(version.bugfix);\n      assert version.prerelease == 0;\n      output.writeInt(si.maxDoc());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeMapOfStrings(si.getDiagnostics());\n      Set<String> files = si.files();\n      for (String file : files) {\n        if (!IndexFileNames.parseSegmentName(file).equals(si.name)) {\n          throw new IllegalArgumentException(\"invalid files: expected segment=\" + si.name + \", got=\" + files);\n        }\n      }\n      output.writeSetOfStrings(files);\n      output.writeMapOfStrings(si.getAttributes());\n      \n      CodecUtil.writeFooter(output);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/Lucene50RWSegmentInfoFormat#write(Directory,SegmentInfo,IOContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void write(Directory dir, SegmentInfo si, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n\n    assert si.getIndexSort() == null;\n\n    try (IndexOutput output = dir.createOutput(fileName, ioContext)) {\n      // Only add the file once we've successfully created it, else IFD assert can trip:\n      si.addFile(fileName);\n      CodecUtil.writeIndexHeader(output, \n                                   Lucene50SegmentInfoFormat.CODEC_NAME, \n                                   Lucene50SegmentInfoFormat.VERSION_CURRENT,\n                                   si.getId(),\n                                   \"\");\n      Version version = si.getVersion();\n      if (version.major < 5) {\n        throw new IllegalArgumentException(\"invalid major version: should be >= 5 but got: \" + version.major + \" segment=\" + si);\n      }\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeInt(version.major);\n      output.writeInt(version.minor);\n      output.writeInt(version.bugfix);\n      assert version.prerelease == 0;\n      output.writeInt(si.maxDoc());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeMapOfStrings(si.getDiagnostics());\n      Set<String> files = si.files();\n      for (String file : files) {\n        if (!IndexFileNames.parseSegmentName(file).equals(si.name)) {\n          throw new IllegalArgumentException(\"invalid files: expected segment=\" + si.name + \", got=\" + files);\n        }\n      }\n      output.writeSetOfStrings(files);\n      output.writeMapOfStrings(si.getAttributes());\n      \n      CodecUtil.writeFooter(output);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cc018b79379c67835b40b1259cd3dc931df60944":["d470c8182e92b264680e34081b75e70a9f2b3c89","85b9829d27224bda451a373a47f081afb1c664b8"],"30c8e5574b55d57947e989443dfde611646530ee":["d470c8182e92b264680e34081b75e70a9f2b3c89","cc018b79379c67835b40b1259cd3dc931df60944"],"0ad30c6a479e764150a3316e57263319775f1df2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3d33e731a93d4b57e662ff094f64f94a745422d4"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","22aab7a3b640b0dba26cc5e9416bc7af93614b46"],"85b9829d27224bda451a373a47f081afb1c664b8":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cc018b79379c67835b40b1259cd3dc931df60944"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0ad30c6a479e764150a3316e57263319775f1df2"],"22aab7a3b640b0dba26cc5e9416bc7af93614b46":["fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ad30c6a479e764150a3316e57263319775f1df2","3d33e731a93d4b57e662ff094f64f94a745422d4","fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cc018b79379c67835b40b1259cd3dc931df60944":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"30c8e5574b55d57947e989443dfde611646530ee":[],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"85b9829d27224bda451a373a47f081afb1c664b8":["cc018b79379c67835b40b1259cd3dc931df60944"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8":["22aab7a3b640b0dba26cc5e9416bc7af93614b46"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["cc018b79379c67835b40b1259cd3dc931df60944","30c8e5574b55d57947e989443dfde611646530ee","85b9829d27224bda451a373a47f081afb1c664b8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"22aab7a3b640b0dba26cc5e9416bc7af93614b46":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}