{"path":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testLazyField().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testLazyField().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testLazyField().mjava","sourceNew":"  @Test\n  public void testLazyField() throws IOException {\n    for(int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", new Integer(i).toString(), \n                   \"title\", \"keyword\",\n                   \"test_hlt\", mkstr(20000)));\n    }\n    assertU(commit());\n    SolrCore core = h.getCore();\n    \n    SolrQueryRequest req = req(\"q\", \"title:keyword\", \"fl\", \"id,title\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).docs;\n    DocIterator di = dl.iterator();    \n    org.apache.lucene.document.Document d = req.getSearcher().doc(di.nextDoc());\n    // ensure field is lazy\n    assertTrue( !( d.getFieldable(\"test_hlt\") instanceof Field ) );\n    assertTrue( d.getFieldable(\"title\") instanceof Field );\n    req.close();\n  } \n\n","sourceOld":"  @Test\n  public void testLazyField() throws IOException {\n    for(int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", new Integer(i).toString(), \n                   \"title\", \"keyword\",\n                   \"test_hlt\", mkstr(20000)));\n    }\n    assertU(commit());\n    SolrCore core = h.getCore();\n    \n    SolrQueryRequest req = req(\"q\", \"title:keyword\", \"fl\", \"id,title\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).docs;\n    DocIterator di = dl.iterator();    \n    org.apache.lucene.document.Document d = req.getSearcher().doc(di.nextDoc());\n    // ensure field is lazy\n    assertTrue( !( d.getFieldable(\"test_hlt\") instanceof Field ) );\n    assertTrue( d.getFieldable(\"title\") instanceof Field );\n    req.close();\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testLazyField().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testLazyField().mjava","sourceNew":"  @Test\n  public void testLazyField() throws IOException {\n    for(int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", new Integer(i).toString(), \n                   \"title\", \"keyword\",\n                   \"test_hlt\", mkstr(20000)));\n    }\n    assertU(commit());\n    SolrCore core = h.getCore();\n    \n    SolrQueryRequest req = req(\"q\", \"title:keyword\", \"fl\", \"id,title\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).docs;\n    DocIterator di = dl.iterator();    \n    org.apache.lucene.document.Document d = req.getSearcher().doc(di.nextDoc());\n    // ensure field is lazy\n    assertTrue( !( d.getFieldable(\"test_hlt\") instanceof Field ) );\n    assertTrue( d.getFieldable(\"title\") instanceof Field );\n    req.close();\n  } \n\n","sourceOld":"  @Test\n  public void testLazyField() throws IOException {\n    for(int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", new Integer(i).toString(), \n                   \"title\", \"keyword\",\n                   \"test_hlt\", mkstr(20000)));\n    }\n    assertU(commit());\n    SolrCore core = h.getCore();\n    \n    SolrQueryRequest req = req(\"q\", \"title:keyword\", \"fl\", \"id,title\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).docs;\n    DocIterator di = dl.iterator();    \n    org.apache.lucene.document.Document d = req.getSearcher().doc(di.nextDoc());\n    // ensure field is lazy\n    assertTrue( !( d.getFieldable(\"test_hlt\") instanceof Field ) );\n    assertTrue( d.getFieldable(\"title\") instanceof Field );\n    req.close();\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testLazyField().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testLazyField().mjava","sourceNew":"  @Test\n  public void testLazyField() throws IOException {\n    for(int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", new Integer(i).toString(), \n                   \"title\", \"keyword\",\n                   \"test_hlt\", mkstr(20000)));\n    }\n    assertU(commit());\n    SolrCore core = h.getCore();\n    \n    SolrQueryRequest req = req(\"q\", \"title:keyword\", \"fl\", \"id,title\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).docs;\n    DocIterator di = dl.iterator();    \n    org.apache.lucene.document.Document d = req.getSearcher().doc(di.nextDoc());\n    // ensure field is lazy\n    assertTrue( !( d.getFieldable(\"test_hlt\") instanceof Field ) );\n    assertTrue( d.getFieldable(\"title\") instanceof Field );\n    req.close();\n  } \n\n","sourceOld":"  @Test\n  public void testLazyField() throws IOException {\n    for(int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", new Integer(i).toString(), \n                   \"title\", \"keyword\",\n                   \"test_hlt\", mkstr(20000)));\n    }\n    assertU(commit());\n    SolrCore core = h.getCore();\n    \n    SolrQueryRequest req = req(\"q\", \"title:keyword\", \"fl\", \"id,title\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).docs;\n    DocIterator di = dl.iterator();    \n    org.apache.lucene.document.Document d = req.getSearcher().doc(di.nextDoc());\n    // ensure field is lazy\n    assertTrue( !( d.getFieldable(\"test_hlt\") instanceof Field ) );\n    assertTrue( d.getFieldable(\"title\") instanceof Field );\n    req.close();\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testLazyField().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testLazyField().mjava","sourceNew":"  @Test\n  public void testLazyField() throws IOException {\n    for(int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", new Integer(i).toString(), \n                   \"title\", \"keyword\",\n                   \"test_hlt\", mkstr(20000)));\n    }\n    assertU(commit());\n    SolrCore core = h.getCore();\n    \n    SolrQueryRequest req = req(\"q\", \"title:keyword\", \"fl\", \"id,title\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).docs;\n    DocIterator di = dl.iterator();    \n    Document d = req.getSearcher().doc(di.nextDoc());\n    // ensure field is lazy\n    assertTrue( ((Field) d.getField(\"test_hlt\")).getClass().getSimpleName().equals(\"LazyField\"));\n    assertFalse( ((Field) d.getField(\"title\")).getClass().getSimpleName().equals(\"LazyField\"));\n    req.close();\n  } \n\n","sourceOld":"  @Test\n  public void testLazyField() throws IOException {\n    for(int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", new Integer(i).toString(), \n                   \"title\", \"keyword\",\n                   \"test_hlt\", mkstr(20000)));\n    }\n    assertU(commit());\n    SolrCore core = h.getCore();\n    \n    SolrQueryRequest req = req(\"q\", \"title:keyword\", \"fl\", \"id,title\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).docs;\n    DocIterator di = dl.iterator();    \n    org.apache.lucene.document.Document d = req.getSearcher().doc(di.nextDoc());\n    // ensure field is lazy\n    assertTrue( !( d.getFieldable(\"test_hlt\") instanceof Field ) );\n    assertTrue( d.getFieldable(\"title\") instanceof Field );\n    req.close();\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testLazyField().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testLazyField().mjava","sourceNew":"  @Test\n  public void testLazyField() throws IOException {\n    for(int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", new Integer(i).toString(), \n                   \"title\", \"keyword\",\n                   \"test_hlt\", mkstr(20000)));\n    }\n    assertU(commit());\n    SolrCore core = h.getCore();\n    \n    SolrQueryRequest req = req(\"q\", \"title:keyword\", \"fl\", \"id,title\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).docs;\n    DocIterator di = dl.iterator();    \n    Document d = req.getSearcher().doc(di.nextDoc());\n    // ensure field is lazy\n    assertTrue( (d.getField(\"test_hlt\")).getClass().getSimpleName().equals(\"LazyField\"));\n    assertFalse( (d.getField(\"title\")).getClass().getSimpleName().equals(\"LazyField\"));\n    req.close();\n  } \n\n","sourceOld":"  @Test\n  public void testLazyField() throws IOException {\n    for(int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", new Integer(i).toString(), \n                   \"title\", \"keyword\",\n                   \"test_hlt\", mkstr(20000)));\n    }\n    assertU(commit());\n    SolrCore core = h.getCore();\n    \n    SolrQueryRequest req = req(\"q\", \"title:keyword\", \"fl\", \"id,title\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).docs;\n    DocIterator di = dl.iterator();    \n    Document d = req.getSearcher().doc(di.nextDoc());\n    // ensure field is lazy\n    assertTrue( ((Field) d.getField(\"test_hlt\")).getClass().getSimpleName().equals(\"LazyField\"));\n    assertFalse( ((Field) d.getField(\"title\")).getClass().getSimpleName().equals(\"LazyField\"));\n    req.close();\n  } \n\n","bugFix":null,"bugIntro":["39899cd24f88f2d580857d57be8aebc1f467f5c6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a7e4907084808af8fdb14b9809e6dceaccf6867b","date":1343473006,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testLazyField().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testLazyField().mjava","sourceNew":"  @Test\n  public void testLazyField() throws IOException {\n    for(int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", new Integer(i).toString(), \n                   \"title\", \"keyword\",\n                   \"test_hlt\", mkstr(20000)));\n    }\n    assertU(commit());\n    SolrCore core = h.getCore();\n    \n    SolrQueryRequest req = req(\"q\", \"title:keyword\", \"fl\", \"id,title\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).docs;\n    DocIterator di = dl.iterator();    \n    StoredDocument d = req.getSearcher().doc(di.nextDoc());\n    // ensure field is lazy\n    assertTrue( (d.getField(\"test_hlt\")).getClass().getSimpleName().equals(\"LazyField\"));\n    assertFalse( (d.getField(\"title\")).getClass().getSimpleName().equals(\"LazyField\"));\n    req.close();\n  } \n\n","sourceOld":"  @Test\n  public void testLazyField() throws IOException {\n    for(int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", new Integer(i).toString(), \n                   \"title\", \"keyword\",\n                   \"test_hlt\", mkstr(20000)));\n    }\n    assertU(commit());\n    SolrCore core = h.getCore();\n    \n    SolrQueryRequest req = req(\"q\", \"title:keyword\", \"fl\", \"id,title\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).docs;\n    DocIterator di = dl.iterator();    \n    Document d = req.getSearcher().doc(di.nextDoc());\n    // ensure field is lazy\n    assertTrue( (d.getField(\"test_hlt\")).getClass().getSimpleName().equals(\"LazyField\"));\n    assertFalse( (d.getField(\"title\")).getClass().getSimpleName().equals(\"LazyField\"));\n    req.close();\n  } \n\n","bugFix":null,"bugIntro":["39899cd24f88f2d580857d57be8aebc1f467f5c6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testLazyField().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testLazyField().mjava","sourceNew":"  @Test\n  public void testLazyField() throws IOException {\n    for(int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", new Integer(i).toString(), \n                   \"title\", \"keyword\",\n                   \"test_hlt\", mkstr(20000)));\n    }\n    assertU(commit());\n    SolrCore core = h.getCore();\n    \n    SolrQueryRequest req = req(\"q\", \"title:keyword\", \"fl\", \"id,title\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).docs;\n    DocIterator di = dl.iterator();    \n    StoredDocument d = req.getSearcher().doc(di.nextDoc());\n    // ensure field is lazy\n    assertTrue( (d.getField(\"test_hlt\")).getClass().getSimpleName().equals(\"LazyField\"));\n    assertFalse( (d.getField(\"title\")).getClass().getSimpleName().equals(\"LazyField\"));\n    req.close();\n  } \n\n","sourceOld":"  @Test\n  public void testLazyField() throws IOException {\n    for(int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", new Integer(i).toString(), \n                   \"title\", \"keyword\",\n                   \"test_hlt\", mkstr(20000)));\n    }\n    assertU(commit());\n    SolrCore core = h.getCore();\n    \n    SolrQueryRequest req = req(\"q\", \"title:keyword\", \"fl\", \"id,title\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).docs;\n    DocIterator di = dl.iterator();    \n    Document d = req.getSearcher().doc(di.nextDoc());\n    // ensure field is lazy\n    assertTrue( (d.getField(\"test_hlt\")).getClass().getSimpleName().equals(\"LazyField\"));\n    assertFalse( (d.getField(\"title\")).getClass().getSimpleName().equals(\"LazyField\"));\n    req.close();\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"39899cd24f88f2d580857d57be8aebc1f467f5c6","date":1363793635,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testLazyField().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testLazyField().mjava","sourceNew":"  @Test\n  public void testLazyField() throws IOException {\n    assertU(adoc(\"id\", \"7777\",\n                 \"title\", \"keyword\",\n                 \"test_hlt\", mkstr(10000),\n                 \"test_hlt\", mkstr(20000),\n                 \"test_hlt\", mkstr(30000),\n                 \"test_hlt\", mkstr(40000)));\n\n    assertU(commit());\n    SolrCore core = h.getCore();\n    \n    // initial request\n    SolrQueryRequest req = req(\"q\", \"id:7777\", \"fl\", \"id,title\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).docs;\n    DocIterator di = dl.iterator();    \n    StoredDocument d1 = req.getSearcher().doc(di.nextDoc());\n    StorableField[] values1 = null;\n\n    // ensure fl field is non lazy, and non-fl field is lazy\n    assertFalse( d1.getField(\"title\") instanceof LazyDocument.LazyField);\n    assertFalse( d1.getField(\"id\") instanceof LazyDocument.LazyField);\n    values1 = d1.getFields(\"test_hlt\");\n    assertEquals(4, values1.length);\n    for (int i = 0; i < values1.length; i++) {\n      assertTrue( values1[i] instanceof LazyDocument.LazyField );\n      LazyDocument.LazyField f = (LazyDocument.LazyField) values1[i];\n      assertFalse( f.hasBeenLoaded() );\n    }\n    req.close();\n\n    // followup request, different fl\n    req = req(\"q\", \"id:7777\", \"fl\", \"id,test_hlt\");\n    rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    dl = ((ResultContext) rsp.getValues().get(\"response\")).docs;\n    di = dl.iterator();    \n    StoredDocument d2 = req.getSearcher().doc(di.nextDoc());\n    // ensure same doc, same lazy field now\n    assertTrue(\"Doc was not cached\", d1 == d2);\n    StorableField[] values2 = d2.getFields(\"test_hlt\");\n    assertEquals(values1.length, values2.length);\n    for (int i = 0; i < values1.length; i++) {\n      assertSame(\"LazyField wasn't reused\", \n                 values1[i], values2[i]);\n      LazyDocument.LazyField f = (LazyDocument.LazyField) values1[i];\n      // still not a real boy, no response writer in play\n      assertFalse(f.hasBeenLoaded()); \n    }\n\n    assertNotNull(values2[0].stringValue()); // actuallize one value\n    for (int i = 0; i < values2.length; i++) {\n      // now all values for this field should be loaded & cached\n      LazyDocument.LazyField f = (LazyDocument.LazyField) values2[i];\n      assertTrue(f.hasBeenLoaded());\n    }\n\n    req.close();\n  } \n\n","sourceOld":"  @Test\n  public void testLazyField() throws IOException {\n    for(int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", new Integer(i).toString(), \n                   \"title\", \"keyword\",\n                   \"test_hlt\", mkstr(20000)));\n    }\n    assertU(commit());\n    SolrCore core = h.getCore();\n    \n    SolrQueryRequest req = req(\"q\", \"title:keyword\", \"fl\", \"id,title\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).docs;\n    DocIterator di = dl.iterator();    \n    StoredDocument d = req.getSearcher().doc(di.nextDoc());\n    // ensure field is lazy\n    assertTrue( (d.getField(\"test_hlt\")).getClass().getSimpleName().equals(\"LazyField\"));\n    assertFalse( (d.getField(\"title\")).getClass().getSimpleName().equals(\"LazyField\"));\n    req.close();\n  } \n\n","bugFix":["06584e6e98d592b34e1329b384182f368d2025e8","a7e4907084808af8fdb14b9809e6dceaccf6867b","7276fb3ba9d75a3d0099bfd9a0df6b5b067fb12a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc","date":1440797084,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testLazyField().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testLazyField().mjava","sourceNew":"  @Test\n  public void testLazyField() throws IOException {\n    assertU(adoc(\"id\", \"7777\",\n                 \"title\", \"keyword\",\n                 \"test_hlt\", mkstr(10000),\n                 \"test_hlt\", mkstr(20000),\n                 \"test_hlt\", mkstr(30000),\n                 \"test_hlt\", mkstr(40000)));\n\n    assertU(commit());\n    SolrCore core = h.getCore();\n    \n    // initial request\n    SolrQueryRequest req = req(\"q\", \"id:7777\", \"fl\", \"id,title\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).getDocList();\n    DocIterator di = dl.iterator();    \n    StoredDocument d1 = req.getSearcher().doc(di.nextDoc());\n    StorableField[] values1 = null;\n\n    // ensure fl field is non lazy, and non-fl field is lazy\n    assertFalse( d1.getField(\"title\") instanceof LazyDocument.LazyField);\n    assertFalse( d1.getField(\"id\") instanceof LazyDocument.LazyField);\n    values1 = d1.getFields(\"test_hlt\");\n    assertEquals(4, values1.length);\n    for (int i = 0; i < values1.length; i++) {\n      assertTrue( values1[i] instanceof LazyDocument.LazyField );\n      LazyDocument.LazyField f = (LazyDocument.LazyField) values1[i];\n      assertFalse( f.hasBeenLoaded() );\n    }\n    req.close();\n\n    // followup request, different fl\n    req = req(\"q\", \"id:7777\", \"fl\", \"id,test_hlt\");\n    rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    dl = ((ResultContext) rsp.getValues().get(\"response\")).getDocList();\n    di = dl.iterator();    \n    StoredDocument d2 = req.getSearcher().doc(di.nextDoc());\n    // ensure same doc, same lazy field now\n    assertTrue(\"Doc was not cached\", d1 == d2);\n    StorableField[] values2 = d2.getFields(\"test_hlt\");\n    assertEquals(values1.length, values2.length);\n    for (int i = 0; i < values1.length; i++) {\n      assertSame(\"LazyField wasn't reused\", \n                 values1[i], values2[i]);\n      LazyDocument.LazyField f = (LazyDocument.LazyField) values1[i];\n      // still not a real boy, no response writer in play\n      assertFalse(f.hasBeenLoaded()); \n    }\n\n    assertNotNull(values2[0].stringValue()); // actuallize one value\n    for (int i = 0; i < values2.length; i++) {\n      // now all values for this field should be loaded & cached\n      LazyDocument.LazyField f = (LazyDocument.LazyField) values2[i];\n      assertTrue(f.hasBeenLoaded());\n    }\n\n    req.close();\n  } \n\n","sourceOld":"  @Test\n  public void testLazyField() throws IOException {\n    assertU(adoc(\"id\", \"7777\",\n                 \"title\", \"keyword\",\n                 \"test_hlt\", mkstr(10000),\n                 \"test_hlt\", mkstr(20000),\n                 \"test_hlt\", mkstr(30000),\n                 \"test_hlt\", mkstr(40000)));\n\n    assertU(commit());\n    SolrCore core = h.getCore();\n    \n    // initial request\n    SolrQueryRequest req = req(\"q\", \"id:7777\", \"fl\", \"id,title\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).docs;\n    DocIterator di = dl.iterator();    \n    StoredDocument d1 = req.getSearcher().doc(di.nextDoc());\n    StorableField[] values1 = null;\n\n    // ensure fl field is non lazy, and non-fl field is lazy\n    assertFalse( d1.getField(\"title\") instanceof LazyDocument.LazyField);\n    assertFalse( d1.getField(\"id\") instanceof LazyDocument.LazyField);\n    values1 = d1.getFields(\"test_hlt\");\n    assertEquals(4, values1.length);\n    for (int i = 0; i < values1.length; i++) {\n      assertTrue( values1[i] instanceof LazyDocument.LazyField );\n      LazyDocument.LazyField f = (LazyDocument.LazyField) values1[i];\n      assertFalse( f.hasBeenLoaded() );\n    }\n    req.close();\n\n    // followup request, different fl\n    req = req(\"q\", \"id:7777\", \"fl\", \"id,test_hlt\");\n    rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    dl = ((ResultContext) rsp.getValues().get(\"response\")).docs;\n    di = dl.iterator();    \n    StoredDocument d2 = req.getSearcher().doc(di.nextDoc());\n    // ensure same doc, same lazy field now\n    assertTrue(\"Doc was not cached\", d1 == d2);\n    StorableField[] values2 = d2.getFields(\"test_hlt\");\n    assertEquals(values1.length, values2.length);\n    for (int i = 0; i < values1.length; i++) {\n      assertSame(\"LazyField wasn't reused\", \n                 values1[i], values2[i]);\n      LazyDocument.LazyField f = (LazyDocument.LazyField) values1[i];\n      // still not a real boy, no response writer in play\n      assertFalse(f.hasBeenLoaded()); \n    }\n\n    assertNotNull(values2[0].stringValue()); // actuallize one value\n    for (int i = 0; i < values2.length; i++) {\n      // now all values for this field should be loaded & cached\n      LazyDocument.LazyField f = (LazyDocument.LazyField) values2[i];\n      assertTrue(f.hasBeenLoaded());\n    }\n\n    req.close();\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecd75942508378ccc92c3a26f71db6cba9f25784","date":1450708761,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testLazyField().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testLazyField().mjava","sourceNew":"  @Test\n  public void testLazyField() throws IOException {\n    assertU(adoc(\"id\", \"7777\",\n                 \"title\", \"keyword\",\n                 \"test_hlt\", mkstr(10000),\n                 \"test_hlt\", mkstr(20000),\n                 \"test_hlt\", mkstr(30000),\n                 \"test_hlt\", mkstr(40000)));\n\n    assertU(commit());\n    SolrCore core = h.getCore();\n    \n    // initial request\n    SolrQueryRequest req = req(\"q\", \"id:7777\", \"fl\", \"id,title\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = ((ResultContext) rsp.getResponse()).getDocList();\n    DocIterator di = dl.iterator();    \n    StoredDocument d1 = req.getSearcher().doc(di.nextDoc());\n    StorableField[] values1 = null;\n\n    // ensure fl field is non lazy, and non-fl field is lazy\n    assertFalse( d1.getField(\"title\") instanceof LazyDocument.LazyField);\n    assertFalse( d1.getField(\"id\") instanceof LazyDocument.LazyField);\n    values1 = d1.getFields(\"test_hlt\");\n    assertEquals(4, values1.length);\n    for (int i = 0; i < values1.length; i++) {\n      assertTrue( values1[i] instanceof LazyDocument.LazyField );\n      LazyDocument.LazyField f = (LazyDocument.LazyField) values1[i];\n      assertFalse( f.hasBeenLoaded() );\n    }\n    req.close();\n\n    // followup request, different fl\n    req = req(\"q\", \"id:7777\", \"fl\", \"id,test_hlt\");\n    rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    dl = ((ResultContext) rsp.getResponse()).getDocList();\n    di = dl.iterator();    \n    StoredDocument d2 = req.getSearcher().doc(di.nextDoc());\n    // ensure same doc, same lazy field now\n    assertTrue(\"Doc was not cached\", d1 == d2);\n    StorableField[] values2 = d2.getFields(\"test_hlt\");\n    assertEquals(values1.length, values2.length);\n    for (int i = 0; i < values1.length; i++) {\n      assertSame(\"LazyField wasn't reused\", \n                 values1[i], values2[i]);\n      LazyDocument.LazyField f = (LazyDocument.LazyField) values1[i];\n      // still not a real boy, no response writer in play\n      assertFalse(f.hasBeenLoaded()); \n    }\n\n    assertNotNull(values2[0].stringValue()); // actuallize one value\n    for (int i = 0; i < values2.length; i++) {\n      // now all values for this field should be loaded & cached\n      LazyDocument.LazyField f = (LazyDocument.LazyField) values2[i];\n      assertTrue(f.hasBeenLoaded());\n    }\n\n    req.close();\n  } \n\n","sourceOld":"  @Test\n  public void testLazyField() throws IOException {\n    assertU(adoc(\"id\", \"7777\",\n                 \"title\", \"keyword\",\n                 \"test_hlt\", mkstr(10000),\n                 \"test_hlt\", mkstr(20000),\n                 \"test_hlt\", mkstr(30000),\n                 \"test_hlt\", mkstr(40000)));\n\n    assertU(commit());\n    SolrCore core = h.getCore();\n    \n    // initial request\n    SolrQueryRequest req = req(\"q\", \"id:7777\", \"fl\", \"id,title\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).getDocList();\n    DocIterator di = dl.iterator();    \n    StoredDocument d1 = req.getSearcher().doc(di.nextDoc());\n    StorableField[] values1 = null;\n\n    // ensure fl field is non lazy, and non-fl field is lazy\n    assertFalse( d1.getField(\"title\") instanceof LazyDocument.LazyField);\n    assertFalse( d1.getField(\"id\") instanceof LazyDocument.LazyField);\n    values1 = d1.getFields(\"test_hlt\");\n    assertEquals(4, values1.length);\n    for (int i = 0; i < values1.length; i++) {\n      assertTrue( values1[i] instanceof LazyDocument.LazyField );\n      LazyDocument.LazyField f = (LazyDocument.LazyField) values1[i];\n      assertFalse( f.hasBeenLoaded() );\n    }\n    req.close();\n\n    // followup request, different fl\n    req = req(\"q\", \"id:7777\", \"fl\", \"id,test_hlt\");\n    rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    dl = ((ResultContext) rsp.getValues().get(\"response\")).getDocList();\n    di = dl.iterator();    \n    StoredDocument d2 = req.getSearcher().doc(di.nextDoc());\n    // ensure same doc, same lazy field now\n    assertTrue(\"Doc was not cached\", d1 == d2);\n    StorableField[] values2 = d2.getFields(\"test_hlt\");\n    assertEquals(values1.length, values2.length);\n    for (int i = 0; i < values1.length; i++) {\n      assertSame(\"LazyField wasn't reused\", \n                 values1[i], values2[i]);\n      LazyDocument.LazyField f = (LazyDocument.LazyField) values1[i];\n      // still not a real boy, no response writer in play\n      assertFalse(f.hasBeenLoaded()); \n    }\n\n    assertNotNull(values2[0].stringValue()); // actuallize one value\n    for (int i = 0; i < values2.length; i++) {\n      // now all values for this field should be loaded & cached\n      LazyDocument.LazyField f = (LazyDocument.LazyField) values2[i];\n      assertTrue(f.hasBeenLoaded());\n    }\n\n    req.close();\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testLazyField().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testLazyField().mjava","sourceNew":"  @Test\n  public void testLazyField() throws IOException {\n    assertU(adoc(\"id\", \"7777\",\n                 \"title\", \"keyword\",\n                 \"test_hlt\", mkstr(10000),\n                 \"test_hlt\", mkstr(20000),\n                 \"test_hlt\", mkstr(30000),\n                 \"test_hlt\", mkstr(40000)));\n\n    assertU(commit());\n    SolrCore core = h.getCore();\n    \n    // initial request\n    SolrQueryRequest req = req(\"q\", \"id:7777\", \"fl\", \"id,title\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = ((ResultContext) rsp.getResponse()).getDocList();\n    DocIterator di = dl.iterator();    \n    Document d1 = req.getSearcher().doc(di.nextDoc());\n    IndexableField[] values1 = null;\n\n    // ensure fl field is non lazy, and non-fl field is lazy\n    assertFalse( d1.getField(\"title\") instanceof LazyDocument.LazyField);\n    assertFalse( d1.getField(\"id\") instanceof LazyDocument.LazyField);\n    values1 = d1.getFields(\"test_hlt\");\n    assertEquals(4, values1.length);\n    for (int i = 0; i < values1.length; i++) {\n      assertTrue( values1[i] instanceof LazyDocument.LazyField );\n      LazyDocument.LazyField f = (LazyDocument.LazyField) values1[i];\n      assertFalse( f.hasBeenLoaded() );\n    }\n    req.close();\n\n    // followup request, different fl\n    req = req(\"q\", \"id:7777\", \"fl\", \"id,test_hlt\");\n    rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    dl = ((ResultContext) rsp.getResponse()).getDocList();\n    di = dl.iterator();    \n    Document d2 = req.getSearcher().doc(di.nextDoc());\n    // ensure same doc, same lazy field now\n    assertTrue(\"Doc was not cached\", d1 == d2);\n    IndexableField[] values2 = d2.getFields(\"test_hlt\");\n    assertEquals(values1.length, values2.length);\n    for (int i = 0; i < values1.length; i++) {\n      assertSame(\"LazyField wasn't reused\", \n                 values1[i], values2[i]);\n      LazyDocument.LazyField f = (LazyDocument.LazyField) values1[i];\n      // still not a real boy, no response writer in play\n      assertFalse(f.hasBeenLoaded()); \n    }\n\n    assertNotNull(values2[0].stringValue()); // actuallize one value\n    for (int i = 0; i < values2.length; i++) {\n      // now all values for this field should be loaded & cached\n      LazyDocument.LazyField f = (LazyDocument.LazyField) values2[i];\n      assertTrue(f.hasBeenLoaded());\n    }\n\n    req.close();\n  } \n\n","sourceOld":"  @Test\n  public void testLazyField() throws IOException {\n    assertU(adoc(\"id\", \"7777\",\n                 \"title\", \"keyword\",\n                 \"test_hlt\", mkstr(10000),\n                 \"test_hlt\", mkstr(20000),\n                 \"test_hlt\", mkstr(30000),\n                 \"test_hlt\", mkstr(40000)));\n\n    assertU(commit());\n    SolrCore core = h.getCore();\n    \n    // initial request\n    SolrQueryRequest req = req(\"q\", \"id:7777\", \"fl\", \"id,title\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = ((ResultContext) rsp.getResponse()).getDocList();\n    DocIterator di = dl.iterator();    \n    StoredDocument d1 = req.getSearcher().doc(di.nextDoc());\n    StorableField[] values1 = null;\n\n    // ensure fl field is non lazy, and non-fl field is lazy\n    assertFalse( d1.getField(\"title\") instanceof LazyDocument.LazyField);\n    assertFalse( d1.getField(\"id\") instanceof LazyDocument.LazyField);\n    values1 = d1.getFields(\"test_hlt\");\n    assertEquals(4, values1.length);\n    for (int i = 0; i < values1.length; i++) {\n      assertTrue( values1[i] instanceof LazyDocument.LazyField );\n      LazyDocument.LazyField f = (LazyDocument.LazyField) values1[i];\n      assertFalse( f.hasBeenLoaded() );\n    }\n    req.close();\n\n    // followup request, different fl\n    req = req(\"q\", \"id:7777\", \"fl\", \"id,test_hlt\");\n    rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    dl = ((ResultContext) rsp.getResponse()).getDocList();\n    di = dl.iterator();    \n    StoredDocument d2 = req.getSearcher().doc(di.nextDoc());\n    // ensure same doc, same lazy field now\n    assertTrue(\"Doc was not cached\", d1 == d2);\n    StorableField[] values2 = d2.getFields(\"test_hlt\");\n    assertEquals(values1.length, values2.length);\n    for (int i = 0; i < values1.length; i++) {\n      assertSame(\"LazyField wasn't reused\", \n                 values1[i], values2[i]);\n      LazyDocument.LazyField f = (LazyDocument.LazyField) values1[i];\n      // still not a real boy, no response writer in play\n      assertFalse(f.hasBeenLoaded()); \n    }\n\n    assertNotNull(values2[0].stringValue()); // actuallize one value\n    for (int i = 0; i < values2.length; i++) {\n      // now all values for this field should be loaded & cached\n      LazyDocument.LazyField f = (LazyDocument.LazyField) values2[i];\n      assertTrue(f.hasBeenLoaded());\n    }\n\n    req.close();\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"39899cd24f88f2d580857d57be8aebc1f467f5c6":["1d028314cced5858683a1bb4741423d0f934257b"],"06584e6e98d592b34e1329b384182f368d2025e8":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc":["39899cd24f88f2d580857d57be8aebc1f467f5c6"],"1d028314cced5858683a1bb4741423d0f934257b":["06584e6e98d592b34e1329b384182f368d2025e8","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ecd75942508378ccc92c3a26f71db6cba9f25784":["7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["c26f00b574427b55127e869b935845554afde1fa"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["06584e6e98d592b34e1329b384182f368d2025e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["ecd75942508378ccc92c3a26f71db6cba9f25784"]},"commit2Childs":{"39899cd24f88f2d580857d57be8aebc1f467f5c6":["7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc"],"06584e6e98d592b34e1329b384182f368d2025e8":["1d028314cced5858683a1bb4741423d0f934257b","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"c26f00b574427b55127e869b935845554afde1fa":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc":["ecd75942508378ccc92c3a26f71db6cba9f25784"],"1d028314cced5858683a1bb4741423d0f934257b":["39899cd24f88f2d580857d57be8aebc1f467f5c6"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["06584e6e98d592b34e1329b384182f368d2025e8"],"ecd75942508378ccc92c3a26f71db6cba9f25784":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["1d028314cced5858683a1bb4741423d0f934257b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}