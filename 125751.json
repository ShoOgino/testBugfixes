{"path":"lucene/core/src/java/org/apache/lucene/index/TypePromoter#promote(TypePromoter).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TypePromoter#promote(TypePromoter).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TypePromoter#promote(TypePromoter).mjava","sourceNew":"  /**\n   * Creates a new promoted {@link TypePromoter} based on this and the given\n   * {@link TypePromoter} or <code>null</code> iff the {@link TypePromoter} \n   * aren't compatible.\n   * \n   * @param promoter\n   *          the incoming promoter\n   * @return a new promoted {@link TypePromoter} based on this and the given\n   *         {@link TypePromoter} or <code>null</code> iff the\n   *         {@link TypePromoter} aren't compatible.\n   */\n  public TypePromoter promote(TypePromoter promoter) {\n\n    int promotedFlags = promoter.flags & this.flags;\n    TypePromoter promoted = create(FLAGS_MAP.get(promotedFlags), valueSize);\n    if (promoted == null) {\n      return promoted;\n    }\n    if ((promoted.flags & IS_BYTE) != 0 && (promoted.flags & IS_FIXED) == IS_FIXED) {\n      if (this.valueSize == promoter.valueSize) {\n        return promoted;\n      }\n      return create(FLAGS_MAP.get(promoted.flags & PROMOTE_TO_VAR_SIZE_MASK),\n          VAR_TYPE_VALUE_SIZE);\n    }\n    return promoted;\n\n  }\n\n","sourceOld":"  /**\n   * Creates a new promoted {@link TypePromoter} based on this and the given\n   * {@link TypePromoter} or <code>null</code> iff the {@link TypePromoter} \n   * aren't compatible.\n   * \n   * @param promoter\n   *          the incoming promoter\n   * @return a new promoted {@link TypePromoter} based on this and the given\n   *         {@link TypePromoter} or <code>null</code> iff the\n   *         {@link TypePromoter} aren't compatible.\n   */\n  public TypePromoter promote(TypePromoter promoter) {\n\n    int promotedFlags = promoter.flags & this.flags;\n    TypePromoter promoted = create(FLAGS_MAP.get(promotedFlags), valueSize);\n    if (promoted == null) {\n      return promoted;\n    }\n    if ((promoted.flags & IS_BYTE) != 0 && (promoted.flags & IS_FIXED) == IS_FIXED) {\n      if (this.valueSize == promoter.valueSize) {\n        return promoted;\n      }\n      return create(FLAGS_MAP.get(promoted.flags & PROMOTE_TO_VAR_SIZE_MASK),\n          VAR_TYPE_VALUE_SIZE);\n    }\n    return promoted;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd659803551ebd8ca09b9e4ad7abd18d3d558f9d","date":1336650316,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TypePromoter#promote(TypePromoter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TypePromoter#promote(TypePromoter).mjava","sourceNew":"  /**\n   * Creates a new promoted {@link TypePromoter} based on this and the given\n   * {@link TypePromoter} or <code>null</code> iff the {@link TypePromoter} \n   * aren't compatible.\n   * \n   * @param promoter\n   *          the incoming promoter\n   * @return a new promoted {@link TypePromoter} based on this and the given\n   *         {@link TypePromoter} or <code>null</code> iff the\n   *         {@link TypePromoter} aren't compatible.\n   */\n  public TypePromoter promote(TypePromoter promoter) {\n\n    int promotedFlags = promoter.flags & this.flags;\n    TypePromoter promoted = create(FLAGS_MAP.get(promotedFlags), valueSize);\n    if (promoted == null) {\n      return promoted;\n    }\n    if ((promoted.flags & IS_BYTE) != 0 && (promoted.flags & IS_FIXED) == IS_FIXED) {\n      if (this.valueSize == promoter.valueSize) {\n        return promoted;\n      }\n      return create(FLAGS_MAP.get(promoted.flags & PROMOTE_TO_VAR_SIZE_MASK),\n          VAR_TYPE_VALUE_SIZE);\n    }\n\n    return promoted;\n  }\n\n","sourceOld":"  /**\n   * Creates a new promoted {@link TypePromoter} based on this and the given\n   * {@link TypePromoter} or <code>null</code> iff the {@link TypePromoter} \n   * aren't compatible.\n   * \n   * @param promoter\n   *          the incoming promoter\n   * @return a new promoted {@link TypePromoter} based on this and the given\n   *         {@link TypePromoter} or <code>null</code> iff the\n   *         {@link TypePromoter} aren't compatible.\n   */\n  public TypePromoter promote(TypePromoter promoter) {\n\n    int promotedFlags = promoter.flags & this.flags;\n    TypePromoter promoted = create(FLAGS_MAP.get(promotedFlags), valueSize);\n    if (promoted == null) {\n      return promoted;\n    }\n    if ((promoted.flags & IS_BYTE) != 0 && (promoted.flags & IS_FIXED) == IS_FIXED) {\n      if (this.valueSize == promoter.valueSize) {\n        return promoted;\n      }\n      return create(FLAGS_MAP.get(promoted.flags & PROMOTE_TO_VAR_SIZE_MASK),\n          VAR_TYPE_VALUE_SIZE);\n    }\n    return promoted;\n\n  }\n\n","bugFix":["ff266254aa2c0b84006f8f3088ee25337661554d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18","date":1339188570,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TypePromoter#promote(TypePromoter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TypePromoter#promote(TypePromoter).mjava","sourceNew":"  /**\n   * Creates a new promoted {@link TypePromoter} based on this and the given\n   * {@link TypePromoter} or <code>null</code> iff the {@link TypePromoter} \n   * aren't compatible.\n   * \n   * @param promoter\n   *          the incoming promoter\n   * @return a new promoted {@link TypePromoter} based on this and the given\n   *         {@link TypePromoter} or <code>null</code> iff the\n   *         {@link TypePromoter} aren't compatible.\n   */\n  public TypePromoter promote(TypePromoter promoter) {\n    return promote(promoter, newPromoter());\n  }\n\n","sourceOld":"  /**\n   * Creates a new promoted {@link TypePromoter} based on this and the given\n   * {@link TypePromoter} or <code>null</code> iff the {@link TypePromoter} \n   * aren't compatible.\n   * \n   * @param promoter\n   *          the incoming promoter\n   * @return a new promoted {@link TypePromoter} based on this and the given\n   *         {@link TypePromoter} or <code>null</code> iff the\n   *         {@link TypePromoter} aren't compatible.\n   */\n  public TypePromoter promote(TypePromoter promoter) {\n\n    int promotedFlags = promoter.flags & this.flags;\n    TypePromoter promoted = create(FLAGS_MAP.get(promotedFlags), valueSize);\n    if (promoted == null) {\n      return promoted;\n    }\n    if ((promoted.flags & IS_BYTE) != 0 && (promoted.flags & IS_FIXED) == IS_FIXED) {\n      if (this.valueSize == promoter.valueSize) {\n        return promoted;\n      }\n      return create(FLAGS_MAP.get(promoted.flags & PROMOTE_TO_VAR_SIZE_MASK),\n          VAR_TYPE_VALUE_SIZE);\n    }\n\n    return promoted;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/TypePromoter#promote(TypePromoter).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a new promoted {@link TypePromoter} based on this and the given\n   * {@link TypePromoter} or <code>null</code> iff the {@link TypePromoter} \n   * aren't compatible.\n   * \n   * @param promoter\n   *          the incoming promoter\n   * @return a new promoted {@link TypePromoter} based on this and the given\n   *         {@link TypePromoter} or <code>null</code> iff the\n   *         {@link TypePromoter} aren't compatible.\n   */\n  public TypePromoter promote(TypePromoter promoter) {\n    return promote(promoter, newPromoter());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/TypePromoter#promote(TypePromoter).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a new promoted {@link TypePromoter} based on this and the given\n   * {@link TypePromoter} or <code>null</code> iff the {@link TypePromoter} \n   * aren't compatible.\n   * \n   * @param promoter\n   *          the incoming promoter\n   * @return a new promoted {@link TypePromoter} based on this and the given\n   *         {@link TypePromoter} or <code>null</code> iff the\n   *         {@link TypePromoter} aren't compatible.\n   */\n  public TypePromoter promote(TypePromoter promoter) {\n    return promote(promoter, newPromoter());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18":["cd659803551ebd8ca09b9e4ad7abd18d3d558f9d"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18","0837ab0472feecb3a54260729d845f839e1cbd72"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18"],"cd659803551ebd8ca09b9e4ad7abd18d3d558f9d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18":["d4d69c535930b5cce125cff868d40f6373dc27d4","0837ab0472feecb3a54260729d845f839e1cbd72"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd659803551ebd8ca09b9e4ad7abd18d3d558f9d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd659803551ebd8ca09b9e4ad7abd18d3d558f9d":["cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}