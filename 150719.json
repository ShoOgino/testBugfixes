{"path":"lucene/src/java/org/apache/lucene/search/AutomatonFuzzyTermsEnum[FuzzyTermsEnum]#accept(BytesRef).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/AutomatonFuzzyTermsEnum[FuzzyTermsEnum]#accept(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /** finds the smallest Lev(n) DFA that accepts the term. */\n  @Override\n  protected AcceptStatus accept(BytesRef term) {\n    if (term.equals(termRef)) { // ed = 0\n      boostAtt.setBoost(1.0F);\n      return AcceptStatus.YES_AND_SEEK;\n    }\n    \n    UnicodeUtil.UTF8toUTF16(term.bytes, term.offset, term.length, utf16);\n    \n    // TODO: benchmark doing this backwards\n    for (int i = 1; i < matchers.length; i++)\n      if (matchers[i].run(utf16.result, 0, utf16.length)) {\n        final float similarity = 1.0f - ((float) i / (float) \n            (Math.min(utf16.length, fullSearchTermLength)));\n        if (similarity > minimumSimilarity) {\n          boostAtt.setBoost((float) ((similarity - minimumSimilarity) * scale_factor));\n          return AcceptStatus.YES_AND_SEEK;\n        } else {\n          return AcceptStatus.NO_AND_SEEK;\n        }\n      }\n\n    return AcceptStatus.NO_AND_SEEK;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonFuzzyTermsEnum[FuzzyTermsEnum]#accept(BytesRef).mjava","sourceNew":null,"sourceOld":"  /** finds the smallest Lev(n) DFA that accepts the term. */\n  @Override\n  protected AcceptStatus accept(BytesRef term) {\n    if (term.equals(termRef)) { // ed = 0\n      boostAtt.setBoost(1.0F);\n      return AcceptStatus.YES_AND_SEEK;\n    }\n    \n    UnicodeUtil.UTF8toUTF16(term.bytes, term.offset, term.length, utf16);\n    \n    // TODO: benchmark doing this backwards\n    for (int i = 1; i < matchers.length; i++)\n      if (matchers[i].run(utf16.result, 0, utf16.length)) {\n        final float similarity = 1.0f - ((float) i / (float) \n            (Math.min(utf16.length, fullSearchTermLength)));\n        if (similarity > minimumSimilarity) {\n          boostAtt.setBoost((float) ((similarity - minimumSimilarity) * scale_factor));\n          return AcceptStatus.YES_AND_SEEK;\n        } else {\n          return AcceptStatus.NO_AND_SEEK;\n        }\n      }\n\n    return AcceptStatus.NO_AND_SEEK;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"]},"commit2Childs":{"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}