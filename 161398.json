{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest#singleShardedPreferenceRules().mjava","commits":[{"id":"ad2b6c2ec630dc0bf592b217af5cd07c62ac2839","date":1575929518,"type":0,"author":"Houston Putman","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest#singleShardedPreferenceRules().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tests if the 'shards.preference' parameter works with single-sharded collections.\n   */\n  @Test\n  public void singleShardedPreferenceRules() throws Exception {\n    String collectionName = \"singleShardPreferenceTestColl\";\n\n    int liveNodes = cluster.getJettySolrRunners().size();\n\n    // For testing replica.type, we want to have all replica types available for the collection\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, liveNodes/3, liveNodes/3, liveNodes/3)\n        .setMaxShardsPerNode(liveNodes)\n        .processAndWait(cluster.getSolrClient(), TIMEOUT);\n    cluster.waitForActiveCollection(collectionName, 1, liveNodes);\n\n    // Add some new documents\n    new UpdateRequest()\n        .add(id, \"0\", \"a_t\", \"hello1\")\n        .add(id, \"2\", \"a_t\", \"hello2\")\n        .add(id, \"3\", \"a_t\", \"hello2\")\n        .commit(getRandomClient(), collectionName);\n\n    // Run the actual test for 'queryReplicaType'\n    queryReplicaType(getRandomClient(), Replica.Type.PULL, collectionName);\n    queryReplicaType(getRandomClient(), Replica.Type.TLOG, collectionName);\n    queryReplicaType(getRandomClient(), Replica.Type.NRT, collectionName);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"993b0c7dda6341b437fe5685d35c6cc35eaac420","date":1575985950,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest#singleShardedPreferenceRules().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tests if the 'shards.preference' parameter works with single-sharded collections.\n   */\n  @Test\n  public void singleShardedPreferenceRules() throws Exception {\n    String collectionName = \"singleShardPreferenceTestColl\";\n\n    int liveNodes = cluster.getJettySolrRunners().size();\n\n    // For testing replica.type, we want to have all replica types available for the collection\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, liveNodes/3, liveNodes/3, liveNodes/3)\n        .setMaxShardsPerNode(liveNodes)\n        .processAndWait(cluster.getSolrClient(), TIMEOUT);\n    cluster.waitForActiveCollection(collectionName, 1, liveNodes);\n\n    // Add some new documents\n    new UpdateRequest()\n        .add(id, \"0\", \"a_t\", \"hello1\")\n        .add(id, \"2\", \"a_t\", \"hello2\")\n        .add(id, \"3\", \"a_t\", \"hello2\")\n        .commit(getRandomClient(), collectionName);\n\n    // Run the actual test for 'queryReplicaType'\n    queryReplicaType(getRandomClient(), Replica.Type.PULL, collectionName);\n    queryReplicaType(getRandomClient(), Replica.Type.TLOG, collectionName);\n    queryReplicaType(getRandomClient(), Replica.Type.NRT, collectionName);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest#singleShardedPreferenceRules().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest#singleShardedPreferenceRules().mjava","sourceNew":"  /**\n   * Tests if the 'shards.preference' parameter works with single-sharded collections.\n   */\n  @Test\n  public void singleShardedPreferenceRules() throws Exception {\n    String collectionName = \"singleShardPreferenceTestColl\";\n\n    int liveNodes = cluster.getJettySolrRunners().size();\n\n    // For testing replica.type, we want to have all replica types available for the collection\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, liveNodes/3, liveNodes/3, liveNodes/3)\n        .processAndWait(cluster.getSolrClient(), TIMEOUT);\n    cluster.waitForActiveCollection(collectionName, 1, liveNodes);\n\n    // Add some new documents\n    new UpdateRequest()\n        .add(id, \"0\", \"a_t\", \"hello1\")\n        .add(id, \"2\", \"a_t\", \"hello2\")\n        .add(id, \"3\", \"a_t\", \"hello2\")\n        .commit(getRandomClient(), collectionName);\n\n    // Run the actual test for 'queryReplicaType'\n    queryReplicaType(getRandomClient(), Replica.Type.PULL, collectionName);\n    queryReplicaType(getRandomClient(), Replica.Type.TLOG, collectionName);\n    queryReplicaType(getRandomClient(), Replica.Type.NRT, collectionName);\n  }\n\n","sourceOld":"  /**\n   * Tests if the 'shards.preference' parameter works with single-sharded collections.\n   */\n  @Test\n  public void singleShardedPreferenceRules() throws Exception {\n    String collectionName = \"singleShardPreferenceTestColl\";\n\n    int liveNodes = cluster.getJettySolrRunners().size();\n\n    // For testing replica.type, we want to have all replica types available for the collection\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, liveNodes/3, liveNodes/3, liveNodes/3)\n        .setMaxShardsPerNode(liveNodes)\n        .processAndWait(cluster.getSolrClient(), TIMEOUT);\n    cluster.waitForActiveCollection(collectionName, 1, liveNodes);\n\n    // Add some new documents\n    new UpdateRequest()\n        .add(id, \"0\", \"a_t\", \"hello1\")\n        .add(id, \"2\", \"a_t\", \"hello2\")\n        .add(id, \"3\", \"a_t\", \"hello2\")\n        .commit(getRandomClient(), collectionName);\n\n    // Run the actual test for 'queryReplicaType'\n    queryReplicaType(getRandomClient(), Replica.Type.PULL, collectionName);\n    queryReplicaType(getRandomClient(), Replica.Type.TLOG, collectionName);\n    queryReplicaType(getRandomClient(), Replica.Type.NRT, collectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"993b0c7dda6341b437fe5685d35c6cc35eaac420":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ad2b6c2ec630dc0bf592b217af5cd07c62ac2839"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["ad2b6c2ec630dc0bf592b217af5cd07c62ac2839"],"ad2b6c2ec630dc0bf592b217af5cd07c62ac2839":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"993b0c7dda6341b437fe5685d35c6cc35eaac420":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["993b0c7dda6341b437fe5685d35c6cc35eaac420","ad2b6c2ec630dc0bf592b217af5cd07c62ac2839"],"ad2b6c2ec630dc0bf592b217af5cd07c62ac2839":["993b0c7dda6341b437fe5685d35c6cc35eaac420","e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["993b0c7dda6341b437fe5685d35c6cc35eaac420","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}