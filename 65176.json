{"path":"solr/core/src/test/org/apache/solr/search/TestRecovery#deleteLogs().mjava","commits":[{"id":"01e98f8ae83ed9c1151cd99b37a7371fd6754ac2","date":1329660825,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#deleteLogs().mjava","pathOld":"/dev/null","sourceNew":"  // stops the core, removes the transaction logs, restarts the core.\n  void deleteLogs() throws Exception {\n    File logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n\n    h.close();\n\n    String[] files = UpdateLog.getLogList(logDir);\n    for (String file : files) {\n      new File(logDir, file).delete();\n    }\n\n    assertEquals(0, UpdateLog.getLogList(logDir).length);\n    createCore();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ad158dd03dce94a7f19283d896946a0c8dbf8d","date":1347662441,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#deleteLogs().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#deleteLogs().mjava","sourceNew":"  // stops the core, removes the transaction logs, restarts the core.\n  void deleteLogs() throws Exception {\n    File logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n\n    h.close();\n\n    try {\n      String[] files = UpdateLog.getLogList(logDir);\n      for (String file : files) {\n        new File(logDir, file).delete();\n      }\n\n      assertEquals(0, UpdateLog.getLogList(logDir).length);\n    } finally {\n      // make sure we create the core again, even if the assert fails so it won't mess\n      // up the next test.\n      createCore();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==\");   // ensure it works\n    }\n  }\n\n","sourceOld":"  // stops the core, removes the transaction logs, restarts the core.\n  void deleteLogs() throws Exception {\n    File logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n\n    h.close();\n\n    String[] files = UpdateLog.getLogList(logDir);\n    for (String file : files) {\n      new File(logDir, file).delete();\n    }\n\n    assertEquals(0, UpdateLog.getLogList(logDir).length);\n    createCore();\n  }\n\n","bugFix":null,"bugIntro":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#deleteLogs().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#deleteLogs().mjava","sourceNew":"  // stops the core, removes the transaction logs, restarts the core.\n  void deleteLogs() throws Exception {\n    UpdateLog ulog = h.getCore().getUpdateHandler().getUpdateLog();\n    File logDir = new File(h.getCore().getUpdateHandler().getUpdateLog().getLogDir());\n\n    h.close();\n\n    try {\n      String[] files = ulog.getLogList(logDir);\n      for (String file : files) {\n        new File(logDir, file).delete();\n      }\n\n      assertEquals(0, ulog.getLogList(logDir).length);\n    } finally {\n      // make sure we create the core again, even if the assert fails so it won't mess\n      // up the next test.\n      createCore();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==\");   // ensure it works\n    }\n  }\n\n","sourceOld":"  // stops the core, removes the transaction logs, restarts the core.\n  void deleteLogs() throws Exception {\n    File logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n\n    h.close();\n\n    try {\n      String[] files = UpdateLog.getLogList(logDir);\n      for (String file : files) {\n        new File(logDir, file).delete();\n      }\n\n      assertEquals(0, UpdateLog.getLogList(logDir).length);\n    } finally {\n      // make sure we create the core again, even if the assert fails so it won't mess\n      // up the next test.\n      createCore();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==\");   // ensure it works\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#deleteLogs().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#deleteLogs().mjava","sourceNew":"  // stops the core, removes the transaction logs, restarts the core.\n  void deleteLogs() throws Exception {\n    UpdateLog ulog = h.getCore().getUpdateHandler().getUpdateLog();\n    File logDir = new File(h.getCore().getUpdateHandler().getUpdateLog().getLogDir());\n\n    h.close();\n\n    try {\n      String[] files = ulog.getLogList(logDir);\n      for (String file : files) {\n        new File(logDir, file).delete();\n      }\n\n      assertEquals(0, ulog.getLogList(logDir).length);\n    } finally {\n      // make sure we create the core again, even if the assert fails so it won't mess\n      // up the next test.\n      createCore();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==\");   // ensure it works\n    }\n  }\n\n","sourceOld":"  // stops the core, removes the transaction logs, restarts the core.\n  void deleteLogs() throws Exception {\n    File logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n\n    h.close();\n\n    try {\n      String[] files = UpdateLog.getLogList(logDir);\n      for (String file : files) {\n        new File(logDir, file).delete();\n      }\n\n      assertEquals(0, UpdateLog.getLogList(logDir).length);\n    } finally {\n      // make sure we create the core again, even if the assert fails so it won't mess\n      // up the next test.\n      createCore();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==\");   // ensure it works\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cbc3688252d4a8045d69a164236b2cf87b721f17","date":1409846185,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#deleteLogs().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#deleteLogs().mjava","sourceNew":"  // stops the core, removes the transaction logs, restarts the core.\n  void deleteLogs() throws Exception {\n    UpdateLog ulog = h.getCore().getUpdateHandler().getUpdateLog();\n    File logDir = new File(h.getCore().getUpdateHandler().getUpdateLog().getLogDir());\n\n    h.close();\n\n    try {\n      String[] files = ulog.getLogList(logDir);\n      for (String file : files) {\n        Files.delete(new File(logDir, file).toPath());\n      }\n\n      assertEquals(0, ulog.getLogList(logDir).length);\n    } finally {\n      // make sure we create the core again, even if the assert fails so it won't mess\n      // up the next test.\n      createCore();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==\");   // ensure it works\n    }\n  }\n\n","sourceOld":"  // stops the core, removes the transaction logs, restarts the core.\n  void deleteLogs() throws Exception {\n    UpdateLog ulog = h.getCore().getUpdateHandler().getUpdateLog();\n    File logDir = new File(h.getCore().getUpdateHandler().getUpdateLog().getLogDir());\n\n    h.close();\n\n    try {\n      String[] files = ulog.getLogList(logDir);\n      for (String file : files) {\n        new File(logDir, file).delete();\n      }\n\n      assertEquals(0, ulog.getLogList(logDir).length);\n    } finally {\n      // make sure we create the core again, even if the assert fails so it won't mess\n      // up the next test.\n      createCore();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==\");   // ensure it works\n    }\n  }\n\n","bugFix":["54ad158dd03dce94a7f19283d896946a0c8dbf8d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["54ad158dd03dce94a7f19283d896946a0c8dbf8d"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["54ad158dd03dce94a7f19283d896946a0c8dbf8d","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"54ad158dd03dce94a7f19283d896946a0c8dbf8d":["01e98f8ae83ed9c1151cd99b37a7371fd6754ac2"],"01e98f8ae83ed9c1151cd99b37a7371fd6754ac2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cbc3688252d4a8045d69a164236b2cf87b721f17"]},"commit2Childs":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["cbc3688252d4a8045d69a164236b2cf87b721f17","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["01e98f8ae83ed9c1151cd99b37a7371fd6754ac2"],"54ad158dd03dce94a7f19283d896946a0c8dbf8d":["849494cf2f3a96af5c8c84995108ddd8456fcd04","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"01e98f8ae83ed9c1151cd99b37a7371fd6754ac2":["54ad158dd03dce94a7f19283d896946a0c8dbf8d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}