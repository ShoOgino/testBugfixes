{"path":"lucene/test-framework/src/java/org/apache/lucene/search/similarities/AssertingSimilarity#computeNorm(FieldInvertState).mjava","commits":[{"id":"36da5ede9e3eeda991aaf13a31735c5405c30b4e","date":1509403106,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/similarities/AssertingSimilarity#computeNorm(FieldInvertState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public long computeNorm(FieldInvertState state) {\n    assert state != null;\n    assert state.getLength() > 0;\n    assert state.getPosition() >= 0;\n    assert state.getOffset() >= 0;\n    assert state.getMaxTermFrequency() >= 0; // TODO: seems to be 0 for omitTFAP? \n    assert state.getMaxTermFrequency() <= state.getLength();\n    assert state.getNumOverlap() >= 0;\n    assert state.getNumOverlap() < state.getLength();\n    assert state.getUniqueTermCount() > 0;\n    assert state.getUniqueTermCount() <= state.getLength();\n    return delegate.computeNorm(state);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c68bfb3354451a11c895b36484af94f27530b79","date":1515505336,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/similarities/AssertingSimilarity#computeNorm(FieldInvertState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/similarities/AssertingSimilarity#computeNorm(FieldInvertState).mjava","sourceNew":"  @Override\n  public long computeNorm(FieldInvertState state) {\n    assert state != null;\n    assert state.getLength() > 0;\n    assert state.getPosition() >= 0;\n    assert state.getOffset() >= 0;\n    assert state.getMaxTermFrequency() >= 0; // TODO: seems to be 0 for omitTFAP? \n    assert state.getMaxTermFrequency() <= state.getLength();\n    assert state.getNumOverlap() >= 0;\n    assert state.getNumOverlap() < state.getLength();\n    assert state.getUniqueTermCount() > 0;\n    assert state.getUniqueTermCount() <= state.getLength();\n    long norm = delegate.computeNorm(state);\n    assert norm != 0;\n    return norm;\n  }\n\n","sourceOld":"  @Override\n  public long computeNorm(FieldInvertState state) {\n    assert state != null;\n    assert state.getLength() > 0;\n    assert state.getPosition() >= 0;\n    assert state.getOffset() >= 0;\n    assert state.getMaxTermFrequency() >= 0; // TODO: seems to be 0 for omitTFAP? \n    assert state.getMaxTermFrequency() <= state.getLength();\n    assert state.getNumOverlap() >= 0;\n    assert state.getNumOverlap() < state.getLength();\n    assert state.getUniqueTermCount() > 0;\n    assert state.getUniqueTermCount() <= state.getLength();\n    return delegate.computeNorm(state);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/similarities/AssertingSimilarity#computeNorm(FieldInvertState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/similarities/AssertingSimilarity#computeNorm(FieldInvertState).mjava","sourceNew":"  @Override\n  public long computeNorm(FieldInvertState state) {\n    assert state != null;\n    assert state.getLength() > 0;\n    assert state.getPosition() >= 0;\n    assert state.getOffset() >= 0;\n    assert state.getMaxTermFrequency() >= 0; // TODO: seems to be 0 for omitTFAP? \n    assert state.getMaxTermFrequency() <= state.getLength();\n    assert state.getNumOverlap() >= 0;\n    assert state.getNumOverlap() < state.getLength();\n    assert state.getUniqueTermCount() > 0;\n    assert state.getUniqueTermCount() <= state.getLength();\n    long norm = delegate.computeNorm(state);\n    assert norm != 0;\n    return norm;\n  }\n\n","sourceOld":"  @Override\n  public long computeNorm(FieldInvertState state) {\n    assert state != null;\n    assert state.getLength() > 0;\n    assert state.getPosition() >= 0;\n    assert state.getOffset() >= 0;\n    assert state.getMaxTermFrequency() >= 0; // TODO: seems to be 0 for omitTFAP? \n    assert state.getMaxTermFrequency() <= state.getLength();\n    assert state.getNumOverlap() >= 0;\n    assert state.getNumOverlap() < state.getLength();\n    assert state.getUniqueTermCount() > 0;\n    assert state.getUniqueTermCount() <= state.getLength();\n    return delegate.computeNorm(state);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c68bfb3354451a11c895b36484af94f27530b79":["36da5ede9e3eeda991aaf13a31735c5405c30b4e"],"b94236357aaa22b76c10629851fe4e376e0cea82":["36da5ede9e3eeda991aaf13a31735c5405c30b4e","0c68bfb3354451a11c895b36484af94f27530b79"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"36da5ede9e3eeda991aaf13a31735c5405c30b4e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"0c68bfb3354451a11c895b36484af94f27530b79":["b94236357aaa22b76c10629851fe4e376e0cea82"],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["36da5ede9e3eeda991aaf13a31735c5405c30b4e"],"36da5ede9e3eeda991aaf13a31735c5405c30b4e":["0c68bfb3354451a11c895b36484af94f27530b79","b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}