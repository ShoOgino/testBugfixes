{"path":"solr/src/test/org/apache/solr/analysis/TestKeepWordFilter#testStopAndGo().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestKeepWordFilter#testStopAndGo().mjava","pathOld":"/dev/null","sourceNew":"  public void testStopAndGo() throws Exception \n  {  \n    Set<String> words = new HashSet<String>();\n    words.add( \"aaa\" );\n    words.add( \"bbb\" );\n    \n    String input = \"aaa BBB ccc ddd EEE\";\n    Map<String,String> args = new HashMap<String, String>();\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    \n    // Test Stopwords\n    KeepWordFilterFactory factory = new KeepWordFilterFactory();\n    args.put( \"ignoreCase\", \"true\" );\n    factory.init( args );\n    factory.inform( loader );\n    factory.setWords( words );\n    assertTrue(factory.isIgnoreCase());\n    TokenStream stream = factory.create(new WhitespaceTokenizer(new StringReader(input)));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" });\n    \n    // Test Stopwords (ignoreCase via the setter instead)\n    factory = new KeepWordFilterFactory();\n    args = new HashMap<String, String>();\n    factory.init( args );\n    factory.inform( loader );\n    factory.setIgnoreCase(true);\n    factory.setWords( words );\n    assertTrue(factory.isIgnoreCase());\n    stream = factory.create(new WhitespaceTokenizer(new StringReader(input)));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" });\n    \n    // Now force case\n    args = new HashMap<String, String>();\n    args.put( \"ignoreCase\", \"false\" );\n    factory.init( args );\n    factory.inform( loader );\n    assertFalse(factory.isIgnoreCase());\n    stream = factory.create(new WhitespaceTokenizer(new StringReader(input)));\n    assertTokenStreamContents(stream, new String[] { \"aaa\" });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/analysis/TestKeepWordFilter#testStopAndGo().mjava","sourceNew":null,"sourceOld":"  public void testStopAndGo() throws Exception \n  {  \n    Set<String> words = new HashSet<String>();\n    words.add( \"aaa\" );\n    words.add( \"bbb\" );\n    \n    String input = \"aaa BBB ccc ddd EEE\";\n    Map<String,String> args = new HashMap<String, String>();\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    \n    // Test Stopwords\n    KeepWordFilterFactory factory = new KeepWordFilterFactory();\n    args.put( \"ignoreCase\", \"true\" );\n    factory.init( args );\n    factory.inform( loader );\n    factory.setWords( words );\n    assertTrue(factory.isIgnoreCase());\n    TokenStream stream = factory.create(new WhitespaceTokenizer(new StringReader(input)));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" });\n    \n    // Test Stopwords (ignoreCase via the setter instead)\n    factory = new KeepWordFilterFactory();\n    args = new HashMap<String, String>();\n    factory.init( args );\n    factory.inform( loader );\n    factory.setIgnoreCase(true);\n    factory.setWords( words );\n    assertTrue(factory.isIgnoreCase());\n    stream = factory.create(new WhitespaceTokenizer(new StringReader(input)));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" });\n    \n    // Now force case\n    args = new HashMap<String, String>();\n    args.put( \"ignoreCase\", \"false\" );\n    factory.init( args );\n    factory.inform( loader );\n    assertFalse(factory.isIgnoreCase());\n    stream = factory.create(new WhitespaceTokenizer(new StringReader(input)));\n    assertTokenStreamContents(stream, new String[] { \"aaa\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestKeepWordFilter#testStopAndGo().mjava","pathOld":"src/test/org/apache/solr/analysis/TestKeepWordFilter#testStopAndGo().mjava","sourceNew":"  public void testStopAndGo() throws Exception \n  {  \n    Set<String> words = new HashSet<String>();\n    words.add( \"aaa\" );\n    words.add( \"bbb\" );\n    \n    String input = \"aaa BBB ccc ddd EEE\";\n    Map<String,String> args = new HashMap<String, String>();\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    \n    // Test Stopwords\n    KeepWordFilterFactory factory = new KeepWordFilterFactory();\n    args.put( \"ignoreCase\", \"true\" );\n    factory.init( args );\n    factory.inform( loader );\n    factory.setWords( words );\n    assertTrue(factory.isIgnoreCase());\n    TokenStream stream = factory.create(new WhitespaceTokenizer(new StringReader(input)));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" });\n    \n    // Test Stopwords (ignoreCase via the setter instead)\n    factory = new KeepWordFilterFactory();\n    args = new HashMap<String, String>();\n    factory.init( args );\n    factory.inform( loader );\n    factory.setIgnoreCase(true);\n    factory.setWords( words );\n    assertTrue(factory.isIgnoreCase());\n    stream = factory.create(new WhitespaceTokenizer(new StringReader(input)));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" });\n    \n    // Now force case\n    args = new HashMap<String, String>();\n    args.put( \"ignoreCase\", \"false\" );\n    factory.init( args );\n    factory.inform( loader );\n    assertFalse(factory.isIgnoreCase());\n    stream = factory.create(new WhitespaceTokenizer(new StringReader(input)));\n    assertTokenStreamContents(stream, new String[] { \"aaa\" });\n  }\n\n","sourceOld":"  public void testStopAndGo() throws Exception \n  {  \n    Set<String> words = new HashSet<String>();\n    words.add( \"aaa\" );\n    words.add( \"bbb\" );\n    \n    String input = \"aaa BBB ccc ddd EEE\";\n    Map<String,String> args = new HashMap<String, String>();\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    \n    // Test Stopwords\n    KeepWordFilterFactory factory = new KeepWordFilterFactory();\n    args.put( \"ignoreCase\", \"true\" );\n    factory.init( args );\n    factory.inform( loader );\n    factory.setWords( words );\n    assertTrue(factory.isIgnoreCase());\n    TokenStream stream = factory.create(new WhitespaceTokenizer(new StringReader(input)));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" });\n    \n    // Test Stopwords (ignoreCase via the setter instead)\n    factory = new KeepWordFilterFactory();\n    args = new HashMap<String, String>();\n    factory.init( args );\n    factory.inform( loader );\n    factory.setIgnoreCase(true);\n    factory.setWords( words );\n    assertTrue(factory.isIgnoreCase());\n    stream = factory.create(new WhitespaceTokenizer(new StringReader(input)));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" });\n    \n    // Now force case\n    args = new HashMap<String, String>();\n    args.put( \"ignoreCase\", \"false\" );\n    factory.init( args );\n    factory.inform( loader );\n    assertFalse(factory.isIgnoreCase());\n    stream = factory.create(new WhitespaceTokenizer(new StringReader(input)));\n    assertTokenStreamContents(stream, new String[] { \"aaa\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/analysis/TestKeepWordFilter#testStopAndGo().mjava","pathOld":"/dev/null","sourceNew":"  public void testStopAndGo() throws Exception \n  {  \n    Set<String> words = new HashSet<String>();\n    words.add( \"aaa\" );\n    words.add( \"bbb\" );\n    \n    String input = \"aaa BBB ccc ddd EEE\";\n    Map<String,String> args = new HashMap<String, String>();\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    \n    // Test Stopwords\n    KeepWordFilterFactory factory = new KeepWordFilterFactory();\n    args.put( \"ignoreCase\", \"true\" );\n    factory.init( args );\n    factory.inform( loader );\n    factory.setWords( words );\n    assertTrue(factory.isIgnoreCase());\n    TokenStream stream = factory.create(new WhitespaceTokenizer(new StringReader(input)));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" });\n    \n    // Test Stopwords (ignoreCase via the setter instead)\n    factory = new KeepWordFilterFactory();\n    args = new HashMap<String, String>();\n    factory.init( args );\n    factory.inform( loader );\n    factory.setIgnoreCase(true);\n    factory.setWords( words );\n    assertTrue(factory.isIgnoreCase());\n    stream = factory.create(new WhitespaceTokenizer(new StringReader(input)));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" });\n    \n    // Now force case\n    args = new HashMap<String, String>();\n    args.put( \"ignoreCase\", \"false\" );\n    factory.init( args );\n    factory.inform( loader );\n    assertFalse(factory.isIgnoreCase());\n    stream = factory.create(new WhitespaceTokenizer(new StringReader(input)));\n    assertTokenStreamContents(stream, new String[] { \"aaa\" });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62213d744ed1606fd968871ed2ddfb2ba5943045","date":1269661446,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestKeepWordFilter#testStopAndGo().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestKeepWordFilter#testStopAndGo().mjava","sourceNew":"  public void testStopAndGo() throws Exception \n  {  \n    Set<String> words = new HashSet<String>();\n    words.add( \"aaa\" );\n    words.add( \"bbb\" );\n    \n    String input = \"aaa BBB ccc ddd EEE\";\n    Map<String,String> args = new HashMap<String, String>();\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    \n    // Test Stopwords\n    KeepWordFilterFactory factory = new KeepWordFilterFactory();\n    args.put( \"ignoreCase\", \"true\" );\n    factory.init( args );\n    factory.inform( loader );\n    factory.setWords( words );\n    assertTrue(factory.isIgnoreCase());\n    TokenStream stream = factory.create(new WhitespaceTokenizer(new StringReader(input)));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" });\n    \n    // Test Stopwords (ignoreCase via the setter instead)\n    factory = new KeepWordFilterFactory();\n    args = new HashMap<String, String>();\n    factory.init( args );\n    factory.inform( loader );\n    factory.setIgnoreCase(true);\n    factory.setWords( words );\n    assertTrue(factory.isIgnoreCase());\n    stream = factory.create(new WhitespaceTokenizer(new StringReader(input)));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" });\n    \n    // Now force case\n    factory = new KeepWordFilterFactory();\n    args = new HashMap<String, String>();\n    args.put( \"ignoreCase\", \"false\" );\n    factory.init( args );\n    factory.inform( loader );\n    factory.setWords( words );    \n    assertFalse(factory.isIgnoreCase());\n    stream = factory.create(new WhitespaceTokenizer(new StringReader(input)));\n    assertTokenStreamContents(stream, new String[] { \"aaa\" });\n  }\n\n","sourceOld":"  public void testStopAndGo() throws Exception \n  {  \n    Set<String> words = new HashSet<String>();\n    words.add( \"aaa\" );\n    words.add( \"bbb\" );\n    \n    String input = \"aaa BBB ccc ddd EEE\";\n    Map<String,String> args = new HashMap<String, String>();\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    \n    // Test Stopwords\n    KeepWordFilterFactory factory = new KeepWordFilterFactory();\n    args.put( \"ignoreCase\", \"true\" );\n    factory.init( args );\n    factory.inform( loader );\n    factory.setWords( words );\n    assertTrue(factory.isIgnoreCase());\n    TokenStream stream = factory.create(new WhitespaceTokenizer(new StringReader(input)));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" });\n    \n    // Test Stopwords (ignoreCase via the setter instead)\n    factory = new KeepWordFilterFactory();\n    args = new HashMap<String, String>();\n    factory.init( args );\n    factory.inform( loader );\n    factory.setIgnoreCase(true);\n    factory.setWords( words );\n    assertTrue(factory.isIgnoreCase());\n    stream = factory.create(new WhitespaceTokenizer(new StringReader(input)));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" });\n    \n    // Now force case\n    args = new HashMap<String, String>();\n    args.put( \"ignoreCase\", \"false\" );\n    factory.init( args );\n    factory.inform( loader );\n    assertFalse(factory.isIgnoreCase());\n    stream = factory.create(new WhitespaceTokenizer(new StringReader(input)));\n    assertTokenStreamContents(stream, new String[] { \"aaa\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c8b12bda3f5864b27e3e04df1be4f6736ec067a","date":1270088127,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestKeepWordFilter#testStopAndGo().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestKeepWordFilter#testStopAndGo().mjava","sourceNew":"  public void testStopAndGo() throws Exception \n  {  \n    Set<String> words = new HashSet<String>();\n    words.add( \"aaa\" );\n    words.add( \"bbb\" );\n    \n    String input = \"aaa BBB ccc ddd EEE\";\n    Map<String,String> args = new HashMap<String, String>(DEFAULT_VERSION_PARAM);\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    \n    // Test Stopwords\n    KeepWordFilterFactory factory = new KeepWordFilterFactory();\n    args.put( \"ignoreCase\", \"true\" );\n    factory.init( args );\n    factory.inform( loader );\n    factory.setWords( words );\n    assertTrue(factory.isIgnoreCase());\n    TokenStream stream = factory.create(new WhitespaceTokenizer(DEFAULT_VERSION, new StringReader(input)));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" });\n    \n    // Test Stopwords (ignoreCase via the setter instead)\n    factory = new KeepWordFilterFactory();\n    args = new HashMap<String, String>(DEFAULT_VERSION_PARAM);\n    factory.init( args );\n    factory.inform( loader );\n    factory.setIgnoreCase(true);\n    factory.setWords( words );\n    assertTrue(factory.isIgnoreCase());\n    stream = factory.create(new WhitespaceTokenizer(DEFAULT_VERSION, new StringReader(input)));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" });\n    \n    // Now force case\n    factory = new KeepWordFilterFactory();\n    args = new HashMap<String, String>(DEFAULT_VERSION_PARAM);\n    args.put( \"ignoreCase\", \"false\" );\n    factory.init( args );\n    factory.inform( loader );\n    factory.setWords( words );    \n    assertFalse(factory.isIgnoreCase());\n    stream = factory.create(new WhitespaceTokenizer(DEFAULT_VERSION, new StringReader(input)));\n    assertTokenStreamContents(stream, new String[] { \"aaa\" });\n  }\n\n","sourceOld":"  public void testStopAndGo() throws Exception \n  {  \n    Set<String> words = new HashSet<String>();\n    words.add( \"aaa\" );\n    words.add( \"bbb\" );\n    \n    String input = \"aaa BBB ccc ddd EEE\";\n    Map<String,String> args = new HashMap<String, String>();\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    \n    // Test Stopwords\n    KeepWordFilterFactory factory = new KeepWordFilterFactory();\n    args.put( \"ignoreCase\", \"true\" );\n    factory.init( args );\n    factory.inform( loader );\n    factory.setWords( words );\n    assertTrue(factory.isIgnoreCase());\n    TokenStream stream = factory.create(new WhitespaceTokenizer(new StringReader(input)));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" });\n    \n    // Test Stopwords (ignoreCase via the setter instead)\n    factory = new KeepWordFilterFactory();\n    args = new HashMap<String, String>();\n    factory.init( args );\n    factory.inform( loader );\n    factory.setIgnoreCase(true);\n    factory.setWords( words );\n    assertTrue(factory.isIgnoreCase());\n    stream = factory.create(new WhitespaceTokenizer(new StringReader(input)));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" });\n    \n    // Now force case\n    factory = new KeepWordFilterFactory();\n    args = new HashMap<String, String>();\n    args.put( \"ignoreCase\", \"false\" );\n    factory.init( args );\n    factory.inform( loader );\n    factory.setWords( words );    \n    assertFalse(factory.isIgnoreCase());\n    stream = factory.create(new WhitespaceTokenizer(new StringReader(input)));\n    assertTokenStreamContents(stream, new String[] { \"aaa\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"384e84fe86b09273dea9bb358ff47fc7781f3f17","date":1272992848,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/analysis/TestKeepWordFilter#testStopAndGo().mjava","sourceNew":null,"sourceOld":"  public void testStopAndGo() throws Exception \n  {  \n    Set<String> words = new HashSet<String>();\n    words.add( \"aaa\" );\n    words.add( \"bbb\" );\n    \n    String input = \"aaa BBB ccc ddd EEE\";\n    Map<String,String> args = new HashMap<String, String>(DEFAULT_VERSION_PARAM);\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    \n    // Test Stopwords\n    KeepWordFilterFactory factory = new KeepWordFilterFactory();\n    args.put( \"ignoreCase\", \"true\" );\n    factory.init( args );\n    factory.inform( loader );\n    factory.setWords( words );\n    assertTrue(factory.isIgnoreCase());\n    TokenStream stream = factory.create(new WhitespaceTokenizer(DEFAULT_VERSION, new StringReader(input)));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" });\n    \n    // Test Stopwords (ignoreCase via the setter instead)\n    factory = new KeepWordFilterFactory();\n    args = new HashMap<String, String>(DEFAULT_VERSION_PARAM);\n    factory.init( args );\n    factory.inform( loader );\n    factory.setIgnoreCase(true);\n    factory.setWords( words );\n    assertTrue(factory.isIgnoreCase());\n    stream = factory.create(new WhitespaceTokenizer(DEFAULT_VERSION, new StringReader(input)));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" });\n    \n    // Now force case\n    factory = new KeepWordFilterFactory();\n    args = new HashMap<String, String>(DEFAULT_VERSION_PARAM);\n    args.put( \"ignoreCase\", \"false\" );\n    factory.init( args );\n    factory.inform( loader );\n    factory.setWords( words );    \n    assertFalse(factory.isIgnoreCase());\n    stream = factory.create(new WhitespaceTokenizer(DEFAULT_VERSION, new StringReader(input)));\n    assertTokenStreamContents(stream, new String[] { \"aaa\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9c8b12bda3f5864b27e3e04df1be4f6736ec067a":["62213d744ed1606fd968871ed2ddfb2ba5943045"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"384e84fe86b09273dea9bb358ff47fc7781f3f17":["9c8b12bda3f5864b27e3e04df1be4f6736ec067a"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["384e84fe86b09273dea9bb358ff47fc7781f3f17"],"62213d744ed1606fd968871ed2ddfb2ba5943045":["1da8d55113b689b06716246649de6f62430f15c0"]},"commit2Childs":{"9c8b12bda3f5864b27e3e04df1be4f6736ec067a":["384e84fe86b09273dea9bb358ff47fc7781f3f17"],"1da8d55113b689b06716246649de6f62430f15c0":["62213d744ed1606fd968871ed2ddfb2ba5943045"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"384e84fe86b09273dea9bb358ff47fc7781f3f17":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"62213d744ed1606fd968871ed2ddfb2ba5943045":["9c8b12bda3f5864b27e3e04df1be4f6736ec067a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}