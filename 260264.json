{"path":"lucene/misc/src/test/org/apache/lucene/index/TestPKIndexSplitter#checkSplitting(Directory,Term,int,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/TestPKIndexSplitter#checkSplitting(Directory,Term,int,int).mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestPKIndexSplitter#checkSplitting(Directory,Term,int,int).mjava","sourceNew":"  private void checkSplitting(Directory dir, Term splitTerm, int leftCount, int rightCount) throws Exception {\n    Directory dir1 = newDirectory();\n    Directory dir2 = newDirectory();\n    PKIndexSplitter splitter = new PKIndexSplitter(dir, dir1, dir2, splitTerm,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())),\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    splitter.split();\n    \n    IndexReader ir1 = IndexReader.open(dir1);\n    IndexReader ir2 = IndexReader.open(dir2);\n    assertEquals(leftCount, ir1.numDocs());\n    assertEquals(rightCount, ir2.numDocs());\n    \n    checkContents(ir1, \"1\");\n    checkContents(ir2, \"2\");\n    \n    ir1.close();\n    ir2.close();\n    \n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  private void checkSplitting(Directory dir, Term splitTerm, int leftCount, int rightCount) throws Exception {\n    Directory dir1 = newDirectory();\n    Directory dir2 = newDirectory();\n    PKIndexSplitter splitter = new PKIndexSplitter(dir, dir1, dir2, splitTerm,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())),\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    splitter.split();\n    \n    IndexReader ir1 = IndexReader.open(dir1);\n    IndexReader ir2 = IndexReader.open(dir2);\n    assertEquals(leftCount, ir1.numDocs());\n    assertEquals(rightCount, ir2.numDocs());\n    \n    checkContents(ir1, \"1\");\n    checkContents(ir2, \"2\");\n    \n    ir1.close();\n    ir2.close();\n    \n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/TestPKIndexSplitter#checkSplitting(Directory,Term,int,int).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestPKIndexSplitter#checkSplitting(Directory,Term,int,int).mjava","sourceNew":"  private void checkSplitting(Directory dir, Term splitTerm, int leftCount, int rightCount) throws Exception {\n    Directory dir1 = newDirectory();\n    Directory dir2 = newDirectory();\n    PKIndexSplitter splitter = new PKIndexSplitter(dir, dir1, dir2, splitTerm,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())),\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    splitter.split();\n    \n    IndexReader ir1 = DirectoryReader.open(dir1);\n    IndexReader ir2 = DirectoryReader.open(dir2);\n    assertEquals(leftCount, ir1.numDocs());\n    assertEquals(rightCount, ir2.numDocs());\n    \n    checkContents(ir1, \"1\");\n    checkContents(ir2, \"2\");\n    \n    ir1.close();\n    ir2.close();\n    \n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  private void checkSplitting(Directory dir, Term splitTerm, int leftCount, int rightCount) throws Exception {\n    Directory dir1 = newDirectory();\n    Directory dir2 = newDirectory();\n    PKIndexSplitter splitter = new PKIndexSplitter(dir, dir1, dir2, splitTerm,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())),\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    splitter.split();\n    \n    IndexReader ir1 = IndexReader.open(dir1);\n    IndexReader ir2 = IndexReader.open(dir2);\n    assertEquals(leftCount, ir1.numDocs());\n    assertEquals(rightCount, ir2.numDocs());\n    \n    checkContents(ir1, \"1\");\n    checkContents(ir2, \"2\");\n    \n    ir1.close();\n    ir2.close();\n    \n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/TestPKIndexSplitter#checkSplitting(Directory,Term,int,int).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestPKIndexSplitter#checkSplitting(Directory,Term,int,int).mjava","sourceNew":"  private void checkSplitting(Directory dir, Term splitTerm, int leftCount, int rightCount) throws Exception {\n    Directory dir1 = newDirectory();\n    Directory dir2 = newDirectory();\n    PKIndexSplitter splitter = new PKIndexSplitter(dir, dir1, dir2, splitTerm,\n        newIndexWriterConfig(new MockAnalyzer(random())),\n        newIndexWriterConfig(new MockAnalyzer(random())));\n    splitter.split();\n    \n    IndexReader ir1 = DirectoryReader.open(dir1);\n    IndexReader ir2 = DirectoryReader.open(dir2);\n    assertEquals(leftCount, ir1.numDocs());\n    assertEquals(rightCount, ir2.numDocs());\n    \n    checkContents(ir1, \"1\");\n    checkContents(ir2, \"2\");\n    \n    ir1.close();\n    ir2.close();\n    \n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  private void checkSplitting(Directory dir, Term splitTerm, int leftCount, int rightCount) throws Exception {\n    Directory dir1 = newDirectory();\n    Directory dir2 = newDirectory();\n    PKIndexSplitter splitter = new PKIndexSplitter(dir, dir1, dir2, splitTerm,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())),\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    splitter.split();\n    \n    IndexReader ir1 = DirectoryReader.open(dir1);\n    IndexReader ir2 = DirectoryReader.open(dir2);\n    assertEquals(leftCount, ir1.numDocs());\n    assertEquals(rightCount, ir2.numDocs());\n    \n    checkContents(ir1, \"1\");\n    checkContents(ir2, \"2\");\n    \n    ir1.close();\n    ir2.close();\n    \n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}