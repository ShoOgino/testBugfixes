{"path":"solr/core/src/java/org/apache/solr/response/GraphMLResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"54d17c38a2ec6cf529776157e201d539c5c0ff2f","date":1462480579,"type":0,"author":"jbernste","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/GraphMLResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  public void write(Writer writer, SolrQueryRequest req, SolrQueryResponse res) throws IOException {\n\n    Exception e1 = res.getException();\n    if(e1 != null) {\n      e1.printStackTrace(new PrintWriter(writer));\n      return;\n    }\n\n    TupleStream stream =  (TupleStream)req.getContext().get(\"stream\");\n\n    if(stream instanceof GraphHandler.DummyErrorStream) {\n      GraphHandler.DummyErrorStream d = (GraphHandler.DummyErrorStream)stream;\n      Exception e = d.getException();\n      e.printStackTrace(new PrintWriter(writer));\n      return;\n    }\n\n\n    Traversal traversal = (Traversal)req.getContext().get(\"traversal\");\n    PrintWriter printWriter = new PrintWriter(writer);\n\n    try {\n\n      stream.open();\n\n      Tuple tuple = null;\n\n      int edgeCount = 0;\n\n      printWriter.println(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\");\n      printWriter.println(\"<graphml xmlns=\\\"http://graphml.graphdrawing.org/xmlns\\\" \");\n      printWriter.println(\"xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" \");\n      printWriter.print(\"xsi:schemaLocation=\\\"http://graphml.graphdrawing.org/xmlns \");\n      printWriter.println(\"http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd\\\">\");\n\n      printWriter.println(\"<graph id=\\\"G\\\" edgedefault=\\\"directed\\\">\");\n\n      while (true) {\n        //Output the graph\n        tuple = stream.read();\n        if (tuple.EOF) {\n          break;\n        }\n\n        String id = tuple.getString(\"node\");\n\n        if (traversal.isMultiCollection()) {\n          id = tuple.getString(\"collection\") + \".\" + id;\n        }\n\n        writer.write(\"<node id=\\\"\"+replace(id)+\"\\\"\");\n\n        List<String> outfields = new ArrayList();\n        Iterator<String> keys = tuple.fields.keySet().iterator();\n        while(keys.hasNext()) {\n          String key = keys.next();\n          if(key.equals(\"node\") || key.equals(\"ancestors\") || key.equals(\"collection\")) {\n            continue;\n          } else {\n            outfields.add(key);\n          }\n        }\n\n        if (outfields.size() > 0) {\n          printWriter.println(\">\");\n          for (String nodeAttribute : outfields) {\n            Object o = tuple.get(nodeAttribute);\n            if (o != null) {\n              printWriter.println(\"<data key=\\\"\"+nodeAttribute+\"\\\">\" + o.toString() + \"</data>\");\n            }\n          }\n          printWriter.println(\"</node>\");\n        } else {\n          printWriter.println(\"/>\");\n        }\n\n        List<String> ancestors = tuple.getStrings(\"ancestors\");\n\n        if(ancestors != null) {\n          for (String ancestor : ancestors) {\n            ++edgeCount;\n            writer.write(\"<edge id=\\\"\" + edgeCount + \"\\\" \");\n            writer.write(\" source=\\\"\" + replace(ancestor) + \"\\\" \");\n            printWriter.println(\" target=\\\"\" + replace(id) + \"\\\"/>\");\n          }\n        }\n      }\n\n      writer.write(\"</graph></graphml>\");\n    } finally {\n      stream.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fb3737fcdca6942cc52ffb7b31292af9a76c6a41"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"79728e71d79579147b18f43e27a36e34be4986e2","date":1462480538,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/GraphMLResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  public void write(Writer writer, SolrQueryRequest req, SolrQueryResponse res) throws IOException {\n\n    Exception e1 = res.getException();\n    if(e1 != null) {\n      e1.printStackTrace(new PrintWriter(writer));\n      return;\n    }\n\n    TupleStream stream =  (TupleStream)req.getContext().get(\"stream\");\n\n    if(stream instanceof GraphHandler.DummyErrorStream) {\n      GraphHandler.DummyErrorStream d = (GraphHandler.DummyErrorStream)stream;\n      Exception e = d.getException();\n      e.printStackTrace(new PrintWriter(writer));\n      return;\n    }\n\n\n    Traversal traversal = (Traversal)req.getContext().get(\"traversal\");\n    PrintWriter printWriter = new PrintWriter(writer);\n\n    try {\n\n      stream.open();\n\n      Tuple tuple = null;\n\n      int edgeCount = 0;\n\n      printWriter.println(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\");\n      printWriter.println(\"<graphml xmlns=\\\"http://graphml.graphdrawing.org/xmlns\\\" \");\n      printWriter.println(\"xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" \");\n      printWriter.print(\"xsi:schemaLocation=\\\"http://graphml.graphdrawing.org/xmlns \");\n      printWriter.println(\"http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd\\\">\");\n\n      printWriter.println(\"<graph id=\\\"G\\\" edgedefault=\\\"directed\\\">\");\n\n      while (true) {\n        //Output the graph\n        tuple = stream.read();\n        if (tuple.EOF) {\n          break;\n        }\n\n        String id = tuple.getString(\"node\");\n\n        if (traversal.isMultiCollection()) {\n          id = tuple.getString(\"collection\") + \".\" + id;\n        }\n\n        writer.write(\"<node id=\\\"\"+replace(id)+\"\\\"\");\n\n        List<String> outfields = new ArrayList();\n        Iterator<String> keys = tuple.fields.keySet().iterator();\n        while(keys.hasNext()) {\n          String key = keys.next();\n          if(key.equals(\"node\") || key.equals(\"ancestors\") || key.equals(\"collection\")) {\n            continue;\n          } else {\n            outfields.add(key);\n          }\n        }\n\n        if (outfields.size() > 0) {\n          printWriter.println(\">\");\n          for (String nodeAttribute : outfields) {\n            Object o = tuple.get(nodeAttribute);\n            if (o != null) {\n              printWriter.println(\"<data key=\\\"\"+nodeAttribute+\"\\\">\" + o.toString() + \"</data>\");\n            }\n          }\n          printWriter.println(\"</node>\");\n        } else {\n          printWriter.println(\"/>\");\n        }\n\n        List<String> ancestors = tuple.getStrings(\"ancestors\");\n\n        if(ancestors != null) {\n          for (String ancestor : ancestors) {\n            ++edgeCount;\n            writer.write(\"<edge id=\\\"\" + edgeCount + \"\\\" \");\n            writer.write(\" source=\\\"\" + replace(ancestor) + \"\\\" \");\n            printWriter.println(\" target=\\\"\" + replace(id) + \"\\\"/>\");\n          }\n        }\n      }\n\n      writer.write(\"</graph></graphml>\");\n    } finally {\n      stream.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/GraphMLResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  public void write(Writer writer, SolrQueryRequest req, SolrQueryResponse res) throws IOException {\n\n    Exception e1 = res.getException();\n    if(e1 != null) {\n      e1.printStackTrace(new PrintWriter(writer));\n      return;\n    }\n\n    TupleStream stream =  (TupleStream)req.getContext().get(\"stream\");\n\n    if(stream instanceof GraphHandler.DummyErrorStream) {\n      GraphHandler.DummyErrorStream d = (GraphHandler.DummyErrorStream)stream;\n      Exception e = d.getException();\n      e.printStackTrace(new PrintWriter(writer));\n      return;\n    }\n\n\n    Traversal traversal = (Traversal)req.getContext().get(\"traversal\");\n    PrintWriter printWriter = new PrintWriter(writer);\n\n    try {\n\n      stream.open();\n\n      Tuple tuple = null;\n\n      int edgeCount = 0;\n\n      printWriter.println(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\");\n      printWriter.println(\"<graphml xmlns=\\\"http://graphml.graphdrawing.org/xmlns\\\" \");\n      printWriter.println(\"xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" \");\n      printWriter.print(\"xsi:schemaLocation=\\\"http://graphml.graphdrawing.org/xmlns \");\n      printWriter.println(\"http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd\\\">\");\n\n      printWriter.println(\"<graph id=\\\"G\\\" edgedefault=\\\"directed\\\">\");\n\n      while (true) {\n        //Output the graph\n        tuple = stream.read();\n        if (tuple.EOF) {\n          break;\n        }\n\n        String id = tuple.getString(\"node\");\n\n        if (traversal.isMultiCollection()) {\n          id = tuple.getString(\"collection\") + \".\" + id;\n        }\n\n        writer.write(\"<node id=\\\"\"+replace(id)+\"\\\"\");\n\n        List<String> outfields = new ArrayList();\n        Iterator<String> keys = tuple.fields.keySet().iterator();\n        while(keys.hasNext()) {\n          String key = keys.next();\n          if(key.equals(\"node\") || key.equals(\"ancestors\") || key.equals(\"collection\")) {\n            continue;\n          } else {\n            outfields.add(key);\n          }\n        }\n\n        if (outfields.size() > 0) {\n          printWriter.println(\">\");\n          for (String nodeAttribute : outfields) {\n            Object o = tuple.get(nodeAttribute);\n            if (o != null) {\n              printWriter.println(\"<data key=\\\"\"+nodeAttribute+\"\\\">\" + o.toString() + \"</data>\");\n            }\n          }\n          printWriter.println(\"</node>\");\n        } else {\n          printWriter.println(\"/>\");\n        }\n\n        List<String> ancestors = tuple.getStrings(\"ancestors\");\n\n        if(ancestors != null) {\n          for (String ancestor : ancestors) {\n            ++edgeCount;\n            writer.write(\"<edge id=\\\"\" + edgeCount + \"\\\" \");\n            writer.write(\" source=\\\"\" + replace(ancestor) + \"\\\" \");\n            printWriter.println(\" target=\\\"\" + replace(id) + \"\\\"/>\");\n          }\n        }\n      }\n\n      writer.write(\"</graph></graphml>\");\n    } finally {\n      stream.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/GraphMLResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  public void write(Writer writer, SolrQueryRequest req, SolrQueryResponse res) throws IOException {\n\n    Exception e1 = res.getException();\n    if(e1 != null) {\n      e1.printStackTrace(new PrintWriter(writer));\n      return;\n    }\n\n    TupleStream stream =  (TupleStream)req.getContext().get(\"stream\");\n\n    if(stream instanceof GraphHandler.DummyErrorStream) {\n      GraphHandler.DummyErrorStream d = (GraphHandler.DummyErrorStream)stream;\n      Exception e = d.getException();\n      e.printStackTrace(new PrintWriter(writer));\n      return;\n    }\n\n\n    Traversal traversal = (Traversal)req.getContext().get(\"traversal\");\n    PrintWriter printWriter = new PrintWriter(writer);\n\n    try {\n\n      stream.open();\n\n      Tuple tuple = null;\n\n      int edgeCount = 0;\n\n      printWriter.println(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\");\n      printWriter.println(\"<graphml xmlns=\\\"http://graphml.graphdrawing.org/xmlns\\\" \");\n      printWriter.println(\"xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" \");\n      printWriter.print(\"xsi:schemaLocation=\\\"http://graphml.graphdrawing.org/xmlns \");\n      printWriter.println(\"http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd\\\">\");\n\n      printWriter.println(\"<graph id=\\\"G\\\" edgedefault=\\\"directed\\\">\");\n\n      while (true) {\n        //Output the graph\n        tuple = stream.read();\n        if (tuple.EOF) {\n          break;\n        }\n\n        String id = tuple.getString(\"node\");\n\n        if (traversal.isMultiCollection()) {\n          id = tuple.getString(\"collection\") + \".\" + id;\n        }\n\n        writer.write(\"<node id=\\\"\"+replace(id)+\"\\\"\");\n\n        List<String> outfields = new ArrayList();\n        Iterator<String> keys = tuple.fields.keySet().iterator();\n        while(keys.hasNext()) {\n          String key = keys.next();\n          if(key.equals(\"node\") || key.equals(\"ancestors\") || key.equals(\"collection\")) {\n            continue;\n          } else {\n            outfields.add(key);\n          }\n        }\n\n        if (outfields.size() > 0) {\n          printWriter.println(\">\");\n          for (String nodeAttribute : outfields) {\n            Object o = tuple.get(nodeAttribute);\n            if (o != null) {\n              printWriter.println(\"<data key=\\\"\"+nodeAttribute+\"\\\">\" + o.toString() + \"</data>\");\n            }\n          }\n          printWriter.println(\"</node>\");\n        } else {\n          printWriter.println(\"/>\");\n        }\n\n        List<String> ancestors = tuple.getStrings(\"ancestors\");\n\n        if(ancestors != null) {\n          for (String ancestor : ancestors) {\n            ++edgeCount;\n            writer.write(\"<edge id=\\\"\" + edgeCount + \"\\\" \");\n            writer.write(\" source=\\\"\" + replace(ancestor) + \"\\\" \");\n            printWriter.println(\" target=\\\"\" + replace(id) + \"\\\"/>\");\n          }\n        }\n      }\n\n      writer.write(\"</graph></graphml>\");\n    } finally {\n      stream.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb3737fcdca6942cc52ffb7b31292af9a76c6a41","date":1523502003,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/GraphMLResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/GraphMLResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void write(Writer writer, SolrQueryRequest req, SolrQueryResponse res) throws IOException {\n\n    Exception e1 = res.getException();\n    if(e1 != null) {\n      e1.printStackTrace(new PrintWriter(writer));\n      return;\n    }\n\n    TupleStream stream =  (TupleStream)req.getContext().get(\"stream\");\n\n    if(stream instanceof GraphHandler.DummyErrorStream) {\n      GraphHandler.DummyErrorStream d = (GraphHandler.DummyErrorStream)stream;\n      Exception e = d.getException();\n      e.printStackTrace(new PrintWriter(writer));\n      return;\n    }\n\n\n    Traversal traversal = (Traversal)req.getContext().get(\"traversal\");\n    PrintWriter printWriter = new PrintWriter(writer);\n\n    try {\n\n      stream.open();\n\n      Tuple tuple = null;\n\n      int edgeCount = 0;\n\n      printWriter.println(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\");\n      printWriter.println(\"<graphml xmlns=\\\"http://graphml.graphdrawing.org/xmlns\\\" \");\n      printWriter.println(\"xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" \");\n      printWriter.print(\"xsi:schemaLocation=\\\"http://graphml.graphdrawing.org/xmlns \");\n      printWriter.println(\"http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd\\\">\");\n\n      printWriter.println(\"<graph id=\\\"G\\\" edgedefault=\\\"directed\\\">\");\n\n      while (true) {\n        //Output the graph\n        tuple = stream.read();\n        if (tuple.EOF) {\n          break;\n        }\n\n        String id = tuple.getString(\"node\");\n\n        if (traversal.isMultiCollection()) {\n          id = tuple.getString(\"collection\") + \".\" + id;\n        }\n\n        printWriter.write(\"<node id=\\\"\"+ xmlEscape(id)+\"\\\"\");\n\n        List<String> outfields = new ArrayList();\n        Iterator<String> keys = tuple.fields.keySet().iterator();\n        while(keys.hasNext()) {\n          String key = keys.next();\n          if(key.equals(\"node\") || key.equals(\"ancestors\") || key.equals(\"collection\")) {\n            continue;\n          } else {\n            outfields.add(key);\n          }\n        }\n\n        if (outfields.size() > 0) {\n          printWriter.println(\">\");\n          for (String nodeAttribute : outfields) {\n            Object o = tuple.get(nodeAttribute);\n            if (o != null) {\n              printWriter.println(\"<data key=\\\"\" + xmlEscape(nodeAttribute) + \"\\\">\" + xmlEscape(o.toString()) + \"</data>\");\n            }\n          }\n          printWriter.println(\"</node>\");\n        } else {\n          printWriter.println(\"/>\");\n        }\n\n        List<String> ancestors = tuple.getStrings(\"ancestors\");\n\n        if(ancestors != null) {\n          for (String ancestor : ancestors) {\n            ++edgeCount;\n            printWriter.write(\"<edge id=\\\"\" + edgeCount + \"\\\" \");\n            printWriter.write(\" source=\\\"\" + xmlEscape(ancestor) + \"\\\" \");\n            printWriter.println(\" target=\\\"\" + xmlEscape(id) + \"\\\"/>\");\n          }\n        }\n      }\n\n      printWriter.write(\"</graph></graphml>\");\n    } finally {\n      stream.close();\n    }\n  }\n\n","sourceOld":"  public void write(Writer writer, SolrQueryRequest req, SolrQueryResponse res) throws IOException {\n\n    Exception e1 = res.getException();\n    if(e1 != null) {\n      e1.printStackTrace(new PrintWriter(writer));\n      return;\n    }\n\n    TupleStream stream =  (TupleStream)req.getContext().get(\"stream\");\n\n    if(stream instanceof GraphHandler.DummyErrorStream) {\n      GraphHandler.DummyErrorStream d = (GraphHandler.DummyErrorStream)stream;\n      Exception e = d.getException();\n      e.printStackTrace(new PrintWriter(writer));\n      return;\n    }\n\n\n    Traversal traversal = (Traversal)req.getContext().get(\"traversal\");\n    PrintWriter printWriter = new PrintWriter(writer);\n\n    try {\n\n      stream.open();\n\n      Tuple tuple = null;\n\n      int edgeCount = 0;\n\n      printWriter.println(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\");\n      printWriter.println(\"<graphml xmlns=\\\"http://graphml.graphdrawing.org/xmlns\\\" \");\n      printWriter.println(\"xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" \");\n      printWriter.print(\"xsi:schemaLocation=\\\"http://graphml.graphdrawing.org/xmlns \");\n      printWriter.println(\"http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd\\\">\");\n\n      printWriter.println(\"<graph id=\\\"G\\\" edgedefault=\\\"directed\\\">\");\n\n      while (true) {\n        //Output the graph\n        tuple = stream.read();\n        if (tuple.EOF) {\n          break;\n        }\n\n        String id = tuple.getString(\"node\");\n\n        if (traversal.isMultiCollection()) {\n          id = tuple.getString(\"collection\") + \".\" + id;\n        }\n\n        writer.write(\"<node id=\\\"\"+replace(id)+\"\\\"\");\n\n        List<String> outfields = new ArrayList();\n        Iterator<String> keys = tuple.fields.keySet().iterator();\n        while(keys.hasNext()) {\n          String key = keys.next();\n          if(key.equals(\"node\") || key.equals(\"ancestors\") || key.equals(\"collection\")) {\n            continue;\n          } else {\n            outfields.add(key);\n          }\n        }\n\n        if (outfields.size() > 0) {\n          printWriter.println(\">\");\n          for (String nodeAttribute : outfields) {\n            Object o = tuple.get(nodeAttribute);\n            if (o != null) {\n              printWriter.println(\"<data key=\\\"\"+nodeAttribute+\"\\\">\" + o.toString() + \"</data>\");\n            }\n          }\n          printWriter.println(\"</node>\");\n        } else {\n          printWriter.println(\"/>\");\n        }\n\n        List<String> ancestors = tuple.getStrings(\"ancestors\");\n\n        if(ancestors != null) {\n          for (String ancestor : ancestors) {\n            ++edgeCount;\n            writer.write(\"<edge id=\\\"\" + edgeCount + \"\\\" \");\n            writer.write(\" source=\\\"\" + replace(ancestor) + \"\\\" \");\n            printWriter.println(\" target=\\\"\" + replace(id) + \"\\\"/>\");\n          }\n        }\n      }\n\n      writer.write(\"</graph></graphml>\");\n    } finally {\n      stream.close();\n    }\n  }\n\n","bugFix":["54d17c38a2ec6cf529776157e201d539c5c0ff2f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f5a9deac6e313e80a1f56468e14bb4c491b83d7","date":1523529596,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/GraphMLResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/GraphMLResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void write(Writer writer, SolrQueryRequest req, SolrQueryResponse res) throws IOException {\n\n    Exception e1 = res.getException();\n    if(e1 != null) {\n      e1.printStackTrace(new PrintWriter(writer));\n      return;\n    }\n\n    TupleStream stream =  (TupleStream)req.getContext().get(\"stream\");\n\n    if(stream instanceof GraphHandler.DummyErrorStream) {\n      GraphHandler.DummyErrorStream d = (GraphHandler.DummyErrorStream)stream;\n      Exception e = d.getException();\n      e.printStackTrace(new PrintWriter(writer));\n      return;\n    }\n\n\n    Traversal traversal = (Traversal)req.getContext().get(\"traversal\");\n    PrintWriter printWriter = new PrintWriter(writer);\n\n    try {\n\n      stream.open();\n\n      Tuple tuple = null;\n\n      int edgeCount = 0;\n\n      printWriter.println(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\");\n      printWriter.println(\"<graphml xmlns=\\\"http://graphml.graphdrawing.org/xmlns\\\" \");\n      printWriter.println(\"xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" \");\n      printWriter.print(\"xsi:schemaLocation=\\\"http://graphml.graphdrawing.org/xmlns \");\n      printWriter.println(\"http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd\\\">\");\n\n      printWriter.println(\"<graph id=\\\"G\\\" edgedefault=\\\"directed\\\">\");\n\n      while (true) {\n        //Output the graph\n        tuple = stream.read();\n        if (tuple.EOF) {\n          break;\n        }\n\n        String id = tuple.getString(\"node\");\n\n        if (traversal.isMultiCollection()) {\n          id = tuple.getString(\"collection\") + \".\" + id;\n        }\n\n        printWriter.write(\"<node id=\\\"\"+ xmlEscape(id)+\"\\\"\");\n\n        List<String> outfields = new ArrayList();\n        Iterator<String> keys = tuple.fields.keySet().iterator();\n        while(keys.hasNext()) {\n          String key = keys.next();\n          if(key.equals(\"node\") || key.equals(\"ancestors\") || key.equals(\"collection\")) {\n            continue;\n          } else {\n            outfields.add(key);\n          }\n        }\n\n        if (outfields.size() > 0) {\n          printWriter.println(\">\");\n          for (String nodeAttribute : outfields) {\n            Object o = tuple.get(nodeAttribute);\n            if (o != null) {\n              printWriter.println(\"<data key=\\\"\" + xmlEscape(nodeAttribute) + \"\\\">\" + xmlEscape(o.toString()) + \"</data>\");\n            }\n          }\n          printWriter.println(\"</node>\");\n        } else {\n          printWriter.println(\"/>\");\n        }\n\n        List<String> ancestors = tuple.getStrings(\"ancestors\");\n\n        if(ancestors != null) {\n          for (String ancestor : ancestors) {\n            ++edgeCount;\n            printWriter.write(\"<edge id=\\\"\" + edgeCount + \"\\\" \");\n            printWriter.write(\" source=\\\"\" + xmlEscape(ancestor) + \"\\\" \");\n            printWriter.println(\" target=\\\"\" + xmlEscape(id) + \"\\\"/>\");\n          }\n        }\n      }\n\n      printWriter.write(\"</graph></graphml>\");\n    } finally {\n      stream.close();\n    }\n  }\n\n","sourceOld":"  public void write(Writer writer, SolrQueryRequest req, SolrQueryResponse res) throws IOException {\n\n    Exception e1 = res.getException();\n    if(e1 != null) {\n      e1.printStackTrace(new PrintWriter(writer));\n      return;\n    }\n\n    TupleStream stream =  (TupleStream)req.getContext().get(\"stream\");\n\n    if(stream instanceof GraphHandler.DummyErrorStream) {\n      GraphHandler.DummyErrorStream d = (GraphHandler.DummyErrorStream)stream;\n      Exception e = d.getException();\n      e.printStackTrace(new PrintWriter(writer));\n      return;\n    }\n\n\n    Traversal traversal = (Traversal)req.getContext().get(\"traversal\");\n    PrintWriter printWriter = new PrintWriter(writer);\n\n    try {\n\n      stream.open();\n\n      Tuple tuple = null;\n\n      int edgeCount = 0;\n\n      printWriter.println(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\");\n      printWriter.println(\"<graphml xmlns=\\\"http://graphml.graphdrawing.org/xmlns\\\" \");\n      printWriter.println(\"xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" \");\n      printWriter.print(\"xsi:schemaLocation=\\\"http://graphml.graphdrawing.org/xmlns \");\n      printWriter.println(\"http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd\\\">\");\n\n      printWriter.println(\"<graph id=\\\"G\\\" edgedefault=\\\"directed\\\">\");\n\n      while (true) {\n        //Output the graph\n        tuple = stream.read();\n        if (tuple.EOF) {\n          break;\n        }\n\n        String id = tuple.getString(\"node\");\n\n        if (traversal.isMultiCollection()) {\n          id = tuple.getString(\"collection\") + \".\" + id;\n        }\n\n        writer.write(\"<node id=\\\"\"+replace(id)+\"\\\"\");\n\n        List<String> outfields = new ArrayList();\n        Iterator<String> keys = tuple.fields.keySet().iterator();\n        while(keys.hasNext()) {\n          String key = keys.next();\n          if(key.equals(\"node\") || key.equals(\"ancestors\") || key.equals(\"collection\")) {\n            continue;\n          } else {\n            outfields.add(key);\n          }\n        }\n\n        if (outfields.size() > 0) {\n          printWriter.println(\">\");\n          for (String nodeAttribute : outfields) {\n            Object o = tuple.get(nodeAttribute);\n            if (o != null) {\n              printWriter.println(\"<data key=\\\"\"+nodeAttribute+\"\\\">\" + o.toString() + \"</data>\");\n            }\n          }\n          printWriter.println(\"</node>\");\n        } else {\n          printWriter.println(\"/>\");\n        }\n\n        List<String> ancestors = tuple.getStrings(\"ancestors\");\n\n        if(ancestors != null) {\n          for (String ancestor : ancestors) {\n            ++edgeCount;\n            writer.write(\"<edge id=\\\"\" + edgeCount + \"\\\" \");\n            writer.write(\" source=\\\"\" + replace(ancestor) + \"\\\" \");\n            printWriter.println(\" target=\\\"\" + replace(id) + \"\\\"/>\");\n          }\n        }\n      }\n\n      writer.write(\"</graph></graphml>\");\n    } finally {\n      stream.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"804a8d5358fe7b7563b85ee7838714d720b89272","date":1591624987,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/GraphMLResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/GraphMLResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void write(Writer writer, SolrQueryRequest req, SolrQueryResponse res) throws IOException {\n\n    Exception e1 = res.getException();\n    if(e1 != null) {\n      e1.printStackTrace(new PrintWriter(writer));\n      return;\n    }\n\n    TupleStream stream =  (TupleStream)req.getContext().get(\"stream\");\n\n    if(stream instanceof GraphHandler.DummyErrorStream) {\n      GraphHandler.DummyErrorStream d = (GraphHandler.DummyErrorStream)stream;\n      Exception e = d.getException();\n      e.printStackTrace(new PrintWriter(writer));\n      return;\n    }\n\n\n    Traversal traversal = (Traversal)req.getContext().get(\"traversal\");\n    PrintWriter printWriter = new PrintWriter(writer);\n\n    try {\n\n      stream.open();\n\n      Tuple tuple = null;\n\n      int edgeCount = 0;\n\n      printWriter.println(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\");\n      printWriter.println(\"<graphml xmlns=\\\"http://graphml.graphdrawing.org/xmlns\\\" \");\n      printWriter.println(\"xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" \");\n      printWriter.print(\"xsi:schemaLocation=\\\"http://graphml.graphdrawing.org/xmlns \");\n      printWriter.println(\"http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd\\\">\");\n\n      printWriter.println(\"<graph id=\\\"G\\\" edgedefault=\\\"directed\\\">\");\n\n      while (true) {\n        //Output the graph\n        tuple = stream.read();\n        if (tuple.EOF) {\n          break;\n        }\n\n        String id = tuple.getString(\"node\");\n\n        if (traversal.isMultiCollection()) {\n          id = tuple.getString(\"collection\") + \".\" + id;\n        }\n\n        printWriter.write(\"<node id=\\\"\"+ xmlEscape(id)+\"\\\"\");\n\n        List<String> outfields = new ArrayList();\n        Iterator<Object> keys = tuple.getFields().keySet().iterator();\n        while(keys.hasNext()) {\n          String key = String.valueOf(keys.next());\n          if(key.equals(\"node\") || key.equals(\"ancestors\") || key.equals(\"collection\")) {\n            continue;\n          } else {\n            outfields.add(key);\n          }\n        }\n\n        if (outfields.size() > 0) {\n          printWriter.println(\">\");\n          for (String nodeAttribute : outfields) {\n            Object o = tuple.get(nodeAttribute);\n            if (o != null) {\n              printWriter.println(\"<data key=\\\"\" + xmlEscape(nodeAttribute) + \"\\\">\" + xmlEscape(o.toString()) + \"</data>\");\n            }\n          }\n          printWriter.println(\"</node>\");\n        } else {\n          printWriter.println(\"/>\");\n        }\n\n        List<String> ancestors = tuple.getStrings(\"ancestors\");\n\n        if(ancestors != null) {\n          for (String ancestor : ancestors) {\n            ++edgeCount;\n            printWriter.write(\"<edge id=\\\"\" + edgeCount + \"\\\" \");\n            printWriter.write(\" source=\\\"\" + xmlEscape(ancestor) + \"\\\" \");\n            printWriter.println(\" target=\\\"\" + xmlEscape(id) + \"\\\"/>\");\n          }\n        }\n      }\n\n      printWriter.write(\"</graph></graphml>\");\n    } finally {\n      stream.close();\n    }\n  }\n\n","sourceOld":"  public void write(Writer writer, SolrQueryRequest req, SolrQueryResponse res) throws IOException {\n\n    Exception e1 = res.getException();\n    if(e1 != null) {\n      e1.printStackTrace(new PrintWriter(writer));\n      return;\n    }\n\n    TupleStream stream =  (TupleStream)req.getContext().get(\"stream\");\n\n    if(stream instanceof GraphHandler.DummyErrorStream) {\n      GraphHandler.DummyErrorStream d = (GraphHandler.DummyErrorStream)stream;\n      Exception e = d.getException();\n      e.printStackTrace(new PrintWriter(writer));\n      return;\n    }\n\n\n    Traversal traversal = (Traversal)req.getContext().get(\"traversal\");\n    PrintWriter printWriter = new PrintWriter(writer);\n\n    try {\n\n      stream.open();\n\n      Tuple tuple = null;\n\n      int edgeCount = 0;\n\n      printWriter.println(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\");\n      printWriter.println(\"<graphml xmlns=\\\"http://graphml.graphdrawing.org/xmlns\\\" \");\n      printWriter.println(\"xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" \");\n      printWriter.print(\"xsi:schemaLocation=\\\"http://graphml.graphdrawing.org/xmlns \");\n      printWriter.println(\"http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd\\\">\");\n\n      printWriter.println(\"<graph id=\\\"G\\\" edgedefault=\\\"directed\\\">\");\n\n      while (true) {\n        //Output the graph\n        tuple = stream.read();\n        if (tuple.EOF) {\n          break;\n        }\n\n        String id = tuple.getString(\"node\");\n\n        if (traversal.isMultiCollection()) {\n          id = tuple.getString(\"collection\") + \".\" + id;\n        }\n\n        printWriter.write(\"<node id=\\\"\"+ xmlEscape(id)+\"\\\"\");\n\n        List<String> outfields = new ArrayList();\n        Iterator<String> keys = tuple.fields.keySet().iterator();\n        while(keys.hasNext()) {\n          String key = keys.next();\n          if(key.equals(\"node\") || key.equals(\"ancestors\") || key.equals(\"collection\")) {\n            continue;\n          } else {\n            outfields.add(key);\n          }\n        }\n\n        if (outfields.size() > 0) {\n          printWriter.println(\">\");\n          for (String nodeAttribute : outfields) {\n            Object o = tuple.get(nodeAttribute);\n            if (o != null) {\n              printWriter.println(\"<data key=\\\"\" + xmlEscape(nodeAttribute) + \"\\\">\" + xmlEscape(o.toString()) + \"</data>\");\n            }\n          }\n          printWriter.println(\"</node>\");\n        } else {\n          printWriter.println(\"/>\");\n        }\n\n        List<String> ancestors = tuple.getStrings(\"ancestors\");\n\n        if(ancestors != null) {\n          for (String ancestor : ancestors) {\n            ++edgeCount;\n            printWriter.write(\"<edge id=\\\"\" + edgeCount + \"\\\" \");\n            printWriter.write(\" source=\\\"\" + xmlEscape(ancestor) + \"\\\" \");\n            printWriter.println(\" target=\\\"\" + xmlEscape(id) + \"\\\"/>\");\n          }\n        }\n      }\n\n      printWriter.write(\"</graph></graphml>\");\n    } finally {\n      stream.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06a8891f085f71282bb3ece1b1732b68f07813a3","date":1591912889,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/GraphMLResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/GraphMLResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void write(Writer writer, SolrQueryRequest req, SolrQueryResponse res) throws IOException {\n\n    Exception e1 = res.getException();\n    if(e1 != null) {\n      e1.printStackTrace(new PrintWriter(writer));\n      return;\n    }\n\n    TupleStream stream =  (TupleStream)req.getContext().get(\"stream\");\n\n    if(stream instanceof GraphHandler.DummyErrorStream) {\n      GraphHandler.DummyErrorStream d = (GraphHandler.DummyErrorStream)stream;\n      Exception e = d.getException();\n      e.printStackTrace(new PrintWriter(writer));\n      return;\n    }\n\n\n    Traversal traversal = (Traversal)req.getContext().get(\"traversal\");\n    PrintWriter printWriter = new PrintWriter(writer);\n\n    try {\n\n      stream.open();\n\n      Tuple tuple = null;\n\n      int edgeCount = 0;\n\n      printWriter.println(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\");\n      printWriter.println(\"<graphml xmlns=\\\"http://graphml.graphdrawing.org/xmlns\\\" \");\n      printWriter.println(\"xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" \");\n      printWriter.print(\"xsi:schemaLocation=\\\"http://graphml.graphdrawing.org/xmlns \");\n      printWriter.println(\"http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd\\\">\");\n\n      printWriter.println(\"<graph id=\\\"G\\\" edgedefault=\\\"directed\\\">\");\n\n      while (true) {\n        //Output the graph\n        tuple = stream.read();\n        if (tuple.EOF) {\n          break;\n        }\n\n        String id = tuple.getString(\"node\");\n\n        if (traversal.isMultiCollection()) {\n          id = tuple.getString(\"collection\") + \".\" + id;\n        }\n\n        printWriter.write(\"<node id=\\\"\"+ xmlEscape(id)+\"\\\"\");\n\n        List<String> outfields = new ArrayList<>();\n        Iterator<Object> keys = tuple.getFields().keySet().iterator();\n        while(keys.hasNext()) {\n          String key = String.valueOf(keys.next());\n          if(key.equals(\"node\") || key.equals(\"ancestors\") || key.equals(\"collection\")) {\n            continue;\n          } else {\n            outfields.add(key);\n          }\n        }\n\n        if (outfields.size() > 0) {\n          printWriter.println(\">\");\n          for (String nodeAttribute : outfields) {\n            Object o = tuple.get(nodeAttribute);\n            if (o != null) {\n              printWriter.println(\"<data key=\\\"\" + xmlEscape(nodeAttribute) + \"\\\">\" + xmlEscape(o.toString()) + \"</data>\");\n            }\n          }\n          printWriter.println(\"</node>\");\n        } else {\n          printWriter.println(\"/>\");\n        }\n\n        List<String> ancestors = tuple.getStrings(\"ancestors\");\n\n        if(ancestors != null) {\n          for (String ancestor : ancestors) {\n            ++edgeCount;\n            printWriter.write(\"<edge id=\\\"\" + edgeCount + \"\\\" \");\n            printWriter.write(\" source=\\\"\" + xmlEscape(ancestor) + \"\\\" \");\n            printWriter.println(\" target=\\\"\" + xmlEscape(id) + \"\\\"/>\");\n          }\n        }\n      }\n\n      printWriter.write(\"</graph></graphml>\");\n    } finally {\n      stream.close();\n    }\n  }\n\n","sourceOld":"  public void write(Writer writer, SolrQueryRequest req, SolrQueryResponse res) throws IOException {\n\n    Exception e1 = res.getException();\n    if(e1 != null) {\n      e1.printStackTrace(new PrintWriter(writer));\n      return;\n    }\n\n    TupleStream stream =  (TupleStream)req.getContext().get(\"stream\");\n\n    if(stream instanceof GraphHandler.DummyErrorStream) {\n      GraphHandler.DummyErrorStream d = (GraphHandler.DummyErrorStream)stream;\n      Exception e = d.getException();\n      e.printStackTrace(new PrintWriter(writer));\n      return;\n    }\n\n\n    Traversal traversal = (Traversal)req.getContext().get(\"traversal\");\n    PrintWriter printWriter = new PrintWriter(writer);\n\n    try {\n\n      stream.open();\n\n      Tuple tuple = null;\n\n      int edgeCount = 0;\n\n      printWriter.println(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\");\n      printWriter.println(\"<graphml xmlns=\\\"http://graphml.graphdrawing.org/xmlns\\\" \");\n      printWriter.println(\"xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" \");\n      printWriter.print(\"xsi:schemaLocation=\\\"http://graphml.graphdrawing.org/xmlns \");\n      printWriter.println(\"http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd\\\">\");\n\n      printWriter.println(\"<graph id=\\\"G\\\" edgedefault=\\\"directed\\\">\");\n\n      while (true) {\n        //Output the graph\n        tuple = stream.read();\n        if (tuple.EOF) {\n          break;\n        }\n\n        String id = tuple.getString(\"node\");\n\n        if (traversal.isMultiCollection()) {\n          id = tuple.getString(\"collection\") + \".\" + id;\n        }\n\n        printWriter.write(\"<node id=\\\"\"+ xmlEscape(id)+\"\\\"\");\n\n        List<String> outfields = new ArrayList();\n        Iterator<Object> keys = tuple.getFields().keySet().iterator();\n        while(keys.hasNext()) {\n          String key = String.valueOf(keys.next());\n          if(key.equals(\"node\") || key.equals(\"ancestors\") || key.equals(\"collection\")) {\n            continue;\n          } else {\n            outfields.add(key);\n          }\n        }\n\n        if (outfields.size() > 0) {\n          printWriter.println(\">\");\n          for (String nodeAttribute : outfields) {\n            Object o = tuple.get(nodeAttribute);\n            if (o != null) {\n              printWriter.println(\"<data key=\\\"\" + xmlEscape(nodeAttribute) + \"\\\">\" + xmlEscape(o.toString()) + \"</data>\");\n            }\n          }\n          printWriter.println(\"</node>\");\n        } else {\n          printWriter.println(\"/>\");\n        }\n\n        List<String> ancestors = tuple.getStrings(\"ancestors\");\n\n        if(ancestors != null) {\n          for (String ancestor : ancestors) {\n            ++edgeCount;\n            printWriter.write(\"<edge id=\\\"\" + edgeCount + \"\\\" \");\n            printWriter.write(\" source=\\\"\" + xmlEscape(ancestor) + \"\\\" \");\n            printWriter.println(\" target=\\\"\" + xmlEscape(id) + \"\\\"/>\");\n          }\n        }\n      }\n\n      printWriter.write(\"</graph></graphml>\");\n    } finally {\n      stream.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54d17c38a2ec6cf529776157e201d539c5c0ff2f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1f5a9deac6e313e80a1f56468e14bb4c491b83d7":["79728e71d79579147b18f43e27a36e34be4986e2","fb3737fcdca6942cc52ffb7b31292af9a76c6a41"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","79728e71d79579147b18f43e27a36e34be4986e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06a8891f085f71282bb3ece1b1732b68f07813a3":["804a8d5358fe7b7563b85ee7838714d720b89272"],"fb3737fcdca6942cc52ffb7b31292af9a76c6a41":["79728e71d79579147b18f43e27a36e34be4986e2"],"79728e71d79579147b18f43e27a36e34be4986e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","54d17c38a2ec6cf529776157e201d539c5c0ff2f"],"804a8d5358fe7b7563b85ee7838714d720b89272":["1f5a9deac6e313e80a1f56468e14bb4c491b83d7"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","79728e71d79579147b18f43e27a36e34be4986e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06a8891f085f71282bb3ece1b1732b68f07813a3"]},"commit2Childs":{"54d17c38a2ec6cf529776157e201d539c5c0ff2f":["79728e71d79579147b18f43e27a36e34be4986e2"],"1f5a9deac6e313e80a1f56468e14bb4c491b83d7":["804a8d5358fe7b7563b85ee7838714d720b89272"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54d17c38a2ec6cf529776157e201d539c5c0ff2f","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","79728e71d79579147b18f43e27a36e34be4986e2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"06a8891f085f71282bb3ece1b1732b68f07813a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fb3737fcdca6942cc52ffb7b31292af9a76c6a41":["1f5a9deac6e313e80a1f56468e14bb4c491b83d7"],"79728e71d79579147b18f43e27a36e34be4986e2":["1f5a9deac6e313e80a1f56468e14bb4c491b83d7","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","fb3737fcdca6942cc52ffb7b31292af9a76c6a41","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"804a8d5358fe7b7563b85ee7838714d720b89272":["06a8891f085f71282bb3ece1b1732b68f07813a3"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}