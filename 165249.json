{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#getNumericCalc(SchemaField).mjava","commits":[{"id":"dd0759e8803a09424422a329163d5900f6b10c42","date":1431227616,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#getNumericCalc(SchemaField).mjava","pathOld":"/dev/null","sourceNew":"  public static Calc getNumericCalc(SchemaField sf) {\n    Calc calc;\n    final FieldType ft = sf.getType();\n\n    if (ft instanceof TrieField) {\n      final TrieField trie = (TrieField)ft;\n\n      switch (trie.getType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Expected numeric field type :\" + sf);\n      }\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Expected numeric field type :\" + sf);\n    }\n    return calc;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46dc9ac8b3e748407baaef82453138ff3974480c","date":1484789241,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#getNumericCalc(SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#getNumericCalc(SchemaField).mjava","sourceNew":"  public static Calc getNumericCalc(SchemaField sf) {\n    Calc calc;\n    final FieldType ft = sf.getType();\n\n    if (ft instanceof TrieField) {\n      final TrieField trie = (TrieField)ft;\n\n      switch (trie.getType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Expected numeric field type :\" + sf);\n      }\n    } else if (ft instanceof PointField) {\n      final PointField pfield = (PointField)ft;\n\n      switch (pfield.getType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Expected numeric field type :\" + sf);\n      }\n    } \n    else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Expected numeric field type :\" + sf);\n    }\n    return calc;\n  }\n\n","sourceOld":"  public static Calc getNumericCalc(SchemaField sf) {\n    Calc calc;\n    final FieldType ft = sf.getType();\n\n    if (ft instanceof TrieField) {\n      final TrieField trie = (TrieField)ft;\n\n      switch (trie.getType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Expected numeric field type :\" + sf);\n      }\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Expected numeric field type :\" + sf);\n    }\n    return calc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#getNumericCalc(SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#getNumericCalc(SchemaField).mjava","sourceNew":"  public static Calc getNumericCalc(SchemaField sf) {\n    Calc calc;\n    final FieldType ft = sf.getType();\n\n    if (ft instanceof TrieField) {\n      final TrieField trie = (TrieField)ft;\n\n      switch (trie.getType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Expected numeric field type :\" + sf);\n      }\n    } else if (ft instanceof PointField) {\n      final PointField pfield = (PointField)ft;\n\n      switch (pfield.getType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Expected numeric field type :\" + sf);\n      }\n    } \n    else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Expected numeric field type :\" + sf);\n    }\n    return calc;\n  }\n\n","sourceOld":"  public static Calc getNumericCalc(SchemaField sf) {\n    Calc calc;\n    final FieldType ft = sf.getType();\n\n    if (ft instanceof TrieField) {\n      final TrieField trie = (TrieField)ft;\n\n      switch (trie.getType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Expected numeric field type :\" + sf);\n      }\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Expected numeric field type :\" + sf);\n    }\n    return calc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d81baa64023bbb9b43f6d929ee168b105940d30","date":1486492702,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#getNumericCalc(SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#getNumericCalc(SchemaField).mjava","sourceNew":"  public static Calc getNumericCalc(SchemaField sf) {\n    Calc calc;\n    final FieldType ft = sf.getType();\n\n    if (ft instanceof TrieField) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Expected numeric field type :\" + sf);\n      }\n    } else if (ft instanceof PointField) {\n      // TODO, this is the same in Trie and Point now\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Expected numeric field type :\" + sf);\n      }\n    } \n    else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Expected numeric field type :\" + sf);\n    }\n    return calc;\n  }\n\n","sourceOld":"  public static Calc getNumericCalc(SchemaField sf) {\n    Calc calc;\n    final FieldType ft = sf.getType();\n\n    if (ft instanceof TrieField) {\n      final TrieField trie = (TrieField)ft;\n\n      switch (trie.getType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Expected numeric field type :\" + sf);\n      }\n    } else if (ft instanceof PointField) {\n      final PointField pfield = (PointField)ft;\n\n      switch (pfield.getType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Expected numeric field type :\" + sf);\n      }\n    } \n    else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Expected numeric field type :\" + sf);\n    }\n    return calc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6409f24cc7d96b04fb1c932845092b0e307fb5d4","date":1515972624,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#getNumericCalc(SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#getNumericCalc(SchemaField).mjava","sourceNew":"  /**\n   * Returns a {@link Calc} instance to use for <em>term</em> faceting over a numeric field.\n   * This metod is unused for <code>range</code> faceting, and exists solely as a helper method for other classes\n   * \n   * @param sf A field to facet on, must be of a type such that {@link FieldType#getNumberType} is non null\n   * @return a <code>Calc</code> instance with {@link Calc#bitsToValue} and {@link Calc#bitsToSortableBits} methods suitable for the specified field.\n   * @see FacetFieldProcessorByHashDV\n   */\n  public static Calc getNumericCalc(SchemaField sf) {\n    Calc calc;\n    final FieldType ft = sf.getType();\n\n    if (ft instanceof TrieField) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Expected numeric field type :\" + sf);\n      }\n    } else if (ft instanceof PointField) {\n      // TODO, this is the same in Trie and Point now\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Expected numeric field type :\" + sf);\n      }\n    } \n    else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Expected numeric field type :\" + sf);\n    }\n    return calc;\n  }\n\n","sourceOld":"  public static Calc getNumericCalc(SchemaField sf) {\n    Calc calc;\n    final FieldType ft = sf.getType();\n\n    if (ft instanceof TrieField) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Expected numeric field type :\" + sf);\n      }\n    } else if (ft instanceof PointField) {\n      // TODO, this is the same in Trie and Point now\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Expected numeric field type :\" + sf);\n      }\n    } \n    else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Expected numeric field type :\" + sf);\n    }\n    return calc;\n  }\n\n","bugFix":null,"bugIntro":["c05b634713ca09b2267477408773904d4c69dd9d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#getNumericCalc(SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#getNumericCalc(SchemaField).mjava","sourceNew":"  /**\n   * Returns a {@link Calc} instance to use for <em>term</em> faceting over a numeric field.\n   * This metod is unused for <code>range</code> faceting, and exists solely as a helper method for other classes\n   * \n   * @param sf A field to facet on, must be of a type such that {@link FieldType#getNumberType} is non null\n   * @return a <code>Calc</code> instance with {@link Calc#bitsToValue} and {@link Calc#bitsToSortableBits} methods suitable for the specified field.\n   * @see FacetFieldProcessorByHashDV\n   */\n  public static Calc getNumericCalc(SchemaField sf) {\n    Calc calc;\n    final FieldType ft = sf.getType();\n\n    if (ft instanceof TrieField) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Expected numeric field type :\" + sf);\n      }\n    } else if (ft instanceof PointField) {\n      // TODO, this is the same in Trie and Point now\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Expected numeric field type :\" + sf);\n      }\n    } \n    else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Expected numeric field type :\" + sf);\n    }\n    return calc;\n  }\n\n","sourceOld":"  public static Calc getNumericCalc(SchemaField sf) {\n    Calc calc;\n    final FieldType ft = sf.getType();\n\n    if (ft instanceof TrieField) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Expected numeric field type :\" + sf);\n      }\n    } else if (ft instanceof PointField) {\n      // TODO, this is the same in Trie and Point now\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Expected numeric field type :\" + sf);\n      }\n    } \n    else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Expected numeric field type :\" + sf);\n    }\n    return calc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c05b634713ca09b2267477408773904d4c69dd9d","date":1530894845,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#getNumericCalc(SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#getNumericCalc(SchemaField).mjava","sourceNew":"  /**\n   * Returns a {@link Calc} instance to use for <em>term</em> faceting over a numeric field.\n   * This method is unused for <code>range</code> faceting, and exists solely as a helper method for other classes\n   * \n   * @param sf A field to facet on, must be of a type such that {@link FieldType#getNumberType} is non null\n   * @return a <code>Calc</code> instance with {@link Calc#bitsToValue} and {@link Calc#bitsToSortableBits} methods suitable for the specified field.\n   * @see FacetFieldProcessorByHashDV\n   */\n  public static Calc getNumericCalc(SchemaField sf) {\n    Calc calc;\n    final FieldType ft = sf.getType();\n\n    if (ft instanceof TrieField) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Expected numeric field type :\" + sf);\n      }\n    } else if (ft instanceof PointField) {\n      // TODO, this is the same in Trie and Point now\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Expected numeric field type :\" + sf);\n      }\n    } \n    else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Expected numeric field type :\" + sf);\n    }\n    return calc;\n  }\n\n","sourceOld":"  /**\n   * Returns a {@link Calc} instance to use for <em>term</em> faceting over a numeric field.\n   * This metod is unused for <code>range</code> faceting, and exists solely as a helper method for other classes\n   * \n   * @param sf A field to facet on, must be of a type such that {@link FieldType#getNumberType} is non null\n   * @return a <code>Calc</code> instance with {@link Calc#bitsToValue} and {@link Calc#bitsToSortableBits} methods suitable for the specified field.\n   * @see FacetFieldProcessorByHashDV\n   */\n  public static Calc getNumericCalc(SchemaField sf) {\n    Calc calc;\n    final FieldType ft = sf.getType();\n\n    if (ft instanceof TrieField) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Expected numeric field type :\" + sf);\n      }\n    } else if (ft instanceof PointField) {\n      // TODO, this is the same in Trie and Point now\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Expected numeric field type :\" + sf);\n      }\n    } \n    else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Expected numeric field type :\" + sf);\n    }\n    return calc;\n  }\n\n","bugFix":["6409f24cc7d96b04fb1c932845092b0e307fb5d4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#getNumericCalc(SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#getNumericCalc(SchemaField).mjava","sourceNew":"  /**\n   * Returns a {@link Calc} instance to use for <em>term</em> faceting over a numeric field.\n   * This method is unused for <code>range</code> faceting, and exists solely as a helper method for other classes\n   * \n   * @param sf A field to facet on, must be of a type such that {@link FieldType#getNumberType} is non null\n   * @return a <code>Calc</code> instance with {@link Calc#bitsToValue} and {@link Calc#bitsToSortableBits} methods suitable for the specified field.\n   * @see FacetFieldProcessorByHashDV\n   */\n  public static Calc getNumericCalc(SchemaField sf) {\n    Calc calc;\n    final FieldType ft = sf.getType();\n\n    if (ft instanceof TrieField) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Expected numeric field type :\" + sf);\n      }\n    } else if (ft instanceof PointField) {\n      // TODO, this is the same in Trie and Point now\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Expected numeric field type :\" + sf);\n      }\n    } \n    else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Expected numeric field type :\" + sf);\n    }\n    return calc;\n  }\n\n","sourceOld":"  /**\n   * Returns a {@link Calc} instance to use for <em>term</em> faceting over a numeric field.\n   * This metod is unused for <code>range</code> faceting, and exists solely as a helper method for other classes\n   * \n   * @param sf A field to facet on, must be of a type such that {@link FieldType#getNumberType} is non null\n   * @return a <code>Calc</code> instance with {@link Calc#bitsToValue} and {@link Calc#bitsToSortableBits} methods suitable for the specified field.\n   * @see FacetFieldProcessorByHashDV\n   */\n  public static Calc getNumericCalc(SchemaField sf) {\n    Calc calc;\n    final FieldType ft = sf.getType();\n\n    if (ft instanceof TrieField) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Expected numeric field type :\" + sf);\n      }\n    } else if (ft instanceof PointField) {\n      // TODO, this is the same in Trie and Point now\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Expected numeric field type :\" + sf);\n      }\n    } \n    else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Expected numeric field type :\" + sf);\n    }\n    return calc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#getNumericCalc(SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#getNumericCalc(SchemaField).mjava","sourceNew":"  /**\n   * Returns a {@link Calc} instance to use for <em>term</em> faceting over a numeric field.\n   * This method is unused for <code>range</code> faceting, and exists solely as a helper method for other classes\n   * \n   * @param sf A field to facet on, must be of a type such that {@link FieldType#getNumberType} is non null\n   * @return a <code>Calc</code> instance with {@link Calc#bitsToValue} and {@link Calc#bitsToSortableBits} methods suitable for the specified field.\n   * @see FacetFieldProcessorByHashDV\n   */\n  public static Calc getNumericCalc(SchemaField sf) {\n    Calc calc;\n    final FieldType ft = sf.getType();\n\n    if (ft instanceof TrieField) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Expected numeric field type :\" + sf);\n      }\n    } else if (ft instanceof PointField) {\n      // TODO, this is the same in Trie and Point now\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Expected numeric field type :\" + sf);\n      }\n    } \n    else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Expected numeric field type :\" + sf);\n    }\n    return calc;\n  }\n\n","sourceOld":"  /**\n   * Returns a {@link Calc} instance to use for <em>term</em> faceting over a numeric field.\n   * This metod is unused for <code>range</code> faceting, and exists solely as a helper method for other classes\n   * \n   * @param sf A field to facet on, must be of a type such that {@link FieldType#getNumberType} is non null\n   * @return a <code>Calc</code> instance with {@link Calc#bitsToValue} and {@link Calc#bitsToSortableBits} methods suitable for the specified field.\n   * @see FacetFieldProcessorByHashDV\n   */\n  public static Calc getNumericCalc(SchemaField sf) {\n    Calc calc;\n    final FieldType ft = sf.getType();\n\n    if (ft instanceof TrieField) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Expected numeric field type :\" + sf);\n      }\n    } else if (ft instanceof PointField) {\n      // TODO, this is the same in Trie and Point now\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Expected numeric field type :\" + sf);\n      }\n    } \n    else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Expected numeric field type :\" + sf);\n    }\n    return calc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1918d03541b875664e27eae44b6b157da044f0b8","date":1549745850,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#getNumericCalc(SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#getNumericCalc(SchemaField).mjava","sourceNew":"  /**\n   * Returns a {@link Calc} instance to use for <em>term</em> faceting over a numeric field.\n   * This method is unused for <code>range</code> faceting, and exists solely as a helper method for other classes\n   * \n   * @param sf A field to facet on, must be of a type such that {@link FieldType#getNumberType} is non null\n   * @return a <code>Calc</code> instance with {@link Calc#bitsToValue} and {@link Calc#bitsToSortableBits} methods suitable for the specified field.\n   * @see FacetFieldProcessorByHashDV\n   */\n  public static Calc getNumericCalc(SchemaField sf) {\n    Calc calc;\n    final FieldType ft = sf.getType();\n\n    if (ft instanceof TrieField || ft.isPointField()) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Expected numeric field type :\" + sf);\n      }\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Expected numeric field type :\" + sf);\n    }\n    return calc;\n  }\n\n","sourceOld":"  /**\n   * Returns a {@link Calc} instance to use for <em>term</em> faceting over a numeric field.\n   * This method is unused for <code>range</code> faceting, and exists solely as a helper method for other classes\n   * \n   * @param sf A field to facet on, must be of a type such that {@link FieldType#getNumberType} is non null\n   * @return a <code>Calc</code> instance with {@link Calc#bitsToValue} and {@link Calc#bitsToSortableBits} methods suitable for the specified field.\n   * @see FacetFieldProcessorByHashDV\n   */\n  public static Calc getNumericCalc(SchemaField sf) {\n    Calc calc;\n    final FieldType ft = sf.getType();\n\n    if (ft instanceof TrieField) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Expected numeric field type :\" + sf);\n      }\n    } else if (ft instanceof PointField) {\n      // TODO, this is the same in Trie and Point now\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Expected numeric field type :\" + sf);\n      }\n    } \n    else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Expected numeric field type :\" + sf);\n    }\n    return calc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56a9893014b284af4d1af451e6c02e7ffdf5b6e","date":1590065972,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor#getNumericCalc(SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#getNumericCalc(SchemaField).mjava","sourceNew":"  /**\n   * Returns a {@link Calc} instance to use for <em>term</em> faceting over a numeric field.\n   * This method is unused for <code>range</code> faceting, and exists solely as a helper method for other classes\n   *\n   * @param sf A field to facet on, must be of a type such that {@link FieldType#getNumberType} is non null\n   * @return a <code>Calc</code> instance with {@link Calc#bitsToValue} and {@link Calc#bitsToSortableBits} methods suitable for the specified field.\n   * @see FacetFieldProcessorByHashDV\n   */\n  public static Calc getNumericCalc(SchemaField sf) {\n    Calc calc;\n    final FieldType ft = sf.getType();\n\n    if (ft instanceof TrieField || ft.isPointField()) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Expected numeric field type :\" + sf);\n      }\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Expected numeric field type :\" + sf);\n    }\n    return calc;\n  }\n\n","sourceOld":"  /**\n   * Returns a {@link Calc} instance to use for <em>term</em> faceting over a numeric field.\n   * This method is unused for <code>range</code> faceting, and exists solely as a helper method for other classes\n   * \n   * @param sf A field to facet on, must be of a type such that {@link FieldType#getNumberType} is non null\n   * @return a <code>Calc</code> instance with {@link Calc#bitsToValue} and {@link Calc#bitsToSortableBits} methods suitable for the specified field.\n   * @see FacetFieldProcessorByHashDV\n   */\n  public static Calc getNumericCalc(SchemaField sf) {\n    Calc calc;\n    final FieldType ft = sf.getType();\n\n    if (ft instanceof TrieField || ft.isPointField()) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Expected numeric field type :\" + sf);\n      }\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Expected numeric field type :\" + sf);\n    }\n    return calc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["3d81baa64023bbb9b43f6d929ee168b105940d30","6409f24cc7d96b04fb1c932845092b0e307fb5d4"],"46dc9ac8b3e748407baaef82453138ff3974480c":["dd0759e8803a09424422a329163d5900f6b10c42"],"dd0759e8803a09424422a329163d5900f6b10c42":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c05b634713ca09b2267477408773904d4c69dd9d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["dd0759e8803a09424422a329163d5900f6b10c42","46dc9ac8b3e748407baaef82453138ff3974480c"],"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["1918d03541b875664e27eae44b6b157da044f0b8"],"1918d03541b875664e27eae44b6b157da044f0b8":["c05b634713ca09b2267477408773904d4c69dd9d"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["b94236357aaa22b76c10629851fe4e376e0cea82","c05b634713ca09b2267477408773904d4c69dd9d"],"3d81baa64023bbb9b43f6d929ee168b105940d30":["46dc9ac8b3e748407baaef82453138ff3974480c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6409f24cc7d96b04fb1c932845092b0e307fb5d4":["3d81baa64023bbb9b43f6d929ee168b105940d30"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["b94236357aaa22b76c10629851fe4e376e0cea82","c05b634713ca09b2267477408773904d4c69dd9d"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["c05b634713ca09b2267477408773904d4c69dd9d","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"46dc9ac8b3e748407baaef82453138ff3974480c":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","3d81baa64023bbb9b43f6d929ee168b105940d30"],"dd0759e8803a09424422a329163d5900f6b10c42":["46dc9ac8b3e748407baaef82453138ff3974480c","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"c05b634713ca09b2267477408773904d4c69dd9d":["1918d03541b875664e27eae44b6b157da044f0b8","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1918d03541b875664e27eae44b6b157da044f0b8":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"3d81baa64023bbb9b43f6d929ee168b105940d30":["b94236357aaa22b76c10629851fe4e376e0cea82","6409f24cc7d96b04fb1c932845092b0e307fb5d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd0759e8803a09424422a329163d5900f6b10c42"],"6409f24cc7d96b04fb1c932845092b0e307fb5d4":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}