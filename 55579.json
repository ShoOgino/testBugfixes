{"path":"lucene/src/java/org/apache/lucene/search/cache/ByteValuesCreator#fillByteValues(ByteValues,IndexReader,String).mjava","commits":[{"id":"eee9156bf08d7eaae5e8d8ab5f855ba61012e257","date":1285443157,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/cache/ByteValuesCreator#fillByteValues(ByteValues,IndexReader,String).mjava","pathOld":"/dev/null","sourceNew":"  protected void fillByteValues( ByteValues vals, IndexReader reader, String field ) throws IOException\r\n  {\r\n    if( parser == null ) {\r\n      parser = FieldCache.DEFAULT_BYTE_PARSER;\r\n    }\r\n    assertSameParserAndResetCounts(vals, parser);\r\n\r\n    Terms terms = MultiFields.getTerms(reader, field);\r\n    int maxDoc = reader.maxDoc();\r\n    vals.values = new byte[maxDoc];\r\n    if (terms != null) {\r\n      final TermsEnum termsEnum = terms.iterator();\r\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\r\n      OpenBitSet validBits = (hasOption(OPTION_CACHE_BITS)) ? new OpenBitSet( maxDoc ) : null;\r\n      DocsEnum docs = null;\r\n      try {\r\n        while(true) {\r\n          final BytesRef term = termsEnum.next();\r\n          if (term == null) {\r\n            break;\r\n          }\r\n          final byte termval = parser.parseByte(term);\r\n          docs = termsEnum.docs(delDocs, docs);\r\n          while (true) {\r\n            final int docID = docs.nextDoc();\r\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\r\n              break;\r\n            }\r\n            vals.values[docID] = termval;\r\n            vals.numDocs++;\r\n            if( validBits != null ) {\r\n              validBits.set( docID );\r\n            }\r\n          }\r\n          vals.numTerms++;\r\n        }\r\n      } catch (FieldCache.StopFillCacheException stop) {}\r\n\r\n      if( vals.valid == null ) {\r\n        vals.valid = checkMatchAllBits( delDocs, validBits, vals.numDocs, maxDoc );\r\n      }\r\n    }\r\n    if( vals.valid == null && vals.numDocs < 1 ) {\r\n      vals.valid = new Bits.MatchNoBits( maxDoc );\r\n    }\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5637938a7dc36e7ff09a5d9398957bd46b15129a","date":1285538458,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/cache/ByteValuesCreator#fillByteValues(ByteValues,IndexReader,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/cache/ByteValuesCreator#fillByteValues(ByteValues,IndexReader,String).mjava","sourceNew":"  protected void fillByteValues( ByteValues vals, IndexReader reader, String field ) throws IOException\n  {\n    if( parser == null ) {\n      parser = FieldCache.DEFAULT_BYTE_PARSER;\n    }\n    assertSameParserAndResetCounts(vals, parser);\n\n    Terms terms = MultiFields.getTerms(reader, field);\n    int maxDoc = reader.maxDoc();\n    vals.values = new byte[maxDoc];\n    if (terms != null) {\n      final TermsEnum termsEnum = terms.iterator();\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\n      OpenBitSet validBits = (hasOption(OPTION_CACHE_BITS)) ? new OpenBitSet( maxDoc ) : null;\n      DocsEnum docs = null;\n      try {\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          final byte termval = parser.parseByte(term);\n          docs = termsEnum.docs(delDocs, docs);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            vals.values[docID] = termval;\n            vals.numDocs++;\n            if( validBits != null ) {\n              validBits.set( docID );\n            }\n          }\n          vals.numTerms++;\n        }\n      } catch (FieldCache.StopFillCacheException stop) {}\n\n      if( vals.valid == null ) {\n        vals.valid = checkMatchAllBits( delDocs, validBits, vals.numDocs, maxDoc );\n      }\n    }\n    if( vals.valid == null && vals.numDocs < 1 ) {\n      vals.valid = new Bits.MatchNoBits( maxDoc );\n    }\n  }\n\n","sourceOld":"  protected void fillByteValues( ByteValues vals, IndexReader reader, String field ) throws IOException\r\n  {\r\n    if( parser == null ) {\r\n      parser = FieldCache.DEFAULT_BYTE_PARSER;\r\n    }\r\n    assertSameParserAndResetCounts(vals, parser);\r\n\r\n    Terms terms = MultiFields.getTerms(reader, field);\r\n    int maxDoc = reader.maxDoc();\r\n    vals.values = new byte[maxDoc];\r\n    if (terms != null) {\r\n      final TermsEnum termsEnum = terms.iterator();\r\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\r\n      OpenBitSet validBits = (hasOption(OPTION_CACHE_BITS)) ? new OpenBitSet( maxDoc ) : null;\r\n      DocsEnum docs = null;\r\n      try {\r\n        while(true) {\r\n          final BytesRef term = termsEnum.next();\r\n          if (term == null) {\r\n            break;\r\n          }\r\n          final byte termval = parser.parseByte(term);\r\n          docs = termsEnum.docs(delDocs, docs);\r\n          while (true) {\r\n            final int docID = docs.nextDoc();\r\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\r\n              break;\r\n            }\r\n            vals.values[docID] = termval;\r\n            vals.numDocs++;\r\n            if( validBits != null ) {\r\n              validBits.set( docID );\r\n            }\r\n          }\r\n          vals.numTerms++;\r\n        }\r\n      } catch (FieldCache.StopFillCacheException stop) {}\r\n\r\n      if( vals.valid == null ) {\r\n        vals.valid = checkMatchAllBits( delDocs, validBits, vals.numDocs, maxDoc );\r\n      }\r\n    }\r\n    if( vals.valid == null && vals.numDocs < 1 ) {\r\n      vals.valid = new Bits.MatchNoBits( maxDoc );\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":["eee24cbec95372b8e747bf9146a5ef33734029a6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"92178e7f4068ab2271de48948e794efaf630d6b1","date":1285551683,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/cache/ByteValuesCreator#fillByteValues(ByteValues,IndexReader,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/cache/ByteValuesCreator#fillByteValues(ByteValues,IndexReader,String).mjava","sourceNew":"  protected void fillByteValues( ByteValues vals, IndexReader reader, String field ) throws IOException\n  {\n    if( parser == null ) {\n      parser = FieldCache.DEFAULT_BYTE_PARSER;\n    }\n    setParserAndResetCounts(vals, parser);\n\n    Terms terms = MultiFields.getTerms(reader, field);\n    int maxDoc = reader.maxDoc();\n    vals.values = new byte[maxDoc];\n    if (terms != null) {\n      final TermsEnum termsEnum = terms.iterator();\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\n      OpenBitSet validBits = (hasOption(OPTION_CACHE_BITS)) ? new OpenBitSet( maxDoc ) : null;\n      DocsEnum docs = null;\n      try {\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          final byte termval = parser.parseByte(term);\n          docs = termsEnum.docs(delDocs, docs);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            vals.values[docID] = termval;\n            vals.numDocs++;\n            if( validBits != null ) {\n              validBits.set( docID );\n            }\n          }\n          vals.numTerms++;\n        }\n      } catch (FieldCache.StopFillCacheException stop) {}\n\n      if( vals.valid == null ) {\n        vals.valid = checkMatchAllBits( delDocs, validBits, vals.numDocs, maxDoc );\n      }\n    }\n    if( vals.valid == null && vals.numDocs < 1 ) {\n      vals.valid = new Bits.MatchNoBits( maxDoc );\n    }\n  }\n\n","sourceOld":"  protected void fillByteValues( ByteValues vals, IndexReader reader, String field ) throws IOException\n  {\n    if( parser == null ) {\n      parser = FieldCache.DEFAULT_BYTE_PARSER;\n    }\n    assertSameParserAndResetCounts(vals, parser);\n\n    Terms terms = MultiFields.getTerms(reader, field);\n    int maxDoc = reader.maxDoc();\n    vals.values = new byte[maxDoc];\n    if (terms != null) {\n      final TermsEnum termsEnum = terms.iterator();\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\n      OpenBitSet validBits = (hasOption(OPTION_CACHE_BITS)) ? new OpenBitSet( maxDoc ) : null;\n      DocsEnum docs = null;\n      try {\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          final byte termval = parser.parseByte(term);\n          docs = termsEnum.docs(delDocs, docs);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            vals.values[docID] = termval;\n            vals.numDocs++;\n            if( validBits != null ) {\n              validBits.set( docID );\n            }\n          }\n          vals.numTerms++;\n        }\n      } catch (FieldCache.StopFillCacheException stop) {}\n\n      if( vals.valid == null ) {\n        vals.valid = checkMatchAllBits( delDocs, validBits, vals.numDocs, maxDoc );\n      }\n    }\n    if( vals.valid == null && vals.numDocs < 1 ) {\n      vals.valid = new Bits.MatchNoBits( maxDoc );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"eee24cbec95372b8e747bf9146a5ef33734029a6","date":1291686380,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/cache/ByteValuesCreator#fillByteValues(ByteValues,IndexReader,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/cache/ByteValuesCreator#fillByteValues(ByteValues,IndexReader,String).mjava","sourceNew":"  protected void fillByteValues( ByteValues vals, IndexReader reader, String field ) throws IOException\n  {\n    if( parser == null ) {\n      parser = FieldCache.DEFAULT_BYTE_PARSER;\n    }\n    setParserAndResetCounts(vals, parser);\n\n    Terms terms = MultiFields.getTerms(reader, field);\n    int maxDoc = reader.maxDoc();\n    vals.values = new byte[maxDoc];\n    if (terms != null) {\n      final TermsEnum termsEnum = terms.iterator();\n      OpenBitSet validBits = (hasOption(OPTION_CACHE_BITS)) ? new OpenBitSet( maxDoc ) : null;\n      DocsEnum docs = null;\n      try {\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          final byte termval = parser.parseByte(term);\n          docs = termsEnum.docs(null, docs);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            vals.values[docID] = termval;\n            vals.numDocs++;\n            if( validBits != null ) {\n              validBits.set( docID );\n            }\n          }\n          vals.numTerms++;\n        }\n      } catch (FieldCache.StopFillCacheException stop) {}\n\n      if( vals.valid == null ) {\n        vals.valid = checkMatchAllBits( validBits, vals.numDocs, maxDoc );\n      }\n    }\n    if( vals.valid == null && vals.numDocs < 1 ) {\n      vals.valid = new Bits.MatchNoBits( maxDoc );\n    }\n  }\n\n","sourceOld":"  protected void fillByteValues( ByteValues vals, IndexReader reader, String field ) throws IOException\n  {\n    if( parser == null ) {\n      parser = FieldCache.DEFAULT_BYTE_PARSER;\n    }\n    setParserAndResetCounts(vals, parser);\n\n    Terms terms = MultiFields.getTerms(reader, field);\n    int maxDoc = reader.maxDoc();\n    vals.values = new byte[maxDoc];\n    if (terms != null) {\n      final TermsEnum termsEnum = terms.iterator();\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\n      OpenBitSet validBits = (hasOption(OPTION_CACHE_BITS)) ? new OpenBitSet( maxDoc ) : null;\n      DocsEnum docs = null;\n      try {\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          final byte termval = parser.parseByte(term);\n          docs = termsEnum.docs(delDocs, docs);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            vals.values[docID] = termval;\n            vals.numDocs++;\n            if( validBits != null ) {\n              validBits.set( docID );\n            }\n          }\n          vals.numTerms++;\n        }\n      } catch (FieldCache.StopFillCacheException stop) {}\n\n      if( vals.valid == null ) {\n        vals.valid = checkMatchAllBits( delDocs, validBits, vals.numDocs, maxDoc );\n      }\n    }\n    if( vals.valid == null && vals.numDocs < 1 ) {\n      vals.valid = new Bits.MatchNoBits( maxDoc );\n    }\n  }\n\n","bugFix":["5637938a7dc36e7ff09a5d9398957bd46b15129a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a69e5860d014751cc9329dfeb441a6d8fd1ed8e","date":1291833341,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/cache/ByteValuesCreator#fillByteValues(ByteValues,IndexReader,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/cache/ByteValuesCreator#fillByteValues(ByteValues,IndexReader,String).mjava","sourceNew":"  protected void fillByteValues( ByteValues vals, IndexReader reader, String field ) throws IOException\n  {\n    if( parser == null ) {\n      parser = FieldCache.DEFAULT_BYTE_PARSER;\n    }\n    setParserAndResetCounts(vals, parser);\n\n    Terms terms = MultiFields.getTerms(reader, field);\n    int maxDoc = reader.maxDoc();\n    vals.values = new byte[maxDoc];\n    if (terms != null) {\n      final TermsEnum termsEnum = terms.iterator();\n      OpenBitSet validBits = (hasOption(OPTION_CACHE_BITS)) ? new OpenBitSet( maxDoc ) : null;\n      DocsEnum docs = null;\n      try {\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          final byte termval = parser.parseByte(term);\n          docs = termsEnum.docs(null, docs);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            vals.values[docID] = termval;\n            vals.numDocs++;\n            if( validBits != null ) {\n              validBits.set( docID );\n            }\n          }\n          vals.numTerms++;\n        }\n      } catch (FieldCache.StopFillCacheException stop) {}\n\n      if( vals.valid == null ) {\n        vals.valid = checkMatchAllBits( validBits, vals.numDocs, maxDoc );\n      }\n    }\n    if( vals.valid == null && vals.numDocs < 1 ) {\n      vals.valid = new Bits.MatchNoBits( maxDoc );\n    }\n  }\n\n","sourceOld":"  protected void fillByteValues( ByteValues vals, IndexReader reader, String field ) throws IOException\n  {\n    if( parser == null ) {\n      parser = FieldCache.DEFAULT_BYTE_PARSER;\n    }\n    setParserAndResetCounts(vals, parser);\n\n    Terms terms = MultiFields.getTerms(reader, field);\n    int maxDoc = reader.maxDoc();\n    vals.values = new byte[maxDoc];\n    if (terms != null) {\n      final TermsEnum termsEnum = terms.iterator();\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\n      OpenBitSet validBits = (hasOption(OPTION_CACHE_BITS)) ? new OpenBitSet( maxDoc ) : null;\n      DocsEnum docs = null;\n      try {\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          final byte termval = parser.parseByte(term);\n          docs = termsEnum.docs(delDocs, docs);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            vals.values[docID] = termval;\n            vals.numDocs++;\n            if( validBits != null ) {\n              validBits.set( docID );\n            }\n          }\n          vals.numTerms++;\n        }\n      } catch (FieldCache.StopFillCacheException stop) {}\n\n      if( vals.valid == null ) {\n        vals.valid = checkMatchAllBits( delDocs, validBits, vals.numDocs, maxDoc );\n      }\n    }\n    if( vals.valid == null && vals.numDocs < 1 ) {\n      vals.valid = new Bits.MatchNoBits( maxDoc );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/cache/ByteValuesCreator#fillByteValues(ByteValues,IndexReader,String).mjava","pathOld":"/dev/null","sourceNew":"  protected void fillByteValues( ByteValues vals, IndexReader reader, String field ) throws IOException\n  {\n    if( parser == null ) {\n      parser = FieldCache.DEFAULT_BYTE_PARSER;\n    }\n    setParserAndResetCounts(vals, parser);\n\n    Terms terms = MultiFields.getTerms(reader, field);\n    int maxDoc = reader.maxDoc();\n    vals.values = new byte[maxDoc];\n    if (terms != null) {\n      final TermsEnum termsEnum = terms.iterator();\n      OpenBitSet validBits = (hasOption(OPTION_CACHE_BITS)) ? new OpenBitSet( maxDoc ) : null;\n      DocsEnum docs = null;\n      try {\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          final byte termval = parser.parseByte(term);\n          docs = termsEnum.docs(null, docs);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            vals.values[docID] = termval;\n            vals.numDocs++;\n            if( validBits != null ) {\n              validBits.set( docID );\n            }\n          }\n          vals.numTerms++;\n        }\n      } catch (FieldCache.StopFillCacheException stop) {}\n\n      if( vals.valid == null ) {\n        vals.valid = checkMatchAllBits( validBits, vals.numDocs, maxDoc );\n      }\n    }\n    if( vals.valid == null && vals.numDocs < 1 ) {\n      vals.valid = new Bits.MatchNoBits( maxDoc );\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f","date":1310403131,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/cache/ByteValuesCreator#fillByteValues(ByteValues,IndexReader,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/cache/ByteValuesCreator#fillByteValues(ByteValues,IndexReader,String).mjava","sourceNew":"  protected void fillByteValues( ByteValues vals, IndexReader reader, String field ) throws IOException\n  {\n    if( parser == null ) {\n      parser = FieldCache.DEFAULT_BYTE_PARSER;\n    }\n    setParserAndResetCounts(vals, parser);\n\n    Terms terms = MultiFields.getTerms(reader, field);\n    int maxDoc = reader.maxDoc();\n    vals.values = new byte[maxDoc];\n    if (terms != null) {\n      final TermsEnum termsEnum = terms.iterator();\n      FixedBitSet validBits = (hasOption(OPTION_CACHE_BITS)) ? new FixedBitSet( maxDoc ) : null;\n      DocsEnum docs = null;\n      try {\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          final byte termval = parser.parseByte(term);\n          docs = termsEnum.docs(null, docs);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            vals.values[docID] = termval;\n            vals.numDocs++;\n            if( validBits != null ) {\n              validBits.set( docID );\n            }\n          }\n          vals.numTerms++;\n        }\n      } catch (FieldCache.StopFillCacheException stop) {}\n\n      if( vals.valid == null ) {\n        vals.valid = checkMatchAllBits( validBits, vals.numDocs, maxDoc );\n      }\n    }\n    if( vals.valid == null && vals.numDocs < 1 ) {\n      vals.valid = new Bits.MatchNoBits( maxDoc );\n    }\n  }\n\n","sourceOld":"  protected void fillByteValues( ByteValues vals, IndexReader reader, String field ) throws IOException\n  {\n    if( parser == null ) {\n      parser = FieldCache.DEFAULT_BYTE_PARSER;\n    }\n    setParserAndResetCounts(vals, parser);\n\n    Terms terms = MultiFields.getTerms(reader, field);\n    int maxDoc = reader.maxDoc();\n    vals.values = new byte[maxDoc];\n    if (terms != null) {\n      final TermsEnum termsEnum = terms.iterator();\n      OpenBitSet validBits = (hasOption(OPTION_CACHE_BITS)) ? new OpenBitSet( maxDoc ) : null;\n      DocsEnum docs = null;\n      try {\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          final byte termval = parser.parseByte(term);\n          docs = termsEnum.docs(null, docs);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            vals.values[docID] = termval;\n            vals.numDocs++;\n            if( validBits != null ) {\n              validBits.set( docID );\n            }\n          }\n          vals.numTerms++;\n        }\n      } catch (FieldCache.StopFillCacheException stop) {}\n\n      if( vals.valid == null ) {\n        vals.valid = checkMatchAllBits( validBits, vals.numDocs, maxDoc );\n      }\n    }\n    if( vals.valid == null && vals.numDocs < 1 ) {\n      vals.valid = new Bits.MatchNoBits( maxDoc );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"382fe3a6ca9745891afebda9b9a57cc158305545","date":1320952430,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/cache/ByteValuesCreator#fillByteValues(ByteValues,IndexReader,String).mjava","sourceNew":null,"sourceOld":"  protected void fillByteValues( ByteValues vals, IndexReader reader, String field ) throws IOException\n  {\n    if( parser == null ) {\n      parser = FieldCache.DEFAULT_BYTE_PARSER;\n    }\n    setParserAndResetCounts(vals, parser);\n\n    Terms terms = MultiFields.getTerms(reader, field);\n    int maxDoc = reader.maxDoc();\n    vals.values = new byte[maxDoc];\n    if (terms != null) {\n      final TermsEnum termsEnum = terms.iterator();\n      FixedBitSet validBits = (hasOption(OPTION_CACHE_BITS)) ? new FixedBitSet( maxDoc ) : null;\n      DocsEnum docs = null;\n      try {\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          final byte termval = parser.parseByte(term);\n          docs = termsEnum.docs(null, docs);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            vals.values[docID] = termval;\n            vals.numDocs++;\n            if( validBits != null ) {\n              validBits.set( docID );\n            }\n          }\n          vals.numTerms++;\n        }\n      } catch (FieldCache.StopFillCacheException stop) {}\n\n      if( vals.valid == null ) {\n        vals.valid = checkMatchAllBits( validBits, vals.numDocs, maxDoc );\n      }\n    }\n    if( vals.valid == null && vals.numDocs < 1 ) {\n      vals.valid = new Bits.MatchNoBits( maxDoc );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eee9156bf08d7eaae5e8d8ab5f855ba61012e257":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"92178e7f4068ab2271de48948e794efaf630d6b1":["5637938a7dc36e7ff09a5d9398957bd46b15129a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4a69e5860d014751cc9329dfeb441a6d8fd1ed8e":["92178e7f4068ab2271de48948e794efaf630d6b1"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eee24cbec95372b8e747bf9146a5ef33734029a6"],"382fe3a6ca9745891afebda9b9a57cc158305545":["c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f"],"5637938a7dc36e7ff09a5d9398957bd46b15129a":["eee9156bf08d7eaae5e8d8ab5f855ba61012e257"],"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f":["eee24cbec95372b8e747bf9146a5ef33734029a6"],"eee24cbec95372b8e747bf9146a5ef33734029a6":["92178e7f4068ab2271de48948e794efaf630d6b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["382fe3a6ca9745891afebda9b9a57cc158305545"]},"commit2Childs":{"eee9156bf08d7eaae5e8d8ab5f855ba61012e257":["5637938a7dc36e7ff09a5d9398957bd46b15129a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eee9156bf08d7eaae5e8d8ab5f855ba61012e257","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"92178e7f4068ab2271de48948e794efaf630d6b1":["4a69e5860d014751cc9329dfeb441a6d8fd1ed8e","eee24cbec95372b8e747bf9146a5ef33734029a6"],"4a69e5860d014751cc9329dfeb441a6d8fd1ed8e":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"5637938a7dc36e7ff09a5d9398957bd46b15129a":["92178e7f4068ab2271de48948e794efaf630d6b1"],"382fe3a6ca9745891afebda9b9a57cc158305545":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"eee24cbec95372b8e747bf9146a5ef33734029a6":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f"],"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f":["382fe3a6ca9745891afebda9b9a57cc158305545"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4a69e5860d014751cc9329dfeb441a6d8fd1ed8e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}