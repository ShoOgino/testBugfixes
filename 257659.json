{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemmer#applyAffix(char[],int,HunspellAffix,int).mjava","commits":[{"id":"8f976917c54bb925b908d73fc4c2092e4abb8508","date":1315634439,"type":0,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemmer#applyAffix(char[],int,HunspellAffix,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Applies the affix rule to the given word, producing a list of stems if any are found\n   *\n   * @param strippedWord Word the affix has been removed and the strip added\n   * @param affix HunspellAffix representing the affix rule itself\n   * @param recursionDepth Level of recursion this stemming step is at\n   * @return List of stems for the word, or an empty list if none are found\n   */\n  @SuppressWarnings(\"unchecked\")\n  public List<Stem> applyAffix(char strippedWord[], int length, HunspellAffix affix, int recursionDepth) {\n    segment.setLength(0);\n    segment.append(strippedWord, 0, length);\n    if (!affix.checkCondition(segment)) {\n      return Collections.EMPTY_LIST;\n    }\n\n    List<Stem> stems = new ArrayList<Stem>();\n    \n    List<HunspellWord> words = dictionary.lookupWord(strippedWord, 0, length);\n    if (words != null) {\n      for (HunspellWord hunspellWord : words) {\n        if (hunspellWord.hasFlag(affix.getFlag())) {\n          stems.add(new Stem(strippedWord, length));\n        }\n      }\n    }\n\n    if (affix.isCrossProduct() && recursionDepth < RECURSION_CAP) {\n      stems.addAll(stem(strippedWord, length, affix.getAppendFlags(), ++recursionDepth));\n    }\n\n    return stems;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77d6144bb77983c683128c11b708057809173cff","date":1317852535,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemmer#applyAffix(char[],int,HunspellAffix,int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemmer#applyAffix(char[],int,HunspellAffix,int).mjava","sourceNew":"  /**\n   * Applies the affix rule to the given word, producing a list of stems if any are found\n   *\n   * @param strippedWord Word the affix has been removed and the strip added\n   * @param affix HunspellAffix representing the affix rule itself\n   * @param recursionDepth Level of recursion this stemming step is at\n   * @return List of stems for the word, or an empty list if none are found\n   */\n  @SuppressWarnings(\"unchecked\")\n  public List<Stem> applyAffix(char strippedWord[], int length, HunspellAffix affix, int recursionDepth) {\n    if(dictionary.isIgnoreCase()) {\n      for(int i=0;i<strippedWord.length;){\n        i += Character.toChars(\n              Character.toLowerCase(charUtils.codePointAt(strippedWord, i)), strippedWord, i);\n      }\n    }\n    segment.setLength(0);\n    segment.append(strippedWord, 0, length);\n    if (!affix.checkCondition(segment)) {\n      return Collections.EMPTY_LIST;\n    }\n\n    List<Stem> stems = new ArrayList<Stem>();\n\n    List<HunspellWord> words = dictionary.lookupWord(strippedWord, 0, length);\n    if (words != null) {\n      for (HunspellWord hunspellWord : words) {\n        if (hunspellWord.hasFlag(affix.getFlag())) {\n          stems.add(new Stem(strippedWord, length));\n        }\n      }\n    }\n\n    if (affix.isCrossProduct() && recursionDepth < RECURSION_CAP) {\n      stems.addAll(stem(strippedWord, length, affix.getAppendFlags(), ++recursionDepth));\n    }\n\n    return stems;\n  }\n\n","sourceOld":"  /**\n   * Applies the affix rule to the given word, producing a list of stems if any are found\n   *\n   * @param strippedWord Word the affix has been removed and the strip added\n   * @param affix HunspellAffix representing the affix rule itself\n   * @param recursionDepth Level of recursion this stemming step is at\n   * @return List of stems for the word, or an empty list if none are found\n   */\n  @SuppressWarnings(\"unchecked\")\n  public List<Stem> applyAffix(char strippedWord[], int length, HunspellAffix affix, int recursionDepth) {\n    segment.setLength(0);\n    segment.append(strippedWord, 0, length);\n    if (!affix.checkCondition(segment)) {\n      return Collections.EMPTY_LIST;\n    }\n\n    List<Stem> stems = new ArrayList<Stem>();\n    \n    List<HunspellWord> words = dictionary.lookupWord(strippedWord, 0, length);\n    if (words != null) {\n      for (HunspellWord hunspellWord : words) {\n        if (hunspellWord.hasFlag(affix.getFlag())) {\n          stems.add(new Stem(strippedWord, length));\n        }\n      }\n    }\n\n    if (affix.isCrossProduct() && recursionDepth < RECURSION_CAP) {\n      stems.addAll(stem(strippedWord, length, affix.getAppendFlags(), ++recursionDepth));\n    }\n\n    return stems;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemmer#applyAffix(char[],int,HunspellAffix,int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemmer#applyAffix(char[],int,HunspellAffix,int).mjava","sourceNew":"  /**\n   * Applies the affix rule to the given word, producing a list of stems if any are found\n   *\n   * @param strippedWord Word the affix has been removed and the strip added\n   * @param affix HunspellAffix representing the affix rule itself\n   * @param recursionDepth Level of recursion this stemming step is at\n   * @return List of stems for the word, or an empty list if none are found\n   */\n  @SuppressWarnings(\"unchecked\")\n  public List<Stem> applyAffix(char strippedWord[], int length, HunspellAffix affix, int recursionDepth) {\n    if(dictionary.isIgnoreCase()) {\n      for(int i=0;i<strippedWord.length;){\n        i += Character.toChars(\n              Character.toLowerCase(charUtils.codePointAt(strippedWord, i)), strippedWord, i);\n      }\n    }\n    segment.setLength(0);\n    segment.append(strippedWord, 0, length);\n    if (!affix.checkCondition(segment)) {\n      return Collections.EMPTY_LIST;\n    }\n\n    List<Stem> stems = new ArrayList<Stem>();\n\n    List<HunspellWord> words = dictionary.lookupWord(strippedWord, 0, length);\n    if (words != null) {\n      for (HunspellWord hunspellWord : words) {\n        if (hunspellWord.hasFlag(affix.getFlag())) {\n          stems.add(new Stem(strippedWord, length));\n        }\n      }\n    }\n\n    if (affix.isCrossProduct() && recursionDepth < RECURSION_CAP) {\n      stems.addAll(stem(strippedWord, length, affix.getAppendFlags(), ++recursionDepth));\n    }\n\n    return stems;\n  }\n\n","sourceOld":"  /**\n   * Applies the affix rule to the given word, producing a list of stems if any are found\n   *\n   * @param strippedWord Word the affix has been removed and the strip added\n   * @param affix HunspellAffix representing the affix rule itself\n   * @param recursionDepth Level of recursion this stemming step is at\n   * @return List of stems for the word, or an empty list if none are found\n   */\n  @SuppressWarnings(\"unchecked\")\n  public List<Stem> applyAffix(char strippedWord[], int length, HunspellAffix affix, int recursionDepth) {\n    if(dictionary.isIgnoreCase()) {\n      for(int i=0;i<strippedWord.length;){\n        i += Character.toChars(\n              Character.toLowerCase(charUtils.codePointAt(strippedWord, i)), strippedWord, i);\n      }\n    }\n    segment.setLength(0);\n    segment.append(strippedWord, 0, length);\n    if (!affix.checkCondition(segment)) {\n      return Collections.EMPTY_LIST;\n    }\n\n    List<Stem> stems = new ArrayList<Stem>();\n\n    List<HunspellWord> words = dictionary.lookupWord(strippedWord, 0, length);\n    if (words != null) {\n      for (HunspellWord hunspellWord : words) {\n        if (hunspellWord.hasFlag(affix.getFlag())) {\n          stems.add(new Stem(strippedWord, length));\n        }\n      }\n    }\n\n    if (affix.isCrossProduct() && recursionDepth < RECURSION_CAP) {\n      stems.addAll(stem(strippedWord, length, affix.getAppendFlags(), ++recursionDepth));\n    }\n\n    return stems;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["77d6144bb77983c683128c11b708057809173cff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8f976917c54bb925b908d73fc4c2092e4abb8508":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"77d6144bb77983c683128c11b708057809173cff":["8f976917c54bb925b908d73fc4c2092e4abb8508"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8f976917c54bb925b908d73fc4c2092e4abb8508"],"8f976917c54bb925b908d73fc4c2092e4abb8508":["77d6144bb77983c683128c11b708057809173cff"],"77d6144bb77983c683128c11b708057809173cff":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}