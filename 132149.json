{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/RegExp#makeConcatenation(RegExp,RegExp).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RegExp#makeConcatenation(RegExp,RegExp).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/RegExp#makeConcatenation(RegExp,RegExp).mjava","sourceNew":"  static RegExp makeConcatenation(RegExp exp1, RegExp exp2) {\n    if ((exp1.kind == Kind.REGEXP_CHAR || exp1.kind == Kind.REGEXP_STRING)\n        && (exp2.kind == Kind.REGEXP_CHAR || exp2.kind == Kind.REGEXP_STRING)) return makeString(\n        exp1, exp2);\n    RegExp r = new RegExp();\n    r.kind = Kind.REGEXP_CONCATENATION;\n    if (exp1.kind == Kind.REGEXP_CONCATENATION\n        && (exp1.exp2.kind == Kind.REGEXP_CHAR || exp1.exp2.kind == Kind.REGEXP_STRING)\n        && (exp2.kind == Kind.REGEXP_CHAR || exp2.kind == Kind.REGEXP_STRING)) {\n      r.exp1 = exp1.exp1;\n      r.exp2 = makeString(exp1.exp2, exp2);\n    } else if ((exp1.kind == Kind.REGEXP_CHAR || exp1.kind == Kind.REGEXP_STRING)\n        && exp2.kind == Kind.REGEXP_CONCATENATION\n        && (exp2.exp1.kind == Kind.REGEXP_CHAR || exp2.exp1.kind == Kind.REGEXP_STRING)) {\n      r.exp1 = makeString(exp1, exp2.exp1);\n      r.exp2 = exp2.exp2;\n    } else {\n      r.exp1 = exp1;\n      r.exp2 = exp2;\n    }\n    return r;\n  }\n\n","sourceOld":"  static RegExp makeConcatenation(RegExp exp1, RegExp exp2) {\n    if ((exp1.kind == Kind.REGEXP_CHAR || exp1.kind == Kind.REGEXP_STRING)\n        && (exp2.kind == Kind.REGEXP_CHAR || exp2.kind == Kind.REGEXP_STRING)) return makeString(\n        exp1, exp2);\n    RegExp r = new RegExp();\n    r.kind = Kind.REGEXP_CONCATENATION;\n    if (exp1.kind == Kind.REGEXP_CONCATENATION\n        && (exp1.exp2.kind == Kind.REGEXP_CHAR || exp1.exp2.kind == Kind.REGEXP_STRING)\n        && (exp2.kind == Kind.REGEXP_CHAR || exp2.kind == Kind.REGEXP_STRING)) {\n      r.exp1 = exp1.exp1;\n      r.exp2 = makeString(exp1.exp2, exp2);\n    } else if ((exp1.kind == Kind.REGEXP_CHAR || exp1.kind == Kind.REGEXP_STRING)\n        && exp2.kind == Kind.REGEXP_CONCATENATION\n        && (exp2.exp1.kind == Kind.REGEXP_CHAR || exp2.exp1.kind == Kind.REGEXP_STRING)) {\n      r.exp1 = makeString(exp1, exp2.exp1);\n      r.exp2 = exp2.exp2;\n    } else {\n      r.exp1 = exp1;\n      r.exp2 = exp2;\n    }\n    return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f5a00161ccf0dbc1776573f3940a7f35163d6c6","date":1589906280,"type":3,"author":"markharwood","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RegExp#makeConcatenation(RegExp,RegExp).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/RegExp#makeConcatenation(RegExp,RegExp).mjava","sourceNew":"  static RegExp makeConcatenation(RegExp exp1, RegExp exp2) {\n    if ((exp1.kind == Kind.REGEXP_CHAR || exp1.kind == Kind.REGEXP_STRING)\n        && (exp2.kind == Kind.REGEXP_CHAR || exp2.kind == Kind.REGEXP_STRING)) return makeString(\n        exp1, exp2);\n    RegExp rexp1, rexp2;\n    if (exp1.kind == Kind.REGEXP_CONCATENATION\n        && (exp1.exp2.kind == Kind.REGEXP_CHAR || exp1.exp2.kind == Kind.REGEXP_STRING)\n        && (exp2.kind == Kind.REGEXP_CHAR || exp2.kind == Kind.REGEXP_STRING)) {\n      rexp1 = exp1.exp1;\n      rexp2 = makeString(exp1.exp2, exp2);\n    } else if ((exp1.kind == Kind.REGEXP_CHAR || exp1.kind == Kind.REGEXP_STRING)\n        && exp2.kind == Kind.REGEXP_CONCATENATION\n        && (exp2.exp1.kind == Kind.REGEXP_CHAR || exp2.exp1.kind == Kind.REGEXP_STRING)) {\n      rexp1 = makeString(exp1, exp2.exp1);\n      rexp2 = exp2.exp2;\n    } else {\n      rexp1 = exp1;\n      rexp2 = exp2;\n    }\n    return newContainerNode(Kind.REGEXP_CONCATENATION, rexp1, rexp2);\n  }\n\n","sourceOld":"  static RegExp makeConcatenation(RegExp exp1, RegExp exp2) {\n    if ((exp1.kind == Kind.REGEXP_CHAR || exp1.kind == Kind.REGEXP_STRING)\n        && (exp2.kind == Kind.REGEXP_CHAR || exp2.kind == Kind.REGEXP_STRING)) return makeString(\n        exp1, exp2);\n    RegExp r = new RegExp();\n    r.kind = Kind.REGEXP_CONCATENATION;\n    if (exp1.kind == Kind.REGEXP_CONCATENATION\n        && (exp1.exp2.kind == Kind.REGEXP_CHAR || exp1.exp2.kind == Kind.REGEXP_STRING)\n        && (exp2.kind == Kind.REGEXP_CHAR || exp2.kind == Kind.REGEXP_STRING)) {\n      r.exp1 = exp1.exp1;\n      r.exp2 = makeString(exp1.exp2, exp2);\n    } else if ((exp1.kind == Kind.REGEXP_CHAR || exp1.kind == Kind.REGEXP_STRING)\n        && exp2.kind == Kind.REGEXP_CONCATENATION\n        && (exp2.exp1.kind == Kind.REGEXP_CHAR || exp2.exp1.kind == Kind.REGEXP_STRING)) {\n      r.exp1 = makeString(exp1, exp2.exp1);\n      r.exp2 = exp2.exp2;\n    } else {\n      r.exp1 = exp1;\n      r.exp2 = exp2;\n    }\n    return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0785d1d3506a0f4d8fd4adc2efe29f0e1a9c2601","date":1594220892,"type":5,"author":"markharwood","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RegExp#makeConcatenation(int,RegExp,RegExp).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/RegExp#makeConcatenation(RegExp,RegExp).mjava","sourceNew":"  static RegExp makeConcatenation(int flags, RegExp exp1, RegExp exp2) {\n    if ((exp1.kind == Kind.REGEXP_CHAR || exp1.kind == Kind.REGEXP_STRING)\n        && (exp2.kind == Kind.REGEXP_CHAR || exp2.kind == Kind.REGEXP_STRING)) return makeString(\n            flags, exp1, exp2);\n    RegExp rexp1, rexp2;\n    if (exp1.kind == Kind.REGEXP_CONCATENATION\n        && (exp1.exp2.kind == Kind.REGEXP_CHAR || exp1.exp2.kind == Kind.REGEXP_STRING)\n        && (exp2.kind == Kind.REGEXP_CHAR || exp2.kind == Kind.REGEXP_STRING)) {\n      rexp1 = exp1.exp1;\n      rexp2 = makeString(flags, exp1.exp2, exp2);\n    } else if ((exp1.kind == Kind.REGEXP_CHAR || exp1.kind == Kind.REGEXP_STRING)\n        && exp2.kind == Kind.REGEXP_CONCATENATION\n        && (exp2.exp1.kind == Kind.REGEXP_CHAR || exp2.exp1.kind == Kind.REGEXP_STRING)) {\n      rexp1 = makeString(flags, exp1, exp2.exp1);\n      rexp2 = exp2.exp2;\n    } else {\n      rexp1 = exp1;\n      rexp2 = exp2;\n    }\n    return newContainerNode(flags, Kind.REGEXP_CONCATENATION, rexp1, rexp2);\n  }\n\n","sourceOld":"  static RegExp makeConcatenation(RegExp exp1, RegExp exp2) {\n    if ((exp1.kind == Kind.REGEXP_CHAR || exp1.kind == Kind.REGEXP_STRING)\n        && (exp2.kind == Kind.REGEXP_CHAR || exp2.kind == Kind.REGEXP_STRING)) return makeString(\n        exp1, exp2);\n    RegExp rexp1, rexp2;\n    if (exp1.kind == Kind.REGEXP_CONCATENATION\n        && (exp1.exp2.kind == Kind.REGEXP_CHAR || exp1.exp2.kind == Kind.REGEXP_STRING)\n        && (exp2.kind == Kind.REGEXP_CHAR || exp2.kind == Kind.REGEXP_STRING)) {\n      rexp1 = exp1.exp1;\n      rexp2 = makeString(exp1.exp2, exp2);\n    } else if ((exp1.kind == Kind.REGEXP_CHAR || exp1.kind == Kind.REGEXP_STRING)\n        && exp2.kind == Kind.REGEXP_CONCATENATION\n        && (exp2.exp1.kind == Kind.REGEXP_CHAR || exp2.exp1.kind == Kind.REGEXP_STRING)) {\n      rexp1 = makeString(exp1, exp2.exp1);\n      rexp2 = exp2.exp2;\n    } else {\n      rexp1 = exp1;\n      rexp2 = exp2;\n    }\n    return newContainerNode(Kind.REGEXP_CONCATENATION, rexp1, rexp2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f5a00161ccf0dbc1776573f3940a7f35163d6c6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0785d1d3506a0f4d8fd4adc2efe29f0e1a9c2601":["0f5a00161ccf0dbc1776573f3940a7f35163d6c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0785d1d3506a0f4d8fd4adc2efe29f0e1a9c2601"]},"commit2Childs":{"0f5a00161ccf0dbc1776573f3940a7f35163d6c6":["0785d1d3506a0f4d8fd4adc2efe29f0e1a9c2601"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0f5a00161ccf0dbc1776573f3940a7f35163d6c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0785d1d3506a0f4d8fd4adc2efe29f0e1a9c2601":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}