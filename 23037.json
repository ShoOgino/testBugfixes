{"path":"modules/join/src/test/org/apache/lucene/search/TestBlockJoin#getRandomSort(String,int).mjava","commits":[{"id":"97e30c53fd81463c6ccd52402c91a6548cf42acb","date":1309296018,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/join/src/test/org/apache/lucene/search/TestBlockJoin#getRandomSort(String,int).mjava","pathOld":"/dev/null","sourceNew":"  private Sort getRandomSort(String prefix, int numFields) {\n    final List<SortField> sortFields = new ArrayList<SortField>();\n    // TODO: sometimes sort by score; problem is scores are\n    // not comparable across the two indices\n    // sortFields.add(SortField.FIELD_SCORE);\n    if (random.nextBoolean()) {\n      sortFields.add(new SortField(prefix + random.nextInt(numFields), SortField.Type.STRING, random.nextBoolean()));\n    } else if (random.nextBoolean()) {\n      sortFields.add(new SortField(prefix + random.nextInt(numFields), SortField.Type.STRING, random.nextBoolean()));\n      sortFields.add(new SortField(prefix + random.nextInt(numFields), SortField.Type.STRING, random.nextBoolean()));\n    }\n    // Break ties:\n    sortFields.add(new SortField(prefix + \"ID\", SortField.Type.INT));\n    return new Sort(sortFields.toArray(new SortField[sortFields.size()]));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/join/src/test/org/apache/lucene/search/TestBlockJoin#getRandomSort(String,int).mjava","pathOld":"/dev/null","sourceNew":"  private Sort getRandomSort(String prefix, int numFields) {\n    final List<SortField> sortFields = new ArrayList<SortField>();\n    // TODO: sometimes sort by score; problem is scores are\n    // not comparable across the two indices\n    // sortFields.add(SortField.FIELD_SCORE);\n    if (random.nextBoolean()) {\n      sortFields.add(new SortField(prefix + random.nextInt(numFields), SortField.Type.STRING, random.nextBoolean()));\n    } else if (random.nextBoolean()) {\n      sortFields.add(new SortField(prefix + random.nextInt(numFields), SortField.Type.STRING, random.nextBoolean()));\n      sortFields.add(new SortField(prefix + random.nextInt(numFields), SortField.Type.STRING, random.nextBoolean()));\n    }\n    // Break ties:\n    sortFields.add(new SortField(prefix + \"ID\", SortField.Type.INT));\n    return new Sort(sortFields.toArray(new SortField[sortFields.size()]));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/join/src/test/org/apache/lucene/search/TestBlockJoin#getRandomSort(String,int).mjava","pathOld":"/dev/null","sourceNew":"  private Sort getRandomSort(String prefix, int numFields) {\n    final List<SortField> sortFields = new ArrayList<SortField>();\n    // TODO: sometimes sort by score; problem is scores are\n    // not comparable across the two indices\n    // sortFields.add(SortField.FIELD_SCORE);\n    if (random.nextBoolean()) {\n      sortFields.add(new SortField(prefix + random.nextInt(numFields), SortField.Type.STRING, random.nextBoolean()));\n    } else if (random.nextBoolean()) {\n      sortFields.add(new SortField(prefix + random.nextInt(numFields), SortField.Type.STRING, random.nextBoolean()));\n      sortFields.add(new SortField(prefix + random.nextInt(numFields), SortField.Type.STRING, random.nextBoolean()));\n    }\n    // Break ties:\n    sortFields.add(new SortField(prefix + \"ID\", SortField.Type.INT));\n    return new Sort(sortFields.toArray(new SortField[sortFields.size()]));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f76ccdfca879f9e8881676ce0fb611f44c0f07a2","date":1322905997,"type":5,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin#getRandomSort(String,int).mjava","pathOld":"modules/join/src/test/org/apache/lucene/search/TestBlockJoin#getRandomSort(String,int).mjava","sourceNew":"  private Sort getRandomSort(String prefix, int numFields) {\n    final List<SortField> sortFields = new ArrayList<SortField>();\n    // TODO: sometimes sort by score; problem is scores are\n    // not comparable across the two indices\n    // sortFields.add(SortField.FIELD_SCORE);\n    if (random.nextBoolean()) {\n      sortFields.add(new SortField(prefix + random.nextInt(numFields), SortField.Type.STRING, random.nextBoolean()));\n    } else if (random.nextBoolean()) {\n      sortFields.add(new SortField(prefix + random.nextInt(numFields), SortField.Type.STRING, random.nextBoolean()));\n      sortFields.add(new SortField(prefix + random.nextInt(numFields), SortField.Type.STRING, random.nextBoolean()));\n    }\n    // Break ties:\n    sortFields.add(new SortField(prefix + \"ID\", SortField.Type.INT));\n    return new Sort(sortFields.toArray(new SortField[sortFields.size()]));\n  }\n\n","sourceOld":"  private Sort getRandomSort(String prefix, int numFields) {\n    final List<SortField> sortFields = new ArrayList<SortField>();\n    // TODO: sometimes sort by score; problem is scores are\n    // not comparable across the two indices\n    // sortFields.add(SortField.FIELD_SCORE);\n    if (random.nextBoolean()) {\n      sortFields.add(new SortField(prefix + random.nextInt(numFields), SortField.Type.STRING, random.nextBoolean()));\n    } else if (random.nextBoolean()) {\n      sortFields.add(new SortField(prefix + random.nextInt(numFields), SortField.Type.STRING, random.nextBoolean()));\n      sortFields.add(new SortField(prefix + random.nextInt(numFields), SortField.Type.STRING, random.nextBoolean()));\n    }\n    // Break ties:\n    sortFields.add(new SortField(prefix + \"ID\", SortField.Type.INT));\n    return new Sort(sortFields.toArray(new SortField[sortFields.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97e30c53fd81463c6ccd52402c91a6548cf42acb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f76ccdfca879f9e8881676ce0fb611f44c0f07a2":["97e30c53fd81463c6ccd52402c91a6548cf42acb"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","97e30c53fd81463c6ccd52402c91a6548cf42acb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","97e30c53fd81463c6ccd52402c91a6548cf42acb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f76ccdfca879f9e8881676ce0fb611f44c0f07a2"]},"commit2Childs":{"97e30c53fd81463c6ccd52402c91a6548cf42acb":["f76ccdfca879f9e8881676ce0fb611f44c0f07a2","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["97e30c53fd81463c6ccd52402c91a6548cf42acb","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"f76ccdfca879f9e8881676ce0fb611f44c0f07a2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}