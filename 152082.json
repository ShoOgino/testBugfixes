{"path":"src/java/org/apache/solr/analysis/SynonymFilterFactory#parseRules(List[String],SynonymMap,String,String,boolean).mjava","commits":[{"id":"92335bcfcb7158f0d7417ef5b9ac3a156f5a72ac","date":1201149698,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/SynonymFilterFactory#parseRules(List[String],SynonymMap,String,String,boolean).mjava","pathOld":"src/java/org/apache/solr/analysis/SynonymFilterFactory#parseRules(List[String],SynonymMap,String,String,boolean,boolean).mjava","sourceNew":"  private static void parseRules(List<String> rules, SynonymMap map, String mappingSep, String synSep, boolean expansion) {\n    int count=0;\n    for (String rule : rules) {\n      // To use regexes, we need an expression that specifies an odd number of chars.\n      // This can't really be done with string.split(), and since we need to\n      // do unescaping at some point anyway, we wouldn't be saving any effort\n      // by using regexes.\n\n      List<String> mapping = StrUtils.splitSmart(rule, mappingSep, false);\n\n      List<List<String>> source;\n      List<List<String>> target;\n\n      if (mapping.size() > 2) {\n        throw new RuntimeException(\"Invalid Synonym Rule:\" + rule);\n      } else if (mapping.size()==2) {\n        source = getSynList(mapping.get(0), synSep);\n        target = getSynList(mapping.get(1), synSep);\n      } else {\n        source = getSynList(mapping.get(0), synSep);\n        if (expansion) {\n          // expand to all arguments\n          target = source;\n        } else {\n          // reduce to first argument\n          target = new ArrayList<List<String>>(1);\n          target.add(source.get(0));\n        }\n      }\n\n      boolean includeOrig=false;\n      for (List<String> fromToks : source) {\n        count++;\n        for (List<String> toToks : target) {\n          map.add(fromToks,\n                  SynonymMap.makeTokens(toToks),\n                  includeOrig,\n                  true\n          );\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private static void parseRules(List<String> rules, SynonymMap map, String mappingSep, String synSep, boolean ignoreCase, boolean expansion) {\n    int count=0;\n    for (String rule : rules) {\n      // To use regexes, we need an expression that specifies an odd number of chars.\n      // This can't really be done with string.split(), and since we need to\n      // do unescaping at some point anyway, we wouldn't be saving any effort\n      // by using regexes.\n\n      List<String> mapping = StrUtils.splitSmart(rule, mappingSep, false);\n\n      List<List<String>> source;\n      List<List<String>> target;\n\n      if (mapping.size() > 2) {\n        throw new RuntimeException(\"Invalid Synonym Rule:\" + rule);\n      } else if (mapping.size()==2) {\n        source = getSynList(mapping.get(0), synSep);\n        target = getSynList(mapping.get(1), synSep);\n      } else {\n        source = getSynList(mapping.get(0), synSep);\n        if (expansion) {\n          // expand to all arguments\n          target = source;\n        } else {\n          // reduce to first argument\n          target = new ArrayList<List<String>>(1);\n          target.add(source.get(0));\n        }\n      }\n\n      boolean includeOrig=false;\n      for (List<String> fromToks : source) {\n        count++;\n        for (List<String> toToks : target) {\n          map.add(ignoreCase ? StrUtils.toLower(fromToks) : fromToks,\n                  SynonymMap.makeTokens(toToks),\n                  includeOrig,\n                  true);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed0158ac307bee4b81f4c26ebe88cddc950f46db","date":1211204318,"type":5,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/SynonymFilterFactory#parseRules(List[String],SynonymMap,String,String,boolean,TokenizerFactory).mjava","pathOld":"src/java/org/apache/solr/analysis/SynonymFilterFactory#parseRules(List[String],SynonymMap,String,String,boolean).mjava","sourceNew":"  static void parseRules(List<String> rules, SynonymMap map, String mappingSep,\n    String synSep, boolean expansion, TokenizerFactory tokFactory) {\n    int count=0;\n    for (String rule : rules) {\n      // To use regexes, we need an expression that specifies an odd number of chars.\n      // This can't really be done with string.split(), and since we need to\n      // do unescaping at some point anyway, we wouldn't be saving any effort\n      // by using regexes.\n\n      List<String> mapping = StrUtils.splitSmart(rule, mappingSep, false);\n\n      List<List<String>> source;\n      List<List<String>> target;\n\n      if (mapping.size() > 2) {\n        throw new RuntimeException(\"Invalid Synonym Rule:\" + rule);\n      } else if (mapping.size()==2) {\n        source = getSynList(mapping.get(0), synSep, tokFactory);\n        target = getSynList(mapping.get(1), synSep, tokFactory);\n      } else {\n        source = getSynList(mapping.get(0), synSep, tokFactory);\n        if (expansion) {\n          // expand to all arguments\n          target = source;\n        } else {\n          // reduce to first argument\n          target = new ArrayList<List<String>>(1);\n          target.add(source.get(0));\n        }\n      }\n\n      boolean includeOrig=false;\n      for (List<String> fromToks : source) {\n        count++;\n        for (List<String> toToks : target) {\n          map.add(fromToks,\n                  SynonymMap.makeTokens(toToks),\n                  includeOrig,\n                  true\n          );\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private static void parseRules(List<String> rules, SynonymMap map, String mappingSep, String synSep, boolean expansion) {\n    int count=0;\n    for (String rule : rules) {\n      // To use regexes, we need an expression that specifies an odd number of chars.\n      // This can't really be done with string.split(), and since we need to\n      // do unescaping at some point anyway, we wouldn't be saving any effort\n      // by using regexes.\n\n      List<String> mapping = StrUtils.splitSmart(rule, mappingSep, false);\n\n      List<List<String>> source;\n      List<List<String>> target;\n\n      if (mapping.size() > 2) {\n        throw new RuntimeException(\"Invalid Synonym Rule:\" + rule);\n      } else if (mapping.size()==2) {\n        source = getSynList(mapping.get(0), synSep);\n        target = getSynList(mapping.get(1), synSep);\n      } else {\n        source = getSynList(mapping.get(0), synSep);\n        if (expansion) {\n          // expand to all arguments\n          target = source;\n        } else {\n          // reduce to first argument\n          target = new ArrayList<List<String>>(1);\n          target.add(source.get(0));\n        }\n      }\n\n      boolean includeOrig=false;\n      for (List<String> fromToks : source) {\n        count++;\n        for (List<String> toToks : target) {\n          map.add(fromToks,\n                  SynonymMap.makeTokens(toToks),\n                  includeOrig,\n                  true\n          );\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"92335bcfcb7158f0d7417ef5b9ac3a156f5a72ac":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ed0158ac307bee4b81f4c26ebe88cddc950f46db":["92335bcfcb7158f0d7417ef5b9ac3a156f5a72ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"92335bcfcb7158f0d7417ef5b9ac3a156f5a72ac":["ed0158ac307bee4b81f4c26ebe88cddc950f46db"],"ed0158ac307bee4b81f4c26ebe88cddc950f46db":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["92335bcfcb7158f0d7417ef5b9ac3a156f5a72ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ed0158ac307bee4b81f4c26ebe88cddc950f46db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}