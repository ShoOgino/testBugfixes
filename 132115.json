{"path":"src/java/org/apache/lucene/index/Payload#clone().mjava","commits":[{"id":"97c663a0e8cf62834049da11ecd70bd4a639ac9c","date":1195852652,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/Payload#clone().mjava","pathOld":"/dev/null","sourceNew":"    /**\r\n     * Clones this payload by creating a copy of the underlying\r\n     * byte array.\r\n     */\r\n    public Object clone() {\r\n      Payload clone = new Payload(this.toByteArray());\r\n      return clone;\r\n    }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2123bddbd65dea198cac380540636ce43a880403","date":1211269254,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/Payload#clone().mjava","pathOld":"src/java/org/apache/lucene/index/Payload#clone().mjava","sourceNew":"    /**\n     * Clones this payload by creating a copy of the underlying\n     * byte array.\n     */\n    public Object clone() {\n      Payload clone = new Payload(this.toByteArray());\n      return clone;\n    }\n\n","sourceOld":"    /**\r\n     * Clones this payload by creating a copy of the underlying\r\n     * byte array.\r\n     */\r\n    public Object clone() {\r\n      Payload clone = new Payload(this.toByteArray());\r\n      return clone;\r\n    }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/Payload#clone().mjava","pathOld":"src/java/org/apache/lucene/index/Payload#clone().mjava","sourceNew":"  /**\n   * Clones this payload by creating a copy of the underlying\n   * byte array.\n   */\n  public Object clone() {\n    try {\n      // Start with a shallow copy of data\n      Payload clone = (Payload) super.clone();\n      // Only copy the part of data that belongs to this Payload\n      if (offset == 0 && length == data.length) {\n        // It is the whole thing, so just clone it.\n        clone.data = (byte[]) data.clone();\n      }\n      else {\n        // Just get the part\n        clone.data = this.toByteArray();\n        clone.offset = 0;\n      }\n      return clone;\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(e);  // shouldn't happen\n    }\n  }\n\n","sourceOld":"    /**\n     * Clones this payload by creating a copy of the underlying\n     * byte array.\n     */\n    public Object clone() {\n      Payload clone = new Payload(this.toByteArray());\n      return clone;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/Payload#clone().mjava","pathOld":"src/java/org/apache/lucene/index/Payload#clone().mjava","sourceNew":"  /**\n   * Clones this payload by creating a copy of the underlying\n   * byte array.\n   */\n  @Override\n  public Object clone() {\n    try {\n      // Start with a shallow copy of data\n      Payload clone = (Payload) super.clone();\n      // Only copy the part of data that belongs to this Payload\n      if (offset == 0 && length == data.length) {\n        // It is the whole thing, so just clone it.\n        clone.data = (byte[]) data.clone();\n      }\n      else {\n        // Just get the part\n        clone.data = this.toByteArray();\n        clone.offset = 0;\n      }\n      return clone;\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(e);  // shouldn't happen\n    }\n  }\n\n","sourceOld":"  /**\n   * Clones this payload by creating a copy of the underlying\n   * byte array.\n   */\n  public Object clone() {\n    try {\n      // Start with a shallow copy of data\n      Payload clone = (Payload) super.clone();\n      // Only copy the part of data that belongs to this Payload\n      if (offset == 0 && length == data.length) {\n        // It is the whole thing, so just clone it.\n        clone.data = (byte[]) data.clone();\n      }\n      else {\n        // Just get the part\n        clone.data = this.toByteArray();\n        clone.offset = 0;\n      }\n      return clone;\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(e);  // shouldn't happen\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/Payload#clone().mjava","pathOld":"src/java/org/apache/lucene/index/Payload#clone().mjava","sourceNew":"  /**\n   * Clones this payload by creating a copy of the underlying\n   * byte array.\n   */\n  @Override\n  public Object clone() {\n    try {\n      // Start with a shallow copy of data\n      Payload clone = (Payload) super.clone();\n      // Only copy the part of data that belongs to this Payload\n      if (offset == 0 && length == data.length) {\n        // It is the whole thing, so just clone it.\n        clone.data = data.clone();\n      }\n      else {\n        // Just get the part\n        clone.data = this.toByteArray();\n        clone.offset = 0;\n      }\n      return clone;\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(e);  // shouldn't happen\n    }\n  }\n\n","sourceOld":"  /**\n   * Clones this payload by creating a copy of the underlying\n   * byte array.\n   */\n  @Override\n  public Object clone() {\n    try {\n      // Start with a shallow copy of data\n      Payload clone = (Payload) super.clone();\n      // Only copy the part of data that belongs to this Payload\n      if (offset == 0 && length == data.length) {\n        // It is the whole thing, so just clone it.\n        clone.data = (byte[]) data.clone();\n      }\n      else {\n        // Just get the part\n        clone.data = this.toByteArray();\n        clone.offset = 0;\n      }\n      return clone;\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(e);  // shouldn't happen\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/Payload#clone().mjava","pathOld":"src/java/org/apache/lucene/index/Payload#clone().mjava","sourceNew":"  /**\n   * Clones this payload by creating a copy of the underlying\n   * byte array.\n   */\n  @Override\n  public Object clone() {\n    try {\n      // Start with a shallow copy of data\n      Payload clone = (Payload) super.clone();\n      // Only copy the part of data that belongs to this Payload\n      if (offset == 0 && length == data.length) {\n        // It is the whole thing, so just clone it.\n        clone.data = data.clone();\n      }\n      else {\n        // Just get the part\n        clone.data = this.toByteArray();\n        clone.offset = 0;\n      }\n      return clone;\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(e);  // shouldn't happen\n    }\n  }\n\n","sourceOld":"  /**\n   * Clones this payload by creating a copy of the underlying\n   * byte array.\n   */\n  @Override\n  public Object clone() {\n    try {\n      // Start with a shallow copy of data\n      Payload clone = (Payload) super.clone();\n      // Only copy the part of data that belongs to this Payload\n      if (offset == 0 && length == data.length) {\n        // It is the whole thing, so just clone it.\n        clone.data = data.clone();\n      }\n      else {\n        // Just get the part\n        clone.data = this.toByteArray();\n        clone.offset = 0;\n      }\n      return clone;\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(e);  // shouldn't happen\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["2123bddbd65dea198cac380540636ce43a880403"],"8a9e385641d717e641408d8fbbc62be8fc766357":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2123bddbd65dea198cac380540636ce43a880403":["97c663a0e8cf62834049da11ecd70bd4a639ac9c"],"97c663a0e8cf62834049da11ecd70bd4a639ac9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["8a9e385641d717e641408d8fbbc62be8fc766357"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["8a9e385641d717e641408d8fbbc62be8fc766357"],"8a9e385641d717e641408d8fbbc62be8fc766357":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["97c663a0e8cf62834049da11ecd70bd4a639ac9c"],"2123bddbd65dea198cac380540636ce43a880403":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"97c663a0e8cf62834049da11ecd70bd4a639ac9c":["2123bddbd65dea198cac380540636ce43a880403"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}