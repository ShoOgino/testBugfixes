{"path":"src/java/org/apache/solr/util/DOMUtil#addToNamedList(Node,NamedList,List).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/DOMUtil#addToNamedList(Node,NamedList,List).mjava","pathOld":"/dev/null","sourceNew":"  public static void addToNamedList(Node nd, NamedList nlst, List arr) {\n    // Nodes often include whitespace, etc... so just return if this\n    // is not an Element.\n    if (nd.getNodeType() != Node.ELEMENT_NODE) return;\n\n    String type = nd.getNodeName();\n\n    String name = null;\n    if (nd.hasAttributes()) {\n      NamedNodeMap attrs = nd.getAttributes();\n      Node nameNd = attrs.getNamedItem(\"name\");\n      if (nameNd != null) name=nameNd.getNodeValue();\n    }\n\n    Object val=null;\n\n    if (\"str\".equals(type)) {\n      val = nd.getTextContent();\n    } else if (\"int\".equals(type)) {\n      val = Integer.valueOf(nd.getTextContent());\n    } else if (\"long\".equals(type)) {\n      val = Long.valueOf(nd.getTextContent());\n    } else if (\"float\".equals(type)) {\n      val = Float.valueOf(nd.getTextContent());\n    } else if (\"double\".equals(type)) {\n      val = Double.valueOf(nd.getTextContent());\n    } else if (\"bool\".equals(type)) {\n      val = Boolean.valueOf(nd.getTextContent());\n    } else if (\"lst\".equals(type)) {\n      val = childNodesToNamedList(nd);\n    } else if (\"arr\".equals(type)) {\n      val = childNodesToList(nd);\n    }\n\n    if (nlst != null) nlst.add(name,val);\n    if (arr != null) arr.add(val);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["917331df72f531cce1276d5a977dcb20d186d2b0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"57e91c86e193010fc38028001cf0590693ad2cd1","date":1166153548,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/util/DOMUtil#addToNamedList(Node,NamedList,List).mjava","pathOld":"src/java/org/apache/solr/util/DOMUtil#addToNamedList(Node,NamedList,List).mjava","sourceNew":"  public static void addToNamedList(Node nd, NamedList nlst, List arr) {\n    // Nodes often include whitespace, etc... so just return if this\n    // is not an Element.\n    if (nd.getNodeType() != Node.ELEMENT_NODE) return;\n\n    String type = nd.getNodeName();\n\n    String name = null;\n    if (nd.hasAttributes()) {\n      NamedNodeMap attrs = nd.getAttributes();\n      Node nameNd = attrs.getNamedItem(\"name\");\n      if (nameNd != null) name=nameNd.getNodeValue();\n    }\n\n    Object val=null;\n\n    if (\"str\".equals(type)) {\n      val = getText(nd);\n    } else if (\"int\".equals(type)) {\n      val = Integer.valueOf(getText(nd));\n    } else if (\"long\".equals(type)) {\n      val = Long.valueOf(getText(nd));\n    } else if (\"float\".equals(type)) {\n      val = Float.valueOf(getText(nd));\n    } else if (\"double\".equals(type)) {\n      val = Double.valueOf(getText(nd));\n    } else if (\"bool\".equals(type)) {\n      val = Boolean.valueOf(getText(nd));\n    } else if (\"lst\".equals(type)) {\n      val = childNodesToNamedList(nd);\n    } else if (\"arr\".equals(type)) {\n      val = childNodesToList(nd);\n    }\n\n    if (nlst != null) nlst.add(name,val);\n    if (arr != null) arr.add(val);\n  }\n\n","sourceOld":"  public static void addToNamedList(Node nd, NamedList nlst, List arr) {\n    // Nodes often include whitespace, etc... so just return if this\n    // is not an Element.\n    if (nd.getNodeType() != Node.ELEMENT_NODE) return;\n\n    String type = nd.getNodeName();\n\n    String name = null;\n    if (nd.hasAttributes()) {\n      NamedNodeMap attrs = nd.getAttributes();\n      Node nameNd = attrs.getNamedItem(\"name\");\n      if (nameNd != null) name=nameNd.getNodeValue();\n    }\n\n    Object val=null;\n\n    if (\"str\".equals(type)) {\n      val = nd.getTextContent();\n    } else if (\"int\".equals(type)) {\n      val = Integer.valueOf(nd.getTextContent());\n    } else if (\"long\".equals(type)) {\n      val = Long.valueOf(nd.getTextContent());\n    } else if (\"float\".equals(type)) {\n      val = Float.valueOf(nd.getTextContent());\n    } else if (\"double\".equals(type)) {\n      val = Double.valueOf(nd.getTextContent());\n    } else if (\"bool\".equals(type)) {\n      val = Boolean.valueOf(nd.getTextContent());\n    } else if (\"lst\".equals(type)) {\n      val = childNodesToNamedList(nd);\n    } else if (\"arr\".equals(type)) {\n      val = childNodesToList(nd);\n    }\n\n    if (nlst != null) nlst.add(name,val);\n    if (arr != null) arr.add(val);\n  }\n\n","bugFix":null,"bugIntro":["917331df72f531cce1276d5a977dcb20d186d2b0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb","date":1181791578,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/common/util/DOMUtil#addToNamedList(Node,NamedList,List).mjava","pathOld":"src/java/org/apache/solr/util/DOMUtil#addToNamedList(Node,NamedList,List).mjava","sourceNew":"  public static void addToNamedList(Node nd, NamedList nlst, List arr) {\n    // Nodes often include whitespace, etc... so just return if this\n    // is not an Element.\n    if (nd.getNodeType() != Node.ELEMENT_NODE) return;\n\n    String type = nd.getNodeName();\n\n    String name = null;\n    if (nd.hasAttributes()) {\n      NamedNodeMap attrs = nd.getAttributes();\n      Node nameNd = attrs.getNamedItem(\"name\");\n      if (nameNd != null) name=nameNd.getNodeValue();\n    }\n\n    Object val=null;\n\n    if (\"str\".equals(type)) {\n      val = getText(nd);\n    } else if (\"int\".equals(type)) {\n      val = Integer.valueOf(getText(nd));\n    } else if (\"long\".equals(type)) {\n      val = Long.valueOf(getText(nd));\n    } else if (\"float\".equals(type)) {\n      val = Float.valueOf(getText(nd));\n    } else if (\"double\".equals(type)) {\n      val = Double.valueOf(getText(nd));\n    } else if (\"bool\".equals(type)) {\n      val = Boolean.valueOf(getText(nd));\n    } else if (\"lst\".equals(type)) {\n      val = childNodesToNamedList(nd);\n    } else if (\"arr\".equals(type)) {\n      val = childNodesToList(nd);\n    }\n\n    if (nlst != null) nlst.add(name,val);\n    if (arr != null) arr.add(val);\n  }\n\n","sourceOld":"  public static void addToNamedList(Node nd, NamedList nlst, List arr) {\n    // Nodes often include whitespace, etc... so just return if this\n    // is not an Element.\n    if (nd.getNodeType() != Node.ELEMENT_NODE) return;\n\n    String type = nd.getNodeName();\n\n    String name = null;\n    if (nd.hasAttributes()) {\n      NamedNodeMap attrs = nd.getAttributes();\n      Node nameNd = attrs.getNamedItem(\"name\");\n      if (nameNd != null) name=nameNd.getNodeValue();\n    }\n\n    Object val=null;\n\n    if (\"str\".equals(type)) {\n      val = getText(nd);\n    } else if (\"int\".equals(type)) {\n      val = Integer.valueOf(getText(nd));\n    } else if (\"long\".equals(type)) {\n      val = Long.valueOf(getText(nd));\n    } else if (\"float\".equals(type)) {\n      val = Float.valueOf(getText(nd));\n    } else if (\"double\".equals(type)) {\n      val = Double.valueOf(getText(nd));\n    } else if (\"bool\".equals(type)) {\n      val = Boolean.valueOf(getText(nd));\n    } else if (\"lst\".equals(type)) {\n      val = childNodesToNamedList(nd);\n    } else if (\"arr\".equals(type)) {\n      val = childNodesToList(nd);\n    }\n\n    if (nlst != null) nlst.add(name,val);\n    if (arr != null) arr.add(val);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb":["57e91c86e193010fc38028001cf0590693ad2cd1"],"57e91c86e193010fc38028001cf0590693ad2cd1":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb":[],"57e91c86e193010fc38028001cf0590693ad2cd1":["3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["57e91c86e193010fc38028001cf0590693ad2cd1"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}