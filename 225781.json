{"path":"solr/core/src/java/org/apache/solr/util/TestInjection#injectFailUpdateRequests().mjava","commits":[{"id":"c67fb7bad9a9f5e5f07a3166b8b8cfa0fe3f6ce4","date":1452195469,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/TestInjection#injectFailUpdateRequests().mjava","pathOld":"/dev/null","sourceNew":"  public static boolean injectFailUpdateRequests() {\n    if (failUpdateRequests != null) {\n      Pair<Boolean,Integer> pair = parseValue(failUpdateRequests);\n      boolean enabled = pair.getKey();\n      int chanceIn100 = pair.getValue();\n      if (enabled && RANDOM.nextInt(100) >= (100 - chanceIn100)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Random test update fail\");\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7d8e8c25cf14084ed34d963e13af2b71675d8614"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"da7373b6df772f51a66550c8080379e9ddf2e7db","date":1462690671,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/TestInjection#injectFailUpdateRequests().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/TestInjection#injectFailUpdateRequests().mjava","sourceNew":"  public static boolean injectFailUpdateRequests() {\n    if (failUpdateRequests != null) {\n      Pair<Boolean,Integer> pair = parseValue(failUpdateRequests);\n      boolean enabled = pair.first();\n      int chanceIn100 = pair.second();\n      if (enabled && RANDOM.nextInt(100) >= (100 - chanceIn100)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Random test update fail\");\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  public static boolean injectFailUpdateRequests() {\n    if (failUpdateRequests != null) {\n      Pair<Boolean,Integer> pair = parseValue(failUpdateRequests);\n      boolean enabled = pair.getKey();\n      int chanceIn100 = pair.getValue();\n      if (enabled && RANDOM.nextInt(100) >= (100 - chanceIn100)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Random test update fail\");\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/TestInjection#injectFailUpdateRequests().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/TestInjection#injectFailUpdateRequests().mjava","sourceNew":"  public static boolean injectFailUpdateRequests() {\n    if (failUpdateRequests != null) {\n      Pair<Boolean,Integer> pair = parseValue(failUpdateRequests);\n      boolean enabled = pair.first();\n      int chanceIn100 = pair.second();\n      if (enabled && RANDOM.nextInt(100) >= (100 - chanceIn100)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Random test update fail\");\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  public static boolean injectFailUpdateRequests() {\n    if (failUpdateRequests != null) {\n      Pair<Boolean,Integer> pair = parseValue(failUpdateRequests);\n      boolean enabled = pair.getKey();\n      int chanceIn100 = pair.getValue();\n      if (enabled && RANDOM.nextInt(100) >= (100 - chanceIn100)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Random test update fail\");\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d8e8c25cf14084ed34d963e13af2b71675d8614","date":1470779269,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/TestInjection#injectFailUpdateRequests().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/TestInjection#injectFailUpdateRequests().mjava","sourceNew":"  public static boolean injectFailUpdateRequests() {\n    if (failUpdateRequests != null) {\n      Random rand = random();\n      if (null == rand) return true;\n      \n      Pair<Boolean,Integer> pair = parseValue(failUpdateRequests);\n      boolean enabled = pair.first();\n      int chanceIn100 = pair.second();\n      if (enabled && rand.nextInt(100) >= (100 - chanceIn100)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Random test update fail\");\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  public static boolean injectFailUpdateRequests() {\n    if (failUpdateRequests != null) {\n      Pair<Boolean,Integer> pair = parseValue(failUpdateRequests);\n      boolean enabled = pair.first();\n      int chanceIn100 = pair.second();\n      if (enabled && RANDOM.nextInt(100) >= (100 - chanceIn100)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Random test update fail\");\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":["c67fb7bad9a9f5e5f07a3166b8b8cfa0fe3f6ce4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8bca25eefa1f2205e2b0ef713701dc3a0fecd702","date":1470810578,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/TestInjection#injectFailUpdateRequests().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/TestInjection#injectFailUpdateRequests().mjava","sourceNew":"  public static boolean injectFailUpdateRequests() {\n    if (failUpdateRequests != null) {\n      Random rand = random();\n      if (null == rand) return true;\n      \n      Pair<Boolean,Integer> pair = parseValue(failUpdateRequests);\n      boolean enabled = pair.first();\n      int chanceIn100 = pair.second();\n      if (enabled && rand.nextInt(100) >= (100 - chanceIn100)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Random test update fail\");\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  public static boolean injectFailUpdateRequests() {\n    if (failUpdateRequests != null) {\n      Pair<Boolean,Integer> pair = parseValue(failUpdateRequests);\n      boolean enabled = pair.first();\n      int chanceIn100 = pair.second();\n      if (enabled && RANDOM.nextInt(100) >= (100 - chanceIn100)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Random test update fail\");\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/TestInjection#injectFailUpdateRequests().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/TestInjection#injectFailUpdateRequests().mjava","sourceNew":"  public static boolean injectFailUpdateRequests() {\n    if (failUpdateRequests != null) {\n      Random rand = random();\n      if (null == rand) return true;\n      \n      Pair<Boolean,Integer> pair = parseValue(failUpdateRequests);\n      boolean enabled = pair.first();\n      int chanceIn100 = pair.second();\n      if (enabled && rand.nextInt(100) >= (100 - chanceIn100)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Random test update fail\");\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  public static boolean injectFailUpdateRequests() {\n    if (failUpdateRequests != null) {\n      Pair<Boolean,Integer> pair = parseValue(failUpdateRequests);\n      boolean enabled = pair.first();\n      int chanceIn100 = pair.second();\n      if (enabled && RANDOM.nextInt(100) >= (100 - chanceIn100)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Random test update fail\");\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/TestInjection#injectFailUpdateRequests().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/TestInjection#injectFailUpdateRequests().mjava","sourceNew":"  public static boolean injectFailUpdateRequests() {\n    if (failUpdateRequests != null) {\n      Random rand = random();\n      if (null == rand) return true;\n      \n      Pair<Boolean,Integer> pair = parseValue(failUpdateRequests);\n      boolean enabled = pair.first();\n      int chanceIn100 = pair.second();\n      if (enabled && rand.nextInt(100) >= (100 - chanceIn100)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Random test update fail\");\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  public static boolean injectFailUpdateRequests() {\n    if (failUpdateRequests != null) {\n      Pair<Boolean,Integer> pair = parseValue(failUpdateRequests);\n      boolean enabled = pair.getKey();\n      int chanceIn100 = pair.getValue();\n      if (enabled && RANDOM.nextInt(100) >= (100 - chanceIn100)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Random test update fail\");\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8bca25eefa1f2205e2b0ef713701dc3a0fecd702":["da7373b6df772f51a66550c8080379e9ddf2e7db","7d8e8c25cf14084ed34d963e13af2b71675d8614"],"c67fb7bad9a9f5e5f07a3166b8b8cfa0fe3f6ce4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7d8e8c25cf14084ed34d963e13af2b71675d8614":["da7373b6df772f51a66550c8080379e9ddf2e7db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e66a459d38c1c4a2f97128433dab546f683a9fed":["c67fb7bad9a9f5e5f07a3166b8b8cfa0fe3f6ce4","da7373b6df772f51a66550c8080379e9ddf2e7db"],"da7373b6df772f51a66550c8080379e9ddf2e7db":["c67fb7bad9a9f5e5f07a3166b8b8cfa0fe3f6ce4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c67fb7bad9a9f5e5f07a3166b8b8cfa0fe3f6ce4","8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["da7373b6df772f51a66550c8080379e9ddf2e7db","8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702"]},"commit2Childs":{"8bca25eefa1f2205e2b0ef713701dc3a0fecd702":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7d8e8c25cf14084ed34d963e13af2b71675d8614":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"c67fb7bad9a9f5e5f07a3166b8b8cfa0fe3f6ce4":["e66a459d38c1c4a2f97128433dab546f683a9fed","da7373b6df772f51a66550c8080379e9ddf2e7db","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c67fb7bad9a9f5e5f07a3166b8b8cfa0fe3f6ce4"],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"da7373b6df772f51a66550c8080379e9ddf2e7db":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702","7d8e8c25cf14084ed34d963e13af2b71675d8614","e66a459d38c1c4a2f97128433dab546f683a9fed","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e66a459d38c1c4a2f97128433dab546f683a9fed","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}