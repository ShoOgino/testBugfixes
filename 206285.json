{"path":"solr/src/test/org/apache/solr/core/TestJmxIntegration#testJmxUpdate().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/core/TestJmxIntegration#testJmxUpdate().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testJmxUpdate() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    System.err.println(\"Servers in testJmxUpdate: \" + servers);\n    System.err.println(h.getCore().getInfoRegistry());\n\n    SolrInfoMBean bean = null;\n    // wait until searcher is registered\n    for (int i=0; i<100; i++) {\n      bean = h.getCore().getInfoRegistry().get(\"searcher\");\n      if (bean != null) break;\n      Thread.sleep(250);\n    }\n    if (bean==null) throw new RuntimeException(\"searcher was never registered\");\n    ObjectName searcher = getObjectName(\"searcher\", bean);\n\n    MBeanServer mbeanServer = servers.get(0);\n    System.err.println(\"Mbeans in server: \" + mbeanServer.queryNames(null, null));\n\n    assertFalse(\"No mbean found for SolrIndexSearcher\", mbeanServer.queryMBeans(searcher, null).isEmpty());\n\n    int oldNumDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertU(adoc(\"id\", \"1\"));\n    assertU(\"commit\", commit());\n    int numDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertTrue(\"New numDocs is same as old numDocs as reported by JMX\",\n            numDocs > oldNumDocs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/core/TestJmxIntegration#testJmxUpdate().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testJmxUpdate() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    System.err.println(\"Servers in testJmxUpdate: \" + servers);\n    System.err.println(h.getCore().getInfoRegistry());\n\n    SolrInfoMBean bean = null;\n    // wait until searcher is registered\n    for (int i=0; i<100; i++) {\n      bean = h.getCore().getInfoRegistry().get(\"searcher\");\n      if (bean != null) break;\n      Thread.sleep(250);\n    }\n    if (bean==null) throw new RuntimeException(\"searcher was never registered\");\n    ObjectName searcher = getObjectName(\"searcher\", bean);\n\n    MBeanServer mbeanServer = servers.get(0);\n    System.err.println(\"Mbeans in server: \" + mbeanServer.queryNames(null, null));\n\n    assertFalse(\"No mbean found for SolrIndexSearcher\", mbeanServer.queryMBeans(searcher, null).isEmpty());\n\n    int oldNumDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertU(adoc(\"id\", \"1\"));\n    assertU(\"commit\", commit());\n    int numDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertTrue(\"New numDocs is same as old numDocs as reported by JMX\",\n            numDocs > oldNumDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/core/TestJmxIntegration#testJmxUpdate().mjava","pathOld":"src/test/org/apache/solr/core/TestJmxIntegration#testJmxUpdate().mjava","sourceNew":"  @Test\n  public void testJmxUpdate() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    System.err.println(\"Servers in testJmxUpdate: \" + servers);\n    System.err.println(h.getCore().getInfoRegistry());\n\n    SolrInfoMBean bean = null;\n    // wait until searcher is registered\n    for (int i=0; i<100; i++) {\n      bean = h.getCore().getInfoRegistry().get(\"searcher\");\n      if (bean != null) break;\n      Thread.sleep(250);\n    }\n    if (bean==null) throw new RuntimeException(\"searcher was never registered\");\n    ObjectName searcher = getObjectName(\"searcher\", bean);\n\n    MBeanServer mbeanServer = servers.get(0);\n    System.err.println(\"Mbeans in server: \" + mbeanServer.queryNames(null, null));\n\n    assertFalse(\"No mbean found for SolrIndexSearcher\", mbeanServer.queryMBeans(searcher, null).isEmpty());\n\n    int oldNumDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertU(adoc(\"id\", \"1\"));\n    assertU(\"commit\", commit());\n    int numDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertTrue(\"New numDocs is same as old numDocs as reported by JMX\",\n            numDocs > oldNumDocs);\n  }\n\n","sourceOld":"  @Test\n  public void testJmxUpdate() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    System.err.println(\"Servers in testJmxUpdate: \" + servers);\n    System.err.println(h.getCore().getInfoRegistry());\n\n    SolrInfoMBean bean = null;\n    // wait until searcher is registered\n    for (int i=0; i<100; i++) {\n      bean = h.getCore().getInfoRegistry().get(\"searcher\");\n      if (bean != null) break;\n      Thread.sleep(250);\n    }\n    if (bean==null) throw new RuntimeException(\"searcher was never registered\");\n    ObjectName searcher = getObjectName(\"searcher\", bean);\n\n    MBeanServer mbeanServer = servers.get(0);\n    System.err.println(\"Mbeans in server: \" + mbeanServer.queryNames(null, null));\n\n    assertFalse(\"No mbean found for SolrIndexSearcher\", mbeanServer.queryMBeans(searcher, null).isEmpty());\n\n    int oldNumDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertU(adoc(\"id\", \"1\"));\n    assertU(\"commit\", commit());\n    int numDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertTrue(\"New numDocs is same as old numDocs as reported by JMX\",\n            numDocs > oldNumDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/core/TestJmxIntegration#testJmxUpdate().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testJmxUpdate() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    System.err.println(\"Servers in testJmxUpdate: \" + servers);\n    System.err.println(h.getCore().getInfoRegistry());\n\n    SolrInfoMBean bean = null;\n    // wait until searcher is registered\n    for (int i=0; i<100; i++) {\n      bean = h.getCore().getInfoRegistry().get(\"searcher\");\n      if (bean != null) break;\n      Thread.sleep(250);\n    }\n    if (bean==null) throw new RuntimeException(\"searcher was never registered\");\n    ObjectName searcher = getObjectName(\"searcher\", bean);\n\n    MBeanServer mbeanServer = servers.get(0);\n    System.err.println(\"Mbeans in server: \" + mbeanServer.queryNames(null, null));\n\n    assertFalse(\"No mbean found for SolrIndexSearcher\", mbeanServer.queryMBeans(searcher, null).isEmpty());\n\n    int oldNumDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertU(adoc(\"id\", \"1\"));\n    assertU(\"commit\", commit());\n    int numDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertTrue(\"New numDocs is same as old numDocs as reported by JMX\",\n            numDocs > oldNumDocs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ce83f0d72db4660fd277a9d357698004d8f4336","date":1269047368,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/core/TestJmxIntegration#testJmxUpdate().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestJmxIntegration#testJmxUpdate().mjava","sourceNew":"  @Test\n  public void testJmxUpdate() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    log.info(\"Servers in testJmxUpdate: \" + servers);\n    log.info(h.getCore().getInfoRegistry().toString());\n\n    SolrInfoMBean bean = null;\n    // wait until searcher is registered\n    for (int i=0; i<100; i++) {\n      bean = h.getCore().getInfoRegistry().get(\"searcher\");\n      if (bean != null) break;\n      Thread.sleep(250);\n    }\n    if (bean==null) throw new RuntimeException(\"searcher was never registered\");\n    ObjectName searcher = getObjectName(\"searcher\", bean);\n\n    MBeanServer mbeanServer = servers.get(0);\n    log.info(\"Mbeans in server: \" + mbeanServer.queryNames(null, null));\n\n    assertFalse(\"No mbean found for SolrIndexSearcher\", mbeanServer.queryMBeans(searcher, null).isEmpty());\n\n    int oldNumDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertU(adoc(\"id\", \"1\"));\n    assertU(\"commit\", commit());\n    int numDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertTrue(\"New numDocs is same as old numDocs as reported by JMX\",\n            numDocs > oldNumDocs);\n  }\n\n","sourceOld":"  @Test\n  public void testJmxUpdate() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    System.err.println(\"Servers in testJmxUpdate: \" + servers);\n    System.err.println(h.getCore().getInfoRegistry());\n\n    SolrInfoMBean bean = null;\n    // wait until searcher is registered\n    for (int i=0; i<100; i++) {\n      bean = h.getCore().getInfoRegistry().get(\"searcher\");\n      if (bean != null) break;\n      Thread.sleep(250);\n    }\n    if (bean==null) throw new RuntimeException(\"searcher was never registered\");\n    ObjectName searcher = getObjectName(\"searcher\", bean);\n\n    MBeanServer mbeanServer = servers.get(0);\n    System.err.println(\"Mbeans in server: \" + mbeanServer.queryNames(null, null));\n\n    assertFalse(\"No mbean found for SolrIndexSearcher\", mbeanServer.queryMBeans(searcher, null).isEmpty());\n\n    int oldNumDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertU(adoc(\"id\", \"1\"));\n    assertU(\"commit\", commit());\n    int numDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertTrue(\"New numDocs is same as old numDocs as reported by JMX\",\n            numDocs > oldNumDocs);\n  }\n\n","bugFix":null,"bugIntro":["c1d6d844f3b4061aedc283b5e71ff1d19aeae291","c1d6d844f3b4061aedc283b5e71ff1d19aeae291","c1d6d844f3b4061aedc283b5e71ff1d19aeae291"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3d27fdb664de1d2da1efdddf2ccf6973dd072c69","date":1287419521,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/core/TestJmxIntegration#testJmxUpdate().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestJmxIntegration#testJmxUpdate().mjava","sourceNew":"  @Test\n  public void testJmxUpdate() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    log.info(\"Servers in testJmxUpdate: \" + servers);\n    log.info(h.getCore().getInfoRegistry().toString());\n\n    SolrInfoMBean bean = null;\n    // wait until searcher is registered\n    for (int i=0; i<100; i++) {\n      bean = h.getCore().getInfoRegistry().get(\"searcher\");\n      if (bean != null) break;\n      Thread.sleep(250);\n    }\n    if (bean==null) throw new RuntimeException(\"searcher was never registered\");\n    ObjectName searcher = getObjectName(\"searcher\", bean);\n    MBeanServer mbeanServer = servers.get(0);\n    log.info(\"Mbeans in server: \" + mbeanServer.queryNames(null, null));\n\n    assertFalse(\"No mbean found for SolrIndexSearcher\", mbeanServer.queryMBeans(searcher, null).isEmpty());\n\n    int oldNumDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertU(adoc(\"id\", \"1\"));\n    assertU(\"commit\", commit());\n    int numDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertTrue(\"New numDocs is same as old numDocs as reported by JMX\",\n            numDocs > oldNumDocs);\n  }\n\n","sourceOld":"  @Test\n  public void testJmxUpdate() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    log.info(\"Servers in testJmxUpdate: \" + servers);\n    log.info(h.getCore().getInfoRegistry().toString());\n\n    SolrInfoMBean bean = null;\n    // wait until searcher is registered\n    for (int i=0; i<100; i++) {\n      bean = h.getCore().getInfoRegistry().get(\"searcher\");\n      if (bean != null) break;\n      Thread.sleep(250);\n    }\n    if (bean==null) throw new RuntimeException(\"searcher was never registered\");\n    ObjectName searcher = getObjectName(\"searcher\", bean);\n\n    MBeanServer mbeanServer = servers.get(0);\n    log.info(\"Mbeans in server: \" + mbeanServer.queryNames(null, null));\n\n    assertFalse(\"No mbean found for SolrIndexSearcher\", mbeanServer.queryMBeans(searcher, null).isEmpty());\n\n    int oldNumDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertU(adoc(\"id\", \"1\"));\n    assertU(\"commit\", commit());\n    int numDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertTrue(\"New numDocs is same as old numDocs as reported by JMX\",\n            numDocs > oldNumDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/core/TestJmxIntegration#testJmxUpdate().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestJmxIntegration#testJmxUpdate().mjava","sourceNew":"  @Test\n  public void testJmxUpdate() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    log.info(\"Servers in testJmxUpdate: \" + servers);\n    log.info(h.getCore().getInfoRegistry().toString());\n\n    SolrInfoMBean bean = null;\n    // wait until searcher is registered\n    for (int i=0; i<100; i++) {\n      bean = h.getCore().getInfoRegistry().get(\"searcher\");\n      if (bean != null) break;\n      Thread.sleep(250);\n    }\n    if (bean==null) throw new RuntimeException(\"searcher was never registered\");\n    ObjectName searcher = getObjectName(\"searcher\", bean);\n    MBeanServer mbeanServer = servers.get(0);\n    log.info(\"Mbeans in server: \" + mbeanServer.queryNames(null, null));\n\n    assertFalse(\"No mbean found for SolrIndexSearcher\", mbeanServer.queryMBeans(searcher, null).isEmpty());\n\n    int oldNumDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertU(adoc(\"id\", \"1\"));\n    assertU(\"commit\", commit());\n    int numDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertTrue(\"New numDocs is same as old numDocs as reported by JMX\",\n            numDocs > oldNumDocs);\n  }\n\n","sourceOld":"  @Test\n  public void testJmxUpdate() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    log.info(\"Servers in testJmxUpdate: \" + servers);\n    log.info(h.getCore().getInfoRegistry().toString());\n\n    SolrInfoMBean bean = null;\n    // wait until searcher is registered\n    for (int i=0; i<100; i++) {\n      bean = h.getCore().getInfoRegistry().get(\"searcher\");\n      if (bean != null) break;\n      Thread.sleep(250);\n    }\n    if (bean==null) throw new RuntimeException(\"searcher was never registered\");\n    ObjectName searcher = getObjectName(\"searcher\", bean);\n\n    MBeanServer mbeanServer = servers.get(0);\n    log.info(\"Mbeans in server: \" + mbeanServer.queryNames(null, null));\n\n    assertFalse(\"No mbean found for SolrIndexSearcher\", mbeanServer.queryMBeans(searcher, null).isEmpty());\n\n    int oldNumDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertU(adoc(\"id\", \"1\"));\n    assertU(\"commit\", commit());\n    int numDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertTrue(\"New numDocs is same as old numDocs as reported by JMX\",\n            numDocs > oldNumDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/core/TestJmxIntegration#testJmxUpdate().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestJmxIntegration#testJmxUpdate().mjava","sourceNew":"  @Test\n  public void testJmxUpdate() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    log.info(\"Servers in testJmxUpdate: \" + servers);\n    log.info(h.getCore().getInfoRegistry().toString());\n\n    SolrInfoMBean bean = null;\n    // wait until searcher is registered\n    for (int i=0; i<100; i++) {\n      bean = h.getCore().getInfoRegistry().get(\"searcher\");\n      if (bean != null) break;\n      Thread.sleep(250);\n    }\n    if (bean==null) throw new RuntimeException(\"searcher was never registered\");\n    ObjectName searcher = getObjectName(\"searcher\", bean);\n    MBeanServer mbeanServer = servers.get(0);\n    log.info(\"Mbeans in server: \" + mbeanServer.queryNames(null, null));\n\n    assertFalse(\"No mbean found for SolrIndexSearcher\", mbeanServer.queryMBeans(searcher, null).isEmpty());\n\n    int oldNumDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertU(adoc(\"id\", \"1\"));\n    assertU(\"commit\", commit());\n    int numDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertTrue(\"New numDocs is same as old numDocs as reported by JMX\",\n            numDocs > oldNumDocs);\n  }\n\n","sourceOld":"  @Test\n  public void testJmxUpdate() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    log.info(\"Servers in testJmxUpdate: \" + servers);\n    log.info(h.getCore().getInfoRegistry().toString());\n\n    SolrInfoMBean bean = null;\n    // wait until searcher is registered\n    for (int i=0; i<100; i++) {\n      bean = h.getCore().getInfoRegistry().get(\"searcher\");\n      if (bean != null) break;\n      Thread.sleep(250);\n    }\n    if (bean==null) throw new RuntimeException(\"searcher was never registered\");\n    ObjectName searcher = getObjectName(\"searcher\", bean);\n\n    MBeanServer mbeanServer = servers.get(0);\n    log.info(\"Mbeans in server: \" + mbeanServer.queryNames(null, null));\n\n    assertFalse(\"No mbean found for SolrIndexSearcher\", mbeanServer.queryMBeans(searcher, null).isEmpty());\n\n    int oldNumDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertU(adoc(\"id\", \"1\"));\n    assertU(\"commit\", commit());\n    int numDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertTrue(\"New numDocs is same as old numDocs as reported by JMX\",\n            numDocs > oldNumDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxUpdate().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestJmxIntegration#testJmxUpdate().mjava","sourceNew":"  @Test\n  public void testJmxUpdate() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    log.info(\"Servers in testJmxUpdate: \" + servers);\n    log.info(h.getCore().getInfoRegistry().toString());\n\n    SolrInfoMBean bean = null;\n    // wait until searcher is registered\n    for (int i=0; i<100; i++) {\n      bean = h.getCore().getInfoRegistry().get(\"searcher\");\n      if (bean != null) break;\n      Thread.sleep(250);\n    }\n    if (bean==null) throw new RuntimeException(\"searcher was never registered\");\n    ObjectName searcher = getObjectName(\"searcher\", bean);\n    MBeanServer mbeanServer = servers.get(0);\n    log.info(\"Mbeans in server: \" + mbeanServer.queryNames(null, null));\n\n    assertFalse(\"No mbean found for SolrIndexSearcher\", mbeanServer.queryMBeans(searcher, null).isEmpty());\n\n    int oldNumDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertU(adoc(\"id\", \"1\"));\n    assertU(\"commit\", commit());\n    int numDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertTrue(\"New numDocs is same as old numDocs as reported by JMX\",\n            numDocs > oldNumDocs);\n  }\n\n","sourceOld":"  @Test\n  public void testJmxUpdate() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    log.info(\"Servers in testJmxUpdate: \" + servers);\n    log.info(h.getCore().getInfoRegistry().toString());\n\n    SolrInfoMBean bean = null;\n    // wait until searcher is registered\n    for (int i=0; i<100; i++) {\n      bean = h.getCore().getInfoRegistry().get(\"searcher\");\n      if (bean != null) break;\n      Thread.sleep(250);\n    }\n    if (bean==null) throw new RuntimeException(\"searcher was never registered\");\n    ObjectName searcher = getObjectName(\"searcher\", bean);\n    MBeanServer mbeanServer = servers.get(0);\n    log.info(\"Mbeans in server: \" + mbeanServer.queryNames(null, null));\n\n    assertFalse(\"No mbean found for SolrIndexSearcher\", mbeanServer.queryMBeans(searcher, null).isEmpty());\n\n    int oldNumDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertU(adoc(\"id\", \"1\"));\n    assertU(\"commit\", commit());\n    int numDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertTrue(\"New numDocs is same as old numDocs as reported by JMX\",\n            numDocs > oldNumDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxUpdate().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestJmxIntegration#testJmxUpdate().mjava","sourceNew":"  @Test\n  public void testJmxUpdate() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    log.info(\"Servers in testJmxUpdate: \" + servers);\n    log.info(h.getCore().getInfoRegistry().toString());\n\n    SolrInfoMBean bean = null;\n    // wait until searcher is registered\n    for (int i=0; i<100; i++) {\n      bean = h.getCore().getInfoRegistry().get(\"searcher\");\n      if (bean != null) break;\n      Thread.sleep(250);\n    }\n    if (bean==null) throw new RuntimeException(\"searcher was never registered\");\n    ObjectName searcher = getObjectName(\"searcher\", bean);\n    MBeanServer mbeanServer = servers.get(0);\n    log.info(\"Mbeans in server: \" + mbeanServer.queryNames(null, null));\n\n    assertFalse(\"No mbean found for SolrIndexSearcher\", mbeanServer.queryMBeans(searcher, null).isEmpty());\n\n    int oldNumDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertU(adoc(\"id\", \"1\"));\n    assertU(\"commit\", commit());\n    int numDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertTrue(\"New numDocs is same as old numDocs as reported by JMX\",\n            numDocs > oldNumDocs);\n  }\n\n","sourceOld":"  @Test\n  public void testJmxUpdate() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    log.info(\"Servers in testJmxUpdate: \" + servers);\n    log.info(h.getCore().getInfoRegistry().toString());\n\n    SolrInfoMBean bean = null;\n    // wait until searcher is registered\n    for (int i=0; i<100; i++) {\n      bean = h.getCore().getInfoRegistry().get(\"searcher\");\n      if (bean != null) break;\n      Thread.sleep(250);\n    }\n    if (bean==null) throw new RuntimeException(\"searcher was never registered\");\n    ObjectName searcher = getObjectName(\"searcher\", bean);\n    MBeanServer mbeanServer = servers.get(0);\n    log.info(\"Mbeans in server: \" + mbeanServer.queryNames(null, null));\n\n    assertFalse(\"No mbean found for SolrIndexSearcher\", mbeanServer.queryMBeans(searcher, null).isEmpty());\n\n    int oldNumDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertU(adoc(\"id\", \"1\"));\n    assertU(\"commit\", commit());\n    int numDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertTrue(\"New numDocs is same as old numDocs as reported by JMX\",\n            numDocs > oldNumDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxUpdate().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestJmxIntegration#testJmxUpdate().mjava","sourceNew":"  @Test\n  public void testJmxUpdate() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    log.info(\"Servers in testJmxUpdate: \" + servers);\n    log.info(h.getCore().getInfoRegistry().toString());\n\n    SolrInfoMBean bean = null;\n    // wait until searcher is registered\n    for (int i=0; i<100; i++) {\n      bean = h.getCore().getInfoRegistry().get(\"searcher\");\n      if (bean != null) break;\n      Thread.sleep(250);\n    }\n    if (bean==null) throw new RuntimeException(\"searcher was never registered\");\n    ObjectName searcher = getObjectName(\"searcher\", bean);\n    MBeanServer mbeanServer = servers.get(0);\n    log.info(\"Mbeans in server: \" + mbeanServer.queryNames(null, null));\n\n    assertFalse(\"No mbean found for SolrIndexSearcher\", mbeanServer.queryMBeans(searcher, null).isEmpty());\n\n    int oldNumDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertU(adoc(\"id\", \"1\"));\n    assertU(\"commit\", commit());\n    int numDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertTrue(\"New numDocs is same as old numDocs as reported by JMX\",\n            numDocs > oldNumDocs);\n  }\n\n","sourceOld":"  @Test\n  public void testJmxUpdate() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    log.info(\"Servers in testJmxUpdate: \" + servers);\n    log.info(h.getCore().getInfoRegistry().toString());\n\n    SolrInfoMBean bean = null;\n    // wait until searcher is registered\n    for (int i=0; i<100; i++) {\n      bean = h.getCore().getInfoRegistry().get(\"searcher\");\n      if (bean != null) break;\n      Thread.sleep(250);\n    }\n    if (bean==null) throw new RuntimeException(\"searcher was never registered\");\n    ObjectName searcher = getObjectName(\"searcher\", bean);\n    MBeanServer mbeanServer = servers.get(0);\n    log.info(\"Mbeans in server: \" + mbeanServer.queryNames(null, null));\n\n    assertFalse(\"No mbean found for SolrIndexSearcher\", mbeanServer.queryMBeans(searcher, null).isEmpty());\n\n    int oldNumDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertU(adoc(\"id\", \"1\"));\n    assertU(\"commit\", commit());\n    int numDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertTrue(\"New numDocs is same as old numDocs as reported by JMX\",\n            numDocs > oldNumDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["3d27fdb664de1d2da1efdddf2ccf6973dd072c69","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9ce83f0d72db4660fd277a9d357698004d8f4336","3d27fdb664de1d2da1efdddf2ccf6973dd072c69"],"3d27fdb664de1d2da1efdddf2ccf6973dd072c69":["9ce83f0d72db4660fd277a9d357698004d8f4336"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"9ce83f0d72db4660fd277a9d357698004d8f4336":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["3d27fdb664de1d2da1efdddf2ccf6973dd072c69"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["3d27fdb664de1d2da1efdddf2ccf6973dd072c69"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["9ce83f0d72db4660fd277a9d357698004d8f4336","3d27fdb664de1d2da1efdddf2ccf6973dd072c69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"3d27fdb664de1d2da1efdddf2ccf6973dd072c69":["c26f00b574427b55127e869b935845554afde1fa","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"1da8d55113b689b06716246649de6f62430f15c0":["9ce83f0d72db4660fd277a9d357698004d8f4336"],"9ce83f0d72db4660fd277a9d357698004d8f4336":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3d27fdb664de1d2da1efdddf2ccf6973dd072c69","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a258fbb26824fd104ed795e5d9033d2d040049ee","4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}