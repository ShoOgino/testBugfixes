{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#visitCompressedDocValues(int[],byte[],IndexInput,int[],int,IntersectVisitor,int).mjava","commits":[{"id":"3ca40baa99f9578eb8408ee5b9177f7ffe6f65d6","date":1468339076,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#visitCompressedDocValues(int[],byte[],IndexInput,int[],int,IntersectVisitor,int).mjava","pathOld":"/dev/null","sourceNew":"  private void visitCompressedDocValues(int[] commonPrefixLengths, byte[] scratchPackedValue, IndexInput in, int[] docIDs, int count, IntersectVisitor visitor, int compressedDim) throws IOException {\n    // the byte at `compressedByteOffset` is compressed using run-length compression,\n    // other suffix bytes are stored verbatim\n    final int compressedByteOffset = compressedDim * bytesPerDim + commonPrefixLengths[compressedDim];\n    commonPrefixLengths[compressedDim]++;\n    int i;\n    for (i = 0; i < count; ) {\n      scratchPackedValue[compressedByteOffset] = in.readByte();\n      final int runLen = Byte.toUnsignedInt(in.readByte());\n      for (int j = 0; j < runLen; ++j) {\n        for(int dim=0;dim<numDims;dim++) {\n          int prefix = commonPrefixLengths[dim];\n          in.readBytes(scratchPackedValue, dim*bytesPerDim + prefix, bytesPerDim - prefix);\n        }\n        visitor.visit(docIDs[i+j], scratchPackedValue);\n      }\n      i += runLen;\n    }\n    if (i != count) {\n      throw new CorruptIndexException(\"Sub blocks do not add up to the expected count: \" + count + \" != \" + i, in);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#visitCompressedDocValues(int[],byte[],IndexInput,int[],int,IntersectVisitor,int).mjava","pathOld":"/dev/null","sourceNew":"  private void visitCompressedDocValues(int[] commonPrefixLengths, byte[] scratchPackedValue, IndexInput in, int[] docIDs, int count, IntersectVisitor visitor, int compressedDim) throws IOException {\n    // the byte at `compressedByteOffset` is compressed using run-length compression,\n    // other suffix bytes are stored verbatim\n    final int compressedByteOffset = compressedDim * bytesPerDim + commonPrefixLengths[compressedDim];\n    commonPrefixLengths[compressedDim]++;\n    int i;\n    for (i = 0; i < count; ) {\n      scratchPackedValue[compressedByteOffset] = in.readByte();\n      final int runLen = Byte.toUnsignedInt(in.readByte());\n      for (int j = 0; j < runLen; ++j) {\n        for(int dim=0;dim<numDims;dim++) {\n          int prefix = commonPrefixLengths[dim];\n          in.readBytes(scratchPackedValue, dim*bytesPerDim + prefix, bytesPerDim - prefix);\n        }\n        visitor.visit(docIDs[i+j], scratchPackedValue);\n      }\n      i += runLen;\n    }\n    if (i != count) {\n      throw new CorruptIndexException(\"Sub blocks do not add up to the expected count: \" + count + \" != \" + i, in);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#visitCompressedDocValues(int[],byte[],IndexInput,int[],int,IntersectVisitor,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#visitCompressedDocValues(int[],byte[],IndexInput,int[],int,IntersectVisitor,int).mjava","sourceNew":"  private void visitCompressedDocValues(int[] commonPrefixLengths, byte[] scratchPackedValue, IndexInput in, int[] docIDs, int count, IntersectVisitor visitor, int compressedDim) throws IOException {\n    // the byte at `compressedByteOffset` is compressed using run-length compression,\n    // other suffix bytes are stored verbatim\n    final int compressedByteOffset = compressedDim * bytesPerDim + commonPrefixLengths[compressedDim];\n    commonPrefixLengths[compressedDim]++;\n    int i;\n    for (i = 0; i < count; ) {\n      scratchPackedValue[compressedByteOffset] = in.readByte();\n      final int runLen = Byte.toUnsignedInt(in.readByte());\n      for (int j = 0; j < runLen; ++j) {\n        for(int dim=0;dim<numDataDims;dim++) {\n          int prefix = commonPrefixLengths[dim];\n          in.readBytes(scratchPackedValue, dim*bytesPerDim + prefix, bytesPerDim - prefix);\n        }\n        visitor.visit(docIDs[i+j], scratchPackedValue);\n      }\n      i += runLen;\n    }\n    if (i != count) {\n      throw new CorruptIndexException(\"Sub blocks do not add up to the expected count: \" + count + \" != \" + i, in);\n    }\n  }\n\n","sourceOld":"  private void visitCompressedDocValues(int[] commonPrefixLengths, byte[] scratchPackedValue, IndexInput in, int[] docIDs, int count, IntersectVisitor visitor, int compressedDim) throws IOException {\n    // the byte at `compressedByteOffset` is compressed using run-length compression,\n    // other suffix bytes are stored verbatim\n    final int compressedByteOffset = compressedDim * bytesPerDim + commonPrefixLengths[compressedDim];\n    commonPrefixLengths[compressedDim]++;\n    int i;\n    for (i = 0; i < count; ) {\n      scratchPackedValue[compressedByteOffset] = in.readByte();\n      final int runLen = Byte.toUnsignedInt(in.readByte());\n      for (int j = 0; j < runLen; ++j) {\n        for(int dim=0;dim<numDims;dim++) {\n          int prefix = commonPrefixLengths[dim];\n          in.readBytes(scratchPackedValue, dim*bytesPerDim + prefix, bytesPerDim - prefix);\n        }\n        visitor.visit(docIDs[i+j], scratchPackedValue);\n      }\n      i += runLen;\n    }\n    if (i != count) {\n      throw new CorruptIndexException(\"Sub blocks do not add up to the expected count: \" + count + \" != \" + i, in);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70dbc563c35c0f6b6a0a545e65346166e6e5f2b","date":1561536972,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#visitCompressedDocValues(int[],byte[],IndexInput,int[],int,IntersectVisitor,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#visitCompressedDocValues(int[],byte[],IndexInput,int[],int,IntersectVisitor,int).mjava","sourceNew":"  private void visitCompressedDocValues(int[] commonPrefixLengths, byte[] scratchPackedValue, IndexInput in, int[] docIDs, int count, IntersectVisitor visitor, int compressedDim) throws IOException {\n    // the byte at `compressedByteOffset` is compressed using run-length compression,\n    // other suffix bytes are stored verbatim\n    final int compressedByteOffset = compressedDim * bytesPerDim + commonPrefixLengths[compressedDim];\n    commonPrefixLengths[compressedDim]++;\n    int i;\n    for (i = 0; i < count; ) {\n      scratchPackedValue[compressedByteOffset] = in.readByte();\n      final int runLen = Byte.toUnsignedInt(in.readByte());\n      for (int j = 0; j < runLen; ++j) {\n        for(int dim = 0; dim < numDataDims; dim++) {\n          int prefix = commonPrefixLengths[dim];\n          in.readBytes(scratchPackedValue, dim*bytesPerDim + prefix, bytesPerDim - prefix);\n        }\n        visitor.visit(docIDs[i+j], scratchPackedValue);\n      }\n      i += runLen;\n    }\n    if (i != count) {\n      throw new CorruptIndexException(\"Sub blocks do not add up to the expected count: \" + count + \" != \" + i, in);\n    }\n  }\n\n","sourceOld":"  private void visitCompressedDocValues(int[] commonPrefixLengths, byte[] scratchPackedValue, IndexInput in, int[] docIDs, int count, IntersectVisitor visitor, int compressedDim) throws IOException {\n    // the byte at `compressedByteOffset` is compressed using run-length compression,\n    // other suffix bytes are stored verbatim\n    final int compressedByteOffset = compressedDim * bytesPerDim + commonPrefixLengths[compressedDim];\n    commonPrefixLengths[compressedDim]++;\n    int i;\n    for (i = 0; i < count; ) {\n      scratchPackedValue[compressedByteOffset] = in.readByte();\n      final int runLen = Byte.toUnsignedInt(in.readByte());\n      for (int j = 0; j < runLen; ++j) {\n        for(int dim=0;dim<numDataDims;dim++) {\n          int prefix = commonPrefixLengths[dim];\n          in.readBytes(scratchPackedValue, dim*bytesPerDim + prefix, bytesPerDim - prefix);\n        }\n        visitor.visit(docIDs[i+j], scratchPackedValue);\n      }\n      i += runLen;\n    }\n    if (i != count) {\n      throw new CorruptIndexException(\"Sub blocks do not add up to the expected count: \" + count + \" != \" + i, in);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a14a9a6131884330f34844dabc1ece206ceaea9","date":1561954503,"type":5,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#visitCompressedDocValues(int[],byte[],IndexInput,BKDReaderDocIDSetIterator,int,IntersectVisitor,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#visitCompressedDocValues(int[],byte[],IndexInput,int[],int,IntersectVisitor,int).mjava","sourceNew":"  private void visitCompressedDocValues(int[] commonPrefixLengths, byte[] scratchPackedValue, IndexInput in, BKDReaderDocIDSetIterator scratchIterator, int count, IntersectVisitor visitor, int compressedDim) throws IOException {\n    // the byte at `compressedByteOffset` is compressed using run-length compression,\n    // other suffix bytes are stored verbatim\n    final int compressedByteOffset = compressedDim * bytesPerDim + commonPrefixLengths[compressedDim];\n    commonPrefixLengths[compressedDim]++;\n    int i;\n    for (i = 0; i < count; ) {\n      scratchPackedValue[compressedByteOffset] = in.readByte();\n      final int runLen = Byte.toUnsignedInt(in.readByte());\n      for (int j = 0; j < runLen; ++j) {\n        for(int dim = 0; dim < numDataDims; dim++) {\n          int prefix = commonPrefixLengths[dim];\n          in.readBytes(scratchPackedValue, dim*bytesPerDim + prefix, bytesPerDim - prefix);\n        }\n        visitor.visit(scratchIterator.docIDs[i+j], scratchPackedValue);\n      }\n      i += runLen;\n    }\n    if (i != count) {\n      throw new CorruptIndexException(\"Sub blocks do not add up to the expected count: \" + count + \" != \" + i, in);\n    }\n  }\n\n","sourceOld":"  private void visitCompressedDocValues(int[] commonPrefixLengths, byte[] scratchPackedValue, IndexInput in, int[] docIDs, int count, IntersectVisitor visitor, int compressedDim) throws IOException {\n    // the byte at `compressedByteOffset` is compressed using run-length compression,\n    // other suffix bytes are stored verbatim\n    final int compressedByteOffset = compressedDim * bytesPerDim + commonPrefixLengths[compressedDim];\n    commonPrefixLengths[compressedDim]++;\n    int i;\n    for (i = 0; i < count; ) {\n      scratchPackedValue[compressedByteOffset] = in.readByte();\n      final int runLen = Byte.toUnsignedInt(in.readByte());\n      for (int j = 0; j < runLen; ++j) {\n        for(int dim = 0; dim < numDataDims; dim++) {\n          int prefix = commonPrefixLengths[dim];\n          in.readBytes(scratchPackedValue, dim*bytesPerDim + prefix, bytesPerDim - prefix);\n        }\n        visitor.visit(docIDs[i+j], scratchPackedValue);\n      }\n      i += runLen;\n    }\n    if (i != count) {\n      throw new CorruptIndexException(\"Sub blocks do not add up to the expected count: \" + count + \" != \" + i, in);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f6652c943595e92c187ee904c382863013eae28f":["3ca40baa99f9578eb8408ee5b9177f7ffe6f65d6"],"3ca40baa99f9578eb8408ee5b9177f7ffe6f65d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e70dbc563c35c0f6b6a0a545e65346166e6e5f2b":["f6652c943595e92c187ee904c382863013eae28f"],"8a14a9a6131884330f34844dabc1ece206ceaea9":["e70dbc563c35c0f6b6a0a545e65346166e6e5f2b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3ca40baa99f9578eb8408ee5b9177f7ffe6f65d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8a14a9a6131884330f34844dabc1ece206ceaea9"]},"commit2Childs":{"f6652c943595e92c187ee904c382863013eae28f":["e70dbc563c35c0f6b6a0a545e65346166e6e5f2b"],"3ca40baa99f9578eb8408ee5b9177f7ffe6f65d6":["f6652c943595e92c187ee904c382863013eae28f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3ca40baa99f9578eb8408ee5b9177f7ffe6f65d6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"e70dbc563c35c0f6b6a0a545e65346166e6e5f2b":["8a14a9a6131884330f34844dabc1ece206ceaea9"],"8a14a9a6131884330f34844dabc1ece206ceaea9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}