{"path":"solr/core/src/test/org/apache/solr/cloud/CloudExitableDirectoryReaderTest#testCreepThenBite().mjava","commits":[{"id":"a3584d3db8b472772e3329d9d95d584b68ae997e","date":1551710517,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CloudExitableDirectoryReaderTest#testCreepThenBite().mjava","pathOld":"/dev/null","sourceNew":"  @Test \n  @Repeat(iterations=5)\n  public void testCreepThenBite() throws Exception {\n    int creep=100;\n    ModifiableSolrParams params = params(\"q\", \"{!cache=false}name:a*\");\n    SolrParams cases[] = new SolrParams[] {\n        params( \"sort\",\"query($q,1) asc\"),\n        params(\"rows\",\"0\", \"facet\",\"true\", \"facet.method\", \"enum\", \"facet.field\", \"name\"),\n        params(\"rows\",\"0\", \"json.facet\",\"{ ids: { type: range, field : num, start : 1, end : 99, gap : 9 }}\")\n        }; //add more cases here \n\n    params.add(cases[random().nextInt(cases.length)]);\n    for (; ; creep*=1.5) {\n      final int boundary = creep;\n      try(Trap catchClass = catchCount(boundary)){\n        \n        params.set(\"boundary\", boundary);\n        QueryResponse rsp = cluster.getSolrClient().query(COLLECTION, \n            params);\n        assertEquals(\"\"+rsp, rsp.getStatus(), 0);\n        assertNo500s(\"\"+rsp);\n        if (!isPartial(rsp)) {\n          assertFalse(catchClass.hasCaught());\n          break;\n        }\n        assertTrue(catchClass.hasCaught());\n      }catch(AssertionError ae) {\n        Trap.dumpLastStackTraces(log);\n        throw ae;\n      }\n    }\n    int numBites = atLeast(100);\n    for(int bite=0; bite<numBites; bite++) {\n      int boundary = random().nextInt(creep);\n      try(Trap catchCount = catchCount(boundary)){\n        params.set(\"boundary\", boundary);\n        QueryResponse rsp = cluster.getSolrClient().query(COLLECTION, \n            params);\n        assertEquals(\"\"+rsp, rsp.getStatus(), 0);\n        assertNo500s(\"\"+rsp);\n        assertEquals(\"\"+creep+\" ticks were sucessful; trying \"+boundary+\" yields \"+rsp, \n            catchCount.hasCaught(), isPartial(rsp));\n      }catch(AssertionError ae) {\n        Trap.dumpLastStackTraces(log);\n        throw ae;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["68f345f3b4bee014d571c564dac11b519febe85f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"68f345f3b4bee014d571c564dac11b519febe85f","date":1560355769,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CloudExitableDirectoryReaderTest#testCreepThenBite().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CloudExitableDirectoryReaderTest#testCreepThenBite().mjava","sourceNew":"  @Test \n  @Repeat(iterations=5)\n  public void testCreepThenBite() throws Exception {\n    int creep=100;\n    ModifiableSolrParams params = params(\"q\", \"{!cache=false}name:a*\");\n    SolrParams cases[] = new SolrParams[] {\n        params( \"sort\",\"query($q,1) asc\"),\n        params(\"rows\",\"0\", \"facet\",\"true\", \"facet.method\", \"enum\", \"facet.field\", \"name\"),\n        params(\"rows\",\"0\", \"json.facet\",\"{ ids: { type: range, field : num, start : 1, end : 99, gap : 9 }}\")\n    }; // add more cases here\n\n    params.add(cases[random().nextInt(cases.length)]);\n    for (; ; creep*=1.5) {\n      final int boundary = creep;\n      try(Trap catchClass = catchCount(boundary)){\n        \n        params.set(\"boundary\", boundary);\n        QueryResponse rsp = cluster.getSolrClient().query(COLLECTION, \n            params);\n        assertEquals(\"\"+rsp, rsp.getStatus(), 0);\n        assertNo500s(\"\"+rsp);\n        if (!isPartial(rsp)) {\n          assertFalse(catchClass.hasCaught());\n          break;\n        }\n        assertTrue(catchClass.hasCaught());\n      }catch(AssertionError ae) {\n        Trap.dumpLastStackTraces(log);\n        throw ae;\n      }\n    }\n    int numBites = atLeast(100);\n    for(int bite=0; bite<numBites; bite++) {\n      int boundary = random().nextInt(creep);\n      boolean omitHeader = random().nextBoolean();\n      try(Trap catchCount = catchCount(boundary)){\n        params.set(\"omitHeader\", \"\" + omitHeader);\n        params.set(\"boundary\", boundary);\n        QueryResponse rsp = cluster.getSolrClient().query(COLLECTION, \n            params);\n        assertEquals(\"\"+rsp, rsp.getStatus(), 0);\n        assertNo500s(\"\"+rsp);\n        // without responseHeader, whether the response is partial or not can't be known\n        // omitHeader=true used in request to ensure that no NPE exceptions are thrown\n        if (omitHeader) {\n          continue;\n        }\n        assertEquals(\"\" + creep + \" ticks were successful; trying \" + boundary + \" yields \" + rsp,\n            catchCount.hasCaught(), isPartial(rsp));\n      }catch(AssertionError ae) {\n        Trap.dumpLastStackTraces(log);\n        throw ae;\n      }\n    }\n  }\n\n","sourceOld":"  @Test \n  @Repeat(iterations=5)\n  public void testCreepThenBite() throws Exception {\n    int creep=100;\n    ModifiableSolrParams params = params(\"q\", \"{!cache=false}name:a*\");\n    SolrParams cases[] = new SolrParams[] {\n        params( \"sort\",\"query($q,1) asc\"),\n        params(\"rows\",\"0\", \"facet\",\"true\", \"facet.method\", \"enum\", \"facet.field\", \"name\"),\n        params(\"rows\",\"0\", \"json.facet\",\"{ ids: { type: range, field : num, start : 1, end : 99, gap : 9 }}\")\n        }; //add more cases here \n\n    params.add(cases[random().nextInt(cases.length)]);\n    for (; ; creep*=1.5) {\n      final int boundary = creep;\n      try(Trap catchClass = catchCount(boundary)){\n        \n        params.set(\"boundary\", boundary);\n        QueryResponse rsp = cluster.getSolrClient().query(COLLECTION, \n            params);\n        assertEquals(\"\"+rsp, rsp.getStatus(), 0);\n        assertNo500s(\"\"+rsp);\n        if (!isPartial(rsp)) {\n          assertFalse(catchClass.hasCaught());\n          break;\n        }\n        assertTrue(catchClass.hasCaught());\n      }catch(AssertionError ae) {\n        Trap.dumpLastStackTraces(log);\n        throw ae;\n      }\n    }\n    int numBites = atLeast(100);\n    for(int bite=0; bite<numBites; bite++) {\n      int boundary = random().nextInt(creep);\n      try(Trap catchCount = catchCount(boundary)){\n        params.set(\"boundary\", boundary);\n        QueryResponse rsp = cluster.getSolrClient().query(COLLECTION, \n            params);\n        assertEquals(\"\"+rsp, rsp.getStatus(), 0);\n        assertNo500s(\"\"+rsp);\n        assertEquals(\"\"+creep+\" ticks were sucessful; trying \"+boundary+\" yields \"+rsp, \n            catchCount.hasCaught(), isPartial(rsp));\n      }catch(AssertionError ae) {\n        Trap.dumpLastStackTraces(log);\n        throw ae;\n      }\n    }\n  }\n\n","bugFix":["a3584d3db8b472772e3329d9d95d584b68ae997e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e10849ad44771e6db197a65e8a652e934896a404","date":1568244568,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CloudExitableDirectoryReaderTest#testCreepThenBite().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CloudExitableDirectoryReaderTest#testCreepThenBite().mjava","sourceNew":"  @Test \n  @Repeat(iterations=5)\n  public void testCreepThenBite() throws Exception {\n    int creep=100;\n    ModifiableSolrParams params = params(\"q\", \"{!cache=false}name:a*\");\n    SolrParams cases[] = new SolrParams[] {\n        params( \"sort\",\"query($q,1) asc\"),\n        params(\"rows\",\"0\", \"facet\",\"true\", \"facet.method\", \"enum\", \"facet.field\", \"name\"),\n        params(\"rows\",\"0\", \"json.facet\",\"{ ids: { type: range, field : num, start : 1, end : 99, gap : 9 }}\")\n    }; // add more cases here\n\n    params.add(cases[random().nextInt(cases.length)]);\n    for (; ; creep*=1.5) {\n      final int boundary = creep;\n      try(Trap catchClass = catchCount(boundary)){\n        \n        params.set(\"boundary\", boundary);\n        QueryResponse rsp = client.query(COLLECTION, \n            params);\n        assertEquals(\"\"+rsp, rsp.getStatus(), 0);\n        assertNo500s(\"\"+rsp);\n        if (!isPartial(rsp)) {\n          assertFalse(catchClass.hasCaught());\n          break;\n        }\n        assertTrue(catchClass.hasCaught());\n      }catch(AssertionError ae) {\n        Trap.dumpLastStackTraces(log);\n        throw ae;\n      }\n    }\n    int numBites = atLeast(100);\n    for(int bite=0; bite<numBites; bite++) {\n      int boundary = random().nextInt(creep);\n      boolean omitHeader = random().nextBoolean();\n      try(Trap catchCount = catchCount(boundary)){\n        params.set(\"omitHeader\", \"\" + omitHeader);\n        params.set(\"boundary\", boundary);\n        QueryResponse rsp = client.query(COLLECTION, \n            params);\n        assertEquals(\"\"+rsp, rsp.getStatus(), 0);\n        assertNo500s(\"\"+rsp);\n        // without responseHeader, whether the response is partial or not can't be known\n        // omitHeader=true used in request to ensure that no NPE exceptions are thrown\n        if (omitHeader) {\n          continue;\n        }\n        assertEquals(\"\" + creep + \" ticks were successful; trying \" + boundary + \" yields \" + rsp,\n            catchCount.hasCaught(), isPartial(rsp));\n      }catch(AssertionError ae) {\n        Trap.dumpLastStackTraces(log);\n        throw ae;\n      }\n    }\n  }\n\n","sourceOld":"  @Test \n  @Repeat(iterations=5)\n  public void testCreepThenBite() throws Exception {\n    int creep=100;\n    ModifiableSolrParams params = params(\"q\", \"{!cache=false}name:a*\");\n    SolrParams cases[] = new SolrParams[] {\n        params( \"sort\",\"query($q,1) asc\"),\n        params(\"rows\",\"0\", \"facet\",\"true\", \"facet.method\", \"enum\", \"facet.field\", \"name\"),\n        params(\"rows\",\"0\", \"json.facet\",\"{ ids: { type: range, field : num, start : 1, end : 99, gap : 9 }}\")\n    }; // add more cases here\n\n    params.add(cases[random().nextInt(cases.length)]);\n    for (; ; creep*=1.5) {\n      final int boundary = creep;\n      try(Trap catchClass = catchCount(boundary)){\n        \n        params.set(\"boundary\", boundary);\n        QueryResponse rsp = cluster.getSolrClient().query(COLLECTION, \n            params);\n        assertEquals(\"\"+rsp, rsp.getStatus(), 0);\n        assertNo500s(\"\"+rsp);\n        if (!isPartial(rsp)) {\n          assertFalse(catchClass.hasCaught());\n          break;\n        }\n        assertTrue(catchClass.hasCaught());\n      }catch(AssertionError ae) {\n        Trap.dumpLastStackTraces(log);\n        throw ae;\n      }\n    }\n    int numBites = atLeast(100);\n    for(int bite=0; bite<numBites; bite++) {\n      int boundary = random().nextInt(creep);\n      boolean omitHeader = random().nextBoolean();\n      try(Trap catchCount = catchCount(boundary)){\n        params.set(\"omitHeader\", \"\" + omitHeader);\n        params.set(\"boundary\", boundary);\n        QueryResponse rsp = cluster.getSolrClient().query(COLLECTION, \n            params);\n        assertEquals(\"\"+rsp, rsp.getStatus(), 0);\n        assertNo500s(\"\"+rsp);\n        // without responseHeader, whether the response is partial or not can't be known\n        // omitHeader=true used in request to ensure that no NPE exceptions are thrown\n        if (omitHeader) {\n          continue;\n        }\n        assertEquals(\"\" + creep + \" ticks were successful; trying \" + boundary + \" yields \" + rsp,\n            catchCount.hasCaught(), isPartial(rsp));\n      }catch(AssertionError ae) {\n        Trap.dumpLastStackTraces(log);\n        throw ae;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21158e0d8c55f9d05b17a5fa3bcd714c236a4a39","date":1574109283,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CloudExitableDirectoryReaderTest#testCreepThenBite().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CloudExitableDirectoryReaderTest#testCreepThenBite().mjava","sourceNew":"  @Test \n  @Repeat(iterations=5)\n  public void testCreepThenBite() throws Exception {\n    int creep=100;\n    ModifiableSolrParams params = params(\"q\", \"{!cache=false}name:a*\");\n    SolrParams cases[] = new SolrParams[] {\n        params( \"sort\",\"query($q,1) asc\"),\n        params(\"rows\",\"0\", \"facet\",\"true\", \"facet.method\", \"enum\", \"facet.field\", \"name\"),\n        params(\"rows\",\"0\", \"json.facet\",\"{ ids: { type: range, field : num, start : 1, end : 99, gap : 9 }}\"),\n        params(\"q\", \"*:*\", \"rows\",\"0\", \"json.facet\",\"{ ids: { type: field, field : num}}\"),\n        params(\"q\", \"*:*\", \"rows\",\"0\", \"json.facet\",\"{ ids: { type: field, field : name_dv}}\"),\n        params(\"q\", \"*:*\", \"rows\",\"0\", \"json.facet\",\"{ ids: { type: field, field : name_dvs}}\")\n    }; // add more cases here\n\n    params.add(cases[random().nextInt(cases.length)]);\n    for (; ; creep*=1.5) {\n      final int boundary = creep;\n      try(Trap catchClass = catchCount(boundary)){\n        \n        params.set(\"boundary\", boundary);\n        QueryResponse rsp = client.query(COLLECTION, \n            params);\n        assertEquals(\"\"+rsp, rsp.getStatus(), 0);\n        assertNo500s(\"\"+rsp);\n        if (!isPartial(rsp)) {\n          assertFalse(catchClass.hasCaught());\n          break;\n        }\n        assertTrue(catchClass.hasCaught());\n      }catch(AssertionError ae) {\n        Trap.dumpLastStackTraces(log);\n        throw ae;\n      }\n    }\n    int numBites = atLeast(100);\n    for(int bite=0; bite<numBites; bite++) {\n      int boundary = random().nextInt(creep);\n      boolean omitHeader = random().nextBoolean();\n      try(Trap catchCount = catchCount(boundary)){\n        params.set(\"omitHeader\", \"\" + omitHeader);\n        params.set(\"boundary\", boundary);\n        QueryResponse rsp = client.query(COLLECTION, \n            params);\n        assertEquals(\"\"+rsp, rsp.getStatus(), 0);\n        assertNo500s(\"\"+rsp);\n        // without responseHeader, whether the response is partial or not can't be known\n        // omitHeader=true used in request to ensure that no NPE exceptions are thrown\n        if (omitHeader) {\n          continue;\n        }\n        assertEquals(\"\" + creep + \" ticks were successful; trying \" + boundary + \" yields \" + rsp,\n            catchCount.hasCaught(), isPartial(rsp));\n      }catch(AssertionError ae) {\n        Trap.dumpLastStackTraces(log);\n        throw ae;\n      }\n    }\n  }\n\n","sourceOld":"  @Test \n  @Repeat(iterations=5)\n  public void testCreepThenBite() throws Exception {\n    int creep=100;\n    ModifiableSolrParams params = params(\"q\", \"{!cache=false}name:a*\");\n    SolrParams cases[] = new SolrParams[] {\n        params( \"sort\",\"query($q,1) asc\"),\n        params(\"rows\",\"0\", \"facet\",\"true\", \"facet.method\", \"enum\", \"facet.field\", \"name\"),\n        params(\"rows\",\"0\", \"json.facet\",\"{ ids: { type: range, field : num, start : 1, end : 99, gap : 9 }}\")\n    }; // add more cases here\n\n    params.add(cases[random().nextInt(cases.length)]);\n    for (; ; creep*=1.5) {\n      final int boundary = creep;\n      try(Trap catchClass = catchCount(boundary)){\n        \n        params.set(\"boundary\", boundary);\n        QueryResponse rsp = client.query(COLLECTION, \n            params);\n        assertEquals(\"\"+rsp, rsp.getStatus(), 0);\n        assertNo500s(\"\"+rsp);\n        if (!isPartial(rsp)) {\n          assertFalse(catchClass.hasCaught());\n          break;\n        }\n        assertTrue(catchClass.hasCaught());\n      }catch(AssertionError ae) {\n        Trap.dumpLastStackTraces(log);\n        throw ae;\n      }\n    }\n    int numBites = atLeast(100);\n    for(int bite=0; bite<numBites; bite++) {\n      int boundary = random().nextInt(creep);\n      boolean omitHeader = random().nextBoolean();\n      try(Trap catchCount = catchCount(boundary)){\n        params.set(\"omitHeader\", \"\" + omitHeader);\n        params.set(\"boundary\", boundary);\n        QueryResponse rsp = client.query(COLLECTION, \n            params);\n        assertEquals(\"\"+rsp, rsp.getStatus(), 0);\n        assertNo500s(\"\"+rsp);\n        // without responseHeader, whether the response is partial or not can't be known\n        // omitHeader=true used in request to ensure that no NPE exceptions are thrown\n        if (omitHeader) {\n          continue;\n        }\n        assertEquals(\"\" + creep + \" ticks were successful; trying \" + boundary + \" yields \" + rsp,\n            catchCount.hasCaught(), isPartial(rsp));\n      }catch(AssertionError ae) {\n        Trap.dumpLastStackTraces(log);\n        throw ae;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"68f345f3b4bee014d571c564dac11b519febe85f":["a3584d3db8b472772e3329d9d95d584b68ae997e"],"e10849ad44771e6db197a65e8a652e934896a404":["68f345f3b4bee014d571c564dac11b519febe85f"],"21158e0d8c55f9d05b17a5fa3bcd714c236a4a39":["e10849ad44771e6db197a65e8a652e934896a404"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3584d3db8b472772e3329d9d95d584b68ae997e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["21158e0d8c55f9d05b17a5fa3bcd714c236a4a39"]},"commit2Childs":{"68f345f3b4bee014d571c564dac11b519febe85f":["e10849ad44771e6db197a65e8a652e934896a404"],"e10849ad44771e6db197a65e8a652e934896a404":["21158e0d8c55f9d05b17a5fa3bcd714c236a4a39"],"21158e0d8c55f9d05b17a5fa3bcd714c236a4a39":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3584d3db8b472772e3329d9d95d584b68ae997e"],"a3584d3db8b472772e3329d9d95d584b68ae997e":["68f345f3b4bee014d571c564dac11b519febe85f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}