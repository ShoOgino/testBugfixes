{"path":"src/java/org/apache/solr/update/processor/SignatureUpdateProcessorFactory.SignatureUpdateProcessor#processAdd(AddUpdateCommand).mjava","commits":[{"id":"80c633e661becbcb6deb6ea2ef4588d230102f50","date":1234308117,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/processor/SignatureUpdateProcessorFactory.SignatureUpdateProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      if (enabled) {\n        SolrInputDocument doc = cmd.getSolrInputDocument();\n        if (sigFields == null || sigFields.size() == 0) {\n          Collection<String> docFields = doc.getFieldNames();\n          sigFields = new ArrayList<String>(docFields.size());\n          sigFields.addAll(docFields);\n          Collections.sort(sigFields);\n        }\n\n        Signature sig = (Signature) loadClass(signatureClass);\n        sig.init(params);\n\n        for (String field : sigFields) {\n          SolrInputField f = doc.getField(field);\n          if (f != null) {\n            sig.add(field);\n            Object o = f.getValue();\n            if (o instanceof String) {\n              sig.add((String)o);\n            } else if (o instanceof Collection) {\n              for (Object oo : (Collection)o) {\n                if (oo instanceof String) {\n                  sig.add((String)oo);\n                }\n              }\n            }\n          }\n        }\n\n        byte[] signature = sig.getSignature();\n        char[] arr = new char[signature.length<<1];\n        for (int i=0; i<signature.length; i++) {\n          int b = signature[i];\n          int idx = i<<1;\n          arr[idx]= StrUtils.HEX_DIGITS[(b >> 4) & 0xf];\n          arr[idx+1]= StrUtils.HEX_DIGITS[b & 0xf];\n        }\n        String sigString = new String(arr);\n        doc.addField(signatureField, sigString);\n\n        if (overwriteDupes) {\n          cmd.updateTerm = signatureTerm.createTerm(sigString);\n        }\n\n      }\n\n      if (next != null)\n        next.processAdd(cmd);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["dbf74e192b8a096b0c484ce31b932a00d26ed27d","dbf74e192b8a096b0c484ce31b932a00d26ed27d","dbf74e192b8a096b0c484ce31b932a00d26ed27d","0732937a74645cc2c6cfd9edec1f299c0e33313a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0732937a74645cc2c6cfd9edec1f299c0e33313a","date":1250091433,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/update/processor/SignatureUpdateProcessorFactory.SignatureUpdateProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"src/java/org/apache/solr/update/processor/SignatureUpdateProcessorFactory.SignatureUpdateProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      if (enabled) {\n        SolrInputDocument doc = cmd.getSolrInputDocument();\n        if (sigFields == null || sigFields.size() == 0) {\n          Collection<String> docFields = doc.getFieldNames();\n          sigFields = new ArrayList<String>(docFields.size());\n          sigFields.addAll(docFields);\n          Collections.sort(sigFields);\n        }\n\n        Signature sig = (Signature) req.getCore().getResourceLoader().newInstance(signatureClass); \n        sig.init(params);\n\n        for (String field : sigFields) {\n          SolrInputField f = doc.getField(field);\n          if (f != null) {\n            sig.add(field);\n            Object o = f.getValue();\n            if (o instanceof String) {\n              sig.add((String)o);\n            } else if (o instanceof Collection) {\n              for (Object oo : (Collection)o) {\n                if (oo instanceof String) {\n                  sig.add((String)oo);\n                }\n              }\n            }\n          }\n        }\n\n        byte[] signature = sig.getSignature();\n        char[] arr = new char[signature.length<<1];\n        for (int i=0; i<signature.length; i++) {\n          int b = signature[i];\n          int idx = i<<1;\n          arr[idx]= StrUtils.HEX_DIGITS[(b >> 4) & 0xf];\n          arr[idx+1]= StrUtils.HEX_DIGITS[b & 0xf];\n        }\n        String sigString = new String(arr);\n        doc.addField(signatureField, sigString);\n\n        if (overwriteDupes) {\n          cmd.updateTerm = signatureTerm.createTerm(sigString);\n        }\n\n      }\n\n      if (next != null)\n        next.processAdd(cmd);\n    }\n\n","sourceOld":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      if (enabled) {\n        SolrInputDocument doc = cmd.getSolrInputDocument();\n        if (sigFields == null || sigFields.size() == 0) {\n          Collection<String> docFields = doc.getFieldNames();\n          sigFields = new ArrayList<String>(docFields.size());\n          sigFields.addAll(docFields);\n          Collections.sort(sigFields);\n        }\n\n        Signature sig = (Signature) loadClass(signatureClass);\n        sig.init(params);\n\n        for (String field : sigFields) {\n          SolrInputField f = doc.getField(field);\n          if (f != null) {\n            sig.add(field);\n            Object o = f.getValue();\n            if (o instanceof String) {\n              sig.add((String)o);\n            } else if (o instanceof Collection) {\n              for (Object oo : (Collection)o) {\n                if (oo instanceof String) {\n                  sig.add((String)oo);\n                }\n              }\n            }\n          }\n        }\n\n        byte[] signature = sig.getSignature();\n        char[] arr = new char[signature.length<<1];\n        for (int i=0; i<signature.length; i++) {\n          int b = signature[i];\n          int idx = i<<1;\n          arr[idx]= StrUtils.HEX_DIGITS[(b >> 4) & 0xf];\n          arr[idx+1]= StrUtils.HEX_DIGITS[b & 0xf];\n        }\n        String sigString = new String(arr);\n        doc.addField(signatureField, sigString);\n\n        if (overwriteDupes) {\n          cmd.updateTerm = signatureTerm.createTerm(sigString);\n        }\n\n      }\n\n      if (next != null)\n        next.processAdd(cmd);\n    }\n\n","bugFix":["80c633e661becbcb6deb6ea2ef4588d230102f50"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/update/processor/SignatureUpdateProcessorFactory.SignatureUpdateProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"src/java/org/apache/solr/update/processor/SignatureUpdateProcessorFactory.SignatureUpdateProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      if (enabled) {\n        SolrInputDocument doc = cmd.getSolrInputDocument();\n        if (sigFields == null || sigFields.size() == 0) {\n          Collection<String> docFields = doc.getFieldNames();\n          sigFields = new ArrayList<String>(docFields.size());\n          sigFields.addAll(docFields);\n          Collections.sort(sigFields);\n        }\n\n        Signature sig = (Signature) req.getCore().getResourceLoader().newInstance(signatureClass); \n        sig.init(params);\n\n        for (String field : sigFields) {\n          SolrInputField f = doc.getField(field);\n          if (f != null) {\n            sig.add(field);\n            Object o = f.getValue();\n            if (o instanceof String) {\n              sig.add((String)o);\n            } else if (o instanceof Collection) {\n              for (Object oo : (Collection)o) {\n                if (oo instanceof String) {\n                  sig.add((String)oo);\n                }\n              }\n            }\n          }\n        }\n\n        byte[] signature = sig.getSignature();\n        char[] arr = new char[signature.length<<1];\n        for (int i=0; i<signature.length; i++) {\n          int b = signature[i];\n          int idx = i<<1;\n          arr[idx]= StrUtils.HEX_DIGITS[(b >> 4) & 0xf];\n          arr[idx+1]= StrUtils.HEX_DIGITS[b & 0xf];\n        }\n        String sigString = new String(arr);\n        doc.addField(signatureField, sigString);\n\n        if (overwriteDupes) {\n          cmd.updateTerm = signatureTerm.createTerm(sigString);\n        }\n\n      }\n\n      if (next != null)\n        next.processAdd(cmd);\n    }\n\n","sourceOld":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      if (enabled) {\n        SolrInputDocument doc = cmd.getSolrInputDocument();\n        if (sigFields == null || sigFields.size() == 0) {\n          Collection<String> docFields = doc.getFieldNames();\n          sigFields = new ArrayList<String>(docFields.size());\n          sigFields.addAll(docFields);\n          Collections.sort(sigFields);\n        }\n\n        Signature sig = (Signature) req.getCore().getResourceLoader().newInstance(signatureClass); \n        sig.init(params);\n\n        for (String field : sigFields) {\n          SolrInputField f = doc.getField(field);\n          if (f != null) {\n            sig.add(field);\n            Object o = f.getValue();\n            if (o instanceof String) {\n              sig.add((String)o);\n            } else if (o instanceof Collection) {\n              for (Object oo : (Collection)o) {\n                if (oo instanceof String) {\n                  sig.add((String)oo);\n                }\n              }\n            }\n          }\n        }\n\n        byte[] signature = sig.getSignature();\n        char[] arr = new char[signature.length<<1];\n        for (int i=0; i<signature.length; i++) {\n          int b = signature[i];\n          int idx = i<<1;\n          arr[idx]= StrUtils.HEX_DIGITS[(b >> 4) & 0xf];\n          arr[idx+1]= StrUtils.HEX_DIGITS[b & 0xf];\n        }\n        String sigString = new String(arr);\n        doc.addField(signatureField, sigString);\n\n        if (overwriteDupes) {\n          cmd.updateTerm = signatureTerm.createTerm(sigString);\n        }\n\n      }\n\n      if (next != null)\n        next.processAdd(cmd);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["0732937a74645cc2c6cfd9edec1f299c0e33313a"],"0732937a74645cc2c6cfd9edec1f299c0e33313a":["80c633e661becbcb6deb6ea2ef4588d230102f50"],"80c633e661becbcb6deb6ea2ef4588d230102f50":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["80c633e661becbcb6deb6ea2ef4588d230102f50"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"0732937a74645cc2c6cfd9edec1f299c0e33313a":["ad94625fb8d088209f46650c8097196fec67f00c"],"80c633e661becbcb6deb6ea2ef4588d230102f50":["0732937a74645cc2c6cfd9edec1f299c0e33313a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}