{"path":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newRandom(long).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newRandom(long).mjava","pathOld":"src/test/org/apache/lucene/util/LuceneTestCase#newRandom(long).mjava","sourceNew":"  /**\n   * Returns a {@link Random} instance for generating random numbers during the test.\n   * If an error occurs in the test that is not reproducible, you can use this method to\n   * initialize the number generator with the seed that was printed out during the failing test.\n   */\n  public Random newRandom(long seed) {\n    if (this.seed != null) {\n      throw new IllegalStateException(\"please call LuceneTestCase.newRandom only once per test\");\n    }\n    this.seed = Long.valueOf(seed);\n    return new Random(seed);\n  }\n\n","sourceOld":"  /**\n   * Returns a {@link Random} instance for generating random numbers during the test.\n   * If an error occurs in the test that is not reproducible, you can use this method to\n   * initialize the number generator with the seed that was printed out during the failing test.\n   */\n  public Random newRandom(long seed) {\n    if (this.seed != null) {\n      throw new IllegalStateException(\"please call LuceneTestCase.newRandom only once per test\");\n    }\n    this.seed = Long.valueOf(seed);\n    return new Random(seed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee2d29b7102b7a68e60fc2947f781371c718af4f","date":1279889245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newRandom(long).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newRandom(long).mjava","sourceNew":"  /**\n   * Returns a {@link Random} instance for generating random numbers during the test.\n   * If an error occurs in the test that is not reproducible, you can use this method to\n   * initialize the number generator with the seed that was printed out during the failing test.\n   */\n  public Random newRandom(long seed) {\n    if (this.seed != null) {\n      throw new IllegalStateException(\"please call LuceneTestCase.newRandom only once per test\");\n    }\n    System.out.println(\"WARNING: random seed of testcase '\" + getName() + \"' is fixed to: \" + seed);\n    this.seed = Long.valueOf(seed);\n    return new Random(seed);\n  }\n\n","sourceOld":"  /**\n   * Returns a {@link Random} instance for generating random numbers during the test.\n   * If an error occurs in the test that is not reproducible, you can use this method to\n   * initialize the number generator with the seed that was printed out during the failing test.\n   */\n  public Random newRandom(long seed) {\n    if (this.seed != null) {\n      throw new IllegalStateException(\"please call LuceneTestCase.newRandom only once per test\");\n    }\n    this.seed = Long.valueOf(seed);\n    return new Random(seed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7f814567907094310b7ce1535a68437e43b28ea","date":1279952745,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newRandom(long).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newRandom(long).mjava","sourceNew":"  /**\n   * Returns a {@link Random} instance for generating random numbers during the test.\n   * If an error occurs in the test that is not reproducible, you can use this method to\n   * initialize the number generator with the seed that was printed out during the failing test.\n   */\n  public Random newRandom(long seed) {\n    if (this.seed != null) {\n      throw new IllegalStateException(\"please call LuceneTestCase.newRandom only once per test\");\n    }\n    System.out.println(\"WARNING: random seed of testcase '\" + getName() + \"' is fixed to: \" + seed);\n    this.seed = Long.valueOf(seed);\n    return new Random(seed);\n  }\n\n","sourceOld":"  /**\n   * Returns a {@link Random} instance for generating random numbers during the test.\n   * If an error occurs in the test that is not reproducible, you can use this method to\n   * initialize the number generator with the seed that was printed out during the failing test.\n   */\n  public Random newRandom(long seed) {\n    if (this.seed != null) {\n      throw new IllegalStateException(\"please call LuceneTestCase.newRandom only once per test\");\n    }\n    this.seed = Long.valueOf(seed);\n    return new Random(seed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newRandom(long).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns a {@link Random} instance for generating random numbers during the test.\n   * If an error occurs in the test that is not reproducible, you can use this method to\n   * initialize the number generator with the seed that was printed out during the failing test.\n   */\n  public Random newRandom(long seed) {\n    if (this.seed != null) {\n      throw new IllegalStateException(\"please call LuceneTestCase.newRandom only once per test\");\n    }\n    System.out.println(\"WARNING: random seed of testcase '\" + getName() + \"' is fixed to: \" + seed);\n    this.seed = Long.valueOf(seed);\n    return new Random(seed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newRandom(long).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns a {@link Random} instance for generating random numbers during the test.\n   * If an error occurs in the test that is not reproducible, you can use this method to\n   * initialize the number generator with the seed that was printed out during the failing test.\n   */\n  public Random newRandom(long seed) {\n    if (this.seed != null) {\n      throw new IllegalStateException(\"please call LuceneTestCase.newRandom only once per test\");\n    }\n    System.out.println(\"WARNING: random seed of testcase '\" + getName() + \"' is fixed to: \" + seed);\n    this.seed = Long.valueOf(seed);\n    return new Random(seed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ee2d29b7102b7a68e60fc2947f781371c718af4f":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ee2d29b7102b7a68e60fc2947f781371c718af4f"],"b7f814567907094310b7ce1535a68437e43b28ea":["9454a6510e2db155fb01faa5c049b06ece95fab9","ee2d29b7102b7a68e60fc2947f781371c718af4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["b7f814567907094310b7ce1535a68437e43b28ea","1f653cfcf159baeaafe5d01682a911e95bba4012"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ee2d29b7102b7a68e60fc2947f781371c718af4f":["1f653cfcf159baeaafe5d01682a911e95bba4012","b7f814567907094310b7ce1535a68437e43b28ea"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b7f814567907094310b7ce1535a68437e43b28ea":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ee2d29b7102b7a68e60fc2947f781371c718af4f","b7f814567907094310b7ce1535a68437e43b28ea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}