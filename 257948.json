{"path":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#compareHits(IndexReader,IndexReader,TopDocs,TopGroups[Integer]).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#compareHits(IndexReader,IndexReader,TopDocs,TopGroups[Integer]).mjava","pathOld":"modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin#compareHits(IndexReader,IndexReader,TopDocs,TopGroups[Integer]).mjava","sourceNew":"  private void compareHits(IndexReader r, IndexReader joinR, TopDocs results, TopGroups<Integer> joinResults) throws Exception {\n    // results is 'complete'; joinResults is a subset\n    int resultUpto = 0;\n    int joinGroupUpto = 0;\n\n    final ScoreDoc[] hits = results.scoreDocs;\n    final GroupDocs<Integer>[] groupDocs = joinResults.groups;\n\n    while(joinGroupUpto < groupDocs.length) {\n      final GroupDocs<Integer> group = groupDocs[joinGroupUpto++];\n      final ScoreDoc[] groupHits = group.scoreDocs;\n      assertNotNull(group.groupValue);\n      final Document parentDoc = joinR.document(group.groupValue);\n      final String parentID = parentDoc.get(\"parentID\");\n      //System.out.println(\"GROUP groupDoc=\" + group.groupDoc + \" parent=\" + parentDoc);\n      assertNotNull(parentID);\n      assertTrue(groupHits.length > 0);\n      for(int hitIDX=0;hitIDX<groupHits.length;hitIDX++) {\n        final Document nonJoinHit = r.document(hits[resultUpto++].doc);\n        final Document joinHit = joinR.document(groupHits[hitIDX].doc);\n        assertEquals(parentID,\n                     nonJoinHit.get(\"parentID\"));\n        assertEquals(joinHit.get(\"childID\"),\n                     nonJoinHit.get(\"childID\"));\n      }\n\n      if (joinGroupUpto < groupDocs.length) {\n        // Advance non-join hit to the next parentID:\n        //System.out.println(\"  next joingroupUpto=\" + joinGroupUpto + \" gd.length=\" + groupDocs.length + \" parentID=\" + parentID);\n        while(true) {\n          assertTrue(resultUpto < hits.length);\n          if (!parentID.equals(r.document(hits[resultUpto].doc).get(\"parentID\"))) {\n            break;\n          }\n          resultUpto++;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void compareHits(IndexReader r, IndexReader joinR, TopDocs results, TopGroups<Integer> joinResults) throws Exception {\n    // results is 'complete'; joinResults is a subset\n    int resultUpto = 0;\n    int joinGroupUpto = 0;\n\n    final ScoreDoc[] hits = results.scoreDocs;\n    final GroupDocs<Integer>[] groupDocs = joinResults.groups;\n\n    while(joinGroupUpto < groupDocs.length) {\n      final GroupDocs<Integer> group = groupDocs[joinGroupUpto++];\n      final ScoreDoc[] groupHits = group.scoreDocs;\n      assertNotNull(group.groupValue);\n      final Document parentDoc = joinR.document(group.groupValue);\n      final String parentID = parentDoc.get(\"parentID\");\n      //System.out.println(\"GROUP groupDoc=\" + group.groupDoc + \" parent=\" + parentDoc);\n      assertNotNull(parentID);\n      assertTrue(groupHits.length > 0);\n      for(int hitIDX=0;hitIDX<groupHits.length;hitIDX++) {\n        final Document nonJoinHit = r.document(hits[resultUpto++].doc);\n        final Document joinHit = joinR.document(groupHits[hitIDX].doc);\n        assertEquals(parentID,\n                     nonJoinHit.get(\"parentID\"));\n        assertEquals(joinHit.get(\"childID\"),\n                     nonJoinHit.get(\"childID\"));\n      }\n\n      if (joinGroupUpto < groupDocs.length) {\n        // Advance non-join hit to the next parentID:\n        //System.out.println(\"  next joingroupUpto=\" + joinGroupUpto + \" gd.length=\" + groupDocs.length + \" parentID=\" + parentID);\n        while(true) {\n          assertTrue(resultUpto < hits.length);\n          if (!parentID.equals(r.document(hits[resultUpto].doc).get(\"parentID\"))) {\n            break;\n          }\n          resultUpto++;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7e4907084808af8fdb14b9809e6dceaccf6867b","date":1343473006,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#compareHits(IndexReader,IndexReader,TopDocs,TopGroups[Integer]).mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#compareHits(IndexReader,IndexReader,TopDocs,TopGroups[Integer]).mjava","sourceNew":"  private void compareHits(IndexReader r, IndexReader joinR, TopDocs results, TopGroups<Integer> joinResults) throws Exception {\n    // results is 'complete'; joinResults is a subset\n    int resultUpto = 0;\n    int joinGroupUpto = 0;\n\n    final ScoreDoc[] hits = results.scoreDocs;\n    final GroupDocs<Integer>[] groupDocs = joinResults.groups;\n\n    while(joinGroupUpto < groupDocs.length) {\n      final GroupDocs<Integer> group = groupDocs[joinGroupUpto++];\n      final ScoreDoc[] groupHits = group.scoreDocs;\n      assertNotNull(group.groupValue);\n      final StoredDocument parentDoc = joinR.document(group.groupValue);\n      final String parentID = parentDoc.get(\"parentID\");\n      //System.out.println(\"GROUP groupDoc=\" + group.groupDoc + \" parent=\" + parentDoc);\n      assertNotNull(parentID);\n      assertTrue(groupHits.length > 0);\n      for(int hitIDX=0;hitIDX<groupHits.length;hitIDX++) {\n        final StoredDocument nonJoinHit = r.document(hits[resultUpto++].doc);\n        final StoredDocument joinHit = joinR.document(groupHits[hitIDX].doc);\n        assertEquals(parentID,\n                     nonJoinHit.get(\"parentID\"));\n        assertEquals(joinHit.get(\"childID\"),\n                     nonJoinHit.get(\"childID\"));\n      }\n\n      if (joinGroupUpto < groupDocs.length) {\n        // Advance non-join hit to the next parentID:\n        //System.out.println(\"  next joingroupUpto=\" + joinGroupUpto + \" gd.length=\" + groupDocs.length + \" parentID=\" + parentID);\n        while(true) {\n          assertTrue(resultUpto < hits.length);\n          if (!parentID.equals(r.document(hits[resultUpto].doc).get(\"parentID\"))) {\n            break;\n          }\n          resultUpto++;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void compareHits(IndexReader r, IndexReader joinR, TopDocs results, TopGroups<Integer> joinResults) throws Exception {\n    // results is 'complete'; joinResults is a subset\n    int resultUpto = 0;\n    int joinGroupUpto = 0;\n\n    final ScoreDoc[] hits = results.scoreDocs;\n    final GroupDocs<Integer>[] groupDocs = joinResults.groups;\n\n    while(joinGroupUpto < groupDocs.length) {\n      final GroupDocs<Integer> group = groupDocs[joinGroupUpto++];\n      final ScoreDoc[] groupHits = group.scoreDocs;\n      assertNotNull(group.groupValue);\n      final Document parentDoc = joinR.document(group.groupValue);\n      final String parentID = parentDoc.get(\"parentID\");\n      //System.out.println(\"GROUP groupDoc=\" + group.groupDoc + \" parent=\" + parentDoc);\n      assertNotNull(parentID);\n      assertTrue(groupHits.length > 0);\n      for(int hitIDX=0;hitIDX<groupHits.length;hitIDX++) {\n        final Document nonJoinHit = r.document(hits[resultUpto++].doc);\n        final Document joinHit = joinR.document(groupHits[hitIDX].doc);\n        assertEquals(parentID,\n                     nonJoinHit.get(\"parentID\"));\n        assertEquals(joinHit.get(\"childID\"),\n                     nonJoinHit.get(\"childID\"));\n      }\n\n      if (joinGroupUpto < groupDocs.length) {\n        // Advance non-join hit to the next parentID:\n        //System.out.println(\"  next joingroupUpto=\" + joinGroupUpto + \" gd.length=\" + groupDocs.length + \" parentID=\" + parentID);\n        while(true) {\n          assertTrue(resultUpto < hits.length);\n          if (!parentID.equals(r.document(hits[resultUpto].doc).get(\"parentID\"))) {\n            break;\n          }\n          resultUpto++;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#compareHits(IndexReader,IndexReader,TopDocs,TopGroups[Integer]).mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#compareHits(IndexReader,IndexReader,TopDocs,TopGroups[Integer]).mjava","sourceNew":"  private void compareHits(IndexReader r, IndexReader joinR, TopDocs results, TopGroups<Integer> joinResults) throws Exception {\n    // results is 'complete'; joinResults is a subset\n    int resultUpto = 0;\n    int joinGroupUpto = 0;\n\n    final ScoreDoc[] hits = results.scoreDocs;\n    final GroupDocs<Integer>[] groupDocs = joinResults.groups;\n\n    while(joinGroupUpto < groupDocs.length) {\n      final GroupDocs<Integer> group = groupDocs[joinGroupUpto++];\n      final ScoreDoc[] groupHits = group.scoreDocs;\n      assertNotNull(group.groupValue);\n      final StoredDocument parentDoc = joinR.document(group.groupValue);\n      final String parentID = parentDoc.get(\"parentID\");\n      //System.out.println(\"GROUP groupDoc=\" + group.groupDoc + \" parent=\" + parentDoc);\n      assertNotNull(parentID);\n      assertTrue(groupHits.length > 0);\n      for(int hitIDX=0;hitIDX<groupHits.length;hitIDX++) {\n        final StoredDocument nonJoinHit = r.document(hits[resultUpto++].doc);\n        final StoredDocument joinHit = joinR.document(groupHits[hitIDX].doc);\n        assertEquals(parentID,\n                     nonJoinHit.get(\"parentID\"));\n        assertEquals(joinHit.get(\"childID\"),\n                     nonJoinHit.get(\"childID\"));\n      }\n\n      if (joinGroupUpto < groupDocs.length) {\n        // Advance non-join hit to the next parentID:\n        //System.out.println(\"  next joingroupUpto=\" + joinGroupUpto + \" gd.length=\" + groupDocs.length + \" parentID=\" + parentID);\n        while(true) {\n          assertTrue(resultUpto < hits.length);\n          if (!parentID.equals(r.document(hits[resultUpto].doc).get(\"parentID\"))) {\n            break;\n          }\n          resultUpto++;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void compareHits(IndexReader r, IndexReader joinR, TopDocs results, TopGroups<Integer> joinResults) throws Exception {\n    // results is 'complete'; joinResults is a subset\n    int resultUpto = 0;\n    int joinGroupUpto = 0;\n\n    final ScoreDoc[] hits = results.scoreDocs;\n    final GroupDocs<Integer>[] groupDocs = joinResults.groups;\n\n    while(joinGroupUpto < groupDocs.length) {\n      final GroupDocs<Integer> group = groupDocs[joinGroupUpto++];\n      final ScoreDoc[] groupHits = group.scoreDocs;\n      assertNotNull(group.groupValue);\n      final Document parentDoc = joinR.document(group.groupValue);\n      final String parentID = parentDoc.get(\"parentID\");\n      //System.out.println(\"GROUP groupDoc=\" + group.groupDoc + \" parent=\" + parentDoc);\n      assertNotNull(parentID);\n      assertTrue(groupHits.length > 0);\n      for(int hitIDX=0;hitIDX<groupHits.length;hitIDX++) {\n        final Document nonJoinHit = r.document(hits[resultUpto++].doc);\n        final Document joinHit = joinR.document(groupHits[hitIDX].doc);\n        assertEquals(parentID,\n                     nonJoinHit.get(\"parentID\"));\n        assertEquals(joinHit.get(\"childID\"),\n                     nonJoinHit.get(\"childID\"));\n      }\n\n      if (joinGroupUpto < groupDocs.length) {\n        // Advance non-join hit to the next parentID:\n        //System.out.println(\"  next joingroupUpto=\" + joinGroupUpto + \" gd.length=\" + groupDocs.length + \" parentID=\" + parentID);\n        while(true) {\n          assertTrue(resultUpto < hits.length);\n          if (!parentID.equals(r.document(hits[resultUpto].doc).get(\"parentID\"))) {\n            break;\n          }\n          resultUpto++;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#compareHits(IndexReader,IndexReader,TopDocs,TopGroups[Integer]).mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#compareHits(IndexReader,IndexReader,TopDocs,TopGroups[Integer]).mjava","sourceNew":"  private void compareHits(IndexReader r, IndexReader joinR, TopDocs results, TopGroups<Integer> joinResults) throws Exception {\n    // results is 'complete'; joinResults is a subset\n    int resultUpto = 0;\n    int joinGroupUpto = 0;\n\n    final ScoreDoc[] hits = results.scoreDocs;\n    final GroupDocs<Integer>[] groupDocs = joinResults.groups;\n\n    while(joinGroupUpto < groupDocs.length) {\n      final GroupDocs<Integer> group = groupDocs[joinGroupUpto++];\n      final ScoreDoc[] groupHits = group.scoreDocs;\n      assertNotNull(group.groupValue);\n      final Document parentDoc = joinR.document(group.groupValue);\n      final String parentID = parentDoc.get(\"parentID\");\n      //System.out.println(\"GROUP groupDoc=\" + group.groupDoc + \" parent=\" + parentDoc);\n      assertNotNull(parentID);\n      assertTrue(groupHits.length > 0);\n      for(int hitIDX=0;hitIDX<groupHits.length;hitIDX++) {\n        final Document nonJoinHit = r.document(hits[resultUpto++].doc);\n        final Document joinHit = joinR.document(groupHits[hitIDX].doc);\n        assertEquals(parentID,\n                     nonJoinHit.get(\"parentID\"));\n        assertEquals(joinHit.get(\"childID\"),\n                     nonJoinHit.get(\"childID\"));\n      }\n\n      if (joinGroupUpto < groupDocs.length) {\n        // Advance non-join hit to the next parentID:\n        //System.out.println(\"  next joingroupUpto=\" + joinGroupUpto + \" gd.length=\" + groupDocs.length + \" parentID=\" + parentID);\n        while(true) {\n          assertTrue(resultUpto < hits.length);\n          if (!parentID.equals(r.document(hits[resultUpto].doc).get(\"parentID\"))) {\n            break;\n          }\n          resultUpto++;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void compareHits(IndexReader r, IndexReader joinR, TopDocs results, TopGroups<Integer> joinResults) throws Exception {\n    // results is 'complete'; joinResults is a subset\n    int resultUpto = 0;\n    int joinGroupUpto = 0;\n\n    final ScoreDoc[] hits = results.scoreDocs;\n    final GroupDocs<Integer>[] groupDocs = joinResults.groups;\n\n    while(joinGroupUpto < groupDocs.length) {\n      final GroupDocs<Integer> group = groupDocs[joinGroupUpto++];\n      final ScoreDoc[] groupHits = group.scoreDocs;\n      assertNotNull(group.groupValue);\n      final StoredDocument parentDoc = joinR.document(group.groupValue);\n      final String parentID = parentDoc.get(\"parentID\");\n      //System.out.println(\"GROUP groupDoc=\" + group.groupDoc + \" parent=\" + parentDoc);\n      assertNotNull(parentID);\n      assertTrue(groupHits.length > 0);\n      for(int hitIDX=0;hitIDX<groupHits.length;hitIDX++) {\n        final StoredDocument nonJoinHit = r.document(hits[resultUpto++].doc);\n        final StoredDocument joinHit = joinR.document(groupHits[hitIDX].doc);\n        assertEquals(parentID,\n                     nonJoinHit.get(\"parentID\"));\n        assertEquals(joinHit.get(\"childID\"),\n                     nonJoinHit.get(\"childID\"));\n      }\n\n      if (joinGroupUpto < groupDocs.length) {\n        // Advance non-join hit to the next parentID:\n        //System.out.println(\"  next joingroupUpto=\" + joinGroupUpto + \" gd.length=\" + groupDocs.length + \" parentID=\" + parentID);\n        while(true) {\n          assertTrue(resultUpto < hits.length);\n          if (!parentID.equals(r.document(hits[resultUpto].doc).get(\"parentID\"))) {\n            break;\n          }\n          resultUpto++;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d9452e13e015fa1187b0b1bed1a1d08b9c96241","date":1485723373,"type":4,"author":"Martijn van Groningen","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#compareHits(IndexReader,IndexReader,TopDocs,TopGroups[Integer]).mjava","sourceNew":null,"sourceOld":"  private void compareHits(IndexReader r, IndexReader joinR, TopDocs results, TopGroups<Integer> joinResults) throws Exception {\n    // results is 'complete'; joinResults is a subset\n    int resultUpto = 0;\n    int joinGroupUpto = 0;\n\n    final ScoreDoc[] hits = results.scoreDocs;\n    final GroupDocs<Integer>[] groupDocs = joinResults.groups;\n\n    while(joinGroupUpto < groupDocs.length) {\n      final GroupDocs<Integer> group = groupDocs[joinGroupUpto++];\n      final ScoreDoc[] groupHits = group.scoreDocs;\n      assertNotNull(group.groupValue);\n      final Document parentDoc = joinR.document(group.groupValue);\n      final String parentID = parentDoc.get(\"parentID\");\n      //System.out.println(\"GROUP groupDoc=\" + group.groupDoc + \" parent=\" + parentDoc);\n      assertNotNull(parentID);\n      assertTrue(groupHits.length > 0);\n      for(int hitIDX=0;hitIDX<groupHits.length;hitIDX++) {\n        final Document nonJoinHit = r.document(hits[resultUpto++].doc);\n        final Document joinHit = joinR.document(groupHits[hitIDX].doc);\n        assertEquals(parentID,\n                     nonJoinHit.get(\"parentID\"));\n        assertEquals(joinHit.get(\"childID\"),\n                     nonJoinHit.get(\"childID\"));\n      }\n\n      if (joinGroupUpto < groupDocs.length) {\n        // Advance non-join hit to the next parentID:\n        //System.out.println(\"  next joingroupUpto=\" + joinGroupUpto + \" gd.length=\" + groupDocs.length + \" parentID=\" + parentID);\n        while(true) {\n          assertTrue(resultUpto < hits.length);\n          if (!parentID.equals(r.document(hits[resultUpto].doc).get(\"parentID\"))) {\n            break;\n          }\n          resultUpto++;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#compareHits(IndexReader,IndexReader,TopDocs,TopGroups[Integer]).mjava","sourceNew":null,"sourceOld":"  private void compareHits(IndexReader r, IndexReader joinR, TopDocs results, TopGroups<Integer> joinResults) throws Exception {\n    // results is 'complete'; joinResults is a subset\n    int resultUpto = 0;\n    int joinGroupUpto = 0;\n\n    final ScoreDoc[] hits = results.scoreDocs;\n    final GroupDocs<Integer>[] groupDocs = joinResults.groups;\n\n    while(joinGroupUpto < groupDocs.length) {\n      final GroupDocs<Integer> group = groupDocs[joinGroupUpto++];\n      final ScoreDoc[] groupHits = group.scoreDocs;\n      assertNotNull(group.groupValue);\n      final Document parentDoc = joinR.document(group.groupValue);\n      final String parentID = parentDoc.get(\"parentID\");\n      //System.out.println(\"GROUP groupDoc=\" + group.groupDoc + \" parent=\" + parentDoc);\n      assertNotNull(parentID);\n      assertTrue(groupHits.length > 0);\n      for(int hitIDX=0;hitIDX<groupHits.length;hitIDX++) {\n        final Document nonJoinHit = r.document(hits[resultUpto++].doc);\n        final Document joinHit = joinR.document(groupHits[hitIDX].doc);\n        assertEquals(parentID,\n                     nonJoinHit.get(\"parentID\"));\n        assertEquals(joinHit.get(\"childID\"),\n                     nonJoinHit.get(\"childID\"));\n      }\n\n      if (joinGroupUpto < groupDocs.length) {\n        // Advance non-join hit to the next parentID:\n        //System.out.println(\"  next joingroupUpto=\" + joinGroupUpto + \" gd.length=\" + groupDocs.length + \" parentID=\" + parentID);\n        while(true) {\n          assertTrue(resultUpto < hits.length);\n          if (!parentID.equals(r.document(hits[resultUpto].doc).get(\"parentID\"))) {\n            break;\n          }\n          resultUpto++;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1d028314cced5858683a1bb4741423d0f934257b":["b89678825b68eccaf09e6ab71675fc0b0af1e099","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","9d9452e13e015fa1187b0b1bed1a1d08b9c96241"],"9d9452e13e015fa1187b0b1bed1a1d08b9c96241":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9d9452e13e015fa1187b0b1bed1a1d08b9c96241"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["1d028314cced5858683a1bb4741423d0f934257b"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["1d028314cced5858683a1bb4741423d0f934257b","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"1d028314cced5858683a1bb4741423d0f934257b":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"9d9452e13e015fa1187b0b1bed1a1d08b9c96241":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["1d028314cced5858683a1bb4741423d0f934257b"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","9d9452e13e015fa1187b0b1bed1a1d08b9c96241"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}