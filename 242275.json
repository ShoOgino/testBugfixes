{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexingSequenceNumbers#testStressUpdateSameID().mjava","commits":[{"id":"f492fe129985750df09c8dac738aecc503158bb3","date":1464099630,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexingSequenceNumbers#testStressUpdateSameID().mjava","pathOld":"/dev/null","sourceNew":"  public void testStressUpdateSameID() throws Exception {\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      Directory dir = newDirectory();\n      // nocommit use RandomIndexWriter\n      final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n      Thread[] threads = new Thread[TestUtil.nextInt(random(), 2, 5)];\n      final CountDownLatch startingGun = new CountDownLatch(1);\n      final long[] seqNos = new long[threads.length];\n      final Term id = new Term(\"id\", \"id\");\n      // multiple threads update the same document\n      for(int i=0;i<threads.length;i++) {\n        final int threadID = i;\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n                Document doc = new Document();\n                doc.add(new StoredField(\"thread\", threadID));\n                doc.add(new StringField(\"id\", \"id\", Field.Store.NO));\n                startingGun.await();\n                for(int j=0;j<100;j++) {\n                  seqNos[threadID] = w.updateDocument(id, doc);\n                }\n              } catch (Exception e) {\n                throw new RuntimeException(e);\n              }\n            }\n          };\n        threads[i].start();\n      }\n      startingGun.countDown();\n      for(Thread thread : threads) {\n        thread.join();\n      }\n\n      // now confirm that the reported sequence numbers agree with the index:\n      int maxThread = 0;\n      Set<Long> allSeqNos = new HashSet<>();\n      for(int i=0;i<threads.length;i++) {\n        allSeqNos.add(seqNos[i]);\n        if (seqNos[i] > seqNos[maxThread]) {\n          maxThread = i;\n        }\n      }\n      // make sure all sequence numbers were different\n      assertEquals(threads.length, allSeqNos.size());\n      DirectoryReader r = DirectoryReader.open(w);\n      IndexSearcher s = newSearcher(r);\n      TopDocs hits = s.search(new TermQuery(id), 1);\n      assertEquals(1, hits.totalHits);\n      Document doc = r.document(hits.scoreDocs[0].doc);\n      assertEquals(maxThread, doc.getField(\"thread\").numericValue().intValue());\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9972d96003bc59c07a44e73de3cdd505dc08fd17","date":1464216081,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexingSequenceNumbers#testStressUpdateSameID().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexingSequenceNumbers#testStressUpdateSameID().mjava","sourceNew":"  public void testStressUpdateSameID() throws Exception {\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      Directory dir = newDirectory();\n      final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      Thread[] threads = new Thread[TestUtil.nextInt(random(), 2, 5)];\n      final CountDownLatch startingGun = new CountDownLatch(1);\n      final long[] seqNos = new long[threads.length];\n      final Term id = new Term(\"id\", \"id\");\n      // multiple threads update the same document\n      for(int i=0;i<threads.length;i++) {\n        final int threadID = i;\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n                Document doc = new Document();\n                doc.add(new StoredField(\"thread\", threadID));\n                doc.add(new StringField(\"id\", \"id\", Field.Store.NO));\n                startingGun.await();\n                for(int j=0;j<100;j++) {\n                  seqNos[threadID] = w.updateDocument(id, doc);\n                }\n              } catch (Exception e) {\n                throw new RuntimeException(e);\n              }\n            }\n          };\n        threads[i].start();\n      }\n      startingGun.countDown();\n      for(Thread thread : threads) {\n        thread.join();\n      }\n\n      // now confirm that the reported sequence numbers agree with the index:\n      int maxThread = 0;\n      Set<Long> allSeqNos = new HashSet<>();\n      for(int i=0;i<threads.length;i++) {\n        allSeqNos.add(seqNos[i]);\n        if (seqNos[i] > seqNos[maxThread]) {\n          maxThread = i;\n        }\n      }\n      // make sure all sequence numbers were different\n      assertEquals(threads.length, allSeqNos.size());\n      DirectoryReader r = w.getReader();\n      IndexSearcher s = newSearcher(r);\n      TopDocs hits = s.search(new TermQuery(id), 1);\n      assertEquals(1, hits.totalHits);\n      Document doc = r.document(hits.scoreDocs[0].doc);\n      assertEquals(maxThread, doc.getField(\"thread\").numericValue().intValue());\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStressUpdateSameID() throws Exception {\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      Directory dir = newDirectory();\n      // nocommit use RandomIndexWriter\n      final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n      Thread[] threads = new Thread[TestUtil.nextInt(random(), 2, 5)];\n      final CountDownLatch startingGun = new CountDownLatch(1);\n      final long[] seqNos = new long[threads.length];\n      final Term id = new Term(\"id\", \"id\");\n      // multiple threads update the same document\n      for(int i=0;i<threads.length;i++) {\n        final int threadID = i;\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n                Document doc = new Document();\n                doc.add(new StoredField(\"thread\", threadID));\n                doc.add(new StringField(\"id\", \"id\", Field.Store.NO));\n                startingGun.await();\n                for(int j=0;j<100;j++) {\n                  seqNos[threadID] = w.updateDocument(id, doc);\n                }\n              } catch (Exception e) {\n                throw new RuntimeException(e);\n              }\n            }\n          };\n        threads[i].start();\n      }\n      startingGun.countDown();\n      for(Thread thread : threads) {\n        thread.join();\n      }\n\n      // now confirm that the reported sequence numbers agree with the index:\n      int maxThread = 0;\n      Set<Long> allSeqNos = new HashSet<>();\n      for(int i=0;i<threads.length;i++) {\n        allSeqNos.add(seqNos[i]);\n        if (seqNos[i] > seqNos[maxThread]) {\n          maxThread = i;\n        }\n      }\n      // make sure all sequence numbers were different\n      assertEquals(threads.length, allSeqNos.size());\n      DirectoryReader r = DirectoryReader.open(w);\n      IndexSearcher s = newSearcher(r);\n      TopDocs hits = s.search(new TermQuery(id), 1);\n      assertEquals(1, hits.totalHits);\n      Document doc = r.document(hits.scoreDocs[0].doc);\n      assertEquals(maxThread, doc.getField(\"thread\").numericValue().intValue());\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"122251c49e5a9fa95f056ea257ae3ab452099fc7","date":1464820065,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexingSequenceNumbers#testStressUpdateSameID().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexingSequenceNumbers#testStressUpdateSameID().mjava","sourceNew":"  public void testStressUpdateSameID() throws Exception {\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      Directory dir = newDirectory();\n      final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      Thread[] threads = new Thread[TestUtil.nextInt(random(), 2, 5)];\n      final CountDownLatch startingGun = new CountDownLatch(1);\n      final long[] seqNos = new long[threads.length];\n      final Term id = new Term(\"id\", \"id\");\n      // multiple threads update the same document\n      for(int i=0;i<threads.length;i++) {\n        final int threadID = i;\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n                Document doc = new Document();\n                doc.add(new StoredField(\"thread\", threadID));\n                doc.add(new StringField(\"id\", \"id\", Field.Store.NO));\n                startingGun.await();\n                for(int j=0;j<100;j++) {\n                  if (random().nextBoolean()) {\n                    seqNos[threadID] = w.updateDocument(id, doc);\n                  } else {\n                    List<Document> docs = new ArrayList<>();\n                    docs.add(doc);\n                    seqNos[threadID] = w.updateDocuments(id, docs);\n                  }\n                }\n              } catch (Exception e) {\n                throw new RuntimeException(e);\n              }\n            }\n          };\n        threads[i].start();\n      }\n      startingGun.countDown();\n      for(Thread thread : threads) {\n        thread.join();\n      }\n\n      // now confirm that the reported sequence numbers agree with the index:\n      int maxThread = 0;\n      Set<Long> allSeqNos = new HashSet<>();\n      for(int i=0;i<threads.length;i++) {\n        allSeqNos.add(seqNos[i]);\n        if (seqNos[i] > seqNos[maxThread]) {\n          maxThread = i;\n        }\n      }\n      // make sure all sequence numbers were different\n      assertEquals(threads.length, allSeqNos.size());\n      DirectoryReader r = w.getReader();\n      IndexSearcher s = newSearcher(r);\n      TopDocs hits = s.search(new TermQuery(id), 1);\n      assertEquals(1, hits.totalHits);\n      Document doc = r.document(hits.scoreDocs[0].doc);\n      assertEquals(maxThread, doc.getField(\"thread\").numericValue().intValue());\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStressUpdateSameID() throws Exception {\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      Directory dir = newDirectory();\n      final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      Thread[] threads = new Thread[TestUtil.nextInt(random(), 2, 5)];\n      final CountDownLatch startingGun = new CountDownLatch(1);\n      final long[] seqNos = new long[threads.length];\n      final Term id = new Term(\"id\", \"id\");\n      // multiple threads update the same document\n      for(int i=0;i<threads.length;i++) {\n        final int threadID = i;\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n                Document doc = new Document();\n                doc.add(new StoredField(\"thread\", threadID));\n                doc.add(new StringField(\"id\", \"id\", Field.Store.NO));\n                startingGun.await();\n                for(int j=0;j<100;j++) {\n                  seqNos[threadID] = w.updateDocument(id, doc);\n                }\n              } catch (Exception e) {\n                throw new RuntimeException(e);\n              }\n            }\n          };\n        threads[i].start();\n      }\n      startingGun.countDown();\n      for(Thread thread : threads) {\n        thread.join();\n      }\n\n      // now confirm that the reported sequence numbers agree with the index:\n      int maxThread = 0;\n      Set<Long> allSeqNos = new HashSet<>();\n      for(int i=0;i<threads.length;i++) {\n        allSeqNos.add(seqNos[i]);\n        if (seqNos[i] > seqNos[maxThread]) {\n          maxThread = i;\n        }\n      }\n      // make sure all sequence numbers were different\n      assertEquals(threads.length, allSeqNos.size());\n      DirectoryReader r = w.getReader();\n      IndexSearcher s = newSearcher(r);\n      TopDocs hits = s.search(new TermQuery(id), 1);\n      assertEquals(1, hits.totalHits);\n      Document doc = r.document(hits.scoreDocs[0].doc);\n      assertEquals(maxThread, doc.getField(\"thread\").numericValue().intValue());\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","date":1464821470,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexingSequenceNumbers#testStressUpdateSameID().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexingSequenceNumbers#testStressUpdateSameID().mjava","sourceNew":"  public void testStressUpdateSameID() throws Exception {\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      Directory dir = newDirectory();\n      final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      Thread[] threads = new Thread[TestUtil.nextInt(random(), 2, 5)];\n      final CountDownLatch startingGun = new CountDownLatch(1);\n      final long[] seqNos = new long[threads.length];\n      final Term id = new Term(\"id\", \"id\");\n      // multiple threads update the same document\n      for(int i=0;i<threads.length;i++) {\n        final int threadID = i;\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n                Document doc = new Document();\n                doc.add(new StoredField(\"thread\", threadID));\n                doc.add(new StringField(\"id\", \"id\", Field.Store.NO));\n                startingGun.await();\n                for(int j=0;j<100;j++) {\n                  if (random().nextBoolean()) {\n                    seqNos[threadID] = w.updateDocument(id, doc);\n                  } else {\n                    List<Document> docs = new ArrayList<>();\n                    docs.add(doc);\n                    seqNos[threadID] = w.updateDocuments(id, docs);\n                  }\n                }\n              } catch (Exception e) {\n                throw new RuntimeException(e);\n              }\n            }\n          };\n        threads[i].start();\n      }\n      startingGun.countDown();\n      for(Thread thread : threads) {\n        thread.join();\n      }\n\n      // now confirm that the reported sequence numbers agree with the index:\n      int maxThread = 0;\n      Set<Long> allSeqNos = new HashSet<>();\n      for(int i=0;i<threads.length;i++) {\n        allSeqNos.add(seqNos[i]);\n        if (seqNos[i] > seqNos[maxThread]) {\n          maxThread = i;\n        }\n      }\n      // make sure all sequence numbers were different\n      assertEquals(threads.length, allSeqNos.size());\n      DirectoryReader r = w.getReader();\n      IndexSearcher s = newSearcher(r);\n      TopDocs hits = s.search(new TermQuery(id), 1);\n      assertEquals(1, hits.totalHits);\n      Document doc = r.document(hits.scoreDocs[0].doc);\n      assertEquals(maxThread, doc.getField(\"thread\").numericValue().intValue());\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStressUpdateSameID() throws Exception {\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      Directory dir = newDirectory();\n      final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      Thread[] threads = new Thread[TestUtil.nextInt(random(), 2, 5)];\n      final CountDownLatch startingGun = new CountDownLatch(1);\n      final long[] seqNos = new long[threads.length];\n      final Term id = new Term(\"id\", \"id\");\n      // multiple threads update the same document\n      for(int i=0;i<threads.length;i++) {\n        final int threadID = i;\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n                Document doc = new Document();\n                doc.add(new StoredField(\"thread\", threadID));\n                doc.add(new StringField(\"id\", \"id\", Field.Store.NO));\n                startingGun.await();\n                for(int j=0;j<100;j++) {\n                  seqNos[threadID] = w.updateDocument(id, doc);\n                }\n              } catch (Exception e) {\n                throw new RuntimeException(e);\n              }\n            }\n          };\n        threads[i].start();\n      }\n      startingGun.countDown();\n      for(Thread thread : threads) {\n        thread.join();\n      }\n\n      // now confirm that the reported sequence numbers agree with the index:\n      int maxThread = 0;\n      Set<Long> allSeqNos = new HashSet<>();\n      for(int i=0;i<threads.length;i++) {\n        allSeqNos.add(seqNos[i]);\n        if (seqNos[i] > seqNos[maxThread]) {\n          maxThread = i;\n        }\n      }\n      // make sure all sequence numbers were different\n      assertEquals(threads.length, allSeqNos.size());\n      DirectoryReader r = w.getReader();\n      IndexSearcher s = newSearcher(r);\n      TopDocs hits = s.search(new TermQuery(id), 1);\n      assertEquals(1, hits.totalHits);\n      Document doc = r.document(hits.scoreDocs[0].doc);\n      assertEquals(maxThread, doc.getField(\"thread\").numericValue().intValue());\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6483e4260c08168709c02238ae083a51519a28dd","date":1465117546,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexingSequenceNumbers#testStressUpdateSameID().mjava","pathOld":"/dev/null","sourceNew":"  public void testStressUpdateSameID() throws Exception {\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      Directory dir = newDirectory();\n      final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      Thread[] threads = new Thread[TestUtil.nextInt(random(), 2, 5)];\n      final CountDownLatch startingGun = new CountDownLatch(1);\n      final long[] seqNos = new long[threads.length];\n      final Term id = new Term(\"id\", \"id\");\n      // multiple threads update the same document\n      for(int i=0;i<threads.length;i++) {\n        final int threadID = i;\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n                Document doc = new Document();\n                doc.add(new StoredField(\"thread\", threadID));\n                doc.add(new StringField(\"id\", \"id\", Field.Store.NO));\n                startingGun.await();\n                for(int j=0;j<100;j++) {\n                  if (random().nextBoolean()) {\n                    seqNos[threadID] = w.updateDocument(id, doc);\n                  } else {\n                    List<Document> docs = new ArrayList<>();\n                    docs.add(doc);\n                    seqNos[threadID] = w.updateDocuments(id, docs);\n                  }\n                }\n              } catch (Exception e) {\n                throw new RuntimeException(e);\n              }\n            }\n          };\n        threads[i].start();\n      }\n      startingGun.countDown();\n      for(Thread thread : threads) {\n        thread.join();\n      }\n\n      // now confirm that the reported sequence numbers agree with the index:\n      int maxThread = 0;\n      Set<Long> allSeqNos = new HashSet<>();\n      for(int i=0;i<threads.length;i++) {\n        allSeqNos.add(seqNos[i]);\n        if (seqNos[i] > seqNos[maxThread]) {\n          maxThread = i;\n        }\n      }\n      // make sure all sequence numbers were different\n      assertEquals(threads.length, allSeqNos.size());\n      DirectoryReader r = w.getReader();\n      IndexSearcher s = newSearcher(r);\n      TopDocs hits = s.search(new TermQuery(id), 1);\n      assertEquals(1, hits.totalHits);\n      Document doc = r.document(hits.scoreDocs[0].doc);\n      assertEquals(maxThread, doc.getField(\"thread\").numericValue().intValue());\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"191128ac5b85671b1671e2c857437694283b6ebf","date":1465297861,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexingSequenceNumbers#testStressUpdateSameID().mjava","pathOld":"/dev/null","sourceNew":"  public void testStressUpdateSameID() throws Exception {\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      Directory dir = newDirectory();\n      final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      Thread[] threads = new Thread[TestUtil.nextInt(random(), 2, 5)];\n      final CountDownLatch startingGun = new CountDownLatch(1);\n      final long[] seqNos = new long[threads.length];\n      final Term id = new Term(\"id\", \"id\");\n      // multiple threads update the same document\n      for(int i=0;i<threads.length;i++) {\n        final int threadID = i;\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n                Document doc = new Document();\n                doc.add(new StoredField(\"thread\", threadID));\n                doc.add(new StringField(\"id\", \"id\", Field.Store.NO));\n                startingGun.await();\n                for(int j=0;j<100;j++) {\n                  if (random().nextBoolean()) {\n                    seqNos[threadID] = w.updateDocument(id, doc);\n                  } else {\n                    List<Document> docs = new ArrayList<>();\n                    docs.add(doc);\n                    seqNos[threadID] = w.updateDocuments(id, docs);\n                  }\n                }\n              } catch (Exception e) {\n                throw new RuntimeException(e);\n              }\n            }\n          };\n        threads[i].start();\n      }\n      startingGun.countDown();\n      for(Thread thread : threads) {\n        thread.join();\n      }\n\n      // now confirm that the reported sequence numbers agree with the index:\n      int maxThread = 0;\n      Set<Long> allSeqNos = new HashSet<>();\n      for(int i=0;i<threads.length;i++) {\n        allSeqNos.add(seqNos[i]);\n        if (seqNos[i] > seqNos[maxThread]) {\n          maxThread = i;\n        }\n      }\n      // make sure all sequence numbers were different\n      assertEquals(threads.length, allSeqNos.size());\n      DirectoryReader r = w.getReader();\n      IndexSearcher s = newSearcher(r);\n      TopDocs hits = s.search(new TermQuery(id), 1);\n      assertEquals(1, hits.totalHits);\n      Document doc = r.document(hits.scoreDocs[0].doc);\n      assertEquals(maxThread, doc.getField(\"thread\").numericValue().intValue());\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9dea8da13fd1a227ae1071e8f4ce66bff42174de","date":1471439735,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexingSequenceNumbers#testStressUpdateSameID().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexingSequenceNumbers#testStressUpdateSameID().mjava","sourceNew":"  @Slow\n  public void testStressUpdateSameID() throws Exception {\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      Directory dir = newDirectory();\n      final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      Thread[] threads = new Thread[TestUtil.nextInt(random(), 2, 5)];\n      final CountDownLatch startingGun = new CountDownLatch(1);\n      final long[] seqNos = new long[threads.length];\n      final Term id = new Term(\"id\", \"id\");\n      // multiple threads update the same document\n      for(int i=0;i<threads.length;i++) {\n        final int threadID = i;\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n                Document doc = new Document();\n                doc.add(new StoredField(\"thread\", threadID));\n                doc.add(new StringField(\"id\", \"id\", Field.Store.NO));\n                startingGun.await();\n                for(int j=0;j<100;j++) {\n                  if (random().nextBoolean()) {\n                    seqNos[threadID] = w.updateDocument(id, doc);\n                  } else {\n                    List<Document> docs = new ArrayList<>();\n                    docs.add(doc);\n                    seqNos[threadID] = w.updateDocuments(id, docs);\n                  }\n                }\n              } catch (Exception e) {\n                throw new RuntimeException(e);\n              }\n            }\n          };\n        threads[i].start();\n      }\n      startingGun.countDown();\n      for(Thread thread : threads) {\n        thread.join();\n      }\n\n      // now confirm that the reported sequence numbers agree with the index:\n      int maxThread = 0;\n      Set<Long> allSeqNos = new HashSet<>();\n      for(int i=0;i<threads.length;i++) {\n        allSeqNos.add(seqNos[i]);\n        if (seqNos[i] > seqNos[maxThread]) {\n          maxThread = i;\n        }\n      }\n      // make sure all sequence numbers were different\n      assertEquals(threads.length, allSeqNos.size());\n      DirectoryReader r = w.getReader();\n      IndexSearcher s = newSearcher(r);\n      TopDocs hits = s.search(new TermQuery(id), 1);\n      assertEquals(1, hits.totalHits);\n      Document doc = r.document(hits.scoreDocs[0].doc);\n      assertEquals(maxThread, doc.getField(\"thread\").numericValue().intValue());\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStressUpdateSameID() throws Exception {\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      Directory dir = newDirectory();\n      final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      Thread[] threads = new Thread[TestUtil.nextInt(random(), 2, 5)];\n      final CountDownLatch startingGun = new CountDownLatch(1);\n      final long[] seqNos = new long[threads.length];\n      final Term id = new Term(\"id\", \"id\");\n      // multiple threads update the same document\n      for(int i=0;i<threads.length;i++) {\n        final int threadID = i;\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n                Document doc = new Document();\n                doc.add(new StoredField(\"thread\", threadID));\n                doc.add(new StringField(\"id\", \"id\", Field.Store.NO));\n                startingGun.await();\n                for(int j=0;j<100;j++) {\n                  if (random().nextBoolean()) {\n                    seqNos[threadID] = w.updateDocument(id, doc);\n                  } else {\n                    List<Document> docs = new ArrayList<>();\n                    docs.add(doc);\n                    seqNos[threadID] = w.updateDocuments(id, docs);\n                  }\n                }\n              } catch (Exception e) {\n                throw new RuntimeException(e);\n              }\n            }\n          };\n        threads[i].start();\n      }\n      startingGun.countDown();\n      for(Thread thread : threads) {\n        thread.join();\n      }\n\n      // now confirm that the reported sequence numbers agree with the index:\n      int maxThread = 0;\n      Set<Long> allSeqNos = new HashSet<>();\n      for(int i=0;i<threads.length;i++) {\n        allSeqNos.add(seqNos[i]);\n        if (seqNos[i] > seqNos[maxThread]) {\n          maxThread = i;\n        }\n      }\n      // make sure all sequence numbers were different\n      assertEquals(threads.length, allSeqNos.size());\n      DirectoryReader r = w.getReader();\n      IndexSearcher s = newSearcher(r);\n      TopDocs hits = s.search(new TermQuery(id), 1);\n      assertEquals(1, hits.totalHits);\n      Document doc = r.document(hits.scoreDocs[0].doc);\n      assertEquals(maxThread, doc.getField(\"thread\").numericValue().intValue());\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexingSequenceNumbers#testStressUpdateSameID().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexingSequenceNumbers#testStressUpdateSameID().mjava","sourceNew":"  @Slow\n  public void testStressUpdateSameID() throws Exception {\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      Directory dir = newDirectory();\n      final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      Thread[] threads = new Thread[TestUtil.nextInt(random(), 2, 5)];\n      final CountDownLatch startingGun = new CountDownLatch(1);\n      final long[] seqNos = new long[threads.length];\n      final Term id = new Term(\"id\", \"id\");\n      // multiple threads update the same document\n      for(int i=0;i<threads.length;i++) {\n        final int threadID = i;\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n                Document doc = new Document();\n                doc.add(new StoredField(\"thread\", threadID));\n                doc.add(new StringField(\"id\", \"id\", Field.Store.NO));\n                startingGun.await();\n                for(int j=0;j<100;j++) {\n                  if (random().nextBoolean()) {\n                    seqNos[threadID] = w.updateDocument(id, doc);\n                  } else {\n                    List<Document> docs = new ArrayList<>();\n                    docs.add(doc);\n                    seqNos[threadID] = w.updateDocuments(id, docs);\n                  }\n                }\n              } catch (Exception e) {\n                throw new RuntimeException(e);\n              }\n            }\n          };\n        threads[i].start();\n      }\n      startingGun.countDown();\n      for(Thread thread : threads) {\n        thread.join();\n      }\n\n      // now confirm that the reported sequence numbers agree with the index:\n      int maxThread = 0;\n      Set<Long> allSeqNos = new HashSet<>();\n      for(int i=0;i<threads.length;i++) {\n        allSeqNos.add(seqNos[i]);\n        if (seqNos[i] > seqNos[maxThread]) {\n          maxThread = i;\n        }\n      }\n      // make sure all sequence numbers were different\n      assertEquals(threads.length, allSeqNos.size());\n      DirectoryReader r = w.getReader();\n      IndexSearcher s = newSearcher(r);\n      TopDocs hits = s.search(new TermQuery(id), 1);\n      assertEquals(1, hits.totalHits);\n      Document doc = r.document(hits.scoreDocs[0].doc);\n      assertEquals(maxThread, doc.getField(\"thread\").numericValue().intValue());\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStressUpdateSameID() throws Exception {\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      Directory dir = newDirectory();\n      final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      Thread[] threads = new Thread[TestUtil.nextInt(random(), 2, 5)];\n      final CountDownLatch startingGun = new CountDownLatch(1);\n      final long[] seqNos = new long[threads.length];\n      final Term id = new Term(\"id\", \"id\");\n      // multiple threads update the same document\n      for(int i=0;i<threads.length;i++) {\n        final int threadID = i;\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n                Document doc = new Document();\n                doc.add(new StoredField(\"thread\", threadID));\n                doc.add(new StringField(\"id\", \"id\", Field.Store.NO));\n                startingGun.await();\n                for(int j=0;j<100;j++) {\n                  if (random().nextBoolean()) {\n                    seqNos[threadID] = w.updateDocument(id, doc);\n                  } else {\n                    List<Document> docs = new ArrayList<>();\n                    docs.add(doc);\n                    seqNos[threadID] = w.updateDocuments(id, docs);\n                  }\n                }\n              } catch (Exception e) {\n                throw new RuntimeException(e);\n              }\n            }\n          };\n        threads[i].start();\n      }\n      startingGun.countDown();\n      for(Thread thread : threads) {\n        thread.join();\n      }\n\n      // now confirm that the reported sequence numbers agree with the index:\n      int maxThread = 0;\n      Set<Long> allSeqNos = new HashSet<>();\n      for(int i=0;i<threads.length;i++) {\n        allSeqNos.add(seqNos[i]);\n        if (seqNos[i] > seqNos[maxThread]) {\n          maxThread = i;\n        }\n      }\n      // make sure all sequence numbers were different\n      assertEquals(threads.length, allSeqNos.size());\n      DirectoryReader r = w.getReader();\n      IndexSearcher s = newSearcher(r);\n      TopDocs hits = s.search(new TermQuery(id), 1);\n      assertEquals(1, hits.totalHits);\n      Document doc = r.document(hits.scoreDocs[0].doc);\n      assertEquals(maxThread, doc.getField(\"thread\").numericValue().intValue());\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexingSequenceNumbers#testStressUpdateSameID().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexingSequenceNumbers#testStressUpdateSameID().mjava","sourceNew":"  @Slow\n  public void testStressUpdateSameID() throws Exception {\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      Directory dir = newDirectory();\n      final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      Thread[] threads = new Thread[TestUtil.nextInt(random(), 2, 5)];\n      final CountDownLatch startingGun = new CountDownLatch(1);\n      final long[] seqNos = new long[threads.length];\n      final Term id = new Term(\"id\", \"id\");\n      // multiple threads update the same document\n      for(int i=0;i<threads.length;i++) {\n        final int threadID = i;\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n                Document doc = new Document();\n                doc.add(new StoredField(\"thread\", threadID));\n                doc.add(new StringField(\"id\", \"id\", Field.Store.NO));\n                startingGun.await();\n                for(int j=0;j<100;j++) {\n                  if (random().nextBoolean()) {\n                    seqNos[threadID] = w.updateDocument(id, doc);\n                  } else {\n                    List<Document> docs = new ArrayList<>();\n                    docs.add(doc);\n                    seqNos[threadID] = w.updateDocuments(id, docs);\n                  }\n                }\n              } catch (Exception e) {\n                throw new RuntimeException(e);\n              }\n            }\n          };\n        threads[i].start();\n      }\n      startingGun.countDown();\n      for(Thread thread : threads) {\n        thread.join();\n      }\n\n      // now confirm that the reported sequence numbers agree with the index:\n      int maxThread = 0;\n      Set<Long> allSeqNos = new HashSet<>();\n      for(int i=0;i<threads.length;i++) {\n        allSeqNos.add(seqNos[i]);\n        if (seqNos[i] > seqNos[maxThread]) {\n          maxThread = i;\n        }\n      }\n      // make sure all sequence numbers were different\n      assertEquals(threads.length, allSeqNos.size());\n      DirectoryReader r = w.getReader();\n      IndexSearcher s = newSearcher(r);\n      TopDocs hits = s.search(new TermQuery(id), 1);\n      assertEquals(1, hits.totalHits);\n      Document doc = r.document(hits.scoreDocs[0].doc);\n      assertEquals(maxThread, doc.getField(\"thread\").numericValue().intValue());\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStressUpdateSameID() throws Exception {\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      Directory dir = newDirectory();\n      final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      Thread[] threads = new Thread[TestUtil.nextInt(random(), 2, 5)];\n      final CountDownLatch startingGun = new CountDownLatch(1);\n      final long[] seqNos = new long[threads.length];\n      final Term id = new Term(\"id\", \"id\");\n      // multiple threads update the same document\n      for(int i=0;i<threads.length;i++) {\n        final int threadID = i;\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n                Document doc = new Document();\n                doc.add(new StoredField(\"thread\", threadID));\n                doc.add(new StringField(\"id\", \"id\", Field.Store.NO));\n                startingGun.await();\n                for(int j=0;j<100;j++) {\n                  if (random().nextBoolean()) {\n                    seqNos[threadID] = w.updateDocument(id, doc);\n                  } else {\n                    List<Document> docs = new ArrayList<>();\n                    docs.add(doc);\n                    seqNos[threadID] = w.updateDocuments(id, docs);\n                  }\n                }\n              } catch (Exception e) {\n                throw new RuntimeException(e);\n              }\n            }\n          };\n        threads[i].start();\n      }\n      startingGun.countDown();\n      for(Thread thread : threads) {\n        thread.join();\n      }\n\n      // now confirm that the reported sequence numbers agree with the index:\n      int maxThread = 0;\n      Set<Long> allSeqNos = new HashSet<>();\n      for(int i=0;i<threads.length;i++) {\n        allSeqNos.add(seqNos[i]);\n        if (seqNos[i] > seqNos[maxThread]) {\n          maxThread = i;\n        }\n      }\n      // make sure all sequence numbers were different\n      assertEquals(threads.length, allSeqNos.size());\n      DirectoryReader r = w.getReader();\n      IndexSearcher s = newSearcher(r);\n      TopDocs hits = s.search(new TermQuery(id), 1);\n      assertEquals(1, hits.totalHits);\n      Document doc = r.document(hits.scoreDocs[0].doc);\n      assertEquals(maxThread, doc.getField(\"thread\").numericValue().intValue());\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexingSequenceNumbers#testStressUpdateSameID().mjava","pathOld":"/dev/null","sourceNew":"  @Slow\n  public void testStressUpdateSameID() throws Exception {\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      Directory dir = newDirectory();\n      final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      Thread[] threads = new Thread[TestUtil.nextInt(random(), 2, 5)];\n      final CountDownLatch startingGun = new CountDownLatch(1);\n      final long[] seqNos = new long[threads.length];\n      final Term id = new Term(\"id\", \"id\");\n      // multiple threads update the same document\n      for(int i=0;i<threads.length;i++) {\n        final int threadID = i;\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n                Document doc = new Document();\n                doc.add(new StoredField(\"thread\", threadID));\n                doc.add(new StringField(\"id\", \"id\", Field.Store.NO));\n                startingGun.await();\n                for(int j=0;j<100;j++) {\n                  if (random().nextBoolean()) {\n                    seqNos[threadID] = w.updateDocument(id, doc);\n                  } else {\n                    List<Document> docs = new ArrayList<>();\n                    docs.add(doc);\n                    seqNos[threadID] = w.updateDocuments(id, docs);\n                  }\n                }\n              } catch (Exception e) {\n                throw new RuntimeException(e);\n              }\n            }\n          };\n        threads[i].start();\n      }\n      startingGun.countDown();\n      for(Thread thread : threads) {\n        thread.join();\n      }\n\n      // now confirm that the reported sequence numbers agree with the index:\n      int maxThread = 0;\n      Set<Long> allSeqNos = new HashSet<>();\n      for(int i=0;i<threads.length;i++) {\n        allSeqNos.add(seqNos[i]);\n        if (seqNos[i] > seqNos[maxThread]) {\n          maxThread = i;\n        }\n      }\n      // make sure all sequence numbers were different\n      assertEquals(threads.length, allSeqNos.size());\n      DirectoryReader r = w.getReader();\n      IndexSearcher s = newSearcher(r);\n      TopDocs hits = s.search(new TermQuery(id), 1);\n      assertEquals(1, hits.totalHits);\n      Document doc = r.document(hits.scoreDocs[0].doc);\n      assertEquals(maxThread, doc.getField(\"thread\").numericValue().intValue());\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ee0394b8176abd7c90a4be8c05465be1879db79","date":1522842314,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexingSequenceNumbers#testStressUpdateSameID().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexingSequenceNumbers#testStressUpdateSameID().mjava","sourceNew":"  @Slow\n  public void testStressUpdateSameID() throws Exception {\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      Directory dir = newDirectory();\n      final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      Thread[] threads = new Thread[TestUtil.nextInt(random(), 2, 5)];\n      final CountDownLatch startingGun = new CountDownLatch(1);\n      final long[] seqNos = new long[threads.length];\n      final Term id = new Term(\"id\", \"id\");\n      // multiple threads update the same document\n      for(int i=0;i<threads.length;i++) {\n        final int threadID = i;\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n                Document doc = new Document();\n                doc.add(new StoredField(\"thread\", threadID));\n                doc.add(new StringField(\"id\", \"id\", Field.Store.NO));\n                startingGun.await();\n                for(int j=0;j<100;j++) {\n                  if (random().nextBoolean()) {\n                    seqNos[threadID] = w.updateDocument(id, doc);\n                  } else {\n                    seqNos[threadID] = w.updateDocuments(id, Arrays.asList(doc));\n                  }\n                }\n              } catch (Exception e) {\n                throw new RuntimeException(e);\n              }\n            }\n          };\n        threads[i].start();\n      }\n      startingGun.countDown();\n      for(Thread thread : threads) {\n        thread.join();\n      }\n\n      // now confirm that the reported sequence numbers agree with the index:\n      int maxThread = 0;\n      Set<Long> allSeqNos = new HashSet<>();\n      for(int i=0;i<threads.length;i++) {\n        allSeqNos.add(seqNos[i]);\n        if (seqNos[i] > seqNos[maxThread]) {\n          maxThread = i;\n        }\n      }\n      // make sure all sequence numbers were different\n      assertEquals(threads.length, allSeqNos.size());\n      DirectoryReader r = w.getReader();\n      IndexSearcher s = newSearcher(r);\n      TopDocs hits = s.search(new TermQuery(id), 1);\n      assertEquals(\"maxDoc: \" + r.maxDoc(), 1, hits.totalHits);\n      Document doc = r.document(hits.scoreDocs[0].doc);\n      assertEquals(maxThread, doc.getField(\"thread\").numericValue().intValue());\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  @Slow\n  public void testStressUpdateSameID() throws Exception {\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      Directory dir = newDirectory();\n      final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      Thread[] threads = new Thread[TestUtil.nextInt(random(), 2, 5)];\n      final CountDownLatch startingGun = new CountDownLatch(1);\n      final long[] seqNos = new long[threads.length];\n      final Term id = new Term(\"id\", \"id\");\n      // multiple threads update the same document\n      for(int i=0;i<threads.length;i++) {\n        final int threadID = i;\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n                Document doc = new Document();\n                doc.add(new StoredField(\"thread\", threadID));\n                doc.add(new StringField(\"id\", \"id\", Field.Store.NO));\n                startingGun.await();\n                for(int j=0;j<100;j++) {\n                  if (random().nextBoolean()) {\n                    seqNos[threadID] = w.updateDocument(id, doc);\n                  } else {\n                    List<Document> docs = new ArrayList<>();\n                    docs.add(doc);\n                    seqNos[threadID] = w.updateDocuments(id, docs);\n                  }\n                }\n              } catch (Exception e) {\n                throw new RuntimeException(e);\n              }\n            }\n          };\n        threads[i].start();\n      }\n      startingGun.countDown();\n      for(Thread thread : threads) {\n        thread.join();\n      }\n\n      // now confirm that the reported sequence numbers agree with the index:\n      int maxThread = 0;\n      Set<Long> allSeqNos = new HashSet<>();\n      for(int i=0;i<threads.length;i++) {\n        allSeqNos.add(seqNos[i]);\n        if (seqNos[i] > seqNos[maxThread]) {\n          maxThread = i;\n        }\n      }\n      // make sure all sequence numbers were different\n      assertEquals(threads.length, allSeqNos.size());\n      DirectoryReader r = w.getReader();\n      IndexSearcher s = newSearcher(r);\n      TopDocs hits = s.search(new TermQuery(id), 1);\n      assertEquals(1, hits.totalHits);\n      Document doc = r.document(hits.scoreDocs[0].doc);\n      assertEquals(maxThread, doc.getField(\"thread\").numericValue().intValue());\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexingSequenceNumbers#testStressUpdateSameID().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexingSequenceNumbers#testStressUpdateSameID().mjava","sourceNew":"  @Slow\n  public void testStressUpdateSameID() throws Exception {\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      Directory dir = newDirectory();\n      final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      Thread[] threads = new Thread[TestUtil.nextInt(random(), 2, 5)];\n      final CountDownLatch startingGun = new CountDownLatch(1);\n      final long[] seqNos = new long[threads.length];\n      final Term id = new Term(\"id\", \"id\");\n      // multiple threads update the same document\n      for(int i=0;i<threads.length;i++) {\n        final int threadID = i;\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n                Document doc = new Document();\n                doc.add(new StoredField(\"thread\", threadID));\n                doc.add(new StringField(\"id\", \"id\", Field.Store.NO));\n                startingGun.await();\n                for(int j=0;j<100;j++) {\n                  if (random().nextBoolean()) {\n                    seqNos[threadID] = w.updateDocument(id, doc);\n                  } else {\n                    seqNos[threadID] = w.updateDocuments(id, Arrays.asList(doc));\n                  }\n                }\n              } catch (Exception e) {\n                throw new RuntimeException(e);\n              }\n            }\n          };\n        threads[i].start();\n      }\n      startingGun.countDown();\n      for(Thread thread : threads) {\n        thread.join();\n      }\n\n      // now confirm that the reported sequence numbers agree with the index:\n      int maxThread = 0;\n      Set<Long> allSeqNos = new HashSet<>();\n      for(int i=0;i<threads.length;i++) {\n        allSeqNos.add(seqNos[i]);\n        if (seqNos[i] > seqNos[maxThread]) {\n          maxThread = i;\n        }\n      }\n      // make sure all sequence numbers were different\n      assertEquals(threads.length, allSeqNos.size());\n      DirectoryReader r = w.getReader();\n      IndexSearcher s = newSearcher(r);\n      TopDocs hits = s.search(new TermQuery(id), 1);\n      assertEquals(\"maxDoc: \" + r.maxDoc(), 1, hits.totalHits.value);\n      Document doc = r.document(hits.scoreDocs[0].doc);\n      assertEquals(maxThread, doc.getField(\"thread\").numericValue().intValue());\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  @Slow\n  public void testStressUpdateSameID() throws Exception {\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      Directory dir = newDirectory();\n      final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      Thread[] threads = new Thread[TestUtil.nextInt(random(), 2, 5)];\n      final CountDownLatch startingGun = new CountDownLatch(1);\n      final long[] seqNos = new long[threads.length];\n      final Term id = new Term(\"id\", \"id\");\n      // multiple threads update the same document\n      for(int i=0;i<threads.length;i++) {\n        final int threadID = i;\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n                Document doc = new Document();\n                doc.add(new StoredField(\"thread\", threadID));\n                doc.add(new StringField(\"id\", \"id\", Field.Store.NO));\n                startingGun.await();\n                for(int j=0;j<100;j++) {\n                  if (random().nextBoolean()) {\n                    seqNos[threadID] = w.updateDocument(id, doc);\n                  } else {\n                    seqNos[threadID] = w.updateDocuments(id, Arrays.asList(doc));\n                  }\n                }\n              } catch (Exception e) {\n                throw new RuntimeException(e);\n              }\n            }\n          };\n        threads[i].start();\n      }\n      startingGun.countDown();\n      for(Thread thread : threads) {\n        thread.join();\n      }\n\n      // now confirm that the reported sequence numbers agree with the index:\n      int maxThread = 0;\n      Set<Long> allSeqNos = new HashSet<>();\n      for(int i=0;i<threads.length;i++) {\n        allSeqNos.add(seqNos[i]);\n        if (seqNos[i] > seqNos[maxThread]) {\n          maxThread = i;\n        }\n      }\n      // make sure all sequence numbers were different\n      assertEquals(threads.length, allSeqNos.size());\n      DirectoryReader r = w.getReader();\n      IndexSearcher s = newSearcher(r);\n      TopDocs hits = s.search(new TermQuery(id), 1);\n      assertEquals(\"maxDoc: \" + r.maxDoc(), 1, hits.totalHits);\n      Document doc = r.document(hits.scoreDocs[0].doc);\n      assertEquals(maxThread, doc.getField(\"thread\").numericValue().intValue());\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f","date":1579652839,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexingSequenceNumbers#testStressUpdateSameID().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexingSequenceNumbers#testStressUpdateSameID().mjava","sourceNew":"  @Nightly\n  public void testStressUpdateSameID() throws Exception {\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      Directory dir = newDirectory();\n      final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      Thread[] threads = new Thread[TestUtil.nextInt(random(), 2, 5)];\n      final CountDownLatch startingGun = new CountDownLatch(1);\n      final long[] seqNos = new long[threads.length];\n      final Term id = new Term(\"id\", \"id\");\n      // multiple threads update the same document\n      for(int i=0;i<threads.length;i++) {\n        final int threadID = i;\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n                Document doc = new Document();\n                doc.add(new StoredField(\"thread\", threadID));\n                doc.add(new StringField(\"id\", \"id\", Field.Store.NO));\n                startingGun.await();\n                for(int j=0;j<100;j++) {\n                  if (random().nextBoolean()) {\n                    seqNos[threadID] = w.updateDocument(id, doc);\n                  } else {\n                    seqNos[threadID] = w.updateDocuments(id, Arrays.asList(doc));\n                  }\n                }\n              } catch (Exception e) {\n                throw new RuntimeException(e);\n              }\n            }\n          };\n        threads[i].start();\n      }\n      startingGun.countDown();\n      for(Thread thread : threads) {\n        thread.join();\n      }\n\n      // now confirm that the reported sequence numbers agree with the index:\n      int maxThread = 0;\n      Set<Long> allSeqNos = new HashSet<>();\n      for(int i=0;i<threads.length;i++) {\n        allSeqNos.add(seqNos[i]);\n        if (seqNos[i] > seqNos[maxThread]) {\n          maxThread = i;\n        }\n      }\n      // make sure all sequence numbers were different\n      assertEquals(threads.length, allSeqNos.size());\n      DirectoryReader r = w.getReader();\n      IndexSearcher s = newSearcher(r);\n      TopDocs hits = s.search(new TermQuery(id), 1);\n      assertEquals(\"maxDoc: \" + r.maxDoc(), 1, hits.totalHits.value);\n      Document doc = r.document(hits.scoreDocs[0].doc);\n      assertEquals(maxThread, doc.getField(\"thread\").numericValue().intValue());\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  @Slow\n  public void testStressUpdateSameID() throws Exception {\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      Directory dir = newDirectory();\n      final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      Thread[] threads = new Thread[TestUtil.nextInt(random(), 2, 5)];\n      final CountDownLatch startingGun = new CountDownLatch(1);\n      final long[] seqNos = new long[threads.length];\n      final Term id = new Term(\"id\", \"id\");\n      // multiple threads update the same document\n      for(int i=0;i<threads.length;i++) {\n        final int threadID = i;\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n                Document doc = new Document();\n                doc.add(new StoredField(\"thread\", threadID));\n                doc.add(new StringField(\"id\", \"id\", Field.Store.NO));\n                startingGun.await();\n                for(int j=0;j<100;j++) {\n                  if (random().nextBoolean()) {\n                    seqNos[threadID] = w.updateDocument(id, doc);\n                  } else {\n                    seqNos[threadID] = w.updateDocuments(id, Arrays.asList(doc));\n                  }\n                }\n              } catch (Exception e) {\n                throw new RuntimeException(e);\n              }\n            }\n          };\n        threads[i].start();\n      }\n      startingGun.countDown();\n      for(Thread thread : threads) {\n        thread.join();\n      }\n\n      // now confirm that the reported sequence numbers agree with the index:\n      int maxThread = 0;\n      Set<Long> allSeqNos = new HashSet<>();\n      for(int i=0;i<threads.length;i++) {\n        allSeqNos.add(seqNos[i]);\n        if (seqNos[i] > seqNos[maxThread]) {\n          maxThread = i;\n        }\n      }\n      // make sure all sequence numbers were different\n      assertEquals(threads.length, allSeqNos.size());\n      DirectoryReader r = w.getReader();\n      IndexSearcher s = newSearcher(r);\n      TopDocs hits = s.search(new TermQuery(id), 1);\n      assertEquals(\"maxDoc: \" + r.maxDoc(), 1, hits.totalHits.value);\n      Document doc = r.document(hits.scoreDocs[0].doc);\n      assertEquals(maxThread, doc.getField(\"thread\").numericValue().intValue());\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["191128ac5b85671b1671e2c857437694283b6ebf","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"5ee0394b8176abd7c90a4be8c05465be1879db79":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"6483e4260c08168709c02238ae083a51519a28dd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["191128ac5b85671b1671e2c857437694283b6ebf","9dea8da13fd1a227ae1071e8f4ce66bff42174de"],"191128ac5b85671b1671e2c857437694283b6ebf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6483e4260c08168709c02238ae083a51519a28dd"],"9dea8da13fd1a227ae1071e8f4ce66bff42174de":["191128ac5b85671b1671e2c857437694283b6ebf"],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":["9972d96003bc59c07a44e73de3cdd505dc08fd17","122251c49e5a9fa95f056ea257ae3ab452099fc7"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f492fe129985750df09c8dac738aecc503158bb3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["5ee0394b8176abd7c90a4be8c05465be1879db79"],"9972d96003bc59c07a44e73de3cdd505dc08fd17":["f492fe129985750df09c8dac738aecc503158bb3"],"122251c49e5a9fa95f056ea257ae3ab452099fc7":["9972d96003bc59c07a44e73de3cdd505dc08fd17"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"]},"commit2Childs":{"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["5ee0394b8176abd7c90a4be8c05465be1879db79","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"5ee0394b8176abd7c90a4be8c05465be1879db79":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"6483e4260c08168709c02238ae083a51519a28dd":["191128ac5b85671b1671e2c857437694283b6ebf"],"191128ac5b85671b1671e2c857437694283b6ebf":["403d05f7f8d69b65659157eff1bc1d2717f04c66","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","9dea8da13fd1a227ae1071e8f4ce66bff42174de"],"9dea8da13fd1a227ae1071e8f4ce66bff42174de":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":["6483e4260c08168709c02238ae083a51519a28dd"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6483e4260c08168709c02238ae083a51519a28dd","191128ac5b85671b1671e2c857437694283b6ebf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","f492fe129985750df09c8dac738aecc503158bb3"],"f492fe129985750df09c8dac738aecc503158bb3":["9972d96003bc59c07a44e73de3cdd505dc08fd17"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"],"9972d96003bc59c07a44e73de3cdd505dc08fd17":["b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","122251c49e5a9fa95f056ea257ae3ab452099fc7"],"122251c49e5a9fa95f056ea257ae3ab452099fc7":["b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}