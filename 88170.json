{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByArray#calcFacets().mjava","commits":[{"id":"3661d6742eed69ff6cc30ea2538d572624a7cdf8","date":1472676864,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByArray#calcFacets().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByArray#getFieldCacheCounts().mjava","sourceNew":"  private SimpleOrderedMap<Object> calcFacets() throws IOException {\n    String prefix = freq.prefix;\n    if (prefix == null || prefix.length() == 0) {\n      prefixRef = null;\n    } else {\n      prefixRef = new BytesRefBuilder();\n      prefixRef.copyChars(prefix);\n    }\n\n    findStartAndEndOrds();\n\n    maxSlots = nTerms;\n\n    if (freq.allBuckets) {\n      allBucketsSlot = maxSlots++;\n    }\n\n    createCollectAcc(nDocs, maxSlots);\n\n    if (freq.allBuckets) {\n      allBucketsAcc = new SpecialSlotAcc(fcontext, collectAcc, allBucketsSlot, otherAccs, 0);\n    }\n\n    collectDocs();\n\n    return super.findTopSlots(nTerms, nTerms,\n        slotNum -> { // getBucketValFromSlotNum\n          try {\n            return (Comparable) sf.getType().toObject(sf, lookupOrd(slotNum + startTermIndex));\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        },\n        Object::toString); // getFieldQueryVal\n  }\n\n","sourceOld":"  private SimpleOrderedMap<Object> getFieldCacheCounts() throws IOException {\n    String prefix = freq.prefix;\n    if (prefix == null || prefix.length() == 0) {\n      prefixRef = null;\n    } else {\n      prefixRef = new BytesRefBuilder();\n      prefixRef.copyChars(prefix);\n    }\n\n    findStartAndEndOrds();\n\n    maxSlots = nTerms;\n\n    if (freq.allBuckets) {\n      allBucketsSlot = maxSlots++;\n    }\n\n    createCollectAcc(nDocs, maxSlots);\n\n    if (freq.allBuckets) {\n      allBucketsAcc = new SpecialSlotAcc(fcontext, collectAcc, allBucketsSlot, otherAccs, 0);\n    }\n\n    collectDocs();\n\n    return findTopSlots();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc8f206328a706450934717bec7ccc22ad166fc0","date":1473142172,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByArray#calcFacets().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByArray#getFieldCacheCounts().mjava","sourceNew":"  private SimpleOrderedMap<Object> calcFacets() throws IOException {\n    String prefix = freq.prefix;\n    if (prefix == null || prefix.length() == 0) {\n      prefixRef = null;\n    } else {\n      prefixRef = new BytesRefBuilder();\n      prefixRef.copyChars(prefix);\n    }\n\n    findStartAndEndOrds();\n\n    maxSlots = nTerms;\n\n    if (freq.allBuckets) {\n      allBucketsSlot = maxSlots++;\n    }\n\n    createCollectAcc(nDocs, maxSlots);\n\n    if (freq.allBuckets) {\n      allBucketsAcc = new SpecialSlotAcc(fcontext, collectAcc, allBucketsSlot, otherAccs, 0);\n    }\n\n    collectDocs();\n\n    return super.findTopSlots(nTerms, nTerms,\n        slotNum -> { // getBucketValFromSlotNum\n          try {\n            return (Comparable) sf.getType().toObject(sf, lookupOrd(slotNum + startTermIndex));\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        },\n        Object::toString); // getFieldQueryVal\n  }\n\n","sourceOld":"  private SimpleOrderedMap<Object> getFieldCacheCounts() throws IOException {\n    String prefix = freq.prefix;\n    if (prefix == null || prefix.length() == 0) {\n      prefixRef = null;\n    } else {\n      prefixRef = new BytesRefBuilder();\n      prefixRef.copyChars(prefix);\n    }\n\n    findStartAndEndOrds();\n\n    maxSlots = nTerms;\n\n    if (freq.allBuckets) {\n      allBucketsSlot = maxSlots++;\n    }\n\n    createCollectAcc(nDocs, maxSlots);\n\n    if (freq.allBuckets) {\n      allBucketsAcc = new SpecialSlotAcc(fcontext, collectAcc, allBucketsSlot, otherAccs, 0);\n    }\n\n    collectDocs();\n\n    return findTopSlots();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByArray#calcFacets().mjava","pathOld":"/dev/null","sourceNew":"  private SimpleOrderedMap<Object> calcFacets() throws IOException {\n    String prefix = freq.prefix;\n    if (prefix == null || prefix.length() == 0) {\n      prefixRef = null;\n    } else {\n      prefixRef = new BytesRefBuilder();\n      prefixRef.copyChars(prefix);\n    }\n\n    findStartAndEndOrds();\n\n    maxSlots = nTerms;\n\n    if (freq.allBuckets) {\n      allBucketsSlot = maxSlots++;\n    }\n\n    createCollectAcc(nDocs, maxSlots);\n\n    if (freq.allBuckets) {\n      allBucketsAcc = new SpecialSlotAcc(fcontext, collectAcc, allBucketsSlot, otherAccs, 0);\n    }\n\n    collectDocs();\n\n    return super.findTopSlots(nTerms, nTerms,\n        slotNum -> { // getBucketValFromSlotNum\n          try {\n            return (Comparable) sf.getType().toObject(sf, lookupOrd(slotNum + startTermIndex));\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        },\n        Object::toString); // getFieldQueryVal\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByArray#calcFacets().mjava","pathOld":"/dev/null","sourceNew":"  private SimpleOrderedMap<Object> calcFacets() throws IOException {\n    String prefix = freq.prefix;\n    if (prefix == null || prefix.length() == 0) {\n      prefixRef = null;\n    } else {\n      prefixRef = new BytesRefBuilder();\n      prefixRef.copyChars(prefix);\n    }\n\n    findStartAndEndOrds();\n\n    maxSlots = nTerms;\n\n    if (freq.allBuckets) {\n      allBucketsSlot = maxSlots++;\n    }\n\n    createCollectAcc(nDocs, maxSlots);\n\n    if (freq.allBuckets) {\n      allBucketsAcc = new SpecialSlotAcc(fcontext, collectAcc, allBucketsSlot, otherAccs, 0);\n    }\n\n    collectDocs();\n\n    return super.findTopSlots(nTerms, nTerms,\n        slotNum -> { // getBucketValFromSlotNum\n          try {\n            return (Comparable) sf.getType().toObject(sf, lookupOrd(slotNum + startTermIndex));\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        },\n        Object::toString); // getFieldQueryVal\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ec805ca8fedc0166461148c7182f1bcbbd18ee1","date":1489767223,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByArray#calcFacets().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByArray#calcFacets().mjava","sourceNew":"  private SimpleOrderedMap<Object> calcFacets() throws IOException {\n    if (fcontext.facetInfo != null) {\n      return refineFacets();\n    }\n\n    String prefix = freq.prefix;\n    if (prefix == null || prefix.length() == 0) {\n      prefixRef = null;\n    } else {\n      prefixRef = new BytesRefBuilder();\n      prefixRef.copyChars(prefix);\n    }\n\n    findStartAndEndOrds();\n\n    maxSlots = nTerms;\n\n    if (freq.allBuckets) {\n      allBucketsSlot = maxSlots++;\n    }\n\n    createCollectAcc(nDocs, maxSlots);\n\n    if (freq.allBuckets) {\n      allBucketsAcc = new SpecialSlotAcc(fcontext, collectAcc, allBucketsSlot, otherAccs, 0);\n    }\n\n    collectDocs();\n\n    return super.findTopSlots(nTerms, nTerms,\n        slotNum -> { // getBucketValFromSlotNum\n          try {\n            return (Comparable) sf.getType().toObject(sf, lookupOrd(slotNum + startTermIndex));\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        },\n        Object::toString); // getFieldQueryVal\n  }\n\n","sourceOld":"  private SimpleOrderedMap<Object> calcFacets() throws IOException {\n    String prefix = freq.prefix;\n    if (prefix == null || prefix.length() == 0) {\n      prefixRef = null;\n    } else {\n      prefixRef = new BytesRefBuilder();\n      prefixRef.copyChars(prefix);\n    }\n\n    findStartAndEndOrds();\n\n    maxSlots = nTerms;\n\n    if (freq.allBuckets) {\n      allBucketsSlot = maxSlots++;\n    }\n\n    createCollectAcc(nDocs, maxSlots);\n\n    if (freq.allBuckets) {\n      allBucketsAcc = new SpecialSlotAcc(fcontext, collectAcc, allBucketsSlot, otherAccs, 0);\n    }\n\n    collectDocs();\n\n    return super.findTopSlots(nTerms, nTerms,\n        slotNum -> { // getBucketValFromSlotNum\n          try {\n            return (Comparable) sf.getType().toObject(sf, lookupOrd(slotNum + startTermIndex));\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        },\n        Object::toString); // getFieldQueryVal\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"11ab475c994c79138885cc8a30b2641d929cdc43","date":1490280010,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByArray#calcFacets().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByArray#calcFacets().mjava","sourceNew":"  private SimpleOrderedMap<Object> calcFacets() throws IOException {\n    if (fcontext.facetInfo != null) {\n      return refineFacets();\n    }\n\n    String prefix = freq.prefix;\n    if (prefix == null || prefix.length() == 0) {\n      prefixRef = null;\n    } else {\n      prefixRef = new BytesRefBuilder();\n      prefixRef.copyChars(prefix);\n    }\n\n    findStartAndEndOrds();\n\n    maxSlots = nTerms;\n\n    if (freq.allBuckets) {\n      allBucketsSlot = maxSlots++;\n    }\n\n    createCollectAcc(nDocs, maxSlots);\n\n    if (freq.allBuckets) {\n      allBucketsAcc = new SpecialSlotAcc(fcontext, collectAcc, allBucketsSlot, otherAccs, 0);\n    }\n\n    collectDocs();\n\n    return super.findTopSlots(nTerms, nTerms,\n        slotNum -> { // getBucketValFromSlotNum\n          try {\n            return (Comparable) sf.getType().toObject(sf, lookupOrd(slotNum + startTermIndex));\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        },\n        Object::toString); // getFieldQueryVal\n  }\n\n","sourceOld":"  private SimpleOrderedMap<Object> calcFacets() throws IOException {\n    String prefix = freq.prefix;\n    if (prefix == null || prefix.length() == 0) {\n      prefixRef = null;\n    } else {\n      prefixRef = new BytesRefBuilder();\n      prefixRef.copyChars(prefix);\n    }\n\n    findStartAndEndOrds();\n\n    maxSlots = nTerms;\n\n    if (freq.allBuckets) {\n      allBucketsSlot = maxSlots++;\n    }\n\n    createCollectAcc(nDocs, maxSlots);\n\n    if (freq.allBuckets) {\n      allBucketsAcc = new SpecialSlotAcc(fcontext, collectAcc, allBucketsSlot, otherAccs, 0);\n    }\n\n    collectDocs();\n\n    return super.findTopSlots(nTerms, nTerms,\n        slotNum -> { // getBucketValFromSlotNum\n          try {\n            return (Comparable) sf.getType().toObject(sf, lookupOrd(slotNum + startTermIndex));\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        },\n        Object::toString); // getFieldQueryVal\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10c711bb8c3aac052fb8e0e9d417517c94166d5d","date":1491485369,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByArray#calcFacets().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByArray#calcFacets().mjava","sourceNew":"  private SimpleOrderedMap<Object> calcFacets() throws IOException {\n    SimpleOrderedMap<Object> refineResult = null;\n    boolean skipThisFacet = (fcontext.flags & SKIP_FACET) != 0;\n\n    if (fcontext.facetInfo != null) {\n      refineResult = refineFacets();\n      // if we've seen this facet bucket, then refining can be done.  If we haven't, we still\n      // only need to continue if we need allBuckets or numBuckets info.\n      if (skipThisFacet || (!freq.allBuckets && !freq.numBuckets)) return refineResult;\n    }\n\n    String prefix = freq.prefix;\n    if (prefix == null || prefix.length() == 0) {\n      prefixRef = null;\n    } else {\n      prefixRef = new BytesRefBuilder();\n      prefixRef.copyChars(prefix);\n    }\n\n    findStartAndEndOrds();\n\n    if (refineResult != null) {\n      if (freq.allBuckets) {\n        createAccs(nDocs, 1);\n        allBucketsAcc = new SpecialSlotAcc(fcontext, null, -1, accs, 0);\n        collectDocs();\n\n        SimpleOrderedMap<Object> allBuckets = new SimpleOrderedMap<>();\n        allBuckets.add(\"count\", allBucketsAcc.getSpecialCount());\n        allBucketsAcc.setValues(allBuckets, -1); // -1 slotNum is unused for SpecialSlotAcc\n        refineResult.add(\"allBuckets\", allBuckets);\n        return refineResult;\n      }\n    }\n\n    maxSlots = nTerms;\n\n    if (freq.allBuckets) {\n      allBucketsSlot = maxSlots++;\n    }\n\n    createCollectAcc(nDocs, maxSlots);\n\n    if (freq.allBuckets) {\n      allBucketsAcc = new SpecialSlotAcc(fcontext, collectAcc, allBucketsSlot, otherAccs, 0);\n    }\n\n    collectDocs();\n\n    return super.findTopSlots(nTerms, nTerms,\n        slotNum -> { // getBucketValFromSlotNum\n          try {\n            return (Comparable) sf.getType().toObject(sf, lookupOrd(slotNum + startTermIndex));\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        },\n        Object::toString); // getFieldQueryVal\n  }\n\n","sourceOld":"  private SimpleOrderedMap<Object> calcFacets() throws IOException {\n    if (fcontext.facetInfo != null) {\n      return refineFacets();\n    }\n\n    String prefix = freq.prefix;\n    if (prefix == null || prefix.length() == 0) {\n      prefixRef = null;\n    } else {\n      prefixRef = new BytesRefBuilder();\n      prefixRef.copyChars(prefix);\n    }\n\n    findStartAndEndOrds();\n\n    maxSlots = nTerms;\n\n    if (freq.allBuckets) {\n      allBucketsSlot = maxSlots++;\n    }\n\n    createCollectAcc(nDocs, maxSlots);\n\n    if (freq.allBuckets) {\n      allBucketsAcc = new SpecialSlotAcc(fcontext, collectAcc, allBucketsSlot, otherAccs, 0);\n    }\n\n    collectDocs();\n\n    return super.findTopSlots(nTerms, nTerms,\n        slotNum -> { // getBucketValFromSlotNum\n          try {\n            return (Comparable) sf.getType().toObject(sf, lookupOrd(slotNum + startTermIndex));\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        },\n        Object::toString); // getFieldQueryVal\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByArray#calcFacets().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByArray#calcFacets().mjava","sourceNew":"  private SimpleOrderedMap<Object> calcFacets() throws IOException {\n    SimpleOrderedMap<Object> refineResult = null;\n    boolean skipThisFacet = (fcontext.flags & SKIP_FACET) != 0;\n\n    if (fcontext.facetInfo != null) {\n      refineResult = refineFacets();\n      // if we've seen this facet bucket, then refining can be done.  If we haven't, we still\n      // only need to continue if we need allBuckets or numBuckets info.\n      if (skipThisFacet || (!freq.allBuckets && !freq.numBuckets)) return refineResult;\n    }\n\n    String prefix = freq.prefix;\n    if (prefix == null || prefix.length() == 0) {\n      prefixRef = null;\n    } else {\n      prefixRef = new BytesRefBuilder();\n      prefixRef.copyChars(prefix);\n    }\n\n    findStartAndEndOrds();\n\n    if (refineResult != null) {\n      if (freq.allBuckets) {\n        createAccs(nDocs, 1);\n        allBucketsAcc = new SpecialSlotAcc(fcontext, null, -1, accs, 0);\n        collectDocs();\n\n        SimpleOrderedMap<Object> allBuckets = new SimpleOrderedMap<>();\n        allBuckets.add(\"count\", allBucketsAcc.getSpecialCount());\n        allBucketsAcc.setValues(allBuckets, -1); // -1 slotNum is unused for SpecialSlotAcc\n        refineResult.add(\"allBuckets\", allBuckets);\n        return refineResult;\n      }\n    }\n\n    maxSlots = nTerms;\n\n    if (freq.allBuckets) {\n      allBucketsSlot = maxSlots++;\n    }\n\n    createCollectAcc(nDocs, maxSlots);\n\n    if (freq.allBuckets) {\n      allBucketsAcc = new SpecialSlotAcc(fcontext, collectAcc, allBucketsSlot, otherAccs, 0);\n    }\n\n    collectDocs();\n\n    return super.findTopSlots(nTerms, nTerms,\n        slotNum -> { // getBucketValFromSlotNum\n          try {\n            return (Comparable) sf.getType().toObject(sf, lookupOrd(slotNum + startTermIndex));\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        },\n        Object::toString); // getFieldQueryVal\n  }\n\n","sourceOld":"  private SimpleOrderedMap<Object> calcFacets() throws IOException {\n    if (fcontext.facetInfo != null) {\n      return refineFacets();\n    }\n\n    String prefix = freq.prefix;\n    if (prefix == null || prefix.length() == 0) {\n      prefixRef = null;\n    } else {\n      prefixRef = new BytesRefBuilder();\n      prefixRef.copyChars(prefix);\n    }\n\n    findStartAndEndOrds();\n\n    maxSlots = nTerms;\n\n    if (freq.allBuckets) {\n      allBucketsSlot = maxSlots++;\n    }\n\n    createCollectAcc(nDocs, maxSlots);\n\n    if (freq.allBuckets) {\n      allBucketsAcc = new SpecialSlotAcc(fcontext, collectAcc, allBucketsSlot, otherAccs, 0);\n    }\n\n    collectDocs();\n\n    return super.findTopSlots(nTerms, nTerms,\n        slotNum -> { // getBucketValFromSlotNum\n          try {\n            return (Comparable) sf.getType().toObject(sf, lookupOrd(slotNum + startTermIndex));\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        },\n        Object::toString); // getFieldQueryVal\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84e83c6774414730d58276083becadc66f4e4aca","date":1493132430,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByArray#calcFacets().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByArray#calcFacets().mjava","sourceNew":"  private SimpleOrderedMap<Object> calcFacets() throws IOException {\n    SimpleOrderedMap<Object> refineResult = null;\n    boolean skipThisFacet = (fcontext.flags & SKIP_FACET) != 0;\n\n    if (fcontext.facetInfo != null) {\n      refineResult = refineFacets();\n      // if we've seen this facet bucket, then refining can be done.  If we haven't, we still\n      // only need to continue if we need allBuckets or numBuckets info.\n      if (skipThisFacet || !freq.allBuckets) return refineResult;\n    }\n\n    String prefix = freq.prefix;\n    if (prefix == null || prefix.length() == 0) {\n      prefixRef = null;\n    } else {\n      prefixRef = new BytesRefBuilder();\n      prefixRef.copyChars(prefix);\n    }\n\n    findStartAndEndOrds();\n\n    if (refineResult != null) {\n      if (freq.allBuckets) {\n        createAccs(nDocs, 1);\n        allBucketsAcc = new SpecialSlotAcc(fcontext, null, -1, accs, 0);\n        collectDocs();\n\n        SimpleOrderedMap<Object> allBuckets = new SimpleOrderedMap<>();\n        allBuckets.add(\"count\", allBucketsAcc.getSpecialCount());\n        allBucketsAcc.setValues(allBuckets, -1); // -1 slotNum is unused for SpecialSlotAcc\n        refineResult.add(\"allBuckets\", allBuckets);\n        return refineResult;\n      }\n    }\n\n    maxSlots = nTerms;\n\n    if (freq.allBuckets) {\n      allBucketsSlot = maxSlots++;\n    }\n\n    createCollectAcc(nDocs, maxSlots);\n\n    if (freq.allBuckets) {\n      allBucketsAcc = new SpecialSlotAcc(fcontext, collectAcc, allBucketsSlot, otherAccs, 0);\n    }\n\n    collectDocs();\n\n    return super.findTopSlots(nTerms, nTerms,\n        slotNum -> { // getBucketValFromSlotNum\n          try {\n            return (Comparable) sf.getType().toObject(sf, lookupOrd(slotNum + startTermIndex));\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        },\n        Object::toString); // getFieldQueryVal\n  }\n\n","sourceOld":"  private SimpleOrderedMap<Object> calcFacets() throws IOException {\n    SimpleOrderedMap<Object> refineResult = null;\n    boolean skipThisFacet = (fcontext.flags & SKIP_FACET) != 0;\n\n    if (fcontext.facetInfo != null) {\n      refineResult = refineFacets();\n      // if we've seen this facet bucket, then refining can be done.  If we haven't, we still\n      // only need to continue if we need allBuckets or numBuckets info.\n      if (skipThisFacet || (!freq.allBuckets && !freq.numBuckets)) return refineResult;\n    }\n\n    String prefix = freq.prefix;\n    if (prefix == null || prefix.length() == 0) {\n      prefixRef = null;\n    } else {\n      prefixRef = new BytesRefBuilder();\n      prefixRef.copyChars(prefix);\n    }\n\n    findStartAndEndOrds();\n\n    if (refineResult != null) {\n      if (freq.allBuckets) {\n        createAccs(nDocs, 1);\n        allBucketsAcc = new SpecialSlotAcc(fcontext, null, -1, accs, 0);\n        collectDocs();\n\n        SimpleOrderedMap<Object> allBuckets = new SimpleOrderedMap<>();\n        allBuckets.add(\"count\", allBucketsAcc.getSpecialCount());\n        allBucketsAcc.setValues(allBuckets, -1); // -1 slotNum is unused for SpecialSlotAcc\n        refineResult.add(\"allBuckets\", allBuckets);\n        return refineResult;\n      }\n    }\n\n    maxSlots = nTerms;\n\n    if (freq.allBuckets) {\n      allBucketsSlot = maxSlots++;\n    }\n\n    createCollectAcc(nDocs, maxSlots);\n\n    if (freq.allBuckets) {\n      allBucketsAcc = new SpecialSlotAcc(fcontext, collectAcc, allBucketsSlot, otherAccs, 0);\n    }\n\n    collectDocs();\n\n    return super.findTopSlots(nTerms, nTerms,\n        slotNum -> { // getBucketValFromSlotNum\n          try {\n            return (Comparable) sf.getType().toObject(sf, lookupOrd(slotNum + startTermIndex));\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        },\n        Object::toString); // getFieldQueryVal\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByArray#calcFacets().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByArray#calcFacets().mjava","sourceNew":"  private SimpleOrderedMap<Object> calcFacets() throws IOException {\n    SimpleOrderedMap<Object> refineResult = null;\n    boolean skipThisFacet = (fcontext.flags & SKIP_FACET) != 0;\n\n    if (fcontext.facetInfo != null) {\n      refineResult = refineFacets();\n      // if we've seen this facet bucket, then refining can be done.  If we haven't, we still\n      // only need to continue if we need allBuckets or numBuckets info.\n      if (skipThisFacet || !freq.allBuckets) return refineResult;\n    }\n\n    String prefix = freq.prefix;\n    if (prefix == null || prefix.length() == 0) {\n      prefixRef = null;\n    } else {\n      prefixRef = new BytesRefBuilder();\n      prefixRef.copyChars(prefix);\n    }\n\n    findStartAndEndOrds();\n\n    if (refineResult != null) {\n      if (freq.allBuckets) {\n        createAccs(nDocs, 1);\n        allBucketsAcc = new SpecialSlotAcc(fcontext, null, -1, accs, 0);\n        collectDocs();\n\n        SimpleOrderedMap<Object> allBuckets = new SimpleOrderedMap<>();\n        allBuckets.add(\"count\", allBucketsAcc.getSpecialCount());\n        allBucketsAcc.setValues(allBuckets, -1); // -1 slotNum is unused for SpecialSlotAcc\n        refineResult.add(\"allBuckets\", allBuckets);\n        return refineResult;\n      }\n    }\n\n    maxSlots = nTerms;\n\n    if (freq.allBuckets) {\n      allBucketsSlot = maxSlots++;\n    }\n\n    createCollectAcc(nDocs, maxSlots);\n\n    if (freq.allBuckets) {\n      allBucketsAcc = new SpecialSlotAcc(fcontext, collectAcc, allBucketsSlot, otherAccs, 0);\n    }\n\n    collectDocs();\n\n    return super.findTopSlots(nTerms, nTerms,\n        slotNum -> { // getBucketValFromSlotNum\n          try {\n            return (Comparable) sf.getType().toObject(sf, lookupOrd(slotNum + startTermIndex));\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        },\n        Object::toString); // getFieldQueryVal\n  }\n\n","sourceOld":"  private SimpleOrderedMap<Object> calcFacets() throws IOException {\n    SimpleOrderedMap<Object> refineResult = null;\n    boolean skipThisFacet = (fcontext.flags & SKIP_FACET) != 0;\n\n    if (fcontext.facetInfo != null) {\n      refineResult = refineFacets();\n      // if we've seen this facet bucket, then refining can be done.  If we haven't, we still\n      // only need to continue if we need allBuckets or numBuckets info.\n      if (skipThisFacet || (!freq.allBuckets && !freq.numBuckets)) return refineResult;\n    }\n\n    String prefix = freq.prefix;\n    if (prefix == null || prefix.length() == 0) {\n      prefixRef = null;\n    } else {\n      prefixRef = new BytesRefBuilder();\n      prefixRef.copyChars(prefix);\n    }\n\n    findStartAndEndOrds();\n\n    if (refineResult != null) {\n      if (freq.allBuckets) {\n        createAccs(nDocs, 1);\n        allBucketsAcc = new SpecialSlotAcc(fcontext, null, -1, accs, 0);\n        collectDocs();\n\n        SimpleOrderedMap<Object> allBuckets = new SimpleOrderedMap<>();\n        allBuckets.add(\"count\", allBucketsAcc.getSpecialCount());\n        allBucketsAcc.setValues(allBuckets, -1); // -1 slotNum is unused for SpecialSlotAcc\n        refineResult.add(\"allBuckets\", allBuckets);\n        return refineResult;\n      }\n    }\n\n    maxSlots = nTerms;\n\n    if (freq.allBuckets) {\n      allBucketsSlot = maxSlots++;\n    }\n\n    createCollectAcc(nDocs, maxSlots);\n\n    if (freq.allBuckets) {\n      allBucketsAcc = new SpecialSlotAcc(fcontext, collectAcc, allBucketsSlot, otherAccs, 0);\n    }\n\n    collectDocs();\n\n    return super.findTopSlots(nTerms, nTerms,\n        slotNum -> { // getBucketValFromSlotNum\n          try {\n            return (Comparable) sf.getType().toObject(sf, lookupOrd(slotNum + startTermIndex));\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        },\n        Object::toString); // getFieldQueryVal\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15b321aed72eecb043f237c490b9afd4e52c25be","date":1525894978,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByArray#calcFacets().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByArray#calcFacets().mjava","sourceNew":"  private SimpleOrderedMap<Object> calcFacets() throws IOException {\n    SimpleOrderedMap<Object> refineResult = null;\n    boolean skipThisFacet = (fcontext.flags & SKIP_FACET) != 0;\n\n    if (fcontext.facetInfo != null) {\n      refineResult = refineFacets();\n      // if we've seen this facet bucket, then refining can be done.  If we haven't, we still\n      // only need to continue if we need allBuckets or numBuckets info.\n      if (skipThisFacet || !freq.allBuckets) return refineResult;\n    }\n\n    String prefix = freq.prefix;\n    if (prefix == null || prefix.length() == 0) {\n      prefixRef = null;\n    } else {\n      prefixRef = new BytesRefBuilder();\n      prefixRef.copyChars(prefix);\n    }\n\n    findStartAndEndOrds();\n\n    if (refineResult != null) {\n      if (freq.allBuckets) {\n        createAccs(nDocs, 1);\n        allBucketsAcc = new SpecialSlotAcc(fcontext, null, -1, accs, 0);\n        collectDocs();\n\n        SimpleOrderedMap<Object> allBuckets = new SimpleOrderedMap<>();\n        allBuckets.add(\"count\", allBucketsAcc.getSpecialCount());\n        allBucketsAcc.setValues(allBuckets, -1); // -1 slotNum is unused for SpecialSlotAcc\n        refineResult.add(\"allBuckets\", allBuckets);\n        return refineResult;\n      }\n    }\n\n    maxSlots = nTerms;\n\n    if (freq.allBuckets) {\n      allBucketsSlot = maxSlots++;\n    }\n\n    createCollectAcc(nDocs, maxSlots);\n\n    if (freq.allBuckets) {\n      allBucketsAcc = new SpecialSlotAcc(fcontext, collectAcc, allBucketsSlot, otherAccs, 0);\n    }\n\n    collectDocs();\n\n    return super.findTopSlots(nTerms, nTerms,\n        slotNum -> { // getBucketValFromSlotNum\n          try {\n            return (Comparable) sf.getType().toObject(sf, lookupOrd(slotNum + startTermIndex));\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        },\n        obj -> obj instanceof Date ? ((Date)obj).toInstant().toString() : obj.toString()\n    );\n  }\n\n","sourceOld":"  private SimpleOrderedMap<Object> calcFacets() throws IOException {\n    SimpleOrderedMap<Object> refineResult = null;\n    boolean skipThisFacet = (fcontext.flags & SKIP_FACET) != 0;\n\n    if (fcontext.facetInfo != null) {\n      refineResult = refineFacets();\n      // if we've seen this facet bucket, then refining can be done.  If we haven't, we still\n      // only need to continue if we need allBuckets or numBuckets info.\n      if (skipThisFacet || !freq.allBuckets) return refineResult;\n    }\n\n    String prefix = freq.prefix;\n    if (prefix == null || prefix.length() == 0) {\n      prefixRef = null;\n    } else {\n      prefixRef = new BytesRefBuilder();\n      prefixRef.copyChars(prefix);\n    }\n\n    findStartAndEndOrds();\n\n    if (refineResult != null) {\n      if (freq.allBuckets) {\n        createAccs(nDocs, 1);\n        allBucketsAcc = new SpecialSlotAcc(fcontext, null, -1, accs, 0);\n        collectDocs();\n\n        SimpleOrderedMap<Object> allBuckets = new SimpleOrderedMap<>();\n        allBuckets.add(\"count\", allBucketsAcc.getSpecialCount());\n        allBucketsAcc.setValues(allBuckets, -1); // -1 slotNum is unused for SpecialSlotAcc\n        refineResult.add(\"allBuckets\", allBuckets);\n        return refineResult;\n      }\n    }\n\n    maxSlots = nTerms;\n\n    if (freq.allBuckets) {\n      allBucketsSlot = maxSlots++;\n    }\n\n    createCollectAcc(nDocs, maxSlots);\n\n    if (freq.allBuckets) {\n      allBucketsAcc = new SpecialSlotAcc(fcontext, collectAcc, allBucketsSlot, otherAccs, 0);\n    }\n\n    collectDocs();\n\n    return super.findTopSlots(nTerms, nTerms,\n        slotNum -> { // getBucketValFromSlotNum\n          try {\n            return (Comparable) sf.getType().toObject(sf, lookupOrd(slotNum + startTermIndex));\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        },\n        Object::toString); // getFieldQueryVal\n  }\n\n","bugFix":["3661d6742eed69ff6cc30ea2538d572624a7cdf8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c705a0d590cf911e7c942df49563ca2ea176e22","date":1526916174,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByArray#calcFacets().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByArray#calcFacets().mjava","sourceNew":"  private SimpleOrderedMap<Object> calcFacets() throws IOException {\n    SimpleOrderedMap<Object> refineResult = null;\n    boolean skipThisFacet = (fcontext.flags & SKIP_FACET) != 0;\n\n    if (fcontext.facetInfo != null) {\n      refineResult = refineFacets();\n      // if we've seen this facet bucket, then refining can be done.  If we haven't, we still\n      // only need to continue if we need allBuckets or numBuckets info.\n      if (skipThisFacet || !freq.allBuckets) return refineResult;\n    }\n\n    String prefix = freq.prefix;\n    if (prefix == null || prefix.length() == 0) {\n      prefixRef = null;\n    } else {\n      prefixRef = new BytesRefBuilder();\n      prefixRef.copyChars(prefix);\n    }\n\n    findStartAndEndOrds();\n\n    if (refineResult != null) {\n      if (freq.allBuckets) {\n        createAccs(nDocs, 1);\n        allBucketsAcc = new SpecialSlotAcc(fcontext, null, -1, accs, 0);\n        collectDocs();\n\n        SimpleOrderedMap<Object> allBuckets = new SimpleOrderedMap<>();\n        allBuckets.add(\"count\", allBucketsAcc.getSpecialCount());\n        allBucketsAcc.setValues(allBuckets, -1); // -1 slotNum is unused for SpecialSlotAcc\n        refineResult.add(\"allBuckets\", allBuckets);\n        return refineResult;\n      }\n    }\n\n    maxSlots = nTerms;\n\n    if (freq.allBuckets) {\n      allBucketsSlot = maxSlots++;\n    }\n\n    createCollectAcc(nDocs, maxSlots);\n\n    if (freq.allBuckets) {\n      allBucketsAcc = new SpecialSlotAcc(fcontext, collectAcc, allBucketsSlot, otherAccs, 0);\n    }\n\n    collectDocs();\n\n    return super.findTopSlots(nTerms, nTerms,\n        slotNum -> { // getBucketValFromSlotNum\n          try {\n            return (Comparable) sf.getType().toObject(sf, lookupOrd(slotNum + startTermIndex));\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        },\n        obj -> valueObjToString(obj)\n    );\n  }\n\n","sourceOld":"  private SimpleOrderedMap<Object> calcFacets() throws IOException {\n    SimpleOrderedMap<Object> refineResult = null;\n    boolean skipThisFacet = (fcontext.flags & SKIP_FACET) != 0;\n\n    if (fcontext.facetInfo != null) {\n      refineResult = refineFacets();\n      // if we've seen this facet bucket, then refining can be done.  If we haven't, we still\n      // only need to continue if we need allBuckets or numBuckets info.\n      if (skipThisFacet || !freq.allBuckets) return refineResult;\n    }\n\n    String prefix = freq.prefix;\n    if (prefix == null || prefix.length() == 0) {\n      prefixRef = null;\n    } else {\n      prefixRef = new BytesRefBuilder();\n      prefixRef.copyChars(prefix);\n    }\n\n    findStartAndEndOrds();\n\n    if (refineResult != null) {\n      if (freq.allBuckets) {\n        createAccs(nDocs, 1);\n        allBucketsAcc = new SpecialSlotAcc(fcontext, null, -1, accs, 0);\n        collectDocs();\n\n        SimpleOrderedMap<Object> allBuckets = new SimpleOrderedMap<>();\n        allBuckets.add(\"count\", allBucketsAcc.getSpecialCount());\n        allBucketsAcc.setValues(allBuckets, -1); // -1 slotNum is unused for SpecialSlotAcc\n        refineResult.add(\"allBuckets\", allBuckets);\n        return refineResult;\n      }\n    }\n\n    maxSlots = nTerms;\n\n    if (freq.allBuckets) {\n      allBucketsSlot = maxSlots++;\n    }\n\n    createCollectAcc(nDocs, maxSlots);\n\n    if (freq.allBuckets) {\n      allBucketsAcc = new SpecialSlotAcc(fcontext, collectAcc, allBucketsSlot, otherAccs, 0);\n    }\n\n    collectDocs();\n\n    return super.findTopSlots(nTerms, nTerms,\n        slotNum -> { // getBucketValFromSlotNum\n          try {\n            return (Comparable) sf.getType().toObject(sf, lookupOrd(slotNum + startTermIndex));\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        },\n        obj -> obj instanceof Date ? ((Date)obj).toInstant().toString() : obj.toString()\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd5179c53ace95be1691b13506e7f43ebf92a114","date":1591200586,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByArray#calcFacets().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByArray#calcFacets().mjava","sourceNew":"  private SimpleOrderedMap<Object> calcFacets() throws IOException {\n    SimpleOrderedMap<Object> refineResult = null;\n    boolean skipThisFacet = (fcontext.flags & SKIP_FACET) != 0;\n\n    if (fcontext.facetInfo != null) {\n      refineResult = refineFacets();\n      // if we've seen this facet bucket, then refining can be done.  If we haven't, we still\n      // only need to continue if we need allBuckets or numBuckets info.\n      if (skipThisFacet || !freq.allBuckets) return refineResult;\n    }\n\n    String prefix = freq.prefix;\n    if (prefix == null || prefix.length() == 0) {\n      prefixRef = null;\n    } else {\n      prefixRef = new BytesRefBuilder();\n      prefixRef.copyChars(prefix);\n    }\n\n    findStartAndEndOrds();\n\n    if (refineResult != null) {\n      if (freq.allBuckets) {\n        // count is irrelevant, but hardcoded in collect(...), so intercept/mask normal counts.\n        // Set here to prevent createAccs(...) from creating a 1-slot countAcc that will fail with AIOOBE\n        countAcc = SlotAcc.DEV_NULL_SLOT_ACC;\n        createAccs(nDocs, 1);\n        otherAccs = accs; // accs is created above and set on allBucketsAcc; but during collection, setNextReader is called on otherAccs.\n        allBucketsAcc = new SpecialSlotAcc(fcontext, null, -1, accs, 0);\n        collectDocs();\n\n        SimpleOrderedMap<Object> allBuckets = new SimpleOrderedMap<>();\n        allBuckets.add(\"count\", allBucketsAcc.getSpecialCount());\n        allBucketsAcc.setValues(allBuckets, -1); // -1 slotNum is unused for SpecialSlotAcc\n        refineResult.add(\"allBuckets\", allBuckets);\n        return refineResult;\n      }\n    }\n\n    maxSlots = nTerms;\n\n    if (freq.allBuckets) {\n      allBucketsSlot = maxSlots++;\n    }\n\n    createCollectAcc(nDocs, maxSlots);\n\n    if (freq.allBuckets) {\n      allBucketsAcc = new SpecialSlotAcc(fcontext, collectAcc, allBucketsSlot, otherAccs, 0);\n    }\n\n    collectDocs();\n\n    return super.findTopSlots(nTerms, nTerms,\n        slotNum -> { // getBucketValFromSlotNum\n          try {\n            return (Comparable) sf.getType().toObject(sf, lookupOrd(slotNum + startTermIndex));\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        },\n        obj -> valueObjToString(obj)\n    );\n  }\n\n","sourceOld":"  private SimpleOrderedMap<Object> calcFacets() throws IOException {\n    SimpleOrderedMap<Object> refineResult = null;\n    boolean skipThisFacet = (fcontext.flags & SKIP_FACET) != 0;\n\n    if (fcontext.facetInfo != null) {\n      refineResult = refineFacets();\n      // if we've seen this facet bucket, then refining can be done.  If we haven't, we still\n      // only need to continue if we need allBuckets or numBuckets info.\n      if (skipThisFacet || !freq.allBuckets) return refineResult;\n    }\n\n    String prefix = freq.prefix;\n    if (prefix == null || prefix.length() == 0) {\n      prefixRef = null;\n    } else {\n      prefixRef = new BytesRefBuilder();\n      prefixRef.copyChars(prefix);\n    }\n\n    findStartAndEndOrds();\n\n    if (refineResult != null) {\n      if (freq.allBuckets) {\n        createAccs(nDocs, 1);\n        allBucketsAcc = new SpecialSlotAcc(fcontext, null, -1, accs, 0);\n        collectDocs();\n\n        SimpleOrderedMap<Object> allBuckets = new SimpleOrderedMap<>();\n        allBuckets.add(\"count\", allBucketsAcc.getSpecialCount());\n        allBucketsAcc.setValues(allBuckets, -1); // -1 slotNum is unused for SpecialSlotAcc\n        refineResult.add(\"allBuckets\", allBuckets);\n        return refineResult;\n      }\n    }\n\n    maxSlots = nTerms;\n\n    if (freq.allBuckets) {\n      allBucketsSlot = maxSlots++;\n    }\n\n    createCollectAcc(nDocs, maxSlots);\n\n    if (freq.allBuckets) {\n      allBucketsAcc = new SpecialSlotAcc(fcontext, collectAcc, allBucketsSlot, otherAccs, 0);\n    }\n\n    collectDocs();\n\n    return super.findTopSlots(nTerms, nTerms,\n        slotNum -> { // getBucketValFromSlotNum\n          try {\n            return (Comparable) sf.getType().toObject(sf, lookupOrd(slotNum + startTermIndex));\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        },\n        obj -> valueObjToString(obj)\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f9e4bd10604489b5817ee29e35ac96a3148cbec","date":1594345357,"type":3,"author":"Michael Gibney","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByArray#calcFacets().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByArray#calcFacets().mjava","sourceNew":"  private SimpleOrderedMap<Object> calcFacets() throws IOException {\n    SimpleOrderedMap<Object> refineResult = null;\n    boolean skipThisFacet = (fcontext.flags & SKIP_FACET) != 0;\n\n    if (fcontext.facetInfo != null) {\n      refineResult = refineFacets();\n      // if we've seen this facet bucket, then refining can be done.  If we haven't, we still\n      // only need to continue if we need allBuckets or numBuckets info.\n      if (skipThisFacet || !freq.allBuckets) return refineResult;\n    }\n\n    String prefix = freq.prefix;\n    if (prefix == null || prefix.length() == 0) {\n      prefixRef = null;\n    } else {\n      prefixRef = new BytesRefBuilder();\n      prefixRef.copyChars(prefix);\n    }\n\n    findStartAndEndOrds();\n\n    if (refineResult != null) {\n      if (freq.allBuckets) {\n        // count is irrelevant, but hardcoded in collect(...), so intercept/mask normal counts.\n        // Set here to prevent createAccs(...) from creating a 1-slot countAcc that will fail with AIOOBE\n        // NOTE: because collectAcc will be null, it is fine/irrelevant to set a countAcc that doesn't support sweeping\n        countAcc = SlotAcc.DEV_NULL_SLOT_ACC;\n        createAccs(nDocs, 1);\n        assert collectAcc == null;\n        otherAccs = accs; // accs is created above and set on allBucketsAcc; but during collection, setNextReader is called on otherAccs.\n        allBucketsAcc = new SpecialSlotAcc(fcontext, null, -1, accs, 0);\n        collectDocs();\n\n        SimpleOrderedMap<Object> allBuckets = new SimpleOrderedMap<>();\n        allBuckets.add(\"count\", allBucketsAcc.getSpecialCount());\n        allBucketsAcc.setValues(allBuckets, -1); // -1 slotNum is unused for SpecialSlotAcc\n        refineResult.add(\"allBuckets\", allBuckets);\n        return refineResult;\n      }\n    }\n\n    maxSlots = nTerms;\n\n    if (freq.allBuckets) {\n      allBucketsSlot = maxSlots++;\n    }\n\n    createCollectAcc(nDocs, maxSlots);\n\n    if (freq.allBuckets) {\n      allBucketsAcc = new SpecialSlotAcc(fcontext, collectAcc, allBucketsSlot, otherAccs, 0);\n    }\n\n    collectDocs();\n\n    return super.findTopSlots(nTerms, nTerms,\n        slotNum -> { // getBucketValFromSlotNum\n          try {\n            return (Comparable) sf.getType().toObject(sf, lookupOrd(slotNum + startTermIndex));\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        },\n        obj -> valueObjToString(obj)\n    );\n  }\n\n","sourceOld":"  private SimpleOrderedMap<Object> calcFacets() throws IOException {\n    SimpleOrderedMap<Object> refineResult = null;\n    boolean skipThisFacet = (fcontext.flags & SKIP_FACET) != 0;\n\n    if (fcontext.facetInfo != null) {\n      refineResult = refineFacets();\n      // if we've seen this facet bucket, then refining can be done.  If we haven't, we still\n      // only need to continue if we need allBuckets or numBuckets info.\n      if (skipThisFacet || !freq.allBuckets) return refineResult;\n    }\n\n    String prefix = freq.prefix;\n    if (prefix == null || prefix.length() == 0) {\n      prefixRef = null;\n    } else {\n      prefixRef = new BytesRefBuilder();\n      prefixRef.copyChars(prefix);\n    }\n\n    findStartAndEndOrds();\n\n    if (refineResult != null) {\n      if (freq.allBuckets) {\n        // count is irrelevant, but hardcoded in collect(...), so intercept/mask normal counts.\n        // Set here to prevent createAccs(...) from creating a 1-slot countAcc that will fail with AIOOBE\n        countAcc = SlotAcc.DEV_NULL_SLOT_ACC;\n        createAccs(nDocs, 1);\n        otherAccs = accs; // accs is created above and set on allBucketsAcc; but during collection, setNextReader is called on otherAccs.\n        allBucketsAcc = new SpecialSlotAcc(fcontext, null, -1, accs, 0);\n        collectDocs();\n\n        SimpleOrderedMap<Object> allBuckets = new SimpleOrderedMap<>();\n        allBuckets.add(\"count\", allBucketsAcc.getSpecialCount());\n        allBucketsAcc.setValues(allBuckets, -1); // -1 slotNum is unused for SpecialSlotAcc\n        refineResult.add(\"allBuckets\", allBuckets);\n        return refineResult;\n      }\n    }\n\n    maxSlots = nTerms;\n\n    if (freq.allBuckets) {\n      allBucketsSlot = maxSlots++;\n    }\n\n    createCollectAcc(nDocs, maxSlots);\n\n    if (freq.allBuckets) {\n      allBucketsAcc = new SpecialSlotAcc(fcontext, collectAcc, allBucketsSlot, otherAccs, 0);\n    }\n\n    collectDocs();\n\n    return super.findTopSlots(nTerms, nTerms,\n        slotNum -> { // getBucketValFromSlotNum\n          try {\n            return (Comparable) sf.getType().toObject(sf, lookupOrd(slotNum + startTermIndex));\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        },\n        obj -> valueObjToString(obj)\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["11ab475c994c79138885cc8a30b2641d929cdc43"],"2f9e4bd10604489b5817ee29e35ac96a3148cbec":["dd5179c53ace95be1691b13506e7f43ebf92a114"],"84e83c6774414730d58276083becadc66f4e4aca":["10c711bb8c3aac052fb8e0e9d417517c94166d5d"],"bc8f206328a706450934717bec7ccc22ad166fc0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3661d6742eed69ff6cc30ea2538d572624a7cdf8"],"10c711bb8c3aac052fb8e0e9d417517c94166d5d":["8ec805ca8fedc0166461148c7182f1bcbbd18ee1"],"8ec805ca8fedc0166461148c7182f1bcbbd18ee1":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"15b321aed72eecb043f237c490b9afd4e52c25be":["84e83c6774414730d58276083becadc66f4e4aca"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"2c705a0d590cf911e7c942df49563ca2ea176e22":["15b321aed72eecb043f237c490b9afd4e52c25be"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","84e83c6774414730d58276083becadc66f4e4aca"],"11ab475c994c79138885cc8a30b2641d929cdc43":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3661d6742eed69ff6cc30ea2538d572624a7cdf8"],"3661d6742eed69ff6cc30ea2538d572624a7cdf8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dd5179c53ace95be1691b13506e7f43ebf92a114":["2c705a0d590cf911e7c942df49563ca2ea176e22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2f9e4bd10604489b5817ee29e35ac96a3148cbec"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"2f9e4bd10604489b5817ee29e35ac96a3148cbec":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"84e83c6774414730d58276083becadc66f4e4aca":["15b321aed72eecb043f237c490b9afd4e52c25be","e9017cf144952056066919f1ebc7897ff9bd71b1"],"bc8f206328a706450934717bec7ccc22ad166fc0":[],"10c711bb8c3aac052fb8e0e9d417517c94166d5d":["84e83c6774414730d58276083becadc66f4e4aca"],"8ec805ca8fedc0166461148c7182f1bcbbd18ee1":["10c711bb8c3aac052fb8e0e9d417517c94166d5d"],"15b321aed72eecb043f237c490b9afd4e52c25be":["2c705a0d590cf911e7c942df49563ca2ea176e22"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"2c705a0d590cf911e7c942df49563ca2ea176e22":["dd5179c53ace95be1691b13506e7f43ebf92a114"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"11ab475c994c79138885cc8a30b2641d929cdc43":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bc8f206328a706450934717bec7ccc22ad166fc0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","3661d6742eed69ff6cc30ea2538d572624a7cdf8"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["8ec805ca8fedc0166461148c7182f1bcbbd18ee1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","11ab475c994c79138885cc8a30b2641d929cdc43"],"3661d6742eed69ff6cc30ea2538d572624a7cdf8":["bc8f206328a706450934717bec7ccc22ad166fc0","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"dd5179c53ace95be1691b13506e7f43ebf92a114":["2f9e4bd10604489b5817ee29e35ac96a3148cbec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["bc8f206328a706450934717bec7ccc22ad166fc0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}