{"path":"src/java/org/apache/lucene/store/FSDirectory#init(File,boolean).mjava","commits":[{"id":"e971ba25509e21a130fef61f0687be0446ca27a0","date":1095369217,"type":1,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#init(File,boolean).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#FSDirectory(File,boolean).mjava","sourceNew":"  private void init(File path, boolean create) throws IOException {\n    directory = path;\n\n    if (LOCK_DIR == null) {\n      lockDir = directory;\n    }\n    else {\n      lockDir = new File(LOCK_DIR);\n    }\n    if (create) {\n      create();\n    }\n\n    if (!directory.isDirectory())\n      throw new IOException(path + \" not a directory\");\n  }\n\n","sourceOld":"  private FSDirectory(File path, boolean create) throws IOException {\n    directory = path;\n\n    if (LOCK_DIR == null) {\n      lockDir = directory;\n    }\n    else {\n      lockDir = new File(LOCK_DIR);\n    }\n    if (create) {\n      create();\n    }\n\n    if (!directory.isDirectory())\n      throw new IOException(path + \" not a directory\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b5e51678938b4f973cb3edb735070d4e6e939b5","date":1123549081,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#init(File,boolean).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#init(File,boolean).mjava","sourceNew":"  private void init(File path, boolean create) throws IOException {\n    directory = path;\n\n    if (LOCK_DIR == null) {\n      lockDir = directory;\n    }\n    else {\n      lockDir = new File(LOCK_DIR);\n    }\n    // Ensure that lockDir exists and is a directory.\n    if (!lockDir.exists()) {\n      if (!lockDir.mkdirs())\n        throw new IOException(\"Cannot create directory: \" + lockDir);\n    } else if (!lockDir.isDirectory()) {\n      throw new IOException(\"Found regular file where directory expected: \" + lockDir);\n    }\n    if (create) {\n      create();\n    }\n\n    if (!directory.isDirectory())\n      throw new IOException(path + \" not a directory\");\n  }\n\n","sourceOld":"  private void init(File path, boolean create) throws IOException {\n    directory = path;\n\n    if (LOCK_DIR == null) {\n      lockDir = directory;\n    }\n    else {\n      lockDir = new File(LOCK_DIR);\n    }\n    if (create) {\n      create();\n    }\n\n    if (!directory.isDirectory())\n      throw new IOException(path + \" not a directory\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d61f4c23cc2cce8021776edaf50078c935f8d4aa","date":1147464779,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#init(File,boolean).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#init(File,boolean).mjava","sourceNew":"  private void init(File path, boolean create) throws IOException {\n    directory = path;\n\n    if (LOCK_DIR == null) {\n      lockDir = directory;\n    }\n    else {\n      lockDir = new File(LOCK_DIR);\n    }\n    // Ensure that lockDir exists and is a directory.\n    if (!lockDir.exists()) {\n      if (!lockDir.mkdirs())\n        throw new IOException(\"Cannot create directory: \" + lockDir.getAbsolutePath());\n    } else if (!lockDir.isDirectory()) {\n      throw new IOException(\"Found regular file where directory expected: \" + \n          lockDir.getAbsolutePath());\n    }\n    if (create) {\n      create();\n    }\n\n    if (!directory.isDirectory())\n      throw new IOException(path + \" not a directory\");\n  }\n\n","sourceOld":"  private void init(File path, boolean create) throws IOException {\n    directory = path;\n\n    if (LOCK_DIR == null) {\n      lockDir = directory;\n    }\n    else {\n      lockDir = new File(LOCK_DIR);\n    }\n    // Ensure that lockDir exists and is a directory.\n    if (!lockDir.exists()) {\n      if (!lockDir.mkdirs())\n        throw new IOException(\"Cannot create directory: \" + lockDir);\n    } else if (!lockDir.isDirectory()) {\n      throw new IOException(\"Found regular file where directory expected: \" + lockDir);\n    }\n    if (create) {\n      create();\n    }\n\n    if (!directory.isDirectory())\n      throw new IOException(path + \" not a directory\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c6bd70b660528bcf8dd3216ea1f7565ac220a20","date":1156813990,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#init(File,boolean).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#init(File,boolean).mjava","sourceNew":"  private void init(File path, boolean create) throws IOException {\n    directory = path;\n\n    if (create) {\n      create();\n    }\n\n    if (!directory.isDirectory())\n      throw new IOException(path + \" not a directory\");\n  }\n\n","sourceOld":"  private void init(File path, boolean create) throws IOException {\n    directory = path;\n\n    if (LOCK_DIR == null) {\n      lockDir = directory;\n    }\n    else {\n      lockDir = new File(LOCK_DIR);\n    }\n    // Ensure that lockDir exists and is a directory.\n    if (!lockDir.exists()) {\n      if (!lockDir.mkdirs())\n        throw new IOException(\"Cannot create directory: \" + lockDir.getAbsolutePath());\n    } else if (!lockDir.isDirectory()) {\n      throw new IOException(\"Found regular file where directory expected: \" + \n          lockDir.getAbsolutePath());\n    }\n    if (create) {\n      create();\n    }\n\n    if (!directory.isDirectory())\n      throw new IOException(path + \" not a directory\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"284c1d3c8b19931bf6f312fae7470487f5d9e580","date":1163805527,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#init(File,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#init(File,boolean).mjava","sourceNew":"  private void init(File path, boolean create, boolean doRemoveOldFiles) throws IOException {\n    directory = path;\n\n    if (create) {\n      create(doRemoveOldFiles);\n    }\n\n    if (!directory.isDirectory())\n      throw new IOException(path + \" not a directory\");\n  }\n\n","sourceOld":"  private void init(File path, boolean create) throws IOException {\n    directory = path;\n\n    if (create) {\n      create();\n    }\n\n    if (!directory.isDirectory())\n      throw new IOException(path + \" not a directory\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5c6bd70b660528bcf8dd3216ea1f7565ac220a20":["d61f4c23cc2cce8021776edaf50078c935f8d4aa"],"e971ba25509e21a130fef61f0687be0446ca27a0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["5c6bd70b660528bcf8dd3216ea1f7565ac220a20"],"9b5e51678938b4f973cb3edb735070d4e6e939b5":["e971ba25509e21a130fef61f0687be0446ca27a0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d61f4c23cc2cce8021776edaf50078c935f8d4aa":["9b5e51678938b4f973cb3edb735070d4e6e939b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["284c1d3c8b19931bf6f312fae7470487f5d9e580"]},"commit2Childs":{"5c6bd70b660528bcf8dd3216ea1f7565ac220a20":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"e971ba25509e21a130fef61f0687be0446ca27a0":["9b5e51678938b4f973cb3edb735070d4e6e939b5"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9b5e51678938b4f973cb3edb735070d4e6e939b5":["d61f4c23cc2cce8021776edaf50078c935f8d4aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e971ba25509e21a130fef61f0687be0446ca27a0"],"d61f4c23cc2cce8021776edaf50078c935f8d4aa":["5c6bd70b660528bcf8dd3216ea1f7565ac220a20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}