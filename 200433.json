{"path":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ReverseOrdFieldSource#getValues(Map,AtomicReaderContext).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ReverseOrdFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ReverseOrdFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  // TODO: this is trappy? perhaps this query instead should make you pass a slow reader yourself?\n  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n    final AtomicReader r = topReader instanceof CompositeReader \n        ? new SlowCompositeReaderWrapper((CompositeReader)topReader) \n        : (AtomicReader) topReader;\n    final int off = readerContext.docBase;\n\n    final FieldCache.DocTermsIndex sindex = FieldCache.DEFAULT.getTermsIndex(r, field);\n    final int end = sindex.numOrd();\n\n    return new IntDocValues(this) {\n     @Override\n      public int intVal(int doc) {\n        return (end - sindex.getOrd(doc+off));\n      }\n    };\n  }\n\n","sourceOld":"  // TODO: this is trappy? perhaps this query instead should make you pass a slow reader yourself?\n  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n    final AtomicReader r = topReader instanceof CompositeReader \n        ? new SlowCompositeReaderWrapper((CompositeReader)topReader) \n        : (AtomicReader) topReader;\n    final int off = readerContext.docBase;\n\n    final FieldCache.DocTermsIndex sindex = FieldCache.DEFAULT.getTermsIndex(r, field);\n    final int end = sindex.numOrd();\n\n    return new IntDocValues(this) {\n     @Override\n      public int intVal(int doc) {\n        return (end - sindex.getOrd(doc+off));\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e2893fd5349134af382d33ccc3d84840394c6c1","date":1353682567,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ReverseOrdFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ReverseOrdFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  // TODO: this is trappy? perhaps this query instead should make you pass a slow reader yourself?\n  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n    final AtomicReader r = topReader instanceof CompositeReader \n        ? new SlowCompositeReaderWrapper((CompositeReader)topReader) \n        : (AtomicReader) topReader;\n    final int off = readerContext.docBase;\n\n    final FieldCache.DocTermsIndex sindex = FieldCache.DEFAULT.getTermsIndex(r, field);\n    final int end = sindex.numOrd();\n\n    return new IntDocValues(this) {\n     @Override\n      public int intVal(int doc) {\n        return (end - sindex.getOrd(doc+off) - 1);\n      }\n    };\n  }\n\n","sourceOld":"  // TODO: this is trappy? perhaps this query instead should make you pass a slow reader yourself?\n  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n    final AtomicReader r = topReader instanceof CompositeReader \n        ? new SlowCompositeReaderWrapper((CompositeReader)topReader) \n        : (AtomicReader) topReader;\n    final int off = readerContext.docBase;\n\n    final FieldCache.DocTermsIndex sindex = FieldCache.DEFAULT.getTermsIndex(r, field);\n    final int end = sindex.numOrd();\n\n    return new IntDocValues(this) {\n     @Override\n      public int intVal(int doc) {\n        return (end - sindex.getOrd(doc+off));\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9d7e5f3aa5935964617824d1f9b2599ddb334464","date":1353762831,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ReverseOrdFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ReverseOrdFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  // TODO: this is trappy? perhaps this query instead should make you pass a slow reader yourself?\n  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n    final AtomicReader r = topReader instanceof CompositeReader \n        ? new SlowCompositeReaderWrapper((CompositeReader)topReader) \n        : (AtomicReader) topReader;\n    final int off = readerContext.docBase;\n\n    final SortedDocValues sindex = FieldCache.DEFAULT.getTermsIndex(r, field);\n    final int end = sindex.getValueCount();\n\n    return new IntDocValues(this) {\n     @Override\n      public int intVal(int doc) {\n        return (end - sindex.getOrd(doc+off) - 1);\n      }\n    };\n  }\n\n","sourceOld":"  // TODO: this is trappy? perhaps this query instead should make you pass a slow reader yourself?\n  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n    final AtomicReader r = topReader instanceof CompositeReader \n        ? new SlowCompositeReaderWrapper((CompositeReader)topReader) \n        : (AtomicReader) topReader;\n    final int off = readerContext.docBase;\n\n    final FieldCache.DocTermsIndex sindex = FieldCache.DEFAULT.getTermsIndex(r, field);\n    final int end = sindex.numOrd();\n\n    return new IntDocValues(this) {\n     @Override\n      public int intVal(int doc) {\n        return (end - sindex.getOrd(doc+off) - 1);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ReverseOrdFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ReverseOrdFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  // TODO: this is trappy? perhaps this query instead should make you pass a slow reader yourself?\n  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n    final AtomicReader r = topReader instanceof CompositeReader \n        ? new SlowCompositeReaderWrapper((CompositeReader)topReader) \n        : (AtomicReader) topReader;\n    final int off = readerContext.docBase;\n\n    final SortedDocValues sindex = FieldCache.DEFAULT.getTermsIndex(r, field);\n    final int end = sindex.getValueCount();\n\n    return new IntDocValues(this) {\n     @Override\n      public int intVal(int doc) {\n        return (end - sindex.getOrd(doc+off) - 1);\n      }\n    };\n  }\n\n","sourceOld":"  // TODO: this is trappy? perhaps this query instead should make you pass a slow reader yourself?\n  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n    final AtomicReader r = topReader instanceof CompositeReader \n        ? new SlowCompositeReaderWrapper((CompositeReader)topReader) \n        : (AtomicReader) topReader;\n    final int off = readerContext.docBase;\n\n    final FieldCache.DocTermsIndex sindex = FieldCache.DEFAULT.getTermsIndex(r, field);\n    final int end = sindex.numOrd();\n\n    return new IntDocValues(this) {\n     @Override\n      public int intVal(int doc) {\n        return (end - sindex.getOrd(doc+off));\n      }\n    };\n  }\n\n","bugFix":["bf86dfc469b73b567b31e1c3562f075096bd005b","be20f9fed1d3edcb1c84abcc39df87a90fab22df","61e20f33ce8ff701576366fdb03955eded5f209b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392","date":1377503666,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ReverseOrdFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ReverseOrdFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  // TODO: this is trappy? perhaps this query instead should make you pass a slow reader yourself?\n  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n    final AtomicReader r = SlowCompositeReaderWrapper.wrap(topReader);\n    final int off = readerContext.docBase;\n\n    final SortedDocValues sindex = FieldCache.DEFAULT.getTermsIndex(r, field);\n    final int end = sindex.getValueCount();\n\n    return new IntDocValues(this) {\n     @Override\n      public int intVal(int doc) {\n        return (end - sindex.getOrd(doc+off) - 1);\n      }\n    };\n  }\n\n","sourceOld":"  // TODO: this is trappy? perhaps this query instead should make you pass a slow reader yourself?\n  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n    final AtomicReader r = topReader instanceof CompositeReader \n        ? new SlowCompositeReaderWrapper((CompositeReader)topReader) \n        : (AtomicReader) topReader;\n    final int off = readerContext.docBase;\n\n    final SortedDocValues sindex = FieldCache.DEFAULT.getTermsIndex(r, field);\n    final int end = sindex.getValueCount();\n\n    return new IntDocValues(this) {\n     @Override\n      public int intVal(int doc) {\n        return (end - sindex.getOrd(doc+off) - 1);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ReverseOrdFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ReverseOrdFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  // TODO: this is trappy? perhaps this query instead should make you pass a slow reader yourself?\n  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n    final AtomicReader r = SlowCompositeReaderWrapper.wrap(topReader);\n    final int off = readerContext.docBase;\n\n    final SortedDocValues sindex = FieldCache.DEFAULT.getTermsIndex(r, field);\n    final int end = sindex.getValueCount();\n\n    return new IntDocValues(this) {\n     @Override\n      public int intVal(int doc) {\n        return (end - sindex.getOrd(doc+off) - 1);\n      }\n    };\n  }\n\n","sourceOld":"  // TODO: this is trappy? perhaps this query instead should make you pass a slow reader yourself?\n  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n    final AtomicReader r = topReader instanceof CompositeReader \n        ? new SlowCompositeReaderWrapper((CompositeReader)topReader) \n        : (AtomicReader) topReader;\n    final int off = readerContext.docBase;\n\n    final SortedDocValues sindex = FieldCache.DEFAULT.getTermsIndex(r, field);\n    final int end = sindex.getValueCount();\n\n    return new IntDocValues(this) {\n     @Override\n      public int intVal(int doc) {\n        return (end - sindex.getOrd(doc+off) - 1);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ReverseOrdFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ReverseOrdFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  // TODO: this is trappy? perhaps this query instead should make you pass a slow reader yourself?\n  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n    final AtomicReader r = SlowCompositeReaderWrapper.wrap(topReader);\n    final int off = readerContext.docBase;\n\n    final SortedDocValues sindex = DocValues.getSorted(r, field);\n    final int end = sindex.getValueCount();\n\n    return new IntDocValues(this) {\n     @Override\n      public int intVal(int doc) {\n        return (end - sindex.getOrd(doc+off) - 1);\n      }\n    };\n  }\n\n","sourceOld":"  // TODO: this is trappy? perhaps this query instead should make you pass a slow reader yourself?\n  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n    final AtomicReader r = SlowCompositeReaderWrapper.wrap(topReader);\n    final int off = readerContext.docBase;\n\n    final SortedDocValues sindex = FieldCache.DEFAULT.getTermsIndex(r, field);\n    final int end = sindex.getValueCount();\n\n    return new IntDocValues(this) {\n     @Override\n      public int intVal(int doc) {\n        return (end - sindex.getOrd(doc+off) - 1);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9274621789ce990dbfef455dabdf026bb3184821","date":1400046684,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/ReverseOrdFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ReverseOrdFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final AtomicReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      // reuse ordinalmap\n      r = ((SolrIndexSearcher)o).getAtomicReader();\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    // if its e.g. tokenized/multivalued, emulate old behavior of single-valued fc\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    final int end = sindex.getValueCount();\n\n    return new IntDocValues(this) {\n     @Override\n      public int intVal(int doc) {\n        return (end - sindex.getOrd(doc+off) - 1);\n      }\n    };\n  }\n\n","sourceOld":"  // TODO: this is trappy? perhaps this query instead should make you pass a slow reader yourself?\n  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n    final AtomicReader r = SlowCompositeReaderWrapper.wrap(topReader);\n    final int off = readerContext.docBase;\n\n    final SortedDocValues sindex = DocValues.getSorted(r, field);\n    final int end = sindex.getValueCount();\n\n    return new IntDocValues(this) {\n     @Override\n      public int intVal(int doc) {\n        return (end - sindex.getOrd(doc+off) - 1);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ReverseOrdFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":null,"sourceOld":"  // TODO: this is trappy? perhaps this query instead should make you pass a slow reader yourself?\n  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n    final AtomicReader r = SlowCompositeReaderWrapper.wrap(topReader);\n    final int off = readerContext.docBase;\n\n    final SortedDocValues sindex = FieldCache.DEFAULT.getTermsIndex(r, field);\n    final int end = sindex.getValueCount();\n\n    return new IntDocValues(this) {\n     @Override\n      public int intVal(int doc) {\n        return (end - sindex.getOrd(doc+off) - 1);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ReverseOrdFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":null,"sourceOld":"  // TODO: this is trappy? perhaps this query instead should make you pass a slow reader yourself?\n  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n    final AtomicReader r = SlowCompositeReaderWrapper.wrap(topReader);\n    final int off = readerContext.docBase;\n\n    final SortedDocValues sindex = FieldCache.DEFAULT.getTermsIndex(r, field);\n    final int end = sindex.getValueCount();\n\n    return new IntDocValues(this) {\n     @Override\n      public int intVal(int doc) {\n        return (end - sindex.getOrd(doc+off) - 1);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9274621789ce990dbfef455dabdf026bb3184821":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["b89678825b68eccaf09e6ab71675fc0b0af1e099","9d7e5f3aa5935964617824d1f9b2599ddb334464"],"6e2893fd5349134af382d33ccc3d84840394c6c1":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392","9274621789ce990dbfef455dabdf026bb3184821"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["d4d69c535930b5cce125cff868d40f6373dc27d4","df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"9d7e5f3aa5935964617824d1f9b2599ddb334464":["6e2893fd5349134af382d33ccc3d84840394c6c1"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392"],"56572ec06f1407c066d6b7399413178b33176cd8":["df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392","93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d4d69c535930b5cce125cff868d40f6373dc27d4","6e2893fd5349134af382d33ccc3d84840394c6c1"],"9274621789ce990dbfef455dabdf026bb3184821":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392"],"6e2893fd5349134af382d33ccc3d84840394c6c1":["9d7e5f3aa5935964617824d1f9b2599ddb334464"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392":["93dd449115a9247533e44bab47e8429e5dccbc6d","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["9274621789ce990dbfef455dabdf026bb3184821"],"9d7e5f3aa5935964617824d1f9b2599ddb334464":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}