{"path":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#register(SolrInfoBean,String,Metric,boolean,String,String...).mjava","commits":[{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#register(SolrInfoBean,String,Metric,boolean,String,String...).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#register(String,Metric,boolean,String,String...).mjava","sourceNew":"  /**\n   * Register an instance of {@link Metric}.\n   * @param registry registry name\n   * @param metric metric instance\n   * @param force if true then an already existing metric with the same name will be replaced.\n   *                     When false and a metric with the same name already exists an exception\n   *                     will be thrown.\n   * @param metricName metric name, either final name or a fully-qualified name\n   *                   using dotted notation\n   * @param metricPath (optional) additional top-most metric name path elements\n   */\n  public void register(SolrInfoBean info, String registry, Metric metric, boolean force, String metricName, String... metricPath) {\n    MetricRegistry metricRegistry = registry(registry);\n    String fullName = mkName(metricName, metricPath);\n    if (info != null) {\n      info.registerMetricName(fullName);\n    }\n    synchronized (metricRegistry) {\n      if (force && metricRegistry.getMetrics().containsKey(fullName)) {\n        metricRegistry.remove(fullName);\n      }\n      metricRegistry.register(fullName, metric);\n    }\n  }\n\n","sourceOld":"  /**\n   * Register an instance of {@link Metric}.\n   * @param registry registry name\n   * @param metric metric instance\n   * @param force if true then an already existing metric with the same name will be replaced.\n   *                     When false and a metric with the same name already exists an exception\n   *                     will be thrown.\n   * @param metricName metric name, either final name or a fully-qualified name\n   *                   using dotted notation\n   * @param metricPath (optional) additional top-most metric name path elements\n   */\n  public void register(String registry, Metric metric, boolean force, String metricName, String... metricPath) {\n    MetricRegistry metricRegistry = registry(registry);\n    String fullName = mkName(metricName, metricPath);\n    synchronized (metricRegistry) {\n      if (force && metricRegistry.getMetrics().containsKey(fullName)) {\n        metricRegistry.remove(fullName);\n      }\n      metricRegistry.register(fullName, metric);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#register(SolrInfoBean,String,Metric,boolean,String,String...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Register an instance of {@link Metric}.\n   * @param registry registry name\n   * @param metric metric instance\n   * @param force if true then an already existing metric with the same name will be replaced.\n   *                     When false and a metric with the same name already exists an exception\n   *                     will be thrown.\n   * @param metricName metric name, either final name or a fully-qualified name\n   *                   using dotted notation\n   * @param metricPath (optional) additional top-most metric name path elements\n   */\n  public void register(SolrInfoBean info, String registry, Metric metric, boolean force, String metricName, String... metricPath) {\n    MetricRegistry metricRegistry = registry(registry);\n    String fullName = mkName(metricName, metricPath);\n    if (info != null) {\n      info.registerMetricName(fullName);\n    }\n    synchronized (metricRegistry) {\n      if (force && metricRegistry.getMetrics().containsKey(fullName)) {\n        metricRegistry.remove(fullName);\n      }\n      metricRegistry.register(fullName, metric);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfc52860e6d13d034226a760813c59d984c6817a","date":1522229027,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#registerMetric(SolrInfoBean,String,Metric,boolean,String,String...).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#register(SolrInfoBean,String,Metric,boolean,String,String...).mjava","sourceNew":"  /**\n   * Register an instance of {@link Metric}.\n   * @param registry registry name\n   * @param metric metric instance\n   * @param force if true then an already existing metric with the same name will be replaced.\n   *                     When false and a metric with the same name already exists an exception\n   *                     will be thrown.\n   * @param metricName metric name, either final name or a fully-qualified name\n   *                   using dotted notation\n   * @param metricPath (optional) additional top-most metric name path elements\n   */\n  public void registerMetric(SolrInfoBean info, String registry, Metric metric, boolean force, String metricName, String... metricPath) {\n    MetricRegistry metricRegistry = registry(registry);\n    String fullName = mkName(metricName, metricPath);\n    if (info != null) {\n      info.registerMetricName(fullName);\n    }\n    synchronized (metricRegistry) {\n      if (force && metricRegistry.getMetrics().containsKey(fullName)) {\n        metricRegistry.remove(fullName);\n      }\n      metricRegistry.register(fullName, metric);\n    }\n  }\n\n","sourceOld":"  /**\n   * Register an instance of {@link Metric}.\n   * @param registry registry name\n   * @param metric metric instance\n   * @param force if true then an already existing metric with the same name will be replaced.\n   *                     When false and a metric with the same name already exists an exception\n   *                     will be thrown.\n   * @param metricName metric name, either final name or a fully-qualified name\n   *                   using dotted notation\n   * @param metricPath (optional) additional top-most metric name path elements\n   */\n  public void register(SolrInfoBean info, String registry, Metric metric, boolean force, String metricName, String... metricPath) {\n    MetricRegistry metricRegistry = registry(registry);\n    String fullName = mkName(metricName, metricPath);\n    if (info != null) {\n      info.registerMetricName(fullName);\n    }\n    synchronized (metricRegistry) {\n      if (force && metricRegistry.getMetrics().containsKey(fullName)) {\n        metricRegistry.remove(fullName);\n      }\n      metricRegistry.register(fullName, metric);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43564cbb30b064675027cfb569564e8531096e97","date":1522334265,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#registerMetric(SolrInfoBean,String,Metric,boolean,String,String...).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#register(SolrInfoBean,String,Metric,boolean,String,String...).mjava","sourceNew":"  /**\n   * Register an instance of {@link Metric}.\n   * @param registry registry name\n   * @param metric metric instance\n   * @param force if true then an already existing metric with the same name will be replaced.\n   *                     When false and a metric with the same name already exists an exception\n   *                     will be thrown.\n   * @param metricName metric name, either final name or a fully-qualified name\n   *                   using dotted notation\n   * @param metricPath (optional) additional top-most metric name path elements\n   */\n  public void registerMetric(SolrInfoBean info, String registry, Metric metric, boolean force, String metricName, String... metricPath) {\n    MetricRegistry metricRegistry = registry(registry);\n    String fullName = mkName(metricName, metricPath);\n    if (info != null) {\n      info.registerMetricName(fullName);\n    }\n    synchronized (metricRegistry) {\n      if (force && metricRegistry.getMetrics().containsKey(fullName)) {\n        metricRegistry.remove(fullName);\n      }\n      metricRegistry.register(fullName, metric);\n    }\n  }\n\n","sourceOld":"  /**\n   * Register an instance of {@link Metric}.\n   * @param registry registry name\n   * @param metric metric instance\n   * @param force if true then an already existing metric with the same name will be replaced.\n   *                     When false and a metric with the same name already exists an exception\n   *                     will be thrown.\n   * @param metricName metric name, either final name or a fully-qualified name\n   *                   using dotted notation\n   * @param metricPath (optional) additional top-most metric name path elements\n   */\n  public void register(SolrInfoBean info, String registry, Metric metric, boolean force, String metricName, String... metricPath) {\n    MetricRegistry metricRegistry = registry(registry);\n    String fullName = mkName(metricName, metricPath);\n    if (info != null) {\n      info.registerMetricName(fullName);\n    }\n    synchronized (metricRegistry) {\n      if (force && metricRegistry.getMetrics().containsKey(fullName)) {\n        metricRegistry.remove(fullName);\n      }\n      metricRegistry.register(fullName, metric);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bfc52860e6d13d034226a760813c59d984c6817a":["816521ebaad5add9cb96bb88c577394e2938c40b"],"43564cbb30b064675027cfb569564e8531096e97":["816521ebaad5add9cb96bb88c577394e2938c40b","bfc52860e6d13d034226a760813c59d984c6817a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"816521ebaad5add9cb96bb88c577394e2938c40b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["43564cbb30b064675027cfb569564e8531096e97"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"bfc52860e6d13d034226a760813c59d984c6817a":["43564cbb30b064675027cfb569564e8531096e97"],"43564cbb30b064675027cfb569564e8531096e97":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"816521ebaad5add9cb96bb88c577394e2938c40b":["bfc52860e6d13d034226a760813c59d984c6817a","43564cbb30b064675027cfb569564e8531096e97"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}