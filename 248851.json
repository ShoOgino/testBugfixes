{"path":"src/java/org/apache/lucene/store/FSDirectory#init(File,boolean,LockFactory,boolean).mjava","commits":[{"id":"284c1d3c8b19931bf6f312fae7470487f5d9e580","date":1163805527,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#init(File,boolean,LockFactory,boolean).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#init(File,boolean,LockFactory).mjava","sourceNew":"  private void init(File path, boolean create, LockFactory lockFactory, boolean doRemoveOldFiles) throws IOException {\n\n    // Set up lockFactory with cascaded defaults: if an instance was passed in,\n    // use that; else if locks are disabled, use NoLockFactory; else if the\n    // system property org.apache.lucene.store.FSDirectoryLockFactoryClass is set,\n    // instantiate that; else, use SimpleFSLockFactory:\n\n    if (lockFactory == null) {\n\n      if (disableLocks) {\n        // Locks are disabled:\n        lockFactory = NoLockFactory.getNoLockFactory();\n      } else {\n        String lockClassName = System.getProperty(\"org.apache.lucene.store.FSDirectoryLockFactoryClass\");\n\n        if (lockClassName != null) {\n          Class c;\n\n          try {\n            c = Class.forName(lockClassName);\n          } catch (ClassNotFoundException e) {\n            throw new IOException(\"unable to find LockClass \" + lockClassName);\n          }\n\n          try {\n            lockFactory = (LockFactory) c.newInstance();          \n          } catch (IllegalAccessException e) {\n            throw new IOException(\"IllegalAccessException when instantiating LockClass \" + lockClassName);\n          } catch (InstantiationException e) {\n            throw new IOException(\"InstantiationException when instantiating LockClass \" + lockClassName);\n          } catch (ClassCastException e) {\n            throw new IOException(\"unable to cast LockClass \" + lockClassName + \" instance to a LockFactory\");\n          }\n        } else {\n          // Our default lock is SimpleFSLockFactory:\n          File lockDir;\n          if (LOCK_DIR == null) {\n            lockDir = directory;\n          } else {\n            lockDir = new File(LOCK_DIR);\n          }\n          lockFactory = new SimpleFSLockFactory(lockDir);\n        }\n      }\n    }\n\n    // Must initialize directory here because setLockFactory uses it\n    // (when the LockFactory calls getLockID).  But we want to create\n    // the lockFactory before calling init() because init() needs to\n    // use the lockFactory to clear old locks.  So this breaks\n    // chicken/egg:\n    directory = path;\n\n    setLockFactory(lockFactory);\n\n    init(path, create, doRemoveOldFiles);\n  }\n\n","sourceOld":"  private void init(File path, boolean create, LockFactory lockFactory) throws IOException {\n\n    // Set up lockFactory with cascaded defaults: if an instance was passed in,\n    // use that; else if locks are disabled, use NoLockFactory; else if the\n    // system property org.apache.lucene.store.FSDirectoryLockFactoryClass is set,\n    // instantiate that; else, use SimpleFSLockFactory:\n\n    if (lockFactory == null) {\n\n      if (disableLocks) {\n        // Locks are disabled:\n        lockFactory = NoLockFactory.getNoLockFactory();\n      } else {\n        String lockClassName = System.getProperty(\"org.apache.lucene.store.FSDirectoryLockFactoryClass\");\n\n        if (lockClassName != null) {\n          Class c;\n\n          try {\n            c = Class.forName(lockClassName);\n          } catch (ClassNotFoundException e) {\n            throw new IOException(\"unable to find LockClass \" + lockClassName);\n          }\n\n          try {\n            lockFactory = (LockFactory) c.newInstance();          \n          } catch (IllegalAccessException e) {\n            throw new IOException(\"IllegalAccessException when instantiating LockClass \" + lockClassName);\n          } catch (InstantiationException e) {\n            throw new IOException(\"InstantiationException when instantiating LockClass \" + lockClassName);\n          } catch (ClassCastException e) {\n            throw new IOException(\"unable to cast LockClass \" + lockClassName + \" instance to a LockFactory\");\n          }\n        } else {\n          // Our default lock is SimpleFSLockFactory:\n          File lockDir;\n          if (LOCK_DIR == null) {\n            lockDir = directory;\n          } else {\n            lockDir = new File(LOCK_DIR);\n          }\n          lockFactory = new SimpleFSLockFactory(lockDir);\n        }\n      }\n    }\n\n    // Must initialize directory here because setLockFactory uses it\n    // (when the LockFactory calls getLockID).  But we want to create\n    // the lockFactory before calling init() because init() needs to\n    // use the lockFactory to clear old locks.  So this breaks\n    // chicken/egg:\n    directory = path;\n\n    setLockFactory(lockFactory);\n\n    init(path, create);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93a838d8ba57e85e9db126e862958dafc7da4d5b","date":1168639785,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#init(File,boolean,LockFactory,boolean).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#init(File,boolean,LockFactory,boolean).mjava","sourceNew":"  private void init(File path, boolean create, LockFactory lockFactory, boolean doRemoveOldFiles) throws IOException {\n\n    // Set up lockFactory with cascaded defaults: if an instance was passed in,\n    // use that; else if locks are disabled, use NoLockFactory; else if the\n    // system property org.apache.lucene.store.FSDirectoryLockFactoryClass is set,\n    // instantiate that; else, use SimpleFSLockFactory:\n\n    boolean doClearLockID = false;\n\n    if (lockFactory == null) {\n\n      if (disableLocks) {\n        // Locks are disabled:\n        lockFactory = NoLockFactory.getNoLockFactory();\n      } else {\n        String lockClassName = System.getProperty(\"org.apache.lucene.store.FSDirectoryLockFactoryClass\");\n\n        if (lockClassName != null && !lockClassName.equals(\"\")) {\n          Class c;\n\n          try {\n            c = Class.forName(lockClassName);\n          } catch (ClassNotFoundException e) {\n            throw new IOException(\"unable to find LockClass \" + lockClassName);\n          }\n\n          try {\n            lockFactory = (LockFactory) c.newInstance();          \n          } catch (IllegalAccessException e) {\n            throw new IOException(\"IllegalAccessException when instantiating LockClass \" + lockClassName);\n          } catch (InstantiationException e) {\n            throw new IOException(\"InstantiationException when instantiating LockClass \" + lockClassName);\n          } catch (ClassCastException e) {\n            throw new IOException(\"unable to cast LockClass \" + lockClassName + \" instance to a LockFactory\");\n          }\n        } else {\n          // Our default lock is SimpleFSLockFactory;\n          // default lockDir is our index directory:\n          lockFactory = new SimpleFSLockFactory(path);\n          doClearLockID = true;\n        }\n      }\n    }\n\n    // Must initialize directory here because setLockFactory uses it\n    // (when the LockFactory calls getLockID).  But we want to create\n    // the lockFactory before calling init() because init() needs to\n    // use the lockFactory to clear old locks.  So this breaks\n    // chicken/egg:\n    directory = path;\n\n    setLockFactory(lockFactory);\n    if (doClearLockID) {\n      // Clear the prefix because write.lock will be\n      // stored in our directory:\n      lockFactory.setLockPrefix(null);\n    }\n\n    init(path, create, doRemoveOldFiles);\n  }\n\n","sourceOld":"  private void init(File path, boolean create, LockFactory lockFactory, boolean doRemoveOldFiles) throws IOException {\n\n    // Set up lockFactory with cascaded defaults: if an instance was passed in,\n    // use that; else if locks are disabled, use NoLockFactory; else if the\n    // system property org.apache.lucene.store.FSDirectoryLockFactoryClass is set,\n    // instantiate that; else, use SimpleFSLockFactory:\n\n    if (lockFactory == null) {\n\n      if (disableLocks) {\n        // Locks are disabled:\n        lockFactory = NoLockFactory.getNoLockFactory();\n      } else {\n        String lockClassName = System.getProperty(\"org.apache.lucene.store.FSDirectoryLockFactoryClass\");\n\n        if (lockClassName != null) {\n          Class c;\n\n          try {\n            c = Class.forName(lockClassName);\n          } catch (ClassNotFoundException e) {\n            throw new IOException(\"unable to find LockClass \" + lockClassName);\n          }\n\n          try {\n            lockFactory = (LockFactory) c.newInstance();          \n          } catch (IllegalAccessException e) {\n            throw new IOException(\"IllegalAccessException when instantiating LockClass \" + lockClassName);\n          } catch (InstantiationException e) {\n            throw new IOException(\"InstantiationException when instantiating LockClass \" + lockClassName);\n          } catch (ClassCastException e) {\n            throw new IOException(\"unable to cast LockClass \" + lockClassName + \" instance to a LockFactory\");\n          }\n        } else {\n          // Our default lock is SimpleFSLockFactory:\n          File lockDir;\n          if (LOCK_DIR == null) {\n            lockDir = directory;\n          } else {\n            lockDir = new File(LOCK_DIR);\n          }\n          lockFactory = new SimpleFSLockFactory(lockDir);\n        }\n      }\n    }\n\n    // Must initialize directory here because setLockFactory uses it\n    // (when the LockFactory calls getLockID).  But we want to create\n    // the lockFactory before calling init() because init() needs to\n    // use the lockFactory to clear old locks.  So this breaks\n    // chicken/egg:\n    directory = path;\n\n    setLockFactory(lockFactory);\n\n    init(path, create, doRemoveOldFiles);\n  }\n\n","bugFix":null,"bugIntro":["245fee3e499fae1fc0c33a80a6dd979f9c5f49e2","245fee3e499fae1fc0c33a80a6dd979f9c5f49e2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"66b12ba4967665216eeb706b58d424c51fb3641a","date":1169160423,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#init(File,LockFactory).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#init(File,boolean,LockFactory,boolean).mjava","sourceNew":"  private void init(File path, LockFactory lockFactory) throws IOException {\n\n    // Set up lockFactory with cascaded defaults: if an instance was passed in,\n    // use that; else if locks are disabled, use NoLockFactory; else if the\n    // system property org.apache.lucene.store.FSDirectoryLockFactoryClass is set,\n    // instantiate that; else, use SimpleFSLockFactory:\n\n    directory = path;\n\n    boolean doClearLockID = false;\n\n    if (lockFactory == null) {\n\n      if (disableLocks) {\n        // Locks are disabled:\n        lockFactory = NoLockFactory.getNoLockFactory();\n      } else {\n        String lockClassName = System.getProperty(\"org.apache.lucene.store.FSDirectoryLockFactoryClass\");\n\n        if (lockClassName != null && !lockClassName.equals(\"\")) {\n          Class c;\n\n          try {\n            c = Class.forName(lockClassName);\n          } catch (ClassNotFoundException e) {\n            throw new IOException(\"unable to find LockClass \" + lockClassName);\n          }\n\n          try {\n            lockFactory = (LockFactory) c.newInstance();          \n          } catch (IllegalAccessException e) {\n            throw new IOException(\"IllegalAccessException when instantiating LockClass \" + lockClassName);\n          } catch (InstantiationException e) {\n            throw new IOException(\"InstantiationException when instantiating LockClass \" + lockClassName);\n          } catch (ClassCastException e) {\n            throw new IOException(\"unable to cast LockClass \" + lockClassName + \" instance to a LockFactory\");\n          }\n        } else {\n          // Our default lock is SimpleFSLockFactory;\n          // default lockDir is our index directory:\n          lockFactory = new SimpleFSLockFactory(path);\n          doClearLockID = true;\n        }\n      }\n    }\n\n    setLockFactory(lockFactory);\n\n    if (doClearLockID) {\n      // Clear the prefix because write.lock will be\n      // stored in our directory:\n      lockFactory.setLockPrefix(null);\n    }\n  }\n\n","sourceOld":"  private void init(File path, boolean create, LockFactory lockFactory, boolean doRemoveOldFiles) throws IOException {\n\n    // Set up lockFactory with cascaded defaults: if an instance was passed in,\n    // use that; else if locks are disabled, use NoLockFactory; else if the\n    // system property org.apache.lucene.store.FSDirectoryLockFactoryClass is set,\n    // instantiate that; else, use SimpleFSLockFactory:\n\n    boolean doClearLockID = false;\n\n    if (lockFactory == null) {\n\n      if (disableLocks) {\n        // Locks are disabled:\n        lockFactory = NoLockFactory.getNoLockFactory();\n      } else {\n        String lockClassName = System.getProperty(\"org.apache.lucene.store.FSDirectoryLockFactoryClass\");\n\n        if (lockClassName != null && !lockClassName.equals(\"\")) {\n          Class c;\n\n          try {\n            c = Class.forName(lockClassName);\n          } catch (ClassNotFoundException e) {\n            throw new IOException(\"unable to find LockClass \" + lockClassName);\n          }\n\n          try {\n            lockFactory = (LockFactory) c.newInstance();          \n          } catch (IllegalAccessException e) {\n            throw new IOException(\"IllegalAccessException when instantiating LockClass \" + lockClassName);\n          } catch (InstantiationException e) {\n            throw new IOException(\"InstantiationException when instantiating LockClass \" + lockClassName);\n          } catch (ClassCastException e) {\n            throw new IOException(\"unable to cast LockClass \" + lockClassName + \" instance to a LockFactory\");\n          }\n        } else {\n          // Our default lock is SimpleFSLockFactory;\n          // default lockDir is our index directory:\n          lockFactory = new SimpleFSLockFactory(path);\n          doClearLockID = true;\n        }\n      }\n    }\n\n    // Must initialize directory here because setLockFactory uses it\n    // (when the LockFactory calls getLockID).  But we want to create\n    // the lockFactory before calling init() because init() needs to\n    // use the lockFactory to clear old locks.  So this breaks\n    // chicken/egg:\n    directory = path;\n\n    setLockFactory(lockFactory);\n    if (doClearLockID) {\n      // Clear the prefix because write.lock will be\n      // stored in our directory:\n      lockFactory.setLockPrefix(null);\n    }\n\n    init(path, create, doRemoveOldFiles);\n  }\n\n","bugFix":null,"bugIntro":["245fee3e499fae1fc0c33a80a6dd979f9c5f49e2","245fee3e499fae1fc0c33a80a6dd979f9c5f49e2"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"66b12ba4967665216eeb706b58d424c51fb3641a":["93a838d8ba57e85e9db126e862958dafc7da4d5b"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"93a838d8ba57e85e9db126e862958dafc7da4d5b":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["66b12ba4967665216eeb706b58d424c51fb3641a"]},"commit2Childs":{"66b12ba4967665216eeb706b58d424c51fb3641a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["93a838d8ba57e85e9db126e862958dafc7da4d5b"],"93a838d8ba57e85e9db126e862958dafc7da4d5b":["66b12ba4967665216eeb706b58d424c51fb3641a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}