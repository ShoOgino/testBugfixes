{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SqlStream#toExpression(StreamFactory).mjava","commits":[{"id":"37ba6c2d18fe05b92cb264c3d67e4cae76f75136","date":1495126259,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SqlStream#toExpression(StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", [aliases=\"field=alias,...\"])\n\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(getClass()));\n\n    // collection\n    expression.addParameter(collection);\n\n    // parameters\n\n    ModifiableSolrParams mParams = new ModifiableSolrParams(SolrParams.toMultiMap(params.toNamedList()));\n    for (Entry<String, String[]> param : mParams.getMap().entrySet()) {\n      String value = String.join(\",\", param.getValue());\n\n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n\n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n\n    return expression;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SqlStream#toExpression(StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", [aliases=\"field=alias,...\"])\n\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(getClass()));\n\n    // collection\n    expression.addParameter(collection);\n\n    // parameters\n\n    ModifiableSolrParams mParams = new ModifiableSolrParams(SolrParams.toMultiMap(params.toNamedList()));\n    for (Entry<String, String[]> param : mParams.getMap().entrySet()) {\n      String value = String.join(\",\", param.getValue());\n\n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n\n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n\n    return expression;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"129e5b874f99ae4e04f39c337c940dda690f2d38","date":1524504409,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SqlStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SqlStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", [aliases=\"field=alias,...\"])\n\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(getClass()));\n\n    // collection\n    expression.addParameter(collection);\n\n    // parameters\n\n    for (Entry<String, String[]> param : params) {\n      String value = String.join(\",\", param.getValue());\n\n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n\n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n\n    return expression;\n  }\n\n","sourceOld":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", [aliases=\"field=alias,...\"])\n\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(getClass()));\n\n    // collection\n    expression.addParameter(collection);\n\n    // parameters\n\n    ModifiableSolrParams mParams = new ModifiableSolrParams(SolrParams.toMultiMap(params.toNamedList()));\n    for (Entry<String, String[]> param : mParams.getMap().entrySet()) {\n      String value = String.join(\",\", param.getValue());\n\n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n\n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n\n    return expression;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","37ba6c2d18fe05b92cb264c3d67e4cae76f75136"],"129e5b874f99ae4e04f39c337c940dda690f2d38":["37ba6c2d18fe05b92cb264c3d67e4cae76f75136"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"37ba6c2d18fe05b92cb264c3d67e4cae76f75136":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["129e5b874f99ae4e04f39c337c940dda690f2d38"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"129e5b874f99ae4e04f39c337c940dda690f2d38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","37ba6c2d18fe05b92cb264c3d67e4cae76f75136"],"37ba6c2d18fe05b92cb264c3d67e4cae76f75136":["e9017cf144952056066919f1ebc7897ff9bd71b1","129e5b874f99ae4e04f39c337c940dda690f2d38"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}