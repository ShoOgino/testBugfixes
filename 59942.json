{"path":"src/java/org/apache/solr/core/SolrCore#setResponseHeaderValues(SolrRequestHandler,NamedList[Object],SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"d119e8687d5c78856fc86eee0f86c8367fdfad1f","date":1176085764,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#setResponseHeaderValues(SolrRequestHandler,NamedList[Object],SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#setResponseHeaderValues(NamedList,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected void setResponseHeaderValues(SolrRequestHandler handler, NamedList<Object> responseHeader,SolrQueryRequest req, SolrQueryResponse rsp) {\n    // TODO should check that responseHeader has not been replaced by handler\n    \n    final int qtime=(int)(rsp.getEndTime() - req.getStartTime());\n    responseHeader.add(\"status\",rsp.getException()==null ? 0 : 500);\n    responseHeader.add(\"QTime\",qtime);\n        \n    SolrParams params = req.getParams();\n    if( params.getBool(SolrParams.HEADER_ECHO_HANDLER, false) ) {\n      responseHeader.add(\"handler\", handler.getName() );\n    }\n    \n    // Values for echoParams... false/true/all or false/explicit/all ???\n    String ep = params.get( SolrParams.HEADER_ECHO_PARAMS, null );\n    if( ep != null ) {\n      EchoParamStyle echoParams = EchoParamStyle.get( ep );\n      if( echoParams == null ) {\n        throw new SolrException(400,\"Invalid value '\" + ep + \"' for \" + SolrParams.HEADER_ECHO_PARAMS \n            + \" parameter, use '\" + EchoParamStyle.EXPLICIT + \"' or '\" + EchoParamStyle.ALL + \"'\" );\n      }\n      if( echoParams == EchoParamStyle.EXPLICIT ) {\n        responseHeader.add(\"params\", req.getOriginalParams().toNamedList());\n      }\n      else if( echoParams == EchoParamStyle.ALL ) {\n        responseHeader.add(\"params\", req.getParams().toNamedList());\n      }\n    }\n  }\n\n","sourceOld":"  protected void setResponseHeaderValues(NamedList responseHeader,SolrQueryRequest req, SolrQueryResponse rsp) {\n    // TODO should check that responseHeader has not been replaced by handler\n    \n    final int qtime=(int)(rsp.getEndTime() - req.getStartTime());\n    responseHeader.add(\"status\",rsp.getException()==null ? 0 : 500);\n    responseHeader.add(\"QTime\",qtime);\n    \n    // Values for echoParams... false/true/all or false/explicit/all ???\n    final String EP_PARAM = \"echoParams\";\n    final String EXPLICIT = \"explicit\";\n    final String epValue = req.getParams().get(EP_PARAM); \n    if (EXPLICIT.equals(epValue)) {\n        responseHeader.add(\"params\", req.getOriginalParams().toNamedList());\n    } else if(epValue!=null) {\n      throw new SolrException(400,\"Invalid value '\" + epValue + \"' for \" + EP_PARAM + \" parameter, use '\" + EXPLICIT + \"'\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996","date":1180477701,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#setResponseHeaderValues(SolrRequestHandler,NamedList[Object],SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#setResponseHeaderValues(SolrRequestHandler,NamedList[Object],SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected void setResponseHeaderValues(SolrRequestHandler handler, NamedList<Object> responseHeader,SolrQueryRequest req, SolrQueryResponse rsp) {\n    // TODO should check that responseHeader has not been replaced by handler\n    \n    final int qtime=(int)(rsp.getEndTime() - req.getStartTime());\n    responseHeader.add(\"status\",rsp.getException()==null ? 0 : 500);\n    responseHeader.add(\"QTime\",qtime);\n        \n    SolrParams params = req.getParams();\n    if( params.getBool(SolrParams.HEADER_ECHO_HANDLER, false) ) {\n      responseHeader.add(\"handler\", handler.getName() );\n    }\n    \n    // Values for echoParams... false/true/all or false/explicit/all ???\n    String ep = params.get( SolrParams.HEADER_ECHO_PARAMS, null );\n    if( ep != null ) {\n      EchoParamStyle echoParams = EchoParamStyle.get( ep );\n      if( echoParams == null ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid value '\" + ep + \"' for \" + SolrParams.HEADER_ECHO_PARAMS \n            + \" parameter, use '\" + EchoParamStyle.EXPLICIT + \"' or '\" + EchoParamStyle.ALL + \"'\" );\n      }\n      if( echoParams == EchoParamStyle.EXPLICIT ) {\n        responseHeader.add(\"params\", req.getOriginalParams().toNamedList());\n      }\n      else if( echoParams == EchoParamStyle.ALL ) {\n        responseHeader.add(\"params\", req.getParams().toNamedList());\n      }\n    }\n  }\n\n","sourceOld":"  protected void setResponseHeaderValues(SolrRequestHandler handler, NamedList<Object> responseHeader,SolrQueryRequest req, SolrQueryResponse rsp) {\n    // TODO should check that responseHeader has not been replaced by handler\n    \n    final int qtime=(int)(rsp.getEndTime() - req.getStartTime());\n    responseHeader.add(\"status\",rsp.getException()==null ? 0 : 500);\n    responseHeader.add(\"QTime\",qtime);\n        \n    SolrParams params = req.getParams();\n    if( params.getBool(SolrParams.HEADER_ECHO_HANDLER, false) ) {\n      responseHeader.add(\"handler\", handler.getName() );\n    }\n    \n    // Values for echoParams... false/true/all or false/explicit/all ???\n    String ep = params.get( SolrParams.HEADER_ECHO_PARAMS, null );\n    if( ep != null ) {\n      EchoParamStyle echoParams = EchoParamStyle.get( ep );\n      if( echoParams == null ) {\n        throw new SolrException(400,\"Invalid value '\" + ep + \"' for \" + SolrParams.HEADER_ECHO_PARAMS \n            + \" parameter, use '\" + EchoParamStyle.EXPLICIT + \"' or '\" + EchoParamStyle.ALL + \"'\" );\n      }\n      if( echoParams == EchoParamStyle.EXPLICIT ) {\n        responseHeader.add(\"params\", req.getOriginalParams().toNamedList());\n      }\n      else if( echoParams == EchoParamStyle.ALL ) {\n        responseHeader.add(\"params\", req.getParams().toNamedList());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef","date":1185993405,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#setResponseHeaderValues(SolrRequestHandler,NamedList[Object],SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#setResponseHeaderValues(SolrRequestHandler,NamedList[Object],SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected void setResponseHeaderValues(SolrRequestHandler handler, NamedList<Object> responseHeader,SolrQueryRequest req, SolrQueryResponse rsp) {\n    // TODO should check that responseHeader has not been replaced by handler\n    \n    final int qtime=(int)(rsp.getEndTime() - req.getStartTime());\n    responseHeader.add(\"status\",rsp.getException()==null ? 0 : 500);\n    responseHeader.add(\"QTime\",qtime);\n        \n    SolrParams params = req.getParams();\n    if( params.getBool(CommonParams.HEADER_ECHO_HANDLER, false) ) {\n      responseHeader.add(\"handler\", handler.getName() );\n    }\n    \n    // Values for echoParams... false/true/all or false/explicit/all ???\n    String ep = params.get( CommonParams.HEADER_ECHO_PARAMS, null );\n    if( ep != null ) {\n      EchoParamStyle echoParams = EchoParamStyle.get( ep );\n      if( echoParams == null ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid value '\" + ep + \"' for \" + CommonParams.HEADER_ECHO_PARAMS \n            + \" parameter, use '\" + EchoParamStyle.EXPLICIT + \"' or '\" + EchoParamStyle.ALL + \"'\" );\n      }\n      if( echoParams == EchoParamStyle.EXPLICIT ) {\n        responseHeader.add(\"params\", req.getOriginalParams().toNamedList());\n      }\n      else if( echoParams == EchoParamStyle.ALL ) {\n        responseHeader.add(\"params\", req.getParams().toNamedList());\n      }\n    }\n  }\n\n","sourceOld":"  protected void setResponseHeaderValues(SolrRequestHandler handler, NamedList<Object> responseHeader,SolrQueryRequest req, SolrQueryResponse rsp) {\n    // TODO should check that responseHeader has not been replaced by handler\n    \n    final int qtime=(int)(rsp.getEndTime() - req.getStartTime());\n    responseHeader.add(\"status\",rsp.getException()==null ? 0 : 500);\n    responseHeader.add(\"QTime\",qtime);\n        \n    SolrParams params = req.getParams();\n    if( params.getBool(SolrParams.HEADER_ECHO_HANDLER, false) ) {\n      responseHeader.add(\"handler\", handler.getName() );\n    }\n    \n    // Values for echoParams... false/true/all or false/explicit/all ???\n    String ep = params.get( SolrParams.HEADER_ECHO_PARAMS, null );\n    if( ep != null ) {\n      EchoParamStyle echoParams = EchoParamStyle.get( ep );\n      if( echoParams == null ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid value '\" + ep + \"' for \" + SolrParams.HEADER_ECHO_PARAMS \n            + \" parameter, use '\" + EchoParamStyle.EXPLICIT + \"' or '\" + EchoParamStyle.ALL + \"'\" );\n      }\n      if( echoParams == EchoParamStyle.EXPLICIT ) {\n        responseHeader.add(\"params\", req.getOriginalParams().toNamedList());\n      }\n      else if( echoParams == EchoParamStyle.ALL ) {\n        responseHeader.add(\"params\", req.getParams().toNamedList());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6d6338c87060be5f66757a94945975f3bbd377a9","date":1189278234,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#setResponseHeaderValues(SolrRequestHandler,NamedList[Object],SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#setResponseHeaderValues(SolrRequestHandler,NamedList[Object],SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected void setResponseHeaderValues(SolrRequestHandler handler, NamedList<Object> responseHeader,SolrQueryRequest req, SolrQueryResponse rsp) {\n    // TODO should check that responseHeader has not been replaced by handler\n    \n    final int qtime=(int)(rsp.getEndTime() - req.getStartTime());\n    responseHeader.add(\"status\",rsp.getException()==null ? 0 : 500);\n    responseHeader.add(\"QTime\",qtime);\n        \n    SolrParams params = req.getParams();\n    if( params.getBool(CommonParams.HEADER_ECHO_HANDLER, false) ) {\n      responseHeader.add(\"handler\", handler.getName() );\n    }\n    \n    // Values for echoParams... false/true/all or false/explicit/all ???\n    String ep = params.get( CommonParams.HEADER_ECHO_PARAMS, null );\n    if( ep != null ) {\n      EchoParamStyle echoParams = EchoParamStyle.get( ep );\n      if( echoParams == null ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid value '\" + ep + \"' for \" + CommonParams.HEADER_ECHO_PARAMS \n            + \" parameter, use '\" + EchoParamStyle.EXPLICIT + \"' or '\" + EchoParamStyle.ALL + \"'\" );\n      }\n      if( echoParams == EchoParamStyle.EXPLICIT ) {\n        responseHeader.add(\"params\", req.getOriginalParams().toNamedList());\n      } else if( echoParams == EchoParamStyle.ALL ) {\n        responseHeader.add(\"params\", req.getParams().toNamedList());\n      }\n    }\n  }\n\n","sourceOld":"  protected void setResponseHeaderValues(SolrRequestHandler handler, NamedList<Object> responseHeader,SolrQueryRequest req, SolrQueryResponse rsp) {\n    // TODO should check that responseHeader has not been replaced by handler\n    \n    final int qtime=(int)(rsp.getEndTime() - req.getStartTime());\n    responseHeader.add(\"status\",rsp.getException()==null ? 0 : 500);\n    responseHeader.add(\"QTime\",qtime);\n        \n    SolrParams params = req.getParams();\n    if( params.getBool(CommonParams.HEADER_ECHO_HANDLER, false) ) {\n      responseHeader.add(\"handler\", handler.getName() );\n    }\n    \n    // Values for echoParams... false/true/all or false/explicit/all ???\n    String ep = params.get( CommonParams.HEADER_ECHO_PARAMS, null );\n    if( ep != null ) {\n      EchoParamStyle echoParams = EchoParamStyle.get( ep );\n      if( echoParams == null ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid value '\" + ep + \"' for \" + CommonParams.HEADER_ECHO_PARAMS \n            + \" parameter, use '\" + EchoParamStyle.EXPLICIT + \"' or '\" + EchoParamStyle.ALL + \"'\" );\n      }\n      if( echoParams == EchoParamStyle.EXPLICIT ) {\n        responseHeader.add(\"params\", req.getOriginalParams().toNamedList());\n      }\n      else if( echoParams == EchoParamStyle.ALL ) {\n        responseHeader.add(\"params\", req.getParams().toNamedList());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae248910a22eb7d1b6bd9ade7f9a33dfc0506f0c","date":1208435858,"type":5,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#setResponseHeaderValues(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#setResponseHeaderValues(SolrRequestHandler,NamedList[Object],SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected void setResponseHeaderValues(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    // TODO should check that responseHeader has not been replaced by handler\n\tNamedList responseHeader = rsp.getResponseHeader();\n    final int qtime=(int)(rsp.getEndTime() - req.getStartTime());\n    responseHeader.add(\"status\",rsp.getException()==null ? 0 : 500);\n    responseHeader.add(\"QTime\",qtime);\n    rsp.getToLog().add(\"status\",rsp.getException()==null ? 0 : 500);\n    rsp.getToLog().add(\"QTime\",qtime);\n    \n    SolrParams params = req.getParams();\n    if( params.getBool(CommonParams.HEADER_ECHO_HANDLER, false) ) {\n      responseHeader.add(\"handler\", handler.getName() );\n    }\n    \n    // Values for echoParams... false/true/all or false/explicit/all ???\n    String ep = params.get( CommonParams.HEADER_ECHO_PARAMS, null );\n    if( ep != null ) {\n      EchoParamStyle echoParams = EchoParamStyle.get( ep );\n      if( echoParams == null ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid value '\" + ep + \"' for \" + CommonParams.HEADER_ECHO_PARAMS \n            + \" parameter, use '\" + EchoParamStyle.EXPLICIT + \"' or '\" + EchoParamStyle.ALL + \"'\" );\n      }\n      if( echoParams == EchoParamStyle.EXPLICIT ) {\n        responseHeader.add(\"params\", req.getOriginalParams().toNamedList());\n      } else if( echoParams == EchoParamStyle.ALL ) {\n        responseHeader.add(\"params\", req.getParams().toNamedList());\n      }\n    }\n  }\n\n","sourceOld":"  protected void setResponseHeaderValues(SolrRequestHandler handler, NamedList<Object> responseHeader,SolrQueryRequest req, SolrQueryResponse rsp) {\n    // TODO should check that responseHeader has not been replaced by handler\n    \n    final int qtime=(int)(rsp.getEndTime() - req.getStartTime());\n    responseHeader.add(\"status\",rsp.getException()==null ? 0 : 500);\n    responseHeader.add(\"QTime\",qtime);\n        \n    SolrParams params = req.getParams();\n    if( params.getBool(CommonParams.HEADER_ECHO_HANDLER, false) ) {\n      responseHeader.add(\"handler\", handler.getName() );\n    }\n    \n    // Values for echoParams... false/true/all or false/explicit/all ???\n    String ep = params.get( CommonParams.HEADER_ECHO_PARAMS, null );\n    if( ep != null ) {\n      EchoParamStyle echoParams = EchoParamStyle.get( ep );\n      if( echoParams == null ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid value '\" + ep + \"' for \" + CommonParams.HEADER_ECHO_PARAMS \n            + \" parameter, use '\" + EchoParamStyle.EXPLICIT + \"' or '\" + EchoParamStyle.ALL + \"'\" );\n      }\n      if( echoParams == EchoParamStyle.EXPLICIT ) {\n        responseHeader.add(\"params\", req.getOriginalParams().toNamedList());\n      } else if( echoParams == EchoParamStyle.ALL ) {\n        responseHeader.add(\"params\", req.getParams().toNamedList());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["8df14eca184f665d0ebd21bff9b962df55107e03"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef":["c4abe53aaee39b5f2f41dd9a0b905c1ddf880996"],"6d6338c87060be5f66757a94945975f3bbd377a9":["c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef"],"ae248910a22eb7d1b6bd9ade7f9a33dfc0506f0c":["6d6338c87060be5f66757a94945975f3bbd377a9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"d119e8687d5c78856fc86eee0f86c8367fdfad1f":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996":["d119e8687d5c78856fc86eee0f86c8367fdfad1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef":["6d6338c87060be5f66757a94945975f3bbd377a9"],"6d6338c87060be5f66757a94945975f3bbd377a9":["ae248910a22eb7d1b6bd9ade7f9a33dfc0506f0c"],"ae248910a22eb7d1b6bd9ade7f9a33dfc0506f0c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["d119e8687d5c78856fc86eee0f86c8367fdfad1f"],"d119e8687d5c78856fc86eee0f86c8367fdfad1f":["c4abe53aaee39b5f2f41dd9a0b905c1ddf880996"],"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996":["c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ae248910a22eb7d1b6bd9ade7f9a33dfc0506f0c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}