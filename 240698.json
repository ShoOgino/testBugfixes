{"path":"solr/core/src/test/org/apache/solr/core/HdfsDirectoryFactoryTest#testInitArgsOrSysPropConfig().mjava","commits":[{"id":"0ce6c1f997c135ab2e3d211580d089de539d7e20","date":1421161966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/HdfsDirectoryFactoryTest#testInitArgsOrSysPropConfig().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testInitArgsOrSysPropConfig() throws Exception {\n    \n    HdfsDirectoryFactory hdfsFactory = new HdfsDirectoryFactory();\n    \n    // test sys prop config\n    \n    System.setProperty(\"solr.hdfs.home\", dfsCluster.getURI().toString() + \"/solr1\");\n    hdfsFactory.init(new NamedList<>());\n    String dataHome = hdfsFactory.getDataHome(new MockCoreDescriptor());\n\n    assertTrue(dataHome.endsWith(\"/solr1/mock/data\"));\n    \n    System.clearProperty(\"solr.hdfs.home\");\n    \n    // test init args config\n    \n    NamedList<Object> nl = new NamedList<>();\n    nl.add(\"solr.hdfs.home\", dfsCluster.getURI().toString() + \"/solr2\");\n    hdfsFactory.init(nl);\n    dataHome = hdfsFactory.getDataHome(new MockCoreDescriptor());\n\n    assertTrue(dataHome.endsWith(\"/solr2/mock/data\"));\n    \n    // test sys prop and init args config - init args wins\n    \n    System.setProperty(\"solr.hdfs.home\", dfsCluster.getURI().toString() + \"/solr1\");\n    hdfsFactory.init(nl);\n    dataHome = hdfsFactory.getDataHome(new MockCoreDescriptor());\n\n    assertTrue(dataHome.endsWith(\"/solr2/mock/data\"));\n    \n    System.clearProperty(\"solr.hdfs.home\");\n    \n    \n    // set conf dir by sys prop\n    \n    Path confDir = createTempDir();\n    \n    System.setProperty(HdfsDirectoryFactory.CONFIG_DIRECTORY, confDir.toString());\n    \n    Directory dir = hdfsFactory.create(dfsCluster.getURI().toString() + \"/solr\", NoLockFactory.INSTANCE, DirContext.DEFAULT);\n    try {\n      assertEquals(confDir.toString(), hdfsFactory.getConfDir());\n    } finally {\n      dir.close();\n    }\n    \n    // check bool and int getConf impls\n    nl = new NamedList<>();\n    nl.add(HdfsDirectoryFactory.NRTCACHINGDIRECTORY_MAXMERGESIZEMB, 4);\n    System.setProperty(HdfsDirectoryFactory.NRTCACHINGDIRECTORY_MAXMERGESIZEMB, \"3\");\n    nl.add(HdfsDirectoryFactory.BLOCKCACHE_ENABLED, true);\n    System.setProperty(HdfsDirectoryFactory.BLOCKCACHE_ENABLED, \"false\");\n    \n    hdfsFactory.init(nl);\n    \n    assertEquals(4, hdfsFactory.getConfig(HdfsDirectoryFactory.NRTCACHINGDIRECTORY_MAXMERGESIZEMB, 0));\n    assertEquals(true, hdfsFactory.getConfig(HdfsDirectoryFactory.BLOCKCACHE_ENABLED, false));\n    \n    nl = new NamedList<>();\n    hdfsFactory.init(nl);\n    System.setProperty(HdfsDirectoryFactory.BLOCKCACHE_ENABLED, \"true\");\n    \n    assertEquals(3, hdfsFactory.getConfig(HdfsDirectoryFactory.NRTCACHINGDIRECTORY_MAXMERGESIZEMB, 0));\n    assertEquals(true, hdfsFactory.getConfig(HdfsDirectoryFactory.BLOCKCACHE_ENABLED, false));\n    \n    System.clearProperty(HdfsDirectoryFactory.NRTCACHINGDIRECTORY_MAXMERGESIZEMB);\n    System.clearProperty(HdfsDirectoryFactory.BLOCKCACHE_ENABLED);\n    \n    assertEquals(0, hdfsFactory.getConfig(HdfsDirectoryFactory.NRTCACHINGDIRECTORY_MAXMERGESIZEMB, 0));\n    assertEquals(false, hdfsFactory.getConfig(HdfsDirectoryFactory.BLOCKCACHE_ENABLED, false));\n    \n    hdfsFactory.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["add53de9835b2cd1a7a80b4e0036afee171c9fdf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3def6e0e7b7566dd7f04a3514e77ee97a40fc78a","date":1429888091,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/HdfsDirectoryFactoryTest#testInitArgsOrSysPropConfig().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/HdfsDirectoryFactoryTest#testInitArgsOrSysPropConfig().mjava","sourceNew":"  @Test\n  public void testInitArgsOrSysPropConfig() throws Exception {\n    \n    HdfsDirectoryFactory hdfsFactory = new HdfsDirectoryFactory();\n    \n    // test sys prop config\n    \n    System.setProperty(\"solr.hdfs.home\", HdfsTestUtil.getURI(dfsCluster) + \"/solr1\");\n    hdfsFactory.init(new NamedList<>());\n    String dataHome = hdfsFactory.getDataHome(new MockCoreDescriptor());\n\n    assertTrue(dataHome.endsWith(\"/solr1/mock/data\"));\n    \n    System.clearProperty(\"solr.hdfs.home\");\n    \n    // test init args config\n    \n    NamedList<Object> nl = new NamedList<>();\n    nl.add(\"solr.hdfs.home\", HdfsTestUtil.getURI(dfsCluster) + \"/solr2\");\n    hdfsFactory.init(nl);\n    dataHome = hdfsFactory.getDataHome(new MockCoreDescriptor());\n\n    assertTrue(dataHome.endsWith(\"/solr2/mock/data\"));\n    \n    // test sys prop and init args config - init args wins\n    \n    System.setProperty(\"solr.hdfs.home\", HdfsTestUtil.getURI(dfsCluster) + \"/solr1\");\n    hdfsFactory.init(nl);\n    dataHome = hdfsFactory.getDataHome(new MockCoreDescriptor());\n\n    assertTrue(dataHome.endsWith(\"/solr2/mock/data\"));\n    \n    System.clearProperty(\"solr.hdfs.home\");\n    \n    \n    // set conf dir by sys prop\n    \n    Path confDir = createTempDir();\n    \n    System.setProperty(HdfsDirectoryFactory.CONFIG_DIRECTORY, confDir.toString());\n    \n    Directory dir = hdfsFactory.create(HdfsTestUtil.getURI(dfsCluster) + \"/solr\", NoLockFactory.INSTANCE, DirContext.DEFAULT);\n    try {\n      assertEquals(confDir.toString(), hdfsFactory.getConfDir());\n    } finally {\n      dir.close();\n    }\n    \n    // check bool and int getConf impls\n    nl = new NamedList<>();\n    nl.add(HdfsDirectoryFactory.NRTCACHINGDIRECTORY_MAXMERGESIZEMB, 4);\n    System.setProperty(HdfsDirectoryFactory.NRTCACHINGDIRECTORY_MAXMERGESIZEMB, \"3\");\n    nl.add(HdfsDirectoryFactory.BLOCKCACHE_ENABLED, true);\n    System.setProperty(HdfsDirectoryFactory.BLOCKCACHE_ENABLED, \"false\");\n    \n    hdfsFactory.init(nl);\n    \n    assertEquals(4, hdfsFactory.getConfig(HdfsDirectoryFactory.NRTCACHINGDIRECTORY_MAXMERGESIZEMB, 0));\n    assertEquals(true, hdfsFactory.getConfig(HdfsDirectoryFactory.BLOCKCACHE_ENABLED, false));\n    \n    nl = new NamedList<>();\n    hdfsFactory.init(nl);\n    System.setProperty(HdfsDirectoryFactory.BLOCKCACHE_ENABLED, \"true\");\n    \n    assertEquals(3, hdfsFactory.getConfig(HdfsDirectoryFactory.NRTCACHINGDIRECTORY_MAXMERGESIZEMB, 0));\n    assertEquals(true, hdfsFactory.getConfig(HdfsDirectoryFactory.BLOCKCACHE_ENABLED, false));\n    \n    System.clearProperty(HdfsDirectoryFactory.NRTCACHINGDIRECTORY_MAXMERGESIZEMB);\n    System.clearProperty(HdfsDirectoryFactory.BLOCKCACHE_ENABLED);\n    \n    assertEquals(0, hdfsFactory.getConfig(HdfsDirectoryFactory.NRTCACHINGDIRECTORY_MAXMERGESIZEMB, 0));\n    assertEquals(false, hdfsFactory.getConfig(HdfsDirectoryFactory.BLOCKCACHE_ENABLED, false));\n    \n    hdfsFactory.close();\n  }\n\n","sourceOld":"  @Test\n  public void testInitArgsOrSysPropConfig() throws Exception {\n    \n    HdfsDirectoryFactory hdfsFactory = new HdfsDirectoryFactory();\n    \n    // test sys prop config\n    \n    System.setProperty(\"solr.hdfs.home\", dfsCluster.getURI().toString() + \"/solr1\");\n    hdfsFactory.init(new NamedList<>());\n    String dataHome = hdfsFactory.getDataHome(new MockCoreDescriptor());\n\n    assertTrue(dataHome.endsWith(\"/solr1/mock/data\"));\n    \n    System.clearProperty(\"solr.hdfs.home\");\n    \n    // test init args config\n    \n    NamedList<Object> nl = new NamedList<>();\n    nl.add(\"solr.hdfs.home\", dfsCluster.getURI().toString() + \"/solr2\");\n    hdfsFactory.init(nl);\n    dataHome = hdfsFactory.getDataHome(new MockCoreDescriptor());\n\n    assertTrue(dataHome.endsWith(\"/solr2/mock/data\"));\n    \n    // test sys prop and init args config - init args wins\n    \n    System.setProperty(\"solr.hdfs.home\", dfsCluster.getURI().toString() + \"/solr1\");\n    hdfsFactory.init(nl);\n    dataHome = hdfsFactory.getDataHome(new MockCoreDescriptor());\n\n    assertTrue(dataHome.endsWith(\"/solr2/mock/data\"));\n    \n    System.clearProperty(\"solr.hdfs.home\");\n    \n    \n    // set conf dir by sys prop\n    \n    Path confDir = createTempDir();\n    \n    System.setProperty(HdfsDirectoryFactory.CONFIG_DIRECTORY, confDir.toString());\n    \n    Directory dir = hdfsFactory.create(dfsCluster.getURI().toString() + \"/solr\", NoLockFactory.INSTANCE, DirContext.DEFAULT);\n    try {\n      assertEquals(confDir.toString(), hdfsFactory.getConfDir());\n    } finally {\n      dir.close();\n    }\n    \n    // check bool and int getConf impls\n    nl = new NamedList<>();\n    nl.add(HdfsDirectoryFactory.NRTCACHINGDIRECTORY_MAXMERGESIZEMB, 4);\n    System.setProperty(HdfsDirectoryFactory.NRTCACHINGDIRECTORY_MAXMERGESIZEMB, \"3\");\n    nl.add(HdfsDirectoryFactory.BLOCKCACHE_ENABLED, true);\n    System.setProperty(HdfsDirectoryFactory.BLOCKCACHE_ENABLED, \"false\");\n    \n    hdfsFactory.init(nl);\n    \n    assertEquals(4, hdfsFactory.getConfig(HdfsDirectoryFactory.NRTCACHINGDIRECTORY_MAXMERGESIZEMB, 0));\n    assertEquals(true, hdfsFactory.getConfig(HdfsDirectoryFactory.BLOCKCACHE_ENABLED, false));\n    \n    nl = new NamedList<>();\n    hdfsFactory.init(nl);\n    System.setProperty(HdfsDirectoryFactory.BLOCKCACHE_ENABLED, \"true\");\n    \n    assertEquals(3, hdfsFactory.getConfig(HdfsDirectoryFactory.NRTCACHINGDIRECTORY_MAXMERGESIZEMB, 0));\n    assertEquals(true, hdfsFactory.getConfig(HdfsDirectoryFactory.BLOCKCACHE_ENABLED, false));\n    \n    System.clearProperty(HdfsDirectoryFactory.NRTCACHINGDIRECTORY_MAXMERGESIZEMB);\n    System.clearProperty(HdfsDirectoryFactory.BLOCKCACHE_ENABLED);\n    \n    assertEquals(0, hdfsFactory.getConfig(HdfsDirectoryFactory.NRTCACHINGDIRECTORY_MAXMERGESIZEMB, 0));\n    assertEquals(false, hdfsFactory.getConfig(HdfsDirectoryFactory.BLOCKCACHE_ENABLED, false));\n    \n    hdfsFactory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2c801a37c38aedbd2ddbd27f2aaeb30cd5c7af0f","date":1552317217,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/HdfsDirectoryFactoryTest#testInitArgsOrSysPropConfig().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/HdfsDirectoryFactoryTest#testInitArgsOrSysPropConfig().mjava","sourceNew":"  @Test\n  public void testInitArgsOrSysPropConfig() throws Exception {\n    try(HdfsDirectoryFactory hdfsFactory = new HdfsDirectoryFactory()) {\n\n      // test sys prop config\n      System.setProperty(\"solr.hdfs.home\", HdfsTestUtil.getURI(dfsCluster) + \"/solr1\");\n      hdfsFactory.init(new NamedList<>());\n      String dataHome = hdfsFactory.getDataHome(new MockCoreDescriptor());\n\n      assertTrue(dataHome.endsWith(\"/solr1/mock/data\"));\n\n      System.clearProperty(\"solr.hdfs.home\");\n\n      // test init args config\n      NamedList<Object> nl = new NamedList<>();\n      nl.add(\"solr.hdfs.home\", HdfsTestUtil.getURI(dfsCluster) + \"/solr2\");\n      hdfsFactory.init(nl);\n      dataHome = hdfsFactory.getDataHome(new MockCoreDescriptor());\n\n      assertTrue(dataHome.endsWith(\"/solr2/mock/data\"));\n\n      // test sys prop and init args config - init args wins\n      System.setProperty(\"solr.hdfs.home\", HdfsTestUtil.getURI(dfsCluster) + \"/solr1\");\n      hdfsFactory.init(nl);\n      dataHome = hdfsFactory.getDataHome(new MockCoreDescriptor());\n\n      assertTrue(dataHome.endsWith(\"/solr2/mock/data\"));\n\n      System.clearProperty(\"solr.hdfs.home\");\n\n      // set conf dir by sys prop\n      Path confDir = createTempDir();\n\n      System.setProperty(HdfsDirectoryFactory.CONFIG_DIRECTORY, confDir.toString());\n\n      try (Directory dir = hdfsFactory\n          .create(HdfsTestUtil.getURI(dfsCluster) + \"/solr\", NoLockFactory.INSTANCE, DirContext.DEFAULT)) {\n        assertEquals(confDir.toString(), hdfsFactory.getConfDir());\n      }\n\n      // check bool and int getConf impls\n      nl = new NamedList<>();\n      nl.add(HdfsDirectoryFactory.NRTCACHINGDIRECTORY_MAXMERGESIZEMB, 4);\n      System.setProperty(HdfsDirectoryFactory.NRTCACHINGDIRECTORY_MAXMERGESIZEMB, \"3\");\n      nl.add(HdfsDirectoryFactory.BLOCKCACHE_ENABLED, true);\n      System.setProperty(HdfsDirectoryFactory.BLOCKCACHE_ENABLED, \"false\");\n\n      hdfsFactory.init(nl);\n\n      assertEquals(4, hdfsFactory.getConfig(HdfsDirectoryFactory.NRTCACHINGDIRECTORY_MAXMERGESIZEMB, 0));\n      assertTrue(hdfsFactory.getConfig(HdfsDirectoryFactory.BLOCKCACHE_ENABLED, false));\n\n      nl = new NamedList<>();\n      hdfsFactory.init(nl);\n      System.setProperty(HdfsDirectoryFactory.BLOCKCACHE_ENABLED, \"true\");\n\n      assertEquals(3, hdfsFactory.getConfig(HdfsDirectoryFactory.NRTCACHINGDIRECTORY_MAXMERGESIZEMB, 0));\n      assertTrue(hdfsFactory.getConfig(HdfsDirectoryFactory.BLOCKCACHE_ENABLED, false));\n\n      System.clearProperty(HdfsDirectoryFactory.NRTCACHINGDIRECTORY_MAXMERGESIZEMB);\n      System.clearProperty(HdfsDirectoryFactory.BLOCKCACHE_ENABLED);\n\n      assertEquals(0, hdfsFactory.getConfig(HdfsDirectoryFactory.NRTCACHINGDIRECTORY_MAXMERGESIZEMB, 0));\n      assertFalse(hdfsFactory.getConfig(HdfsDirectoryFactory.BLOCKCACHE_ENABLED, false));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testInitArgsOrSysPropConfig() throws Exception {\n    \n    HdfsDirectoryFactory hdfsFactory = new HdfsDirectoryFactory();\n    \n    // test sys prop config\n    \n    System.setProperty(\"solr.hdfs.home\", HdfsTestUtil.getURI(dfsCluster) + \"/solr1\");\n    hdfsFactory.init(new NamedList<>());\n    String dataHome = hdfsFactory.getDataHome(new MockCoreDescriptor());\n\n    assertTrue(dataHome.endsWith(\"/solr1/mock/data\"));\n    \n    System.clearProperty(\"solr.hdfs.home\");\n    \n    // test init args config\n    \n    NamedList<Object> nl = new NamedList<>();\n    nl.add(\"solr.hdfs.home\", HdfsTestUtil.getURI(dfsCluster) + \"/solr2\");\n    hdfsFactory.init(nl);\n    dataHome = hdfsFactory.getDataHome(new MockCoreDescriptor());\n\n    assertTrue(dataHome.endsWith(\"/solr2/mock/data\"));\n    \n    // test sys prop and init args config - init args wins\n    \n    System.setProperty(\"solr.hdfs.home\", HdfsTestUtil.getURI(dfsCluster) + \"/solr1\");\n    hdfsFactory.init(nl);\n    dataHome = hdfsFactory.getDataHome(new MockCoreDescriptor());\n\n    assertTrue(dataHome.endsWith(\"/solr2/mock/data\"));\n    \n    System.clearProperty(\"solr.hdfs.home\");\n    \n    \n    // set conf dir by sys prop\n    \n    Path confDir = createTempDir();\n    \n    System.setProperty(HdfsDirectoryFactory.CONFIG_DIRECTORY, confDir.toString());\n    \n    Directory dir = hdfsFactory.create(HdfsTestUtil.getURI(dfsCluster) + \"/solr\", NoLockFactory.INSTANCE, DirContext.DEFAULT);\n    try {\n      assertEquals(confDir.toString(), hdfsFactory.getConfDir());\n    } finally {\n      dir.close();\n    }\n    \n    // check bool and int getConf impls\n    nl = new NamedList<>();\n    nl.add(HdfsDirectoryFactory.NRTCACHINGDIRECTORY_MAXMERGESIZEMB, 4);\n    System.setProperty(HdfsDirectoryFactory.NRTCACHINGDIRECTORY_MAXMERGESIZEMB, \"3\");\n    nl.add(HdfsDirectoryFactory.BLOCKCACHE_ENABLED, true);\n    System.setProperty(HdfsDirectoryFactory.BLOCKCACHE_ENABLED, \"false\");\n    \n    hdfsFactory.init(nl);\n    \n    assertEquals(4, hdfsFactory.getConfig(HdfsDirectoryFactory.NRTCACHINGDIRECTORY_MAXMERGESIZEMB, 0));\n    assertEquals(true, hdfsFactory.getConfig(HdfsDirectoryFactory.BLOCKCACHE_ENABLED, false));\n    \n    nl = new NamedList<>();\n    hdfsFactory.init(nl);\n    System.setProperty(HdfsDirectoryFactory.BLOCKCACHE_ENABLED, \"true\");\n    \n    assertEquals(3, hdfsFactory.getConfig(HdfsDirectoryFactory.NRTCACHINGDIRECTORY_MAXMERGESIZEMB, 0));\n    assertEquals(true, hdfsFactory.getConfig(HdfsDirectoryFactory.BLOCKCACHE_ENABLED, false));\n    \n    System.clearProperty(HdfsDirectoryFactory.NRTCACHINGDIRECTORY_MAXMERGESIZEMB);\n    System.clearProperty(HdfsDirectoryFactory.BLOCKCACHE_ENABLED);\n    \n    assertEquals(0, hdfsFactory.getConfig(HdfsDirectoryFactory.NRTCACHINGDIRECTORY_MAXMERGESIZEMB, 0));\n    assertEquals(false, hdfsFactory.getConfig(HdfsDirectoryFactory.BLOCKCACHE_ENABLED, false));\n    \n    hdfsFactory.close();\n  }\n\n","bugFix":null,"bugIntro":["add53de9835b2cd1a7a80b4e0036afee171c9fdf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"add53de9835b2cd1a7a80b4e0036afee171c9fdf","date":1552937136,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/HdfsDirectoryFactoryTest#testInitArgsOrSysPropConfig().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/HdfsDirectoryFactoryTest#testInitArgsOrSysPropConfig().mjava","sourceNew":"  @Test\n  public void testInitArgsOrSysPropConfig() throws Exception {\n    try(HdfsDirectoryFactory hdfsFactory = new HdfsDirectoryFactory()) {\n      // test sys prop config\n      System.setProperty(HdfsDirectoryFactory.HDFS_HOME, HdfsTestUtil.getURI(dfsCluster) + \"/solr1\");\n      hdfsFactory.init(new NamedList<>());\n      String dataHome = hdfsFactory.getDataHome(new MockCoreDescriptor());\n\n      assertTrue(dataHome.endsWith(\"/solr1/mock/data\"));\n\n      System.clearProperty(HdfsDirectoryFactory.HDFS_HOME);\n\n      // test init args config\n      NamedList<Object> nl = new NamedList<>();\n      nl.add(HdfsDirectoryFactory.HDFS_HOME, HdfsTestUtil.getURI(dfsCluster) + \"/solr2\");\n      hdfsFactory.init(nl);\n      dataHome = hdfsFactory.getDataHome(new MockCoreDescriptor());\n\n      assertTrue(dataHome.endsWith(\"/solr2/mock/data\"));\n\n      // test sys prop and init args config - init args wins\n      System.setProperty(HdfsDirectoryFactory.HDFS_HOME, HdfsTestUtil.getURI(dfsCluster) + \"/solr1\");\n      hdfsFactory.init(nl);\n      dataHome = hdfsFactory.getDataHome(new MockCoreDescriptor());\n\n      assertTrue(dataHome.endsWith(\"/solr2/mock/data\"));\n\n      System.clearProperty(HdfsDirectoryFactory.HDFS_HOME);\n\n      // set conf dir by sys prop\n      Path confDir = createTempDir();\n\n      System.setProperty(HdfsDirectoryFactory.CONFIG_DIRECTORY, confDir.toString());\n\n      try (Directory dir = hdfsFactory\n          .create(HdfsTestUtil.getURI(dfsCluster) + \"/solr\", NoLockFactory.INSTANCE, DirContext.DEFAULT)) {\n        assertEquals(confDir.toString(), hdfsFactory.getConfDir());\n      }\n\n      // check bool and int getConf impls\n      nl = new NamedList<>();\n      nl.add(HdfsDirectoryFactory.NRTCACHINGDIRECTORY_MAXMERGESIZEMB, 4);\n      System.setProperty(HdfsDirectoryFactory.NRTCACHINGDIRECTORY_MAXMERGESIZEMB, \"3\");\n      nl.add(HdfsDirectoryFactory.BLOCKCACHE_ENABLED, true);\n      System.setProperty(HdfsDirectoryFactory.BLOCKCACHE_ENABLED, \"false\");\n\n      hdfsFactory.init(nl);\n\n      assertEquals(4, hdfsFactory.getConfig(HdfsDirectoryFactory.NRTCACHINGDIRECTORY_MAXMERGESIZEMB, 0));\n      assertTrue(hdfsFactory.getConfig(HdfsDirectoryFactory.BLOCKCACHE_ENABLED, false));\n\n      nl = new NamedList<>();\n      hdfsFactory.init(nl);\n      System.setProperty(HdfsDirectoryFactory.BLOCKCACHE_ENABLED, \"true\");\n\n      assertEquals(3, hdfsFactory.getConfig(HdfsDirectoryFactory.NRTCACHINGDIRECTORY_MAXMERGESIZEMB, 0));\n      assertTrue(hdfsFactory.getConfig(HdfsDirectoryFactory.BLOCKCACHE_ENABLED, false));\n\n      System.clearProperty(HdfsDirectoryFactory.NRTCACHINGDIRECTORY_MAXMERGESIZEMB);\n      System.clearProperty(HdfsDirectoryFactory.BLOCKCACHE_ENABLED);\n\n      assertEquals(0, hdfsFactory.getConfig(HdfsDirectoryFactory.NRTCACHINGDIRECTORY_MAXMERGESIZEMB, 0));\n      assertFalse(hdfsFactory.getConfig(HdfsDirectoryFactory.BLOCKCACHE_ENABLED, false));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testInitArgsOrSysPropConfig() throws Exception {\n    try(HdfsDirectoryFactory hdfsFactory = new HdfsDirectoryFactory()) {\n\n      // test sys prop config\n      System.setProperty(\"solr.hdfs.home\", HdfsTestUtil.getURI(dfsCluster) + \"/solr1\");\n      hdfsFactory.init(new NamedList<>());\n      String dataHome = hdfsFactory.getDataHome(new MockCoreDescriptor());\n\n      assertTrue(dataHome.endsWith(\"/solr1/mock/data\"));\n\n      System.clearProperty(\"solr.hdfs.home\");\n\n      // test init args config\n      NamedList<Object> nl = new NamedList<>();\n      nl.add(\"solr.hdfs.home\", HdfsTestUtil.getURI(dfsCluster) + \"/solr2\");\n      hdfsFactory.init(nl);\n      dataHome = hdfsFactory.getDataHome(new MockCoreDescriptor());\n\n      assertTrue(dataHome.endsWith(\"/solr2/mock/data\"));\n\n      // test sys prop and init args config - init args wins\n      System.setProperty(\"solr.hdfs.home\", HdfsTestUtil.getURI(dfsCluster) + \"/solr1\");\n      hdfsFactory.init(nl);\n      dataHome = hdfsFactory.getDataHome(new MockCoreDescriptor());\n\n      assertTrue(dataHome.endsWith(\"/solr2/mock/data\"));\n\n      System.clearProperty(\"solr.hdfs.home\");\n\n      // set conf dir by sys prop\n      Path confDir = createTempDir();\n\n      System.setProperty(HdfsDirectoryFactory.CONFIG_DIRECTORY, confDir.toString());\n\n      try (Directory dir = hdfsFactory\n          .create(HdfsTestUtil.getURI(dfsCluster) + \"/solr\", NoLockFactory.INSTANCE, DirContext.DEFAULT)) {\n        assertEquals(confDir.toString(), hdfsFactory.getConfDir());\n      }\n\n      // check bool and int getConf impls\n      nl = new NamedList<>();\n      nl.add(HdfsDirectoryFactory.NRTCACHINGDIRECTORY_MAXMERGESIZEMB, 4);\n      System.setProperty(HdfsDirectoryFactory.NRTCACHINGDIRECTORY_MAXMERGESIZEMB, \"3\");\n      nl.add(HdfsDirectoryFactory.BLOCKCACHE_ENABLED, true);\n      System.setProperty(HdfsDirectoryFactory.BLOCKCACHE_ENABLED, \"false\");\n\n      hdfsFactory.init(nl);\n\n      assertEquals(4, hdfsFactory.getConfig(HdfsDirectoryFactory.NRTCACHINGDIRECTORY_MAXMERGESIZEMB, 0));\n      assertTrue(hdfsFactory.getConfig(HdfsDirectoryFactory.BLOCKCACHE_ENABLED, false));\n\n      nl = new NamedList<>();\n      hdfsFactory.init(nl);\n      System.setProperty(HdfsDirectoryFactory.BLOCKCACHE_ENABLED, \"true\");\n\n      assertEquals(3, hdfsFactory.getConfig(HdfsDirectoryFactory.NRTCACHINGDIRECTORY_MAXMERGESIZEMB, 0));\n      assertTrue(hdfsFactory.getConfig(HdfsDirectoryFactory.BLOCKCACHE_ENABLED, false));\n\n      System.clearProperty(HdfsDirectoryFactory.NRTCACHINGDIRECTORY_MAXMERGESIZEMB);\n      System.clearProperty(HdfsDirectoryFactory.BLOCKCACHE_ENABLED);\n\n      assertEquals(0, hdfsFactory.getConfig(HdfsDirectoryFactory.NRTCACHINGDIRECTORY_MAXMERGESIZEMB, 0));\n      assertFalse(hdfsFactory.getConfig(HdfsDirectoryFactory.BLOCKCACHE_ENABLED, false));\n    }\n  }\n\n","bugFix":["2c801a37c38aedbd2ddbd27f2aaeb30cd5c7af0f","0ce6c1f997c135ab2e3d211580d089de539d7e20"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/HdfsDirectoryFactoryTest#testInitArgsOrSysPropConfig().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/HdfsDirectoryFactoryTest#testInitArgsOrSysPropConfig().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"try\"})\n  public void testInitArgsOrSysPropConfig() throws Exception {\n    try(HdfsDirectoryFactory hdfsFactory = new HdfsDirectoryFactory()) {\n      // test sys prop config\n      System.setProperty(HdfsDirectoryFactory.HDFS_HOME, HdfsTestUtil.getURI(dfsCluster) + \"/solr1\");\n      hdfsFactory.init(new NamedList<>());\n      String dataHome = hdfsFactory.getDataHome(new MockCoreDescriptor());\n\n      assertTrue(dataHome.endsWith(\"/solr1/mock/data\"));\n\n      System.clearProperty(HdfsDirectoryFactory.HDFS_HOME);\n\n      // test init args config\n      NamedList<Object> nl = new NamedList<>();\n      nl.add(HdfsDirectoryFactory.HDFS_HOME, HdfsTestUtil.getURI(dfsCluster) + \"/solr2\");\n      hdfsFactory.init(nl);\n      dataHome = hdfsFactory.getDataHome(new MockCoreDescriptor());\n\n      assertTrue(dataHome.endsWith(\"/solr2/mock/data\"));\n\n      // test sys prop and init args config - init args wins\n      System.setProperty(HdfsDirectoryFactory.HDFS_HOME, HdfsTestUtil.getURI(dfsCluster) + \"/solr1\");\n      hdfsFactory.init(nl);\n      dataHome = hdfsFactory.getDataHome(new MockCoreDescriptor());\n\n      assertTrue(dataHome.endsWith(\"/solr2/mock/data\"));\n\n      System.clearProperty(HdfsDirectoryFactory.HDFS_HOME);\n\n      // set conf dir by sys prop\n      Path confDir = createTempDir();\n\n      System.setProperty(HdfsDirectoryFactory.CONFIG_DIRECTORY, confDir.toString());\n\n      try (Directory dir = hdfsFactory\n          .create(HdfsTestUtil.getURI(dfsCluster) + \"/solr\", NoLockFactory.INSTANCE, DirContext.DEFAULT)) {\n        assertEquals(confDir.toString(), hdfsFactory.getConfDir());\n      }\n\n      // check bool and int getConf impls\n      nl = new NamedList<>();\n      nl.add(HdfsDirectoryFactory.NRTCACHINGDIRECTORY_MAXMERGESIZEMB, 4);\n      System.setProperty(HdfsDirectoryFactory.NRTCACHINGDIRECTORY_MAXMERGESIZEMB, \"3\");\n      nl.add(HdfsDirectoryFactory.BLOCKCACHE_ENABLED, true);\n      System.setProperty(HdfsDirectoryFactory.BLOCKCACHE_ENABLED, \"false\");\n\n      hdfsFactory.init(nl);\n\n      assertEquals(4, hdfsFactory.getConfig(HdfsDirectoryFactory.NRTCACHINGDIRECTORY_MAXMERGESIZEMB, 0));\n      assertTrue(hdfsFactory.getConfig(HdfsDirectoryFactory.BLOCKCACHE_ENABLED, false));\n\n      nl = new NamedList<>();\n      hdfsFactory.init(nl);\n      System.setProperty(HdfsDirectoryFactory.BLOCKCACHE_ENABLED, \"true\");\n\n      assertEquals(3, hdfsFactory.getConfig(HdfsDirectoryFactory.NRTCACHINGDIRECTORY_MAXMERGESIZEMB, 0));\n      assertTrue(hdfsFactory.getConfig(HdfsDirectoryFactory.BLOCKCACHE_ENABLED, false));\n\n      System.clearProperty(HdfsDirectoryFactory.NRTCACHINGDIRECTORY_MAXMERGESIZEMB);\n      System.clearProperty(HdfsDirectoryFactory.BLOCKCACHE_ENABLED);\n\n      assertEquals(0, hdfsFactory.getConfig(HdfsDirectoryFactory.NRTCACHINGDIRECTORY_MAXMERGESIZEMB, 0));\n      assertFalse(hdfsFactory.getConfig(HdfsDirectoryFactory.BLOCKCACHE_ENABLED, false));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testInitArgsOrSysPropConfig() throws Exception {\n    try(HdfsDirectoryFactory hdfsFactory = new HdfsDirectoryFactory()) {\n      // test sys prop config\n      System.setProperty(HdfsDirectoryFactory.HDFS_HOME, HdfsTestUtil.getURI(dfsCluster) + \"/solr1\");\n      hdfsFactory.init(new NamedList<>());\n      String dataHome = hdfsFactory.getDataHome(new MockCoreDescriptor());\n\n      assertTrue(dataHome.endsWith(\"/solr1/mock/data\"));\n\n      System.clearProperty(HdfsDirectoryFactory.HDFS_HOME);\n\n      // test init args config\n      NamedList<Object> nl = new NamedList<>();\n      nl.add(HdfsDirectoryFactory.HDFS_HOME, HdfsTestUtil.getURI(dfsCluster) + \"/solr2\");\n      hdfsFactory.init(nl);\n      dataHome = hdfsFactory.getDataHome(new MockCoreDescriptor());\n\n      assertTrue(dataHome.endsWith(\"/solr2/mock/data\"));\n\n      // test sys prop and init args config - init args wins\n      System.setProperty(HdfsDirectoryFactory.HDFS_HOME, HdfsTestUtil.getURI(dfsCluster) + \"/solr1\");\n      hdfsFactory.init(nl);\n      dataHome = hdfsFactory.getDataHome(new MockCoreDescriptor());\n\n      assertTrue(dataHome.endsWith(\"/solr2/mock/data\"));\n\n      System.clearProperty(HdfsDirectoryFactory.HDFS_HOME);\n\n      // set conf dir by sys prop\n      Path confDir = createTempDir();\n\n      System.setProperty(HdfsDirectoryFactory.CONFIG_DIRECTORY, confDir.toString());\n\n      try (Directory dir = hdfsFactory\n          .create(HdfsTestUtil.getURI(dfsCluster) + \"/solr\", NoLockFactory.INSTANCE, DirContext.DEFAULT)) {\n        assertEquals(confDir.toString(), hdfsFactory.getConfDir());\n      }\n\n      // check bool and int getConf impls\n      nl = new NamedList<>();\n      nl.add(HdfsDirectoryFactory.NRTCACHINGDIRECTORY_MAXMERGESIZEMB, 4);\n      System.setProperty(HdfsDirectoryFactory.NRTCACHINGDIRECTORY_MAXMERGESIZEMB, \"3\");\n      nl.add(HdfsDirectoryFactory.BLOCKCACHE_ENABLED, true);\n      System.setProperty(HdfsDirectoryFactory.BLOCKCACHE_ENABLED, \"false\");\n\n      hdfsFactory.init(nl);\n\n      assertEquals(4, hdfsFactory.getConfig(HdfsDirectoryFactory.NRTCACHINGDIRECTORY_MAXMERGESIZEMB, 0));\n      assertTrue(hdfsFactory.getConfig(HdfsDirectoryFactory.BLOCKCACHE_ENABLED, false));\n\n      nl = new NamedList<>();\n      hdfsFactory.init(nl);\n      System.setProperty(HdfsDirectoryFactory.BLOCKCACHE_ENABLED, \"true\");\n\n      assertEquals(3, hdfsFactory.getConfig(HdfsDirectoryFactory.NRTCACHINGDIRECTORY_MAXMERGESIZEMB, 0));\n      assertTrue(hdfsFactory.getConfig(HdfsDirectoryFactory.BLOCKCACHE_ENABLED, false));\n\n      System.clearProperty(HdfsDirectoryFactory.NRTCACHINGDIRECTORY_MAXMERGESIZEMB);\n      System.clearProperty(HdfsDirectoryFactory.BLOCKCACHE_ENABLED);\n\n      assertEquals(0, hdfsFactory.getConfig(HdfsDirectoryFactory.NRTCACHINGDIRECTORY_MAXMERGESIZEMB, 0));\n      assertFalse(hdfsFactory.getConfig(HdfsDirectoryFactory.BLOCKCACHE_ENABLED, false));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2c801a37c38aedbd2ddbd27f2aaeb30cd5c7af0f":["3def6e0e7b7566dd7f04a3514e77ee97a40fc78a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ce6c1f997c135ab2e3d211580d089de539d7e20":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["add53de9835b2cd1a7a80b4e0036afee171c9fdf"],"add53de9835b2cd1a7a80b4e0036afee171c9fdf":["2c801a37c38aedbd2ddbd27f2aaeb30cd5c7af0f"],"3def6e0e7b7566dd7f04a3514e77ee97a40fc78a":["0ce6c1f997c135ab2e3d211580d089de539d7e20"]},"commit2Childs":{"2c801a37c38aedbd2ddbd27f2aaeb30cd5c7af0f":["add53de9835b2cd1a7a80b4e0036afee171c9fdf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ce6c1f997c135ab2e3d211580d089de539d7e20"],"0ce6c1f997c135ab2e3d211580d089de539d7e20":["3def6e0e7b7566dd7f04a3514e77ee97a40fc78a"],"3def6e0e7b7566dd7f04a3514e77ee97a40fc78a":["2c801a37c38aedbd2ddbd27f2aaeb30cd5c7af0f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"add53de9835b2cd1a7a80b4e0036afee171c9fdf":["e98520789adb1d5ad05afb4956eca0944a929688"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}