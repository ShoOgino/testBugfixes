{"path":"lucene/backwards/src/java/org/apache/lucene/search/BooleanQuery#rewrite(IndexReader).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/BooleanQuery#rewrite(IndexReader).mjava","pathOld":"backwards/src/java/org/apache/lucene/search/BooleanQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (minNrShouldMatch == 0 && clauses.size() == 1) {                    // optimize 1-clause queries\n      BooleanClause c = clauses.get(0);\n      if (!c.isProhibited()) {\t\t\t  // just return clause\n\n        Query query = c.getQuery().rewrite(reader);    // rewrite first\n\n        if (getBoost() != 1.0f) {                 // incorporate boost\n          if (query == c.getQuery())                   // if rewrite was no-op\n            query = (Query)query.clone();         // then clone before boost\n          query.setBoost(getBoost() * query.getBoost());\n        }\n\n        return query;\n      }\n    }\n\n    BooleanQuery clone = null;                    // recursively rewrite\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = clauses.get(i);\n      Query query = c.getQuery().rewrite(reader);\n      if (query != c.getQuery()) {                     // clause rewrote: must clone\n        if (clone == null)\n          clone = (BooleanQuery)this.clone();\n        clone.clauses.set(i, new BooleanClause(query, c.getOccur()));\n      }\n    }\n    if (clone != null) {\n      return clone;                               // some clauses rewrote\n    } else\n      return this;                                // no clauses rewrote\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (minNrShouldMatch == 0 && clauses.size() == 1) {                    // optimize 1-clause queries\n      BooleanClause c = clauses.get(0);\n      if (!c.isProhibited()) {\t\t\t  // just return clause\n\n        Query query = c.getQuery().rewrite(reader);    // rewrite first\n\n        if (getBoost() != 1.0f) {                 // incorporate boost\n          if (query == c.getQuery())                   // if rewrite was no-op\n            query = (Query)query.clone();         // then clone before boost\n          query.setBoost(getBoost() * query.getBoost());\n        }\n\n        return query;\n      }\n    }\n\n    BooleanQuery clone = null;                    // recursively rewrite\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = clauses.get(i);\n      Query query = c.getQuery().rewrite(reader);\n      if (query != c.getQuery()) {                     // clause rewrote: must clone\n        if (clone == null)\n          clone = (BooleanQuery)this.clone();\n        clone.clauses.set(i, new BooleanClause(query, c.getOccur()));\n      }\n    }\n    if (clone != null) {\n      return clone;                               // some clauses rewrote\n    } else\n      return this;                                // no clauses rewrote\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/search/BooleanQuery#rewrite(IndexReader).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (minNrShouldMatch == 0 && clauses.size() == 1) {                    // optimize 1-clause queries\n      BooleanClause c = clauses.get(0);\n      if (!c.isProhibited()) {\t\t\t  // just return clause\n\n        Query query = c.getQuery().rewrite(reader);    // rewrite first\n\n        if (getBoost() != 1.0f) {                 // incorporate boost\n          if (query == c.getQuery())                   // if rewrite was no-op\n            query = (Query)query.clone();         // then clone before boost\n          query.setBoost(getBoost() * query.getBoost());\n        }\n\n        return query;\n      }\n    }\n\n    BooleanQuery clone = null;                    // recursively rewrite\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = clauses.get(i);\n      Query query = c.getQuery().rewrite(reader);\n      if (query != c.getQuery()) {                     // clause rewrote: must clone\n        if (clone == null)\n          clone = (BooleanQuery)this.clone();\n        clone.clauses.set(i, new BooleanClause(query, c.getOccur()));\n      }\n    }\n    if (clone != null) {\n      return clone;                               // some clauses rewrote\n    } else\n      return this;                                // no clauses rewrote\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}