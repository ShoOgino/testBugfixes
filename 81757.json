{"path":"src/java/org/apache/solr/handler/AnalysisRequestHandler#readDoc(XMLStreamReader).mjava","commits":[{"id":"65b5c1fd5fa6357d1ab6681080073a45c2e87962","date":1203480393,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/AnalysisRequestHandler#readDoc(XMLStreamReader).mjava","pathOld":"/dev/null","sourceNew":"  SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {\n    SolrInputDocument doc = new SolrInputDocument();\n\n    StringBuilder text = new StringBuilder();\n    String name = null;\n    String attrName = \"\";\n    float boost = 1.0f;\n    boolean isNull = false;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          if (\"doc\".equals(parser.getLocalName())) {\n            return doc;\n          } else if (\"field\".equals(parser.getLocalName())) {\n            if (!isNull) {\n              doc.addField(name, text.toString(), boost);\n              boost = 1.0f;\n            }\n          }\n          break;\n\n        case XMLStreamConstants.START_ELEMENT:\n          text.setLength(0);\n          String localName = parser.getLocalName();\n          if (!\"field\".equals(localName)) {\n            log.warning(\"unexpected XML tag doc/\" + localName);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag doc/\" + localName);\n          }\n\n          String attrVal = \"\";\n          for (int i = 0; i < parser.getAttributeCount(); i++) {\n            attrName = parser.getAttributeLocalName(i);\n            attrVal = parser.getAttributeValue(i);\n            if (\"name\".equals(attrName)) {\n              name = attrVal;\n            }\n          }\n          break;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00da8b51bdeae168a5b26ec506db372b219ca7a2","date":1221704186,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/AnalysisRequestHandler#readDoc(XMLStreamReader).mjava","pathOld":"src/java/org/apache/solr/handler/AnalysisRequestHandler#readDoc(XMLStreamReader).mjava","sourceNew":"  SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {\n    SolrInputDocument doc = new SolrInputDocument();\n\n    StringBuilder text = new StringBuilder();\n    String name = null;\n    String attrName = \"\";\n    float boost = 1.0f;\n    boolean isNull = false;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          if (\"doc\".equals(parser.getLocalName())) {\n            return doc;\n          } else if (\"field\".equals(parser.getLocalName())) {\n            if (!isNull) {\n              doc.addField(name, text.toString(), boost);\n              boost = 1.0f;\n            }\n          }\n          break;\n\n        case XMLStreamConstants.START_ELEMENT:\n          text.setLength(0);\n          String localName = parser.getLocalName();\n          if (!\"field\".equals(localName)) {\n            log.warn(\"unexpected XML tag doc/\" + localName);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag doc/\" + localName);\n          }\n\n          String attrVal = \"\";\n          for (int i = 0; i < parser.getAttributeCount(); i++) {\n            attrName = parser.getAttributeLocalName(i);\n            attrVal = parser.getAttributeValue(i);\n            if (\"name\".equals(attrName)) {\n              name = attrVal;\n            }\n          }\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {\n    SolrInputDocument doc = new SolrInputDocument();\n\n    StringBuilder text = new StringBuilder();\n    String name = null;\n    String attrName = \"\";\n    float boost = 1.0f;\n    boolean isNull = false;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          if (\"doc\".equals(parser.getLocalName())) {\n            return doc;\n          } else if (\"field\".equals(parser.getLocalName())) {\n            if (!isNull) {\n              doc.addField(name, text.toString(), boost);\n              boost = 1.0f;\n            }\n          }\n          break;\n\n        case XMLStreamConstants.START_ELEMENT:\n          text.setLength(0);\n          String localName = parser.getLocalName();\n          if (!\"field\".equals(localName)) {\n            log.warning(\"unexpected XML tag doc/\" + localName);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag doc/\" + localName);\n          }\n\n          String attrVal = \"\";\n          for (int i = 0; i < parser.getAttributeCount(); i++) {\n            attrName = parser.getAttributeLocalName(i);\n            attrVal = parser.getAttributeValue(i);\n            if (\"name\".equals(attrName)) {\n              name = attrVal;\n            }\n          }\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandler#readDoc(XMLStreamReader).mjava","pathOld":"src/java/org/apache/solr/handler/AnalysisRequestHandler#readDoc(XMLStreamReader).mjava","sourceNew":"  SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {\n    SolrInputDocument doc = new SolrInputDocument();\n\n    StringBuilder text = new StringBuilder();\n    String name = null;\n    String attrName = \"\";\n    float boost = 1.0f;\n    boolean isNull = false;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          if (\"doc\".equals(parser.getLocalName())) {\n            return doc;\n          } else if (\"field\".equals(parser.getLocalName())) {\n            if (!isNull) {\n              doc.addField(name, text.toString(), boost);\n              boost = 1.0f;\n            }\n          }\n          break;\n\n        case XMLStreamConstants.START_ELEMENT:\n          text.setLength(0);\n          String localName = parser.getLocalName();\n          if (!\"field\".equals(localName)) {\n            log.warn(\"unexpected XML tag doc/\" + localName);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag doc/\" + localName);\n          }\n\n          String attrVal = \"\";\n          for (int i = 0; i < parser.getAttributeCount(); i++) {\n            attrName = parser.getAttributeLocalName(i);\n            attrVal = parser.getAttributeValue(i);\n            if (\"name\".equals(attrName)) {\n              name = attrVal;\n            }\n          }\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {\n    SolrInputDocument doc = new SolrInputDocument();\n\n    StringBuilder text = new StringBuilder();\n    String name = null;\n    String attrName = \"\";\n    float boost = 1.0f;\n    boolean isNull = false;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          if (\"doc\".equals(parser.getLocalName())) {\n            return doc;\n          } else if (\"field\".equals(parser.getLocalName())) {\n            if (!isNull) {\n              doc.addField(name, text.toString(), boost);\n              boost = 1.0f;\n            }\n          }\n          break;\n\n        case XMLStreamConstants.START_ELEMENT:\n          text.setLength(0);\n          String localName = parser.getLocalName();\n          if (!\"field\".equals(localName)) {\n            log.warn(\"unexpected XML tag doc/\" + localName);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag doc/\" + localName);\n          }\n\n          String attrVal = \"\";\n          for (int i = 0; i < parser.getAttributeCount(); i++) {\n            attrName = parser.getAttributeLocalName(i);\n            attrVal = parser.getAttributeValue(i);\n            if (\"name\".equals(attrName)) {\n              name = attrVal;\n            }\n          }\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["65b5c1fd5fa6357d1ab6681080073a45c2e87962"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"65b5c1fd5fa6357d1ab6681080073a45c2e87962":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["65b5c1fd5fa6357d1ab6681080073a45c2e87962"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["ad94625fb8d088209f46650c8097196fec67f00c"],"65b5c1fd5fa6357d1ab6681080073a45c2e87962":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}