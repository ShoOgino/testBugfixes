{"path":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingTest#encoderTest(IntEncoder,IntsRef,IntsRef).mjava","commits":[{"id":"bceb02c33032dd9bbf107cd06d0b74e5db4f110a","date":1357909746,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingTest#encoderTest(IntEncoder,IntsRef,IntsRef).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingTest#encoderTest(IntEncoder).mjava","sourceNew":"  private static void encoderTest(IntEncoder encoder, IntsRef data, IntsRef expected) throws IOException {\n    // ensure toString is implemented\n    String toString = encoder.toString();\n    assertFalse(toString.startsWith(encoder.getClass().getName() + \"@\"));\n    IntDecoder decoder = encoder.createMatchingDecoder();\n    toString = decoder.toString();\n    assertFalse(toString.startsWith(decoder.getClass().getName() + \"@\"));\n    \n    BytesRef bytes = new BytesRef(100); // some initial capacity - encoders should grow the byte[]\n    IntsRef values = new IntsRef(100); // some initial capacity - decoders should grow the int[]\n    encoding(encoder, data, bytes);\n    decoding(bytes, values, encoder.createMatchingDecoder());\n    assertTrue(expected.intsEquals(values));\n  }\n\n","sourceOld":"  private static void encoderTest(IntEncoder encoder) {\n\n    // ensure toString is implemented\n    String toString = encoder.toString();\n    assertFalse(toString.startsWith(encoder.getClass().getName() + \"@\"));\n    IntDecoder decoder = encoder.createMatchingDecoder();\n    toString = decoder.toString();\n    assertFalse(toString.startsWith(decoder.getClass().getName() + \"@\"));\n    \n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n    try {\n      encoding(encoder, baos);\n      decoding(baos, encoder.createMatchingDecoder());\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(e.getMessage());\n    }\n    \n    baos.reset();\n\n    try {\n      encoding(encoder, baos);\n      decoding(baos, encoder.createMatchingDecoder());\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingTest#encoderTest(IntEncoder,IntsRef,IntsRef).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingTest#encoderTest(IntEncoder).mjava","sourceNew":"  private static void encoderTest(IntEncoder encoder, IntsRef data, IntsRef expected) throws IOException {\n    // ensure toString is implemented\n    String toString = encoder.toString();\n    assertFalse(toString.startsWith(encoder.getClass().getName() + \"@\"));\n    IntDecoder decoder = encoder.createMatchingDecoder();\n    toString = decoder.toString();\n    assertFalse(toString.startsWith(decoder.getClass().getName() + \"@\"));\n    \n    BytesRef bytes = new BytesRef(100); // some initial capacity - encoders should grow the byte[]\n    IntsRef values = new IntsRef(100); // some initial capacity - decoders should grow the int[]\n    encoding(encoder, data, bytes);\n    decoding(bytes, values, encoder.createMatchingDecoder());\n    assertTrue(expected.intsEquals(values));\n  }\n\n","sourceOld":"  private static void encoderTest(IntEncoder encoder) {\n\n    // ensure toString is implemented\n    String toString = encoder.toString();\n    assertFalse(toString.startsWith(encoder.getClass().getName() + \"@\"));\n    IntDecoder decoder = encoder.createMatchingDecoder();\n    toString = decoder.toString();\n    assertFalse(toString.startsWith(decoder.getClass().getName() + \"@\"));\n    \n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n    try {\n      encoding(encoder, baos);\n      decoding(baos, encoder.createMatchingDecoder());\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(e.getMessage());\n    }\n    \n    baos.reset();\n\n    try {\n      encoding(encoder, baos);\n      decoding(baos, encoder.createMatchingDecoder());\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad883775f8b169218a8da5ffeb7ae26459443936","date":1358342713,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingTest#encoderTest(IntEncoder,IntsRef,IntsRef).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingTest#encoderTest(IntEncoder,IntsRef,IntsRef).mjava","sourceNew":"  private static void encoderTest(IntEncoder encoder, IntsRef data, IntsRef expected) throws IOException {\n    // ensure toString is implemented\n    String toString = encoder.toString();\n    assertFalse(toString.startsWith(encoder.getClass().getName() + \"@\"));\n    IntDecoder decoder = encoder.createMatchingDecoder();\n    toString = decoder.toString();\n    assertFalse(toString.startsWith(decoder.getClass().getName() + \"@\"));\n    \n    BytesRef bytes = new BytesRef(100); // some initial capacity - encoders should grow the byte[]\n    IntsRef values = new IntsRef(100); // some initial capacity - decoders should grow the int[]\n    for (int i = 0; i < 2; i++) {\n      // run 2 iterations to catch encoders/decoders which don't reset properly\n      encoding(encoder, data, bytes);\n      decoding(bytes, values, encoder.createMatchingDecoder());\n      assertTrue(expected.intsEquals(values));\n    }\n  }\n\n","sourceOld":"  private static void encoderTest(IntEncoder encoder, IntsRef data, IntsRef expected) throws IOException {\n    // ensure toString is implemented\n    String toString = encoder.toString();\n    assertFalse(toString.startsWith(encoder.getClass().getName() + \"@\"));\n    IntDecoder decoder = encoder.createMatchingDecoder();\n    toString = decoder.toString();\n    assertFalse(toString.startsWith(decoder.getClass().getName() + \"@\"));\n    \n    BytesRef bytes = new BytesRef(100); // some initial capacity - encoders should grow the byte[]\n    IntsRef values = new IntsRef(100); // some initial capacity - decoders should grow the int[]\n    encoding(encoder, data, bytes);\n    decoding(bytes, values, encoder.createMatchingDecoder());\n    assertTrue(expected.intsEquals(values));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingTest#encoderTest(IntEncoder,IntsRef,IntsRef).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingTest#encoderTest(IntEncoder,IntsRef,IntsRef).mjava","sourceNew":"  private static void encoderTest(IntEncoder encoder, IntsRef data, IntsRef expected) throws IOException {\n    // ensure toString is implemented\n    String toString = encoder.toString();\n    assertFalse(toString.startsWith(encoder.getClass().getName() + \"@\"));\n    IntDecoder decoder = encoder.createMatchingDecoder();\n    toString = decoder.toString();\n    assertFalse(toString.startsWith(decoder.getClass().getName() + \"@\"));\n    \n    BytesRef bytes = new BytesRef(100); // some initial capacity - encoders should grow the byte[]\n    IntsRef values = new IntsRef(100); // some initial capacity - decoders should grow the int[]\n    for (int i = 0; i < 2; i++) {\n      // run 2 iterations to catch encoders/decoders which don't reset properly\n      encoding(encoder, data, bytes);\n      decoding(bytes, values, encoder.createMatchingDecoder());\n      assertTrue(expected.intsEquals(values));\n    }\n  }\n\n","sourceOld":"  private static void encoderTest(IntEncoder encoder, IntsRef data, IntsRef expected) throws IOException {\n    // ensure toString is implemented\n    String toString = encoder.toString();\n    assertFalse(toString.startsWith(encoder.getClass().getName() + \"@\"));\n    IntDecoder decoder = encoder.createMatchingDecoder();\n    toString = decoder.toString();\n    assertFalse(toString.startsWith(decoder.getClass().getName() + \"@\"));\n    \n    BytesRef bytes = new BytesRef(100); // some initial capacity - encoders should grow the byte[]\n    IntsRef values = new IntsRef(100); // some initial capacity - decoders should grow the int[]\n    encoding(encoder, data, bytes);\n    decoding(bytes, values, encoder.createMatchingDecoder());\n    assertTrue(expected.intsEquals(values));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/encoding/EncodingTest#encoderTest(IntEncoder,IntsRef,IntsRef).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingTest#encoderTest(IntEncoder,IntsRef,IntsRef).mjava","sourceNew":"  private static void encoderTest(IntEncoder encoder, IntsRef data, IntsRef expected) throws IOException {\n    // ensure toString is implemented\n    String toString = encoder.toString();\n    assertFalse(toString.startsWith(encoder.getClass().getName() + \"@\"));\n    IntDecoder decoder = encoder.createMatchingDecoder();\n    toString = decoder.toString();\n    assertFalse(toString.startsWith(decoder.getClass().getName() + \"@\"));\n    \n    BytesRef bytes = new BytesRef(100); // some initial capacity - encoders should grow the byte[]\n    IntsRef values = new IntsRef(100); // some initial capacity - decoders should grow the int[]\n    for (int i = 0; i < 2; i++) {\n      // run 2 iterations to catch encoders/decoders which don't reset properly\n      encoding(encoder, data, bytes);\n      decoding(bytes, values, encoder.createMatchingDecoder());\n      assertTrue(expected.intsEquals(values));\n    }\n  }\n\n","sourceOld":"  private static void encoderTest(IntEncoder encoder, IntsRef data, IntsRef expected) throws IOException {\n    // ensure toString is implemented\n    String toString = encoder.toString();\n    assertFalse(toString.startsWith(encoder.getClass().getName() + \"@\"));\n    IntDecoder decoder = encoder.createMatchingDecoder();\n    toString = decoder.toString();\n    assertFalse(toString.startsWith(decoder.getClass().getName() + \"@\"));\n    \n    BytesRef bytes = new BytesRef(100); // some initial capacity - encoders should grow the byte[]\n    IntsRef values = new IntsRef(100); // some initial capacity - decoders should grow the int[]\n    for (int i = 0; i < 2; i++) {\n      // run 2 iterations to catch encoders/decoders which don't reset properly\n      encoding(encoder, data, bytes);\n      decoding(bytes, values, encoder.createMatchingDecoder());\n      assertTrue(expected.intsEquals(values));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["ad883775f8b169218a8da5ffeb7ae26459443936"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["4e6354dd7c71fe122926fc53d7d29f715b1283db","ad883775f8b169218a8da5ffeb7ae26459443936"],"bceb02c33032dd9bbf107cd06d0b74e5db4f110a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bceb02c33032dd9bbf107cd06d0b74e5db4f110a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"],"ad883775f8b169218a8da5ffeb7ae26459443936":["bceb02c33032dd9bbf107cd06d0b74e5db4f110a"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"bceb02c33032dd9bbf107cd06d0b74e5db4f110a":["4e6354dd7c71fe122926fc53d7d29f715b1283db","ad883775f8b169218a8da5ffeb7ae26459443936"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bceb02c33032dd9bbf107cd06d0b74e5db4f110a","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["c4015cd39dff8d4dec562d909f9766debac53aa6"],"ad883775f8b169218a8da5ffeb7ae26459443936":["607428da722dcb3e86bbd11c63de8986e6275c36","c4015cd39dff8d4dec562d909f9766debac53aa6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}