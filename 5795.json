{"path":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinWeight#matches(LeafReaderContext,int).mjava","commits":[{"id":"657704b225b01c6ff4bada5b6667f1f60aaaad0f","date":1523436207,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinWeight#matches(LeafReaderContext,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Matches matches(LeafReaderContext context, int doc) throws IOException {\n      // The default implementation would delegate to the joinQuery's Weight, which\n      // matches on children.  We need to match on the parent instead\n      Scorer scorer = scorer(context);\n      if (scorer == null) {\n        return null;\n      }\n      final TwoPhaseIterator twoPhase = scorer.twoPhaseIterator();\n      if (twoPhase == null) {\n        if (scorer.iterator().advance(doc) != doc) {\n          return null;\n        }\n      }\n      else {\n        if (twoPhase.approximation().advance(doc) != doc || twoPhase.matches() == false) {\n          return null;\n        }\n      }\n      return Matches.MATCH_WITH_NO_TERMS;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43345f1452f9510f8aaadae6156fe0c834e7d957","date":1523483670,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinWeight#matches(LeafReaderContext,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Matches matches(LeafReaderContext context, int doc) throws IOException {\n      // The default implementation would delegate to the joinQuery's Weight, which\n      // matches on children.  We need to match on the parent instead\n      Scorer scorer = scorer(context);\n      if (scorer == null) {\n        return null;\n      }\n      final TwoPhaseIterator twoPhase = scorer.twoPhaseIterator();\n      if (twoPhase == null) {\n        if (scorer.iterator().advance(doc) != doc) {\n          return null;\n        }\n      }\n      else {\n        if (twoPhase.approximation().advance(doc) != doc || twoPhase.matches() == false) {\n          return null;\n        }\n      }\n      return Matches.MATCH_WITH_NO_TERMS;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2375622520a4e480775e3104a2f9a423536755b4","date":1536005521,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinWeight#matches(LeafReaderContext,int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinWeight#matches(LeafReaderContext,int).mjava","sourceNew":"    @Override\n    public Matches matches(LeafReaderContext context, int doc) throws IOException {\n      // The default implementation would delegate to the joinQuery's Weight, which\n      // matches on children.  We need to match on the parent instead\n      Scorer scorer = scorer(context);\n      if (scorer == null) {\n        return null;\n      }\n      final TwoPhaseIterator twoPhase = scorer.twoPhaseIterator();\n      if (twoPhase == null) {\n        if (scorer.iterator().advance(doc) != doc) {\n          return null;\n        }\n      }\n      else {\n        if (twoPhase.approximation().advance(doc) != doc || twoPhase.matches() == false) {\n          return null;\n        }\n      }\n      return MatchesUtils.MATCH_WITH_NO_TERMS;\n    }\n\n","sourceOld":"    @Override\n    public Matches matches(LeafReaderContext context, int doc) throws IOException {\n      // The default implementation would delegate to the joinQuery's Weight, which\n      // matches on children.  We need to match on the parent instead\n      Scorer scorer = scorer(context);\n      if (scorer == null) {\n        return null;\n      }\n      final TwoPhaseIterator twoPhase = scorer.twoPhaseIterator();\n      if (twoPhase == null) {\n        if (scorer.iterator().advance(doc) != doc) {\n          return null;\n        }\n      }\n      else {\n        if (twoPhase.approximation().advance(doc) != doc || twoPhase.matches() == false) {\n          return null;\n        }\n      }\n      return Matches.MATCH_WITH_NO_TERMS;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"657704b225b01c6ff4bada5b6667f1f60aaaad0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2375622520a4e480775e3104a2f9a423536755b4":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","657704b225b01c6ff4bada5b6667f1f60aaaad0f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2375622520a4e480775e3104a2f9a423536755b4"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["657704b225b01c6ff4bada5b6667f1f60aaaad0f","43345f1452f9510f8aaadae6156fe0c834e7d957"],"657704b225b01c6ff4bada5b6667f1f60aaaad0f":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"2375622520a4e480775e3104a2f9a423536755b4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["2375622520a4e480775e3104a2f9a423536755b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}