{"path":"buildSrc/src/main/java/org/apache/lucene/gradle/ErrorReportingTestListener#afterSuite(TestDescriptor,TestResult).mjava","commits":[{"id":"78a42256131aa2e3d45d4879b3e3b17a3321bc74","date":1578432198,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"buildSrc/src/main/java/org/apache/lucene/gradle/ErrorReportingTestListener#afterSuite(TestDescriptor,TestResult).mjava","pathOld":"/dev/null","sourceNew":"   @Override\n   public void afterSuite(final TestDescriptor suite, TestResult result) {\n      TestKey key = TestKey.of(suite);\n      try {\n         // if the test suite failed, report all captured output\n         if (Objects.equals(result.getResultType(), TestResult.ResultType.FAILURE)) {\n            reportFailure(suite, outputHandlers.get(key));\n         }\n      } catch (IOException e) {\n         throw new UncheckedIOException(\"Error reading test suite output\", e);\n      } finally {\n         OutputHandler writer = outputHandlers.remove(key);\n         if (writer != null) {\n            try {\n               writer.close();\n            } catch (IOException e) {\n               LOGGER.error(\"Failed to close test suite's event writer for: \" + key, e);\n            }\n         }\n      }\n   }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"beebcecc300e4dc30662cf0a153b547b4dfc9a9d","date":1578477307,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"buildSrc/src/main/java/org/apache/lucene/gradle/ErrorReportingTestListener#afterSuite(TestDescriptor,TestResult).mjava","pathOld":"buildSrc/src/main/java/org/apache/lucene/gradle/ErrorReportingTestListener#afterSuite(TestDescriptor,TestResult).mjava","sourceNew":"   @Override\n   public void afterSuite(final TestDescriptor suite, TestResult result) {\n      if (suite.getParent() == null || suite.getName().startsWith(\"Gradle\")) {\n         return;\n      }\n\n      TestKey key = TestKey.of(suite);\n      try {\n         OutputHandler outputHandler = outputHandlers.get(key);\n         if (outputHandler != null) {\n            long length = outputHandler.length();\n            if (length > 1024 * 1024 * 10) {\n               LOGGER.warn(String.format(Locale.ROOT, \"WARNING: Test %s wrote %,d bytes of output.\",\n                   suite.getName(),\n                   length));\n            }\n         }\n\n         boolean echoOutput = Objects.equals(result.getResultType(), TestResult.ResultType.FAILURE);\n         boolean dumpOutput = echoOutput; // Force output dumping.\n\n         // If the test suite failed, report output.\n         if (dumpOutput || echoOutput) {\n            Files.createDirectories(outputsDir);\n            Path outputLog = outputsDir.resolve(getOutputLogName(suite));\n\n            // Save the output of a failing test to disk.\n            try (Writer w = Files.newBufferedWriter(outputLog, StandardCharsets.UTF_8)) {\n               if (outputHandler != null) {\n                  outputHandler.copyTo(w);\n               }\n            }\n\n            if (echoOutput) {\n               synchronized (this) {\n                  System.out.println(\"\");\n                  System.out.println(suite.getClassName() + \" > test suite's output saved to \" + outputLog + \", copied below:\");\n                  try (BufferedReader reader = Files.newBufferedReader(outputLog, StandardCharsets.UTF_8)) {\n                     char[] buf = new char[1024];\n                     int len;\n                     while ((len = reader.read(buf)) >= 0) {\n                        System.out.print(new String(buf, 0, len));\n                     }\n                     System.out.println();\n                  }\n               }\n            }\n         }\n      } catch (IOException e) {\n         throw new UncheckedIOException(e);\n      } finally {\n         OutputHandler handler = outputHandlers.remove(key);\n         if (handler != null) {\n            try {\n               handler.close();\n            } catch (IOException e) {\n               LOGGER.error(\"Failed to close output handler for: \" + key, e);\n            }\n         }\n      }\n   }\n\n","sourceOld":"   @Override\n   public void afterSuite(final TestDescriptor suite, TestResult result) {\n      TestKey key = TestKey.of(suite);\n      try {\n         // if the test suite failed, report all captured output\n         if (Objects.equals(result.getResultType(), TestResult.ResultType.FAILURE)) {\n            reportFailure(suite, outputHandlers.get(key));\n         }\n      } catch (IOException e) {\n         throw new UncheckedIOException(\"Error reading test suite output\", e);\n      } finally {\n         OutputHandler writer = outputHandlers.remove(key);\n         if (writer != null) {\n            try {\n               writer.close();\n            } catch (IOException e) {\n               LOGGER.error(\"Failed to close test suite's event writer for: \" + key, e);\n            }\n         }\n      }\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43bf0517439c498dd87bc58987d6a98633b6ae0d","date":1578479914,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"buildSrc/src/main/java/org/apache/lucene/gradle/ErrorReportingTestListener#afterSuite(TestDescriptor,TestResult).mjava","pathOld":"buildSrc/src/main/java/org/apache/lucene/gradle/ErrorReportingTestListener#afterSuite(TestDescriptor,TestResult).mjava","sourceNew":"   @Override\n   public void afterSuite(final TestDescriptor suite, TestResult result) {\n      if (suite.getParent() == null || suite.getName().startsWith(\"Gradle\")) {\n         return;\n      }\n\n      TestKey key = TestKey.of(suite);\n      try {\n         OutputHandler outputHandler = outputHandlers.get(key);\n         if (outputHandler != null) {\n            long length = outputHandler.length();\n            if (length > 1024 * 1024 * 10) {\n               LOGGER.warn(String.format(Locale.ROOT, \"WARNING: Test %s wrote %,d bytes of output.\",\n                   suite.getName(),\n                   length));\n            }\n         }\n\n         boolean echoOutput = Objects.equals(result.getResultType(), TestResult.ResultType.FAILURE);\n         boolean dumpOutput = echoOutput;\n\n         // If the test suite failed, report output.\n         if (dumpOutput || echoOutput) {\n            Files.createDirectories(outputsDir);\n            Path outputLog = outputsDir.resolve(getOutputLogName(suite));\n\n            // Save the output of a failing test to disk.\n            try (Writer w = Files.newBufferedWriter(outputLog, StandardCharsets.UTF_8)) {\n               if (outputHandler != null) {\n                  outputHandler.copyTo(w);\n               }\n            }\n\n            if (echoOutput && !verboseMode) {\n               synchronized (this) {\n                  System.out.println(\"\");\n                  System.out.println(suite.getClassName() + \" > test suite's output saved to \" + outputLog + \", copied below:\");\n                  try (BufferedReader reader = Files.newBufferedReader(outputLog, StandardCharsets.UTF_8)) {\n                     char[] buf = new char[1024];\n                     int len;\n                     while ((len = reader.read(buf)) >= 0) {\n                        System.out.print(new String(buf, 0, len));\n                     }\n                     System.out.println();\n                  }\n               }\n            }\n         }\n      } catch (IOException e) {\n         throw new UncheckedIOException(e);\n      } finally {\n         OutputHandler handler = outputHandlers.remove(key);\n         if (handler != null) {\n            try {\n               handler.close();\n            } catch (IOException e) {\n               LOGGER.error(\"Failed to close output handler for: \" + key, e);\n            }\n         }\n      }\n   }\n\n","sourceOld":"   @Override\n   public void afterSuite(final TestDescriptor suite, TestResult result) {\n      if (suite.getParent() == null || suite.getName().startsWith(\"Gradle\")) {\n         return;\n      }\n\n      TestKey key = TestKey.of(suite);\n      try {\n         OutputHandler outputHandler = outputHandlers.get(key);\n         if (outputHandler != null) {\n            long length = outputHandler.length();\n            if (length > 1024 * 1024 * 10) {\n               LOGGER.warn(String.format(Locale.ROOT, \"WARNING: Test %s wrote %,d bytes of output.\",\n                   suite.getName(),\n                   length));\n            }\n         }\n\n         boolean echoOutput = Objects.equals(result.getResultType(), TestResult.ResultType.FAILURE);\n         boolean dumpOutput = echoOutput; // Force output dumping.\n\n         // If the test suite failed, report output.\n         if (dumpOutput || echoOutput) {\n            Files.createDirectories(outputsDir);\n            Path outputLog = outputsDir.resolve(getOutputLogName(suite));\n\n            // Save the output of a failing test to disk.\n            try (Writer w = Files.newBufferedWriter(outputLog, StandardCharsets.UTF_8)) {\n               if (outputHandler != null) {\n                  outputHandler.copyTo(w);\n               }\n            }\n\n            if (echoOutput) {\n               synchronized (this) {\n                  System.out.println(\"\");\n                  System.out.println(suite.getClassName() + \" > test suite's output saved to \" + outputLog + \", copied below:\");\n                  try (BufferedReader reader = Files.newBufferedReader(outputLog, StandardCharsets.UTF_8)) {\n                     char[] buf = new char[1024];\n                     int len;\n                     while ((len = reader.read(buf)) >= 0) {\n                        System.out.print(new String(buf, 0, len));\n                     }\n                     System.out.println();\n                  }\n               }\n            }\n         }\n      } catch (IOException e) {\n         throw new UncheckedIOException(e);\n      } finally {\n         OutputHandler handler = outputHandlers.remove(key);\n         if (handler != null) {\n            try {\n               handler.close();\n            } catch (IOException e) {\n               LOGGER.error(\"Failed to close output handler for: \" + key, e);\n            }\n         }\n      }\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22f3f8c2059c3fcde843bbec43396f01a45d9867","date":1579090233,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"buildSrc/src/main/java/org/apache/lucene/gradle/ErrorReportingTestListener#afterSuite(TestDescriptor,TestResult).mjava","pathOld":"/dev/null","sourceNew":"   @Override\n   public void afterSuite(final TestDescriptor suite, TestResult result) {\n      if (suite.getParent() == null || suite.getName().startsWith(\"Gradle\")) {\n         return;\n      }\n\n      TestKey key = TestKey.of(suite);\n      try {\n         OutputHandler outputHandler = outputHandlers.get(key);\n         if (outputHandler != null) {\n            long length = outputHandler.length();\n            if (length > 1024 * 1024 * 10) {\n               LOGGER.warn(String.format(Locale.ROOT, \"WARNING: Test %s wrote %,d bytes of output.\",\n                   suite.getName(),\n                   length));\n            }\n         }\n\n         boolean echoOutput = Objects.equals(result.getResultType(), TestResult.ResultType.FAILURE);\n         boolean dumpOutput = echoOutput;\n\n         // If the test suite failed, report output.\n         if (dumpOutput || echoOutput) {\n            Files.createDirectories(outputsDir);\n            Path outputLog = outputsDir.resolve(getOutputLogName(suite));\n\n            // Save the output of a failing test to disk.\n            try (Writer w = Files.newBufferedWriter(outputLog, StandardCharsets.UTF_8)) {\n               if (outputHandler != null) {\n                  outputHandler.copyTo(w);\n               }\n            }\n\n            if (echoOutput && !verboseMode) {\n               synchronized (this) {\n                  System.out.println(\"\");\n                  System.out.println(suite.getClassName() + \" > test suite's output saved to \" + outputLog + \", copied below:\");\n                  try (BufferedReader reader = Files.newBufferedReader(outputLog, StandardCharsets.UTF_8)) {\n                     char[] buf = new char[1024];\n                     int len;\n                     while ((len = reader.read(buf)) >= 0) {\n                        System.out.print(new String(buf, 0, len));\n                     }\n                     System.out.println();\n                  }\n               }\n            }\n         }\n      } catch (IOException e) {\n         throw new UncheckedIOException(e);\n      } finally {\n         OutputHandler handler = outputHandlers.remove(key);\n         if (handler != null) {\n            try {\n               handler.close();\n            } catch (IOException e) {\n               LOGGER.error(\"Failed to close output handler for: \" + key, e);\n            }\n         }\n      }\n   }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"78a42256131aa2e3d45d4879b3e3b17a3321bc74":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"22f3f8c2059c3fcde843bbec43396f01a45d9867":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","43bf0517439c498dd87bc58987d6a98633b6ae0d"],"beebcecc300e4dc30662cf0a153b547b4dfc9a9d":["78a42256131aa2e3d45d4879b3e3b17a3321bc74"],"43bf0517439c498dd87bc58987d6a98633b6ae0d":["beebcecc300e4dc30662cf0a153b547b4dfc9a9d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["22f3f8c2059c3fcde843bbec43396f01a45d9867"]},"commit2Childs":{"78a42256131aa2e3d45d4879b3e3b17a3321bc74":["beebcecc300e4dc30662cf0a153b547b4dfc9a9d"],"22f3f8c2059c3fcde843bbec43396f01a45d9867":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"beebcecc300e4dc30662cf0a153b547b4dfc9a9d":["43bf0517439c498dd87bc58987d6a98633b6ae0d"],"43bf0517439c498dd87bc58987d6a98633b6ae0d":["22f3f8c2059c3fcde843bbec43396f01a45d9867"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["78a42256131aa2e3d45d4879b3e3b17a3321bc74","22f3f8c2059c3fcde843bbec43396f01a45d9867"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}