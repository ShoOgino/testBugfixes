{"path":"solr/core/src/test/org/apache/solr/search/TestRecovery#testExistOldBufferLog().mjava","commits":[{"id":"1455c941cc4ce652efc776fc23471b0e499246f6","date":1528086751,"type":1,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testExistOldBufferLog().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testBufferingFlags().mjava","sourceNew":"    @Test\n  public void testExistOldBufferLog() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      String v101 = getNextVersion();\n      String v102 = getNextVersion();\n      String v103 = getNextVersion();\n      String v117 = getNextVersion();\n      \n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",v101)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",v102)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",v103)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      // the core does not replay updates from buffer tlog on startup\n      assertTrue(ulog.existOldBufferLog());   // since we died while buffering, we should see this last\n\n      // buffer tlog won't be removed on restart\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue(ulog.existOldBufferLog());\n\n      ulog.bufferUpdates();\n      ulog.applyBufferedUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"Q7\", \"_version_\",v117)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER)); // do another add to make sure flags are back to normal\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertFalse(ulog.existOldBufferLog());\n      // Timeout for Q7 get replayed, because it was added on tlog, therefore it will be replayed on restart\n      TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      timeout.waitFor(\"Timeout waiting for finish replay updates\",\n          () -> h.getCore().getUpdateHandler().getUpdateLog().getState() == UpdateLog.State.ACTIVE);\n      assertJQ(req(\"qt\",\"/get\", \"id\", \"Q7\") ,\"/doc/id==Q7\");\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","sourceOld":"    @Test\n  public void testBufferingFlags() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      String v101 = getNextVersion();\n      String v102 = getNextVersion();\n      String v103 = getNextVersion();\n      String v114 = getNextVersion();\n      String v115 = getNextVersion();\n      String v116 = getNextVersion();\n      String v117 = getNextVersion();\n      \n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",v101)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",v102)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",v103)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      logReplayFinish.acquire();  // wait for replay to finish\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);   // since we died while buffering, we should see this last\n\n      //\n      // Try again to ensure that the previous log replay didn't wipe out our flags\n      //\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);\n\n      // now do some normal non-buffered adds\n      updateJ(jsonAdd(sdoc(\"id\",\"Q4\", \"_version_\",v114)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q5\", \"_version_\",v115)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q6\", \"_version_\",v116)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertU(commit());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) == 0);\n\n      ulog.bufferUpdates();\n      // simulate receiving no updates\n      ulog.applyBufferedUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"Q7\", \"_version_\",v117)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER)); // do another add to make sure flags are back to normal\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) == 0); // check flags on Q7\n\n      logReplayFinish.acquire();\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":1,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testExistOldBufferLog().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testBufferingFlags().mjava","sourceNew":"    @Test\n  public void testExistOldBufferLog() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      String v101 = getNextVersion();\n      String v102 = getNextVersion();\n      String v103 = getNextVersion();\n      String v117 = getNextVersion();\n      \n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",v101)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",v102)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",v103)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      // the core does not replay updates from buffer tlog on startup\n      assertTrue(ulog.existOldBufferLog());   // since we died while buffering, we should see this last\n\n      // buffer tlog won't be removed on restart\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue(ulog.existOldBufferLog());\n\n      ulog.bufferUpdates();\n      ulog.applyBufferedUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"Q7\", \"_version_\",v117)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER)); // do another add to make sure flags are back to normal\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertFalse(ulog.existOldBufferLog());\n      // Timeout for Q7 get replayed, because it was added on tlog, therefore it will be replayed on restart\n      TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      timeout.waitFor(\"Timeout waiting for finish replay updates\",\n          () -> h.getCore().getUpdateHandler().getUpdateLog().getState() == UpdateLog.State.ACTIVE);\n      assertJQ(req(\"qt\",\"/get\", \"id\", \"Q7\") ,\"/doc/id==Q7\");\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","sourceOld":"    @Test\n  public void testBufferingFlags() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      String v101 = getNextVersion();\n      String v102 = getNextVersion();\n      String v103 = getNextVersion();\n      String v114 = getNextVersion();\n      String v115 = getNextVersion();\n      String v116 = getNextVersion();\n      String v117 = getNextVersion();\n      \n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",v101)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",v102)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",v103)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      logReplayFinish.acquire();  // wait for replay to finish\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);   // since we died while buffering, we should see this last\n\n      //\n      // Try again to ensure that the previous log replay didn't wipe out our flags\n      //\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);\n\n      // now do some normal non-buffered adds\n      updateJ(jsonAdd(sdoc(\"id\",\"Q4\", \"_version_\",v114)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q5\", \"_version_\",v115)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q6\", \"_version_\",v116)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertU(commit());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) == 0);\n\n      ulog.bufferUpdates();\n      // simulate receiving no updates\n      ulog.applyBufferedUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"Q7\", \"_version_\",v117)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER)); // do another add to make sure flags are back to normal\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) == 0); // check flags on Q7\n\n      logReplayFinish.acquire();\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":1,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testExistOldBufferLog().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testBufferingFlags().mjava","sourceNew":"    @Test\n  public void testExistOldBufferLog() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      String v101 = getNextVersion();\n      String v102 = getNextVersion();\n      String v103 = getNextVersion();\n      String v117 = getNextVersion();\n      \n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",v101)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",v102)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",v103)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      // the core does not replay updates from buffer tlog on startup\n      assertTrue(ulog.existOldBufferLog());   // since we died while buffering, we should see this last\n\n      // buffer tlog won't be removed on restart\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue(ulog.existOldBufferLog());\n\n      ulog.bufferUpdates();\n      ulog.applyBufferedUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"Q7\", \"_version_\",v117)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER)); // do another add to make sure flags are back to normal\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertFalse(ulog.existOldBufferLog());\n      // Timeout for Q7 get replayed, because it was added on tlog, therefore it will be replayed on restart\n      TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      timeout.waitFor(\"Timeout waiting for finish replay updates\",\n          () -> h.getCore().getUpdateHandler().getUpdateLog().getState() == UpdateLog.State.ACTIVE);\n      assertJQ(req(\"qt\",\"/get\", \"id\", \"Q7\") ,\"/doc/id==Q7\");\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","sourceOld":"    @Test\n  public void testBufferingFlags() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      String v101 = getNextVersion();\n      String v102 = getNextVersion();\n      String v103 = getNextVersion();\n      String v114 = getNextVersion();\n      String v115 = getNextVersion();\n      String v116 = getNextVersion();\n      String v117 = getNextVersion();\n      \n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",v101)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",v102)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",v103)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      logReplayFinish.acquire();  // wait for replay to finish\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);   // since we died while buffering, we should see this last\n\n      //\n      // Try again to ensure that the previous log replay didn't wipe out our flags\n      //\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);\n\n      // now do some normal non-buffered adds\n      updateJ(jsonAdd(sdoc(\"id\",\"Q4\", \"_version_\",v114)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q5\", \"_version_\",v115)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q6\", \"_version_\",v116)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertU(commit());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) == 0);\n\n      ulog.bufferUpdates();\n      // simulate receiving no updates\n      ulog.applyBufferedUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"Q7\", \"_version_\",v117)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER)); // do another add to make sure flags are back to normal\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) == 0); // check flags on Q7\n\n      logReplayFinish.acquire();\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11d6f92dfa9251d9da6d80ec5963a9cbecc90180","date":1530559969,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testExistOldBufferLog().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testExistOldBufferLog().mjava","sourceNew":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  public void testExistOldBufferLog() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      String v101 = getNextVersion();\n      String v102 = getNextVersion();\n      String v103 = getNextVersion();\n      String v117 = getNextVersion();\n      \n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",v101)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",v102)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",v103)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      // the core does not replay updates from buffer tlog on startup\n      assertTrue(ulog.existOldBufferLog());   // since we died while buffering, we should see this last\n\n      // buffer tlog won't be removed on restart\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue(ulog.existOldBufferLog());\n\n      ulog.bufferUpdates();\n      ulog.applyBufferedUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"Q7\", \"_version_\",v117)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER)); // do another add to make sure flags are back to normal\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertFalse(ulog.existOldBufferLog());\n      // Timeout for Q7 get replayed, because it was added on tlog, therefore it will be replayed on restart\n      TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      timeout.waitFor(\"Timeout waiting for finish replay updates\",\n          () -> h.getCore().getUpdateHandler().getUpdateLog().getState() == UpdateLog.State.ACTIVE);\n      assertJQ(req(\"qt\",\"/get\", \"id\", \"Q7\") ,\"/doc/id==Q7\");\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","sourceOld":"    @Test\n  public void testExistOldBufferLog() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      String v101 = getNextVersion();\n      String v102 = getNextVersion();\n      String v103 = getNextVersion();\n      String v117 = getNextVersion();\n      \n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",v101)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",v102)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",v103)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      // the core does not replay updates from buffer tlog on startup\n      assertTrue(ulog.existOldBufferLog());   // since we died while buffering, we should see this last\n\n      // buffer tlog won't be removed on restart\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue(ulog.existOldBufferLog());\n\n      ulog.bufferUpdates();\n      ulog.applyBufferedUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"Q7\", \"_version_\",v117)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER)); // do another add to make sure flags are back to normal\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertFalse(ulog.existOldBufferLog());\n      // Timeout for Q7 get replayed, because it was added on tlog, therefore it will be replayed on restart\n      TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      timeout.waitFor(\"Timeout waiting for finish replay updates\",\n          () -> h.getCore().getUpdateHandler().getUpdateLog().getState() == UpdateLog.State.ACTIVE);\n      assertJQ(req(\"qt\",\"/get\", \"id\", \"Q7\") ,\"/doc/id==Q7\");\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testExistOldBufferLog().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testExistOldBufferLog().mjava","sourceNew":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  public void testExistOldBufferLog() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      String v101 = getNextVersion();\n      String v102 = getNextVersion();\n      String v103 = getNextVersion();\n      String v117 = getNextVersion();\n      \n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",v101)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",v102)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",v103)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      // the core does not replay updates from buffer tlog on startup\n      assertTrue(ulog.existOldBufferLog());   // since we died while buffering, we should see this last\n\n      // buffer tlog won't be removed on restart\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue(ulog.existOldBufferLog());\n\n      ulog.bufferUpdates();\n      ulog.applyBufferedUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"Q7\", \"_version_\",v117)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER)); // do another add to make sure flags are back to normal\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertFalse(ulog.existOldBufferLog());\n      // Timeout for Q7 get replayed, because it was added on tlog, therefore it will be replayed on restart\n      TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      timeout.waitFor(\"Timeout waiting for finish replay updates\",\n          () -> h.getCore().getUpdateHandler().getUpdateLog().getState() == UpdateLog.State.ACTIVE);\n      assertJQ(req(\"qt\",\"/get\", \"id\", \"Q7\") ,\"/doc/id==Q7\");\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","sourceOld":"    @Test\n  public void testExistOldBufferLog() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      String v101 = getNextVersion();\n      String v102 = getNextVersion();\n      String v103 = getNextVersion();\n      String v117 = getNextVersion();\n      \n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",v101)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",v102)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",v103)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      // the core does not replay updates from buffer tlog on startup\n      assertTrue(ulog.existOldBufferLog());   // since we died while buffering, we should see this last\n\n      // buffer tlog won't be removed on restart\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue(ulog.existOldBufferLog());\n\n      ulog.bufferUpdates();\n      ulog.applyBufferedUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"Q7\", \"_version_\",v117)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER)); // do another add to make sure flags are back to normal\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertFalse(ulog.existOldBufferLog());\n      // Timeout for Q7 get replayed, because it was added on tlog, therefore it will be replayed on restart\n      TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      timeout.waitFor(\"Timeout waiting for finish replay updates\",\n          () -> h.getCore().getUpdateHandler().getUpdateLog().getState() == UpdateLog.State.ACTIVE);\n      assertJQ(req(\"qt\",\"/get\", \"id\", \"Q7\") ,\"/doc/id==Q7\");\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testExistOldBufferLog().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testExistOldBufferLog().mjava","sourceNew":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  public void testExistOldBufferLog() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      String v101 = getNextVersion();\n      String v102 = getNextVersion();\n      String v103 = getNextVersion();\n      String v117 = getNextVersion();\n      \n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",v101)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",v102)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",v103)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      // the core does not replay updates from buffer tlog on startup\n      assertTrue(ulog.existOldBufferLog());   // since we died while buffering, we should see this last\n\n      // buffer tlog won't be removed on restart\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue(ulog.existOldBufferLog());\n\n      ulog.bufferUpdates();\n      ulog.applyBufferedUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"Q7\", \"_version_\",v117)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER)); // do another add to make sure flags are back to normal\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertFalse(ulog.existOldBufferLog());\n      // Timeout for Q7 get replayed, because it was added on tlog, therefore it will be replayed on restart\n      TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      timeout.waitFor(\"Timeout waiting for finish replay updates\",\n          () -> h.getCore().getUpdateHandler().getUpdateLog().getState() == UpdateLog.State.ACTIVE);\n      assertJQ(req(\"qt\",\"/get\", \"id\", \"Q7\") ,\"/doc/id==Q7\");\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","sourceOld":"    @Test\n  public void testExistOldBufferLog() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      String v101 = getNextVersion();\n      String v102 = getNextVersion();\n      String v103 = getNextVersion();\n      String v117 = getNextVersion();\n      \n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",v101)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",v102)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",v103)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      // the core does not replay updates from buffer tlog on startup\n      assertTrue(ulog.existOldBufferLog());   // since we died while buffering, we should see this last\n\n      // buffer tlog won't be removed on restart\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue(ulog.existOldBufferLog());\n\n      ulog.bufferUpdates();\n      ulog.applyBufferedUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"Q7\", \"_version_\",v117)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER)); // do another add to make sure flags are back to normal\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertFalse(ulog.existOldBufferLog());\n      // Timeout for Q7 get replayed, because it was added on tlog, therefore it will be replayed on restart\n      TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      timeout.waitFor(\"Timeout waiting for finish replay updates\",\n          () -> h.getCore().getUpdateHandler().getUpdateLog().getState() == UpdateLog.State.ACTIVE);\n      assertJQ(req(\"qt\",\"/get\", \"id\", \"Q7\") ,\"/doc/id==Q7\");\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testExistOldBufferLog().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testExistOldBufferLog().mjava","sourceNew":"  @Test\n  public void testExistOldBufferLog() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      String v101 = getNextVersion();\n      String v102 = getNextVersion();\n      String v103 = getNextVersion();\n      String v117 = getNextVersion();\n      \n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",v101)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",v102)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",v103)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      // the core does not replay updates from buffer tlog on startup\n      assertTrue(ulog.existOldBufferLog());   // since we died while buffering, we should see this last\n\n      // buffer tlog won't be removed on restart\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue(ulog.existOldBufferLog());\n\n      ulog.bufferUpdates();\n      ulog.applyBufferedUpdates();\n      \n      TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      timeout.waitFor(\"Timeout waiting for finish replay updates\",\n          () -> h.getCore().getUpdateHandler().getUpdateLog().getState() == UpdateLog.State.ACTIVE);\n      \n      updateJ(jsonAdd(sdoc(\"id\",\"Q7\", \"_version_\",v117)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER)); // do another add to make sure flags are back to normal\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      \n      UpdateLog updateLog = uhandler.getUpdateLog();\n\n      // TODO this can fail\n      // assertFalse(updateLog.existOldBufferLog());\n      \n      // Timeout for Q7 get replayed, because it was added on tlog, therefore it will be replayed on restart\n      timeout = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      timeout.waitFor(\"Timeout waiting for finish replay updates\",\n          () -> h.getCore().getUpdateHandler().getUpdateLog().getState() == UpdateLog.State.ACTIVE);\n      \n      assertJQ(req(\"qt\",\"/get\", \"id\", \"Q7\") ,\"/doc/id==Q7\");\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  public void testExistOldBufferLog() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      String v101 = getNextVersion();\n      String v102 = getNextVersion();\n      String v103 = getNextVersion();\n      String v117 = getNextVersion();\n      \n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",v101)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",v102)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",v103)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      // the core does not replay updates from buffer tlog on startup\n      assertTrue(ulog.existOldBufferLog());   // since we died while buffering, we should see this last\n\n      // buffer tlog won't be removed on restart\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue(ulog.existOldBufferLog());\n\n      ulog.bufferUpdates();\n      ulog.applyBufferedUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"Q7\", \"_version_\",v117)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER)); // do another add to make sure flags are back to normal\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertFalse(ulog.existOldBufferLog());\n      // Timeout for Q7 get replayed, because it was added on tlog, therefore it will be replayed on restart\n      TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      timeout.waitFor(\"Timeout waiting for finish replay updates\",\n          () -> h.getCore().getUpdateHandler().getUpdateLog().getState() == UpdateLog.State.ACTIVE);\n      assertJQ(req(\"qt\",\"/get\", \"id\", \"Q7\") ,\"/doc/id==Q7\");\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","bugFix":["11d6f92dfa9251d9da6d80ec5963a9cbecc90180","1455c941cc4ce652efc776fc23471b0e499246f6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1","date":1579200426,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testExistOldBufferLog().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testExistOldBufferLog().mjava","sourceNew":"  @Test\n  public void testExistOldBufferLog() throws Exception {\n\n    TestInjection.skipIndexWriterCommitOnClose = true;\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      String v101 = getNextVersion();\n      String v102 = getNextVersion();\n      String v103 = getNextVersion();\n      String v117 = getNextVersion();\n      \n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",v101)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",v102)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",v103)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      // the core does not replay updates from buffer tlog on startup\n      assertTrue(ulog.existOldBufferLog());   // since we died while buffering, we should see this last\n\n      // buffer tlog won't be removed on restart\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue(ulog.existOldBufferLog());\n\n      ulog.bufferUpdates();\n      ulog.applyBufferedUpdates();\n      \n      TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      timeout.waitFor(\"Timeout waiting for finish replay updates\",\n          () -> h.getCore().getUpdateHandler().getUpdateLog().getState() == UpdateLog.State.ACTIVE);\n      \n      updateJ(jsonAdd(sdoc(\"id\",\"Q7\", \"_version_\",v117)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER)); // do another add to make sure flags are back to normal\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      \n      UpdateLog updateLog = uhandler.getUpdateLog();\n\n      // TODO this can fail\n      // assertFalse(updateLog.existOldBufferLog());\n      \n      // Timeout for Q7 get replayed, because it was added on tlog, therefore it will be replayed on restart\n      timeout = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      timeout.waitFor(\"Timeout waiting for finish replay updates\",\n          () -> h.getCore().getUpdateHandler().getUpdateLog().getState() == UpdateLog.State.ACTIVE);\n      \n      assertJQ(req(\"qt\",\"/get\", \"id\", \"Q7\") ,\"/doc/id==Q7\");\n    } finally {\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testExistOldBufferLog() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      String v101 = getNextVersion();\n      String v102 = getNextVersion();\n      String v103 = getNextVersion();\n      String v117 = getNextVersion();\n      \n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",v101)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",v102)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",v103)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      // the core does not replay updates from buffer tlog on startup\n      assertTrue(ulog.existOldBufferLog());   // since we died while buffering, we should see this last\n\n      // buffer tlog won't be removed on restart\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue(ulog.existOldBufferLog());\n\n      ulog.bufferUpdates();\n      ulog.applyBufferedUpdates();\n      \n      TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      timeout.waitFor(\"Timeout waiting for finish replay updates\",\n          () -> h.getCore().getUpdateHandler().getUpdateLog().getState() == UpdateLog.State.ACTIVE);\n      \n      updateJ(jsonAdd(sdoc(\"id\",\"Q7\", \"_version_\",v117)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER)); // do another add to make sure flags are back to normal\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      \n      UpdateLog updateLog = uhandler.getUpdateLog();\n\n      // TODO this can fail\n      // assertFalse(updateLog.existOldBufferLog());\n      \n      // Timeout for Q7 get replayed, because it was added on tlog, therefore it will be replayed on restart\n      timeout = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      timeout.waitFor(\"Timeout waiting for finish replay updates\",\n          () -> h.getCore().getUpdateHandler().getUpdateLog().getState() == UpdateLog.State.ACTIVE);\n      \n      assertJQ(req(\"qt\",\"/get\", \"id\", \"Q7\") ,\"/doc/id==Q7\");\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"11d6f92dfa9251d9da6d80ec5963a9cbecc90180":["1455c941cc4ce652efc776fc23471b0e499246f6"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["b70042a8a492f7054d480ccdd2be9796510d4327","11d6f92dfa9251d9da6d80ec5963a9cbecc90180"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["11d6f92dfa9251d9da6d80ec5963a9cbecc90180"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1455c941cc4ce652efc776fc23471b0e499246f6"],"b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"f592209545c71895260367152601e9200399776d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1455c941cc4ce652efc776fc23471b0e499246f6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1"],"1455c941cc4ce652efc776fc23471b0e499246f6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["f592209545c71895260367152601e9200399776d","11d6f92dfa9251d9da6d80ec5963a9cbecc90180"]},"commit2Childs":{"11d6f92dfa9251d9da6d80ec5963a9cbecc90180":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1"],"b70042a8a492f7054d480ccdd2be9796510d4327":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","1455c941cc4ce652efc776fc23471b0e499246f6"],"b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f592209545c71895260367152601e9200399776d":["7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"1455c941cc4ce652efc776fc23471b0e499246f6":["11d6f92dfa9251d9da6d80ec5963a9cbecc90180","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}