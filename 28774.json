{"path":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#reset(FieldInfo,StandardTermState,Bits).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#reset(FieldInfo,StandardTermState,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#reset(FieldInfo,StandardTermState,Bits).mjava","sourceNew":"    public SegmentDocsAndPositionsAndPayloadsEnum reset(FieldInfo fieldInfo, StandardTermState termState, Bits liveDocs) throws IOException {\n      assert fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n      assert fieldInfo.storePayloads;\n      if (payload == null) {\n        payload = new BytesRef();\n        payload.bytes = new byte[1];\n      }\n\n      this.liveDocs = liveDocs;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      lazyProxPointer = termState.proxOffset;\n\n      limit = termState.docFreq;\n      ord = 0;\n      doc = -1;\n      accum = 0;\n      position = 0;\n\n      skipped = false;\n      posPendingCount = 0;\n      payloadPending = false;\n\n      freqOffset = termState.freqOffset;\n      proxOffset = termState.proxOffset;\n      skipOffset = termState.skipOffset;\n      //System.out.println(\"StandardR.D&PE reset seg=\" + segment + \" limit=\" + limit + \" freqFP=\" + freqOffset + \" proxFP=\" + proxOffset + \" this=\" + this);\n\n      return this;\n    }\n\n","sourceOld":"    public SegmentDocsAndPositionsAndPayloadsEnum reset(FieldInfo fieldInfo, StandardTermState termState, Bits liveDocs) throws IOException {\n      assert fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n      assert fieldInfo.storePayloads;\n      if (payload == null) {\n        payload = new BytesRef();\n        payload.bytes = new byte[1];\n      }\n\n      this.liveDocs = liveDocs;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      lazyProxPointer = termState.proxOffset;\n\n      limit = termState.docFreq;\n      ord = 0;\n      doc = -1;\n      accum = 0;\n      position = 0;\n\n      skipped = false;\n      posPendingCount = 0;\n      payloadPending = false;\n\n      freqOffset = termState.freqOffset;\n      proxOffset = termState.proxOffset;\n      skipOffset = termState.skipOffset;\n      //System.out.println(\"StandardR.D&PE reset seg=\" + segment + \" limit=\" + limit + \" freqFP=\" + freqOffset + \" proxFP=\" + proxOffset + \" this=\" + this);\n\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a44b232879361a7ace3520b5b313094a9a35e044","date":1327356188,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentFullPositionsEnum#reset(FieldInfo,StandardTermState,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#reset(FieldInfo,StandardTermState,Bits).mjava","sourceNew":"    public SegmentFullPositionsEnum reset(FieldInfo fieldInfo, StandardTermState termState, Bits liveDocs) throws IOException {\n      storeOffsets = fieldInfo.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      storePayloads = fieldInfo.storePayloads;\n      assert fieldInfo.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n      assert storePayloads || storeOffsets;\n      if (payload == null) {\n        payload = new BytesRef();\n        payload.bytes = new byte[1];\n      }\n\n      this.liveDocs = liveDocs;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      lazyProxPointer = termState.proxOffset;\n\n      limit = termState.docFreq;\n      ord = 0;\n      doc = -1;\n      accum = 0;\n      position = 0;\n      startOffset = 0;\n\n      skipped = false;\n      posPendingCount = 0;\n      payloadPending = false;\n\n      freqOffset = termState.freqOffset;\n      proxOffset = termState.proxOffset;\n      skipOffset = termState.skipOffset;\n      //System.out.println(\"StandardR.D&PE reset seg=\" + segment + \" limit=\" + limit + \" freqFP=\" + freqOffset + \" proxFP=\" + proxOffset + \" this=\" + this);\n\n      return this;\n    }\n\n","sourceOld":"    public SegmentDocsAndPositionsAndPayloadsEnum reset(FieldInfo fieldInfo, StandardTermState termState, Bits liveDocs) throws IOException {\n      assert fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n      assert fieldInfo.storePayloads;\n      if (payload == null) {\n        payload = new BytesRef();\n        payload.bytes = new byte[1];\n      }\n\n      this.liveDocs = liveDocs;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      lazyProxPointer = termState.proxOffset;\n\n      limit = termState.docFreq;\n      ord = 0;\n      doc = -1;\n      accum = 0;\n      position = 0;\n\n      skipped = false;\n      posPendingCount = 0;\n      payloadPending = false;\n\n      freqOffset = termState.freqOffset;\n      proxOffset = termState.proxOffset;\n      skipOffset = termState.skipOffset;\n      //System.out.println(\"StandardR.D&PE reset seg=\" + segment + \" limit=\" + limit + \" freqFP=\" + freqOffset + \" proxFP=\" + proxOffset + \" this=\" + this);\n\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a89676536a5d3e2e875a9eed6b3f22a63cca643","date":1327356915,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentFullPositionsEnum#reset(FieldInfo,StandardTermState,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#reset(FieldInfo,StandardTermState,Bits).mjava","sourceNew":"    public SegmentFullPositionsEnum reset(FieldInfo fieldInfo, StandardTermState termState, Bits liveDocs) throws IOException {\n      storeOffsets = fieldInfo.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      storePayloads = fieldInfo.storePayloads;\n      assert fieldInfo.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n      assert storePayloads || storeOffsets;\n      if (payload == null) {\n        payload = new BytesRef();\n        payload.bytes = new byte[1];\n      }\n\n      this.liveDocs = liveDocs;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      lazyProxPointer = termState.proxOffset;\n\n      limit = termState.docFreq;\n      ord = 0;\n      doc = -1;\n      accum = 0;\n      position = 0;\n      startOffset = 0;\n\n      skipped = false;\n      posPendingCount = 0;\n      payloadPending = false;\n\n      freqOffset = termState.freqOffset;\n      proxOffset = termState.proxOffset;\n      skipOffset = termState.skipOffset;\n      //System.out.println(\"StandardR.D&PE reset seg=\" + segment + \" limit=\" + limit + \" freqFP=\" + freqOffset + \" proxFP=\" + proxOffset + \" this=\" + this);\n\n      return this;\n    }\n\n","sourceOld":"    public SegmentDocsAndPositionsAndPayloadsEnum reset(FieldInfo fieldInfo, StandardTermState termState, Bits liveDocs) throws IOException {\n      assert fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n      assert fieldInfo.storePayloads;\n      if (payload == null) {\n        payload = new BytesRef();\n        payload.bytes = new byte[1];\n      }\n\n      this.liveDocs = liveDocs;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      lazyProxPointer = termState.proxOffset;\n\n      limit = termState.docFreq;\n      ord = 0;\n      doc = -1;\n      accum = 0;\n      position = 0;\n\n      skipped = false;\n      posPendingCount = 0;\n      payloadPending = false;\n\n      freqOffset = termState.freqOffset;\n      proxOffset = termState.proxOffset;\n      skipOffset = termState.skipOffset;\n      //System.out.println(\"StandardR.D&PE reset seg=\" + segment + \" limit=\" + limit + \" freqFP=\" + freqOffset + \" proxFP=\" + proxOffset + \" this=\" + this);\n\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#reset(FieldInfo,StandardTermState,Bits).mjava","sourceNew":null,"sourceOld":"    public SegmentDocsAndPositionsAndPayloadsEnum reset(FieldInfo fieldInfo, StandardTermState termState, Bits liveDocs) throws IOException {\n      assert fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n      assert fieldInfo.storePayloads;\n      if (payload == null) {\n        payload = new BytesRef();\n        payload.bytes = new byte[1];\n      }\n\n      this.liveDocs = liveDocs;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      lazyProxPointer = termState.proxOffset;\n\n      limit = termState.docFreq;\n      ord = 0;\n      doc = -1;\n      accum = 0;\n      position = 0;\n\n      skipped = false;\n      posPendingCount = 0;\n      payloadPending = false;\n\n      freqOffset = termState.freqOffset;\n      proxOffset = termState.proxOffset;\n      skipOffset = termState.skipOffset;\n      //System.out.println(\"StandardR.D&PE reset seg=\" + segment + \" limit=\" + limit + \" freqFP=\" + freqOffset + \" proxFP=\" + proxOffset + \" this=\" + this);\n\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5a89676536a5d3e2e875a9eed6b3f22a63cca643":["a0ae5e3ed1232483b7b8a014f175a5fe43595982","a44b232879361a7ace3520b5b313094a9a35e044"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0ae5e3ed1232483b7b8a014f175a5fe43595982","a44b232879361a7ace3520b5b313094a9a35e044"],"a44b232879361a7ace3520b5b313094a9a35e044":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a44b232879361a7ace3520b5b313094a9a35e044"]},"commit2Childs":{"5a89676536a5d3e2e875a9eed6b3f22a63cca643":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"a44b232879361a7ace3520b5b313094a9a35e044":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","a44b232879361a7ace3520b5b313094a9a35e044"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}