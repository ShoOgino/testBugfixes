{"path":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#addMainQuery(BooleanQuery.Builder,SolrParams).mjava","commits":[{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#addMainQuery(BooleanQuery.Builder,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#addMainQuery(BooleanQuery,SolrParams).mjava","sourceNew":"  /** Adds the main query to the query argument. If it's blank then false is returned. */\n  protected boolean addMainQuery(BooleanQuery.Builder query, SolrParams solrParams) throws SyntaxError {\n    Map<String, Float> phraseFields = SolrPluginUtils.parseFieldBoosts(solrParams.getParams(DisMaxParams.PF));\n    float tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n\n    /* a parser for dealing with user input, which will convert\n     * things to DisjunctionMaxQueries\n     */\n    SolrPluginUtils.DisjunctionMaxQueryParser up = getParser(queryFields, DisMaxParams.QS, solrParams, tiebreaker);\n\n    /* for parsing sloppy phrases using DisjunctionMaxQueries */\n    SolrPluginUtils.DisjunctionMaxQueryParser pp = getParser(phraseFields, DisMaxParams.PS, solrParams, tiebreaker);\n\n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if (userQuery == null || userQuery.trim().length() < 1) {\n      // If no query is specified, we may have an alternate\n      altUserQuery = getAlternateUserQuery(solrParams);\n      if (altUserQuery == null)\n        return false;\n      query.add(altUserQuery, BooleanClause.Occur.MUST);\n    } else {\n      // There is a valid query string\n      userQuery = SolrPluginUtils.partialEscape(SolrPluginUtils.stripUnbalancedQuotes(userQuery)).toString();\n      userQuery = SolrPluginUtils.stripIllegalOperators(userQuery).toString();\n\n      parsedUserQuery = getUserQuery(userQuery, up, solrParams);\n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n\n      Query phrase = getPhraseQuery(userQuery, pp);\n      if (null != phrase) {\n        query.add(phrase, BooleanClause.Occur.SHOULD);\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  /** Adds the main query to the query argument. If it's blank then false is returned. */\n  protected boolean addMainQuery(BooleanQuery query, SolrParams solrParams) throws SyntaxError {\n    Map<String, Float> phraseFields = SolrPluginUtils.parseFieldBoosts(solrParams.getParams(DisMaxParams.PF));\n    float tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n\n    /* a parser for dealing with user input, which will convert\n     * things to DisjunctionMaxQueries\n     */\n    SolrPluginUtils.DisjunctionMaxQueryParser up = getParser(queryFields, DisMaxParams.QS, solrParams, tiebreaker);\n\n    /* for parsing sloppy phrases using DisjunctionMaxQueries */\n    SolrPluginUtils.DisjunctionMaxQueryParser pp = getParser(phraseFields, DisMaxParams.PS, solrParams, tiebreaker);\n\n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if (userQuery == null || userQuery.trim().length() < 1) {\n      // If no query is specified, we may have an alternate\n      altUserQuery = getAlternateUserQuery(solrParams);\n      if (altUserQuery == null)\n        return false;\n      query.add(altUserQuery, BooleanClause.Occur.MUST);\n    } else {\n      // There is a valid query string\n      userQuery = SolrPluginUtils.partialEscape(SolrPluginUtils.stripUnbalancedQuotes(userQuery)).toString();\n      userQuery = SolrPluginUtils.stripIllegalOperators(userQuery).toString();\n\n      parsedUserQuery = getUserQuery(userQuery, up, solrParams);\n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n\n      Query phrase = getPhraseQuery(userQuery, pp);\n      if (null != phrase) {\n        query.add(phrase, BooleanClause.Occur.SHOULD);\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf9d6fd2b46a1c50382c5cef6be68fd0525946ff","date":1580036619,"type":3,"author":"andywebb1975","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#addMainQuery(BooleanQuery.Builder,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#addMainQuery(BooleanQuery.Builder,SolrParams).mjava","sourceNew":"  /** Adds the main query to the query argument. If it's blank then false is returned. */\n  protected boolean addMainQuery(BooleanQuery.Builder query, SolrParams solrParams) throws SyntaxError {\n    Map<String, Float> phraseFields = SolrPluginUtils.parseFieldBoosts(solrParams.getParams(DisMaxParams.PF));\n    float tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n\n    /* a parser for dealing with user input, which will convert\n     * things to DisjunctionMaxQueries\n     */\n    SolrPluginUtils.DisjunctionMaxQueryParser up = getParser(queryFields, DisMaxParams.QS, solrParams, tiebreaker);\n\n    /* for parsing sloppy phrases using DisjunctionMaxQueries */\n    SolrPluginUtils.DisjunctionMaxQueryParser pp = getParser(phraseFields, DisMaxParams.PS, solrParams, tiebreaker);\n\n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if (StringUtils.isBlank(userQuery)) {\n      // If no query is specified, we may have an alternate\n      altUserQuery = getAlternateUserQuery(solrParams);\n      if (altUserQuery == null)\n        return false;\n      query.add(altUserQuery, BooleanClause.Occur.MUST);\n    } else {\n      // There is a valid query string\n      userQuery = SolrPluginUtils.partialEscape(SolrPluginUtils.stripUnbalancedQuotes(userQuery)).toString();\n      userQuery = SolrPluginUtils.stripIllegalOperators(userQuery).toString();\n\n      parsedUserQuery = getUserQuery(userQuery, up, solrParams);\n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n\n      Query phrase = getPhraseQuery(userQuery, pp);\n      if (null != phrase) {\n        query.add(phrase, BooleanClause.Occur.SHOULD);\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  /** Adds the main query to the query argument. If it's blank then false is returned. */\n  protected boolean addMainQuery(BooleanQuery.Builder query, SolrParams solrParams) throws SyntaxError {\n    Map<String, Float> phraseFields = SolrPluginUtils.parseFieldBoosts(solrParams.getParams(DisMaxParams.PF));\n    float tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n\n    /* a parser for dealing with user input, which will convert\n     * things to DisjunctionMaxQueries\n     */\n    SolrPluginUtils.DisjunctionMaxQueryParser up = getParser(queryFields, DisMaxParams.QS, solrParams, tiebreaker);\n\n    /* for parsing sloppy phrases using DisjunctionMaxQueries */\n    SolrPluginUtils.DisjunctionMaxQueryParser pp = getParser(phraseFields, DisMaxParams.PS, solrParams, tiebreaker);\n\n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if (userQuery == null || userQuery.trim().length() < 1) {\n      // If no query is specified, we may have an alternate\n      altUserQuery = getAlternateUserQuery(solrParams);\n      if (altUserQuery == null)\n        return false;\n      query.add(altUserQuery, BooleanClause.Occur.MUST);\n    } else {\n      // There is a valid query string\n      userQuery = SolrPluginUtils.partialEscape(SolrPluginUtils.stripUnbalancedQuotes(userQuery)).toString();\n      userQuery = SolrPluginUtils.stripIllegalOperators(userQuery).toString();\n\n      parsedUserQuery = getUserQuery(userQuery, up, solrParams);\n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n\n      Query phrase = getPhraseQuery(userQuery, pp);\n      if (null != phrase) {\n        query.add(phrase, BooleanClause.Occur.SHOULD);\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf9d6fd2b46a1c50382c5cef6be68fd0525946ff":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf9d6fd2b46a1c50382c5cef6be68fd0525946ff"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["cf9d6fd2b46a1c50382c5cef6be68fd0525946ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"cf9d6fd2b46a1c50382c5cef6be68fd0525946ff":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}