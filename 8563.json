{"path":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean,boolean,boolean).mjava","commits":[{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean,boolean,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean,boolean,boolean).mjava","sourceNew":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep, boolean hasFreqs, boolean hasPositions) throws Exception {\n    BytesRef term;\n    PostingsEnum leftPositions = null;\n    PostingsEnum rightPositions = null;\n    PostingsEnum leftDocs = null;\n    PostingsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum, hasFreqs);\n      if (deep) {\n        if (hasPositions) {\n          // with payloads + off\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.ALL),\n                                     rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.ALL));\n\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.ALL),\n                                  rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.ALL));\n          // with payloads only\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.PAYLOADS),\n                                     rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.PAYLOADS));\n\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.PAYLOADS),\n                                  rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.PAYLOADS));\n\n          // with offsets only\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.OFFSETS),\n                                     rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.OFFSETS));\n\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.OFFSETS),\n                                  rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.OFFSETS));\n\n          // with positions only\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.POSITIONS),\n                                     rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.POSITIONS));\n\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.POSITIONS),\n                                  rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.POSITIONS));\n        }\n        \n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(leftDocs),\n            rightDocs = rightTermsEnum.postings(rightDocs));\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(rightDocs, PostingsEnum.NONE));\n\n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(leftDocs),\n            rightDocs = rightTermsEnum.postings(rightDocs));\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(rightDocs, PostingsEnum.NONE));\n      }\n    }\n    assertNull(rightTermsEnum.next());\n  }\n\n","sourceOld":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep, boolean hasFreqs, boolean hasPositions) throws Exception {\n    BytesRef term;\n    PostingsEnum leftPositions = null;\n    PostingsEnum rightPositions = null;\n    PostingsEnum leftDocs = null;\n    PostingsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum, hasFreqs);\n      if (deep) {\n        if (hasPositions) {\n          // with payloads + off\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.ALL),\n                                     rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.ALL));\n\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.ALL),\n                                  rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.ALL));\n          // with payloads only\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.PAYLOADS),\n                                     rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.PAYLOADS));\n\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.PAYLOADS),\n                                  rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.PAYLOADS));\n\n          // with offsets only\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.OFFSETS),\n                                     rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.OFFSETS));\n\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.OFFSETS),\n                                  rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.OFFSETS));\n\n          // with positions only\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.POSITIONS),\n                                     rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.POSITIONS));\n\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.POSITIONS),\n                                  rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.POSITIONS));\n        }\n        \n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(leftDocs),\n            rightDocs = rightTermsEnum.postings(rightDocs));\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(rightDocs, PostingsEnum.NONE));\n\n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(leftDocs),\n            rightDocs = rightTermsEnum.postings(rightDocs));\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(rightDocs, PostingsEnum.NONE));\n      }\n    }\n    assertNull(rightTermsEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"]},"commit2Childs":{"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}