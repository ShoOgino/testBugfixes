{"path":"lucene/contrib/misc/src/java/org/apache/lucene/store/NativeUnixDirectory.NativeUnixIndexOutput#dump().mjava","commits":[{"id":"d5243f2425292adfa2c094097311654ae59588bc","date":1327855765,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/store/NativeUnixDirectory.NativeUnixIndexOutput#dump().mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/store/DirectIOLinuxDirectory.DirectIOLinuxIndexOutput#dump().mjava","sourceNew":"    private void dump() throws IOException {\n      buffer.flip();\n      final long limit = filePos + buffer.limit();\n      if (limit > fileLength) {\n        // this dump extends the file\n        fileLength = limit;\n      } else {\n        // we had seek'd back & wrote some changes\n      }\n\n      // must always round to next block\n      buffer.limit((int) ((buffer.limit() + ALIGN - 1) & ALIGN_NOT_MASK));\n\n      assert (buffer.limit() & ALIGN_NOT_MASK) == buffer.limit() : \"limit=\" + buffer.limit() + \" vs \" + (buffer.limit() & ALIGN_NOT_MASK);\n      assert (filePos & ALIGN_NOT_MASK) == filePos;\n      //System.out.println(Thread.currentThread().getName() + \": dump to \" + filePos + \" limit=\" + buffer.limit() + \" fos=\" + fos);\n      channel.write(buffer, filePos);\n      filePos += bufferPos;\n      bufferPos = 0;\n      buffer.clear();\n      //System.out.println(\"dump: done\");\n\n      // TODO: the case where we'd seek'd back, wrote an\n      // entire buffer, we must here read the next buffer;\n      // likely Lucene won't trip on this since we only\n      // write smallish amounts on seeking back\n    }\n\n","sourceOld":"    private void dump() throws IOException {\n      buffer.flip();\n      final long limit = filePos + buffer.limit();\n      if (limit > fileLength) {\n        // this dump extends the file\n        fileLength = limit;\n      } else {\n        // we had seek'd back & wrote some changes\n      }\n\n      // must always round to next block\n      buffer.limit((int) ((buffer.limit() + ALIGN - 1) & ALIGN_NOT_MASK));\n\n      assert (buffer.limit() & ALIGN_NOT_MASK) == buffer.limit() : \"limit=\" + buffer.limit() + \" vs \" + (buffer.limit() & ALIGN_NOT_MASK);\n      assert (filePos & ALIGN_NOT_MASK) == filePos;\n      //System.out.println(Thread.currentThread().getName() + \": dump to \" + filePos + \" limit=\" + buffer.limit() + \" fos=\" + fos);\n      channel.write(buffer, filePos);\n      filePos += bufferPos;\n      bufferPos = 0;\n      buffer.clear();\n      //System.out.println(\"dump: done\");\n\n      // TODO: the case where we'd seek'd back, wrote an\n      // entire buffer, we must here read the next buffer;\n      // likely Lucene won't trip on this since we only\n      // write smallish amounts on seeking back\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817882884229bace7dc5d1b75f6b0e4aa1e47122","date":1327879145,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/store/NativeUnixDirectory.NativeUnixIndexOutput#dump().mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/store/DirectIOLinuxDirectory.DirectIOLinuxIndexOutput#dump().mjava","sourceNew":"    private void dump() throws IOException {\n      buffer.flip();\n      final long limit = filePos + buffer.limit();\n      if (limit > fileLength) {\n        // this dump extends the file\n        fileLength = limit;\n      } else {\n        // we had seek'd back & wrote some changes\n      }\n\n      // must always round to next block\n      buffer.limit((int) ((buffer.limit() + ALIGN - 1) & ALIGN_NOT_MASK));\n\n      assert (buffer.limit() & ALIGN_NOT_MASK) == buffer.limit() : \"limit=\" + buffer.limit() + \" vs \" + (buffer.limit() & ALIGN_NOT_MASK);\n      assert (filePos & ALIGN_NOT_MASK) == filePos;\n      //System.out.println(Thread.currentThread().getName() + \": dump to \" + filePos + \" limit=\" + buffer.limit() + \" fos=\" + fos);\n      channel.write(buffer, filePos);\n      filePos += bufferPos;\n      bufferPos = 0;\n      buffer.clear();\n      //System.out.println(\"dump: done\");\n\n      // TODO: the case where we'd seek'd back, wrote an\n      // entire buffer, we must here read the next buffer;\n      // likely Lucene won't trip on this since we only\n      // write smallish amounts on seeking back\n    }\n\n","sourceOld":"    private void dump() throws IOException {\n      buffer.flip();\n      final long limit = filePos + buffer.limit();\n      if (limit > fileLength) {\n        // this dump extends the file\n        fileLength = limit;\n      } else {\n        // we had seek'd back & wrote some changes\n      }\n\n      // must always round to next block\n      buffer.limit((int) ((buffer.limit() + ALIGN - 1) & ALIGN_NOT_MASK));\n\n      assert (buffer.limit() & ALIGN_NOT_MASK) == buffer.limit() : \"limit=\" + buffer.limit() + \" vs \" + (buffer.limit() & ALIGN_NOT_MASK);\n      assert (filePos & ALIGN_NOT_MASK) == filePos;\n      //System.out.println(Thread.currentThread().getName() + \": dump to \" + filePos + \" limit=\" + buffer.limit() + \" fos=\" + fos);\n      channel.write(buffer, filePos);\n      filePos += bufferPos;\n      bufferPos = 0;\n      buffer.clear();\n      //System.out.println(\"dump: done\");\n\n      // TODO: the case where we'd seek'd back, wrote an\n      // entire buffer, we must here read the next buffer;\n      // likely Lucene won't trip on this since we only\n      // write smallish amounts on seeking back\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/store/NativeUnixDirectory.NativeUnixIndexOutput#dump().mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/store/DirectIOLinuxDirectory.DirectIOLinuxIndexOutput#dump().mjava","sourceNew":"    private void dump() throws IOException {\n      buffer.flip();\n      final long limit = filePos + buffer.limit();\n      if (limit > fileLength) {\n        // this dump extends the file\n        fileLength = limit;\n      } else {\n        // we had seek'd back & wrote some changes\n      }\n\n      // must always round to next block\n      buffer.limit((int) ((buffer.limit() + ALIGN - 1) & ALIGN_NOT_MASK));\n\n      assert (buffer.limit() & ALIGN_NOT_MASK) == buffer.limit() : \"limit=\" + buffer.limit() + \" vs \" + (buffer.limit() & ALIGN_NOT_MASK);\n      assert (filePos & ALIGN_NOT_MASK) == filePos;\n      //System.out.println(Thread.currentThread().getName() + \": dump to \" + filePos + \" limit=\" + buffer.limit() + \" fos=\" + fos);\n      channel.write(buffer, filePos);\n      filePos += bufferPos;\n      bufferPos = 0;\n      buffer.clear();\n      //System.out.println(\"dump: done\");\n\n      // TODO: the case where we'd seek'd back, wrote an\n      // entire buffer, we must here read the next buffer;\n      // likely Lucene won't trip on this since we only\n      // write smallish amounts on seeking back\n    }\n\n","sourceOld":"    private void dump() throws IOException {\n      buffer.flip();\n      final long limit = filePos + buffer.limit();\n      if (limit > fileLength) {\n        // this dump extends the file\n        fileLength = limit;\n      } else {\n        // we had seek'd back & wrote some changes\n      }\n\n      // must always round to next block\n      buffer.limit((int) ((buffer.limit() + ALIGN - 1) & ALIGN_NOT_MASK));\n\n      assert (buffer.limit() & ALIGN_NOT_MASK) == buffer.limit() : \"limit=\" + buffer.limit() + \" vs \" + (buffer.limit() & ALIGN_NOT_MASK);\n      assert (filePos & ALIGN_NOT_MASK) == filePos;\n      //System.out.println(Thread.currentThread().getName() + \": dump to \" + filePos + \" limit=\" + buffer.limit() + \" fos=\" + fos);\n      channel.write(buffer, filePos);\n      filePos += bufferPos;\n      bufferPos = 0;\n      buffer.clear();\n      //System.out.println(\"dump: done\");\n\n      // TODO: the case where we'd seek'd back, wrote an\n      // entire buffer, we must here read the next buffer;\n      // likely Lucene won't trip on this since we only\n      // write smallish amounts on seeking back\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/store/NativeUnixDirectory.NativeUnixIndexOutput#dump().mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/store/NativeUnixDirectory.NativeUnixIndexOutput#dump().mjava","sourceNew":"    private void dump() throws IOException {\n      buffer.flip();\n      final long limit = filePos + buffer.limit();\n      if (limit > fileLength) {\n        // this dump extends the file\n        fileLength = limit;\n      } else {\n        // we had seek'd back & wrote some changes\n      }\n\n      // must always round to next block\n      buffer.limit((int) ((buffer.limit() + ALIGN - 1) & ALIGN_NOT_MASK));\n\n      assert (buffer.limit() & ALIGN_NOT_MASK) == buffer.limit() : \"limit=\" + buffer.limit() + \" vs \" + (buffer.limit() & ALIGN_NOT_MASK);\n      assert (filePos & ALIGN_NOT_MASK) == filePos;\n      //System.out.println(Thread.currentThread().getName() + \": dump to \" + filePos + \" limit=\" + buffer.limit() + \" fos=\" + fos);\n      channel.write(buffer, filePos);\n      filePos += bufferPos;\n      bufferPos = 0;\n      buffer.clear();\n      //System.out.println(\"dump: done\");\n\n      // TODO: the case where we'd seek'd back, wrote an\n      // entire buffer, we must here read the next buffer;\n      // likely Lucene won't trip on this since we only\n      // write smallish amounts on seeking back\n    }\n\n","sourceOld":"    private void dump() throws IOException {\n      buffer.flip();\n      final long limit = filePos + buffer.limit();\n      if (limit > fileLength) {\n        // this dump extends the file\n        fileLength = limit;\n      } else {\n        // we had seek'd back & wrote some changes\n      }\n\n      // must always round to next block\n      buffer.limit((int) ((buffer.limit() + ALIGN - 1) & ALIGN_NOT_MASK));\n\n      assert (buffer.limit() & ALIGN_NOT_MASK) == buffer.limit() : \"limit=\" + buffer.limit() + \" vs \" + (buffer.limit() & ALIGN_NOT_MASK);\n      assert (filePos & ALIGN_NOT_MASK) == filePos;\n      //System.out.println(Thread.currentThread().getName() + \": dump to \" + filePos + \" limit=\" + buffer.limit() + \" fos=\" + fos);\n      channel.write(buffer, filePos);\n      filePos += bufferPos;\n      bufferPos = 0;\n      buffer.clear();\n      //System.out.println(\"dump: done\");\n\n      // TODO: the case where we'd seek'd back, wrote an\n      // entire buffer, we must here read the next buffer;\n      // likely Lucene won't trip on this since we only\n      // write smallish amounts on seeking back\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d5243f2425292adfa2c094097311654ae59588bc"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d5243f2425292adfa2c094097311654ae59588bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b6fdfce35d0adb18836cf8711abe487a934df33":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d5243f2425292adfa2c094097311654ae59588bc"],"d5243f2425292adfa2c094097311654ae59588bc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33","d5243f2425292adfa2c094097311654ae59588bc"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"d5243f2425292adfa2c094097311654ae59588bc":["b89678825b68eccaf09e6ab71675fc0b0af1e099","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}