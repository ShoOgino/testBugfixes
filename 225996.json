{"path":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/TreeMergeOutputFormat.TreeMergeRecordWriter#writeShardNumberFile(TaskAttemptContext).mjava","commits":[{"id":"42d384b06aa87eae925b668b65f3246154f0b0fa","date":1386181725,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/TreeMergeOutputFormat.TreeMergeRecordWriter#writeShardNumberFile(TaskAttemptContext).mjava","pathOld":"/dev/null","sourceNew":"    /*\n     * For background see MapReduceIndexerTool.renameTreeMergeShardDirs()\n     * \n     * Also see MapReduceIndexerTool.run() method where it uses\n     * NLineInputFormat.setNumLinesPerSplit(job, options.fanout)\n     */\n    private void writeShardNumberFile(TaskAttemptContext context) throws IOException {\n      Preconditions.checkArgument(shards.size() > 0);\n      String shard = shards.get(0).getParent().getParent().getName(); // move up from \"data/index\"\n      String taskId = shard.substring(\"part-m-\".length(), shard.length()); // e.g. part-m-00001\n      int taskNum = Integer.parseInt(taskId);\n      int outputShardNum = taskNum / shards.size();\n      LOG.debug(\"Merging into outputShardNum: \" + outputShardNum + \" from taskId: \" + taskId);\n      Path shardNumberFile = new Path(workDir.getParent().getParent(), TreeMergeMapper.SOLR_SHARD_NUMBER);\n      OutputStream out = shardNumberFile.getFileSystem(context.getConfiguration()).create(shardNumberFile);\n      Writer writer = new OutputStreamWriter(out, Charsets.UTF_8);\n      writer.write(String.valueOf(outputShardNum));\n      writer.flush();\n      writer.close();\n    }    \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/TreeMergeOutputFormat.TreeMergeRecordWriter#writeShardNumberFile(TaskAttemptContext).mjava","pathOld":"/dev/null","sourceNew":"    /*\n     * For background see MapReduceIndexerTool.renameTreeMergeShardDirs()\n     * \n     * Also see MapReduceIndexerTool.run() method where it uses\n     * NLineInputFormat.setNumLinesPerSplit(job, options.fanout)\n     */\n    private void writeShardNumberFile(TaskAttemptContext context) throws IOException {\n      Preconditions.checkArgument(shards.size() > 0);\n      String shard = shards.get(0).getParent().getParent().getName(); // move up from \"data/index\"\n      String taskId = shard.substring(\"part-m-\".length(), shard.length()); // e.g. part-m-00001\n      int taskNum = Integer.parseInt(taskId);\n      int outputShardNum = taskNum / shards.size();\n      LOG.debug(\"Merging into outputShardNum: \" + outputShardNum + \" from taskId: \" + taskId);\n      Path shardNumberFile = new Path(workDir.getParent().getParent(), TreeMergeMapper.SOLR_SHARD_NUMBER);\n      OutputStream out = shardNumberFile.getFileSystem(context.getConfiguration()).create(shardNumberFile);\n      Writer writer = new OutputStreamWriter(out, Charsets.UTF_8);\n      writer.write(String.valueOf(outputShardNum));\n      writer.flush();\n      writer.close();\n    }    \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e1c1455e91339e72d6cdc7518defd3e05a43957","date":1396304204,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/TreeMergeOutputFormat.TreeMergeRecordWriter#writeShardNumberFile(TaskAttemptContext).mjava","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/TreeMergeOutputFormat.TreeMergeRecordWriter#writeShardNumberFile(TaskAttemptContext).mjava","sourceNew":"    /*\n     * For background see MapReduceIndexerTool.renameTreeMergeShardDirs()\n     * \n     * Also see MapReduceIndexerTool.run() method where it uses\n     * NLineInputFormat.setNumLinesPerSplit(job, options.fanout)\n     */\n    private void writeShardNumberFile(TaskAttemptContext context) throws IOException {\n      Preconditions.checkArgument(shards.size() > 0);\n      String shard = shards.get(0).getParent().getParent().getName(); // move up from \"data/index\"\n      String taskId = shard.substring(\"part-m-\".length(), shard.length()); // e.g. part-m-00001\n      int taskNum = Integer.parseInt(taskId);\n      int outputShardNum = taskNum / shards.size();\n      LOG.debug(\"Merging into outputShardNum: \" + outputShardNum + \" from taskId: \" + taskId);\n      Path shardNumberFile = new Path(workDir.getParent().getParent(), TreeMergeMapper.SOLR_SHARD_NUMBER);\n      OutputStream out = shardNumberFile.getFileSystem(context.getConfiguration()).create(shardNumberFile);\n      Writer writer = new OutputStreamWriter(out, StandardCharsets.UTF_8);\n      writer.write(String.valueOf(outputShardNum));\n      writer.flush();\n      writer.close();\n    }    \n\n","sourceOld":"    /*\n     * For background see MapReduceIndexerTool.renameTreeMergeShardDirs()\n     * \n     * Also see MapReduceIndexerTool.run() method where it uses\n     * NLineInputFormat.setNumLinesPerSplit(job, options.fanout)\n     */\n    private void writeShardNumberFile(TaskAttemptContext context) throws IOException {\n      Preconditions.checkArgument(shards.size() > 0);\n      String shard = shards.get(0).getParent().getParent().getName(); // move up from \"data/index\"\n      String taskId = shard.substring(\"part-m-\".length(), shard.length()); // e.g. part-m-00001\n      int taskNum = Integer.parseInt(taskId);\n      int outputShardNum = taskNum / shards.size();\n      LOG.debug(\"Merging into outputShardNum: \" + outputShardNum + \" from taskId: \" + taskId);\n      Path shardNumberFile = new Path(workDir.getParent().getParent(), TreeMergeMapper.SOLR_SHARD_NUMBER);\n      OutputStream out = shardNumberFile.getFileSystem(context.getConfiguration()).create(shardNumberFile);\n      Writer writer = new OutputStreamWriter(out, Charsets.UTF_8);\n      writer.write(String.valueOf(outputShardNum));\n      writer.flush();\n      writer.close();\n    }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/TreeMergeOutputFormat.TreeMergeRecordWriter#writeShardNumberFile(TaskAttemptContext).mjava","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/TreeMergeOutputFormat.TreeMergeRecordWriter#writeShardNumberFile(TaskAttemptContext).mjava","sourceNew":"    /*\n     * For background see MapReduceIndexerTool.renameTreeMergeShardDirs()\n     * \n     * Also see MapReduceIndexerTool.run() method where it uses\n     * NLineInputFormat.setNumLinesPerSplit(job, options.fanout)\n     */\n    private void writeShardNumberFile(TaskAttemptContext context) throws IOException {\n      Preconditions.checkArgument(shards.size() > 0);\n      String shard = shards.get(0).getParent().getParent().getName(); // move up from \"data/index\"\n      String taskId = shard.substring(\"part-m-\".length(), shard.length()); // e.g. part-m-00001\n      int taskNum = Integer.parseInt(taskId);\n      int outputShardNum = taskNum / shards.size();\n      LOG.debug(\"Merging into outputShardNum: \" + outputShardNum + \" from taskId: \" + taskId);\n      Path shardNumberFile = new Path(workDir.getParent().getParent(), TreeMergeMapper.SOLR_SHARD_NUMBER);\n      OutputStream out = shardNumberFile.getFileSystem(context.getConfiguration()).create(shardNumberFile);\n      Writer writer = new OutputStreamWriter(out, StandardCharsets.UTF_8);\n      writer.write(String.valueOf(outputShardNum));\n      writer.flush();\n      writer.close();\n    }    \n\n","sourceOld":"    /*\n     * For background see MapReduceIndexerTool.renameTreeMergeShardDirs()\n     * \n     * Also see MapReduceIndexerTool.run() method where it uses\n     * NLineInputFormat.setNumLinesPerSplit(job, options.fanout)\n     */\n    private void writeShardNumberFile(TaskAttemptContext context) throws IOException {\n      Preconditions.checkArgument(shards.size() > 0);\n      String shard = shards.get(0).getParent().getParent().getName(); // move up from \"data/index\"\n      String taskId = shard.substring(\"part-m-\".length(), shard.length()); // e.g. part-m-00001\n      int taskNum = Integer.parseInt(taskId);\n      int outputShardNum = taskNum / shards.size();\n      LOG.debug(\"Merging into outputShardNum: \" + outputShardNum + \" from taskId: \" + taskId);\n      Path shardNumberFile = new Path(workDir.getParent().getParent(), TreeMergeMapper.SOLR_SHARD_NUMBER);\n      OutputStream out = shardNumberFile.getFileSystem(context.getConfiguration()).create(shardNumberFile);\n      Writer writer = new OutputStreamWriter(out, Charsets.UTF_8);\n      writer.write(String.valueOf(outputShardNum));\n      writer.flush();\n      writer.close();\n    }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12109b652e9210b8d58fca47f6c4a725d058a58e","date":1490373076,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/TreeMergeOutputFormat.TreeMergeRecordWriter#writeShardNumberFile(TaskAttemptContext).mjava","sourceNew":null,"sourceOld":"    /*\n     * For background see MapReduceIndexerTool.renameTreeMergeShardDirs()\n     * \n     * Also see MapReduceIndexerTool.run() method where it uses\n     * NLineInputFormat.setNumLinesPerSplit(job, options.fanout)\n     */\n    private void writeShardNumberFile(TaskAttemptContext context) throws IOException {\n      Preconditions.checkArgument(shards.size() > 0);\n      String shard = shards.get(0).getParent().getParent().getName(); // move up from \"data/index\"\n      String taskId = shard.substring(\"part-m-\".length(), shard.length()); // e.g. part-m-00001\n      int taskNum = Integer.parseInt(taskId);\n      int outputShardNum = taskNum / shards.size();\n      LOG.debug(\"Merging into outputShardNum: \" + outputShardNum + \" from taskId: \" + taskId);\n      Path shardNumberFile = new Path(workDir.getParent().getParent(), TreeMergeMapper.SOLR_SHARD_NUMBER);\n      OutputStream out = shardNumberFile.getFileSystem(context.getConfiguration()).create(shardNumberFile);\n      Writer writer = new OutputStreamWriter(out, StandardCharsets.UTF_8);\n      writer.write(String.valueOf(outputShardNum));\n      writer.flush();\n      writer.close();\n    }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe1c4aa9af769a38e878f608070f672efbeac27f","date":1490594650,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/TreeMergeOutputFormat.TreeMergeRecordWriter#writeShardNumberFile(TaskAttemptContext).mjava","sourceNew":null,"sourceOld":"    /*\n     * For background see MapReduceIndexerTool.renameTreeMergeShardDirs()\n     * \n     * Also see MapReduceIndexerTool.run() method where it uses\n     * NLineInputFormat.setNumLinesPerSplit(job, options.fanout)\n     */\n    private void writeShardNumberFile(TaskAttemptContext context) throws IOException {\n      Preconditions.checkArgument(shards.size() > 0);\n      String shard = shards.get(0).getParent().getParent().getName(); // move up from \"data/index\"\n      String taskId = shard.substring(\"part-m-\".length(), shard.length()); // e.g. part-m-00001\n      int taskNum = Integer.parseInt(taskId);\n      int outputShardNum = taskNum / shards.size();\n      LOG.debug(\"Merging into outputShardNum: \" + outputShardNum + \" from taskId: \" + taskId);\n      Path shardNumberFile = new Path(workDir.getParent().getParent(), TreeMergeMapper.SOLR_SHARD_NUMBER);\n      OutputStream out = shardNumberFile.getFileSystem(context.getConfiguration()).create(shardNumberFile);\n      Writer writer = new OutputStreamWriter(out, StandardCharsets.UTF_8);\n      writer.write(String.valueOf(outputShardNum));\n      writer.flush();\n      writer.close();\n    }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["42d384b06aa87eae925b668b65f3246154f0b0fa","6e1c1455e91339e72d6cdc7518defd3e05a43957"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["6e1c1455e91339e72d6cdc7518defd3e05a43957"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6e1c1455e91339e72d6cdc7518defd3e05a43957":["42d384b06aa87eae925b668b65f3246154f0b0fa"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","42d384b06aa87eae925b668b65f3246154f0b0fa"],"fe1c4aa9af769a38e878f608070f672efbeac27f":["6e1c1455e91339e72d6cdc7518defd3e05a43957"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12109b652e9210b8d58fca47f6c4a725d058a58e"],"42d384b06aa87eae925b668b65f3246154f0b0fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"12109b652e9210b8d58fca47f6c4a725d058a58e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","42d384b06aa87eae925b668b65f3246154f0b0fa"],"6e1c1455e91339e72d6cdc7518defd3e05a43957":["5eb2511ababf862ea11e10761c70ee560cd84510","12109b652e9210b8d58fca47f6c4a725d058a58e","fe1c4aa9af769a38e878f608070f672efbeac27f"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"fe1c4aa9af769a38e878f608070f672efbeac27f":[],"42d384b06aa87eae925b668b65f3246154f0b0fa":["5eb2511ababf862ea11e10761c70ee560cd84510","6e1c1455e91339e72d6cdc7518defd3e05a43957","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","74f45af4339b0daf7a95c820ab88c1aea74fbce0","fe1c4aa9af769a38e878f608070f672efbeac27f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}