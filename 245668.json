{"path":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testOneDimEqual().mjava","commits":[{"id":"e3ce1ef883d26aa73919aa2d53991726e96caa13","date":1445421402,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testOneDimEqual().mjava","pathOld":"/dev/null","sourceNew":"  public void testOneDimEqual() throws Exception {\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, 30);\n    int numDims = TestUtil.nextInt(random(), 1, 5);\n\n    int numDocs = atLeast(1000);\n    int theEqualDim = random().nextInt(numDims);\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n      if (docID > 0) {\n        docValues[docID][theEqualDim] = docValues[0][theEqualDim];\n      }\n    }\n\n    verify(docValues, null, numDims, numBytesPerDim);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b35cfd3fa0a5c9e066b0256c4818af1d2a9f22d7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b35cfd3fa0a5c9e066b0256c4818af1d2a9f22d7","date":1482745036,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testOneDimEqual().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testOneDimEqual().mjava","sourceNew":"  public void testOneDimEqual() throws Exception {\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, 30);\n    int numDims = TestUtil.nextInt(random(), 1, 5);\n\n    int numDocs = atLeast(1000);\n    int theEqualDim = random().nextInt(numDims);\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n      if (docID > 0) {\n        docValues[docID][theEqualDim] = docValues[0][theEqualDim];\n      }\n    }\n\n    // Use a small number of points in leaf blocks to trigger a lot of splitting\n    verify(docValues, null, numDims, numBytesPerDim, TestUtil.nextInt(random(), 20, 50));\n  }\n\n","sourceOld":"  public void testOneDimEqual() throws Exception {\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, 30);\n    int numDims = TestUtil.nextInt(random(), 1, 5);\n\n    int numDocs = atLeast(1000);\n    int theEqualDim = random().nextInt(numDims);\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n      if (docID > 0) {\n        docValues[docID][theEqualDim] = docValues[0][theEqualDim];\n      }\n    }\n\n    verify(docValues, null, numDims, numBytesPerDim);\n  }\n\n","bugFix":["e3ce1ef883d26aa73919aa2d53991726e96caa13"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testOneDimEqual().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testOneDimEqual().mjava","sourceNew":"  public void testOneDimEqual() throws Exception {\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, 30);\n    int numDims = TestUtil.nextInt(random(), 1, 5);\n\n    int numDocs = atLeast(1000);\n    int theEqualDim = random().nextInt(numDims);\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n      if (docID > 0) {\n        docValues[docID][theEqualDim] = docValues[0][theEqualDim];\n      }\n    }\n\n    // Use a small number of points in leaf blocks to trigger a lot of splitting\n    verify(docValues, null, numDims, numBytesPerDim, TestUtil.nextInt(random(), 20, 50));\n  }\n\n","sourceOld":"  public void testOneDimEqual() throws Exception {\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, 30);\n    int numDims = TestUtil.nextInt(random(), 1, 5);\n\n    int numDocs = atLeast(1000);\n    int theEqualDim = random().nextInt(numDims);\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n      if (docID > 0) {\n        docValues[docID][theEqualDim] = docValues[0][theEqualDim];\n      }\n    }\n\n    verify(docValues, null, numDims, numBytesPerDim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testOneDimEqual().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testOneDimEqual().mjava","sourceNew":"  public void testOneDimEqual() throws Exception {\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, 30);\n    int numDataDims = TestUtil.nextInt(random(), 1, 5);\n    int numIndexDims = TestUtil.nextInt(random(), 1, numDataDims);\n\n    int numDocs = atLeast(1000);\n    int theEqualDim = random().nextInt(numDataDims);\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDataDims][];\n      for(int dim=0;dim<numDataDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n      if (docID > 0) {\n        docValues[docID][theEqualDim] = docValues[0][theEqualDim];\n      }\n    }\n\n    // Use a small number of points in leaf blocks to trigger a lot of splitting\n    verify(docValues, null, numDataDims, numIndexDims, numBytesPerDim, TestUtil.nextInt(random(), 20, 50));\n  }\n\n","sourceOld":"  public void testOneDimEqual() throws Exception {\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, 30);\n    int numDims = TestUtil.nextInt(random(), 1, 5);\n\n    int numDocs = atLeast(1000);\n    int theEqualDim = random().nextInt(numDims);\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n      if (docID > 0) {\n        docValues[docID][theEqualDim] = docValues[0][theEqualDim];\n      }\n    }\n\n    // Use a small number of points in leaf blocks to trigger a lot of splitting\n    verify(docValues, null, numDims, numBytesPerDim, TestUtil.nextInt(random(), 20, 50));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ed8c026ba85e3c42fb89605b2032dc6f9cc241","date":1581113294,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testOneDimEqual().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testOneDimEqual().mjava","sourceNew":"  public void testOneDimEqual() throws Exception {\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, 30);\n    int numDataDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n    int numIndexDims = Math.min(TestUtil.nextInt(random(), 1, numDataDims), PointValues.MAX_INDEX_DIMENSIONS);\n\n    int numDocs = atLeast(1000);\n    int theEqualDim = random().nextInt(numDataDims);\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDataDims][];\n      for(int dim=0;dim<numDataDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n      if (docID > 0) {\n        docValues[docID][theEqualDim] = docValues[0][theEqualDim];\n      }\n    }\n\n    // Use a small number of points in leaf blocks to trigger a lot of splitting\n    verify(docValues, null, numDataDims, numIndexDims, numBytesPerDim, TestUtil.nextInt(random(), 20, 50));\n  }\n\n","sourceOld":"  public void testOneDimEqual() throws Exception {\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, 30);\n    int numDataDims = TestUtil.nextInt(random(), 1, 5);\n    int numIndexDims = TestUtil.nextInt(random(), 1, numDataDims);\n\n    int numDocs = atLeast(1000);\n    int theEqualDim = random().nextInt(numDataDims);\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDataDims][];\n      for(int dim=0;dim<numDataDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n      if (docID > 0) {\n        docValues[docID][theEqualDim] = docValues[0][theEqualDim];\n      }\n    }\n\n    // Use a small number of points in leaf blocks to trigger a lot of splitting\n    verify(docValues, null, numDataDims, numIndexDims, numBytesPerDim, TestUtil.nextInt(random(), 20, 50));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["f6652c943595e92c187ee904c382863013eae28f"],"f6652c943595e92c187ee904c382863013eae28f":["b35cfd3fa0a5c9e066b0256c4818af1d2a9f22d7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e3ce1ef883d26aa73919aa2d53991726e96caa13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b35cfd3fa0a5c9e066b0256c4818af1d2a9f22d7":["e3ce1ef883d26aa73919aa2d53991726e96caa13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["e3ce1ef883d26aa73919aa2d53991726e96caa13","b35cfd3fa0a5c9e066b0256c4818af1d2a9f22d7"]},"commit2Childs":{"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f6652c943595e92c187ee904c382863013eae28f":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e3ce1ef883d26aa73919aa2d53991726e96caa13"],"e3ce1ef883d26aa73919aa2d53991726e96caa13":["b35cfd3fa0a5c9e066b0256c4818af1d2a9f22d7","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"b35cfd3fa0a5c9e066b0256c4818af1d2a9f22d7":["f6652c943595e92c187ee904c382863013eae28f","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}