{"path":"lucene/src/java/org/apache/lucene/document/AbstractField#toString().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":2,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/AbstractField#toString().mjava","pathOld":"backwards/src/java/org/apache/lucene/document/AbstractField#toString().mjava","sourceNew":"  /** Prints a Field for human consumption. */\n  @Override\n  public final String toString() {\n    StringBuilder result = new StringBuilder();\n    if (isStored) {\n      result.append(\"stored\");\n    }\n    if (isIndexed) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n    }\n    if (isTokenized) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"tokenized\");\n    }\n    if (storeTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVector\");\n    }\n    if (storeOffsetWithTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVectorOffsets\");\n    }\n    if (storePositionWithTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVectorPosition\");\n    }\n    if (isBinary) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"binary\");\n    }\n    if (omitNorms) {\n      result.append(\",omitNorms\");\n    }\n    if (omitTermFreqAndPositions) {\n      result.append(\",omitTermFreqAndPositions\");\n    }\n    if (lazy){\n      result.append(\",lazy\");\n    }\n    result.append('<');\n    result.append(name);\n    result.append(':');\n\n    if (fieldsData != null && lazy == false) {\n      result.append(fieldsData);\n    }\n\n    result.append('>');\n    return result.toString();\n  }\n\n","sourceOld":"  /** Prints a Field for human consumption. */\n  @Override\n  public final String toString() {\n    StringBuilder result = new StringBuilder();\n    if (isStored) {\n      result.append(\"stored\");\n    }\n    if (isIndexed) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n    }\n    if (isTokenized) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"tokenized\");\n    }\n    if (storeTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVector\");\n    }\n    if (storeOffsetWithTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVectorOffsets\");\n    }\n    if (storePositionWithTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVectorPosition\");\n    }\n    if (isBinary) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"binary\");\n    }\n    if (omitNorms) {\n      result.append(\",omitNorms\");\n    }\n    if (omitTermFreqAndPositions) {\n      result.append(\",omitTermFreqAndPositions\");\n    }\n    if (lazy){\n      result.append(\",lazy\");\n    }\n    result.append('<');\n    result.append(name);\n    result.append(':');\n\n    if (fieldsData != null && lazy == false) {\n      result.append(fieldsData);\n    }\n\n    result.append('>');\n    return result.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2afd23a6f1242190c3409d8d81d5c5912d607fc9","date":1310477482,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/AbstractField#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/document/AbstractField#toString().mjava","sourceNew":"  /** Prints a Field for human consumption. */\n  @Override\n  public final String toString() {\n    StringBuilder result = new StringBuilder();\n    if (isStored) {\n      result.append(\"stored\");\n    }\n    if (isIndexed) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n    }\n    if (isTokenized) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"tokenized\");\n    }\n    if (storeTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVector\");\n    }\n    if (storeOffsetWithTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVectorOffsets\");\n    }\n    if (storePositionWithTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVectorPosition\");\n    }\n    if (isBinary) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"binary\");\n    }\n    if (omitNorms) {\n      result.append(\",omitNorms\");\n    }\n    if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      result.append(\",indexOptions=\");\n      result.append(indexOptions);\n    }\n    if (lazy){\n      result.append(\",lazy\");\n    }\n    result.append('<');\n    result.append(name);\n    result.append(':');\n\n    if (fieldsData != null && lazy == false) {\n      result.append(fieldsData);\n    }\n\n    result.append('>');\n    return result.toString();\n  }\n\n","sourceOld":"  /** Prints a Field for human consumption. */\n  @Override\n  public final String toString() {\n    StringBuilder result = new StringBuilder();\n    if (isStored) {\n      result.append(\"stored\");\n    }\n    if (isIndexed) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n    }\n    if (isTokenized) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"tokenized\");\n    }\n    if (storeTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVector\");\n    }\n    if (storeOffsetWithTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVectorOffsets\");\n    }\n    if (storePositionWithTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVectorPosition\");\n    }\n    if (isBinary) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"binary\");\n    }\n    if (omitNorms) {\n      result.append(\",omitNorms\");\n    }\n    if (omitTermFreqAndPositions) {\n      result.append(\",omitTermFreqAndPositions\");\n    }\n    if (lazy){\n      result.append(\",lazy\");\n    }\n    result.append('<');\n    result.append(name);\n    result.append(':');\n\n    if (fieldsData != null && lazy == false) {\n      result.append(fieldsData);\n    }\n\n    result.append('>');\n    return result.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/FieldType#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/document/AbstractField#toString().mjava","sourceNew":"  /** Prints a Field for human consumption. */\n  @Override\n  public final String toString() {\n    StringBuilder result = new StringBuilder();\n    if (stored()) {\n      result.append(\"stored\");\n    }\n    if (indexed()) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n    }\n    if (tokenized()) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"tokenized\");\n    }\n    if (storeTermVectors()) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVector\");\n    }\n    if (storeTermVectorOffsets()) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVectorOffsets\");\n    }\n    if (storeTermVectorPositions()) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVectorPosition\");\n    }\n    if (omitNorms()) {\n      result.append(\",omitNorms\");\n    }\n    if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      result.append(\",indexOptions=\");\n      result.append(indexOptions);\n    }\n    if (lazy()){\n      result.append(\",lazy\");\n    }\n    \n    return result.toString();\n  }\n\n","sourceOld":"  /** Prints a Field for human consumption. */\n  @Override\n  public final String toString() {\n    StringBuilder result = new StringBuilder();\n    if (isStored) {\n      result.append(\"stored\");\n    }\n    if (isIndexed) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n    }\n    if (isTokenized) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"tokenized\");\n    }\n    if (storeTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVector\");\n    }\n    if (storeOffsetWithTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVectorOffsets\");\n    }\n    if (storePositionWithTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVectorPosition\");\n    }\n    if (isBinary) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"binary\");\n    }\n    if (omitNorms) {\n      result.append(\",omitNorms\");\n    }\n    if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      result.append(\",indexOptions=\");\n      result.append(indexOptions);\n    }\n    if (lazy){\n      result.append(\",lazy\");\n    }\n    result.append('<');\n    result.append(name);\n    result.append(':');\n\n    if (fieldsData != null && lazy == false) {\n      result.append(fieldsData);\n    }\n\n    result.append('>');\n    return result.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}