{"path":"lucene/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testAnyChanges().mjava","commits":[{"id":"327863a2fd61e831028b6c56c8fef6b00a44eb0b","date":1302686439,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testAnyChanges().mjava","pathOld":"/dev/null","sourceNew":"  public void testAnyChanges() {\n    DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue(\n        new BufferedDeletes(false));\n    Term template = new Term(\"id\");\n    final int size = 200 + random.nextInt(500) * RANDOM_MULTIPLIER;\n    int termsSinceFreeze = 0;\n    int queriesSinceFreeze = 0;\n    for (int i = 0; i < size; i++) {\n      Term term = template.createTerm(\"\" + i);\n      if (random.nextInt(10) == 0) {\n        queue.addDelete(new TermQuery(term));\n        queriesSinceFreeze++;\n      } else {\n        queue.addDelete(term);\n        termsSinceFreeze++;\n      }\n      assertTrue(queue.anyChanges());\n      if (random.nextInt(5) == 0) {\n        FrozenBufferedDeletes freezeGlobalBuffer = queue\n            .freezeGlobalBuffer(null);\n        assertEquals(termsSinceFreeze, freezeGlobalBuffer.terms.length);\n        assertEquals(queriesSinceFreeze, freezeGlobalBuffer.queries.length);\n        queriesSinceFreeze = 0;\n        termsSinceFreeze = 0;\n        assertFalse(queue.anyChanges());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78248211b373c5a9b53071bf888805d4fab51bd3","date":1303919265,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testAnyChanges().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testAnyChanges().mjava","sourceNew":"  public void testAnyChanges() {\n    DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    Term template = new Term(\"id\");\n    final int size = 200 + random.nextInt(500) * RANDOM_MULTIPLIER;\n    int termsSinceFreeze = 0;\n    int queriesSinceFreeze = 0;\n    for (int i = 0; i < size; i++) {\n      Term term = template.createTerm(\"\" + i);\n      if (random.nextInt(10) == 0) {\n        queue.addDelete(new TermQuery(term));\n        queriesSinceFreeze++;\n      } else {\n        queue.addDelete(term);\n        termsSinceFreeze++;\n      }\n      assertTrue(queue.anyChanges());\n      if (random.nextInt(5) == 0) {\n        FrozenBufferedDeletes freezeGlobalBuffer = queue\n            .freezeGlobalBuffer(null);\n        assertEquals(termsSinceFreeze, freezeGlobalBuffer.terms.length);\n        assertEquals(queriesSinceFreeze, freezeGlobalBuffer.queries.length);\n        queriesSinceFreeze = 0;\n        termsSinceFreeze = 0;\n        assertFalse(queue.anyChanges());\n      }\n    }\n  }\n\n","sourceOld":"  public void testAnyChanges() {\n    DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue(\n        new BufferedDeletes(false));\n    Term template = new Term(\"id\");\n    final int size = 200 + random.nextInt(500) * RANDOM_MULTIPLIER;\n    int termsSinceFreeze = 0;\n    int queriesSinceFreeze = 0;\n    for (int i = 0; i < size; i++) {\n      Term term = template.createTerm(\"\" + i);\n      if (random.nextInt(10) == 0) {\n        queue.addDelete(new TermQuery(term));\n        queriesSinceFreeze++;\n      } else {\n        queue.addDelete(term);\n        termsSinceFreeze++;\n      }\n      assertTrue(queue.anyChanges());\n      if (random.nextInt(5) == 0) {\n        FrozenBufferedDeletes freezeGlobalBuffer = queue\n            .freezeGlobalBuffer(null);\n        assertEquals(termsSinceFreeze, freezeGlobalBuffer.terms.length);\n        assertEquals(queriesSinceFreeze, freezeGlobalBuffer.queries.length);\n        queriesSinceFreeze = 0;\n        termsSinceFreeze = 0;\n        assertFalse(queue.anyChanges());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testAnyChanges().mjava","pathOld":"/dev/null","sourceNew":"  public void testAnyChanges() {\n    DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    Term template = new Term(\"id\");\n    final int size = 200 + random.nextInt(500) * RANDOM_MULTIPLIER;\n    int termsSinceFreeze = 0;\n    int queriesSinceFreeze = 0;\n    for (int i = 0; i < size; i++) {\n      Term term = template.createTerm(\"\" + i);\n      if (random.nextInt(10) == 0) {\n        queue.addDelete(new TermQuery(term));\n        queriesSinceFreeze++;\n      } else {\n        queue.addDelete(term);\n        termsSinceFreeze++;\n      }\n      assertTrue(queue.anyChanges());\n      if (random.nextInt(5) == 0) {\n        FrozenBufferedDeletes freezeGlobalBuffer = queue\n            .freezeGlobalBuffer(null);\n        assertEquals(termsSinceFreeze, freezeGlobalBuffer.terms.length);\n        assertEquals(queriesSinceFreeze, freezeGlobalBuffer.queries.length);\n        queriesSinceFreeze = 0;\n        termsSinceFreeze = 0;\n        assertFalse(queue.anyChanges());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testAnyChanges().mjava","pathOld":"/dev/null","sourceNew":"  public void testAnyChanges() {\n    DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    Term template = new Term(\"id\");\n    final int size = 200 + random.nextInt(500) * RANDOM_MULTIPLIER;\n    int termsSinceFreeze = 0;\n    int queriesSinceFreeze = 0;\n    for (int i = 0; i < size; i++) {\n      Term term = template.createTerm(\"\" + i);\n      if (random.nextInt(10) == 0) {\n        queue.addDelete(new TermQuery(term));\n        queriesSinceFreeze++;\n      } else {\n        queue.addDelete(term);\n        termsSinceFreeze++;\n      }\n      assertTrue(queue.anyChanges());\n      if (random.nextInt(5) == 0) {\n        FrozenBufferedDeletes freezeGlobalBuffer = queue\n            .freezeGlobalBuffer(null);\n        assertEquals(termsSinceFreeze, freezeGlobalBuffer.terms.length);\n        assertEquals(queriesSinceFreeze, freezeGlobalBuffer.queries.length);\n        queriesSinceFreeze = 0;\n        termsSinceFreeze = 0;\n        assertFalse(queue.anyChanges());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testAnyChanges().mjava","pathOld":"/dev/null","sourceNew":"  public void testAnyChanges() {\n    DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    Term template = new Term(\"id\");\n    final int size = 200 + random.nextInt(500) * RANDOM_MULTIPLIER;\n    int termsSinceFreeze = 0;\n    int queriesSinceFreeze = 0;\n    for (int i = 0; i < size; i++) {\n      Term term = template.createTerm(\"\" + i);\n      if (random.nextInt(10) == 0) {\n        queue.addDelete(new TermQuery(term));\n        queriesSinceFreeze++;\n      } else {\n        queue.addDelete(term);\n        termsSinceFreeze++;\n      }\n      assertTrue(queue.anyChanges());\n      if (random.nextInt(5) == 0) {\n        FrozenBufferedDeletes freezeGlobalBuffer = queue\n            .freezeGlobalBuffer(null);\n        assertEquals(termsSinceFreeze, freezeGlobalBuffer.terms.length);\n        assertEquals(queriesSinceFreeze, freezeGlobalBuffer.queries.length);\n        queriesSinceFreeze = 0;\n        termsSinceFreeze = 0;\n        assertFalse(queue.anyChanges());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","date":1308670974,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testAnyChanges().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testAnyChanges().mjava","sourceNew":"  public void testAnyChanges() {\n    DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    final int size = 200 + random.nextInt(500) * RANDOM_MULTIPLIER;\n    int termsSinceFreeze = 0;\n    int queriesSinceFreeze = 0;\n    for (int i = 0; i < size; i++) {\n      Term term = new Term(\"id\", \"\" + i);\n      if (random.nextInt(10) == 0) {\n        queue.addDelete(new TermQuery(term));\n        queriesSinceFreeze++;\n      } else {\n        queue.addDelete(term);\n        termsSinceFreeze++;\n      }\n      assertTrue(queue.anyChanges());\n      if (random.nextInt(5) == 0) {\n        FrozenBufferedDeletes freezeGlobalBuffer = queue\n            .freezeGlobalBuffer(null);\n        assertEquals(termsSinceFreeze, freezeGlobalBuffer.terms.length);\n        assertEquals(queriesSinceFreeze, freezeGlobalBuffer.queries.length);\n        queriesSinceFreeze = 0;\n        termsSinceFreeze = 0;\n        assertFalse(queue.anyChanges());\n      }\n    }\n  }\n\n","sourceOld":"  public void testAnyChanges() {\n    DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    Term template = new Term(\"id\");\n    final int size = 200 + random.nextInt(500) * RANDOM_MULTIPLIER;\n    int termsSinceFreeze = 0;\n    int queriesSinceFreeze = 0;\n    for (int i = 0; i < size; i++) {\n      Term term = template.createTerm(\"\" + i);\n      if (random.nextInt(10) == 0) {\n        queue.addDelete(new TermQuery(term));\n        queriesSinceFreeze++;\n      } else {\n        queue.addDelete(term);\n        termsSinceFreeze++;\n      }\n      assertTrue(queue.anyChanges());\n      if (random.nextInt(5) == 0) {\n        FrozenBufferedDeletes freezeGlobalBuffer = queue\n            .freezeGlobalBuffer(null);\n        assertEquals(termsSinceFreeze, freezeGlobalBuffer.terms.length);\n        assertEquals(queriesSinceFreeze, freezeGlobalBuffer.queries.length);\n        queriesSinceFreeze = 0;\n        termsSinceFreeze = 0;\n        assertFalse(queue.anyChanges());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testAnyChanges().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testAnyChanges().mjava","sourceNew":"  public void testAnyChanges() {\n    DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    final int size = 200 + random.nextInt(500) * RANDOM_MULTIPLIER;\n    int termsSinceFreeze = 0;\n    int queriesSinceFreeze = 0;\n    for (int i = 0; i < size; i++) {\n      Term term = new Term(\"id\", \"\" + i);\n      if (random.nextInt(10) == 0) {\n        queue.addDelete(new TermQuery(term));\n        queriesSinceFreeze++;\n      } else {\n        queue.addDelete(term);\n        termsSinceFreeze++;\n      }\n      assertTrue(queue.anyChanges());\n      if (random.nextInt(5) == 0) {\n        FrozenBufferedDeletes freezeGlobalBuffer = queue\n            .freezeGlobalBuffer(null);\n        assertEquals(termsSinceFreeze, freezeGlobalBuffer.terms.length);\n        assertEquals(queriesSinceFreeze, freezeGlobalBuffer.queries.length);\n        queriesSinceFreeze = 0;\n        termsSinceFreeze = 0;\n        assertFalse(queue.anyChanges());\n      }\n    }\n  }\n\n","sourceOld":"  public void testAnyChanges() {\n    DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    Term template = new Term(\"id\");\n    final int size = 200 + random.nextInt(500) * RANDOM_MULTIPLIER;\n    int termsSinceFreeze = 0;\n    int queriesSinceFreeze = 0;\n    for (int i = 0; i < size; i++) {\n      Term term = template.createTerm(\"\" + i);\n      if (random.nextInt(10) == 0) {\n        queue.addDelete(new TermQuery(term));\n        queriesSinceFreeze++;\n      } else {\n        queue.addDelete(term);\n        termsSinceFreeze++;\n      }\n      assertTrue(queue.anyChanges());\n      if (random.nextInt(5) == 0) {\n        FrozenBufferedDeletes freezeGlobalBuffer = queue\n            .freezeGlobalBuffer(null);\n        assertEquals(termsSinceFreeze, freezeGlobalBuffer.terms.length);\n        assertEquals(queriesSinceFreeze, freezeGlobalBuffer.queries.length);\n        queriesSinceFreeze = 0;\n        termsSinceFreeze = 0;\n        assertFalse(queue.anyChanges());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testAnyChanges().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testAnyChanges().mjava","sourceNew":"  public void testAnyChanges() {\n    DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    final int size = 200 + random.nextInt(500) * RANDOM_MULTIPLIER;\n    int termsSinceFreeze = 0;\n    int queriesSinceFreeze = 0;\n    for (int i = 0; i < size; i++) {\n      Term term = new Term(\"id\", \"\" + i);\n      if (random.nextInt(10) == 0) {\n        queue.addDelete(new TermQuery(term));\n        queriesSinceFreeze++;\n      } else {\n        queue.addDelete(term);\n        termsSinceFreeze++;\n      }\n      assertTrue(queue.anyChanges());\n      if (random.nextInt(5) == 0) {\n        FrozenBufferedDeletes freezeGlobalBuffer = queue\n            .freezeGlobalBuffer(null);\n        assertEquals(termsSinceFreeze, freezeGlobalBuffer.terms.length);\n        assertEquals(queriesSinceFreeze, freezeGlobalBuffer.queries.length);\n        queriesSinceFreeze = 0;\n        termsSinceFreeze = 0;\n        assertFalse(queue.anyChanges());\n      }\n    }\n  }\n\n","sourceOld":"  public void testAnyChanges() {\n    DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    Term template = new Term(\"id\");\n    final int size = 200 + random.nextInt(500) * RANDOM_MULTIPLIER;\n    int termsSinceFreeze = 0;\n    int queriesSinceFreeze = 0;\n    for (int i = 0; i < size; i++) {\n      Term term = template.createTerm(\"\" + i);\n      if (random.nextInt(10) == 0) {\n        queue.addDelete(new TermQuery(term));\n        queriesSinceFreeze++;\n      } else {\n        queue.addDelete(term);\n        termsSinceFreeze++;\n      }\n      assertTrue(queue.anyChanges());\n      if (random.nextInt(5) == 0) {\n        FrozenBufferedDeletes freezeGlobalBuffer = queue\n            .freezeGlobalBuffer(null);\n        assertEquals(termsSinceFreeze, freezeGlobalBuffer.terms.length);\n        assertEquals(queriesSinceFreeze, freezeGlobalBuffer.queries.length);\n        queriesSinceFreeze = 0;\n        termsSinceFreeze = 0;\n        assertFalse(queue.anyChanges());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fa5ed548a2e7179ad03d6dfef30e19b8c06a8e2","date":1311898374,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testAnyChanges().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testAnyChanges().mjava","sourceNew":"  public void testAnyChanges() {\n    DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    final int size = 200 + random.nextInt(500) * RANDOM_MULTIPLIER;\n    int termsSinceFreeze = 0;\n    int queriesSinceFreeze = 0;\n    for (int i = 0; i < size; i++) {\n      Term term = new Term(\"id\", \"\" + i);\n      if (random.nextInt(10) == 0) {\n        queue.addDelete(new TermQuery(term));\n        queriesSinceFreeze++;\n      } else {\n        queue.addDelete(term);\n        termsSinceFreeze++;\n      }\n      assertTrue(queue.anyChanges());\n      if (random.nextInt(5) == 0) {\n        FrozenBufferedDeletes freezeGlobalBuffer = queue\n            .freezeGlobalBuffer(null);\n        assertEquals(termsSinceFreeze, freezeGlobalBuffer.termCount);\n        assertEquals(queriesSinceFreeze, freezeGlobalBuffer.queries.length);\n        queriesSinceFreeze = 0;\n        termsSinceFreeze = 0;\n        assertFalse(queue.anyChanges());\n      }\n    }\n  }\n\n","sourceOld":"  public void testAnyChanges() {\n    DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    final int size = 200 + random.nextInt(500) * RANDOM_MULTIPLIER;\n    int termsSinceFreeze = 0;\n    int queriesSinceFreeze = 0;\n    for (int i = 0; i < size; i++) {\n      Term term = new Term(\"id\", \"\" + i);\n      if (random.nextInt(10) == 0) {\n        queue.addDelete(new TermQuery(term));\n        queriesSinceFreeze++;\n      } else {\n        queue.addDelete(term);\n        termsSinceFreeze++;\n      }\n      assertTrue(queue.anyChanges());\n      if (random.nextInt(5) == 0) {\n        FrozenBufferedDeletes freezeGlobalBuffer = queue\n            .freezeGlobalBuffer(null);\n        assertEquals(termsSinceFreeze, freezeGlobalBuffer.terms.length);\n        assertEquals(queriesSinceFreeze, freezeGlobalBuffer.queries.length);\n        queriesSinceFreeze = 0;\n        termsSinceFreeze = 0;\n        assertFalse(queue.anyChanges());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testAnyChanges().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testAnyChanges().mjava","sourceNew":"  public void testAnyChanges() {\n    DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    final int size = 200 + random.nextInt(500) * RANDOM_MULTIPLIER;\n    int termsSinceFreeze = 0;\n    int queriesSinceFreeze = 0;\n    for (int i = 0; i < size; i++) {\n      Term term = new Term(\"id\", \"\" + i);\n      if (random.nextInt(10) == 0) {\n        queue.addDelete(new TermQuery(term));\n        queriesSinceFreeze++;\n      } else {\n        queue.addDelete(term);\n        termsSinceFreeze++;\n      }\n      assertTrue(queue.anyChanges());\n      if (random.nextInt(5) == 0) {\n        FrozenBufferedDeletes freezeGlobalBuffer = queue\n            .freezeGlobalBuffer(null);\n        assertEquals(termsSinceFreeze, freezeGlobalBuffer.termCount);\n        assertEquals(queriesSinceFreeze, freezeGlobalBuffer.queries.length);\n        queriesSinceFreeze = 0;\n        termsSinceFreeze = 0;\n        assertFalse(queue.anyChanges());\n      }\n    }\n  }\n\n","sourceOld":"  public void testAnyChanges() {\n    DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    final int size = 200 + random.nextInt(500) * RANDOM_MULTIPLIER;\n    int termsSinceFreeze = 0;\n    int queriesSinceFreeze = 0;\n    for (int i = 0; i < size; i++) {\n      Term term = new Term(\"id\", \"\" + i);\n      if (random.nextInt(10) == 0) {\n        queue.addDelete(new TermQuery(term));\n        queriesSinceFreeze++;\n      } else {\n        queue.addDelete(term);\n        termsSinceFreeze++;\n      }\n      assertTrue(queue.anyChanges());\n      if (random.nextInt(5) == 0) {\n        FrozenBufferedDeletes freezeGlobalBuffer = queue\n            .freezeGlobalBuffer(null);\n        assertEquals(termsSinceFreeze, freezeGlobalBuffer.termCount);\n        assertEquals(queriesSinceFreeze, freezeGlobalBuffer.queries.length);\n        queriesSinceFreeze = 0;\n        termsSinceFreeze = 0;\n        assertFalse(queue.anyChanges());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9fa5ed548a2e7179ad03d6dfef30e19b8c06a8e2":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9fa5ed548a2e7179ad03d6dfef30e19b8c06a8e2"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","78248211b373c5a9b53071bf888805d4fab51bd3"],"327863a2fd61e831028b6c56c8fef6b00a44eb0b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2553b00f699380c64959ccb27991289aae87be2e":["a3776dccca01c11e7046323cfad46a3b4a471233","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"78248211b373c5a9b53071bf888805d4fab51bd3":["327863a2fd61e831028b6c56c8fef6b00a44eb0b"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["b3e06be49006ecac364d39d12b9c9f74882f9b9f","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"9fa5ed548a2e7179ad03d6dfef30e19b8c06a8e2":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["9fa5ed548a2e7179ad03d6dfef30e19b8c06a8e2","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":["2553b00f699380c64959ccb27991289aae87be2e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f","327863a2fd61e831028b6c56c8fef6b00a44eb0b"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"327863a2fd61e831028b6c56c8fef6b00a44eb0b":["78248211b373c5a9b53071bf888805d4fab51bd3"],"2553b00f699380c64959ccb27991289aae87be2e":[],"78248211b373c5a9b53071bf888805d4fab51bd3":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}