{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsFormat#Lucene50PostingsFormat(int,int).mjava","commits":[{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsFormat#Lucene50PostingsFormat(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsFormat#Lucene41PostingsFormat(int,int).mjava","sourceNew":"  /** Creates {@code Lucene50PostingsFormat} with custom\n   *  values for {@code minBlockSize} and {@code\n   *  maxBlockSize} passed to block terms dictionary.\n   *  @see BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int) */\n  public Lucene50PostingsFormat(int minTermBlockSize, int maxTermBlockSize) {\n    super(\"Lucene50\");\n    this.minTermBlockSize = minTermBlockSize;\n    assert minTermBlockSize > 1;\n    this.maxTermBlockSize = maxTermBlockSize;\n    assert minTermBlockSize <= maxTermBlockSize;\n  }\n\n","sourceOld":"  /** Creates {@code Lucene41PostingsFormat} with custom\n   *  values for {@code minBlockSize} and {@code\n   *  maxBlockSize} passed to block terms dictionary.\n   *  @see BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int) */\n  public Lucene41PostingsFormat(int minTermBlockSize, int maxTermBlockSize) {\n    super(\"Lucene41\");\n    this.minTermBlockSize = minTermBlockSize;\n    assert minTermBlockSize > 1;\n    this.maxTermBlockSize = maxTermBlockSize;\n    assert minTermBlockSize <= maxTermBlockSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsFormat#Lucene50PostingsFormat(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsFormat#Lucene41PostingsFormat(int,int).mjava","sourceNew":"  /** Creates {@code Lucene50PostingsFormat} with custom\n   *  values for {@code minBlockSize} and {@code\n   *  maxBlockSize} passed to block terms dictionary.\n   *  @see BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int) */\n  public Lucene50PostingsFormat(int minTermBlockSize, int maxTermBlockSize) {\n    super(\"Lucene50\");\n    this.minTermBlockSize = minTermBlockSize;\n    assert minTermBlockSize > 1;\n    this.maxTermBlockSize = maxTermBlockSize;\n    assert minTermBlockSize <= maxTermBlockSize;\n  }\n\n","sourceOld":"  /** Creates {@code Lucene41PostingsFormat} with custom\n   *  values for {@code minBlockSize} and {@code\n   *  maxBlockSize} passed to block terms dictionary.\n   *  @see BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int) */\n  public Lucene41PostingsFormat(int minTermBlockSize, int maxTermBlockSize) {\n    super(\"Lucene41\");\n    this.minTermBlockSize = minTermBlockSize;\n    assert minTermBlockSize > 1;\n    this.maxTermBlockSize = maxTermBlockSize;\n    assert minTermBlockSize <= maxTermBlockSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7de3c1dd4c0ae19854783135d925c794bc213fbd","date":1421160242,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsFormat#Lucene50PostingsFormat(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsFormat#Lucene50PostingsFormat(int,int).mjava","sourceNew":"  /** Creates {@code Lucene50PostingsFormat} with custom\n   *  values for {@code minBlockSize} and {@code\n   *  maxBlockSize} passed to block terms dictionary.\n   *  @see BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int) */\n  public Lucene50PostingsFormat(int minTermBlockSize, int maxTermBlockSize) {\n    super(\"Lucene50\");\n    BlockTreeTermsWriter.validateSettings(minTermBlockSize, maxTermBlockSize);\n    this.minTermBlockSize = minTermBlockSize;\n    this.maxTermBlockSize = maxTermBlockSize;\n  }\n\n","sourceOld":"  /** Creates {@code Lucene50PostingsFormat} with custom\n   *  values for {@code minBlockSize} and {@code\n   *  maxBlockSize} passed to block terms dictionary.\n   *  @see BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int) */\n  public Lucene50PostingsFormat(int minTermBlockSize, int maxTermBlockSize) {\n    super(\"Lucene50\");\n    this.minTermBlockSize = minTermBlockSize;\n    assert minTermBlockSize > 1;\n    this.maxTermBlockSize = maxTermBlockSize;\n    assert minTermBlockSize <= maxTermBlockSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"938935e3efe6aaecb925448d7f992783247366de","date":1554389977,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsFormat#Lucene50PostingsFormat(int,int,FSTLoadMode).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsFormat#Lucene50PostingsFormat(int,int).mjava","sourceNew":"  /** Creates {@code Lucene50PostingsFormat} with custom\n   *  values for {@code minBlockSize} and {@code\n   *  maxBlockSize} passed to block terms dictionary.\n   *  @see BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int) */\n  public Lucene50PostingsFormat(int minTermBlockSize, int maxTermBlockSize, FSTLoadMode fstLoadMode) {\n    super(\"Lucene50\");\n    BlockTreeTermsWriter.validateSettings(minTermBlockSize, maxTermBlockSize);\n    this.minTermBlockSize = minTermBlockSize;\n    this.maxTermBlockSize = maxTermBlockSize;\n    this.fstLoadMode = fstLoadMode;\n  }\n\n","sourceOld":"  /** Creates {@code Lucene50PostingsFormat} with custom\n   *  values for {@code minBlockSize} and {@code\n   *  maxBlockSize} passed to block terms dictionary.\n   *  @see BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int) */\n  public Lucene50PostingsFormat(int minTermBlockSize, int maxTermBlockSize) {\n    super(\"Lucene50\");\n    BlockTreeTermsWriter.validateSettings(minTermBlockSize, maxTermBlockSize);\n    this.minTermBlockSize = minTermBlockSize;\n    this.maxTermBlockSize = maxTermBlockSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"99eb4a732d1a908f4636ace52928876136bf1896":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"938935e3efe6aaecb925448d7f992783247366de":["7de3c1dd4c0ae19854783135d925c794bc213fbd"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","99eb4a732d1a908f4636ace52928876136bf1896"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["938935e3efe6aaecb925448d7f992783247366de"],"7de3c1dd4c0ae19854783135d925c794bc213fbd":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"]},"commit2Childs":{"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99eb4a732d1a908f4636ace52928876136bf1896","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"938935e3efe6aaecb925448d7f992783247366de":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["7de3c1dd4c0ae19854783135d925c794bc213fbd"],"7de3c1dd4c0ae19854783135d925c794bc213fbd":["938935e3efe6aaecb925448d7f992783247366de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}