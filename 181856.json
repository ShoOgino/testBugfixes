{"path":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Node#getDeepCopy(Map[String,Object]).mjava","commits":[{"id":"caf7f9acfdff984e59be68054cc1e0048b8ee030","date":1407766058,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Node#getDeepCopy(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Copies a supplied Map to a new Map which is returned. Used to copy a\n     * records values. If a fields value is a List then they have to be\n     * deep-copied for thread safety\n     */\n    private static Map<String, Object> getDeepCopy(Map<String, Object> values) {\n      Map<String, Object> result = new HashMap<>();\n      for (Map.Entry<String, Object> entry : values.entrySet()) {\n        if (entry.getValue() instanceof List) {\n          result.put(entry.getKey(), new ArrayList((List) entry.getValue()));\n        } else {\n          result.put(entry.getKey(), entry.getValue());\n        }\n      }\n      return result;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d76fc51e1f6bf807458c684a30c03be70be5c5f","date":1407826855,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Node#getDeepCopy(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Node#getDeepCopy(Map[String,Object]).mjava","sourceNew":"    /**\n     * Copies a supplied Map to a new Map which is returned. Used to copy a\n     * records values. If a fields value is a List then they have to be\n     * deep-copied for thread safety\n     */\n    private static Map<String, Object> getDeepCopy(Map<String, Object> values) {\n      Map<String, Object> result = new LinkedHashMap<>();\n      for (Map.Entry<String, Object> entry : values.entrySet()) {\n        if (entry.getValue() instanceof List) {\n          result.put(entry.getKey(), new ArrayList((List) entry.getValue()));\n        } else {\n          result.put(entry.getKey(), entry.getValue());\n        }\n      }\n      return result;\n    }\n\n","sourceOld":"    /**\n     * Copies a supplied Map to a new Map which is returned. Used to copy a\n     * records values. If a fields value is a List then they have to be\n     * deep-copied for thread safety\n     */\n    private static Map<String, Object> getDeepCopy(Map<String, Object> values) {\n      Map<String, Object> result = new HashMap<>();\n      for (Map.Entry<String, Object> entry : values.entrySet()) {\n        if (entry.getValue() instanceof List) {\n          result.put(entry.getKey(), new ArrayList((List) entry.getValue()));\n        } else {\n          result.put(entry.getKey(), entry.getValue());\n        }\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"026b7e389cd847f6590f8783e6f9f1c8d2b80fcd","date":1472647322,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Node#getDeepCopy(Map[String,Object]).mjava","sourceNew":null,"sourceOld":"    /**\n     * Copies a supplied Map to a new Map which is returned. Used to copy a\n     * records values. If a fields value is a List then they have to be\n     * deep-copied for thread safety\n     */\n    private static Map<String, Object> getDeepCopy(Map<String, Object> values) {\n      Map<String, Object> result = new LinkedHashMap<>();\n      for (Map.Entry<String, Object> entry : values.entrySet()) {\n        if (entry.getValue() instanceof List) {\n          result.put(entry.getKey(), new ArrayList((List) entry.getValue()));\n        } else {\n          result.put(entry.getKey(), entry.getValue());\n        }\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc8f206328a706450934717bec7ccc22ad166fc0","date":1473142172,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Node#getDeepCopy(Map[String,Object]).mjava","sourceNew":null,"sourceOld":"    /**\n     * Copies a supplied Map to a new Map which is returned. Used to copy a\n     * records values. If a fields value is a List then they have to be\n     * deep-copied for thread safety\n     */\n    private static Map<String, Object> getDeepCopy(Map<String, Object> values) {\n      Map<String, Object> result = new LinkedHashMap<>();\n      for (Map.Entry<String, Object> entry : values.entrySet()) {\n        if (entry.getValue() instanceof List) {\n          result.put(entry.getKey(), new ArrayList((List) entry.getValue()));\n        } else {\n          result.put(entry.getKey(), entry.getValue());\n        }\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Node#getDeepCopy(Map[String,Object]).mjava","sourceNew":null,"sourceOld":"    /**\n     * Copies a supplied Map to a new Map which is returned. Used to copy a\n     * records values. If a fields value is a List then they have to be\n     * deep-copied for thread safety\n     */\n    private static Map<String, Object> getDeepCopy(Map<String, Object> values) {\n      Map<String, Object> result = new LinkedHashMap<>();\n      for (Map.Entry<String, Object> entry : values.entrySet()) {\n        if (entry.getValue() instanceof List) {\n          result.put(entry.getKey(), new ArrayList((List) entry.getValue()));\n        } else {\n          result.put(entry.getKey(), entry.getValue());\n        }\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Node#getDeepCopy(Map[String,Object]).mjava","sourceNew":null,"sourceOld":"    /**\n     * Copies a supplied Map to a new Map which is returned. Used to copy a\n     * records values. If a fields value is a List then they have to be\n     * deep-copied for thread safety\n     */\n    private static Map<String, Object> getDeepCopy(Map<String, Object> values) {\n      Map<String, Object> result = new LinkedHashMap<>();\n      for (Map.Entry<String, Object> entry : values.entrySet()) {\n        if (entry.getValue() instanceof List) {\n          result.put(entry.getKey(), new ArrayList((List) entry.getValue()));\n        } else {\n          result.put(entry.getKey(), entry.getValue());\n        }\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"026b7e389cd847f6590f8783e6f9f1c8d2b80fcd":["2d76fc51e1f6bf807458c684a30c03be70be5c5f"],"2d76fc51e1f6bf807458c684a30c03be70be5c5f":["caf7f9acfdff984e59be68054cc1e0048b8ee030"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["2d76fc51e1f6bf807458c684a30c03be70be5c5f","026b7e389cd847f6590f8783e6f9f1c8d2b80fcd"],"bc8f206328a706450934717bec7ccc22ad166fc0":["2d76fc51e1f6bf807458c684a30c03be70be5c5f","026b7e389cd847f6590f8783e6f9f1c8d2b80fcd"],"caf7f9acfdff984e59be68054cc1e0048b8ee030":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2d76fc51e1f6bf807458c684a30c03be70be5c5f","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"026b7e389cd847f6590f8783e6f9f1c8d2b80fcd":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","bc8f206328a706450934717bec7ccc22ad166fc0"],"2d76fc51e1f6bf807458c684a30c03be70be5c5f":["026b7e389cd847f6590f8783e6f9f1c8d2b80fcd","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","bc8f206328a706450934717bec7ccc22ad166fc0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["caf7f9acfdff984e59be68054cc1e0048b8ee030"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bc8f206328a706450934717bec7ccc22ad166fc0":[],"caf7f9acfdff984e59be68054cc1e0048b8ee030":["2d76fc51e1f6bf807458c684a30c03be70be5c5f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["bc8f206328a706450934717bec7ccc22ad166fc0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}