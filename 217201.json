{"path":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/SortedSetDocValuesFacetCounts#countAll().mjava","commits":[{"id":"4b8b2bc4b8b503cc0b5743b19445798c62069e4d","date":1477390943,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/SortedSetDocValuesFacetCounts#countAll().mjava","pathOld":"/dev/null","sourceNew":"  /** Does all the \"real work\" of tallying up the counts. */\n  private final void countAll() throws IOException {\n    //System.out.println(\"ssdv count\");\n\n    MultiDocValues.OrdinalMap ordinalMap;\n\n    // TODO: is this right?  really, we need a way to\n    // verify that this ordinalMap \"matches\" the leaves in\n    // matchingDocs...\n    if (dv instanceof MultiDocValues.MultiSortedSetDocValues) {\n      ordinalMap = ((MultiSortedSetDocValues) dv).mapping;\n    } else {\n      ordinalMap = null;\n    }\n    \n    IndexReader origReader = state.getOrigReader();\n\n    for(LeafReaderContext context : origReader.leaves()) {\n\n      LeafReader reader = context.reader();\n      \n      SortedSetDocValues segValues = reader.getSortedSetDocValues(field);\n      if (segValues == null) {\n        continue;\n      }\n\n      Bits liveDocs = reader.getLiveDocs();\n\n      if (ordinalMap != null) {\n        final LongValues ordMap = ordinalMap.getGlobalOrds(context.ord);\n\n        int numSegOrds = (int) segValues.getValueCount();\n\n        // First count in seg-ord space:\n        final int[] segCounts = new int[numSegOrds];\n        int docID;\n        while ((docID = segValues.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n          if (liveDocs == null || liveDocs.get(docID)) {\n            int term = (int) segValues.nextOrd();\n            while (term != SortedSetDocValues.NO_MORE_ORDS) {\n              segCounts[term]++;\n              term = (int) segValues.nextOrd();\n            }\n          }\n        }\n\n        // Then, migrate to global ords:\n        for(int ord=0;ord<numSegOrds;ord++) {\n          int count = segCounts[ord];\n          if (count != 0) {\n            counts[(int) ordMap.get(ord)] += count;\n          }\n        }\n      } else {\n        // No ord mapping (e.g., single segment index):\n        // just aggregate directly into counts:\n        int docID;\n        while ((docID = segValues.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n          if (liveDocs == null || liveDocs.get(docID)) {\n            int term = (int) segValues.nextOrd();\n            while (term != SortedSetDocValues.NO_MORE_ORDS) {\n              counts[term]++;\n              term = (int) segValues.nextOrd();\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60b61628d1912768f51eccaa8ead5a5a32ab34c6","date":1477427681,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/SortedSetDocValuesFacetCounts#countAll().mjava","pathOld":"/dev/null","sourceNew":"  /** Does all the \"real work\" of tallying up the counts. */\n  private final void countAll() throws IOException {\n    //System.out.println(\"ssdv count\");\n\n    MultiDocValues.OrdinalMap ordinalMap;\n\n    // TODO: is this right?  really, we need a way to\n    // verify that this ordinalMap \"matches\" the leaves in\n    // matchingDocs...\n    if (dv instanceof MultiDocValues.MultiSortedSetDocValues) {\n      ordinalMap = ((MultiSortedSetDocValues) dv).mapping;\n    } else {\n      ordinalMap = null;\n    }\n    \n    IndexReader origReader = state.getOrigReader();\n\n    for(LeafReaderContext context : origReader.leaves()) {\n\n      LeafReader reader = context.reader();\n      \n      SortedSetDocValues segValues = reader.getSortedSetDocValues(field);\n      if (segValues == null) {\n        continue;\n      }\n\n      Bits liveDocs = reader.getLiveDocs();\n\n      if (ordinalMap != null) {\n        final LongValues ordMap = ordinalMap.getGlobalOrds(context.ord);\n\n        int numSegOrds = (int) segValues.getValueCount();\n\n        // First count in seg-ord space:\n        final int[] segCounts = new int[numSegOrds];\n        int docID;\n        while ((docID = segValues.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n          if (liveDocs == null || liveDocs.get(docID)) {\n            int term = (int) segValues.nextOrd();\n            while (term != SortedSetDocValues.NO_MORE_ORDS) {\n              segCounts[term]++;\n              term = (int) segValues.nextOrd();\n            }\n          }\n        }\n\n        // Then, migrate to global ords:\n        for(int ord=0;ord<numSegOrds;ord++) {\n          int count = segCounts[ord];\n          if (count != 0) {\n            counts[(int) ordMap.get(ord)] += count;\n          }\n        }\n      } else {\n        // No ord mapping (e.g., single segment index):\n        // just aggregate directly into counts:\n        int docID;\n        while ((docID = segValues.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n          if (liveDocs == null || liveDocs.get(docID)) {\n            int term = (int) segValues.nextOrd();\n            while (term != SortedSetDocValues.NO_MORE_ORDS) {\n              counts[term]++;\n              term = (int) segValues.nextOrd();\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/SortedSetDocValuesFacetCounts#countAll().mjava","pathOld":"/dev/null","sourceNew":"  /** Does all the \"real work\" of tallying up the counts. */\n  private final void countAll() throws IOException {\n    //System.out.println(\"ssdv count\");\n\n    MultiDocValues.OrdinalMap ordinalMap;\n\n    // TODO: is this right?  really, we need a way to\n    // verify that this ordinalMap \"matches\" the leaves in\n    // matchingDocs...\n    if (dv instanceof MultiDocValues.MultiSortedSetDocValues) {\n      ordinalMap = ((MultiSortedSetDocValues) dv).mapping;\n    } else {\n      ordinalMap = null;\n    }\n    \n    IndexReader origReader = state.getOrigReader();\n\n    for(LeafReaderContext context : origReader.leaves()) {\n\n      LeafReader reader = context.reader();\n      \n      SortedSetDocValues segValues = reader.getSortedSetDocValues(field);\n      if (segValues == null) {\n        continue;\n      }\n\n      Bits liveDocs = reader.getLiveDocs();\n\n      if (ordinalMap != null) {\n        final LongValues ordMap = ordinalMap.getGlobalOrds(context.ord);\n\n        int numSegOrds = (int) segValues.getValueCount();\n\n        // First count in seg-ord space:\n        final int[] segCounts = new int[numSegOrds];\n        int docID;\n        while ((docID = segValues.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n          if (liveDocs == null || liveDocs.get(docID)) {\n            int term = (int) segValues.nextOrd();\n            while (term != SortedSetDocValues.NO_MORE_ORDS) {\n              segCounts[term]++;\n              term = (int) segValues.nextOrd();\n            }\n          }\n        }\n\n        // Then, migrate to global ords:\n        for(int ord=0;ord<numSegOrds;ord++) {\n          int count = segCounts[ord];\n          if (count != 0) {\n            counts[(int) ordMap.get(ord)] += count;\n          }\n        }\n      } else {\n        // No ord mapping (e.g., single segment index):\n        // just aggregate directly into counts:\n        int docID;\n        while ((docID = segValues.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n          if (liveDocs == null || liveDocs.get(docID)) {\n            int term = (int) segValues.nextOrd();\n            while (term != SortedSetDocValues.NO_MORE_ORDS) {\n              counts[term]++;\n              term = (int) segValues.nextOrd();\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8cfd1df435f04d4287925cca73cf22120f723892","date":1493925365,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/SortedSetDocValuesFacetCounts#countAll().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/SortedSetDocValuesFacetCounts#countAll().mjava","sourceNew":"  /** Does all the \"real work\" of tallying up the counts. */\n  private final void countAll() throws IOException {\n    //System.out.println(\"ssdv count\");\n\n    MultiDocValues.OrdinalMap ordinalMap;\n\n    // TODO: is this right?  really, we need a way to\n    // verify that this ordinalMap \"matches\" the leaves in\n    // matchingDocs...\n    if (dv instanceof MultiDocValues.MultiSortedSetDocValues) {\n      ordinalMap = ((MultiSortedSetDocValues) dv).mapping;\n    } else {\n      ordinalMap = null;\n    }\n    \n    for(LeafReaderContext context : state.getReader().leaves()) {\n      countOneSegment(ordinalMap, context.reader(), context.ord, null);\n    }\n  }\n\n","sourceOld":"  /** Does all the \"real work\" of tallying up the counts. */\n  private final void countAll() throws IOException {\n    //System.out.println(\"ssdv count\");\n\n    MultiDocValues.OrdinalMap ordinalMap;\n\n    // TODO: is this right?  really, we need a way to\n    // verify that this ordinalMap \"matches\" the leaves in\n    // matchingDocs...\n    if (dv instanceof MultiDocValues.MultiSortedSetDocValues) {\n      ordinalMap = ((MultiSortedSetDocValues) dv).mapping;\n    } else {\n      ordinalMap = null;\n    }\n    \n    IndexReader origReader = state.getOrigReader();\n\n    for(LeafReaderContext context : origReader.leaves()) {\n\n      LeafReader reader = context.reader();\n      \n      SortedSetDocValues segValues = reader.getSortedSetDocValues(field);\n      if (segValues == null) {\n        continue;\n      }\n\n      Bits liveDocs = reader.getLiveDocs();\n\n      if (ordinalMap != null) {\n        final LongValues ordMap = ordinalMap.getGlobalOrds(context.ord);\n\n        int numSegOrds = (int) segValues.getValueCount();\n\n        // First count in seg-ord space:\n        final int[] segCounts = new int[numSegOrds];\n        int docID;\n        while ((docID = segValues.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n          if (liveDocs == null || liveDocs.get(docID)) {\n            int term = (int) segValues.nextOrd();\n            while (term != SortedSetDocValues.NO_MORE_ORDS) {\n              segCounts[term]++;\n              term = (int) segValues.nextOrd();\n            }\n          }\n        }\n\n        // Then, migrate to global ords:\n        for(int ord=0;ord<numSegOrds;ord++) {\n          int count = segCounts[ord];\n          if (count != 0) {\n            counts[(int) ordMap.get(ord)] += count;\n          }\n        }\n      } else {\n        // No ord mapping (e.g., single segment index):\n        // just aggregate directly into counts:\n        int docID;\n        while ((docID = segValues.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n          if (liveDocs == null || liveDocs.get(docID)) {\n            int term = (int) segValues.nextOrd();\n            while (term != SortedSetDocValues.NO_MORE_ORDS) {\n              counts[term]++;\n              term = (int) segValues.nextOrd();\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/SortedSetDocValuesFacetCounts#countAll().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/SortedSetDocValuesFacetCounts#countAll().mjava","sourceNew":"  /** Does all the \"real work\" of tallying up the counts. */\n  private final void countAll() throws IOException {\n    //System.out.println(\"ssdv count\");\n\n    MultiDocValues.OrdinalMap ordinalMap;\n\n    // TODO: is this right?  really, we need a way to\n    // verify that this ordinalMap \"matches\" the leaves in\n    // matchingDocs...\n    if (dv instanceof MultiDocValues.MultiSortedSetDocValues) {\n      ordinalMap = ((MultiSortedSetDocValues) dv).mapping;\n    } else {\n      ordinalMap = null;\n    }\n    \n    for(LeafReaderContext context : state.getReader().leaves()) {\n      countOneSegment(ordinalMap, context.reader(), context.ord, null);\n    }\n  }\n\n","sourceOld":"  /** Does all the \"real work\" of tallying up the counts. */\n  private final void countAll() throws IOException {\n    //System.out.println(\"ssdv count\");\n\n    MultiDocValues.OrdinalMap ordinalMap;\n\n    // TODO: is this right?  really, we need a way to\n    // verify that this ordinalMap \"matches\" the leaves in\n    // matchingDocs...\n    if (dv instanceof MultiDocValues.MultiSortedSetDocValues) {\n      ordinalMap = ((MultiSortedSetDocValues) dv).mapping;\n    } else {\n      ordinalMap = null;\n    }\n    \n    IndexReader origReader = state.getOrigReader();\n\n    for(LeafReaderContext context : origReader.leaves()) {\n\n      LeafReader reader = context.reader();\n      \n      SortedSetDocValues segValues = reader.getSortedSetDocValues(field);\n      if (segValues == null) {\n        continue;\n      }\n\n      Bits liveDocs = reader.getLiveDocs();\n\n      if (ordinalMap != null) {\n        final LongValues ordMap = ordinalMap.getGlobalOrds(context.ord);\n\n        int numSegOrds = (int) segValues.getValueCount();\n\n        // First count in seg-ord space:\n        final int[] segCounts = new int[numSegOrds];\n        int docID;\n        while ((docID = segValues.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n          if (liveDocs == null || liveDocs.get(docID)) {\n            int term = (int) segValues.nextOrd();\n            while (term != SortedSetDocValues.NO_MORE_ORDS) {\n              segCounts[term]++;\n              term = (int) segValues.nextOrd();\n            }\n          }\n        }\n\n        // Then, migrate to global ords:\n        for(int ord=0;ord<numSegOrds;ord++) {\n          int count = segCounts[ord];\n          if (count != 0) {\n            counts[(int) ordMap.get(ord)] += count;\n          }\n        }\n      } else {\n        // No ord mapping (e.g., single segment index):\n        // just aggregate directly into counts:\n        int docID;\n        while ((docID = segValues.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n          if (liveDocs == null || liveDocs.get(docID)) {\n            int term = (int) segValues.nextOrd();\n            while (term != SortedSetDocValues.NO_MORE_ORDS) {\n              counts[term]++;\n              term = (int) segValues.nextOrd();\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"957c610636f393a85a38f1af670540028db13e6b","date":1500044517,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/SortedSetDocValuesFacetCounts#countAll().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/SortedSetDocValuesFacetCounts#countAll().mjava","sourceNew":"  /** Does all the \"real work\" of tallying up the counts. */\n  private final void countAll() throws IOException {\n    //System.out.println(\"ssdv count\");\n\n    OrdinalMap ordinalMap;\n\n    // TODO: is this right?  really, we need a way to\n    // verify that this ordinalMap \"matches\" the leaves in\n    // matchingDocs...\n    if (dv instanceof MultiDocValues.MultiSortedSetDocValues) {\n      ordinalMap = ((MultiSortedSetDocValues) dv).mapping;\n    } else {\n      ordinalMap = null;\n    }\n    \n    for(LeafReaderContext context : state.getReader().leaves()) {\n      countOneSegment(ordinalMap, context.reader(), context.ord, null);\n    }\n  }\n\n","sourceOld":"  /** Does all the \"real work\" of tallying up the counts. */\n  private final void countAll() throws IOException {\n    //System.out.println(\"ssdv count\");\n\n    MultiDocValues.OrdinalMap ordinalMap;\n\n    // TODO: is this right?  really, we need a way to\n    // verify that this ordinalMap \"matches\" the leaves in\n    // matchingDocs...\n    if (dv instanceof MultiDocValues.MultiSortedSetDocValues) {\n      ordinalMap = ((MultiSortedSetDocValues) dv).mapping;\n    } else {\n      ordinalMap = null;\n    }\n    \n    for(LeafReaderContext context : state.getReader().leaves()) {\n      countOneSegment(ordinalMap, context.reader(), context.ord, null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aaf90fc29510e72665ac7934f34c3d1c25efad64","date":1500354819,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/SortedSetDocValuesFacetCounts#countAll().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/SortedSetDocValuesFacetCounts#countAll().mjava","sourceNew":"  /** Does all the \"real work\" of tallying up the counts. */\n  private final void countAll() throws IOException {\n    //System.out.println(\"ssdv count\");\n\n    OrdinalMap ordinalMap;\n\n    // TODO: is this right?  really, we need a way to\n    // verify that this ordinalMap \"matches\" the leaves in\n    // matchingDocs...\n    if (dv instanceof MultiDocValues.MultiSortedSetDocValues) {\n      ordinalMap = ((MultiSortedSetDocValues) dv).mapping;\n    } else {\n      ordinalMap = null;\n    }\n    \n    for(LeafReaderContext context : state.getReader().leaves()) {\n      countOneSegment(ordinalMap, context.reader(), context.ord, null);\n    }\n  }\n\n","sourceOld":"  /** Does all the \"real work\" of tallying up the counts. */\n  private final void countAll() throws IOException {\n    //System.out.println(\"ssdv count\");\n\n    MultiDocValues.OrdinalMap ordinalMap;\n\n    // TODO: is this right?  really, we need a way to\n    // verify that this ordinalMap \"matches\" the leaves in\n    // matchingDocs...\n    if (dv instanceof MultiDocValues.MultiSortedSetDocValues) {\n      ordinalMap = ((MultiSortedSetDocValues) dv).mapping;\n    } else {\n      ordinalMap = null;\n    }\n    \n    for(LeafReaderContext context : state.getReader().leaves()) {\n      countOneSegment(ordinalMap, context.reader(), context.ord, null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8cfd1df435f04d4287925cca73cf22120f723892":["60b61628d1912768f51eccaa8ead5a5a32ab34c6"],"60b61628d1912768f51eccaa8ead5a5a32ab34c6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4b8b2bc4b8b503cc0b5743b19445798c62069e4d"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["60b61628d1912768f51eccaa8ead5a5a32ab34c6","8cfd1df435f04d4287925cca73cf22120f723892"],"957c610636f393a85a38f1af670540028db13e6b":["8cfd1df435f04d4287925cca73cf22120f723892"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":["e9017cf144952056066919f1ebc7897ff9bd71b1","957c610636f393a85a38f1af670540028db13e6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","60b61628d1912768f51eccaa8ead5a5a32ab34c6"],"4b8b2bc4b8b503cc0b5743b19445798c62069e4d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["957c610636f393a85a38f1af670540028db13e6b"]},"commit2Childs":{"8cfd1df435f04d4287925cca73cf22120f723892":["e9017cf144952056066919f1ebc7897ff9bd71b1","957c610636f393a85a38f1af670540028db13e6b"],"60b61628d1912768f51eccaa8ead5a5a32ab34c6":["8cfd1df435f04d4287925cca73cf22120f723892","e9017cf144952056066919f1ebc7897ff9bd71b1","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["aaf90fc29510e72665ac7934f34c3d1c25efad64"],"957c610636f393a85a38f1af670540028db13e6b":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60b61628d1912768f51eccaa8ead5a5a32ab34c6","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","4b8b2bc4b8b503cc0b5743b19445798c62069e4d"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"4b8b2bc4b8b503cc0b5743b19445798c62069e4d":["60b61628d1912768f51eccaa8ead5a5a32ab34c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aaf90fc29510e72665ac7934f34c3d1c25efad64","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}