{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumericValues(NumericEntry).mjava","commits":[{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":1,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumericValues(NumericEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumericValues(NumericEntry).mjava","sourceNew":"  private LongValues getNumericValues(NumericEntry entry) throws IOException {\n    if (entry.bitsPerValue == 0) {\n      return new LongValues() {\n        @Override\n        public long get(long index) {\n          return entry.minValue;\n        }\n      };\n    } else {\n      final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n      if (entry.blockShift >= 0) {\n        final int shift = entry.blockShift;\n        final long mul = entry.gcd;\n        final long mask = (1L << shift) - 1;\n        return new LongValues() {\n          long block = -1;\n          long delta;\n          long offset;\n          long blockEndOffset;\n          LongValues values;\n\n          public long get(long index) {\n            final long block = index >>> shift;\n            if (this.block != block) {\n              assert block > this.block : \"Reading backwards is illegal: \" + this.block + \" < \" + block;\n              int bitsPerValue;\n              do {\n                offset = blockEndOffset;\n                try {\n                  bitsPerValue = slice.readByte(offset++);\n                  delta = slice.readLong(offset);\n                  offset += Long.BYTES;\n                  if (bitsPerValue == 0) {\n                    blockEndOffset = offset;\n                  } else {\n                    final int length = slice.readInt(offset);\n                    offset += Integer.BYTES;\n                    blockEndOffset = offset + length;\n                  }\n                } catch (IOException e) {\n                  throw new RuntimeException(e);\n                }\n                this.block ++;\n              } while (this.block != block);\n              values = bitsPerValue == 0 ? LongValues.ZEROES : DirectReader.getInstance(slice, bitsPerValue, offset);\n            }\n            return mul * values.get(index & mask) + delta;\n          }\n        };\n      } else {\n        final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n        if (entry.table != null) {\n          final long[] table = entry.table;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return table[(int) values.get(index)];\n            }\n          };\n        } else if (entry.gcd != 1) {\n          final long gcd = entry.gcd;\n          final long minValue = entry.minValue;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return values.get(index) * gcd + minValue;\n            }\n          };\n        } else if (entry.minValue != 0) {\n          final long minValue = entry.minValue;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return values.get(index) + minValue;\n            }\n          };\n        } else {\n          return values;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private LongValues getNumericValues(NumericEntry entry) throws IOException {\n    if (entry.bitsPerValue == 0) {\n      return new LongValues() {\n        @Override\n        public long get(long index) {\n          return entry.minValue;\n        }\n      };\n    } else {\n      final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n      if (entry.blockShift >= 0) {\n        final int shift = entry.blockShift;\n        final long mul = entry.gcd;\n        final long mask = (1L << shift) - 1;\n        return new LongValues() {\n          long block = -1;\n          long delta;\n          long offset;\n          long blockEndOffset;\n          LongValues values;\n\n          public long get(long index) {\n            final long block = index >>> shift;\n            if (this.block != block) {\n              assert block > this.block : \"Reading backwards is illegal: \" + this.block + \" < \" + block;\n              int bitsPerValue;\n              do {\n                offset = blockEndOffset;\n                try {\n                  bitsPerValue = slice.readByte(offset++);\n                  delta = slice.readLong(offset);\n                  offset += Long.BYTES;\n                  if (bitsPerValue == 0) {\n                    blockEndOffset = offset;\n                  } else {\n                    final int length = slice.readInt(offset);\n                    offset += Integer.BYTES;\n                    blockEndOffset = offset + length;\n                  }\n                } catch (IOException e) {\n                  throw new RuntimeException(e);\n                }\n                this.block ++;\n              } while (this.block != block);\n              values = bitsPerValue == 0 ? LongValues.ZEROES : DirectReader.getInstance(slice, bitsPerValue, offset);\n            }\n            return mul * values.get(index & mask) + delta;\n          }\n        };\n      } else {\n        final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n        if (entry.table != null) {\n          final long[] table = entry.table;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return table[(int) values.get(index)];\n            }\n          };\n        } else if (entry.gcd != 1) {\n          final long gcd = entry.gcd;\n          final long minValue = entry.minValue;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return values.get(index) * gcd + minValue;\n            }\n          };\n        } else if (entry.minValue != 0) {\n          final long minValue = entry.minValue;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return values.get(index) + minValue;\n            }\n          };\n        } else {\n          return values;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":1,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumericValues(NumericEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumericValues(NumericEntry).mjava","sourceNew":"  private LongValues getNumericValues(NumericEntry entry) throws IOException {\n    if (entry.bitsPerValue == 0) {\n      return new LongValues() {\n        @Override\n        public long get(long index) {\n          return entry.minValue;\n        }\n      };\n    } else {\n      final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n      if (entry.blockShift >= 0) {\n        final int shift = entry.blockShift;\n        final long mul = entry.gcd;\n        final long mask = (1L << shift) - 1;\n        return new LongValues() {\n          long block = -1;\n          long delta;\n          long offset;\n          long blockEndOffset;\n          LongValues values;\n\n          public long get(long index) {\n            final long block = index >>> shift;\n            if (this.block != block) {\n              assert block > this.block : \"Reading backwards is illegal: \" + this.block + \" < \" + block;\n              int bitsPerValue;\n              do {\n                offset = blockEndOffset;\n                try {\n                  bitsPerValue = slice.readByte(offset++);\n                  delta = slice.readLong(offset);\n                  offset += Long.BYTES;\n                  if (bitsPerValue == 0) {\n                    blockEndOffset = offset;\n                  } else {\n                    final int length = slice.readInt(offset);\n                    offset += Integer.BYTES;\n                    blockEndOffset = offset + length;\n                  }\n                } catch (IOException e) {\n                  throw new RuntimeException(e);\n                }\n                this.block ++;\n              } while (this.block != block);\n              values = bitsPerValue == 0 ? LongValues.ZEROES : DirectReader.getInstance(slice, bitsPerValue, offset);\n            }\n            return mul * values.get(index & mask) + delta;\n          }\n        };\n      } else {\n        final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n        if (entry.table != null) {\n          final long[] table = entry.table;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return table[(int) values.get(index)];\n            }\n          };\n        } else if (entry.gcd != 1) {\n          final long gcd = entry.gcd;\n          final long minValue = entry.minValue;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return values.get(index) * gcd + minValue;\n            }\n          };\n        } else if (entry.minValue != 0) {\n          final long minValue = entry.minValue;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return values.get(index) + minValue;\n            }\n          };\n        } else {\n          return values;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private LongValues getNumericValues(NumericEntry entry) throws IOException {\n    if (entry.bitsPerValue == 0) {\n      return new LongValues() {\n        @Override\n        public long get(long index) {\n          return entry.minValue;\n        }\n      };\n    } else {\n      final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n      if (entry.blockShift >= 0) {\n        final int shift = entry.blockShift;\n        final long mul = entry.gcd;\n        final long mask = (1L << shift) - 1;\n        return new LongValues() {\n          long block = -1;\n          long delta;\n          long offset;\n          long blockEndOffset;\n          LongValues values;\n\n          public long get(long index) {\n            final long block = index >>> shift;\n            if (this.block != block) {\n              assert block > this.block : \"Reading backwards is illegal: \" + this.block + \" < \" + block;\n              int bitsPerValue;\n              do {\n                offset = blockEndOffset;\n                try {\n                  bitsPerValue = slice.readByte(offset++);\n                  delta = slice.readLong(offset);\n                  offset += Long.BYTES;\n                  if (bitsPerValue == 0) {\n                    blockEndOffset = offset;\n                  } else {\n                    final int length = slice.readInt(offset);\n                    offset += Integer.BYTES;\n                    blockEndOffset = offset + length;\n                  }\n                } catch (IOException e) {\n                  throw new RuntimeException(e);\n                }\n                this.block ++;\n              } while (this.block != block);\n              values = bitsPerValue == 0 ? LongValues.ZEROES : DirectReader.getInstance(slice, bitsPerValue, offset);\n            }\n            return mul * values.get(index & mask) + delta;\n          }\n        };\n      } else {\n        final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n        if (entry.table != null) {\n          final long[] table = entry.table;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return table[(int) values.get(index)];\n            }\n          };\n        } else if (entry.gcd != 1) {\n          final long gcd = entry.gcd;\n          final long minValue = entry.minValue;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return values.get(index) * gcd + minValue;\n            }\n          };\n        } else if (entry.minValue != 0) {\n          final long minValue = entry.minValue;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return values.get(index) + minValue;\n            }\n          };\n        } else {\n          return values;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57cb6df494f10aeb3fab477b1ce4a9187455a227","date":1574155024,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumericValues(NumericEntry).mjava","sourceNew":null,"sourceOld":"  private LongValues getNumericValues(NumericEntry entry) throws IOException {\n    if (entry.bitsPerValue == 0) {\n      return new LongValues() {\n        @Override\n        public long get(long index) {\n          return entry.minValue;\n        }\n      };\n    } else {\n      final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n      if (entry.blockShift >= 0) {\n        final int shift = entry.blockShift;\n        final long mul = entry.gcd;\n        final long mask = (1L << shift) - 1;\n        return new LongValues() {\n          long block = -1;\n          long delta;\n          long offset;\n          long blockEndOffset;\n          LongValues values;\n\n          public long get(long index) {\n            final long block = index >>> shift;\n            if (this.block != block) {\n              assert block > this.block : \"Reading backwards is illegal: \" + this.block + \" < \" + block;\n              int bitsPerValue;\n              do {\n                offset = blockEndOffset;\n                try {\n                  bitsPerValue = slice.readByte(offset++);\n                  delta = slice.readLong(offset);\n                  offset += Long.BYTES;\n                  if (bitsPerValue == 0) {\n                    blockEndOffset = offset;\n                  } else {\n                    final int length = slice.readInt(offset);\n                    offset += Integer.BYTES;\n                    blockEndOffset = offset + length;\n                  }\n                } catch (IOException e) {\n                  throw new RuntimeException(e);\n                }\n                this.block ++;\n              } while (this.block != block);\n              values = bitsPerValue == 0 ? LongValues.ZEROES : DirectReader.getInstance(slice, bitsPerValue, offset);\n            }\n            return mul * values.get(index & mask) + delta;\n          }\n        };\n      } else {\n        final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n        if (entry.table != null) {\n          final long[] table = entry.table;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return table[(int) values.get(index)];\n            }\n          };\n        } else if (entry.gcd != 1) {\n          final long gcd = entry.gcd;\n          final long minValue = entry.minValue;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return values.get(index) * gcd + minValue;\n            }\n          };\n        } else if (entry.minValue != 0) {\n          final long minValue = entry.minValue;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return values.get(index) + minValue;\n            }\n          };\n        } else {\n          return values;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03e17b020972a0d6e8d6823f545571a66646a167":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","03e17b020972a0d6e8d6823f545571a66646a167"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57cb6df494f10aeb3fab477b1ce4a9187455a227":["03e17b020972a0d6e8d6823f545571a66646a167"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57cb6df494f10aeb3fab477b1ce4a9187455a227"]},"commit2Childs":{"03e17b020972a0d6e8d6823f545571a66646a167":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","57cb6df494f10aeb3fab477b1ce4a9187455a227"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["03e17b020972a0d6e8d6823f545571a66646a167","c89f1ef80a9432f4eabaeda9a1e135cd72e60836"],"57cb6df494f10aeb3fab477b1ce4a9187455a227":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}