{"path":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testFieldSpecificHighlighting().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testFieldSpecificHighlighting().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testFieldSpecificHighlighting().mjava","sourceNew":"  public void testFieldSpecificHighlighting() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String docMainText = \"fred is one of the people\";\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, analyzer);\n        Query query = parser.parse(\"fred category:people\");\n\n        // highlighting respects fieldnames used in query\n\n        Scorer fieldSpecificScorer = null;\n        if (mode == TestHighlightRunner.QUERY) {\n          fieldSpecificScorer = new QueryScorer(query, FIELD_NAME);\n        } else if (mode == TestHighlightRunner.QUERY_TERM) {\n          fieldSpecificScorer = new QueryTermScorer(query, \"contents\");\n        }\n        Highlighter fieldSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldSpecificScorer);\n        fieldSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        String result = fieldSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the people\");\n\n        // highlighting does not respect fieldnames used in query\n        Scorer fieldInSpecificScorer = null;\n        if (mode == TestHighlightRunner.QUERY) {\n          fieldInSpecificScorer = new QueryScorer(query, null);\n        } else if (mode == TestHighlightRunner.QUERY_TERM) {\n          fieldInSpecificScorer = new QueryTermScorer(query);\n        }\n\n        Highlighter fieldInSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldInSpecificScorer);\n        fieldInSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        result = fieldInSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the <B>people</B>\");\n\n        reader.close();\n      }\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"  public void testFieldSpecificHighlighting() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String docMainText = \"fred is one of the people\";\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, analyzer);\n        Query query = parser.parse(\"fred category:people\");\n\n        // highlighting respects fieldnames used in query\n\n        Scorer fieldSpecificScorer = null;\n        if (mode == TestHighlightRunner.QUERY) {\n          fieldSpecificScorer = new QueryScorer(query, FIELD_NAME);\n        } else if (mode == TestHighlightRunner.QUERY_TERM) {\n          fieldSpecificScorer = new QueryTermScorer(query, \"contents\");\n        }\n        Highlighter fieldSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldSpecificScorer);\n        fieldSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        String result = fieldSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the people\");\n\n        // highlighting does not respect fieldnames used in query\n        Scorer fieldInSpecificScorer = null;\n        if (mode == TestHighlightRunner.QUERY) {\n          fieldInSpecificScorer = new QueryScorer(query, null);\n        } else if (mode == TestHighlightRunner.QUERY_TERM) {\n          fieldInSpecificScorer = new QueryTermScorer(query);\n        }\n\n        Highlighter fieldInSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldInSpecificScorer);\n        fieldInSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        result = fieldInSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the <B>people</B>\");\n\n        reader.close();\n      }\n    };\n\n    helper.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dfd4d352ddf04b37253ad97ce1aad1448253f0f7","date":1310173878,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testFieldSpecificHighlighting().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testFieldSpecificHighlighting().mjava","sourceNew":"  public void testFieldSpecificHighlighting() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String docMainText = \"fred is one of the people\";\n\n        BooleanQuery query = new BooleanQuery();\n        query.add(new TermQuery(new Term(FIELD_NAME, \"fred\")), Occur.SHOULD);\n        query.add(new TermQuery(new Term(\"category\", \"people\")), Occur.SHOULD);\n\n        // highlighting respects fieldnames used in query\n\n        Scorer fieldSpecificScorer = null;\n        if (mode == TestHighlightRunner.QUERY) {\n          fieldSpecificScorer = new QueryScorer(query, FIELD_NAME);\n        } else if (mode == TestHighlightRunner.QUERY_TERM) {\n          fieldSpecificScorer = new QueryTermScorer(query, \"contents\");\n        }\n        Highlighter fieldSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldSpecificScorer);\n        fieldSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        String result = fieldSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the people\");\n\n        // highlighting does not respect fieldnames used in query\n        Scorer fieldInSpecificScorer = null;\n        if (mode == TestHighlightRunner.QUERY) {\n          fieldInSpecificScorer = new QueryScorer(query, null);\n        } else if (mode == TestHighlightRunner.QUERY_TERM) {\n          fieldInSpecificScorer = new QueryTermScorer(query);\n        }\n\n        Highlighter fieldInSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldInSpecificScorer);\n        fieldInSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        result = fieldInSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the <B>people</B>\");\n\n        reader.close();\n      }\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"  public void testFieldSpecificHighlighting() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String docMainText = \"fred is one of the people\";\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, analyzer);\n        Query query = parser.parse(\"fred category:people\");\n\n        // highlighting respects fieldnames used in query\n\n        Scorer fieldSpecificScorer = null;\n        if (mode == TestHighlightRunner.QUERY) {\n          fieldSpecificScorer = new QueryScorer(query, FIELD_NAME);\n        } else if (mode == TestHighlightRunner.QUERY_TERM) {\n          fieldSpecificScorer = new QueryTermScorer(query, \"contents\");\n        }\n        Highlighter fieldSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldSpecificScorer);\n        fieldSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        String result = fieldSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the people\");\n\n        // highlighting does not respect fieldnames used in query\n        Scorer fieldInSpecificScorer = null;\n        if (mode == TestHighlightRunner.QUERY) {\n          fieldInSpecificScorer = new QueryScorer(query, null);\n        } else if (mode == TestHighlightRunner.QUERY_TERM) {\n          fieldInSpecificScorer = new QueryTermScorer(query);\n        }\n\n        Highlighter fieldInSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldInSpecificScorer);\n        fieldInSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        result = fieldInSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the <B>people</B>\");\n\n        reader.close();\n      }\n    };\n\n    helper.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63639dd66fd5bd9b90bc24dd596ae01575f27cc4","date":1310237454,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testFieldSpecificHighlighting().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testFieldSpecificHighlighting().mjava","sourceNew":"  public void testFieldSpecificHighlighting() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String docMainText = \"fred is one of the people\";\n\n        BooleanQuery query = new BooleanQuery();\n        query.add(new TermQuery(new Term(FIELD_NAME, \"fred\")), Occur.SHOULD);\n        query.add(new TermQuery(new Term(\"category\", \"people\")), Occur.SHOULD);\n\n        // highlighting respects fieldnames used in query\n\n        Scorer fieldSpecificScorer = null;\n        if (mode == TestHighlightRunner.QUERY) {\n          fieldSpecificScorer = new QueryScorer(query, FIELD_NAME);\n        } else if (mode == TestHighlightRunner.QUERY_TERM) {\n          fieldSpecificScorer = new QueryTermScorer(query, \"contents\");\n        }\n        Highlighter fieldSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldSpecificScorer);\n        fieldSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        String result = fieldSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the people\");\n\n        // highlighting does not respect fieldnames used in query\n        Scorer fieldInSpecificScorer = null;\n        if (mode == TestHighlightRunner.QUERY) {\n          fieldInSpecificScorer = new QueryScorer(query, null);\n        } else if (mode == TestHighlightRunner.QUERY_TERM) {\n          fieldInSpecificScorer = new QueryTermScorer(query);\n        }\n\n        Highlighter fieldInSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldInSpecificScorer);\n        fieldInSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        result = fieldInSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the <B>people</B>\");\n\n        reader.close();\n      }\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"  public void testFieldSpecificHighlighting() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String docMainText = \"fred is one of the people\";\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, analyzer);\n        Query query = parser.parse(\"fred category:people\");\n\n        // highlighting respects fieldnames used in query\n\n        Scorer fieldSpecificScorer = null;\n        if (mode == TestHighlightRunner.QUERY) {\n          fieldSpecificScorer = new QueryScorer(query, FIELD_NAME);\n        } else if (mode == TestHighlightRunner.QUERY_TERM) {\n          fieldSpecificScorer = new QueryTermScorer(query, \"contents\");\n        }\n        Highlighter fieldSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldSpecificScorer);\n        fieldSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        String result = fieldSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the people\");\n\n        // highlighting does not respect fieldnames used in query\n        Scorer fieldInSpecificScorer = null;\n        if (mode == TestHighlightRunner.QUERY) {\n          fieldInSpecificScorer = new QueryScorer(query, null);\n        } else if (mode == TestHighlightRunner.QUERY_TERM) {\n          fieldInSpecificScorer = new QueryTermScorer(query);\n        }\n\n        Highlighter fieldInSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldInSpecificScorer);\n        fieldInSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        result = fieldInSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the <B>people</B>\");\n\n        reader.close();\n      }\n    };\n\n    helper.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testFieldSpecificHighlighting().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testFieldSpecificHighlighting().mjava","sourceNew":"  public void testFieldSpecificHighlighting() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String docMainText = \"fred is one of the people\";\n\n        BooleanQuery query = new BooleanQuery();\n        query.add(new TermQuery(new Term(FIELD_NAME, \"fred\")), Occur.SHOULD);\n        query.add(new TermQuery(new Term(\"category\", \"people\")), Occur.SHOULD);\n\n        // highlighting respects fieldnames used in query\n\n        Scorer fieldSpecificScorer = null;\n        if (mode == TestHighlightRunner.QUERY) {\n          fieldSpecificScorer = new QueryScorer(query, FIELD_NAME);\n        } else if (mode == TestHighlightRunner.QUERY_TERM) {\n          fieldSpecificScorer = new QueryTermScorer(query, \"contents\");\n        }\n        Highlighter fieldSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldSpecificScorer);\n        fieldSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        String result = fieldSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the people\");\n\n        // highlighting does not respect fieldnames used in query\n        Scorer fieldInSpecificScorer = null;\n        if (mode == TestHighlightRunner.QUERY) {\n          fieldInSpecificScorer = new QueryScorer(query, null);\n        } else if (mode == TestHighlightRunner.QUERY_TERM) {\n          fieldInSpecificScorer = new QueryTermScorer(query);\n        }\n\n        Highlighter fieldInSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldInSpecificScorer);\n        fieldInSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        result = fieldInSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the <B>people</B>\");\n\n        reader.close();\n      }\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"  public void testFieldSpecificHighlighting() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String docMainText = \"fred is one of the people\";\n\n        BooleanQuery query = new BooleanQuery();\n        query.add(new TermQuery(new Term(FIELD_NAME, \"fred\")), Occur.SHOULD);\n        query.add(new TermQuery(new Term(\"category\", \"people\")), Occur.SHOULD);\n\n        // highlighting respects fieldnames used in query\n\n        Scorer fieldSpecificScorer = null;\n        if (mode == TestHighlightRunner.QUERY) {\n          fieldSpecificScorer = new QueryScorer(query, FIELD_NAME);\n        } else if (mode == TestHighlightRunner.QUERY_TERM) {\n          fieldSpecificScorer = new QueryTermScorer(query, \"contents\");\n        }\n        Highlighter fieldSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldSpecificScorer);\n        fieldSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        String result = fieldSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the people\");\n\n        // highlighting does not respect fieldnames used in query\n        Scorer fieldInSpecificScorer = null;\n        if (mode == TestHighlightRunner.QUERY) {\n          fieldInSpecificScorer = new QueryScorer(query, null);\n        } else if (mode == TestHighlightRunner.QUERY_TERM) {\n          fieldInSpecificScorer = new QueryTermScorer(query);\n        }\n\n        Highlighter fieldInSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldInSpecificScorer);\n        fieldInSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        result = fieldInSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the <B>people</B>\");\n\n        reader.close();\n      }\n    };\n\n    helper.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["dfd4d352ddf04b37253ad97ce1aad1448253f0f7"],"dfd4d352ddf04b37253ad97ce1aad1448253f0f7":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"63639dd66fd5bd9b90bc24dd596ae01575f27cc4":["9454a6510e2db155fb01faa5c049b06ece95fab9","dfd4d352ddf04b37253ad97ce1aad1448253f0f7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dfd4d352ddf04b37253ad97ce1aad1448253f0f7":["b89678825b68eccaf09e6ab71675fc0b0af1e099","63639dd66fd5bd9b90bc24dd596ae01575f27cc4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"63639dd66fd5bd9b90bc24dd596ae01575f27cc4":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["dfd4d352ddf04b37253ad97ce1aad1448253f0f7","63639dd66fd5bd9b90bc24dd596ae01575f27cc4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["63639dd66fd5bd9b90bc24dd596ae01575f27cc4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}