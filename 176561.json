{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_40.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        Codec.setDefault(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setUseCompoundFile(isCompound);\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      } else if(iwConf.getMergePolicy() instanceof TieredMergePolicy) {\n        TieredMergePolicy tieredMergePolicy = (TieredMergePolicy) iwConf.getMergePolicy();\n        tieredMergePolicy.setUseCompoundFile(isCompound);\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_40.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        Codec.setDefault(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setUseCompoundFile(isCompound);\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      } else if(iwConf.getMergePolicy() instanceof TieredMergePolicy) {\n        TieredMergePolicy tieredMergePolicy = (TieredMergePolicy) iwConf.getMergePolicy();\n        tieredMergePolicy.setUseCompoundFile(isCompound);\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"088a7ef694fd43d5d9a4d200c4005865f773d1e7","date":1371136274,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_40.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        Codec.setDefault(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_40.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        Codec.setDefault(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setUseCompoundFile(isCompound);\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      } else if(iwConf.getMergePolicy() instanceof TieredMergePolicy) {\n        TieredMergePolicy tieredMergePolicy = (TieredMergePolicy) iwConf.getMergePolicy();\n        tieredMergePolicy.setUseCompoundFile(isCompound);\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"be3b141eed4372b3eb04def61ab79f86f572f481","date":1372468407,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_40.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.DEFAULT_MAX_THREAD_COUNT);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.DEFAULT_MAX_MERGE_COUNT);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        Codec.setDefault(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_40.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        Codec.setDefault(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","bugFix":["72ba12f3c327c892d69cfdd5ac98ec5cfc05ce10"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_40.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.DEFAULT_MAX_THREAD_COUNT);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.DEFAULT_MAX_MERGE_COUNT);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        Codec.setDefault(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_40.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        Codec.setDefault(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0bf41419d452997826ec5f17684993377be77f49","date":1386629618,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    // :Post-Release-Update-Version.LUCENE_XY:\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_50.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.DEFAULT_MAX_THREAD_COUNT);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.DEFAULT_MAX_MERGE_COUNT);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        Codec.setDefault(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_40.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.DEFAULT_MAX_THREAD_COUNT);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.DEFAULT_MAX_MERGE_COUNT);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        Codec.setDefault(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","bugFix":["72ba12f3c327c892d69cfdd5ac98ec5cfc05ce10"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    // :Post-Release-Update-Version.LUCENE_XY:\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_50.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.DEFAULT_MAX_THREAD_COUNT);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.DEFAULT_MAX_MERGE_COUNT);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        Codec.setDefault(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_40.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.DEFAULT_MAX_THREAD_COUNT);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.DEFAULT_MAX_MERGE_COUNT);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        Codec.setDefault(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"940b22e035cbfe47ac8c00a900a61a724c2140e2","date":1396562804,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    // :Post-Release-Update-Version.LUCENE_XY:\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_50.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.DEFAULT_MAX_THREAD_COUNT);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.DEFAULT_MAX_MERGE_COUNT);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        iwConf.setCodec(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    // :Post-Release-Update-Version.LUCENE_XY:\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_50.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.DEFAULT_MAX_THREAD_COUNT);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.DEFAULT_MAX_MERGE_COUNT);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        Codec.setDefault(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","bugFix":["7b91922b55d15444d554721b352861d028eb8278"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    // :Post-Release-Update-Version.LUCENE_XY:\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_50.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.DEFAULT_MAX_THREAD_COUNT);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.DEFAULT_MAX_MERGE_COUNT);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        iwConf.setCodec(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    // :Post-Release-Update-Version.LUCENE_XY:\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_50.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.DEFAULT_MAX_THREAD_COUNT);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.DEFAULT_MAX_MERGE_COUNT);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        Codec.setDefault(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd330c9d05eacbd6e952fe0dea852e7ae037eb50","date":1398873035,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    @SuppressWarnings(\"deprecation\")\n    Version version = Version.parseLeniently(config.get(\"writer.version\", Version.LUCENE_CURRENT.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.DEFAULT_MAX_THREAD_COUNT);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.DEFAULT_MAX_MERGE_COUNT);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        iwConf.setCodec(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    // :Post-Release-Update-Version.LUCENE_XY:\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_50.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.DEFAULT_MAX_THREAD_COUNT);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.DEFAULT_MAX_MERGE_COUNT);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        iwConf.setCodec(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2fb55c0777755badd3b46d8140f3d4301febed","date":1398881584,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    @SuppressWarnings(\"deprecation\")\n    Version version = Version.parseLeniently(config.get(\"writer.version\", Version.LUCENE_CURRENT.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.DEFAULT_MAX_THREAD_COUNT);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.DEFAULT_MAX_MERGE_COUNT);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        iwConf.setCodec(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    iwConf.setUseCompoundFile(isCompound);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(NoMergePolicy.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if (iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    @SuppressWarnings(\"deprecation\")\n    Version version = Version.parseLeniently(config.get(\"writer.version\", Version.LUCENE_CURRENT.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.DEFAULT_MAX_THREAD_COUNT);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.DEFAULT_MAX_MERGE_COUNT);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        iwConf.setCodec(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f908776e2743c920ccf99e2824ea1cf45daaa75","date":1406090614,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    @SuppressWarnings(\"deprecation\")\n    Version version = Version.parseLeniently(config.get(\"writer.version\", Version.LUCENE_CURRENT.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.DEFAULT_MAX_THREAD_COUNT);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.DEFAULT_MAX_MERGE_COUNT);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        iwConf.setCodec(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String postingsFormat = config.get(\"codec.postingsFormat\",null);\n    if (defaultCodec == null && postingsFormat != null) {\n      try {\n        final PostingsFormat postingsFormatChosen = PostingsFormat.forName(postingsFormat);\n        iwConf.setCodec(new Lucene49Codec(){\n          @Override\n          public PostingsFormat getPostingsFormatForField(String field) {\n            return postingsFormatChosen;\n          }\n        });\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Postings Format: \" + postingsFormat, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    iwConf.setUseCompoundFile(isCompound);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(NoMergePolicy.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if (iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    @SuppressWarnings(\"deprecation\")\n    Version version = Version.parseLeniently(config.get(\"writer.version\", Version.LUCENE_CURRENT.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.DEFAULT_MAX_THREAD_COUNT);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.DEFAULT_MAX_MERGE_COUNT);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        iwConf.setCodec(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    iwConf.setUseCompoundFile(isCompound);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(NoMergePolicy.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if (iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    @SuppressWarnings(\"deprecation\")\n    IndexWriterConfig iwConf = new IndexWriterConfig(runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.DEFAULT_MAX_THREAD_COUNT);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.DEFAULT_MAX_MERGE_COUNT);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        iwConf.setCodec(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String postingsFormat = config.get(\"codec.postingsFormat\",null);\n    if (defaultCodec == null && postingsFormat != null) {\n      try {\n        final PostingsFormat postingsFormatChosen = PostingsFormat.forName(postingsFormat);\n        iwConf.setCodec(new Lucene49Codec(){\n          @Override\n          public PostingsFormat getPostingsFormatForField(String field) {\n            return postingsFormatChosen;\n          }\n        });\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Postings Format: \" + postingsFormat, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    iwConf.setUseCompoundFile(isCompound);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(NoMergePolicy.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if (iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    @SuppressWarnings(\"deprecation\")\n    Version version = Version.parseLeniently(config.get(\"writer.version\", Version.LUCENE_CURRENT.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.DEFAULT_MAX_THREAD_COUNT);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.DEFAULT_MAX_MERGE_COUNT);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        iwConf.setCodec(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String postingsFormat = config.get(\"codec.postingsFormat\",null);\n    if (defaultCodec == null && postingsFormat != null) {\n      try {\n        final PostingsFormat postingsFormatChosen = PostingsFormat.forName(postingsFormat);\n        iwConf.setCodec(new Lucene49Codec(){\n          @Override\n          public PostingsFormat getPostingsFormatForField(String field) {\n            return postingsFormatChosen;\n          }\n        });\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Postings Format: \" + postingsFormat, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    iwConf.setUseCompoundFile(isCompound);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(NoMergePolicy.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if (iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793","date":1408030244,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    @SuppressWarnings(\"deprecation\")\n    IndexWriterConfig iwConf = new IndexWriterConfig(runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.DEFAULT_MAX_THREAD_COUNT);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.DEFAULT_MAX_MERGE_COUNT);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        iwConf.setCodec(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String postingsFormat = config.get(\"codec.postingsFormat\",null);\n    if (defaultCodec == null && postingsFormat != null) {\n      try {\n        final PostingsFormat postingsFormatChosen = PostingsFormat.forName(postingsFormat);\n        iwConf.setCodec(new Lucene410Codec(){\n          @Override\n          public PostingsFormat getPostingsFormatForField(String field) {\n            return postingsFormatChosen;\n          }\n        });\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Postings Format: \" + postingsFormat, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    iwConf.setUseCompoundFile(isCompound);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(NoMergePolicy.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if (iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    @SuppressWarnings(\"deprecation\")\n    IndexWriterConfig iwConf = new IndexWriterConfig(runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.DEFAULT_MAX_THREAD_COUNT);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.DEFAULT_MAX_MERGE_COUNT);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        iwConf.setCodec(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String postingsFormat = config.get(\"codec.postingsFormat\",null);\n    if (defaultCodec == null && postingsFormat != null) {\n      try {\n        final PostingsFormat postingsFormatChosen = PostingsFormat.forName(postingsFormat);\n        iwConf.setCodec(new Lucene49Codec(){\n          @Override\n          public PostingsFormat getPostingsFormatForField(String field) {\n            return postingsFormatChosen;\n          }\n        });\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Postings Format: \" + postingsFormat, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    iwConf.setUseCompoundFile(isCompound);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(NoMergePolicy.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if (iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46ff533a28b45377dffc601931e60e19492e6384","date":1411292651,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    @SuppressWarnings(\"deprecation\")\n    Version version;\n    try {\n      version = Version.parseLeniently(config.get(\"writer.version\", Version.LATEST.toString()));\n    } catch (ParseException pe) {\n      throw new IllegalArgumentException(pe);\n    }\n    IndexWriterConfig iwConf = new IndexWriterConfig(runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.DEFAULT_MAX_THREAD_COUNT);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.DEFAULT_MAX_MERGE_COUNT);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        iwConf.setCodec(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String postingsFormat = config.get(\"codec.postingsFormat\",null);\n    if (defaultCodec == null && postingsFormat != null) {\n      try {\n        final PostingsFormat postingsFormatChosen = PostingsFormat.forName(postingsFormat);\n        iwConf.setCodec(new Lucene410Codec(){\n          @Override\n          public PostingsFormat getPostingsFormatForField(String field) {\n            return postingsFormatChosen;\n          }\n        });\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Postings Format: \" + postingsFormat, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    iwConf.setUseCompoundFile(isCompound);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(NoMergePolicy.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if (iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    @SuppressWarnings(\"deprecation\")\n    IndexWriterConfig iwConf = new IndexWriterConfig(runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.DEFAULT_MAX_THREAD_COUNT);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.DEFAULT_MAX_MERGE_COUNT);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        iwConf.setCodec(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String postingsFormat = config.get(\"codec.postingsFormat\",null);\n    if (defaultCodec == null && postingsFormat != null) {\n      try {\n        final PostingsFormat postingsFormatChosen = PostingsFormat.forName(postingsFormat);\n        iwConf.setCodec(new Lucene410Codec(){\n          @Override\n          public PostingsFormat getPostingsFormatForField(String field) {\n            return postingsFormatChosen;\n          }\n        });\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Postings Format: \" + postingsFormat, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    iwConf.setUseCompoundFile(isCompound);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(NoMergePolicy.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if (iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33841f6307398f94bca8ab49388c91d8e769357a","date":1411292793,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    @SuppressWarnings(\"deprecation\")\n    IndexWriterConfig iwConf = new IndexWriterConfig(runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.DEFAULT_MAX_THREAD_COUNT);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.DEFAULT_MAX_MERGE_COUNT);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        iwConf.setCodec(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String postingsFormat = config.get(\"codec.postingsFormat\",null);\n    if (defaultCodec == null && postingsFormat != null) {\n      try {\n        final PostingsFormat postingsFormatChosen = PostingsFormat.forName(postingsFormat);\n        iwConf.setCodec(new Lucene410Codec(){\n          @Override\n          public PostingsFormat getPostingsFormatForField(String field) {\n            return postingsFormatChosen;\n          }\n        });\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Postings Format: \" + postingsFormat, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    iwConf.setUseCompoundFile(isCompound);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(NoMergePolicy.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if (iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    @SuppressWarnings(\"deprecation\")\n    Version version;\n    try {\n      version = Version.parseLeniently(config.get(\"writer.version\", Version.LATEST.toString()));\n    } catch (ParseException pe) {\n      throw new IllegalArgumentException(pe);\n    }\n    IndexWriterConfig iwConf = new IndexWriterConfig(runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.DEFAULT_MAX_THREAD_COUNT);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.DEFAULT_MAX_MERGE_COUNT);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        iwConf.setCodec(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String postingsFormat = config.get(\"codec.postingsFormat\",null);\n    if (defaultCodec == null && postingsFormat != null) {\n      try {\n        final PostingsFormat postingsFormatChosen = PostingsFormat.forName(postingsFormat);\n        iwConf.setCodec(new Lucene410Codec(){\n          @Override\n          public PostingsFormat getPostingsFormatForField(String field) {\n            return postingsFormatChosen;\n          }\n        });\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Postings Format: \" + postingsFormat, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    iwConf.setUseCompoundFile(isCompound);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(NoMergePolicy.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if (iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"500867f0f15393f6b2c38c3366e414fccba04ed6","date":1411520390,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    @SuppressWarnings(\"deprecation\")\n    IndexWriterConfig iwConf = new IndexWriterConfig(runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.DEFAULT_MAX_THREAD_COUNT);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.DEFAULT_MAX_MERGE_COUNT);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        iwConf.setCodec(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String postingsFormat = config.get(\"codec.postingsFormat\",null);\n    if (defaultCodec == null && postingsFormat != null) {\n      try {\n        final PostingsFormat postingsFormatChosen = PostingsFormat.forName(postingsFormat);\n        iwConf.setCodec(new Lucene50Codec(){\n          @Override\n          public PostingsFormat getPostingsFormatForField(String field) {\n            return postingsFormatChosen;\n          }\n        });\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Postings Format: \" + postingsFormat, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    iwConf.setUseCompoundFile(isCompound);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(NoMergePolicy.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if (iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    @SuppressWarnings(\"deprecation\")\n    IndexWriterConfig iwConf = new IndexWriterConfig(runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.DEFAULT_MAX_THREAD_COUNT);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.DEFAULT_MAX_MERGE_COUNT);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        iwConf.setCodec(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String postingsFormat = config.get(\"codec.postingsFormat\",null);\n    if (defaultCodec == null && postingsFormat != null) {\n      try {\n        final PostingsFormat postingsFormatChosen = PostingsFormat.forName(postingsFormat);\n        iwConf.setCodec(new Lucene410Codec(){\n          @Override\n          public PostingsFormat getPostingsFormatForField(String field) {\n            return postingsFormatChosen;\n          }\n        });\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Postings Format: \" + postingsFormat, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    iwConf.setUseCompoundFile(isCompound);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(NoMergePolicy.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if (iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1db7bd2068060be0b68fcca95c8270c7cb60f6c","date":1419003415,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    @SuppressWarnings(\"deprecation\")\n    IndexWriterConfig iwConf = new IndexWriterConfig(runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if (commit != null) {\n      iwConf.setIndexCommit(commit);\n    }\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        iwConf.setCodec(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String postingsFormat = config.get(\"codec.postingsFormat\",null);\n    if (defaultCodec == null && postingsFormat != null) {\n      try {\n        final PostingsFormat postingsFormatChosen = PostingsFormat.forName(postingsFormat);\n        iwConf.setCodec(new Lucene50Codec(){\n          @Override\n          public PostingsFormat getPostingsFormatForField(String field) {\n            return postingsFormatChosen;\n          }\n        });\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Postings Format: \" + postingsFormat, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    iwConf.setUseCompoundFile(isCompound);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(NoMergePolicy.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if (iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    @SuppressWarnings(\"deprecation\")\n    IndexWriterConfig iwConf = new IndexWriterConfig(runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.DEFAULT_MAX_THREAD_COUNT);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.DEFAULT_MAX_MERGE_COUNT);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        iwConf.setCodec(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String postingsFormat = config.get(\"codec.postingsFormat\",null);\n    if (defaultCodec == null && postingsFormat != null) {\n      try {\n        final PostingsFormat postingsFormatChosen = PostingsFormat.forName(postingsFormat);\n        iwConf.setCodec(new Lucene50Codec(){\n          @Override\n          public PostingsFormat getPostingsFormatForField(String field) {\n            return postingsFormatChosen;\n          }\n        });\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Postings Format: \" + postingsFormat, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    iwConf.setUseCompoundFile(isCompound);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(NoMergePolicy.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if (iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9","date":1434069165,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    @SuppressWarnings(\"deprecation\")\n    IndexWriterConfig iwConf = new IndexWriterConfig(runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if (commit != null) {\n      iwConf.setIndexCommit(commit);\n    }\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        iwConf.setCodec(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String postingsFormat = config.get(\"codec.postingsFormat\",null);\n    if (defaultCodec == null && postingsFormat != null) {\n      try {\n        final PostingsFormat postingsFormatChosen = PostingsFormat.forName(postingsFormat);\n        iwConf.setCodec(new Lucene53Codec() {\n          @Override\n          public PostingsFormat getPostingsFormatForField(String field) {\n            return postingsFormatChosen;\n          }\n        });\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Postings Format: \" + postingsFormat, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    iwConf.setUseCompoundFile(isCompound);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(NoMergePolicy.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if (iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    @SuppressWarnings(\"deprecation\")\n    IndexWriterConfig iwConf = new IndexWriterConfig(runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if (commit != null) {\n      iwConf.setIndexCommit(commit);\n    }\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        iwConf.setCodec(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String postingsFormat = config.get(\"codec.postingsFormat\",null);\n    if (defaultCodec == null && postingsFormat != null) {\n      try {\n        final PostingsFormat postingsFormatChosen = PostingsFormat.forName(postingsFormat);\n        iwConf.setCodec(new Lucene50Codec(){\n          @Override\n          public PostingsFormat getPostingsFormatForField(String field) {\n            return postingsFormatChosen;\n          }\n        });\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Postings Format: \" + postingsFormat, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    iwConf.setUseCompoundFile(isCompound);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(NoMergePolicy.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if (iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a870f9917149dc600c4ad4417d615c1795de5864","date":1445975387,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    @SuppressWarnings(\"deprecation\")\n    IndexWriterConfig iwConf = new IndexWriterConfig(runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if (commit != null) {\n      iwConf.setIndexCommit(commit);\n    }\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        iwConf.setCodec(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String postingsFormat = config.get(\"codec.postingsFormat\",null);\n    if (defaultCodec == null && postingsFormat != null) {\n      try {\n        final PostingsFormat postingsFormatChosen = PostingsFormat.forName(postingsFormat);\n        iwConf.setCodec(new Lucene54Codec() {\n          @Override\n          public PostingsFormat getPostingsFormatForField(String field) {\n            return postingsFormatChosen;\n          }\n        });\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Postings Format: \" + postingsFormat, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    iwConf.setUseCompoundFile(isCompound);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(NoMergePolicy.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if (iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    @SuppressWarnings(\"deprecation\")\n    IndexWriterConfig iwConf = new IndexWriterConfig(runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if (commit != null) {\n      iwConf.setIndexCommit(commit);\n    }\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        iwConf.setCodec(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String postingsFormat = config.get(\"codec.postingsFormat\",null);\n    if (defaultCodec == null && postingsFormat != null) {\n      try {\n        final PostingsFormat postingsFormatChosen = PostingsFormat.forName(postingsFormat);\n        iwConf.setCodec(new Lucene53Codec() {\n          @Override\n          public PostingsFormat getPostingsFormatForField(String field) {\n            return postingsFormatChosen;\n          }\n        });\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Postings Format: \" + postingsFormat, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    iwConf.setUseCompoundFile(isCompound);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(NoMergePolicy.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if (iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eee4175312c41f89aa23427f9e4edfc00deeaac","date":1446373190,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    @SuppressWarnings(\"deprecation\")\n    IndexWriterConfig iwConf = new IndexWriterConfig(runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if (commit != null) {\n      iwConf.setIndexCommit(commit);\n    }\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        iwConf.setCodec(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String postingsFormat = config.get(\"codec.postingsFormat\",null);\n    if (defaultCodec == null && postingsFormat != null) {\n      try {\n        final PostingsFormat postingsFormatChosen = PostingsFormat.forName(postingsFormat);\n        iwConf.setCodec(new Lucene60Codec() {\n          @Override\n          public PostingsFormat getPostingsFormatForField(String field) {\n            return postingsFormatChosen;\n          }\n        });\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Postings Format: \" + postingsFormat, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    iwConf.setUseCompoundFile(isCompound);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(NoMergePolicy.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if (iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    @SuppressWarnings(\"deprecation\")\n    IndexWriterConfig iwConf = new IndexWriterConfig(runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if (commit != null) {\n      iwConf.setIndexCommit(commit);\n    }\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        iwConf.setCodec(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String postingsFormat = config.get(\"codec.postingsFormat\",null);\n    if (defaultCodec == null && postingsFormat != null) {\n      try {\n        final PostingsFormat postingsFormatChosen = PostingsFormat.forName(postingsFormat);\n        iwConf.setCodec(new Lucene54Codec() {\n          @Override\n          public PostingsFormat getPostingsFormatForField(String field) {\n            return postingsFormatChosen;\n          }\n        });\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Postings Format: \" + postingsFormat, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    iwConf.setUseCompoundFile(isCompound);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(NoMergePolicy.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if (iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8","date":1462567286,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    @SuppressWarnings(\"deprecation\")\n    IndexWriterConfig iwConf = new IndexWriterConfig(runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if (commit != null) {\n      iwConf.setIndexCommit(commit);\n    }\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        iwConf.setCodec(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String postingsFormat = config.get(\"codec.postingsFormat\",null);\n    if (defaultCodec == null && postingsFormat != null) {\n      try {\n        final PostingsFormat postingsFormatChosen = PostingsFormat.forName(postingsFormat);\n        iwConf.setCodec(new Lucene62Codec() {\n          @Override\n          public PostingsFormat getPostingsFormatForField(String field) {\n            return postingsFormatChosen;\n          }\n        });\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Postings Format: \" + postingsFormat, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    iwConf.setUseCompoundFile(isCompound);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(NoMergePolicy.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if (iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    @SuppressWarnings(\"deprecation\")\n    IndexWriterConfig iwConf = new IndexWriterConfig(runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if (commit != null) {\n      iwConf.setIndexCommit(commit);\n    }\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        iwConf.setCodec(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String postingsFormat = config.get(\"codec.postingsFormat\",null);\n    if (defaultCodec == null && postingsFormat != null) {\n      try {\n        final PostingsFormat postingsFormatChosen = PostingsFormat.forName(postingsFormat);\n        iwConf.setCodec(new Lucene60Codec() {\n          @Override\n          public PostingsFormat getPostingsFormatForField(String field) {\n            return postingsFormatChosen;\n          }\n        });\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Postings Format: \" + postingsFormat, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    iwConf.setUseCompoundFile(isCompound);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(NoMergePolicy.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if (iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    @SuppressWarnings(\"deprecation\")\n    IndexWriterConfig iwConf = new IndexWriterConfig(runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if (commit != null) {\n      iwConf.setIndexCommit(commit);\n    }\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        iwConf.setCodec(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String postingsFormat = config.get(\"codec.postingsFormat\",null);\n    if (defaultCodec == null && postingsFormat != null) {\n      try {\n        final PostingsFormat postingsFormatChosen = PostingsFormat.forName(postingsFormat);\n        iwConf.setCodec(new Lucene62Codec() {\n          @Override\n          public PostingsFormat getPostingsFormatForField(String field) {\n            return postingsFormatChosen;\n          }\n        });\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Postings Format: \" + postingsFormat, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    iwConf.setUseCompoundFile(isCompound);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(NoMergePolicy.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if (iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    @SuppressWarnings(\"deprecation\")\n    IndexWriterConfig iwConf = new IndexWriterConfig(runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if (commit != null) {\n      iwConf.setIndexCommit(commit);\n    }\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        iwConf.setCodec(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String postingsFormat = config.get(\"codec.postingsFormat\",null);\n    if (defaultCodec == null && postingsFormat != null) {\n      try {\n        final PostingsFormat postingsFormatChosen = PostingsFormat.forName(postingsFormat);\n        iwConf.setCodec(new Lucene60Codec() {\n          @Override\n          public PostingsFormat getPostingsFormatForField(String field) {\n            return postingsFormatChosen;\n          }\n        });\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Postings Format: \" + postingsFormat, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    iwConf.setUseCompoundFile(isCompound);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(NoMergePolicy.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if (iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    @SuppressWarnings(\"deprecation\")\n    IndexWriterConfig iwConf = new IndexWriterConfig(runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if (commit != null) {\n      iwConf.setIndexCommit(commit);\n    }\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        iwConf.setCodec(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String postingsFormat = config.get(\"codec.postingsFormat\",null);\n    if (defaultCodec == null && postingsFormat != null) {\n      try {\n        final PostingsFormat postingsFormatChosen = PostingsFormat.forName(postingsFormat);\n        iwConf.setCodec(new Lucene62Codec() {\n          @Override\n          public PostingsFormat getPostingsFormatForField(String field) {\n            return postingsFormatChosen;\n          }\n        });\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Postings Format: \" + postingsFormat, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    iwConf.setUseCompoundFile(isCompound);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(NoMergePolicy.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if (iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    @SuppressWarnings(\"deprecation\")\n    IndexWriterConfig iwConf = new IndexWriterConfig(runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if (commit != null) {\n      iwConf.setIndexCommit(commit);\n    }\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        iwConf.setCodec(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String postingsFormat = config.get(\"codec.postingsFormat\",null);\n    if (defaultCodec == null && postingsFormat != null) {\n      try {\n        final PostingsFormat postingsFormatChosen = PostingsFormat.forName(postingsFormat);\n        iwConf.setCodec(new Lucene60Codec() {\n          @Override\n          public PostingsFormat getPostingsFormatForField(String field) {\n            return postingsFormatChosen;\n          }\n        });\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Postings Format: \" + postingsFormat, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    iwConf.setUseCompoundFile(isCompound);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(NoMergePolicy.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if (iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    @SuppressWarnings(\"deprecation\")\n    IndexWriterConfig iwConf = new IndexWriterConfig(runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if (commit != null) {\n      iwConf.setIndexCommit(commit);\n    }\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        iwConf.setCodec(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String postingsFormat = config.get(\"codec.postingsFormat\",null);\n    if (defaultCodec == null && postingsFormat != null) {\n      try {\n        final PostingsFormat postingsFormatChosen = PostingsFormat.forName(postingsFormat);\n        iwConf.setCodec(new Lucene62Codec() {\n          @Override\n          public PostingsFormat getPostingsFormatForField(String field) {\n            return postingsFormatChosen;\n          }\n        });\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Postings Format: \" + postingsFormat, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    iwConf.setUseCompoundFile(isCompound);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(NoMergePolicy.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if (iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    @SuppressWarnings(\"deprecation\")\n    IndexWriterConfig iwConf = new IndexWriterConfig(runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if (commit != null) {\n      iwConf.setIndexCommit(commit);\n    }\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        iwConf.setCodec(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String postingsFormat = config.get(\"codec.postingsFormat\",null);\n    if (defaultCodec == null && postingsFormat != null) {\n      try {\n        final PostingsFormat postingsFormatChosen = PostingsFormat.forName(postingsFormat);\n        iwConf.setCodec(new Lucene60Codec() {\n          @Override\n          public PostingsFormat getPostingsFormatForField(String field) {\n            return postingsFormatChosen;\n          }\n        });\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Postings Format: \" + postingsFormat, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    iwConf.setUseCompoundFile(isCompound);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(NoMergePolicy.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if (iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"084884d4602f4d1c7411eab29e897e349ce62675","date":1475571034,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    @SuppressWarnings(\"deprecation\")\n    IndexWriterConfig iwConf = new IndexWriterConfig(runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if (commit != null) {\n      iwConf.setIndexCommit(commit);\n    }\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        iwConf.setCodec(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String postingsFormat = config.get(\"codec.postingsFormat\",null);\n    if (defaultCodec == null && postingsFormat != null) {\n      try {\n        final PostingsFormat postingsFormatChosen = PostingsFormat.forName(postingsFormat);\n        iwConf.setCodec(new Lucene70Codec() {\n          @Override\n          public PostingsFormat getPostingsFormatForField(String field) {\n            return postingsFormatChosen;\n          }\n        });\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Postings Format: \" + postingsFormat, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    iwConf.setUseCompoundFile(isCompound);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(NoMergePolicy.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if (iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    @SuppressWarnings(\"deprecation\")\n    IndexWriterConfig iwConf = new IndexWriterConfig(runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if (commit != null) {\n      iwConf.setIndexCommit(commit);\n    }\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        iwConf.setCodec(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String postingsFormat = config.get(\"codec.postingsFormat\",null);\n    if (defaultCodec == null && postingsFormat != null) {\n      try {\n        final PostingsFormat postingsFormatChosen = PostingsFormat.forName(postingsFormat);\n        iwConf.setCodec(new Lucene62Codec() {\n          @Override\n          public PostingsFormat getPostingsFormatForField(String field) {\n            return postingsFormatChosen;\n          }\n        });\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Postings Format: \" + postingsFormat, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    iwConf.setUseCompoundFile(isCompound);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(NoMergePolicy.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if (iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1967bed916cc89da82a1c2085f27976da6d08cbd","date":1475588750,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    @SuppressWarnings(\"deprecation\")\n    IndexWriterConfig iwConf = new IndexWriterConfig(runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if (commit != null) {\n      iwConf.setIndexCommit(commit);\n    }\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        iwConf.setCodec(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String postingsFormat = config.get(\"codec.postingsFormat\",null);\n    if (defaultCodec == null && postingsFormat != null) {\n      try {\n        final PostingsFormat postingsFormatChosen = PostingsFormat.forName(postingsFormat);\n        iwConf.setCodec(new Lucene70Codec() {\n          @Override\n          public PostingsFormat getPostingsFormatForField(String field) {\n            return postingsFormatChosen;\n          }\n        });\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Postings Format: \" + postingsFormat, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    iwConf.setUseCompoundFile(isCompound);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(NoMergePolicy.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if (iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    @SuppressWarnings(\"deprecation\")\n    IndexWriterConfig iwConf = new IndexWriterConfig(runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if (commit != null) {\n      iwConf.setIndexCommit(commit);\n    }\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        iwConf.setCodec(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String postingsFormat = config.get(\"codec.postingsFormat\",null);\n    if (defaultCodec == null && postingsFormat != null) {\n      try {\n        final PostingsFormat postingsFormatChosen = PostingsFormat.forName(postingsFormat);\n        iwConf.setCodec(new Lucene62Codec() {\n          @Override\n          public PostingsFormat getPostingsFormatForField(String field) {\n            return postingsFormatChosen;\n          }\n        });\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Postings Format: \" + postingsFormat, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    iwConf.setUseCompoundFile(isCompound);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(NoMergePolicy.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if (iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    @SuppressWarnings(\"deprecation\")\n    IndexWriterConfig iwConf = new IndexWriterConfig(runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if (commit != null) {\n      iwConf.setIndexCommit(commit);\n    }\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        iwConf.setCodec(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String postingsFormat = config.get(\"codec.postingsFormat\",null);\n    if (defaultCodec == null && postingsFormat != null) {\n      try {\n        final PostingsFormat postingsFormatChosen = PostingsFormat.forName(postingsFormat);\n        iwConf.setCodec(new Lucene70Codec() {\n          @Override\n          public PostingsFormat getPostingsFormatForField(String field) {\n            return postingsFormatChosen;\n          }\n        });\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Postings Format: \" + postingsFormat, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    iwConf.setUseCompoundFile(isCompound);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(NoMergePolicy.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if (iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    @SuppressWarnings(\"deprecation\")\n    IndexWriterConfig iwConf = new IndexWriterConfig(runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if (commit != null) {\n      iwConf.setIndexCommit(commit);\n    }\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        iwConf.setCodec(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String postingsFormat = config.get(\"codec.postingsFormat\",null);\n    if (defaultCodec == null && postingsFormat != null) {\n      try {\n        final PostingsFormat postingsFormatChosen = PostingsFormat.forName(postingsFormat);\n        iwConf.setCodec(new Lucene60Codec() {\n          @Override\n          public PostingsFormat getPostingsFormatForField(String field) {\n            return postingsFormatChosen;\n          }\n        });\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Postings Format: \" + postingsFormat, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    iwConf.setUseCompoundFile(isCompound);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(NoMergePolicy.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if (iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6930fc653c2b86e857fce0af7ec99993593d0d89","date":1535014305,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    @SuppressWarnings(\"deprecation\")\n    IndexWriterConfig iwConf = new IndexWriterConfig(runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if (commit != null) {\n      iwConf.setIndexCommit(commit);\n    }\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        iwConf.setCodec(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String postingsFormat = config.get(\"codec.postingsFormat\",null);\n    if (defaultCodec == null && postingsFormat != null) {\n      try {\n        final PostingsFormat postingsFormatChosen = PostingsFormat.forName(postingsFormat);\n        iwConf.setCodec(new Lucene80Codec() {\n          @Override\n          public PostingsFormat getPostingsFormatForField(String field) {\n            return postingsFormatChosen;\n          }\n        });\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Postings Format: \" + postingsFormat, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    iwConf.setUseCompoundFile(isCompound);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(NoMergePolicy.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if (iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    @SuppressWarnings(\"deprecation\")\n    IndexWriterConfig iwConf = new IndexWriterConfig(runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if (commit != null) {\n      iwConf.setIndexCommit(commit);\n    }\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        iwConf.setCodec(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String postingsFormat = config.get(\"codec.postingsFormat\",null);\n    if (defaultCodec == null && postingsFormat != null) {\n      try {\n        final PostingsFormat postingsFormatChosen = PostingsFormat.forName(postingsFormat);\n        iwConf.setCodec(new Lucene70Codec() {\n          @Override\n          public PostingsFormat getPostingsFormatForField(String field) {\n            return postingsFormatChosen;\n          }\n        });\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Postings Format: \" + postingsFormat, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    iwConf.setUseCompoundFile(isCompound);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(NoMergePolicy.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if (iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    IndexWriterConfig iwConf = new IndexWriterConfig(runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if (commit != null) {\n      iwConf.setIndexCommit(commit);\n    }\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).getConstructor().newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        iwConf.setCodec(clazz.getConstructor().newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String postingsFormat = config.get(\"codec.postingsFormat\",null);\n    if (defaultCodec == null && postingsFormat != null) {\n      try {\n        final PostingsFormat postingsFormatChosen = PostingsFormat.forName(postingsFormat);\n        iwConf.setCodec(new Lucene80Codec() {\n          @Override\n          public PostingsFormat getPostingsFormatForField(String field) {\n            return postingsFormatChosen;\n          }\n        });\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Postings Format: \" + postingsFormat, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    iwConf.setUseCompoundFile(isCompound);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(NoMergePolicy.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).getConstructor().newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if (iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    @SuppressWarnings(\"deprecation\")\n    IndexWriterConfig iwConf = new IndexWriterConfig(runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if (commit != null) {\n      iwConf.setIndexCommit(commit);\n    }\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        iwConf.setCodec(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String postingsFormat = config.get(\"codec.postingsFormat\",null);\n    if (defaultCodec == null && postingsFormat != null) {\n      try {\n        final PostingsFormat postingsFormatChosen = PostingsFormat.forName(postingsFormat);\n        iwConf.setCodec(new Lucene80Codec() {\n          @Override\n          public PostingsFormat getPostingsFormatForField(String field) {\n            return postingsFormatChosen;\n          }\n        });\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Postings Format: \" + postingsFormat, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    iwConf.setUseCompoundFile(isCompound);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(NoMergePolicy.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if (iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    IndexWriterConfig iwConf = new IndexWriterConfig(runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if (commit != null) {\n      iwConf.setIndexCommit(commit);\n    }\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).getConstructor().newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        iwConf.setCodec(clazz.getConstructor().newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String postingsFormat = config.get(\"codec.postingsFormat\",null);\n    if (defaultCodec == null && postingsFormat != null) {\n      try {\n        final PostingsFormat postingsFormatChosen = PostingsFormat.forName(postingsFormat);\n        iwConf.setCodec(new Lucene84Codec() {\n          @Override\n          public PostingsFormat getPostingsFormatForField(String field) {\n            return postingsFormatChosen;\n          }\n        });\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Postings Format: \" + postingsFormat, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    iwConf.setUseCompoundFile(isCompound);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(NoMergePolicy.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).getConstructor().newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if (iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    IndexWriterConfig iwConf = new IndexWriterConfig(runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if (commit != null) {\n      iwConf.setIndexCommit(commit);\n    }\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).getConstructor().newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        iwConf.setCodec(clazz.getConstructor().newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String postingsFormat = config.get(\"codec.postingsFormat\",null);\n    if (defaultCodec == null && postingsFormat != null) {\n      try {\n        final PostingsFormat postingsFormatChosen = PostingsFormat.forName(postingsFormat);\n        iwConf.setCodec(new Lucene80Codec() {\n          @Override\n          public PostingsFormat getPostingsFormatForField(String field) {\n            return postingsFormatChosen;\n          }\n        });\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Postings Format: \" + postingsFormat, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    iwConf.setUseCompoundFile(isCompound);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(NoMergePolicy.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).getConstructor().newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if (iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"773bf150032d3ef6c95997a154fb914b82875cb8","date":1590150786,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    IndexWriterConfig iwConf = new IndexWriterConfig(runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if (commit != null) {\n      iwConf.setIndexCommit(commit);\n    }\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).getConstructor().newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        iwConf.setCodec(clazz.getConstructor().newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String postingsFormat = config.get(\"codec.postingsFormat\",null);\n    if (defaultCodec == null && postingsFormat != null) {\n      try {\n        final PostingsFormat postingsFormatChosen = PostingsFormat.forName(postingsFormat);\n        iwConf.setCodec(new Lucene86Codec() {\n          @Override\n          public PostingsFormat getPostingsFormatForField(String field) {\n            return postingsFormatChosen;\n          }\n        });\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Postings Format: \" + postingsFormat, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    iwConf.setUseCompoundFile(isCompound);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(NoMergePolicy.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).getConstructor().newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if (iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    IndexWriterConfig iwConf = new IndexWriterConfig(runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if (commit != null) {\n      iwConf.setIndexCommit(commit);\n    }\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).getConstructor().newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        iwConf.setCodec(clazz.getConstructor().newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String postingsFormat = config.get(\"codec.postingsFormat\",null);\n    if (defaultCodec == null && postingsFormat != null) {\n      try {\n        final PostingsFormat postingsFormatChosen = PostingsFormat.forName(postingsFormat);\n        iwConf.setCodec(new Lucene84Codec() {\n          @Override\n          public PostingsFormat getPostingsFormatForField(String field) {\n            return postingsFormatChosen;\n          }\n        });\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Postings Format: \" + postingsFormat, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    iwConf.setUseCompoundFile(isCompound);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(NoMergePolicy.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).getConstructor().newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if (iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db8230c9dbe474fc18e1e71cf04c1ada8046ec9","date":1598432674,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    IndexWriterConfig iwConf = new IndexWriterConfig(runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if (commit != null) {\n      iwConf.setIndexCommit(commit);\n    }\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).getConstructor().newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        iwConf.setCodec(clazz.getConstructor().newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String postingsFormat = config.get(\"codec.postingsFormat\",null);\n    if (defaultCodec == null && postingsFormat != null) {\n      try {\n        final PostingsFormat postingsFormatChosen = PostingsFormat.forName(postingsFormat);\n        iwConf.setCodec(new Lucene87Codec() {\n          @Override\n          public PostingsFormat getPostingsFormatForField(String field) {\n            return postingsFormatChosen;\n          }\n        });\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Postings Format: \" + postingsFormat, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    iwConf.setUseCompoundFile(isCompound);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(NoMergePolicy.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).getConstructor().newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if (iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    IndexWriterConfig iwConf = new IndexWriterConfig(runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if (commit != null) {\n      iwConf.setIndexCommit(commit);\n    }\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).getConstructor().newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int maxThreadCount = config.get(\"concurrent.merge.scheduler.max.thread.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        int maxMergeCount = config.get(\"concurrent.merge.scheduler.max.merge.count\", ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        iwConf.setCodec(clazz.getConstructor().newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String postingsFormat = config.get(\"codec.postingsFormat\",null);\n    if (defaultCodec == null && postingsFormat != null) {\n      try {\n        final PostingsFormat postingsFormatChosen = PostingsFormat.forName(postingsFormat);\n        iwConf.setCodec(new Lucene86Codec() {\n          @Override\n          public PostingsFormat getPostingsFormatForField(String field) {\n            return postingsFormatChosen;\n          }\n        });\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Postings Format: \" + postingsFormat, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    iwConf.setUseCompoundFile(isCompound);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(NoMergePolicy.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).getConstructor().newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      iwConf.getMergePolicy().setNoCFSRatio(isCompound ? 1.0 : 0.0);\n      if (iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2fb55c0777755badd3b46d8140f3d4301febed":["dd330c9d05eacbd6e952fe0dea852e7ae037eb50"],"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9":["f1db7bd2068060be0b68fcca95c8270c7cb60f6c"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["d470c8182e92b264680e34081b75e70a9f2b3c89","084884d4602f4d1c7411eab29e897e349ce62675"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["088a7ef694fd43d5d9a4d200c4005865f773d1e7","be3b141eed4372b3eb04def61ab79f86f572f481"],"6930fc653c2b86e857fce0af7ec99993593d0d89":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"0db8230c9dbe474fc18e1e71cf04c1ada8046ec9":["773bf150032d3ef6c95997a154fb914b82875cb8"],"0ad30c6a479e764150a3316e57263319775f1df2":["1eee4175312c41f89aa23427f9e4edfc00deeaac","3d33e731a93d4b57e662ff094f64f94a745422d4"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["1eee4175312c41f89aa23427f9e4edfc00deeaac","0ad30c6a479e764150a3316e57263319775f1df2"],"0bf41419d452997826ec5f17684993377be77f49":["be3b141eed4372b3eb04def61ab79f86f572f481"],"940b22e035cbfe47ac8c00a900a61a724c2140e2":["0bf41419d452997826ec5f17684993377be77f49"],"773bf150032d3ef6c95997a154fb914b82875cb8":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1eee4175312c41f89aa23427f9e4edfc00deeaac":["a870f9917149dc600c4ad4417d615c1795de5864"],"f1db7bd2068060be0b68fcca95c8270c7cb60f6c":["500867f0f15393f6b2c38c3366e414fccba04ed6"],"be3b141eed4372b3eb04def61ab79f86f572f481":["088a7ef694fd43d5d9a4d200c4005865f773d1e7"],"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8":["1eee4175312c41f89aa23427f9e4edfc00deeaac"],"33841f6307398f94bca8ab49388c91d8e769357a":["46ff533a28b45377dffc601931e60e19492e6384"],"5eb2511ababf862ea11e10761c70ee560cd84510":["0bf41419d452997826ec5f17684993377be77f49","940b22e035cbfe47ac8c00a900a61a724c2140e2"],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"3f908776e2743c920ccf99e2824ea1cf45daaa75":["7e2fb55c0777755badd3b46d8140f3d4301febed"],"500867f0f15393f6b2c38c3366e414fccba04ed6":["33841f6307398f94bca8ab49388c91d8e769357a"],"a870f9917149dc600c4ad4417d615c1795de5864":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["1eee4175312c41f89aa23427f9e4edfc00deeaac","1967bed916cc89da82a1c2085f27976da6d08cbd"],"084884d4602f4d1c7411eab29e897e349ce62675":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["6930fc653c2b86e857fce0af7ec99993593d0d89"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"088a7ef694fd43d5d9a4d200c4005865f773d1e7":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["3f908776e2743c920ccf99e2824ea1cf45daaa75"],"dd330c9d05eacbd6e952fe0dea852e7ae037eb50":["940b22e035cbfe47ac8c00a900a61a724c2140e2"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["be3b141eed4372b3eb04def61ab79f86f572f481","0bf41419d452997826ec5f17684993377be77f49"],"46ff533a28b45377dffc601931e60e19492e6384":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["1eee4175312c41f89aa23427f9e4edfc00deeaac","fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0db8230c9dbe474fc18e1e71cf04c1ada8046ec9"]},"commit2Childs":{"7e2fb55c0777755badd3b46d8140f3d4301febed":["3f908776e2743c920ccf99e2824ea1cf45daaa75"],"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9":["a870f9917149dc600c4ad4417d615c1795de5864"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["6930fc653c2b86e857fce0af7ec99993593d0d89","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"6930fc653c2b86e857fce0af7ec99993593d0d89":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"0db8230c9dbe474fc18e1e71cf04c1ada8046ec9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["1967bed916cc89da82a1c2085f27976da6d08cbd","084884d4602f4d1c7411eab29e897e349ce62675"],"0bf41419d452997826ec5f17684993377be77f49":["940b22e035cbfe47ac8c00a900a61a724c2140e2","5eb2511ababf862ea11e10761c70ee560cd84510","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"940b22e035cbfe47ac8c00a900a61a724c2140e2":["5eb2511ababf862ea11e10761c70ee560cd84510","dd330c9d05eacbd6e952fe0dea852e7ae037eb50"],"773bf150032d3ef6c95997a154fb914b82875cb8":["0db8230c9dbe474fc18e1e71cf04c1ada8046ec9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"1eee4175312c41f89aa23427f9e4edfc00deeaac":["0ad30c6a479e764150a3316e57263319775f1df2","d470c8182e92b264680e34081b75e70a9f2b3c89","fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3d33e731a93d4b57e662ff094f64f94a745422d4"],"f1db7bd2068060be0b68fcca95c8270c7cb60f6c":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9"],"be3b141eed4372b3eb04def61ab79f86f572f481":["37a0f60745e53927c4c876cfe5b5a58170f0646c","0bf41419d452997826ec5f17684993377be77f49","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793":["46ff533a28b45377dffc601931e60e19492e6384"],"fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"33841f6307398f94bca8ab49388c91d8e769357a":["500867f0f15393f6b2c38c3366e414fccba04ed6"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["773bf150032d3ef6c95997a154fb914b82875cb8"],"3f908776e2743c920ccf99e2824ea1cf45daaa75":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"500867f0f15393f6b2c38c3366e414fccba04ed6":["f1db7bd2068060be0b68fcca95c8270c7cb60f6c"],"a870f9917149dc600c4ad4417d615c1795de5864":["1eee4175312c41f89aa23427f9e4edfc00deeaac"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"084884d4602f4d1c7411eab29e897e349ce62675":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["088a7ef694fd43d5d9a4d200c4005865f773d1e7"],"088a7ef694fd43d5d9a4d200c4005865f773d1e7":["37a0f60745e53927c4c876cfe5b5a58170f0646c","be3b141eed4372b3eb04def61ab79f86f572f481"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793"],"dd330c9d05eacbd6e952fe0dea852e7ae037eb50":["7e2fb55c0777755badd3b46d8140f3d4301febed"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"46ff533a28b45377dffc601931e60e19492e6384":["33841f6307398f94bca8ab49388c91d8e769357a"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","5eb2511ababf862ea11e10761c70ee560cd84510","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}