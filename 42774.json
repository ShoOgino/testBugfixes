{"path":"solr/core/src/test/org/apache/solr/cloud/TestStressLiveNodes#createMiniSolrCloudCluster().mjava","commits":[{"id":"d3726445f8e9a7d398466439f0f84b5bb329fdcc","date":1460555680,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestStressLiveNodes#createMiniSolrCloudCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  private static void createMiniSolrCloudCluster() throws Exception {\n\n    // we only need 1 node, and we don't care about any configs or collections\n    // we're going to fake all the live_nodes changes we want to fake.\n    configureCluster(1).configure();\n\n    // give all nodes a chance to come alive\n    TestTolerantUpdateProcessorCloud.assertSpinLoopAllJettyAreRunning(cluster);\n    \n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.connect(); // force connection even though we aren't sending any requests\n    \n    ZK_SERVER_ADDR = cluster.getZkServer().getZkAddress();\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ea9249ab9a9f76eb4132ceb4631d15315721f6a","date":1460578553,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestStressLiveNodes#createMiniSolrCloudCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  private static void createMiniSolrCloudCluster() throws Exception {\n\n    // we only need 1 node, and we don't care about any configs or collections\n    // we're going to fake all the live_nodes changes we want to fake.\n    configureCluster(1).configure();\n\n    // give all nodes a chance to come alive\n    TestTolerantUpdateProcessorCloud.assertSpinLoopAllJettyAreRunning(cluster);\n    \n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.connect(); // force connection even though we aren't sending any requests\n    \n    ZK_SERVER_ADDR = cluster.getZkServer().getZkAddress();\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestStressLiveNodes#createMiniSolrCloudCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestStressLiveNodes#createMiniSolrCloudCluster().mjava","sourceNew":"  @BeforeClass\n  private static void createMiniSolrCloudCluster() throws Exception {\n\n    // we only need 1 node, and we don't care about any configs or collections\n    // we're going to fake all the live_nodes changes we want to fake.\n    configureCluster(1).configure();\n    \n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.connect(); // force connection even though we aren't sending any requests\n    \n    ZK_SERVER_ADDR = cluster.getZkServer().getZkAddress();\n    \n  }\n\n","sourceOld":"  @BeforeClass\n  private static void createMiniSolrCloudCluster() throws Exception {\n\n    // we only need 1 node, and we don't care about any configs or collections\n    // we're going to fake all the live_nodes changes we want to fake.\n    configureCluster(1).configure();\n\n    // give all nodes a chance to come alive\n    TestTolerantUpdateProcessorCloud.assertSpinLoopAllJettyAreRunning(cluster);\n    \n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.connect(); // force connection even though we aren't sending any requests\n    \n    ZK_SERVER_ADDR = cluster.getZkServer().getZkAddress();\n    \n  }\n\n","bugFix":["d3726445f8e9a7d398466439f0f84b5bb329fdcc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ea9249ab9a9f76eb4132ceb4631d15315721f6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d3726445f8e9a7d398466439f0f84b5bb329fdcc"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["9ea9249ab9a9f76eb4132ceb4631d15315721f6a"],"d3726445f8e9a7d398466439f0f84b5bb329fdcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"9ea9249ab9a9f76eb4132ceb4631d15315721f6a":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d3726445f8e9a7d398466439f0f84b5bb329fdcc":["9ea9249ab9a9f76eb4132ceb4631d15315721f6a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ea9249ab9a9f76eb4132ceb4631d15315721f6a","d3726445f8e9a7d398466439f0f84b5bb329fdcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}