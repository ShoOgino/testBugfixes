{"path":"solr/core/src/test/org/apache/solr/update/SolrIndexConfigTest#testConcurrentMergeSchedularSolrIndexConfigCreation().mjava","commits":[{"id":"1fc849bc99a046ff6fb7e03c792f2a4ddee419f2","date":1524216844,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexConfigTest#testConcurrentMergeSchedularSolrIndexConfigCreation().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testConcurrentMergeSchedularSolrIndexConfigCreation() throws Exception {\n    String solrConfigFileName = solrConfigFileNameConnMSPolicyFactory;\n    SolrConfig solrConfig = new SolrConfig(instanceDir, solrConfigFileName, null);\n    SolrIndexConfig solrIndexConfig = new SolrIndexConfig(solrConfig, null, null);\n    IndexSchema indexSchema = IndexSchemaFactory.buildIndexSchema(schemaFileName, solrConfig);\n\n    h.getCore().setLatestSchema(indexSchema);\n    IndexWriterConfig iwc = solrIndexConfig.toIndexWriterConfig(h.getCore());\n\n    assertNotNull(\"null mp\", iwc.getMergePolicy());\n    assertTrue(\"mp is not TieredMergePolicy\", iwc.getMergePolicy() instanceof TieredMergePolicy);\n\n    assertNotNull(\"null ms\", iwc.getMergeScheduler());\n    assertTrue(\"ms is not CMS\", iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler);\n    ConcurrentMergeScheduler ms = (ConcurrentMergeScheduler)  iwc.getMergeScheduler();\n    assertEquals(\"ms.maxMergeCount\", 987, ms.getMaxMergeCount());\n    assertEquals(\"ms.maxThreadCount\", 42, ms.getMaxThreadCount());\n    assertEquals(\"ms.isAutoIOThrottle\", false, ms.getAutoIOThrottle());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad8024a22d8bd3a09b7f618f41cdfe117ae6fe96","date":1576143009,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexConfigTest#testConcurrentMergeSchedularSolrIndexConfigCreation().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrIndexConfigTest#testConcurrentMergeSchedularSolrIndexConfigCreation().mjava","sourceNew":"  @Test\n  public void testConcurrentMergeSchedularSolrIndexConfigCreation() throws Exception {\n    String solrConfigFileName = solrConfigFileNameConnMSPolicyFactory;\n    SolrConfig solrConfig = new SolrConfig(instanceDir, solrConfigFileName, null, true);\n    SolrIndexConfig solrIndexConfig = new SolrIndexConfig(solrConfig, null, null);\n    IndexSchema indexSchema = IndexSchemaFactory.buildIndexSchema(schemaFileName, solrConfig);\n\n    h.getCore().setLatestSchema(indexSchema);\n    IndexWriterConfig iwc = solrIndexConfig.toIndexWriterConfig(h.getCore());\n\n    assertNotNull(\"null mp\", iwc.getMergePolicy());\n    assertTrue(\"mp is not TieredMergePolicy\", iwc.getMergePolicy() instanceof TieredMergePolicy);\n\n    assertNotNull(\"null ms\", iwc.getMergeScheduler());\n    assertTrue(\"ms is not CMS\", iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler);\n    ConcurrentMergeScheduler ms = (ConcurrentMergeScheduler)  iwc.getMergeScheduler();\n    assertEquals(\"ms.maxMergeCount\", 987, ms.getMaxMergeCount());\n    assertEquals(\"ms.maxThreadCount\", 42, ms.getMaxThreadCount());\n    assertEquals(\"ms.isAutoIOThrottle\", false, ms.getAutoIOThrottle());\n\n  }\n\n","sourceOld":"  @Test\n  public void testConcurrentMergeSchedularSolrIndexConfigCreation() throws Exception {\n    String solrConfigFileName = solrConfigFileNameConnMSPolicyFactory;\n    SolrConfig solrConfig = new SolrConfig(instanceDir, solrConfigFileName, null);\n    SolrIndexConfig solrIndexConfig = new SolrIndexConfig(solrConfig, null, null);\n    IndexSchema indexSchema = IndexSchemaFactory.buildIndexSchema(schemaFileName, solrConfig);\n\n    h.getCore().setLatestSchema(indexSchema);\n    IndexWriterConfig iwc = solrIndexConfig.toIndexWriterConfig(h.getCore());\n\n    assertNotNull(\"null mp\", iwc.getMergePolicy());\n    assertTrue(\"mp is not TieredMergePolicy\", iwc.getMergePolicy() instanceof TieredMergePolicy);\n\n    assertNotNull(\"null ms\", iwc.getMergeScheduler());\n    assertTrue(\"ms is not CMS\", iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler);\n    ConcurrentMergeScheduler ms = (ConcurrentMergeScheduler)  iwc.getMergeScheduler();\n    assertEquals(\"ms.maxMergeCount\", 987, ms.getMaxMergeCount());\n    assertEquals(\"ms.maxThreadCount\", 42, ms.getMaxThreadCount());\n    assertEquals(\"ms.isAutoIOThrottle\", false, ms.getAutoIOThrottle());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df724d84dab24a0cc54bec95a8680867adc7f171","date":1576156608,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexConfigTest#testConcurrentMergeSchedularSolrIndexConfigCreation().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrIndexConfigTest#testConcurrentMergeSchedularSolrIndexConfigCreation().mjava","sourceNew":"  @Test\n  public void testConcurrentMergeSchedularSolrIndexConfigCreation() throws Exception {\n    String solrConfigFileName = solrConfigFileNameConnMSPolicyFactory;\n    SolrConfig solrConfig = new SolrConfig(instanceDir, solrConfigFileName, null, true);\n    SolrIndexConfig solrIndexConfig = new SolrIndexConfig(solrConfig, null, null);\n    IndexSchema indexSchema = IndexSchemaFactory.buildIndexSchema(schemaFileName, solrConfig);\n\n    h.getCore().setLatestSchema(indexSchema);\n    IndexWriterConfig iwc = solrIndexConfig.toIndexWriterConfig(h.getCore());\n\n    assertNotNull(\"null mp\", iwc.getMergePolicy());\n    assertTrue(\"mp is not TieredMergePolicy\", iwc.getMergePolicy() instanceof TieredMergePolicy);\n\n    assertNotNull(\"null ms\", iwc.getMergeScheduler());\n    assertTrue(\"ms is not CMS\", iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler);\n    ConcurrentMergeScheduler ms = (ConcurrentMergeScheduler)  iwc.getMergeScheduler();\n    assertEquals(\"ms.maxMergeCount\", 987, ms.getMaxMergeCount());\n    assertEquals(\"ms.maxThreadCount\", 42, ms.getMaxThreadCount());\n    assertEquals(\"ms.isAutoIOThrottle\", false, ms.getAutoIOThrottle());\n\n  }\n\n","sourceOld":"  @Test\n  public void testConcurrentMergeSchedularSolrIndexConfigCreation() throws Exception {\n    String solrConfigFileName = solrConfigFileNameConnMSPolicyFactory;\n    SolrConfig solrConfig = new SolrConfig(instanceDir, solrConfigFileName, null);\n    SolrIndexConfig solrIndexConfig = new SolrIndexConfig(solrConfig, null, null);\n    IndexSchema indexSchema = IndexSchemaFactory.buildIndexSchema(schemaFileName, solrConfig);\n\n    h.getCore().setLatestSchema(indexSchema);\n    IndexWriterConfig iwc = solrIndexConfig.toIndexWriterConfig(h.getCore());\n\n    assertNotNull(\"null mp\", iwc.getMergePolicy());\n    assertTrue(\"mp is not TieredMergePolicy\", iwc.getMergePolicy() instanceof TieredMergePolicy);\n\n    assertNotNull(\"null ms\", iwc.getMergeScheduler());\n    assertTrue(\"ms is not CMS\", iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler);\n    ConcurrentMergeScheduler ms = (ConcurrentMergeScheduler)  iwc.getMergeScheduler();\n    assertEquals(\"ms.maxMergeCount\", 987, ms.getMaxMergeCount());\n    assertEquals(\"ms.maxThreadCount\", 42, ms.getMaxThreadCount());\n    assertEquals(\"ms.isAutoIOThrottle\", false, ms.getAutoIOThrottle());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3","date":1583932828,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexConfigTest#testConcurrentMergeSchedularSolrIndexConfigCreation().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrIndexConfigTest#testConcurrentMergeSchedularSolrIndexConfigCreation().mjava","sourceNew":"  @Test\n  public void testConcurrentMergeSchedularSolrIndexConfigCreation() throws Exception {\n    String solrConfigFileName = solrConfigFileNameConnMSPolicyFactory;\n    SolrConfig solrConfig = new SolrConfig(instanceDir, solrConfigFileName);\n    SolrIndexConfig solrIndexConfig = new SolrIndexConfig(solrConfig, null, null);\n    IndexSchema indexSchema = IndexSchemaFactory.buildIndexSchema(schemaFileName, solrConfig);\n\n    h.getCore().setLatestSchema(indexSchema);\n    IndexWriterConfig iwc = solrIndexConfig.toIndexWriterConfig(h.getCore());\n\n    assertNotNull(\"null mp\", iwc.getMergePolicy());\n    assertTrue(\"mp is not TieredMergePolicy\", iwc.getMergePolicy() instanceof TieredMergePolicy);\n\n    assertNotNull(\"null ms\", iwc.getMergeScheduler());\n    assertTrue(\"ms is not CMS\", iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler);\n    ConcurrentMergeScheduler ms = (ConcurrentMergeScheduler)  iwc.getMergeScheduler();\n    assertEquals(\"ms.maxMergeCount\", 987, ms.getMaxMergeCount());\n    assertEquals(\"ms.maxThreadCount\", 42, ms.getMaxThreadCount());\n    assertEquals(\"ms.isAutoIOThrottle\", false, ms.getAutoIOThrottle());\n\n  }\n\n","sourceOld":"  @Test\n  public void testConcurrentMergeSchedularSolrIndexConfigCreation() throws Exception {\n    String solrConfigFileName = solrConfigFileNameConnMSPolicyFactory;\n    SolrConfig solrConfig = new SolrConfig(instanceDir, solrConfigFileName, null, true);\n    SolrIndexConfig solrIndexConfig = new SolrIndexConfig(solrConfig, null, null);\n    IndexSchema indexSchema = IndexSchemaFactory.buildIndexSchema(schemaFileName, solrConfig);\n\n    h.getCore().setLatestSchema(indexSchema);\n    IndexWriterConfig iwc = solrIndexConfig.toIndexWriterConfig(h.getCore());\n\n    assertNotNull(\"null mp\", iwc.getMergePolicy());\n    assertTrue(\"mp is not TieredMergePolicy\", iwc.getMergePolicy() instanceof TieredMergePolicy);\n\n    assertNotNull(\"null ms\", iwc.getMergeScheduler());\n    assertTrue(\"ms is not CMS\", iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler);\n    ConcurrentMergeScheduler ms = (ConcurrentMergeScheduler)  iwc.getMergeScheduler();\n    assertEquals(\"ms.maxMergeCount\", 987, ms.getMaxMergeCount());\n    assertEquals(\"ms.maxThreadCount\", 42, ms.getMaxThreadCount());\n    assertEquals(\"ms.isAutoIOThrottle\", false, ms.getAutoIOThrottle());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df724d84dab24a0cc54bec95a8680867adc7f171":["1fc849bc99a046ff6fb7e03c792f2a4ddee419f2","ad8024a22d8bd3a09b7f618f41cdfe117ae6fe96"],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["ad8024a22d8bd3a09b7f618f41cdfe117ae6fe96"],"1fc849bc99a046ff6fb7e03c792f2a4ddee419f2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad8024a22d8bd3a09b7f618f41cdfe117ae6fe96":["1fc849bc99a046ff6fb7e03c792f2a4ddee419f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"]},"commit2Childs":{"df724d84dab24a0cc54bec95a8680867adc7f171":[],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1fc849bc99a046ff6fb7e03c792f2a4ddee419f2":["df724d84dab24a0cc54bec95a8680867adc7f171","ad8024a22d8bd3a09b7f618f41cdfe117ae6fe96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1fc849bc99a046ff6fb7e03c792f2a4ddee419f2"],"ad8024a22d8bd3a09b7f618f41cdfe117ae6fe96":["df724d84dab24a0cc54bec95a8680867adc7f171","ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["df724d84dab24a0cc54bec95a8680867adc7f171","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}