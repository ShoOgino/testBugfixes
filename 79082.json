{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeLeafBlockPackedValues(IndexOutput,int[],int,int,IntFunction[BytesRef]).mjava","commits":[{"id":"3ca40baa99f9578eb8408ee5b9177f7ffe6f65d6","date":1468339076,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeLeafBlockPackedValues(IndexOutput,int[],int,int,IntFunction[BytesRef]).mjava","pathOld":"/dev/null","sourceNew":"  protected void writeLeafBlockPackedValues(IndexOutput out, int[] commonPrefixLengths, int count, int sortedDim, IntFunction<BytesRef> packedValues) throws IOException {\n    int prefixLenSum = Arrays.stream(commonPrefixLengths).sum();\n    if (prefixLenSum == packedBytesLength) {\n      // all values in this block are equal\n      out.writeByte((byte) -1);\n    } else {\n      assert commonPrefixLengths[sortedDim] < bytesPerDim;\n      out.writeByte((byte) sortedDim);\n      int compressedByteOffset = sortedDim * bytesPerDim + commonPrefixLengths[sortedDim];\n      commonPrefixLengths[sortedDim]++;\n      for (int i = 0; i < count; ) {\n        // do run-length compression on the byte at compressedByteOffset \n        int runLen = runLen(packedValues, i, Math.min(i + 0xff, count), compressedByteOffset);\n        assert runLen <= 0xff;\n        BytesRef first = packedValues.apply(i);\n        byte prefixByte = first.bytes[first.offset + compressedByteOffset];\n        out.writeByte(prefixByte);\n        out.writeByte((byte) runLen);\n        writeLeafBlockPackedValuesRange(out, commonPrefixLengths, i, i + runLen, packedValues);\n        i += runLen;\n        assert i <= count;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d561885e9bb6238af1ff8afe8630dcfe49b66ac7","date":1469780634,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeLeafBlockPackedValues(IndexOutput,int[],int,int,IntFunction[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeLeafBlockPackedValues(IndexOutput,int[],int,int,IntFunction[BytesRef]).mjava","sourceNew":"  protected void writeLeafBlockPackedValues(IndexOutput out, int[] commonPrefixLengths, int count, int sortedDim, IntFunction<BytesRef> packedValues) throws IOException {\n    int prefixLenSum = Arrays.stream(commonPrefixLengths).sum();\n    if (prefixLenSum == packedBytesLength) {\n      // all values in this block are equal\n      out.writeByte((byte) -1);\n    } else {\n      assert commonPrefixLengths[sortedDim] < bytesPerDim;\n      out.writeByte((byte) sortedDim);\n      int compressedByteOffset = sortedDim * bytesPerDim + commonPrefixLengths[sortedDim];\n      commonPrefixLengths[sortedDim]++;\n      for (int i = 0; i < count; ) {\n        // do run-length compression on the byte at compressedByteOffset\n        int runLen = runLen(packedValues, i, Math.min(i + 0xff, count), compressedByteOffset);\n        assert runLen <= 0xff;\n        BytesRef first = packedValues.apply(i);\n        byte prefixByte = first.bytes[first.offset + compressedByteOffset];\n        out.writeByte(prefixByte);\n        out.writeByte((byte) runLen);\n        writeLeafBlockPackedValuesRange(out, commonPrefixLengths, i, i + runLen, packedValues);\n        i += runLen;\n        assert i <= count;\n      }\n    }\n  }\n\n","sourceOld":"  protected void writeLeafBlockPackedValues(IndexOutput out, int[] commonPrefixLengths, int count, int sortedDim, IntFunction<BytesRef> packedValues) throws IOException {\n    int prefixLenSum = Arrays.stream(commonPrefixLengths).sum();\n    if (prefixLenSum == packedBytesLength) {\n      // all values in this block are equal\n      out.writeByte((byte) -1);\n    } else {\n      assert commonPrefixLengths[sortedDim] < bytesPerDim;\n      out.writeByte((byte) sortedDim);\n      int compressedByteOffset = sortedDim * bytesPerDim + commonPrefixLengths[sortedDim];\n      commonPrefixLengths[sortedDim]++;\n      for (int i = 0; i < count; ) {\n        // do run-length compression on the byte at compressedByteOffset \n        int runLen = runLen(packedValues, i, Math.min(i + 0xff, count), compressedByteOffset);\n        assert runLen <= 0xff;\n        BytesRef first = packedValues.apply(i);\n        byte prefixByte = first.bytes[first.offset + compressedByteOffset];\n        out.writeByte(prefixByte);\n        out.writeByte((byte) runLen);\n        writeLeafBlockPackedValuesRange(out, commonPrefixLengths, i, i + runLen, packedValues);\n        i += runLen;\n        assert i <= count;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeLeafBlockPackedValues(IndexOutput,int[],int,int,IntFunction[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeLeafBlockPackedValues(IndexOutput,int[],int,int,IntFunction[BytesRef]).mjava","sourceNew":"  protected void writeLeafBlockPackedValues(IndexOutput out, int[] commonPrefixLengths, int count, int sortedDim, IntFunction<BytesRef> packedValues) throws IOException {\n    int prefixLenSum = Arrays.stream(commonPrefixLengths).sum();\n    if (prefixLenSum == packedBytesLength) {\n      // all values in this block are equal\n      out.writeByte((byte) -1);\n    } else {\n      assert commonPrefixLengths[sortedDim] < bytesPerDim;\n      out.writeByte((byte) sortedDim);\n      int compressedByteOffset = sortedDim * bytesPerDim + commonPrefixLengths[sortedDim];\n      commonPrefixLengths[sortedDim]++;\n      for (int i = 0; i < count; ) {\n        // do run-length compression on the byte at compressedByteOffset\n        int runLen = runLen(packedValues, i, Math.min(i + 0xff, count), compressedByteOffset);\n        assert runLen <= 0xff;\n        BytesRef first = packedValues.apply(i);\n        byte prefixByte = first.bytes[first.offset + compressedByteOffset];\n        out.writeByte(prefixByte);\n        out.writeByte((byte) runLen);\n        writeLeafBlockPackedValuesRange(out, commonPrefixLengths, i, i + runLen, packedValues);\n        i += runLen;\n        assert i <= count;\n      }\n    }\n  }\n\n","sourceOld":"  protected void writeLeafBlockPackedValues(IndexOutput out, int[] commonPrefixLengths, int count, int sortedDim, IntFunction<BytesRef> packedValues) throws IOException {\n    int prefixLenSum = Arrays.stream(commonPrefixLengths).sum();\n    if (prefixLenSum == packedBytesLength) {\n      // all values in this block are equal\n      out.writeByte((byte) -1);\n    } else {\n      assert commonPrefixLengths[sortedDim] < bytesPerDim;\n      out.writeByte((byte) sortedDim);\n      int compressedByteOffset = sortedDim * bytesPerDim + commonPrefixLengths[sortedDim];\n      commonPrefixLengths[sortedDim]++;\n      for (int i = 0; i < count; ) {\n        // do run-length compression on the byte at compressedByteOffset \n        int runLen = runLen(packedValues, i, Math.min(i + 0xff, count), compressedByteOffset);\n        assert runLen <= 0xff;\n        BytesRef first = packedValues.apply(i);\n        byte prefixByte = first.bytes[first.offset + compressedByteOffset];\n        out.writeByte(prefixByte);\n        out.writeByte((byte) runLen);\n        writeLeafBlockPackedValuesRange(out, commonPrefixLengths, i, i + runLen, packedValues);\n        i += runLen;\n        assert i <= count;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeLeafBlockPackedValues(IndexOutput,int[],int,int,IntFunction[BytesRef]).mjava","pathOld":"/dev/null","sourceNew":"  protected void writeLeafBlockPackedValues(IndexOutput out, int[] commonPrefixLengths, int count, int sortedDim, IntFunction<BytesRef> packedValues) throws IOException {\n    int prefixLenSum = Arrays.stream(commonPrefixLengths).sum();\n    if (prefixLenSum == packedBytesLength) {\n      // all values in this block are equal\n      out.writeByte((byte) -1);\n    } else {\n      assert commonPrefixLengths[sortedDim] < bytesPerDim;\n      out.writeByte((byte) sortedDim);\n      int compressedByteOffset = sortedDim * bytesPerDim + commonPrefixLengths[sortedDim];\n      commonPrefixLengths[sortedDim]++;\n      for (int i = 0; i < count; ) {\n        // do run-length compression on the byte at compressedByteOffset\n        int runLen = runLen(packedValues, i, Math.min(i + 0xff, count), compressedByteOffset);\n        assert runLen <= 0xff;\n        BytesRef first = packedValues.apply(i);\n        byte prefixByte = first.bytes[first.offset + compressedByteOffset];\n        out.writeByte(prefixByte);\n        out.writeByte((byte) runLen);\n        writeLeafBlockPackedValuesRange(out, commonPrefixLengths, i, i + runLen, packedValues);\n        i += runLen;\n        assert i <= count;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc0d60683b47b5d922124c31f57c8b34734f9e6","date":1480846684,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeLeafBlockPackedValues(IndexOutput,int[],int,int,IntFunction[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeLeafBlockPackedValues(IndexOutput,int[],int,int,IntFunction[BytesRef]).mjava","sourceNew":"  private void writeLeafBlockPackedValues(IndexOutput out, int[] commonPrefixLengths, int count, int sortedDim, IntFunction<BytesRef> packedValues) throws IOException {\n    int prefixLenSum = Arrays.stream(commonPrefixLengths).sum();\n    if (prefixLenSum == packedBytesLength) {\n      // all values in this block are equal\n      out.writeByte((byte) -1);\n    } else {\n      assert commonPrefixLengths[sortedDim] < bytesPerDim;\n      out.writeByte((byte) sortedDim);\n      int compressedByteOffset = sortedDim * bytesPerDim + commonPrefixLengths[sortedDim];\n      commonPrefixLengths[sortedDim]++;\n      for (int i = 0; i < count; ) {\n        // do run-length compression on the byte at compressedByteOffset\n        int runLen = runLen(packedValues, i, Math.min(i + 0xff, count), compressedByteOffset);\n        assert runLen <= 0xff;\n        BytesRef first = packedValues.apply(i);\n        byte prefixByte = first.bytes[first.offset + compressedByteOffset];\n        out.writeByte(prefixByte);\n        out.writeByte((byte) runLen);\n        writeLeafBlockPackedValuesRange(out, commonPrefixLengths, i, i + runLen, packedValues);\n        i += runLen;\n        assert i <= count;\n      }\n    }\n  }\n\n","sourceOld":"  protected void writeLeafBlockPackedValues(IndexOutput out, int[] commonPrefixLengths, int count, int sortedDim, IntFunction<BytesRef> packedValues) throws IOException {\n    int prefixLenSum = Arrays.stream(commonPrefixLengths).sum();\n    if (prefixLenSum == packedBytesLength) {\n      // all values in this block are equal\n      out.writeByte((byte) -1);\n    } else {\n      assert commonPrefixLengths[sortedDim] < bytesPerDim;\n      out.writeByte((byte) sortedDim);\n      int compressedByteOffset = sortedDim * bytesPerDim + commonPrefixLengths[sortedDim];\n      commonPrefixLengths[sortedDim]++;\n      for (int i = 0; i < count; ) {\n        // do run-length compression on the byte at compressedByteOffset\n        int runLen = runLen(packedValues, i, Math.min(i + 0xff, count), compressedByteOffset);\n        assert runLen <= 0xff;\n        BytesRef first = packedValues.apply(i);\n        byte prefixByte = first.bytes[first.offset + compressedByteOffset];\n        out.writeByte(prefixByte);\n        out.writeByte((byte) runLen);\n        writeLeafBlockPackedValuesRange(out, commonPrefixLengths, i, i + runLen, packedValues);\n        i += runLen;\n        assert i <= count;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4ad863d796f4e72a3a1ef4bacd2e19c3e9258c9","date":1481155163,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeLeafBlockPackedValues(DataOutput,int[],int,int,IntFunction[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeLeafBlockPackedValues(IndexOutput,int[],int,int,IntFunction[BytesRef]).mjava","sourceNew":"  private void writeLeafBlockPackedValues(DataOutput out, int[] commonPrefixLengths, int count, int sortedDim, IntFunction<BytesRef> packedValues) throws IOException {\n    int prefixLenSum = Arrays.stream(commonPrefixLengths).sum();\n    if (prefixLenSum == packedBytesLength) {\n      // all values in this block are equal\n      out.writeByte((byte) -1);\n    } else {\n      assert commonPrefixLengths[sortedDim] < bytesPerDim;\n      out.writeByte((byte) sortedDim);\n      int compressedByteOffset = sortedDim * bytesPerDim + commonPrefixLengths[sortedDim];\n      commonPrefixLengths[sortedDim]++;\n      for (int i = 0; i < count; ) {\n        // do run-length compression on the byte at compressedByteOffset\n        int runLen = runLen(packedValues, i, Math.min(i + 0xff, count), compressedByteOffset);\n        assert runLen <= 0xff;\n        BytesRef first = packedValues.apply(i);\n        byte prefixByte = first.bytes[first.offset + compressedByteOffset];\n        out.writeByte(prefixByte);\n        out.writeByte((byte) runLen);\n        writeLeafBlockPackedValuesRange(out, commonPrefixLengths, i, i + runLen, packedValues);\n        i += runLen;\n        assert i <= count;\n      }\n    }\n  }\n\n","sourceOld":"  private void writeLeafBlockPackedValues(IndexOutput out, int[] commonPrefixLengths, int count, int sortedDim, IntFunction<BytesRef> packedValues) throws IOException {\n    int prefixLenSum = Arrays.stream(commonPrefixLengths).sum();\n    if (prefixLenSum == packedBytesLength) {\n      // all values in this block are equal\n      out.writeByte((byte) -1);\n    } else {\n      assert commonPrefixLengths[sortedDim] < bytesPerDim;\n      out.writeByte((byte) sortedDim);\n      int compressedByteOffset = sortedDim * bytesPerDim + commonPrefixLengths[sortedDim];\n      commonPrefixLengths[sortedDim]++;\n      for (int i = 0; i < count; ) {\n        // do run-length compression on the byte at compressedByteOffset\n        int runLen = runLen(packedValues, i, Math.min(i + 0xff, count), compressedByteOffset);\n        assert runLen <= 0xff;\n        BytesRef first = packedValues.apply(i);\n        byte prefixByte = first.bytes[first.offset + compressedByteOffset];\n        out.writeByte(prefixByte);\n        out.writeByte((byte) runLen);\n        writeLeafBlockPackedValuesRange(out, commonPrefixLengths, i, i + runLen, packedValues);\n        i += runLen;\n        assert i <= count;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeLeafBlockPackedValues(DataOutput,int[],int,int,IntFunction[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeLeafBlockPackedValues(IndexOutput,int[],int,int,IntFunction[BytesRef]).mjava","sourceNew":"  private void writeLeafBlockPackedValues(DataOutput out, int[] commonPrefixLengths, int count, int sortedDim, IntFunction<BytesRef> packedValues) throws IOException {\n    int prefixLenSum = Arrays.stream(commonPrefixLengths).sum();\n    if (prefixLenSum == packedBytesLength) {\n      // all values in this block are equal\n      out.writeByte((byte) -1);\n    } else {\n      assert commonPrefixLengths[sortedDim] < bytesPerDim;\n      out.writeByte((byte) sortedDim);\n      int compressedByteOffset = sortedDim * bytesPerDim + commonPrefixLengths[sortedDim];\n      commonPrefixLengths[sortedDim]++;\n      for (int i = 0; i < count; ) {\n        // do run-length compression on the byte at compressedByteOffset\n        int runLen = runLen(packedValues, i, Math.min(i + 0xff, count), compressedByteOffset);\n        assert runLen <= 0xff;\n        BytesRef first = packedValues.apply(i);\n        byte prefixByte = first.bytes[first.offset + compressedByteOffset];\n        out.writeByte(prefixByte);\n        out.writeByte((byte) runLen);\n        writeLeafBlockPackedValuesRange(out, commonPrefixLengths, i, i + runLen, packedValues);\n        i += runLen;\n        assert i <= count;\n      }\n    }\n  }\n\n","sourceOld":"  protected void writeLeafBlockPackedValues(IndexOutput out, int[] commonPrefixLengths, int count, int sortedDim, IntFunction<BytesRef> packedValues) throws IOException {\n    int prefixLenSum = Arrays.stream(commonPrefixLengths).sum();\n    if (prefixLenSum == packedBytesLength) {\n      // all values in this block are equal\n      out.writeByte((byte) -1);\n    } else {\n      assert commonPrefixLengths[sortedDim] < bytesPerDim;\n      out.writeByte((byte) sortedDim);\n      int compressedByteOffset = sortedDim * bytesPerDim + commonPrefixLengths[sortedDim];\n      commonPrefixLengths[sortedDim]++;\n      for (int i = 0; i < count; ) {\n        // do run-length compression on the byte at compressedByteOffset\n        int runLen = runLen(packedValues, i, Math.min(i + 0xff, count), compressedByteOffset);\n        assert runLen <= 0xff;\n        BytesRef first = packedValues.apply(i);\n        byte prefixByte = first.bytes[first.offset + compressedByteOffset];\n        out.writeByte(prefixByte);\n        out.writeByte((byte) runLen);\n        writeLeafBlockPackedValuesRange(out, commonPrefixLengths, i, i + runLen, packedValues);\n        i += runLen;\n        assert i <= count;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["d561885e9bb6238af1ff8afe8630dcfe49b66ac7"],"3ca40baa99f9578eb8408ee5b9177f7ffe6f65d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","c4ad863d796f4e72a3a1ef4bacd2e19c3e9258c9"],"d561885e9bb6238af1ff8afe8630dcfe49b66ac7":["3ca40baa99f9578eb8408ee5b9177f7ffe6f65d6"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d561885e9bb6238af1ff8afe8630dcfe49b66ac7"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["3ca40baa99f9578eb8408ee5b9177f7ffe6f65d6","d561885e9bb6238af1ff8afe8630dcfe49b66ac7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c4ad863d796f4e72a3a1ef4bacd2e19c3e9258c9"],"c4ad863d796f4e72a3a1ef4bacd2e19c3e9258c9":["9fc0d60683b47b5d922124c31f57c8b34734f9e6"]},"commit2Childs":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["c4ad863d796f4e72a3a1ef4bacd2e19c3e9258c9"],"3ca40baa99f9578eb8408ee5b9177f7ffe6f65d6":["d561885e9bb6238af1ff8afe8630dcfe49b66ac7","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3ca40baa99f9578eb8408ee5b9177f7ffe6f65d6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"d561885e9bb6238af1ff8afe8630dcfe49b66ac7":["9fc0d60683b47b5d922124c31f57c8b34734f9e6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9856095f7afb5a607bf5e65077615ed91273508c"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"c4ad863d796f4e72a3a1ef4bacd2e19c3e9258c9":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}