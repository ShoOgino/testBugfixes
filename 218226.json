{"path":"backwards/src/java/org/apache/lucene/index/DocumentsWriter.WaitQueue#add(DocWriter).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/index/DocumentsWriter.WaitQueue#add(DocWriter).mjava","pathOld":"/dev/null","sourceNew":"    synchronized public boolean add(DocWriter doc) throws IOException {\n\n      assert doc.docID >= nextWriteDocID;\n\n      if (doc.docID == nextWriteDocID) {\n        writeDocument(doc);\n        while(true) {\n          doc = waiting[nextWriteLoc];\n          if (doc != null) {\n            numWaiting--;\n            waiting[nextWriteLoc] = null;\n            waitingBytes -= doc.sizeInBytes();\n            writeDocument(doc);\n          } else\n            break;\n        }\n      } else {\n\n        // I finished before documents that were added\n        // before me.  This can easily happen when I am a\n        // small doc and the docs before me were large, or,\n        // just due to luck in the thread scheduling.  Just\n        // add myself to the queue and when that large doc\n        // finishes, it will flush me:\n        int gap = doc.docID - nextWriteDocID;\n        if (gap >= waiting.length) {\n          // Grow queue\n          DocWriter[] newArray = new DocWriter[ArrayUtil.getNextSize(gap)];\n          assert nextWriteLoc >= 0;\n          System.arraycopy(waiting, nextWriteLoc, newArray, 0, waiting.length-nextWriteLoc);\n          System.arraycopy(waiting, 0, newArray, waiting.length-nextWriteLoc, nextWriteLoc);\n          nextWriteLoc = 0;\n          waiting = newArray;\n          gap = doc.docID - nextWriteDocID;\n        }\n\n        int loc = nextWriteLoc + gap;\n        if (loc >= waiting.length)\n          loc -= waiting.length;\n\n        // We should only wrap one time\n        assert loc < waiting.length;\n\n        // Nobody should be in my spot!\n        assert waiting[loc] == null;\n        waiting[loc] = doc;\n        numWaiting++;\n        waitingBytes += doc.sizeInBytes();\n      }\n      \n      return doPause();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/DocumentsWriter.WaitQueue#add(DocWriter).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/DocumentsWriter.WaitQueue#add(DocWriter).mjava","sourceNew":"    synchronized public boolean add(DocWriter doc) throws IOException {\n\n      assert doc.docID >= nextWriteDocID;\n\n      if (doc.docID == nextWriteDocID) {\n        writeDocument(doc);\n        while(true) {\n          doc = waiting[nextWriteLoc];\n          if (doc != null) {\n            numWaiting--;\n            waiting[nextWriteLoc] = null;\n            waitingBytes -= doc.sizeInBytes();\n            writeDocument(doc);\n          } else\n            break;\n        }\n      } else {\n\n        // I finished before documents that were added\n        // before me.  This can easily happen when I am a\n        // small doc and the docs before me were large, or,\n        // just due to luck in the thread scheduling.  Just\n        // add myself to the queue and when that large doc\n        // finishes, it will flush me:\n        int gap = doc.docID - nextWriteDocID;\n        if (gap >= waiting.length) {\n          // Grow queue\n          DocWriter[] newArray = new DocWriter[ArrayUtil.getNextSize(gap)];\n          assert nextWriteLoc >= 0;\n          System.arraycopy(waiting, nextWriteLoc, newArray, 0, waiting.length-nextWriteLoc);\n          System.arraycopy(waiting, 0, newArray, waiting.length-nextWriteLoc, nextWriteLoc);\n          nextWriteLoc = 0;\n          waiting = newArray;\n          gap = doc.docID - nextWriteDocID;\n        }\n\n        int loc = nextWriteLoc + gap;\n        if (loc >= waiting.length)\n          loc -= waiting.length;\n\n        // We should only wrap one time\n        assert loc < waiting.length;\n\n        // Nobody should be in my spot!\n        assert waiting[loc] == null;\n        waiting[loc] = doc;\n        numWaiting++;\n        waitingBytes += doc.sizeInBytes();\n      }\n      \n      return doPause();\n    }\n\n","sourceOld":"    synchronized public boolean add(DocWriter doc) throws IOException {\n\n      assert doc.docID >= nextWriteDocID;\n\n      if (doc.docID == nextWriteDocID) {\n        writeDocument(doc);\n        while(true) {\n          doc = waiting[nextWriteLoc];\n          if (doc != null) {\n            numWaiting--;\n            waiting[nextWriteLoc] = null;\n            waitingBytes -= doc.sizeInBytes();\n            writeDocument(doc);\n          } else\n            break;\n        }\n      } else {\n\n        // I finished before documents that were added\n        // before me.  This can easily happen when I am a\n        // small doc and the docs before me were large, or,\n        // just due to luck in the thread scheduling.  Just\n        // add myself to the queue and when that large doc\n        // finishes, it will flush me:\n        int gap = doc.docID - nextWriteDocID;\n        if (gap >= waiting.length) {\n          // Grow queue\n          DocWriter[] newArray = new DocWriter[ArrayUtil.getNextSize(gap)];\n          assert nextWriteLoc >= 0;\n          System.arraycopy(waiting, nextWriteLoc, newArray, 0, waiting.length-nextWriteLoc);\n          System.arraycopy(waiting, 0, newArray, waiting.length-nextWriteLoc, nextWriteLoc);\n          nextWriteLoc = 0;\n          waiting = newArray;\n          gap = doc.docID - nextWriteDocID;\n        }\n\n        int loc = nextWriteLoc + gap;\n        if (loc >= waiting.length)\n          loc -= waiting.length;\n\n        // We should only wrap one time\n        assert loc < waiting.length;\n\n        // Nobody should be in my spot!\n        assert waiting[loc] == null;\n        waiting[loc] = doc;\n        numWaiting++;\n        waitingBytes += doc.sizeInBytes();\n      }\n      \n      return doPause();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}