{"path":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#deleteDocID(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#deleteDocID(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#deleteDocID(int).mjava","sourceNew":"  // Buffer a specific docID for deletion.  Currently only\n  // used when we hit a exception when adding a document\n  void deleteDocID(int docIDUpto) {\n    pendingDeletes.addDocID(docIDUpto);\n    // NOTE: we do not trigger flush here.  This is\n    // potentially a RAM leak, if you have an app that tries\n    // to add docs but every single doc always hits a\n    // non-aborting exception.  Allowing a flush here gets\n    // very messy because we are only invoked when handling\n    // exceptions so to do this properly, while handling an\n    // exception we'd have to go off and flush new deletes\n    // which is risky (likely would hit some other\n    // confounding exception).\n  }\n\n","sourceOld":"  // Buffer a specific docID for deletion.  Currently only\n  // used when we hit a exception when adding a document\n  void deleteDocID(int docIDUpto) {\n    pendingDeletes.addDocID(docIDUpto);\n    // NOTE: we do not trigger flush here.  This is\n    // potentially a RAM leak, if you have an app that tries\n    // to add docs but every single doc always hits a\n    // non-aborting exception.  Allowing a flush here gets\n    // very messy because we are only invoked when handling\n    // exceptions so to do this properly, while handling an\n    // exception we'd have to go off and flush new deletes\n    // which is risky (likely would hit some other\n    // confounding exception).\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"758b67c292d546f06d958a30c05b76e3987a11de","date":1375382531,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#deleteDocID(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#deleteDocID(int).mjava","sourceNew":"  // Buffer a specific docID for deletion. Currently only\n  // used when we hit an exception when adding a document\n  void deleteDocID(int docIDUpto) {\n    pendingDeletes.addDocID(docIDUpto);\n    // NOTE: we do not trigger flush here.  This is\n    // potentially a RAM leak, if you have an app that tries\n    // to add docs but every single doc always hits a\n    // non-aborting exception.  Allowing a flush here gets\n    // very messy because we are only invoked when handling\n    // exceptions so to do this properly, while handling an\n    // exception we'd have to go off and flush new deletes\n    // which is risky (likely would hit some other\n    // confounding exception).\n  }\n\n","sourceOld":"  // Buffer a specific docID for deletion.  Currently only\n  // used when we hit a exception when adding a document\n  void deleteDocID(int docIDUpto) {\n    pendingDeletes.addDocID(docIDUpto);\n    // NOTE: we do not trigger flush here.  This is\n    // potentially a RAM leak, if you have an app that tries\n    // to add docs but every single doc always hits a\n    // non-aborting exception.  Allowing a flush here gets\n    // very messy because we are only invoked when handling\n    // exceptions so to do this properly, while handling an\n    // exception we'd have to go off and flush new deletes\n    // which is risky (likely would hit some other\n    // confounding exception).\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#deleteDocID(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#deleteDocID(int).mjava","sourceNew":"  // Buffer a specific docID for deletion. Currently only\n  // used when we hit an exception when adding a document\n  void deleteDocID(int docIDUpto) {\n    pendingDeletes.addDocID(docIDUpto);\n    // NOTE: we do not trigger flush here.  This is\n    // potentially a RAM leak, if you have an app that tries\n    // to add docs but every single doc always hits a\n    // non-aborting exception.  Allowing a flush here gets\n    // very messy because we are only invoked when handling\n    // exceptions so to do this properly, while handling an\n    // exception we'd have to go off and flush new deletes\n    // which is risky (likely would hit some other\n    // confounding exception).\n  }\n\n","sourceOld":"  // Buffer a specific docID for deletion.  Currently only\n  // used when we hit a exception when adding a document\n  void deleteDocID(int docIDUpto) {\n    pendingDeletes.addDocID(docIDUpto);\n    // NOTE: we do not trigger flush here.  This is\n    // potentially a RAM leak, if you have an app that tries\n    // to add docs but every single doc always hits a\n    // non-aborting exception.  Allowing a flush here gets\n    // very messy because we are only invoked when handling\n    // exceptions so to do this properly, while handling an\n    // exception we'd have to go off and flush new deletes\n    // which is risky (likely would hit some other\n    // confounding exception).\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#deleteDocID(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#deleteDocID(int).mjava","sourceNew":"  // Buffer a specific docID for deletion. Currently only\n  // used when we hit an exception when adding a document\n  void deleteDocID(int docIDUpto) {\n    pendingUpdates.addDocID(docIDUpto);\n    // NOTE: we do not trigger flush here.  This is\n    // potentially a RAM leak, if you have an app that tries\n    // to add docs but every single doc always hits a\n    // non-aborting exception.  Allowing a flush here gets\n    // very messy because we are only invoked when handling\n    // exceptions so to do this properly, while handling an\n    // exception we'd have to go off and flush new deletes\n    // which is risky (likely would hit some other\n    // confounding exception).\n  }\n\n","sourceOld":"  // Buffer a specific docID for deletion. Currently only\n  // used when we hit an exception when adding a document\n  void deleteDocID(int docIDUpto) {\n    pendingDeletes.addDocID(docIDUpto);\n    // NOTE: we do not trigger flush here.  This is\n    // potentially a RAM leak, if you have an app that tries\n    // to add docs but every single doc always hits a\n    // non-aborting exception.  Allowing a flush here gets\n    // very messy because we are only invoked when handling\n    // exceptions so to do this properly, while handling an\n    // exception we'd have to go off and flush new deletes\n    // which is risky (likely would hit some other\n    // confounding exception).\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc1841e9449be30dd7bcb15d6247b4eb5c83a07b","date":1584454718,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#deleteLastDocs(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#deleteDocID(int).mjava","sourceNew":"  // This method marks the last N docs as deleted. This is used\n  // in the case of a non-aborting exception. There are several cases\n  // where we fail a document ie. due to an exception during analysis\n  // that causes the doc to be rejected but won't cause the DWPT to be\n  // stale nor the entire IW to abort and shutdown. In such a case\n  // we only mark these docs as deleted and turn it into a livedocs\n  // during flush\n  private void deleteLastDocs(int docCount) {\n    for (int docId = numDocsInRAM - docCount; docId < numDocsInRAM; docId++) {\n      pendingUpdates.addDocID(docId);\n    }\n    // NOTE: we do not trigger flush here.  This is\n    // potentially a RAM leak, if you have an app that tries\n    // to add docs but every single doc always hits a\n    // non-aborting exception.  Allowing a flush here gets\n    // very messy because we are only invoked when handling\n    // exceptions so to do this properly, while handling an\n    // exception we'd have to go off and flush new deletes\n    // which is risky (likely would hit some other\n    // confounding exception).\n  }\n\n","sourceOld":"  // Buffer a specific docID for deletion. Currently only\n  // used when we hit an exception when adding a document\n  void deleteDocID(int docIDUpto) {\n    pendingUpdates.addDocID(docIDUpto);\n    // NOTE: we do not trigger flush here.  This is\n    // potentially a RAM leak, if you have an app that tries\n    // to add docs but every single doc always hits a\n    // non-aborting exception.  Allowing a flush here gets\n    // very messy because we are only invoked when handling\n    // exceptions so to do this properly, while handling an\n    // exception we'd have to go off and flush new deletes\n    // which is risky (likely would hit some other\n    // confounding exception).\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"758b67c292d546f06d958a30c05b76e3987a11de":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["758b67c292d546f06d958a30c05b76e3987a11de"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"bc1841e9449be30dd7bcb15d6247b4eb5c83a07b":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bc1841e9449be30dd7bcb15d6247b4eb5c83a07b"]},"commit2Childs":{"758b67c292d546f06d958a30c05b76e3987a11de":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["bc1841e9449be30dd7bcb15d6247b4eb5c83a07b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["758b67c292d546f06d958a30c05b76e3987a11de","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"bc1841e9449be30dd7bcb15d6247b4eb5c83a07b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}