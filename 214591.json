{"path":"solr/core/src/test/org/apache/solr/cloud/policy/TestPolicyCloud#testDataProvider().mjava","commits":[{"id":"e12a337a9a98e388c3a5bca9c8256d21c13781f9","date":1492093671,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/policy/TestPolicyCloud#testDataProvider().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testDataProvider().mjava","sourceNew":"  public void testDataProvider() throws IOException, SolrServerException {\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(cluster.getSolrClient());\n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n    ClientDataProvider provider = new ClientDataProvider(cluster.getSolrClient());\n\n    Map<String, Object> val = provider.getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\"freedisk\", \"cores\"));\n    assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n    assertTrue(\"freedisk value is \"+((Number) val.get(\"freedisk\")).intValue() , ((Number) val.get(\"freedisk\")).intValue() > 0);\n    System.out.println(Utils.toJSONString(val));\n  }\n\n","sourceOld":"  public void testDataProvider() throws IOException, SolrServerException {\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(cluster.getSolrClient());\n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n    ClientDataProvider provider = new ClientDataProvider(cluster.getSolrClient());\n\n    Map<String, Object> val = provider.getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\"freedisk\", \"cores\"));\n    assertTrue(((Number)val.get(\"cores\")).intValue() > 0 );\n    assertTrue(((Number)val.get(\"freedisk\")).intValue() > 0 );\n    System.out.println(Utils.toJSONString(val));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b57c992d9db5a9cc83568032fb0d2483426d7da","date":1492497042,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/policy/TestPolicyCloud#testDataProvider().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/policy/TestPolicyCloud#testDataProvider().mjava","sourceNew":"  public void testDataProvider() throws IOException, SolrServerException {\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(cluster.getSolrClient());\n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n    ClientDataProvider provider = new ClientDataProvider(cluster.getSolrClient());\n\n    Map<String, Object> val = provider.getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\"freedisk\", \"cores\"));\n    assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n    assertTrue(\"freedisk value is \"+((Number) val.get(\"freedisk\")).longValue() , ((Number) val.get(\"freedisk\")).longValue() > 0);\n    System.out.println(Utils.toJSONString(val));\n  }\n\n","sourceOld":"  public void testDataProvider() throws IOException, SolrServerException {\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(cluster.getSolrClient());\n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n    ClientDataProvider provider = new ClientDataProvider(cluster.getSolrClient());\n\n    Map<String, Object> val = provider.getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\"freedisk\", \"cores\"));\n    assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n    assertTrue(\"freedisk value is \"+((Number) val.get(\"freedisk\")).intValue() , ((Number) val.get(\"freedisk\")).intValue() > 0);\n    System.out.println(Utils.toJSONString(val));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"653c1ca305e0065ee988a09e59c8316b8cde02fd","date":1492506780,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testDataProvider().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/policy/TestPolicyCloud#testDataProvider().mjava","sourceNew":"  public void testDataProvider() throws IOException, SolrServerException {\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(cluster.getSolrClient());\n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n    ClientDataProvider provider = new ClientDataProvider(cluster.getSolrClient());\n\n    Map<String, Object> val = provider.getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\"freedisk\", \"cores\"));\n    assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n    assertTrue(\"freedisk value is \"+((Number) val.get(\"freedisk\")).longValue() , ((Number) val.get(\"freedisk\")).longValue() > 0);\n    System.out.println(Utils.toJSONString(val));\n  }\n\n","sourceOld":"  public void testDataProvider() throws IOException, SolrServerException {\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(cluster.getSolrClient());\n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n    ClientDataProvider provider = new ClientDataProvider(cluster.getSolrClient());\n\n    Map<String, Object> val = provider.getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\"freedisk\", \"cores\"));\n    assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n    assertTrue(\"freedisk value is \"+((Number) val.get(\"freedisk\")).longValue() , ((Number) val.get(\"freedisk\")).longValue() > 0);\n    System.out.println(Utils.toJSONString(val));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9b57c992d9db5a9cc83568032fb0d2483426d7da":["e12a337a9a98e388c3a5bca9c8256d21c13781f9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"653c1ca305e0065ee988a09e59c8316b8cde02fd":["9b57c992d9db5a9cc83568032fb0d2483426d7da"],"e12a337a9a98e388c3a5bca9c8256d21c13781f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9b57c992d9db5a9cc83568032fb0d2483426d7da":["653c1ca305e0065ee988a09e59c8316b8cde02fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e12a337a9a98e388c3a5bca9c8256d21c13781f9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e12a337a9a98e388c3a5bca9c8256d21c13781f9":["9b57c992d9db5a9cc83568032fb0d2483426d7da"],"653c1ca305e0065ee988a09e59c8316b8cde02fd":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["653c1ca305e0065ee988a09e59c8316b8cde02fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}