{"path":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testVersions().mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testVersions().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testVersions() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    long version = addAndGetVersion(sdoc(\"id\",\"1\") , null);\n\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==0\"\n    );\n\n    // test version is there from rtg\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // test version is there from the index\n    assertU(commit());\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // simulate an update from the leader\n    version += 10;\n    updateJ(jsonAdd(sdoc(\"id\",\"1\", \"_version_\",Long.toString(version))), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n    // test version is there from rtg\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // simulate reordering: test that a version less than that does not take affect\n    updateJ(jsonAdd(sdoc(\"id\",\"1\", \"_version_\",Long.toString(version - 1))), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n    // test that version hasn't changed\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // simulate reordering: test that a delete w/ version less than that does not take affect\n    // TODO: also allow passing version on delete instead of on URL?\n    updateJ(jsonDelId(\"1\"), params(SEEN_LEADER,SEEN_LEADER_VAL, \"_version_\",Long.toString(version - 1)));\n\n    // test that version hasn't changed\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // make sure reordering detection also works after a commit\n    assertU(commit());\n\n    // simulate reordering: test that a version less than that does not take affect\n    updateJ(jsonAdd(sdoc(\"id\",\"1\", \"_version_\",Long.toString(version - 1))), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n    // test that version hasn't changed\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // simulate reordering: test that a delete w/ version less than that does not take affect\n    updateJ(jsonDelId(\"1\"), params(SEEN_LEADER,SEEN_LEADER_VAL, \"_version_\",Long.toString(version - 1)));\n\n    // test that version hasn't changed\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // now simulate a normal delete from the leader\n    version += 5;\n    updateJ(jsonDelId(\"1\"), params(SEEN_LEADER,SEEN_LEADER_VAL, \"_version_\",Long.toString(version)));\n\n    // make sure a reordered add doesn't take affect.\n    updateJ(jsonAdd(sdoc(\"id\",\"1\", \"_version_\",Long.toString(version - 1))), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n    // test that it's still deleted\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':null}\"\n    );\n\n    // test that we can remember the version of a delete after a commit\n    assertU(commit());\n\n    // make sure a reordered add doesn't take affect.\n    updateJ(jsonAdd(sdoc(\"id\",\"1\", \"_version_\",Long.toString(version - 1))), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n    // test that it's still deleted\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':null}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"2\"), null);\n    long version2 = deleteByQueryAndGetVersion(\"id:2\", null);\n    assertTrue(Math.abs(version2) > version );\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testVersions().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testVersions() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    long version = addAndGetVersion(sdoc(\"id\",\"1\") , null);\n\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==0\"\n    );\n\n    // test version is there from rtg\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // test version is there from the index\n    assertU(commit());\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // simulate an update from the leader\n    version += 10;\n    updateJ(jsonAdd(sdoc(\"id\",\"1\", \"_version_\",Long.toString(version))), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n    // test version is there from rtg\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // simulate reordering: test that a version less than that does not take affect\n    updateJ(jsonAdd(sdoc(\"id\",\"1\", \"_version_\",Long.toString(version - 1))), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n    // test that version hasn't changed\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // simulate reordering: test that a delete w/ version less than that does not take affect\n    // TODO: also allow passing version on delete instead of on URL?\n    updateJ(jsonDelId(\"1\"), params(SEEN_LEADER,SEEN_LEADER_VAL, \"_version_\",Long.toString(version - 1)));\n\n    // test that version hasn't changed\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // make sure reordering detection also works after a commit\n    assertU(commit());\n\n    // simulate reordering: test that a version less than that does not take affect\n    updateJ(jsonAdd(sdoc(\"id\",\"1\", \"_version_\",Long.toString(version - 1))), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n    // test that version hasn't changed\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // simulate reordering: test that a delete w/ version less than that does not take affect\n    updateJ(jsonDelId(\"1\"), params(SEEN_LEADER,SEEN_LEADER_VAL, \"_version_\",Long.toString(version - 1)));\n\n    // test that version hasn't changed\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // now simulate a normal delete from the leader\n    version += 5;\n    updateJ(jsonDelId(\"1\"), params(SEEN_LEADER,SEEN_LEADER_VAL, \"_version_\",Long.toString(version)));\n\n    // make sure a reordered add doesn't take affect.\n    updateJ(jsonAdd(sdoc(\"id\",\"1\", \"_version_\",Long.toString(version - 1))), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n    // test that it's still deleted\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':null}\"\n    );\n\n    // test that we can remember the version of a delete after a commit\n    assertU(commit());\n\n    // make sure a reordered add doesn't take affect.\n    updateJ(jsonAdd(sdoc(\"id\",\"1\", \"_version_\",Long.toString(version - 1))), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n    // test that it's still deleted\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':null}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"2\"), null);\n    long version2 = deleteByQueryAndGetVersion(\"id:2\", null);\n    assertTrue(Math.abs(version2) > version );\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testVersions().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testVersions() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    long version = addAndGetVersion(sdoc(\"id\",\"1\") , null);\n\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==0\"\n    );\n\n    // test version is there from rtg\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // test version is there from the index\n    assertU(commit());\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // simulate an update from the leader\n    version += 10;\n    updateJ(jsonAdd(sdoc(\"id\",\"1\", \"_version_\",Long.toString(version))), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n    // test version is there from rtg\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // simulate reordering: test that a version less than that does not take affect\n    updateJ(jsonAdd(sdoc(\"id\",\"1\", \"_version_\",Long.toString(version - 1))), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n    // test that version hasn't changed\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // simulate reordering: test that a delete w/ version less than that does not take affect\n    // TODO: also allow passing version on delete instead of on URL?\n    updateJ(jsonDelId(\"1\"), params(SEEN_LEADER,SEEN_LEADER_VAL, \"_version_\",Long.toString(version - 1)));\n\n    // test that version hasn't changed\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // make sure reordering detection also works after a commit\n    assertU(commit());\n\n    // simulate reordering: test that a version less than that does not take affect\n    updateJ(jsonAdd(sdoc(\"id\",\"1\", \"_version_\",Long.toString(version - 1))), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n    // test that version hasn't changed\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // simulate reordering: test that a delete w/ version less than that does not take affect\n    updateJ(jsonDelId(\"1\"), params(SEEN_LEADER,SEEN_LEADER_VAL, \"_version_\",Long.toString(version - 1)));\n\n    // test that version hasn't changed\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // now simulate a normal delete from the leader\n    version += 5;\n    updateJ(jsonDelId(\"1\"), params(SEEN_LEADER,SEEN_LEADER_VAL, \"_version_\",Long.toString(version)));\n\n    // make sure a reordered add doesn't take affect.\n    updateJ(jsonAdd(sdoc(\"id\",\"1\", \"_version_\",Long.toString(version - 1))), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n    // test that it's still deleted\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':null}\"\n    );\n\n    // test that we can remember the version of a delete after a commit\n    assertU(commit());\n\n    // make sure a reordered add doesn't take affect.\n    updateJ(jsonAdd(sdoc(\"id\",\"1\", \"_version_\",Long.toString(version - 1))), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n    // test that it's still deleted\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':null}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"2\"), null);\n    long version2 = deleteByQueryAndGetVersion(\"id:2\", null);\n    assertTrue(Math.abs(version2) > version );\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2fe35ac47f8f51356d6c1724455d18f31c94fae","date":1337966698,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testVersions().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testVersions().mjava","sourceNew":"  @Test\n  public void testVersions() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    long version = addAndGetVersion(sdoc(\"id\",\"1\") , null);\n\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==0\"\n    );\n\n    // test version is there from rtg\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // test version is there from the index\n    assertU(commit());\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // simulate an update from the leader\n    version += 10;\n    updateJ(jsonAdd(sdoc(\"id\",\"1\", \"_version_\",Long.toString(version))), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n    // test version is there from rtg\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // simulate reordering: test that a version less than that does not take affect\n    updateJ(jsonAdd(sdoc(\"id\",\"1\", \"_version_\",Long.toString(version - 1))), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n    // test that version hasn't changed\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // simulate reordering: test that a delete w/ version less than that does not take affect\n    // TODO: also allow passing version on delete instead of on URL?\n    updateJ(jsonDelId(\"1\"), params(DISTRIB_UPDATE_PARAM,FROM_LEADER, \"_version_\",Long.toString(version - 1)));\n\n    // test that version hasn't changed\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // make sure reordering detection also works after a commit\n    assertU(commit());\n\n    // simulate reordering: test that a version less than that does not take affect\n    updateJ(jsonAdd(sdoc(\"id\",\"1\", \"_version_\",Long.toString(version - 1))), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n    // test that version hasn't changed\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // simulate reordering: test that a delete w/ version less than that does not take affect\n    updateJ(jsonDelId(\"1\"), params(DISTRIB_UPDATE_PARAM,FROM_LEADER, \"_version_\",Long.toString(version - 1)));\n\n    // test that version hasn't changed\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // now simulate a normal delete from the leader\n    version += 5;\n    updateJ(jsonDelId(\"1\"), params(DISTRIB_UPDATE_PARAM,FROM_LEADER, \"_version_\",Long.toString(version)));\n\n    // make sure a reordered add doesn't take affect.\n    updateJ(jsonAdd(sdoc(\"id\",\"1\", \"_version_\",Long.toString(version - 1))), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n    // test that it's still deleted\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':null}\"\n    );\n\n    // test that we can remember the version of a delete after a commit\n    assertU(commit());\n\n    // make sure a reordered add doesn't take affect.\n    updateJ(jsonAdd(sdoc(\"id\",\"1\", \"_version_\",Long.toString(version - 1))), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n    // test that it's still deleted\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':null}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"2\"), null);\n    long version2 = deleteByQueryAndGetVersion(\"id:2\", null);\n    assertTrue(Math.abs(version2) > version );\n    \n  }\n\n","sourceOld":"  @Test\n  public void testVersions() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    long version = addAndGetVersion(sdoc(\"id\",\"1\") , null);\n\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==0\"\n    );\n\n    // test version is there from rtg\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // test version is there from the index\n    assertU(commit());\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // simulate an update from the leader\n    version += 10;\n    updateJ(jsonAdd(sdoc(\"id\",\"1\", \"_version_\",Long.toString(version))), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n    // test version is there from rtg\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // simulate reordering: test that a version less than that does not take affect\n    updateJ(jsonAdd(sdoc(\"id\",\"1\", \"_version_\",Long.toString(version - 1))), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n    // test that version hasn't changed\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // simulate reordering: test that a delete w/ version less than that does not take affect\n    // TODO: also allow passing version on delete instead of on URL?\n    updateJ(jsonDelId(\"1\"), params(SEEN_LEADER,SEEN_LEADER_VAL, \"_version_\",Long.toString(version - 1)));\n\n    // test that version hasn't changed\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // make sure reordering detection also works after a commit\n    assertU(commit());\n\n    // simulate reordering: test that a version less than that does not take affect\n    updateJ(jsonAdd(sdoc(\"id\",\"1\", \"_version_\",Long.toString(version - 1))), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n    // test that version hasn't changed\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // simulate reordering: test that a delete w/ version less than that does not take affect\n    updateJ(jsonDelId(\"1\"), params(SEEN_LEADER,SEEN_LEADER_VAL, \"_version_\",Long.toString(version - 1)));\n\n    // test that version hasn't changed\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // now simulate a normal delete from the leader\n    version += 5;\n    updateJ(jsonDelId(\"1\"), params(SEEN_LEADER,SEEN_LEADER_VAL, \"_version_\",Long.toString(version)));\n\n    // make sure a reordered add doesn't take affect.\n    updateJ(jsonAdd(sdoc(\"id\",\"1\", \"_version_\",Long.toString(version - 1))), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n    // test that it's still deleted\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':null}\"\n    );\n\n    // test that we can remember the version of a delete after a commit\n    assertU(commit());\n\n    // make sure a reordered add doesn't take affect.\n    updateJ(jsonAdd(sdoc(\"id\",\"1\", \"_version_\",Long.toString(version - 1))), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n    // test that it's still deleted\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':null}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"2\"), null);\n    long version2 = deleteByQueryAndGetVersion(\"id:2\", null);\n    assertTrue(Math.abs(version2) > version );\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb999ed3fc6e419b9104de9ebfe62ace27f31d5f","date":1341327930,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testVersions().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testVersions().mjava","sourceNew":"  @Test\n  public void testVersions() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    long version = addAndGetVersion(sdoc(\"id\",\"1\") , null);\n\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==0\"\n    );\n\n    // test version is there from rtg\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // test version is there from the index\n    assertU(commit());\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // simulate an update from the leader\n    version += 10;\n    updateJ(jsonAdd(sdoc(\"id\",\"1\", \"_version_\",Long.toString(version))), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n    // test version is there from rtg\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // simulate reordering: test that a version less than that does not take affect\n    updateJ(jsonAdd(sdoc(\"id\",\"1\", \"_version_\",Long.toString(version - 1))), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n    // test that version hasn't changed\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // simulate reordering: test that a delete w/ version less than that does not take affect\n    // TODO: also allow passing version on delete instead of on URL?\n    updateJ(jsonDelId(\"1\"), params(DISTRIB_UPDATE_PARAM,FROM_LEADER, \"_version_\",Long.toString(version - 1)));\n\n    // test that version hasn't changed\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // make sure reordering detection also works after a commit\n    assertU(commit());\n\n    // simulate reordering: test that a version less than that does not take affect\n    updateJ(jsonAdd(sdoc(\"id\",\"1\", \"_version_\",Long.toString(version - 1))), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n    // test that version hasn't changed\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // simulate reordering: test that a delete w/ version less than that does not take affect\n    updateJ(jsonDelId(\"1\"), params(DISTRIB_UPDATE_PARAM,FROM_LEADER, \"_version_\",Long.toString(version - 1)));\n\n    // test that version hasn't changed\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // now simulate a normal delete from the leader\n    version += 5;\n    updateJ(jsonDelId(\"1\"), params(DISTRIB_UPDATE_PARAM,FROM_LEADER, \"_version_\",Long.toString(version)));\n\n    // make sure a reordered add doesn't take affect.\n    updateJ(jsonAdd(sdoc(\"id\",\"1\", \"_version_\",Long.toString(version - 1))), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n    // test that it's still deleted\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':null}\"\n    );\n\n    // test that we can remember the version of a delete after a commit\n    assertU(commit());\n\n    // make sure a reordered add doesn't take affect.\n    long version2 = deleteByQueryAndGetVersion(\"id:2\", null);\n\n    // test that it's still deleted\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':null}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"2\"), null);\n    version2 = deleteByQueryAndGetVersion(\"id:2\", null);\n    assertTrue(Math.abs(version2) > version );\n\n    // test that it's deleted\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"2\")\n        ,\"=={'doc':null}\");\n\n\n    version2 = Math.abs(version2) + 1000;\n    updateJ(jsonAdd(sdoc(\"id\",\"3\", \"_version_\",Long.toString(version2+100))), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n    updateJ(jsonAdd(sdoc(\"id\",\"4\", \"_version_\",Long.toString(version2+200))), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n    // this should only affect id:3 so far\n    deleteByQueryAndGetVersion(\"id:(3 4 5 6)\", params(DISTRIB_UPDATE_PARAM,FROM_LEADER, \"_version_\",Long.toString(-(version2+150))) );\n\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"3\"),\"=={'doc':null}\");\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"4\", \"fl\",\"id\"),\"=={'doc':{'id':'4'}}\");\n\n    updateJ(jsonAdd(sdoc(\"id\",\"5\", \"_version_\",Long.toString(version2+201))), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n    updateJ(jsonAdd(sdoc(\"id\",\"6\", \"_version_\",Long.toString(version2+101))), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n   // the DBQ should also have caused id:6 to be removed\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"5\", \"fl\",\"id\"),\"=={'doc':{'id':'5'}}\");\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"6\"),\"=={'doc':null}\");\n\n    assertU(commit());\n\n  }\n\n","sourceOld":"  @Test\n  public void testVersions() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    long version = addAndGetVersion(sdoc(\"id\",\"1\") , null);\n\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==0\"\n    );\n\n    // test version is there from rtg\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // test version is there from the index\n    assertU(commit());\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // simulate an update from the leader\n    version += 10;\n    updateJ(jsonAdd(sdoc(\"id\",\"1\", \"_version_\",Long.toString(version))), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n    // test version is there from rtg\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // simulate reordering: test that a version less than that does not take affect\n    updateJ(jsonAdd(sdoc(\"id\",\"1\", \"_version_\",Long.toString(version - 1))), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n    // test that version hasn't changed\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // simulate reordering: test that a delete w/ version less than that does not take affect\n    // TODO: also allow passing version on delete instead of on URL?\n    updateJ(jsonDelId(\"1\"), params(DISTRIB_UPDATE_PARAM,FROM_LEADER, \"_version_\",Long.toString(version - 1)));\n\n    // test that version hasn't changed\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // make sure reordering detection also works after a commit\n    assertU(commit());\n\n    // simulate reordering: test that a version less than that does not take affect\n    updateJ(jsonAdd(sdoc(\"id\",\"1\", \"_version_\",Long.toString(version - 1))), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n    // test that version hasn't changed\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // simulate reordering: test that a delete w/ version less than that does not take affect\n    updateJ(jsonDelId(\"1\"), params(DISTRIB_UPDATE_PARAM,FROM_LEADER, \"_version_\",Long.toString(version - 1)));\n\n    // test that version hasn't changed\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // now simulate a normal delete from the leader\n    version += 5;\n    updateJ(jsonDelId(\"1\"), params(DISTRIB_UPDATE_PARAM,FROM_LEADER, \"_version_\",Long.toString(version)));\n\n    // make sure a reordered add doesn't take affect.\n    updateJ(jsonAdd(sdoc(\"id\",\"1\", \"_version_\",Long.toString(version - 1))), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n    // test that it's still deleted\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':null}\"\n    );\n\n    // test that we can remember the version of a delete after a commit\n    assertU(commit());\n\n    // make sure a reordered add doesn't take affect.\n    updateJ(jsonAdd(sdoc(\"id\",\"1\", \"_version_\",Long.toString(version - 1))), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n    // test that it's still deleted\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':null}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"2\"), null);\n    long version2 = deleteByQueryAndGetVersion(\"id:2\", null);\n    assertTrue(Math.abs(version2) > version );\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testVersions().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testVersions().mjava","sourceNew":"  @Test\n  public void testVersions() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    long version = addAndGetVersion(sdoc(\"id\",\"1\") , null);\n\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==0\"\n    );\n\n    // test version is there from rtg\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // test version is there from the index\n    assertU(commit());\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // simulate an update from the leader\n    version += 10;\n    updateJ(jsonAdd(sdoc(\"id\",\"1\", \"_version_\",Long.toString(version))), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n    // test version is there from rtg\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // simulate reordering: test that a version less than that does not take affect\n    updateJ(jsonAdd(sdoc(\"id\",\"1\", \"_version_\",Long.toString(version - 1))), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n    // test that version hasn't changed\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // simulate reordering: test that a delete w/ version less than that does not take affect\n    // TODO: also allow passing version on delete instead of on URL?\n    updateJ(jsonDelId(\"1\"), params(DISTRIB_UPDATE_PARAM,FROM_LEADER, \"_version_\",Long.toString(version - 1)));\n\n    // test that version hasn't changed\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // make sure reordering detection also works after a commit\n    assertU(commit());\n\n    // simulate reordering: test that a version less than that does not take affect\n    updateJ(jsonAdd(sdoc(\"id\",\"1\", \"_version_\",Long.toString(version - 1))), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n    // test that version hasn't changed\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // simulate reordering: test that a delete w/ version less than that does not take affect\n    updateJ(jsonDelId(\"1\"), params(DISTRIB_UPDATE_PARAM,FROM_LEADER, \"_version_\",Long.toString(version - 1)));\n\n    // test that version hasn't changed\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // now simulate a normal delete from the leader\n    version += 5;\n    updateJ(jsonDelId(\"1\"), params(DISTRIB_UPDATE_PARAM,FROM_LEADER, \"_version_\",Long.toString(version)));\n\n    // make sure a reordered add doesn't take affect.\n    updateJ(jsonAdd(sdoc(\"id\",\"1\", \"_version_\",Long.toString(version - 1))), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n    // test that it's still deleted\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':null}\"\n    );\n\n    // test that we can remember the version of a delete after a commit\n    assertU(commit());\n\n    // make sure a reordered add doesn't take affect.\n    long version2 = deleteByQueryAndGetVersion(\"id:2\", null);\n\n    // test that it's still deleted\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':null}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"2\"), null);\n    version2 = deleteByQueryAndGetVersion(\"id:2\", null);\n    assertTrue(Math.abs(version2) > version );\n\n    // test that it's deleted\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"2\")\n        ,\"=={'doc':null}\");\n\n\n    version2 = Math.abs(version2) + 1000;\n    updateJ(jsonAdd(sdoc(\"id\",\"3\", \"_version_\",Long.toString(version2+100))), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n    updateJ(jsonAdd(sdoc(\"id\",\"4\", \"_version_\",Long.toString(version2+200))), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n    // this should only affect id:3 so far\n    deleteByQueryAndGetVersion(\"id:(3 4 5 6)\", params(DISTRIB_UPDATE_PARAM,FROM_LEADER, \"_version_\",Long.toString(-(version2+150))) );\n\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"3\"),\"=={'doc':null}\");\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"4\", \"fl\",\"id\"),\"=={'doc':{'id':'4'}}\");\n\n    updateJ(jsonAdd(sdoc(\"id\",\"5\", \"_version_\",Long.toString(version2+201))), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n    updateJ(jsonAdd(sdoc(\"id\",\"6\", \"_version_\",Long.toString(version2+101))), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n   // the DBQ should also have caused id:6 to be removed\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"5\", \"fl\",\"id\"),\"=={'doc':{'id':'5'}}\");\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"6\"),\"=={'doc':null}\");\n\n    assertU(commit());\n\n  }\n\n","sourceOld":"  @Test\n  public void testVersions() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    long version = addAndGetVersion(sdoc(\"id\",\"1\") , null);\n\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==0\"\n    );\n\n    // test version is there from rtg\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // test version is there from the index\n    assertU(commit());\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // simulate an update from the leader\n    version += 10;\n    updateJ(jsonAdd(sdoc(\"id\",\"1\", \"_version_\",Long.toString(version))), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n    // test version is there from rtg\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // simulate reordering: test that a version less than that does not take affect\n    updateJ(jsonAdd(sdoc(\"id\",\"1\", \"_version_\",Long.toString(version - 1))), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n    // test that version hasn't changed\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // simulate reordering: test that a delete w/ version less than that does not take affect\n    // TODO: also allow passing version on delete instead of on URL?\n    updateJ(jsonDelId(\"1\"), params(DISTRIB_UPDATE_PARAM,FROM_LEADER, \"_version_\",Long.toString(version - 1)));\n\n    // test that version hasn't changed\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // make sure reordering detection also works after a commit\n    assertU(commit());\n\n    // simulate reordering: test that a version less than that does not take affect\n    updateJ(jsonAdd(sdoc(\"id\",\"1\", \"_version_\",Long.toString(version - 1))), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n    // test that version hasn't changed\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // simulate reordering: test that a delete w/ version less than that does not take affect\n    updateJ(jsonDelId(\"1\"), params(DISTRIB_UPDATE_PARAM,FROM_LEADER, \"_version_\",Long.toString(version - 1)));\n\n    // test that version hasn't changed\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    // now simulate a normal delete from the leader\n    version += 5;\n    updateJ(jsonDelId(\"1\"), params(DISTRIB_UPDATE_PARAM,FROM_LEADER, \"_version_\",Long.toString(version)));\n\n    // make sure a reordered add doesn't take affect.\n    updateJ(jsonAdd(sdoc(\"id\",\"1\", \"_version_\",Long.toString(version - 1))), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n    // test that it's still deleted\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':null}\"\n    );\n\n    // test that we can remember the version of a delete after a commit\n    assertU(commit());\n\n    // make sure a reordered add doesn't take affect.\n    updateJ(jsonAdd(sdoc(\"id\",\"1\", \"_version_\",Long.toString(version - 1))), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n    // test that it's still deleted\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':null}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"2\"), null);\n    long version2 = deleteByQueryAndGetVersion(\"id:2\", null);\n    assertTrue(Math.abs(version2) > version );\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb999ed3fc6e419b9104de9ebfe62ace27f31d5f":["e2fe35ac47f8f51356d6c1724455d18f31c94fae"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["e2fe35ac47f8f51356d6c1724455d18f31c94fae","fb999ed3fc6e419b9104de9ebfe62ace27f31d5f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb999ed3fc6e419b9104de9ebfe62ace27f31d5f"],"e2fe35ac47f8f51356d6c1724455d18f31c94fae":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"]},"commit2Childs":{"fb999ed3fc6e419b9104de9ebfe62ace27f31d5f":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","e2fe35ac47f8f51356d6c1724455d18f31c94fae"],"e2fe35ac47f8f51356d6c1724455d18f31c94fae":["fb999ed3fc6e419b9104de9ebfe62ace27f31d5f","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","fe33227f6805edab2036cbb80645cc4e2d1fa424","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}