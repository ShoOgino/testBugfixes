{"path":"solr/core/src/test/org/apache/solr/update/MaxSizeAutoCommitTest#testDeletes().mjava","commits":[{"id":"27d6f83edecd216b844079cc682096091dfa9fbc","date":1534485921,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/MaxSizeAutoCommitTest#testDeletes().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDeletes() throws Exception {\n    int maxFileSizeBound = 1000;\n\n    // Set max size bound\n    hardCommitTracker.setTLogFileSizeUpperBound(maxFileSizeBound);\n\n    // Add docs\n    int numDocsToAdd = 500;\n    SolrQueryResponse updateResp = new SolrQueryResponse();\n    updateRequestHandler.handleRequest(constructBatchAddDocRequest(0, numDocsToAdd), updateResp);\n    waitForCommit(1000);\n\n    // Get the current commit info\n    int commitCountPreDeletes = hardCommitTracker.getCommitCount();\n\n    // Delete all documents - should trigger a commit\n    updateRequestHandler.handleRequest(constructBatchDeleteDocRequest(0, numDocsToAdd), updateResp);\n\n    // The long sleep is to allow for the expected triggered commit to finish\n    waitForCommit(1000);\n\n    // Verify commit information\n    Assert.assertTrue(\"At least one commit should have occurred\",\n        hardCommitTracker.getCommitCount() > commitCountPreDeletes);\n    long tlogSizePostDeletes = updateHandler.getUpdateLog().getCurrentLogSizeFromStream();\n    Assert.assertTrue(\"Current tlog size is larger than the max bound\", tlogSizePostDeletes < maxFileSizeBound);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59b747c8be41d65a8119291f3d1622d4cacef313","date":1543856860,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/MaxSizeAutoCommitTest#testDeletes().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/MaxSizeAutoCommitTest#testDeletes().mjava","sourceNew":"  @Test\n  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-13032\")\n  public void testDeletes() throws Exception {\n    int maxFileSizeBound = 1000;\n\n    // Set max size bound\n    hardCommitTracker.setTLogFileSizeUpperBound(maxFileSizeBound);\n\n    // Add docs\n    int numDocsToAdd = 500;\n    SolrQueryResponse updateResp = new SolrQueryResponse();\n    updateRequestHandler.handleRequest(constructBatchAddDocRequest(0, numDocsToAdd), updateResp);\n    waitForCommit(1000);\n\n    // Get the current commit info\n    int commitCountPreDeletes = hardCommitTracker.getCommitCount();\n\n    // Delete all documents - should trigger a commit\n    updateRequestHandler.handleRequest(constructBatchDeleteDocRequest(0, numDocsToAdd), updateResp);\n\n    // The long sleep is to allow for the expected triggered commit to finish\n    waitForCommit(1000);\n\n    // Verify commit information\n    Assert.assertTrue(\"At least one commit should have occurred\",\n        hardCommitTracker.getCommitCount() > commitCountPreDeletes);\n    long tlogSizePostDeletes = updateHandler.getUpdateLog().getCurrentLogSizeFromStream();\n    Assert.assertTrue(\"Current tlog size is larger than the max bound\", tlogSizePostDeletes < maxFileSizeBound);\n  }\n\n","sourceOld":"  @Test\n  public void testDeletes() throws Exception {\n    int maxFileSizeBound = 1000;\n\n    // Set max size bound\n    hardCommitTracker.setTLogFileSizeUpperBound(maxFileSizeBound);\n\n    // Add docs\n    int numDocsToAdd = 500;\n    SolrQueryResponse updateResp = new SolrQueryResponse();\n    updateRequestHandler.handleRequest(constructBatchAddDocRequest(0, numDocsToAdd), updateResp);\n    waitForCommit(1000);\n\n    // Get the current commit info\n    int commitCountPreDeletes = hardCommitTracker.getCommitCount();\n\n    // Delete all documents - should trigger a commit\n    updateRequestHandler.handleRequest(constructBatchDeleteDocRequest(0, numDocsToAdd), updateResp);\n\n    // The long sleep is to allow for the expected triggered commit to finish\n    waitForCommit(1000);\n\n    // Verify commit information\n    Assert.assertTrue(\"At least one commit should have occurred\",\n        hardCommitTracker.getCommitCount() > commitCountPreDeletes);\n    long tlogSizePostDeletes = updateHandler.getUpdateLog().getCurrentLogSizeFromStream();\n    Assert.assertTrue(\"Current tlog size is larger than the max bound\", tlogSizePostDeletes < maxFileSizeBound);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75faf4b1a2755d47e6544206f470bf42a11849dd","date":1543945445,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/MaxSizeAutoCommitTest#testDeletes().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/MaxSizeAutoCommitTest#testDeletes().mjava","sourceNew":"  @Test\n  public void testDeletes() throws Exception {\n\n    Assert.assertEquals(\"There have been no updates yet, so there shouldn't have been any commits\", 0,\n                        hardCommitTracker.getCommitCount());\n\n    long tlogSizePreUpdates = updateHandler.getUpdateLog().getCurrentLogSizeFromStream();\n    Assert.assertEquals(\"There have been no updates yet, so tlog should be empty\", 0, tlogSizePreUpdates);\n    \n    // Add docs\n    int numDocsToAdd = 500;\n    SolrQueryResponse updateResp = new SolrQueryResponse();\n    \n    monitor.doStuffAndExpectAtLeastOneCommit(hardCommitTracker, updateHandler, () -> {\n        updateRequestHandler.handleRequest(constructBatchAddDocRequest(0, numDocsToAdd), updateResp);\n      });\n    \n    // Delete all documents - should trigger a commit\n    \n    monitor.doStuffAndExpectAtLeastOneCommit(hardCommitTracker, updateHandler, () -> {\n        updateRequestHandler.handleRequest(constructBatchDeleteDocRequest(0, numDocsToAdd), updateResp);\n      });\n    \n  }\n\n","sourceOld":"  @Test\n  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-13032\")\n  public void testDeletes() throws Exception {\n    int maxFileSizeBound = 1000;\n\n    // Set max size bound\n    hardCommitTracker.setTLogFileSizeUpperBound(maxFileSizeBound);\n\n    // Add docs\n    int numDocsToAdd = 500;\n    SolrQueryResponse updateResp = new SolrQueryResponse();\n    updateRequestHandler.handleRequest(constructBatchAddDocRequest(0, numDocsToAdd), updateResp);\n    waitForCommit(1000);\n\n    // Get the current commit info\n    int commitCountPreDeletes = hardCommitTracker.getCommitCount();\n\n    // Delete all documents - should trigger a commit\n    updateRequestHandler.handleRequest(constructBatchDeleteDocRequest(0, numDocsToAdd), updateResp);\n\n    // The long sleep is to allow for the expected triggered commit to finish\n    waitForCommit(1000);\n\n    // Verify commit information\n    Assert.assertTrue(\"At least one commit should have occurred\",\n        hardCommitTracker.getCommitCount() > commitCountPreDeletes);\n    long tlogSizePostDeletes = updateHandler.getUpdateLog().getCurrentLogSizeFromStream();\n    Assert.assertTrue(\"Current tlog size is larger than the max bound\", tlogSizePostDeletes < maxFileSizeBound);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"75faf4b1a2755d47e6544206f470bf42a11849dd":["59b747c8be41d65a8119291f3d1622d4cacef313"],"59b747c8be41d65a8119291f3d1622d4cacef313":["27d6f83edecd216b844079cc682096091dfa9fbc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"27d6f83edecd216b844079cc682096091dfa9fbc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["75faf4b1a2755d47e6544206f470bf42a11849dd"]},"commit2Childs":{"75faf4b1a2755d47e6544206f470bf42a11849dd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"59b747c8be41d65a8119291f3d1622d4cacef313":["75faf4b1a2755d47e6544206f470bf42a11849dd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["27d6f83edecd216b844079cc682096091dfa9fbc"],"27d6f83edecd216b844079cc682096091dfa9fbc":["59b747c8be41d65a8119291f3d1622d4cacef313"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}