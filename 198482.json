{"path":"src/test/org/apache/lucene/analysis/TestToken#testGrow().mjava","commits":[{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestToken#testGrow().mjava","pathOld":"/dev/null","sourceNew":"  public void testGrow() {\n    Token t = new Token();\n    StringBuffer buf = new StringBuffer(\"ab\");\n    for (int i = 0; i < 20; i++)\n    {\n      char[] content = buf.toString().toCharArray();\n      t.setTermBuffer(content, 0, content.length);\n      assertEquals(buf.length(), t.termLength());\n      assertEquals(buf.toString(), t.term());\n      buf.append(buf.toString());\n    }\n    assertEquals(1048576, t.termLength());\n    assertEquals(1179654, t.termBuffer().length);\n\n    // now as a string, first variant\n    t = new Token();\n    buf = new StringBuffer(\"ab\");\n    for (int i = 0; i < 20; i++)\n    {\n      String content = buf.toString();\n      t.setTermBuffer(content, 0, content.length());\n      assertEquals(content.length(), t.termLength());\n      assertEquals(content, t.term());\n      buf.append(content);\n    }\n    assertEquals(1048576, t.termLength());\n    assertEquals(1179654, t.termBuffer().length);\n\n    // now as a string, second variant\n    t = new Token();\n    buf = new StringBuffer(\"ab\");\n    for (int i = 0; i < 20; i++)\n    {\n      String content = buf.toString();\n      t.setTermBuffer(content);\n      assertEquals(content.length(), t.termLength());\n      assertEquals(content, t.term());\n      buf.append(content);\n    }\n    assertEquals(1048576, t.termLength());\n    assertEquals(1179654, t.termBuffer().length);\n\n    // Test for slow growth to a long term\n    t = new Token();\n    buf = new StringBuffer(\"a\");\n    for (int i = 0; i < 20000; i++)\n    {\n      String content = buf.toString();\n      t.setTermBuffer(content);\n      assertEquals(content.length(), t.termLength());\n      assertEquals(content, t.term());\n      buf.append(\"a\");\n    }\n    assertEquals(20000, t.termLength());\n    assertEquals(20331, t.termBuffer().length);\n\n    // Test for slow growth to a long term\n    t = new Token();\n    buf = new StringBuffer(\"a\");\n    for (int i = 0; i < 20000; i++)\n    {\n      String content = buf.toString();\n      t.setTermBuffer(content);\n      assertEquals(content.length(), t.termLength());\n      assertEquals(content, t.term());\n      buf.append(\"a\");\n    }\n    assertEquals(20000, t.termLength());\n    assertEquals(20331, t.termBuffer().length);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"881f3cbef4fe1d74529367acf824c7394e2dd11c","date":1248894847,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestToken#testGrow().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestToken#testGrow().mjava","sourceNew":"  public void testGrow() {\n    Token t = new Token();\n    StringBuffer buf = new StringBuffer(\"ab\");\n    for (int i = 0; i < 20; i++)\n    {\n      char[] content = buf.toString().toCharArray();\n      t.setTermBuffer(content, 0, content.length);\n      assertEquals(buf.length(), t.termLength());\n      assertEquals(buf.toString(), t.term());\n      buf.append(buf.toString());\n    }\n    assertEquals(1048576, t.termLength());\n    assertEquals(1179654, t.termBuffer().length);\n\n    // now as a string, first variant\n    t = new Token();\n    buf = new StringBuffer(\"ab\");\n    for (int i = 0; i < 20; i++)\n    {\n      String content = buf.toString();\n      t.setTermBuffer(content, 0, content.length());\n      assertEquals(content.length(), t.termLength());\n      assertEquals(content, t.term());\n      buf.append(content);\n    }\n    assertEquals(1048576, t.termLength());\n    assertEquals(1179654, t.termBuffer().length);\n\n    // now as a string, second variant\n    t = new Token();\n    buf = new StringBuffer(\"ab\");\n    for (int i = 0; i < 20; i++)\n    {\n      String content = buf.toString();\n      t.setTermBuffer(content);\n      assertEquals(content.length(), t.termLength());\n      assertEquals(content, t.term());\n      buf.append(content);\n    }\n    assertEquals(1048576, t.termLength());\n    assertEquals(1179654, t.termBuffer().length);\n\n    // Test for slow growth to a long term\n    t = new Token();\n    buf = new StringBuffer(\"a\");\n    for (int i = 0; i < 20000; i++)\n    {\n      String content = buf.toString();\n      t.setTermBuffer(content);\n      assertEquals(content.length(), t.termLength());\n      assertEquals(content, t.term());\n      buf.append(\"a\");\n    }\n    assertEquals(20000, t.termLength());\n    assertEquals(20167, t.termBuffer().length);\n\n    // Test for slow growth to a long term\n    t = new Token();\n    buf = new StringBuffer(\"a\");\n    for (int i = 0; i < 20000; i++)\n    {\n      String content = buf.toString();\n      t.setTermBuffer(content);\n      assertEquals(content.length(), t.termLength());\n      assertEquals(content, t.term());\n      buf.append(\"a\");\n    }\n    assertEquals(20000, t.termLength());\n    assertEquals(20167, t.termBuffer().length);\n  }\n\n","sourceOld":"  public void testGrow() {\n    Token t = new Token();\n    StringBuffer buf = new StringBuffer(\"ab\");\n    for (int i = 0; i < 20; i++)\n    {\n      char[] content = buf.toString().toCharArray();\n      t.setTermBuffer(content, 0, content.length);\n      assertEquals(buf.length(), t.termLength());\n      assertEquals(buf.toString(), t.term());\n      buf.append(buf.toString());\n    }\n    assertEquals(1048576, t.termLength());\n    assertEquals(1179654, t.termBuffer().length);\n\n    // now as a string, first variant\n    t = new Token();\n    buf = new StringBuffer(\"ab\");\n    for (int i = 0; i < 20; i++)\n    {\n      String content = buf.toString();\n      t.setTermBuffer(content, 0, content.length());\n      assertEquals(content.length(), t.termLength());\n      assertEquals(content, t.term());\n      buf.append(content);\n    }\n    assertEquals(1048576, t.termLength());\n    assertEquals(1179654, t.termBuffer().length);\n\n    // now as a string, second variant\n    t = new Token();\n    buf = new StringBuffer(\"ab\");\n    for (int i = 0; i < 20; i++)\n    {\n      String content = buf.toString();\n      t.setTermBuffer(content);\n      assertEquals(content.length(), t.termLength());\n      assertEquals(content, t.term());\n      buf.append(content);\n    }\n    assertEquals(1048576, t.termLength());\n    assertEquals(1179654, t.termBuffer().length);\n\n    // Test for slow growth to a long term\n    t = new Token();\n    buf = new StringBuffer(\"a\");\n    for (int i = 0; i < 20000; i++)\n    {\n      String content = buf.toString();\n      t.setTermBuffer(content);\n      assertEquals(content.length(), t.termLength());\n      assertEquals(content, t.term());\n      buf.append(\"a\");\n    }\n    assertEquals(20000, t.termLength());\n    assertEquals(20331, t.termBuffer().length);\n\n    // Test for slow growth to a long term\n    t = new Token();\n    buf = new StringBuffer(\"a\");\n    for (int i = 0; i < 20000; i++)\n    {\n      String content = buf.toString();\n      t.setTermBuffer(content);\n      assertEquals(content.length(), t.termLength());\n      assertEquals(content, t.term());\n      buf.append(\"a\");\n    }\n    assertEquals(20000, t.termLength());\n    assertEquals(20331, t.termBuffer().length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c","date":1254521470,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestToken#testGrow().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestToken#testGrow().mjava","sourceNew":"  public void testGrow() {\n    Token t = new Token();\n    StringBuilder buf = new StringBuilder(\"ab\");\n    for (int i = 0; i < 20; i++)\n    {\n      char[] content = buf.toString().toCharArray();\n      t.setTermBuffer(content, 0, content.length);\n      assertEquals(buf.length(), t.termLength());\n      assertEquals(buf.toString(), t.term());\n      buf.append(buf.toString());\n    }\n    assertEquals(1048576, t.termLength());\n    assertEquals(1179654, t.termBuffer().length);\n\n    // now as a string, first variant\n    t = new Token();\n    buf = new StringBuilder(\"ab\");\n    for (int i = 0; i < 20; i++)\n    {\n      String content = buf.toString();\n      t.setTermBuffer(content, 0, content.length());\n      assertEquals(content.length(), t.termLength());\n      assertEquals(content, t.term());\n      buf.append(content);\n    }\n    assertEquals(1048576, t.termLength());\n    assertEquals(1179654, t.termBuffer().length);\n\n    // now as a string, second variant\n    t = new Token();\n    buf = new StringBuilder(\"ab\");\n    for (int i = 0; i < 20; i++)\n    {\n      String content = buf.toString();\n      t.setTermBuffer(content);\n      assertEquals(content.length(), t.termLength());\n      assertEquals(content, t.term());\n      buf.append(content);\n    }\n    assertEquals(1048576, t.termLength());\n    assertEquals(1179654, t.termBuffer().length);\n\n    // Test for slow growth to a long term\n    t = new Token();\n    buf = new StringBuilder(\"a\");\n    for (int i = 0; i < 20000; i++)\n    {\n      String content = buf.toString();\n      t.setTermBuffer(content);\n      assertEquals(content.length(), t.termLength());\n      assertEquals(content, t.term());\n      buf.append(\"a\");\n    }\n    assertEquals(20000, t.termLength());\n    assertEquals(20167, t.termBuffer().length);\n\n    // Test for slow growth to a long term\n    t = new Token();\n    buf = new StringBuilder(\"a\");\n    for (int i = 0; i < 20000; i++)\n    {\n      String content = buf.toString();\n      t.setTermBuffer(content);\n      assertEquals(content.length(), t.termLength());\n      assertEquals(content, t.term());\n      buf.append(\"a\");\n    }\n    assertEquals(20000, t.termLength());\n    assertEquals(20167, t.termBuffer().length);\n  }\n\n","sourceOld":"  public void testGrow() {\n    Token t = new Token();\n    StringBuffer buf = new StringBuffer(\"ab\");\n    for (int i = 0; i < 20; i++)\n    {\n      char[] content = buf.toString().toCharArray();\n      t.setTermBuffer(content, 0, content.length);\n      assertEquals(buf.length(), t.termLength());\n      assertEquals(buf.toString(), t.term());\n      buf.append(buf.toString());\n    }\n    assertEquals(1048576, t.termLength());\n    assertEquals(1179654, t.termBuffer().length);\n\n    // now as a string, first variant\n    t = new Token();\n    buf = new StringBuffer(\"ab\");\n    for (int i = 0; i < 20; i++)\n    {\n      String content = buf.toString();\n      t.setTermBuffer(content, 0, content.length());\n      assertEquals(content.length(), t.termLength());\n      assertEquals(content, t.term());\n      buf.append(content);\n    }\n    assertEquals(1048576, t.termLength());\n    assertEquals(1179654, t.termBuffer().length);\n\n    // now as a string, second variant\n    t = new Token();\n    buf = new StringBuffer(\"ab\");\n    for (int i = 0; i < 20; i++)\n    {\n      String content = buf.toString();\n      t.setTermBuffer(content);\n      assertEquals(content.length(), t.termLength());\n      assertEquals(content, t.term());\n      buf.append(content);\n    }\n    assertEquals(1048576, t.termLength());\n    assertEquals(1179654, t.termBuffer().length);\n\n    // Test for slow growth to a long term\n    t = new Token();\n    buf = new StringBuffer(\"a\");\n    for (int i = 0; i < 20000; i++)\n    {\n      String content = buf.toString();\n      t.setTermBuffer(content);\n      assertEquals(content.length(), t.termLength());\n      assertEquals(content, t.term());\n      buf.append(\"a\");\n    }\n    assertEquals(20000, t.termLength());\n    assertEquals(20167, t.termBuffer().length);\n\n    // Test for slow growth to a long term\n    t = new Token();\n    buf = new StringBuffer(\"a\");\n    for (int i = 0; i < 20000; i++)\n    {\n      String content = buf.toString();\n      t.setTermBuffer(content);\n      assertEquals(content.length(), t.termLength());\n      assertEquals(content, t.term());\n      buf.append(\"a\");\n    }\n    assertEquals(20000, t.termLength());\n    assertEquals(20167, t.termBuffer().length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38c26570a4fd6cf0856801c977a2bc9c28a5424c","date":1264074890,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestToken#testGrow().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestToken#testGrow().mjava","sourceNew":"  public void testGrow() {\n    Token t = new Token();\n    StringBuilder buf = new StringBuilder(\"ab\");\n    for (int i = 0; i < 20; i++)\n    {\n      char[] content = buf.toString().toCharArray();\n      t.setTermBuffer(content, 0, content.length);\n      assertEquals(buf.length(), t.termLength());\n      assertEquals(buf.toString(), t.term());\n      buf.append(buf.toString());\n    }\n    assertEquals(1048576, t.termLength());\n\n    // now as a string, first variant\n    t = new Token();\n    buf = new StringBuilder(\"ab\");\n    for (int i = 0; i < 20; i++)\n    {\n      String content = buf.toString();\n      t.setTermBuffer(content, 0, content.length());\n      assertEquals(content.length(), t.termLength());\n      assertEquals(content, t.term());\n      buf.append(content);\n    }\n    assertEquals(1048576, t.termLength());\n\n    // now as a string, second variant\n    t = new Token();\n    buf = new StringBuilder(\"ab\");\n    for (int i = 0; i < 20; i++)\n    {\n      String content = buf.toString();\n      t.setTermBuffer(content);\n      assertEquals(content.length(), t.termLength());\n      assertEquals(content, t.term());\n      buf.append(content);\n    }\n    assertEquals(1048576, t.termLength());\n\n    // Test for slow growth to a long term\n    t = new Token();\n    buf = new StringBuilder(\"a\");\n    for (int i = 0; i < 20000; i++)\n    {\n      String content = buf.toString();\n      t.setTermBuffer(content);\n      assertEquals(content.length(), t.termLength());\n      assertEquals(content, t.term());\n      buf.append(\"a\");\n    }\n    assertEquals(20000, t.termLength());\n\n    // Test for slow growth to a long term\n    t = new Token();\n    buf = new StringBuilder(\"a\");\n    for (int i = 0; i < 20000; i++)\n    {\n      String content = buf.toString();\n      t.setTermBuffer(content);\n      assertEquals(content.length(), t.termLength());\n      assertEquals(content, t.term());\n      buf.append(\"a\");\n    }\n    assertEquals(20000, t.termLength());\n  }\n\n","sourceOld":"  public void testGrow() {\n    Token t = new Token();\n    StringBuilder buf = new StringBuilder(\"ab\");\n    for (int i = 0; i < 20; i++)\n    {\n      char[] content = buf.toString().toCharArray();\n      t.setTermBuffer(content, 0, content.length);\n      assertEquals(buf.length(), t.termLength());\n      assertEquals(buf.toString(), t.term());\n      buf.append(buf.toString());\n    }\n    assertEquals(1048576, t.termLength());\n    assertEquals(1179654, t.termBuffer().length);\n\n    // now as a string, first variant\n    t = new Token();\n    buf = new StringBuilder(\"ab\");\n    for (int i = 0; i < 20; i++)\n    {\n      String content = buf.toString();\n      t.setTermBuffer(content, 0, content.length());\n      assertEquals(content.length(), t.termLength());\n      assertEquals(content, t.term());\n      buf.append(content);\n    }\n    assertEquals(1048576, t.termLength());\n    assertEquals(1179654, t.termBuffer().length);\n\n    // now as a string, second variant\n    t = new Token();\n    buf = new StringBuilder(\"ab\");\n    for (int i = 0; i < 20; i++)\n    {\n      String content = buf.toString();\n      t.setTermBuffer(content);\n      assertEquals(content.length(), t.termLength());\n      assertEquals(content, t.term());\n      buf.append(content);\n    }\n    assertEquals(1048576, t.termLength());\n    assertEquals(1179654, t.termBuffer().length);\n\n    // Test for slow growth to a long term\n    t = new Token();\n    buf = new StringBuilder(\"a\");\n    for (int i = 0; i < 20000; i++)\n    {\n      String content = buf.toString();\n      t.setTermBuffer(content);\n      assertEquals(content.length(), t.termLength());\n      assertEquals(content, t.term());\n      buf.append(\"a\");\n    }\n    assertEquals(20000, t.termLength());\n    assertEquals(20167, t.termBuffer().length);\n\n    // Test for slow growth to a long term\n    t = new Token();\n    buf = new StringBuilder(\"a\");\n    for (int i = 0; i < 20000; i++)\n    {\n      String content = buf.toString();\n      t.setTermBuffer(content);\n      assertEquals(content.length(), t.termLength());\n      assertEquals(content, t.term());\n      buf.append(\"a\");\n    }\n    assertEquals(20000, t.termLength());\n    assertEquals(20167, t.termBuffer().length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/analysis/TestToken#testGrow().mjava","sourceNew":null,"sourceOld":"  public void testGrow() {\n    Token t = new Token();\n    StringBuilder buf = new StringBuilder(\"ab\");\n    for (int i = 0; i < 20; i++)\n    {\n      char[] content = buf.toString().toCharArray();\n      t.setTermBuffer(content, 0, content.length);\n      assertEquals(buf.length(), t.termLength());\n      assertEquals(buf.toString(), t.term());\n      buf.append(buf.toString());\n    }\n    assertEquals(1048576, t.termLength());\n\n    // now as a string, first variant\n    t = new Token();\n    buf = new StringBuilder(\"ab\");\n    for (int i = 0; i < 20; i++)\n    {\n      String content = buf.toString();\n      t.setTermBuffer(content, 0, content.length());\n      assertEquals(content.length(), t.termLength());\n      assertEquals(content, t.term());\n      buf.append(content);\n    }\n    assertEquals(1048576, t.termLength());\n\n    // now as a string, second variant\n    t = new Token();\n    buf = new StringBuilder(\"ab\");\n    for (int i = 0; i < 20; i++)\n    {\n      String content = buf.toString();\n      t.setTermBuffer(content);\n      assertEquals(content.length(), t.termLength());\n      assertEquals(content, t.term());\n      buf.append(content);\n    }\n    assertEquals(1048576, t.termLength());\n\n    // Test for slow growth to a long term\n    t = new Token();\n    buf = new StringBuilder(\"a\");\n    for (int i = 0; i < 20000; i++)\n    {\n      String content = buf.toString();\n      t.setTermBuffer(content);\n      assertEquals(content.length(), t.termLength());\n      assertEquals(content, t.term());\n      buf.append(\"a\");\n    }\n    assertEquals(20000, t.termLength());\n\n    // Test for slow growth to a long term\n    t = new Token();\n    buf = new StringBuilder(\"a\");\n    for (int i = 0; i < 20000; i++)\n    {\n      String content = buf.toString();\n      t.setTermBuffer(content);\n      assertEquals(content.length(), t.termLength());\n      assertEquals(content, t.term());\n      buf.append(\"a\");\n    }\n    assertEquals(20000, t.termLength());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"881f3cbef4fe1d74529367acf824c7394e2dd11c":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"38c26570a4fd6cf0856801c977a2bc9c28a5424c":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["881f3cbef4fe1d74529367acf824c7394e2dd11c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["38c26570a4fd6cf0856801c977a2bc9c28a5424c"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["881f3cbef4fe1d74529367acf824c7394e2dd11c"],"881f3cbef4fe1d74529367acf824c7394e2dd11c":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"38c26570a4fd6cf0856801c977a2bc9c28a5424c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["38c26570a4fd6cf0856801c977a2bc9c28a5424c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}