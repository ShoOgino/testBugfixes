{"path":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointInPolygonQuery#GeoPointInPolygonQuery(String,GeoRect,double[],double[]).mjava","commits":[{"id":"07c50cb1eca5629cac5b6702dd0f5e06157af61a","date":1445464748,"type":1,"author":"Nick Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointInPolygonQuery#GeoPointInPolygonQuery(String,GeoRect,double[],double[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointInPolygonQuery#GeoPointInPolygonQuery(String,GeoBoundingBox,double[],double[]).mjava","sourceNew":"  /** Common constructor, used only internally. */\n  private GeoPointInPolygonQuery(final String field, GeoRect bbox, final double[] polyLons, final double[] polyLats) {\n    super(field, bbox.minLon, bbox.minLat, bbox.maxLon, bbox.maxLat);\n    if (polyLats.length != polyLons.length) {\n      throw new IllegalArgumentException(\"polyLats and polyLons must be equal length\");\n    }\n    if (polyLats.length < 4) {\n      throw new IllegalArgumentException(\"at least 4 polygon points required\");\n    }\n    if (polyLats[0] != polyLats[polyLats.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLats[0]=\" + polyLats[0] + \" polyLats[\" + (polyLats.length-1) + \"]=\" + polyLats[polyLats.length-1]);\n    }\n    if (polyLons[0] != polyLons[polyLons.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLons[0]=\" + polyLons[0] + \" polyLons[\" + (polyLons.length-1) + \"]=\" + polyLons[polyLons.length-1]);\n    }\n\n    // convert polygon vertices to coordinates within tolerance\n    this.x = toleranceConversion(polyLons);\n    this.y = toleranceConversion(polyLats);\n  }\n\n","sourceOld":"  /** Common constructor, used only internally. */\n  private GeoPointInPolygonQuery(final String field, GeoBoundingBox bbox, final double[] polyLons, final double[] polyLats) {\n    super(field, bbox.minLon, bbox.minLat, bbox.maxLon, bbox.maxLat);\n    if (polyLats.length != polyLons.length) {\n      throw new IllegalArgumentException(\"polyLats and polyLons must be equal length\");\n    }\n    if (polyLats.length < 4) {\n      throw new IllegalArgumentException(\"at least 4 polygon points required\");\n    }\n    if (polyLats[0] != polyLats[polyLats.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLats[0]=\" + polyLats[0] + \" polyLats[\" + (polyLats.length-1) + \"]=\" + polyLats[polyLats.length-1]);\n    }\n    if (polyLons[0] != polyLons[polyLons.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLons[0]=\" + polyLons[0] + \" polyLons[\" + (polyLons.length-1) + \"]=\" + polyLons[polyLons.length-1]);\n    }\n\n    // convert polygon vertices to coordinates within tolerance\n    this.x = toleranceConversion(polyLons);\n    this.y = toleranceConversion(polyLats);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8728c3940d6ab6d12b8afb3369f180328b2b2ef3","date":1446040476,"type":3,"author":"Nick Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointInPolygonQuery#GeoPointInPolygonQuery(String,GeoRect,double[],double[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointInPolygonQuery#GeoPointInPolygonQuery(String,GeoRect,double[],double[]).mjava","sourceNew":"  /** Common constructor, used only internally. */\n  private GeoPointInPolygonQuery(final String field, GeoRect bbox, final double[] polyLons, final double[] polyLats) {\n    super(field, bbox.minLon, bbox.minLat, bbox.maxLon, bbox.maxLat);\n    if (polyLats.length != polyLons.length) {\n      throw new IllegalArgumentException(\"polyLats and polyLons must be equal length\");\n    }\n    if (polyLats.length < 4) {\n      throw new IllegalArgumentException(\"at least 4 polygon points required\");\n    }\n    if (polyLats[0] != polyLats[polyLats.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLats[0]=\" + polyLats[0] + \" polyLats[\" + (polyLats.length-1) + \"]=\" + polyLats[polyLats.length-1]);\n    }\n    if (polyLons[0] != polyLons[polyLons.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLons[0]=\" + polyLons[0] + \" polyLons[\" + (polyLons.length-1) + \"]=\" + polyLons[polyLons.length-1]);\n    }\n\n    this.x = polyLons;\n    this.y = polyLats;\n  }\n\n","sourceOld":"  /** Common constructor, used only internally. */\n  private GeoPointInPolygonQuery(final String field, GeoRect bbox, final double[] polyLons, final double[] polyLats) {\n    super(field, bbox.minLon, bbox.minLat, bbox.maxLon, bbox.maxLat);\n    if (polyLats.length != polyLons.length) {\n      throw new IllegalArgumentException(\"polyLats and polyLons must be equal length\");\n    }\n    if (polyLats.length < 4) {\n      throw new IllegalArgumentException(\"at least 4 polygon points required\");\n    }\n    if (polyLats[0] != polyLats[polyLats.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLats[0]=\" + polyLats[0] + \" polyLats[\" + (polyLats.length-1) + \"]=\" + polyLats[polyLats.length-1]);\n    }\n    if (polyLons[0] != polyLons[polyLons.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLons[0]=\" + polyLons[0] + \" polyLons[\" + (polyLons.length-1) + \"]=\" + polyLons[polyLons.length-1]);\n    }\n\n    // convert polygon vertices to coordinates within tolerance\n    this.x = toleranceConversion(polyLons);\n    this.y = toleranceConversion(polyLats);\n  }\n\n","bugFix":["e91b7d9f5000faefb0e81b98e76ad5b9463283e8"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"937923083e4d137932336fc80f3d78758ff698a6","date":1454691519,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointInPolygonQuery#GeoPointInPolygonQuery(String,GeoRect,double[],double[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointInPolygonQuery#GeoPointInPolygonQuery(String,GeoRect,double[],double[]).mjava","sourceNew":"  /** Common constructor, used only internally. */\n  private GeoPointInPolygonQuery(final String field, GeoRect bbox, final double[] polyLons, final double[] polyLats) {\n    super(field, bbox.minLon, bbox.minLat, bbox.maxLon, bbox.maxLat);\n    if (polyLats.length != polyLons.length) {\n      throw new IllegalArgumentException(\"polyLats and polyLons must be equal length\");\n    }\n    if (polyLats.length < 4) {\n      throw new IllegalArgumentException(\"at least 4 polygon points required\");\n    }\n    if (polyLats[0] != polyLats[polyLats.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLats[0]=\" + polyLats[0] + \" polyLats[\" + (polyLats.length-1) + \"]=\" + polyLats[polyLats.length-1]);\n    }\n    if (polyLons[0] != polyLons[polyLons.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLons[0]=\" + polyLons[0] + \" polyLons[\" + (polyLons.length-1) + \"]=\" + polyLons[polyLons.length-1]);\n    }\n\n    this.x = polyLons;\n    this.y = polyLats;\n  }\n\n","sourceOld":"  /** Common constructor, used only internally. */\n  private GeoPointInPolygonQuery(final String field, GeoRect bbox, final double[] polyLons, final double[] polyLats) {\n    super(field, bbox.minLon, bbox.minLat, bbox.maxLon, bbox.maxLat);\n    if (polyLats.length != polyLons.length) {\n      throw new IllegalArgumentException(\"polyLats and polyLons must be equal length\");\n    }\n    if (polyLats.length < 4) {\n      throw new IllegalArgumentException(\"at least 4 polygon points required\");\n    }\n    if (polyLats[0] != polyLats[polyLats.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLats[0]=\" + polyLats[0] + \" polyLats[\" + (polyLats.length-1) + \"]=\" + polyLats[polyLats.length-1]);\n    }\n    if (polyLons[0] != polyLons[polyLons.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLons[0]=\" + polyLons[0] + \" polyLons[\" + (polyLons.length-1) + \"]=\" + polyLons[polyLons.length-1]);\n    }\n\n    this.x = polyLons;\n    this.y = polyLats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointInPolygonQuery#GeoPointInPolygonQuery(String,TermEncoding,GeoRect,double[],double[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointInPolygonQuery#GeoPointInPolygonQuery(String,GeoRect,double[],double[]).mjava","sourceNew":"  /** Common constructor, used only internally. */\n  private GeoPointInPolygonQuery(final String field, TermEncoding termEncoding, GeoRect bbox, final double[] polyLons, final double[] polyLats) {\n    super(field, termEncoding, bbox.minLon, bbox.minLat, bbox.maxLon, bbox.maxLat);\n    if (polyLats.length != polyLons.length) {\n      throw new IllegalArgumentException(\"polyLats and polyLons must be equal length\");\n    }\n    if (polyLats.length < 4) {\n      throw new IllegalArgumentException(\"at least 4 polygon points required\");\n    }\n    if (polyLats[0] != polyLats[polyLats.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLats[0]=\" + polyLats[0] + \" polyLats[\" + (polyLats.length-1) + \"]=\" + polyLats[polyLats.length-1]);\n    }\n    if (polyLons[0] != polyLons[polyLons.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLons[0]=\" + polyLons[0] + \" polyLons[\" + (polyLons.length-1) + \"]=\" + polyLons[polyLons.length-1]);\n    }\n\n    this.x = polyLons;\n    this.y = polyLats;\n  }\n\n","sourceOld":"  /** Common constructor, used only internally. */\n  private GeoPointInPolygonQuery(final String field, GeoRect bbox, final double[] polyLons, final double[] polyLats) {\n    super(field, bbox.minLon, bbox.minLat, bbox.maxLon, bbox.maxLat);\n    if (polyLats.length != polyLons.length) {\n      throw new IllegalArgumentException(\"polyLats and polyLons must be equal length\");\n    }\n    if (polyLats.length < 4) {\n      throw new IllegalArgumentException(\"at least 4 polygon points required\");\n    }\n    if (polyLats[0] != polyLats[polyLats.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLats[0]=\" + polyLats[0] + \" polyLats[\" + (polyLats.length-1) + \"]=\" + polyLats[polyLats.length-1]);\n    }\n    if (polyLons[0] != polyLons[polyLons.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLons[0]=\" + polyLons[0] + \" polyLons[\" + (polyLons.length-1) + \"]=\" + polyLons[polyLons.length-1]);\n    }\n\n    this.x = polyLons;\n    this.y = polyLats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["8728c3940d6ab6d12b8afb3369f180328b2b2ef3","937923083e4d137932336fc80f3d78758ff698a6"],"8728c3940d6ab6d12b8afb3369f180328b2b2ef3":["07c50cb1eca5629cac5b6702dd0f5e06157af61a"],"07c50cb1eca5629cac5b6702dd0f5e06157af61a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"937923083e4d137932336fc80f3d78758ff698a6":["8728c3940d6ab6d12b8afb3369f180328b2b2ef3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["937923083e4d137932336fc80f3d78758ff698a6"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["07c50cb1eca5629cac5b6702dd0f5e06157af61a"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"8728c3940d6ab6d12b8afb3369f180328b2b2ef3":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","937923083e4d137932336fc80f3d78758ff698a6"],"07c50cb1eca5629cac5b6702dd0f5e06157af61a":["8728c3940d6ab6d12b8afb3369f180328b2b2ef3"],"937923083e4d137932336fc80f3d78758ff698a6":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}