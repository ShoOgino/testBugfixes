{"path":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestBase#assertCountsAndCardinality(Map[CategoryPath,Integer],FacetResultNode,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestBase#assertCountsAndCardinality(Map[CategoryPath,Integer],FacetResultNode,int).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/FacetTestBase#assertCountsAndCardinality(Map[CategoryPath,Integer],FacetResultNode,int).mjava","sourceNew":"  /** Validate counts for returned facets, and that there are not too many results */\n  private static void assertCountsAndCardinality(Map<CategoryPath,Integer> facetCountsTruth,  FacetResultNode resNode, int reqNumResults) throws Exception {\n    int actualNumResults = resNode.getNumSubResults();\n    if (VERBOSE) {\n      System.out.println(\"NumResults: \" + actualNumResults);\n    }\n    assertTrue(\"Too many results!\", actualNumResults <= reqNumResults);\n    for (FacetResultNode subRes : resNode.getSubResults()) {\n      assertEquals(\"wrong count for: \"+subRes, facetCountsTruth.get(subRes.getLabel()).intValue(), (int)subRes.getValue());\n      assertCountsAndCardinality(facetCountsTruth, subRes, reqNumResults); // recurse into child results\n    }\n  }\n\n","sourceOld":"  /** Validate counts for returned facets, and that there are not too many results */\n  private static void assertCountsAndCardinality(Map<CategoryPath,Integer> facetCountsTruth,  FacetResultNode resNode, int reqNumResults) throws Exception {\n    int actualNumResults = resNode.getNumSubResults();\n    if (VERBOSE) {\n      System.out.println(\"NumResults: \" + actualNumResults);\n    }\n    assertTrue(\"Too many results!\", actualNumResults <= reqNumResults);\n    for (FacetResultNode subRes : resNode.getSubResults()) {\n      assertEquals(\"wrong count for: \"+subRes, facetCountsTruth.get(subRes.getLabel()).intValue(), (int)subRes.getValue());\n      assertCountsAndCardinality(facetCountsTruth, subRes, reqNumResults); // recurse into child results\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"811cdb4a80352766eb0c762e48972707a924e5cd","date":1358767313,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestBase#assertCountsAndCardinality(Map[CategoryPath,Integer],FacetResultNode,int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestBase#assertCountsAndCardinality(Map[CategoryPath,Integer],FacetResultNode,int).mjava","sourceNew":"  /** Validate counts for returned facets, and that there are not too many results */\n  private static void assertCountsAndCardinality(Map<CategoryPath,Integer> facetCountsTruth,  FacetResultNode resNode, int reqNumResults) throws Exception {\n    int actualNumResults = resNode.subResults.size();\n    if (VERBOSE) {\n      System.out.println(\"NumResults: \" + actualNumResults);\n    }\n    assertTrue(\"Too many results!\", actualNumResults <= reqNumResults);\n    for (FacetResultNode subRes : resNode.subResults) {\n      assertEquals(\"wrong count for: \"+subRes, facetCountsTruth.get(subRes.label).intValue(), (int)subRes.value);\n      assertCountsAndCardinality(facetCountsTruth, subRes, reqNumResults); // recurse into child results\n    }\n  }\n\n","sourceOld":"  /** Validate counts for returned facets, and that there are not too many results */\n  private static void assertCountsAndCardinality(Map<CategoryPath,Integer> facetCountsTruth,  FacetResultNode resNode, int reqNumResults) throws Exception {\n    int actualNumResults = resNode.getNumSubResults();\n    if (VERBOSE) {\n      System.out.println(\"NumResults: \" + actualNumResults);\n    }\n    assertTrue(\"Too many results!\", actualNumResults <= reqNumResults);\n    for (FacetResultNode subRes : resNode.getSubResults()) {\n      assertEquals(\"wrong count for: \"+subRes, facetCountsTruth.get(subRes.getLabel()).intValue(), (int)subRes.getValue());\n      assertCountsAndCardinality(facetCountsTruth, subRes, reqNumResults); // recurse into child results\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestBase#assertCountsAndCardinality(Map[CategoryPath,Integer],FacetResultNode,int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestBase#assertCountsAndCardinality(Map[CategoryPath,Integer],FacetResultNode,int).mjava","sourceNew":"  /** Validate counts for returned facets, and that there are not too many results */\n  private static void assertCountsAndCardinality(Map<CategoryPath,Integer> facetCountsTruth,  FacetResultNode resNode, int reqNumResults) throws Exception {\n    int actualNumResults = resNode.subResults.size();\n    if (VERBOSE) {\n      System.out.println(\"NumResults: \" + actualNumResults);\n    }\n    assertTrue(\"Too many results!\", actualNumResults <= reqNumResults);\n    for (FacetResultNode subRes : resNode.subResults) {\n      assertEquals(\"wrong count for: \"+subRes, facetCountsTruth.get(subRes.label).intValue(), (int)subRes.value);\n      assertCountsAndCardinality(facetCountsTruth, subRes, reqNumResults); // recurse into child results\n    }\n  }\n\n","sourceOld":"  /** Validate counts for returned facets, and that there are not too many results */\n  private static void assertCountsAndCardinality(Map<CategoryPath,Integer> facetCountsTruth,  FacetResultNode resNode, int reqNumResults) throws Exception {\n    int actualNumResults = resNode.getNumSubResults();\n    if (VERBOSE) {\n      System.out.println(\"NumResults: \" + actualNumResults);\n    }\n    assertTrue(\"Too many results!\", actualNumResults <= reqNumResults);\n    for (FacetResultNode subRes : resNode.getSubResults()) {\n      assertEquals(\"wrong count for: \"+subRes, facetCountsTruth.get(subRes.getLabel()).intValue(), (int)subRes.getValue());\n      assertCountsAndCardinality(facetCountsTruth, subRes, reqNumResults); // recurse into child results\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestBase#assertCountsAndCardinality(Map[FacetLabel,Integer],FacetResultNode,int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestBase#assertCountsAndCardinality(Map[CategoryPath,Integer],FacetResultNode,int).mjava","sourceNew":"  /** Validate counts for returned facets, and that there are not too many results */\n  private static void assertCountsAndCardinality(Map<FacetLabel,Integer> facetCountsTruth,  FacetResultNode resNode, int reqNumResults) throws Exception {\n    int actualNumResults = resNode.subResults.size();\n    if (VERBOSE) {\n      System.out.println(\"NumResults: \" + actualNumResults);\n    }\n    assertTrue(\"Too many results!\", actualNumResults <= reqNumResults);\n    for (FacetResultNode subRes : resNode.subResults) {\n      assertEquals(\"wrong count for: \"+subRes, facetCountsTruth.get(subRes.label).intValue(), (int)subRes.value);\n      assertCountsAndCardinality(facetCountsTruth, subRes, reqNumResults); // recurse into child results\n    }\n  }\n\n","sourceOld":"  /** Validate counts for returned facets, and that there are not too many results */\n  private static void assertCountsAndCardinality(Map<CategoryPath,Integer> facetCountsTruth,  FacetResultNode resNode, int reqNumResults) throws Exception {\n    int actualNumResults = resNode.subResults.size();\n    if (VERBOSE) {\n      System.out.println(\"NumResults: \" + actualNumResults);\n    }\n    assertTrue(\"Too many results!\", actualNumResults <= reqNumResults);\n    for (FacetResultNode subRes : resNode.subResults) {\n      assertEquals(\"wrong count for: \"+subRes, facetCountsTruth.get(subRes.label).intValue(), (int)subRes.value);\n      assertCountsAndCardinality(facetCountsTruth, subRes, reqNumResults); // recurse into child results\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestBase#assertCountsAndCardinality(Map[CategoryPath,Integer],FacetResultNode,int).mjava","sourceNew":null,"sourceOld":"  /** Validate counts for returned facets, and that there are not too many results */\n  private static void assertCountsAndCardinality(Map<CategoryPath,Integer> facetCountsTruth,  FacetResultNode resNode, int reqNumResults) throws Exception {\n    int actualNumResults = resNode.subResults.size();\n    if (VERBOSE) {\n      System.out.println(\"NumResults: \" + actualNumResults);\n    }\n    assertTrue(\"Too many results!\", actualNumResults <= reqNumResults);\n    for (FacetResultNode subRes : resNode.subResults) {\n      assertEquals(\"wrong count for: \"+subRes, facetCountsTruth.get(subRes.label).intValue(), (int)subRes.value);\n      assertCountsAndCardinality(facetCountsTruth, subRes, reqNumResults); // recurse into child results\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["811cdb4a80352766eb0c762e48972707a924e5cd","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"07155cdd910937cdf6877e48884d5782845c8b8b":["b89678825b68eccaf09e6ab71675fc0b0af1e099","811cdb4a80352766eb0c762e48972707a924e5cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"811cdb4a80352766eb0c762e48972707a924e5cd":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["811cdb4a80352766eb0c762e48972707a924e5cd"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["07155cdd910937cdf6877e48884d5782845c8b8b","811cdb4a80352766eb0c762e48972707a924e5cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"07155cdd910937cdf6877e48884d5782845c8b8b":[],"811cdb4a80352766eb0c762e48972707a924e5cd":["3cc728b07df73b197e6d940d27f9b08b63918f13","07155cdd910937cdf6877e48884d5782845c8b8b","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["07155cdd910937cdf6877e48884d5782845c8b8b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}