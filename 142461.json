{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestSegmentingTokenizerBase#testHugeTerm().mjava","commits":[{"id":"6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2","date":1326399048,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestSegmentingTokenizerBase#testHugeTerm().mjava","pathOld":"/dev/null","sourceNew":"  /** Tests the handling of binary/malformed data */\n  public void testHugeTerm() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < 40960; i++) {\n      sb.append('a');\n    }\n    String input = sb.toString();\n    char token[] = new char[4096];\n    Arrays.fill(token, 'a');\n    String expectedToken = new String(token);\n    String expected[] = { \n        expectedToken, expectedToken, expectedToken, \n        expectedToken, expectedToken, expectedToken,\n        expectedToken, expectedToken, expectedToken,\n        expectedToken\n    };\n    assertAnalyzesTo(sentence, input, expected);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1387d416b7beb69f15a682854da8ec4c153f5bce","date":1332264506,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestSegmentingTokenizerBase#testHugeTerm().mjava","sourceNew":null,"sourceOld":"  /** Tests the handling of binary/malformed data */\n  public void testHugeTerm() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < 40960; i++) {\n      sb.append('a');\n    }\n    String input = sb.toString();\n    char token[] = new char[4096];\n    Arrays.fill(token, 'a');\n    String expectedToken = new String(token);\n    String expected[] = { \n        expectedToken, expectedToken, expectedToken, \n        expectedToken, expectedToken, expectedToken,\n        expectedToken, expectedToken, expectedToken,\n        expectedToken\n    };\n    assertAnalyzesTo(sentence, input, expected);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1387d416b7beb69f15a682854da8ec4c153f5bce":["6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1387d416b7beb69f15a682854da8ec4c153f5bce"]},"commit2Childs":{"1387d416b7beb69f15a682854da8ec4c153f5bce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2"],"6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2":["1387d416b7beb69f15a682854da8ec4c153f5bce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}