{"path":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","sourceNew":"  public void testPhrasePrefix() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"blueberry pie\", writer);\n    add(\"blueberry strudel\", writer);\n    add(\"blueberry pizza\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"bluebird pizza\", writer);\n    add(\"bluebird foobar pizza\", writer);\n    add(\"piccadilly circus\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for \"blueberry pi*\":\n    MultiPhraseQuery query1 = new MultiPhraseQuery();\n    // search for \"strawberry pi*\":\n    MultiPhraseQuery query2 = new MultiPhraseQuery();\n    query1.add(new Term(\"body\", \"blueberry\"));\n    query2.add(new Term(\"body\", \"strawberry\"));\n    \n    LinkedList<Term> termsWithPrefix = new LinkedList<Term>();\n    \n    // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n    String prefix = \"pi\";\n    TermsEnum te = MultiFields.getFields(reader).terms(\"body\").iterator(null);\n    te.seekCeil(new BytesRef(prefix));\n    do {\n      String s = te.term().utf8ToString();\n      if (s.startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", s));\n      } else {\n        break;\n      }\n    } while (te.next() != null);\n    \n    query1.add(termsWithPrefix.toArray(new Term[0]));\n    assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n    query2.add(termsWithPrefix.toArray(new Term[0]));\n    assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2\n        .toString());\n    \n    ScoreDoc[] result;\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(2, result.length);\n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    // search for \"blue* pizza\":\n    MultiPhraseQuery query3 = new MultiPhraseQuery();\n    termsWithPrefix.clear();\n    prefix = \"blue\";\n    te.seekCeil(new BytesRef(prefix));\n    \n    do {\n      if (te.term().utf8ToString().startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", te.term().utf8ToString()));\n      }\n    } while (te.next() != null);\n    \n    query3.add(termsWithPrefix.toArray(new Term[0]));\n    query3.add(new Term(\"body\", \"pizza\"));\n    \n    result = searcher.search(query3, null, 1000).scoreDocs;\n    assertEquals(2, result.length); // blueberry pizza, bluebird pizza\n    assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n    \n    // test slop:\n    query3.setSlop(1);\n    result = searcher.search(query3, null, 1000).scoreDocs;\n    \n    // just make sure no exc:\n    searcher.explain(query3, 0);\n    \n    assertEquals(3, result.length); // blueberry pizza, bluebird pizza, bluebird\n                                    // foobar pizza\n    \n    MultiPhraseQuery query4 = new MultiPhraseQuery();\n    try {\n      query4.add(new Term(\"field1\", \"foo\"));\n      query4.add(new Term(\"field2\", \"foobar\"));\n      fail();\n    } catch (IllegalArgumentException e) {\n      // okay, all terms must belong to the same field\n    }\n    \n    writer.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testPhrasePrefix() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"blueberry pie\", writer);\n    add(\"blueberry strudel\", writer);\n    add(\"blueberry pizza\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"bluebird pizza\", writer);\n    add(\"bluebird foobar pizza\", writer);\n    add(\"piccadilly circus\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for \"blueberry pi*\":\n    MultiPhraseQuery query1 = new MultiPhraseQuery();\n    // search for \"strawberry pi*\":\n    MultiPhraseQuery query2 = new MultiPhraseQuery();\n    query1.add(new Term(\"body\", \"blueberry\"));\n    query2.add(new Term(\"body\", \"strawberry\"));\n    \n    LinkedList<Term> termsWithPrefix = new LinkedList<Term>();\n    \n    // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n    String prefix = \"pi\";\n    TermsEnum te = MultiFields.getFields(reader).terms(\"body\").iterator(null);\n    te.seekCeil(new BytesRef(prefix));\n    do {\n      String s = te.term().utf8ToString();\n      if (s.startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", s));\n      } else {\n        break;\n      }\n    } while (te.next() != null);\n    \n    query1.add(termsWithPrefix.toArray(new Term[0]));\n    assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n    query2.add(termsWithPrefix.toArray(new Term[0]));\n    assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2\n        .toString());\n    \n    ScoreDoc[] result;\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(2, result.length);\n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    // search for \"blue* pizza\":\n    MultiPhraseQuery query3 = new MultiPhraseQuery();\n    termsWithPrefix.clear();\n    prefix = \"blue\";\n    te.seekCeil(new BytesRef(prefix));\n    \n    do {\n      if (te.term().utf8ToString().startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", te.term().utf8ToString()));\n      }\n    } while (te.next() != null);\n    \n    query3.add(termsWithPrefix.toArray(new Term[0]));\n    query3.add(new Term(\"body\", \"pizza\"));\n    \n    result = searcher.search(query3, null, 1000).scoreDocs;\n    assertEquals(2, result.length); // blueberry pizza, bluebird pizza\n    assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n    \n    // test slop:\n    query3.setSlop(1);\n    result = searcher.search(query3, null, 1000).scoreDocs;\n    \n    // just make sure no exc:\n    searcher.explain(query3, 0);\n    \n    assertEquals(3, result.length); // blueberry pizza, bluebird pizza, bluebird\n                                    // foobar pizza\n    \n    MultiPhraseQuery query4 = new MultiPhraseQuery();\n    try {\n      query4.add(new Term(\"field1\", \"foo\"));\n      query4.add(new Term(\"field2\", \"foobar\"));\n      fail();\n    } catch (IllegalArgumentException e) {\n      // okay, all terms must belong to the same field\n    }\n    \n    writer.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","sourceNew":"  public void testPhrasePrefix() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    add(\"blueberry pie\", writer);\n    add(\"blueberry strudel\", writer);\n    add(\"blueberry pizza\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"bluebird pizza\", writer);\n    add(\"bluebird foobar pizza\", writer);\n    add(\"piccadilly circus\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for \"blueberry pi*\":\n    MultiPhraseQuery query1 = new MultiPhraseQuery();\n    // search for \"strawberry pi*\":\n    MultiPhraseQuery query2 = new MultiPhraseQuery();\n    query1.add(new Term(\"body\", \"blueberry\"));\n    query2.add(new Term(\"body\", \"strawberry\"));\n    \n    LinkedList<Term> termsWithPrefix = new LinkedList<Term>();\n    \n    // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n    String prefix = \"pi\";\n    TermsEnum te = MultiFields.getFields(reader).terms(\"body\").iterator(null);\n    te.seekCeil(new BytesRef(prefix));\n    do {\n      String s = te.term().utf8ToString();\n      if (s.startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", s));\n      } else {\n        break;\n      }\n    } while (te.next() != null);\n    \n    query1.add(termsWithPrefix.toArray(new Term[0]));\n    assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n    query2.add(termsWithPrefix.toArray(new Term[0]));\n    assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2\n        .toString());\n    \n    ScoreDoc[] result;\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(2, result.length);\n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    // search for \"blue* pizza\":\n    MultiPhraseQuery query3 = new MultiPhraseQuery();\n    termsWithPrefix.clear();\n    prefix = \"blue\";\n    te.seekCeil(new BytesRef(prefix));\n    \n    do {\n      if (te.term().utf8ToString().startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", te.term().utf8ToString()));\n      }\n    } while (te.next() != null);\n    \n    query3.add(termsWithPrefix.toArray(new Term[0]));\n    query3.add(new Term(\"body\", \"pizza\"));\n    \n    result = searcher.search(query3, null, 1000).scoreDocs;\n    assertEquals(2, result.length); // blueberry pizza, bluebird pizza\n    assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n    \n    // test slop:\n    query3.setSlop(1);\n    result = searcher.search(query3, null, 1000).scoreDocs;\n    \n    // just make sure no exc:\n    searcher.explain(query3, 0);\n    \n    assertEquals(3, result.length); // blueberry pizza, bluebird pizza, bluebird\n                                    // foobar pizza\n    \n    MultiPhraseQuery query4 = new MultiPhraseQuery();\n    try {\n      query4.add(new Term(\"field1\", \"foo\"));\n      query4.add(new Term(\"field2\", \"foobar\"));\n      fail();\n    } catch (IllegalArgumentException e) {\n      // okay, all terms must belong to the same field\n    }\n    \n    writer.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testPhrasePrefix() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"blueberry pie\", writer);\n    add(\"blueberry strudel\", writer);\n    add(\"blueberry pizza\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"bluebird pizza\", writer);\n    add(\"bluebird foobar pizza\", writer);\n    add(\"piccadilly circus\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for \"blueberry pi*\":\n    MultiPhraseQuery query1 = new MultiPhraseQuery();\n    // search for \"strawberry pi*\":\n    MultiPhraseQuery query2 = new MultiPhraseQuery();\n    query1.add(new Term(\"body\", \"blueberry\"));\n    query2.add(new Term(\"body\", \"strawberry\"));\n    \n    LinkedList<Term> termsWithPrefix = new LinkedList<Term>();\n    \n    // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n    String prefix = \"pi\";\n    TermsEnum te = MultiFields.getFields(reader).terms(\"body\").iterator(null);\n    te.seekCeil(new BytesRef(prefix));\n    do {\n      String s = te.term().utf8ToString();\n      if (s.startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", s));\n      } else {\n        break;\n      }\n    } while (te.next() != null);\n    \n    query1.add(termsWithPrefix.toArray(new Term[0]));\n    assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n    query2.add(termsWithPrefix.toArray(new Term[0]));\n    assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2\n        .toString());\n    \n    ScoreDoc[] result;\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(2, result.length);\n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    // search for \"blue* pizza\":\n    MultiPhraseQuery query3 = new MultiPhraseQuery();\n    termsWithPrefix.clear();\n    prefix = \"blue\";\n    te.seekCeil(new BytesRef(prefix));\n    \n    do {\n      if (te.term().utf8ToString().startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", te.term().utf8ToString()));\n      }\n    } while (te.next() != null);\n    \n    query3.add(termsWithPrefix.toArray(new Term[0]));\n    query3.add(new Term(\"body\", \"pizza\"));\n    \n    result = searcher.search(query3, null, 1000).scoreDocs;\n    assertEquals(2, result.length); // blueberry pizza, bluebird pizza\n    assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n    \n    // test slop:\n    query3.setSlop(1);\n    result = searcher.search(query3, null, 1000).scoreDocs;\n    \n    // just make sure no exc:\n    searcher.explain(query3, 0);\n    \n    assertEquals(3, result.length); // blueberry pizza, bluebird pizza, bluebird\n                                    // foobar pizza\n    \n    MultiPhraseQuery query4 = new MultiPhraseQuery();\n    try {\n      query4.add(new Term(\"field1\", \"foo\"));\n      query4.add(new Term(\"field2\", \"foobar\"));\n      fail();\n    } catch (IllegalArgumentException e) {\n      // okay, all terms must belong to the same field\n    }\n    \n    writer.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","sourceNew":"  public void testPhrasePrefix() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    add(\"blueberry pie\", writer);\n    add(\"blueberry strudel\", writer);\n    add(\"blueberry pizza\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"bluebird pizza\", writer);\n    add(\"bluebird foobar pizza\", writer);\n    add(\"piccadilly circus\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for \"blueberry pi*\":\n    MultiPhraseQuery query1 = new MultiPhraseQuery();\n    // search for \"strawberry pi*\":\n    MultiPhraseQuery query2 = new MultiPhraseQuery();\n    query1.add(new Term(\"body\", \"blueberry\"));\n    query2.add(new Term(\"body\", \"strawberry\"));\n    \n    LinkedList<Term> termsWithPrefix = new LinkedList<>();\n    \n    // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n    String prefix = \"pi\";\n    TermsEnum te = MultiFields.getFields(reader).terms(\"body\").iterator(null);\n    te.seekCeil(new BytesRef(prefix));\n    do {\n      String s = te.term().utf8ToString();\n      if (s.startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", s));\n      } else {\n        break;\n      }\n    } while (te.next() != null);\n    \n    query1.add(termsWithPrefix.toArray(new Term[0]));\n    assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n    query2.add(termsWithPrefix.toArray(new Term[0]));\n    assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2\n        .toString());\n    \n    ScoreDoc[] result;\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(2, result.length);\n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    // search for \"blue* pizza\":\n    MultiPhraseQuery query3 = new MultiPhraseQuery();\n    termsWithPrefix.clear();\n    prefix = \"blue\";\n    te.seekCeil(new BytesRef(prefix));\n    \n    do {\n      if (te.term().utf8ToString().startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", te.term().utf8ToString()));\n      }\n    } while (te.next() != null);\n    \n    query3.add(termsWithPrefix.toArray(new Term[0]));\n    query3.add(new Term(\"body\", \"pizza\"));\n    \n    result = searcher.search(query3, null, 1000).scoreDocs;\n    assertEquals(2, result.length); // blueberry pizza, bluebird pizza\n    assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n    \n    // test slop:\n    query3.setSlop(1);\n    result = searcher.search(query3, null, 1000).scoreDocs;\n    \n    // just make sure no exc:\n    searcher.explain(query3, 0);\n    \n    assertEquals(3, result.length); // blueberry pizza, bluebird pizza, bluebird\n                                    // foobar pizza\n    \n    MultiPhraseQuery query4 = new MultiPhraseQuery();\n    try {\n      query4.add(new Term(\"field1\", \"foo\"));\n      query4.add(new Term(\"field2\", \"foobar\"));\n      fail();\n    } catch (IllegalArgumentException e) {\n      // okay, all terms must belong to the same field\n    }\n    \n    writer.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testPhrasePrefix() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    add(\"blueberry pie\", writer);\n    add(\"blueberry strudel\", writer);\n    add(\"blueberry pizza\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"bluebird pizza\", writer);\n    add(\"bluebird foobar pizza\", writer);\n    add(\"piccadilly circus\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for \"blueberry pi*\":\n    MultiPhraseQuery query1 = new MultiPhraseQuery();\n    // search for \"strawberry pi*\":\n    MultiPhraseQuery query2 = new MultiPhraseQuery();\n    query1.add(new Term(\"body\", \"blueberry\"));\n    query2.add(new Term(\"body\", \"strawberry\"));\n    \n    LinkedList<Term> termsWithPrefix = new LinkedList<Term>();\n    \n    // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n    String prefix = \"pi\";\n    TermsEnum te = MultiFields.getFields(reader).terms(\"body\").iterator(null);\n    te.seekCeil(new BytesRef(prefix));\n    do {\n      String s = te.term().utf8ToString();\n      if (s.startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", s));\n      } else {\n        break;\n      }\n    } while (te.next() != null);\n    \n    query1.add(termsWithPrefix.toArray(new Term[0]));\n    assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n    query2.add(termsWithPrefix.toArray(new Term[0]));\n    assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2\n        .toString());\n    \n    ScoreDoc[] result;\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(2, result.length);\n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    // search for \"blue* pizza\":\n    MultiPhraseQuery query3 = new MultiPhraseQuery();\n    termsWithPrefix.clear();\n    prefix = \"blue\";\n    te.seekCeil(new BytesRef(prefix));\n    \n    do {\n      if (te.term().utf8ToString().startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", te.term().utf8ToString()));\n      }\n    } while (te.next() != null);\n    \n    query3.add(termsWithPrefix.toArray(new Term[0]));\n    query3.add(new Term(\"body\", \"pizza\"));\n    \n    result = searcher.search(query3, null, 1000).scoreDocs;\n    assertEquals(2, result.length); // blueberry pizza, bluebird pizza\n    assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n    \n    // test slop:\n    query3.setSlop(1);\n    result = searcher.search(query3, null, 1000).scoreDocs;\n    \n    // just make sure no exc:\n    searcher.explain(query3, 0);\n    \n    assertEquals(3, result.length); // blueberry pizza, bluebird pizza, bluebird\n                                    // foobar pizza\n    \n    MultiPhraseQuery query4 = new MultiPhraseQuery();\n    try {\n      query4.add(new Term(\"field1\", \"foo\"));\n      query4.add(new Term(\"field2\", \"foobar\"));\n      fail();\n    } catch (IllegalArgumentException e) {\n      // okay, all terms must belong to the same field\n    }\n    \n    writer.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","sourceNew":"  public void testPhrasePrefix() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    add(\"blueberry pie\", writer);\n    add(\"blueberry strudel\", writer);\n    add(\"blueberry pizza\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"bluebird pizza\", writer);\n    add(\"bluebird foobar pizza\", writer);\n    add(\"piccadilly circus\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for \"blueberry pi*\":\n    MultiPhraseQuery query1 = new MultiPhraseQuery();\n    // search for \"strawberry pi*\":\n    MultiPhraseQuery query2 = new MultiPhraseQuery();\n    query1.add(new Term(\"body\", \"blueberry\"));\n    query2.add(new Term(\"body\", \"strawberry\"));\n    \n    LinkedList<Term> termsWithPrefix = new LinkedList<>();\n    \n    // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n    String prefix = \"pi\";\n    TermsEnum te = MultiFields.getFields(reader).terms(\"body\").iterator(null);\n    te.seekCeil(new BytesRef(prefix));\n    do {\n      String s = te.term().utf8ToString();\n      if (s.startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", s));\n      } else {\n        break;\n      }\n    } while (te.next() != null);\n    \n    query1.add(termsWithPrefix.toArray(new Term[0]));\n    assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n    query2.add(termsWithPrefix.toArray(new Term[0]));\n    assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2\n        .toString());\n    \n    ScoreDoc[] result;\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(2, result.length);\n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    // search for \"blue* pizza\":\n    MultiPhraseQuery query3 = new MultiPhraseQuery();\n    termsWithPrefix.clear();\n    prefix = \"blue\";\n    te.seekCeil(new BytesRef(prefix));\n    \n    do {\n      if (te.term().utf8ToString().startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", te.term().utf8ToString()));\n      }\n    } while (te.next() != null);\n    \n    query3.add(termsWithPrefix.toArray(new Term[0]));\n    query3.add(new Term(\"body\", \"pizza\"));\n    \n    result = searcher.search(query3, null, 1000).scoreDocs;\n    assertEquals(2, result.length); // blueberry pizza, bluebird pizza\n    assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n    \n    // test slop:\n    query3.setSlop(1);\n    result = searcher.search(query3, null, 1000).scoreDocs;\n    \n    // just make sure no exc:\n    searcher.explain(query3, 0);\n    \n    assertEquals(3, result.length); // blueberry pizza, bluebird pizza, bluebird\n                                    // foobar pizza\n    \n    MultiPhraseQuery query4 = new MultiPhraseQuery();\n    try {\n      query4.add(new Term(\"field1\", \"foo\"));\n      query4.add(new Term(\"field2\", \"foobar\"));\n      fail();\n    } catch (IllegalArgumentException e) {\n      // okay, all terms must belong to the same field\n    }\n    \n    writer.shutdown();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testPhrasePrefix() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    add(\"blueberry pie\", writer);\n    add(\"blueberry strudel\", writer);\n    add(\"blueberry pizza\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"bluebird pizza\", writer);\n    add(\"bluebird foobar pizza\", writer);\n    add(\"piccadilly circus\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for \"blueberry pi*\":\n    MultiPhraseQuery query1 = new MultiPhraseQuery();\n    // search for \"strawberry pi*\":\n    MultiPhraseQuery query2 = new MultiPhraseQuery();\n    query1.add(new Term(\"body\", \"blueberry\"));\n    query2.add(new Term(\"body\", \"strawberry\"));\n    \n    LinkedList<Term> termsWithPrefix = new LinkedList<>();\n    \n    // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n    String prefix = \"pi\";\n    TermsEnum te = MultiFields.getFields(reader).terms(\"body\").iterator(null);\n    te.seekCeil(new BytesRef(prefix));\n    do {\n      String s = te.term().utf8ToString();\n      if (s.startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", s));\n      } else {\n        break;\n      }\n    } while (te.next() != null);\n    \n    query1.add(termsWithPrefix.toArray(new Term[0]));\n    assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n    query2.add(termsWithPrefix.toArray(new Term[0]));\n    assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2\n        .toString());\n    \n    ScoreDoc[] result;\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(2, result.length);\n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    // search for \"blue* pizza\":\n    MultiPhraseQuery query3 = new MultiPhraseQuery();\n    termsWithPrefix.clear();\n    prefix = \"blue\";\n    te.seekCeil(new BytesRef(prefix));\n    \n    do {\n      if (te.term().utf8ToString().startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", te.term().utf8ToString()));\n      }\n    } while (te.next() != null);\n    \n    query3.add(termsWithPrefix.toArray(new Term[0]));\n    query3.add(new Term(\"body\", \"pizza\"));\n    \n    result = searcher.search(query3, null, 1000).scoreDocs;\n    assertEquals(2, result.length); // blueberry pizza, bluebird pizza\n    assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n    \n    // test slop:\n    query3.setSlop(1);\n    result = searcher.search(query3, null, 1000).scoreDocs;\n    \n    // just make sure no exc:\n    searcher.explain(query3, 0);\n    \n    assertEquals(3, result.length); // blueberry pizza, bluebird pizza, bluebird\n                                    // foobar pizza\n    \n    MultiPhraseQuery query4 = new MultiPhraseQuery();\n    try {\n      query4.add(new Term(\"field1\", \"foo\"));\n      query4.add(new Term(\"field2\", \"foobar\"));\n      fail();\n    } catch (IllegalArgumentException e) {\n      // okay, all terms must belong to the same field\n    }\n    \n    writer.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","sourceNew":"  public void testPhrasePrefix() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    add(\"blueberry pie\", writer);\n    add(\"blueberry strudel\", writer);\n    add(\"blueberry pizza\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"bluebird pizza\", writer);\n    add(\"bluebird foobar pizza\", writer);\n    add(\"piccadilly circus\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for \"blueberry pi*\":\n    MultiPhraseQuery query1 = new MultiPhraseQuery();\n    // search for \"strawberry pi*\":\n    MultiPhraseQuery query2 = new MultiPhraseQuery();\n    query1.add(new Term(\"body\", \"blueberry\"));\n    query2.add(new Term(\"body\", \"strawberry\"));\n    \n    LinkedList<Term> termsWithPrefix = new LinkedList<>();\n    \n    // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n    String prefix = \"pi\";\n    TermsEnum te = MultiFields.getFields(reader).terms(\"body\").iterator(null);\n    te.seekCeil(new BytesRef(prefix));\n    do {\n      String s = te.term().utf8ToString();\n      if (s.startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", s));\n      } else {\n        break;\n      }\n    } while (te.next() != null);\n    \n    query1.add(termsWithPrefix.toArray(new Term[0]));\n    assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n    query2.add(termsWithPrefix.toArray(new Term[0]));\n    assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2\n        .toString());\n    \n    ScoreDoc[] result;\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(2, result.length);\n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    // search for \"blue* pizza\":\n    MultiPhraseQuery query3 = new MultiPhraseQuery();\n    termsWithPrefix.clear();\n    prefix = \"blue\";\n    te.seekCeil(new BytesRef(prefix));\n    \n    do {\n      if (te.term().utf8ToString().startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", te.term().utf8ToString()));\n      }\n    } while (te.next() != null);\n    \n    query3.add(termsWithPrefix.toArray(new Term[0]));\n    query3.add(new Term(\"body\", \"pizza\"));\n    \n    result = searcher.search(query3, null, 1000).scoreDocs;\n    assertEquals(2, result.length); // blueberry pizza, bluebird pizza\n    assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n    \n    // test slop:\n    query3.setSlop(1);\n    result = searcher.search(query3, null, 1000).scoreDocs;\n    \n    // just make sure no exc:\n    searcher.explain(query3, 0);\n    \n    assertEquals(3, result.length); // blueberry pizza, bluebird pizza, bluebird\n                                    // foobar pizza\n    \n    MultiPhraseQuery query4 = new MultiPhraseQuery();\n    try {\n      query4.add(new Term(\"field1\", \"foo\"));\n      query4.add(new Term(\"field2\", \"foobar\"));\n      fail();\n    } catch (IllegalArgumentException e) {\n      // okay, all terms must belong to the same field\n    }\n    \n    writer.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testPhrasePrefix() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    add(\"blueberry pie\", writer);\n    add(\"blueberry strudel\", writer);\n    add(\"blueberry pizza\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"bluebird pizza\", writer);\n    add(\"bluebird foobar pizza\", writer);\n    add(\"piccadilly circus\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for \"blueberry pi*\":\n    MultiPhraseQuery query1 = new MultiPhraseQuery();\n    // search for \"strawberry pi*\":\n    MultiPhraseQuery query2 = new MultiPhraseQuery();\n    query1.add(new Term(\"body\", \"blueberry\"));\n    query2.add(new Term(\"body\", \"strawberry\"));\n    \n    LinkedList<Term> termsWithPrefix = new LinkedList<>();\n    \n    // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n    String prefix = \"pi\";\n    TermsEnum te = MultiFields.getFields(reader).terms(\"body\").iterator(null);\n    te.seekCeil(new BytesRef(prefix));\n    do {\n      String s = te.term().utf8ToString();\n      if (s.startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", s));\n      } else {\n        break;\n      }\n    } while (te.next() != null);\n    \n    query1.add(termsWithPrefix.toArray(new Term[0]));\n    assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n    query2.add(termsWithPrefix.toArray(new Term[0]));\n    assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2\n        .toString());\n    \n    ScoreDoc[] result;\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(2, result.length);\n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    // search for \"blue* pizza\":\n    MultiPhraseQuery query3 = new MultiPhraseQuery();\n    termsWithPrefix.clear();\n    prefix = \"blue\";\n    te.seekCeil(new BytesRef(prefix));\n    \n    do {\n      if (te.term().utf8ToString().startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", te.term().utf8ToString()));\n      }\n    } while (te.next() != null);\n    \n    query3.add(termsWithPrefix.toArray(new Term[0]));\n    query3.add(new Term(\"body\", \"pizza\"));\n    \n    result = searcher.search(query3, null, 1000).scoreDocs;\n    assertEquals(2, result.length); // blueberry pizza, bluebird pizza\n    assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n    \n    // test slop:\n    query3.setSlop(1);\n    result = searcher.search(query3, null, 1000).scoreDocs;\n    \n    // just make sure no exc:\n    searcher.explain(query3, 0);\n    \n    assertEquals(3, result.length); // blueberry pizza, bluebird pizza, bluebird\n                                    // foobar pizza\n    \n    MultiPhraseQuery query4 = new MultiPhraseQuery();\n    try {\n      query4.add(new Term(\"field1\", \"foo\"));\n      query4.add(new Term(\"field2\", \"foobar\"));\n      fail();\n    } catch (IllegalArgumentException e) {\n      // okay, all terms must belong to the same field\n    }\n    \n    writer.shutdown();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","sourceNew":"  public void testPhrasePrefix() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    add(\"blueberry pie\", writer);\n    add(\"blueberry strudel\", writer);\n    add(\"blueberry pizza\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"bluebird pizza\", writer);\n    add(\"bluebird foobar pizza\", writer);\n    add(\"piccadilly circus\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for \"blueberry pi*\":\n    MultiPhraseQuery query1 = new MultiPhraseQuery();\n    // search for \"strawberry pi*\":\n    MultiPhraseQuery query2 = new MultiPhraseQuery();\n    query1.add(new Term(\"body\", \"blueberry\"));\n    query2.add(new Term(\"body\", \"strawberry\"));\n    \n    LinkedList<Term> termsWithPrefix = new LinkedList<>();\n    \n    // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n    String prefix = \"pi\";\n    TermsEnum te = MultiFields.getFields(reader).terms(\"body\").iterator(null);\n    te.seekCeil(new BytesRef(prefix));\n    do {\n      String s = te.term().utf8ToString();\n      if (s.startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", s));\n      } else {\n        break;\n      }\n    } while (te.next() != null);\n    \n    query1.add(termsWithPrefix.toArray(new Term[0]));\n    assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n    query2.add(termsWithPrefix.toArray(new Term[0]));\n    assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2\n        .toString());\n    \n    ScoreDoc[] result;\n    result = searcher.search(query1, 1000).scoreDocs;\n    assertEquals(2, result.length);\n    result = searcher.search(query2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    // search for \"blue* pizza\":\n    MultiPhraseQuery query3 = new MultiPhraseQuery();\n    termsWithPrefix.clear();\n    prefix = \"blue\";\n    te.seekCeil(new BytesRef(prefix));\n    \n    do {\n      if (te.term().utf8ToString().startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", te.term().utf8ToString()));\n      }\n    } while (te.next() != null);\n    \n    query3.add(termsWithPrefix.toArray(new Term[0]));\n    query3.add(new Term(\"body\", \"pizza\"));\n    \n    result = searcher.search(query3, 1000).scoreDocs;\n    assertEquals(2, result.length); // blueberry pizza, bluebird pizza\n    assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n    \n    // test slop:\n    query3.setSlop(1);\n    result = searcher.search(query3, 1000).scoreDocs;\n    \n    // just make sure no exc:\n    searcher.explain(query3, 0);\n    \n    assertEquals(3, result.length); // blueberry pizza, bluebird pizza, bluebird\n                                    // foobar pizza\n    \n    MultiPhraseQuery query4 = new MultiPhraseQuery();\n    try {\n      query4.add(new Term(\"field1\", \"foo\"));\n      query4.add(new Term(\"field2\", \"foobar\"));\n      fail();\n    } catch (IllegalArgumentException e) {\n      // okay, all terms must belong to the same field\n    }\n    \n    writer.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testPhrasePrefix() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    add(\"blueberry pie\", writer);\n    add(\"blueberry strudel\", writer);\n    add(\"blueberry pizza\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"bluebird pizza\", writer);\n    add(\"bluebird foobar pizza\", writer);\n    add(\"piccadilly circus\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for \"blueberry pi*\":\n    MultiPhraseQuery query1 = new MultiPhraseQuery();\n    // search for \"strawberry pi*\":\n    MultiPhraseQuery query2 = new MultiPhraseQuery();\n    query1.add(new Term(\"body\", \"blueberry\"));\n    query2.add(new Term(\"body\", \"strawberry\"));\n    \n    LinkedList<Term> termsWithPrefix = new LinkedList<>();\n    \n    // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n    String prefix = \"pi\";\n    TermsEnum te = MultiFields.getFields(reader).terms(\"body\").iterator(null);\n    te.seekCeil(new BytesRef(prefix));\n    do {\n      String s = te.term().utf8ToString();\n      if (s.startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", s));\n      } else {\n        break;\n      }\n    } while (te.next() != null);\n    \n    query1.add(termsWithPrefix.toArray(new Term[0]));\n    assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n    query2.add(termsWithPrefix.toArray(new Term[0]));\n    assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2\n        .toString());\n    \n    ScoreDoc[] result;\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(2, result.length);\n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    // search for \"blue* pizza\":\n    MultiPhraseQuery query3 = new MultiPhraseQuery();\n    termsWithPrefix.clear();\n    prefix = \"blue\";\n    te.seekCeil(new BytesRef(prefix));\n    \n    do {\n      if (te.term().utf8ToString().startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", te.term().utf8ToString()));\n      }\n    } while (te.next() != null);\n    \n    query3.add(termsWithPrefix.toArray(new Term[0]));\n    query3.add(new Term(\"body\", \"pizza\"));\n    \n    result = searcher.search(query3, null, 1000).scoreDocs;\n    assertEquals(2, result.length); // blueberry pizza, bluebird pizza\n    assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n    \n    // test slop:\n    query3.setSlop(1);\n    result = searcher.search(query3, null, 1000).scoreDocs;\n    \n    // just make sure no exc:\n    searcher.explain(query3, 0);\n    \n    assertEquals(3, result.length); // blueberry pizza, bluebird pizza, bluebird\n                                    // foobar pizza\n    \n    MultiPhraseQuery query4 = new MultiPhraseQuery();\n    try {\n      query4.add(new Term(\"field1\", \"foo\"));\n      query4.add(new Term(\"field2\", \"foobar\"));\n      fail();\n    } catch (IllegalArgumentException e) {\n      // okay, all terms must belong to the same field\n    }\n    \n    writer.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","sourceNew":"  public void testPhrasePrefix() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    add(\"blueberry pie\", writer);\n    add(\"blueberry strudel\", writer);\n    add(\"blueberry pizza\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"bluebird pizza\", writer);\n    add(\"bluebird foobar pizza\", writer);\n    add(\"piccadilly circus\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for \"blueberry pi*\":\n    MultiPhraseQuery query1 = new MultiPhraseQuery();\n    // search for \"strawberry pi*\":\n    MultiPhraseQuery query2 = new MultiPhraseQuery();\n    query1.add(new Term(\"body\", \"blueberry\"));\n    query2.add(new Term(\"body\", \"strawberry\"));\n    \n    LinkedList<Term> termsWithPrefix = new LinkedList<>();\n    \n    // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n    String prefix = \"pi\";\n    TermsEnum te = MultiFields.getFields(reader).terms(\"body\").iterator();\n    te.seekCeil(new BytesRef(prefix));\n    do {\n      String s = te.term().utf8ToString();\n      if (s.startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", s));\n      } else {\n        break;\n      }\n    } while (te.next() != null);\n    \n    query1.add(termsWithPrefix.toArray(new Term[0]));\n    assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n    query2.add(termsWithPrefix.toArray(new Term[0]));\n    assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2\n        .toString());\n    \n    ScoreDoc[] result;\n    result = searcher.search(query1, 1000).scoreDocs;\n    assertEquals(2, result.length);\n    result = searcher.search(query2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    // search for \"blue* pizza\":\n    MultiPhraseQuery query3 = new MultiPhraseQuery();\n    termsWithPrefix.clear();\n    prefix = \"blue\";\n    te.seekCeil(new BytesRef(prefix));\n    \n    do {\n      if (te.term().utf8ToString().startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", te.term().utf8ToString()));\n      }\n    } while (te.next() != null);\n    \n    query3.add(termsWithPrefix.toArray(new Term[0]));\n    query3.add(new Term(\"body\", \"pizza\"));\n    \n    result = searcher.search(query3, 1000).scoreDocs;\n    assertEquals(2, result.length); // blueberry pizza, bluebird pizza\n    assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n    \n    // test slop:\n    query3.setSlop(1);\n    result = searcher.search(query3, 1000).scoreDocs;\n    \n    // just make sure no exc:\n    searcher.explain(query3, 0);\n    \n    assertEquals(3, result.length); // blueberry pizza, bluebird pizza, bluebird\n                                    // foobar pizza\n    \n    MultiPhraseQuery query4 = new MultiPhraseQuery();\n    try {\n      query4.add(new Term(\"field1\", \"foo\"));\n      query4.add(new Term(\"field2\", \"foobar\"));\n      fail();\n    } catch (IllegalArgumentException e) {\n      // okay, all terms must belong to the same field\n    }\n    \n    writer.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testPhrasePrefix() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    add(\"blueberry pie\", writer);\n    add(\"blueberry strudel\", writer);\n    add(\"blueberry pizza\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"bluebird pizza\", writer);\n    add(\"bluebird foobar pizza\", writer);\n    add(\"piccadilly circus\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for \"blueberry pi*\":\n    MultiPhraseQuery query1 = new MultiPhraseQuery();\n    // search for \"strawberry pi*\":\n    MultiPhraseQuery query2 = new MultiPhraseQuery();\n    query1.add(new Term(\"body\", \"blueberry\"));\n    query2.add(new Term(\"body\", \"strawberry\"));\n    \n    LinkedList<Term> termsWithPrefix = new LinkedList<>();\n    \n    // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n    String prefix = \"pi\";\n    TermsEnum te = MultiFields.getFields(reader).terms(\"body\").iterator(null);\n    te.seekCeil(new BytesRef(prefix));\n    do {\n      String s = te.term().utf8ToString();\n      if (s.startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", s));\n      } else {\n        break;\n      }\n    } while (te.next() != null);\n    \n    query1.add(termsWithPrefix.toArray(new Term[0]));\n    assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n    query2.add(termsWithPrefix.toArray(new Term[0]));\n    assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2\n        .toString());\n    \n    ScoreDoc[] result;\n    result = searcher.search(query1, 1000).scoreDocs;\n    assertEquals(2, result.length);\n    result = searcher.search(query2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    // search for \"blue* pizza\":\n    MultiPhraseQuery query3 = new MultiPhraseQuery();\n    termsWithPrefix.clear();\n    prefix = \"blue\";\n    te.seekCeil(new BytesRef(prefix));\n    \n    do {\n      if (te.term().utf8ToString().startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", te.term().utf8ToString()));\n      }\n    } while (te.next() != null);\n    \n    query3.add(termsWithPrefix.toArray(new Term[0]));\n    query3.add(new Term(\"body\", \"pizza\"));\n    \n    result = searcher.search(query3, 1000).scoreDocs;\n    assertEquals(2, result.length); // blueberry pizza, bluebird pizza\n    assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n    \n    // test slop:\n    query3.setSlop(1);\n    result = searcher.search(query3, 1000).scoreDocs;\n    \n    // just make sure no exc:\n    searcher.explain(query3, 0);\n    \n    assertEquals(3, result.length); // blueberry pizza, bluebird pizza, bluebird\n                                    // foobar pizza\n    \n    MultiPhraseQuery query4 = new MultiPhraseQuery();\n    try {\n      query4.add(new Term(\"field1\", \"foo\"));\n      query4.add(new Term(\"field2\", \"foobar\"));\n      fail();\n    } catch (IllegalArgumentException e) {\n      // okay, all terms must belong to the same field\n    }\n    \n    writer.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","sourceNew":"  public void testPhrasePrefix() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    add(\"blueberry pie\", writer);\n    add(\"blueberry strudel\", writer);\n    add(\"blueberry pizza\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"bluebird pizza\", writer);\n    add(\"bluebird foobar pizza\", writer);\n    add(\"piccadilly circus\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for \"blueberry pi*\":\n    MultiPhraseQuery query1 = new MultiPhraseQuery();\n    // search for \"strawberry pi*\":\n    MultiPhraseQuery query2 = new MultiPhraseQuery();\n    query1.add(new Term(\"body\", \"blueberry\"));\n    query2.add(new Term(\"body\", \"strawberry\"));\n    \n    LinkedList<Term> termsWithPrefix = new LinkedList<>();\n    \n    // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n    String prefix = \"pi\";\n    TermsEnum te = MultiFields.getFields(reader).terms(\"body\").iterator();\n    te.seekCeil(new BytesRef(prefix));\n    do {\n      String s = te.term().utf8ToString();\n      if (s.startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", s));\n      } else {\n        break;\n      }\n    } while (te.next() != null);\n    \n    query1.add(termsWithPrefix.toArray(new Term[0]));\n    assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n    query2.add(termsWithPrefix.toArray(new Term[0]));\n    assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2\n        .toString());\n    \n    ScoreDoc[] result;\n    result = searcher.search(query1, 1000).scoreDocs;\n    assertEquals(2, result.length);\n    result = searcher.search(query2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    // search for \"blue* pizza\":\n    MultiPhraseQuery query3 = new MultiPhraseQuery();\n    termsWithPrefix.clear();\n    prefix = \"blue\";\n    te.seekCeil(new BytesRef(prefix));\n    \n    do {\n      if (te.term().utf8ToString().startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", te.term().utf8ToString()));\n      }\n    } while (te.next() != null);\n    \n    query3.add(termsWithPrefix.toArray(new Term[0]));\n    query3.add(new Term(\"body\", \"pizza\"));\n    \n    result = searcher.search(query3, 1000).scoreDocs;\n    assertEquals(2, result.length); // blueberry pizza, bluebird pizza\n    assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n    \n    // test slop:\n    query3.setSlop(1);\n    result = searcher.search(query3, 1000).scoreDocs;\n    \n    // just make sure no exc:\n    searcher.explain(query3, 0);\n    \n    assertEquals(3, result.length); // blueberry pizza, bluebird pizza, bluebird\n                                    // foobar pizza\n    \n    MultiPhraseQuery query4 = new MultiPhraseQuery();\n    expectThrows(IllegalArgumentException.class, () -> {\n      query4.add(new Term(\"field1\", \"foo\"));\n      query4.add(new Term(\"field2\", \"foobar\"));\n    });\n    \n    writer.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testPhrasePrefix() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    add(\"blueberry pie\", writer);\n    add(\"blueberry strudel\", writer);\n    add(\"blueberry pizza\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"bluebird pizza\", writer);\n    add(\"bluebird foobar pizza\", writer);\n    add(\"piccadilly circus\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for \"blueberry pi*\":\n    MultiPhraseQuery query1 = new MultiPhraseQuery();\n    // search for \"strawberry pi*\":\n    MultiPhraseQuery query2 = new MultiPhraseQuery();\n    query1.add(new Term(\"body\", \"blueberry\"));\n    query2.add(new Term(\"body\", \"strawberry\"));\n    \n    LinkedList<Term> termsWithPrefix = new LinkedList<>();\n    \n    // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n    String prefix = \"pi\";\n    TermsEnum te = MultiFields.getFields(reader).terms(\"body\").iterator();\n    te.seekCeil(new BytesRef(prefix));\n    do {\n      String s = te.term().utf8ToString();\n      if (s.startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", s));\n      } else {\n        break;\n      }\n    } while (te.next() != null);\n    \n    query1.add(termsWithPrefix.toArray(new Term[0]));\n    assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n    query2.add(termsWithPrefix.toArray(new Term[0]));\n    assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2\n        .toString());\n    \n    ScoreDoc[] result;\n    result = searcher.search(query1, 1000).scoreDocs;\n    assertEquals(2, result.length);\n    result = searcher.search(query2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    // search for \"blue* pizza\":\n    MultiPhraseQuery query3 = new MultiPhraseQuery();\n    termsWithPrefix.clear();\n    prefix = \"blue\";\n    te.seekCeil(new BytesRef(prefix));\n    \n    do {\n      if (te.term().utf8ToString().startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", te.term().utf8ToString()));\n      }\n    } while (te.next() != null);\n    \n    query3.add(termsWithPrefix.toArray(new Term[0]));\n    query3.add(new Term(\"body\", \"pizza\"));\n    \n    result = searcher.search(query3, 1000).scoreDocs;\n    assertEquals(2, result.length); // blueberry pizza, bluebird pizza\n    assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n    \n    // test slop:\n    query3.setSlop(1);\n    result = searcher.search(query3, 1000).scoreDocs;\n    \n    // just make sure no exc:\n    searcher.explain(query3, 0);\n    \n    assertEquals(3, result.length); // blueberry pizza, bluebird pizza, bluebird\n                                    // foobar pizza\n    \n    MultiPhraseQuery query4 = new MultiPhraseQuery();\n    try {\n      query4.add(new Term(\"field1\", \"foo\"));\n      query4.add(new Term(\"field2\", \"foobar\"));\n      fail();\n    } catch (IllegalArgumentException e) {\n      // okay, all terms must belong to the same field\n    }\n    \n    writer.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":["65a0cfedd6477720b24ec816e74d8383ca4fddb8","c084e47df29de3330311d69dabf515ceaa989512"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92b4a131f1796dd57cc6698aae3d589d32a29deb","date":1457087316,"type":3,"author":"Luc Vanlerberghe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","sourceNew":"  public void testPhrasePrefix() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    add(\"blueberry pie\", writer);\n    add(\"blueberry strudel\", writer);\n    add(\"blueberry pizza\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"bluebird pizza\", writer);\n    add(\"bluebird foobar pizza\", writer);\n    add(\"piccadilly circus\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for \"blueberry pi*\":\n    MultiPhraseQuery.Builder query1builder = new MultiPhraseQuery.Builder();\n    // search for \"strawberry pi*\":\n    MultiPhraseQuery.Builder query2builder = new MultiPhraseQuery.Builder();\n    query1builder.add(new Term(\"body\", \"blueberry\"));\n    query2builder.add(new Term(\"body\", \"strawberry\"));\n    \n    LinkedList<Term> termsWithPrefix = new LinkedList<>();\n    \n    // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n    String prefix = \"pi\";\n    TermsEnum te = MultiFields.getFields(reader).terms(\"body\").iterator();\n    te.seekCeil(new BytesRef(prefix));\n    do {\n      String s = te.term().utf8ToString();\n      if (s.startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", s));\n      } else {\n        break;\n      }\n    } while (te.next() != null);\n    \n    query1builder.add(termsWithPrefix.toArray(new Term[0]));\n    MultiPhraseQuery query1 = query1builder.build();\n    assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n    \n    query2builder.add(termsWithPrefix.toArray(new Term[0]));\n    MultiPhraseQuery query2 = query2builder.build();\n    assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2.toString());\n    \n    ScoreDoc[] result;\n    result = searcher.search(query1, 1000).scoreDocs;\n    assertEquals(2, result.length);\n    result = searcher.search(query2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    // search for \"blue* pizza\":\n    MultiPhraseQuery.Builder query3builder = new MultiPhraseQuery.Builder();\n    termsWithPrefix.clear();\n    prefix = \"blue\";\n    te.seekCeil(new BytesRef(prefix));\n    \n    do {\n      if (te.term().utf8ToString().startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", te.term().utf8ToString()));\n      }\n    } while (te.next() != null);\n    \n    query3builder.add(termsWithPrefix.toArray(new Term[0]));\n    query3builder.add(new Term(\"body\", \"pizza\"));\n    \n    MultiPhraseQuery query3 = query3builder.build();\n    \n    result = searcher.search(query3, 1000).scoreDocs;\n    assertEquals(2, result.length); // blueberry pizza, bluebird pizza\n    assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n    \n    // test slop:\n    query3builder.setSlop(1);\n    query3 = query3builder.build();\n    result = searcher.search(query3, 1000).scoreDocs;\n    \n    // just make sure no exc:\n    searcher.explain(query3, 0);\n    \n    assertEquals(3, result.length); // blueberry pizza, bluebird pizza, bluebird\n                                    // foobar pizza\n    \n    MultiPhraseQuery.Builder query4builder = new MultiPhraseQuery.Builder();\n    expectThrows(IllegalArgumentException.class, () -> {\n      query4builder.add(new Term(\"field1\", \"foo\"));\n      query4builder.add(new Term(\"field2\", \"foobar\"));\n    });\n    \n    writer.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testPhrasePrefix() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    add(\"blueberry pie\", writer);\n    add(\"blueberry strudel\", writer);\n    add(\"blueberry pizza\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"bluebird pizza\", writer);\n    add(\"bluebird foobar pizza\", writer);\n    add(\"piccadilly circus\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for \"blueberry pi*\":\n    MultiPhraseQuery query1 = new MultiPhraseQuery();\n    // search for \"strawberry pi*\":\n    MultiPhraseQuery query2 = new MultiPhraseQuery();\n    query1.add(new Term(\"body\", \"blueberry\"));\n    query2.add(new Term(\"body\", \"strawberry\"));\n    \n    LinkedList<Term> termsWithPrefix = new LinkedList<>();\n    \n    // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n    String prefix = \"pi\";\n    TermsEnum te = MultiFields.getFields(reader).terms(\"body\").iterator();\n    te.seekCeil(new BytesRef(prefix));\n    do {\n      String s = te.term().utf8ToString();\n      if (s.startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", s));\n      } else {\n        break;\n      }\n    } while (te.next() != null);\n    \n    query1.add(termsWithPrefix.toArray(new Term[0]));\n    assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n    query2.add(termsWithPrefix.toArray(new Term[0]));\n    assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2\n        .toString());\n    \n    ScoreDoc[] result;\n    result = searcher.search(query1, 1000).scoreDocs;\n    assertEquals(2, result.length);\n    result = searcher.search(query2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    // search for \"blue* pizza\":\n    MultiPhraseQuery query3 = new MultiPhraseQuery();\n    termsWithPrefix.clear();\n    prefix = \"blue\";\n    te.seekCeil(new BytesRef(prefix));\n    \n    do {\n      if (te.term().utf8ToString().startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", te.term().utf8ToString()));\n      }\n    } while (te.next() != null);\n    \n    query3.add(termsWithPrefix.toArray(new Term[0]));\n    query3.add(new Term(\"body\", \"pizza\"));\n    \n    result = searcher.search(query3, 1000).scoreDocs;\n    assertEquals(2, result.length); // blueberry pizza, bluebird pizza\n    assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n    \n    // test slop:\n    query3.setSlop(1);\n    result = searcher.search(query3, 1000).scoreDocs;\n    \n    // just make sure no exc:\n    searcher.explain(query3, 0);\n    \n    assertEquals(3, result.length); // blueberry pizza, bluebird pizza, bluebird\n                                    // foobar pizza\n    \n    MultiPhraseQuery query4 = new MultiPhraseQuery();\n    expectThrows(IllegalArgumentException.class, () -> {\n      query4.add(new Term(\"field1\", \"foo\"));\n      query4.add(new Term(\"field2\", \"foobar\"));\n    });\n    \n    writer.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","sourceNew":"  public void testPhrasePrefix() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    add(\"blueberry pie\", writer);\n    add(\"blueberry strudel\", writer);\n    add(\"blueberry pizza\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"bluebird pizza\", writer);\n    add(\"bluebird foobar pizza\", writer);\n    add(\"piccadilly circus\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for \"blueberry pi*\":\n    MultiPhraseQuery.Builder query1builder = new MultiPhraseQuery.Builder();\n    // search for \"strawberry pi*\":\n    MultiPhraseQuery.Builder query2builder = new MultiPhraseQuery.Builder();\n    query1builder.add(new Term(\"body\", \"blueberry\"));\n    query2builder.add(new Term(\"body\", \"strawberry\"));\n    \n    LinkedList<Term> termsWithPrefix = new LinkedList<>();\n    \n    // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n    String prefix = \"pi\";\n    TermsEnum te = MultiFields.getFields(reader).terms(\"body\").iterator();\n    te.seekCeil(new BytesRef(prefix));\n    do {\n      String s = te.term().utf8ToString();\n      if (s.startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", s));\n      } else {\n        break;\n      }\n    } while (te.next() != null);\n    \n    query1builder.add(termsWithPrefix.toArray(new Term[0]));\n    MultiPhraseQuery query1 = query1builder.build();\n    assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n    \n    query2builder.add(termsWithPrefix.toArray(new Term[0]));\n    MultiPhraseQuery query2 = query2builder.build();\n    assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2.toString());\n    \n    ScoreDoc[] result;\n    result = searcher.search(query1, 1000).scoreDocs;\n    assertEquals(2, result.length);\n    result = searcher.search(query2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    // search for \"blue* pizza\":\n    MultiPhraseQuery.Builder query3builder = new MultiPhraseQuery.Builder();\n    termsWithPrefix.clear();\n    prefix = \"blue\";\n    te.seekCeil(new BytesRef(prefix));\n    \n    do {\n      if (te.term().utf8ToString().startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", te.term().utf8ToString()));\n      }\n    } while (te.next() != null);\n    \n    query3builder.add(termsWithPrefix.toArray(new Term[0]));\n    query3builder.add(new Term(\"body\", \"pizza\"));\n    \n    MultiPhraseQuery query3 = query3builder.build();\n    \n    result = searcher.search(query3, 1000).scoreDocs;\n    assertEquals(2, result.length); // blueberry pizza, bluebird pizza\n    assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n    \n    // test slop:\n    query3builder.setSlop(1);\n    query3 = query3builder.build();\n    result = searcher.search(query3, 1000).scoreDocs;\n    \n    // just make sure no exc:\n    searcher.explain(query3, 0);\n    \n    assertEquals(3, result.length); // blueberry pizza, bluebird pizza, bluebird\n                                    // foobar pizza\n    \n    MultiPhraseQuery.Builder query4builder = new MultiPhraseQuery.Builder();\n    expectThrows(IllegalArgumentException.class, () -> {\n      query4builder.add(new Term(\"field1\", \"foo\"));\n      query4builder.add(new Term(\"field2\", \"foobar\"));\n    });\n    \n    writer.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testPhrasePrefix() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    add(\"blueberry pie\", writer);\n    add(\"blueberry strudel\", writer);\n    add(\"blueberry pizza\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"bluebird pizza\", writer);\n    add(\"bluebird foobar pizza\", writer);\n    add(\"piccadilly circus\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for \"blueberry pi*\":\n    MultiPhraseQuery query1 = new MultiPhraseQuery();\n    // search for \"strawberry pi*\":\n    MultiPhraseQuery query2 = new MultiPhraseQuery();\n    query1.add(new Term(\"body\", \"blueberry\"));\n    query2.add(new Term(\"body\", \"strawberry\"));\n    \n    LinkedList<Term> termsWithPrefix = new LinkedList<>();\n    \n    // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n    String prefix = \"pi\";\n    TermsEnum te = MultiFields.getFields(reader).terms(\"body\").iterator();\n    te.seekCeil(new BytesRef(prefix));\n    do {\n      String s = te.term().utf8ToString();\n      if (s.startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", s));\n      } else {\n        break;\n      }\n    } while (te.next() != null);\n    \n    query1.add(termsWithPrefix.toArray(new Term[0]));\n    assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n    query2.add(termsWithPrefix.toArray(new Term[0]));\n    assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2\n        .toString());\n    \n    ScoreDoc[] result;\n    result = searcher.search(query1, 1000).scoreDocs;\n    assertEquals(2, result.length);\n    result = searcher.search(query2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    // search for \"blue* pizza\":\n    MultiPhraseQuery query3 = new MultiPhraseQuery();\n    termsWithPrefix.clear();\n    prefix = \"blue\";\n    te.seekCeil(new BytesRef(prefix));\n    \n    do {\n      if (te.term().utf8ToString().startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", te.term().utf8ToString()));\n      }\n    } while (te.next() != null);\n    \n    query3.add(termsWithPrefix.toArray(new Term[0]));\n    query3.add(new Term(\"body\", \"pizza\"));\n    \n    result = searcher.search(query3, 1000).scoreDocs;\n    assertEquals(2, result.length); // blueberry pizza, bluebird pizza\n    assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n    \n    // test slop:\n    query3.setSlop(1);\n    result = searcher.search(query3, 1000).scoreDocs;\n    \n    // just make sure no exc:\n    searcher.explain(query3, 0);\n    \n    assertEquals(3, result.length); // blueberry pizza, bluebird pizza, bluebird\n                                    // foobar pizza\n    \n    MultiPhraseQuery query4 = new MultiPhraseQuery();\n    expectThrows(IllegalArgumentException.class, () -> {\n      query4.add(new Term(\"field1\", \"foo\"));\n      query4.add(new Term(\"field2\", \"foobar\"));\n    });\n    \n    writer.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b","date":1497408244,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","sourceNew":"  public void testPhrasePrefix() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    add(\"blueberry pie\", writer);\n    add(\"blueberry strudel\", writer);\n    add(\"blueberry pizza\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"bluebird pizza\", writer);\n    add(\"bluebird foobar pizza\", writer);\n    add(\"piccadilly circus\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for \"blueberry pi*\":\n    MultiPhraseQuery.Builder query1builder = new MultiPhraseQuery.Builder();\n    // search for \"strawberry pi*\":\n    MultiPhraseQuery.Builder query2builder = new MultiPhraseQuery.Builder();\n    query1builder.add(new Term(\"body\", \"blueberry\"));\n    query2builder.add(new Term(\"body\", \"strawberry\"));\n    \n    LinkedList<Term> termsWithPrefix = new LinkedList<>();\n    \n    // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n    String prefix = \"pi\";\n    TermsEnum te = MultiFields.getTerms(reader,\"body\").iterator();\n    te.seekCeil(new BytesRef(prefix));\n    do {\n      String s = te.term().utf8ToString();\n      if (s.startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", s));\n      } else {\n        break;\n      }\n    } while (te.next() != null);\n    \n    query1builder.add(termsWithPrefix.toArray(new Term[0]));\n    MultiPhraseQuery query1 = query1builder.build();\n    assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n    \n    query2builder.add(termsWithPrefix.toArray(new Term[0]));\n    MultiPhraseQuery query2 = query2builder.build();\n    assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2.toString());\n    \n    ScoreDoc[] result;\n    result = searcher.search(query1, 1000).scoreDocs;\n    assertEquals(2, result.length);\n    result = searcher.search(query2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    // search for \"blue* pizza\":\n    MultiPhraseQuery.Builder query3builder = new MultiPhraseQuery.Builder();\n    termsWithPrefix.clear();\n    prefix = \"blue\";\n    te.seekCeil(new BytesRef(prefix));\n    \n    do {\n      if (te.term().utf8ToString().startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", te.term().utf8ToString()));\n      }\n    } while (te.next() != null);\n    \n    query3builder.add(termsWithPrefix.toArray(new Term[0]));\n    query3builder.add(new Term(\"body\", \"pizza\"));\n    \n    MultiPhraseQuery query3 = query3builder.build();\n    \n    result = searcher.search(query3, 1000).scoreDocs;\n    assertEquals(2, result.length); // blueberry pizza, bluebird pizza\n    assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n    \n    // test slop:\n    query3builder.setSlop(1);\n    query3 = query3builder.build();\n    result = searcher.search(query3, 1000).scoreDocs;\n    \n    // just make sure no exc:\n    searcher.explain(query3, 0);\n    \n    assertEquals(3, result.length); // blueberry pizza, bluebird pizza, bluebird\n                                    // foobar pizza\n    \n    MultiPhraseQuery.Builder query4builder = new MultiPhraseQuery.Builder();\n    expectThrows(IllegalArgumentException.class, () -> {\n      query4builder.add(new Term(\"field1\", \"foo\"));\n      query4builder.add(new Term(\"field2\", \"foobar\"));\n    });\n    \n    writer.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testPhrasePrefix() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    add(\"blueberry pie\", writer);\n    add(\"blueberry strudel\", writer);\n    add(\"blueberry pizza\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"bluebird pizza\", writer);\n    add(\"bluebird foobar pizza\", writer);\n    add(\"piccadilly circus\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for \"blueberry pi*\":\n    MultiPhraseQuery.Builder query1builder = new MultiPhraseQuery.Builder();\n    // search for \"strawberry pi*\":\n    MultiPhraseQuery.Builder query2builder = new MultiPhraseQuery.Builder();\n    query1builder.add(new Term(\"body\", \"blueberry\"));\n    query2builder.add(new Term(\"body\", \"strawberry\"));\n    \n    LinkedList<Term> termsWithPrefix = new LinkedList<>();\n    \n    // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n    String prefix = \"pi\";\n    TermsEnum te = MultiFields.getFields(reader).terms(\"body\").iterator();\n    te.seekCeil(new BytesRef(prefix));\n    do {\n      String s = te.term().utf8ToString();\n      if (s.startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", s));\n      } else {\n        break;\n      }\n    } while (te.next() != null);\n    \n    query1builder.add(termsWithPrefix.toArray(new Term[0]));\n    MultiPhraseQuery query1 = query1builder.build();\n    assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n    \n    query2builder.add(termsWithPrefix.toArray(new Term[0]));\n    MultiPhraseQuery query2 = query2builder.build();\n    assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2.toString());\n    \n    ScoreDoc[] result;\n    result = searcher.search(query1, 1000).scoreDocs;\n    assertEquals(2, result.length);\n    result = searcher.search(query2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    // search for \"blue* pizza\":\n    MultiPhraseQuery.Builder query3builder = new MultiPhraseQuery.Builder();\n    termsWithPrefix.clear();\n    prefix = \"blue\";\n    te.seekCeil(new BytesRef(prefix));\n    \n    do {\n      if (te.term().utf8ToString().startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", te.term().utf8ToString()));\n      }\n    } while (te.next() != null);\n    \n    query3builder.add(termsWithPrefix.toArray(new Term[0]));\n    query3builder.add(new Term(\"body\", \"pizza\"));\n    \n    MultiPhraseQuery query3 = query3builder.build();\n    \n    result = searcher.search(query3, 1000).scoreDocs;\n    assertEquals(2, result.length); // blueberry pizza, bluebird pizza\n    assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n    \n    // test slop:\n    query3builder.setSlop(1);\n    query3 = query3builder.build();\n    result = searcher.search(query3, 1000).scoreDocs;\n    \n    // just make sure no exc:\n    searcher.explain(query3, 0);\n    \n    assertEquals(3, result.length); // blueberry pizza, bluebird pizza, bluebird\n                                    // foobar pizza\n    \n    MultiPhraseQuery.Builder query4builder = new MultiPhraseQuery.Builder();\n    expectThrows(IllegalArgumentException.class, () -> {\n      query4builder.add(new Term(\"field1\", \"foo\"));\n      query4builder.add(new Term(\"field2\", \"foobar\"));\n    });\n    \n    writer.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","sourceNew":"  public void testPhrasePrefix() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    add(\"blueberry pie\", writer);\n    add(\"blueberry strudel\", writer);\n    add(\"blueberry pizza\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"bluebird pizza\", writer);\n    add(\"bluebird foobar pizza\", writer);\n    add(\"piccadilly circus\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for \"blueberry pi*\":\n    MultiPhraseQuery.Builder query1builder = new MultiPhraseQuery.Builder();\n    // search for \"strawberry pi*\":\n    MultiPhraseQuery.Builder query2builder = new MultiPhraseQuery.Builder();\n    query1builder.add(new Term(\"body\", \"blueberry\"));\n    query2builder.add(new Term(\"body\", \"strawberry\"));\n    \n    LinkedList<Term> termsWithPrefix = new LinkedList<>();\n    \n    // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n    String prefix = \"pi\";\n    TermsEnum te = MultiFields.getTerms(reader,\"body\").iterator();\n    te.seekCeil(new BytesRef(prefix));\n    do {\n      String s = te.term().utf8ToString();\n      if (s.startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", s));\n      } else {\n        break;\n      }\n    } while (te.next() != null);\n    \n    query1builder.add(termsWithPrefix.toArray(new Term[0]));\n    MultiPhraseQuery query1 = query1builder.build();\n    assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n    \n    query2builder.add(termsWithPrefix.toArray(new Term[0]));\n    MultiPhraseQuery query2 = query2builder.build();\n    assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2.toString());\n    \n    ScoreDoc[] result;\n    result = searcher.search(query1, 1000).scoreDocs;\n    assertEquals(2, result.length);\n    result = searcher.search(query2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    // search for \"blue* pizza\":\n    MultiPhraseQuery.Builder query3builder = new MultiPhraseQuery.Builder();\n    termsWithPrefix.clear();\n    prefix = \"blue\";\n    te.seekCeil(new BytesRef(prefix));\n    \n    do {\n      if (te.term().utf8ToString().startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", te.term().utf8ToString()));\n      }\n    } while (te.next() != null);\n    \n    query3builder.add(termsWithPrefix.toArray(new Term[0]));\n    query3builder.add(new Term(\"body\", \"pizza\"));\n    \n    MultiPhraseQuery query3 = query3builder.build();\n    \n    result = searcher.search(query3, 1000).scoreDocs;\n    assertEquals(2, result.length); // blueberry pizza, bluebird pizza\n    assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n    \n    // test slop:\n    query3builder.setSlop(1);\n    query3 = query3builder.build();\n    result = searcher.search(query3, 1000).scoreDocs;\n    \n    // just make sure no exc:\n    searcher.explain(query3, 0);\n    \n    assertEquals(3, result.length); // blueberry pizza, bluebird pizza, bluebird\n                                    // foobar pizza\n    \n    MultiPhraseQuery.Builder query4builder = new MultiPhraseQuery.Builder();\n    expectThrows(IllegalArgumentException.class, () -> {\n      query4builder.add(new Term(\"field1\", \"foo\"));\n      query4builder.add(new Term(\"field2\", \"foobar\"));\n    });\n    \n    writer.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testPhrasePrefix() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    add(\"blueberry pie\", writer);\n    add(\"blueberry strudel\", writer);\n    add(\"blueberry pizza\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"bluebird pizza\", writer);\n    add(\"bluebird foobar pizza\", writer);\n    add(\"piccadilly circus\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for \"blueberry pi*\":\n    MultiPhraseQuery.Builder query1builder = new MultiPhraseQuery.Builder();\n    // search for \"strawberry pi*\":\n    MultiPhraseQuery.Builder query2builder = new MultiPhraseQuery.Builder();\n    query1builder.add(new Term(\"body\", \"blueberry\"));\n    query2builder.add(new Term(\"body\", \"strawberry\"));\n    \n    LinkedList<Term> termsWithPrefix = new LinkedList<>();\n    \n    // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n    String prefix = \"pi\";\n    TermsEnum te = MultiFields.getFields(reader).terms(\"body\").iterator();\n    te.seekCeil(new BytesRef(prefix));\n    do {\n      String s = te.term().utf8ToString();\n      if (s.startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", s));\n      } else {\n        break;\n      }\n    } while (te.next() != null);\n    \n    query1builder.add(termsWithPrefix.toArray(new Term[0]));\n    MultiPhraseQuery query1 = query1builder.build();\n    assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n    \n    query2builder.add(termsWithPrefix.toArray(new Term[0]));\n    MultiPhraseQuery query2 = query2builder.build();\n    assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2.toString());\n    \n    ScoreDoc[] result;\n    result = searcher.search(query1, 1000).scoreDocs;\n    assertEquals(2, result.length);\n    result = searcher.search(query2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    // search for \"blue* pizza\":\n    MultiPhraseQuery.Builder query3builder = new MultiPhraseQuery.Builder();\n    termsWithPrefix.clear();\n    prefix = \"blue\";\n    te.seekCeil(new BytesRef(prefix));\n    \n    do {\n      if (te.term().utf8ToString().startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", te.term().utf8ToString()));\n      }\n    } while (te.next() != null);\n    \n    query3builder.add(termsWithPrefix.toArray(new Term[0]));\n    query3builder.add(new Term(\"body\", \"pizza\"));\n    \n    MultiPhraseQuery query3 = query3builder.build();\n    \n    result = searcher.search(query3, 1000).scoreDocs;\n    assertEquals(2, result.length); // blueberry pizza, bluebird pizza\n    assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n    \n    // test slop:\n    query3builder.setSlop(1);\n    query3 = query3builder.build();\n    result = searcher.search(query3, 1000).scoreDocs;\n    \n    // just make sure no exc:\n    searcher.explain(query3, 0);\n    \n    assertEquals(3, result.length); // blueberry pizza, bluebird pizza, bluebird\n                                    // foobar pizza\n    \n    MultiPhraseQuery.Builder query4builder = new MultiPhraseQuery.Builder();\n    expectThrows(IllegalArgumentException.class, () -> {\n      query4builder.add(new Term(\"field1\", \"foo\"));\n      query4builder.add(new Term(\"field2\", \"foobar\"));\n    });\n    \n    writer.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","sourceNew":"  public void testPhrasePrefix() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    add(\"blueberry pie\", writer);\n    add(\"blueberry strudel\", writer);\n    add(\"blueberry pizza\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"bluebird pizza\", writer);\n    add(\"bluebird foobar pizza\", writer);\n    add(\"piccadilly circus\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for \"blueberry pi*\":\n    MultiPhraseQuery.Builder query1builder = new MultiPhraseQuery.Builder();\n    // search for \"strawberry pi*\":\n    MultiPhraseQuery.Builder query2builder = new MultiPhraseQuery.Builder();\n    query1builder.add(new Term(\"body\", \"blueberry\"));\n    query2builder.add(new Term(\"body\", \"strawberry\"));\n    \n    LinkedList<Term> termsWithPrefix = new LinkedList<>();\n    \n    // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n    String prefix = \"pi\";\n    TermsEnum te = MultiFields.getTerms(reader,\"body\").iterator();\n    te.seekCeil(new BytesRef(prefix));\n    do {\n      String s = te.term().utf8ToString();\n      if (s.startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", s));\n      } else {\n        break;\n      }\n    } while (te.next() != null);\n    \n    query1builder.add(termsWithPrefix.toArray(new Term[0]));\n    MultiPhraseQuery query1 = query1builder.build();\n    assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n    \n    query2builder.add(termsWithPrefix.toArray(new Term[0]));\n    MultiPhraseQuery query2 = query2builder.build();\n    assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2.toString());\n    \n    ScoreDoc[] result;\n    result = searcher.search(query1, 1000).scoreDocs;\n    assertEquals(2, result.length);\n    result = searcher.search(query2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    // search for \"blue* pizza\":\n    MultiPhraseQuery.Builder query3builder = new MultiPhraseQuery.Builder();\n    termsWithPrefix.clear();\n    prefix = \"blue\";\n    te.seekCeil(new BytesRef(prefix));\n    \n    do {\n      if (te.term().utf8ToString().startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", te.term().utf8ToString()));\n      }\n    } while (te.next() != null);\n    \n    query3builder.add(termsWithPrefix.toArray(new Term[0]));\n    query3builder.add(new Term(\"body\", \"pizza\"));\n    \n    MultiPhraseQuery query3 = query3builder.build();\n    \n    result = searcher.search(query3, 1000).scoreDocs;\n    assertEquals(2, result.length); // blueberry pizza, bluebird pizza\n    assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n    \n    // test slop:\n    query3builder.setSlop(1);\n    query3 = query3builder.build();\n    result = searcher.search(query3, 1000).scoreDocs;\n    \n    // just make sure no exc:\n    searcher.explain(query3, 0);\n    \n    assertEquals(3, result.length); // blueberry pizza, bluebird pizza, bluebird\n                                    // foobar pizza\n    \n    MultiPhraseQuery.Builder query4builder = new MultiPhraseQuery.Builder();\n    expectThrows(IllegalArgumentException.class, () -> {\n      query4builder.add(new Term(\"field1\", \"foo\"));\n      query4builder.add(new Term(\"field2\", \"foobar\"));\n    });\n    \n    writer.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testPhrasePrefix() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    add(\"blueberry pie\", writer);\n    add(\"blueberry strudel\", writer);\n    add(\"blueberry pizza\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"bluebird pizza\", writer);\n    add(\"bluebird foobar pizza\", writer);\n    add(\"piccadilly circus\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for \"blueberry pi*\":\n    MultiPhraseQuery.Builder query1builder = new MultiPhraseQuery.Builder();\n    // search for \"strawberry pi*\":\n    MultiPhraseQuery.Builder query2builder = new MultiPhraseQuery.Builder();\n    query1builder.add(new Term(\"body\", \"blueberry\"));\n    query2builder.add(new Term(\"body\", \"strawberry\"));\n    \n    LinkedList<Term> termsWithPrefix = new LinkedList<>();\n    \n    // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n    String prefix = \"pi\";\n    TermsEnum te = MultiFields.getFields(reader).terms(\"body\").iterator();\n    te.seekCeil(new BytesRef(prefix));\n    do {\n      String s = te.term().utf8ToString();\n      if (s.startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", s));\n      } else {\n        break;\n      }\n    } while (te.next() != null);\n    \n    query1builder.add(termsWithPrefix.toArray(new Term[0]));\n    MultiPhraseQuery query1 = query1builder.build();\n    assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n    \n    query2builder.add(termsWithPrefix.toArray(new Term[0]));\n    MultiPhraseQuery query2 = query2builder.build();\n    assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2.toString());\n    \n    ScoreDoc[] result;\n    result = searcher.search(query1, 1000).scoreDocs;\n    assertEquals(2, result.length);\n    result = searcher.search(query2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    // search for \"blue* pizza\":\n    MultiPhraseQuery.Builder query3builder = new MultiPhraseQuery.Builder();\n    termsWithPrefix.clear();\n    prefix = \"blue\";\n    te.seekCeil(new BytesRef(prefix));\n    \n    do {\n      if (te.term().utf8ToString().startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", te.term().utf8ToString()));\n      }\n    } while (te.next() != null);\n    \n    query3builder.add(termsWithPrefix.toArray(new Term[0]));\n    query3builder.add(new Term(\"body\", \"pizza\"));\n    \n    MultiPhraseQuery query3 = query3builder.build();\n    \n    result = searcher.search(query3, 1000).scoreDocs;\n    assertEquals(2, result.length); // blueberry pizza, bluebird pizza\n    assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n    \n    // test slop:\n    query3builder.setSlop(1);\n    query3 = query3builder.build();\n    result = searcher.search(query3, 1000).scoreDocs;\n    \n    // just make sure no exc:\n    searcher.explain(query3, 0);\n    \n    assertEquals(3, result.length); // blueberry pizza, bluebird pizza, bluebird\n                                    // foobar pizza\n    \n    MultiPhraseQuery.Builder query4builder = new MultiPhraseQuery.Builder();\n    expectThrows(IllegalArgumentException.class, () -> {\n      query4builder.add(new Term(\"field1\", \"foo\"));\n      query4builder.add(new Term(\"field2\", \"foobar\"));\n    });\n    \n    writer.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","sourceNew":"  public void testPhrasePrefix() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    add(\"blueberry pie\", writer);\n    add(\"blueberry strudel\", writer);\n    add(\"blueberry pizza\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"bluebird pizza\", writer);\n    add(\"bluebird foobar pizza\", writer);\n    add(\"piccadilly circus\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for \"blueberry pi*\":\n    MultiPhraseQuery.Builder query1builder = new MultiPhraseQuery.Builder();\n    // search for \"strawberry pi*\":\n    MultiPhraseQuery.Builder query2builder = new MultiPhraseQuery.Builder();\n    query1builder.add(new Term(\"body\", \"blueberry\"));\n    query2builder.add(new Term(\"body\", \"strawberry\"));\n    \n    LinkedList<Term> termsWithPrefix = new LinkedList<>();\n    \n    // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n    String prefix = \"pi\";\n    TermsEnum te = MultiTerms.getTerms(reader,\"body\").iterator();\n    te.seekCeil(new BytesRef(prefix));\n    do {\n      String s = te.term().utf8ToString();\n      if (s.startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", s));\n      } else {\n        break;\n      }\n    } while (te.next() != null);\n    \n    query1builder.add(termsWithPrefix.toArray(new Term[0]));\n    MultiPhraseQuery query1 = query1builder.build();\n    assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n    \n    query2builder.add(termsWithPrefix.toArray(new Term[0]));\n    MultiPhraseQuery query2 = query2builder.build();\n    assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2.toString());\n    \n    ScoreDoc[] result;\n    result = searcher.search(query1, 1000).scoreDocs;\n    assertEquals(2, result.length);\n    result = searcher.search(query2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    // search for \"blue* pizza\":\n    MultiPhraseQuery.Builder query3builder = new MultiPhraseQuery.Builder();\n    termsWithPrefix.clear();\n    prefix = \"blue\";\n    te.seekCeil(new BytesRef(prefix));\n    \n    do {\n      if (te.term().utf8ToString().startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", te.term().utf8ToString()));\n      }\n    } while (te.next() != null);\n    \n    query3builder.add(termsWithPrefix.toArray(new Term[0]));\n    query3builder.add(new Term(\"body\", \"pizza\"));\n    \n    MultiPhraseQuery query3 = query3builder.build();\n    \n    result = searcher.search(query3, 1000).scoreDocs;\n    assertEquals(2, result.length); // blueberry pizza, bluebird pizza\n    assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n    \n    // test slop:\n    query3builder.setSlop(1);\n    query3 = query3builder.build();\n    result = searcher.search(query3, 1000).scoreDocs;\n    \n    // just make sure no exc:\n    searcher.explain(query3, 0);\n    \n    assertEquals(3, result.length); // blueberry pizza, bluebird pizza, bluebird\n                                    // foobar pizza\n    \n    MultiPhraseQuery.Builder query4builder = new MultiPhraseQuery.Builder();\n    expectThrows(IllegalArgumentException.class, () -> {\n      query4builder.add(new Term(\"field1\", \"foo\"));\n      query4builder.add(new Term(\"field2\", \"foobar\"));\n    });\n    \n    writer.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testPhrasePrefix() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    add(\"blueberry pie\", writer);\n    add(\"blueberry strudel\", writer);\n    add(\"blueberry pizza\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"bluebird pizza\", writer);\n    add(\"bluebird foobar pizza\", writer);\n    add(\"piccadilly circus\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for \"blueberry pi*\":\n    MultiPhraseQuery.Builder query1builder = new MultiPhraseQuery.Builder();\n    // search for \"strawberry pi*\":\n    MultiPhraseQuery.Builder query2builder = new MultiPhraseQuery.Builder();\n    query1builder.add(new Term(\"body\", \"blueberry\"));\n    query2builder.add(new Term(\"body\", \"strawberry\"));\n    \n    LinkedList<Term> termsWithPrefix = new LinkedList<>();\n    \n    // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n    String prefix = \"pi\";\n    TermsEnum te = MultiFields.getTerms(reader,\"body\").iterator();\n    te.seekCeil(new BytesRef(prefix));\n    do {\n      String s = te.term().utf8ToString();\n      if (s.startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", s));\n      } else {\n        break;\n      }\n    } while (te.next() != null);\n    \n    query1builder.add(termsWithPrefix.toArray(new Term[0]));\n    MultiPhraseQuery query1 = query1builder.build();\n    assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n    \n    query2builder.add(termsWithPrefix.toArray(new Term[0]));\n    MultiPhraseQuery query2 = query2builder.build();\n    assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2.toString());\n    \n    ScoreDoc[] result;\n    result = searcher.search(query1, 1000).scoreDocs;\n    assertEquals(2, result.length);\n    result = searcher.search(query2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    // search for \"blue* pizza\":\n    MultiPhraseQuery.Builder query3builder = new MultiPhraseQuery.Builder();\n    termsWithPrefix.clear();\n    prefix = \"blue\";\n    te.seekCeil(new BytesRef(prefix));\n    \n    do {\n      if (te.term().utf8ToString().startsWith(prefix)) {\n        termsWithPrefix.add(new Term(\"body\", te.term().utf8ToString()));\n      }\n    } while (te.next() != null);\n    \n    query3builder.add(termsWithPrefix.toArray(new Term[0]));\n    query3builder.add(new Term(\"body\", \"pizza\"));\n    \n    MultiPhraseQuery query3 = query3builder.build();\n    \n    result = searcher.search(query3, 1000).scoreDocs;\n    assertEquals(2, result.length); // blueberry pizza, bluebird pizza\n    assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n    \n    // test slop:\n    query3builder.setSlop(1);\n    query3 = query3builder.build();\n    result = searcher.search(query3, 1000).scoreDocs;\n    \n    // just make sure no exc:\n    searcher.explain(query3, 0);\n    \n    assertEquals(3, result.length); // blueberry pizza, bluebird pizza, bluebird\n                                    // foobar pizza\n    \n    MultiPhraseQuery.Builder query4builder = new MultiPhraseQuery.Builder();\n    expectThrows(IllegalArgumentException.class, () -> {\n      query4builder.add(new Term(\"field1\", \"foo\"));\n      query4builder.add(new Term(\"field2\", \"foobar\"));\n    });\n    \n    writer.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"05fe562aa248790944d43cdd478f512572835ba0":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"28288370235ed02234a64753cdbf0c6ec096304a":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b"],"92b4a131f1796dd57cc6698aae3d589d32a29deb":["05fe562aa248790944d43cdd478f512572835ba0"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["28288370235ed02234a64753cdbf0c6ec096304a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["05fe562aa248790944d43cdd478f512572835ba0","92b4a131f1796dd57cc6698aae3d589d32a29deb"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04e775de416dd2d8067b10db1c8af975a1d5017e"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["05fe562aa248790944d43cdd478f512572835ba0"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"05fe562aa248790944d43cdd478f512572835ba0":["92b4a131f1796dd57cc6698aae3d589d32a29deb","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"28288370235ed02234a64753cdbf0c6ec096304a":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"92b4a131f1796dd57cc6698aae3d589d32a29deb":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}