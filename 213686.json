{"path":"lucene/src/java/org/apache/lucene/search/PhraseScorer#phraseFreq().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseScorer#phraseFreq().mjava","pathOld":"src/java/org/apache/lucene/search/PhraseScorer#phraseFreq().mjava","sourceNew":"  /**\n   * For a document containing all the phrase query terms, compute the\n   * frequency of the phrase in that document. \n   * A non zero frequency means a match.\n   * <br>Note, that containing all phrase terms does not guarantee a match - they have to be found in matching locations.  \n   * @return frequency of the phrase in current doc, 0 if not found. \n   */\n  protected abstract float phraseFreq() throws IOException;\n\n","sourceOld":"  /**\n   * For a document containing all the phrase query terms, compute the\n   * frequency of the phrase in that document. \n   * A non zero frequency means a match.\n   * <br>Note, that containing all phrase terms does not guarantee a match - they have to be found in matching locations.  \n   * @return frequency of the phrase in current doc, 0 if not found. \n   */\n  protected abstract float phraseFreq() throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9ff635e6838a2facda02727dec5b77d9e64dc4c","date":1316672863,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseScorer#phraseFreq().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseScorer#phraseFreq().mjava","sourceNew":"  /**\n   * For a document containing all the phrase query terms, compute the\n   * frequency of the phrase in that document. \n   * A non zero frequency means a match.\n   * <br>Note, that containing all phrase terms does not guarantee a match - they have to be found in matching locations.  \n   * @return frequency of the phrase in current doc, 0 if not found. \n   */\n  abstract float phraseFreq() throws IOException;\n\n","sourceOld":"  /**\n   * For a document containing all the phrase query terms, compute the\n   * frequency of the phrase in that document. \n   * A non zero frequency means a match.\n   * <br>Note, that containing all phrase terms does not guarantee a match - they have to be found in matching locations.  \n   * @return frequency of the phrase in current doc, 0 if not found. \n   */\n  protected abstract float phraseFreq() throws IOException;\n\n","bugFix":["15c469602973ef1a33c9a07367a380d278ffab20"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseScorer#phraseFreq().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseScorer#phraseFreq().mjava","sourceNew":"  /**\n   * For a document containing all the phrase query terms, compute the\n   * frequency of the phrase in that document. \n   * A non zero frequency means a match.\n   * <br>Note, that containing all phrase terms does not guarantee a match - they have to be found in matching locations.  \n   * @return frequency of the phrase in current doc, 0 if not found. \n   */\n  abstract float phraseFreq() throws IOException;\n\n","sourceOld":"  /**\n   * For a document containing all the phrase query terms, compute the\n   * frequency of the phrase in that document. \n   * A non zero frequency means a match.\n   * <br>Note, that containing all phrase terms does not guarantee a match - they have to be found in matching locations.  \n   * @return frequency of the phrase in current doc, 0 if not found. \n   */\n  abstract float phraseFreq() throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c9ff635e6838a2facda02727dec5b77d9e64dc4c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c9ff635e6838a2facda02727dec5b77d9e64dc4c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c9ff635e6838a2facda02727dec5b77d9e64dc4c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c9ff635e6838a2facda02727dec5b77d9e64dc4c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}