{"path":"solr/core/src/java/org/apache/solr/core/BlobRepository#getFileContent(BlobContent,String).mjava","commits":[{"id":"0f46a888512a86ee1f37a7682bac9b2f4b38bb5a","date":1456224289,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/BlobRepository#getFileContent(BlobContent,String).mjava","pathOld":"/dev/null","sourceNew":"  public static ByteBuffer getFileContent(BlobContent blobContent, String entryName) throws IOException {\n    ByteArrayInputStream zipContents = new ByteArrayInputStream(blobContent.buffer.array(), blobContent.buffer.arrayOffset(), blobContent.buffer.limit());\n    ZipInputStream zis = new ZipInputStream(zipContents);\n    try {\n      ZipEntry entry;\n      while ((entry = zis.getNextEntry()) != null) {\n        if (entryName == null || entryName.equals(entry.getName())) {\n          SimplePostTool.BAOS out = new SimplePostTool.BAOS();\n          byte[] buffer = new byte[2048];\n          int size;\n          while ((size = zis.read(buffer, 0, buffer.length)) != -1) {\n            out.write(buffer, 0, size);\n          }\n          out.close();\n          return out.getByteBuffer();\n        }\n      }\n    } finally {\n      zis.closeEntry();\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5296efc4b319f5647b606629c093a94b23692c6","date":1456267155,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/BlobRepository#getFileContent(BlobContent,String).mjava","pathOld":"/dev/null","sourceNew":"  public static ByteBuffer getFileContent(BlobContent blobContent, String entryName) throws IOException {\n    ByteArrayInputStream zipContents = new ByteArrayInputStream(blobContent.buffer.array(), blobContent.buffer.arrayOffset(), blobContent.buffer.limit());\n    ZipInputStream zis = new ZipInputStream(zipContents);\n    try {\n      ZipEntry entry;\n      while ((entry = zis.getNextEntry()) != null) {\n        if (entryName == null || entryName.equals(entry.getName())) {\n          SimplePostTool.BAOS out = new SimplePostTool.BAOS();\n          byte[] buffer = new byte[2048];\n          int size;\n          while ((size = zis.read(buffer, 0, buffer.length)) != -1) {\n            out.write(buffer, 0, size);\n          }\n          out.close();\n          return out.getByteBuffer();\n        }\n      }\n    } finally {\n      zis.closeEntry();\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5fab1d180f47e9924e0e56501b42034b3476f2b1","date":1460974879,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/BlobRepository#getFileContent(BlobContent,String).mjava","sourceNew":null,"sourceOld":"  public static ByteBuffer getFileContent(BlobContent blobContent, String entryName) throws IOException {\n    ByteArrayInputStream zipContents = new ByteArrayInputStream(blobContent.buffer.array(), blobContent.buffer.arrayOffset(), blobContent.buffer.limit());\n    ZipInputStream zis = new ZipInputStream(zipContents);\n    try {\n      ZipEntry entry;\n      while ((entry = zis.getNextEntry()) != null) {\n        if (entryName == null || entryName.equals(entry.getName())) {\n          SimplePostTool.BAOS out = new SimplePostTool.BAOS();\n          byte[] buffer = new byte[2048];\n          int size;\n          while ((size = zis.read(buffer, 0, buffer.length)) != -1) {\n            out.write(buffer, 0, size);\n          }\n          out.close();\n          return out.getByteBuffer();\n        }\n      }\n    } finally {\n      zis.closeEntry();\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"713122036535651642e6d4fe57ce12b449e18473","date":1461000510,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/BlobRepository#getFileContent(BlobContent,String).mjava","sourceNew":null,"sourceOld":"  public static ByteBuffer getFileContent(BlobContent blobContent, String entryName) throws IOException {\n    ByteArrayInputStream zipContents = new ByteArrayInputStream(blobContent.buffer.array(), blobContent.buffer.arrayOffset(), blobContent.buffer.limit());\n    ZipInputStream zis = new ZipInputStream(zipContents);\n    try {\n      ZipEntry entry;\n      while ((entry = zis.getNextEntry()) != null) {\n        if (entryName == null || entryName.equals(entry.getName())) {\n          SimplePostTool.BAOS out = new SimplePostTool.BAOS();\n          byte[] buffer = new byte[2048];\n          int size;\n          while ((size = zis.read(buffer, 0, buffer.length)) != -1) {\n            out.write(buffer, 0, size);\n          }\n          out.close();\n          return out.getByteBuffer();\n        }\n      }\n    } finally {\n      zis.closeEntry();\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f46a888512a86ee1f37a7682bac9b2f4b38bb5a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"713122036535651642e6d4fe57ce12b449e18473":["0f46a888512a86ee1f37a7682bac9b2f4b38bb5a","5fab1d180f47e9924e0e56501b42034b3476f2b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5fab1d180f47e9924e0e56501b42034b3476f2b1":["0f46a888512a86ee1f37a7682bac9b2f4b38bb5a"],"a5296efc4b319f5647b606629c093a94b23692c6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0f46a888512a86ee1f37a7682bac9b2f4b38bb5a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["713122036535651642e6d4fe57ce12b449e18473"]},"commit2Childs":{"0f46a888512a86ee1f37a7682bac9b2f4b38bb5a":["713122036535651642e6d4fe57ce12b449e18473","5fab1d180f47e9924e0e56501b42034b3476f2b1","a5296efc4b319f5647b606629c093a94b23692c6"],"713122036535651642e6d4fe57ce12b449e18473":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f46a888512a86ee1f37a7682bac9b2f4b38bb5a","a5296efc4b319f5647b606629c093a94b23692c6"],"5fab1d180f47e9924e0e56501b42034b3476f2b1":["713122036535651642e6d4fe57ce12b449e18473"],"a5296efc4b319f5647b606629c093a94b23692c6":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a5296efc4b319f5647b606629c093a94b23692c6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}