{"path":"solr/core/src/java/org/apache/solr/search/facet/UniqueSinglevaluedSlotAcc#collect(int,int).mjava","commits":[{"id":"1319edcea595da81eb75d406bc82df2c3926862c","date":1463421250,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/UniqueSinglevaluedSlotAcc#collect(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/UniqueSinglevaluedSlotAcc[UniqueSlotAcc]#collect(int,int).mjava","sourceNew":"  @Override\n  public void collect(int doc, int slotNum) {\n    int segOrd = subDv.getOrd(doc);\n    if (segOrd < 0) return;  // -1 means missing\n    int ord = toGlobal==null ? segOrd : (int)toGlobal.get(segOrd);\n\n    FixedBitSet bits = arr[slotNum];\n    if (bits == null) {\n      bits = new FixedBitSet(nTerms);\n      arr[slotNum] = bits;\n    }\n    bits.set(ord);\n  }\n\n","sourceOld":"  @Override\n  public void collect(int doc, int slotNum) {\n    int segOrd = subDv.getOrd(doc);\n    if (segOrd < 0) return;  // -1 means missing\n    int ord = toGlobal==null ? segOrd : (int)toGlobal.get(segOrd);\n\n    FixedBitSet bits = arr[slotNum];\n    if (bits == null) {\n      bits = new FixedBitSet(nTerms);\n      arr[slotNum] = bits;\n    }\n    bits.set(ord);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/UniqueSinglevaluedSlotAcc#collect(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/UniqueSinglevaluedSlotAcc[UniqueSlotAcc]#collect(int,int).mjava","sourceNew":"  @Override\n  public void collect(int doc, int slotNum) {\n    int segOrd = subDv.getOrd(doc);\n    if (segOrd < 0) return;  // -1 means missing\n    int ord = toGlobal==null ? segOrd : (int)toGlobal.get(segOrd);\n\n    FixedBitSet bits = arr[slotNum];\n    if (bits == null) {\n      bits = new FixedBitSet(nTerms);\n      arr[slotNum] = bits;\n    }\n    bits.set(ord);\n  }\n\n","sourceOld":"  @Override\n  public void collect(int doc, int slotNum) {\n    int segOrd = subDv.getOrd(doc);\n    if (segOrd < 0) return;  // -1 means missing\n    int ord = toGlobal==null ? segOrd : (int)toGlobal.get(segOrd);\n\n    FixedBitSet bits = arr[slotNum];\n    if (bits == null) {\n      bits = new FixedBitSet(nTerms);\n      arr[slotNum] = bits;\n    }\n    bits.set(ord);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/UniqueSinglevaluedSlotAcc#collect(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/UniqueSinglevaluedSlotAcc#collect(int,int).mjava","sourceNew":"  @Override\n  public void collect(int doc, int slotNum) throws IOException {\n    if (doc > subDv.docID()) {\n      subDv.advance(doc);\n    }\n    if (doc == subDv.docID()) {\n      int segOrd = subDv.ordValue();\n      int ord = toGlobal==null ? segOrd : (int)toGlobal.get(segOrd);\n\n      FixedBitSet bits = arr[slotNum];\n      if (bits == null) {\n        bits = new FixedBitSet(nTerms);\n        arr[slotNum] = bits;\n      }\n      bits.set(ord);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void collect(int doc, int slotNum) {\n    int segOrd = subDv.getOrd(doc);\n    if (segOrd < 0) return;  // -1 means missing\n    int ord = toGlobal==null ? segOrd : (int)toGlobal.get(segOrd);\n\n    FixedBitSet bits = arr[slotNum];\n    if (bits == null) {\n      bits = new FixedBitSet(nTerms);\n      arr[slotNum] = bits;\n    }\n    bits.set(ord);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/UniqueSinglevaluedSlotAcc#collect(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/UniqueSinglevaluedSlotAcc#collect(int,int).mjava","sourceNew":"  @Override\n  public void collect(int doc, int slotNum) throws IOException {\n    if (doc > subDv.docID()) {\n      subDv.advance(doc);\n    }\n    if (doc == subDv.docID()) {\n      int segOrd = subDv.ordValue();\n      int ord = toGlobal==null ? segOrd : (int)toGlobal.get(segOrd);\n\n      FixedBitSet bits = arr[slotNum];\n      if (bits == null) {\n        bits = new FixedBitSet(nTerms);\n        arr[slotNum] = bits;\n      }\n      bits.set(ord);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void collect(int doc, int slotNum) {\n    int segOrd = subDv.getOrd(doc);\n    if (segOrd < 0) return;  // -1 means missing\n    int ord = toGlobal==null ? segOrd : (int)toGlobal.get(segOrd);\n\n    FixedBitSet bits = arr[slotNum];\n    if (bits == null) {\n      bits = new FixedBitSet(nTerms);\n      arr[slotNum] = bits;\n    }\n    bits.set(ord);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/UniqueSinglevaluedSlotAcc#collect(int,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void collect(int doc, int slotNum) throws IOException {\n    if (doc > subDv.docID()) {\n      subDv.advance(doc);\n    }\n    if (doc == subDv.docID()) {\n      int segOrd = subDv.ordValue();\n      int ord = toGlobal==null ? segOrd : (int)toGlobal.get(segOrd);\n\n      FixedBitSet bits = arr[slotNum];\n      if (bits == null) {\n        bits = new FixedBitSet(nTerms);\n        arr[slotNum] = bits;\n      }\n      bits.set(ord);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79a29c6bd3f9ceeff3a351a23029546d12b66034","date":1525195155,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/UniqueSinglevaluedSlotAcc#collect(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/UniqueSinglevaluedSlotAcc#collect(int,int).mjava","sourceNew":"  @Override\n  public void collect(int doc, int slotNum) throws IOException {\n    if (doc > subDv.docID()) {\n      subDv.advance(doc);\n    }\n    if (doc == subDv.docID()) {\n      int segOrd = subDv.ordValue();\n      int ord = toGlobal==null ? segOrd : (int)toGlobal.get(segOrd);\n\n      collectOrdToSlot(slotNum, ord);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void collect(int doc, int slotNum) throws IOException {\n    if (doc > subDv.docID()) {\n      subDv.advance(doc);\n    }\n    if (doc == subDv.docID()) {\n      int segOrd = subDv.ordValue();\n      int ord = toGlobal==null ? segOrd : (int)toGlobal.get(segOrd);\n\n      FixedBitSet bits = arr[slotNum];\n      if (bits == null) {\n        bits = new FixedBitSet(nTerms);\n        arr[slotNum] = bits;\n      }\n      bits.set(ord);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c705a0d590cf911e7c942df49563ca2ea176e22","date":1526916174,"type":5,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/UniqueSinglevaluedSlotAcc#collect(int,int,IntFunction[SlotContext]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/UniqueSinglevaluedSlotAcc#collect(int,int).mjava","sourceNew":"  @Override\n  public void collect(int doc, int slotNum, IntFunction<SlotContext> slotContext) throws IOException {\n    if (doc > subDv.docID()) {\n      subDv.advance(doc);\n    }\n    if (doc == subDv.docID()) {\n      int segOrd = subDv.ordValue();\n      int ord = toGlobal==null ? segOrd : (int)toGlobal.get(segOrd);\n\n      collectOrdToSlot(slotNum, ord);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void collect(int doc, int slotNum) throws IOException {\n    if (doc > subDv.docID()) {\n      subDv.advance(doc);\n    }\n    if (doc == subDv.docID()) {\n      int segOrd = subDv.ordValue();\n      int ord = toGlobal==null ? segOrd : (int)toGlobal.get(segOrd);\n\n      collectOrdToSlot(slotNum, ord);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2c705a0d590cf911e7c942df49563ca2ea176e22":["79a29c6bd3f9ceeff3a351a23029546d12b66034"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["d470c8182e92b264680e34081b75e70a9f2b3c89","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"1319edcea595da81eb75d406bc82df2c3926862c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"79a29c6bd3f9ceeff3a351a23029546d12b66034":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c705a0d590cf911e7c942df49563ca2ea176e22"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1319edcea595da81eb75d406bc82df2c3926862c"]},"commit2Childs":{"2c705a0d590cf911e7c942df49563ca2ea176e22":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1319edcea595da81eb75d406bc82df2c3926862c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["79a29c6bd3f9ceeff3a351a23029546d12b66034","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"1319edcea595da81eb75d406bc82df2c3926862c":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"79a29c6bd3f9ceeff3a351a23029546d12b66034":["2c705a0d590cf911e7c942df49563ca2ea176e22"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}