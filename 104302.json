{"path":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testRangeFilterRandCollating().mjava","commits":[{"id":"ad74a68eca82ce50fc02b618627a1d3cf9d74433","date":1227959428,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testRangeFilterRandCollating().mjava","pathOld":"/dev/null","sourceNew":"    public void testRangeFilterRandCollating() throws IOException {\n\n        // using the unsigned index because collation seems to ignore hyphens\n        IndexReader reader = IndexReader.open(unsignedIndex.index);\n        IndexSearcher search = new IndexSearcher(reader);\n\n        Collator c = Collator.getInstance(Locale.ENGLISH);\n\n        String minRP = pad(unsignedIndex.minR);\n        String maxRP = pad(unsignedIndex.maxR);\n\n        int numDocs = reader.numDocs();\n\n        assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n\n        Hits result;\n        Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n        // test extremes, bounded on both ends\n\n        result = search.search(q,new RangeFilter(\"rand\",minRP,maxRP,T,T,c));\n        assertEquals(\"find all\", numDocs, result.length());\n\n        result = search.search(q,new RangeFilter(\"rand\",minRP,maxRP,T,F,c));\n        assertEquals(\"all but biggest\", numDocs-1, result.length());\n\n        result = search.search(q,new RangeFilter(\"rand\",minRP,maxRP,F,T,c));\n        assertEquals(\"all but smallest\", numDocs-1, result.length());\n\n        result = search.search(q,new RangeFilter(\"rand\",minRP,maxRP,F,F,c));\n        assertEquals(\"all but extremes\", numDocs-2, result.length());\n\n        // unbounded\n\n        result = search.search(q,new RangeFilter(\"rand\",minRP,null,T,F,c));\n        assertEquals(\"smallest and up\", numDocs, result.length());\n\n        result = search.search(q,new RangeFilter(\"rand\",null,maxRP,F,T,c));\n        assertEquals(\"biggest and down\", numDocs, result.length());\n\n        result = search.search(q,new RangeFilter(\"rand\",minRP,null,F,F,c));\n        assertEquals(\"not smallest, but up\", numDocs-1, result.length());\n\n        result = search.search(q,new RangeFilter(\"rand\",null,maxRP,F,F,c));\n        assertEquals(\"not biggest, but down\", numDocs-1, result.length());\n\n        // very small sets\n\n        result = search.search(q,new RangeFilter(\"rand\",minRP,minRP,F,F,c));\n        assertEquals(\"min,min,F,F\", 0, result.length());\n        result = search.search(q,new RangeFilter(\"rand\",maxRP,maxRP,F,F,c));\n        assertEquals(\"max,max,F,F\", 0, result.length());\n\n        result = search.search(q,new RangeFilter(\"rand\",minRP,minRP,T,T,c));\n        assertEquals(\"min,min,T,T\", 1, result.length());\n        result = search.search(q,new RangeFilter(\"rand\",null,minRP,F,T,c));\n        assertEquals(\"nul,min,F,T\", 1, result.length());\n\n        result = search.search(q,new RangeFilter(\"rand\",maxRP,maxRP,T,T,c));\n        assertEquals(\"max,max,T,T\", 1, result.length());\n        result = search.search(q,new RangeFilter(\"rand\",maxRP,null,T,F,c));\n        assertEquals(\"max,nul,T,T\", 1, result.length());\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3fd920798ed4dd32cd47f16d414a89df5daf626","date":1228161174,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testRangeFilterRandCollating().mjava","sourceNew":null,"sourceOld":"    public void testRangeFilterRandCollating() throws IOException {\n\n        // using the unsigned index because collation seems to ignore hyphens\n        IndexReader reader = IndexReader.open(unsignedIndex.index);\n        IndexSearcher search = new IndexSearcher(reader);\n\n        Collator c = Collator.getInstance(Locale.ENGLISH);\n\n        String minRP = pad(unsignedIndex.minR);\n        String maxRP = pad(unsignedIndex.maxR);\n\n        int numDocs = reader.numDocs();\n\n        assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n\n        Hits result;\n        Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n        // test extremes, bounded on both ends\n\n        result = search.search(q,new RangeFilter(\"rand\",minRP,maxRP,T,T,c));\n        assertEquals(\"find all\", numDocs, result.length());\n\n        result = search.search(q,new RangeFilter(\"rand\",minRP,maxRP,T,F,c));\n        assertEquals(\"all but biggest\", numDocs-1, result.length());\n\n        result = search.search(q,new RangeFilter(\"rand\",minRP,maxRP,F,T,c));\n        assertEquals(\"all but smallest\", numDocs-1, result.length());\n\n        result = search.search(q,new RangeFilter(\"rand\",minRP,maxRP,F,F,c));\n        assertEquals(\"all but extremes\", numDocs-2, result.length());\n\n        // unbounded\n\n        result = search.search(q,new RangeFilter(\"rand\",minRP,null,T,F,c));\n        assertEquals(\"smallest and up\", numDocs, result.length());\n\n        result = search.search(q,new RangeFilter(\"rand\",null,maxRP,F,T,c));\n        assertEquals(\"biggest and down\", numDocs, result.length());\n\n        result = search.search(q,new RangeFilter(\"rand\",minRP,null,F,F,c));\n        assertEquals(\"not smallest, but up\", numDocs-1, result.length());\n\n        result = search.search(q,new RangeFilter(\"rand\",null,maxRP,F,F,c));\n        assertEquals(\"not biggest, but down\", numDocs-1, result.length());\n\n        // very small sets\n\n        result = search.search(q,new RangeFilter(\"rand\",minRP,minRP,F,F,c));\n        assertEquals(\"min,min,F,F\", 0, result.length());\n        result = search.search(q,new RangeFilter(\"rand\",maxRP,maxRP,F,F,c));\n        assertEquals(\"max,max,F,F\", 0, result.length());\n\n        result = search.search(q,new RangeFilter(\"rand\",minRP,minRP,T,T,c));\n        assertEquals(\"min,min,T,T\", 1, result.length());\n        result = search.search(q,new RangeFilter(\"rand\",null,minRP,F,T,c));\n        assertEquals(\"nul,min,F,T\", 1, result.length());\n\n        result = search.search(q,new RangeFilter(\"rand\",maxRP,maxRP,T,T,c));\n        assertEquals(\"max,max,T,T\", 1, result.length());\n        result = search.search(q,new RangeFilter(\"rand\",maxRP,null,T,F,c));\n        assertEquals(\"max,nul,T,T\", 1, result.length());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad74a68eca82ce50fc02b618627a1d3cf9d74433":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e3fd920798ed4dd32cd47f16d414a89df5daf626":["ad74a68eca82ce50fc02b618627a1d3cf9d74433"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e3fd920798ed4dd32cd47f16d414a89df5daf626"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ad74a68eca82ce50fc02b618627a1d3cf9d74433"],"ad74a68eca82ce50fc02b618627a1d3cf9d74433":["e3fd920798ed4dd32cd47f16d414a89df5daf626"],"e3fd920798ed4dd32cd47f16d414a89df5daf626":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}