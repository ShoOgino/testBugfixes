{"path":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/nodes/NumericRangeQueryNode#setBounds(NumericQueryNode,NumericQueryNode,boolean,boolean,NumericConfig).mjava","commits":[{"id":"a7e86426ca0513cfc495c3a2c0bb0c7abe03988d","date":1310245513,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/nodes/NumericRangeQueryNode#setBounds(NumericQueryNode,NumericQueryNode,boolean,boolean,NumericConfig).mjava","pathOld":"/dev/null","sourceNew":"  public void setBounds(NumericQueryNode lower, NumericQueryNode upper,\n      boolean lowerInclusive, boolean upperInclusive, NumericConfig numericConfig) throws QueryNodeException {\n    \n    if (numericConfig == null) {\n      throw new IllegalArgumentException(\"numericConfig cannot be null!\");\n    }\n    \n    NumericField.DataType lowerNumberType, upperNumberType;\n    \n    if (lower != null && lower.getValue() != null) {\n      lowerNumberType = getNumericDataType(lower.getValue());\n    } else {\n      lowerNumberType = null;\n    }\n    \n    if (upper != null && upper.getValue() != null) {\n      upperNumberType = getNumericDataType(upper.getValue());\n    } else {\n      upperNumberType = null;\n    }\n    \n    if (lowerNumberType != null\n        && !lowerNumberType.equals(numericConfig.getType())) {\n      throw new IllegalArgumentException(\n          \"lower value's type should be the same as numericConfig type: \"\n              + lowerNumberType + \" != \" + numericConfig.getType());\n    }\n    \n    if (upperNumberType != null\n        && !upperNumberType.equals(numericConfig.getType())) {\n      throw new IllegalArgumentException(\n          \"upper value's type should be the same as numericConfig type: \"\n              + upperNumberType + \" != \" + numericConfig.getType());\n    }\n    \n    super.setBounds(lower, upper, lowerInclusive, upperInclusive);\n    this.numericConfig = numericConfig;\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a78a90fc9701e511308346ea29f4f5e548bb39fe","ad0d09e969f4763b0df4230f8e3f74357872a4e4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/NumericRangeQueryNode#setBounds(NumericQueryNode,NumericQueryNode,boolean,boolean,NumericConfig).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/nodes/NumericRangeQueryNode#setBounds(NumericQueryNode,NumericQueryNode,boolean,boolean,NumericConfig).mjava","sourceNew":"  public void setBounds(NumericQueryNode lower, NumericQueryNode upper,\n      boolean lowerInclusive, boolean upperInclusive, NumericConfig numericConfig) throws QueryNodeException {\n    \n    if (numericConfig == null) {\n      throw new IllegalArgumentException(\"numericConfig cannot be null!\");\n    }\n    \n    NumericField.DataType lowerNumberType, upperNumberType;\n    \n    if (lower != null && lower.getValue() != null) {\n      lowerNumberType = getNumericDataType(lower.getValue());\n    } else {\n      lowerNumberType = null;\n    }\n    \n    if (upper != null && upper.getValue() != null) {\n      upperNumberType = getNumericDataType(upper.getValue());\n    } else {\n      upperNumberType = null;\n    }\n    \n    if (lowerNumberType != null\n        && !lowerNumberType.equals(numericConfig.getType())) {\n      throw new IllegalArgumentException(\n          \"lower value's type should be the same as numericConfig type: \"\n              + lowerNumberType + \" != \" + numericConfig.getType());\n    }\n    \n    if (upperNumberType != null\n        && !upperNumberType.equals(numericConfig.getType())) {\n      throw new IllegalArgumentException(\n          \"upper value's type should be the same as numericConfig type: \"\n              + upperNumberType + \" != \" + numericConfig.getType());\n    }\n    \n    super.setBounds(lower, upper, lowerInclusive, upperInclusive);\n    this.numericConfig = numericConfig;\n    \n  }\n\n","sourceOld":"  public void setBounds(NumericQueryNode lower, NumericQueryNode upper,\n      boolean lowerInclusive, boolean upperInclusive, NumericConfig numericConfig) throws QueryNodeException {\n    \n    if (numericConfig == null) {\n      throw new IllegalArgumentException(\"numericConfig cannot be null!\");\n    }\n    \n    NumericField.DataType lowerNumberType, upperNumberType;\n    \n    if (lower != null && lower.getValue() != null) {\n      lowerNumberType = getNumericDataType(lower.getValue());\n    } else {\n      lowerNumberType = null;\n    }\n    \n    if (upper != null && upper.getValue() != null) {\n      upperNumberType = getNumericDataType(upper.getValue());\n    } else {\n      upperNumberType = null;\n    }\n    \n    if (lowerNumberType != null\n        && !lowerNumberType.equals(numericConfig.getType())) {\n      throw new IllegalArgumentException(\n          \"lower value's type should be the same as numericConfig type: \"\n              + lowerNumberType + \" != \" + numericConfig.getType());\n    }\n    \n    if (upperNumberType != null\n        && !upperNumberType.equals(numericConfig.getType())) {\n      throw new IllegalArgumentException(\n          \"upper value's type should be the same as numericConfig type: \"\n              + upperNumberType + \" != \" + numericConfig.getType());\n    }\n    \n    super.setBounds(lower, upper, lowerInclusive, upperInclusive);\n    this.numericConfig = numericConfig;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["a7e86426ca0513cfc495c3a2c0bb0c7abe03988d"],"a7e86426ca0513cfc495c3a2c0bb0c7abe03988d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a7e86426ca0513cfc495c3a2c0bb0c7abe03988d":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a7e86426ca0513cfc495c3a2c0bb0c7abe03988d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}