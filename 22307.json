{"path":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#finish(long,long,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#finish(long,long,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#finish(long,long,int).mjava","sourceNew":"    // Finishes all terms in this field\n    @Override\n    public void finish(long sumTotalTermFreq, long sumDocFreq, int docCount) throws IOException {\n      if (numTerms > 0) {\n        blockBuilder.finish();\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        this.sumTotalTermFreq = sumTotalTermFreq;\n        this.sumDocFreq = sumDocFreq;\n        this.docCount = docCount;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        // if (SAVE_DOT_FILES || DEBUG) {\n        //   final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        //   Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        //   Util.toDot(root.index, w, false, false);\n        //   System.out.println(\"SAVED to \" + dotFileName);\n        //   w.close();\n        // }\n      }\n    }\n\n","sourceOld":"    // Finishes all terms in this field\n    @Override\n    public void finish(long sumTotalTermFreq, long sumDocFreq, int docCount) throws IOException {\n      if (numTerms > 0) {\n        blockBuilder.finish();\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        this.sumTotalTermFreq = sumTotalTermFreq;\n        this.sumDocFreq = sumDocFreq;\n        this.docCount = docCount;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        // if (SAVE_DOT_FILES || DEBUG) {\n        //   final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        //   Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        //   Util.toDot(root.index, w, false, false);\n        //   System.out.println(\"SAVED to \" + dotFileName);\n        //   w.close();\n        // }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42a3c662451bf811842ec3517f82f739b87ea6df","date":1339004506,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#finish(long,long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#finish(long,long,int).mjava","sourceNew":"    // Finishes all terms in this field\n    @Override\n    public void finish(long sumTotalTermFreq, long sumDocFreq, int docCount) throws IOException {\n      if (numTerms > 0) {\n        blockBuilder.finish();\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        this.sumTotalTermFreq = sumTotalTermFreq;\n        this.sumDocFreq = sumDocFreq;\n        this.docCount = docCount;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        // if (SAVE_DOT_FILES || DEBUG) {\n        //   final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        //   Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        //   Util.toDot(root.index, w, false, false);\n        //   System.out.println(\"SAVED to \" + dotFileName);\n        //   w.close();\n        // }\n      } else {\n        assert sumTotalTermFreq == 0;\n        assert sumDocFreq == 0;\n        assert docCount == 0;\n      }\n    }\n\n","sourceOld":"    // Finishes all terms in this field\n    @Override\n    public void finish(long sumTotalTermFreq, long sumDocFreq, int docCount) throws IOException {\n      if (numTerms > 0) {\n        blockBuilder.finish();\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        this.sumTotalTermFreq = sumTotalTermFreq;\n        this.sumDocFreq = sumDocFreq;\n        this.docCount = docCount;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        // if (SAVE_DOT_FILES || DEBUG) {\n        //   final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        //   Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        //   Util.toDot(root.index, w, false, false);\n        //   System.out.println(\"SAVED to \" + dotFileName);\n        //   w.close();\n        // }\n      }\n    }\n\n","bugFix":null,"bugIntro":["29e23e367cc757f42cdfce2bcbf21e68cd209cda"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29e23e367cc757f42cdfce2bcbf21e68cd209cda","date":1343071560,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#finish(long,long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#finish(long,long,int).mjava","sourceNew":"    // Finishes all terms in this field\n    @Override\n    public void finish(long sumTotalTermFreq, long sumDocFreq, int docCount) throws IOException {\n      if (numTerms > 0) {\n        blockBuilder.finish();\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        this.sumTotalTermFreq = sumTotalTermFreq;\n        this.sumDocFreq = sumDocFreq;\n        this.docCount = docCount;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        // if (SAVE_DOT_FILES || DEBUG) {\n        //   final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        //   Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        //   Util.toDot(root.index, w, false, false);\n        //   System.out.println(\"SAVED to \" + dotFileName);\n        //   w.close();\n        // }\n      } else {\n        assert sumTotalTermFreq == 0 || fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY && sumTotalTermFreq == -1;\n        assert sumDocFreq == 0;\n        assert docCount == 0;\n      }\n    }\n\n","sourceOld":"    // Finishes all terms in this field\n    @Override\n    public void finish(long sumTotalTermFreq, long sumDocFreq, int docCount) throws IOException {\n      if (numTerms > 0) {\n        blockBuilder.finish();\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        this.sumTotalTermFreq = sumTotalTermFreq;\n        this.sumDocFreq = sumDocFreq;\n        this.docCount = docCount;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        // if (SAVE_DOT_FILES || DEBUG) {\n        //   final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        //   Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        //   Util.toDot(root.index, w, false, false);\n        //   System.out.println(\"SAVED to \" + dotFileName);\n        //   w.close();\n        // }\n      } else {\n        assert sumTotalTermFreq == 0;\n        assert sumDocFreq == 0;\n        assert docCount == 0;\n      }\n    }\n\n","bugFix":["42a3c662451bf811842ec3517f82f739b87ea6df"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57635ff388fa1bee703f3b892a86a3e48975576a","date":1343077051,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#finish(long,long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#finish(long,long,int).mjava","sourceNew":"    // Finishes all terms in this field\n    @Override\n    public void finish(long sumTotalTermFreq, long sumDocFreq, int docCount) throws IOException {\n      if (numTerms > 0) {\n        blockBuilder.finish();\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        this.sumTotalTermFreq = sumTotalTermFreq;\n        this.sumDocFreq = sumDocFreq;\n        this.docCount = docCount;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        // if (SAVE_DOT_FILES || DEBUG) {\n        //   final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        //   Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        //   Util.toDot(root.index, w, false, false);\n        //   System.out.println(\"SAVED to \" + dotFileName);\n        //   w.close();\n        // }\n      } else {\n        assert sumTotalTermFreq == 0 || fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY && sumTotalTermFreq == -1;\n        assert sumDocFreq == 0;\n        assert docCount == 0;\n      }\n    }\n\n","sourceOld":"    // Finishes all terms in this field\n    @Override\n    public void finish(long sumTotalTermFreq, long sumDocFreq, int docCount) throws IOException {\n      if (numTerms > 0) {\n        blockBuilder.finish();\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        this.sumTotalTermFreq = sumTotalTermFreq;\n        this.sumDocFreq = sumDocFreq;\n        this.docCount = docCount;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        // if (SAVE_DOT_FILES || DEBUG) {\n        //   final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        //   Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        //   Util.toDot(root.index, w, false, false);\n        //   System.out.println(\"SAVED to \" + dotFileName);\n        //   w.close();\n        // }\n      } else {\n        assert sumTotalTermFreq == 0;\n        assert sumDocFreq == 0;\n        assert docCount == 0;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#finish(long,long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#finish(long,long,int).mjava","sourceNew":"    // Finishes all terms in this field\n    @Override\n    public void finish(long sumTotalTermFreq, long sumDocFreq, int docCount) throws IOException {\n      if (numTerms > 0) {\n        blockBuilder.finish();\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        this.sumTotalTermFreq = sumTotalTermFreq;\n        this.sumDocFreq = sumDocFreq;\n        this.docCount = docCount;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        // if (SAVE_DOT_FILES || DEBUG) {\n        //   final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        //   Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        //   Util.toDot(root.index, w, false, false);\n        //   System.out.println(\"SAVED to \" + dotFileName);\n        //   w.close();\n        // }\n      } else {\n        assert sumTotalTermFreq == 0 || fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY && sumTotalTermFreq == -1;\n        assert sumDocFreq == 0;\n        assert docCount == 0;\n      }\n    }\n\n","sourceOld":"    // Finishes all terms in this field\n    @Override\n    public void finish(long sumTotalTermFreq, long sumDocFreq, int docCount) throws IOException {\n      if (numTerms > 0) {\n        blockBuilder.finish();\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        this.sumTotalTermFreq = sumTotalTermFreq;\n        this.sumDocFreq = sumDocFreq;\n        this.docCount = docCount;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        // if (SAVE_DOT_FILES || DEBUG) {\n        //   final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        //   Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        //   Util.toDot(root.index, w, false, false);\n        //   System.out.println(\"SAVED to \" + dotFileName);\n        //   w.close();\n        // }\n      } else {\n        assert sumTotalTermFreq == 0;\n        assert sumDocFreq == 0;\n        assert docCount == 0;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"26867fa391352324254e5eafd1c2d63e3221f4fc","date":1350562745,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#finish(long,long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#finish(long,long,int).mjava","sourceNew":"    // Finishes all terms in this field\n    @Override\n    public void finish(long sumTotalTermFreq, long sumDocFreq, int docCount) throws IOException {\n      if (numTerms > 0) {\n        blockBuilder.finish();\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        this.sumTotalTermFreq = sumTotalTermFreq;\n        this.sumDocFreq = sumDocFreq;\n        this.docCount = docCount;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        // if (SAVE_DOT_FILES || DEBUG) {\n        //   final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        //   Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        //   Util.toDot(root.index, w, false, false);\n        //   System.out.println(\"SAVED to \" + dotFileName);\n        //   w.close();\n        // }\n\n        fields.add(new FieldMetaData(fieldInfo,\n                                     ((PendingBlock) pending.get(0)).index.getEmptyOutput(),\n                                     numTerms,\n                                     indexStartFP,\n                                     sumTotalTermFreq,\n                                     sumDocFreq,\n                                     docCount));\n      } else {\n        assert sumTotalTermFreq == 0 || fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY && sumTotalTermFreq == -1;\n        assert sumDocFreq == 0;\n        assert docCount == 0;\n      }\n    }\n\n","sourceOld":"    // Finishes all terms in this field\n    @Override\n    public void finish(long sumTotalTermFreq, long sumDocFreq, int docCount) throws IOException {\n      if (numTerms > 0) {\n        blockBuilder.finish();\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        this.sumTotalTermFreq = sumTotalTermFreq;\n        this.sumDocFreq = sumDocFreq;\n        this.docCount = docCount;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        // if (SAVE_DOT_FILES || DEBUG) {\n        //   final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        //   Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        //   Util.toDot(root.index, w, false, false);\n        //   System.out.println(\"SAVED to \" + dotFileName);\n        //   w.close();\n        // }\n      } else {\n        assert sumTotalTermFreq == 0 || fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY && sumTotalTermFreq == -1;\n        assert sumDocFreq == 0;\n        assert docCount == 0;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#finish(long,long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#finish(long,long,int).mjava","sourceNew":"    // Finishes all terms in this field\n    @Override\n    public void finish(long sumTotalTermFreq, long sumDocFreq, int docCount) throws IOException {\n      if (numTerms > 0) {\n        blockBuilder.finish();\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        this.sumTotalTermFreq = sumTotalTermFreq;\n        this.sumDocFreq = sumDocFreq;\n        this.docCount = docCount;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        // if (SAVE_DOT_FILES || DEBUG) {\n        //   final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        //   Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        //   Util.toDot(root.index, w, false, false);\n        //   System.out.println(\"SAVED to \" + dotFileName);\n        //   w.close();\n        // }\n\n        fields.add(new FieldMetaData(fieldInfo,\n                                     ((PendingBlock) pending.get(0)).index.getEmptyOutput(),\n                                     numTerms,\n                                     indexStartFP,\n                                     sumTotalTermFreq,\n                                     sumDocFreq,\n                                     docCount));\n      } else {\n        assert sumTotalTermFreq == 0 || fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY && sumTotalTermFreq == -1;\n        assert sumDocFreq == 0;\n        assert docCount == 0;\n      }\n    }\n\n","sourceOld":"    // Finishes all terms in this field\n    @Override\n    public void finish(long sumTotalTermFreq, long sumDocFreq, int docCount) throws IOException {\n      if (numTerms > 0) {\n        blockBuilder.finish();\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        this.sumTotalTermFreq = sumTotalTermFreq;\n        this.sumDocFreq = sumDocFreq;\n        this.docCount = docCount;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        // if (SAVE_DOT_FILES || DEBUG) {\n        //   final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        //   Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        //   Util.toDot(root.index, w, false, false);\n        //   System.out.println(\"SAVED to \" + dotFileName);\n        //   w.close();\n        // }\n      } else {\n        assert sumTotalTermFreq == 0 || fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY && sumTotalTermFreq == -1;\n        assert sumDocFreq == 0;\n        assert docCount == 0;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","date":1377268487,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#finish(long,long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#finish(long,long,int).mjava","sourceNew":"    // Finishes all terms in this field\n    @Override\n    public void finish(long sumTotalTermFreq, long sumDocFreq, int docCount) throws IOException {\n      if (numTerms > 0) {\n        blockBuilder.finish();\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        this.sumTotalTermFreq = sumTotalTermFreq;\n        this.sumDocFreq = sumDocFreq;\n        this.docCount = docCount;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        // if (SAVE_DOT_FILES || DEBUG) {\n        //   final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        //   Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        //   Util.toDot(root.index, w, false, false);\n        //   System.out.println(\"SAVED to \" + dotFileName);\n        //   w.close();\n        // }\n\n        fields.add(new FieldMetaData(fieldInfo,\n                                     ((PendingBlock) pending.get(0)).index.getEmptyOutput(),\n                                     numTerms,\n                                     indexStartFP,\n                                     sumTotalTermFreq,\n                                     sumDocFreq,\n                                     docCount,\n                                     longsSize));\n      } else {\n        assert sumTotalTermFreq == 0 || fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY && sumTotalTermFreq == -1;\n        assert sumDocFreq == 0;\n        assert docCount == 0;\n      }\n    }\n\n","sourceOld":"    // Finishes all terms in this field\n    @Override\n    public void finish(long sumTotalTermFreq, long sumDocFreq, int docCount) throws IOException {\n      if (numTerms > 0) {\n        blockBuilder.finish();\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        this.sumTotalTermFreq = sumTotalTermFreq;\n        this.sumDocFreq = sumDocFreq;\n        this.docCount = docCount;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        // if (SAVE_DOT_FILES || DEBUG) {\n        //   final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        //   Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        //   Util.toDot(root.index, w, false, false);\n        //   System.out.println(\"SAVED to \" + dotFileName);\n        //   w.close();\n        // }\n\n        fields.add(new FieldMetaData(fieldInfo,\n                                     ((PendingBlock) pending.get(0)).index.getEmptyOutput(),\n                                     numTerms,\n                                     indexStartFP,\n                                     sumTotalTermFreq,\n                                     sumDocFreq,\n                                     docCount));\n      } else {\n        assert sumTotalTermFreq == 0 || fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY && sumTotalTermFreq == -1;\n        assert sumDocFreq == 0;\n        assert docCount == 0;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f948dd442d23baa6cbb28daf77c8db78b351329","date":1378742876,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#finish(long,long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#finish(long,long,int).mjava","sourceNew":"    // Finishes all terms in this field\n    @Override\n    public void finish(long sumTotalTermFreq, long sumDocFreq, int docCount) throws IOException {\n      if (numTerms > 0) {\n        blockBuilder.finish();\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        this.sumTotalTermFreq = sumTotalTermFreq;\n        this.sumDocFreq = sumDocFreq;\n        this.docCount = docCount;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        // if (SAVE_DOT_FILES || DEBUG) {\n        //   final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        //   Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        //   Util.toDot(root.index, w, false, false);\n        //   System.out.println(\"SAVED to \" + dotFileName);\n        //   w.close();\n        // }\n\n        fields.add(new FieldMetaData(fieldInfo,\n                                     ((PendingBlock) pending.get(0)).index.getEmptyOutput(),\n                                     numTerms,\n                                     indexStartFP,\n                                     sumTotalTermFreq,\n                                     sumDocFreq,\n                                     docCount,\n                                     longsSize));\n      } else {\n        assert sumTotalTermFreq == 0 || fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY && sumTotalTermFreq == -1;\n        assert sumDocFreq == 0;\n        assert docCount == 0;\n      }\n    }\n\n","sourceOld":"    // Finishes all terms in this field\n    @Override\n    public void finish(long sumTotalTermFreq, long sumDocFreq, int docCount) throws IOException {\n      if (numTerms > 0) {\n        blockBuilder.finish();\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        this.sumTotalTermFreq = sumTotalTermFreq;\n        this.sumDocFreq = sumDocFreq;\n        this.docCount = docCount;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        // if (SAVE_DOT_FILES || DEBUG) {\n        //   final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        //   Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        //   Util.toDot(root.index, w, false, false);\n        //   System.out.println(\"SAVED to \" + dotFileName);\n        //   w.close();\n        // }\n\n        fields.add(new FieldMetaData(fieldInfo,\n                                     ((PendingBlock) pending.get(0)).index.getEmptyOutput(),\n                                     numTerms,\n                                     indexStartFP,\n                                     sumTotalTermFreq,\n                                     sumDocFreq,\n                                     docCount));\n      } else {\n        assert sumTotalTermFreq == 0 || fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY && sumTotalTermFreq == -1;\n        assert sumDocFreq == 0;\n        assert docCount == 0;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa80a35d7c4b2b1e83082b275e3e8328ab93db52","date":1381766157,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#finish(long,long,int).mjava","sourceNew":"    // Finishes all terms in this field\n    public void finish() throws IOException {\n      if (numTerms > 0) {\n        blockBuilder.finish();\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        // if (SAVE_DOT_FILES || DEBUG) {\n        //   final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        //   Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        //   Util.toDot(root.index, w, false, false);\n        //   System.out.println(\"SAVED to \" + dotFileName);\n        //   w.close();\n        // }\n\n        fields.add(new FieldMetaData(fieldInfo,\n                                     ((PendingBlock) pending.get(0)).index.getEmptyOutput(),\n                                     numTerms,\n                                     indexStartFP,\n                                     sumTotalTermFreq,\n                                     sumDocFreq,\n                                     docsSeen.cardinality(),\n                                     longsSize));\n      } else {\n        assert sumTotalTermFreq == 0 || fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY && sumTotalTermFreq == -1;\n        assert sumDocFreq == 0;\n        assert docsSeen.cardinality() == 0;\n      }\n    }\n\n","sourceOld":"    // Finishes all terms in this field\n    @Override\n    public void finish(long sumTotalTermFreq, long sumDocFreq, int docCount) throws IOException {\n      if (numTerms > 0) {\n        blockBuilder.finish();\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        this.sumTotalTermFreq = sumTotalTermFreq;\n        this.sumDocFreq = sumDocFreq;\n        this.docCount = docCount;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        // if (SAVE_DOT_FILES || DEBUG) {\n        //   final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        //   Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        //   Util.toDot(root.index, w, false, false);\n        //   System.out.println(\"SAVED to \" + dotFileName);\n        //   w.close();\n        // }\n\n        fields.add(new FieldMetaData(fieldInfo,\n                                     ((PendingBlock) pending.get(0)).index.getEmptyOutput(),\n                                     numTerms,\n                                     indexStartFP,\n                                     sumTotalTermFreq,\n                                     sumDocFreq,\n                                     docCount,\n                                     longsSize));\n      } else {\n        assert sumTotalTermFreq == 0 || fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY && sumTotalTermFreq == -1;\n        assert sumDocFreq == 0;\n        assert docCount == 0;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["26867fa391352324254e5eafd1c2d63e3221f4fc"],"aba371508186796cc6151d8223a5b4e16d02e26e":["42a3c662451bf811842ec3517f82f739b87ea6df","29e23e367cc757f42cdfce2bcbf21e68cd209cda"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"42a3c662451bf811842ec3517f82f739b87ea6df":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["29e23e367cc757f42cdfce2bcbf21e68cd209cda","26867fa391352324254e5eafd1c2d63e3221f4fc"],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"26867fa391352324254e5eafd1c2d63e3221f4fc":["29e23e367cc757f42cdfce2bcbf21e68cd209cda"],"29e23e367cc757f42cdfce2bcbf21e68cd209cda":["42a3c662451bf811842ec3517f82f739b87ea6df"],"57635ff388fa1bee703f3b892a86a3e48975576a":["42a3c662451bf811842ec3517f82f739b87ea6df","29e23e367cc757f42cdfce2bcbf21e68cd209cda"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["26867fa391352324254e5eafd1c2d63e3221f4fc","1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"]},"commit2Childs":{"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["42a3c662451bf811842ec3517f82f739b87ea6df"],"42a3c662451bf811842ec3517f82f739b87ea6df":["aba371508186796cc6151d8223a5b4e16d02e26e","29e23e367cc757f42cdfce2bcbf21e68cd209cda","57635ff388fa1bee703f3b892a86a3e48975576a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"26867fa391352324254e5eafd1c2d63e3221f4fc":["1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","db4fdbf3d262768eabc027cd8321edca0cd11fa8","2f948dd442d23baa6cbb28daf77c8db78b351329"],"29e23e367cc757f42cdfce2bcbf21e68cd209cda":["aba371508186796cc6151d8223a5b4e16d02e26e","db4fdbf3d262768eabc027cd8321edca0cd11fa8","26867fa391352324254e5eafd1c2d63e3221f4fc","57635ff388fa1bee703f3b892a86a3e48975576a"],"57635ff388fa1bee703f3b892a86a3e48975576a":[],"2f948dd442d23baa6cbb28daf77c8db78b351329":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","db4fdbf3d262768eabc027cd8321edca0cd11fa8","57635ff388fa1bee703f3b892a86a3e48975576a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}