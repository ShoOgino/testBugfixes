{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.LinearCrossingEdgeIterator#LinearCrossingEdgeIterator(Plane,Plane,Plane,Vector).mjava","commits":[{"id":"f9f156572c6e1245055b705603088061b42ab3a1","date":1462449249,"type":1,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.LinearCrossingEdgeIterator#LinearCrossingEdgeIterator(Plane,Plane,Plane,Vector).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.LinearCrossingEdgeIterator#LinearCrossingEdgeIterator(Plane,Plane,Plane,Vector,Vector).mjava","sourceNew":"    public LinearCrossingEdgeIterator(final Plane plane, final Plane abovePlane, final Plane belowPlane, final Vector thePoint) {\n      this.plane = plane;\n      this.abovePlane = abovePlane;\n      this.belowPlane = belowPlane;\n      this.bound1 = new SidedPlane(thePoint, plane, testPoint);\n      this.bound2 = new SidedPlane(testPoint, plane, thePoint);\n      this.thePoint = thePoint;\n    }\n\n","sourceOld":"    public LinearCrossingEdgeIterator(final Plane plane, final Plane abovePlane, final Plane belowPlane, final Vector testPoint, final Vector thePoint) {\n      this.plane = plane;\n      this.abovePlane = abovePlane;\n      this.belowPlane = belowPlane;\n      this.bound1 = new SidedPlane(thePoint, plane, testPoint);\n      this.bound2 = new SidedPlane(testPoint, plane, thePoint);\n      this.thePoint = thePoint;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc08f02757dd10637b16a5c65eaaef839a91a9a","date":1462455462,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.LinearCrossingEdgeIterator#LinearCrossingEdgeIterator(Plane,Plane,Plane,Vector).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.LinearCrossingEdgeIterator#LinearCrossingEdgeIterator(Plane,Plane,Plane,Vector,Vector).mjava","sourceNew":"    public LinearCrossingEdgeIterator(final Plane plane, final Plane abovePlane, final Plane belowPlane, final Vector thePoint) {\n      this.plane = plane;\n      this.abovePlane = abovePlane;\n      this.belowPlane = belowPlane;\n      this.bound1 = new SidedPlane(thePoint, plane, testPoint);\n      this.bound2 = new SidedPlane(testPoint, plane, thePoint);\n      this.thePoint = thePoint;\n    }\n\n","sourceOld":"    public LinearCrossingEdgeIterator(final Plane plane, final Plane abovePlane, final Plane belowPlane, final Vector testPoint, final Vector thePoint) {\n      this.plane = plane;\n      this.abovePlane = abovePlane;\n      this.belowPlane = belowPlane;\n      this.bound1 = new SidedPlane(thePoint, plane, testPoint);\n      this.bound2 = new SidedPlane(testPoint, plane, thePoint);\n      this.thePoint = thePoint;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7fe41964e49958f662028ea7ed8c224e0955edae","date":1462534610,"type":5,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.LinearCrossingEdgeIterator#LinearCrossingEdgeIterator(Plane,Plane,Plane,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.LinearCrossingEdgeIterator#LinearCrossingEdgeIterator(Plane,Plane,Plane,Vector).mjava","sourceNew":"    public LinearCrossingEdgeIterator(final Plane plane, final Plane abovePlane, final Plane belowPlane, final double thePointX, final double thePointY, final double thePointZ) {\n      this.plane = plane;\n      this.abovePlane = abovePlane;\n      this.belowPlane = belowPlane;\n      this.bound1 = new SidedPlane(thePointX, thePointY, thePointZ, plane, testPoint);\n      this.bound2 = new SidedPlane(testPoint, plane, thePointX, thePointY, thePointZ);\n      this.thePointX = thePointX;\n      this.thePointY = thePointY;\n      this.thePointZ = thePointZ;\n    }\n\n","sourceOld":"    public LinearCrossingEdgeIterator(final Plane plane, final Plane abovePlane, final Plane belowPlane, final Vector thePoint) {\n      this.plane = plane;\n      this.abovePlane = abovePlane;\n      this.belowPlane = belowPlane;\n      this.bound1 = new SidedPlane(thePoint, plane, testPoint);\n      this.bound2 = new SidedPlane(testPoint, plane, thePoint);\n      this.thePoint = thePoint;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.LinearCrossingEdgeIterator#LinearCrossingEdgeIterator(Plane,Plane,Plane,Vector).mjava","sourceNew":null,"sourceOld":"    public LinearCrossingEdgeIterator(final Plane plane, final Plane abovePlane, final Plane belowPlane, final Vector thePoint) {\n      this.plane = plane;\n      this.abovePlane = abovePlane;\n      this.belowPlane = belowPlane;\n      this.bound1 = new SidedPlane(thePoint, plane, testPoint);\n      this.bound2 = new SidedPlane(testPoint, plane, thePoint);\n      this.thePoint = thePoint;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7dc08f02757dd10637b16a5c65eaaef839a91a9a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f9f156572c6e1245055b705603088061b42ab3a1"],"f9f156572c6e1245055b705603088061b42ab3a1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7fe41964e49958f662028ea7ed8c224e0955edae":["f9f156572c6e1245055b705603088061b42ab3a1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7dc08f02757dd10637b16a5c65eaaef839a91a9a","7fe41964e49958f662028ea7ed8c224e0955edae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7fe41964e49958f662028ea7ed8c224e0955edae"]},"commit2Childs":{"7dc08f02757dd10637b16a5c65eaaef839a91a9a":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"f9f156572c6e1245055b705603088061b42ab3a1":["7dc08f02757dd10637b16a5c65eaaef839a91a9a","7fe41964e49958f662028ea7ed8c224e0955edae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7dc08f02757dd10637b16a5c65eaaef839a91a9a","f9f156572c6e1245055b705603088061b42ab3a1"],"7fe41964e49958f662028ea7ed8c224e0955edae":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}