{"path":"src/java/org/apache/lucene/search/DisjunctionSumScorer#DisjunctionSumScorer(List,int).mjava","commits":[{"id":"29d6eadc26bef1d3f5d3804b90cb7ba77162d007","date":1106594461,"type":0,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionSumScorer#DisjunctionSumScorer(List,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Construct a <code>DisjunctionScorer</code>.\n   * @param subScorers A collection of at least two subscorers.\n   * @param minimumNrMatchers The positive minimum number of subscorers that should\n   * match to match this query.\n   * <br>When <code>minimumNrMatchers</code> is bigger than\n   * the number of <code>subScorers</code>,\n   * no matches will be produced.\n   * <br>When minimumNrMatchers equals the number of subScorers,\n   * it more efficient to use <code>ConjunctionScorer</code>.\n   */\n  public DisjunctionSumScorer( List subScorers, int minimumNrMatchers) {\n    super(null);\n    \n    nrScorers = subScorers.size();\n\n    if (minimumNrMatchers <= 0) {\n      throw new IllegalArgumentException(\"Minimum nr of matchers must be positive\");\n    }\n    if (nrScorers <= 1) {\n      throw new IllegalArgumentException(\"There must be at least 2 subScorers\");\n    }\n\n    this.minimumNrMatchers = minimumNrMatchers;\n    this.subScorers = subScorers;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45","ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7be534ca83a593a45a836cbffd544f2671d9ca60","date":1237394690,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionSumScorer#DisjunctionSumScorer(List,int).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionSumScorer#DisjunctionSumScorer(List,int).mjava","sourceNew":"  /** Construct a <code>DisjunctionScorer</code>.\n   * @param subScorers A collection of at least two subscorers.\n   * @param minimumNrMatchers The positive minimum number of subscorers that should\n   * match to match this query.\n   * <br>When <code>minimumNrMatchers</code> is bigger than\n   * the number of <code>subScorers</code>,\n   * no matches will be produced.\n   * <br>When minimumNrMatchers equals the number of subScorers,\n   * it more efficient to use <code>ConjunctionScorer</code>.\n   */\n  public DisjunctionSumScorer( List subScorers, int minimumNrMatchers) throws IOException {\n    super(null);\n    \n    nrScorers = subScorers.size();\n\n    if (minimumNrMatchers <= 0) {\n      throw new IllegalArgumentException(\"Minimum nr of matchers must be positive\");\n    }\n    if (nrScorers <= 1) {\n      throw new IllegalArgumentException(\"There must be at least 2 subScorers\");\n    }\n\n    this.minimumNrMatchers = minimumNrMatchers;\n    this.subScorers = subScorers;\n\n    initScorerDocQueue();\n  }\n\n","sourceOld":"  /** Construct a <code>DisjunctionScorer</code>.\n   * @param subScorers A collection of at least two subscorers.\n   * @param minimumNrMatchers The positive minimum number of subscorers that should\n   * match to match this query.\n   * <br>When <code>minimumNrMatchers</code> is bigger than\n   * the number of <code>subScorers</code>,\n   * no matches will be produced.\n   * <br>When minimumNrMatchers equals the number of subScorers,\n   * it more efficient to use <code>ConjunctionScorer</code>.\n   */\n  public DisjunctionSumScorer( List subScorers, int minimumNrMatchers) {\n    super(null);\n    \n    nrScorers = subScorers.size();\n\n    if (minimumNrMatchers <= 0) {\n      throw new IllegalArgumentException(\"Minimum nr of matchers must be positive\");\n    }\n    if (nrScorers <= 1) {\n      throw new IllegalArgumentException(\"There must be at least 2 subScorers\");\n    }\n\n    this.minimumNrMatchers = minimumNrMatchers;\n    this.subScorers = subScorers;\n  }\n\n","bugFix":null,"bugIntro":["ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45","ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e0d3ac29cb12b76130b702427d6bcd355e68d126","date":1255699234,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionSumScorer#DisjunctionSumScorer(List[Scorer],int).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionSumScorer#DisjunctionSumScorer(List,int).mjava","sourceNew":"  /** Construct a <code>DisjunctionScorer</code>.\n   * @param subScorers A collection of at least two subscorers.\n   * @param minimumNrMatchers The positive minimum number of subscorers that should\n   * match to match this query.\n   * <br>When <code>minimumNrMatchers</code> is bigger than\n   * the number of <code>subScorers</code>,\n   * no matches will be produced.\n   * <br>When minimumNrMatchers equals the number of subScorers,\n   * it more efficient to use <code>ConjunctionScorer</code>.\n   */\n  public DisjunctionSumScorer( List<Scorer> subScorers, int minimumNrMatchers) throws IOException {\n    super(null);\n    \n    nrScorers = subScorers.size();\n\n    if (minimumNrMatchers <= 0) {\n      throw new IllegalArgumentException(\"Minimum nr of matchers must be positive\");\n    }\n    if (nrScorers <= 1) {\n      throw new IllegalArgumentException(\"There must be at least 2 subScorers\");\n    }\n\n    this.minimumNrMatchers = minimumNrMatchers;\n    this.subScorers = subScorers;\n\n    initScorerDocQueue();\n  }\n\n","sourceOld":"  /** Construct a <code>DisjunctionScorer</code>.\n   * @param subScorers A collection of at least two subscorers.\n   * @param minimumNrMatchers The positive minimum number of subscorers that should\n   * match to match this query.\n   * <br>When <code>minimumNrMatchers</code> is bigger than\n   * the number of <code>subScorers</code>,\n   * no matches will be produced.\n   * <br>When minimumNrMatchers equals the number of subScorers,\n   * it more efficient to use <code>ConjunctionScorer</code>.\n   */\n  public DisjunctionSumScorer( List subScorers, int minimumNrMatchers) throws IOException {\n    super(null);\n    \n    nrScorers = subScorers.size();\n\n    if (minimumNrMatchers <= 0) {\n      throw new IllegalArgumentException(\"Minimum nr of matchers must be positive\");\n    }\n    if (nrScorers <= 1) {\n      throw new IllegalArgumentException(\"There must be at least 2 subScorers\");\n    }\n\n    this.minimumNrMatchers = minimumNrMatchers;\n    this.subScorers = subScorers;\n\n    initScorerDocQueue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e0d3ac29cb12b76130b702427d6bcd355e68d126":["7be534ca83a593a45a836cbffd544f2671d9ca60"],"7be534ca83a593a45a836cbffd544f2671d9ca60":["29d6eadc26bef1d3f5d3804b90cb7ba77162d007"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"29d6eadc26bef1d3f5d3804b90cb7ba77162d007":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e0d3ac29cb12b76130b702427d6bcd355e68d126"]},"commit2Childs":{"e0d3ac29cb12b76130b702427d6bcd355e68d126":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7be534ca83a593a45a836cbffd544f2671d9ca60":["e0d3ac29cb12b76130b702427d6bcd355e68d126"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29d6eadc26bef1d3f5d3804b90cb7ba77162d007"],"29d6eadc26bef1d3f5d3804b90cb7ba77162d007":["7be534ca83a593a45a836cbffd544f2671d9ca60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}