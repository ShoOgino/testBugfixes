{"path":"lucene/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,boolean,boolean,boolean,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,boolean,boolean,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,boolean,boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a new {@link TopFieldCollector} from the given\n   * arguments.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>.\n   * \n   * @param sort\n   *          the sort criteria (SortFields).\n   * @param numHits\n   *          the number of results to collect.\n   * @param fillFields\n   *          specifies whether the actual field values should be returned on\n   *          the results (FieldDoc).\n   * @param trackDocScores\n   *          specifies whether document scores should be tracked and set on the\n   *          results. Note that if set to false, then the results' scores will\n   *          be set to Float.NaN. Setting this to true affects performance, as\n   *          it incurs the score computation on each competitive result.\n   *          Therefore if document scores are not required by the application,\n   *          it is recommended to set it to false.\n   * @param trackMaxScore\n   *          specifies whether the query's maxScore should be tracked and set\n   *          on the resulting {@link TopDocs}. Note that if set to false,\n   *          {@link TopDocs#getMaxScore()} returns Float.NaN. Setting this to\n   *          true affects performance as it incurs the score computation on\n   *          each result. Also, setting this true automatically sets\n   *          <code>trackDocScores</code> to true as well.\n   * @param docsScoredInOrder\n   *          specifies whether documents are scored in doc Id order or not by\n   *          the given {@link Scorer} in {@link #setScorer(Scorer)}.\n   * @return a {@link TopFieldCollector} instance which will sort the results by\n   *         the sort criteria.\n   * @throws IOException\n   */\n  public static TopFieldCollector create(Sort sort, int numHits,\n      boolean fillFields, boolean trackDocScores, boolean trackMaxScore,\n      boolean docsScoredInOrder)\n      throws IOException {\n    if (sort.fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n    \n    FieldValueHitQueue queue = FieldValueHitQueue.create(sort.fields, numHits);\n    if (queue.getComparators().length == 1) {\n      if (docsScoredInOrder) {\n        if (trackMaxScore) {\n          return new OneComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n        } else if (trackDocScores) {\n          return new OneComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n        } else {\n          return new OneComparatorNonScoringCollector(queue, numHits, fillFields);\n        }\n      } else {\n        if (trackMaxScore) {\n          return new OutOfOrderOneComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n        } else if (trackDocScores) {\n          return new OutOfOrderOneComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n        } else {\n          return new OutOfOrderOneComparatorNonScoringCollector(queue, numHits, fillFields);\n        }\n      }\n    }\n\n    // multiple comparators.\n    if (docsScoredInOrder) {\n      if (trackMaxScore) {\n        return new MultiComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n      } else if (trackDocScores) {\n        return new MultiComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n      } else {\n        return new MultiComparatorNonScoringCollector(queue, numHits, fillFields);\n      }\n    } else {\n      if (trackMaxScore) {\n        return new OutOfOrderMultiComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n      } else if (trackDocScores) {\n        return new OutOfOrderMultiComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n      } else {\n        return new OutOfOrderMultiComparatorNonScoringCollector(queue, numHits, fillFields);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link TopFieldCollector} from the given\n   * arguments.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>.\n   * \n   * @param sort\n   *          the sort criteria (SortFields).\n   * @param numHits\n   *          the number of results to collect.\n   * @param fillFields\n   *          specifies whether the actual field values should be returned on\n   *          the results (FieldDoc).\n   * @param trackDocScores\n   *          specifies whether document scores should be tracked and set on the\n   *          results. Note that if set to false, then the results' scores will\n   *          be set to Float.NaN. Setting this to true affects performance, as\n   *          it incurs the score computation on each competitive result.\n   *          Therefore if document scores are not required by the application,\n   *          it is recommended to set it to false.\n   * @param trackMaxScore\n   *          specifies whether the query's maxScore should be tracked and set\n   *          on the resulting {@link TopDocs}. Note that if set to false,\n   *          {@link TopDocs#getMaxScore()} returns Float.NaN. Setting this to\n   *          true affects performance as it incurs the score computation on\n   *          each result. Also, setting this true automatically sets\n   *          <code>trackDocScores</code> to true as well.\n   * @param docsScoredInOrder\n   *          specifies whether documents are scored in doc Id order or not by\n   *          the given {@link Scorer} in {@link #setScorer(Scorer)}.\n   * @return a {@link TopFieldCollector} instance which will sort the results by\n   *         the sort criteria.\n   * @throws IOException\n   */\n  public static TopFieldCollector create(Sort sort, int numHits,\n      boolean fillFields, boolean trackDocScores, boolean trackMaxScore,\n      boolean docsScoredInOrder)\n      throws IOException {\n    if (sort.fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n    \n    FieldValueHitQueue queue = FieldValueHitQueue.create(sort.fields, numHits);\n    if (queue.getComparators().length == 1) {\n      if (docsScoredInOrder) {\n        if (trackMaxScore) {\n          return new OneComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n        } else if (trackDocScores) {\n          return new OneComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n        } else {\n          return new OneComparatorNonScoringCollector(queue, numHits, fillFields);\n        }\n      } else {\n        if (trackMaxScore) {\n          return new OutOfOrderOneComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n        } else if (trackDocScores) {\n          return new OutOfOrderOneComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n        } else {\n          return new OutOfOrderOneComparatorNonScoringCollector(queue, numHits, fillFields);\n        }\n      }\n    }\n\n    // multiple comparators.\n    if (docsScoredInOrder) {\n      if (trackMaxScore) {\n        return new MultiComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n      } else if (trackDocScores) {\n        return new MultiComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n      } else {\n        return new MultiComparatorNonScoringCollector(queue, numHits, fillFields);\n      }\n    } else {\n      if (trackMaxScore) {\n        return new OutOfOrderMultiComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n      } else if (trackDocScores) {\n        return new OutOfOrderMultiComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n      } else {\n        return new OutOfOrderMultiComparatorNonScoringCollector(queue, numHits, fillFields);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"259055feeba9afa10e21ab63032f3778bb1802f1","date":1291199138,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,boolean,boolean,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,boolean,boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a new {@link TopFieldCollector} from the given\n   * arguments.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>.\n   * \n   * @param sort\n   *          the sort criteria (SortFields).\n   * @param numHits\n   *          the number of results to collect.\n   * @param fillFields\n   *          specifies whether the actual field values should be returned on\n   *          the results (FieldDoc).\n   * @param trackDocScores\n   *          specifies whether document scores should be tracked and set on the\n   *          results. Note that if set to false, then the results' scores will\n   *          be set to Float.NaN. Setting this to true affects performance, as\n   *          it incurs the score computation on each competitive result.\n   *          Therefore if document scores are not required by the application,\n   *          it is recommended to set it to false.\n   * @param trackMaxScore\n   *          specifies whether the query's maxScore should be tracked and set\n   *          on the resulting {@link TopDocs}. Note that if set to false,\n   *          {@link TopDocs#getMaxScore()} returns Float.NaN. Setting this to\n   *          true affects performance as it incurs the score computation on\n   *          each result. Also, setting this true automatically sets\n   *          <code>trackDocScores</code> to true as well.\n   * @param docsScoredInOrder\n   *          specifies whether documents are scored in doc Id order or not by\n   *          the given {@link Scorer} in {@link #setScorer(Scorer)}.\n   * @return a {@link TopFieldCollector} instance which will sort the results by\n   *         the sort criteria.\n   * @throws IOException\n   */\n  public static TopFieldCollector create(Sort sort, int numHits,\n      boolean fillFields, boolean trackDocScores, boolean trackMaxScore,\n      boolean docsScoredInOrder)\n      throws IOException {\n    if (sort.fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n    \n    if (numHits <= 0) {\n      throw new IllegalArgumentException(\"numHits must be > 0; please use TotalHitCountCollector if you just need the total hit count\");\n    }\n\n    FieldValueHitQueue queue = FieldValueHitQueue.create(sort.fields, numHits);\n    if (queue.getComparators().length == 1) {\n      if (docsScoredInOrder) {\n        if (trackMaxScore) {\n          return new OneComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n        } else if (trackDocScores) {\n          return new OneComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n        } else {\n          return new OneComparatorNonScoringCollector(queue, numHits, fillFields);\n        }\n      } else {\n        if (trackMaxScore) {\n          return new OutOfOrderOneComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n        } else if (trackDocScores) {\n          return new OutOfOrderOneComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n        } else {\n          return new OutOfOrderOneComparatorNonScoringCollector(queue, numHits, fillFields);\n        }\n      }\n    }\n\n    // multiple comparators.\n    if (docsScoredInOrder) {\n      if (trackMaxScore) {\n        return new MultiComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n      } else if (trackDocScores) {\n        return new MultiComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n      } else {\n        return new MultiComparatorNonScoringCollector(queue, numHits, fillFields);\n      }\n    } else {\n      if (trackMaxScore) {\n        return new OutOfOrderMultiComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n      } else if (trackDocScores) {\n        return new OutOfOrderMultiComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n      } else {\n        return new OutOfOrderMultiComparatorNonScoringCollector(queue, numHits, fillFields);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link TopFieldCollector} from the given\n   * arguments.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>.\n   * \n   * @param sort\n   *          the sort criteria (SortFields).\n   * @param numHits\n   *          the number of results to collect.\n   * @param fillFields\n   *          specifies whether the actual field values should be returned on\n   *          the results (FieldDoc).\n   * @param trackDocScores\n   *          specifies whether document scores should be tracked and set on the\n   *          results. Note that if set to false, then the results' scores will\n   *          be set to Float.NaN. Setting this to true affects performance, as\n   *          it incurs the score computation on each competitive result.\n   *          Therefore if document scores are not required by the application,\n   *          it is recommended to set it to false.\n   * @param trackMaxScore\n   *          specifies whether the query's maxScore should be tracked and set\n   *          on the resulting {@link TopDocs}. Note that if set to false,\n   *          {@link TopDocs#getMaxScore()} returns Float.NaN. Setting this to\n   *          true affects performance as it incurs the score computation on\n   *          each result. Also, setting this true automatically sets\n   *          <code>trackDocScores</code> to true as well.\n   * @param docsScoredInOrder\n   *          specifies whether documents are scored in doc Id order or not by\n   *          the given {@link Scorer} in {@link #setScorer(Scorer)}.\n   * @return a {@link TopFieldCollector} instance which will sort the results by\n   *         the sort criteria.\n   * @throws IOException\n   */\n  public static TopFieldCollector create(Sort sort, int numHits,\n      boolean fillFields, boolean trackDocScores, boolean trackMaxScore,\n      boolean docsScoredInOrder)\n      throws IOException {\n    if (sort.fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n    \n    FieldValueHitQueue queue = FieldValueHitQueue.create(sort.fields, numHits);\n    if (queue.getComparators().length == 1) {\n      if (docsScoredInOrder) {\n        if (trackMaxScore) {\n          return new OneComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n        } else if (trackDocScores) {\n          return new OneComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n        } else {\n          return new OneComparatorNonScoringCollector(queue, numHits, fillFields);\n        }\n      } else {\n        if (trackMaxScore) {\n          return new OutOfOrderOneComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n        } else if (trackDocScores) {\n          return new OutOfOrderOneComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n        } else {\n          return new OutOfOrderOneComparatorNonScoringCollector(queue, numHits, fillFields);\n        }\n      }\n    }\n\n    // multiple comparators.\n    if (docsScoredInOrder) {\n      if (trackMaxScore) {\n        return new MultiComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n      } else if (trackDocScores) {\n        return new MultiComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n      } else {\n        return new MultiComparatorNonScoringCollector(queue, numHits, fillFields);\n      }\n    } else {\n      if (trackMaxScore) {\n        return new OutOfOrderMultiComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n      } else if (trackDocScores) {\n        return new OutOfOrderMultiComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n      } else {\n        return new OutOfOrderMultiComparatorNonScoringCollector(queue, numHits, fillFields);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,boolean,boolean,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,boolean,boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a new {@link TopFieldCollector} from the given\n   * arguments.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>.\n   * \n   * @param sort\n   *          the sort criteria (SortFields).\n   * @param numHits\n   *          the number of results to collect.\n   * @param fillFields\n   *          specifies whether the actual field values should be returned on\n   *          the results (FieldDoc).\n   * @param trackDocScores\n   *          specifies whether document scores should be tracked and set on the\n   *          results. Note that if set to false, then the results' scores will\n   *          be set to Float.NaN. Setting this to true affects performance, as\n   *          it incurs the score computation on each competitive result.\n   *          Therefore if document scores are not required by the application,\n   *          it is recommended to set it to false.\n   * @param trackMaxScore\n   *          specifies whether the query's maxScore should be tracked and set\n   *          on the resulting {@link TopDocs}. Note that if set to false,\n   *          {@link TopDocs#getMaxScore()} returns Float.NaN. Setting this to\n   *          true affects performance as it incurs the score computation on\n   *          each result. Also, setting this true automatically sets\n   *          <code>trackDocScores</code> to true as well.\n   * @param docsScoredInOrder\n   *          specifies whether documents are scored in doc Id order or not by\n   *          the given {@link Scorer} in {@link #setScorer(Scorer)}.\n   * @return a {@link TopFieldCollector} instance which will sort the results by\n   *         the sort criteria.\n   * @throws IOException\n   */\n  public static TopFieldCollector create(Sort sort, int numHits,\n      boolean fillFields, boolean trackDocScores, boolean trackMaxScore,\n      boolean docsScoredInOrder)\n      throws IOException {\n    if (sort.fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n    \n    if (numHits <= 0) {\n      throw new IllegalArgumentException(\"numHits must be > 0; please use TotalHitCountCollector if you just need the total hit count\");\n    }\n\n    FieldValueHitQueue queue = FieldValueHitQueue.create(sort.fields, numHits);\n    if (queue.getComparators().length == 1) {\n      if (docsScoredInOrder) {\n        if (trackMaxScore) {\n          return new OneComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n        } else if (trackDocScores) {\n          return new OneComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n        } else {\n          return new OneComparatorNonScoringCollector(queue, numHits, fillFields);\n        }\n      } else {\n        if (trackMaxScore) {\n          return new OutOfOrderOneComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n        } else if (trackDocScores) {\n          return new OutOfOrderOneComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n        } else {\n          return new OutOfOrderOneComparatorNonScoringCollector(queue, numHits, fillFields);\n        }\n      }\n    }\n\n    // multiple comparators.\n    if (docsScoredInOrder) {\n      if (trackMaxScore) {\n        return new MultiComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n      } else if (trackDocScores) {\n        return new MultiComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n      } else {\n        return new MultiComparatorNonScoringCollector(queue, numHits, fillFields);\n      }\n    } else {\n      if (trackMaxScore) {\n        return new OutOfOrderMultiComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n      } else if (trackDocScores) {\n        return new OutOfOrderMultiComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n      } else {\n        return new OutOfOrderMultiComparatorNonScoringCollector(queue, numHits, fillFields);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link TopFieldCollector} from the given\n   * arguments.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>.\n   * \n   * @param sort\n   *          the sort criteria (SortFields).\n   * @param numHits\n   *          the number of results to collect.\n   * @param fillFields\n   *          specifies whether the actual field values should be returned on\n   *          the results (FieldDoc).\n   * @param trackDocScores\n   *          specifies whether document scores should be tracked and set on the\n   *          results. Note that if set to false, then the results' scores will\n   *          be set to Float.NaN. Setting this to true affects performance, as\n   *          it incurs the score computation on each competitive result.\n   *          Therefore if document scores are not required by the application,\n   *          it is recommended to set it to false.\n   * @param trackMaxScore\n   *          specifies whether the query's maxScore should be tracked and set\n   *          on the resulting {@link TopDocs}. Note that if set to false,\n   *          {@link TopDocs#getMaxScore()} returns Float.NaN. Setting this to\n   *          true affects performance as it incurs the score computation on\n   *          each result. Also, setting this true automatically sets\n   *          <code>trackDocScores</code> to true as well.\n   * @param docsScoredInOrder\n   *          specifies whether documents are scored in doc Id order or not by\n   *          the given {@link Scorer} in {@link #setScorer(Scorer)}.\n   * @return a {@link TopFieldCollector} instance which will sort the results by\n   *         the sort criteria.\n   * @throws IOException\n   */\n  public static TopFieldCollector create(Sort sort, int numHits,\n      boolean fillFields, boolean trackDocScores, boolean trackMaxScore,\n      boolean docsScoredInOrder)\n      throws IOException {\n    if (sort.fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n    \n    FieldValueHitQueue queue = FieldValueHitQueue.create(sort.fields, numHits);\n    if (queue.getComparators().length == 1) {\n      if (docsScoredInOrder) {\n        if (trackMaxScore) {\n          return new OneComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n        } else if (trackDocScores) {\n          return new OneComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n        } else {\n          return new OneComparatorNonScoringCollector(queue, numHits, fillFields);\n        }\n      } else {\n        if (trackMaxScore) {\n          return new OutOfOrderOneComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n        } else if (trackDocScores) {\n          return new OutOfOrderOneComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n        } else {\n          return new OutOfOrderOneComparatorNonScoringCollector(queue, numHits, fillFields);\n        }\n      }\n    }\n\n    // multiple comparators.\n    if (docsScoredInOrder) {\n      if (trackMaxScore) {\n        return new MultiComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n      } else if (trackDocScores) {\n        return new MultiComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n      } else {\n        return new MultiComparatorNonScoringCollector(queue, numHits, fillFields);\n      }\n    } else {\n      if (trackMaxScore) {\n        return new OutOfOrderMultiComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n      } else if (trackDocScores) {\n        return new OutOfOrderMultiComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n      } else {\n        return new OutOfOrderMultiComparatorNonScoringCollector(queue, numHits, fillFields);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,boolean,boolean,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,boolean,boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a new {@link TopFieldCollector} from the given\n   * arguments.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>.\n   * \n   * @param sort\n   *          the sort criteria (SortFields).\n   * @param numHits\n   *          the number of results to collect.\n   * @param fillFields\n   *          specifies whether the actual field values should be returned on\n   *          the results (FieldDoc).\n   * @param trackDocScores\n   *          specifies whether document scores should be tracked and set on the\n   *          results. Note that if set to false, then the results' scores will\n   *          be set to Float.NaN. Setting this to true affects performance, as\n   *          it incurs the score computation on each competitive result.\n   *          Therefore if document scores are not required by the application,\n   *          it is recommended to set it to false.\n   * @param trackMaxScore\n   *          specifies whether the query's maxScore should be tracked and set\n   *          on the resulting {@link TopDocs}. Note that if set to false,\n   *          {@link TopDocs#getMaxScore()} returns Float.NaN. Setting this to\n   *          true affects performance as it incurs the score computation on\n   *          each result. Also, setting this true automatically sets\n   *          <code>trackDocScores</code> to true as well.\n   * @param docsScoredInOrder\n   *          specifies whether documents are scored in doc Id order or not by\n   *          the given {@link Scorer} in {@link #setScorer(Scorer)}.\n   * @return a {@link TopFieldCollector} instance which will sort the results by\n   *         the sort criteria.\n   * @throws IOException\n   */\n  public static TopFieldCollector create(Sort sort, int numHits,\n      boolean fillFields, boolean trackDocScores, boolean trackMaxScore,\n      boolean docsScoredInOrder)\n      throws IOException {\n    if (sort.fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n    \n    if (numHits <= 0) {\n      throw new IllegalArgumentException(\"numHits must be > 0; please use TotalHitCountCollector if you just need the total hit count\");\n    }\n\n    FieldValueHitQueue queue = FieldValueHitQueue.create(sort.fields, numHits);\n    if (queue.getComparators().length == 1) {\n      if (docsScoredInOrder) {\n        if (trackMaxScore) {\n          return new OneComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n        } else if (trackDocScores) {\n          return new OneComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n        } else {\n          return new OneComparatorNonScoringCollector(queue, numHits, fillFields);\n        }\n      } else {\n        if (trackMaxScore) {\n          return new OutOfOrderOneComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n        } else if (trackDocScores) {\n          return new OutOfOrderOneComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n        } else {\n          return new OutOfOrderOneComparatorNonScoringCollector(queue, numHits, fillFields);\n        }\n      }\n    }\n\n    // multiple comparators.\n    if (docsScoredInOrder) {\n      if (trackMaxScore) {\n        return new MultiComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n      } else if (trackDocScores) {\n        return new MultiComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n      } else {\n        return new MultiComparatorNonScoringCollector(queue, numHits, fillFields);\n      }\n    } else {\n      if (trackMaxScore) {\n        return new OutOfOrderMultiComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n      } else if (trackDocScores) {\n        return new OutOfOrderMultiComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n      } else {\n        return new OutOfOrderMultiComparatorNonScoringCollector(queue, numHits, fillFields);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link TopFieldCollector} from the given\n   * arguments.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>.\n   * \n   * @param sort\n   *          the sort criteria (SortFields).\n   * @param numHits\n   *          the number of results to collect.\n   * @param fillFields\n   *          specifies whether the actual field values should be returned on\n   *          the results (FieldDoc).\n   * @param trackDocScores\n   *          specifies whether document scores should be tracked and set on the\n   *          results. Note that if set to false, then the results' scores will\n   *          be set to Float.NaN. Setting this to true affects performance, as\n   *          it incurs the score computation on each competitive result.\n   *          Therefore if document scores are not required by the application,\n   *          it is recommended to set it to false.\n   * @param trackMaxScore\n   *          specifies whether the query's maxScore should be tracked and set\n   *          on the resulting {@link TopDocs}. Note that if set to false,\n   *          {@link TopDocs#getMaxScore()} returns Float.NaN. Setting this to\n   *          true affects performance as it incurs the score computation on\n   *          each result. Also, setting this true automatically sets\n   *          <code>trackDocScores</code> to true as well.\n   * @param docsScoredInOrder\n   *          specifies whether documents are scored in doc Id order or not by\n   *          the given {@link Scorer} in {@link #setScorer(Scorer)}.\n   * @return a {@link TopFieldCollector} instance which will sort the results by\n   *         the sort criteria.\n   * @throws IOException\n   */\n  public static TopFieldCollector create(Sort sort, int numHits,\n      boolean fillFields, boolean trackDocScores, boolean trackMaxScore,\n      boolean docsScoredInOrder)\n      throws IOException {\n    if (sort.fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n    \n    FieldValueHitQueue queue = FieldValueHitQueue.create(sort.fields, numHits);\n    if (queue.getComparators().length == 1) {\n      if (docsScoredInOrder) {\n        if (trackMaxScore) {\n          return new OneComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n        } else if (trackDocScores) {\n          return new OneComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n        } else {\n          return new OneComparatorNonScoringCollector(queue, numHits, fillFields);\n        }\n      } else {\n        if (trackMaxScore) {\n          return new OutOfOrderOneComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n        } else if (trackDocScores) {\n          return new OutOfOrderOneComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n        } else {\n          return new OutOfOrderOneComparatorNonScoringCollector(queue, numHits, fillFields);\n        }\n      }\n    }\n\n    // multiple comparators.\n    if (docsScoredInOrder) {\n      if (trackMaxScore) {\n        return new MultiComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n      } else if (trackDocScores) {\n        return new MultiComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n      } else {\n        return new MultiComparatorNonScoringCollector(queue, numHits, fillFields);\n      }\n    } else {\n      if (trackMaxScore) {\n        return new OutOfOrderMultiComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n      } else if (trackDocScores) {\n        return new OutOfOrderMultiComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n      } else {\n        return new OutOfOrderMultiComparatorNonScoringCollector(queue, numHits, fillFields);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97e30c53fd81463c6ccd52402c91a6548cf42acb","date":1309296018,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,boolean,boolean,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,boolean,boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a new {@link TopFieldCollector} from the given\n   * arguments.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>.\n   * \n   * @param sort\n   *          the sort criteria (SortFields).\n   * @param numHits\n   *          the number of results to collect.\n   * @param fillFields\n   *          specifies whether the actual field values should be returned on\n   *          the results (FieldDoc).\n   * @param trackDocScores\n   *          specifies whether document scores should be tracked and set on the\n   *          results. Note that if set to false, then the results' scores will\n   *          be set to Float.NaN. Setting this to true affects performance, as\n   *          it incurs the score computation on each competitive result.\n   *          Therefore if document scores are not required by the application,\n   *          it is recommended to set it to false.\n   * @param trackMaxScore\n   *          specifies whether the query's maxScore should be tracked and set\n   *          on the resulting {@link TopDocs}. Note that if set to false,\n   *          {@link TopDocs#getMaxScore()} returns Float.NaN. Setting this to\n   *          true affects performance as it incurs the score computation on\n   *          each result. Also, setting this true automatically sets\n   *          <code>trackDocScores</code> to true as well.\n   * @param docsScoredInOrder\n   *          specifies whether documents are scored in doc Id order or not by\n   *          the given {@link Scorer} in {@link #setScorer(Scorer)}.\n   * @return a {@link TopFieldCollector} instance which will sort the results by\n   *         the sort criteria.\n   * @throws IOException\n   */\n  public static TopFieldCollector create(Sort sort, int numHits,\n      boolean fillFields, boolean trackDocScores, boolean trackMaxScore,\n      boolean docsScoredInOrder)\n      throws IOException {\n    if (sort.fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n    \n    if (numHits <= 0) {\n      throw new IllegalArgumentException(\"numHits must be > 0; please use TotalHitCountCollector if you just need the total hit count\");\n    }\n\n    FieldValueHitQueue<Entry> queue = FieldValueHitQueue.create(sort.fields, numHits);\n    if (queue.getComparators().length == 1) {\n      if (docsScoredInOrder) {\n        if (trackMaxScore) {\n          return new OneComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n        } else if (trackDocScores) {\n          return new OneComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n        } else {\n          return new OneComparatorNonScoringCollector(queue, numHits, fillFields);\n        }\n      } else {\n        if (trackMaxScore) {\n          return new OutOfOrderOneComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n        } else if (trackDocScores) {\n          return new OutOfOrderOneComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n        } else {\n          return new OutOfOrderOneComparatorNonScoringCollector(queue, numHits, fillFields);\n        }\n      }\n    }\n\n    // multiple comparators.\n    if (docsScoredInOrder) {\n      if (trackMaxScore) {\n        return new MultiComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n      } else if (trackDocScores) {\n        return new MultiComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n      } else {\n        return new MultiComparatorNonScoringCollector(queue, numHits, fillFields);\n      }\n    } else {\n      if (trackMaxScore) {\n        return new OutOfOrderMultiComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n      } else if (trackDocScores) {\n        return new OutOfOrderMultiComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n      } else {\n        return new OutOfOrderMultiComparatorNonScoringCollector(queue, numHits, fillFields);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link TopFieldCollector} from the given\n   * arguments.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>.\n   * \n   * @param sort\n   *          the sort criteria (SortFields).\n   * @param numHits\n   *          the number of results to collect.\n   * @param fillFields\n   *          specifies whether the actual field values should be returned on\n   *          the results (FieldDoc).\n   * @param trackDocScores\n   *          specifies whether document scores should be tracked and set on the\n   *          results. Note that if set to false, then the results' scores will\n   *          be set to Float.NaN. Setting this to true affects performance, as\n   *          it incurs the score computation on each competitive result.\n   *          Therefore if document scores are not required by the application,\n   *          it is recommended to set it to false.\n   * @param trackMaxScore\n   *          specifies whether the query's maxScore should be tracked and set\n   *          on the resulting {@link TopDocs}. Note that if set to false,\n   *          {@link TopDocs#getMaxScore()} returns Float.NaN. Setting this to\n   *          true affects performance as it incurs the score computation on\n   *          each result. Also, setting this true automatically sets\n   *          <code>trackDocScores</code> to true as well.\n   * @param docsScoredInOrder\n   *          specifies whether documents are scored in doc Id order or not by\n   *          the given {@link Scorer} in {@link #setScorer(Scorer)}.\n   * @return a {@link TopFieldCollector} instance which will sort the results by\n   *         the sort criteria.\n   * @throws IOException\n   */\n  public static TopFieldCollector create(Sort sort, int numHits,\n      boolean fillFields, boolean trackDocScores, boolean trackMaxScore,\n      boolean docsScoredInOrder)\n      throws IOException {\n    if (sort.fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n    \n    if (numHits <= 0) {\n      throw new IllegalArgumentException(\"numHits must be > 0; please use TotalHitCountCollector if you just need the total hit count\");\n    }\n\n    FieldValueHitQueue queue = FieldValueHitQueue.create(sort.fields, numHits);\n    if (queue.getComparators().length == 1) {\n      if (docsScoredInOrder) {\n        if (trackMaxScore) {\n          return new OneComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n        } else if (trackDocScores) {\n          return new OneComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n        } else {\n          return new OneComparatorNonScoringCollector(queue, numHits, fillFields);\n        }\n      } else {\n        if (trackMaxScore) {\n          return new OutOfOrderOneComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n        } else if (trackDocScores) {\n          return new OutOfOrderOneComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n        } else {\n          return new OutOfOrderOneComparatorNonScoringCollector(queue, numHits, fillFields);\n        }\n      }\n    }\n\n    // multiple comparators.\n    if (docsScoredInOrder) {\n      if (trackMaxScore) {\n        return new MultiComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n      } else if (trackDocScores) {\n        return new MultiComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n      } else {\n        return new MultiComparatorNonScoringCollector(queue, numHits, fillFields);\n      }\n    } else {\n      if (trackMaxScore) {\n        return new OutOfOrderMultiComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n      } else if (trackDocScores) {\n        return new OutOfOrderMultiComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n      } else {\n        return new OutOfOrderMultiComparatorNonScoringCollector(queue, numHits, fillFields);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,boolean,boolean,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,boolean,boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a new {@link TopFieldCollector} from the given\n   * arguments.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>.\n   * \n   * @param sort\n   *          the sort criteria (SortFields).\n   * @param numHits\n   *          the number of results to collect.\n   * @param fillFields\n   *          specifies whether the actual field values should be returned on\n   *          the results (FieldDoc).\n   * @param trackDocScores\n   *          specifies whether document scores should be tracked and set on the\n   *          results. Note that if set to false, then the results' scores will\n   *          be set to Float.NaN. Setting this to true affects performance, as\n   *          it incurs the score computation on each competitive result.\n   *          Therefore if document scores are not required by the application,\n   *          it is recommended to set it to false.\n   * @param trackMaxScore\n   *          specifies whether the query's maxScore should be tracked and set\n   *          on the resulting {@link TopDocs}. Note that if set to false,\n   *          {@link TopDocs#getMaxScore()} returns Float.NaN. Setting this to\n   *          true affects performance as it incurs the score computation on\n   *          each result. Also, setting this true automatically sets\n   *          <code>trackDocScores</code> to true as well.\n   * @param docsScoredInOrder\n   *          specifies whether documents are scored in doc Id order or not by\n   *          the given {@link Scorer} in {@link #setScorer(Scorer)}.\n   * @return a {@link TopFieldCollector} instance which will sort the results by\n   *         the sort criteria.\n   * @throws IOException\n   */\n  public static TopFieldCollector create(Sort sort, int numHits,\n      boolean fillFields, boolean trackDocScores, boolean trackMaxScore,\n      boolean docsScoredInOrder)\n      throws IOException {\n    if (sort.fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n    \n    if (numHits <= 0) {\n      throw new IllegalArgumentException(\"numHits must be > 0; please use TotalHitCountCollector if you just need the total hit count\");\n    }\n\n    FieldValueHitQueue<Entry> queue = FieldValueHitQueue.create(sort.fields, numHits);\n    if (queue.getComparators().length == 1) {\n      if (docsScoredInOrder) {\n        if (trackMaxScore) {\n          return new OneComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n        } else if (trackDocScores) {\n          return new OneComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n        } else {\n          return new OneComparatorNonScoringCollector(queue, numHits, fillFields);\n        }\n      } else {\n        if (trackMaxScore) {\n          return new OutOfOrderOneComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n        } else if (trackDocScores) {\n          return new OutOfOrderOneComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n        } else {\n          return new OutOfOrderOneComparatorNonScoringCollector(queue, numHits, fillFields);\n        }\n      }\n    }\n\n    // multiple comparators.\n    if (docsScoredInOrder) {\n      if (trackMaxScore) {\n        return new MultiComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n      } else if (trackDocScores) {\n        return new MultiComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n      } else {\n        return new MultiComparatorNonScoringCollector(queue, numHits, fillFields);\n      }\n    } else {\n      if (trackMaxScore) {\n        return new OutOfOrderMultiComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n      } else if (trackDocScores) {\n        return new OutOfOrderMultiComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n      } else {\n        return new OutOfOrderMultiComparatorNonScoringCollector(queue, numHits, fillFields);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link TopFieldCollector} from the given\n   * arguments.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>.\n   * \n   * @param sort\n   *          the sort criteria (SortFields).\n   * @param numHits\n   *          the number of results to collect.\n   * @param fillFields\n   *          specifies whether the actual field values should be returned on\n   *          the results (FieldDoc).\n   * @param trackDocScores\n   *          specifies whether document scores should be tracked and set on the\n   *          results. Note that if set to false, then the results' scores will\n   *          be set to Float.NaN. Setting this to true affects performance, as\n   *          it incurs the score computation on each competitive result.\n   *          Therefore if document scores are not required by the application,\n   *          it is recommended to set it to false.\n   * @param trackMaxScore\n   *          specifies whether the query's maxScore should be tracked and set\n   *          on the resulting {@link TopDocs}. Note that if set to false,\n   *          {@link TopDocs#getMaxScore()} returns Float.NaN. Setting this to\n   *          true affects performance as it incurs the score computation on\n   *          each result. Also, setting this true automatically sets\n   *          <code>trackDocScores</code> to true as well.\n   * @param docsScoredInOrder\n   *          specifies whether documents are scored in doc Id order or not by\n   *          the given {@link Scorer} in {@link #setScorer(Scorer)}.\n   * @return a {@link TopFieldCollector} instance which will sort the results by\n   *         the sort criteria.\n   * @throws IOException\n   */\n  public static TopFieldCollector create(Sort sort, int numHits,\n      boolean fillFields, boolean trackDocScores, boolean trackMaxScore,\n      boolean docsScoredInOrder)\n      throws IOException {\n    if (sort.fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n    \n    if (numHits <= 0) {\n      throw new IllegalArgumentException(\"numHits must be > 0; please use TotalHitCountCollector if you just need the total hit count\");\n    }\n\n    FieldValueHitQueue queue = FieldValueHitQueue.create(sort.fields, numHits);\n    if (queue.getComparators().length == 1) {\n      if (docsScoredInOrder) {\n        if (trackMaxScore) {\n          return new OneComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n        } else if (trackDocScores) {\n          return new OneComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n        } else {\n          return new OneComparatorNonScoringCollector(queue, numHits, fillFields);\n        }\n      } else {\n        if (trackMaxScore) {\n          return new OutOfOrderOneComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n        } else if (trackDocScores) {\n          return new OutOfOrderOneComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n        } else {\n          return new OutOfOrderOneComparatorNonScoringCollector(queue, numHits, fillFields);\n        }\n      }\n    }\n\n    // multiple comparators.\n    if (docsScoredInOrder) {\n      if (trackMaxScore) {\n        return new MultiComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n      } else if (trackDocScores) {\n        return new MultiComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n      } else {\n        return new MultiComparatorNonScoringCollector(queue, numHits, fillFields);\n      }\n    } else {\n      if (trackMaxScore) {\n        return new OutOfOrderMultiComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n      } else if (trackDocScores) {\n        return new OutOfOrderMultiComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n      } else {\n        return new OutOfOrderMultiComparatorNonScoringCollector(queue, numHits, fillFields);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,boolean,boolean,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,boolean,boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a new {@link TopFieldCollector} from the given\n   * arguments.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>.\n   * \n   * @param sort\n   *          the sort criteria (SortFields).\n   * @param numHits\n   *          the number of results to collect.\n   * @param fillFields\n   *          specifies whether the actual field values should be returned on\n   *          the results (FieldDoc).\n   * @param trackDocScores\n   *          specifies whether document scores should be tracked and set on the\n   *          results. Note that if set to false, then the results' scores will\n   *          be set to Float.NaN. Setting this to true affects performance, as\n   *          it incurs the score computation on each competitive result.\n   *          Therefore if document scores are not required by the application,\n   *          it is recommended to set it to false.\n   * @param trackMaxScore\n   *          specifies whether the query's maxScore should be tracked and set\n   *          on the resulting {@link TopDocs}. Note that if set to false,\n   *          {@link TopDocs#getMaxScore()} returns Float.NaN. Setting this to\n   *          true affects performance as it incurs the score computation on\n   *          each result. Also, setting this true automatically sets\n   *          <code>trackDocScores</code> to true as well.\n   * @param docsScoredInOrder\n   *          specifies whether documents are scored in doc Id order or not by\n   *          the given {@link Scorer} in {@link #setScorer(Scorer)}.\n   * @return a {@link TopFieldCollector} instance which will sort the results by\n   *         the sort criteria.\n   * @throws IOException\n   */\n  public static TopFieldCollector create(Sort sort, int numHits,\n      boolean fillFields, boolean trackDocScores, boolean trackMaxScore,\n      boolean docsScoredInOrder)\n      throws IOException {\n    if (sort.fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n    \n    if (numHits <= 0) {\n      throw new IllegalArgumentException(\"numHits must be > 0; please use TotalHitCountCollector if you just need the total hit count\");\n    }\n\n    FieldValueHitQueue<Entry> queue = FieldValueHitQueue.create(sort.fields, numHits);\n    if (queue.getComparators().length == 1) {\n      if (docsScoredInOrder) {\n        if (trackMaxScore) {\n          return new OneComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n        } else if (trackDocScores) {\n          return new OneComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n        } else {\n          return new OneComparatorNonScoringCollector(queue, numHits, fillFields);\n        }\n      } else {\n        if (trackMaxScore) {\n          return new OutOfOrderOneComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n        } else if (trackDocScores) {\n          return new OutOfOrderOneComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n        } else {\n          return new OutOfOrderOneComparatorNonScoringCollector(queue, numHits, fillFields);\n        }\n      }\n    }\n\n    // multiple comparators.\n    if (docsScoredInOrder) {\n      if (trackMaxScore) {\n        return new MultiComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n      } else if (trackDocScores) {\n        return new MultiComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n      } else {\n        return new MultiComparatorNonScoringCollector(queue, numHits, fillFields);\n      }\n    } else {\n      if (trackMaxScore) {\n        return new OutOfOrderMultiComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n      } else if (trackDocScores) {\n        return new OutOfOrderMultiComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n      } else {\n        return new OutOfOrderMultiComparatorNonScoringCollector(queue, numHits, fillFields);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link TopFieldCollector} from the given\n   * arguments.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>.\n   * \n   * @param sort\n   *          the sort criteria (SortFields).\n   * @param numHits\n   *          the number of results to collect.\n   * @param fillFields\n   *          specifies whether the actual field values should be returned on\n   *          the results (FieldDoc).\n   * @param trackDocScores\n   *          specifies whether document scores should be tracked and set on the\n   *          results. Note that if set to false, then the results' scores will\n   *          be set to Float.NaN. Setting this to true affects performance, as\n   *          it incurs the score computation on each competitive result.\n   *          Therefore if document scores are not required by the application,\n   *          it is recommended to set it to false.\n   * @param trackMaxScore\n   *          specifies whether the query's maxScore should be tracked and set\n   *          on the resulting {@link TopDocs}. Note that if set to false,\n   *          {@link TopDocs#getMaxScore()} returns Float.NaN. Setting this to\n   *          true affects performance as it incurs the score computation on\n   *          each result. Also, setting this true automatically sets\n   *          <code>trackDocScores</code> to true as well.\n   * @param docsScoredInOrder\n   *          specifies whether documents are scored in doc Id order or not by\n   *          the given {@link Scorer} in {@link #setScorer(Scorer)}.\n   * @return a {@link TopFieldCollector} instance which will sort the results by\n   *         the sort criteria.\n   * @throws IOException\n   */\n  public static TopFieldCollector create(Sort sort, int numHits,\n      boolean fillFields, boolean trackDocScores, boolean trackMaxScore,\n      boolean docsScoredInOrder)\n      throws IOException {\n    if (sort.fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n    \n    if (numHits <= 0) {\n      throw new IllegalArgumentException(\"numHits must be > 0; please use TotalHitCountCollector if you just need the total hit count\");\n    }\n\n    FieldValueHitQueue queue = FieldValueHitQueue.create(sort.fields, numHits);\n    if (queue.getComparators().length == 1) {\n      if (docsScoredInOrder) {\n        if (trackMaxScore) {\n          return new OneComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n        } else if (trackDocScores) {\n          return new OneComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n        } else {\n          return new OneComparatorNonScoringCollector(queue, numHits, fillFields);\n        }\n      } else {\n        if (trackMaxScore) {\n          return new OutOfOrderOneComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n        } else if (trackDocScores) {\n          return new OutOfOrderOneComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n        } else {\n          return new OutOfOrderOneComparatorNonScoringCollector(queue, numHits, fillFields);\n        }\n      }\n    }\n\n    // multiple comparators.\n    if (docsScoredInOrder) {\n      if (trackMaxScore) {\n        return new MultiComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n      } else if (trackDocScores) {\n        return new MultiComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n      } else {\n        return new MultiComparatorNonScoringCollector(queue, numHits, fillFields);\n      }\n    } else {\n      if (trackMaxScore) {\n        return new OutOfOrderMultiComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n      } else if (trackDocScores) {\n        return new OutOfOrderMultiComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n      } else {\n        return new OutOfOrderMultiComparatorNonScoringCollector(queue, numHits, fillFields);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,boolean,boolean,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,boolean,boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a new {@link TopFieldCollector} from the given\n   * arguments.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>.\n   * \n   * @param sort\n   *          the sort criteria (SortFields).\n   * @param numHits\n   *          the number of results to collect.\n   * @param fillFields\n   *          specifies whether the actual field values should be returned on\n   *          the results (FieldDoc).\n   * @param trackDocScores\n   *          specifies whether document scores should be tracked and set on the\n   *          results. Note that if set to false, then the results' scores will\n   *          be set to Float.NaN. Setting this to true affects performance, as\n   *          it incurs the score computation on each competitive result.\n   *          Therefore if document scores are not required by the application,\n   *          it is recommended to set it to false.\n   * @param trackMaxScore\n   *          specifies whether the query's maxScore should be tracked and set\n   *          on the resulting {@link TopDocs}. Note that if set to false,\n   *          {@link TopDocs#getMaxScore()} returns Float.NaN. Setting this to\n   *          true affects performance as it incurs the score computation on\n   *          each result. Also, setting this true automatically sets\n   *          <code>trackDocScores</code> to true as well.\n   * @param docsScoredInOrder\n   *          specifies whether documents are scored in doc Id order or not by\n   *          the given {@link Scorer} in {@link #setScorer(Scorer)}.\n   * @return a {@link TopFieldCollector} instance which will sort the results by\n   *         the sort criteria.\n   * @throws IOException\n   */\n  public static TopFieldCollector create(Sort sort, int numHits,\n      boolean fillFields, boolean trackDocScores, boolean trackMaxScore,\n      boolean docsScoredInOrder)\n      throws IOException {\n    if (sort.fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n    \n    if (numHits <= 0) {\n      throw new IllegalArgumentException(\"numHits must be > 0; please use TotalHitCountCollector if you just need the total hit count\");\n    }\n\n    FieldValueHitQueue<Entry> queue = FieldValueHitQueue.create(sort.fields, numHits);\n    if (queue.getComparators().length == 1) {\n      if (docsScoredInOrder) {\n        if (trackMaxScore) {\n          return new OneComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n        } else if (trackDocScores) {\n          return new OneComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n        } else {\n          return new OneComparatorNonScoringCollector(queue, numHits, fillFields);\n        }\n      } else {\n        if (trackMaxScore) {\n          return new OutOfOrderOneComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n        } else if (trackDocScores) {\n          return new OutOfOrderOneComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n        } else {\n          return new OutOfOrderOneComparatorNonScoringCollector(queue, numHits, fillFields);\n        }\n      }\n    }\n\n    // multiple comparators.\n    if (docsScoredInOrder) {\n      if (trackMaxScore) {\n        return new MultiComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n      } else if (trackDocScores) {\n        return new MultiComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n      } else {\n        return new MultiComparatorNonScoringCollector(queue, numHits, fillFields);\n      }\n    } else {\n      if (trackMaxScore) {\n        return new OutOfOrderMultiComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n      } else if (trackDocScores) {\n        return new OutOfOrderMultiComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n      } else {\n        return new OutOfOrderMultiComparatorNonScoringCollector(queue, numHits, fillFields);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link TopFieldCollector} from the given\n   * arguments.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>.\n   * \n   * @param sort\n   *          the sort criteria (SortFields).\n   * @param numHits\n   *          the number of results to collect.\n   * @param fillFields\n   *          specifies whether the actual field values should be returned on\n   *          the results (FieldDoc).\n   * @param trackDocScores\n   *          specifies whether document scores should be tracked and set on the\n   *          results. Note that if set to false, then the results' scores will\n   *          be set to Float.NaN. Setting this to true affects performance, as\n   *          it incurs the score computation on each competitive result.\n   *          Therefore if document scores are not required by the application,\n   *          it is recommended to set it to false.\n   * @param trackMaxScore\n   *          specifies whether the query's maxScore should be tracked and set\n   *          on the resulting {@link TopDocs}. Note that if set to false,\n   *          {@link TopDocs#getMaxScore()} returns Float.NaN. Setting this to\n   *          true affects performance as it incurs the score computation on\n   *          each result. Also, setting this true automatically sets\n   *          <code>trackDocScores</code> to true as well.\n   * @param docsScoredInOrder\n   *          specifies whether documents are scored in doc Id order or not by\n   *          the given {@link Scorer} in {@link #setScorer(Scorer)}.\n   * @return a {@link TopFieldCollector} instance which will sort the results by\n   *         the sort criteria.\n   * @throws IOException\n   */\n  public static TopFieldCollector create(Sort sort, int numHits,\n      boolean fillFields, boolean trackDocScores, boolean trackMaxScore,\n      boolean docsScoredInOrder)\n      throws IOException {\n    if (sort.fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n    \n    if (numHits <= 0) {\n      throw new IllegalArgumentException(\"numHits must be > 0; please use TotalHitCountCollector if you just need the total hit count\");\n    }\n\n    FieldValueHitQueue<Entry> queue = FieldValueHitQueue.create(sort.fields, numHits);\n    if (queue.getComparators().length == 1) {\n      if (docsScoredInOrder) {\n        if (trackMaxScore) {\n          return new OneComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n        } else if (trackDocScores) {\n          return new OneComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n        } else {\n          return new OneComparatorNonScoringCollector(queue, numHits, fillFields);\n        }\n      } else {\n        if (trackMaxScore) {\n          return new OutOfOrderOneComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n        } else if (trackDocScores) {\n          return new OutOfOrderOneComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n        } else {\n          return new OutOfOrderOneComparatorNonScoringCollector(queue, numHits, fillFields);\n        }\n      }\n    }\n\n    // multiple comparators.\n    if (docsScoredInOrder) {\n      if (trackMaxScore) {\n        return new MultiComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n      } else if (trackDocScores) {\n        return new MultiComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n      } else {\n        return new MultiComparatorNonScoringCollector(queue, numHits, fillFields);\n      }\n    } else {\n      if (trackMaxScore) {\n        return new OutOfOrderMultiComparatorScoringMaxScoreCollector(queue, numHits, fillFields);\n      } else if (trackDocScores) {\n        return new OutOfOrderMultiComparatorScoringNoMaxScoreCollector(queue, numHits, fillFields);\n      } else {\n        return new OutOfOrderMultiComparatorNonScoringCollector(queue, numHits, fillFields);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97e30c53fd81463c6ccd52402c91a6548cf42acb":["259055feeba9afa10e21ab63032f3778bb1802f1"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["97e30c53fd81463c6ccd52402c91a6548cf42acb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"259055feeba9afa10e21ab63032f3778bb1802f1":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","259055feeba9afa10e21ab63032f3778bb1802f1"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["259055feeba9afa10e21ab63032f3778bb1802f1","97e30c53fd81463c6ccd52402c91a6548cf42acb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["259055feeba9afa10e21ab63032f3778bb1802f1","97e30c53fd81463c6ccd52402c91a6548cf42acb"],"3bb13258feba31ab676502787ab2e1779f129b7a":["9454a6510e2db155fb01faa5c049b06ece95fab9","259055feeba9afa10e21ab63032f3778bb1802f1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"97e30c53fd81463c6ccd52402c91a6548cf42acb":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"259055feeba9afa10e21ab63032f3778bb1802f1":["97e30c53fd81463c6ccd52402c91a6548cf42acb","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","3bb13258feba31ab676502787ab2e1779f129b7a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["259055feeba9afa10e21ab63032f3778bb1802f1","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}