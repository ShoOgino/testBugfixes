{"path":"lucene/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findForcedDeletesMerges(SegmentInfos).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findForcedDeletesMerges(SegmentInfos).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findForcedDeletesMerges(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findForcedDeletesMerges(SegmentInfos infos)\n    throws CorruptIndexException, IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = (numSegs < _numLargeSegments ? numSegs : _numLargeSegments);\n    MergeSpecification spec = null;\n    \n    if(numLargeSegs < numSegs) {\n      // hack to create a shallow sub-range as SegmentInfos instance,\n      // it does not clone all metadata, but LogMerge does not need it\n      final SegmentInfos smallSegments = new SegmentInfos();\n      smallSegments.rollbackSegmentInfos(infos.asList().subList(numLargeSegs, numSegs));\n      spec = super.findForcedDeletesMerges(smallSegments);\n    }\n    \n    if(spec == null) spec = new MergeSpecification();\n    for(int i = 0; i < numLargeSegs; i++) {\n      SegmentInfo info = infos.info(i);\n      if(info.hasDeletions()) {\n        spec.add(new OneMerge(Collections.singletonList(infos.info(i))));\n      }\n    }\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findForcedDeletesMerges(SegmentInfos infos)\n    throws CorruptIndexException, IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = (numSegs < _numLargeSegments ? numSegs : _numLargeSegments);\n    MergeSpecification spec = null;\n    \n    if(numLargeSegs < numSegs) {\n      // hack to create a shallow sub-range as SegmentInfos instance,\n      // it does not clone all metadata, but LogMerge does not need it\n      final SegmentInfos smallSegments = new SegmentInfos();\n      smallSegments.rollbackSegmentInfos(infos.asList().subList(numLargeSegs, numSegs));\n      spec = super.findForcedDeletesMerges(smallSegments);\n    }\n    \n    if(spec == null) spec = new MergeSpecification();\n    for(int i = 0; i < numLargeSegs; i++) {\n      SegmentInfo info = infos.info(i);\n      if(info.hasDeletions()) {\n        spec.add(new OneMerge(Collections.singletonList(infos.info(i))));\n      }\n    }\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findForcedDeletesMerges(SegmentInfos).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findForcedDeletesMerges(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findForcedDeletesMerges(SegmentInfos infos)\n    throws CorruptIndexException, IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = (numSegs < _numLargeSegments ? numSegs : _numLargeSegments);\n    MergeSpecification spec = null;\n    \n    if(numLargeSegs < numSegs) {\n      // hack to create a shallow sub-range as SegmentInfos instance,\n      // it does not clone all metadata, but LogMerge does not need it\n      final SegmentInfos smallSegments = new SegmentInfos();\n      smallSegments.rollbackSegmentInfos(infos.asList().subList(numLargeSegs, numSegs));\n      spec = super.findForcedDeletesMerges(smallSegments);\n    }\n    \n    if(spec == null) spec = new MergeSpecification();\n    for(int i = 0; i < numLargeSegs; i++) {\n      SegmentInfoPerCommit info = infos.info(i);\n      if (info.hasDeletions()) {\n        spec.add(new OneMerge(Collections.singletonList(infos.info(i))));\n      }\n    }\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findForcedDeletesMerges(SegmentInfos infos)\n    throws CorruptIndexException, IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = (numSegs < _numLargeSegments ? numSegs : _numLargeSegments);\n    MergeSpecification spec = null;\n    \n    if(numLargeSegs < numSegs) {\n      // hack to create a shallow sub-range as SegmentInfos instance,\n      // it does not clone all metadata, but LogMerge does not need it\n      final SegmentInfos smallSegments = new SegmentInfos();\n      smallSegments.rollbackSegmentInfos(infos.asList().subList(numLargeSegs, numSegs));\n      spec = super.findForcedDeletesMerges(smallSegments);\n    }\n    \n    if(spec == null) spec = new MergeSpecification();\n    for(int i = 0; i < numLargeSegs; i++) {\n      SegmentInfo info = infos.info(i);\n      if(info.hasDeletions()) {\n        spec.add(new OneMerge(Collections.singletonList(infos.info(i))));\n      }\n    }\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findForcedDeletesMerges(SegmentInfos).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findForcedDeletesMerges(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findForcedDeletesMerges(SegmentInfos infos)\n    throws CorruptIndexException, IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = (numSegs < _numLargeSegments ? numSegs : _numLargeSegments);\n    MergeSpecification spec = null;\n    \n    if(numLargeSegs < numSegs) {\n      // hack to create a shallow sub-range as SegmentInfos instance,\n      // it does not clone all metadata, but LogMerge does not need it\n      final SegmentInfos smallSegments = new SegmentInfos();\n      smallSegments.rollbackSegmentInfos(infos.asList().subList(numLargeSegs, numSegs));\n      spec = super.findForcedDeletesMerges(smallSegments);\n    }\n    \n    if(spec == null) spec = new MergeSpecification();\n    for(int i = 0; i < numLargeSegs; i++) {\n      SegmentInfoPerCommit info = infos.info(i);\n      if (info.hasDeletions()) {\n        spec.add(new OneMerge(Collections.singletonList(infos.info(i))));\n      }\n    }\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findForcedDeletesMerges(SegmentInfos infos)\n    throws CorruptIndexException, IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = (numSegs < _numLargeSegments ? numSegs : _numLargeSegments);\n    MergeSpecification spec = null;\n    \n    if(numLargeSegs < numSegs) {\n      // hack to create a shallow sub-range as SegmentInfos instance,\n      // it does not clone all metadata, but LogMerge does not need it\n      final SegmentInfos smallSegments = new SegmentInfos();\n      smallSegments.rollbackSegmentInfos(infos.asList().subList(numLargeSegs, numSegs));\n      spec = super.findForcedDeletesMerges(smallSegments);\n    }\n    \n    if(spec == null) spec = new MergeSpecification();\n    for(int i = 0; i < numLargeSegs; i++) {\n      SegmentInfo info = infos.info(i);\n      if(info.hasDeletions()) {\n        spec.add(new OneMerge(Collections.singletonList(infos.info(i))));\n      }\n    }\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findForcedDeletesMerges(SegmentInfos).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findForcedDeletesMerges(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findForcedDeletesMerges(SegmentInfos infos)\n    throws IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = (numSegs < _numLargeSegments ? numSegs : _numLargeSegments);\n    MergeSpecification spec = null;\n    \n    if(numLargeSegs < numSegs) {\n      // hack to create a shallow sub-range as SegmentInfos instance,\n      // it does not clone all metadata, but LogMerge does not need it\n      final SegmentInfos smallSegments = new SegmentInfos();\n      smallSegments.rollbackSegmentInfos(infos.asList().subList(numLargeSegs, numSegs));\n      spec = super.findForcedDeletesMerges(smallSegments);\n    }\n    \n    if(spec == null) spec = new MergeSpecification();\n    for(int i = 0; i < numLargeSegs; i++) {\n      SegmentInfoPerCommit info = infos.info(i);\n      if (info.hasDeletions()) {\n        spec.add(new OneMerge(Collections.singletonList(infos.info(i))));\n      }\n    }\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findForcedDeletesMerges(SegmentInfos infos)\n    throws CorruptIndexException, IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = (numSegs < _numLargeSegments ? numSegs : _numLargeSegments);\n    MergeSpecification spec = null;\n    \n    if(numLargeSegs < numSegs) {\n      // hack to create a shallow sub-range as SegmentInfos instance,\n      // it does not clone all metadata, but LogMerge does not need it\n      final SegmentInfos smallSegments = new SegmentInfos();\n      smallSegments.rollbackSegmentInfos(infos.asList().subList(numLargeSegs, numSegs));\n      spec = super.findForcedDeletesMerges(smallSegments);\n    }\n    \n    if(spec == null) spec = new MergeSpecification();\n    for(int i = 0; i < numLargeSegs; i++) {\n      SegmentInfoPerCommit info = infos.info(i);\n      if (info.hasDeletions()) {\n        spec.add(new OneMerge(Collections.singletonList(infos.info(i))));\n      }\n    }\n    return spec;\n  }\n\n","bugFix":["e8c13adcc1a9fdfd6a4ac19cc83b46541d3d5584"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findForcedDeletesMerges(SegmentInfos).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findForcedDeletesMerges(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findForcedDeletesMerges(SegmentInfos infos)\n    throws IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = (numSegs < _numLargeSegments ? numSegs : _numLargeSegments);\n    MergeSpecification spec = null;\n    \n    if(numLargeSegs < numSegs) {\n      // hack to create a shallow sub-range as SegmentInfos instance,\n      // it does not clone all metadata, but LogMerge does not need it\n      final SegmentInfos smallSegments = new SegmentInfos();\n      smallSegments.rollbackSegmentInfos(infos.asList().subList(numLargeSegs, numSegs));\n      spec = super.findForcedDeletesMerges(smallSegments);\n    }\n    \n    if(spec == null) spec = new MergeSpecification();\n    for(int i = 0; i < numLargeSegs; i++) {\n      SegmentInfoPerCommit info = infos.info(i);\n      if (info.hasDeletions()) {\n        spec.add(new OneMerge(Collections.singletonList(infos.info(i))));\n      }\n    }\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findForcedDeletesMerges(SegmentInfos infos)\n    throws CorruptIndexException, IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = (numSegs < _numLargeSegments ? numSegs : _numLargeSegments);\n    MergeSpecification spec = null;\n    \n    if(numLargeSegs < numSegs) {\n      // hack to create a shallow sub-range as SegmentInfos instance,\n      // it does not clone all metadata, but LogMerge does not need it\n      final SegmentInfos smallSegments = new SegmentInfos();\n      smallSegments.rollbackSegmentInfos(infos.asList().subList(numLargeSegs, numSegs));\n      spec = super.findForcedDeletesMerges(smallSegments);\n    }\n    \n    if(spec == null) spec = new MergeSpecification();\n    for(int i = 0; i < numLargeSegs; i++) {\n      SegmentInfoPerCommit info = infos.info(i);\n      if (info.hasDeletions()) {\n        spec.add(new OneMerge(Collections.singletonList(infos.info(i))));\n      }\n    }\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03f9c72dc0e9082b70769643013a67c27bb9f444","date":1343580107,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findForcedDeletesMerges(SegmentInfos).mjava","sourceNew":null,"sourceOld":"  @Override\n  public MergeSpecification findForcedDeletesMerges(SegmentInfos infos)\n    throws IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = (numSegs < _numLargeSegments ? numSegs : _numLargeSegments);\n    MergeSpecification spec = null;\n    \n    if(numLargeSegs < numSegs) {\n      // hack to create a shallow sub-range as SegmentInfos instance,\n      // it does not clone all metadata, but LogMerge does not need it\n      final SegmentInfos smallSegments = new SegmentInfos();\n      smallSegments.rollbackSegmentInfos(infos.asList().subList(numLargeSegs, numSegs));\n      spec = super.findForcedDeletesMerges(smallSegments);\n    }\n    \n    if(spec == null) spec = new MergeSpecification();\n    for(int i = 0; i < numLargeSegs; i++) {\n      SegmentInfoPerCommit info = infos.info(i);\n      if (info.hasDeletions()) {\n        spec.add(new OneMerge(Collections.singletonList(infos.info(i))));\n      }\n    }\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findForcedDeletesMerges(SegmentInfos).mjava","sourceNew":null,"sourceOld":"  @Override\n  public MergeSpecification findForcedDeletesMerges(SegmentInfos infos)\n    throws IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = (numSegs < _numLargeSegments ? numSegs : _numLargeSegments);\n    MergeSpecification spec = null;\n    \n    if(numLargeSegs < numSegs) {\n      // hack to create a shallow sub-range as SegmentInfos instance,\n      // it does not clone all metadata, but LogMerge does not need it\n      final SegmentInfos smallSegments = new SegmentInfos();\n      smallSegments.rollbackSegmentInfos(infos.asList().subList(numLargeSegs, numSegs));\n      spec = super.findForcedDeletesMerges(smallSegments);\n    }\n    \n    if(spec == null) spec = new MergeSpecification();\n    for(int i = 0; i < numLargeSegs; i++) {\n      SegmentInfoPerCommit info = infos.info(i);\n      if (info.hasDeletions()) {\n        spec.add(new OneMerge(Collections.singletonList(infos.info(i))));\n      }\n    }\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findForcedDeletesMerges(SegmentInfos).mjava","sourceNew":null,"sourceOld":"  @Override\n  public MergeSpecification findForcedDeletesMerges(SegmentInfos infos)\n    throws IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = (numSegs < _numLargeSegments ? numSegs : _numLargeSegments);\n    MergeSpecification spec = null;\n    \n    if(numLargeSegs < numSegs) {\n      // hack to create a shallow sub-range as SegmentInfos instance,\n      // it does not clone all metadata, but LogMerge does not need it\n      final SegmentInfos smallSegments = new SegmentInfos();\n      smallSegments.rollbackSegmentInfos(infos.asList().subList(numLargeSegs, numSegs));\n      spec = super.findForcedDeletesMerges(smallSegments);\n    }\n    \n    if(spec == null) spec = new MergeSpecification();\n    for(int i = 0; i < numLargeSegs; i++) {\n      SegmentInfoPerCommit info = infos.info(i);\n      if (info.hasDeletions()) {\n        spec.add(new OneMerge(Collections.singletonList(infos.info(i))));\n      }\n    }\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03f9c72dc0e9082b70769643013a67c27bb9f444":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["b89678825b68eccaf09e6ab71675fc0b0af1e099","9d153abcf92dc5329d98571a8c3035df9bd80648"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d153abcf92dc5329d98571a8c3035df9bd80648":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["fe33227f6805edab2036cbb80645cc4e2d1fa424","03f9c72dc0e9082b70769643013a67c27bb9f444"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","03f9c72dc0e9082b70769643013a67c27bb9f444"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["03f9c72dc0e9082b70769643013a67c27bb9f444"]},"commit2Childs":{"03f9c72dc0e9082b70769643013a67c27bb9f444":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","9d153abcf92dc5329d98571a8c3035df9bd80648"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["03f9c72dc0e9082b70769643013a67c27bb9f444","fe33227f6805edab2036cbb80645cc4e2d1fa424","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}