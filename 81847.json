{"path":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testMultiField().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testMultiField().mjava","pathOld":"solr/src/test/org/apache/solr/update/DocumentBuilderTest#testMultiField().mjava","sourceNew":"  @Test\n  public void testMultiField() throws Exception {\n    SolrCore core = h.getCore();\n\n    // make sure a null value is not indexed\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"home\", \"2.2,3.3\", 1.0f );\n    Document out = DocumentBuilder.toDocument( doc, core.getSchema() );\n    assertNotNull( out.get( \"home\" ) );//contains the stored value and term vector, if there is one\n    assertNotNull( out.getFieldable( \"home_0\" + FieldType.POLY_FIELD_SEPARATOR + \"double\" ) );\n    assertNotNull( out.getFieldable( \"home_1\" + FieldType.POLY_FIELD_SEPARATOR + \"double\" ) );\n  }\n\n","sourceOld":"  @Test\n  public void testMultiField() throws Exception {\n    SolrCore core = h.getCore();\n\n    // make sure a null value is not indexed\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"home\", \"2.2,3.3\", 1.0f );\n    Document out = DocumentBuilder.toDocument( doc, core.getSchema() );\n    assertNotNull( out.get( \"home\" ) );//contains the stored value and term vector, if there is one\n    assertNotNull( out.getFieldable( \"home_0\" + FieldType.POLY_FIELD_SEPARATOR + \"double\" ) );\n    assertNotNull( out.getFieldable( \"home_1\" + FieldType.POLY_FIELD_SEPARATOR + \"double\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testMultiField().mjava","pathOld":"solr/src/test/org/apache/solr/update/DocumentBuilderTest#testMultiField().mjava","sourceNew":"  @Test\n  public void testMultiField() throws Exception {\n    SolrCore core = h.getCore();\n\n    // make sure a null value is not indexed\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"home\", \"2.2,3.3\", 1.0f );\n    Document out = DocumentBuilder.toDocument( doc, core.getSchema() );\n    assertNotNull( out.get( \"home\" ) );//contains the stored value and term vector, if there is one\n    assertNotNull( out.getFieldable( \"home_0\" + FieldType.POLY_FIELD_SEPARATOR + \"double\" ) );\n    assertNotNull( out.getFieldable( \"home_1\" + FieldType.POLY_FIELD_SEPARATOR + \"double\" ) );\n  }\n\n","sourceOld":"  @Test\n  public void testMultiField() throws Exception {\n    SolrCore core = h.getCore();\n\n    // make sure a null value is not indexed\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"home\", \"2.2,3.3\", 1.0f );\n    Document out = DocumentBuilder.toDocument( doc, core.getSchema() );\n    assertNotNull( out.get( \"home\" ) );//contains the stored value and term vector, if there is one\n    assertNotNull( out.getFieldable( \"home_0\" + FieldType.POLY_FIELD_SEPARATOR + \"double\" ) );\n    assertNotNull( out.getFieldable( \"home_1\" + FieldType.POLY_FIELD_SEPARATOR + \"double\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testMultiField().mjava","pathOld":"solr/src/test/org/apache/solr/update/DocumentBuilderTest#testMultiField().mjava","sourceNew":"  @Test\n  public void testMultiField() throws Exception {\n    SolrCore core = h.getCore();\n\n    // make sure a null value is not indexed\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"home\", \"2.2,3.3\", 1.0f );\n    Document out = DocumentBuilder.toDocument( doc, core.getSchema() );\n    assertNotNull( out.get( \"home\" ) );//contains the stored value and term vector, if there is one\n    assertNotNull( out.getFieldable( \"home_0\" + FieldType.POLY_FIELD_SEPARATOR + \"double\" ) );\n    assertNotNull( out.getFieldable( \"home_1\" + FieldType.POLY_FIELD_SEPARATOR + \"double\" ) );\n  }\n\n","sourceOld":"  @Test\n  public void testMultiField() throws Exception {\n    SolrCore core = h.getCore();\n\n    // make sure a null value is not indexed\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"home\", \"2.2,3.3\", 1.0f );\n    Document out = DocumentBuilder.toDocument( doc, core.getSchema() );\n    assertNotNull( out.get( \"home\" ) );//contains the stored value and term vector, if there is one\n    assertNotNull( out.getFieldable( \"home_0\" + FieldType.POLY_FIELD_SEPARATOR + \"double\" ) );\n    assertNotNull( out.getFieldable( \"home_1\" + FieldType.POLY_FIELD_SEPARATOR + \"double\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testMultiField().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testMultiField().mjava","sourceNew":"  @Test\n  public void testMultiField() throws Exception {\n    SolrCore core = h.getCore();\n\n    // make sure a null value is not indexed\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"home\", \"2.2,3.3\", 1.0f );\n    Document out = DocumentBuilder.toDocument( doc, core.getSchema() );\n    assertNotNull( out.get( \"home\" ) );//contains the stored value and term vector, if there is one\n    assertNotNull( out.getField( \"home_0\" + FieldType.POLY_FIELD_SEPARATOR + \"double\" ) );\n    assertNotNull( out.getField( \"home_1\" + FieldType.POLY_FIELD_SEPARATOR + \"double\" ) );\n  }\n\n","sourceOld":"  @Test\n  public void testMultiField() throws Exception {\n    SolrCore core = h.getCore();\n\n    // make sure a null value is not indexed\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"home\", \"2.2,3.3\", 1.0f );\n    Document out = DocumentBuilder.toDocument( doc, core.getSchema() );\n    assertNotNull( out.get( \"home\" ) );//contains the stored value and term vector, if there is one\n    assertNotNull( out.getFieldable( \"home_0\" + FieldType.POLY_FIELD_SEPARATOR + \"double\" ) );\n    assertNotNull( out.getFieldable( \"home_1\" + FieldType.POLY_FIELD_SEPARATOR + \"double\" ) );\n  }\n\n","bugFix":null,"bugIntro":["378c6150f20ef79f184ab9cd89a056771fc918c7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testMultiField().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testMultiField().mjava","sourceNew":"  @Test\n  public void testMultiField() throws Exception {\n    SolrCore core = h.getCore();\n\n    // make sure a null value is not indexed\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"home\", \"2.2,3.3\", 1.0f );\n    Document out = DocumentBuilder.toDocument( doc, core.getLatestSchema() );\n    assertNotNull( out.get( \"home\" ) );//contains the stored value and term vector, if there is one\n    assertNotNull( out.getField( \"home_0\" + FieldType.POLY_FIELD_SEPARATOR + \"double\" ) );\n    assertNotNull( out.getField( \"home_1\" + FieldType.POLY_FIELD_SEPARATOR + \"double\" ) );\n  }\n\n","sourceOld":"  @Test\n  public void testMultiField() throws Exception {\n    SolrCore core = h.getCore();\n\n    // make sure a null value is not indexed\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"home\", \"2.2,3.3\", 1.0f );\n    Document out = DocumentBuilder.toDocument( doc, core.getSchema() );\n    assertNotNull( out.get( \"home\" ) );//contains the stored value and term vector, if there is one\n    assertNotNull( out.getField( \"home_0\" + FieldType.POLY_FIELD_SEPARATOR + \"double\" ) );\n    assertNotNull( out.getField( \"home_1\" + FieldType.POLY_FIELD_SEPARATOR + \"double\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testMultiField().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testMultiField().mjava","sourceNew":"  @Test\n  public void testMultiField() throws Exception {\n    SolrCore core = h.getCore();\n\n    // make sure a null value is not indexed\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"home\", \"2.2,3.3\" );\n    Document out = DocumentBuilder.toDocument( doc, core.getLatestSchema() );\n    assertNotNull( out.get( \"home\" ) );//contains the stored value and term vector, if there is one\n    assertNotNull( out.getField( \"home_0\" + FieldType.POLY_FIELD_SEPARATOR + \"double\" ) );\n    assertNotNull( out.getField( \"home_1\" + FieldType.POLY_FIELD_SEPARATOR + \"double\" ) );\n  }\n\n","sourceOld":"  @Test\n  public void testMultiField() throws Exception {\n    SolrCore core = h.getCore();\n\n    // make sure a null value is not indexed\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"home\", \"2.2,3.3\", 1.0f );\n    Document out = DocumentBuilder.toDocument( doc, core.getLatestSchema() );\n    assertNotNull( out.get( \"home\" ) );//contains the stored value and term vector, if there is one\n    assertNotNull( out.getField( \"home_0\" + FieldType.POLY_FIELD_SEPARATOR + \"double\" ) );\n    assertNotNull( out.getField( \"home_1\" + FieldType.POLY_FIELD_SEPARATOR + \"double\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9a7bf782535cdb8bcd80741225832314d5c2380c","date":1489776915,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testMultiField().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testMultiField().mjava","sourceNew":"  @Test\n  public void testMultiField() throws Exception {\n    SolrCore core = h.getCore();\n\n    // make sure a null value is not indexed\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"home\", \"2.2,3.3\" );\n    Document out = DocumentBuilder.toDocument( doc, core.getLatestSchema() );\n    assertNotNull( out.get( \"home\" ) );//contains the stored value and term vector, if there is one\n    assertNotNull( out.getField( \"home_0\" + FieldType.POLY_FIELD_SEPARATOR + System.getProperty(\"solr.tests.doubleClass\", \"pdouble\") ) );\n    assertNotNull( out.getField( \"home_1\" + FieldType.POLY_FIELD_SEPARATOR + System.getProperty(\"solr.tests.doubleClass\", \"pdouble\") ) );\n  }\n\n","sourceOld":"  @Test\n  public void testMultiField() throws Exception {\n    SolrCore core = h.getCore();\n\n    // make sure a null value is not indexed\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"home\", \"2.2,3.3\" );\n    Document out = DocumentBuilder.toDocument( doc, core.getLatestSchema() );\n    assertNotNull( out.get( \"home\" ) );//contains the stored value and term vector, if there is one\n    assertNotNull( out.getField( \"home_0\" + FieldType.POLY_FIELD_SEPARATOR + \"double\" ) );\n    assertNotNull( out.getField( \"home_1\" + FieldType.POLY_FIELD_SEPARATOR + \"double\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"378c6150f20ef79f184ab9cd89a056771fc918c7","date":1490280011,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testMultiField().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testMultiField().mjava","sourceNew":"  @Test\n  public void testMultiField() throws Exception {\n    SolrCore core = h.getCore();\n\n    // make sure a null value is not indexed\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"home\", \"2.2,3.3\" );\n    Document out = DocumentBuilder.toDocument( doc, core.getLatestSchema() );\n    assertNotNull( out.get( \"home\" ) );//contains the stored value and term vector, if there is one\n    assertNotNull( out.getField( \"home_0\" + FieldType.POLY_FIELD_SEPARATOR + System.getProperty(\"solr.tests.doubleClass\", \"pdouble\") ) );\n    assertNotNull( out.getField( \"home_1\" + FieldType.POLY_FIELD_SEPARATOR + System.getProperty(\"solr.tests.doubleClass\", \"pdouble\") ) );\n  }\n\n","sourceOld":"  @Test\n  public void testMultiField() throws Exception {\n    SolrCore core = h.getCore();\n\n    // make sure a null value is not indexed\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"home\", \"2.2,3.3\" );\n    Document out = DocumentBuilder.toDocument( doc, core.getLatestSchema() );\n    assertNotNull( out.get( \"home\" ) );//contains the stored value and term vector, if there is one\n    assertNotNull( out.getField( \"home_0\" + FieldType.POLY_FIELD_SEPARATOR + \"double\" ) );\n    assertNotNull( out.getField( \"home_1\" + FieldType.POLY_FIELD_SEPARATOR + \"double\" ) );\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"351efe6fdecf9af62134d37ec2582e4a0331a4dc","date":1498149096,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testMultiField().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testMultiField().mjava","sourceNew":"  @Test\n  public void testMultiField() throws Exception {\n    SolrCore core = h.getCore();\n\n    // make sure a null value is not indexed\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"home\", \"2.2,3.3\" );\n    Document out = DocumentBuilder.toDocument( doc, core.getLatestSchema() );\n    assertNotNull( out.get( \"home\" ) );//contains the stored value and term vector, if there is one\n    assertNotNull( out.getField( \"home_0\" + FieldType.POLY_FIELD_SEPARATOR + \"double\") );\n    assertNotNull( out.getField( \"home_1\" + FieldType.POLY_FIELD_SEPARATOR + \"double\") );\n  }\n\n","sourceOld":"  @Test\n  public void testMultiField() throws Exception {\n    SolrCore core = h.getCore();\n\n    // make sure a null value is not indexed\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"home\", \"2.2,3.3\" );\n    Document out = DocumentBuilder.toDocument( doc, core.getLatestSchema() );\n    assertNotNull( out.get( \"home\" ) );//contains the stored value and term vector, if there is one\n    assertNotNull( out.getField( \"home_0\" + FieldType.POLY_FIELD_SEPARATOR + System.getProperty(\"solr.tests.doubleClass\", \"pdouble\") ) );\n    assertNotNull( out.getField( \"home_1\" + FieldType.POLY_FIELD_SEPARATOR + System.getProperty(\"solr.tests.doubleClass\", \"pdouble\") ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testMultiField().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testMultiField().mjava","sourceNew":"  @Test\n  public void testMultiField() throws Exception {\n    SolrCore core = h.getCore();\n\n    // make sure a null value is not indexed\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"home\", \"2.2,3.3\" );\n    Document out = DocumentBuilder.toDocument( doc, core.getLatestSchema() );\n    assertNotNull( out.get( \"home\" ) );//contains the stored value and term vector, if there is one\n    assertNotNull( out.getField( \"home_0\" + FieldType.POLY_FIELD_SEPARATOR + \"double\") );\n    assertNotNull( out.getField( \"home_1\" + FieldType.POLY_FIELD_SEPARATOR + \"double\") );\n  }\n\n","sourceOld":"  @Test\n  public void testMultiField() throws Exception {\n    SolrCore core = h.getCore();\n\n    // make sure a null value is not indexed\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"home\", \"2.2,3.3\" );\n    Document out = DocumentBuilder.toDocument( doc, core.getLatestSchema() );\n    assertNotNull( out.get( \"home\" ) );//contains the stored value and term vector, if there is one\n    assertNotNull( out.getField( \"home_0\" + FieldType.POLY_FIELD_SEPARATOR + System.getProperty(\"solr.tests.doubleClass\", \"pdouble\") ) );\n    assertNotNull( out.getField( \"home_1\" + FieldType.POLY_FIELD_SEPARATOR + System.getProperty(\"solr.tests.doubleClass\", \"pdouble\") ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testMultiField().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testMultiField().mjava","sourceNew":"  @Test\n  public void testMultiField() throws Exception {\n    SolrCore core = h.getCore();\n\n    // make sure a null value is not indexed\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"home\", \"2.2,3.3\" );\n    Document out = DocumentBuilder.toDocument( doc, core.getLatestSchema() );\n    assertNotNull( out.get( \"home\" ) );//contains the stored value and term vector, if there is one\n    assertNotNull( out.getField( \"home_0\" + FieldType.POLY_FIELD_SEPARATOR + \"double\") );\n    assertNotNull( out.getField( \"home_1\" + FieldType.POLY_FIELD_SEPARATOR + \"double\") );\n  }\n\n","sourceOld":"  @Test\n  public void testMultiField() throws Exception {\n    SolrCore core = h.getCore();\n\n    // make sure a null value is not indexed\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"home\", \"2.2,3.3\" );\n    Document out = DocumentBuilder.toDocument( doc, core.getLatestSchema() );\n    assertNotNull( out.get( \"home\" ) );//contains the stored value and term vector, if there is one\n    assertNotNull( out.getField( \"home_0\" + FieldType.POLY_FIELD_SEPARATOR + System.getProperty(\"solr.tests.doubleClass\", \"pdouble\") ) );\n    assertNotNull( out.getField( \"home_1\" + FieldType.POLY_FIELD_SEPARATOR + System.getProperty(\"solr.tests.doubleClass\", \"pdouble\") ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"351efe6fdecf9af62134d37ec2582e4a0331a4dc":["9a7bf782535cdb8bcd80741225832314d5c2380c"],"9a7bf782535cdb8bcd80741225832314d5c2380c":["acd9883560fd89e6448b2b447302fe543040cd4f"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["378c6150f20ef79f184ab9cd89a056771fc918c7","351efe6fdecf9af62134d37ec2582e4a0331a4dc"],"28288370235ed02234a64753cdbf0c6ec096304a":["9a7bf782535cdb8bcd80741225832314d5c2380c","351efe6fdecf9af62134d37ec2582e4a0331a4dc"],"08970e5b8411182a29412c177eff67ec1110095b":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"378c6150f20ef79f184ab9cd89a056771fc918c7":["acd9883560fd89e6448b2b447302fe543040cd4f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["c26f00b574427b55127e869b935845554afde1fa"],"acd9883560fd89e6448b2b447302fe543040cd4f":["08970e5b8411182a29412c177eff67ec1110095b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"351efe6fdecf9af62134d37ec2582e4a0331a4dc":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"9a7bf782535cdb8bcd80741225832314d5c2380c":["351efe6fdecf9af62134d37ec2582e4a0331a4dc","28288370235ed02234a64753cdbf0c6ec096304a"],"c26f00b574427b55127e869b935845554afde1fa":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"08970e5b8411182a29412c177eff67ec1110095b":["acd9883560fd89e6448b2b447302fe543040cd4f"],"378c6150f20ef79f184ab9cd89a056771fc918c7":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["08970e5b8411182a29412c177eff67ec1110095b"],"acd9883560fd89e6448b2b447302fe543040cd4f":["9a7bf782535cdb8bcd80741225832314d5c2380c","378c6150f20ef79f184ab9cd89a056771fc918c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}