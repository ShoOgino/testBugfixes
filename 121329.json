{"path":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor#getReplicaNodesForLeader(String,Replica).mjava","commits":[{"id":"9d70e774cb25c8a8d2c3e5e84200f235f9168d87","date":1553016391,"type":1,"author":"Bar Rotstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor#getReplicaNodesForLeader(String,Replica).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getReplicaNodesForLeader(String,Replica).mjava","sourceNew":"  protected List<SolrCmdDistributor.Node> getReplicaNodesForLeader(String shardId, Replica leaderReplica) {\n    ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n    String leaderCoreNodeName = leaderReplica.getName();\n    List<Replica> replicas = clusterState.getCollection(collection)\n        .getSlice(shardId)\n        .getReplicas(EnumSet.of(Replica.Type.NRT, Replica.Type.TLOG));\n    replicas.removeIf((replica) -> replica.getName().equals(leaderCoreNodeName));\n    if (replicas.isEmpty()) {\n      return null;\n    }\n\n    // check for test param that lets us miss replicas\n    String[] skipList = req.getParams().getParams(TEST_DISTRIB_SKIP_SERVERS);\n    Set<String> skipListSet = null;\n    if (skipList != null) {\n      skipListSet = new HashSet<>(skipList.length);\n      skipListSet.addAll(Arrays.asList(skipList));\n      log.info(\"test.distrib.skip.servers was found and contains:\" + skipListSet);\n    }\n\n    List<SolrCmdDistributor.Node> nodes = new ArrayList<>(replicas.size());\n    skippedCoreNodeNames = new HashSet<>();\n    ZkShardTerms zkShardTerms = zkController.getShardTerms(collection, shardId);\n    for (Replica replica : replicas) {\n      String coreNodeName = replica.getName();\n      if (skipList != null && skipListSet.contains(replica.getCoreUrl())) {\n        log.info(\"check url:\" + replica.getCoreUrl() + \" against:\" + skipListSet + \" result:true\");\n      } else if (zkShardTerms.registered(coreNodeName) && zkShardTerms.skipSendingUpdatesTo(coreNodeName)) {\n        log.debug(\"skip url:{} cause its term is less than leader\", replica.getCoreUrl());\n        skippedCoreNodeNames.add(replica.getName());\n      } else if (!clusterState.getLiveNodes().contains(replica.getNodeName())\n          || replica.getState() == Replica.State.DOWN) {\n        skippedCoreNodeNames.add(replica.getName());\n      } else {\n        nodes.add(new SolrCmdDistributor.StdNode(new ZkCoreNodeProps(replica), collection, shardId));\n      }\n    }\n    return nodes;\n  }\n\n","sourceOld":"  private List<Node> getReplicaNodesForLeader(String shardId, Replica leaderReplica) {\n    ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n    String leaderCoreNodeName = leaderReplica.getName();\n    List<Replica> replicas = clusterState.getCollection(collection)\n        .getSlice(shardId)\n        .getReplicas(EnumSet.of(Replica.Type.NRT, Replica.Type.TLOG));\n    replicas.removeIf((replica) -> replica.getName().equals(leaderCoreNodeName));\n    if (replicas.isEmpty()) {\n      return null;\n    }\n\n    // check for test param that lets us miss replicas\n    String[] skipList = req.getParams().getParams(TEST_DISTRIB_SKIP_SERVERS);\n    Set<String> skipListSet = null;\n    if (skipList != null) {\n      skipListSet = new HashSet<>(skipList.length);\n      skipListSet.addAll(Arrays.asList(skipList));\n      log.info(\"test.distrib.skip.servers was found and contains:\" + skipListSet);\n    }\n\n    List<Node> nodes = new ArrayList<>(replicas.size());\n    skippedCoreNodeNames = new HashSet<>();\n    ZkShardTerms zkShardTerms = zkController.getShardTerms(collection, shardId);\n    for (Replica replica : replicas) {\n      String coreNodeName = replica.getName();\n      if (skipList != null && skipListSet.contains(replica.getCoreUrl())) {\n        log.info(\"check url:\" + replica.getCoreUrl() + \" against:\" + skipListSet + \" result:true\");\n      } else if (zkShardTerms.registered(coreNodeName) && zkShardTerms.skipSendingUpdatesTo(coreNodeName)) {\n        log.debug(\"skip url:{} cause its term is less than leader\", replica.getCoreUrl());\n        skippedCoreNodeNames.add(replica.getName());\n      } else if (!clusterState.getLiveNodes().contains(replica.getNodeName())\n          || replica.getState() == Replica.State.DOWN) {\n        skippedCoreNodeNames.add(replica.getName());\n      } else {\n        nodes.add(new StdNode(new ZkCoreNodeProps(replica), collection, shardId));\n      }\n    }\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"88922bf68f0b509aba218f1b9e7ef5981b4d13bc","date":1570820823,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor#getReplicaNodesForLeader(String,Replica).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor#getReplicaNodesForLeader(String,Replica).mjava","sourceNew":"  protected List<SolrCmdDistributor.Node> getReplicaNodesForLeader(String shardId, Replica leaderReplica) {\n    String leaderCoreNodeName = leaderReplica.getName();\n    List<Replica> replicas = clusterState.getCollection(collection)\n        .getSlice(shardId)\n        .getReplicas(EnumSet.of(Replica.Type.NRT, Replica.Type.TLOG));\n    replicas.removeIf((replica) -> replica.getName().equals(leaderCoreNodeName));\n    if (replicas.isEmpty()) {\n      return null;\n    }\n\n    // check for test param that lets us miss replicas\n    String[] skipList = req.getParams().getParams(TEST_DISTRIB_SKIP_SERVERS);\n    Set<String> skipListSet = null;\n    if (skipList != null) {\n      skipListSet = new HashSet<>(skipList.length);\n      skipListSet.addAll(Arrays.asList(skipList));\n      log.info(\"test.distrib.skip.servers was found and contains:\" + skipListSet);\n    }\n\n    List<SolrCmdDistributor.Node> nodes = new ArrayList<>(replicas.size());\n    skippedCoreNodeNames = new HashSet<>();\n    ZkShardTerms zkShardTerms = zkController.getShardTerms(collection, shardId);\n    for (Replica replica : replicas) {\n      String coreNodeName = replica.getName();\n      if (skipList != null && skipListSet.contains(replica.getCoreUrl())) {\n        log.info(\"check url:\" + replica.getCoreUrl() + \" against:\" + skipListSet + \" result:true\");\n      } else if (zkShardTerms.registered(coreNodeName) && zkShardTerms.skipSendingUpdatesTo(coreNodeName)) {\n        log.debug(\"skip url:{} cause its term is less than leader\", replica.getCoreUrl());\n        skippedCoreNodeNames.add(replica.getName());\n      } else if (!clusterState.getLiveNodes().contains(replica.getNodeName())\n          || replica.getState() == Replica.State.DOWN) {\n        skippedCoreNodeNames.add(replica.getName());\n      } else {\n        nodes.add(new SolrCmdDistributor.StdNode(new ZkCoreNodeProps(replica), collection, shardId));\n      }\n    }\n    return nodes;\n  }\n\n","sourceOld":"  protected List<SolrCmdDistributor.Node> getReplicaNodesForLeader(String shardId, Replica leaderReplica) {\n    ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n    String leaderCoreNodeName = leaderReplica.getName();\n    List<Replica> replicas = clusterState.getCollection(collection)\n        .getSlice(shardId)\n        .getReplicas(EnumSet.of(Replica.Type.NRT, Replica.Type.TLOG));\n    replicas.removeIf((replica) -> replica.getName().equals(leaderCoreNodeName));\n    if (replicas.isEmpty()) {\n      return null;\n    }\n\n    // check for test param that lets us miss replicas\n    String[] skipList = req.getParams().getParams(TEST_DISTRIB_SKIP_SERVERS);\n    Set<String> skipListSet = null;\n    if (skipList != null) {\n      skipListSet = new HashSet<>(skipList.length);\n      skipListSet.addAll(Arrays.asList(skipList));\n      log.info(\"test.distrib.skip.servers was found and contains:\" + skipListSet);\n    }\n\n    List<SolrCmdDistributor.Node> nodes = new ArrayList<>(replicas.size());\n    skippedCoreNodeNames = new HashSet<>();\n    ZkShardTerms zkShardTerms = zkController.getShardTerms(collection, shardId);\n    for (Replica replica : replicas) {\n      String coreNodeName = replica.getName();\n      if (skipList != null && skipListSet.contains(replica.getCoreUrl())) {\n        log.info(\"check url:\" + replica.getCoreUrl() + \" against:\" + skipListSet + \" result:true\");\n      } else if (zkShardTerms.registered(coreNodeName) && zkShardTerms.skipSendingUpdatesTo(coreNodeName)) {\n        log.debug(\"skip url:{} cause its term is less than leader\", replica.getCoreUrl());\n        skippedCoreNodeNames.add(replica.getName());\n      } else if (!clusterState.getLiveNodes().contains(replica.getNodeName())\n          || replica.getState() == Replica.State.DOWN) {\n        skippedCoreNodeNames.add(replica.getName());\n      } else {\n        nodes.add(new SolrCmdDistributor.StdNode(new ZkCoreNodeProps(replica), collection, shardId));\n      }\n    }\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor#getReplicaNodesForLeader(String,Replica).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor#getReplicaNodesForLeader(String,Replica).mjava","sourceNew":"  protected List<SolrCmdDistributor.Node> getReplicaNodesForLeader(String shardId, Replica leaderReplica) {\n    String leaderCoreNodeName = leaderReplica.getName();\n    List<Replica> replicas = clusterState.getCollection(collection)\n        .getSlice(shardId)\n        .getReplicas(EnumSet.of(Replica.Type.NRT, Replica.Type.TLOG));\n    replicas.removeIf((replica) -> replica.getName().equals(leaderCoreNodeName));\n    if (replicas.isEmpty()) {\n      return null;\n    }\n\n    // check for test param that lets us miss replicas\n    String[] skipList = req.getParams().getParams(TEST_DISTRIB_SKIP_SERVERS);\n    Set<String> skipListSet = null;\n    if (skipList != null) {\n      skipListSet = new HashSet<>(skipList.length);\n      skipListSet.addAll(Arrays.asList(skipList));\n      log.info(\"test.distrib.skip.servers was found and contains:\" + skipListSet);\n    }\n\n    List<SolrCmdDistributor.Node> nodes = new ArrayList<>(replicas.size());\n    skippedCoreNodeNames = new HashSet<>();\n    ZkShardTerms zkShardTerms = zkController.getShardTerms(collection, shardId);\n    for (Replica replica : replicas) {\n      String coreNodeName = replica.getName();\n      if (skipList != null && skipListSet.contains(replica.getCoreUrl())) {\n        log.info(\"check url:\" + replica.getCoreUrl() + \" against:\" + skipListSet + \" result:true\");\n      } else if (zkShardTerms.registered(coreNodeName) && zkShardTerms.skipSendingUpdatesTo(coreNodeName)) {\n        log.debug(\"skip url:{} cause its term is less than leader\", replica.getCoreUrl());\n        skippedCoreNodeNames.add(replica.getName());\n      } else if (!clusterState.getLiveNodes().contains(replica.getNodeName())\n          || replica.getState() == Replica.State.DOWN) {\n        skippedCoreNodeNames.add(replica.getName());\n      } else {\n        nodes.add(new SolrCmdDistributor.StdNode(new ZkCoreNodeProps(replica), collection, shardId));\n      }\n    }\n    return nodes;\n  }\n\n","sourceOld":"  protected List<SolrCmdDistributor.Node> getReplicaNodesForLeader(String shardId, Replica leaderReplica) {\n    ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n    String leaderCoreNodeName = leaderReplica.getName();\n    List<Replica> replicas = clusterState.getCollection(collection)\n        .getSlice(shardId)\n        .getReplicas(EnumSet.of(Replica.Type.NRT, Replica.Type.TLOG));\n    replicas.removeIf((replica) -> replica.getName().equals(leaderCoreNodeName));\n    if (replicas.isEmpty()) {\n      return null;\n    }\n\n    // check for test param that lets us miss replicas\n    String[] skipList = req.getParams().getParams(TEST_DISTRIB_SKIP_SERVERS);\n    Set<String> skipListSet = null;\n    if (skipList != null) {\n      skipListSet = new HashSet<>(skipList.length);\n      skipListSet.addAll(Arrays.asList(skipList));\n      log.info(\"test.distrib.skip.servers was found and contains:\" + skipListSet);\n    }\n\n    List<SolrCmdDistributor.Node> nodes = new ArrayList<>(replicas.size());\n    skippedCoreNodeNames = new HashSet<>();\n    ZkShardTerms zkShardTerms = zkController.getShardTerms(collection, shardId);\n    for (Replica replica : replicas) {\n      String coreNodeName = replica.getName();\n      if (skipList != null && skipListSet.contains(replica.getCoreUrl())) {\n        log.info(\"check url:\" + replica.getCoreUrl() + \" against:\" + skipListSet + \" result:true\");\n      } else if (zkShardTerms.registered(coreNodeName) && zkShardTerms.skipSendingUpdatesTo(coreNodeName)) {\n        log.debug(\"skip url:{} cause its term is less than leader\", replica.getCoreUrl());\n        skippedCoreNodeNames.add(replica.getName());\n      } else if (!clusterState.getLiveNodes().contains(replica.getNodeName())\n          || replica.getState() == Replica.State.DOWN) {\n        skippedCoreNodeNames.add(replica.getName());\n      } else {\n        nodes.add(new SolrCmdDistributor.StdNode(new ZkCoreNodeProps(replica), collection, shardId));\n      }\n    }\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"740d649f013f07efbeb73ca854f106c60166e7c0","date":1587431295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor#getReplicaNodesForLeader(String,Replica).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor#getReplicaNodesForLeader(String,Replica).mjava","sourceNew":"  protected List<SolrCmdDistributor.Node> getReplicaNodesForLeader(String shardId, Replica leaderReplica) {\n    String leaderCoreNodeName = leaderReplica.getName();\n    List<Replica> replicas = clusterState.getCollection(collection)\n        .getSlice(shardId)\n        .getReplicas(EnumSet.of(Replica.Type.NRT, Replica.Type.TLOG));\n    replicas.removeIf((replica) -> replica.getName().equals(leaderCoreNodeName));\n    if (replicas.isEmpty()) {\n      return null;\n    }\n\n    // check for test param that lets us miss replicas\n    String[] skipList = req.getParams().getParams(TEST_DISTRIB_SKIP_SERVERS);\n    Set<String> skipListSet = null;\n    if (skipList != null) {\n      skipListSet = new HashSet<>(skipList.length);\n      skipListSet.addAll(Arrays.asList(skipList));\n      log.info(\"test.distrib.skip.servers was found and contains:{}\", skipListSet);\n    }\n\n    List<SolrCmdDistributor.Node> nodes = new ArrayList<>(replicas.size());\n    skippedCoreNodeNames = new HashSet<>();\n    ZkShardTerms zkShardTerms = zkController.getShardTerms(collection, shardId);\n    for (Replica replica : replicas) {\n      String coreNodeName = replica.getName();\n      if (skipList != null && skipListSet.contains(replica.getCoreUrl())) {\n        if (log.isInfoEnabled()) {\n          log.info(\"check url:{} against:{} result:true\", replica.getCoreUrl(), skipListSet);\n        }\n      } else if (zkShardTerms.registered(coreNodeName) && zkShardTerms.skipSendingUpdatesTo(coreNodeName)) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"skip url:{} cause its term is less than leader\", replica.getCoreUrl());\n        }\n        skippedCoreNodeNames.add(replica.getName());\n      } else if (!clusterState.getLiveNodes().contains(replica.getNodeName())\n          || replica.getState() == Replica.State.DOWN) {\n        skippedCoreNodeNames.add(replica.getName());\n      } else {\n        nodes.add(new SolrCmdDistributor.StdNode(new ZkCoreNodeProps(replica), collection, shardId));\n      }\n    }\n    return nodes;\n  }\n\n","sourceOld":"  protected List<SolrCmdDistributor.Node> getReplicaNodesForLeader(String shardId, Replica leaderReplica) {\n    String leaderCoreNodeName = leaderReplica.getName();\n    List<Replica> replicas = clusterState.getCollection(collection)\n        .getSlice(shardId)\n        .getReplicas(EnumSet.of(Replica.Type.NRT, Replica.Type.TLOG));\n    replicas.removeIf((replica) -> replica.getName().equals(leaderCoreNodeName));\n    if (replicas.isEmpty()) {\n      return null;\n    }\n\n    // check for test param that lets us miss replicas\n    String[] skipList = req.getParams().getParams(TEST_DISTRIB_SKIP_SERVERS);\n    Set<String> skipListSet = null;\n    if (skipList != null) {\n      skipListSet = new HashSet<>(skipList.length);\n      skipListSet.addAll(Arrays.asList(skipList));\n      log.info(\"test.distrib.skip.servers was found and contains:\" + skipListSet);\n    }\n\n    List<SolrCmdDistributor.Node> nodes = new ArrayList<>(replicas.size());\n    skippedCoreNodeNames = new HashSet<>();\n    ZkShardTerms zkShardTerms = zkController.getShardTerms(collection, shardId);\n    for (Replica replica : replicas) {\n      String coreNodeName = replica.getName();\n      if (skipList != null && skipListSet.contains(replica.getCoreUrl())) {\n        log.info(\"check url:\" + replica.getCoreUrl() + \" against:\" + skipListSet + \" result:true\");\n      } else if (zkShardTerms.registered(coreNodeName) && zkShardTerms.skipSendingUpdatesTo(coreNodeName)) {\n        log.debug(\"skip url:{} cause its term is less than leader\", replica.getCoreUrl());\n        skippedCoreNodeNames.add(replica.getName());\n      } else if (!clusterState.getLiveNodes().contains(replica.getNodeName())\n          || replica.getState() == Replica.State.DOWN) {\n        skippedCoreNodeNames.add(replica.getName());\n      } else {\n        nodes.add(new SolrCmdDistributor.StdNode(new ZkCoreNodeProps(replica), collection, shardId));\n      }\n    }\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"740d649f013f07efbeb73ca854f106c60166e7c0":["88922bf68f0b509aba218f1b9e7ef5981b4d13bc"],"88922bf68f0b509aba218f1b9e7ef5981b4d13bc":["9d70e774cb25c8a8d2c3e5e84200f235f9168d87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d70e774cb25c8a8d2c3e5e84200f235f9168d87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["740d649f013f07efbeb73ca854f106c60166e7c0"],"b0b597c65628ca9e73913a07e81691f8229bae35":["9d70e774cb25c8a8d2c3e5e84200f235f9168d87","88922bf68f0b509aba218f1b9e7ef5981b4d13bc"]},"commit2Childs":{"740d649f013f07efbeb73ca854f106c60166e7c0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"88922bf68f0b509aba218f1b9e7ef5981b4d13bc":["740d649f013f07efbeb73ca854f106c60166e7c0","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9d70e774cb25c8a8d2c3e5e84200f235f9168d87"],"9d70e774cb25c8a8d2c3e5e84200f235f9168d87":["88922bf68f0b509aba218f1b9e7ef5981b4d13bc","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}