{"path":"lucene/src/test/org/apache/lucene/index/TestCodecs.Verify#verifyPositions(PositionData[],DocsAndPositionsEnum).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCodecs.Verify#verifyPositions(PositionData[],DocsAndPositionsEnum).mjava","pathOld":"/dev/null","sourceNew":"    private void verifyPositions(final PositionData[] positions, final DocsAndPositionsEnum posEnum) throws Throwable {\n      for(int i=0;i<positions.length;i++) {\n        final int pos = posEnum.nextPosition();\n        assertEquals(positions[i].pos, pos);\n        if (positions[i].payload != null) {\n          assertTrue(posEnum.hasPayload());\n          if (TestCodecs.this.nextInt(3) < 2) {\n            // Verify the payload bytes\n            final BytesRef otherPayload = posEnum.getPayload();\n            assertTrue(\"expected=\" + positions[i].payload.toString() + \" got=\" + otherPayload.toString(), positions[i].payload.equals(otherPayload));\n          }\n        } else {\n          assertFalse(posEnum.hasPayload());\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56da903869515527852ee21ea7ef7bfe414cd40d","date":1294224724,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCodecs.Verify#verifyPositions(PositionData[],DocsAndPositionsEnum).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCodecs.Verify#verifyPositions(PositionData[],DocsAndPositionsEnum).mjava","sourceNew":"    private void verifyPositions(final PositionData[] positions, final DocsAndPositionsEnum posEnum) throws Throwable {\n      for(int i=0;i<positions.length;i++) {\n        final int pos = posEnum.nextPosition();\n        assertEquals(positions[i].pos, pos);\n        if (positions[i].payload != null) {\n          assertTrue(posEnum.hasPayload());\n          if (TestCodecs.random.nextInt(3) < 2) {\n            // Verify the payload bytes\n            final BytesRef otherPayload = posEnum.getPayload();\n            assertTrue(\"expected=\" + positions[i].payload.toString() + \" got=\" + otherPayload.toString(), positions[i].payload.equals(otherPayload));\n          }\n        } else {\n          assertFalse(posEnum.hasPayload());\n        }\n      }\n    }\n\n","sourceOld":"    private void verifyPositions(final PositionData[] positions, final DocsAndPositionsEnum posEnum) throws Throwable {\n      for(int i=0;i<positions.length;i++) {\n        final int pos = posEnum.nextPosition();\n        assertEquals(positions[i].pos, pos);\n        if (positions[i].payload != null) {\n          assertTrue(posEnum.hasPayload());\n          if (TestCodecs.this.nextInt(3) < 2) {\n            // Verify the payload bytes\n            final BytesRef otherPayload = posEnum.getPayload();\n            assertTrue(\"expected=\" + positions[i].payload.toString() + \" got=\" + otherPayload.toString(), positions[i].payload.equals(otherPayload));\n          }\n        } else {\n          assertFalse(posEnum.hasPayload());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCodecs.Verify#verifyPositions(PositionData[],DocsAndPositionsEnum).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCodecs.Verify#verifyPositions(PositionData[],DocsAndPositionsEnum).mjava","sourceNew":"    private void verifyPositions(final PositionData[] positions, final DocsAndPositionsEnum posEnum) throws Throwable {\n      for(int i=0;i<positions.length;i++) {\n        final int pos = posEnum.nextPosition();\n        assertEquals(positions[i].pos, pos);\n        if (positions[i].payload != null) {\n          assertTrue(posEnum.hasPayload());\n          if (TestCodecs.random.nextInt(3) < 2) {\n            // Verify the payload bytes\n            final BytesRef otherPayload = posEnum.getPayload();\n            assertTrue(\"expected=\" + positions[i].payload.toString() + \" got=\" + otherPayload.toString(), positions[i].payload.equals(otherPayload));\n          }\n        } else {\n          assertFalse(posEnum.hasPayload());\n        }\n      }\n    }\n\n","sourceOld":"    private void verifyPositions(final PositionData[] positions, final DocsAndPositionsEnum posEnum) throws Throwable {\n      for(int i=0;i<positions.length;i++) {\n        final int pos = posEnum.nextPosition();\n        assertEquals(positions[i].pos, pos);\n        if (positions[i].payload != null) {\n          assertTrue(posEnum.hasPayload());\n          if (TestCodecs.this.nextInt(3) < 2) {\n            // Verify the payload bytes\n            final BytesRef otherPayload = posEnum.getPayload();\n            assertTrue(\"expected=\" + positions[i].payload.toString() + \" got=\" + otherPayload.toString(), positions[i].payload.equals(otherPayload));\n          }\n        } else {\n          assertFalse(posEnum.hasPayload());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCodecs.Verify#verifyPositions(PositionData[],DocsAndPositionsEnum).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCodecs.Verify#verifyPositions(PositionData[],DocsAndPositionsEnum).mjava","sourceNew":"    private void verifyPositions(final PositionData[] positions, final DocsAndPositionsEnum posEnum) throws Throwable {\n      for(int i=0;i<positions.length;i++) {\n        final int pos = posEnum.nextPosition();\n        assertEquals(positions[i].pos, pos);\n        if (positions[i].payload != null) {\n          assertTrue(posEnum.hasPayload());\n          if (TestCodecs.random.nextInt(3) < 2) {\n            // Verify the payload bytes\n            final BytesRef otherPayload = posEnum.getPayload();\n            assertTrue(\"expected=\" + positions[i].payload.toString() + \" got=\" + otherPayload.toString(), positions[i].payload.equals(otherPayload));\n          }\n        } else {\n          assertFalse(posEnum.hasPayload());\n        }\n      }\n    }\n\n","sourceOld":"    private void verifyPositions(final PositionData[] positions, final DocsAndPositionsEnum posEnum) throws Throwable {\n      for(int i=0;i<positions.length;i++) {\n        final int pos = posEnum.nextPosition();\n        assertEquals(positions[i].pos, pos);\n        if (positions[i].payload != null) {\n          assertTrue(posEnum.hasPayload());\n          if (TestCodecs.this.nextInt(3) < 2) {\n            // Verify the payload bytes\n            final BytesRef otherPayload = posEnum.getPayload();\n            assertTrue(\"expected=\" + positions[i].payload.toString() + \" got=\" + otherPayload.toString(), positions[i].payload.equals(otherPayload));\n          }\n        } else {\n          assertFalse(posEnum.hasPayload());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCodecs.Verify#verifyPositions(PositionData[],DocsAndPositionsEnum).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCodecs.Verify#verifyPositions(PositionData[],DocsAndPositionsEnum).mjava","sourceNew":"    private void verifyPositions(final PositionData[] positions, final DocsAndPositionsEnum posEnum) throws Throwable {\n      for(int i=0;i<positions.length;i++) {\n        final int pos = posEnum.nextPosition();\n        assertEquals(positions[i].pos, pos);\n        if (positions[i].payload != null) {\n          assertTrue(posEnum.hasPayload());\n          if (TestCodecs.random.nextInt(3) < 2) {\n            // Verify the payload bytes\n            final BytesRef otherPayload = posEnum.getPayload();\n            assertTrue(\"expected=\" + positions[i].payload.toString() + \" got=\" + otherPayload.toString(), positions[i].payload.equals(otherPayload));\n          }\n        } else {\n          assertFalse(posEnum.hasPayload());\n        }\n      }\n    }\n\n","sourceOld":"    private void verifyPositions(final PositionData[] positions, final DocsAndPositionsEnum posEnum) throws Throwable {\n      for(int i=0;i<positions.length;i++) {\n        final int pos = posEnum.nextPosition();\n        assertEquals(positions[i].pos, pos);\n        if (positions[i].payload != null) {\n          assertTrue(posEnum.hasPayload());\n          if (TestCodecs.random.nextInt(3) < 2) {\n            // Verify the payload bytes\n            final BytesRef otherPayload = posEnum.getPayload();\n            assertTrue(\"expected=\" + positions[i].payload.toString() + \" got=\" + otherPayload.toString(), positions[i].payload.equals(otherPayload));\n          }\n        } else {\n          assertFalse(posEnum.hasPayload());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","56da903869515527852ee21ea7ef7bfe414cd40d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["56da903869515527852ee21ea7ef7bfe414cd40d"],"56da903869515527852ee21ea7ef7bfe414cd40d":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","56da903869515527852ee21ea7ef7bfe414cd40d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"56da903869515527852ee21ea7ef7bfe414cd40d":["70ad682703b8585f5d0a637efec044d57ec05efb","3a119bbc8703c10faa329ec201c654b3a35a1e3e","868da859b43505d9d2a023bfeae6dd0c795f5295"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["70ad682703b8585f5d0a637efec044d57ec05efb","56da903869515527852ee21ea7ef7bfe414cd40d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}