{"path":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesWithThreads#test2().mjava","commits":[{"id":"d048798bdb94f09ba6613d3956314a3ca151bcc3","date":1359417182,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesWithThreads#test2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testWithThreads().mjava","sourceNew":"  public void test2() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<String>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<BytesRef>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = _TestUtil.randomSimpleString(random);\n      } else {\n        s = _TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedDocValuesField(\"stringdv\", br));\n      doc.add(new NumericDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final AtomicReader sr = getOnlySegmentReader(r);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final NumericDocValues docIDToID = sr.getNumericDocValues(\"id\");\n\n    final int NUM_THREADS = _TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final SortedDocValues source;\n              source = stringDVDirect;\n              final BytesRef scratch = new BytesRef();\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                source.get(docID, scratch);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), scratch);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testWithThreads() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<String>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<BytesRef>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = _TestUtil.randomSimpleString(random);\n      } else {\n        s = _TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedDocValuesField(\"stringdv\", br));\n      doc.add(new NumericDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final AtomicReader sr = getOnlySegmentReader(r);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final NumericDocValues docIDToID = numeric(sr, \"id\");\n\n    final int NUM_THREADS = _TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final SortedDocValues source;\n              source = stringDVDirect;\n              final BytesRef scratch = new BytesRef();\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                source.get(docID, scratch);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), scratch);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c509848136dcd3ef3c47af5067801dbdfd4619a6","date":1359753769,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesWithThreads#test2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesWithThreads#test2().mjava","sourceNew":"  public void test2() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<String>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<BytesRef>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = _TestUtil.randomSimpleString(random);\n      } else {\n        s = _TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedDocValuesField(\"stringdv\", br));\n      doc.add(new NumericDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final AtomicReader sr = getOnlySegmentReader(r);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final int NUM_THREADS = _TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            final NumericDocValues docIDToID;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              docIDToID = sr.getNumericDocValues(\"id\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final SortedDocValues source;\n              source = stringDVDirect;\n              final BytesRef scratch = new BytesRef();\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                source.get(docID, scratch);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), scratch);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test2() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<String>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<BytesRef>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = _TestUtil.randomSimpleString(random);\n      } else {\n        s = _TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedDocValuesField(\"stringdv\", br));\n      doc.add(new NumericDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final AtomicReader sr = getOnlySegmentReader(r);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final NumericDocValues docIDToID = sr.getNumericDocValues(\"id\");\n\n    final int NUM_THREADS = _TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final SortedDocValues source;\n              source = stringDVDirect;\n              final BytesRef scratch = new BytesRef();\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                source.get(docID, scratch);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), scratch);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesWithThreads#test2().mjava","pathOld":"/dev/null","sourceNew":"  public void test2() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<String>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<BytesRef>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = _TestUtil.randomSimpleString(random);\n      } else {\n        s = _TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedDocValuesField(\"stringdv\", br));\n      doc.add(new NumericDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final AtomicReader sr = getOnlySegmentReader(r);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final int NUM_THREADS = _TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            final NumericDocValues docIDToID;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              docIDToID = sr.getNumericDocValues(\"id\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final SortedDocValues source;\n              source = stringDVDirect;\n              final BytesRef scratch = new BytesRef();\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                source.get(docID, scratch);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), scratch);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesWithThreads#test2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesWithThreads#test2().mjava","sourceNew":"  public void test2() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<String>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<BytesRef>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = TestUtil.randomSimpleString(random);\n      } else {\n        s = TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedDocValuesField(\"stringdv\", br));\n      doc.add(new NumericDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final AtomicReader sr = getOnlySegmentReader(r);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final int NUM_THREADS = TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            final NumericDocValues docIDToID;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              docIDToID = sr.getNumericDocValues(\"id\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final SortedDocValues source;\n              source = stringDVDirect;\n              final BytesRef scratch = new BytesRef();\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                source.get(docID, scratch);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), scratch);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test2() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<String>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<BytesRef>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = _TestUtil.randomSimpleString(random);\n      } else {\n        s = _TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedDocValuesField(\"stringdv\", br));\n      doc.add(new NumericDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final AtomicReader sr = getOnlySegmentReader(r);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final int NUM_THREADS = _TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            final NumericDocValues docIDToID;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              docIDToID = sr.getNumericDocValues(\"id\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final SortedDocValues source;\n              source = stringDVDirect;\n              final BytesRef scratch = new BytesRef();\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                source.get(docID, scratch);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), scratch);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesWithThreads#test2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesWithThreads#test2().mjava","sourceNew":"  public void test2() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = TestUtil.randomSimpleString(random);\n      } else {\n        s = TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedDocValuesField(\"stringdv\", br));\n      doc.add(new NumericDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final AtomicReader sr = getOnlySegmentReader(r);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final int NUM_THREADS = TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            final NumericDocValues docIDToID;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              docIDToID = sr.getNumericDocValues(\"id\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final SortedDocValues source;\n              source = stringDVDirect;\n              final BytesRef scratch = new BytesRef();\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                source.get(docID, scratch);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), scratch);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test2() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<String>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<BytesRef>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = TestUtil.randomSimpleString(random);\n      } else {\n        s = TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedDocValuesField(\"stringdv\", br));\n      doc.add(new NumericDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final AtomicReader sr = getOnlySegmentReader(r);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final int NUM_THREADS = TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            final NumericDocValues docIDToID;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              docIDToID = sr.getNumericDocValues(\"id\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final SortedDocValues source;\n              source = stringDVDirect;\n              final BytesRef scratch = new BytesRef();\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                source.get(docID, scratch);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), scratch);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesWithThreads#test2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesWithThreads#test2().mjava","sourceNew":"  public void test2() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = TestUtil.randomSimpleString(random);\n      } else {\n        s = TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedDocValuesField(\"stringdv\", br));\n      doc.add(new NumericDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.shutdown();\n    \n    final AtomicReader sr = getOnlySegmentReader(r);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final int NUM_THREADS = TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            final NumericDocValues docIDToID;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              docIDToID = sr.getNumericDocValues(\"id\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final SortedDocValues source;\n              source = stringDVDirect;\n              final BytesRef scratch = new BytesRef();\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                source.get(docID, scratch);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), scratch);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test2() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = TestUtil.randomSimpleString(random);\n      } else {\n        s = TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedDocValuesField(\"stringdv\", br));\n      doc.add(new NumericDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final AtomicReader sr = getOnlySegmentReader(r);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final int NUM_THREADS = TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            final NumericDocValues docIDToID;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              docIDToID = sr.getNumericDocValues(\"id\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final SortedDocValues source;\n              source = stringDVDirect;\n              final BytesRef scratch = new BytesRef();\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                source.get(docID, scratch);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), scratch);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheWithThreads#test2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesWithThreads#test2().mjava","sourceNew":"  public void test2() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = TestUtil.randomSimpleString(random);\n      } else {\n        s = TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedDocValuesField(\"stringdv\", br));\n      doc.add(new NumericDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.shutdown();\n    \n    final AtomicReader sr = getOnlySegmentReader(r);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final int NUM_THREADS = TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            final NumericDocValues docIDToID;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              docIDToID = sr.getNumericDocValues(\"id\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final SortedDocValues source;\n              source = stringDVDirect;\n              final BytesRef scratch = new BytesRef();\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                source.get(docID, scratch);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), scratch);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test2() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = TestUtil.randomSimpleString(random);\n      } else {\n        s = TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedDocValuesField(\"stringdv\", br));\n      doc.add(new NumericDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.shutdown();\n    \n    final AtomicReader sr = getOnlySegmentReader(r);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final int NUM_THREADS = TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            final NumericDocValues docIDToID;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              docIDToID = sr.getNumericDocValues(\"id\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final SortedDocValues source;\n              source = stringDVDirect;\n              final BytesRef scratch = new BytesRef();\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                source.get(docID, scratch);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), scratch);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheWithThreads#test2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesWithThreads#test2().mjava","sourceNew":"  public void test2() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = TestUtil.randomSimpleString(random);\n      } else {\n        s = TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedDocValuesField(\"stringdv\", br));\n      doc.add(new NumericDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.shutdown();\n    \n    final AtomicReader sr = getOnlySegmentReader(r);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final int NUM_THREADS = TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            final NumericDocValues docIDToID;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              docIDToID = sr.getNumericDocValues(\"id\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final SortedDocValues source;\n              source = stringDVDirect;\n              final BytesRef scratch = new BytesRef();\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                source.get(docID, scratch);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), scratch);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test2() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = TestUtil.randomSimpleString(random);\n      } else {\n        s = TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedDocValuesField(\"stringdv\", br));\n      doc.add(new NumericDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.shutdown();\n    \n    final AtomicReader sr = getOnlySegmentReader(r);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final int NUM_THREADS = TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            final NumericDocValues docIDToID;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              docIDToID = sr.getNumericDocValues(\"id\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final SortedDocValues source;\n              source = stringDVDirect;\n              final BytesRef scratch = new BytesRef();\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                source.get(docID, scratch);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), scratch);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheWithThreads#test2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesWithThreads#test2().mjava","sourceNew":"  public void test2() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = TestUtil.randomSimpleString(random);\n      } else {\n        s = TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedDocValuesField(\"stringdv\", br));\n      doc.add(new NumericDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.shutdown();\n    \n    final AtomicReader sr = getOnlySegmentReader(r);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final int NUM_THREADS = TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            final NumericDocValues docIDToID;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              docIDToID = sr.getNumericDocValues(\"id\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final SortedDocValues source;\n              source = stringDVDirect;\n              final BytesRef scratch = new BytesRef();\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                source.get(docID, scratch);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), scratch);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test2() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = TestUtil.randomSimpleString(random);\n      } else {\n        s = TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedDocValuesField(\"stringdv\", br));\n      doc.add(new NumericDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.shutdown();\n    \n    final AtomicReader sr = getOnlySegmentReader(r);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final int NUM_THREADS = TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            final NumericDocValues docIDToID;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              docIDToID = sr.getNumericDocValues(\"id\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final SortedDocValues source;\n              source = stringDVDirect;\n              final BytesRef scratch = new BytesRef();\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                source.get(docID, scratch);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), scratch);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6613659748fe4411a7dcf85266e55db1f95f7315"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c509848136dcd3ef3c47af5067801dbdfd4619a6"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"6613659748fe4411a7dcf85266e55db1f95f7315":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d048798bdb94f09ba6613d3956314a3ca151bcc3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c509848136dcd3ef3c47af5067801dbdfd4619a6":["d048798bdb94f09ba6613d3956314a3ca151bcc3"],"56572ec06f1407c066d6b7399413178b33176cd8":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["6613659748fe4411a7dcf85266e55db1f95f7315"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6613659748fe4411a7dcf85266e55db1f95f7315":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","d048798bdb94f09ba6613d3956314a3ca151bcc3"],"d048798bdb94f09ba6613d3956314a3ca151bcc3":["c509848136dcd3ef3c47af5067801dbdfd4619a6"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"c509848136dcd3ef3c47af5067801dbdfd4619a6":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}