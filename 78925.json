{"path":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoDegenerateVerticalLine#GeoDegenerateVerticalLine(PlanetModel,double,double,double).mjava","commits":[{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoDegenerateVerticalLine#GeoDegenerateVerticalLine(PlanetModel,double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoDegenerateVerticalLine#GeoDegenerateVerticalLine(PlanetModel,double,double,double).mjava","sourceNew":"  /**\n   * Accepts only values in the following ranges: lat: {@code -PI/2 -> PI/2}, longitude: {@code -PI -> PI}\n   */\n  public GeoDegenerateVerticalLine(final PlanetModel planetModel, final double topLat, final double bottomLat, final double longitude) {\n    super(planetModel);\n    // Argument checking\n    if (topLat > Math.PI * 0.5 || topLat < -Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Top latitude out of range\");\n    if (bottomLat > Math.PI * 0.5 || bottomLat < -Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Bottom latitude out of range\");\n    if (topLat < bottomLat)\n      throw new IllegalArgumentException(\"Top latitude less than bottom latitude\");\n    if (longitude < -Math.PI || longitude > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of range\");\n\n    this.topLat = topLat;\n    this.bottomLat = bottomLat;\n    this.longitude = longitude;\n\n    final double sinTopLat = Math.sin(topLat);\n    final double cosTopLat = Math.cos(topLat);\n    final double sinBottomLat = Math.sin(bottomLat);\n    final double cosBottomLat = Math.cos(bottomLat);\n    final double sinLongitude = Math.sin(longitude);\n    final double cosLongitude = Math.cos(longitude);\n\n    // Now build the two points\n    this.UHC = new GeoPoint(planetModel, sinTopLat, sinLongitude, cosTopLat, cosLongitude);\n    this.LHC = new GeoPoint(planetModel, sinBottomLat, sinLongitude, cosBottomLat, cosLongitude);\n\n    this.plane = new Plane(cosLongitude, sinLongitude);\n\n    final double middleLat = (topLat + bottomLat) * 0.5;\n    final double sinMiddleLat = Math.sin(middleLat);\n    final double cosMiddleLat = Math.cos(middleLat);\n\n    this.centerPoint = new GeoPoint(planetModel, sinMiddleLat, sinLongitude, cosMiddleLat, cosLongitude);\n\n    this.topPlane = new SidedPlane(centerPoint, planetModel, sinTopLat);\n    this.bottomPlane = new SidedPlane(centerPoint, planetModel, sinBottomLat);\n\n    this.boundingPlane = new SidedPlane(centerPoint, -sinLongitude, cosLongitude);\n\n    this.planePoints = new GeoPoint[]{UHC, LHC};\n\n    this.edgePoints = new GeoPoint[]{centerPoint};\n  }\n\n","sourceOld":"  /**\n   * Accepts only values in the following ranges: lat: {@code -PI/2 -> PI/2}, longitude: {@code -PI -> PI}\n   */\n  public GeoDegenerateVerticalLine(final PlanetModel planetModel, final double topLat, final double bottomLat, final double longitude) {\n    super(planetModel);\n    // Argument checking\n    if (topLat > Math.PI * 0.5 || topLat < -Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Top latitude out of range\");\n    if (bottomLat > Math.PI * 0.5 || bottomLat < -Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Bottom latitude out of range\");\n    if (topLat < bottomLat)\n      throw new IllegalArgumentException(\"Top latitude less than bottom latitude\");\n    if (longitude < -Math.PI || longitude > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of range\");\n\n    this.topLat = topLat;\n    this.bottomLat = bottomLat;\n    this.longitude = longitude;\n\n    final double sinTopLat = Math.sin(topLat);\n    final double cosTopLat = Math.cos(topLat);\n    final double sinBottomLat = Math.sin(bottomLat);\n    final double cosBottomLat = Math.cos(bottomLat);\n    final double sinLongitude = Math.sin(longitude);\n    final double cosLongitude = Math.cos(longitude);\n\n    // Now build the two points\n    this.UHC = new GeoPoint(planetModel, sinTopLat, sinLongitude, cosTopLat, cosLongitude);\n    this.LHC = new GeoPoint(planetModel, sinBottomLat, sinLongitude, cosBottomLat, cosLongitude);\n\n    this.plane = new Plane(cosLongitude, sinLongitude);\n\n    final double middleLat = (topLat + bottomLat) * 0.5;\n    final double sinMiddleLat = Math.sin(middleLat);\n    final double cosMiddleLat = Math.cos(middleLat);\n\n    this.centerPoint = new GeoPoint(planetModel, sinMiddleLat, sinLongitude, cosMiddleLat, cosLongitude);\n\n    this.topPlane = new SidedPlane(centerPoint, planetModel, sinTopLat);\n    this.bottomPlane = new SidedPlane(centerPoint, planetModel, sinBottomLat);\n\n    this.boundingPlane = new SidedPlane(centerPoint, -sinLongitude, cosLongitude);\n\n    this.planePoints = new GeoPoint[]{UHC, LHC};\n\n    this.edgePoints = new GeoPoint[]{centerPoint};\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f64b7098768253180859cd8faeae6b1a185b06ed","date":1441223971,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoDegenerateVerticalLine#GeoDegenerateVerticalLine(PlanetModel,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoDegenerateVerticalLine#GeoDegenerateVerticalLine(PlanetModel,double,double,double).mjava","sourceNew":"  /**\n   * Accepts only values in the following ranges: lat: {@code -PI/2 -> PI/2}, longitude: {@code -PI -> PI}\n   */\n  public GeoDegenerateVerticalLine(final PlanetModel planetModel, final double topLat, final double bottomLat, final double longitude) {\n    super(planetModel);\n    // Argument checking\n    if (topLat > Math.PI * 0.5 || topLat < -Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Top latitude out of range\");\n    if (bottomLat > Math.PI * 0.5 || bottomLat < -Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Bottom latitude out of range\");\n    if (topLat < bottomLat)\n      throw new IllegalArgumentException(\"Top latitude less than bottom latitude\");\n    if (longitude < -Math.PI || longitude > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of range\");\n\n    this.topLat = topLat;\n    this.bottomLat = bottomLat;\n    this.longitude = longitude;\n\n    final double sinTopLat = Math.sin(topLat);\n    final double cosTopLat = Math.cos(topLat);\n    final double sinBottomLat = Math.sin(bottomLat);\n    final double cosBottomLat = Math.cos(bottomLat);\n    final double sinLongitude = Math.sin(longitude);\n    final double cosLongitude = Math.cos(longitude);\n\n    // Now build the two points\n    this.UHC = new GeoPoint(planetModel, sinTopLat, sinLongitude, cosTopLat, cosLongitude, topLat, longitude);\n    this.LHC = new GeoPoint(planetModel, sinBottomLat, sinLongitude, cosBottomLat, cosLongitude, bottomLat, longitude);\n\n    this.plane = new Plane(cosLongitude, sinLongitude);\n\n    final double middleLat = (topLat + bottomLat) * 0.5;\n    final double sinMiddleLat = Math.sin(middleLat);\n    final double cosMiddleLat = Math.cos(middleLat);\n\n    this.centerPoint = new GeoPoint(planetModel, sinMiddleLat, sinLongitude, cosMiddleLat, cosLongitude);\n\n    this.topPlane = new SidedPlane(centerPoint, planetModel, sinTopLat);\n    this.bottomPlane = new SidedPlane(centerPoint, planetModel, sinBottomLat);\n\n    this.boundingPlane = new SidedPlane(centerPoint, -sinLongitude, cosLongitude);\n\n    this.planePoints = new GeoPoint[]{UHC, LHC};\n\n    this.edgePoints = new GeoPoint[]{centerPoint};\n  }\n\n","sourceOld":"  /**\n   * Accepts only values in the following ranges: lat: {@code -PI/2 -> PI/2}, longitude: {@code -PI -> PI}\n   */\n  public GeoDegenerateVerticalLine(final PlanetModel planetModel, final double topLat, final double bottomLat, final double longitude) {\n    super(planetModel);\n    // Argument checking\n    if (topLat > Math.PI * 0.5 || topLat < -Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Top latitude out of range\");\n    if (bottomLat > Math.PI * 0.5 || bottomLat < -Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Bottom latitude out of range\");\n    if (topLat < bottomLat)\n      throw new IllegalArgumentException(\"Top latitude less than bottom latitude\");\n    if (longitude < -Math.PI || longitude > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of range\");\n\n    this.topLat = topLat;\n    this.bottomLat = bottomLat;\n    this.longitude = longitude;\n\n    final double sinTopLat = Math.sin(topLat);\n    final double cosTopLat = Math.cos(topLat);\n    final double sinBottomLat = Math.sin(bottomLat);\n    final double cosBottomLat = Math.cos(bottomLat);\n    final double sinLongitude = Math.sin(longitude);\n    final double cosLongitude = Math.cos(longitude);\n\n    // Now build the two points\n    this.UHC = new GeoPoint(planetModel, sinTopLat, sinLongitude, cosTopLat, cosLongitude);\n    this.LHC = new GeoPoint(planetModel, sinBottomLat, sinLongitude, cosBottomLat, cosLongitude);\n\n    this.plane = new Plane(cosLongitude, sinLongitude);\n\n    final double middleLat = (topLat + bottomLat) * 0.5;\n    final double sinMiddleLat = Math.sin(middleLat);\n    final double cosMiddleLat = Math.cos(middleLat);\n\n    this.centerPoint = new GeoPoint(planetModel, sinMiddleLat, sinLongitude, cosMiddleLat, cosLongitude);\n\n    this.topPlane = new SidedPlane(centerPoint, planetModel, sinTopLat);\n    this.bottomPlane = new SidedPlane(centerPoint, planetModel, sinBottomLat);\n\n    this.boundingPlane = new SidedPlane(centerPoint, -sinLongitude, cosLongitude);\n\n    this.planePoints = new GeoPoint[]{UHC, LHC};\n\n    this.edgePoints = new GeoPoint[]{centerPoint};\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e444678504caf66a8060b1d514383aa4feac0c","date":1457399659,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoDegenerateVerticalLine#GeoDegenerateVerticalLine(PlanetModel,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoDegenerateVerticalLine#GeoDegenerateVerticalLine(PlanetModel,double,double,double).mjava","sourceNew":"  /**\n   * Accepts only values in the following ranges: lat: {@code -PI/2 -> PI/2}, longitude: {@code -PI -> PI}\n   */\n  public GeoDegenerateVerticalLine(final PlanetModel planetModel, final double topLat, final double bottomLat, final double longitude) {\n    super(planetModel);\n    // Argument checking\n    if (topLat > Math.PI * 0.5 || topLat < -Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Top latitude out of range\");\n    if (bottomLat > Math.PI * 0.5 || bottomLat < -Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Bottom latitude out of range\");\n    if (topLat < bottomLat)\n      throw new IllegalArgumentException(\"Top latitude less than bottom latitude\");\n    if (longitude < -Math.PI || longitude > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of range\");\n\n    this.topLat = topLat;\n    this.bottomLat = bottomLat;\n    this.longitude = longitude;\n\n    final double sinTopLat = Math.sin(topLat);\n    final double cosTopLat = Math.cos(topLat);\n    final double sinBottomLat = Math.sin(bottomLat);\n    final double cosBottomLat = Math.cos(bottomLat);\n    final double sinLongitude = Math.sin(longitude);\n    final double cosLongitude = Math.cos(longitude);\n\n    // Now build the two points\n    this.UHC = new GeoPoint(planetModel, sinTopLat, sinLongitude, cosTopLat, cosLongitude, topLat, longitude);\n    this.LHC = new GeoPoint(planetModel, sinBottomLat, sinLongitude, cosBottomLat, cosLongitude, bottomLat, longitude);\n\n    this.plane = new Plane(cosLongitude, sinLongitude);\n\n    final double middleLat = (topLat + bottomLat) * 0.5;\n    final double sinMiddleLat = Math.sin(middleLat);\n    final double cosMiddleLat = Math.cos(middleLat);\n\n    this.centerPoint = new GeoPoint(planetModel, sinMiddleLat, sinLongitude, cosMiddleLat, cosLongitude);\n\n    this.topPlane = new SidedPlane(centerPoint, planetModel, sinTopLat);\n    this.bottomPlane = new SidedPlane(centerPoint, planetModel, sinBottomLat);\n\n    this.boundingPlane = new SidedPlane(centerPoint, -sinLongitude, cosLongitude);\n\n    this.planePoints = new GeoPoint[]{UHC, LHC};\n\n    this.edgePoints = new GeoPoint[]{centerPoint};\n  }\n\n","sourceOld":"  /**\n   * Accepts only values in the following ranges: lat: {@code -PI/2 -> PI/2}, longitude: {@code -PI -> PI}\n   */\n  public GeoDegenerateVerticalLine(final PlanetModel planetModel, final double topLat, final double bottomLat, final double longitude) {\n    super(planetModel);\n    // Argument checking\n    if (topLat > Math.PI * 0.5 || topLat < -Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Top latitude out of range\");\n    if (bottomLat > Math.PI * 0.5 || bottomLat < -Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Bottom latitude out of range\");\n    if (topLat < bottomLat)\n      throw new IllegalArgumentException(\"Top latitude less than bottom latitude\");\n    if (longitude < -Math.PI || longitude > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of range\");\n\n    this.topLat = topLat;\n    this.bottomLat = bottomLat;\n    this.longitude = longitude;\n\n    final double sinTopLat = Math.sin(topLat);\n    final double cosTopLat = Math.cos(topLat);\n    final double sinBottomLat = Math.sin(bottomLat);\n    final double cosBottomLat = Math.cos(bottomLat);\n    final double sinLongitude = Math.sin(longitude);\n    final double cosLongitude = Math.cos(longitude);\n\n    // Now build the two points\n    this.UHC = new GeoPoint(planetModel, sinTopLat, sinLongitude, cosTopLat, cosLongitude, topLat, longitude);\n    this.LHC = new GeoPoint(planetModel, sinBottomLat, sinLongitude, cosBottomLat, cosLongitude, bottomLat, longitude);\n\n    this.plane = new Plane(cosLongitude, sinLongitude);\n\n    final double middleLat = (topLat + bottomLat) * 0.5;\n    final double sinMiddleLat = Math.sin(middleLat);\n    final double cosMiddleLat = Math.cos(middleLat);\n\n    this.centerPoint = new GeoPoint(planetModel, sinMiddleLat, sinLongitude, cosMiddleLat, cosLongitude);\n\n    this.topPlane = new SidedPlane(centerPoint, planetModel, sinTopLat);\n    this.bottomPlane = new SidedPlane(centerPoint, planetModel, sinBottomLat);\n\n    this.boundingPlane = new SidedPlane(centerPoint, -sinLongitude, cosLongitude);\n\n    this.planePoints = new GeoPoint[]{UHC, LHC};\n\n    this.edgePoints = new GeoPoint[]{centerPoint};\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f64b7098768253180859cd8faeae6b1a185b06ed":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3022be5842502b7c2a57a5124199bbc30236f0a0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b4e444678504caf66a8060b1d514383aa4feac0c":["f64b7098768253180859cd8faeae6b1a185b06ed"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4e444678504caf66a8060b1d514383aa4feac0c"]},"commit2Childs":{"f64b7098768253180859cd8faeae6b1a185b06ed":["b4e444678504caf66a8060b1d514383aa4feac0c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["f64b7098768253180859cd8faeae6b1a185b06ed"],"b4e444678504caf66a8060b1d514383aa4feac0c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}