{"path":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchema#doTest().mjava","commits":[{"id":"9cf81bc8c6e4078e236f0e38b3a2d0271854f207","date":1364832963,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchema#doTest().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.STATUS.toString());\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/cores\");\n    int which = r.nextInt(clients.size());\n    HttpSolrServer client = (HttpSolrServer)clients.get(which);\n    String previousBaseURL = client.getBaseURL();\n    // Strip /collection1 step from baseURL - requests fail otherwise\n    client.setBaseURL(previousBaseURL.substring(0, previousBaseURL.lastIndexOf(\"/\")));\n    NamedList namedListResponse = client.request(request);\n    client.setBaseURL(previousBaseURL); // Restore baseURL \n    NamedList status = (NamedList)namedListResponse.get(\"status\");\n    NamedList collectionStatus = (NamedList)status.get(\"collection1\");\n    String collectionSchema = (String)collectionStatus.get(CoreAdminParams.SCHEMA);\n    // Make sure the upgrade to managed schema happened\n    assertEquals(\"Schema resource name differs from expected name\", \"managed-schema\", collectionSchema);\n    \n    // Make sure \"DO NOT EDIT\" is in the content of the managed schema\n    String fileContent = getFileContentFromZooKeeper(\"managed-schema\");\n    assertTrue(\"Managed schema is missing\", fileContent.contains(\"DO NOT EDIT\"));\n    \n    // Make sure the original non-managed schema is no longer in ZooKeeper\n    assertFileNotInZooKeeper(\"schema.xml\");\n\n    // Make sure the renamed non-managed schema is present in ZooKeeper\n    fileContent = getFileContentFromZooKeeper(\"schema.xml.bak\");\n    assertTrue(\"schema file doesn't contain '<schema'\", fileContent.contains(\"<schema\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11bf766bfc5fc48f7099fd6d555b16d5ad4478f9","date":1384729182,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchema#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchema#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.STATUS.toString());\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/cores\");\n    int which = r.nextInt(clients.size());\n    HttpSolrServer client = (HttpSolrServer)clients.get(which);\n    String previousBaseURL = client.getBaseURL();\n    // Strip /collection1 step from baseURL - requests fail otherwise\n    client.setBaseURL(previousBaseURL.substring(0, previousBaseURL.lastIndexOf(\"/\")));\n    NamedList namedListResponse = client.request(request);\n    client.setBaseURL(previousBaseURL); // Restore baseURL \n    NamedList status = (NamedList)namedListResponse.get(\"status\");\n    NamedList collectionStatus = (NamedList)status.get(\"collection1\");\n    String collectionSchema = (String)collectionStatus.get(CoreAdminParams.SCHEMA);\n    // Make sure the upgrade to managed schema happened\n    assertEquals(\"Schema resource name differs from expected name\", \"managed-schema\", collectionSchema);\n\n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(), 30000);\n    try {\n      // Make sure \"DO NOT EDIT\" is in the content of the managed schema\n      String fileContent = getFileContentFromZooKeeper(zkClient, \"/solr/configs/conf1/managed-schema\");\n      assertTrue(\"Managed schema is missing\", fileContent.contains(\"DO NOT EDIT\"));\n\n      // Make sure the original non-managed schema is no longer in ZooKeeper\n      assertFileNotInZooKeeper(zkClient, \"/solr/configs/conf1\", \"schema.xml\");\n\n      // Make sure the renamed non-managed schema is present in ZooKeeper\n      fileContent = getFileContentFromZooKeeper(zkClient, \"/solr/configs/conf1/schema.xml.bak\");\n      assertTrue(\"schema file doesn't contain '<schema'\", fileContent.contains(\"<schema\"));\n    } finally {\n      if (zkClient != null) {\n        zkClient.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.STATUS.toString());\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/cores\");\n    int which = r.nextInt(clients.size());\n    HttpSolrServer client = (HttpSolrServer)clients.get(which);\n    String previousBaseURL = client.getBaseURL();\n    // Strip /collection1 step from baseURL - requests fail otherwise\n    client.setBaseURL(previousBaseURL.substring(0, previousBaseURL.lastIndexOf(\"/\")));\n    NamedList namedListResponse = client.request(request);\n    client.setBaseURL(previousBaseURL); // Restore baseURL \n    NamedList status = (NamedList)namedListResponse.get(\"status\");\n    NamedList collectionStatus = (NamedList)status.get(\"collection1\");\n    String collectionSchema = (String)collectionStatus.get(CoreAdminParams.SCHEMA);\n    // Make sure the upgrade to managed schema happened\n    assertEquals(\"Schema resource name differs from expected name\", \"managed-schema\", collectionSchema);\n    \n    // Make sure \"DO NOT EDIT\" is in the content of the managed schema\n    String fileContent = getFileContentFromZooKeeper(\"managed-schema\");\n    assertTrue(\"Managed schema is missing\", fileContent.contains(\"DO NOT EDIT\"));\n    \n    // Make sure the original non-managed schema is no longer in ZooKeeper\n    assertFileNotInZooKeeper(\"schema.xml\");\n\n    // Make sure the renamed non-managed schema is present in ZooKeeper\n    fileContent = getFileContentFromZooKeeper(\"schema.xml.bak\");\n    assertTrue(\"schema file doesn't contain '<schema'\", fileContent.contains(\"<schema\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchema#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchema#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.STATUS.toString());\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/cores\");\n    int which = r.nextInt(clients.size());\n    HttpSolrServer client = (HttpSolrServer)clients.get(which);\n    String previousBaseURL = client.getBaseURL();\n    // Strip /collection1 step from baseURL - requests fail otherwise\n    client.setBaseURL(previousBaseURL.substring(0, previousBaseURL.lastIndexOf(\"/\")));\n    NamedList namedListResponse = client.request(request);\n    client.setBaseURL(previousBaseURL); // Restore baseURL \n    NamedList status = (NamedList)namedListResponse.get(\"status\");\n    NamedList collectionStatus = (NamedList)status.get(\"collection1\");\n    String collectionSchema = (String)collectionStatus.get(CoreAdminParams.SCHEMA);\n    // Make sure the upgrade to managed schema happened\n    assertEquals(\"Schema resource name differs from expected name\", \"managed-schema\", collectionSchema);\n\n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(), 30000);\n    try {\n      // Make sure \"DO NOT EDIT\" is in the content of the managed schema\n      String fileContent = getFileContentFromZooKeeper(zkClient, \"/solr/configs/conf1/managed-schema\");\n      assertTrue(\"Managed schema is missing\", fileContent.contains(\"DO NOT EDIT\"));\n\n      // Make sure the original non-managed schema is no longer in ZooKeeper\n      assertFileNotInZooKeeper(zkClient, \"/solr/configs/conf1\", \"schema.xml\");\n\n      // Make sure the renamed non-managed schema is present in ZooKeeper\n      fileContent = getFileContentFromZooKeeper(zkClient, \"/solr/configs/conf1/schema.xml.bak\");\n      assertTrue(\"schema file doesn't contain '<schema'\", fileContent.contains(\"<schema\"));\n    } finally {\n      if (zkClient != null) {\n        zkClient.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.STATUS.toString());\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/cores\");\n    int which = r.nextInt(clients.size());\n    HttpSolrServer client = (HttpSolrServer)clients.get(which);\n    String previousBaseURL = client.getBaseURL();\n    // Strip /collection1 step from baseURL - requests fail otherwise\n    client.setBaseURL(previousBaseURL.substring(0, previousBaseURL.lastIndexOf(\"/\")));\n    NamedList namedListResponse = client.request(request);\n    client.setBaseURL(previousBaseURL); // Restore baseURL \n    NamedList status = (NamedList)namedListResponse.get(\"status\");\n    NamedList collectionStatus = (NamedList)status.get(\"collection1\");\n    String collectionSchema = (String)collectionStatus.get(CoreAdminParams.SCHEMA);\n    // Make sure the upgrade to managed schema happened\n    assertEquals(\"Schema resource name differs from expected name\", \"managed-schema\", collectionSchema);\n    \n    // Make sure \"DO NOT EDIT\" is in the content of the managed schema\n    String fileContent = getFileContentFromZooKeeper(\"managed-schema\");\n    assertTrue(\"Managed schema is missing\", fileContent.contains(\"DO NOT EDIT\"));\n    \n    // Make sure the original non-managed schema is no longer in ZooKeeper\n    assertFileNotInZooKeeper(\"schema.xml\");\n\n    // Make sure the renamed non-managed schema is present in ZooKeeper\n    fileContent = getFileContentFromZooKeeper(\"schema.xml.bak\");\n    assertTrue(\"schema file doesn't contain '<schema'\", fileContent.contains(\"<schema\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchema#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchema#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.STATUS.toString());\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/cores\");\n    int which = r.nextInt(clients.size());\n    HttpSolrClient client = (HttpSolrClient)clients.get(which);\n    String previousBaseURL = client.getBaseURL();\n    // Strip /collection1 step from baseURL - requests fail otherwise\n    client.setBaseURL(previousBaseURL.substring(0, previousBaseURL.lastIndexOf(\"/\")));\n    NamedList namedListResponse = client.request(request);\n    client.setBaseURL(previousBaseURL); // Restore baseURL \n    NamedList status = (NamedList)namedListResponse.get(\"status\");\n    NamedList collectionStatus = (NamedList)status.get(\"collection1\");\n    String collectionSchema = (String)collectionStatus.get(CoreAdminParams.SCHEMA);\n    // Make sure the upgrade to managed schema happened\n    assertEquals(\"Schema resource name differs from expected name\", \"managed-schema\", collectionSchema);\n\n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(), 30000);\n    try {\n      // Make sure \"DO NOT EDIT\" is in the content of the managed schema\n      String fileContent = getFileContentFromZooKeeper(zkClient, \"/solr/configs/conf1/managed-schema\");\n      assertTrue(\"Managed schema is missing\", fileContent.contains(\"DO NOT EDIT\"));\n\n      // Make sure the original non-managed schema is no longer in ZooKeeper\n      assertFileNotInZooKeeper(zkClient, \"/solr/configs/conf1\", \"schema.xml\");\n\n      // Make sure the renamed non-managed schema is present in ZooKeeper\n      fileContent = getFileContentFromZooKeeper(zkClient, \"/solr/configs/conf1/schema.xml.bak\");\n      assertTrue(\"schema file doesn't contain '<schema'\", fileContent.contains(\"<schema\"));\n    } finally {\n      if (zkClient != null) {\n        zkClient.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.STATUS.toString());\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/cores\");\n    int which = r.nextInt(clients.size());\n    HttpSolrServer client = (HttpSolrServer)clients.get(which);\n    String previousBaseURL = client.getBaseURL();\n    // Strip /collection1 step from baseURL - requests fail otherwise\n    client.setBaseURL(previousBaseURL.substring(0, previousBaseURL.lastIndexOf(\"/\")));\n    NamedList namedListResponse = client.request(request);\n    client.setBaseURL(previousBaseURL); // Restore baseURL \n    NamedList status = (NamedList)namedListResponse.get(\"status\");\n    NamedList collectionStatus = (NamedList)status.get(\"collection1\");\n    String collectionSchema = (String)collectionStatus.get(CoreAdminParams.SCHEMA);\n    // Make sure the upgrade to managed schema happened\n    assertEquals(\"Schema resource name differs from expected name\", \"managed-schema\", collectionSchema);\n\n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(), 30000);\n    try {\n      // Make sure \"DO NOT EDIT\" is in the content of the managed schema\n      String fileContent = getFileContentFromZooKeeper(zkClient, \"/solr/configs/conf1/managed-schema\");\n      assertTrue(\"Managed schema is missing\", fileContent.contains(\"DO NOT EDIT\"));\n\n      // Make sure the original non-managed schema is no longer in ZooKeeper\n      assertFileNotInZooKeeper(zkClient, \"/solr/configs/conf1\", \"schema.xml\");\n\n      // Make sure the renamed non-managed schema is present in ZooKeeper\n      fileContent = getFileContentFromZooKeeper(zkClient, \"/solr/configs/conf1/schema.xml.bak\");\n      assertTrue(\"schema file doesn't contain '<schema'\", fileContent.contains(\"<schema\"));\n    } finally {\n      if (zkClient != null) {\n        zkClient.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchema#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchema#doTest().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.STATUS.toString());\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/cores\");\n    int which = r.nextInt(clients.size());\n    HttpSolrClient client = (HttpSolrClient)clients.get(which);\n    String previousBaseURL = client.getBaseURL();\n    // Strip /collection1 step from baseURL - requests fail otherwise\n    client.setBaseURL(previousBaseURL.substring(0, previousBaseURL.lastIndexOf(\"/\")));\n    NamedList namedListResponse = client.request(request);\n    client.setBaseURL(previousBaseURL); // Restore baseURL \n    NamedList status = (NamedList)namedListResponse.get(\"status\");\n    NamedList collectionStatus = (NamedList)status.get(\"collection1\");\n    String collectionSchema = (String)collectionStatus.get(CoreAdminParams.SCHEMA);\n    // Make sure the upgrade to managed schema happened\n    assertEquals(\"Schema resource name differs from expected name\", \"managed-schema\", collectionSchema);\n\n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(), 30000);\n    try {\n      // Make sure \"DO NOT EDIT\" is in the content of the managed schema\n      String fileContent = getFileContentFromZooKeeper(zkClient, \"/solr/configs/conf1/managed-schema\");\n      assertTrue(\"Managed schema is missing\", fileContent.contains(\"DO NOT EDIT\"));\n\n      // Make sure the original non-managed schema is no longer in ZooKeeper\n      assertFileNotInZooKeeper(zkClient, \"/solr/configs/conf1\", \"schema.xml\");\n\n      // Make sure the renamed non-managed schema is present in ZooKeeper\n      fileContent = getFileContentFromZooKeeper(zkClient, \"/solr/configs/conf1/schema.xml.bak\");\n      assertTrue(\"schema file doesn't contain '<schema'\", fileContent.contains(\"<schema\"));\n    } finally {\n      if (zkClient != null) {\n        zkClient.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.STATUS.toString());\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/cores\");\n    int which = r.nextInt(clients.size());\n    HttpSolrClient client = (HttpSolrClient)clients.get(which);\n    String previousBaseURL = client.getBaseURL();\n    // Strip /collection1 step from baseURL - requests fail otherwise\n    client.setBaseURL(previousBaseURL.substring(0, previousBaseURL.lastIndexOf(\"/\")));\n    NamedList namedListResponse = client.request(request);\n    client.setBaseURL(previousBaseURL); // Restore baseURL \n    NamedList status = (NamedList)namedListResponse.get(\"status\");\n    NamedList collectionStatus = (NamedList)status.get(\"collection1\");\n    String collectionSchema = (String)collectionStatus.get(CoreAdminParams.SCHEMA);\n    // Make sure the upgrade to managed schema happened\n    assertEquals(\"Schema resource name differs from expected name\", \"managed-schema\", collectionSchema);\n\n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(), 30000);\n    try {\n      // Make sure \"DO NOT EDIT\" is in the content of the managed schema\n      String fileContent = getFileContentFromZooKeeper(zkClient, \"/solr/configs/conf1/managed-schema\");\n      assertTrue(\"Managed schema is missing\", fileContent.contains(\"DO NOT EDIT\"));\n\n      // Make sure the original non-managed schema is no longer in ZooKeeper\n      assertFileNotInZooKeeper(zkClient, \"/solr/configs/conf1\", \"schema.xml\");\n\n      // Make sure the renamed non-managed schema is present in ZooKeeper\n      fileContent = getFileContentFromZooKeeper(zkClient, \"/solr/configs/conf1/schema.xml.bak\");\n      assertTrue(\"schema file doesn't contain '<schema'\", fileContent.contains(\"<schema\"));\n    } finally {\n      if (zkClient != null) {\n        zkClient.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"11bf766bfc5fc48f7099fd6d555b16d5ad4478f9":["9cf81bc8c6e4078e236f0e38b3a2d0271854f207"],"9cf81bc8c6e4078e236f0e38b3a2d0271854f207":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"abb23fcc2461782ab204e61213240feb77d355aa":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["9cf81bc8c6e4078e236f0e38b3a2d0271854f207","11bf766bfc5fc48f7099fd6d555b16d5ad4478f9"],"bafca15d8e408346a67f4282ad1143b88023893b":["11bf766bfc5fc48f7099fd6d555b16d5ad4478f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["abb23fcc2461782ab204e61213240feb77d355aa"]},"commit2Childs":{"11bf766bfc5fc48f7099fd6d555b16d5ad4478f9":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","bafca15d8e408346a67f4282ad1143b88023893b"],"9cf81bc8c6e4078e236f0e38b3a2d0271854f207":["11bf766bfc5fc48f7099fd6d555b16d5ad4478f9","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"abb23fcc2461782ab204e61213240feb77d355aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9cf81bc8c6e4078e236f0e38b3a2d0271854f207"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"bafca15d8e408346a67f4282ad1143b88023893b":["abb23fcc2461782ab204e61213240feb77d355aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}