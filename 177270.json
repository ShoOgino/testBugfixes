{"path":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#loadProperties(XmlConfigFile).mjava","commits":[{"id":"ee622110ba6021d0390037e77574743c1e55348c","date":1546700916,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#loadProperties(XmlConfigFile).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#loadProperties(Config).mjava","sourceNew":"  private static Properties loadProperties(XmlConfigFile config) {\n    try {\n      Node node = ((NodeList) config.evaluate(\"solr\", XPathConstants.NODESET)).item(0);\n      XPath xpath = config.getXPath();\n      NodeList props = (NodeList) xpath.evaluate(\"property\", node, XPathConstants.NODESET);\n      Properties properties = new Properties();\n      for (int i = 0; i < props.getLength(); i++) {\n        Node prop = props.item(i);\n        properties.setProperty(DOMUtil.getAttr(prop, NAME),\n            PropertiesUtil.substituteProperty(DOMUtil.getAttr(prop, \"value\"), null));\n      }\n      return properties;\n    }\n    catch (XPathExpressionException e) {\n      log.warn(\"Error parsing solr.xml: \" + e.getMessage());\n      return null;\n    }\n  }\n\n","sourceOld":"  private static Properties loadProperties(Config config) {\n    try {\n      Node node = ((NodeList) config.evaluate(\"solr\", XPathConstants.NODESET)).item(0);\n      XPath xpath = config.getXPath();\n      NodeList props = (NodeList) xpath.evaluate(\"property\", node, XPathConstants.NODESET);\n      Properties properties = new Properties();\n      for (int i = 0; i < props.getLength(); i++) {\n        Node prop = props.item(i);\n        properties.setProperty(DOMUtil.getAttr(prop, NAME),\n            PropertiesUtil.substituteProperty(DOMUtil.getAttr(prop, \"value\"), null));\n      }\n      return properties;\n    }\n    catch (XPathExpressionException e) {\n      log.warn(\"Error parsing solr.xml: \" + e.getMessage());\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3","date":1583932828,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#loadProperties(XmlConfigFile).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#loadProperties(XmlConfigFile).mjava","sourceNew":"  private static Properties loadProperties(XmlConfigFile config) {\n    try {\n      Node node = ((NodeList) config.evaluate(\"solr\", XPathConstants.NODESET)).item(0);\n      XPath xpath = config.getXPath();\n      NodeList props = (NodeList) xpath.evaluate(\"property\", node, XPathConstants.NODESET);\n      Properties properties = new Properties(config.getSubstituteProperties());\n      for (int i = 0; i < props.getLength(); i++) {\n        Node prop = props.item(i);\n        properties.setProperty(DOMUtil.getAttr(prop, NAME),\n            PropertiesUtil.substituteProperty(DOMUtil.getAttr(prop, \"value\"), null));\n      }\n      return properties;\n    }\n    catch (XPathExpressionException e) {\n      log.warn(\"Error parsing solr.xml: \" + e.getMessage());\n      return null;\n    }\n  }\n\n","sourceOld":"  private static Properties loadProperties(XmlConfigFile config) {\n    try {\n      Node node = ((NodeList) config.evaluate(\"solr\", XPathConstants.NODESET)).item(0);\n      XPath xpath = config.getXPath();\n      NodeList props = (NodeList) xpath.evaluate(\"property\", node, XPathConstants.NODESET);\n      Properties properties = new Properties();\n      for (int i = 0; i < props.getLength(); i++) {\n        Node prop = props.item(i);\n        properties.setProperty(DOMUtil.getAttr(prop, NAME),\n            PropertiesUtil.substituteProperty(DOMUtil.getAttr(prop, \"value\"), null));\n      }\n      return properties;\n    }\n    catch (XPathExpressionException e) {\n      log.warn(\"Error parsing solr.xml: \" + e.getMessage());\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"140be51d03394488536f4aacedace29f9b318347","date":1587170432,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#loadProperties(XmlConfigFile).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#loadProperties(XmlConfigFile).mjava","sourceNew":"  private static Properties loadProperties(XmlConfigFile config) {\n    try {\n      Node node = ((NodeList) config.evaluate(\"solr\", XPathConstants.NODESET)).item(0);\n      XPath xpath = config.getXPath();\n      NodeList props = (NodeList) xpath.evaluate(\"property\", node, XPathConstants.NODESET);\n      Properties properties = new Properties(config.getSubstituteProperties());\n      for (int i = 0; i < props.getLength(); i++) {\n        Node prop = props.item(i);\n        properties.setProperty(DOMUtil.getAttr(prop, NAME),\n            PropertiesUtil.substituteProperty(DOMUtil.getAttr(prop, \"value\"), null));\n      }\n      return properties;\n    }\n    catch (XPathExpressionException e) {\n      if (log.isWarnEnabled()) {\n        log.warn(\"Error parsing solr.xml: {}\", e.getMessage());\n      }\n      return null;\n    }\n  }\n\n","sourceOld":"  private static Properties loadProperties(XmlConfigFile config) {\n    try {\n      Node node = ((NodeList) config.evaluate(\"solr\", XPathConstants.NODESET)).item(0);\n      XPath xpath = config.getXPath();\n      NodeList props = (NodeList) xpath.evaluate(\"property\", node, XPathConstants.NODESET);\n      Properties properties = new Properties(config.getSubstituteProperties());\n      for (int i = 0; i < props.getLength(); i++) {\n        Node prop = props.item(i);\n        properties.setProperty(DOMUtil.getAttr(prop, NAME),\n            PropertiesUtil.substituteProperty(DOMUtil.getAttr(prop, \"value\"), null));\n      }\n      return properties;\n    }\n    catch (XPathExpressionException e) {\n      log.warn(\"Error parsing solr.xml: \" + e.getMessage());\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#loadProperties(XmlConfigFile).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#loadProperties(XmlConfigFile).mjava","sourceNew":"  private static Properties loadProperties(XmlConfigFile config) {\n    try {\n      Node node = ((NodeList) config.evaluate(\"solr\", XPathConstants.NODESET)).item(0);\n      XPath xpath = config.getXPath();\n      NodeList props = (NodeList) xpath.evaluate(\"property\", node, XPathConstants.NODESET);\n      Properties properties = new Properties(config.getSubstituteProperties());\n      for (int i = 0; i < props.getLength(); i++) {\n        Node prop = props.item(i);\n        properties.setProperty(DOMUtil.getAttr(prop, NAME),\n            PropertiesUtil.substituteProperty(DOMUtil.getAttr(prop, \"value\"), null));\n      }\n      return properties;\n    }\n    catch (XPathExpressionException e) {\n      log.warn(\"Error parsing solr.xml: {}\", e.getMessage());\n      return null;\n    }\n  }\n\n","sourceOld":"  private static Properties loadProperties(XmlConfigFile config) {\n    try {\n      Node node = ((NodeList) config.evaluate(\"solr\", XPathConstants.NODESET)).item(0);\n      XPath xpath = config.getXPath();\n      NodeList props = (NodeList) xpath.evaluate(\"property\", node, XPathConstants.NODESET);\n      Properties properties = new Properties(config.getSubstituteProperties());\n      for (int i = 0; i < props.getLength(); i++) {\n        Node prop = props.item(i);\n        properties.setProperty(DOMUtil.getAttr(prop, NAME),\n            PropertiesUtil.substituteProperty(DOMUtil.getAttr(prop, \"value\"), null));\n      }\n      return properties;\n    }\n    catch (XPathExpressionException e) {\n      if (log.isWarnEnabled()) {\n        log.warn(\"Error parsing solr.xml: {}\", e.getMessage());\n      }\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57c238f5fb83803b49b37b3a1a12224a64d47542","date":1593655679,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#loadProperties(XmlConfigFile).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#loadProperties(XmlConfigFile).mjava","sourceNew":"  private static Properties loadProperties(XmlConfigFile config) {\n    try {\n      Node node = ((NodeList) config.evaluate(\"solr\", XPathConstants.NODESET)).item(0);\n      XPath xpath = config.getXPath();\n      NodeList props = (NodeList) xpath.evaluate(\"property\", node, XPathConstants.NODESET);\n      Properties properties = new Properties(config.getSubstituteProperties());\n      for (int i = 0; i < props.getLength(); i++) {\n        Node prop = props.item(i);\n        properties.setProperty(DOMUtil.getAttr(prop, NAME),\n            PropertiesUtil.substituteProperty(DOMUtil.getAttr(prop, \"value\"), null));\n      }\n      return properties;\n    }\n    catch (XPathExpressionException e) {\n      log.warn(\"Error parsing solr.xml: \", e);\n      return null;\n    }\n  }\n\n","sourceOld":"  private static Properties loadProperties(XmlConfigFile config) {\n    try {\n      Node node = ((NodeList) config.evaluate(\"solr\", XPathConstants.NODESET)).item(0);\n      XPath xpath = config.getXPath();\n      NodeList props = (NodeList) xpath.evaluate(\"property\", node, XPathConstants.NODESET);\n      Properties properties = new Properties(config.getSubstituteProperties());\n      for (int i = 0; i < props.getLength(); i++) {\n        Node prop = props.item(i);\n        properties.setProperty(DOMUtil.getAttr(prop, NAME),\n            PropertiesUtil.substituteProperty(DOMUtil.getAttr(prop, \"value\"), null));\n      }\n      return properties;\n    }\n    catch (XPathExpressionException e) {\n      log.warn(\"Error parsing solr.xml: {}\", e.getMessage());\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ee622110ba6021d0390037e77574743c1e55348c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["ee622110ba6021d0390037e77574743c1e55348c"],"140be51d03394488536f4aacedace29f9b318347":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57c238f5fb83803b49b37b3a1a12224a64d47542":["575e66bd4b2349209027f6801184da7fc3cba13f"],"575e66bd4b2349209027f6801184da7fc3cba13f":["140be51d03394488536f4aacedace29f9b318347"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57c238f5fb83803b49b37b3a1a12224a64d47542"]},"commit2Childs":{"ee622110ba6021d0390037e77574743c1e55348c":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["140be51d03394488536f4aacedace29f9b318347"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ee622110ba6021d0390037e77574743c1e55348c"],"140be51d03394488536f4aacedace29f9b318347":["575e66bd4b2349209027f6801184da7fc3cba13f"],"57c238f5fb83803b49b37b3a1a12224a64d47542":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"575e66bd4b2349209027f6801184da7fc3cba13f":["57c238f5fb83803b49b37b3a1a12224a64d47542"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}