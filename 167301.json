{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/SpearmansCorrelationEvaluator#doWork(Object,Object).mjava","commits":[{"id":"9d09e70d62d23dab1693c77552c0276763fdd6ca","date":1504890076,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/SpearmansCorrelationEvaluator#doWork(Object,Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation();\n\n    return spearmansCorrelation.correlation(\n        ((List)first).stream().mapToDouble(value -> ((BigDecimal)value).doubleValue()).toArray(),\n        ((List)second).stream().mapToDouble(value -> ((BigDecimal)value).doubleValue()).toArray()\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08e30330b33aca2e2864d648a9e1ed2d2f4086f3","date":1504933371,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/SpearmansCorrelationEvaluator#doWork(Object,Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation();\n\n    return spearmansCorrelation.correlation(\n        ((List)first).stream().mapToDouble(value -> ((BigDecimal)value).doubleValue()).toArray(),\n        ((List)second).stream().mapToDouble(value -> ((BigDecimal)value).doubleValue()).toArray()\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"685bd38810c206c93e9058f3c2cfa9827c086c27","date":1505751821,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/SpearmansCorrelationEvaluator#doWork(Object,Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation();\n\n    return spearmansCorrelation.correlation(\n        ((List)first).stream().mapToDouble(value -> ((BigDecimal)value).doubleValue()).toArray(),\n        ((List)second).stream().mapToDouble(value -> ((BigDecimal)value).doubleValue()).toArray()\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a2efb7373cfceb83cf0a7f6e38a1d4ac1833806","date":1510620286,"type":4,"author":"Joel Bernstein","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/SpearmansCorrelationEvaluator#doWork(Object,Object).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation();\n\n    return spearmansCorrelation.correlation(\n        ((List)first).stream().mapToDouble(value -> ((BigDecimal)value).doubleValue()).toArray(),\n        ((List)second).stream().mapToDouble(value -> ((BigDecimal)value).doubleValue()).toArray()\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"685bd38810c206c93e9058f3c2cfa9827c086c27":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","08e30330b33aca2e2864d648a9e1ed2d2f4086f3"],"08e30330b33aca2e2864d648a9e1ed2d2f4086f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9d09e70d62d23dab1693c77552c0276763fdd6ca"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d09e70d62d23dab1693c77552c0276763fdd6ca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2a2efb7373cfceb83cf0a7f6e38a1d4ac1833806":["08e30330b33aca2e2864d648a9e1ed2d2f4086f3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2a2efb7373cfceb83cf0a7f6e38a1d4ac1833806"]},"commit2Childs":{"685bd38810c206c93e9058f3c2cfa9827c086c27":[],"08e30330b33aca2e2864d648a9e1ed2d2f4086f3":["685bd38810c206c93e9058f3c2cfa9827c086c27","2a2efb7373cfceb83cf0a7f6e38a1d4ac1833806"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["685bd38810c206c93e9058f3c2cfa9827c086c27","08e30330b33aca2e2864d648a9e1ed2d2f4086f3","9d09e70d62d23dab1693c77552c0276763fdd6ca"],"9d09e70d62d23dab1693c77552c0276763fdd6ca":["08e30330b33aca2e2864d648a9e1ed2d2f4086f3"],"2a2efb7373cfceb83cf0a7f6e38a1d4ac1833806":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}