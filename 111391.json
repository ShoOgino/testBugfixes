{"path":"lucene/src/java/org/apache/lucene/index/Terms#docs(Bits,BytesRef,TermState,DocsEnum).mjava","commits":[{"id":"fa1a999d6674423e5c4ac858b410283f6fe03f20","date":1294868331,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/Terms#docs(Bits,BytesRef,TermState,DocsEnum).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: Get {@link DocsEnum} for the specified {@link TermState}.\n   * This method may return <code>null</code> if the term does not exist.\n   * \n   * @see TermsEnum#termState()\n   * @see TermsEnum#seek(BytesRef, TermState) */\n  public DocsEnum docs(Bits skipDocs, BytesRef term, TermState termState, DocsEnum reuse) throws IOException {\n    final TermsEnum termsEnum = getThreadTermsEnum();\n    if (termsEnum.seek(term, termState) == TermsEnum.SeekStatus.FOUND) {\n      return termsEnum.docs(skipDocs, reuse);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/Terms#docs(Bits,BytesRef,TermState,DocsEnum).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: Get {@link DocsEnum} for the specified {@link TermState}.\n   * This method may return <code>null</code> if the term does not exist.\n   * \n   * @see TermsEnum#termState()\n   * @see TermsEnum#seek(BytesRef, TermState) */\n  public DocsEnum docs(Bits skipDocs, BytesRef term, TermState termState, DocsEnum reuse) throws IOException {\n    final TermsEnum termsEnum = getThreadTermsEnum();\n    if (termsEnum.seek(term, termState) == TermsEnum.SeekStatus.FOUND) {\n      return termsEnum.docs(skipDocs, reuse);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1add9ddc0005b07550d4350720aac22dc9886b3","date":1295549635,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/Terms#docs(Bits,BytesRef,TermState,DocsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/Terms#docs(Bits,BytesRef,TermState,DocsEnum).mjava","sourceNew":"  /**\n   * Expert: Get {@link DocsEnum} for the specified {@link TermState}.\n   * This method may return <code>null</code> if the term does not exist.\n   * \n   * @see TermsEnum#termState()\n   * @see TermsEnum#seek(BytesRef, TermState) */\n  public DocsEnum docs(Bits skipDocs, BytesRef term, TermState termState, DocsEnum reuse) throws IOException {\n    final TermsEnum termsEnum = getThreadTermsEnum();\n    termsEnum.seek(term, termState);\n    return termsEnum.docs(skipDocs, reuse);\n  }\n\n","sourceOld":"  /**\n   * Expert: Get {@link DocsEnum} for the specified {@link TermState}.\n   * This method may return <code>null</code> if the term does not exist.\n   * \n   * @see TermsEnum#termState()\n   * @see TermsEnum#seek(BytesRef, TermState) */\n  public DocsEnum docs(Bits skipDocs, BytesRef term, TermState termState, DocsEnum reuse) throws IOException {\n    final TermsEnum termsEnum = getThreadTermsEnum();\n    if (termsEnum.seek(term, termState) == TermsEnum.SeekStatus.FOUND) {\n      return termsEnum.docs(skipDocs, reuse);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/Terms#docs(Bits,BytesRef,TermState,DocsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/Terms#docs(Bits,BytesRef,TermState,DocsEnum).mjava","sourceNew":"  /**\n   * Expert: Get {@link DocsEnum} for the specified {@link TermState}.\n   * This method may return <code>null</code> if the term does not exist.\n   * \n   * @see TermsEnum#termState()\n   * @see TermsEnum#seek(BytesRef, TermState) */\n  public DocsEnum docs(Bits skipDocs, BytesRef term, TermState termState, DocsEnum reuse) throws IOException {\n    final TermsEnum termsEnum = getThreadTermsEnum();\n    termsEnum.seek(term, termState);\n    return termsEnum.docs(skipDocs, reuse);\n  }\n\n","sourceOld":"  /**\n   * Expert: Get {@link DocsEnum} for the specified {@link TermState}.\n   * This method may return <code>null</code> if the term does not exist.\n   * \n   * @see TermsEnum#termState()\n   * @see TermsEnum#seek(BytesRef, TermState) */\n  public DocsEnum docs(Bits skipDocs, BytesRef term, TermState termState, DocsEnum reuse) throws IOException {\n    final TermsEnum termsEnum = getThreadTermsEnum();\n    if (termsEnum.seek(term, termState) == TermsEnum.SeekStatus.FOUND) {\n      return termsEnum.docs(skipDocs, reuse);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/Terms#docs(Bits,BytesRef,TermState,DocsEnum).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: Get {@link DocsEnum} for the specified {@link TermState}.\n   * This method may return <code>null</code> if the term does not exist.\n   * \n   * @see TermsEnum#termState()\n   * @see TermsEnum#seek(BytesRef, TermState) */\n  public DocsEnum docs(Bits skipDocs, BytesRef term, TermState termState, DocsEnum reuse) throws IOException {\n    final TermsEnum termsEnum = getThreadTermsEnum();\n    termsEnum.seek(term, termState);\n    return termsEnum.docs(skipDocs, reuse);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9cc9d77712aba3662f24632df7539ab75e3667","date":1309095238,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/Terms#docs(Bits,BytesRef,TermState,DocsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/Terms#docs(Bits,BytesRef,TermState,DocsEnum).mjava","sourceNew":"  /**\n   * Expert: Get {@link DocsEnum} for the specified {@link TermState}.\n   * This method may return <code>null</code> if the term does not exist.\n   * \n   * @see TermsEnum#termState()\n   * @see TermsEnum#seekExact(BytesRef, TermState) */\n  public DocsEnum docs(Bits skipDocs, BytesRef term, TermState termState, DocsEnum reuse) throws IOException {\n    final TermsEnum termsEnum = getThreadTermsEnum();\n    termsEnum.seekExact(term, termState);\n    return termsEnum.docs(skipDocs, reuse);\n  }\n\n","sourceOld":"  /**\n   * Expert: Get {@link DocsEnum} for the specified {@link TermState}.\n   * This method may return <code>null</code> if the term does not exist.\n   * \n   * @see TermsEnum#termState()\n   * @see TermsEnum#seek(BytesRef, TermState) */\n  public DocsEnum docs(Bits skipDocs, BytesRef term, TermState termState, DocsEnum reuse) throws IOException {\n    final TermsEnum termsEnum = getThreadTermsEnum();\n    termsEnum.seek(term, termState);\n    return termsEnum.docs(skipDocs, reuse);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/Terms#docs(Bits,BytesRef,TermState,DocsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/Terms#docs(Bits,BytesRef,TermState,DocsEnum).mjava","sourceNew":"  /**\n   * Expert: Get {@link DocsEnum} for the specified {@link TermState}.\n   * This method may return <code>null</code> if the term does not exist.\n   * \n   * @see TermsEnum#termState()\n   * @see TermsEnum#seekExact(BytesRef, TermState) */\n  public DocsEnum docs(Bits skipDocs, BytesRef term, TermState termState, DocsEnum reuse) throws IOException {\n    final TermsEnum termsEnum = getThreadTermsEnum();\n    termsEnum.seekExact(term, termState);\n    return termsEnum.docs(skipDocs, reuse);\n  }\n\n","sourceOld":"  /**\n   * Expert: Get {@link DocsEnum} for the specified {@link TermState}.\n   * This method may return <code>null</code> if the term does not exist.\n   * \n   * @see TermsEnum#termState()\n   * @see TermsEnum#seek(BytesRef, TermState) */\n  public DocsEnum docs(Bits skipDocs, BytesRef term, TermState termState, DocsEnum reuse) throws IOException {\n    final TermsEnum termsEnum = getThreadTermsEnum();\n    termsEnum.seek(term, termState);\n    return termsEnum.docs(skipDocs, reuse);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/Terms#docs(Bits,BytesRef,TermState,DocsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/Terms#docs(Bits,BytesRef,TermState,DocsEnum).mjava","sourceNew":"  /**\n   * Expert: Get {@link DocsEnum} for the specified {@link TermState}.\n   * This method may return <code>null</code> if the term does not exist.\n   * \n   * @see TermsEnum#termState()\n   * @see TermsEnum#seekExact(BytesRef, TermState) */\n  public DocsEnum docs(Bits liveDocs, BytesRef term, TermState termState, DocsEnum reuse) throws IOException {\n    final TermsEnum termsEnum = getThreadTermsEnum();\n    termsEnum.seekExact(term, termState);\n    return termsEnum.docs(liveDocs, reuse);\n  }\n\n","sourceOld":"  /**\n   * Expert: Get {@link DocsEnum} for the specified {@link TermState}.\n   * This method may return <code>null</code> if the term does not exist.\n   * \n   * @see TermsEnum#termState()\n   * @see TermsEnum#seekExact(BytesRef, TermState) */\n  public DocsEnum docs(Bits skipDocs, BytesRef term, TermState termState, DocsEnum reuse) throws IOException {\n    final TermsEnum termsEnum = getThreadTermsEnum();\n    termsEnum.seekExact(term, termState);\n    return termsEnum.docs(skipDocs, reuse);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/Terms#docs(Bits,BytesRef,TermState,DocsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/Terms#docs(Bits,BytesRef,TermState,DocsEnum).mjava","sourceNew":"  /**\n   * Expert: Get {@link DocsEnum} for the specified {@link TermState}.\n   * This method may return <code>null</code> if the term does not exist.\n   * \n   * @see TermsEnum#termState()\n   * @see TermsEnum#seekExact(BytesRef, TermState) */\n  public DocsEnum docs(Bits liveDocs, BytesRef term, TermState termState, DocsEnum reuse) throws IOException {\n    final TermsEnum termsEnum = getThreadTermsEnum();\n    termsEnum.seekExact(term, termState);\n    return termsEnum.docs(liveDocs, reuse);\n  }\n\n","sourceOld":"  /**\n   * Expert: Get {@link DocsEnum} for the specified {@link TermState}.\n   * This method may return <code>null</code> if the term does not exist.\n   * \n   * @see TermsEnum#termState()\n   * @see TermsEnum#seekExact(BytesRef, TermState) */\n  public DocsEnum docs(Bits skipDocs, BytesRef term, TermState termState, DocsEnum reuse) throws IOException {\n    final TermsEnum termsEnum = getThreadTermsEnum();\n    termsEnum.seekExact(term, termState);\n    return termsEnum.docs(skipDocs, reuse);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/Terms#docs(Bits,BytesRef,TermState,DocsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/Terms#docs(Bits,BytesRef,TermState,DocsEnum).mjava","sourceNew":"  /**\n   * Expert: Get {@link DocsEnum} for the specified {@link TermState}.\n   * This method may return <code>null</code> if the term does not exist.\n   * \n   * @see TermsEnum#termState()\n   * @see TermsEnum#seekExact(BytesRef, TermState) */\n  public DocsEnum docs(Bits liveDocs, BytesRef term, TermState termState, DocsEnum reuse) throws IOException {\n    final TermsEnum termsEnum = getThreadTermsEnum();\n    termsEnum.seekExact(term, termState);\n    return termsEnum.docs(liveDocs, reuse);\n  }\n\n","sourceOld":"  /**\n   * Expert: Get {@link DocsEnum} for the specified {@link TermState}.\n   * This method may return <code>null</code> if the term does not exist.\n   * \n   * @see TermsEnum#termState()\n   * @see TermsEnum#seek(BytesRef, TermState) */\n  public DocsEnum docs(Bits skipDocs, BytesRef term, TermState termState, DocsEnum reuse) throws IOException {\n    final TermsEnum termsEnum = getThreadTermsEnum();\n    termsEnum.seek(term, termState);\n    return termsEnum.docs(skipDocs, reuse);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2297162a22c55456e200caef2cbcb00fe381120","date":1321551342,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/Terms#docs(Bits,BytesRef,TermState,DocsEnum).mjava","sourceNew":null,"sourceOld":"  /**\n   * Expert: Get {@link DocsEnum} for the specified {@link TermState}.\n   * This method may return <code>null</code> if the term does not exist.\n   * \n   * @see TermsEnum#termState()\n   * @see TermsEnum#seekExact(BytesRef, TermState) */\n  public DocsEnum docs(Bits liveDocs, BytesRef term, TermState termState, DocsEnum reuse) throws IOException {\n    final TermsEnum termsEnum = getThreadTermsEnum();\n    termsEnum.seekExact(term, termState);\n    return termsEnum.docs(liveDocs, reuse);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["fd9cc9d77712aba3662f24632df7539ab75e3667"],"e2297162a22c55456e200caef2cbcb00fe381120":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["fa1a999d6674423e5c4ac858b410283f6fe03f20"],"2553b00f699380c64959ccb27991289aae87be2e":["b1add9ddc0005b07550d4350720aac22dc9886b3","fd9cc9d77712aba3662f24632df7539ab75e3667"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["b1add9ddc0005b07550d4350720aac22dc9886b3","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["868da859b43505d9d2a023bfeae6dd0c795f5295","b1add9ddc0005b07550d4350720aac22dc9886b3"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["2553b00f699380c64959ccb27991289aae87be2e","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b1add9ddc0005b07550d4350720aac22dc9886b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa1a999d6674423e5c4ac858b410283f6fe03f20":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fd9cc9d77712aba3662f24632df7539ab75e3667":["b1add9ddc0005b07550d4350720aac22dc9886b3"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fa1a999d6674423e5c4ac858b410283f6fe03f20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e2297162a22c55456e200caef2cbcb00fe381120"]},"commit2Childs":{"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["e2297162a22c55456e200caef2cbcb00fe381120","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"e2297162a22c55456e200caef2cbcb00fe381120":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","e79a6d080bdd5b2a8f56342cf571b5476de04180","29ef99d61cda9641b6250bf9567329a6e65f901d","fd9cc9d77712aba3662f24632df7539ab75e3667"],"2553b00f699380c64959ccb27991289aae87be2e":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","fa1a999d6674423e5c4ac858b410283f6fe03f20","868da859b43505d9d2a023bfeae6dd0c795f5295"],"fa1a999d6674423e5c4ac858b410283f6fe03f20":["b1add9ddc0005b07550d4350720aac22dc9886b3","868da859b43505d9d2a023bfeae6dd0c795f5295"],"fd9cc9d77712aba3662f24632df7539ab75e3667":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","2553b00f699380c64959ccb27991289aae87be2e"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","e79a6d080bdd5b2a8f56342cf571b5476de04180","817d8435e9135b756f08ce6710ab0baac51bdf88","29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}