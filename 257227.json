{"path":"modules/facet/src/java/org/apache/lucene/facet/search/results/MutableFacetResultNode#trimSubResults(int).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/search/results/MutableFacetResultNode#trimSubResults(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Trim sub results to a given size.\n   * <p>\n   * Note: Although the {@link #getResidue()} is not guaranteed to be\n   * accurate, it is worth fixing it, as possible, by taking under account the\n   * trimmed sub-nodes.\n   */\n  public void trimSubResults(int size) {\n    if (subResults == null || subResults.size() == 0) {\n      return;\n    }\n\n    ArrayList<FacetResultNode> trimmed = new ArrayList<FacetResultNode>(size);\n    for (int i = 0; i < subResults.size() && i < size; i++) {\n      MutableFacetResultNode trimmedNode = toImpl(subResults.get(i));\n      trimmedNode.trimSubResults(size);\n      trimmed.add(trimmedNode);\n    }\n    \n    /*\n     * If we are trimming, it means Sampling is in effect and the extra\n     * (over-sampled) results are being trimmed. Although the residue is not\n     * guaranteed to be accurate for Sampling, we try our best to fix it.\n     * The node's residue now will take under account the sub-nodes we're\n     * trimming.\n     */\n    for (int i = size; i < subResults.size(); i++) {\n      increaseResidue(subResults.get(i).getValue());\n    }\n    \n    subResults = trimmed;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/search/results/MutableFacetResultNode#trimSubResults(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Trim sub results to a given size.\n   * <p>\n   * Note: Although the {@link #getResidue()} is not guaranteed to be\n   * accurate, it is worth fixing it, as possible, by taking under account the\n   * trimmed sub-nodes.\n   */\n  public void trimSubResults(int size) {\n    if (subResults == null || subResults.size() == 0) {\n      return;\n    }\n\n    ArrayList<FacetResultNode> trimmed = new ArrayList<FacetResultNode>(size);\n    for (int i = 0; i < subResults.size() && i < size; i++) {\n      MutableFacetResultNode trimmedNode = toImpl(subResults.get(i));\n      trimmedNode.trimSubResults(size);\n      trimmed.add(trimmedNode);\n    }\n    \n    /*\n     * If we are trimming, it means Sampling is in effect and the extra\n     * (over-sampled) results are being trimmed. Although the residue is not\n     * guaranteed to be accurate for Sampling, we try our best to fix it.\n     * The node's residue now will take under account the sub-nodes we're\n     * trimming.\n     */\n    for (int i = size; i < subResults.size(); i++) {\n      increaseResidue(subResults.get(i).getValue());\n    }\n    \n    subResults = trimmed;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/search/results/MutableFacetResultNode#trimSubResults(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Trim sub results to a given size.\n   * <p>\n   * Note: Although the {@link #getResidue()} is not guaranteed to be\n   * accurate, it is worth fixing it, as possible, by taking under account the\n   * trimmed sub-nodes.\n   */\n  public void trimSubResults(int size) {\n    if (subResults == null || subResults.size() == 0) {\n      return;\n    }\n\n    ArrayList<FacetResultNode> trimmed = new ArrayList<FacetResultNode>(size);\n    for (int i = 0; i < subResults.size() && i < size; i++) {\n      MutableFacetResultNode trimmedNode = toImpl(subResults.get(i));\n      trimmedNode.trimSubResults(size);\n      trimmed.add(trimmedNode);\n    }\n    \n    /*\n     * If we are trimming, it means Sampling is in effect and the extra\n     * (over-sampled) results are being trimmed. Although the residue is not\n     * guaranteed to be accurate for Sampling, we try our best to fix it.\n     * The node's residue now will take under account the sub-nodes we're\n     * trimming.\n     */\n    for (int i = size; i < subResults.size(); i++) {\n      increaseResidue(subResults.get(i).getValue());\n    }\n    \n    subResults = trimmed;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/results/MutableFacetResultNode#trimSubResults(int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/search/results/MutableFacetResultNode#trimSubResults(int).mjava","sourceNew":"  /**\n   * Trim sub results to a given size.\n   * <p>\n   * Note: Although the {@link #getResidue()} is not guaranteed to be\n   * accurate, it is worth fixing it, as possible, by taking under account the\n   * trimmed sub-nodes.\n   */\n  public void trimSubResults(int size) {\n    if (subResults == null || subResults.size() == 0) {\n      return;\n    }\n\n    ArrayList<FacetResultNode> trimmed = new ArrayList<FacetResultNode>(size);\n    for (int i = 0; i < subResults.size() && i < size; i++) {\n      MutableFacetResultNode trimmedNode = toImpl(subResults.get(i));\n      trimmedNode.trimSubResults(size);\n      trimmed.add(trimmedNode);\n    }\n    \n    /*\n     * If we are trimming, it means Sampling is in effect and the extra\n     * (over-sampled) results are being trimmed. Although the residue is not\n     * guaranteed to be accurate for Sampling, we try our best to fix it.\n     * The node's residue now will take under account the sub-nodes we're\n     * trimming.\n     */\n    for (int i = size; i < subResults.size(); i++) {\n      increaseResidue(subResults.get(i).getValue());\n    }\n    \n    subResults = trimmed;\n  }\n\n","sourceOld":"  /**\n   * Trim sub results to a given size.\n   * <p>\n   * Note: Although the {@link #getResidue()} is not guaranteed to be\n   * accurate, it is worth fixing it, as possible, by taking under account the\n   * trimmed sub-nodes.\n   */\n  public void trimSubResults(int size) {\n    if (subResults == null || subResults.size() == 0) {\n      return;\n    }\n\n    ArrayList<FacetResultNode> trimmed = new ArrayList<FacetResultNode>(size);\n    for (int i = 0; i < subResults.size() && i < size; i++) {\n      MutableFacetResultNode trimmedNode = toImpl(subResults.get(i));\n      trimmedNode.trimSubResults(size);\n      trimmed.add(trimmedNode);\n    }\n    \n    /*\n     * If we are trimming, it means Sampling is in effect and the extra\n     * (over-sampled) results are being trimmed. Although the residue is not\n     * guaranteed to be accurate for Sampling, we try our best to fix it.\n     * The node's residue now will take under account the sub-nodes we're\n     * trimming.\n     */\n    for (int i = size; i < subResults.size(); i++) {\n      increaseResidue(subResults.get(i).getValue());\n    }\n    \n    subResults = trimmed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}