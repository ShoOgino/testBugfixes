{"path":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","sourceNew":"  public void testOptimizeOldIndex() throws IOException {\n    int hasTested29 = 0;\n    \n    for(int i=0;i<oldNames.length;i++) {\n      String dirName = \"src/test/org/apache/lucene/index/index.\" + oldNames[i];\n      unzip(dirName, oldNames[i]);\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = FSDirectory.open(new File(fullPath));\n\n      if (oldNames[i].startsWith(\"29.\")) {\n        assertCompressedFields29(dir, true);\n        hasTested29++;\n      }\n\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      \n      if (oldNames[i].startsWith(\"29.\")) {\n        assertCompressedFields29(dir, false);\n        hasTested29++;\n      }\n\n      dir.close();\n      rmDir(oldNames[i]);\n    }\n    \n    assertEquals(\"test for compressed field should have run 4 times\", 4, hasTested29);\n  }\n\n","sourceOld":"  public void testOptimizeOldIndex() throws IOException {\n    int hasTested29 = 0;\n    \n    for(int i=0;i<oldNames.length;i++) {\n      String dirName = \"src/test/org/apache/lucene/index/index.\" + oldNames[i];\n      unzip(dirName, oldNames[i]);\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = FSDirectory.open(new File(fullPath));\n\n      if (oldNames[i].startsWith(\"29.\")) {\n        assertCompressedFields29(dir, true);\n        hasTested29++;\n      }\n\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      \n      if (oldNames[i].startsWith(\"29.\")) {\n        assertCompressedFields29(dir, false);\n        hasTested29++;\n      }\n\n      dir.close();\n      rmDir(oldNames[i]);\n    }\n    \n    assertEquals(\"test for compressed field should have run 4 times\", 4, hasTested29);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5040424df1d01c5daf6a4e0afbebb2da1f1c168","date":1269714861,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","sourceNew":"  public void testOptimizeOldIndex() throws IOException {\n    int hasTested29 = 0;\n    \n    for(int i=0;i<oldNames.length;i++) {\n      unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldNames[i]);\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = FSDirectory.open(new File(fullPath));\n\n      if (oldNames[i].startsWith(\"29.\")) {\n        assertCompressedFields29(dir, true);\n        hasTested29++;\n      }\n\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      \n      if (oldNames[i].startsWith(\"29.\")) {\n        assertCompressedFields29(dir, false);\n        hasTested29++;\n      }\n\n      dir.close();\n      rmDir(oldNames[i]);\n    }\n    \n    assertEquals(\"test for compressed field should have run 4 times\", 4, hasTested29);\n  }\n\n","sourceOld":"  public void testOptimizeOldIndex() throws IOException {\n    int hasTested29 = 0;\n    \n    for(int i=0;i<oldNames.length;i++) {\n      String dirName = \"src/test/org/apache/lucene/index/index.\" + oldNames[i];\n      unzip(dirName, oldNames[i]);\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = FSDirectory.open(new File(fullPath));\n\n      if (oldNames[i].startsWith(\"29.\")) {\n        assertCompressedFields29(dir, true);\n        hasTested29++;\n      }\n\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      \n      if (oldNames[i].startsWith(\"29.\")) {\n        assertCompressedFields29(dir, false);\n        hasTested29++;\n      }\n\n      dir.close();\n      rmDir(oldNames[i]);\n    }\n    \n    assertEquals(\"test for compressed field should have run 4 times\", 4, hasTested29);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","sourceNew":"  public void testOptimizeOldIndex() throws Exception {\n    int hasTested29 = 0;\n\n    Random rand = newRandom();\n    \n    for(int i=0;i<oldNames.length;i++) {\n      unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldNames[i]);\n\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = FSDirectory.open(new File(fullPath));\n\n      FlexTestUtil.verifyFlexVsPreFlex(rand, dir);\n\n      if (oldNames[i].startsWith(\"29.\")) {\n        assertCompressedFields29(dir, true);\n        hasTested29++;\n      }\n\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      w.optimize();\n      FlexTestUtil.verifyFlexVsPreFlex(rand, w);\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      \n      if (oldNames[i].startsWith(\"29.\")) {\n        assertCompressedFields29(dir, false);\n        hasTested29++;\n      }\n\n      dir.close();\n      rmDir(oldNames[i]);\n    }\n    \n    assertEquals(\"test for compressed field should have run 4 times\", 4, hasTested29);\n  }\n\n","sourceOld":"  public void testOptimizeOldIndex() throws IOException {\n    int hasTested29 = 0;\n    \n    for(int i=0;i<oldNames.length;i++) {\n      unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldNames[i]);\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = FSDirectory.open(new File(fullPath));\n\n      if (oldNames[i].startsWith(\"29.\")) {\n        assertCompressedFields29(dir, true);\n        hasTested29++;\n      }\n\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      \n      if (oldNames[i].startsWith(\"29.\")) {\n        assertCompressedFields29(dir, false);\n        hasTested29++;\n      }\n\n      dir.close();\n      rmDir(oldNames[i]);\n    }\n    \n    assertEquals(\"test for compressed field should have run 4 times\", 4, hasTested29);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","sourceNew":"  public void testOptimizeOldIndex() throws Exception {\n    int hasTested29 = 0;\n\n    Random rand = newRandom();\n    \n    for(int i=0;i<oldNames.length;i++) {\n      unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldNames[i]);\n\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = FSDirectory.open(new File(fullPath));\n\n      FlexTestUtil.verifyFlexVsPreFlex(rand, dir);\n\n      if (oldNames[i].startsWith(\"29.\")) {\n        assertCompressedFields29(dir, true);\n        hasTested29++;\n      }\n\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      w.optimize();\n      FlexTestUtil.verifyFlexVsPreFlex(rand, w);\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      \n      if (oldNames[i].startsWith(\"29.\")) {\n        assertCompressedFields29(dir, false);\n        hasTested29++;\n      }\n\n      dir.close();\n      rmDir(oldNames[i]);\n    }\n    \n    assertEquals(\"test for compressed field should have run 4 times\", 4, hasTested29);\n  }\n\n","sourceOld":"  public void testOptimizeOldIndex() throws Exception {\n    int hasTested29 = 0;\n\n    Random rand = newRandom();\n    \n    for(int i=0;i<oldNames.length;i++) {\n      unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldNames[i]);\n\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = FSDirectory.open(new File(fullPath));\n\n      FlexTestUtil.verifyFlexVsPreFlex(rand, dir);\n\n      if (oldNames[i].startsWith(\"29.\")) {\n        assertCompressedFields29(dir, true);\n        hasTested29++;\n      }\n\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      w.optimize();\n      FlexTestUtil.verifyFlexVsPreFlex(rand, w);\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      \n      if (oldNames[i].startsWith(\"29.\")) {\n        assertCompressedFields29(dir, false);\n        hasTested29++;\n      }\n\n      dir.close();\n      rmDir(oldNames[i]);\n    }\n    \n    assertEquals(\"test for compressed field should have run 4 times\", 4, hasTested29);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6267e1ce56c2eec111425690cd04e251b6f14952","date":1275222352,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","sourceNew":"  public void testOptimizeOldIndex() throws Exception {\n    Random rand = newRandom();\n    \n    for(int i=0;i<oldNames.length;i++) {\n      unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldNames[i]);\n\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = FSDirectory.open(new File(fullPath));\n\n      FlexTestUtil.verifyFlexVsPreFlex(rand, dir);\n\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      w.optimize();\n      FlexTestUtil.verifyFlexVsPreFlex(rand, w);\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      \n      dir.close();\n      rmDir(oldNames[i]);\n    }\n  }\n\n","sourceOld":"  public void testOptimizeOldIndex() throws Exception {\n    int hasTested29 = 0;\n\n    Random rand = newRandom();\n    \n    for(int i=0;i<oldNames.length;i++) {\n      unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldNames[i]);\n\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = FSDirectory.open(new File(fullPath));\n\n      FlexTestUtil.verifyFlexVsPreFlex(rand, dir);\n\n      if (oldNames[i].startsWith(\"29.\")) {\n        assertCompressedFields29(dir, true);\n        hasTested29++;\n      }\n\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      w.optimize();\n      FlexTestUtil.verifyFlexVsPreFlex(rand, w);\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      \n      if (oldNames[i].startsWith(\"29.\")) {\n        assertCompressedFields29(dir, false);\n        hasTested29++;\n      }\n\n      dir.close();\n      rmDir(oldNames[i]);\n    }\n    \n    assertEquals(\"test for compressed field should have run 4 times\", 4, hasTested29);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","sourceNew":"  public void testOptimizeOldIndex() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldNames[i]);\n\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = FSDirectory.open(new File(fullPath));\n\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      \n      dir.close();\n      rmDir(oldNames[i]);\n    }\n  }\n\n","sourceOld":"  public void testOptimizeOldIndex() throws Exception {\n    Random rand = newRandom();\n    \n    for(int i=0;i<oldNames.length;i++) {\n      unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldNames[i]);\n\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = FSDirectory.open(new File(fullPath));\n\n      FlexTestUtil.verifyFlexVsPreFlex(rand, dir);\n\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      w.optimize();\n      FlexTestUtil.verifyFlexVsPreFlex(rand, w);\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      \n      dir.close();\n      rmDir(oldNames[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","sourceNew":"  public void testOptimizeOldIndex() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldNames[i]);\n\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = FSDirectory.open(new File(fullPath));\n\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      \n      dir.close();\n      rmDir(oldNames[i]);\n    }\n  }\n\n","sourceOld":"  public void testOptimizeOldIndex() throws Exception {\n    Random rand = newRandom();\n    \n    for(int i=0;i<oldNames.length;i++) {\n      unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldNames[i]);\n\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = FSDirectory.open(new File(fullPath));\n\n      FlexTestUtil.verifyFlexVsPreFlex(rand, dir);\n\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      w.optimize();\n      FlexTestUtil.verifyFlexVsPreFlex(rand, w);\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      \n      dir.close();\n      rmDir(oldNames[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a13a126d15299d5c1e117ea99ddae6fb0fa3f209","date":1291909583,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","sourceNew":"  public void testOptimizeOldIndex() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldNames[i]);\n\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = newFSDirectory(new File(fullPath));\n\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      \n      dir.close();\n      rmDir(oldNames[i]);\n    }\n  }\n\n","sourceOld":"  public void testOptimizeOldIndex() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldNames[i]);\n\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = FSDirectory.open(new File(fullPath));\n\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      \n      dir.close();\n      rmDir(oldNames[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","sourceNew":"  public void testOptimizeOldIndex() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldNames[i]);\n\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = newFSDirectory(new File(fullPath));\n\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      \n      dir.close();\n      rmDir(oldNames[i]);\n    }\n  }\n\n","sourceOld":"  public void testOptimizeOldIndex() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldNames[i]);\n\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = FSDirectory.open(new File(fullPath));\n\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      \n      dir.close();\n      rmDir(oldNames[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","sourceNew":"  public void testOptimizeOldIndex() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldNames[i]);\n\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = newFSDirectory(new File(fullPath));\n\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      \n      dir.close();\n      rmDir(oldNames[i]);\n    }\n  }\n\n","sourceOld":"  public void testOptimizeOldIndex() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldNames[i]);\n\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = FSDirectory.open(new File(fullPath));\n\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      \n      dir.close();\n      rmDir(oldNames[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05","date":1294877328,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","sourceNew":"  public void testOptimizeOldIndex() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: index=\" + oldNames[i]);\n      }\n      unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldNames[i]);\n\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = newFSDirectory(new File(fullPath));\n\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      w.setInfoStream(VERBOSE ? System.out : null);\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      \n      dir.close();\n      rmDir(oldNames[i]);\n    }\n  }\n\n","sourceOld":"  public void testOptimizeOldIndex() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldNames[i]);\n\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = newFSDirectory(new File(fullPath));\n\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      \n      dir.close();\n      rmDir(oldNames[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","sourceNew":"  public void testOptimizeOldIndex() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: index=\" + oldNames[i]);\n      }\n      unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldNames[i]);\n\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = newFSDirectory(new File(fullPath));\n\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      w.setInfoStream(VERBOSE ? System.out : null);\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      \n      dir.close();\n      rmDir(oldNames[i]);\n    }\n  }\n\n","sourceOld":"  public void testOptimizeOldIndex() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldNames[i]);\n\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = newFSDirectory(new File(fullPath));\n\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      \n      dir.close();\n      rmDir(oldNames[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cdad2c6b6234338031bcc1f24c001a5ad66f714","date":1296866109,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","sourceNew":"  public void testOptimizeOldIndex() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: index=\" + oldNames[i]);\n      }\n      File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n      _TestUtil.unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      Directory dir = newFSDirectory(oldIndxeDir);\n\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      w.setInfoStream(VERBOSE ? System.out : null);\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      \n      dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","sourceOld":"  public void testOptimizeOldIndex() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: index=\" + oldNames[i]);\n      }\n      unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldNames[i]);\n\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = newFSDirectory(new File(fullPath));\n\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      w.setInfoStream(VERBOSE ? System.out : null);\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      \n      dir.close();\n      rmDir(oldNames[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","sourceNew":"  public void testOptimizeOldIndex() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: index=\" + oldNames[i]);\n      }\n      File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n      _TestUtil.unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      Directory dir = newFSDirectory(oldIndxeDir);\n\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      w.setInfoStream(VERBOSE ? System.out : null);\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      \n      dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","sourceOld":"  public void testOptimizeOldIndex() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldNames[i]);\n\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = newFSDirectory(new File(fullPath));\n\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      \n      dir.close();\n      rmDir(oldNames[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","sourceNew":"  public void testOptimizeOldIndex() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: index=\" + oldNames[i]);\n      }\n      File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n      _TestUtil.unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      Directory dir = newFSDirectory(oldIndxeDir);\n\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      w.setInfoStream(VERBOSE ? System.out : null);\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      \n      dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","sourceOld":"  public void testOptimizeOldIndex() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: index=\" + oldNames[i]);\n      }\n      unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldNames[i]);\n\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = newFSDirectory(new File(fullPath));\n\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      w.setInfoStream(VERBOSE ? System.out : null);\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      \n      dir.close();\n      rmDir(oldNames[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","sourceNew":"  public void testOptimizeOldIndex() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: index=\" + oldNames[i]);\n      }\n      File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n      _TestUtil.unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      Directory dir = newFSDirectory(oldIndxeDir);\n\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      w.setInfoStream(VERBOSE ? System.out : null);\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      \n      dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","sourceOld":"  public void testOptimizeOldIndex() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: index=\" + oldNames[i]);\n      }\n      File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n      _TestUtil.unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      Directory dir = newFSDirectory(oldIndxeDir);\n\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      w.setInfoStream(VERBOSE ? System.out : null);\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      \n      dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","sourceNew":"  public void testOptimizeOldIndex() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: index=\" + oldNames[i]);\n      }\n      File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n      _TestUtil.unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      Directory dir = newFSDirectory(oldIndxeDir);\n\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      w.setInfoStream(VERBOSE ? System.out : null);\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      \n      dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","sourceOld":"  public void testOptimizeOldIndex() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: index=\" + oldNames[i]);\n      }\n      File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n      _TestUtil.unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      Directory dir = newFSDirectory(oldIndxeDir);\n\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      w.setInfoStream(VERBOSE ? System.out : null);\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      \n      dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","sourceNew":"  public void testOptimizeOldIndex() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: index=\" + oldNames[i]);\n      }\n      File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n      _TestUtil.unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      Directory dir = newFSDirectory(oldIndxeDir);\n\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      w.setInfoStream(VERBOSE ? System.out : null);\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      \n      dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","sourceOld":"  public void testOptimizeOldIndex() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: index=\" + oldNames[i]);\n      }\n      File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n      _TestUtil.unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      Directory dir = newFSDirectory(oldIndxeDir);\n\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      w.setInfoStream(VERBOSE ? System.out : null);\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      \n      dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","sourceNew":"  public void testOptimizeOldIndex() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: index=\" + oldNames[i]);\n      }\n      File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n      _TestUtil.unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      Directory dir = newFSDirectory(oldIndxeDir);\n\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      w.setInfoStream(VERBOSE ? System.out : null);\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      \n      dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","sourceOld":"  public void testOptimizeOldIndex() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: index=\" + oldNames[i]);\n      }\n      File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n      _TestUtil.unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      Directory dir = newFSDirectory(oldIndxeDir);\n\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      w.setInfoStream(VERBOSE ? System.out : null);\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      \n      dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","sourceNew":"  public void testOptimizeOldIndex() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: index=\" + oldNames[i]);\n      }\n      File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n      _TestUtil.unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      Directory dir = newFSDirectory(oldIndxeDir);\n\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      w.setInfoStream(VERBOSE ? System.out : null);\n      w.optimize();\n      w.close();\n      \n      dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","sourceOld":"  public void testOptimizeOldIndex() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: index=\" + oldNames[i]);\n      }\n      File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n      _TestUtil.unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      Directory dir = newFSDirectory(oldIndxeDir);\n\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      w.setInfoStream(VERBOSE ? System.out : null);\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      \n      dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","sourceNew":"  public void testOptimizeOldIndex() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: index=\" + oldNames[i]);\n      }\n      File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n      _TestUtil.unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      Directory dir = newFSDirectory(oldIndxeDir);\n\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      w.setInfoStream(VERBOSE ? System.out : null);\n      w.optimize();\n      w.close();\n      \n      dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","sourceOld":"  public void testOptimizeOldIndex() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: index=\" + oldNames[i]);\n      }\n      File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n      _TestUtil.unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      Directory dir = newFSDirectory(oldIndxeDir);\n\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      w.setInfoStream(VERBOSE ? System.out : null);\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      \n      dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","sourceNew":"  public void testOptimizeOldIndex() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: index=\" + oldNames[i]);\n      }\n      File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n      _TestUtil.unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      Directory dir = newFSDirectory(oldIndxeDir);\n\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      w.setInfoStream(VERBOSE ? System.out : null);\n      w.optimize();\n      w.close();\n      \n      dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","sourceOld":"  public void testOptimizeOldIndex() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: index=\" + oldNames[i]);\n      }\n      File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n      _TestUtil.unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      Directory dir = newFSDirectory(oldIndxeDir);\n\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      w.setInfoStream(VERBOSE ? System.out : null);\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      \n      dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","sourceNew":"  public void testOptimizeOldIndex() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: index=\" + oldNames[i]);\n      }\n      File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n      _TestUtil.unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      Directory dir = newFSDirectory(oldIndxeDir);\n\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      w.optimize();\n      w.close();\n      \n      dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","sourceOld":"  public void testOptimizeOldIndex() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: index=\" + oldNames[i]);\n      }\n      File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n      _TestUtil.unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      Directory dir = newFSDirectory(oldIndxeDir);\n\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      w.setInfoStream(VERBOSE ? System.out : null);\n      w.optimize();\n      w.close();\n      \n      dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testFullyMergeOldIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","sourceNew":"  public void testFullyMergeOldIndex() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: index=\" + oldNames[i]);\n      }\n      File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n      _TestUtil.unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      Directory dir = newFSDirectory(oldIndxeDir);\n\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      w.forceMerge(1);\n      w.close();\n      \n      dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","sourceOld":"  public void testOptimizeOldIndex() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: index=\" + oldNames[i]);\n      }\n      File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n      _TestUtil.unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      Directory dir = newFSDirectory(oldIndxeDir);\n\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      w.optimize();\n      w.close();\n      \n      dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["e5040424df1d01c5daf6a4e0afbebb2da1f1c168"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["06584e6e98d592b34e1329b384182f368d2025e8"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"e5040424df1d01c5daf6a4e0afbebb2da1f1c168":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["3cdad2c6b6234338031bcc1f24c001a5ad66f714"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a3776dccca01c11e7046323cfad46a3b4a471233","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","3cdad2c6b6234338031bcc1f24c001a5ad66f714"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28427ef110c4c5bf5b4057731b83110bd1e13724":["6267e1ce56c2eec111425690cd04e251b6f14952"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","3cdad2c6b6234338031bcc1f24c001a5ad66f714"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"a13a126d15299d5c1e117ea99ddae6fb0fa3f209":["28427ef110c4c5bf5b4057731b83110bd1e13724"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"06584e6e98d592b34e1329b384182f368d2025e8":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"3cdad2c6b6234338031bcc1f24c001a5ad66f714":["7a54e23e03b47f3d568ab3020bdd386e4b2f0a05"],"d572389229127c297dd1fa5ce4758e1cec41e799":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["28427ef110c4c5bf5b4057731b83110bd1e13724","a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"5f4e87790277826a2aea119328600dfb07761f32":["6267e1ce56c2eec111425690cd04e251b6f14952","28427ef110c4c5bf5b4057731b83110bd1e13724"],"962d04139994fce5193143ef35615499a9a96d78":["bde51b089eb7f86171eb3406e38a274743f9b7ac","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"6267e1ce56c2eec111425690cd04e251b6f14952":["d572389229127c297dd1fa5ce4758e1cec41e799"],"a3776dccca01c11e7046323cfad46a3b4a471233":["3cdad2c6b6234338031bcc1f24c001a5ad66f714","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["135621f3a0670a9394eb563224a3b76cc4dddc0f","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","7a54e23e03b47f3d568ab3020bdd386e4b2f0a05"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"]},"commit2Childs":{"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["d572389229127c297dd1fa5ce4758e1cec41e799"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"e5040424df1d01c5daf6a4e0afbebb2da1f1c168":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"79c2cb24929f2649a8875fb629086171f914d5ce":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209","ab5cb6a74aefb78aa0569857970b9151dfe2e787","5f4e87790277826a2aea119328600dfb07761f32"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["962d04139994fce5193143ef35615499a9a96d78"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e5040424df1d01c5daf6a4e0afbebb2da1f1c168"],"a13a126d15299d5c1e117ea99ddae6fb0fa3f209":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","7a54e23e03b47f3d568ab3020bdd386e4b2f0a05","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05":["3cdad2c6b6234338031bcc1f24c001a5ad66f714","868da859b43505d9d2a023bfeae6dd0c795f5295"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["79c2cb24929f2649a8875fb629086171f914d5ce","06584e6e98d592b34e1329b384182f368d2025e8","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"06584e6e98d592b34e1329b384182f368d2025e8":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"3cdad2c6b6234338031bcc1f24c001a5ad66f714":["f2c5f0cb44df114db4228c8f77861714b5cabaea","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","a3776dccca01c11e7046323cfad46a3b4a471233"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"d572389229127c297dd1fa5ce4758e1cec41e799":["6267e1ce56c2eec111425690cd04e251b6f14952"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"962d04139994fce5193143ef35615499a9a96d78":[],"6267e1ce56c2eec111425690cd04e251b6f14952":["28427ef110c4c5bf5b4057731b83110bd1e13724","5f4e87790277826a2aea119328600dfb07761f32"],"a3776dccca01c11e7046323cfad46a3b4a471233":["79c2cb24929f2649a8875fb629086171f914d5ce"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["79c2cb24929f2649a8875fb629086171f914d5ce","962d04139994fce5193143ef35615499a9a96d78","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}