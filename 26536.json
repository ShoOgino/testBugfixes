{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testPropertyParamsForCreate().mjava","commits":[{"id":"87a8da508220b3dc7f6e030a17aeaa78bd74e891","date":1418855619,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testPropertyParamsForCreate().mjava","pathOld":"/dev/null","sourceNew":"  private void testPropertyParamsForCreate() throws Exception {\n    String collectionName = \"solrj_test_core_props\";\n    SolrServer server = createNewSolrServer(\"\", getBaseUrl((HttpSolrServer) clients.get(0)));\n\n    File tmpDir = createTempDir(\"testPropertyParamsForCreate\").toFile();\n    File instanceDir = new File(tmpDir, \"instanceDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n    File dataDir = new File(tmpDir, \"dataDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n    File ulogDir = new File(tmpDir, \"ulogDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n\n    Properties properties = new Properties();\n    properties.put(CoreAdminParams.INSTANCE_DIR, instanceDir.getAbsolutePath());\n    properties.put(CoreAdminParams.DATA_DIR, dataDir.getAbsolutePath());\n    properties.put(CoreAdminParams.ULOG_DIR, ulogDir.getAbsolutePath());\n\n    CollectionAdminRequest.Create createReq = new CollectionAdminRequest.Create();\n    createReq.setCollectionName(collectionName);\n    createReq.setNumShards(1);\n    createReq.setConfigName(\"conf1\");\n    createReq.setProperties(properties);\n\n    CollectionAdminResponse response = createReq.process( server );\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n\n    DocCollection testcoll = getCommonCloudSolrServer().getZkStateReader()\n        .getClusterState().getCollection(collectionName);\n\n    Replica replica1 = testcoll.getReplica(\"core_node1\");\n\n    HttpSolrServer replica1Server = new HttpSolrServer(replica1.getStr(\"base_url\"));\n    try {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(replica1.getStr(\"core\"), replica1Server);\n      NamedList<Object> coreStatus = status.getCoreStatus(replica1.getStr(\"core\"));\n      String dataDirStr = (String) coreStatus.get(\"dataDir\");\n      String instanceDirStr = (String) coreStatus.get(\"instanceDir\");\n      assertEquals(\"Instance dir does not match param passed in property.instanceDir syntax\",\n          new File(instanceDirStr).getAbsolutePath(), instanceDir.getAbsolutePath());\n      assertEquals(\"Data dir does not match param given in property.dataDir syntax\",\n          new File(dataDirStr).getAbsolutePath(), dataDir.getAbsolutePath());\n\n    } finally {\n      replica1Server.shutdown();\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ccd26d5d9f00651fa4b3db0529f811cf9f78478","date":1419303127,"type":5,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testCreateCollectionWithPropertyParam().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testPropertyParamsForCreate().mjava","sourceNew":"  private void testCreateCollectionWithPropertyParam() throws Exception {\n    String collectionName = \"solrj_test_core_props\";\n    \n    File tmpDir = createTempDir(\"testPropertyParamsForCreate\").toFile();\n    File instanceDir = new File(tmpDir, \"instanceDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n    File dataDir = new File(tmpDir, \"dataDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n    File ulogDir = new File(tmpDir, \"ulogDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n\n    Properties properties = new Properties();\n    properties.put(CoreAdminParams.INSTANCE_DIR, instanceDir.getAbsolutePath());\n    properties.put(CoreAdminParams.DATA_DIR, dataDir.getAbsolutePath());\n    properties.put(CoreAdminParams.ULOG_DIR, ulogDir.getAbsolutePath());\n\n    CollectionAdminRequest.Create createReq = new CollectionAdminRequest.Create();\n    createReq.setCollectionName(collectionName);\n    createReq.setNumShards(1);\n    createReq.setConfigName(\"conf1\");\n    createReq.setProperties(properties);\n\n    CollectionAdminResponse response = createReq.process(cloudClient);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n\n    DocCollection testCollection = cloudClient.getZkStateReader()\n        .getClusterState().getCollection(collectionName);\n\n    Replica replica1 = testCollection.getReplica(\"core_node1\");\n\n    HttpSolrServer solrServer = new HttpSolrServer(replica1.getStr(\"base_url\"));\n    try {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(replica1.getStr(\"core\"), solrServer);\n      NamedList<Object> coreStatus = status.getCoreStatus(replica1.getStr(\"core\"));\n      String dataDirStr = (String) coreStatus.get(\"dataDir\");\n      String instanceDirStr = (String) coreStatus.get(\"instanceDir\");\n      assertEquals(\"Instance dir does not match param passed in property.instanceDir syntax\",\n          new File(instanceDirStr).getAbsolutePath(), instanceDir.getAbsolutePath());\n      assertEquals(\"Data dir does not match param given in property.dataDir syntax\",\n          new File(dataDirStr).getAbsolutePath(), dataDir.getAbsolutePath());\n\n    } finally {\n      solrServer.shutdown();\n    }\n\n    CollectionAdminRequest.Delete deleteCollectionRequest = new CollectionAdminRequest.Delete();\n    deleteCollectionRequest.setCollectionName(collectionName);\n    deleteCollectionRequest.process(cloudClient);\n  }\n\n","sourceOld":"  private void testPropertyParamsForCreate() throws Exception {\n    String collectionName = \"solrj_test_core_props\";\n    SolrServer server = createNewSolrServer(\"\", getBaseUrl((HttpSolrServer) clients.get(0)));\n\n    File tmpDir = createTempDir(\"testPropertyParamsForCreate\").toFile();\n    File instanceDir = new File(tmpDir, \"instanceDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n    File dataDir = new File(tmpDir, \"dataDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n    File ulogDir = new File(tmpDir, \"ulogDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n\n    Properties properties = new Properties();\n    properties.put(CoreAdminParams.INSTANCE_DIR, instanceDir.getAbsolutePath());\n    properties.put(CoreAdminParams.DATA_DIR, dataDir.getAbsolutePath());\n    properties.put(CoreAdminParams.ULOG_DIR, ulogDir.getAbsolutePath());\n\n    CollectionAdminRequest.Create createReq = new CollectionAdminRequest.Create();\n    createReq.setCollectionName(collectionName);\n    createReq.setNumShards(1);\n    createReq.setConfigName(\"conf1\");\n    createReq.setProperties(properties);\n\n    CollectionAdminResponse response = createReq.process( server );\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n\n    DocCollection testcoll = getCommonCloudSolrServer().getZkStateReader()\n        .getClusterState().getCollection(collectionName);\n\n    Replica replica1 = testcoll.getReplica(\"core_node1\");\n\n    HttpSolrServer replica1Server = new HttpSolrServer(replica1.getStr(\"base_url\"));\n    try {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(replica1.getStr(\"core\"), replica1Server);\n      NamedList<Object> coreStatus = status.getCoreStatus(replica1.getStr(\"core\"));\n      String dataDirStr = (String) coreStatus.get(\"dataDir\");\n      String instanceDirStr = (String) coreStatus.get(\"instanceDir\");\n      assertEquals(\"Instance dir does not match param passed in property.instanceDir syntax\",\n          new File(instanceDirStr).getAbsolutePath(), instanceDir.getAbsolutePath());\n      assertEquals(\"Data dir does not match param given in property.dataDir syntax\",\n          new File(dataDirStr).getAbsolutePath(), dataDir.getAbsolutePath());\n\n    } finally {\n      replica1Server.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"87a8da508220b3dc7f6e030a17aeaa78bd74e891":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9ccd26d5d9f00651fa4b3db0529f811cf9f78478":["87a8da508220b3dc7f6e030a17aeaa78bd74e891"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ccd26d5d9f00651fa4b3db0529f811cf9f78478"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["87a8da508220b3dc7f6e030a17aeaa78bd74e891"],"87a8da508220b3dc7f6e030a17aeaa78bd74e891":["9ccd26d5d9f00651fa4b3db0529f811cf9f78478"],"9ccd26d5d9f00651fa4b3db0529f811cf9f78478":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}