{"path":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsReader.FieldReader.SegmentTermsEnum#seekExact(BytesRef,TermState).mjava","commits":[{"id":"5ad80176d91a6f70fe93880e43dfd697dc4e63ed","date":1400176913,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsReader.FieldReader.SegmentTermsEnum#seekExact(BytesRef,TermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum#seekExact(BytesRef,TermState).mjava","sourceNew":"      @Override\n      public void seekExact(BytesRef target, TermState otherState) {\n        // if (DEBUG) {\n        //   System.out.println(\"BTTR.seekExact termState seg=\" + segment + \" target=\" + target.utf8ToString() + \" \" + target + \" state=\" + otherState);\n        // }\n        assert clearEOF();\n        if (target.compareTo(term) != 0 || !termExists) {\n          assert otherState != null && otherState instanceof BlockTermState;\n          currentFrame = staticFrame;\n          currentFrame.state.copyFrom(otherState);\n          term.copyBytes(target);\n          currentFrame.metaDataUpto = currentFrame.getTermBlockOrd();\n          assert currentFrame.metaDataUpto > 0;\n          validIndexPrefix = 0;\n        } else {\n          // if (DEBUG) {\n          //   System.out.println(\"  skip seek: already on target state=\" + currentFrame.state);\n          // }\n        }\n      }\n\n","sourceOld":"      @Override\n      public void seekExact(BytesRef target, TermState otherState) {\n        // if (DEBUG) {\n        //   System.out.println(\"BTTR.seekExact termState seg=\" + segment + \" target=\" + target.utf8ToString() + \" \" + target + \" state=\" + otherState);\n        // }\n        assert clearEOF();\n        if (target.compareTo(term) != 0 || !termExists) {\n          assert otherState != null && otherState instanceof BlockTermState;\n          currentFrame = staticFrame;\n          currentFrame.state.copyFrom(otherState);\n          term.copyBytes(target);\n          currentFrame.metaDataUpto = currentFrame.getTermBlockOrd();\n          assert currentFrame.metaDataUpto > 0;\n          validIndexPrefix = 0;\n        } else {\n          // if (DEBUG) {\n          //   System.out.println(\"  skip seek: already on target state=\" + currentFrame.state);\n          // }\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"47d9d581b0b317125672636196fa3c73bbcabc56","date":1400178129,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsReader.FieldReader.SegmentTermsEnum#seekExact(BytesRef,TermState).mjava","sourceNew":null,"sourceOld":"      @Override\n      public void seekExact(BytesRef target, TermState otherState) {\n        // if (DEBUG) {\n        //   System.out.println(\"BTTR.seekExact termState seg=\" + segment + \" target=\" + target.utf8ToString() + \" \" + target + \" state=\" + otherState);\n        // }\n        assert clearEOF();\n        if (target.compareTo(term) != 0 || !termExists) {\n          assert otherState != null && otherState instanceof BlockTermState;\n          currentFrame = staticFrame;\n          currentFrame.state.copyFrom(otherState);\n          term.copyBytes(target);\n          currentFrame.metaDataUpto = currentFrame.getTermBlockOrd();\n          assert currentFrame.metaDataUpto > 0;\n          validIndexPrefix = 0;\n        } else {\n          // if (DEBUG) {\n          //   System.out.println(\"  skip seek: already on target state=\" + currentFrame.state);\n          // }\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5ad80176d91a6f70fe93880e43dfd697dc4e63ed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"47d9d581b0b317125672636196fa3c73bbcabc56":["5ad80176d91a6f70fe93880e43dfd697dc4e63ed"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"5ad80176d91a6f70fe93880e43dfd697dc4e63ed":["47d9d581b0b317125672636196fa3c73bbcabc56"],"47d9d581b0b317125672636196fa3c73bbcabc56":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5ad80176d91a6f70fe93880e43dfd697dc4e63ed","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["47d9d581b0b317125672636196fa3c73bbcabc56","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}