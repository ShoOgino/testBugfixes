{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestDistribStateManager#testRemoveData().mjava","commits":[{"id":"01e3e55745c6667006f67aaa604466b9974425f4","date":1518776937,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestDistribStateManager#testRemoveData().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRemoveData() throws Exception {\n    assertFalse(stateManager.hasData(\"/removeData/foo\"));\n    assertFalse(stateManager.hasData(\"/removeData/foo/bar\"));\n    assertFalse(stateManager.hasData(\"/removeData/baz\"));\n    assertFalse(stateManager.hasData(\"/removeData/baz/1/2/3\"));\n    stateManager.makePath(\"/removeData/foo/bar\");\n    stateManager.makePath(\"/removeData/baz/1/2/3\");\n    assertTrue(stateManager.hasData(\"/removeData/foo\"));\n    assertTrue(stateManager.hasData(\"/removeData/foo/bar\"));\n    assertTrue(stateManager.hasData(\"/removeData/baz/1/2/3\"));\n    try {\n      stateManager.removeData(\"/removeData/foo\", -1);\n      fail(\"should have failed (node has children)\");\n    } catch (NotEmptyException e) {\n      // expected\n    }\n    stateManager.removeData(\"/removeData/foo/bar\", -1);\n    stateManager.removeData(\"/removeData/foo\", -1);\n    // test recursive listing and removal\n    stateManager.removeRecursively(\"/removeData/baz/1\", false, false);\n    assertFalse(stateManager.hasData(\"/removeData/baz/1/2\"));\n    assertTrue(stateManager.hasData(\"/removeData/baz/1\"));\n    // should silently ignore\n    stateManager.removeRecursively(\"/removeData/baz/1/2\", true, true);\n    stateManager.removeRecursively(\"/removeData/baz/1\", false, true);\n    assertFalse(stateManager.hasData(\"/removeData/baz/1\"));\n    try {\n      stateManager.removeRecursively(\"/removeData/baz/1\", false, true);\n      fail(\"should throw exception - missing path\");\n    } catch (NoSuchElementException e) {\n      // expected\n    }\n    stateManager.removeRecursively(\"/removeData\", true, true);\n    assertFalse(stateManager.hasData(\"/removeData\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimDistribStateManager#testRemoveData().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestDistribStateManager#testRemoveData().mjava","sourceNew":"  @Test\n  public void testRemoveData() throws Exception {\n    assertFalse(stateManager.hasData(\"/removeData/foo\"));\n    assertFalse(stateManager.hasData(\"/removeData/foo/bar\"));\n    assertFalse(stateManager.hasData(\"/removeData/baz\"));\n    assertFalse(stateManager.hasData(\"/removeData/baz/1/2/3\"));\n    stateManager.makePath(\"/removeData/foo/bar\");\n    stateManager.makePath(\"/removeData/baz/1/2/3\");\n    assertTrue(stateManager.hasData(\"/removeData/foo\"));\n    assertTrue(stateManager.hasData(\"/removeData/foo/bar\"));\n    assertTrue(stateManager.hasData(\"/removeData/baz/1/2/3\"));\n    try {\n      stateManager.removeData(\"/removeData/foo\", -1);\n      fail(\"should have failed (node has children)\");\n    } catch (NotEmptyException e) {\n      // expected\n    }\n    stateManager.removeData(\"/removeData/foo/bar\", -1);\n    stateManager.removeData(\"/removeData/foo\", -1);\n    // test recursive listing and removal\n    stateManager.removeRecursively(\"/removeData/baz/1\", false, false);\n    assertFalse(stateManager.hasData(\"/removeData/baz/1/2\"));\n    assertTrue(stateManager.hasData(\"/removeData/baz/1\"));\n    // should silently ignore\n    stateManager.removeRecursively(\"/removeData/baz/1/2\", true, true);\n    stateManager.removeRecursively(\"/removeData/baz/1\", false, true);\n    assertFalse(stateManager.hasData(\"/removeData/baz/1\"));\n    try {\n      stateManager.removeRecursively(\"/removeData/baz/1\", false, true);\n      fail(\"should throw exception - missing path\");\n    } catch (NoSuchElementException e) {\n      // expected\n    }\n    stateManager.removeRecursively(\"/removeData\", true, true);\n    assertFalse(stateManager.hasData(\"/removeData\"));\n  }\n\n","sourceOld":"  @Test\n  public void testRemoveData() throws Exception {\n    assertFalse(stateManager.hasData(\"/removeData/foo\"));\n    assertFalse(stateManager.hasData(\"/removeData/foo/bar\"));\n    assertFalse(stateManager.hasData(\"/removeData/baz\"));\n    assertFalse(stateManager.hasData(\"/removeData/baz/1/2/3\"));\n    stateManager.makePath(\"/removeData/foo/bar\");\n    stateManager.makePath(\"/removeData/baz/1/2/3\");\n    assertTrue(stateManager.hasData(\"/removeData/foo\"));\n    assertTrue(stateManager.hasData(\"/removeData/foo/bar\"));\n    assertTrue(stateManager.hasData(\"/removeData/baz/1/2/3\"));\n    try {\n      stateManager.removeData(\"/removeData/foo\", -1);\n      fail(\"should have failed (node has children)\");\n    } catch (NotEmptyException e) {\n      // expected\n    }\n    stateManager.removeData(\"/removeData/foo/bar\", -1);\n    stateManager.removeData(\"/removeData/foo\", -1);\n    // test recursive listing and removal\n    stateManager.removeRecursively(\"/removeData/baz/1\", false, false);\n    assertFalse(stateManager.hasData(\"/removeData/baz/1/2\"));\n    assertTrue(stateManager.hasData(\"/removeData/baz/1\"));\n    // should silently ignore\n    stateManager.removeRecursively(\"/removeData/baz/1/2\", true, true);\n    stateManager.removeRecursively(\"/removeData/baz/1\", false, true);\n    assertFalse(stateManager.hasData(\"/removeData/baz/1\"));\n    try {\n      stateManager.removeRecursively(\"/removeData/baz/1\", false, true);\n      fail(\"should throw exception - missing path\");\n    } catch (NoSuchElementException e) {\n      // expected\n    }\n    stateManager.removeRecursively(\"/removeData\", true, true);\n    assertFalse(stateManager.hasData(\"/removeData\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["01e3e55745c6667006f67aaa604466b9974425f4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"01e3e55745c6667006f67aaa604466b9974425f4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a6a5c1c40529f15b445e6720dfde1967e139bff1"]},"commit2Childs":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["01e3e55745c6667006f67aaa604466b9974425f4"],"01e3e55745c6667006f67aaa604466b9974425f4":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}