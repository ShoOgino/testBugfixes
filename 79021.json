{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#_expectThrows(List[#-extends-Class[#]],ThrowingRunnable).mjava","commits":[{"id":"8d592ac9e6400869a47757802651c715b4e88219","date":1570470117,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#_expectThrows(List[#-extends-Class[#]],ThrowingRunnable).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Helper method for {@link #expectThrows} and {@link #expectThrowsAnyOf} that takes care of propagating\n   * any {@link AssertionError} or {@link AssumptionViolatedException} instances thrown if and only if they \n   * are super classes of the <code>expectedTypes</code>.  Otherwise simply returns any {@link Throwable} \n   * thrown, regardless of type, or null if the <code>runnable</code> completed w/o error.\n   */\n  private static Throwable _expectThrows(List<? extends Class<?>> expectedTypes, ThrowingRunnable runnable) {\n                                         \n    try {\n      runnable.run();\n    } catch (AssertionError | AssumptionViolatedException ae) {\n      for (Class<?> expectedType : expectedTypes) {\n        if (expectedType.isInstance(ae)) { // user is expecting this type explicitly\n          return ae;\n        }\n      }\n      throw ae;\n    } catch (Throwable e) {\n      return e;\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#_expectThrows(List[#-extends-Class[#]],ThrowingRunnable).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Helper method for {@link #expectThrows} and {@link #expectThrowsAnyOf} that takes care of propagating\n   * any {@link AssertionError} or {@link AssumptionViolatedException} instances thrown if and only if they \n   * are super classes of the <code>expectedTypes</code>.  Otherwise simply returns any {@link Throwable} \n   * thrown, regardless of type, or null if the <code>runnable</code> completed w/o error.\n   */\n  private static Throwable _expectThrows(List<? extends Class<?>> expectedTypes, ThrowingRunnable runnable) {\n                                         \n    try {\n      runnable.run();\n    } catch (AssertionError | AssumptionViolatedException ae) {\n      for (Class<?> expectedType : expectedTypes) {\n        if (expectedType.isInstance(ae)) { // user is expecting this type explicitly\n          return ae;\n        }\n      }\n      throw ae;\n    } catch (Throwable e) {\n      return e;\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8d592ac9e6400869a47757802651c715b4e88219":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8d592ac9e6400869a47757802651c715b4e88219"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8d592ac9e6400869a47757802651c715b4e88219"]},"commit2Childs":{"8d592ac9e6400869a47757802651c715b4e88219":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8d592ac9e6400869a47757802651c715b4e88219","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}