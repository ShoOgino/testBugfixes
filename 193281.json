{"path":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","sourceNew":"  /**\n   * This method intended for use with <tt>testHighlightingWithDefaultField()</tt>\n * @throws InvalidTokenOffsetsException \n   */\n  private static String highlightField(Query query, String fieldName, String text)\n      throws IOException, InvalidTokenOffsetsException {\n    TokenStream tokenStream = new StandardAnalyzer(TEST_VERSION_CURRENT).tokenStream(fieldName, new StringReader(text));\n    // Assuming \"<B>\", \"</B>\" used to highlight\n    SimpleHTMLFormatter formatter = new SimpleHTMLFormatter();\n    QueryScorer scorer = new QueryScorer(query, fieldName, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(formatter, scorer);\n    highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));\n\n    String rv = highlighter.getBestFragments(tokenStream, text, 1, \"(FIELD TEXT TRUNCATED)\");\n    return rv.length() == 0 ? text : rv;\n  }\n\n","sourceOld":"  /**\n   * This method intended for use with <tt>testHighlightingWithDefaultField()</tt>\n * @throws InvalidTokenOffsetsException \n   */\n  private static String highlightField(Query query, String fieldName, String text)\n      throws IOException, InvalidTokenOffsetsException {\n    TokenStream tokenStream = new StandardAnalyzer(TEST_VERSION_CURRENT).tokenStream(fieldName, new StringReader(text));\n    // Assuming \"<B>\", \"</B>\" used to highlight\n    SimpleHTMLFormatter formatter = new SimpleHTMLFormatter();\n    QueryScorer scorer = new QueryScorer(query, fieldName, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(formatter, scorer);\n    highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));\n\n    String rv = highlighter.getBestFragments(tokenStream, text, 1, \"(FIELD TEXT TRUNCATED)\");\n    return rv.length() == 0 ? text : rv;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7f8e68717c68517265937c911e1ce9f25750247","date":1274071103,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","sourceNew":"  /**\n   * This method intended for use with <tt>testHighlightingWithDefaultField()</tt>\n * @throws InvalidTokenOffsetsException \n   */\n  private static String highlightField(Query query, String fieldName, String text)\n      throws IOException, InvalidTokenOffsetsException {\n    TokenStream tokenStream = new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true).tokenStream(fieldName, new StringReader(text));\n    // Assuming \"<B>\", \"</B>\" used to highlight\n    SimpleHTMLFormatter formatter = new SimpleHTMLFormatter();\n    QueryScorer scorer = new QueryScorer(query, fieldName, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(formatter, scorer);\n    highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));\n\n    String rv = highlighter.getBestFragments(tokenStream, text, 1, \"(FIELD TEXT TRUNCATED)\");\n    return rv.length() == 0 ? text : rv;\n  }\n\n","sourceOld":"  /**\n   * This method intended for use with <tt>testHighlightingWithDefaultField()</tt>\n * @throws InvalidTokenOffsetsException \n   */\n  private static String highlightField(Query query, String fieldName, String text)\n      throws IOException, InvalidTokenOffsetsException {\n    TokenStream tokenStream = new StandardAnalyzer(TEST_VERSION_CURRENT).tokenStream(fieldName, new StringReader(text));\n    // Assuming \"<B>\", \"</B>\" used to highlight\n    SimpleHTMLFormatter formatter = new SimpleHTMLFormatter();\n    QueryScorer scorer = new QueryScorer(query, fieldName, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(formatter, scorer);\n    highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));\n\n    String rv = highlighter.getBestFragments(tokenStream, text, 1, \"(FIELD TEXT TRUNCATED)\");\n    return rv.length() == 0 ? text : rv;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","sourceNew":"  /**\n   * This method intended for use with <tt>testHighlightingWithDefaultField()</tt>\n * @throws InvalidTokenOffsetsException \n   */\n  private static String highlightField(Query query, String fieldName, String text)\n      throws IOException, InvalidTokenOffsetsException {\n    TokenStream tokenStream = new MockAnalyzer(random, MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true).tokenStream(fieldName, new StringReader(text));\n    // Assuming \"<B>\", \"</B>\" used to highlight\n    SimpleHTMLFormatter formatter = new SimpleHTMLFormatter();\n    QueryScorer scorer = new QueryScorer(query, fieldName, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(formatter, scorer);\n    highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));\n\n    String rv = highlighter.getBestFragments(tokenStream, text, 1, \"(FIELD TEXT TRUNCATED)\");\n    return rv.length() == 0 ? text : rv;\n  }\n\n","sourceOld":"  /**\n   * This method intended for use with <tt>testHighlightingWithDefaultField()</tt>\n * @throws InvalidTokenOffsetsException \n   */\n  private static String highlightField(Query query, String fieldName, String text)\n      throws IOException, InvalidTokenOffsetsException {\n    TokenStream tokenStream = new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true).tokenStream(fieldName, new StringReader(text));\n    // Assuming \"<B>\", \"</B>\" used to highlight\n    SimpleHTMLFormatter formatter = new SimpleHTMLFormatter();\n    QueryScorer scorer = new QueryScorer(query, fieldName, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(formatter, scorer);\n    highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));\n\n    String rv = highlighter.getBestFragments(tokenStream, text, 1, \"(FIELD TEXT TRUNCATED)\");\n    return rv.length() == 0 ? text : rv;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","sourceNew":"  /**\n   * This method intended for use with <tt>testHighlightingWithDefaultField()</tt>\n * @throws InvalidTokenOffsetsException \n   */\n  private static String highlightField(Query query, String fieldName, String text)\n      throws IOException, InvalidTokenOffsetsException {\n    TokenStream tokenStream = new MockAnalyzer(random, MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true).tokenStream(fieldName, new StringReader(text));\n    // Assuming \"<B>\", \"</B>\" used to highlight\n    SimpleHTMLFormatter formatter = new SimpleHTMLFormatter();\n    QueryScorer scorer = new QueryScorer(query, fieldName, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(formatter, scorer);\n    highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));\n\n    String rv = highlighter.getBestFragments(tokenStream, text, 1, \"(FIELD TEXT TRUNCATED)\");\n    return rv.length() == 0 ? text : rv;\n  }\n\n","sourceOld":"  /**\n   * This method intended for use with <tt>testHighlightingWithDefaultField()</tt>\n * @throws InvalidTokenOffsetsException \n   */\n  private static String highlightField(Query query, String fieldName, String text)\n      throws IOException, InvalidTokenOffsetsException {\n    TokenStream tokenStream = new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true).tokenStream(fieldName, new StringReader(text));\n    // Assuming \"<B>\", \"</B>\" used to highlight\n    SimpleHTMLFormatter formatter = new SimpleHTMLFormatter();\n    QueryScorer scorer = new QueryScorer(query, fieldName, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(formatter, scorer);\n    highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));\n\n    String rv = highlighter.getBestFragments(tokenStream, text, 1, \"(FIELD TEXT TRUNCATED)\");\n    return rv.length() == 0 ? text : rv;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","sourceNew":"  /**\n   * This method intended for use with <tt>testHighlightingWithDefaultField()</tt>\n * @throws InvalidTokenOffsetsException \n   */\n  private static String highlightField(Query query, String fieldName, String text)\n      throws IOException, InvalidTokenOffsetsException {\n    TokenStream tokenStream = new MockAnalyzer(random, MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true).tokenStream(fieldName, new StringReader(text));\n    // Assuming \"<B>\", \"</B>\" used to highlight\n    SimpleHTMLFormatter formatter = new SimpleHTMLFormatter();\n    QueryScorer scorer = new QueryScorer(query, fieldName, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(formatter, scorer);\n    highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));\n\n    String rv = highlighter.getBestFragments(tokenStream, text, 1, \"(FIELD TEXT TRUNCATED)\");\n    return rv.length() == 0 ? text : rv;\n  }\n\n","sourceOld":"  /**\n   * This method intended for use with <tt>testHighlightingWithDefaultField()</tt>\n * @throws InvalidTokenOffsetsException \n   */\n  private static String highlightField(Query query, String fieldName, String text)\n      throws IOException, InvalidTokenOffsetsException {\n    TokenStream tokenStream = new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true).tokenStream(fieldName, new StringReader(text));\n    // Assuming \"<B>\", \"</B>\" used to highlight\n    SimpleHTMLFormatter formatter = new SimpleHTMLFormatter();\n    QueryScorer scorer = new QueryScorer(query, fieldName, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(formatter, scorer);\n    highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));\n\n    String rv = highlighter.getBestFragments(tokenStream, text, 1, \"(FIELD TEXT TRUNCATED)\");\n    return rv.length() == 0 ? text : rv;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","sourceNew":"  /**\n   * This method intended for use with <tt>testHighlightingWithDefaultField()</tt>\n * @throws InvalidTokenOffsetsException \n   */\n  private static String highlightField(Query query, String fieldName, String text)\n      throws IOException, InvalidTokenOffsetsException {\n    TokenStream tokenStream = new MockAnalyzer(random, MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true).tokenStream(fieldName, new StringReader(text));\n    // Assuming \"<B>\", \"</B>\" used to highlight\n    SimpleHTMLFormatter formatter = new SimpleHTMLFormatter();\n    QueryScorer scorer = new QueryScorer(query, fieldName, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(formatter, scorer);\n    highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));\n\n    String rv = highlighter.getBestFragments(tokenStream, text, 1, \"(FIELD TEXT TRUNCATED)\");\n    return rv.length() == 0 ? text : rv;\n  }\n\n","sourceOld":"  /**\n   * This method intended for use with <tt>testHighlightingWithDefaultField()</tt>\n * @throws InvalidTokenOffsetsException \n   */\n  private static String highlightField(Query query, String fieldName, String text)\n      throws IOException, InvalidTokenOffsetsException {\n    TokenStream tokenStream = new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true).tokenStream(fieldName, new StringReader(text));\n    // Assuming \"<B>\", \"</B>\" used to highlight\n    SimpleHTMLFormatter formatter = new SimpleHTMLFormatter();\n    QueryScorer scorer = new QueryScorer(query, fieldName, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(formatter, scorer);\n    highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));\n\n    String rv = highlighter.getBestFragments(tokenStream, text, 1, \"(FIELD TEXT TRUNCATED)\");\n    return rv.length() == 0 ? text : rv;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf7efd82433f3f64684711c16edfd149db6af111","date":1317013128,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","sourceNew":"  /**\n   * This method intended for use with <tt>testHighlightingWithDefaultField()</tt>\n * @throws InvalidTokenOffsetsException \n   */\n  private static String highlightField(Query query, String fieldName, String text)\n      throws IOException, InvalidTokenOffsetsException {\n    TokenStream tokenStream = new MockAnalyzer(random, MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true)\n        .reusableTokenStream(fieldName, new StringReader(text));\n    // Assuming \"<B>\", \"</B>\" used to highlight\n    SimpleHTMLFormatter formatter = new SimpleHTMLFormatter();\n    QueryScorer scorer = new QueryScorer(query, fieldName, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(formatter, scorer);\n    highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));\n\n    String rv = highlighter.getBestFragments(tokenStream, text, 1, \"(FIELD TEXT TRUNCATED)\");\n    return rv.length() == 0 ? text : rv;\n  }\n\n","sourceOld":"  /**\n   * This method intended for use with <tt>testHighlightingWithDefaultField()</tt>\n * @throws InvalidTokenOffsetsException \n   */\n  private static String highlightField(Query query, String fieldName, String text)\n      throws IOException, InvalidTokenOffsetsException {\n    TokenStream tokenStream = new MockAnalyzer(random, MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true).tokenStream(fieldName, new StringReader(text));\n    // Assuming \"<B>\", \"</B>\" used to highlight\n    SimpleHTMLFormatter formatter = new SimpleHTMLFormatter();\n    QueryScorer scorer = new QueryScorer(query, fieldName, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(formatter, scorer);\n    highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));\n\n    String rv = highlighter.getBestFragments(tokenStream, text, 1, \"(FIELD TEXT TRUNCATED)\");\n    return rv.length() == 0 ? text : rv;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69e043c521d4e8db770cc140c63f5ef51f03426a","date":1317187614,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","sourceNew":"  /**\n   * This method intended for use with <tt>testHighlightingWithDefaultField()</tt>\n * @throws InvalidTokenOffsetsException \n   */\n  private static String highlightField(Query query, String fieldName, String text)\n      throws IOException, InvalidTokenOffsetsException {\n    TokenStream tokenStream = new MockAnalyzer(random, MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true)\n        .tokenStream(fieldName, new StringReader(text));\n    // Assuming \"<B>\", \"</B>\" used to highlight\n    SimpleHTMLFormatter formatter = new SimpleHTMLFormatter();\n    QueryScorer scorer = new QueryScorer(query, fieldName, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(formatter, scorer);\n    highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));\n\n    String rv = highlighter.getBestFragments(tokenStream, text, 1, \"(FIELD TEXT TRUNCATED)\");\n    return rv.length() == 0 ? text : rv;\n  }\n\n","sourceOld":"  /**\n   * This method intended for use with <tt>testHighlightingWithDefaultField()</tt>\n * @throws InvalidTokenOffsetsException \n   */\n  private static String highlightField(Query query, String fieldName, String text)\n      throws IOException, InvalidTokenOffsetsException {\n    TokenStream tokenStream = new MockAnalyzer(random, MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true)\n        .reusableTokenStream(fieldName, new StringReader(text));\n    // Assuming \"<B>\", \"</B>\" used to highlight\n    SimpleHTMLFormatter formatter = new SimpleHTMLFormatter();\n    QueryScorer scorer = new QueryScorer(query, fieldName, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(formatter, scorer);\n    highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));\n\n    String rv = highlighter.getBestFragments(tokenStream, text, 1, \"(FIELD TEXT TRUNCATED)\");\n    return rv.length() == 0 ? text : rv;\n  }\n\n","bugFix":null,"bugIntro":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","sourceNew":"  /**\n   * This method intended for use with <tt>testHighlightingWithDefaultField()</tt>\n * @throws InvalidTokenOffsetsException \n   */\n  private String highlightField(Query query, String fieldName, String text)\n      throws IOException, InvalidTokenOffsetsException {\n    TokenStream tokenStream = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true)\n        .tokenStream(fieldName, new StringReader(text));\n    // Assuming \"<B>\", \"</B>\" used to highlight\n    SimpleHTMLFormatter formatter = new SimpleHTMLFormatter();\n    QueryScorer scorer = new QueryScorer(query, fieldName, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(formatter, scorer);\n    highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));\n\n    String rv = highlighter.getBestFragments(tokenStream, text, 1, \"(FIELD TEXT TRUNCATED)\");\n    return rv.length() == 0 ? text : rv;\n  }\n\n","sourceOld":"  /**\n   * This method intended for use with <tt>testHighlightingWithDefaultField()</tt>\n * @throws InvalidTokenOffsetsException \n   */\n  private static String highlightField(Query query, String fieldName, String text)\n      throws IOException, InvalidTokenOffsetsException {\n    TokenStream tokenStream = new MockAnalyzer(random, MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true)\n        .tokenStream(fieldName, new StringReader(text));\n    // Assuming \"<B>\", \"</B>\" used to highlight\n    SimpleHTMLFormatter formatter = new SimpleHTMLFormatter();\n    QueryScorer scorer = new QueryScorer(query, fieldName, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(formatter, scorer);\n    highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));\n\n    String rv = highlighter.getBestFragments(tokenStream, text, 1, \"(FIELD TEXT TRUNCATED)\");\n    return rv.length() == 0 ? text : rv;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","sourceNew":"  /**\n   * This method intended for use with <tt>testHighlightingWithDefaultField()</tt>\n * @throws InvalidTokenOffsetsException \n   */\n  private String highlightField(Query query, String fieldName, String text)\n      throws IOException, InvalidTokenOffsetsException {\n    TokenStream tokenStream = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true)\n        .tokenStream(fieldName, new StringReader(text));\n    // Assuming \"<B>\", \"</B>\" used to highlight\n    SimpleHTMLFormatter formatter = new SimpleHTMLFormatter();\n    QueryScorer scorer = new QueryScorer(query, fieldName, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(formatter, scorer);\n    highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));\n\n    String rv = highlighter.getBestFragments(tokenStream, text, 1, \"(FIELD TEXT TRUNCATED)\");\n    return rv.length() == 0 ? text : rv;\n  }\n\n","sourceOld":"  /**\n   * This method intended for use with <tt>testHighlightingWithDefaultField()</tt>\n * @throws InvalidTokenOffsetsException \n   */\n  private String highlightField(Query query, String fieldName, String text)\n      throws IOException, InvalidTokenOffsetsException {\n    TokenStream tokenStream = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true)\n        .tokenStream(fieldName, new StringReader(text));\n    // Assuming \"<B>\", \"</B>\" used to highlight\n    SimpleHTMLFormatter formatter = new SimpleHTMLFormatter();\n    QueryScorer scorer = new QueryScorer(query, fieldName, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(formatter, scorer);\n    highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));\n\n    String rv = highlighter.getBestFragments(tokenStream, text, 1, \"(FIELD TEXT TRUNCATED)\");\n    return rv.length() == 0 ? text : rv;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["c7f8e68717c68517265937c911e1ce9f25750247"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c7f8e68717c68517265937c911e1ce9f25750247","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["c7f8e68717c68517265937c911e1ce9f25750247","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"c7f8e68717c68517265937c911e1ce9f25750247":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"962d04139994fce5193143ef35615499a9a96d78":["c7f8e68717c68517265937c911e1ce9f25750247","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"cf7efd82433f3f64684711c16edfd149db6af111":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"69e043c521d4e8db770cc140c63f5ef51f03426a":["cf7efd82433f3f64684711c16edfd149db6af111"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","cf7efd82433f3f64684711c16edfd149db6af111"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"c7f8e68717c68517265937c911e1ce9f25750247":["f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78"],"962d04139994fce5193143ef35615499a9a96d78":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cf7efd82433f3f64684711c16edfd149db6af111":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"69e043c521d4e8db770cc140c63f5ef51f03426a":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c7f8e68717c68517265937c911e1ce9f25750247"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}