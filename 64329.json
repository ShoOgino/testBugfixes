{"path":"lucene/classification/src/java/org/apache/lucene/classification/utils/ConfusionMatrixGenerator.ConfusionMatrix#getAccuracy().mjava","commits":[{"id":"2c707e50d5d9db6929b753b3c0b0254186ee0986","date":1445602910,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/utils/ConfusionMatrixGenerator.ConfusionMatrix#getAccuracy().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Calculate accuracy on this confusion matrix using the formula:\n     * {@literal accuracy = correctly-classified / (correctly-classified + wrongly-classified)}\n     *\n     * @return the accuracy\n     */\n    public double getAccuracy() {\n      if (this.accuracy == -1) {\n        double cc = 0d;\n        double wc = 0d;\n        for (Map.Entry<String, Map<String, Long>> entry : linearizedMatrix.entrySet()) {\n          String correctAnswer = entry.getKey();\n          for (Map.Entry<String, Long> classifiedAnswers : entry.getValue().entrySet()) {\n            Long value = classifiedAnswers.getValue();\n            if (value != null) {\n              if (correctAnswer.equals(classifiedAnswers.getKey())) {\n                cc += value;\n              } else {\n                wc += value;\n              }\n            }\n          }\n\n        }\n        this.accuracy = cc / (cc + wc);\n      }\n      return this.accuracy;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["cbc45ebd0910e885a4f2680ecb1875d36ca3d0e2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cbc45ebd0910e885a4f2680ecb1875d36ca3d0e2","date":1459428331,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/utils/ConfusionMatrixGenerator.ConfusionMatrix#getAccuracy().mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/utils/ConfusionMatrixGenerator.ConfusionMatrix#getAccuracy().mjava","sourceNew":"    /**\n     * Calculate accuracy on this confusion matrix using the formula:\n     * {@literal accuracy = correctly-classified / (correctly-classified + wrongly-classified)}\n     *\n     * @return the accuracy\n     */\n    public double getAccuracy() {\n      if (this.accuracy == -1) {\n        double tp = 0d;\n        double tn = 0d;\n        double fp = 0d;\n        double fn = 0d;\n        for (Map.Entry<String, Map<String, Long>> classification : linearizedMatrix.entrySet()) {\n          String klass = classification.getKey();\n          for (Map.Entry<String, Long> entry : classification.getValue().entrySet()) {\n            if (klass.equals(entry.getKey())) {\n              tp += entry.getValue();\n            } else {\n              fn += entry.getValue();\n            }\n          }\n          for (Map<String, Long> values : linearizedMatrix.values()) {\n            if (values.containsKey(klass)) {\n              fp += values.get(klass);\n            } else {\n              tn++;\n            }\n          }\n\n        }\n        this.accuracy = (tp + tn) / (fp + fn + tp + tn);\n      }\n      return this.accuracy;\n    }\n\n","sourceOld":"    /**\n     * Calculate accuracy on this confusion matrix using the formula:\n     * {@literal accuracy = correctly-classified / (correctly-classified + wrongly-classified)}\n     *\n     * @return the accuracy\n     */\n    public double getAccuracy() {\n      if (this.accuracy == -1) {\n        double cc = 0d;\n        double wc = 0d;\n        for (Map.Entry<String, Map<String, Long>> entry : linearizedMatrix.entrySet()) {\n          String correctAnswer = entry.getKey();\n          for (Map.Entry<String, Long> classifiedAnswers : entry.getValue().entrySet()) {\n            Long value = classifiedAnswers.getValue();\n            if (value != null) {\n              if (correctAnswer.equals(classifiedAnswers.getKey())) {\n                cc += value;\n              } else {\n                wc += value;\n              }\n            }\n          }\n\n        }\n        this.accuracy = cc / (cc + wc);\n      }\n      return this.accuracy;\n    }\n\n","bugFix":["2c707e50d5d9db6929b753b3c0b0254186ee0986"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8bcd3226dfcc329379dc50da67a963739f6cb65","date":1464272038,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/utils/ConfusionMatrixGenerator.ConfusionMatrix#getAccuracy().mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/utils/ConfusionMatrixGenerator.ConfusionMatrix#getAccuracy().mjava","sourceNew":"    /**\n     * Calculate accuracy on this confusion matrix using the formula:\n     * {@literal accuracy = correctly-classified / (correctly-classified + wrongly-classified)}\n     *\n     * @return the accuracy\n     */\n    public double getAccuracy() {\n      if (this.accuracy == -1) {\n        double tp = 0d;\n        double tn = 0d;\n        double tfp = 0d; // tp + fp\n        double fn = 0d;\n        for (Map.Entry<String, Map<String, Long>> classification : linearizedMatrix.entrySet()) {\n          String klass = classification.getKey();\n          for (Map.Entry<String, Long> entry : classification.getValue().entrySet()) {\n            if (klass.equals(entry.getKey())) {\n              tp += entry.getValue();\n            } else {\n              fn += entry.getValue();\n            }\n          }\n          for (Map<String, Long> values : linearizedMatrix.values()) {\n            if (values.containsKey(klass)) {\n              tfp += values.get(klass);\n            } else {\n              tn++;\n            }\n          }\n\n        }\n        this.accuracy = (tp + tn) / (tfp + fn + tn);\n      }\n      return this.accuracy;\n    }\n\n","sourceOld":"    /**\n     * Calculate accuracy on this confusion matrix using the formula:\n     * {@literal accuracy = correctly-classified / (correctly-classified + wrongly-classified)}\n     *\n     * @return the accuracy\n     */\n    public double getAccuracy() {\n      if (this.accuracy == -1) {\n        double tp = 0d;\n        double tn = 0d;\n        double fp = 0d;\n        double fn = 0d;\n        for (Map.Entry<String, Map<String, Long>> classification : linearizedMatrix.entrySet()) {\n          String klass = classification.getKey();\n          for (Map.Entry<String, Long> entry : classification.getValue().entrySet()) {\n            if (klass.equals(entry.getKey())) {\n              tp += entry.getValue();\n            } else {\n              fn += entry.getValue();\n            }\n          }\n          for (Map<String, Long> values : linearizedMatrix.values()) {\n            if (values.containsKey(klass)) {\n              fp += values.get(klass);\n            } else {\n              tn++;\n            }\n          }\n\n        }\n        this.accuracy = (tp + tn) / (fp + fn + tp + tn);\n      }\n      return this.accuracy;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/utils/ConfusionMatrixGenerator.ConfusionMatrix#getAccuracy().mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/utils/ConfusionMatrixGenerator.ConfusionMatrix#getAccuracy().mjava","sourceNew":"    /**\n     * Calculate accuracy on this confusion matrix using the formula:\n     * {@literal accuracy = correctly-classified / (correctly-classified + wrongly-classified)}\n     *\n     * @return the accuracy\n     */\n    public double getAccuracy() {\n      if (this.accuracy == -1) {\n        double tp = 0d;\n        double tn = 0d;\n        double tfp = 0d; // tp + fp\n        double fn = 0d;\n        for (Map.Entry<String, Map<String, Long>> classification : linearizedMatrix.entrySet()) {\n          String klass = classification.getKey();\n          for (Map.Entry<String, Long> entry : classification.getValue().entrySet()) {\n            if (klass.equals(entry.getKey())) {\n              tp += entry.getValue();\n            } else {\n              fn += entry.getValue();\n            }\n          }\n          for (Map<String, Long> values : linearizedMatrix.values()) {\n            if (values.containsKey(klass)) {\n              tfp += values.get(klass);\n            } else {\n              tn++;\n            }\n          }\n\n        }\n        this.accuracy = (tp + tn) / (tfp + fn + tn);\n      }\n      return this.accuracy;\n    }\n\n","sourceOld":"    /**\n     * Calculate accuracy on this confusion matrix using the formula:\n     * {@literal accuracy = correctly-classified / (correctly-classified + wrongly-classified)}\n     *\n     * @return the accuracy\n     */\n    public double getAccuracy() {\n      if (this.accuracy == -1) {\n        double tp = 0d;\n        double tn = 0d;\n        double fp = 0d;\n        double fn = 0d;\n        for (Map.Entry<String, Map<String, Long>> classification : linearizedMatrix.entrySet()) {\n          String klass = classification.getKey();\n          for (Map.Entry<String, Long> entry : classification.getValue().entrySet()) {\n            if (klass.equals(entry.getKey())) {\n              tp += entry.getValue();\n            } else {\n              fn += entry.getValue();\n            }\n          }\n          for (Map<String, Long> values : linearizedMatrix.values()) {\n            if (values.containsKey(klass)) {\n              fp += values.get(klass);\n            } else {\n              tn++;\n            }\n          }\n\n        }\n        this.accuracy = (tp + tn) / (fp + fn + tp + tn);\n      }\n      return this.accuracy;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/utils/ConfusionMatrixGenerator.ConfusionMatrix#getAccuracy().mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/utils/ConfusionMatrixGenerator.ConfusionMatrix#getAccuracy().mjava","sourceNew":"    /**\n     * Calculate accuracy on this confusion matrix using the formula:\n     * {@literal accuracy = correctly-classified / (correctly-classified + wrongly-classified)}\n     *\n     * @return the accuracy\n     */\n    public double getAccuracy() {\n      if (this.accuracy == -1) {\n        double tp = 0d;\n        double tn = 0d;\n        double tfp = 0d; // tp + fp\n        double fn = 0d;\n        for (Map.Entry<String, Map<String, Long>> classification : linearizedMatrix.entrySet()) {\n          String klass = classification.getKey();\n          for (Map.Entry<String, Long> entry : classification.getValue().entrySet()) {\n            if (klass.equals(entry.getKey())) {\n              tp += entry.getValue();\n            } else {\n              fn += entry.getValue();\n            }\n          }\n          for (Map<String, Long> values : linearizedMatrix.values()) {\n            if (values.containsKey(klass)) {\n              tfp += values.get(klass);\n            } else {\n              tn++;\n            }\n          }\n\n        }\n        this.accuracy = (tp + tn) / (tfp + fn + tn);\n      }\n      return this.accuracy;\n    }\n\n","sourceOld":"    /**\n     * Calculate accuracy on this confusion matrix using the formula:\n     * {@literal accuracy = correctly-classified / (correctly-classified + wrongly-classified)}\n     *\n     * @return the accuracy\n     */\n    public double getAccuracy() {\n      if (this.accuracy == -1) {\n        double tp = 0d;\n        double tn = 0d;\n        double fp = 0d;\n        double fn = 0d;\n        for (Map.Entry<String, Map<String, Long>> classification : linearizedMatrix.entrySet()) {\n          String klass = classification.getKey();\n          for (Map.Entry<String, Long> entry : classification.getValue().entrySet()) {\n            if (klass.equals(entry.getKey())) {\n              tp += entry.getValue();\n            } else {\n              fn += entry.getValue();\n            }\n          }\n          for (Map<String, Long> values : linearizedMatrix.values()) {\n            if (values.containsKey(klass)) {\n              fp += values.get(klass);\n            } else {\n              tn++;\n            }\n          }\n\n        }\n        this.accuracy = (tp + tn) / (fp + fn + tp + tn);\n      }\n      return this.accuracy;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f8bcd3226dfcc329379dc50da67a963739f6cb65":["cbc45ebd0910e885a4f2680ecb1875d36ca3d0e2"],"cbc45ebd0910e885a4f2680ecb1875d36ca3d0e2":["2c707e50d5d9db6929b753b3c0b0254186ee0986"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2c707e50d5d9db6929b753b3c0b0254186ee0986":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"83870855d82aba6819217abeff5a40779dbb28b4":["cbc45ebd0910e885a4f2680ecb1875d36ca3d0e2","f8bcd3226dfcc329379dc50da67a963739f6cb65"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["cbc45ebd0910e885a4f2680ecb1875d36ca3d0e2","f8bcd3226dfcc329379dc50da67a963739f6cb65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f8bcd3226dfcc329379dc50da67a963739f6cb65"]},"commit2Childs":{"f8bcd3226dfcc329379dc50da67a963739f6cb65":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cbc45ebd0910e885a4f2680ecb1875d36ca3d0e2":["f8bcd3226dfcc329379dc50da67a963739f6cb65","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2c707e50d5d9db6929b753b3c0b0254186ee0986"],"2c707e50d5d9db6929b753b3c0b0254186ee0986":["cbc45ebd0910e885a4f2680ecb1875d36ca3d0e2"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}