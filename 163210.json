{"path":"solr/contrib/extraction/src/main/java/org/apache/solr/handler/extraction/ExtractingRequestHandler#inform(SolrCore).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/extraction/src/main/java/org/apache/solr/handler/extraction/ExtractingRequestHandler#inform(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  public void inform(SolrCore core) {\n    if (initArgs != null) {\n      //if relative,then relative to config dir, otherwise, absolute path\n      String tikaConfigLoc = (String) initArgs.get(CONFIG_LOCATION);\n      if (tikaConfigLoc != null) {\n        File configFile = new File(tikaConfigLoc);\n        if (configFile.isAbsolute() == false) {\n          configFile = new File(core.getResourceLoader().getConfigDir(), configFile.getPath());\n        }\n        try {\n          config = new TikaConfig(configFile);\n        } catch (Exception e) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, e);\n        }\n      } else {\n        config = TikaConfig.getDefaultConfig();\n      }\n      NamedList configDateFormats = (NamedList) initArgs.get(DATE_FORMATS);\n      if (configDateFormats != null && configDateFormats.size() > 0) {\n        dateFormats = new HashSet<String>();\n        Iterator<Map.Entry> it = configDateFormats.iterator();\n        while (it.hasNext()) {\n          String format = (String) it.next().getValue();\n          log.info(\"Adding Date Format: \" + format);\n          dateFormats.add(format);\n        }\n      }\n    } else {\n      config = TikaConfig.getDefaultConfig();\n    }\n    factory = createFactory();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/extraction/src/main/java/org/apache/solr/handler/extraction/ExtractingRequestHandler#inform(SolrCore).mjava","sourceNew":null,"sourceOld":"  public void inform(SolrCore core) {\n    if (initArgs != null) {\n      //if relative,then relative to config dir, otherwise, absolute path\n      String tikaConfigLoc = (String) initArgs.get(CONFIG_LOCATION);\n      if (tikaConfigLoc != null) {\n        File configFile = new File(tikaConfigLoc);\n        if (configFile.isAbsolute() == false) {\n          configFile = new File(core.getResourceLoader().getConfigDir(), configFile.getPath());\n        }\n        try {\n          config = new TikaConfig(configFile);\n        } catch (Exception e) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, e);\n        }\n      } else {\n        config = TikaConfig.getDefaultConfig();\n      }\n      NamedList configDateFormats = (NamedList) initArgs.get(DATE_FORMATS);\n      if (configDateFormats != null && configDateFormats.size() > 0) {\n        dateFormats = new HashSet<String>();\n        Iterator<Map.Entry> it = configDateFormats.iterator();\n        while (it.hasNext()) {\n          String format = (String) it.next().getValue();\n          log.info(\"Adding Date Format: \" + format);\n          dateFormats.add(format);\n        }\n      }\n    } else {\n      config = TikaConfig.getDefaultConfig();\n    }\n    factory = createFactory();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/extraction/src/main/java/org/apache/solr/handler/extraction/ExtractingRequestHandler#inform(SolrCore).mjava","pathOld":"contrib/extraction/src/main/java/org/apache/solr/handler/extraction/ExtractingRequestHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    if (initArgs != null) {\n      //if relative,then relative to config dir, otherwise, absolute path\n      String tikaConfigLoc = (String) initArgs.get(CONFIG_LOCATION);\n      if (tikaConfigLoc != null) {\n        File configFile = new File(tikaConfigLoc);\n        if (configFile.isAbsolute() == false) {\n          configFile = new File(core.getResourceLoader().getConfigDir(), configFile.getPath());\n        }\n        try {\n          config = new TikaConfig(configFile);\n        } catch (Exception e) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, e);\n        }\n      } else {\n        config = TikaConfig.getDefaultConfig();\n      }\n      NamedList configDateFormats = (NamedList) initArgs.get(DATE_FORMATS);\n      if (configDateFormats != null && configDateFormats.size() > 0) {\n        dateFormats = new HashSet<String>();\n        Iterator<Map.Entry> it = configDateFormats.iterator();\n        while (it.hasNext()) {\n          String format = (String) it.next().getValue();\n          log.info(\"Adding Date Format: \" + format);\n          dateFormats.add(format);\n        }\n      }\n    } else {\n      config = TikaConfig.getDefaultConfig();\n    }\n    factory = createFactory();\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    if (initArgs != null) {\n      //if relative,then relative to config dir, otherwise, absolute path\n      String tikaConfigLoc = (String) initArgs.get(CONFIG_LOCATION);\n      if (tikaConfigLoc != null) {\n        File configFile = new File(tikaConfigLoc);\n        if (configFile.isAbsolute() == false) {\n          configFile = new File(core.getResourceLoader().getConfigDir(), configFile.getPath());\n        }\n        try {\n          config = new TikaConfig(configFile);\n        } catch (Exception e) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, e);\n        }\n      } else {\n        config = TikaConfig.getDefaultConfig();\n      }\n      NamedList configDateFormats = (NamedList) initArgs.get(DATE_FORMATS);\n      if (configDateFormats != null && configDateFormats.size() > 0) {\n        dateFormats = new HashSet<String>();\n        Iterator<Map.Entry> it = configDateFormats.iterator();\n        while (it.hasNext()) {\n          String format = (String) it.next().getValue();\n          log.info(\"Adding Date Format: \" + format);\n          dateFormats.add(format);\n        }\n      }\n    } else {\n      config = TikaConfig.getDefaultConfig();\n    }\n    factory = createFactory();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/extraction/src/main/java/org/apache/solr/handler/extraction/ExtractingRequestHandler#inform(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  public void inform(SolrCore core) {\n    if (initArgs != null) {\n      //if relative,then relative to config dir, otherwise, absolute path\n      String tikaConfigLoc = (String) initArgs.get(CONFIG_LOCATION);\n      if (tikaConfigLoc != null) {\n        File configFile = new File(tikaConfigLoc);\n        if (configFile.isAbsolute() == false) {\n          configFile = new File(core.getResourceLoader().getConfigDir(), configFile.getPath());\n        }\n        try {\n          config = new TikaConfig(configFile);\n        } catch (Exception e) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, e);\n        }\n      } else {\n        config = TikaConfig.getDefaultConfig();\n      }\n      NamedList configDateFormats = (NamedList) initArgs.get(DATE_FORMATS);\n      if (configDateFormats != null && configDateFormats.size() > 0) {\n        dateFormats = new HashSet<String>();\n        Iterator<Map.Entry> it = configDateFormats.iterator();\n        while (it.hasNext()) {\n          String format = (String) it.next().getValue();\n          log.info(\"Adding Date Format: \" + format);\n          dateFormats.add(format);\n        }\n      }\n    } else {\n      config = TikaConfig.getDefaultConfig();\n    }\n    factory = createFactory();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"623193e0f05f138bdb5a54e0d149ab4ce4bf51f5","date":1273502214,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/contrib/extraction/src/main/java/org/apache/solr/handler/extraction/ExtractingRequestHandler#inform(SolrCore).mjava","pathOld":"solr/contrib/extraction/src/main/java/org/apache/solr/handler/extraction/ExtractingRequestHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    if (initArgs != null) {\n      //if relative,then relative to config dir, otherwise, absolute path\n      String tikaConfigLoc = (String) initArgs.get(CONFIG_LOCATION);\n      if (tikaConfigLoc != null) {\n        File configFile = new File(tikaConfigLoc);\n        if (configFile.isAbsolute() == false) {\n          configFile = new File(core.getResourceLoader().getConfigDir(), configFile.getPath());\n        }\n        try {\n          config = new TikaConfig(configFile);\n        } catch (Exception e) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, e);\n        }\n      }\n      NamedList configDateFormats = (NamedList) initArgs.get(DATE_FORMATS);\n      if (configDateFormats != null && configDateFormats.size() > 0) {\n        dateFormats = new HashSet<String>();\n        Iterator<Map.Entry> it = configDateFormats.iterator();\n        while (it.hasNext()) {\n          String format = (String) it.next().getValue();\n          log.info(\"Adding Date Format: \" + format);\n          dateFormats.add(format);\n        }\n      }\n    }\n    if (config == null) {\n      try {\n        config = getDefaultConfig(core.getResourceLoader().getClassLoader());\n      } catch (MimeTypeException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      } catch (IOException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      }\n    }\n    factory = createFactory();\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    if (initArgs != null) {\n      //if relative,then relative to config dir, otherwise, absolute path\n      String tikaConfigLoc = (String) initArgs.get(CONFIG_LOCATION);\n      if (tikaConfigLoc != null) {\n        File configFile = new File(tikaConfigLoc);\n        if (configFile.isAbsolute() == false) {\n          configFile = new File(core.getResourceLoader().getConfigDir(), configFile.getPath());\n        }\n        try {\n          config = new TikaConfig(configFile);\n        } catch (Exception e) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, e);\n        }\n      } else {\n        config = TikaConfig.getDefaultConfig();\n      }\n      NamedList configDateFormats = (NamedList) initArgs.get(DATE_FORMATS);\n      if (configDateFormats != null && configDateFormats.size() > 0) {\n        dateFormats = new HashSet<String>();\n        Iterator<Map.Entry> it = configDateFormats.iterator();\n        while (it.hasNext()) {\n          String format = (String) it.next().getValue();\n          log.info(\"Adding Date Format: \" + format);\n          dateFormats.add(format);\n        }\n      }\n    } else {\n      config = TikaConfig.getDefaultConfig();\n    }\n    factory = createFactory();\n  }\n\n","bugFix":["868e0ed16bb29556f95c00e989da33ab5c9dfe56","f4886761bee3fd761629164350d8c47d0352f548"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/ExtractingRequestHandler#inform(SolrCore).mjava","pathOld":"solr/contrib/extraction/src/main/java/org/apache/solr/handler/extraction/ExtractingRequestHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    if (initArgs != null) {\n      //if relative,then relative to config dir, otherwise, absolute path\n      String tikaConfigLoc = (String) initArgs.get(CONFIG_LOCATION);\n      if (tikaConfigLoc != null) {\n        File configFile = new File(tikaConfigLoc);\n        if (configFile.isAbsolute() == false) {\n          configFile = new File(core.getResourceLoader().getConfigDir(), configFile.getPath());\n        }\n        try {\n          config = new TikaConfig(configFile);\n        } catch (Exception e) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, e);\n        }\n      }\n      NamedList configDateFormats = (NamedList) initArgs.get(DATE_FORMATS);\n      if (configDateFormats != null && configDateFormats.size() > 0) {\n        dateFormats = new HashSet<String>();\n        Iterator<Map.Entry> it = configDateFormats.iterator();\n        while (it.hasNext()) {\n          String format = (String) it.next().getValue();\n          log.info(\"Adding Date Format: \" + format);\n          dateFormats.add(format);\n        }\n      }\n    }\n    if (config == null) {\n      try {\n        config = getDefaultConfig(core.getResourceLoader().getClassLoader());\n      } catch (MimeTypeException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      } catch (IOException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      }\n    }\n    factory = createFactory();\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    if (initArgs != null) {\n      //if relative,then relative to config dir, otherwise, absolute path\n      String tikaConfigLoc = (String) initArgs.get(CONFIG_LOCATION);\n      if (tikaConfigLoc != null) {\n        File configFile = new File(tikaConfigLoc);\n        if (configFile.isAbsolute() == false) {\n          configFile = new File(core.getResourceLoader().getConfigDir(), configFile.getPath());\n        }\n        try {\n          config = new TikaConfig(configFile);\n        } catch (Exception e) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, e);\n        }\n      }\n      NamedList configDateFormats = (NamedList) initArgs.get(DATE_FORMATS);\n      if (configDateFormats != null && configDateFormats.size() > 0) {\n        dateFormats = new HashSet<String>();\n        Iterator<Map.Entry> it = configDateFormats.iterator();\n        while (it.hasNext()) {\n          String format = (String) it.next().getValue();\n          log.info(\"Adding Date Format: \" + format);\n          dateFormats.add(format);\n        }\n      }\n    }\n    if (config == null) {\n      try {\n        config = getDefaultConfig(core.getResourceLoader().getClassLoader());\n      } catch (MimeTypeException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      } catch (IOException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      }\n    }\n    factory = createFactory();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/ExtractingRequestHandler#inform(SolrCore).mjava","pathOld":"solr/contrib/extraction/src/main/java/org/apache/solr/handler/extraction/ExtractingRequestHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    if (initArgs != null) {\n      //if relative,then relative to config dir, otherwise, absolute path\n      String tikaConfigLoc = (String) initArgs.get(CONFIG_LOCATION);\n      if (tikaConfigLoc != null) {\n        File configFile = new File(tikaConfigLoc);\n        if (configFile.isAbsolute() == false) {\n          configFile = new File(core.getResourceLoader().getConfigDir(), configFile.getPath());\n        }\n        try {\n          config = new TikaConfig(configFile);\n        } catch (Exception e) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, e);\n        }\n      }\n      NamedList configDateFormats = (NamedList) initArgs.get(DATE_FORMATS);\n      if (configDateFormats != null && configDateFormats.size() > 0) {\n        dateFormats = new HashSet<String>();\n        Iterator<Map.Entry> it = configDateFormats.iterator();\n        while (it.hasNext()) {\n          String format = (String) it.next().getValue();\n          log.info(\"Adding Date Format: \" + format);\n          dateFormats.add(format);\n        }\n      }\n    }\n    if (config == null) {\n      try {\n        config = getDefaultConfig(core.getResourceLoader().getClassLoader());\n      } catch (MimeTypeException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      } catch (IOException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      }\n    }\n    factory = createFactory();\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    if (initArgs != null) {\n      //if relative,then relative to config dir, otherwise, absolute path\n      String tikaConfigLoc = (String) initArgs.get(CONFIG_LOCATION);\n      if (tikaConfigLoc != null) {\n        File configFile = new File(tikaConfigLoc);\n        if (configFile.isAbsolute() == false) {\n          configFile = new File(core.getResourceLoader().getConfigDir(), configFile.getPath());\n        }\n        try {\n          config = new TikaConfig(configFile);\n        } catch (Exception e) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, e);\n        }\n      }\n      NamedList configDateFormats = (NamedList) initArgs.get(DATE_FORMATS);\n      if (configDateFormats != null && configDateFormats.size() > 0) {\n        dateFormats = new HashSet<String>();\n        Iterator<Map.Entry> it = configDateFormats.iterator();\n        while (it.hasNext()) {\n          String format = (String) it.next().getValue();\n          log.info(\"Adding Date Format: \" + format);\n          dateFormats.add(format);\n        }\n      }\n    }\n    if (config == null) {\n      try {\n        config = getDefaultConfig(core.getResourceLoader().getClassLoader());\n      } catch (MimeTypeException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      } catch (IOException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      }\n    }\n    factory = createFactory();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["623193e0f05f138bdb5a54e0d149ab4ce4bf51f5","623193e0f05f138bdb5a54e0d149ab4ce4bf51f5"],"c26f00b574427b55127e869b935845554afde1fa":["623193e0f05f138bdb5a54e0d149ab4ce4bf51f5","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"623193e0f05f138bdb5a54e0d149ab4ce4bf51f5":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["623193e0f05f138bdb5a54e0d149ab4ce4bf51f5"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"623193e0f05f138bdb5a54e0d149ab4ce4bf51f5":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}