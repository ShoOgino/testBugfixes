{"path":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#assertHits(Query,float[]).mjava","commits":[{"id":"0ceb5bb30e401cb218b31197b1a9aa47e77cda17","date":1336330521,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#assertHits(Query,float[]).mjava","pathOld":"/dev/null","sourceNew":"  void assertHits(Query q, float scores[]) throws Exception {\n    ScoreDoc expected[] = new ScoreDoc[scores.length];\n    int expectedDocs[] = new int[scores.length];\n    for (int i = 0; i < expected.length; i++) {\n      expectedDocs[i] = i;\n      expected[i] = new ScoreDoc(i, scores[i]);\n    }\n    TopDocs docs = searcher.search(q, documents.size(), \n        new Sort(new SortField(\"id\", SortField.Type.STRING)));\n    CheckHits.checkHits(random(), q, \"\", searcher, expectedDocs);\n    CheckHits.checkHitsQuery(q, expected, docs.scoreDocs, expectedDocs);\n    CheckHits.checkExplanations(q, \"\", searcher);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f8a098eef38bf48cf964fcd89c03e1e741130e9","date":1385973213,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#assertHits(Query,float[]).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#assertHits(Query,float[]).mjava","sourceNew":"  void assertHits(Query q, float scores[]) throws Exception {\n    ScoreDoc expected[] = new ScoreDoc[scores.length];\n    int expectedDocs[] = new int[scores.length];\n    for (int i = 0; i < expected.length; i++) {\n      expectedDocs[i] = i;\n      expected[i] = new ScoreDoc(i, scores[i]);\n    }\n    TopDocs docs = searcher.search(q, null, documents.size(),\n        new Sort(new SortField(\"id\", SortField.Type.STRING)), true, false);\n    CheckHits.checkHits(random(), q, \"\", searcher, expectedDocs);\n    CheckHits.checkHitsQuery(q, expected, docs.scoreDocs, expectedDocs);\n    CheckHits.checkExplanations(q, \"\", searcher);\n  }\n\n","sourceOld":"  void assertHits(Query q, float scores[]) throws Exception {\n    ScoreDoc expected[] = new ScoreDoc[scores.length];\n    int expectedDocs[] = new int[scores.length];\n    for (int i = 0; i < expected.length; i++) {\n      expectedDocs[i] = i;\n      expected[i] = new ScoreDoc(i, scores[i]);\n    }\n    TopDocs docs = searcher.search(q, documents.size(), \n        new Sort(new SortField(\"id\", SortField.Type.STRING)));\n    CheckHits.checkHits(random(), q, \"\", searcher, expectedDocs);\n    CheckHits.checkHitsQuery(q, expected, docs.scoreDocs, expectedDocs);\n    CheckHits.checkExplanations(q, \"\", searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#assertHits(Query,float[]).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#assertHits(Query,float[]).mjava","sourceNew":"  void assertHits(Query q, float scores[]) throws Exception {\n    ScoreDoc expected[] = new ScoreDoc[scores.length];\n    int expectedDocs[] = new int[scores.length];\n    for (int i = 0; i < expected.length; i++) {\n      expectedDocs[i] = i;\n      expected[i] = new ScoreDoc(i, scores[i]);\n    }\n    TopDocs docs = searcher.search(q, null, documents.size(),\n        new Sort(new SortField(\"id\", SortField.Type.STRING)), true, false);\n    CheckHits.checkHits(random(), q, \"\", searcher, expectedDocs);\n    CheckHits.checkHitsQuery(q, expected, docs.scoreDocs, expectedDocs);\n    CheckHits.checkExplanations(q, \"\", searcher);\n  }\n\n","sourceOld":"  void assertHits(Query q, float scores[]) throws Exception {\n    ScoreDoc expected[] = new ScoreDoc[scores.length];\n    int expectedDocs[] = new int[scores.length];\n    for (int i = 0; i < expected.length; i++) {\n      expectedDocs[i] = i;\n      expected[i] = new ScoreDoc(i, scores[i]);\n    }\n    TopDocs docs = searcher.search(q, documents.size(), \n        new Sort(new SortField(\"id\", SortField.Type.STRING)));\n    CheckHits.checkHits(random(), q, \"\", searcher, expectedDocs);\n    CheckHits.checkHitsQuery(q, expected, docs.scoreDocs, expectedDocs);\n    CheckHits.checkExplanations(q, \"\", searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#assertHits(Query,float[]).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#assertHits(Query,float[]).mjava","sourceNew":"  void assertHits(Query q, float scores[]) throws Exception {\n    ScoreDoc expected[] = new ScoreDoc[scores.length];\n    int expectedDocs[] = new int[scores.length];\n    for (int i = 0; i < expected.length; i++) {\n      expectedDocs[i] = i;\n      expected[i] = new ScoreDoc(i, scores[i]);\n    }\n    TopDocs docs = searcher.search(q, documents.size(),\n        new Sort(new SortField(\"id\", SortField.Type.STRING)), true, false);\n    CheckHits.checkHits(random(), q, \"\", searcher, expectedDocs);\n    CheckHits.checkHitsQuery(q, expected, docs.scoreDocs, expectedDocs);\n    CheckHits.checkExplanations(q, \"\", searcher);\n  }\n\n","sourceOld":"  void assertHits(Query q, float scores[]) throws Exception {\n    ScoreDoc expected[] = new ScoreDoc[scores.length];\n    int expectedDocs[] = new int[scores.length];\n    for (int i = 0; i < expected.length; i++) {\n      expectedDocs[i] = i;\n      expected[i] = new ScoreDoc(i, scores[i]);\n    }\n    TopDocs docs = searcher.search(q, null, documents.size(),\n        new Sort(new SortField(\"id\", SortField.Type.STRING)), true, false);\n    CheckHits.checkHits(random(), q, \"\", searcher, expectedDocs);\n    CheckHits.checkHitsQuery(q, expected, docs.scoreDocs, expectedDocs);\n    CheckHits.checkExplanations(q, \"\", searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81fff83bdb893c1471efd78f6a9a3ce4f98120b9","date":1531895937,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#assertHits(Query,float[]).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#assertHits(Query,float[]).mjava","sourceNew":"  void assertHits(Query q, float scores[]) throws Exception {\n    ScoreDoc expected[] = new ScoreDoc[scores.length];\n    int expectedDocs[] = new int[scores.length];\n    for (int i = 0; i < expected.length; i++) {\n      expectedDocs[i] = i;\n      expected[i] = new ScoreDoc(i, scores[i]);\n    }\n    TopDocs docs = searcher.search(q, documents.size(),\n        new Sort(new SortField(\"id\", SortField.Type.STRING)), true);\n    CheckHits.checkHits(random(), q, \"\", searcher, expectedDocs);\n    CheckHits.checkHitsQuery(q, expected, docs.scoreDocs, expectedDocs);\n    CheckHits.checkExplanations(q, \"\", searcher);\n  }\n\n","sourceOld":"  void assertHits(Query q, float scores[]) throws Exception {\n    ScoreDoc expected[] = new ScoreDoc[scores.length];\n    int expectedDocs[] = new int[scores.length];\n    for (int i = 0; i < expected.length; i++) {\n      expectedDocs[i] = i;\n      expected[i] = new ScoreDoc(i, scores[i]);\n    }\n    TopDocs docs = searcher.search(q, documents.size(),\n        new Sort(new SortField(\"id\", SortField.Type.STRING)), true, false);\n    CheckHits.checkHits(random(), q, \"\", searcher, expectedDocs);\n    CheckHits.checkHitsQuery(q, expected, docs.scoreDocs, expectedDocs);\n    CheckHits.checkExplanations(q, \"\", searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#assertHits(Query,float[]).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#assertHits(Query,float[]).mjava","sourceNew":"  void assertHits(Query q, float scores[]) throws Exception {\n    ScoreDoc expected[] = new ScoreDoc[scores.length];\n    int expectedDocs[] = new int[scores.length];\n    for (int i = 0; i < expected.length; i++) {\n      expectedDocs[i] = i;\n      expected[i] = new ScoreDoc(i, scores[i]);\n    }\n    TopDocs docs = searcher.search(q, documents.size(),\n        new Sort(new SortField(\"id\", SortField.Type.STRING)), true);\n    CheckHits.checkHits(random(), q, \"\", searcher, expectedDocs);\n    CheckHits.checkHitsQuery(q, expected, docs.scoreDocs, expectedDocs);\n    CheckHits.checkExplanations(q, \"\", searcher);\n  }\n\n","sourceOld":"  void assertHits(Query q, float scores[]) throws Exception {\n    ScoreDoc expected[] = new ScoreDoc[scores.length];\n    int expectedDocs[] = new int[scores.length];\n    for (int i = 0; i < expected.length; i++) {\n      expectedDocs[i] = i;\n      expected[i] = new ScoreDoc(i, scores[i]);\n    }\n    TopDocs docs = searcher.search(q, documents.size(),\n        new Sort(new SortField(\"id\", SortField.Type.STRING)), true, false);\n    CheckHits.checkHits(random(), q, \"\", searcher, expectedDocs);\n    CheckHits.checkHitsQuery(q, expected, docs.scoreDocs, expectedDocs);\n    CheckHits.checkExplanations(q, \"\", searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2f8a098eef38bf48cf964fcd89c03e1e741130e9":["0ceb5bb30e401cb218b31197b1a9aa47e77cda17"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"0ceb5bb30e401cb218b31197b1a9aa47e77cda17":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["2f8a098eef38bf48cf964fcd89c03e1e741130e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["0ceb5bb30e401cb218b31197b1a9aa47e77cda17","2f8a098eef38bf48cf964fcd89c03e1e741130e9"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["81fff83bdb893c1471efd78f6a9a3ce4f98120b9"]},"commit2Childs":{"2f8a098eef38bf48cf964fcd89c03e1e741130e9":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"0ceb5bb30e401cb218b31197b1a9aa47e77cda17":["2f8a098eef38bf48cf964fcd89c03e1e741130e9","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ceb5bb30e401cb218b31197b1a9aa47e77cda17"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}