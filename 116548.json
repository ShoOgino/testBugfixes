{"path":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#toString().mjava","commits":[{"id":"50e7972fe4865715af8951d4ba15555e3426fc5d","date":1115024647,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#toString().mjava","pathOld":"/dev/null","sourceNew":"\t/** Returns a String representation of the index data for debugging purposes. */\n\tpublic String toString() {\n\t\tStringBuffer result = new StringBuffer(256);\t\t\n\t\tsortFields();\t\t\n\t\tint sumChars = 0;\n\t\tint sumPositions = 0;\n\t\tint sumTerms = 0;\n\t\t\n\t\tfor (int i=0; i < sortedFields.length; i++) {\n\t\t\tMap.Entry entry = sortedFields[i];\n\t\t\tString fieldName = (String) entry.getKey();\n\t\t\tInfo info = (Info) entry.getValue();\n\t\t\tinfo.sortTerms();\n\t\t\tresult.append(fieldName + \":\\n\");\n\t\t\t\n\t\t\tint numChars = 0;\n\t\t\tint numPositions = 0;\n\t\t\tfor (int j=0; j < info.sortedTerms.length; j++) {\n\t\t\t\tMap.Entry e = info.sortedTerms[j];\n\t\t\t\tString term = (String) e.getKey();\n\t\t\t\tArrayIntList positions = (ArrayIntList) e.getValue();\n\t\t\t\tresult.append(\"\\t'\" + term + \"':\" + numPositions(positions) + \":\");\n\t\t\t\tresult.append(positions.toString(stride)); // ignore offsets\n\t\t\t\tresult.append(\"\\n\");\n\t\t\t\tnumPositions += numPositions(positions);\n\t\t\t\tnumChars += term.length();\n\t\t\t}\n\t\t\t\n\t\t\tresult.append(\"\\tterms=\" + info.sortedTerms.length);\n\t\t\tresult.append(\", positions=\" + numPositions);\n\t\t\tresult.append(\", Kchars=\" + (numChars/1000.0f));\n\t\t\tresult.append(\"\\n\");\n\t\t\tsumPositions += numPositions;\n\t\t\tsumChars += numChars;\n\t\t\tsumTerms += info.sortedTerms.length;\n\t\t}\n\t\t\n\t\tresult.append(\"\\nfields=\" + sortedFields.length);\n\t\tresult.append(\", terms=\" + sumTerms);\n\t\tresult.append(\", positions=\" + sumPositions);\n\t\tresult.append(\", Kchars=\" + (sumChars/1000.0f));\n\t\treturn result.toString();\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8f14489323057ef6de92ba5ea2d0cfe6e34755f","date":1120167605,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#toString().mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#toString().mjava","sourceNew":"\t/** Returns a String representation of the index data for debugging purposes. */\r\n\tpublic String toString() {\r\n\t\tStringBuffer result = new StringBuffer(256);\t\t\r\n\t\tsortFields();\t\t\r\n\t\tint sumChars = 0;\r\n\t\tint sumPositions = 0;\r\n\t\tint sumTerms = 0;\r\n\t\t\r\n\t\tfor (int i=0; i < sortedFields.length; i++) {\r\n\t\t\tMap.Entry entry = sortedFields[i];\r\n\t\t\tString fieldName = (String) entry.getKey();\r\n\t\t\tInfo info = (Info) entry.getValue();\r\n\t\t\tinfo.sortTerms();\r\n\t\t\tresult.append(fieldName + \":\\n\");\r\n\t\t\t\r\n\t\t\tint numChars = 0;\r\n\t\t\tint numPositions = 0;\r\n\t\t\tfor (int j=0; j < info.sortedTerms.length; j++) {\r\n\t\t\t\tMap.Entry e = info.sortedTerms[j];\r\n\t\t\t\tString term = (String) e.getKey();\r\n\t\t\t\tArrayIntList positions = (ArrayIntList) e.getValue();\r\n\t\t\t\tresult.append(\"\\t'\" + term + \"':\" + numPositions(positions) + \":\");\r\n\t\t\t\tresult.append(positions.toString(stride)); // ignore offsets\r\n\t\t\t\tresult.append(\"\\n\");\r\n\t\t\t\tnumPositions += numPositions(positions);\r\n\t\t\t\tnumChars += term.length();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tresult.append(\"\\tterms=\" + info.sortedTerms.length);\r\n\t\t\tresult.append(\", positions=\" + numPositions);\r\n\t\t\tresult.append(\", Kchars=\" + (numChars/1000.0f));\r\n\t\t\tresult.append(\"\\n\");\r\n\t\t\tsumPositions += numPositions;\r\n\t\t\tsumChars += numChars;\r\n\t\t\tsumTerms += info.sortedTerms.length;\r\n\t\t}\r\n\t\t\r\n\t\tresult.append(\"\\nfields=\" + sortedFields.length);\r\n\t\tresult.append(\", terms=\" + sumTerms);\r\n\t\tresult.append(\", positions=\" + sumPositions);\r\n\t\tresult.append(\", Kchars=\" + (sumChars/1000.0f));\r\n\t\treturn result.toString();\r\n\t}\r\n\n","sourceOld":"\t/** Returns a String representation of the index data for debugging purposes. */\n\tpublic String toString() {\n\t\tStringBuffer result = new StringBuffer(256);\t\t\n\t\tsortFields();\t\t\n\t\tint sumChars = 0;\n\t\tint sumPositions = 0;\n\t\tint sumTerms = 0;\n\t\t\n\t\tfor (int i=0; i < sortedFields.length; i++) {\n\t\t\tMap.Entry entry = sortedFields[i];\n\t\t\tString fieldName = (String) entry.getKey();\n\t\t\tInfo info = (Info) entry.getValue();\n\t\t\tinfo.sortTerms();\n\t\t\tresult.append(fieldName + \":\\n\");\n\t\t\t\n\t\t\tint numChars = 0;\n\t\t\tint numPositions = 0;\n\t\t\tfor (int j=0; j < info.sortedTerms.length; j++) {\n\t\t\t\tMap.Entry e = info.sortedTerms[j];\n\t\t\t\tString term = (String) e.getKey();\n\t\t\t\tArrayIntList positions = (ArrayIntList) e.getValue();\n\t\t\t\tresult.append(\"\\t'\" + term + \"':\" + numPositions(positions) + \":\");\n\t\t\t\tresult.append(positions.toString(stride)); // ignore offsets\n\t\t\t\tresult.append(\"\\n\");\n\t\t\t\tnumPositions += numPositions(positions);\n\t\t\t\tnumChars += term.length();\n\t\t\t}\n\t\t\t\n\t\t\tresult.append(\"\\tterms=\" + info.sortedTerms.length);\n\t\t\tresult.append(\", positions=\" + numPositions);\n\t\t\tresult.append(\", Kchars=\" + (numChars/1000.0f));\n\t\t\tresult.append(\"\\n\");\n\t\t\tsumPositions += numPositions;\n\t\t\tsumChars += numChars;\n\t\t\tsumTerms += info.sortedTerms.length;\n\t\t}\n\t\t\n\t\tresult.append(\"\\nfields=\" + sortedFields.length);\n\t\tresult.append(\", terms=\" + sumTerms);\n\t\tresult.append(\", positions=\" + sumPositions);\n\t\tresult.append(\", Kchars=\" + (sumChars/1000.0f));\n\t\treturn result.toString();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35dd40ede4dd66fa47506858c4a073d295c5a76e","date":1133587328,"type":4,"author":"Wolfgang Hoschek","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#toString().mjava","sourceNew":null,"sourceOld":"\t/** Returns a String representation of the index data for debugging purposes. */\r\n\tpublic String toString() {\r\n\t\tStringBuffer result = new StringBuffer(256);\t\t\r\n\t\tsortFields();\t\t\r\n\t\tint sumChars = 0;\r\n\t\tint sumPositions = 0;\r\n\t\tint sumTerms = 0;\r\n\t\t\r\n\t\tfor (int i=0; i < sortedFields.length; i++) {\r\n\t\t\tMap.Entry entry = sortedFields[i];\r\n\t\t\tString fieldName = (String) entry.getKey();\r\n\t\t\tInfo info = (Info) entry.getValue();\r\n\t\t\tinfo.sortTerms();\r\n\t\t\tresult.append(fieldName + \":\\n\");\r\n\t\t\t\r\n\t\t\tint numChars = 0;\r\n\t\t\tint numPositions = 0;\r\n\t\t\tfor (int j=0; j < info.sortedTerms.length; j++) {\r\n\t\t\t\tMap.Entry e = info.sortedTerms[j];\r\n\t\t\t\tString term = (String) e.getKey();\r\n\t\t\t\tArrayIntList positions = (ArrayIntList) e.getValue();\r\n\t\t\t\tresult.append(\"\\t'\" + term + \"':\" + numPositions(positions) + \":\");\r\n\t\t\t\tresult.append(positions.toString(stride)); // ignore offsets\r\n\t\t\t\tresult.append(\"\\n\");\r\n\t\t\t\tnumPositions += numPositions(positions);\r\n\t\t\t\tnumChars += term.length();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tresult.append(\"\\tterms=\" + info.sortedTerms.length);\r\n\t\t\tresult.append(\", positions=\" + numPositions);\r\n\t\t\tresult.append(\", Kchars=\" + (numChars/1000.0f));\r\n\t\t\tresult.append(\"\\n\");\r\n\t\t\tsumPositions += numPositions;\r\n\t\t\tsumChars += numChars;\r\n\t\t\tsumTerms += info.sortedTerms.length;\r\n\t\t}\r\n\t\t\r\n\t\tresult.append(\"\\nfields=\" + sortedFields.length);\r\n\t\tresult.append(\", terms=\" + sumTerms);\r\n\t\tresult.append(\", positions=\" + sumPositions);\r\n\t\tresult.append(\", Kchars=\" + (sumChars/1000.0f));\r\n\t\treturn result.toString();\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a93e1e4a21be8ebb98e53e6933412a363931faa1","date":1133587471,"type":0,"author":"Wolfgang Hoschek","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#toString().mjava","pathOld":"/dev/null","sourceNew":"\t/** Returns a String representation of the index data for debugging purposes. */\n\tpublic String toString() {\n\t\tStringBuffer result = new StringBuffer(256);\t\t\n\t\tsortFields();\t\t\n\t\tint sumChars = 0;\n\t\tint sumPositions = 0;\n\t\tint sumTerms = 0;\n\t\t\n\t\tfor (int i=0; i < sortedFields.length; i++) {\n\t\t\tMap.Entry entry = sortedFields[i];\n\t\t\tString fieldName = (String) entry.getKey();\n\t\t\tInfo info = (Info) entry.getValue();\n\t\t\tinfo.sortTerms();\n\t\t\tresult.append(fieldName + \":\\n\");\n\t\t\t\n\t\t\tint numChars = 0;\n\t\t\tint numPositions = 0;\n\t\t\tfor (int j=0; j < info.sortedTerms.length; j++) {\n\t\t\t\tMap.Entry e = info.sortedTerms[j];\n\t\t\t\tString term = (String) e.getKey();\n\t\t\t\tArrayIntList positions = (ArrayIntList) e.getValue();\n\t\t\t\tresult.append(\"\\t'\" + term + \"':\" + numPositions(positions) + \":\");\n\t\t\t\tresult.append(positions.toString(stride)); // ignore offsets\n\t\t\t\tresult.append(\"\\n\");\n\t\t\t\tnumPositions += numPositions(positions);\n\t\t\t\tnumChars += term.length();\n\t\t\t}\n\t\t\t\n\t\t\tresult.append(\"\\tterms=\" + info.sortedTerms.length);\n\t\t\tresult.append(\", positions=\" + numPositions);\n\t\t\tresult.append(\", Kchars=\" + (numChars/1000.0f));\n\t\t\tresult.append(\"\\n\");\n\t\t\tsumPositions += numPositions;\n\t\t\tsumChars += numChars;\n\t\t\tsumTerms += info.sortedTerms.length;\n\t\t}\n\t\t\n\t\tresult.append(\"\\nfields=\" + sortedFields.length);\n\t\tresult.append(\", terms=\" + sumTerms);\n\t\tresult.append(\", positions=\" + sumPositions);\n\t\tresult.append(\", Kchars=\" + (sumChars/1000.0f));\n\t\treturn result.toString();\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b08308242cb802f3a154e260d3881c2ed523c52b","date":1133766662,"type":3,"author":"Wolfgang Hoschek","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#toString().mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#toString().mjava","sourceNew":"\t/**\n\t * Returns a String representation of the index data for debugging purposes.\n\t * \n\t * @return the string representation\n\t */\n\tpublic String toString() {\n\t\tStringBuffer result = new StringBuffer(256);\t\t\n\t\tsortFields();\t\t\n\t\tint sumChars = 0;\n\t\tint sumPositions = 0;\n\t\tint sumTerms = 0;\n\t\t\n\t\tfor (int i=0; i < sortedFields.length; i++) {\n\t\t\tMap.Entry entry = sortedFields[i];\n\t\t\tString fieldName = (String) entry.getKey();\n\t\t\tInfo info = (Info) entry.getValue();\n\t\t\tinfo.sortTerms();\n\t\t\tresult.append(fieldName + \":\\n\");\n\t\t\t\n\t\t\tint numChars = 0;\n\t\t\tint numPositions = 0;\n\t\t\tfor (int j=0; j < info.sortedTerms.length; j++) {\n\t\t\t\tMap.Entry e = info.sortedTerms[j];\n\t\t\t\tString term = (String) e.getKey();\n\t\t\t\tArrayIntList positions = (ArrayIntList) e.getValue();\n\t\t\t\tresult.append(\"\\t'\" + term + \"':\" + numPositions(positions) + \":\");\n\t\t\t\tresult.append(positions.toString(stride)); // ignore offsets\n\t\t\t\tresult.append(\"\\n\");\n\t\t\t\tnumPositions += numPositions(positions);\n\t\t\t\tnumChars += term.length();\n\t\t\t}\n\t\t\t\n\t\t\tresult.append(\"\\tterms=\" + info.sortedTerms.length);\n\t\t\tresult.append(\", positions=\" + numPositions);\n\t\t\tresult.append(\", Kchars=\" + (numChars/1000.0f));\n\t\t\tresult.append(\"\\n\");\n\t\t\tsumPositions += numPositions;\n\t\t\tsumChars += numChars;\n\t\t\tsumTerms += info.sortedTerms.length;\n\t\t}\n\t\t\n\t\tresult.append(\"\\nfields=\" + sortedFields.length);\n\t\tresult.append(\", terms=\" + sumTerms);\n\t\tresult.append(\", positions=\" + sumPositions);\n\t\tresult.append(\", Kchars=\" + (sumChars/1000.0f));\n\t\treturn result.toString();\n\t}\n\n","sourceOld":"\t/** Returns a String representation of the index data for debugging purposes. */\n\tpublic String toString() {\n\t\tStringBuffer result = new StringBuffer(256);\t\t\n\t\tsortFields();\t\t\n\t\tint sumChars = 0;\n\t\tint sumPositions = 0;\n\t\tint sumTerms = 0;\n\t\t\n\t\tfor (int i=0; i < sortedFields.length; i++) {\n\t\t\tMap.Entry entry = sortedFields[i];\n\t\t\tString fieldName = (String) entry.getKey();\n\t\t\tInfo info = (Info) entry.getValue();\n\t\t\tinfo.sortTerms();\n\t\t\tresult.append(fieldName + \":\\n\");\n\t\t\t\n\t\t\tint numChars = 0;\n\t\t\tint numPositions = 0;\n\t\t\tfor (int j=0; j < info.sortedTerms.length; j++) {\n\t\t\t\tMap.Entry e = info.sortedTerms[j];\n\t\t\t\tString term = (String) e.getKey();\n\t\t\t\tArrayIntList positions = (ArrayIntList) e.getValue();\n\t\t\t\tresult.append(\"\\t'\" + term + \"':\" + numPositions(positions) + \":\");\n\t\t\t\tresult.append(positions.toString(stride)); // ignore offsets\n\t\t\t\tresult.append(\"\\n\");\n\t\t\t\tnumPositions += numPositions(positions);\n\t\t\t\tnumChars += term.length();\n\t\t\t}\n\t\t\t\n\t\t\tresult.append(\"\\tterms=\" + info.sortedTerms.length);\n\t\t\tresult.append(\", positions=\" + numPositions);\n\t\t\tresult.append(\", Kchars=\" + (numChars/1000.0f));\n\t\t\tresult.append(\"\\n\");\n\t\t\tsumPositions += numPositions;\n\t\t\tsumChars += numChars;\n\t\t\tsumTerms += info.sortedTerms.length;\n\t\t}\n\t\t\n\t\tresult.append(\"\\nfields=\" + sortedFields.length);\n\t\tresult.append(\", terms=\" + sumTerms);\n\t\tresult.append(\", positions=\" + sumPositions);\n\t\tresult.append(\", Kchars=\" + (sumChars/1000.0f));\n\t\treturn result.toString();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f68e24227d5556d33ee6d586fd9010cd9ff8bec","date":1150091176,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#toString().mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#toString().mjava","sourceNew":"  /**\n   * Returns a String representation of the index data for debugging purposes.\n   * \n   * @return the string representation\n   */\n  public String toString() {\n    StringBuffer result = new StringBuffer(256);    \n    sortFields();   \n    int sumChars = 0;\n    int sumPositions = 0;\n    int sumTerms = 0;\n    \n    for (int i=0; i < sortedFields.length; i++) {\n      Map.Entry entry = sortedFields[i];\n      String fieldName = (String) entry.getKey();\n      Info info = (Info) entry.getValue();\n      info.sortTerms();\n      result.append(fieldName + \":\\n\");\n      \n      int numChars = 0;\n      int numPositions = 0;\n      for (int j=0; j < info.sortedTerms.length; j++) {\n        Map.Entry e = info.sortedTerms[j];\n        String term = (String) e.getKey();\n        ArrayIntList positions = (ArrayIntList) e.getValue();\n        result.append(\"\\t'\" + term + \"':\" + numPositions(positions) + \":\");\n        result.append(positions.toString(stride)); // ignore offsets\n        result.append(\"\\n\");\n        numPositions += numPositions(positions);\n        numChars += term.length();\n      }\n      \n      result.append(\"\\tterms=\" + info.sortedTerms.length);\n      result.append(\", positions=\" + numPositions);\n      result.append(\", Kchars=\" + (numChars/1000.0f));\n      result.append(\"\\n\");\n      sumPositions += numPositions;\n      sumChars += numChars;\n      sumTerms += info.sortedTerms.length;\n    }\n    \n    result.append(\"\\nfields=\" + sortedFields.length);\n    result.append(\", terms=\" + sumTerms);\n    result.append(\", positions=\" + sumPositions);\n    result.append(\", Kchars=\" + (sumChars/1000.0f));\n    return result.toString();\n  }\n\n","sourceOld":"\t/**\n\t * Returns a String representation of the index data for debugging purposes.\n\t * \n\t * @return the string representation\n\t */\n\tpublic String toString() {\n\t\tStringBuffer result = new StringBuffer(256);\t\t\n\t\tsortFields();\t\t\n\t\tint sumChars = 0;\n\t\tint sumPositions = 0;\n\t\tint sumTerms = 0;\n\t\t\n\t\tfor (int i=0; i < sortedFields.length; i++) {\n\t\t\tMap.Entry entry = sortedFields[i];\n\t\t\tString fieldName = (String) entry.getKey();\n\t\t\tInfo info = (Info) entry.getValue();\n\t\t\tinfo.sortTerms();\n\t\t\tresult.append(fieldName + \":\\n\");\n\t\t\t\n\t\t\tint numChars = 0;\n\t\t\tint numPositions = 0;\n\t\t\tfor (int j=0; j < info.sortedTerms.length; j++) {\n\t\t\t\tMap.Entry e = info.sortedTerms[j];\n\t\t\t\tString term = (String) e.getKey();\n\t\t\t\tArrayIntList positions = (ArrayIntList) e.getValue();\n\t\t\t\tresult.append(\"\\t'\" + term + \"':\" + numPositions(positions) + \":\");\n\t\t\t\tresult.append(positions.toString(stride)); // ignore offsets\n\t\t\t\tresult.append(\"\\n\");\n\t\t\t\tnumPositions += numPositions(positions);\n\t\t\t\tnumChars += term.length();\n\t\t\t}\n\t\t\t\n\t\t\tresult.append(\"\\tterms=\" + info.sortedTerms.length);\n\t\t\tresult.append(\", positions=\" + numPositions);\n\t\t\tresult.append(\", Kchars=\" + (numChars/1000.0f));\n\t\t\tresult.append(\"\\n\");\n\t\t\tsumPositions += numPositions;\n\t\t\tsumChars += numChars;\n\t\t\tsumTerms += info.sortedTerms.length;\n\t\t}\n\t\t\n\t\tresult.append(\"\\nfields=\" + sortedFields.length);\n\t\tresult.append(\", terms=\" + sumTerms);\n\t\tresult.append(\", positions=\" + sumPositions);\n\t\tresult.append(\", Kchars=\" + (sumChars/1000.0f));\n\t\treturn result.toString();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c","date":1254521470,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#toString().mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#toString().mjava","sourceNew":"  /**\n   * Returns a String representation of the index data for debugging purposes.\n   * \n   * @return the string representation\n   */\n  public String toString() {\n    StringBuilder result = new StringBuilder(256);    \n    sortFields();   \n    int sumChars = 0;\n    int sumPositions = 0;\n    int sumTerms = 0;\n    \n    for (int i=0; i < sortedFields.length; i++) {\n      Map.Entry entry = sortedFields[i];\n      String fieldName = (String) entry.getKey();\n      Info info = (Info) entry.getValue();\n      info.sortTerms();\n      result.append(fieldName + \":\\n\");\n      \n      int numChars = 0;\n      int numPositions = 0;\n      for (int j=0; j < info.sortedTerms.length; j++) {\n        Map.Entry e = info.sortedTerms[j];\n        String term = (String) e.getKey();\n        ArrayIntList positions = (ArrayIntList) e.getValue();\n        result.append(\"\\t'\" + term + \"':\" + numPositions(positions) + \":\");\n        result.append(positions.toString(stride)); // ignore offsets\n        result.append(\"\\n\");\n        numPositions += numPositions(positions);\n        numChars += term.length();\n      }\n      \n      result.append(\"\\tterms=\" + info.sortedTerms.length);\n      result.append(\", positions=\" + numPositions);\n      result.append(\", Kchars=\" + (numChars/1000.0f));\n      result.append(\"\\n\");\n      sumPositions += numPositions;\n      sumChars += numChars;\n      sumTerms += info.sortedTerms.length;\n    }\n    \n    result.append(\"\\nfields=\" + sortedFields.length);\n    result.append(\", terms=\" + sumTerms);\n    result.append(\", positions=\" + sumPositions);\n    result.append(\", Kchars=\" + (sumChars/1000.0f));\n    return result.toString();\n  }\n\n","sourceOld":"  /**\n   * Returns a String representation of the index data for debugging purposes.\n   * \n   * @return the string representation\n   */\n  public String toString() {\n    StringBuffer result = new StringBuffer(256);    \n    sortFields();   \n    int sumChars = 0;\n    int sumPositions = 0;\n    int sumTerms = 0;\n    \n    for (int i=0; i < sortedFields.length; i++) {\n      Map.Entry entry = sortedFields[i];\n      String fieldName = (String) entry.getKey();\n      Info info = (Info) entry.getValue();\n      info.sortTerms();\n      result.append(fieldName + \":\\n\");\n      \n      int numChars = 0;\n      int numPositions = 0;\n      for (int j=0; j < info.sortedTerms.length; j++) {\n        Map.Entry e = info.sortedTerms[j];\n        String term = (String) e.getKey();\n        ArrayIntList positions = (ArrayIntList) e.getValue();\n        result.append(\"\\t'\" + term + \"':\" + numPositions(positions) + \":\");\n        result.append(positions.toString(stride)); // ignore offsets\n        result.append(\"\\n\");\n        numPositions += numPositions(positions);\n        numChars += term.length();\n      }\n      \n      result.append(\"\\tterms=\" + info.sortedTerms.length);\n      result.append(\", positions=\" + numPositions);\n      result.append(\", Kchars=\" + (numChars/1000.0f));\n      result.append(\"\\n\");\n      sumPositions += numPositions;\n      sumChars += numChars;\n      sumTerms += info.sortedTerms.length;\n    }\n    \n    result.append(\"\\nfields=\" + sortedFields.length);\n    result.append(\", terms=\" + sumTerms);\n    result.append(\", positions=\" + sumPositions);\n    result.append(\", Kchars=\" + (sumChars/1000.0f));\n    return result.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f11899016a0460a7ea2e4b008d002e1e75c7d867","date":1256772085,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#toString().mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#toString().mjava","sourceNew":"  /**\n   * Returns a String representation of the index data for debugging purposes.\n   * \n   * @return the string representation\n   */\n  public String toString() {\n    StringBuilder result = new StringBuilder(256);    \n    sortFields();   \n    int sumChars = 0;\n    int sumPositions = 0;\n    int sumTerms = 0;\n    \n    for (int i=0; i < sortedFields.length; i++) {\n      Map.Entry<String,Info> entry = sortedFields[i];\n      String fieldName = entry.getKey();\n      Info info = entry.getValue();\n      info.sortTerms();\n      result.append(fieldName + \":\\n\");\n      \n      int numChars = 0;\n      int numPositions = 0;\n      for (int j=0; j < info.sortedTerms.length; j++) {\n        Map.Entry<String,ArrayIntList> e = info.sortedTerms[j];\n        String term = e.getKey();\n        ArrayIntList positions = e.getValue();\n        result.append(\"\\t'\" + term + \"':\" + numPositions(positions) + \":\");\n        result.append(positions.toString(stride)); // ignore offsets\n        result.append(\"\\n\");\n        numPositions += numPositions(positions);\n        numChars += term.length();\n      }\n      \n      result.append(\"\\tterms=\" + info.sortedTerms.length);\n      result.append(\", positions=\" + numPositions);\n      result.append(\", Kchars=\" + (numChars/1000.0f));\n      result.append(\"\\n\");\n      sumPositions += numPositions;\n      sumChars += numChars;\n      sumTerms += info.sortedTerms.length;\n    }\n    \n    result.append(\"\\nfields=\" + sortedFields.length);\n    result.append(\", terms=\" + sumTerms);\n    result.append(\", positions=\" + sumPositions);\n    result.append(\", Kchars=\" + (sumChars/1000.0f));\n    return result.toString();\n  }\n\n","sourceOld":"  /**\n   * Returns a String representation of the index data for debugging purposes.\n   * \n   * @return the string representation\n   */\n  public String toString() {\n    StringBuilder result = new StringBuilder(256);    \n    sortFields();   \n    int sumChars = 0;\n    int sumPositions = 0;\n    int sumTerms = 0;\n    \n    for (int i=0; i < sortedFields.length; i++) {\n      Map.Entry entry = sortedFields[i];\n      String fieldName = (String) entry.getKey();\n      Info info = (Info) entry.getValue();\n      info.sortTerms();\n      result.append(fieldName + \":\\n\");\n      \n      int numChars = 0;\n      int numPositions = 0;\n      for (int j=0; j < info.sortedTerms.length; j++) {\n        Map.Entry e = info.sortedTerms[j];\n        String term = (String) e.getKey();\n        ArrayIntList positions = (ArrayIntList) e.getValue();\n        result.append(\"\\t'\" + term + \"':\" + numPositions(positions) + \":\");\n        result.append(positions.toString(stride)); // ignore offsets\n        result.append(\"\\n\");\n        numPositions += numPositions(positions);\n        numChars += term.length();\n      }\n      \n      result.append(\"\\tterms=\" + info.sortedTerms.length);\n      result.append(\", positions=\" + numPositions);\n      result.append(\", Kchars=\" + (numChars/1000.0f));\n      result.append(\"\\n\");\n      sumPositions += numPositions;\n      sumChars += numChars;\n      sumTerms += info.sortedTerms.length;\n    }\n    \n    result.append(\"\\nfields=\" + sortedFields.length);\n    result.append(\", terms=\" + sumTerms);\n    result.append(\", positions=\" + sumPositions);\n    result.append(\", Kchars=\" + (sumChars/1000.0f));\n    return result.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#toString().mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#toString().mjava","sourceNew":"  /**\n   * Returns a String representation of the index data for debugging purposes.\n   * \n   * @return the string representation\n   */\n  @Override\n  public String toString() {\n    StringBuilder result = new StringBuilder(256);    \n    sortFields();   \n    int sumChars = 0;\n    int sumPositions = 0;\n    int sumTerms = 0;\n    \n    for (int i=0; i < sortedFields.length; i++) {\n      Map.Entry<String,Info> entry = sortedFields[i];\n      String fieldName = entry.getKey();\n      Info info = entry.getValue();\n      info.sortTerms();\n      result.append(fieldName + \":\\n\");\n      \n      int numChars = 0;\n      int numPositions = 0;\n      for (int j=0; j < info.sortedTerms.length; j++) {\n        Map.Entry<String,ArrayIntList> e = info.sortedTerms[j];\n        String term = e.getKey();\n        ArrayIntList positions = e.getValue();\n        result.append(\"\\t'\" + term + \"':\" + numPositions(positions) + \":\");\n        result.append(positions.toString(stride)); // ignore offsets\n        result.append(\"\\n\");\n        numPositions += numPositions(positions);\n        numChars += term.length();\n      }\n      \n      result.append(\"\\tterms=\" + info.sortedTerms.length);\n      result.append(\", positions=\" + numPositions);\n      result.append(\", Kchars=\" + (numChars/1000.0f));\n      result.append(\"\\n\");\n      sumPositions += numPositions;\n      sumChars += numChars;\n      sumTerms += info.sortedTerms.length;\n    }\n    \n    result.append(\"\\nfields=\" + sortedFields.length);\n    result.append(\", terms=\" + sumTerms);\n    result.append(\", positions=\" + sumPositions);\n    result.append(\", Kchars=\" + (sumChars/1000.0f));\n    return result.toString();\n  }\n\n","sourceOld":"  /**\n   * Returns a String representation of the index data for debugging purposes.\n   * \n   * @return the string representation\n   */\n  public String toString() {\n    StringBuilder result = new StringBuilder(256);    \n    sortFields();   \n    int sumChars = 0;\n    int sumPositions = 0;\n    int sumTerms = 0;\n    \n    for (int i=0; i < sortedFields.length; i++) {\n      Map.Entry<String,Info> entry = sortedFields[i];\n      String fieldName = entry.getKey();\n      Info info = entry.getValue();\n      info.sortTerms();\n      result.append(fieldName + \":\\n\");\n      \n      int numChars = 0;\n      int numPositions = 0;\n      for (int j=0; j < info.sortedTerms.length; j++) {\n        Map.Entry<String,ArrayIntList> e = info.sortedTerms[j];\n        String term = e.getKey();\n        ArrayIntList positions = e.getValue();\n        result.append(\"\\t'\" + term + \"':\" + numPositions(positions) + \":\");\n        result.append(positions.toString(stride)); // ignore offsets\n        result.append(\"\\n\");\n        numPositions += numPositions(positions);\n        numChars += term.length();\n      }\n      \n      result.append(\"\\tterms=\" + info.sortedTerms.length);\n      result.append(\", positions=\" + numPositions);\n      result.append(\", Kchars=\" + (numChars/1000.0f));\n      result.append(\"\\n\");\n      sumPositions += numPositions;\n      sumChars += numChars;\n      sumTerms += info.sortedTerms.length;\n    }\n    \n    result.append(\"\\nfields=\" + sortedFields.length);\n    result.append(\", terms=\" + sumTerms);\n    result.append(\", positions=\" + sumPositions);\n    result.append(\", Kchars=\" + (sumChars/1000.0f));\n    return result.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#toString().mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#toString().mjava","sourceNew":"  /**\n   * Returns a String representation of the index data for debugging purposes.\n   * \n   * @return the string representation\n   */\n  @Override\n  public String toString() {\n    StringBuilder result = new StringBuilder(256);    \n    sortFields();   \n    int sumChars = 0;\n    int sumPositions = 0;\n    int sumTerms = 0;\n    \n    for (int i=0; i < sortedFields.length; i++) {\n      Map.Entry<String,Info> entry = sortedFields[i];\n      String fieldName = entry.getKey();\n      Info info = entry.getValue();\n      info.sortTerms();\n      result.append(fieldName + \":\\n\");\n      \n      int numChars = 0;\n      int numPositions = 0;\n      for (int j=0; j < info.sortedTerms.length; j++) {\n        Map.Entry<String,ArrayIntList> e = info.sortedTerms[j];\n        String term = e.getKey();\n        ArrayIntList positions = e.getValue();\n        result.append(\"\\t'\" + term + \"':\" + numPositions(positions) + \":\");\n        result.append(positions.toString(stride)); // ignore offsets\n        result.append(\"\\n\");\n        numPositions += numPositions(positions);\n        numChars += term.length();\n      }\n      \n      result.append(\"\\tterms=\" + info.sortedTerms.length);\n      result.append(\", positions=\" + numPositions);\n      result.append(\", Kchars=\" + (numChars/1000.0f));\n      result.append(\"\\n\");\n      sumPositions += numPositions;\n      sumChars += numChars;\n      sumTerms += info.sortedTerms.length;\n    }\n    \n    result.append(\"\\nfields=\" + sortedFields.length);\n    result.append(\", terms=\" + sumTerms);\n    result.append(\", positions=\" + sumPositions);\n    result.append(\", Kchars=\" + (sumChars/1000.0f));\n    return result.toString();\n  }\n\n","sourceOld":"  /**\n   * Returns a String representation of the index data for debugging purposes.\n   * \n   * @return the string representation\n   */\n  @Override\n  public String toString() {\n    StringBuilder result = new StringBuilder(256);    \n    sortFields();   \n    int sumChars = 0;\n    int sumPositions = 0;\n    int sumTerms = 0;\n    \n    for (int i=0; i < sortedFields.length; i++) {\n      Map.Entry<String,Info> entry = sortedFields[i];\n      String fieldName = entry.getKey();\n      Info info = entry.getValue();\n      info.sortTerms();\n      result.append(fieldName + \":\\n\");\n      \n      int numChars = 0;\n      int numPositions = 0;\n      for (int j=0; j < info.sortedTerms.length; j++) {\n        Map.Entry<String,ArrayIntList> e = info.sortedTerms[j];\n        String term = e.getKey();\n        ArrayIntList positions = e.getValue();\n        result.append(\"\\t'\" + term + \"':\" + numPositions(positions) + \":\");\n        result.append(positions.toString(stride)); // ignore offsets\n        result.append(\"\\n\");\n        numPositions += numPositions(positions);\n        numChars += term.length();\n      }\n      \n      result.append(\"\\tterms=\" + info.sortedTerms.length);\n      result.append(\", positions=\" + numPositions);\n      result.append(\", Kchars=\" + (numChars/1000.0f));\n      result.append(\"\\n\");\n      sumPositions += numPositions;\n      sumChars += numChars;\n      sumTerms += info.sortedTerms.length;\n    }\n    \n    result.append(\"\\nfields=\" + sortedFields.length);\n    result.append(\", terms=\" + sumTerms);\n    result.append(\", positions=\" + sumPositions);\n    result.append(\", Kchars=\" + (sumChars/1000.0f));\n    return result.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"35dd40ede4dd66fa47506858c4a073d295c5a76e":["c8f14489323057ef6de92ba5ea2d0cfe6e34755f"],"b08308242cb802f3a154e260d3881c2ed523c52b":["a93e1e4a21be8ebb98e53e6933412a363931faa1"],"c8f14489323057ef6de92ba5ea2d0cfe6e34755f":["50e7972fe4865715af8951d4ba15555e3426fc5d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f68e24227d5556d33ee6d586fd9010cd9ff8bec":["b08308242cb802f3a154e260d3881c2ed523c52b"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["f11899016a0460a7ea2e4b008d002e1e75c7d867"],"50e7972fe4865715af8951d4ba15555e3426fc5d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["7f68e24227d5556d33ee6d586fd9010cd9ff8bec"],"a93e1e4a21be8ebb98e53e6933412a363931faa1":["35dd40ede4dd66fa47506858c4a073d295c5a76e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"f11899016a0460a7ea2e4b008d002e1e75c7d867":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"]},"commit2Childs":{"35dd40ede4dd66fa47506858c4a073d295c5a76e":["a93e1e4a21be8ebb98e53e6933412a363931faa1"],"b08308242cb802f3a154e260d3881c2ed523c52b":["7f68e24227d5556d33ee6d586fd9010cd9ff8bec"],"c8f14489323057ef6de92ba5ea2d0cfe6e34755f":["35dd40ede4dd66fa47506858c4a073d295c5a76e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["50e7972fe4865715af8951d4ba15555e3426fc5d"],"7f68e24227d5556d33ee6d586fd9010cd9ff8bec":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"50e7972fe4865715af8951d4ba15555e3426fc5d":["c8f14489323057ef6de92ba5ea2d0cfe6e34755f"],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["f11899016a0460a7ea2e4b008d002e1e75c7d867"],"a93e1e4a21be8ebb98e53e6933412a363931faa1":["b08308242cb802f3a154e260d3881c2ed523c52b"],"f11899016a0460a7ea2e4b008d002e1e75c7d867":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}