{"path":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#getQueryFromSpatialArgs(QParser,SchemaField,SpatialArgs).mjava","commits":[{"id":"c11e1d33f2ba742976268153f6edd2d29710cf69","date":1347851822,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#getQueryFromSpatialArgs(QParser,SchemaField,SpatialArgs).mjava","pathOld":"/dev/null","sourceNew":"  private Query getQueryFromSpatialArgs(QParser parser, SchemaField field, SpatialArgs spatialArgs) {\n    T strategy = getStrategy(field.getName());\n\n    SolrParams localParams = parser.getLocalParams();\n    String score = (localParams == null ? null : localParams.get(SCORE_PARAM));\n    if (score == null || \"none\".equals(score) || \"\".equals(score)) {\n      //FYI Solr FieldType doesn't have a getFilter(). We'll always grab\n      // getQuery() but it's possible a strategy has a more efficient getFilter\n      // that could be wrapped -- no way to know.\n      //See SOLR-2883 needScore\n      return strategy.makeQuery(spatialArgs); //ConstantScoreQuery\n    }\n\n    //We get the valueSource for the score then the filter and combine them.\n    ValueSource valueSource;\n    if (\"distance\".equals(score))\n      valueSource = strategy.makeDistanceValueSource(spatialArgs.getShape().getCenter());\n    else if (\"recipDistance\".equals(score))\n      valueSource = strategy.makeRecipDistanceValueSource(spatialArgs.getShape());\n    else\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'score' local-param must be one of 'none', 'distance', or 'recipDistance'\");\n\n    Filter filter = strategy.makeFilter(spatialArgs);\n    return new FilteredQuery(new FunctionQuery(valueSource), filter);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"222d0a99f194d3d88e0c2e8189e9b812599ffc78","date":1357452118,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#getQueryFromSpatialArgs(QParser,SchemaField,SpatialArgs).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#getQueryFromSpatialArgs(QParser,SchemaField,SpatialArgs).mjava","sourceNew":"  private Query getQueryFromSpatialArgs(QParser parser, SchemaField field, SpatialArgs spatialArgs) {\n    T strategy = getStrategy(field.getName());\n\n    SolrParams localParams = parser.getLocalParams();\n    String score = (localParams == null ? null : localParams.get(SCORE_PARAM));\n    if (score == null || \"none\".equals(score) || \"\".equals(score)) {\n      //FYI Solr FieldType doesn't have a getFilter(). We'll always grab\n      // getQuery() but it's possible a strategy has a more efficient getFilter\n      // that could be wrapped -- no way to know.\n      //See SOLR-2883 needScore\n      return strategy.makeQuery(spatialArgs); //ConstantScoreQuery\n    }\n\n    //We get the valueSource for the score then the filter and combine them.\n    ValueSource valueSource;\n    if (\"distance\".equals(score))\n      valueSource = strategy.makeDistanceValueSource(spatialArgs.getShape().getCenter());\n    else if (\"recipDistance\".equals(score))\n      valueSource = strategy.makeRecipDistanceValueSource(spatialArgs.getShape());\n    else\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'score' local-param must be one of 'none', 'distance', or 'recipDistance'\");\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n\n    if (localParams != null && !localParams.getBool(FILTER_PARAM, true))\n      return functionQuery;\n\n    Filter filter = strategy.makeFilter(spatialArgs);\n    return new FilteredQuery(functionQuery, filter);\n  }\n\n","sourceOld":"  private Query getQueryFromSpatialArgs(QParser parser, SchemaField field, SpatialArgs spatialArgs) {\n    T strategy = getStrategy(field.getName());\n\n    SolrParams localParams = parser.getLocalParams();\n    String score = (localParams == null ? null : localParams.get(SCORE_PARAM));\n    if (score == null || \"none\".equals(score) || \"\".equals(score)) {\n      //FYI Solr FieldType doesn't have a getFilter(). We'll always grab\n      // getQuery() but it's possible a strategy has a more efficient getFilter\n      // that could be wrapped -- no way to know.\n      //See SOLR-2883 needScore\n      return strategy.makeQuery(spatialArgs); //ConstantScoreQuery\n    }\n\n    //We get the valueSource for the score then the filter and combine them.\n    ValueSource valueSource;\n    if (\"distance\".equals(score))\n      valueSource = strategy.makeDistanceValueSource(spatialArgs.getShape().getCenter());\n    else if (\"recipDistance\".equals(score))\n      valueSource = strategy.makeRecipDistanceValueSource(spatialArgs.getShape());\n    else\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'score' local-param must be one of 'none', 'distance', or 'recipDistance'\");\n\n    Filter filter = strategy.makeFilter(spatialArgs);\n    return new FilteredQuery(new FunctionQuery(valueSource), filter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#getQueryFromSpatialArgs(QParser,SchemaField,SpatialArgs).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#getQueryFromSpatialArgs(QParser,SchemaField,SpatialArgs).mjava","sourceNew":"  private Query getQueryFromSpatialArgs(QParser parser, SchemaField field, SpatialArgs spatialArgs) {\n    T strategy = getStrategy(field.getName());\n\n    SolrParams localParams = parser.getLocalParams();\n    String score = (localParams == null ? null : localParams.get(SCORE_PARAM));\n    if (score == null || \"none\".equals(score) || \"\".equals(score)) {\n      //FYI Solr FieldType doesn't have a getFilter(). We'll always grab\n      // getQuery() but it's possible a strategy has a more efficient getFilter\n      // that could be wrapped -- no way to know.\n      //See SOLR-2883 needScore\n      return strategy.makeQuery(spatialArgs); //ConstantScoreQuery\n    }\n\n    //We get the valueSource for the score then the filter and combine them.\n    ValueSource valueSource;\n    if (\"distance\".equals(score))\n      valueSource = strategy.makeDistanceValueSource(spatialArgs.getShape().getCenter());\n    else if (\"recipDistance\".equals(score))\n      valueSource = strategy.makeRecipDistanceValueSource(spatialArgs.getShape());\n    else\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'score' local-param must be one of 'none', 'distance', or 'recipDistance'\");\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n\n    if (localParams != null && !localParams.getBool(FILTER_PARAM, true))\n      return functionQuery;\n\n    Filter filter = strategy.makeFilter(spatialArgs);\n    return new FilteredQuery(functionQuery, filter);\n  }\n\n","sourceOld":"  private Query getQueryFromSpatialArgs(QParser parser, SchemaField field, SpatialArgs spatialArgs) {\n    T strategy = getStrategy(field.getName());\n\n    SolrParams localParams = parser.getLocalParams();\n    String score = (localParams == null ? null : localParams.get(SCORE_PARAM));\n    if (score == null || \"none\".equals(score) || \"\".equals(score)) {\n      //FYI Solr FieldType doesn't have a getFilter(). We'll always grab\n      // getQuery() but it's possible a strategy has a more efficient getFilter\n      // that could be wrapped -- no way to know.\n      //See SOLR-2883 needScore\n      return strategy.makeQuery(spatialArgs); //ConstantScoreQuery\n    }\n\n    //We get the valueSource for the score then the filter and combine them.\n    ValueSource valueSource;\n    if (\"distance\".equals(score))\n      valueSource = strategy.makeDistanceValueSource(spatialArgs.getShape().getCenter());\n    else if (\"recipDistance\".equals(score))\n      valueSource = strategy.makeRecipDistanceValueSource(spatialArgs.getShape());\n    else\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'score' local-param must be one of 'none', 'distance', or 'recipDistance'\");\n\n    Filter filter = strategy.makeFilter(spatialArgs);\n    return new FilteredQuery(new FunctionQuery(valueSource), filter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db81fe5f1911f062c87abbb053871c166d57d849","date":1374686410,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#getQueryFromSpatialArgs(QParser,SchemaField,SpatialArgs).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#getQueryFromSpatialArgs(QParser,SchemaField,SpatialArgs).mjava","sourceNew":"  private Query getQueryFromSpatialArgs(QParser parser, SchemaField field, SpatialArgs spatialArgs) {\n    T strategy = getStrategy(field.getName());\n\n    SolrParams localParams = parser.getLocalParams();\n    String score = (localParams == null ? null : localParams.get(SCORE_PARAM));\n    if (score == null || \"none\".equals(score) || \"\".equals(score)) {\n      //FYI Solr FieldType doesn't have a getFilter(). We'll always grab\n      // getQuery() but it's possible a strategy has a more efficient getFilter\n      // that could be wrapped -- no way to know.\n      //See SOLR-2883 needScore\n      return strategy.makeQuery(spatialArgs); //ConstantScoreQuery\n    }\n\n    //We get the valueSource for the score then the filter and combine them.\n    ValueSource valueSource;\n    if (\"distance\".equals(score)) {\n      double multiplier = 1.0;//TODO support units=kilometers\n      valueSource = strategy.makeDistanceValueSource(spatialArgs.getShape().getCenter(), multiplier);\n    } else if (\"recipDistance\".equals(score)) {\n      valueSource = strategy.makeRecipDistanceValueSource(spatialArgs.getShape());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'score' local-param must be one of 'none', 'distance', or 'recipDistance'\");\n    }\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n\n    if (localParams != null && !localParams.getBool(FILTER_PARAM, true))\n      return functionQuery;\n\n    Filter filter = strategy.makeFilter(spatialArgs);\n    return new FilteredQuery(functionQuery, filter);\n  }\n\n","sourceOld":"  private Query getQueryFromSpatialArgs(QParser parser, SchemaField field, SpatialArgs spatialArgs) {\n    T strategy = getStrategy(field.getName());\n\n    SolrParams localParams = parser.getLocalParams();\n    String score = (localParams == null ? null : localParams.get(SCORE_PARAM));\n    if (score == null || \"none\".equals(score) || \"\".equals(score)) {\n      //FYI Solr FieldType doesn't have a getFilter(). We'll always grab\n      // getQuery() but it's possible a strategy has a more efficient getFilter\n      // that could be wrapped -- no way to know.\n      //See SOLR-2883 needScore\n      return strategy.makeQuery(spatialArgs); //ConstantScoreQuery\n    }\n\n    //We get the valueSource for the score then the filter and combine them.\n    ValueSource valueSource;\n    if (\"distance\".equals(score))\n      valueSource = strategy.makeDistanceValueSource(spatialArgs.getShape().getCenter());\n    else if (\"recipDistance\".equals(score))\n      valueSource = strategy.makeRecipDistanceValueSource(spatialArgs.getShape());\n    else\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'score' local-param must be one of 'none', 'distance', or 'recipDistance'\");\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n\n    if (localParams != null && !localParams.getBool(FILTER_PARAM, true))\n      return functionQuery;\n\n    Filter filter = strategy.makeFilter(spatialArgs);\n    return new FilteredQuery(functionQuery, filter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#getQueryFromSpatialArgs(QParser,SchemaField,SpatialArgs).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#getQueryFromSpatialArgs(QParser,SchemaField,SpatialArgs).mjava","sourceNew":"  private Query getQueryFromSpatialArgs(QParser parser, SchemaField field, SpatialArgs spatialArgs) {\n    T strategy = getStrategy(field.getName());\n\n    SolrParams localParams = parser.getLocalParams();\n    String score = (localParams == null ? null : localParams.get(SCORE_PARAM));\n    if (score == null || \"none\".equals(score) || \"\".equals(score)) {\n      //FYI Solr FieldType doesn't have a getFilter(). We'll always grab\n      // getQuery() but it's possible a strategy has a more efficient getFilter\n      // that could be wrapped -- no way to know.\n      //See SOLR-2883 needScore\n      return strategy.makeQuery(spatialArgs); //ConstantScoreQuery\n    }\n\n    //We get the valueSource for the score then the filter and combine them.\n    ValueSource valueSource;\n    if (\"distance\".equals(score)) {\n      double multiplier = 1.0;//TODO support units=kilometers\n      valueSource = strategy.makeDistanceValueSource(spatialArgs.getShape().getCenter(), multiplier);\n    } else if (\"recipDistance\".equals(score)) {\n      valueSource = strategy.makeRecipDistanceValueSource(spatialArgs.getShape());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'score' local-param must be one of 'none', 'distance', or 'recipDistance'\");\n    }\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n\n    if (localParams != null && !localParams.getBool(FILTER_PARAM, true))\n      return functionQuery;\n\n    Filter filter = strategy.makeFilter(spatialArgs);\n    return new FilteredQuery(functionQuery, filter);\n  }\n\n","sourceOld":"  private Query getQueryFromSpatialArgs(QParser parser, SchemaField field, SpatialArgs spatialArgs) {\n    T strategy = getStrategy(field.getName());\n\n    SolrParams localParams = parser.getLocalParams();\n    String score = (localParams == null ? null : localParams.get(SCORE_PARAM));\n    if (score == null || \"none\".equals(score) || \"\".equals(score)) {\n      //FYI Solr FieldType doesn't have a getFilter(). We'll always grab\n      // getQuery() but it's possible a strategy has a more efficient getFilter\n      // that could be wrapped -- no way to know.\n      //See SOLR-2883 needScore\n      return strategy.makeQuery(spatialArgs); //ConstantScoreQuery\n    }\n\n    //We get the valueSource for the score then the filter and combine them.\n    ValueSource valueSource;\n    if (\"distance\".equals(score))\n      valueSource = strategy.makeDistanceValueSource(spatialArgs.getShape().getCenter());\n    else if (\"recipDistance\".equals(score))\n      valueSource = strategy.makeRecipDistanceValueSource(spatialArgs.getShape());\n    else\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'score' local-param must be one of 'none', 'distance', or 'recipDistance'\");\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n\n    if (localParams != null && !localParams.getBool(FILTER_PARAM, true))\n      return functionQuery;\n\n    Filter filter = strategy.makeFilter(spatialArgs);\n    return new FilteredQuery(functionQuery, filter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"983ebd436c71e20b43f6614ff7692b8db32f1935","date":1401933876,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#getQueryFromSpatialArgs(QParser,SchemaField,SpatialArgs).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#getQueryFromSpatialArgs(QParser,SchemaField,SpatialArgs).mjava","sourceNew":"  protected Query getQueryFromSpatialArgs(QParser parser, SchemaField field, SpatialArgs spatialArgs) {\n    T strategy = getStrategy(field.getName());\n\n    SolrParams localParams = parser.getLocalParams();\n    String score = (localParams == null ? null : localParams.get(SCORE_PARAM));\n    if (score == null || \"none\".equals(score) || \"\".equals(score)) {\n      //FYI Solr FieldType doesn't have a getFilter(). We'll always grab\n      // getQuery() but it's possible a strategy has a more efficient getFilter\n      // that could be wrapped -- no way to know.\n      //See SOLR-2883 needScore\n      return strategy.makeQuery(spatialArgs); //ConstantScoreQuery\n    }\n\n    //We get the valueSource for the score then the filter and combine them.\n    ValueSource valueSource;\n    if (\"distance\".equals(score)) {\n      double multiplier = 1.0;//TODO support units=kilometers\n      valueSource = strategy.makeDistanceValueSource(spatialArgs.getShape().getCenter(), multiplier);\n    } else if (\"recipDistance\".equals(score)) {\n      valueSource = strategy.makeRecipDistanceValueSource(spatialArgs.getShape());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'score' local-param must be one of 'none', 'distance', or 'recipDistance'\");\n    }\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n\n    if (localParams != null && !localParams.getBool(FILTER_PARAM, true))\n      return functionQuery;\n\n    Filter filter = strategy.makeFilter(spatialArgs);\n    return new FilteredQuery(functionQuery, filter);\n  }\n\n","sourceOld":"  private Query getQueryFromSpatialArgs(QParser parser, SchemaField field, SpatialArgs spatialArgs) {\n    T strategy = getStrategy(field.getName());\n\n    SolrParams localParams = parser.getLocalParams();\n    String score = (localParams == null ? null : localParams.get(SCORE_PARAM));\n    if (score == null || \"none\".equals(score) || \"\".equals(score)) {\n      //FYI Solr FieldType doesn't have a getFilter(). We'll always grab\n      // getQuery() but it's possible a strategy has a more efficient getFilter\n      // that could be wrapped -- no way to know.\n      //See SOLR-2883 needScore\n      return strategy.makeQuery(spatialArgs); //ConstantScoreQuery\n    }\n\n    //We get the valueSource for the score then the filter and combine them.\n    ValueSource valueSource;\n    if (\"distance\".equals(score)) {\n      double multiplier = 1.0;//TODO support units=kilometers\n      valueSource = strategy.makeDistanceValueSource(spatialArgs.getShape().getCenter(), multiplier);\n    } else if (\"recipDistance\".equals(score)) {\n      valueSource = strategy.makeRecipDistanceValueSource(spatialArgs.getShape());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'score' local-param must be one of 'none', 'distance', or 'recipDistance'\");\n    }\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n\n    if (localParams != null && !localParams.getBool(FILTER_PARAM, true))\n      return functionQuery;\n\n    Filter filter = strategy.makeFilter(spatialArgs);\n    return new FilteredQuery(functionQuery, filter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc82330b4d56ad46d05e79f14faf1aa5152843d","date":1404872659,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#getQueryFromSpatialArgs(QParser,SchemaField,SpatialArgs).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#getQueryFromSpatialArgs(QParser,SchemaField,SpatialArgs).mjava","sourceNew":"  protected Query getQueryFromSpatialArgs(QParser parser, SchemaField field, SpatialArgs spatialArgs) {\n    T strategy = getStrategy(field.getName());\n\n    SolrParams localParams = parser.getLocalParams();\n    String scoreParam = (localParams == null ? null : localParams.get(SCORE_PARAM));\n\n    //We get the valueSource for the score then the filter and combine them.\n\n    ValueSource valueSource = getValueSourceFromSpatialArgs(parser, field, spatialArgs, scoreParam, strategy);\n    if (valueSource == null) {\n      //FYI Solr FieldType doesn't have a getFilter(). We'll always grab\n      // getQuery() but it's possible a strategy has a more efficient getFilter\n      // that could be wrapped -- no way to know.\n      //See SOLR-2883 needScore\n      return strategy.makeQuery(spatialArgs); //ConstantScoreQuery\n    }\n\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n\n    if (localParams != null && !localParams.getBool(FILTER_PARAM, true))\n      return functionQuery;\n\n    Filter filter = strategy.makeFilter(spatialArgs);\n    return new FilteredQuery(functionQuery, filter);\n  }\n\n","sourceOld":"  protected Query getQueryFromSpatialArgs(QParser parser, SchemaField field, SpatialArgs spatialArgs) {\n    T strategy = getStrategy(field.getName());\n\n    SolrParams localParams = parser.getLocalParams();\n    String score = (localParams == null ? null : localParams.get(SCORE_PARAM));\n    if (score == null || \"none\".equals(score) || \"\".equals(score)) {\n      //FYI Solr FieldType doesn't have a getFilter(). We'll always grab\n      // getQuery() but it's possible a strategy has a more efficient getFilter\n      // that could be wrapped -- no way to know.\n      //See SOLR-2883 needScore\n      return strategy.makeQuery(spatialArgs); //ConstantScoreQuery\n    }\n\n    //We get the valueSource for the score then the filter and combine them.\n    ValueSource valueSource;\n    if (\"distance\".equals(score)) {\n      double multiplier = 1.0;//TODO support units=kilometers\n      valueSource = strategy.makeDistanceValueSource(spatialArgs.getShape().getCenter(), multiplier);\n    } else if (\"recipDistance\".equals(score)) {\n      valueSource = strategy.makeRecipDistanceValueSource(spatialArgs.getShape());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'score' local-param must be one of 'none', 'distance', or 'recipDistance'\");\n    }\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n\n    if (localParams != null && !localParams.getBool(FILTER_PARAM, true))\n      return functionQuery;\n\n    Filter filter = strategy.makeFilter(spatialArgs);\n    return new FilteredQuery(functionQuery, filter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1db68e96dd908fcd79ef809095822736aa601d08","date":1434630596,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#getQueryFromSpatialArgs(QParser,SchemaField,SpatialArgs).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#getQueryFromSpatialArgs(QParser,SchemaField,SpatialArgs).mjava","sourceNew":"  protected Query getQueryFromSpatialArgs(QParser parser, SchemaField field, SpatialArgs spatialArgs) {\n    T strategy = getStrategy(field.getName());\n\n    SolrParams localParams = parser.getLocalParams();\n    String scoreParam = (localParams == null ? null : localParams.get(SCORE_PARAM));\n\n    //We get the valueSource for the score then the filter and combine them.\n\n    ValueSource valueSource = getValueSourceFromSpatialArgs(parser, field, spatialArgs, scoreParam, strategy);\n    if (valueSource == null) {\n      //FYI Solr FieldType doesn't have a getFilter(). We'll always grab\n      // getQuery() but it's possible a strategy has a more efficient getFilter\n      // that could be wrapped -- no way to know.\n      //See SOLR-2883 needScore\n      return strategy.makeQuery(spatialArgs); //ConstantScoreQuery\n    }\n\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n\n    if (localParams != null && !localParams.getBool(FILTER_PARAM, true))\n      return functionQuery;\n\n    Filter filter = strategy.makeFilter(spatialArgs);\n    return new BooleanQuery.Builder()\n        .add(functionQuery, Occur.MUST)\n        .add(filter, Occur.FILTER)\n        .build();\n  }\n\n","sourceOld":"  protected Query getQueryFromSpatialArgs(QParser parser, SchemaField field, SpatialArgs spatialArgs) {\n    T strategy = getStrategy(field.getName());\n\n    SolrParams localParams = parser.getLocalParams();\n    String scoreParam = (localParams == null ? null : localParams.get(SCORE_PARAM));\n\n    //We get the valueSource for the score then the filter and combine them.\n\n    ValueSource valueSource = getValueSourceFromSpatialArgs(parser, field, spatialArgs, scoreParam, strategy);\n    if (valueSource == null) {\n      //FYI Solr FieldType doesn't have a getFilter(). We'll always grab\n      // getQuery() but it's possible a strategy has a more efficient getFilter\n      // that could be wrapped -- no way to know.\n      //See SOLR-2883 needScore\n      return strategy.makeQuery(spatialArgs); //ConstantScoreQuery\n    }\n\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n\n    if (localParams != null && !localParams.getBool(FILTER_PARAM, true))\n      return functionQuery;\n\n    Filter filter = strategy.makeFilter(spatialArgs);\n    return new FilteredQuery(functionQuery, filter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"672b198fc3dce868916c727917cae58c2906763d","date":1443669960,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#getQueryFromSpatialArgs(QParser,SchemaField,SpatialArgs).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#getQueryFromSpatialArgs(QParser,SchemaField,SpatialArgs).mjava","sourceNew":"  protected Query getQueryFromSpatialArgs(QParser parser, SchemaField field, SpatialArgs spatialArgs) {\n    T strategy = getStrategy(field.getName());\n\n    SolrParams localParams = parser.getLocalParams();\n    //See SOLR-2883 needScore\n    String scoreParam = (localParams == null ? null : localParams.get(SCORE_PARAM));\n\n    //We get the valueSource for the score then the filter and combine them.\n    ValueSource valueSource = getValueSourceFromSpatialArgs(parser, field, spatialArgs, scoreParam, strategy);\n    if (valueSource == null) {\n      return strategy.makeQuery(spatialArgs); //assumed constant scoring\n    }\n\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n\n    if (localParams != null && !localParams.getBool(FILTER_PARAM, true))\n      return functionQuery;\n\n    Query filterQuery = strategy.makeQuery(spatialArgs);\n    return new BooleanQuery.Builder()\n        .add(functionQuery, Occur.MUST)//matches everything and provides score\n        .add(filterQuery, Occur.FILTER)//filters (score isn't used)\n        .build();\n  }\n\n","sourceOld":"  protected Query getQueryFromSpatialArgs(QParser parser, SchemaField field, SpatialArgs spatialArgs) {\n    T strategy = getStrategy(field.getName());\n\n    SolrParams localParams = parser.getLocalParams();\n    String scoreParam = (localParams == null ? null : localParams.get(SCORE_PARAM));\n\n    //We get the valueSource for the score then the filter and combine them.\n\n    ValueSource valueSource = getValueSourceFromSpatialArgs(parser, field, spatialArgs, scoreParam, strategy);\n    if (valueSource == null) {\n      //FYI Solr FieldType doesn't have a getFilter(). We'll always grab\n      // getQuery() but it's possible a strategy has a more efficient getFilter\n      // that could be wrapped -- no way to know.\n      //See SOLR-2883 needScore\n      return strategy.makeQuery(spatialArgs); //ConstantScoreQuery\n    }\n\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n\n    if (localParams != null && !localParams.getBool(FILTER_PARAM, true))\n      return functionQuery;\n\n    Filter filter = strategy.makeFilter(spatialArgs);\n    return new BooleanQuery.Builder()\n        .add(functionQuery, Occur.MUST)\n        .add(filter, Occur.FILTER)\n        .build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32b9119890a8e82252b6cc341ac491d18fa1e49b","date":1498575219,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#getQueryFromSpatialArgs(QParser,SchemaField,SpatialArgs).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#getQueryFromSpatialArgs(QParser,SchemaField,SpatialArgs).mjava","sourceNew":"  protected Query getQueryFromSpatialArgs(QParser parser, SchemaField field, SpatialArgs spatialArgs) {\n    T strategy = getStrategy(field.getName());\n\n    SolrParams localParams = parser.getLocalParams();\n    //See SOLR-2883 needScore\n    String scoreParam = (localParams == null ? null : localParams.get(SCORE_PARAM));\n\n    //We get the valueSource for the score then the filter and combine them.\n    DoubleValuesSource valueSource = getValueSourceFromSpatialArgs(parser, field, spatialArgs, scoreParam, strategy);\n    if (valueSource == null) {\n      return strategy.makeQuery(spatialArgs); //assumed constant scoring\n    }\n\n    FunctionScoreQuery functionQuery = new FunctionScoreQuery(new MatchAllDocsQuery(), valueSource);\n\n    if (localParams != null && !localParams.getBool(FILTER_PARAM, true))\n      return functionQuery;\n\n    Query filterQuery = strategy.makeQuery(spatialArgs);\n    return new BooleanQuery.Builder()\n        .add(functionQuery, Occur.MUST)//matches everything and provides score\n        .add(filterQuery, Occur.FILTER)//filters (score isn't used)\n        .build();\n  }\n\n","sourceOld":"  protected Query getQueryFromSpatialArgs(QParser parser, SchemaField field, SpatialArgs spatialArgs) {\n    T strategy = getStrategy(field.getName());\n\n    SolrParams localParams = parser.getLocalParams();\n    //See SOLR-2883 needScore\n    String scoreParam = (localParams == null ? null : localParams.get(SCORE_PARAM));\n\n    //We get the valueSource for the score then the filter and combine them.\n    ValueSource valueSource = getValueSourceFromSpatialArgs(parser, field, spatialArgs, scoreParam, strategy);\n    if (valueSource == null) {\n      return strategy.makeQuery(spatialArgs); //assumed constant scoring\n    }\n\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n\n    if (localParams != null && !localParams.getBool(FILTER_PARAM, true))\n      return functionQuery;\n\n    Query filterQuery = strategy.makeQuery(spatialArgs);\n    return new BooleanQuery.Builder()\n        .add(functionQuery, Occur.MUST)//matches everything and provides score\n        .add(filterQuery, Occur.FILTER)//filters (score isn't used)\n        .build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#getQueryFromSpatialArgs(QParser,SchemaField,SpatialArgs).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#getQueryFromSpatialArgs(QParser,SchemaField,SpatialArgs).mjava","sourceNew":"  protected Query getQueryFromSpatialArgs(QParser parser, SchemaField field, SpatialArgs spatialArgs) {\n    T strategy = getStrategy(field.getName());\n\n    SolrParams localParams = parser.getLocalParams();\n    //See SOLR-2883 needScore\n    String scoreParam = (localParams == null ? null : localParams.get(SCORE_PARAM));\n\n    //We get the valueSource for the score then the filter and combine them.\n    DoubleValuesSource valueSource = getValueSourceFromSpatialArgs(parser, field, spatialArgs, scoreParam, strategy);\n    if (valueSource == null) {\n      return strategy.makeQuery(spatialArgs); //assumed constant scoring\n    }\n\n    FunctionScoreQuery functionQuery = new FunctionScoreQuery(new MatchAllDocsQuery(), valueSource);\n\n    if (localParams != null && !localParams.getBool(FILTER_PARAM, true))\n      return functionQuery;\n\n    Query filterQuery = strategy.makeQuery(spatialArgs);\n    return new BooleanQuery.Builder()\n        .add(functionQuery, Occur.MUST)//matches everything and provides score\n        .add(filterQuery, Occur.FILTER)//filters (score isn't used)\n        .build();\n  }\n\n","sourceOld":"  protected Query getQueryFromSpatialArgs(QParser parser, SchemaField field, SpatialArgs spatialArgs) {\n    T strategy = getStrategy(field.getName());\n\n    SolrParams localParams = parser.getLocalParams();\n    //See SOLR-2883 needScore\n    String scoreParam = (localParams == null ? null : localParams.get(SCORE_PARAM));\n\n    //We get the valueSource for the score then the filter and combine them.\n    ValueSource valueSource = getValueSourceFromSpatialArgs(parser, field, spatialArgs, scoreParam, strategy);\n    if (valueSource == null) {\n      return strategy.makeQuery(spatialArgs); //assumed constant scoring\n    }\n\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n\n    if (localParams != null && !localParams.getBool(FILTER_PARAM, true))\n      return functionQuery;\n\n    Query filterQuery = strategy.makeQuery(spatialArgs);\n    return new BooleanQuery.Builder()\n        .add(functionQuery, Occur.MUST)//matches everything and provides score\n        .add(filterQuery, Occur.FILTER)//filters (score isn't used)\n        .build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#getQueryFromSpatialArgs(QParser,SchemaField,SpatialArgs).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#getQueryFromSpatialArgs(QParser,SchemaField,SpatialArgs).mjava","sourceNew":"  protected Query getQueryFromSpatialArgs(QParser parser, SchemaField field, SpatialArgs spatialArgs) {\n    T strategy = getStrategy(field.getName());\n\n    SolrParams localParams = parser.getLocalParams();\n    //See SOLR-2883 needScore\n    String scoreParam = (localParams == null ? null : localParams.get(SCORE_PARAM));\n\n    //We get the valueSource for the score then the filter and combine them.\n    DoubleValuesSource valueSource = getValueSourceFromSpatialArgs(parser, field, spatialArgs, scoreParam, strategy);\n    if (valueSource == null) {\n      return strategy.makeQuery(spatialArgs); //assumed constant scoring\n    }\n\n    FunctionScoreQuery functionQuery = new FunctionScoreQuery(new MatchAllDocsQuery(), valueSource);\n\n    if (localParams != null && !localParams.getBool(FILTER_PARAM, true))\n      return functionQuery;\n\n    Query filterQuery = strategy.makeQuery(spatialArgs);\n    return new BooleanQuery.Builder()\n        .add(functionQuery, Occur.MUST)//matches everything and provides score\n        .add(filterQuery, Occur.FILTER)//filters (score isn't used)\n        .build();\n  }\n\n","sourceOld":"  protected Query getQueryFromSpatialArgs(QParser parser, SchemaField field, SpatialArgs spatialArgs) {\n    T strategy = getStrategy(field.getName());\n\n    SolrParams localParams = parser.getLocalParams();\n    //See SOLR-2883 needScore\n    String scoreParam = (localParams == null ? null : localParams.get(SCORE_PARAM));\n\n    //We get the valueSource for the score then the filter and combine them.\n    ValueSource valueSource = getValueSourceFromSpatialArgs(parser, field, spatialArgs, scoreParam, strategy);\n    if (valueSource == null) {\n      return strategy.makeQuery(spatialArgs); //assumed constant scoring\n    }\n\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n\n    if (localParams != null && !localParams.getBool(FILTER_PARAM, true))\n      return functionQuery;\n\n    Query filterQuery = strategy.makeQuery(spatialArgs);\n    return new BooleanQuery.Builder()\n        .add(functionQuery, Occur.MUST)//matches everything and provides score\n        .add(filterQuery, Occur.FILTER)//filters (score isn't used)\n        .build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["c11e1d33f2ba742976268153f6edd2d29710cf69","222d0a99f194d3d88e0c2e8189e9b812599ffc78"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["222d0a99f194d3d88e0c2e8189e9b812599ffc78","db81fe5f1911f062c87abbb053871c166d57d849"],"28288370235ed02234a64753cdbf0c6ec096304a":["672b198fc3dce868916c727917cae58c2906763d","32b9119890a8e82252b6cc341ac491d18fa1e49b"],"983ebd436c71e20b43f6614ff7692b8db32f1935":["db81fe5f1911f062c87abbb053871c166d57d849"],"32b9119890a8e82252b6cc341ac491d18fa1e49b":["672b198fc3dce868916c727917cae58c2906763d"],"1db68e96dd908fcd79ef809095822736aa601d08":["7dc82330b4d56ad46d05e79f14faf1aa5152843d"],"672b198fc3dce868916c727917cae58c2906763d":["1db68e96dd908fcd79ef809095822736aa601d08"],"c11e1d33f2ba742976268153f6edd2d29710cf69":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"222d0a99f194d3d88e0c2e8189e9b812599ffc78":["c11e1d33f2ba742976268153f6edd2d29710cf69"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db81fe5f1911f062c87abbb053871c166d57d849":["222d0a99f194d3d88e0c2e8189e9b812599ffc78"],"7dc82330b4d56ad46d05e79f14faf1aa5152843d":["983ebd436c71e20b43f6614ff7692b8db32f1935"],"98f11c416d30e556e0004a9a84960702d12d35b1":["672b198fc3dce868916c727917cae58c2906763d","32b9119890a8e82252b6cc341ac491d18fa1e49b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"32b9119890a8e82252b6cc341ac491d18fa1e49b":["28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"983ebd436c71e20b43f6614ff7692b8db32f1935":["7dc82330b4d56ad46d05e79f14faf1aa5152843d"],"1db68e96dd908fcd79ef809095822736aa601d08":["672b198fc3dce868916c727917cae58c2906763d"],"672b198fc3dce868916c727917cae58c2906763d":["28288370235ed02234a64753cdbf0c6ec096304a","32b9119890a8e82252b6cc341ac491d18fa1e49b","98f11c416d30e556e0004a9a84960702d12d35b1"],"c11e1d33f2ba742976268153f6edd2d29710cf69":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","222d0a99f194d3d88e0c2e8189e9b812599ffc78"],"222d0a99f194d3d88e0c2e8189e9b812599ffc78":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","db81fe5f1911f062c87abbb053871c166d57d849"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c11e1d33f2ba742976268153f6edd2d29710cf69"],"db81fe5f1911f062c87abbb053871c166d57d849":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","983ebd436c71e20b43f6614ff7692b8db32f1935"],"7dc82330b4d56ad46d05e79f14faf1aa5152843d":["1db68e96dd908fcd79ef809095822736aa601d08"],"98f11c416d30e556e0004a9a84960702d12d35b1":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","98f11c416d30e556e0004a9a84960702d12d35b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}