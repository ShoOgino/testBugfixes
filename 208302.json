{"path":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testLastPublishedStateIsActive().mjava","commits":[{"id":"55dd60b0ec28d5f9b8d178ab4d1cc3abb74c3e05","date":1446751515,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testLastPublishedStateIsActive().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test that FORCELEADER can set last published state of all down (live) replicas to active (so\n   * that they become worthy candidates for leader election).\n   */\n  @Slow\n  public void testLastPublishedStateIsActive() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_last_published\";\n    createCollection(testCollectionName, 1, 3, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n    log.info(\"Collection created: \" + testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = ((SolrDispatchFilter) notLeader0.getDispatchFilter().getFilter()).getCores().getZkController();\n\n      // Mark all replicas down\n      setReplicaState(testCollectionName, SHARD1, leader, State.DOWN);\n      for (Replica rep : notLeaders) {\n        setReplicaState(testCollectionName, SHARD1, rep, State.DOWN);\n      }\n\n      zkController.getZkStateReader().updateClusterState();\n      // Assert all replicas are down and that there is no leader\n      assertEquals(0, getActiveOrRecoveringReplicas(testCollectionName, SHARD1).size());\n\n      // Now force leader\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // Assert that last published states of the two replicas are active now\n      for (Replica rep: notLeaders) {\n        assertEquals(Replica.State.ACTIVE, getLastPublishedState(testCollectionName, SHARD1, rep));\n      }\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      try {\n        CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n        req.setCollectionName(testCollectionName);\n        req.process(cloudClient);\n      } catch (Exception e) {\n        // don't fail the test\n        log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1088b72b3b4cc45316b7595bd09023c859cd2327","date":1447150009,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testLastPublishedStateIsActive().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testLastPublishedStateIsActive().mjava","sourceNew":"  /**\n   * Test that FORCELEADER can set last published state of all down (live) replicas to active (so\n   * that they become worthy candidates for leader election).\n   */\n  @Slow\n  public void testLastPublishedStateIsActive() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_last_published\";\n    createCollection(testCollectionName, 1, 3, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n    log.info(\"Collection created: \" + testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      // Mark all replicas down\n      setReplicaState(testCollectionName, SHARD1, leader, State.DOWN);\n      for (Replica rep : notLeaders) {\n        setReplicaState(testCollectionName, SHARD1, rep, State.DOWN);\n      }\n\n      zkController.getZkStateReader().updateClusterState();\n      // Assert all replicas are down and that there is no leader\n      assertEquals(0, getActiveOrRecoveringReplicas(testCollectionName, SHARD1).size());\n\n      // Now force leader\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // Assert that last published states of the two replicas are active now\n      for (Replica rep: notLeaders) {\n        assertEquals(Replica.State.ACTIVE, getLastPublishedState(testCollectionName, SHARD1, rep));\n      }\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      try {\n        CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n        req.setCollectionName(testCollectionName);\n        req.process(cloudClient);\n      } catch (Exception e) {\n        // don't fail the test\n        log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Test that FORCELEADER can set last published state of all down (live) replicas to active (so\n   * that they become worthy candidates for leader election).\n   */\n  @Slow\n  public void testLastPublishedStateIsActive() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_last_published\";\n    createCollection(testCollectionName, 1, 3, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n    log.info(\"Collection created: \" + testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = ((SolrDispatchFilter) notLeader0.getDispatchFilter().getFilter()).getCores().getZkController();\n\n      // Mark all replicas down\n      setReplicaState(testCollectionName, SHARD1, leader, State.DOWN);\n      for (Replica rep : notLeaders) {\n        setReplicaState(testCollectionName, SHARD1, rep, State.DOWN);\n      }\n\n      zkController.getZkStateReader().updateClusterState();\n      // Assert all replicas are down and that there is no leader\n      assertEquals(0, getActiveOrRecoveringReplicas(testCollectionName, SHARD1).size());\n\n      // Now force leader\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // Assert that last published states of the two replicas are active now\n      for (Replica rep: notLeaders) {\n        assertEquals(Replica.State.ACTIVE, getLastPublishedState(testCollectionName, SHARD1, rep));\n      }\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      try {\n        CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n        req.setCollectionName(testCollectionName);\n        req.process(cloudClient);\n      } catch (Exception e) {\n        // don't fail the test\n        log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","date":1457343183,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testLastPublishedStateIsActive().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testLastPublishedStateIsActive().mjava","sourceNew":"  /**\n   * Test that FORCELEADER can set last published state of all down (live) replicas to active (so\n   * that they become worthy candidates for leader election).\n   */\n  @Slow\n  public void testLastPublishedStateIsActive() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_last_published\";\n    createCollection(testCollectionName, 1, 3, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n    log.info(\"Collection created: \" + testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      // Mark all replicas down\n      setReplicaState(testCollectionName, SHARD1, leader, State.DOWN);\n      for (Replica rep : notLeaders) {\n        setReplicaState(testCollectionName, SHARD1, rep, State.DOWN);\n      }\n\n      zkController.getZkStateReader().forceUpdateCollection(testCollectionName);\n      // Assert all replicas are down and that there is no leader\n      assertEquals(0, getActiveOrRecoveringReplicas(testCollectionName, SHARD1).size());\n\n      // Now force leader\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // Assert that last published states of the two replicas are active now\n      for (Replica rep: notLeaders) {\n        assertEquals(Replica.State.ACTIVE, getLastPublishedState(testCollectionName, SHARD1, rep));\n      }\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      try {\n        CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n        req.setCollectionName(testCollectionName);\n        req.process(cloudClient);\n      } catch (Exception e) {\n        // don't fail the test\n        log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Test that FORCELEADER can set last published state of all down (live) replicas to active (so\n   * that they become worthy candidates for leader election).\n   */\n  @Slow\n  public void testLastPublishedStateIsActive() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_last_published\";\n    createCollection(testCollectionName, 1, 3, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n    log.info(\"Collection created: \" + testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      // Mark all replicas down\n      setReplicaState(testCollectionName, SHARD1, leader, State.DOWN);\n      for (Replica rep : notLeaders) {\n        setReplicaState(testCollectionName, SHARD1, rep, State.DOWN);\n      }\n\n      zkController.getZkStateReader().updateClusterState();\n      // Assert all replicas are down and that there is no leader\n      assertEquals(0, getActiveOrRecoveringReplicas(testCollectionName, SHARD1).size());\n\n      // Now force leader\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // Assert that last published states of the two replicas are active now\n      for (Replica rep: notLeaders) {\n        assertEquals(Replica.State.ACTIVE, getLastPublishedState(testCollectionName, SHARD1, rep));\n      }\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      try {\n        CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n        req.setCollectionName(testCollectionName);\n        req.process(cloudClient);\n      } catch (Exception e) {\n        // don't fail the test\n        log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac97ea104d893f16aab430d9904473bc1f233f3c","date":1496249396,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testLastPublishedStateIsActive().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testLastPublishedStateIsActive().mjava","sourceNew":"  /**\n   * Test that FORCELEADER can set last published state of all down (live) replicas to active (so\n   * that they become worthy candidates for leader election).\n   */\n  @Slow\n  public void testLastPublishedStateIsActive() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_last_published\";\n    createCollection(testCollectionName, 1, 3, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n    log.info(\"Collection created: \" + testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      // Mark all replicas down\n      setReplicaState(testCollectionName, SHARD1, leader, State.DOWN);\n      for (Replica rep : notLeaders) {\n        setReplicaState(testCollectionName, SHARD1, rep, State.DOWN);\n      }\n\n      zkController.getZkStateReader().forceUpdateCollection(testCollectionName);\n      // Assert all replicas are down and that there is no leader\n      assertEquals(0, getActiveOrRecoveringReplicas(testCollectionName, SHARD1).size());\n\n      // Now force leader\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // Assert that last published states of the two replicas are active now\n      for (Replica rep: notLeaders) {\n        assertEquals(Replica.State.ACTIVE, getLastPublishedState(testCollectionName, SHARD1, rep));\n      }\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      attemptCollectionDelete(cloudClient, testCollectionName);\n    }\n  }\n\n","sourceOld":"  /**\n   * Test that FORCELEADER can set last published state of all down (live) replicas to active (so\n   * that they become worthy candidates for leader election).\n   */\n  @Slow\n  public void testLastPublishedStateIsActive() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_last_published\";\n    createCollection(testCollectionName, 1, 3, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n    log.info(\"Collection created: \" + testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      // Mark all replicas down\n      setReplicaState(testCollectionName, SHARD1, leader, State.DOWN);\n      for (Replica rep : notLeaders) {\n        setReplicaState(testCollectionName, SHARD1, rep, State.DOWN);\n      }\n\n      zkController.getZkStateReader().forceUpdateCollection(testCollectionName);\n      // Assert all replicas are down and that there is no leader\n      assertEquals(0, getActiveOrRecoveringReplicas(testCollectionName, SHARD1).size());\n\n      // Now force leader\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // Assert that last published states of the two replicas are active now\n      for (Replica rep: notLeaders) {\n        assertEquals(Replica.State.ACTIVE, getLastPublishedState(testCollectionName, SHARD1, rep));\n      }\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      try {\n        CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n        req.setCollectionName(testCollectionName);\n        req.process(cloudClient);\n      } catch (Exception e) {\n        // don't fail the test\n        log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3217321f3e1d7922898c6c633d17acfa840d6875","date":1496257480,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testLastPublishedStateIsActive().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testLastPublishedStateIsActive().mjava","sourceNew":"  /**\n   * Test that FORCELEADER can set last published state of all down (live) replicas to active (so\n   * that they become worthy candidates for leader election).\n   */\n  @Slow\n  public void testLastPublishedStateIsActive() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_last_published\";\n    createCollection(testCollectionName, 1, 3, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n    log.info(\"Collection created: \" + testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      // Mark all replicas down\n      setReplicaState(testCollectionName, SHARD1, leader, State.DOWN);\n      for (Replica rep : notLeaders) {\n        setReplicaState(testCollectionName, SHARD1, rep, State.DOWN);\n      }\n\n      zkController.getZkStateReader().forceUpdateCollection(testCollectionName);\n      // Assert all replicas are down and that there is no leader\n      assertEquals(0, getActiveOrRecoveringReplicas(testCollectionName, SHARD1).size());\n\n      // Now force leader\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // Assert that last published states of the two replicas are active now\n      for (Replica rep: notLeaders) {\n        assertEquals(Replica.State.ACTIVE, getLastPublishedState(testCollectionName, SHARD1, rep));\n      }\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      attemptCollectionDelete(cloudClient, testCollectionName);\n    }\n  }\n\n","sourceOld":"  /**\n   * Test that FORCELEADER can set last published state of all down (live) replicas to active (so\n   * that they become worthy candidates for leader election).\n   */\n  @Slow\n  public void testLastPublishedStateIsActive() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_last_published\";\n    createCollection(testCollectionName, 1, 3, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n    log.info(\"Collection created: \" + testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      // Mark all replicas down\n      setReplicaState(testCollectionName, SHARD1, leader, State.DOWN);\n      for (Replica rep : notLeaders) {\n        setReplicaState(testCollectionName, SHARD1, rep, State.DOWN);\n      }\n\n      zkController.getZkStateReader().forceUpdateCollection(testCollectionName);\n      // Assert all replicas are down and that there is no leader\n      assertEquals(0, getActiveOrRecoveringReplicas(testCollectionName, SHARD1).size());\n\n      // Now force leader\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // Assert that last published states of the two replicas are active now\n      for (Replica rep: notLeaders) {\n        assertEquals(Replica.State.ACTIVE, getLastPublishedState(testCollectionName, SHARD1, rep));\n      }\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      try {\n        CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n        req.setCollectionName(testCollectionName);\n        req.process(cloudClient);\n      } catch (Exception e) {\n        // don't fail the test\n        log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f","date":1496281877,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testLastPublishedStateIsActive().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testLastPublishedStateIsActive().mjava","sourceNew":"  /**\n   * Test that FORCELEADER can set last published state of all down (live) replicas to active (so\n   * that they become worthy candidates for leader election).\n   */\n  @Slow\n  public void testLastPublishedStateIsActive() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_last_published\";\n    createCollection(testCollectionName, 1, 3, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n    log.info(\"Collection created: \" + testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      // Mark all replicas down\n      setReplicaState(testCollectionName, SHARD1, leader, State.DOWN);\n      for (Replica rep : notLeaders) {\n        setReplicaState(testCollectionName, SHARD1, rep, State.DOWN);\n      }\n\n      zkController.getZkStateReader().forceUpdateCollection(testCollectionName);\n      // Assert all replicas are down and that there is no leader\n      assertEquals(0, getActiveOrRecoveringReplicas(testCollectionName, SHARD1).size());\n\n      // Now force leader\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // Assert that last published states of the two replicas are active now\n      for (Replica rep: notLeaders) {\n        assertEquals(Replica.State.ACTIVE, getLastPublishedState(testCollectionName, SHARD1, rep));\n      }\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      attemptCollectionDelete(cloudClient, testCollectionName);\n    }\n  }\n\n","sourceOld":"  /**\n   * Test that FORCELEADER can set last published state of all down (live) replicas to active (so\n   * that they become worthy candidates for leader election).\n   */\n  @Slow\n  public void testLastPublishedStateIsActive() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_last_published\";\n    createCollection(testCollectionName, 1, 3, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n    log.info(\"Collection created: \" + testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      // Mark all replicas down\n      setReplicaState(testCollectionName, SHARD1, leader, State.DOWN);\n      for (Replica rep : notLeaders) {\n        setReplicaState(testCollectionName, SHARD1, rep, State.DOWN);\n      }\n\n      zkController.getZkStateReader().forceUpdateCollection(testCollectionName);\n      // Assert all replicas are down and that there is no leader\n      assertEquals(0, getActiveOrRecoveringReplicas(testCollectionName, SHARD1).size());\n\n      // Now force leader\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // Assert that last published states of the two replicas are active now\n      for (Replica rep: notLeaders) {\n        assertEquals(Replica.State.ACTIVE, getLastPublishedState(testCollectionName, SHARD1, rep));\n      }\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      try {\n        CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n        req.setCollectionName(testCollectionName);\n        req.process(cloudClient);\n      } catch (Exception e) {\n        // don't fail the test\n        log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testLastPublishedStateIsActive().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testLastPublishedStateIsActive().mjava","sourceNew":"  /**\n   * Test that FORCELEADER can set last published state of all down (live) replicas to active (so\n   * that they become worthy candidates for leader election).\n   */\n  @Slow\n  public void testLastPublishedStateIsActive() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_last_published\";\n    createCollection(testCollectionName, 1, 3, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n    log.info(\"Collection created: \" + testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      // Mark all replicas down\n      setReplicaState(testCollectionName, SHARD1, leader, State.DOWN);\n      for (Replica rep : notLeaders) {\n        setReplicaState(testCollectionName, SHARD1, rep, State.DOWN);\n      }\n\n      zkController.getZkStateReader().forceUpdateCollection(testCollectionName);\n      // Assert all replicas are down and that there is no leader\n      assertEquals(0, getActiveOrRecoveringReplicas(testCollectionName, SHARD1).size());\n\n      // Now force leader\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // Assert that last published states of the two replicas are active now\n      for (Replica rep: notLeaders) {\n        assertEquals(Replica.State.ACTIVE, getLastPublishedState(testCollectionName, SHARD1, rep));\n      }\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      attemptCollectionDelete(cloudClient, testCollectionName);\n    }\n  }\n\n","sourceOld":"  /**\n   * Test that FORCELEADER can set last published state of all down (live) replicas to active (so\n   * that they become worthy candidates for leader election).\n   */\n  @Slow\n  public void testLastPublishedStateIsActive() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_last_published\";\n    createCollection(testCollectionName, 1, 3, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n    log.info(\"Collection created: \" + testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      // Mark all replicas down\n      setReplicaState(testCollectionName, SHARD1, leader, State.DOWN);\n      for (Replica rep : notLeaders) {\n        setReplicaState(testCollectionName, SHARD1, rep, State.DOWN);\n      }\n\n      zkController.getZkStateReader().forceUpdateCollection(testCollectionName);\n      // Assert all replicas are down and that there is no leader\n      assertEquals(0, getActiveOrRecoveringReplicas(testCollectionName, SHARD1).size());\n\n      // Now force leader\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // Assert that last published states of the two replicas are active now\n      for (Replica rep: notLeaders) {\n        assertEquals(Replica.State.ACTIVE, getLastPublishedState(testCollectionName, SHARD1, rep));\n      }\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      try {\n        CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n        req.setCollectionName(testCollectionName);\n        req.process(cloudClient);\n      } catch (Exception e) {\n        // don't fail the test\n        log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"197bbedf08450ade98a11f4a0001448059666bec","date":1498534625,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testLastPublishedStateIsActive().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testLastPublishedStateIsActive().mjava","sourceNew":"  /**\n   * Test that FORCELEADER can set last published state of all down (live) replicas to active (so\n   * that they become worthy candidates for leader election).\n   */\n  @Slow\n  public void testLastPublishedStateIsActive() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_last_published\";\n    createCollection(testCollectionName, \"conf1\", 1, 3, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n    log.info(\"Collection created: \" + testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      // Mark all replicas down\n      setReplicaState(testCollectionName, SHARD1, leader, State.DOWN);\n      for (Replica rep : notLeaders) {\n        setReplicaState(testCollectionName, SHARD1, rep, State.DOWN);\n      }\n\n      zkController.getZkStateReader().forceUpdateCollection(testCollectionName);\n      // Assert all replicas are down and that there is no leader\n      assertEquals(0, getActiveOrRecoveringReplicas(testCollectionName, SHARD1).size());\n\n      // Now force leader\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // Assert that last published states of the two replicas are active now\n      for (Replica rep: notLeaders) {\n        assertEquals(Replica.State.ACTIVE, getLastPublishedState(testCollectionName, SHARD1, rep));\n      }\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      attemptCollectionDelete(cloudClient, testCollectionName);\n    }\n  }\n\n","sourceOld":"  /**\n   * Test that FORCELEADER can set last published state of all down (live) replicas to active (so\n   * that they become worthy candidates for leader election).\n   */\n  @Slow\n  public void testLastPublishedStateIsActive() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_last_published\";\n    createCollection(testCollectionName, 1, 3, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n    log.info(\"Collection created: \" + testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      // Mark all replicas down\n      setReplicaState(testCollectionName, SHARD1, leader, State.DOWN);\n      for (Replica rep : notLeaders) {\n        setReplicaState(testCollectionName, SHARD1, rep, State.DOWN);\n      }\n\n      zkController.getZkStateReader().forceUpdateCollection(testCollectionName);\n      // Assert all replicas are down and that there is no leader\n      assertEquals(0, getActiveOrRecoveringReplicas(testCollectionName, SHARD1).size());\n\n      // Now force leader\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // Assert that last published states of the two replicas are active now\n      for (Replica rep: notLeaders) {\n        assertEquals(Replica.State.ACTIVE, getLastPublishedState(testCollectionName, SHARD1, rep));\n      }\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      attemptCollectionDelete(cloudClient, testCollectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","date":1498540685,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testLastPublishedStateIsActive().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testLastPublishedStateIsActive().mjava","sourceNew":"  /**\n   * Test that FORCELEADER can set last published state of all down (live) replicas to active (so\n   * that they become worthy candidates for leader election).\n   */\n  @Slow\n  public void testLastPublishedStateIsActive() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_last_published\";\n    createCollection(testCollectionName, \"conf1\", 1, 3, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n    log.info(\"Collection created: \" + testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      // Mark all replicas down\n      setReplicaState(testCollectionName, SHARD1, leader, State.DOWN);\n      for (Replica rep : notLeaders) {\n        setReplicaState(testCollectionName, SHARD1, rep, State.DOWN);\n      }\n\n      zkController.getZkStateReader().forceUpdateCollection(testCollectionName);\n      // Assert all replicas are down and that there is no leader\n      assertEquals(0, getActiveOrRecoveringReplicas(testCollectionName, SHARD1).size());\n\n      // Now force leader\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // Assert that last published states of the two replicas are active now\n      for (Replica rep: notLeaders) {\n        assertEquals(Replica.State.ACTIVE, getLastPublishedState(testCollectionName, SHARD1, rep));\n      }\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      attemptCollectionDelete(cloudClient, testCollectionName);\n    }\n  }\n\n","sourceOld":"  /**\n   * Test that FORCELEADER can set last published state of all down (live) replicas to active (so\n   * that they become worthy candidates for leader election).\n   */\n  @Slow\n  public void testLastPublishedStateIsActive() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_last_published\";\n    createCollection(testCollectionName, 1, 3, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n    log.info(\"Collection created: \" + testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      // Mark all replicas down\n      setReplicaState(testCollectionName, SHARD1, leader, State.DOWN);\n      for (Replica rep : notLeaders) {\n        setReplicaState(testCollectionName, SHARD1, rep, State.DOWN);\n      }\n\n      zkController.getZkStateReader().forceUpdateCollection(testCollectionName);\n      // Assert all replicas are down and that there is no leader\n      assertEquals(0, getActiveOrRecoveringReplicas(testCollectionName, SHARD1).size());\n\n      // Now force leader\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // Assert that last published states of the two replicas are active now\n      for (Replica rep: notLeaders) {\n        assertEquals(Replica.State.ACTIVE, getLastPublishedState(testCollectionName, SHARD1, rep));\n      }\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      attemptCollectionDelete(cloudClient, testCollectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testLastPublishedStateIsActive().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testLastPublishedStateIsActive().mjava","sourceNew":"  /**\n   * Test that FORCELEADER can set last published state of all down (live) replicas to active (so\n   * that they become worthy candidates for leader election).\n   */\n  @Slow\n  public void testLastPublishedStateIsActive() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_last_published\";\n    createCollection(testCollectionName, \"conf1\", 1, 3, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n    log.info(\"Collection created: \" + testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      // Mark all replicas down\n      setReplicaState(testCollectionName, SHARD1, leader, State.DOWN);\n      for (Replica rep : notLeaders) {\n        setReplicaState(testCollectionName, SHARD1, rep, State.DOWN);\n      }\n\n      zkController.getZkStateReader().forceUpdateCollection(testCollectionName);\n      // Assert all replicas are down and that there is no leader\n      assertEquals(0, getActiveOrRecoveringReplicas(testCollectionName, SHARD1).size());\n\n      // Now force leader\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // Assert that last published states of the two replicas are active now\n      for (Replica rep: notLeaders) {\n        assertEquals(Replica.State.ACTIVE, getLastPublishedState(testCollectionName, SHARD1, rep));\n      }\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      attemptCollectionDelete(cloudClient, testCollectionName);\n    }\n  }\n\n","sourceOld":"  /**\n   * Test that FORCELEADER can set last published state of all down (live) replicas to active (so\n   * that they become worthy candidates for leader election).\n   */\n  @Slow\n  public void testLastPublishedStateIsActive() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_last_published\";\n    createCollection(testCollectionName, 1, 3, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n    log.info(\"Collection created: \" + testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      // Mark all replicas down\n      setReplicaState(testCollectionName, SHARD1, leader, State.DOWN);\n      for (Replica rep : notLeaders) {\n        setReplicaState(testCollectionName, SHARD1, rep, State.DOWN);\n      }\n\n      zkController.getZkStateReader().forceUpdateCollection(testCollectionName);\n      // Assert all replicas are down and that there is no leader\n      assertEquals(0, getActiveOrRecoveringReplicas(testCollectionName, SHARD1).size());\n\n      // Now force leader\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // Assert that last published states of the two replicas are active now\n      for (Replica rep: notLeaders) {\n        assertEquals(Replica.State.ACTIVE, getLastPublishedState(testCollectionName, SHARD1, rep));\n      }\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      attemptCollectionDelete(cloudClient, testCollectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84f20f331d8001864545c7021812d8c6509c7593","date":1517216128,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testLastPublishedStateIsActive().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testLastPublishedStateIsActive().mjava","sourceNew":"  /**\n   * Test that FORCELEADER can set last published state of all down (live) replicas to active (so\n   * that they become worthy candidates for leader election).\n   */\n  @Slow\n  public void testLastPublishedStateIsActive() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_last_published\";\n    createOldLirCollection(testCollectionName, 3);\n    cloudClient.setDefaultCollection(testCollectionName);\n    log.info(\"Collection created: \" + testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      // Mark all replicas down\n      setReplicaState(testCollectionName, SHARD1, leader, State.DOWN);\n      for (Replica rep : notLeaders) {\n        setReplicaState(testCollectionName, SHARD1, rep, State.DOWN);\n      }\n\n      zkController.getZkStateReader().forceUpdateCollection(testCollectionName);\n      // Assert all replicas are down and that there is no leader\n      assertEquals(0, getActiveOrRecoveringReplicas(testCollectionName, SHARD1).size());\n\n      // Now force leader\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // Assert that last published states of the two replicas are active now\n      for (Replica rep: notLeaders) {\n        assertEquals(Replica.State.ACTIVE, getLastPublishedState(testCollectionName, SHARD1, rep));\n      }\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      attemptCollectionDelete(cloudClient, testCollectionName);\n    }\n  }\n\n","sourceOld":"  /**\n   * Test that FORCELEADER can set last published state of all down (live) replicas to active (so\n   * that they become worthy candidates for leader election).\n   */\n  @Slow\n  public void testLastPublishedStateIsActive() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_last_published\";\n    createCollection(testCollectionName, \"conf1\", 1, 3, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n    log.info(\"Collection created: \" + testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      // Mark all replicas down\n      setReplicaState(testCollectionName, SHARD1, leader, State.DOWN);\n      for (Replica rep : notLeaders) {\n        setReplicaState(testCollectionName, SHARD1, rep, State.DOWN);\n      }\n\n      zkController.getZkStateReader().forceUpdateCollection(testCollectionName);\n      // Assert all replicas are down and that there is no leader\n      assertEquals(0, getActiveOrRecoveringReplicas(testCollectionName, SHARD1).size());\n\n      // Now force leader\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // Assert that last published states of the two replicas are active now\n      for (Replica rep: notLeaders) {\n        assertEquals(Replica.State.ACTIVE, getLastPublishedState(testCollectionName, SHARD1, rep));\n      }\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      attemptCollectionDelete(cloudClient, testCollectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"667464d9fbdf240710796210f6fcf610b9fff5dc","date":1520242425,"type":4,"author":"Cao Manh Dat","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testLastPublishedStateIsActive().mjava","sourceNew":null,"sourceOld":"  /**\n   * Test that FORCELEADER can set last published state of all down (live) replicas to active (so\n   * that they become worthy candidates for leader election).\n   */\n  @Slow\n  public void testLastPublishedStateIsActive() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_last_published\";\n    createOldLirCollection(testCollectionName, 3);\n    cloudClient.setDefaultCollection(testCollectionName);\n    log.info(\"Collection created: \" + testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      // Mark all replicas down\n      setReplicaState(testCollectionName, SHARD1, leader, State.DOWN);\n      for (Replica rep : notLeaders) {\n        setReplicaState(testCollectionName, SHARD1, rep, State.DOWN);\n      }\n\n      zkController.getZkStateReader().forceUpdateCollection(testCollectionName);\n      // Assert all replicas are down and that there is no leader\n      assertEquals(0, getActiveOrRecoveringReplicas(testCollectionName, SHARD1).size());\n\n      // Now force leader\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // Assert that last published states of the two replicas are active now\n      for (Replica rep: notLeaders) {\n        assertEquals(Replica.State.ACTIVE, getLastPublishedState(testCollectionName, SHARD1, rep));\n      }\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      attemptCollectionDelete(cloudClient, testCollectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"197bbedf08450ade98a11f4a0001448059666bec":["42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"667464d9fbdf240710796210f6fcf610b9fff5dc":["84f20f331d8001864545c7021812d8c6509c7593"],"ac97ea104d893f16aab430d9904473bc1f233f3c":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"84f20f331d8001864545c7021812d8c6509c7593":["28288370235ed02234a64753cdbf0c6ec096304a"],"3217321f3e1d7922898c6c633d17acfa840d6875":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","ac97ea104d893f16aab430d9904473bc1f233f3c"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["1088b72b3b4cc45316b7595bd09023c859cd2327"],"28288370235ed02234a64753cdbf0c6ec096304a":["3217321f3e1d7922898c6c633d17acfa840d6875","197bbedf08450ade98a11f4a0001448059666bec"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","3217321f3e1d7922898c6c633d17acfa840d6875"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"1088b72b3b4cc45316b7595bd09023c859cd2327":["55dd60b0ec28d5f9b8d178ab4d1cc3abb74c3e05"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["e9017cf144952056066919f1ebc7897ff9bd71b1","197bbedf08450ade98a11f4a0001448059666bec"],"55dd60b0ec28d5f9b8d178ab4d1cc3abb74c3e05":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["667464d9fbdf240710796210f6fcf610b9fff5dc"]},"commit2Childs":{"197bbedf08450ade98a11f4a0001448059666bec":["28288370235ed02234a64753cdbf0c6ec096304a","fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"667464d9fbdf240710796210f6fcf610b9fff5dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ac97ea104d893f16aab430d9904473bc1f233f3c":["3217321f3e1d7922898c6c633d17acfa840d6875"],"84f20f331d8001864545c7021812d8c6509c7593":["667464d9fbdf240710796210f6fcf610b9fff5dc"],"3217321f3e1d7922898c6c633d17acfa840d6875":["28288370235ed02234a64753cdbf0c6ec096304a","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["ac97ea104d893f16aab430d9904473bc1f233f3c","3217321f3e1d7922898c6c633d17acfa840d6875","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f","e9017cf144952056066919f1ebc7897ff9bd71b1"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["197bbedf08450ade98a11f4a0001448059666bec","e9017cf144952056066919f1ebc7897ff9bd71b1"],"28288370235ed02234a64753cdbf0c6ec096304a":["84f20f331d8001864545c7021812d8c6509c7593"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"1088b72b3b4cc45316b7595bd09023c859cd2327":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["55dd60b0ec28d5f9b8d178ab4d1cc3abb74c3e05"],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":[],"55dd60b0ec28d5f9b8d178ab4d1cc3abb74c3e05":["1088b72b3b4cc45316b7595bd09023c859cd2327"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}