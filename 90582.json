{"path":"lucene/core/src/java/org/apache/lucene/util/compress/LZ4.HighCompressionHashTable#assertReset().mjava","commits":[{"id":"9407318969e8504257b4c5764c65755a043e5404","date":1579873617,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/compress/LZ4.HighCompressionHashTable#assertReset().mjava","pathOld":"/dev/null","sourceNew":"    private boolean assertReset() {\n      for (int i = 0; i < chainTable.length; ++i) {\n        assert chainTable[i] == (short) 0xFFFF : i;\n      }\n      return true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7f23a2de93b387aeffe7df370c84823b7249701","date":1580229943,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/compress/LZ4.HighCompressionHashTable#assertReset().mjava","sourceNew":null,"sourceOld":"    private boolean assertReset() {\n      for (int i = 0; i < chainTable.length; ++i) {\n        assert chainTable[i] == (short) 0xFFFF : i;\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73b69281a3588aa8c44997f4a9fa3570d61704f","date":1581673026,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/compress/LZ4.HighCompressionHashTable#assertReset().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    boolean assertReset() {\n      for (int i = 0; i < chainTable.length; ++i) {\n        assert chainTable[i] == (short) 0xFFFF : i;\n      }\n      return true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f66eaefcdea9f8ffcf9508f78556159d61b8e3df","date":1581695213,"type":0,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/compress/LZ4.HighCompressionHashTable#assertReset().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    boolean assertReset() {\n      for (int i = 0; i < chainTable.length; ++i) {\n        assert chainTable[i] == (short) 0xFFFF : i;\n      }\n      return true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e73b69281a3588aa8c44997f4a9fa3570d61704f":["a7f23a2de93b387aeffe7df370c84823b7249701"],"f66eaefcdea9f8ffcf9508f78556159d61b8e3df":["a7f23a2de93b387aeffe7df370c84823b7249701","e73b69281a3588aa8c44997f4a9fa3570d61704f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9407318969e8504257b4c5764c65755a043e5404":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a7f23a2de93b387aeffe7df370c84823b7249701":["9407318969e8504257b4c5764c65755a043e5404"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f66eaefcdea9f8ffcf9508f78556159d61b8e3df"]},"commit2Childs":{"e73b69281a3588aa8c44997f4a9fa3570d61704f":["f66eaefcdea9f8ffcf9508f78556159d61b8e3df"],"f66eaefcdea9f8ffcf9508f78556159d61b8e3df":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9407318969e8504257b4c5764c65755a043e5404"],"9407318969e8504257b4c5764c65755a043e5404":["a7f23a2de93b387aeffe7df370c84823b7249701"],"a7f23a2de93b387aeffe7df370c84823b7249701":["e73b69281a3588aa8c44997f4a9fa3570d61704f","f66eaefcdea9f8ffcf9508f78556159d61b8e3df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}