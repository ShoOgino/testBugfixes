{"path":"lucene/src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","sourceNew":"  // test sorting when the sort field is empty (undefined) for some of the documents\n  public void testEmptyFieldSort() throws Exception {\n    sort.setSort (new SortField (\"string\", SortField.STRING) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"string\", SortField.STRING, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH));\n    assertMatches (full, queryF, sort, \"ZJI\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH, true));\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT) );\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true) );\n    assertMatches (full, queryF, sort, \"JZI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    // using a nonexisting field as first sort key shouldn't make a difference:\n    sort.setSort (new SortField (\"nosuchfield\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    // When a field is null for both documents, the next SortField should be used.\n                // Works for\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryG, sort, \"ZWXY\");\n\n    // Reverse the last criterium to make sure the test didn't pass by chance\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryG, sort, \"ZYXW\");\n\n    // Do the same for a MultiSearcher\n    Searcher multiSearcher=new MultiSearcher (new Searchable[] { full });\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (multiSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (multiSearcher, queryG, sort, \"ZYXW\");\n    // Don't close the multiSearcher. it would close the full searcher too!\n\n    // Do the same for a ParallelMultiSearcher\n                Searcher parallelSearcher=new ParallelMultiSearcher (new Searchable[] { full });\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n    // Don't close the parallelSearcher. it would close the full searcher too!\n  }\n\n","sourceOld":"  // test sorting when the sort field is empty (undefined) for some of the documents\n  public void testEmptyFieldSort() throws Exception {\n    sort.setSort (new SortField (\"string\", SortField.STRING) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"string\", SortField.STRING, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH));\n    assertMatches (full, queryF, sort, \"ZJI\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH, true));\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT) );\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true) );\n    assertMatches (full, queryF, sort, \"JZI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    // using a nonexisting field as first sort key shouldn't make a difference:\n    sort.setSort (new SortField (\"nosuchfield\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    // When a field is null for both documents, the next SortField should be used.\n                // Works for\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryG, sort, \"ZWXY\");\n\n    // Reverse the last criterium to make sure the test didn't pass by chance\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryG, sort, \"ZYXW\");\n\n    // Do the same for a MultiSearcher\n    Searcher multiSearcher=new MultiSearcher (new Searchable[] { full });\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (multiSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (multiSearcher, queryG, sort, \"ZYXW\");\n    // Don't close the multiSearcher. it would close the full searcher too!\n\n    // Do the same for a ParallelMultiSearcher\n                Searcher parallelSearcher=new ParallelMultiSearcher (new Searchable[] { full });\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n    // Don't close the parallelSearcher. it would close the full searcher too!\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","sourceNew":"  // test sorting when the sort field is empty (undefined) for some of the documents\n  public void testEmptyFieldSort() throws Exception {\n    sort.setSort (new SortField (\"string\", SortField.STRING) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"string\", SortField.STRING, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH));\n    assertMatches (full, queryF, sort, \"ZJI\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH, true));\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT) );\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true) );\n    assertMatches (full, queryF, sort, \"JZI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    // using a nonexisting field as first sort key shouldn't make a difference:\n    sort.setSort (new SortField (\"nosuchfield\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    // When a field is null for both documents, the next SortField should be used.\n                // Works for\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryG, sort, \"ZWXY\");\n\n    // Reverse the last criterium to make sure the test didn't pass by chance\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryG, sort, \"ZYXW\");\n\n    // Do the same for a MultiSearcher\n    Searcher multiSearcher=new MultiSearcher (full);\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (multiSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (multiSearcher, queryG, sort, \"ZYXW\");\n    // Don't close the multiSearcher. it would close the full searcher too!\n\n    // Do the same for a ParallelMultiSearcher\n                Searcher parallelSearcher=new ParallelMultiSearcher (full);\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n    // Don't close the parallelSearcher. it would close the full searcher too!\n  }\n\n","sourceOld":"  // test sorting when the sort field is empty (undefined) for some of the documents\n  public void testEmptyFieldSort() throws Exception {\n    sort.setSort (new SortField (\"string\", SortField.STRING) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"string\", SortField.STRING, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH));\n    assertMatches (full, queryF, sort, \"ZJI\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH, true));\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT) );\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true) );\n    assertMatches (full, queryF, sort, \"JZI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    // using a nonexisting field as first sort key shouldn't make a difference:\n    sort.setSort (new SortField (\"nosuchfield\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    // When a field is null for both documents, the next SortField should be used.\n                // Works for\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryG, sort, \"ZWXY\");\n\n    // Reverse the last criterium to make sure the test didn't pass by chance\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryG, sort, \"ZYXW\");\n\n    // Do the same for a MultiSearcher\n    Searcher multiSearcher=new MultiSearcher (new Searchable[] { full });\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (multiSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (multiSearcher, queryG, sort, \"ZYXW\");\n    // Don't close the multiSearcher. it would close the full searcher too!\n\n    // Do the same for a ParallelMultiSearcher\n                Searcher parallelSearcher=new ParallelMultiSearcher (new Searchable[] { full });\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n    // Don't close the parallelSearcher. it would close the full searcher too!\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","sourceNew":"  // test sorting when the sort field is empty (undefined) for some of the documents\n  public void testEmptyFieldSort() throws Exception {\n    sort.setSort (new SortField (\"string\", SortField.STRING) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"string\", SortField.STRING, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH));\n    assertMatches (full, queryF, sort, \"ZJI\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH, true));\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT) );\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true) );\n    assertMatches (full, queryF, sort, \"JZI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    // using a nonexisting field as first sort key shouldn't make a difference:\n    sort.setSort (new SortField (\"nosuchfield\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    // When a field is null for both documents, the next SortField should be used.\n                // Works for\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryG, sort, \"ZWXY\");\n\n    // Reverse the last criterium to make sure the test didn't pass by chance\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryG, sort, \"ZYXW\");\n\n    // Do the same for a MultiSearcher\n    Searcher multiSearcher=new MultiSearcher (full);\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (multiSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (multiSearcher, queryG, sort, \"ZYXW\");\n    // Don't close the multiSearcher. it would close the full searcher too!\n\n    // Do the same for a ParallelMultiSearcher\n                Searcher parallelSearcher=new ParallelMultiSearcher (full);\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n    // Don't close the parallelSearcher. it would close the full searcher too!\n  }\n\n","sourceOld":"  // test sorting when the sort field is empty (undefined) for some of the documents\n  public void testEmptyFieldSort() throws Exception {\n    sort.setSort (new SortField (\"string\", SortField.STRING) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"string\", SortField.STRING, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH));\n    assertMatches (full, queryF, sort, \"ZJI\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH, true));\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT) );\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true) );\n    assertMatches (full, queryF, sort, \"JZI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    // using a nonexisting field as first sort key shouldn't make a difference:\n    sort.setSort (new SortField (\"nosuchfield\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    // When a field is null for both documents, the next SortField should be used.\n                // Works for\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryG, sort, \"ZWXY\");\n\n    // Reverse the last criterium to make sure the test didn't pass by chance\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryG, sort, \"ZYXW\");\n\n    // Do the same for a MultiSearcher\n    Searcher multiSearcher=new MultiSearcher (new Searchable[] { full });\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (multiSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (multiSearcher, queryG, sort, \"ZYXW\");\n    // Don't close the multiSearcher. it would close the full searcher too!\n\n    // Do the same for a ParallelMultiSearcher\n                Searcher parallelSearcher=new ParallelMultiSearcher (new Searchable[] { full });\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n    // Don't close the parallelSearcher. it would close the full searcher too!\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7fc5a2665a7fa1b9450097ae658193a11ee4d02c","date":1292699695,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","sourceNew":"  // test sorting when the sort field is empty (undefined) for some of the documents\n  public void testEmptyFieldSort() throws Exception {\n    sort.setSort (new SortField (\"string\", SortField.STRING) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"string\", SortField.STRING, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH));\n    assertMatches (full, queryF, sort, \"ZJI\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH, true));\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT) );\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true) );\n    assertMatches (full, queryF, sort, \"JZI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    // using a nonexisting field as first sort key shouldn't make a difference:\n    sort.setSort (new SortField (\"nosuchfield\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    // When a field is null for both documents, the next SortField should be used.\n                // Works for\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryG, sort, \"ZWXY\");\n\n    // Reverse the last criterium to make sure the test didn't pass by chance\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryG, sort, \"ZYXW\");\n\n    // Do the same for a MultiSearcher\n    Searcher multiSearcher=new MultiSearcher (full);\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (multiSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (multiSearcher, queryG, sort, \"ZYXW\");\n    // Don't close the multiSearcher. it would close the full searcher too!\n\n    // Do the same for a ParallelMultiSearcher\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    Searcher parallelSearcher=new ParallelMultiSearcher (exec, full);\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n    parallelSearcher.close();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","sourceOld":"  // test sorting when the sort field is empty (undefined) for some of the documents\n  public void testEmptyFieldSort() throws Exception {\n    sort.setSort (new SortField (\"string\", SortField.STRING) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"string\", SortField.STRING, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH));\n    assertMatches (full, queryF, sort, \"ZJI\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH, true));\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT) );\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true) );\n    assertMatches (full, queryF, sort, \"JZI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    // using a nonexisting field as first sort key shouldn't make a difference:\n    sort.setSort (new SortField (\"nosuchfield\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    // When a field is null for both documents, the next SortField should be used.\n                // Works for\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryG, sort, \"ZWXY\");\n\n    // Reverse the last criterium to make sure the test didn't pass by chance\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryG, sort, \"ZYXW\");\n\n    // Do the same for a MultiSearcher\n    Searcher multiSearcher=new MultiSearcher (full);\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (multiSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (multiSearcher, queryG, sort, \"ZYXW\");\n    // Don't close the multiSearcher. it would close the full searcher too!\n\n    // Do the same for a ParallelMultiSearcher\n                Searcher parallelSearcher=new ParallelMultiSearcher (full);\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n    // Don't close the parallelSearcher. it would close the full searcher too!\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","sourceNew":"  // test sorting when the sort field is empty (undefined) for some of the documents\n  public void testEmptyFieldSort() throws Exception {\n    sort.setSort (new SortField (\"string\", SortField.STRING) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"string\", SortField.STRING, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH));\n    assertMatches (full, queryF, sort, \"ZJI\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH, true));\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT) );\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true) );\n    assertMatches (full, queryF, sort, \"JZI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    // using a nonexisting field as first sort key shouldn't make a difference:\n    sort.setSort (new SortField (\"nosuchfield\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    // When a field is null for both documents, the next SortField should be used.\n                // Works for\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryG, sort, \"ZWXY\");\n\n    // Reverse the last criterium to make sure the test didn't pass by chance\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryG, sort, \"ZYXW\");\n\n    // Do the same for a MultiSearcher\n    Searcher multiSearcher=new MultiSearcher (full);\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (multiSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (multiSearcher, queryG, sort, \"ZYXW\");\n    // Don't close the multiSearcher. it would close the full searcher too!\n\n    // Do the same for a ParallelMultiSearcher\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    Searcher parallelSearcher=new ParallelMultiSearcher (exec, full);\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n    parallelSearcher.close();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","sourceOld":"  // test sorting when the sort field is empty (undefined) for some of the documents\n  public void testEmptyFieldSort() throws Exception {\n    sort.setSort (new SortField (\"string\", SortField.STRING) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"string\", SortField.STRING, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH));\n    assertMatches (full, queryF, sort, \"ZJI\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH, true));\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT) );\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true) );\n    assertMatches (full, queryF, sort, \"JZI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    // using a nonexisting field as first sort key shouldn't make a difference:\n    sort.setSort (new SortField (\"nosuchfield\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    // When a field is null for both documents, the next SortField should be used.\n                // Works for\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryG, sort, \"ZWXY\");\n\n    // Reverse the last criterium to make sure the test didn't pass by chance\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryG, sort, \"ZYXW\");\n\n    // Do the same for a MultiSearcher\n    Searcher multiSearcher=new MultiSearcher (full);\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (multiSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (multiSearcher, queryG, sort, \"ZYXW\");\n    // Don't close the multiSearcher. it would close the full searcher too!\n\n    // Do the same for a ParallelMultiSearcher\n                Searcher parallelSearcher=new ParallelMultiSearcher (full);\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n    // Don't close the parallelSearcher. it would close the full searcher too!\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","sourceNew":"  // test sorting when the sort field is empty (undefined) for some of the documents\n  public void testEmptyFieldSort() throws Exception {\n    sort.setSort (new SortField (\"string\", SortField.STRING) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"string\", SortField.STRING, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH));\n    assertMatches (full, queryF, sort, \"ZJI\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH, true));\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT) );\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true) );\n    assertMatches (full, queryF, sort, \"JZI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    // using a nonexisting field as first sort key shouldn't make a difference:\n    sort.setSort (new SortField (\"nosuchfield\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    // When a field is null for both documents, the next SortField should be used.\n                // Works for\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryG, sort, \"ZWXY\");\n\n    // Reverse the last criterium to make sure the test didn't pass by chance\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryG, sort, \"ZYXW\");\n\n    // Do the same for a MultiSearcher\n    Searcher multiSearcher=new MultiSearcher (full);\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (multiSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (multiSearcher, queryG, sort, \"ZYXW\");\n    // Don't close the multiSearcher. it would close the full searcher too!\n\n    // Do the same for a ParallelMultiSearcher\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    Searcher parallelSearcher=new ParallelMultiSearcher (exec, full);\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n    parallelSearcher.close();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","sourceOld":"  // test sorting when the sort field is empty (undefined) for some of the documents\n  public void testEmptyFieldSort() throws Exception {\n    sort.setSort (new SortField (\"string\", SortField.STRING) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"string\", SortField.STRING, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH));\n    assertMatches (full, queryF, sort, \"ZJI\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH, true));\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT) );\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true) );\n    assertMatches (full, queryF, sort, \"JZI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    // using a nonexisting field as first sort key shouldn't make a difference:\n    sort.setSort (new SortField (\"nosuchfield\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    // When a field is null for both documents, the next SortField should be used.\n                // Works for\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryG, sort, \"ZWXY\");\n\n    // Reverse the last criterium to make sure the test didn't pass by chance\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryG, sort, \"ZYXW\");\n\n    // Do the same for a MultiSearcher\n    Searcher multiSearcher=new MultiSearcher (new Searchable[] { full });\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (multiSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (multiSearcher, queryG, sort, \"ZYXW\");\n    // Don't close the multiSearcher. it would close the full searcher too!\n\n    // Do the same for a ParallelMultiSearcher\n                Searcher parallelSearcher=new ParallelMultiSearcher (new Searchable[] { full });\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n    // Don't close the parallelSearcher. it would close the full searcher too!\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","sourceNew":"  // test sorting when the sort field is empty (undefined) for some of the documents\n  public void testEmptyFieldSort() throws Exception {\n    sort.setSort (new SortField (\"string\", SortField.STRING) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"string\", SortField.STRING, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH));\n    assertMatches (full, queryF, sort, \"ZJI\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH, true));\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT) );\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true) );\n    assertMatches (full, queryF, sort, \"JZI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    // using a nonexisting field as first sort key shouldn't make a difference:\n    sort.setSort (new SortField (\"nosuchfield\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    // When a field is null for both documents, the next SortField should be used.\n                // Works for\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryG, sort, \"ZWXY\");\n\n    // Reverse the last criterium to make sure the test didn't pass by chance\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryG, sort, \"ZYXW\");\n\n    // Do the same for a ParallelMultiSearcher\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    IndexSearcher parallelSearcher=new IndexSearcher (full.getIndexReader(), exec);\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n    parallelSearcher.close();\n    exec.shutdown();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","sourceOld":"  // test sorting when the sort field is empty (undefined) for some of the documents\n  public void testEmptyFieldSort() throws Exception {\n    sort.setSort (new SortField (\"string\", SortField.STRING) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"string\", SortField.STRING, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH));\n    assertMatches (full, queryF, sort, \"ZJI\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH, true));\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT) );\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true) );\n    assertMatches (full, queryF, sort, \"JZI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    // using a nonexisting field as first sort key shouldn't make a difference:\n    sort.setSort (new SortField (\"nosuchfield\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    // When a field is null for both documents, the next SortField should be used.\n                // Works for\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryG, sort, \"ZWXY\");\n\n    // Reverse the last criterium to make sure the test didn't pass by chance\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryG, sort, \"ZYXW\");\n\n    // Do the same for a MultiSearcher\n    Searcher multiSearcher=new MultiSearcher (full);\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (multiSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (multiSearcher, queryG, sort, \"ZYXW\");\n    // Don't close the multiSearcher. it would close the full searcher too!\n\n    // Do the same for a ParallelMultiSearcher\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    Searcher parallelSearcher=new ParallelMultiSearcher (exec, full);\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n    parallelSearcher.close();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","sourceNew":"  // test sorting when the sort field is empty (undefined) for some of the documents\n  public void testEmptyFieldSort() throws Exception {\n    sort.setSort (new SortField (\"string\", SortField.STRING) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"string\", SortField.STRING, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH));\n    assertMatches (full, queryF, sort, \"ZJI\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH, true));\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT) );\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true) );\n    assertMatches (full, queryF, sort, \"JZI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    // using a nonexisting field as first sort key shouldn't make a difference:\n    sort.setSort (new SortField (\"nosuchfield\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    // When a field is null for both documents, the next SortField should be used.\n                // Works for\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryG, sort, \"ZWXY\");\n\n    // Reverse the last criterium to make sure the test didn't pass by chance\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryG, sort, \"ZYXW\");\n\n    // Do the same for a ParallelMultiSearcher\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    IndexSearcher parallelSearcher=new IndexSearcher (full.getIndexReader(), exec);\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n    parallelSearcher.close();\n    exec.shutdown();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","sourceOld":"  // test sorting when the sort field is empty (undefined) for some of the documents\n  public void testEmptyFieldSort() throws Exception {\n    sort.setSort (new SortField (\"string\", SortField.STRING) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"string\", SortField.STRING, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH));\n    assertMatches (full, queryF, sort, \"ZJI\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH, true));\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT) );\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true) );\n    assertMatches (full, queryF, sort, \"JZI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    // using a nonexisting field as first sort key shouldn't make a difference:\n    sort.setSort (new SortField (\"nosuchfield\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    // When a field is null for both documents, the next SortField should be used.\n                // Works for\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryG, sort, \"ZWXY\");\n\n    // Reverse the last criterium to make sure the test didn't pass by chance\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryG, sort, \"ZYXW\");\n\n    // Do the same for a MultiSearcher\n    Searcher multiSearcher=new MultiSearcher (full);\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (multiSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (multiSearcher, queryG, sort, \"ZYXW\");\n    // Don't close the multiSearcher. it would close the full searcher too!\n\n    // Do the same for a ParallelMultiSearcher\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    Searcher parallelSearcher=new ParallelMultiSearcher (exec, full);\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n    parallelSearcher.close();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","sourceNew":"  // test sorting when the sort field is empty (undefined) for some of the documents\n  public void testEmptyFieldSort() throws Exception {\n    sort.setSort (new SortField (\"string\", SortField.STRING) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"string\", SortField.STRING, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH));\n    assertMatches (full, queryF, sort, \"ZJI\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH, true));\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT) );\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true) );\n    assertMatches (full, queryF, sort, \"JZI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    // using a nonexisting field as first sort key shouldn't make a difference:\n    sort.setSort (new SortField (\"nosuchfield\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    // When a field is null for both documents, the next SortField should be used.\n                // Works for\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryG, sort, \"ZWXY\");\n\n    // Reverse the last criterium to make sure the test didn't pass by chance\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryG, sort, \"ZYXW\");\n\n    // Do the same for a ParallelMultiSearcher\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    IndexSearcher parallelSearcher=new IndexSearcher (full.getIndexReader(), exec);\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n    parallelSearcher.close();\n    exec.shutdown();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","sourceOld":"  // test sorting when the sort field is empty (undefined) for some of the documents\n  public void testEmptyFieldSort() throws Exception {\n    sort.setSort (new SortField (\"string\", SortField.STRING) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"string\", SortField.STRING, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH));\n    assertMatches (full, queryF, sort, \"ZJI\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH, true));\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT) );\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true) );\n    assertMatches (full, queryF, sort, \"JZI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    // using a nonexisting field as first sort key shouldn't make a difference:\n    sort.setSort (new SortField (\"nosuchfield\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    // When a field is null for both documents, the next SortField should be used.\n                // Works for\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryG, sort, \"ZWXY\");\n\n    // Reverse the last criterium to make sure the test didn't pass by chance\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryG, sort, \"ZYXW\");\n\n    // Do the same for a MultiSearcher\n    Searcher multiSearcher=new MultiSearcher (full);\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (multiSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (multiSearcher, queryG, sort, \"ZYXW\");\n    // Don't close the multiSearcher. it would close the full searcher too!\n\n    // Do the same for a ParallelMultiSearcher\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    Searcher parallelSearcher=new ParallelMultiSearcher (exec, full);\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n    parallelSearcher.close();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e492fb0f2bb0b4b47208286f9331ff55963c656","date":1298870150,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","sourceNew":"  // test sorting when the sort field is empty (undefined) for some of the documents\n  public void testEmptyFieldSort() throws Exception {\n    sort.setSort (new SortField (\"string\", SortField.STRING) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"string\", SortField.STRING, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n    \n    sort.setSort (new SortField (\"int\", SortField.INT) );\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true) );\n    assertMatches (full, queryF, sort, \"JZI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    // using a nonexisting field as first sort key shouldn't make a difference:\n    sort.setSort (new SortField (\"nosuchfield\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    // When a field is null for both documents, the next SortField should be used.\n                // Works for\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryG, sort, \"ZWXY\");\n\n    // Reverse the last criterium to make sure the test didn't pass by chance\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryG, sort, \"ZYXW\");\n\n    // Do the same for a ParallelMultiSearcher\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    IndexSearcher parallelSearcher=new IndexSearcher (full.getIndexReader(), exec);\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n    parallelSearcher.close();\n    exec.shutdown();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","sourceOld":"  // test sorting when the sort field is empty (undefined) for some of the documents\n  public void testEmptyFieldSort() throws Exception {\n    sort.setSort (new SortField (\"string\", SortField.STRING) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"string\", SortField.STRING, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH));\n    assertMatches (full, queryF, sort, \"ZJI\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH, true));\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT) );\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true) );\n    assertMatches (full, queryF, sort, \"JZI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    // using a nonexisting field as first sort key shouldn't make a difference:\n    sort.setSort (new SortField (\"nosuchfield\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    // When a field is null for both documents, the next SortField should be used.\n                // Works for\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryG, sort, \"ZWXY\");\n\n    // Reverse the last criterium to make sure the test didn't pass by chance\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryG, sort, \"ZYXW\");\n\n    // Do the same for a ParallelMultiSearcher\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    IndexSearcher parallelSearcher=new IndexSearcher (full.getIndexReader(), exec);\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n    parallelSearcher.close();\n    exec.shutdown();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","sourceNew":"  // test sorting when the sort field is empty (undefined) for some of the documents\n  public void testEmptyFieldSort() throws Exception {\n    sort.setSort (new SortField (\"string\", SortField.STRING) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"string\", SortField.STRING, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n    \n    sort.setSort (new SortField (\"int\", SortField.INT) );\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true) );\n    assertMatches (full, queryF, sort, \"JZI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    // using a nonexisting field as first sort key shouldn't make a difference:\n    sort.setSort (new SortField (\"nosuchfield\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    // When a field is null for both documents, the next SortField should be used.\n                // Works for\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryG, sort, \"ZWXY\");\n\n    // Reverse the last criterium to make sure the test didn't pass by chance\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryG, sort, \"ZYXW\");\n\n    // Do the same for a ParallelMultiSearcher\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    IndexSearcher parallelSearcher=new IndexSearcher (full.getIndexReader(), exec);\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n    parallelSearcher.close();\n    exec.shutdown();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","sourceOld":"  // test sorting when the sort field is empty (undefined) for some of the documents\n  public void testEmptyFieldSort() throws Exception {\n    sort.setSort (new SortField (\"string\", SortField.STRING) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"string\", SortField.STRING, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH));\n    assertMatches (full, queryF, sort, \"ZJI\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH, true));\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT) );\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true) );\n    assertMatches (full, queryF, sort, \"JZI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    // using a nonexisting field as first sort key shouldn't make a difference:\n    sort.setSort (new SortField (\"nosuchfield\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    // When a field is null for both documents, the next SortField should be used.\n                // Works for\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryG, sort, \"ZWXY\");\n\n    // Reverse the last criterium to make sure the test didn't pass by chance\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryG, sort, \"ZYXW\");\n\n    // Do the same for a ParallelMultiSearcher\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    IndexSearcher parallelSearcher=new IndexSearcher (full.getIndexReader(), exec);\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n    parallelSearcher.close();\n    exec.shutdown();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","sourceNew":"  // test sorting when the sort field is empty (undefined) for some of the documents\n  public void testEmptyFieldSort() throws Exception {\n    sort.setSort (new SortField (\"string\", SortField.STRING) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"string\", SortField.STRING, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n    \n    sort.setSort (new SortField (\"int\", SortField.INT) );\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true) );\n    assertMatches (full, queryF, sort, \"JZI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    // using a nonexisting field as first sort key shouldn't make a difference:\n    sort.setSort (new SortField (\"nosuchfield\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    // When a field is null for both documents, the next SortField should be used.\n                // Works for\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryG, sort, \"ZWXY\");\n\n    // Reverse the last criterium to make sure the test didn't pass by chance\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryG, sort, \"ZYXW\");\n\n    // Do the same for a ParallelMultiSearcher\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    IndexSearcher parallelSearcher=new IndexSearcher (full.getIndexReader(), exec);\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n    parallelSearcher.close();\n    exec.shutdown();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","sourceOld":"  // test sorting when the sort field is empty (undefined) for some of the documents\n  public void testEmptyFieldSort() throws Exception {\n    sort.setSort (new SortField (\"string\", SortField.STRING) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"string\", SortField.STRING, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH));\n    assertMatches (full, queryF, sort, \"ZJI\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH, true));\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT) );\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true) );\n    assertMatches (full, queryF, sort, \"JZI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    // using a nonexisting field as first sort key shouldn't make a difference:\n    sort.setSort (new SortField (\"nosuchfield\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    // When a field is null for both documents, the next SortField should be used.\n                // Works for\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryG, sort, \"ZWXY\");\n\n    // Reverse the last criterium to make sure the test didn't pass by chance\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryG, sort, \"ZYXW\");\n\n    // Do the same for a ParallelMultiSearcher\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    IndexSearcher parallelSearcher=new IndexSearcher (full.getIndexReader(), exec);\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n    parallelSearcher.close();\n    exec.shutdown();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9235b9d4454a46c066cda47fed7ca0a34e614529","date":1304414372,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","sourceNew":"  // test sorting when the sort field is empty (undefined) for some of the documents\n  public void testEmptyFieldSort() throws Exception {\n    sort.setSort (new SortField (\"string\", SortField.STRING) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"string\", SortField.STRING, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n    \n    sort.setSort (new SortField (\"int\", SortField.INT) );\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (useDocValues(new SortField (\"int\", SortField.INT)) );\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true) );\n    assertMatches (full, queryF, sort, \"JZI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n    \n    sort.setSort (useDocValues(new SortField (\"float\", SortField.FLOAT)) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    // using a nonexisting field as first sort key shouldn't make a difference:\n    sort.setSort (new SortField (\"nosuchfield\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    // When a field is null for both documents, the next SortField should be used.\n                // Works for\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryG, sort, \"ZWXY\");\n\n    // Reverse the last criterium to make sure the test didn't pass by chance\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryG, sort, \"ZYXW\");\n\n    // Do the same for a ParallelMultiSearcher\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    IndexSearcher parallelSearcher=new IndexSearcher (full.getIndexReader(), exec);\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n    parallelSearcher.close();\n    exec.shutdown();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","sourceOld":"  // test sorting when the sort field is empty (undefined) for some of the documents\n  public void testEmptyFieldSort() throws Exception {\n    sort.setSort (new SortField (\"string\", SortField.STRING) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"string\", SortField.STRING, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n    \n    sort.setSort (new SortField (\"int\", SortField.INT) );\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true) );\n    assertMatches (full, queryF, sort, \"JZI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    // using a nonexisting field as first sort key shouldn't make a difference:\n    sort.setSort (new SortField (\"nosuchfield\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    // When a field is null for both documents, the next SortField should be used.\n                // Works for\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryG, sort, \"ZWXY\");\n\n    // Reverse the last criterium to make sure the test didn't pass by chance\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryG, sort, \"ZYXW\");\n\n    // Do the same for a ParallelMultiSearcher\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    IndexSearcher parallelSearcher=new IndexSearcher (full.getIndexReader(), exec);\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n    parallelSearcher.close();\n    exec.shutdown();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0cedee4c69436d5334e8f35463bf232084ff2fa3","date":1304587337,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","sourceNew":"  // test sorting when the sort field is empty (undefined) for some of the documents\n  public void testEmptyFieldSort() throws Exception {\n    sort.setSort (new SortField (\"string\", SortField.STRING) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"string\", SortField.STRING, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n    \n    sort.setSort (new SortField (\"int\", SortField.INT) );\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true) );\n    assertMatches (full, queryF, sort, \"JZI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    if (supportsDocValues) {\n      sort.setSort (useDocValues(new SortField (\"int\", SortField.INT)) );\n      assertMatches (full, queryF, sort, \"IZJ\");\n    \n      sort.setSort (useDocValues(new SortField (\"float\", SortField.FLOAT)) );\n      assertMatches (full, queryF, sort, \"ZJI\");\n    }\n\n    // using a nonexisting field as first sort key shouldn't make a difference:\n    sort.setSort (new SortField (\"nosuchfield\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    // When a field is null for both documents, the next SortField should be used.\n                // Works for\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryG, sort, \"ZWXY\");\n\n    // Reverse the last criterium to make sure the test didn't pass by chance\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryG, sort, \"ZYXW\");\n\n    // Do the same for a ParallelMultiSearcher\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    IndexSearcher parallelSearcher=new IndexSearcher (full.getIndexReader(), exec);\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n    parallelSearcher.close();\n    exec.shutdown();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","sourceOld":"  // test sorting when the sort field is empty (undefined) for some of the documents\n  public void testEmptyFieldSort() throws Exception {\n    sort.setSort (new SortField (\"string\", SortField.STRING) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"string\", SortField.STRING, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n    \n    sort.setSort (new SortField (\"int\", SortField.INT) );\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (useDocValues(new SortField (\"int\", SortField.INT)) );\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true) );\n    assertMatches (full, queryF, sort, \"JZI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n    \n    sort.setSort (useDocValues(new SortField (\"float\", SortField.FLOAT)) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    // using a nonexisting field as first sort key shouldn't make a difference:\n    sort.setSort (new SortField (\"nosuchfield\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    // When a field is null for both documents, the next SortField should be used.\n                // Works for\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryG, sort, \"ZWXY\");\n\n    // Reverse the last criterium to make sure the test didn't pass by chance\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryG, sort, \"ZYXW\");\n\n    // Do the same for a ParallelMultiSearcher\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    IndexSearcher parallelSearcher=new IndexSearcher (full.getIndexReader(), exec);\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n    parallelSearcher.close();\n    exec.shutdown();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","sourceNew":"  // test sorting when the sort field is empty (undefined) for some of the documents\n  public void testEmptyFieldSort() throws Exception {\n    sort.setSort (new SortField (\"string\", SortField.STRING) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"string\", SortField.STRING, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n    \n    sort.setSort (new SortField (\"int\", SortField.INT) );\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true) );\n    assertMatches (full, queryF, sort, \"JZI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    if (supportsDocValues) {\n      sort.setSort (useDocValues(new SortField (\"int\", SortField.INT)) );\n      assertMatches (full, queryF, sort, \"IZJ\");\n    \n      sort.setSort (useDocValues(new SortField (\"float\", SortField.FLOAT)) );\n      assertMatches (full, queryF, sort, \"ZJI\");\n    }\n\n    // using a nonexisting field as first sort key shouldn't make a difference:\n    sort.setSort (new SortField (\"nosuchfield\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    // When a field is null for both documents, the next SortField should be used.\n                // Works for\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryG, sort, \"ZWXY\");\n\n    // Reverse the last criterium to make sure the test didn't pass by chance\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryG, sort, \"ZYXW\");\n\n    // Do the same for a ParallelMultiSearcher\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    IndexSearcher parallelSearcher=new IndexSearcher (full.getIndexReader(), exec);\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n    parallelSearcher.close();\n    exec.shutdown();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","sourceOld":"  // test sorting when the sort field is empty (undefined) for some of the documents\n  public void testEmptyFieldSort() throws Exception {\n    sort.setSort (new SortField (\"string\", SortField.STRING) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"string\", SortField.STRING, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n    \n    sort.setSort (new SortField (\"int\", SortField.INT) );\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true) );\n    assertMatches (full, queryF, sort, \"JZI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    // using a nonexisting field as first sort key shouldn't make a difference:\n    sort.setSort (new SortField (\"nosuchfield\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    // When a field is null for both documents, the next SortField should be used.\n                // Works for\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryG, sort, \"ZWXY\");\n\n    // Reverse the last criterium to make sure the test didn't pass by chance\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryG, sort, \"ZYXW\");\n\n    // Do the same for a ParallelMultiSearcher\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    IndexSearcher parallelSearcher=new IndexSearcher (full.getIndexReader(), exec);\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n    parallelSearcher.close();\n    exec.shutdown();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","sourceNew":"  // test sorting when the sort field is empty (undefined) for some of the documents\n  public void testEmptyFieldSort() throws Exception {\n    sort.setSort (new SortField (\"string\", SortField.STRING) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"string\", SortField.STRING, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n    \n    sort.setSort (new SortField (\"int\", SortField.INT) );\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true) );\n    assertMatches (full, queryF, sort, \"JZI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    if (supportsDocValues) {\n      sort.setSort (useDocValues(new SortField (\"int\", SortField.INT)) );\n      assertMatches (full, queryF, sort, \"IZJ\");\n    \n      sort.setSort (useDocValues(new SortField (\"float\", SortField.FLOAT)) );\n      assertMatches (full, queryF, sort, \"ZJI\");\n    }\n\n    // using a nonexisting field as first sort key shouldn't make a difference:\n    sort.setSort (new SortField (\"nosuchfield\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    // When a field is null for both documents, the next SortField should be used.\n                // Works for\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryG, sort, \"ZWXY\");\n\n    // Reverse the last criterium to make sure the test didn't pass by chance\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryG, sort, \"ZYXW\");\n\n    // Do the same for a ParallelMultiSearcher\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    IndexSearcher parallelSearcher=new IndexSearcher (full.getIndexReader(), exec);\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n    parallelSearcher.close();\n    exec.shutdown();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","sourceOld":"  // test sorting when the sort field is empty (undefined) for some of the documents\n  public void testEmptyFieldSort() throws Exception {\n    sort.setSort (new SortField (\"string\", SortField.STRING) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"string\", SortField.STRING, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n    \n    sort.setSort (new SortField (\"int\", SortField.INT) );\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true) );\n    assertMatches (full, queryF, sort, \"JZI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    // using a nonexisting field as first sort key shouldn't make a difference:\n    sort.setSort (new SortField (\"nosuchfield\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    // When a field is null for both documents, the next SortField should be used.\n                // Works for\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryG, sort, \"ZWXY\");\n\n    // Reverse the last criterium to make sure the test didn't pass by chance\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryG, sort, \"ZYXW\");\n\n    // Do the same for a ParallelMultiSearcher\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    IndexSearcher parallelSearcher=new IndexSearcher (full.getIndexReader(), exec);\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n    parallelSearcher.close();\n    exec.shutdown();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"090a0320e4de4a3674376aef96b9701f47564f86","date":1308707325,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","sourceNew":"  // test sorting when the sort field is empty (undefined) for some of the documents\n  public void testEmptyFieldSort() throws Exception {\n    sort.setSort (new SortField (\"string\", SortField.Type.STRING) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"string\", SortField.Type.STRING, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n    \n    sort.setSort (new SortField (\"int\", SortField.Type.INT) );\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (new SortField (\"int\", SortField.Type.INT, true) );\n    assertMatches (full, queryF, sort, \"JZI\");\n\n    sort.setSort (new SortField (\"float\", SortField.Type.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    if (supportsDocValues) {\n      sort.setSort (useDocValues(new SortField (\"int\", SortField.Type.INT)) );\n      assertMatches (full, queryF, sort, \"IZJ\");\n    \n      sort.setSort (useDocValues(new SortField (\"float\", SortField.Type.FLOAT)) );\n      assertMatches (full, queryF, sort, \"ZJI\");\n    }\n\n    // using a nonexisting field as first sort key shouldn't make a difference:\n    sort.setSort (new SortField (\"nosuchfield\", SortField.Type.STRING),\n        new SortField (\"float\", SortField.Type.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"float\", SortField.Type.FLOAT, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    // When a field is null for both documents, the next SortField should be used.\n                // Works for\n    sort.setSort (new SortField (\"int\", SortField.Type.INT),\n                                new SortField (\"string\", SortField.Type.STRING),\n        new SortField (\"float\", SortField.Type.FLOAT) );\n    assertMatches (full, queryG, sort, \"ZWXY\");\n\n    // Reverse the last criterium to make sure the test didn't pass by chance\n    sort.setSort (new SortField (\"int\", SortField.Type.INT),\n                                new SortField (\"string\", SortField.Type.STRING),\n        new SortField (\"float\", SortField.Type.FLOAT, true) );\n    assertMatches (full, queryG, sort, \"ZYXW\");\n\n    // Do the same for a ParallelMultiSearcher\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    IndexSearcher parallelSearcher=new IndexSearcher (full.getIndexReader(), exec);\n\n    sort.setSort (new SortField (\"int\", SortField.Type.INT),\n                                new SortField (\"string\", SortField.Type.STRING),\n        new SortField (\"float\", SortField.Type.FLOAT) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.Type.INT),\n                                new SortField (\"string\", SortField.Type.STRING),\n        new SortField (\"float\", SortField.Type.FLOAT, true) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n    parallelSearcher.close();\n    exec.shutdown();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","sourceOld":"  // test sorting when the sort field is empty (undefined) for some of the documents\n  public void testEmptyFieldSort() throws Exception {\n    sort.setSort (new SortField (\"string\", SortField.STRING) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"string\", SortField.STRING, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n    \n    sort.setSort (new SortField (\"int\", SortField.INT) );\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true) );\n    assertMatches (full, queryF, sort, \"JZI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    if (supportsDocValues) {\n      sort.setSort (useDocValues(new SortField (\"int\", SortField.INT)) );\n      assertMatches (full, queryF, sort, \"IZJ\");\n    \n      sort.setSort (useDocValues(new SortField (\"float\", SortField.FLOAT)) );\n      assertMatches (full, queryF, sort, \"ZJI\");\n    }\n\n    // using a nonexisting field as first sort key shouldn't make a difference:\n    sort.setSort (new SortField (\"nosuchfield\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    // When a field is null for both documents, the next SortField should be used.\n                // Works for\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryG, sort, \"ZWXY\");\n\n    // Reverse the last criterium to make sure the test didn't pass by chance\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryG, sort, \"ZYXW\");\n\n    // Do the same for a ParallelMultiSearcher\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    IndexSearcher parallelSearcher=new IndexSearcher (full.getIndexReader(), exec);\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n    parallelSearcher.close();\n    exec.shutdown();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","sourceNew":"  // test sorting when the sort field is empty (undefined) for some of the documents\n  public void testEmptyFieldSort() throws Exception {\n    sort.setSort (new SortField (\"string\", SortField.Type.STRING) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"string\", SortField.Type.STRING, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n    \n    sort.setSort (new SortField (\"int\", SortField.Type.INT) );\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (new SortField (\"int\", SortField.Type.INT, true) );\n    assertMatches (full, queryF, sort, \"JZI\");\n\n    sort.setSort (new SortField (\"float\", SortField.Type.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    if (supportsDocValues) {\n      sort.setSort (useDocValues(new SortField (\"int\", SortField.Type.INT)) );\n      assertMatches (full, queryF, sort, \"IZJ\");\n    \n      sort.setSort (useDocValues(new SortField (\"float\", SortField.Type.FLOAT)) );\n      assertMatches (full, queryF, sort, \"ZJI\");\n    }\n\n    // using a nonexisting field as first sort key shouldn't make a difference:\n    sort.setSort (new SortField (\"nosuchfield\", SortField.Type.STRING),\n        new SortField (\"float\", SortField.Type.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"float\", SortField.Type.FLOAT, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    // When a field is null for both documents, the next SortField should be used.\n                // Works for\n    sort.setSort (new SortField (\"int\", SortField.Type.INT),\n                                new SortField (\"string\", SortField.Type.STRING),\n        new SortField (\"float\", SortField.Type.FLOAT) );\n    assertMatches (full, queryG, sort, \"ZWXY\");\n\n    // Reverse the last criterium to make sure the test didn't pass by chance\n    sort.setSort (new SortField (\"int\", SortField.Type.INT),\n                                new SortField (\"string\", SortField.Type.STRING),\n        new SortField (\"float\", SortField.Type.FLOAT, true) );\n    assertMatches (full, queryG, sort, \"ZYXW\");\n\n    // Do the same for a ParallelMultiSearcher\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    IndexSearcher parallelSearcher=new IndexSearcher (full.getIndexReader(), exec);\n\n    sort.setSort (new SortField (\"int\", SortField.Type.INT),\n                                new SortField (\"string\", SortField.Type.STRING),\n        new SortField (\"float\", SortField.Type.FLOAT) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.Type.INT),\n                                new SortField (\"string\", SortField.Type.STRING),\n        new SortField (\"float\", SortField.Type.FLOAT, true) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n    parallelSearcher.close();\n    exec.shutdown();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","sourceOld":"  // test sorting when the sort field is empty (undefined) for some of the documents\n  public void testEmptyFieldSort() throws Exception {\n    sort.setSort (new SortField (\"string\", SortField.STRING) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"string\", SortField.STRING, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n    \n    sort.setSort (new SortField (\"int\", SortField.INT) );\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true) );\n    assertMatches (full, queryF, sort, \"JZI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    if (supportsDocValues) {\n      sort.setSort (useDocValues(new SortField (\"int\", SortField.INT)) );\n      assertMatches (full, queryF, sort, \"IZJ\");\n    \n      sort.setSort (useDocValues(new SortField (\"float\", SortField.FLOAT)) );\n      assertMatches (full, queryF, sort, \"ZJI\");\n    }\n\n    // using a nonexisting field as first sort key shouldn't make a difference:\n    sort.setSort (new SortField (\"nosuchfield\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    // When a field is null for both documents, the next SortField should be used.\n                // Works for\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryG, sort, \"ZWXY\");\n\n    // Reverse the last criterium to make sure the test didn't pass by chance\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryG, sort, \"ZYXW\");\n\n    // Do the same for a ParallelMultiSearcher\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    IndexSearcher parallelSearcher=new IndexSearcher (full.getIndexReader(), exec);\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n    parallelSearcher.close();\n    exec.shutdown();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","sourceNew":"  // test sorting when the sort field is empty (undefined) for some of the documents\n  public void testEmptyFieldSort() throws Exception {\n    sort.setSort (new SortField (\"string\", SortField.Type.STRING) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"string\", SortField.Type.STRING, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n    \n    sort.setSort (new SortField (\"int\", SortField.Type.INT) );\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (new SortField (\"int\", SortField.Type.INT, true) );\n    assertMatches (full, queryF, sort, \"JZI\");\n\n    sort.setSort (new SortField (\"float\", SortField.Type.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    if (supportsDocValues) {\n      sort.setSort (useDocValues(new SortField (\"int\", SortField.Type.INT)) );\n      assertMatches (full, queryF, sort, \"IZJ\");\n    \n      sort.setSort (useDocValues(new SortField (\"float\", SortField.Type.FLOAT)) );\n      assertMatches (full, queryF, sort, \"ZJI\");\n    }\n\n    // using a nonexisting field as first sort key shouldn't make a difference:\n    sort.setSort (new SortField (\"nosuchfield\", SortField.Type.STRING),\n        new SortField (\"float\", SortField.Type.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"float\", SortField.Type.FLOAT, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    // When a field is null for both documents, the next SortField should be used.\n                // Works for\n    sort.setSort (new SortField (\"int\", SortField.Type.INT),\n                                new SortField (\"string\", SortField.Type.STRING),\n        new SortField (\"float\", SortField.Type.FLOAT) );\n    assertMatches (full, queryG, sort, \"ZWXY\");\n\n    // Reverse the last criterium to make sure the test didn't pass by chance\n    sort.setSort (new SortField (\"int\", SortField.Type.INT),\n                                new SortField (\"string\", SortField.Type.STRING),\n        new SortField (\"float\", SortField.Type.FLOAT, true) );\n    assertMatches (full, queryG, sort, \"ZYXW\");\n\n    // Do the same for a ParallelMultiSearcher\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    IndexSearcher parallelSearcher=new IndexSearcher (full.getIndexReader(), exec);\n\n    sort.setSort (new SortField (\"int\", SortField.Type.INT),\n                                new SortField (\"string\", SortField.Type.STRING),\n        new SortField (\"float\", SortField.Type.FLOAT) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.Type.INT),\n                                new SortField (\"string\", SortField.Type.STRING),\n        new SortField (\"float\", SortField.Type.FLOAT, true) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n    parallelSearcher.close();\n    exec.shutdown();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","sourceOld":"  // test sorting when the sort field is empty (undefined) for some of the documents\n  public void testEmptyFieldSort() throws Exception {\n    sort.setSort (new SortField (\"string\", SortField.STRING) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"string\", SortField.STRING, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n    \n    sort.setSort (new SortField (\"int\", SortField.INT) );\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true) );\n    assertMatches (full, queryF, sort, \"JZI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    if (supportsDocValues) {\n      sort.setSort (useDocValues(new SortField (\"int\", SortField.INT)) );\n      assertMatches (full, queryF, sort, \"IZJ\");\n    \n      sort.setSort (useDocValues(new SortField (\"float\", SortField.FLOAT)) );\n      assertMatches (full, queryF, sort, \"ZJI\");\n    }\n\n    // using a nonexisting field as first sort key shouldn't make a difference:\n    sort.setSort (new SortField (\"nosuchfield\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    // When a field is null for both documents, the next SortField should be used.\n                // Works for\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryG, sort, \"ZWXY\");\n\n    // Reverse the last criterium to make sure the test didn't pass by chance\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryG, sort, \"ZYXW\");\n\n    // Do the same for a ParallelMultiSearcher\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    IndexSearcher parallelSearcher=new IndexSearcher (full.getIndexReader(), exec);\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n    parallelSearcher.close();\n    exec.shutdown();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28088b0a688977b79dec2cc9119cff2fb4aab7ee","date":1321197996,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","sourceNew":"  // test sorting when the sort field is empty (undefined) for some of the documents\n  public void testEmptyFieldSort() throws Exception {\n\n    // NOTE: do not test DocValues fields here, since you\n    // can't sort when some documents don't have the field\n    sort.setSort (new SortField (\"string\", SortField.Type.STRING) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"string\", SortField.Type.STRING, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n    \n    sort.setSort (new SortField (\"int\", SortField.Type.INT) );\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (new SortField (\"int\", SortField.Type.INT, true) );\n    assertMatches (full, queryF, sort, \"JZI\");\n\n    sort.setSort (new SortField (\"float\", SortField.Type.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    // using a nonexisting field as first sort key shouldn't make a difference:\n    sort.setSort (new SortField (\"nosuchfield\", SortField.Type.STRING),\n        new SortField (\"float\", SortField.Type.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"float\", SortField.Type.FLOAT, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    // When a field is null for both documents, the next SortField should be used.\n    sort.setSort (new SortField (\"int\", SortField.Type.INT),\n                                new SortField (\"string\", SortField.Type.STRING),\n        new SortField (\"float\", SortField.Type.FLOAT) );\n    assertMatches (full, queryG, sort, \"ZWXY\");\n\n    // Reverse the last criterium to make sure the test didn't pass by chance\n    sort.setSort (new SortField (\"int\", SortField.Type.INT),\n                                new SortField (\"string\", SortField.Type.STRING),\n                  new SortField (\"float\", SortField.Type.FLOAT, true) );\n    assertMatches (full, queryG, sort, \"ZYXW\");\n\n    // Do the same for a ParallelMultiSearcher\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    IndexSearcher parallelSearcher=new IndexSearcher (full.getIndexReader(), exec);\n\n    sort.setSort (new SortField (\"int\", SortField.Type.INT),\n                  new SortField (\"string\", SortField.Type.STRING),\n                  new SortField (\"float\", SortField.Type.FLOAT) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.Type.INT),\n                  new SortField (\"string\", SortField.Type.STRING),\n                  new SortField (\"float\", SortField.Type.FLOAT, true) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n    parallelSearcher.close();\n    exec.shutdown();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","sourceOld":"  // test sorting when the sort field is empty (undefined) for some of the documents\n  public void testEmptyFieldSort() throws Exception {\n    sort.setSort (new SortField (\"string\", SortField.Type.STRING) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"string\", SortField.Type.STRING, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n    \n    sort.setSort (new SortField (\"int\", SortField.Type.INT) );\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (new SortField (\"int\", SortField.Type.INT, true) );\n    assertMatches (full, queryF, sort, \"JZI\");\n\n    sort.setSort (new SortField (\"float\", SortField.Type.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    if (supportsDocValues) {\n      sort.setSort (useDocValues(new SortField (\"int\", SortField.Type.INT)) );\n      assertMatches (full, queryF, sort, \"IZJ\");\n    \n      sort.setSort (useDocValues(new SortField (\"float\", SortField.Type.FLOAT)) );\n      assertMatches (full, queryF, sort, \"ZJI\");\n    }\n\n    // using a nonexisting field as first sort key shouldn't make a difference:\n    sort.setSort (new SortField (\"nosuchfield\", SortField.Type.STRING),\n        new SortField (\"float\", SortField.Type.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"float\", SortField.Type.FLOAT, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    // When a field is null for both documents, the next SortField should be used.\n                // Works for\n    sort.setSort (new SortField (\"int\", SortField.Type.INT),\n                                new SortField (\"string\", SortField.Type.STRING),\n        new SortField (\"float\", SortField.Type.FLOAT) );\n    assertMatches (full, queryG, sort, \"ZWXY\");\n\n    // Reverse the last criterium to make sure the test didn't pass by chance\n    sort.setSort (new SortField (\"int\", SortField.Type.INT),\n                                new SortField (\"string\", SortField.Type.STRING),\n        new SortField (\"float\", SortField.Type.FLOAT, true) );\n    assertMatches (full, queryG, sort, \"ZYXW\");\n\n    // Do the same for a ParallelMultiSearcher\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    IndexSearcher parallelSearcher=new IndexSearcher (full.getIndexReader(), exec);\n\n    sort.setSort (new SortField (\"int\", SortField.Type.INT),\n                                new SortField (\"string\", SortField.Type.STRING),\n        new SortField (\"float\", SortField.Type.FLOAT) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.Type.INT),\n                                new SortField (\"string\", SortField.Type.STRING),\n        new SortField (\"float\", SortField.Type.FLOAT, true) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n    parallelSearcher.close();\n    exec.shutdown();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","sourceNew":"  // test sorting when the sort field is empty (undefined) for some of the documents\n  public void testEmptyFieldSort() throws Exception {\n\n    // NOTE: do not test DocValues fields here, since you\n    // can't sort when some documents don't have the field\n    sort.setSort (new SortField (\"string\", SortField.Type.STRING) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"string\", SortField.Type.STRING, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n    \n    sort.setSort (new SortField (\"int\", SortField.Type.INT) );\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (new SortField (\"int\", SortField.Type.INT, true) );\n    assertMatches (full, queryF, sort, \"JZI\");\n\n    sort.setSort (new SortField (\"float\", SortField.Type.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    // using a nonexisting field as first sort key shouldn't make a difference:\n    sort.setSort (new SortField (\"nosuchfield\", SortField.Type.STRING),\n        new SortField (\"float\", SortField.Type.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"float\", SortField.Type.FLOAT, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    // When a field is null for both documents, the next SortField should be used.\n    sort.setSort (new SortField (\"int\", SortField.Type.INT),\n                                new SortField (\"string\", SortField.Type.STRING),\n        new SortField (\"float\", SortField.Type.FLOAT) );\n    assertMatches (full, queryG, sort, \"ZWXY\");\n\n    // Reverse the last criterium to make sure the test didn't pass by chance\n    sort.setSort (new SortField (\"int\", SortField.Type.INT),\n                                new SortField (\"string\", SortField.Type.STRING),\n                  new SortField (\"float\", SortField.Type.FLOAT, true) );\n    assertMatches (full, queryG, sort, \"ZYXW\");\n\n    // Do the same for a ParallelMultiSearcher\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    IndexSearcher parallelSearcher=new IndexSearcher (full.getIndexReader(), exec);\n\n    sort.setSort (new SortField (\"int\", SortField.Type.INT),\n                  new SortField (\"string\", SortField.Type.STRING),\n                  new SortField (\"float\", SortField.Type.FLOAT) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.Type.INT),\n                  new SortField (\"string\", SortField.Type.STRING),\n                  new SortField (\"float\", SortField.Type.FLOAT, true) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n    exec.shutdown();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","sourceOld":"  // test sorting when the sort field is empty (undefined) for some of the documents\n  public void testEmptyFieldSort() throws Exception {\n\n    // NOTE: do not test DocValues fields here, since you\n    // can't sort when some documents don't have the field\n    sort.setSort (new SortField (\"string\", SortField.Type.STRING) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"string\", SortField.Type.STRING, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n    \n    sort.setSort (new SortField (\"int\", SortField.Type.INT) );\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (new SortField (\"int\", SortField.Type.INT, true) );\n    assertMatches (full, queryF, sort, \"JZI\");\n\n    sort.setSort (new SortField (\"float\", SortField.Type.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    // using a nonexisting field as first sort key shouldn't make a difference:\n    sort.setSort (new SortField (\"nosuchfield\", SortField.Type.STRING),\n        new SortField (\"float\", SortField.Type.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"float\", SortField.Type.FLOAT, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    // When a field is null for both documents, the next SortField should be used.\n    sort.setSort (new SortField (\"int\", SortField.Type.INT),\n                                new SortField (\"string\", SortField.Type.STRING),\n        new SortField (\"float\", SortField.Type.FLOAT) );\n    assertMatches (full, queryG, sort, \"ZWXY\");\n\n    // Reverse the last criterium to make sure the test didn't pass by chance\n    sort.setSort (new SortField (\"int\", SortField.Type.INT),\n                                new SortField (\"string\", SortField.Type.STRING),\n                  new SortField (\"float\", SortField.Type.FLOAT, true) );\n    assertMatches (full, queryG, sort, \"ZYXW\");\n\n    // Do the same for a ParallelMultiSearcher\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    IndexSearcher parallelSearcher=new IndexSearcher (full.getIndexReader(), exec);\n\n    sort.setSort (new SortField (\"int\", SortField.Type.INT),\n                  new SortField (\"string\", SortField.Type.STRING),\n                  new SortField (\"float\", SortField.Type.FLOAT) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.Type.INT),\n                  new SortField (\"string\", SortField.Type.STRING),\n                  new SortField (\"float\", SortField.Type.FLOAT, true) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n    parallelSearcher.close();\n    exec.shutdown();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","sourceNew":"  // test sorting when the sort field is empty (undefined) for some of the documents\n  public void testEmptyFieldSort() throws Exception {\n\n    // NOTE: do not test DocValues fields here, since you\n    // can't sort when some documents don't have the field\n    sort.setSort (new SortField (\"string\", SortField.Type.STRING) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"string\", SortField.Type.STRING, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n    \n    sort.setSort (new SortField (\"int\", SortField.Type.INT) );\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (new SortField (\"int\", SortField.Type.INT, true) );\n    assertMatches (full, queryF, sort, \"JZI\");\n\n    sort.setSort (new SortField (\"float\", SortField.Type.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    // using a nonexisting field as first sort key shouldn't make a difference:\n    sort.setSort (new SortField (\"nosuchfield\", SortField.Type.STRING),\n        new SortField (\"float\", SortField.Type.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"float\", SortField.Type.FLOAT, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    // When a field is null for both documents, the next SortField should be used.\n    sort.setSort (new SortField (\"int\", SortField.Type.INT),\n                                new SortField (\"string\", SortField.Type.STRING),\n        new SortField (\"float\", SortField.Type.FLOAT) );\n    assertMatches (full, queryG, sort, \"ZWXY\");\n\n    // Reverse the last criterium to make sure the test didn't pass by chance\n    sort.setSort (new SortField (\"int\", SortField.Type.INT),\n                                new SortField (\"string\", SortField.Type.STRING),\n                  new SortField (\"float\", SortField.Type.FLOAT, true) );\n    assertMatches (full, queryG, sort, \"ZYXW\");\n\n    // Do the same for a ParallelMultiSearcher\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    IndexSearcher parallelSearcher=new IndexSearcher (full.getIndexReader(), exec);\n\n    sort.setSort (new SortField (\"int\", SortField.Type.INT),\n                  new SortField (\"string\", SortField.Type.STRING),\n                  new SortField (\"float\", SortField.Type.FLOAT) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.Type.INT),\n                  new SortField (\"string\", SortField.Type.STRING),\n                  new SortField (\"float\", SortField.Type.FLOAT, true) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n    exec.shutdown();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","sourceOld":"  // test sorting when the sort field is empty (undefined) for some of the documents\n  public void testEmptyFieldSort() throws Exception {\n\n    // NOTE: do not test DocValues fields here, since you\n    // can't sort when some documents don't have the field\n    sort.setSort (new SortField (\"string\", SortField.Type.STRING) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"string\", SortField.Type.STRING, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n    \n    sort.setSort (new SortField (\"int\", SortField.Type.INT) );\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (new SortField (\"int\", SortField.Type.INT, true) );\n    assertMatches (full, queryF, sort, \"JZI\");\n\n    sort.setSort (new SortField (\"float\", SortField.Type.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    // using a nonexisting field as first sort key shouldn't make a difference:\n    sort.setSort (new SortField (\"nosuchfield\", SortField.Type.STRING),\n        new SortField (\"float\", SortField.Type.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"float\", SortField.Type.FLOAT, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    // When a field is null for both documents, the next SortField should be used.\n    sort.setSort (new SortField (\"int\", SortField.Type.INT),\n                                new SortField (\"string\", SortField.Type.STRING),\n        new SortField (\"float\", SortField.Type.FLOAT) );\n    assertMatches (full, queryG, sort, \"ZWXY\");\n\n    // Reverse the last criterium to make sure the test didn't pass by chance\n    sort.setSort (new SortField (\"int\", SortField.Type.INT),\n                                new SortField (\"string\", SortField.Type.STRING),\n                  new SortField (\"float\", SortField.Type.FLOAT, true) );\n    assertMatches (full, queryG, sort, \"ZYXW\");\n\n    // Do the same for a ParallelMultiSearcher\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    IndexSearcher parallelSearcher=new IndexSearcher (full.getIndexReader(), exec);\n\n    sort.setSort (new SortField (\"int\", SortField.Type.INT),\n                  new SortField (\"string\", SortField.Type.STRING),\n                  new SortField (\"float\", SortField.Type.FLOAT) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.Type.INT),\n                  new SortField (\"string\", SortField.Type.STRING),\n                  new SortField (\"float\", SortField.Type.FLOAT, true) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n    parallelSearcher.close();\n    exec.shutdown();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","sourceNew":"  // test sorting when the sort field is empty (undefined) for some of the documents\n  public void testEmptyFieldSort() throws Exception {\n\n    // NOTE: do not test DocValues fields here, since you\n    // can't sort when some documents don't have the field\n    sort.setSort (new SortField (\"string\", SortField.Type.STRING) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"string\", SortField.Type.STRING, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n    \n    sort.setSort (new SortField (\"int\", SortField.Type.INT) );\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (new SortField (\"int\", SortField.Type.INT, true) );\n    assertMatches (full, queryF, sort, \"JZI\");\n\n    sort.setSort (new SortField (\"float\", SortField.Type.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    // using a nonexisting field as first sort key shouldn't make a difference:\n    sort.setSort (new SortField (\"nosuchfield\", SortField.Type.STRING),\n        new SortField (\"float\", SortField.Type.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"float\", SortField.Type.FLOAT, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    // When a field is null for both documents, the next SortField should be used.\n    sort.setSort (new SortField (\"int\", SortField.Type.INT),\n                                new SortField (\"string\", SortField.Type.STRING),\n        new SortField (\"float\", SortField.Type.FLOAT) );\n    assertMatches (full, queryG, sort, \"ZWXY\");\n\n    // Reverse the last criterium to make sure the test didn't pass by chance\n    sort.setSort (new SortField (\"int\", SortField.Type.INT),\n                                new SortField (\"string\", SortField.Type.STRING),\n                  new SortField (\"float\", SortField.Type.FLOAT, true) );\n    assertMatches (full, queryG, sort, \"ZYXW\");\n\n    // Do the same for a ParallelMultiSearcher\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    IndexSearcher parallelSearcher=new IndexSearcher (full.getIndexReader(), exec);\n\n    sort.setSort (new SortField (\"int\", SortField.Type.INT),\n                  new SortField (\"string\", SortField.Type.STRING),\n                  new SortField (\"float\", SortField.Type.FLOAT) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.Type.INT),\n                  new SortField (\"string\", SortField.Type.STRING),\n                  new SortField (\"float\", SortField.Type.FLOAT, true) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n    exec.shutdown();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","sourceOld":"  // test sorting when the sort field is empty (undefined) for some of the documents\n  public void testEmptyFieldSort() throws Exception {\n\n    // NOTE: do not test DocValues fields here, since you\n    // can't sort when some documents don't have the field\n    sort.setSort (new SortField (\"string\", SortField.Type.STRING) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"string\", SortField.Type.STRING, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n    \n    sort.setSort (new SortField (\"int\", SortField.Type.INT) );\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (new SortField (\"int\", SortField.Type.INT, true) );\n    assertMatches (full, queryF, sort, \"JZI\");\n\n    sort.setSort (new SortField (\"float\", SortField.Type.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    // using a nonexisting field as first sort key shouldn't make a difference:\n    sort.setSort (new SortField (\"nosuchfield\", SortField.Type.STRING),\n        new SortField (\"float\", SortField.Type.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"float\", SortField.Type.FLOAT, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    // When a field is null for both documents, the next SortField should be used.\n    sort.setSort (new SortField (\"int\", SortField.Type.INT),\n                                new SortField (\"string\", SortField.Type.STRING),\n        new SortField (\"float\", SortField.Type.FLOAT) );\n    assertMatches (full, queryG, sort, \"ZWXY\");\n\n    // Reverse the last criterium to make sure the test didn't pass by chance\n    sort.setSort (new SortField (\"int\", SortField.Type.INT),\n                                new SortField (\"string\", SortField.Type.STRING),\n                  new SortField (\"float\", SortField.Type.FLOAT, true) );\n    assertMatches (full, queryG, sort, \"ZYXW\");\n\n    // Do the same for a ParallelMultiSearcher\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    IndexSearcher parallelSearcher=new IndexSearcher (full.getIndexReader(), exec);\n\n    sort.setSort (new SortField (\"int\", SortField.Type.INT),\n                  new SortField (\"string\", SortField.Type.STRING),\n                  new SortField (\"float\", SortField.Type.FLOAT) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.Type.INT),\n                  new SortField (\"string\", SortField.Type.STRING),\n                  new SortField (\"float\", SortField.Type.FLOAT, true) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n    exec.shutdown();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["28088b0a688977b79dec2cc9119cff2fb4aab7ee","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","7fc5a2665a7fa1b9450097ae658193a11ee4d02c"],"9235b9d4454a46c066cda47fed7ca0a34e614529":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["3e492fb0f2bb0b4b47208286f9331ff55963c656","0cedee4c69436d5334e8f35463bf232084ff2fa3"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["868da859b43505d9d2a023bfeae6dd0c795f5295","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["28088b0a688977b79dec2cc9119cff2fb4aab7ee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28088b0a688977b79dec2cc9119cff2fb4aab7ee":["090a0320e4de4a3674376aef96b9701f47564f86"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7fc5a2665a7fa1b9450097ae658193a11ee4d02c":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["3e492fb0f2bb0b4b47208286f9331ff55963c656","2e8d7ba2175f47e280231533f7d3016249cea88b"],"70ad682703b8585f5d0a637efec044d57ec05efb":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["3bb13258feba31ab676502787ab2e1779f129b7a","7fc5a2665a7fa1b9450097ae658193a11ee4d02c"],"2553b00f699380c64959ccb27991289aae87be2e":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","090a0320e4de4a3674376aef96b9701f47564f86"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["2e8d7ba2175f47e280231533f7d3016249cea88b","090a0320e4de4a3674376aef96b9701f47564f86"],"090a0320e4de4a3674376aef96b9701f47564f86":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["7fc5a2665a7fa1b9450097ae658193a11ee4d02c"],"0cedee4c69436d5334e8f35463bf232084ff2fa3":["9235b9d4454a46c066cda47fed7ca0a34e614529"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["70ad682703b8585f5d0a637efec044d57ec05efb","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"3bb13258feba31ab676502787ab2e1779f129b7a":["9454a6510e2db155fb01faa5c049b06ece95fab9","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["9454a6510e2db155fb01faa5c049b06ece95fab9"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"9235b9d4454a46c066cda47fed7ca0a34e614529":["0cedee4c69436d5334e8f35463bf232084ff2fa3"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","d083e83f225b11e5fdd900e83d26ddb385b6955c","090a0320e4de4a3674376aef96b9701f47564f86"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"28088b0a688977b79dec2cc9119cff2fb4aab7ee":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["2e8d7ba2175f47e280231533f7d3016249cea88b","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","d619839baa8ce5503e496b94a9e42ad6f079293f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"7fc5a2665a7fa1b9450097ae658193a11ee4d02c":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ab5cb6a74aefb78aa0569857970b9151dfe2e787","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["2553b00f699380c64959ccb27991289aae87be2e"],"70ad682703b8585f5d0a637efec044d57ec05efb":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["70ad682703b8585f5d0a637efec044d57ec05efb"],"2553b00f699380c64959ccb27991289aae87be2e":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"090a0320e4de4a3674376aef96b9701f47564f86":["28088b0a688977b79dec2cc9119cff2fb4aab7ee","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["3e492fb0f2bb0b4b47208286f9331ff55963c656","70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["9235b9d4454a46c066cda47fed7ca0a34e614529"],"0cedee4c69436d5334e8f35463bf232084ff2fa3":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"3bb13258feba31ab676502787ab2e1779f129b7a":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7fc5a2665a7fa1b9450097ae658193a11ee4d02c","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}