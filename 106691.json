{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ClientDataProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","commits":[{"id":"862864c0fab5449b10f29b4eee94a380d27d787f","date":1491552584,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ClientDataProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      List<String> groups = new ArrayList<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if(groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes,','));\n\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(4);\n        if(requestedTags.contains(DISK)){\n          Number n = (Number) Utils.getObjectByPath(m,true, \"metrics/solr.node/CONTAINER.fs.usableSpace/value\");\n          if(n != null) ctx.getTags().put(DISK, n.longValue());\n        }\n        if(requestedTags.contains(CORES)){\n          int count = 0;\n          Map cores  = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if(o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86fff6c123a5a1d38adb665dd045347219798da9","date":1493623721,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ClientDataProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","sourceNew":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      List<String> groups = new ArrayList<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if(groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes,','));\n\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(4);\n        if(requestedTags.contains(DISK)){\n          Number n = (Number) Utils.getObjectByPath(m,true, \"metrics/solr.node/CONTAINER.fs.usableSpace/value\");\n          if(n != null) ctx.getTags().put(DISK, n.longValue());\n        }\n        if(requestedTags.contains(CORES)){\n          int count = 0;\n          Map cores  = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if(o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n\n    }\n\n","sourceOld":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      List<String> groups = new ArrayList<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if(groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes,','));\n\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(4);\n        if(requestedTags.contains(DISK)){\n          Number n = (Number) Utils.getObjectByPath(m,true, \"metrics/solr.node/CONTAINER.fs.usableSpace/value\");\n          if(n != null) ctx.getTags().put(DISK, n.longValue());\n        }\n        if(requestedTags.contains(CORES)){\n          int count = 0;\n          Map cores  = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if(o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"86fff6c123a5a1d38adb665dd045347219798da9":["862864c0fab5449b10f29b4eee94a380d27d787f"],"862864c0fab5449b10f29b4eee94a380d27d787f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["862864c0fab5449b10f29b4eee94a380d27d787f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"86fff6c123a5a1d38adb665dd045347219798da9":[],"862864c0fab5449b10f29b4eee94a380d27d787f":["86fff6c123a5a1d38adb665dd045347219798da9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["86fff6c123a5a1d38adb665dd045347219798da9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}