{"path":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testReadMapEntryBinaryStreamSource().mjava","commits":[{"id":"7497784107a97f549e9503ad420ec9354f7178b2","date":1584032101,"type":0,"author":"Aroop","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testReadMapEntryBinaryStreamSource().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void  testReadMapEntryBinaryStreamSource() throws IOException {\n    // now lets look at binary files\n    Map.Entry<Object, Object> entryFromBinFileA = getMapFromJavaBinCodec(SOLRJ_JAVABIN_BACKCOMPAT_BIN);\n    Map.Entry<Object, Object> entryFromBinFileA_clone = getMapFromJavaBinCodec(SOLRJ_JAVABIN_BACKCOMPAT_BIN);\n\n    assertEquals(\"same map entry references should be equal\",entryFromBinFileA,entryFromBinFileA);\n\n    // Commenting-out this test as it may have inadvertent effect on someone changing this in future\n    // but keeping this in code to make a point, that even the same exact bin file,\n    // there could be sub-objects in the key or value of the maps, with types that do not implement equals\n    // and in these cases equals would fail as these sub-objects would be equated on their memory-references which is highly probbale to be unique\n    // and hence the top-level map's equals will also fail\n    // assertNotEquals(\"2 different references even though from same source are un-equal\",entryFromBinFileA,entryFromBinFileA_clone);\n\n\n    // read in a different binary file and this should definitely not be equal to the other bi file\n    Map.Entry<Object, Object> entryFromBinFileB = getMapFromJavaBinCodec(SOLRJ_JAVABIN_BACKCOMPAT_BIN_CHILD_DOCS);\n    assertNotEquals(\"2 different references from 2 different source bin streams should still be unequal\",entryFromBinFileA,entryFromBinFileB);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7497784107a97f549e9503ad420ec9354f7178b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7497784107a97f549e9503ad420ec9354f7178b2"]},"commit2Childs":{"7497784107a97f549e9503ad420ec9354f7178b2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7497784107a97f549e9503ad420ec9354f7178b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}