{"path":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadScoreQuery#testNestedNearQuery().mjava","commits":[{"id":"2e8525cf39738b3113cc2ef20025af7208403718","date":1438616965,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadScoreQuery#testNestedNearQuery().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNestedNearQuery() throws Exception {\n\n    // (one OR hundred) NEAR (twenty two) ~ 1\n    //  2    4        4    4\n    // one hundred twenty two\n    // two hundred twenty two\n\n    SpanNearQuery q = new SpanNearQuery(new SpanQuery[]{\n        new SpanOrQuery(new SpanTermQuery(new Term(\"field\", \"one\")), new SpanTermQuery(new Term(\"field\", \"hundred\"))),\n        new SpanNearQuery(new SpanQuery[]{\n            new SpanTermQuery(new Term(\"field\", \"twenty\")),\n            new SpanTermQuery(new Term(\"field\", \"two\"))\n        }, 0, true)\n    }, 1, true);\n\n    checkQuery(q, new MaxPayloadFunction(), new int[]{ 122, 222 }, new float[]{ 4.0f, 4.0f });\n    checkQuery(q, new MinPayloadFunction(), new int[]{ 222, 122 }, new float[]{ 4.0f, 2.0f });\n    checkQuery(q, new AveragePayloadFunction(), new int[] { 222, 122 }, new float[]{ 4.0f, 3.666666f });\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["13406cad512adb18f0b9447f1f35385a56a7bd88"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4","date":1442407411,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadScoreQuery#testNestedNearQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadScoreQuery#testNestedNearQuery().mjava","sourceNew":"  @Test\n  public void testNestedNearQuery() throws Exception {\n\n    // (one OR hundred) NEAR (twenty two) ~ 1\n    //  2    4        4    4\n    // one hundred twenty two\n    // two hundred twenty two\n\n    SpanNearQuery q = new SpanNearQuery(new SpanQuery[]{\n        new SpanOrQuery(new SpanTermQuery(new Term(\"field\", \"one\")), new SpanTermQuery(new Term(\"field\", \"hundred\"))),\n        new SpanNearQuery(new SpanQuery[]{\n            new SpanTermQuery(new Term(\"field\", \"twenty\")),\n            new SpanTermQuery(new Term(\"field\", \"two\"))\n        }, 0, true)\n    }, 1, true);\n\n    checkQuery(q, new MaxPayloadFunction(), new int[]{ 122, 222 }, new float[]{ 4.0f, 4.0f });\n    checkQuery(q, new MinPayloadFunction(), new int[]{ 222, 122 }, new float[]{ 4.0f, 2.0f });\n    checkQuery(q, new AveragePayloadFunction(), new int[] { 222, 122 }, new float[]{ 4.0f, 3.666666f });\n\n  }\n\n","sourceOld":"  @Test\n  public void testNestedNearQuery() throws Exception {\n\n    // (one OR hundred) NEAR (twenty two) ~ 1\n    //  2    4        4    4\n    // one hundred twenty two\n    // two hundred twenty two\n\n    SpanNearQuery q = new SpanNearQuery(new SpanQuery[]{\n        new SpanOrQuery(new SpanTermQuery(new Term(\"field\", \"one\")), new SpanTermQuery(new Term(\"field\", \"hundred\"))),\n        new SpanNearQuery(new SpanQuery[]{\n            new SpanTermQuery(new Term(\"field\", \"twenty\")),\n            new SpanTermQuery(new Term(\"field\", \"two\"))\n        }, 0, true)\n    }, 1, true);\n\n    checkQuery(q, new MaxPayloadFunction(), new int[]{ 122, 222 }, new float[]{ 4.0f, 4.0f });\n    checkQuery(q, new MinPayloadFunction(), new int[]{ 222, 122 }, new float[]{ 4.0f, 2.0f });\n    checkQuery(q, new AveragePayloadFunction(), new int[] { 222, 122 }, new float[]{ 4.0f, 3.666666f });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["2e8525cf39738b3113cc2ef20025af7208403718"],"2e8525cf39738b3113cc2ef20025af7208403718":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"]},"commit2Childs":{"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2e8525cf39738b3113cc2ef20025af7208403718":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2e8525cf39738b3113cc2ef20025af7208403718"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}