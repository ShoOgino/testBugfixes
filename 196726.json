{"path":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStrings#getRandomAcceptedString(Random).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStrings#getRandomAcceptedString(Random).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStrings#getRandomAcceptedString(Random).mjava","sourceNew":"    public int[] getRandomAcceptedString(Random r) {\n\n      final List<Integer> soFar = new ArrayList<Integer>();\n      if (a.isSingleton()) {\n        // accepts only one\n        final String s = a.singleton;\n      \n        int charUpto = 0;\n        while(charUpto < s.length()) {\n          final int cp = s.codePointAt(charUpto);\n          charUpto += Character.charCount(cp);\n          soFar.add(cp);\n        }\n      } else {\n\n        State s = a.initial;\n\n        while(true) {\n      \n          if (s.accept) {\n            if (s.numTransitions == 0) {\n              // stop now\n              break;\n            } else {\n              if (r.nextBoolean()) {\n                break;\n              }\n            }\n          }\n\n          if (s.numTransitions == 0) {\n            throw new RuntimeException(\"this automaton has dead states\");\n          }\n\n          boolean cheat = r.nextBoolean();\n\n          final Transition t;\n          if (cheat) {\n            // pick a transition that we know is the fastest\n            // path to an accept state\n            List<Transition> toAccept = new ArrayList<Transition>();\n            for(int i=0;i<s.numTransitions;i++) {\n              final Transition t0 = s.transitionsArray[i];\n              if (leadsToAccept.containsKey(t0)) {\n                toAccept.add(t0);\n              }\n            }\n            if (toAccept.size() == 0) {\n              // this is OK -- it means we jumped into a cycle\n              t = s.transitionsArray[r.nextInt(s.numTransitions)];\n            } else {\n              t = toAccept.get(r.nextInt(toAccept.size()));\n            }\n          } else {\n            t = s.transitionsArray[r.nextInt(s.numTransitions)];\n          }\n          soFar.add(getRandomCodePoint(r, t));\n          s = t.to;\n        }\n      }\n\n      return ArrayUtil.toIntArray(soFar);\n    }\n\n","sourceOld":"    public int[] getRandomAcceptedString(Random r) {\n\n      final List<Integer> soFar = new ArrayList<Integer>();\n      if (a.isSingleton()) {\n        // accepts only one\n        final String s = a.singleton;\n      \n        int charUpto = 0;\n        while(charUpto < s.length()) {\n          final int cp = s.codePointAt(charUpto);\n          charUpto += Character.charCount(cp);\n          soFar.add(cp);\n        }\n      } else {\n\n        State s = a.initial;\n\n        while(true) {\n      \n          if (s.accept) {\n            if (s.numTransitions == 0) {\n              // stop now\n              break;\n            } else {\n              if (r.nextBoolean()) {\n                break;\n              }\n            }\n          }\n\n          if (s.numTransitions == 0) {\n            throw new RuntimeException(\"this automaton has dead states\");\n          }\n\n          boolean cheat = r.nextBoolean();\n\n          final Transition t;\n          if (cheat) {\n            // pick a transition that we know is the fastest\n            // path to an accept state\n            List<Transition> toAccept = new ArrayList<Transition>();\n            for(int i=0;i<s.numTransitions;i++) {\n              final Transition t0 = s.transitionsArray[i];\n              if (leadsToAccept.containsKey(t0)) {\n                toAccept.add(t0);\n              }\n            }\n            if (toAccept.size() == 0) {\n              // this is OK -- it means we jumped into a cycle\n              t = s.transitionsArray[r.nextInt(s.numTransitions)];\n            } else {\n              t = toAccept.get(r.nextInt(toAccept.size()));\n            }\n          } else {\n            t = s.transitionsArray[r.nextInt(s.numTransitions)];\n          }\n          soFar.add(getRandomCodePoint(r, t));\n          s = t.to;\n        }\n      }\n\n      return ArrayUtil.toIntArray(soFar);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStrings#getRandomAcceptedString(Random).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStrings#getRandomAcceptedString(Random).mjava","sourceNew":"    public int[] getRandomAcceptedString(Random r) {\n\n      final List<Integer> soFar = new ArrayList<>();\n      if (a.isSingleton()) {\n        // accepts only one\n        final String s = a.singleton;\n      \n        int charUpto = 0;\n        while(charUpto < s.length()) {\n          final int cp = s.codePointAt(charUpto);\n          charUpto += Character.charCount(cp);\n          soFar.add(cp);\n        }\n      } else {\n\n        State s = a.initial;\n\n        while(true) {\n      \n          if (s.accept) {\n            if (s.numTransitions == 0) {\n              // stop now\n              break;\n            } else {\n              if (r.nextBoolean()) {\n                break;\n              }\n            }\n          }\n\n          if (s.numTransitions == 0) {\n            throw new RuntimeException(\"this automaton has dead states\");\n          }\n\n          boolean cheat = r.nextBoolean();\n\n          final Transition t;\n          if (cheat) {\n            // pick a transition that we know is the fastest\n            // path to an accept state\n            List<Transition> toAccept = new ArrayList<>();\n            for(int i=0;i<s.numTransitions;i++) {\n              final Transition t0 = s.transitionsArray[i];\n              if (leadsToAccept.containsKey(t0)) {\n                toAccept.add(t0);\n              }\n            }\n            if (toAccept.size() == 0) {\n              // this is OK -- it means we jumped into a cycle\n              t = s.transitionsArray[r.nextInt(s.numTransitions)];\n            } else {\n              t = toAccept.get(r.nextInt(toAccept.size()));\n            }\n          } else {\n            t = s.transitionsArray[r.nextInt(s.numTransitions)];\n          }\n          soFar.add(getRandomCodePoint(r, t));\n          s = t.to;\n        }\n      }\n\n      return ArrayUtil.toIntArray(soFar);\n    }\n\n","sourceOld":"    public int[] getRandomAcceptedString(Random r) {\n\n      final List<Integer> soFar = new ArrayList<Integer>();\n      if (a.isSingleton()) {\n        // accepts only one\n        final String s = a.singleton;\n      \n        int charUpto = 0;\n        while(charUpto < s.length()) {\n          final int cp = s.codePointAt(charUpto);\n          charUpto += Character.charCount(cp);\n          soFar.add(cp);\n        }\n      } else {\n\n        State s = a.initial;\n\n        while(true) {\n      \n          if (s.accept) {\n            if (s.numTransitions == 0) {\n              // stop now\n              break;\n            } else {\n              if (r.nextBoolean()) {\n                break;\n              }\n            }\n          }\n\n          if (s.numTransitions == 0) {\n            throw new RuntimeException(\"this automaton has dead states\");\n          }\n\n          boolean cheat = r.nextBoolean();\n\n          final Transition t;\n          if (cheat) {\n            // pick a transition that we know is the fastest\n            // path to an accept state\n            List<Transition> toAccept = new ArrayList<Transition>();\n            for(int i=0;i<s.numTransitions;i++) {\n              final Transition t0 = s.transitionsArray[i];\n              if (leadsToAccept.containsKey(t0)) {\n                toAccept.add(t0);\n              }\n            }\n            if (toAccept.size() == 0) {\n              // this is OK -- it means we jumped into a cycle\n              t = s.transitionsArray[r.nextInt(s.numTransitions)];\n            } else {\n              t = toAccept.get(r.nextInt(toAccept.size()));\n            }\n          } else {\n            t = s.transitionsArray[r.nextInt(s.numTransitions)];\n          }\n          soFar.add(getRandomCodePoint(r, t));\n          s = t.to;\n        }\n      }\n\n      return ArrayUtil.toIntArray(soFar);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStrings#getRandomAcceptedString(Random).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStrings#getRandomAcceptedString(Random).mjava","sourceNew":"    public int[] getRandomAcceptedString(Random r) {\n\n      final List<Integer> soFar = new ArrayList<>();\n      if (a.isSingleton()) {\n        // accepts only one\n        final String s = a.singleton;\n      \n        int charUpto = 0;\n        while(charUpto < s.length()) {\n          final int cp = s.codePointAt(charUpto);\n          charUpto += Character.charCount(cp);\n          soFar.add(cp);\n        }\n      } else {\n\n        State s = a.initial;\n\n        while(true) {\n      \n          if (s.accept) {\n            if (s.numTransitions == 0) {\n              // stop now\n              break;\n            } else {\n              if (r.nextBoolean()) {\n                break;\n              }\n            }\n          }\n\n          if (s.numTransitions == 0) {\n            throw new RuntimeException(\"this automaton has dead states\");\n          }\n\n          boolean cheat = r.nextBoolean();\n\n          final Transition t;\n          if (cheat) {\n            // pick a transition that we know is the fastest\n            // path to an accept state\n            List<Transition> toAccept = new ArrayList<>();\n            for(int i=0;i<s.numTransitions;i++) {\n              final Transition t0 = s.transitionsArray[i];\n              if (leadsToAccept.containsKey(t0)) {\n                toAccept.add(t0);\n              }\n            }\n            if (toAccept.size() == 0) {\n              // this is OK -- it means we jumped into a cycle\n              t = s.transitionsArray[r.nextInt(s.numTransitions)];\n            } else {\n              t = toAccept.get(r.nextInt(toAccept.size()));\n            }\n          } else {\n            t = s.transitionsArray[r.nextInt(s.numTransitions)];\n          }\n          soFar.add(getRandomCodePoint(r, t.min, t.max));\n          s = t.to;\n        }\n      }\n\n      return ArrayUtil.toIntArray(soFar);\n    }\n\n","sourceOld":"    public int[] getRandomAcceptedString(Random r) {\n\n      final List<Integer> soFar = new ArrayList<>();\n      if (a.isSingleton()) {\n        // accepts only one\n        final String s = a.singleton;\n      \n        int charUpto = 0;\n        while(charUpto < s.length()) {\n          final int cp = s.codePointAt(charUpto);\n          charUpto += Character.charCount(cp);\n          soFar.add(cp);\n        }\n      } else {\n\n        State s = a.initial;\n\n        while(true) {\n      \n          if (s.accept) {\n            if (s.numTransitions == 0) {\n              // stop now\n              break;\n            } else {\n              if (r.nextBoolean()) {\n                break;\n              }\n            }\n          }\n\n          if (s.numTransitions == 0) {\n            throw new RuntimeException(\"this automaton has dead states\");\n          }\n\n          boolean cheat = r.nextBoolean();\n\n          final Transition t;\n          if (cheat) {\n            // pick a transition that we know is the fastest\n            // path to an accept state\n            List<Transition> toAccept = new ArrayList<>();\n            for(int i=0;i<s.numTransitions;i++) {\n              final Transition t0 = s.transitionsArray[i];\n              if (leadsToAccept.containsKey(t0)) {\n                toAccept.add(t0);\n              }\n            }\n            if (toAccept.size() == 0) {\n              // this is OK -- it means we jumped into a cycle\n              t = s.transitionsArray[r.nextInt(s.numTransitions)];\n            } else {\n              t = toAccept.get(r.nextInt(toAccept.size()));\n            }\n          } else {\n            t = s.transitionsArray[r.nextInt(s.numTransitions)];\n          }\n          soFar.add(getRandomCodePoint(r, t));\n          s = t.to;\n        }\n      }\n\n      return ArrayUtil.toIntArray(soFar);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStrings#getRandomAcceptedString(Random).mjava","sourceNew":null,"sourceOld":"    public int[] getRandomAcceptedString(Random r) {\n\n      final List<Integer> soFar = new ArrayList<>();\n      if (a.isSingleton()) {\n        // accepts only one\n        final String s = a.singleton;\n      \n        int charUpto = 0;\n        while(charUpto < s.length()) {\n          final int cp = s.codePointAt(charUpto);\n          charUpto += Character.charCount(cp);\n          soFar.add(cp);\n        }\n      } else {\n\n        State s = a.initial;\n\n        while(true) {\n      \n          if (s.accept) {\n            if (s.numTransitions == 0) {\n              // stop now\n              break;\n            } else {\n              if (r.nextBoolean()) {\n                break;\n              }\n            }\n          }\n\n          if (s.numTransitions == 0) {\n            throw new RuntimeException(\"this automaton has dead states\");\n          }\n\n          boolean cheat = r.nextBoolean();\n\n          final Transition t;\n          if (cheat) {\n            // pick a transition that we know is the fastest\n            // path to an accept state\n            List<Transition> toAccept = new ArrayList<>();\n            for(int i=0;i<s.numTransitions;i++) {\n              final Transition t0 = s.transitionsArray[i];\n              if (leadsToAccept.containsKey(t0)) {\n                toAccept.add(t0);\n              }\n            }\n            if (toAccept.size() == 0) {\n              // this is OK -- it means we jumped into a cycle\n              t = s.transitionsArray[r.nextInt(s.numTransitions)];\n            } else {\n              t = toAccept.get(r.nextInt(toAccept.size()));\n            }\n          } else {\n            t = s.transitionsArray[r.nextInt(s.numTransitions)];\n          }\n          soFar.add(getRandomCodePoint(r, t.min, t.max));\n          s = t.to;\n        }\n      }\n\n      return ArrayUtil.toIntArray(soFar);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9","date":1402946522,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStrings#getRandomAcceptedString(Random).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStringsLight#getRandomAcceptedString(Random).mjava","sourceNew":"    public int[] getRandomAcceptedString(Random r) {\n\n      final List<Integer> soFar = new ArrayList<>();\n\n      int s = 0;\n\n      while(true) {\n      \n        if (a.isAccept(s)) {\n          if (a.getNumTransitions(s) == 0) {\n            // stop now\n            break;\n          } else {\n            if (r.nextBoolean()) {\n              break;\n            }\n          }\n        }\n\n        if (a.getNumTransitions(s) == 0) {\n          throw new RuntimeException(\"this automaton has dead states\");\n        }\n\n        boolean cheat = r.nextBoolean();\n\n        final Transition t;\n        if (cheat) {\n          // pick a transition that we know is the fastest\n          // path to an accept state\n          List<Transition> toAccept = new ArrayList<>();\n          for(Transition t0 : transitions[s]) {\n            if (leadsToAccept.containsKey(t0)) {\n              toAccept.add(t0);\n            }\n          }\n          if (toAccept.size() == 0) {\n            // this is OK -- it means we jumped into a cycle\n            t = transitions[s][r.nextInt(transitions[s].length)];\n          } else {\n            t = toAccept.get(r.nextInt(toAccept.size()));\n          }\n        } else {\n          t = transitions[s][r.nextInt(transitions[s].length)];\n        }\n        soFar.add(getRandomCodePoint(r, t.min, t.max));\n        s = t.dest;\n      }\n\n      return ArrayUtil.toIntArray(soFar);\n    }\n\n","sourceOld":"    public int[] getRandomAcceptedString(Random r) {\n\n      final List<Integer> soFar = new ArrayList<>();\n\n      int s = 0;\n\n      while(true) {\n      \n        if (a.isAccept(s)) {\n          if (a.getNumTransitions(s) == 0) {\n            // stop now\n            break;\n          } else {\n            if (r.nextBoolean()) {\n              break;\n            }\n          }\n        }\n\n        if (a.getNumTransitions(s) == 0) {\n          throw new RuntimeException(\"this automaton has dead states\");\n        }\n\n        boolean cheat = r.nextBoolean();\n\n        final Transition t;\n        if (cheat) {\n          // pick a transition that we know is the fastest\n          // path to an accept state\n          List<Transition> toAccept = new ArrayList<>();\n          for(Transition t0 : transitions[s]) {\n            if (leadsToAccept.containsKey(t0)) {\n              toAccept.add(t0);\n            }\n          }\n          if (toAccept.size() == 0) {\n            // this is OK -- it means we jumped into a cycle\n            t = transitions[s][r.nextInt(transitions[s].length)];\n          } else {\n            t = toAccept.get(r.nextInt(toAccept.size()));\n          }\n        } else {\n          t = transitions[s][r.nextInt(transitions[s].length)];\n        }\n        soFar.add(getRandomCodePoint(r, t.min, t.max));\n        s = t.dest;\n      }\n\n      return ArrayUtil.toIntArray(soFar);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStrings#getRandomAcceptedString(Random).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStrings#getRandomAcceptedString(Random).mjava","sourceNew":"    public int[] getRandomAcceptedString(Random r) {\n\n      final List<Integer> soFar = new ArrayList<>();\n\n      int s = 0;\n\n      while(true) {\n      \n        if (a.isAccept(s)) {\n          if (a.getNumTransitions(s) == 0) {\n            // stop now\n            break;\n          } else {\n            if (r.nextBoolean()) {\n              break;\n            }\n          }\n        }\n\n        if (a.getNumTransitions(s) == 0) {\n          throw new RuntimeException(\"this automaton has dead states\");\n        }\n\n        boolean cheat = r.nextBoolean();\n\n        final Transition t;\n        if (cheat) {\n          // pick a transition that we know is the fastest\n          // path to an accept state\n          List<Transition> toAccept = new ArrayList<>();\n          for(Transition t0 : transitions[s]) {\n            if (leadsToAccept.containsKey(t0)) {\n              toAccept.add(t0);\n            }\n          }\n          if (toAccept.size() == 0) {\n            // this is OK -- it means we jumped into a cycle\n            t = transitions[s][r.nextInt(transitions[s].length)];\n          } else {\n            t = toAccept.get(r.nextInt(toAccept.size()));\n          }\n        } else {\n          t = transitions[s][r.nextInt(transitions[s].length)];\n        }\n        soFar.add(getRandomCodePoint(r, t.min, t.max));\n        s = t.dest;\n      }\n\n      return ArrayUtil.toIntArray(soFar);\n    }\n\n","sourceOld":"    public int[] getRandomAcceptedString(Random r) {\n\n      final List<Integer> soFar = new ArrayList<>();\n      if (a.isSingleton()) {\n        // accepts only one\n        final String s = a.singleton;\n      \n        int charUpto = 0;\n        while(charUpto < s.length()) {\n          final int cp = s.codePointAt(charUpto);\n          charUpto += Character.charCount(cp);\n          soFar.add(cp);\n        }\n      } else {\n\n        State s = a.initial;\n\n        while(true) {\n      \n          if (s.accept) {\n            if (s.numTransitions == 0) {\n              // stop now\n              break;\n            } else {\n              if (r.nextBoolean()) {\n                break;\n              }\n            }\n          }\n\n          if (s.numTransitions == 0) {\n            throw new RuntimeException(\"this automaton has dead states\");\n          }\n\n          boolean cheat = r.nextBoolean();\n\n          final Transition t;\n          if (cheat) {\n            // pick a transition that we know is the fastest\n            // path to an accept state\n            List<Transition> toAccept = new ArrayList<>();\n            for(int i=0;i<s.numTransitions;i++) {\n              final Transition t0 = s.transitionsArray[i];\n              if (leadsToAccept.containsKey(t0)) {\n                toAccept.add(t0);\n              }\n            }\n            if (toAccept.size() == 0) {\n              // this is OK -- it means we jumped into a cycle\n              t = s.transitionsArray[r.nextInt(s.numTransitions)];\n            } else {\n              t = toAccept.get(r.nextInt(toAccept.size()));\n            }\n          } else {\n            t = s.transitionsArray[r.nextInt(s.numTransitions)];\n          }\n          soFar.add(getRandomCodePoint(r, t));\n          s = t.to;\n        }\n      }\n\n      return ArrayUtil.toIntArray(soFar);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcb85e0b9bc3b04eccb9b0f54a53706c8ac0659f","date":1464187721,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStrings#getRandomAcceptedString(Random).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStrings#getRandomAcceptedString(Random).mjava","sourceNew":"    public int[] getRandomAcceptedString(Random r) {\n      int[] codePoints = new int[0];\n      int codepointCount = 0;\n\n      int s = 0;\n\n      while(true) {\n      \n        if (a.isAccept(s)) {\n          if (a.getNumTransitions(s) == 0) {\n            // stop now\n            break;\n          } else {\n            if (r.nextBoolean()) {\n              break;\n            }\n          }\n        }\n\n        if (a.getNumTransitions(s) == 0) {\n          throw new RuntimeException(\"this automaton has dead states\");\n        }\n\n        boolean cheat = r.nextBoolean();\n\n        final Transition t;\n        if (cheat) {\n          // pick a transition that we know is the fastest\n          // path to an accept state\n          List<Transition> toAccept = new ArrayList<>();\n          for(Transition t0 : transitions[s]) {\n            if (leadsToAccept.containsKey(t0)) {\n              toAccept.add(t0);\n            }\n          }\n          if (toAccept.size() == 0) {\n            // this is OK -- it means we jumped into a cycle\n            t = transitions[s][r.nextInt(transitions[s].length)];\n          } else {\n            t = toAccept.get(r.nextInt(toAccept.size()));\n          }\n        } else {\n          t = transitions[s][r.nextInt(transitions[s].length)];\n        }\n        codePoints = ArrayUtil.grow(codePoints, codepointCount + 1);\n        codePoints[codepointCount++] = getRandomCodePoint(r, t.min, t.max);\n        s = t.dest;\n      }\n\n      return Arrays.copyOf(codePoints, codepointCount);\n    }\n\n","sourceOld":"    public int[] getRandomAcceptedString(Random r) {\n\n      final List<Integer> soFar = new ArrayList<>();\n\n      int s = 0;\n\n      while(true) {\n      \n        if (a.isAccept(s)) {\n          if (a.getNumTransitions(s) == 0) {\n            // stop now\n            break;\n          } else {\n            if (r.nextBoolean()) {\n              break;\n            }\n          }\n        }\n\n        if (a.getNumTransitions(s) == 0) {\n          throw new RuntimeException(\"this automaton has dead states\");\n        }\n\n        boolean cheat = r.nextBoolean();\n\n        final Transition t;\n        if (cheat) {\n          // pick a transition that we know is the fastest\n          // path to an accept state\n          List<Transition> toAccept = new ArrayList<>();\n          for(Transition t0 : transitions[s]) {\n            if (leadsToAccept.containsKey(t0)) {\n              toAccept.add(t0);\n            }\n          }\n          if (toAccept.size() == 0) {\n            // this is OK -- it means we jumped into a cycle\n            t = transitions[s][r.nextInt(transitions[s].length)];\n          } else {\n            t = toAccept.get(r.nextInt(toAccept.size()));\n          }\n        } else {\n          t = transitions[s][r.nextInt(transitions[s].length)];\n        }\n        soFar.add(getRandomCodePoint(r, t.min, t.max));\n        s = t.dest;\n      }\n\n      return ArrayUtil.toIntArray(soFar);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStrings#getRandomAcceptedString(Random).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStrings#getRandomAcceptedString(Random).mjava","sourceNew":"    public int[] getRandomAcceptedString(Random r) {\n      int[] codePoints = new int[0];\n      int codepointCount = 0;\n\n      int s = 0;\n\n      while(true) {\n      \n        if (a.isAccept(s)) {\n          if (a.getNumTransitions(s) == 0) {\n            // stop now\n            break;\n          } else {\n            if (r.nextBoolean()) {\n              break;\n            }\n          }\n        }\n\n        if (a.getNumTransitions(s) == 0) {\n          throw new RuntimeException(\"this automaton has dead states\");\n        }\n\n        boolean cheat = r.nextBoolean();\n\n        final Transition t;\n        if (cheat) {\n          // pick a transition that we know is the fastest\n          // path to an accept state\n          List<Transition> toAccept = new ArrayList<>();\n          for(Transition t0 : transitions[s]) {\n            if (leadsToAccept.containsKey(t0)) {\n              toAccept.add(t0);\n            }\n          }\n          if (toAccept.size() == 0) {\n            // this is OK -- it means we jumped into a cycle\n            t = transitions[s][r.nextInt(transitions[s].length)];\n          } else {\n            t = toAccept.get(r.nextInt(toAccept.size()));\n          }\n        } else {\n          t = transitions[s][r.nextInt(transitions[s].length)];\n        }\n        codePoints = ArrayUtil.grow(codePoints, codepointCount + 1);\n        codePoints[codepointCount++] = getRandomCodePoint(r, t.min, t.max);\n        s = t.dest;\n      }\n\n      return Arrays.copyOf(codePoints, codepointCount);\n    }\n\n","sourceOld":"    public int[] getRandomAcceptedString(Random r) {\n\n      final List<Integer> soFar = new ArrayList<>();\n\n      int s = 0;\n\n      while(true) {\n      \n        if (a.isAccept(s)) {\n          if (a.getNumTransitions(s) == 0) {\n            // stop now\n            break;\n          } else {\n            if (r.nextBoolean()) {\n              break;\n            }\n          }\n        }\n\n        if (a.getNumTransitions(s) == 0) {\n          throw new RuntimeException(\"this automaton has dead states\");\n        }\n\n        boolean cheat = r.nextBoolean();\n\n        final Transition t;\n        if (cheat) {\n          // pick a transition that we know is the fastest\n          // path to an accept state\n          List<Transition> toAccept = new ArrayList<>();\n          for(Transition t0 : transitions[s]) {\n            if (leadsToAccept.containsKey(t0)) {\n              toAccept.add(t0);\n            }\n          }\n          if (toAccept.size() == 0) {\n            // this is OK -- it means we jumped into a cycle\n            t = transitions[s][r.nextInt(transitions[s].length)];\n          } else {\n            t = toAccept.get(r.nextInt(toAccept.size()));\n          }\n        } else {\n          t = transitions[s][r.nextInt(transitions[s].length)];\n        }\n        soFar.add(getRandomCodePoint(r, t.min, t.max));\n        s = t.dest;\n      }\n\n      return ArrayUtil.toIntArray(soFar);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStrings#getRandomAcceptedString(Random).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStrings#getRandomAcceptedString(Random).mjava","sourceNew":"    public int[] getRandomAcceptedString(Random r) {\n      int[] codePoints = new int[0];\n      int codepointCount = 0;\n\n      int s = 0;\n\n      while(true) {\n      \n        if (a.isAccept(s)) {\n          if (a.getNumTransitions(s) == 0) {\n            // stop now\n            break;\n          } else {\n            if (r.nextBoolean()) {\n              break;\n            }\n          }\n        }\n\n        if (a.getNumTransitions(s) == 0) {\n          throw new RuntimeException(\"this automaton has dead states\");\n        }\n\n        boolean cheat = r.nextBoolean();\n\n        final Transition t;\n        if (cheat) {\n          // pick a transition that we know is the fastest\n          // path to an accept state\n          List<Transition> toAccept = new ArrayList<>();\n          for(Transition t0 : transitions[s]) {\n            if (leadsToAccept.containsKey(t0)) {\n              toAccept.add(t0);\n            }\n          }\n          if (toAccept.size() == 0) {\n            // this is OK -- it means we jumped into a cycle\n            t = transitions[s][r.nextInt(transitions[s].length)];\n          } else {\n            t = toAccept.get(r.nextInt(toAccept.size()));\n          }\n        } else {\n          t = transitions[s][r.nextInt(transitions[s].length)];\n        }\n        codePoints = ArrayUtil.grow(codePoints, codepointCount + 1);\n        codePoints[codepointCount++] = getRandomCodePoint(r, t.min, t.max);\n        s = t.dest;\n      }\n\n      return Arrays.copyOf(codePoints, codepointCount);\n    }\n\n","sourceOld":"    public int[] getRandomAcceptedString(Random r) {\n\n      final List<Integer> soFar = new ArrayList<>();\n\n      int s = 0;\n\n      while(true) {\n      \n        if (a.isAccept(s)) {\n          if (a.getNumTransitions(s) == 0) {\n            // stop now\n            break;\n          } else {\n            if (r.nextBoolean()) {\n              break;\n            }\n          }\n        }\n\n        if (a.getNumTransitions(s) == 0) {\n          throw new RuntimeException(\"this automaton has dead states\");\n        }\n\n        boolean cheat = r.nextBoolean();\n\n        final Transition t;\n        if (cheat) {\n          // pick a transition that we know is the fastest\n          // path to an accept state\n          List<Transition> toAccept = new ArrayList<>();\n          for(Transition t0 : transitions[s]) {\n            if (leadsToAccept.containsKey(t0)) {\n              toAccept.add(t0);\n            }\n          }\n          if (toAccept.size() == 0) {\n            // this is OK -- it means we jumped into a cycle\n            t = transitions[s][r.nextInt(transitions[s].length)];\n          } else {\n            t = toAccept.get(r.nextInt(toAccept.size()));\n          }\n        } else {\n          t = transitions[s][r.nextInt(transitions[s].length)];\n        }\n        soFar.add(getRandomCodePoint(r, t.min, t.max));\n        s = t.dest;\n      }\n\n      return ArrayUtil.toIntArray(soFar);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStrings#getRandomAcceptedString(Random).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStrings#getRandomAcceptedString(Random).mjava","sourceNew":"    public int[] getRandomAcceptedString(Random r) {\n      int[] codePoints = new int[0];\n      int codepointCount = 0;\n\n      int s = 0;\n\n      while(true) {\n      \n        if (a.isAccept(s)) {\n          if (a.getNumTransitions(s) == 0) {\n            // stop now\n            break;\n          } else {\n            if (r.nextBoolean()) {\n              break;\n            }\n          }\n        }\n\n        if (a.getNumTransitions(s) == 0) {\n          throw new RuntimeException(\"this automaton has dead states\");\n        }\n\n        boolean cheat = r.nextBoolean();\n\n        final Transition t;\n        if (cheat) {\n          // pick a transition that we know is the fastest\n          // path to an accept state\n          List<Transition> toAccept = new ArrayList<>();\n          for(Transition t0 : transitions[s]) {\n            if (leadsToAccept.containsKey(t0)) {\n              toAccept.add(t0);\n            }\n          }\n          if (toAccept.size() == 0) {\n            // this is OK -- it means we jumped into a cycle\n            t = transitions[s][r.nextInt(transitions[s].length)];\n          } else {\n            t = toAccept.get(r.nextInt(toAccept.size()));\n          }\n        } else {\n          t = transitions[s][r.nextInt(transitions[s].length)];\n        }\n        codePoints = ArrayUtil.grow(codePoints, codepointCount + 1);\n        codePoints[codepointCount++] = getRandomCodePoint(r, t.min, t.max);\n        s = t.dest;\n      }\n\n      return Arrays.copyOf(codePoints, codepointCount);\n    }\n\n","sourceOld":"    public int[] getRandomAcceptedString(Random r) {\n\n      final List<Integer> soFar = new ArrayList<>();\n\n      int s = 0;\n\n      while(true) {\n      \n        if (a.isAccept(s)) {\n          if (a.getNumTransitions(s) == 0) {\n            // stop now\n            break;\n          } else {\n            if (r.nextBoolean()) {\n              break;\n            }\n          }\n        }\n\n        if (a.getNumTransitions(s) == 0) {\n          throw new RuntimeException(\"this automaton has dead states\");\n        }\n\n        boolean cheat = r.nextBoolean();\n\n        final Transition t;\n        if (cheat) {\n          // pick a transition that we know is the fastest\n          // path to an accept state\n          List<Transition> toAccept = new ArrayList<>();\n          for(Transition t0 : transitions[s]) {\n            if (leadsToAccept.containsKey(t0)) {\n              toAccept.add(t0);\n            }\n          }\n          if (toAccept.size() == 0) {\n            // this is OK -- it means we jumped into a cycle\n            t = transitions[s][r.nextInt(transitions[s].length)];\n          } else {\n            t = toAccept.get(r.nextInt(toAccept.size()));\n          }\n        } else {\n          t = transitions[s][r.nextInt(transitions[s].length)];\n        }\n        soFar.add(getRandomCodePoint(r, t.min, t.max));\n        s = t.dest;\n      }\n\n      return ArrayUtil.toIntArray(soFar);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9798d0818e7a880546802b509792d3f3d57babd2","date":1528358901,"type":3,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStrings#getRandomAcceptedString(Random).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStrings#getRandomAcceptedString(Random).mjava","sourceNew":"    public int[] getRandomAcceptedString(Random r) {\n      int[] codePoints = new int[0];\n      int codepointCount = 0;\n\n      int s = 0;\n\n      while(true) {\n      \n        if (a.isAccept(s)) {\n          if (a.getNumTransitions(s) == 0) {\n            // stop now\n            break;\n          } else {\n            if (r.nextBoolean()) {\n              break;\n            }\n          }\n        }\n\n        if (a.getNumTransitions(s) == 0) {\n          throw new RuntimeException(\"this automaton has dead states\");\n        }\n\n        boolean cheat = r.nextBoolean();\n\n        final Transition t;\n        if (cheat) {\n          // pick a transition that we know is the fastest\n          // path to an accept state\n          List<Transition> toAccept = new ArrayList<>();\n          for(Transition t0 : transitions[s]) {\n            if (leadsToAccept.containsKey(t0)) {\n              toAccept.add(t0);\n            }\n          }\n          if (toAccept.size() == 0) {\n            // this is OK -- it means we jumped into a cycle\n            t = transitions[s][r.nextInt(transitions[s].length)];\n          } else {\n            t = toAccept.get(r.nextInt(toAccept.size()));\n          }\n        } else {\n          t = transitions[s][r.nextInt(transitions[s].length)];\n        }\n        codePoints = ArrayUtil.grow(codePoints, codepointCount + 1);\n        codePoints[codepointCount++] = getRandomCodePoint(r, t.min, t.max);\n        s = t.dest;\n      }\n      return ArrayUtil.copyOfSubArray(codePoints, 0, codepointCount);\n    }\n\n","sourceOld":"    public int[] getRandomAcceptedString(Random r) {\n      int[] codePoints = new int[0];\n      int codepointCount = 0;\n\n      int s = 0;\n\n      while(true) {\n      \n        if (a.isAccept(s)) {\n          if (a.getNumTransitions(s) == 0) {\n            // stop now\n            break;\n          } else {\n            if (r.nextBoolean()) {\n              break;\n            }\n          }\n        }\n\n        if (a.getNumTransitions(s) == 0) {\n          throw new RuntimeException(\"this automaton has dead states\");\n        }\n\n        boolean cheat = r.nextBoolean();\n\n        final Transition t;\n        if (cheat) {\n          // pick a transition that we know is the fastest\n          // path to an accept state\n          List<Transition> toAccept = new ArrayList<>();\n          for(Transition t0 : transitions[s]) {\n            if (leadsToAccept.containsKey(t0)) {\n              toAccept.add(t0);\n            }\n          }\n          if (toAccept.size() == 0) {\n            // this is OK -- it means we jumped into a cycle\n            t = transitions[s][r.nextInt(transitions[s].length)];\n          } else {\n            t = toAccept.get(r.nextInt(toAccept.size()));\n          }\n        } else {\n          t = transitions[s][r.nextInt(transitions[s].length)];\n        }\n        codePoints = ArrayUtil.grow(codePoints, codepointCount + 1);\n        codePoints[codepointCount++] = getRandomCodePoint(r, t.min, t.max);\n        s = t.dest;\n      }\n\n      return Arrays.copyOf(codePoints, codepointCount);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStrings#getRandomAcceptedString(Random).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStrings#getRandomAcceptedString(Random).mjava","sourceNew":"    public int[] getRandomAcceptedString(Random r) {\n      int[] codePoints = new int[0];\n      int codepointCount = 0;\n\n      int s = 0;\n\n      while(true) {\n      \n        if (a.isAccept(s)) {\n          if (a.getNumTransitions(s) == 0) {\n            // stop now\n            break;\n          } else {\n            if (r.nextBoolean()) {\n              break;\n            }\n          }\n        }\n\n        if (a.getNumTransitions(s) == 0) {\n          throw new RuntimeException(\"this automaton has dead states\");\n        }\n\n        boolean cheat = r.nextBoolean();\n\n        final Transition t;\n        if (cheat) {\n          // pick a transition that we know is the fastest\n          // path to an accept state\n          List<Transition> toAccept = new ArrayList<>();\n          for(Transition t0 : transitions[s]) {\n            if (leadsToAccept.containsKey(t0)) {\n              toAccept.add(t0);\n            }\n          }\n          if (toAccept.size() == 0) {\n            // this is OK -- it means we jumped into a cycle\n            t = transitions[s][r.nextInt(transitions[s].length)];\n          } else {\n            t = toAccept.get(r.nextInt(toAccept.size()));\n          }\n        } else {\n          t = transitions[s][r.nextInt(transitions[s].length)];\n        }\n        codePoints = ArrayUtil.grow(codePoints, codepointCount + 1);\n        codePoints[codepointCount++] = getRandomCodePoint(r, t.min, t.max);\n        s = t.dest;\n      }\n      return ArrayUtil.copyOfSubArray(codePoints, 0, codepointCount);\n    }\n\n","sourceOld":"    public int[] getRandomAcceptedString(Random r) {\n      int[] codePoints = new int[0];\n      int codepointCount = 0;\n\n      int s = 0;\n\n      while(true) {\n      \n        if (a.isAccept(s)) {\n          if (a.getNumTransitions(s) == 0) {\n            // stop now\n            break;\n          } else {\n            if (r.nextBoolean()) {\n              break;\n            }\n          }\n        }\n\n        if (a.getNumTransitions(s) == 0) {\n          throw new RuntimeException(\"this automaton has dead states\");\n        }\n\n        boolean cheat = r.nextBoolean();\n\n        final Transition t;\n        if (cheat) {\n          // pick a transition that we know is the fastest\n          // path to an accept state\n          List<Transition> toAccept = new ArrayList<>();\n          for(Transition t0 : transitions[s]) {\n            if (leadsToAccept.containsKey(t0)) {\n              toAccept.add(t0);\n            }\n          }\n          if (toAccept.size() == 0) {\n            // this is OK -- it means we jumped into a cycle\n            t = transitions[s][r.nextInt(transitions[s].length)];\n          } else {\n            t = toAccept.get(r.nextInt(toAccept.size()));\n          }\n        } else {\n          t = transitions[s][r.nextInt(transitions[s].length)];\n        }\n        codePoints = ArrayUtil.grow(codePoints, codepointCount + 1);\n        codePoints[codepointCount++] = getRandomCodePoint(r, t.min, t.max);\n        s = t.dest;\n      }\n\n      return Arrays.copyOf(codePoints, codepointCount);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStrings#getRandomAcceptedString(Random).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStrings#getRandomAcceptedString(Random).mjava","sourceNew":"    public int[] getRandomAcceptedString(Random r) {\n      int[] codePoints = new int[0];\n      int codepointCount = 0;\n\n      int s = 0;\n\n      while(true) {\n      \n        if (a.isAccept(s)) {\n          if (a.getNumTransitions(s) == 0) {\n            // stop now\n            break;\n          } else {\n            if (r.nextBoolean()) {\n              break;\n            }\n          }\n        }\n\n        if (a.getNumTransitions(s) == 0) {\n          throw new RuntimeException(\"this automaton has dead states\");\n        }\n\n        boolean cheat = r.nextBoolean();\n\n        final Transition t;\n        if (cheat) {\n          // pick a transition that we know is the fastest\n          // path to an accept state\n          List<Transition> toAccept = new ArrayList<>();\n          for(Transition t0 : transitions[s]) {\n            if (leadsToAccept.containsKey(t0)) {\n              toAccept.add(t0);\n            }\n          }\n          if (toAccept.size() == 0) {\n            // this is OK -- it means we jumped into a cycle\n            t = transitions[s][r.nextInt(transitions[s].length)];\n          } else {\n            t = toAccept.get(r.nextInt(toAccept.size()));\n          }\n        } else {\n          t = transitions[s][r.nextInt(transitions[s].length)];\n        }\n        codePoints = ArrayUtil.grow(codePoints, codepointCount + 1);\n        codePoints[codepointCount++] = getRandomCodePoint(r, t.min, t.max);\n        s = t.dest;\n      }\n      return ArrayUtil.copyOfSubArray(codePoints, 0, codepointCount);\n    }\n\n","sourceOld":"    public int[] getRandomAcceptedString(Random r) {\n      int[] codePoints = new int[0];\n      int codepointCount = 0;\n\n      int s = 0;\n\n      while(true) {\n      \n        if (a.isAccept(s)) {\n          if (a.getNumTransitions(s) == 0) {\n            // stop now\n            break;\n          } else {\n            if (r.nextBoolean()) {\n              break;\n            }\n          }\n        }\n\n        if (a.getNumTransitions(s) == 0) {\n          throw new RuntimeException(\"this automaton has dead states\");\n        }\n\n        boolean cheat = r.nextBoolean();\n\n        final Transition t;\n        if (cheat) {\n          // pick a transition that we know is the fastest\n          // path to an accept state\n          List<Transition> toAccept = new ArrayList<>();\n          for(Transition t0 : transitions[s]) {\n            if (leadsToAccept.containsKey(t0)) {\n              toAccept.add(t0);\n            }\n          }\n          if (toAccept.size() == 0) {\n            // this is OK -- it means we jumped into a cycle\n            t = transitions[s][r.nextInt(transitions[s].length)];\n          } else {\n            t = toAccept.get(r.nextInt(toAccept.size()));\n          }\n        } else {\n          t = transitions[s][r.nextInt(transitions[s].length)];\n        }\n        codePoints = ArrayUtil.grow(codePoints, codepointCount + 1);\n        codePoints[codepointCount++] = getRandomCodePoint(r, t.min, t.max);\n        s = t.dest;\n      }\n\n      return Arrays.copyOf(codePoints, codepointCount);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bcb85e0b9bc3b04eccb9b0f54a53706c8ac0659f":["5c84485629d80d203608e8975a1139de9933cc38"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["5c84485629d80d203608e8975a1139de9933cc38","bcb85e0b9bc3b04eccb9b0f54a53706c8ac0659f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"83870855d82aba6819217abeff5a40779dbb28b4":["5c84485629d80d203608e8975a1139de9933cc38","0e121d43b5a10f2df530f406f935102656e9c4e8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5c84485629d80d203608e8975a1139de9933cc38","0e121d43b5a10f2df530f406f935102656e9c4e8"],"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["0e121d43b5a10f2df530f406f935102656e9c4e8","9798d0818e7a880546802b509792d3f3d57babd2"],"9798d0818e7a880546802b509792d3f3d57babd2":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"5c84485629d80d203608e8975a1139de9933cc38":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9798d0818e7a880546802b509792d3f3d57babd2"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["0e121d43b5a10f2df530f406f935102656e9c4e8","9798d0818e7a880546802b509792d3f3d57babd2"]},"commit2Childs":{"bcb85e0b9bc3b04eccb9b0f54a53706c8ac0659f":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["5c84485629d80d203608e8975a1139de9933cc38","ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b70042a8a492f7054d480ccdd2be9796510d4327","9798d0818e7a880546802b509792d3f3d57babd2","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["5c84485629d80d203608e8975a1139de9933cc38"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"5c84485629d80d203608e8975a1139de9933cc38":["bcb85e0b9bc3b04eccb9b0f54a53706c8ac0659f","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9798d0818e7a880546802b509792d3f3d57babd2":["b70042a8a492f7054d480ccdd2be9796510d4327","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b70042a8a492f7054d480ccdd2be9796510d4327","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}