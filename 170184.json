{"path":"solr/core/src/test/org/apache/solr/SolrInfoBeanTest#getClassesForPackage(String).mjava","commits":[{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/SolrInfoBeanTest#getClassesForPackage(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/SolrInfoMBeanTest#getClassesForPackage(String).mjava","sourceNew":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<>();\n    ClassLoader cld = h.getCore().getResourceLoader().getClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final URI uri = resources.nextElement().toURI();\n      if (!\"file\".equalsIgnoreCase(uri.getScheme()))\n        continue;\n      final File f = new File(uri);\n      directories.add(f);\n    }\n      \n    ArrayList<Class> classes = new ArrayList<>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             String clazzName = file.substring(0, file.length() - 6);\n             // exclude Test classes that happen to be in these packages.\n             // class.ForName'ing some of them can cause trouble.\n             if (!clazzName.endsWith(\"Test\") && !clazzName.startsWith(\"Test\")) {\n               classes.add(Class.forName(pckgname + '.' + clazzName));\n             }\n          }\n        }\n      }\n    }\n    assertFalse(\"No classes found in package '\"+pckgname+\"'; maybe your test classes are packaged as JAR file?\", classes.isEmpty());\n    return classes;\n  }\n\n","sourceOld":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<>();\n    ClassLoader cld = h.getCore().getResourceLoader().getClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final URI uri = resources.nextElement().toURI();\n      if (!\"file\".equalsIgnoreCase(uri.getScheme()))\n        continue;\n      final File f = new File(uri);\n      directories.add(f);\n    }\n      \n    ArrayList<Class> classes = new ArrayList<>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             String clazzName = file.substring(0, file.length() - 6);\n             // exclude Test classes that happen to be in these packages.\n             // class.ForName'ing some of them can cause trouble.\n             if (!clazzName.endsWith(\"Test\") && !clazzName.startsWith(\"Test\")) {\n               classes.add(Class.forName(pckgname + '.' + clazzName));\n             }\n          }\n        }\n      }\n    }\n    assertFalse(\"No classes found in package '\"+pckgname+\"'; maybe your test classes are packaged as JAR file?\", classes.isEmpty());\n    return classes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/SolrInfoBeanTest#getClassesForPackage(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/SolrInfoMBeanTest#getClassesForPackage(String).mjava","sourceNew":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<>();\n    ClassLoader cld = h.getCore().getResourceLoader().getClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final URI uri = resources.nextElement().toURI();\n      if (!\"file\".equalsIgnoreCase(uri.getScheme()))\n        continue;\n      final File f = new File(uri);\n      directories.add(f);\n    }\n      \n    ArrayList<Class> classes = new ArrayList<>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             String clazzName = file.substring(0, file.length() - 6);\n             // exclude Test classes that happen to be in these packages.\n             // class.ForName'ing some of them can cause trouble.\n             if (!clazzName.endsWith(\"Test\") && !clazzName.startsWith(\"Test\")) {\n               classes.add(Class.forName(pckgname + '.' + clazzName));\n             }\n          }\n        }\n      }\n    }\n    assertFalse(\"No classes found in package '\"+pckgname+\"'; maybe your test classes are packaged as JAR file?\", classes.isEmpty());\n    return classes;\n  }\n\n","sourceOld":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<>();\n    ClassLoader cld = h.getCore().getResourceLoader().getClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final URI uri = resources.nextElement().toURI();\n      if (!\"file\".equalsIgnoreCase(uri.getScheme()))\n        continue;\n      final File f = new File(uri);\n      directories.add(f);\n    }\n      \n    ArrayList<Class> classes = new ArrayList<>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             String clazzName = file.substring(0, file.length() - 6);\n             // exclude Test classes that happen to be in these packages.\n             // class.ForName'ing some of them can cause trouble.\n             if (!clazzName.endsWith(\"Test\") && !clazzName.startsWith(\"Test\")) {\n               classes.add(Class.forName(pckgname + '.' + clazzName));\n             }\n          }\n        }\n      }\n    }\n    assertFalse(\"No classes found in package '\"+pckgname+\"'; maybe your test classes are packaged as JAR file?\", classes.isEmpty());\n    return classes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/SolrInfoBeanTest#getClassesForPackage(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/SolrInfoBeanTest#getClassesForPackage(String).mjava","sourceNew":"  @SuppressWarnings({\"rawtypes\"})\n  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<>();\n    ClassLoader cld = h.getCore().getResourceLoader().getClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final URI uri = resources.nextElement().toURI();\n      if (!\"file\".equalsIgnoreCase(uri.getScheme()))\n        continue;\n      final File f = new File(uri);\n      directories.add(f);\n    }\n      \n    @SuppressWarnings({\"rawtypes\"})\n    ArrayList<Class> classes = new ArrayList<>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             String clazzName = file.substring(0, file.length() - 6);\n             // exclude Test classes that happen to be in these packages.\n             // class.ForName'ing some of them can cause trouble.\n             if (!clazzName.endsWith(\"Test\") && !clazzName.startsWith(\"Test\")) {\n               classes.add(Class.forName(pckgname + '.' + clazzName));\n             }\n          }\n        }\n      }\n    }\n    assertFalse(\"No classes found in package '\"+pckgname+\"'; maybe your test classes are packaged as JAR file?\", classes.isEmpty());\n    return classes;\n  }\n\n","sourceOld":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<>();\n    ClassLoader cld = h.getCore().getResourceLoader().getClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final URI uri = resources.nextElement().toURI();\n      if (!\"file\".equalsIgnoreCase(uri.getScheme()))\n        continue;\n      final File f = new File(uri);\n      directories.add(f);\n    }\n      \n    ArrayList<Class> classes = new ArrayList<>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             String clazzName = file.substring(0, file.length() - 6);\n             // exclude Test classes that happen to be in these packages.\n             // class.ForName'ing some of them can cause trouble.\n             if (!clazzName.endsWith(\"Test\") && !clazzName.startsWith(\"Test\")) {\n               classes.add(Class.forName(pckgname + '.' + clazzName));\n             }\n          }\n        }\n      }\n    }\n    assertFalse(\"No classes found in package '\"+pckgname+\"'; maybe your test classes are packaged as JAR file?\", classes.isEmpty());\n    return classes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"816521ebaad5add9cb96bb88c577394e2938c40b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["816521ebaad5add9cb96bb88c577394e2938c40b"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"816521ebaad5add9cb96bb88c577394e2938c40b":["e98520789adb1d5ad05afb4956eca0944a929688"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}