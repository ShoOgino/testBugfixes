{"path":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#testNonFinalStopNodes().mjava","commits":[{"id":"41a7130051d507b3a37c0b9f41f5937dfed6a88e","date":1302628279,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#testNonFinalStopNodes().mjava","pathOld":"/dev/null","sourceNew":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNodes() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, outputs);\n\n    final FST<Long> fst = new FST<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<Long>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = outputs.get(17);\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = outputs.get(42);\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n    \n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\");\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\");\n    final FST<Long> fst2 = new FST<Long>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#testNonFinalStopNodes().mjava","pathOld":"/dev/null","sourceNew":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNodes() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, outputs);\n\n    final FST<Long> fst = new FST<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<Long>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = outputs.get(17);\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = outputs.get(42);\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n    \n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\");\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\");\n    final FST<Long> fst2 = new FST<Long>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#testNonFinalStopNodes().mjava","pathOld":"/dev/null","sourceNew":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNodes() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, outputs);\n\n    final FST<Long> fst = new FST<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<Long>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = outputs.get(17);\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = outputs.get(42);\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n    \n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\");\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\");\n    final FST<Long> fst2 = new FST<Long>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#testNonFinalStopNodes().mjava","pathOld":"/dev/null","sourceNew":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNodes() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, outputs);\n\n    final FST<Long> fst = new FST<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<Long>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = outputs.get(17);\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = outputs.get(42);\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n    \n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\");\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\");\n    final FST<Long> fst2 = new FST<Long>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8be6e1e4fbbc94d90b78f175c03ff389b6949373","date":1306674752,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNodes().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#testNonFinalStopNodes().mjava","sourceNew":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNodes() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, outputs);\n\n    final FST<Long> fst = new FST<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<Long>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = outputs.get(17);\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = outputs.get(42);\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n    \n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\");\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\");\n    final FST<Long> fst2 = new FST<Long>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNodes() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, outputs);\n\n    final FST<Long> fst = new FST<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<Long>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = outputs.get(17);\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = outputs.get(42);\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n    \n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\");\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\");\n    final FST<Long> fst2 = new FST<Long>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNodes().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#testNonFinalStopNodes().mjava","sourceNew":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNodes() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, outputs);\n\n    final FST<Long> fst = new FST<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<Long>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = outputs.get(17);\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = outputs.get(42);\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n    \n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\");\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\");\n    final FST<Long> fst2 = new FST<Long>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNodes() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, outputs);\n\n    final FST<Long> fst = new FST<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<Long>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = outputs.get(17);\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = outputs.get(42);\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n    \n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\");\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\");\n    final FST<Long> fst2 = new FST<Long>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNodes().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#testNonFinalStopNodes().mjava","sourceNew":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNodes() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, outputs);\n\n    final FST<Long> fst = new FST<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<Long>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = outputs.get(17);\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = outputs.get(42);\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n    \n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\");\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\");\n    final FST<Long> fst2 = new FST<Long>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNodes() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, outputs);\n\n    final FST<Long> fst = new FST<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<Long>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = outputs.get(17);\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = outputs.get(42);\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n    \n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\");\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\");\n    final FST<Long> fst2 = new FST<Long>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["41a7130051d507b3a37c0b9f41f5937dfed6a88e"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","41a7130051d507b3a37c0b9f41f5937dfed6a88e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","41a7130051d507b3a37c0b9f41f5937dfed6a88e"],"962d04139994fce5193143ef35615499a9a96d78":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","41a7130051d507b3a37c0b9f41f5937dfed6a88e"],"41a7130051d507b3a37c0b9f41f5937dfed6a88e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["135621f3a0670a9394eb563224a3b76cc4dddc0f","8be6e1e4fbbc94d90b78f175c03ff389b6949373"]},"commit2Childs":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","41a7130051d507b3a37c0b9f41f5937dfed6a88e"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"962d04139994fce5193143ef35615499a9a96d78":[],"41a7130051d507b3a37c0b9f41f5937dfed6a88e":["8be6e1e4fbbc94d90b78f175c03ff389b6949373","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","962d04139994fce5193143ef35615499a9a96d78","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}