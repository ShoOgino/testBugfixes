{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateClusterState().mjava","commits":[{"id":"102da6baafc0f534a59f31729343dbab9d3b9e9a","date":1438410244,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateClusterState().mjava","pathOld":"/dev/null","sourceNew":"  // load and publish a new CollectionInfo\n  public void updateClusterState() throws KeeperException, InterruptedException {\n    updateClusterState(false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1072b8e47b50f1c4fb039e1f54a736f381d6f809","date":1438956441,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateClusterState().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateClusterState().mjava","sourceNew":"  /**\n   * Forcibly refresh cluster state from ZK. Do this only to avoid race conditions because it's expensive.\n   */\n  public void updateClusterState() throws KeeperException, InterruptedException {\n    synchronized (getUpdateLock()) {\n      if (clusterState == null) {\n        // Never initialized, just run normal initialization.\n        createClusterStateWatchersAndUpdate();\n        return;\n      }\n      // No need to set watchers because we should already have watchers registered for everything.\n      refreshLegacyClusterState(null);\n      for (String coll : watchedCollectionStates.keySet()) {\n        DocCollection newState = fetchCollectionState(coll, null);\n        updateWatchedCollection(coll, newState);\n      }\n      refreshLazyFormat2Collections(true);\n      refreshLiveNodes(null);\n      constructState();\n    }\n  }\n\n","sourceOld":"  // load and publish a new CollectionInfo\n  public void updateClusterState() throws KeeperException, InterruptedException {\n    updateClusterState(false);\n  }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56","5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"68281b529b74366dea47f5d3f95138e3c8422474","date":1439843698,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateClusterState().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateClusterState().mjava","sourceNew":"  /**\n   * Forcibly refresh cluster state from ZK. Do this only to avoid race conditions because it's expensive.\n   */\n  public void updateClusterState() throws KeeperException, InterruptedException {\n    synchronized (getUpdateLock()) {\n      if (clusterState == null) {\n        // Never initialized, just run normal initialization.\n        createClusterStateWatchersAndUpdate();\n        return;\n      }\n      // No need to set watchers because we should already have watchers registered for everything.\n      refreshLegacyClusterState(null);\n      // Need a copy so we don't delete from what we're iterating over.\n      Collection<String> safeCopy = new ArrayList<>(watchedCollectionStates.keySet());\n      for (String coll : safeCopy) {\n        DocCollection newState = fetchCollectionState(coll, null);\n        updateWatchedCollection(coll, newState);\n      }\n      refreshLazyFormat2Collections(true);\n      refreshLiveNodes(null);\n      constructState();\n    }\n  }\n\n","sourceOld":"  /**\n   * Forcibly refresh cluster state from ZK. Do this only to avoid race conditions because it's expensive.\n   */\n  public void updateClusterState() throws KeeperException, InterruptedException {\n    synchronized (getUpdateLock()) {\n      if (clusterState == null) {\n        // Never initialized, just run normal initialization.\n        createClusterStateWatchersAndUpdate();\n        return;\n      }\n      // No need to set watchers because we should already have watchers registered for everything.\n      refreshLegacyClusterState(null);\n      for (String coll : watchedCollectionStates.keySet()) {\n        DocCollection newState = fetchCollectionState(coll, null);\n        updateWatchedCollection(coll, newState);\n      }\n      refreshLazyFormat2Collections(true);\n      refreshLiveNodes(null);\n      constructState();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8bf04c3f77a2936f29948b9c0dd215d82d43f5cf","date":1440482195,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateClusterState().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateClusterState().mjava","sourceNew":"  /**\n   * Forcibly refresh cluster state from ZK. Do this only to avoid race conditions because it's expensive.\n   */\n  public void updateClusterState() throws KeeperException, InterruptedException {\n    synchronized (getUpdateLock()) {\n      if (clusterState == null) {\n        // Never initialized, just run normal initialization.\n        createClusterStateWatchersAndUpdate();\n        return;\n      }\n      // No need to set watchers because we should already have watchers registered for everything.\n      refreshLegacyClusterState(null);\n      // Need a copy so we don't delete from what we're iterating over.\n      Collection<String> safeCopy = new ArrayList<>(watchedCollectionStates.keySet());\n      for (String coll : safeCopy) {\n        DocCollection newState = fetchCollectionState(coll, null);\n        updateWatchedCollection(coll, newState);\n      }\n      refreshCollectionList(null);\n      refreshLiveNodes(null);\n      constructState();\n    }\n  }\n\n","sourceOld":"  /**\n   * Forcibly refresh cluster state from ZK. Do this only to avoid race conditions because it's expensive.\n   */\n  public void updateClusterState() throws KeeperException, InterruptedException {\n    synchronized (getUpdateLock()) {\n      if (clusterState == null) {\n        // Never initialized, just run normal initialization.\n        createClusterStateWatchersAndUpdate();\n        return;\n      }\n      // No need to set watchers because we should already have watchers registered for everything.\n      refreshLegacyClusterState(null);\n      // Need a copy so we don't delete from what we're iterating over.\n      Collection<String> safeCopy = new ArrayList<>(watchedCollectionStates.keySet());\n      for (String coll : safeCopy) {\n        DocCollection newState = fetchCollectionState(coll, null);\n        updateWatchedCollection(coll, newState);\n      }\n      refreshLazyFormat2Collections(true);\n      refreshLiveNodes(null);\n      constructState();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","date":1457343183,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateClusterState().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateClusterState().mjava","sourceNew":"  /**\n   * Forcibly refresh cluster state from ZK. Do this only to avoid race conditions because it's expensive.\n   *\n   * @deprecated Don't call this, call {@link #forceUpdateCollection(String)} on a single collection if you must.\n   */\n  @Deprecated\n  public void updateClusterState() throws KeeperException, InterruptedException {\n    synchronized (getUpdateLock()) {\n      if (clusterState == null) {\n        // Never initialized, just run normal initialization.\n        createClusterStateWatchersAndUpdate();\n        return;\n      }\n      // No need to set watchers because we should already have watchers registered for everything.\n      refreshLegacyClusterState(null);\n      // Need a copy so we don't delete from what we're iterating over.\n      Collection<String> safeCopy = new ArrayList<>(watchedCollectionStates.keySet());\n      for (String coll : safeCopy) {\n        DocCollection newState = fetchCollectionState(coll, null);\n        updateWatchedCollection(coll, newState);\n      }\n      refreshCollectionList(null);\n      refreshLiveNodes(null);\n      constructState();\n    }\n  }\n\n","sourceOld":"  /**\n   * Forcibly refresh cluster state from ZK. Do this only to avoid race conditions because it's expensive.\n   */\n  public void updateClusterState() throws KeeperException, InterruptedException {\n    synchronized (getUpdateLock()) {\n      if (clusterState == null) {\n        // Never initialized, just run normal initialization.\n        createClusterStateWatchersAndUpdate();\n        return;\n      }\n      // No need to set watchers because we should already have watchers registered for everything.\n      refreshLegacyClusterState(null);\n      // Need a copy so we don't delete from what we're iterating over.\n      Collection<String> safeCopy = new ArrayList<>(watchedCollectionStates.keySet());\n      for (String coll : safeCopy) {\n        DocCollection newState = fetchCollectionState(coll, null);\n        updateWatchedCollection(coll, newState);\n      }\n      refreshCollectionList(null);\n      refreshLiveNodes(null);\n      constructState();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f","date":1467384467,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateClusterState().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateClusterState().mjava","sourceNew":"  /**\n   * Forcibly refresh cluster state from ZK. Do this only to avoid race conditions because it's expensive.\n   *\n   * @deprecated Don't call this, call {@link #forceUpdateCollection(String)} on a single collection if you must.\n   */\n  @Deprecated\n  public void updateClusterState() throws KeeperException, InterruptedException {\n    synchronized (getUpdateLock()) {\n      if (clusterState == null) {\n        // Never initialized, just run normal initialization.\n        createClusterStateWatchersAndUpdate();\n        return;\n      }\n      // No need to set watchers because we should already have watchers registered for everything.\n      refreshCollectionList(null);\n      refreshLiveNodes(null);\n      refreshLegacyClusterState(null);\n      // Need a copy so we don't delete from what we're iterating over.\n      Collection<String> safeCopy = new ArrayList<>(watchedCollectionStates.keySet());\n      Map<String, DocCollection> updatedCollections = new HashMap<>();\n      for (String coll : safeCopy) {\n        DocCollection newState = fetchCollectionState(coll, null);\n        if (updateWatchedCollection(coll, newState)) {\n          updatedCollections.put(coll, newState);\n        }\n      }\n      constructState(updatedCollections);\n    }\n  }\n\n","sourceOld":"  /**\n   * Forcibly refresh cluster state from ZK. Do this only to avoid race conditions because it's expensive.\n   *\n   * @deprecated Don't call this, call {@link #forceUpdateCollection(String)} on a single collection if you must.\n   */\n  @Deprecated\n  public void updateClusterState() throws KeeperException, InterruptedException {\n    synchronized (getUpdateLock()) {\n      if (clusterState == null) {\n        // Never initialized, just run normal initialization.\n        createClusterStateWatchersAndUpdate();\n        return;\n      }\n      // No need to set watchers because we should already have watchers registered for everything.\n      refreshLegacyClusterState(null);\n      // Need a copy so we don't delete from what we're iterating over.\n      Collection<String> safeCopy = new ArrayList<>(watchedCollectionStates.keySet());\n      for (String coll : safeCopy) {\n        DocCollection newState = fetchCollectionState(coll, null);\n        updateWatchedCollection(coll, newState);\n      }\n      refreshCollectionList(null);\n      refreshLiveNodes(null);\n      constructState();\n    }\n  }\n\n","bugFix":null,"bugIntro":["f54f0eff6955cf57610f6b93dbbba3a2bf540619"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f54f0eff6955cf57610f6b93dbbba3a2bf540619","date":1467968491,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateClusterState().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateClusterState().mjava","sourceNew":"  /**\n   * Forcibly refresh cluster state from ZK. Do this only to avoid race conditions because it's expensive.\n   *\n   * @deprecated Don't call this, call {@link #forceUpdateCollection(String)} on a single collection if you must.\n   */\n  @Deprecated\n  public void updateClusterState() throws KeeperException, InterruptedException {\n    synchronized (getUpdateLock()) {\n      if (clusterState == null) {\n        // Never initialized, just run normal initialization.\n        createClusterStateWatchersAndUpdate();\n        return;\n      }\n      // No need to set watchers because we should already have watchers registered for everything.\n      refreshCollectionList(null);\n      refreshLiveNodes(null);\n      refreshLegacyClusterState(null);\n      // Need a copy so we don't delete from what we're iterating over.\n      Collection<String> safeCopy = new ArrayList<>(watchedCollectionStates.keySet());\n      Set<String> updatedCollections = new HashSet<>();\n      for (String coll : safeCopy) {\n        DocCollection newState = fetchCollectionState(coll, null);\n        if (updateWatchedCollection(coll, newState)) {\n          updatedCollections.add(coll);\n        }\n      }\n      constructState(updatedCollections);\n    }\n  }\n\n","sourceOld":"  /**\n   * Forcibly refresh cluster state from ZK. Do this only to avoid race conditions because it's expensive.\n   *\n   * @deprecated Don't call this, call {@link #forceUpdateCollection(String)} on a single collection if you must.\n   */\n  @Deprecated\n  public void updateClusterState() throws KeeperException, InterruptedException {\n    synchronized (getUpdateLock()) {\n      if (clusterState == null) {\n        // Never initialized, just run normal initialization.\n        createClusterStateWatchersAndUpdate();\n        return;\n      }\n      // No need to set watchers because we should already have watchers registered for everything.\n      refreshCollectionList(null);\n      refreshLiveNodes(null);\n      refreshLegacyClusterState(null);\n      // Need a copy so we don't delete from what we're iterating over.\n      Collection<String> safeCopy = new ArrayList<>(watchedCollectionStates.keySet());\n      Map<String, DocCollection> updatedCollections = new HashMap<>();\n      for (String coll : safeCopy) {\n        DocCollection newState = fetchCollectionState(coll, null);\n        if (updateWatchedCollection(coll, newState)) {\n          updatedCollections.put(coll, newState);\n        }\n      }\n      constructState(updatedCollections);\n    }\n  }\n\n","bugFix":["b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateClusterState().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateClusterState().mjava","sourceNew":"  /**\n   * Forcibly refresh cluster state from ZK. Do this only to avoid race conditions because it's expensive.\n   *\n   * @deprecated Don't call this, call {@link #forceUpdateCollection(String)} on a single collection if you must.\n   */\n  @Deprecated\n  public void updateClusterState() throws KeeperException, InterruptedException {\n    synchronized (getUpdateLock()) {\n      if (clusterState == null) {\n        // Never initialized, just run normal initialization.\n        createClusterStateWatchersAndUpdate();\n        return;\n      }\n      // No need to set watchers because we should already have watchers registered for everything.\n      refreshCollectionList(null);\n      refreshLiveNodes(null);\n      refreshLegacyClusterState(null);\n      // Need a copy so we don't delete from what we're iterating over.\n      Collection<String> safeCopy = new ArrayList<>(watchedCollectionStates.keySet());\n      Set<String> updatedCollections = new HashSet<>();\n      for (String coll : safeCopy) {\n        DocCollection newState = fetchCollectionState(coll, null);\n        if (updateWatchedCollection(coll, newState)) {\n          updatedCollections.add(coll);\n        }\n      }\n      constructState(updatedCollections);\n    }\n  }\n\n","sourceOld":"  /**\n   * Forcibly refresh cluster state from ZK. Do this only to avoid race conditions because it's expensive.\n   *\n   * @deprecated Don't call this, call {@link #forceUpdateCollection(String)} on a single collection if you must.\n   */\n  @Deprecated\n  public void updateClusterState() throws KeeperException, InterruptedException {\n    synchronized (getUpdateLock()) {\n      if (clusterState == null) {\n        // Never initialized, just run normal initialization.\n        createClusterStateWatchersAndUpdate();\n        return;\n      }\n      // No need to set watchers because we should already have watchers registered for everything.\n      refreshLegacyClusterState(null);\n      // Need a copy so we don't delete from what we're iterating over.\n      Collection<String> safeCopy = new ArrayList<>(watchedCollectionStates.keySet());\n      for (String coll : safeCopy) {\n        DocCollection newState = fetchCollectionState(coll, null);\n        updateWatchedCollection(coll, newState);\n      }\n      refreshCollectionList(null);\n      refreshLiveNodes(null);\n      constructState();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4a891bee704a4a1e21c33fc406a2c2c6de6d6f6","date":1501264759,"type":5,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#forciblyRefreshAllClusterStateSlow().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateClusterState().mjava","sourceNew":"  /**\n   * Forcibly refresh cluster state from ZK. Do this only to avoid race conditions because it's expensive.\n   *\n   * It is cheaper to call {@link #forceUpdateCollection(String)} on a single collection if you must.\n   * \n   * @lucene.internal\n   */\n  public void forciblyRefreshAllClusterStateSlow() throws KeeperException, InterruptedException {\n    synchronized (getUpdateLock()) {\n      if (clusterState == null) {\n        // Never initialized, just run normal initialization.\n        createClusterStateWatchersAndUpdate();\n        return;\n      }\n      // No need to set watchers because we should already have watchers registered for everything.\n      refreshCollectionList(null);\n      refreshLiveNodes(null);\n      refreshLegacyClusterState(null);\n      // Need a copy so we don't delete from what we're iterating over.\n      Collection<String> safeCopy = new ArrayList<>(watchedCollectionStates.keySet());\n      Set<String> updatedCollections = new HashSet<>();\n      for (String coll : safeCopy) {\n        DocCollection newState = fetchCollectionState(coll, null);\n        if (updateWatchedCollection(coll, newState)) {\n          updatedCollections.add(coll);\n        }\n      }\n      constructState(updatedCollections);\n    }\n  }\n\n","sourceOld":"  /**\n   * Forcibly refresh cluster state from ZK. Do this only to avoid race conditions because it's expensive.\n   *\n   * @deprecated Don't call this, call {@link #forceUpdateCollection(String)} on a single collection if you must.\n   */\n  @Deprecated\n  public void updateClusterState() throws KeeperException, InterruptedException {\n    synchronized (getUpdateLock()) {\n      if (clusterState == null) {\n        // Never initialized, just run normal initialization.\n        createClusterStateWatchersAndUpdate();\n        return;\n      }\n      // No need to set watchers because we should already have watchers registered for everything.\n      refreshCollectionList(null);\n      refreshLiveNodes(null);\n      refreshLegacyClusterState(null);\n      // Need a copy so we don't delete from what we're iterating over.\n      Collection<String> safeCopy = new ArrayList<>(watchedCollectionStates.keySet());\n      Set<String> updatedCollections = new HashSet<>();\n      for (String coll : safeCopy) {\n        DocCollection newState = fetchCollectionState(coll, null);\n        if (updateWatchedCollection(coll, newState)) {\n          updatedCollections.add(coll);\n        }\n      }\n      constructState(updatedCollections);\n    }\n  }\n\n","bugFix":null,"bugIntro":["e92ecc804db94989e3c224b898b8dc978ebb584f","e92ecc804db94989e3c224b898b8dc978ebb584f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#forciblyRefreshAllClusterStateSlow().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateClusterState().mjava","sourceNew":"  /**\n   * Forcibly refresh cluster state from ZK. Do this only to avoid race conditions because it's expensive.\n   *\n   * It is cheaper to call {@link #forceUpdateCollection(String)} on a single collection if you must.\n   * \n   * @lucene.internal\n   */\n  public void forciblyRefreshAllClusterStateSlow() throws KeeperException, InterruptedException {\n    synchronized (getUpdateLock()) {\n      if (clusterState == null) {\n        // Never initialized, just run normal initialization.\n        createClusterStateWatchersAndUpdate();\n        return;\n      }\n      // No need to set watchers because we should already have watchers registered for everything.\n      refreshCollectionList(null);\n      refreshLiveNodes(null);\n      refreshLegacyClusterState(null);\n      // Need a copy so we don't delete from what we're iterating over.\n      Collection<String> safeCopy = new ArrayList<>(watchedCollectionStates.keySet());\n      Set<String> updatedCollections = new HashSet<>();\n      for (String coll : safeCopy) {\n        DocCollection newState = fetchCollectionState(coll, null);\n        if (updateWatchedCollection(coll, newState)) {\n          updatedCollections.add(coll);\n        }\n      }\n      constructState(updatedCollections);\n    }\n  }\n\n","sourceOld":"  /**\n   * Forcibly refresh cluster state from ZK. Do this only to avoid race conditions because it's expensive.\n   *\n   * @deprecated Don't call this, call {@link #forceUpdateCollection(String)} on a single collection if you must.\n   */\n  @Deprecated\n  public void updateClusterState() throws KeeperException, InterruptedException {\n    synchronized (getUpdateLock()) {\n      if (clusterState == null) {\n        // Never initialized, just run normal initialization.\n        createClusterStateWatchersAndUpdate();\n        return;\n      }\n      // No need to set watchers because we should already have watchers registered for everything.\n      refreshCollectionList(null);\n      refreshLiveNodes(null);\n      refreshLegacyClusterState(null);\n      // Need a copy so we don't delete from what we're iterating over.\n      Collection<String> safeCopy = new ArrayList<>(watchedCollectionStates.keySet());\n      Set<String> updatedCollections = new HashSet<>();\n      for (String coll : safeCopy) {\n        DocCollection newState = fetchCollectionState(coll, null);\n        if (updateWatchedCollection(coll, newState)) {\n          updatedCollections.add(coll);\n        }\n      }\n      constructState(updatedCollections);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["f54f0eff6955cf57610f6b93dbbba3a2bf540619","e4a891bee704a4a1e21c33fc406a2c2c6de6d6f6"],"f54f0eff6955cf57610f6b93dbbba3a2bf540619":["b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f"],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e4a891bee704a4a1e21c33fc406a2c2c6de6d6f6":["f54f0eff6955cf57610f6b93dbbba3a2bf540619"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8bf04c3f77a2936f29948b9c0dd215d82d43f5cf":["68281b529b74366dea47f5d3f95138e3c8422474"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["8bf04c3f77a2936f29948b9c0dd215d82d43f5cf"],"b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"68281b529b74366dea47f5d3f95138e3c8422474":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","f54f0eff6955cf57610f6b93dbbba3a2bf540619"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e4a891bee704a4a1e21c33fc406a2c2c6de6d6f6"],"1072b8e47b50f1c4fb039e1f54a736f381d6f809":["102da6baafc0f534a59f31729343dbab9d3b9e9a"]},"commit2Childs":{"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"f54f0eff6955cf57610f6b93dbbba3a2bf540619":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","e4a891bee704a4a1e21c33fc406a2c2c6de6d6f6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"e4a891bee704a4a1e21c33fc406a2c2c6de6d6f6":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"8bf04c3f77a2936f29948b9c0dd215d82d43f5cf":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f":["f54f0eff6955cf57610f6b93dbbba3a2bf540619"],"68281b529b74366dea47f5d3f95138e3c8422474":["8bf04c3f77a2936f29948b9c0dd215d82d43f5cf"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"1072b8e47b50f1c4fb039e1f54a736f381d6f809":["68281b529b74366dea47f5d3f95138e3c8422474"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}