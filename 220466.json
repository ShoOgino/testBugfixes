{"path":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/ConcurrentSortedSetDocValuesFacetCounts#getDim(String,OrdRange,int).mjava","commits":[{"id":"8cfd1df435f04d4287925cca73cf22120f723892","date":1493925365,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/ConcurrentSortedSetDocValuesFacetCounts#getDim(String,OrdRange,int).mjava","pathOld":"/dev/null","sourceNew":"  private final FacetResult getDim(String dim, OrdRange ordRange, int topN) throws IOException {\n\n    TopOrdAndIntQueue q = null;\n\n    int bottomCount = 0;\n\n    int dimCount = 0;\n    int childCount = 0;\n\n    TopOrdAndIntQueue.OrdAndValue reuse = null;\n    //System.out.println(\"getDim : \" + ordRange.start + \" - \" + ordRange.end);\n    for(int ord=ordRange.start; ord<=ordRange.end; ord++) {\n      //System.out.println(\"  ord=\" + ord + \" count=\" + counts[ord]);\n      if (counts.get(ord) > 0) {\n        dimCount += counts.get(ord);\n        childCount++;\n        if (counts.get(ord) > bottomCount) {\n          if (reuse == null) {\n            reuse = new TopOrdAndIntQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = counts.get(ord);\n          if (q == null) {\n            // Lazy init, so we don't create this for the\n            // sparse case unnecessarily\n            q = new TopOrdAndIntQueue(topN);\n          }\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomCount = q.top().value;\n          }\n        }\n      }\n    }\n\n    if (q == null) {\n      return null;\n    }\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdAndIntQueue.OrdAndValue ordAndValue = q.pop();\n      final BytesRef term = dv.lookupOrd(ordAndValue.ord);\n      String[] parts = FacetsConfig.stringToPath(term.utf8ToString());\n      labelValues[i] = new LabelAndValue(parts[1], ordAndValue.value);\n    }\n\n    return new FacetResult(dim, new String[0], dimCount, labelValues, childCount);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/ConcurrentSortedSetDocValuesFacetCounts#getDim(String,OrdRange,int).mjava","pathOld":"/dev/null","sourceNew":"  private final FacetResult getDim(String dim, OrdRange ordRange, int topN) throws IOException {\n\n    TopOrdAndIntQueue q = null;\n\n    int bottomCount = 0;\n\n    int dimCount = 0;\n    int childCount = 0;\n\n    TopOrdAndIntQueue.OrdAndValue reuse = null;\n    //System.out.println(\"getDim : \" + ordRange.start + \" - \" + ordRange.end);\n    for(int ord=ordRange.start; ord<=ordRange.end; ord++) {\n      //System.out.println(\"  ord=\" + ord + \" count=\" + counts[ord]);\n      if (counts.get(ord) > 0) {\n        dimCount += counts.get(ord);\n        childCount++;\n        if (counts.get(ord) > bottomCount) {\n          if (reuse == null) {\n            reuse = new TopOrdAndIntQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = counts.get(ord);\n          if (q == null) {\n            // Lazy init, so we don't create this for the\n            // sparse case unnecessarily\n            q = new TopOrdAndIntQueue(topN);\n          }\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomCount = q.top().value;\n          }\n        }\n      }\n    }\n\n    if (q == null) {\n      return null;\n    }\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdAndIntQueue.OrdAndValue ordAndValue = q.pop();\n      final BytesRef term = dv.lookupOrd(ordAndValue.ord);\n      String[] parts = FacetsConfig.stringToPath(term.utf8ToString());\n      labelValues[i] = new LabelAndValue(parts[1], ordAndValue.value);\n    }\n\n    return new FacetResult(dim, new String[0], dimCount, labelValues, childCount);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8cfd1df435f04d4287925cca73cf22120f723892":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8cfd1df435f04d4287925cca73cf22120f723892"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8cfd1df435f04d4287925cca73cf22120f723892"]},"commit2Childs":{"8cfd1df435f04d4287925cca73cf22120f723892":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8cfd1df435f04d4287925cca73cf22120f723892","e9017cf144952056066919f1ebc7897ff9bd71b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}