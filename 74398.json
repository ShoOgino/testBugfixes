{"path":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#fillOpenTrace(Throwable,String,boolean).mjava","commits":[{"id":"527cc14542789f47d75da436cb4287d1ab887e34","date":1391705548,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#fillOpenTrace(Throwable,String,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#fillOpenTrace(IOException,String,boolean).mjava","sourceNew":"  // sets the cause of the incoming ioe to be the stack\n  // trace when the offending file name was opened\n  private synchronized Throwable fillOpenTrace(Throwable t, String name, boolean input) {\n    for(Map.Entry<Closeable,Exception> ent : openFileHandles.entrySet()) {\n      if (input && ent.getKey() instanceof MockIndexInputWrapper && ((MockIndexInputWrapper) ent.getKey()).name.equals(name)) {\n        t.initCause(ent.getValue());\n        break;\n      } else if (!input && ent.getKey() instanceof MockIndexOutputWrapper && ((MockIndexOutputWrapper) ent.getKey()).name.equals(name)) {\n        t.initCause(ent.getValue());\n        break;\n      }\n    }\n    return t;\n  }\n\n","sourceOld":"  // sets the cause of the incoming ioe to be the stack\n  // trace when the offending file name was opened\n  private synchronized IOException fillOpenTrace(IOException ioe, String name, boolean input) {\n    for(Map.Entry<Closeable,Exception> ent : openFileHandles.entrySet()) {\n      if (input && ent.getKey() instanceof MockIndexInputWrapper && ((MockIndexInputWrapper) ent.getKey()).name.equals(name)) {\n        ioe.initCause(ent.getValue());\n        break;\n      } else if (!input && ent.getKey() instanceof MockIndexOutputWrapper && ((MockIndexOutputWrapper) ent.getKey()).name.equals(name)) {\n        ioe.initCause(ent.getValue());\n        break;\n      }\n    }\n    return ioe;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d203e5c4d54b6f6e78e98d2342905df37f816f6","date":1532511271,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#[T-extends-Throwable]_fillOpenTrace(T,String,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#fillOpenTrace(Throwable,String,boolean).mjava","sourceNew":"  // sets the cause of the incoming ioe to be the stack\n  // trace when the offending file name was opened\n  private synchronized <T extends Throwable> T fillOpenTrace(T t, String name, boolean input) {\n    for(Map.Entry<Closeable,Exception> ent : openFileHandles.entrySet()) {\n      if (input && ent.getKey() instanceof MockIndexInputWrapper && ((MockIndexInputWrapper) ent.getKey()).name.equals(name)) {\n        t.initCause(ent.getValue());\n        break;\n      } else if (!input && ent.getKey() instanceof MockIndexOutputWrapper && ((MockIndexOutputWrapper) ent.getKey()).name.equals(name)) {\n        t.initCause(ent.getValue());\n        break;\n      }\n    }\n    return t;\n  }\n\n","sourceOld":"  // sets the cause of the incoming ioe to be the stack\n  // trace when the offending file name was opened\n  private synchronized Throwable fillOpenTrace(Throwable t, String name, boolean input) {\n    for(Map.Entry<Closeable,Exception> ent : openFileHandles.entrySet()) {\n      if (input && ent.getKey() instanceof MockIndexInputWrapper && ((MockIndexInputWrapper) ent.getKey()).name.equals(name)) {\n        t.initCause(ent.getValue());\n        break;\n      } else if (!input && ent.getKey() instanceof MockIndexOutputWrapper && ((MockIndexOutputWrapper) ent.getKey()).name.equals(name)) {\n        t.initCause(ent.getValue());\n        break;\n      }\n    }\n    return t;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3d203e5c4d54b6f6e78e98d2342905df37f816f6":["527cc14542789f47d75da436cb4287d1ab887e34"],"527cc14542789f47d75da436cb4287d1ab887e34":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3d203e5c4d54b6f6e78e98d2342905df37f816f6"]},"commit2Childs":{"3d203e5c4d54b6f6e78e98d2342905df37f816f6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"527cc14542789f47d75da436cb4287d1ab887e34":["3d203e5c4d54b6f6e78e98d2342905df37f816f6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["527cc14542789f47d75da436cb4287d1ab887e34"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}