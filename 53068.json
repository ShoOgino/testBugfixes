{"path":"lucene/grouping/src/java/org/apache/lucene/search/grouping/GroupingSearch#groupByFieldOrFunction(IndexSearcher,Query,int,int).mjava","commits":[{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/GroupingSearch#groupByFieldOrFunction(IndexSearcher,Query,int,int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/GroupingSearch#groupByFieldOrFunction(IndexSearcher,Filter,Query,int,int).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  protected TopGroups groupByFieldOrFunction(IndexSearcher searcher, Query query, int groupOffset, int groupLimit) throws IOException {\n    int topN = groupOffset + groupLimit;\n    final AbstractFirstPassGroupingCollector firstPassCollector;\n    final AbstractAllGroupsCollector allGroupsCollector;\n    final AbstractAllGroupHeadsCollector allGroupHeadsCollector;\n    if (groupFunction != null) {\n      firstPassCollector = new FunctionFirstPassGroupingCollector(groupFunction, valueSourceContext, groupSort, topN);\n      if (allGroups) {\n        allGroupsCollector = new FunctionAllGroupsCollector(groupFunction, valueSourceContext);\n      } else {\n        allGroupsCollector = null;\n      }\n      if (allGroupHeads) {\n        allGroupHeadsCollector = new FunctionAllGroupHeadsCollector(groupFunction, valueSourceContext, sortWithinGroup);\n      } else {\n        allGroupHeadsCollector = null;\n      }\n    } else {\n      firstPassCollector = new TermFirstPassGroupingCollector(groupField, groupSort, topN);\n      if (allGroups) {\n        allGroupsCollector = new TermAllGroupsCollector(groupField, initialSize);\n      } else {\n        allGroupsCollector = null;\n      }\n      if (allGroupHeads) {\n        allGroupHeadsCollector = TermAllGroupHeadsCollector.create(groupField, sortWithinGroup, initialSize);\n      } else {\n        allGroupHeadsCollector = null;\n      }\n    }\n\n    final Collector firstRound;\n    if (allGroupHeads || allGroups) {\n      List<Collector> collectors = new ArrayList<>();\n      collectors.add(firstPassCollector);\n      if (allGroups) {\n        collectors.add(allGroupsCollector);\n      }\n      if (allGroupHeads) {\n        collectors.add(allGroupHeadsCollector);\n      }\n      firstRound = MultiCollector.wrap(collectors.toArray(new Collector[collectors.size()]));\n    } else {\n      firstRound = firstPassCollector;\n    }\n\n    CachingCollector cachedCollector = null;\n    if (maxCacheRAMMB != null || maxDocsToCache != null) {\n      if (maxCacheRAMMB != null) {\n        cachedCollector = CachingCollector.create(firstRound, cacheScores, maxCacheRAMMB);\n      } else {\n        cachedCollector = CachingCollector.create(firstRound, cacheScores, maxDocsToCache);\n      }\n      searcher.search(query, cachedCollector);\n    } else {\n      searcher.search(query, firstRound);\n    }\n\n    if (allGroups) {\n      matchingGroups = allGroupsCollector.getGroups();\n    } else {\n      matchingGroups = Collections.emptyList();\n    }\n    if (allGroupHeads) {\n      matchingGroupHeads = allGroupHeadsCollector.retrieveGroupHeads(searcher.getIndexReader().maxDoc());\n    } else {\n      matchingGroupHeads = new Bits.MatchNoBits(searcher.getIndexReader().maxDoc());\n    }\n\n    Collection<SearchGroup> topSearchGroups = firstPassCollector.getTopGroups(groupOffset, fillSortFields);\n    if (topSearchGroups == null) {\n      return new TopGroups(new SortField[0], new SortField[0], 0, 0, new GroupDocs[0], Float.NaN);\n    }\n\n    int topNInsideGroup = groupDocsOffset + groupDocsLimit;\n    AbstractSecondPassGroupingCollector secondPassCollector;\n    if (groupFunction != null) {\n      secondPassCollector = new FunctionSecondPassGroupingCollector((Collection) topSearchGroups, groupSort, sortWithinGroup, topNInsideGroup, includeScores, includeMaxScore, fillSortFields, groupFunction, valueSourceContext);\n    } else {\n      secondPassCollector = new TermSecondPassGroupingCollector(groupField, (Collection) topSearchGroups, groupSort, sortWithinGroup, topNInsideGroup, includeScores, includeMaxScore, fillSortFields);\n    }\n\n    if (cachedCollector != null && cachedCollector.isCached()) {\n      cachedCollector.replay(secondPassCollector);\n    } else {\n      searcher.search(query, secondPassCollector);\n    }\n\n    if (allGroups) {\n      return new TopGroups(secondPassCollector.getTopGroups(groupDocsOffset), matchingGroups.size());\n    } else {\n      return secondPassCollector.getTopGroups(groupDocsOffset);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  protected TopGroups groupByFieldOrFunction(IndexSearcher searcher, Filter filter, Query query, int groupOffset, int groupLimit) throws IOException {\n    int topN = groupOffset + groupLimit;\n    final AbstractFirstPassGroupingCollector firstPassCollector;\n    final AbstractAllGroupsCollector allGroupsCollector;\n    final AbstractAllGroupHeadsCollector allGroupHeadsCollector;\n    if (groupFunction != null) {\n      firstPassCollector = new FunctionFirstPassGroupingCollector(groupFunction, valueSourceContext, groupSort, topN);\n      if (allGroups) {\n        allGroupsCollector = new FunctionAllGroupsCollector(groupFunction, valueSourceContext);\n      } else {\n        allGroupsCollector = null;\n      }\n      if (allGroupHeads) {\n        allGroupHeadsCollector = new FunctionAllGroupHeadsCollector(groupFunction, valueSourceContext, sortWithinGroup);\n      } else {\n        allGroupHeadsCollector = null;\n      }\n    } else {\n      firstPassCollector = new TermFirstPassGroupingCollector(groupField, groupSort, topN);\n      if (allGroups) {\n        allGroupsCollector = new TermAllGroupsCollector(groupField, initialSize);\n      } else {\n        allGroupsCollector = null;\n      }\n      if (allGroupHeads) {\n        allGroupHeadsCollector = TermAllGroupHeadsCollector.create(groupField, sortWithinGroup, initialSize);\n      } else {\n        allGroupHeadsCollector = null;\n      }\n    }\n\n    final Collector firstRound;\n    if (allGroupHeads || allGroups) {\n      List<Collector> collectors = new ArrayList<>();\n      collectors.add(firstPassCollector);\n      if (allGroups) {\n        collectors.add(allGroupsCollector);\n      }\n      if (allGroupHeads) {\n        collectors.add(allGroupHeadsCollector);\n      }\n      firstRound = MultiCollector.wrap(collectors.toArray(new Collector[collectors.size()]));\n    } else {\n      firstRound = firstPassCollector;\n    }\n\n    CachingCollector cachedCollector = null;\n    if (maxCacheRAMMB != null || maxDocsToCache != null) {\n      if (maxCacheRAMMB != null) {\n        cachedCollector = CachingCollector.create(firstRound, cacheScores, maxCacheRAMMB);\n      } else {\n        cachedCollector = CachingCollector.create(firstRound, cacheScores, maxDocsToCache);\n      }\n      searcher.search(query, filter, cachedCollector);\n    } else {\n      searcher.search(query, filter, firstRound);\n    }\n\n    if (allGroups) {\n      matchingGroups = allGroupsCollector.getGroups();\n    } else {\n      matchingGroups = Collections.emptyList();\n    }\n    if (allGroupHeads) {\n      matchingGroupHeads = allGroupHeadsCollector.retrieveGroupHeads(searcher.getIndexReader().maxDoc());\n    } else {\n      matchingGroupHeads = new Bits.MatchNoBits(searcher.getIndexReader().maxDoc());\n    }\n\n    Collection<SearchGroup> topSearchGroups = firstPassCollector.getTopGroups(groupOffset, fillSortFields);\n    if (topSearchGroups == null) {\n      return new TopGroups(new SortField[0], new SortField[0], 0, 0, new GroupDocs[0], Float.NaN);\n    }\n\n    int topNInsideGroup = groupDocsOffset + groupDocsLimit;\n    AbstractSecondPassGroupingCollector secondPassCollector;\n    if (groupFunction != null) {\n      secondPassCollector = new FunctionSecondPassGroupingCollector((Collection) topSearchGroups, groupSort, sortWithinGroup, topNInsideGroup, includeScores, includeMaxScore, fillSortFields, groupFunction, valueSourceContext);\n    } else {\n      secondPassCollector = new TermSecondPassGroupingCollector(groupField, (Collection) topSearchGroups, groupSort, sortWithinGroup, topNInsideGroup, includeScores, includeMaxScore, fillSortFields);\n    }\n\n    if (cachedCollector != null && cachedCollector.isCached()) {\n      cachedCollector.replay(secondPassCollector);\n    } else {\n      searcher.search(query, filter, secondPassCollector);\n    }\n\n    if (allGroups) {\n      return new TopGroups(secondPassCollector.getTopGroups(groupDocsOffset), matchingGroups.size());\n    } else {\n      return secondPassCollector.getTopGroups(groupDocsOffset);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20e94e61fe5291647346b70437617e6b6c370408","date":1483783127,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/GroupingSearch#groupByFieldOrFunction(IndexSearcher,Query,int,int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/GroupingSearch#groupByFieldOrFunction(IndexSearcher,Query,int,int).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  protected TopGroups groupByFieldOrFunction(IndexSearcher searcher, Query query, int groupOffset, int groupLimit) throws IOException {\n    int topN = groupOffset + groupLimit;\n\n    final FirstPassGroupingCollector firstPassCollector = grouper.getFirstPassCollector(groupSort, topN);\n    final AllGroupsCollector allGroupsCollector = allGroups ? grouper.getAllGroupsCollector() : null;\n    final AllGroupHeadsCollector allGroupHeadsCollector\n        = allGroupHeads ? grouper.getGroupHeadsCollector(sortWithinGroup) : null;\n\n    final Collector firstRound = MultiCollector.wrap(firstPassCollector, allGroupsCollector, allGroupHeadsCollector);\n\n    CachingCollector cachedCollector = null;\n    if (maxCacheRAMMB != null || maxDocsToCache != null) {\n      if (maxCacheRAMMB != null) {\n        cachedCollector = CachingCollector.create(firstRound, cacheScores, maxCacheRAMMB);\n      } else {\n        cachedCollector = CachingCollector.create(firstRound, cacheScores, maxDocsToCache);\n      }\n      searcher.search(query, cachedCollector);\n    } else {\n      searcher.search(query, firstRound);\n    }\n\n    matchingGroups = allGroups ? allGroupsCollector.getGroups() : Collections.emptyList();\n    matchingGroupHeads = allGroupHeads ? allGroupHeadsCollector.retrieveGroupHeads(searcher.getIndexReader().maxDoc())\n        : new Bits.MatchNoBits(searcher.getIndexReader().maxDoc());\n\n    Collection<SearchGroup> topSearchGroups = firstPassCollector.getTopGroups(groupOffset, fillSortFields);\n    if (topSearchGroups == null) {\n      return new TopGroups(new SortField[0], new SortField[0], 0, 0, new GroupDocs[0], Float.NaN);\n    }\n\n    int topNInsideGroup = groupDocsOffset + groupDocsLimit;\n    SecondPassGroupingCollector secondPassCollector\n        = grouper.getSecondPassCollector(topSearchGroups, groupSort, sortWithinGroup, topNInsideGroup,\n                                         includeScores, includeMaxScore, fillSortFields);\n\n    if (cachedCollector != null && cachedCollector.isCached()) {\n      cachedCollector.replay(secondPassCollector);\n    } else {\n      searcher.search(query, secondPassCollector);\n    }\n\n    if (allGroups) {\n      return new TopGroups(secondPassCollector.getTopGroups(groupDocsOffset), matchingGroups.size());\n    } else {\n      return secondPassCollector.getTopGroups(groupDocsOffset);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  protected TopGroups groupByFieldOrFunction(IndexSearcher searcher, Query query, int groupOffset, int groupLimit) throws IOException {\n    int topN = groupOffset + groupLimit;\n    final AbstractFirstPassGroupingCollector firstPassCollector;\n    final AbstractAllGroupsCollector allGroupsCollector;\n    final AbstractAllGroupHeadsCollector allGroupHeadsCollector;\n    if (groupFunction != null) {\n      firstPassCollector = new FunctionFirstPassGroupingCollector(groupFunction, valueSourceContext, groupSort, topN);\n      if (allGroups) {\n        allGroupsCollector = new FunctionAllGroupsCollector(groupFunction, valueSourceContext);\n      } else {\n        allGroupsCollector = null;\n      }\n      if (allGroupHeads) {\n        allGroupHeadsCollector = new FunctionAllGroupHeadsCollector(groupFunction, valueSourceContext, sortWithinGroup);\n      } else {\n        allGroupHeadsCollector = null;\n      }\n    } else {\n      firstPassCollector = new TermFirstPassGroupingCollector(groupField, groupSort, topN);\n      if (allGroups) {\n        allGroupsCollector = new TermAllGroupsCollector(groupField, initialSize);\n      } else {\n        allGroupsCollector = null;\n      }\n      if (allGroupHeads) {\n        allGroupHeadsCollector = TermAllGroupHeadsCollector.create(groupField, sortWithinGroup, initialSize);\n      } else {\n        allGroupHeadsCollector = null;\n      }\n    }\n\n    final Collector firstRound;\n    if (allGroupHeads || allGroups) {\n      List<Collector> collectors = new ArrayList<>();\n      collectors.add(firstPassCollector);\n      if (allGroups) {\n        collectors.add(allGroupsCollector);\n      }\n      if (allGroupHeads) {\n        collectors.add(allGroupHeadsCollector);\n      }\n      firstRound = MultiCollector.wrap(collectors.toArray(new Collector[collectors.size()]));\n    } else {\n      firstRound = firstPassCollector;\n    }\n\n    CachingCollector cachedCollector = null;\n    if (maxCacheRAMMB != null || maxDocsToCache != null) {\n      if (maxCacheRAMMB != null) {\n        cachedCollector = CachingCollector.create(firstRound, cacheScores, maxCacheRAMMB);\n      } else {\n        cachedCollector = CachingCollector.create(firstRound, cacheScores, maxDocsToCache);\n      }\n      searcher.search(query, cachedCollector);\n    } else {\n      searcher.search(query, firstRound);\n    }\n\n    if (allGroups) {\n      matchingGroups = allGroupsCollector.getGroups();\n    } else {\n      matchingGroups = Collections.emptyList();\n    }\n    if (allGroupHeads) {\n      matchingGroupHeads = allGroupHeadsCollector.retrieveGroupHeads(searcher.getIndexReader().maxDoc());\n    } else {\n      matchingGroupHeads = new Bits.MatchNoBits(searcher.getIndexReader().maxDoc());\n    }\n\n    Collection<SearchGroup> topSearchGroups = firstPassCollector.getTopGroups(groupOffset, fillSortFields);\n    if (topSearchGroups == null) {\n      return new TopGroups(new SortField[0], new SortField[0], 0, 0, new GroupDocs[0], Float.NaN);\n    }\n\n    int topNInsideGroup = groupDocsOffset + groupDocsLimit;\n    AbstractSecondPassGroupingCollector secondPassCollector;\n    if (groupFunction != null) {\n      secondPassCollector = new FunctionSecondPassGroupingCollector((Collection) topSearchGroups, groupSort, sortWithinGroup, topNInsideGroup, includeScores, includeMaxScore, fillSortFields, groupFunction, valueSourceContext);\n    } else {\n      secondPassCollector = new TermSecondPassGroupingCollector(groupField, (Collection) topSearchGroups, groupSort, sortWithinGroup, topNInsideGroup, includeScores, includeMaxScore, fillSortFields);\n    }\n\n    if (cachedCollector != null && cachedCollector.isCached()) {\n      cachedCollector.replay(secondPassCollector);\n    } else {\n      searcher.search(query, secondPassCollector);\n    }\n\n    if (allGroups) {\n      return new TopGroups(secondPassCollector.getTopGroups(groupDocsOffset), matchingGroups.size());\n    } else {\n      return secondPassCollector.getTopGroups(groupDocsOffset);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/GroupingSearch#groupByFieldOrFunction(IndexSearcher,Query,int,int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/GroupingSearch#groupByFieldOrFunction(IndexSearcher,Query,int,int).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  protected TopGroups groupByFieldOrFunction(IndexSearcher searcher, Query query, int groupOffset, int groupLimit) throws IOException {\n    int topN = groupOffset + groupLimit;\n\n    final FirstPassGroupingCollector firstPassCollector = grouper.getFirstPassCollector(groupSort, topN);\n    final AllGroupsCollector allGroupsCollector = allGroups ? grouper.getAllGroupsCollector() : null;\n    final AllGroupHeadsCollector allGroupHeadsCollector\n        = allGroupHeads ? grouper.getGroupHeadsCollector(sortWithinGroup) : null;\n\n    final Collector firstRound = MultiCollector.wrap(firstPassCollector, allGroupsCollector, allGroupHeadsCollector);\n\n    CachingCollector cachedCollector = null;\n    if (maxCacheRAMMB != null || maxDocsToCache != null) {\n      if (maxCacheRAMMB != null) {\n        cachedCollector = CachingCollector.create(firstRound, cacheScores, maxCacheRAMMB);\n      } else {\n        cachedCollector = CachingCollector.create(firstRound, cacheScores, maxDocsToCache);\n      }\n      searcher.search(query, cachedCollector);\n    } else {\n      searcher.search(query, firstRound);\n    }\n\n    matchingGroups = allGroups ? allGroupsCollector.getGroups() : Collections.emptyList();\n    matchingGroupHeads = allGroupHeads ? allGroupHeadsCollector.retrieveGroupHeads(searcher.getIndexReader().maxDoc())\n        : new Bits.MatchNoBits(searcher.getIndexReader().maxDoc());\n\n    Collection<SearchGroup> topSearchGroups = firstPassCollector.getTopGroups(groupOffset, fillSortFields);\n    if (topSearchGroups == null) {\n      return new TopGroups(new SortField[0], new SortField[0], 0, 0, new GroupDocs[0], Float.NaN);\n    }\n\n    int topNInsideGroup = groupDocsOffset + groupDocsLimit;\n    SecondPassGroupingCollector secondPassCollector\n        = grouper.getSecondPassCollector(topSearchGroups, groupSort, sortWithinGroup, topNInsideGroup,\n                                         includeScores, includeMaxScore, fillSortFields);\n\n    if (cachedCollector != null && cachedCollector.isCached()) {\n      cachedCollector.replay(secondPassCollector);\n    } else {\n      searcher.search(query, secondPassCollector);\n    }\n\n    if (allGroups) {\n      return new TopGroups(secondPassCollector.getTopGroups(groupDocsOffset), matchingGroups.size());\n    } else {\n      return secondPassCollector.getTopGroups(groupDocsOffset);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  protected TopGroups groupByFieldOrFunction(IndexSearcher searcher, Query query, int groupOffset, int groupLimit) throws IOException {\n    int topN = groupOffset + groupLimit;\n    final AbstractFirstPassGroupingCollector firstPassCollector;\n    final AbstractAllGroupsCollector allGroupsCollector;\n    final AbstractAllGroupHeadsCollector allGroupHeadsCollector;\n    if (groupFunction != null) {\n      firstPassCollector = new FunctionFirstPassGroupingCollector(groupFunction, valueSourceContext, groupSort, topN);\n      if (allGroups) {\n        allGroupsCollector = new FunctionAllGroupsCollector(groupFunction, valueSourceContext);\n      } else {\n        allGroupsCollector = null;\n      }\n      if (allGroupHeads) {\n        allGroupHeadsCollector = new FunctionAllGroupHeadsCollector(groupFunction, valueSourceContext, sortWithinGroup);\n      } else {\n        allGroupHeadsCollector = null;\n      }\n    } else {\n      firstPassCollector = new TermFirstPassGroupingCollector(groupField, groupSort, topN);\n      if (allGroups) {\n        allGroupsCollector = new TermAllGroupsCollector(groupField, initialSize);\n      } else {\n        allGroupsCollector = null;\n      }\n      if (allGroupHeads) {\n        allGroupHeadsCollector = TermAllGroupHeadsCollector.create(groupField, sortWithinGroup, initialSize);\n      } else {\n        allGroupHeadsCollector = null;\n      }\n    }\n\n    final Collector firstRound;\n    if (allGroupHeads || allGroups) {\n      List<Collector> collectors = new ArrayList<>();\n      collectors.add(firstPassCollector);\n      if (allGroups) {\n        collectors.add(allGroupsCollector);\n      }\n      if (allGroupHeads) {\n        collectors.add(allGroupHeadsCollector);\n      }\n      firstRound = MultiCollector.wrap(collectors.toArray(new Collector[collectors.size()]));\n    } else {\n      firstRound = firstPassCollector;\n    }\n\n    CachingCollector cachedCollector = null;\n    if (maxCacheRAMMB != null || maxDocsToCache != null) {\n      if (maxCacheRAMMB != null) {\n        cachedCollector = CachingCollector.create(firstRound, cacheScores, maxCacheRAMMB);\n      } else {\n        cachedCollector = CachingCollector.create(firstRound, cacheScores, maxDocsToCache);\n      }\n      searcher.search(query, cachedCollector);\n    } else {\n      searcher.search(query, firstRound);\n    }\n\n    if (allGroups) {\n      matchingGroups = allGroupsCollector.getGroups();\n    } else {\n      matchingGroups = Collections.emptyList();\n    }\n    if (allGroupHeads) {\n      matchingGroupHeads = allGroupHeadsCollector.retrieveGroupHeads(searcher.getIndexReader().maxDoc());\n    } else {\n      matchingGroupHeads = new Bits.MatchNoBits(searcher.getIndexReader().maxDoc());\n    }\n\n    Collection<SearchGroup> topSearchGroups = firstPassCollector.getTopGroups(groupOffset, fillSortFields);\n    if (topSearchGroups == null) {\n      return new TopGroups(new SortField[0], new SortField[0], 0, 0, new GroupDocs[0], Float.NaN);\n    }\n\n    int topNInsideGroup = groupDocsOffset + groupDocsLimit;\n    AbstractSecondPassGroupingCollector secondPassCollector;\n    if (groupFunction != null) {\n      secondPassCollector = new FunctionSecondPassGroupingCollector((Collection) topSearchGroups, groupSort, sortWithinGroup, topNInsideGroup, includeScores, includeMaxScore, fillSortFields, groupFunction, valueSourceContext);\n    } else {\n      secondPassCollector = new TermSecondPassGroupingCollector(groupField, (Collection) topSearchGroups, groupSort, sortWithinGroup, topNInsideGroup, includeScores, includeMaxScore, fillSortFields);\n    }\n\n    if (cachedCollector != null && cachedCollector.isCached()) {\n      cachedCollector.replay(secondPassCollector);\n    } else {\n      searcher.search(query, secondPassCollector);\n    }\n\n    if (allGroups) {\n      return new TopGroups(secondPassCollector.getTopGroups(groupDocsOffset), matchingGroups.size());\n    } else {\n      return secondPassCollector.getTopGroups(groupDocsOffset);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ae958a739da1866696f442384393ba2f13e33e5","date":1491819018,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/GroupingSearch#groupByFieldOrFunction(IndexSearcher,Query,int,int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/GroupingSearch#groupByFieldOrFunction(IndexSearcher,Query,int,int).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  protected TopGroups groupByFieldOrFunction(IndexSearcher searcher, Query query, int groupOffset, int groupLimit) throws IOException {\n    int topN = groupOffset + groupLimit;\n\n    final FirstPassGroupingCollector firstPassCollector = new FirstPassGroupingCollector(grouper, groupSort, topN);\n    final AllGroupsCollector allGroupsCollector = allGroups ? new AllGroupsCollector(grouper) : null;\n    final AllGroupHeadsCollector allGroupHeadsCollector\n        = allGroupHeads ? AllGroupHeadsCollector.newCollector(grouper, sortWithinGroup) : null;\n\n    final Collector firstRound = MultiCollector.wrap(firstPassCollector, allGroupsCollector, allGroupHeadsCollector);\n\n    CachingCollector cachedCollector = null;\n    if (maxCacheRAMMB != null || maxDocsToCache != null) {\n      if (maxCacheRAMMB != null) {\n        cachedCollector = CachingCollector.create(firstRound, cacheScores, maxCacheRAMMB);\n      } else {\n        cachedCollector = CachingCollector.create(firstRound, cacheScores, maxDocsToCache);\n      }\n      searcher.search(query, cachedCollector);\n    } else {\n      searcher.search(query, firstRound);\n    }\n\n    matchingGroups = allGroups ? allGroupsCollector.getGroups() : Collections.emptyList();\n    matchingGroupHeads = allGroupHeads ? allGroupHeadsCollector.retrieveGroupHeads(searcher.getIndexReader().maxDoc())\n        : new Bits.MatchNoBits(searcher.getIndexReader().maxDoc());\n\n    Collection<SearchGroup> topSearchGroups = firstPassCollector.getTopGroups(groupOffset, fillSortFields);\n    if (topSearchGroups == null) {\n      return new TopGroups(new SortField[0], new SortField[0], 0, 0, new GroupDocs[0], Float.NaN);\n    }\n\n    int topNInsideGroup = groupDocsOffset + groupDocsLimit;\n    TopGroupsCollector secondPassCollector\n        = new TopGroupsCollector(grouper, topSearchGroups, groupSort, sortWithinGroup, topNInsideGroup,\n                                         includeScores, includeMaxScore, fillSortFields);\n\n    if (cachedCollector != null && cachedCollector.isCached()) {\n      cachedCollector.replay(secondPassCollector);\n    } else {\n      searcher.search(query, secondPassCollector);\n    }\n\n    if (allGroups) {\n      return new TopGroups(secondPassCollector.getTopGroups(groupDocsOffset), matchingGroups.size());\n    } else {\n      return secondPassCollector.getTopGroups(groupDocsOffset);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  protected TopGroups groupByFieldOrFunction(IndexSearcher searcher, Query query, int groupOffset, int groupLimit) throws IOException {\n    int topN = groupOffset + groupLimit;\n\n    final FirstPassGroupingCollector firstPassCollector = grouper.getFirstPassCollector(groupSort, topN);\n    final AllGroupsCollector allGroupsCollector = allGroups ? grouper.getAllGroupsCollector() : null;\n    final AllGroupHeadsCollector allGroupHeadsCollector\n        = allGroupHeads ? grouper.getGroupHeadsCollector(sortWithinGroup) : null;\n\n    final Collector firstRound = MultiCollector.wrap(firstPassCollector, allGroupsCollector, allGroupHeadsCollector);\n\n    CachingCollector cachedCollector = null;\n    if (maxCacheRAMMB != null || maxDocsToCache != null) {\n      if (maxCacheRAMMB != null) {\n        cachedCollector = CachingCollector.create(firstRound, cacheScores, maxCacheRAMMB);\n      } else {\n        cachedCollector = CachingCollector.create(firstRound, cacheScores, maxDocsToCache);\n      }\n      searcher.search(query, cachedCollector);\n    } else {\n      searcher.search(query, firstRound);\n    }\n\n    matchingGroups = allGroups ? allGroupsCollector.getGroups() : Collections.emptyList();\n    matchingGroupHeads = allGroupHeads ? allGroupHeadsCollector.retrieveGroupHeads(searcher.getIndexReader().maxDoc())\n        : new Bits.MatchNoBits(searcher.getIndexReader().maxDoc());\n\n    Collection<SearchGroup> topSearchGroups = firstPassCollector.getTopGroups(groupOffset, fillSortFields);\n    if (topSearchGroups == null) {\n      return new TopGroups(new SortField[0], new SortField[0], 0, 0, new GroupDocs[0], Float.NaN);\n    }\n\n    int topNInsideGroup = groupDocsOffset + groupDocsLimit;\n    SecondPassGroupingCollector secondPassCollector\n        = grouper.getSecondPassCollector(topSearchGroups, groupSort, sortWithinGroup, topNInsideGroup,\n                                         includeScores, includeMaxScore, fillSortFields);\n\n    if (cachedCollector != null && cachedCollector.isCached()) {\n      cachedCollector.replay(secondPassCollector);\n    } else {\n      searcher.search(query, secondPassCollector);\n    }\n\n    if (allGroups) {\n      return new TopGroups(secondPassCollector.getTopGroups(groupDocsOffset), matchingGroups.size());\n    } else {\n      return secondPassCollector.getTopGroups(groupDocsOffset);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/GroupingSearch#groupByFieldOrFunction(IndexSearcher,Query,int,int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/GroupingSearch#groupByFieldOrFunction(IndexSearcher,Query,int,int).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  protected TopGroups groupByFieldOrFunction(IndexSearcher searcher, Query query, int groupOffset, int groupLimit) throws IOException {\n    int topN = groupOffset + groupLimit;\n\n    final FirstPassGroupingCollector firstPassCollector = new FirstPassGroupingCollector(grouper, groupSort, topN);\n    final AllGroupsCollector allGroupsCollector = allGroups ? new AllGroupsCollector(grouper) : null;\n    final AllGroupHeadsCollector allGroupHeadsCollector\n        = allGroupHeads ? AllGroupHeadsCollector.newCollector(grouper, sortWithinGroup) : null;\n\n    final Collector firstRound = MultiCollector.wrap(firstPassCollector, allGroupsCollector, allGroupHeadsCollector);\n\n    CachingCollector cachedCollector = null;\n    if (maxCacheRAMMB != null || maxDocsToCache != null) {\n      if (maxCacheRAMMB != null) {\n        cachedCollector = CachingCollector.create(firstRound, cacheScores, maxCacheRAMMB);\n      } else {\n        cachedCollector = CachingCollector.create(firstRound, cacheScores, maxDocsToCache);\n      }\n      searcher.search(query, cachedCollector);\n    } else {\n      searcher.search(query, firstRound);\n    }\n\n    matchingGroups = allGroups ? allGroupsCollector.getGroups() : Collections.emptyList();\n    matchingGroupHeads = allGroupHeads ? allGroupHeadsCollector.retrieveGroupHeads(searcher.getIndexReader().maxDoc())\n        : new Bits.MatchNoBits(searcher.getIndexReader().maxDoc());\n\n    Collection<SearchGroup> topSearchGroups = firstPassCollector.getTopGroups(groupOffset, fillSortFields);\n    if (topSearchGroups == null) {\n      return new TopGroups(new SortField[0], new SortField[0], 0, 0, new GroupDocs[0], Float.NaN);\n    }\n\n    int topNInsideGroup = groupDocsOffset + groupDocsLimit;\n    TopGroupsCollector secondPassCollector\n        = new TopGroupsCollector(grouper, topSearchGroups, groupSort, sortWithinGroup, topNInsideGroup,\n                                         includeScores, includeMaxScore, fillSortFields);\n\n    if (cachedCollector != null && cachedCollector.isCached()) {\n      cachedCollector.replay(secondPassCollector);\n    } else {\n      searcher.search(query, secondPassCollector);\n    }\n\n    if (allGroups) {\n      return new TopGroups(secondPassCollector.getTopGroups(groupDocsOffset), matchingGroups.size());\n    } else {\n      return secondPassCollector.getTopGroups(groupDocsOffset);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  protected TopGroups groupByFieldOrFunction(IndexSearcher searcher, Query query, int groupOffset, int groupLimit) throws IOException {\n    int topN = groupOffset + groupLimit;\n\n    final FirstPassGroupingCollector firstPassCollector = grouper.getFirstPassCollector(groupSort, topN);\n    final AllGroupsCollector allGroupsCollector = allGroups ? grouper.getAllGroupsCollector() : null;\n    final AllGroupHeadsCollector allGroupHeadsCollector\n        = allGroupHeads ? grouper.getGroupHeadsCollector(sortWithinGroup) : null;\n\n    final Collector firstRound = MultiCollector.wrap(firstPassCollector, allGroupsCollector, allGroupHeadsCollector);\n\n    CachingCollector cachedCollector = null;\n    if (maxCacheRAMMB != null || maxDocsToCache != null) {\n      if (maxCacheRAMMB != null) {\n        cachedCollector = CachingCollector.create(firstRound, cacheScores, maxCacheRAMMB);\n      } else {\n        cachedCollector = CachingCollector.create(firstRound, cacheScores, maxDocsToCache);\n      }\n      searcher.search(query, cachedCollector);\n    } else {\n      searcher.search(query, firstRound);\n    }\n\n    matchingGroups = allGroups ? allGroupsCollector.getGroups() : Collections.emptyList();\n    matchingGroupHeads = allGroupHeads ? allGroupHeadsCollector.retrieveGroupHeads(searcher.getIndexReader().maxDoc())\n        : new Bits.MatchNoBits(searcher.getIndexReader().maxDoc());\n\n    Collection<SearchGroup> topSearchGroups = firstPassCollector.getTopGroups(groupOffset, fillSortFields);\n    if (topSearchGroups == null) {\n      return new TopGroups(new SortField[0], new SortField[0], 0, 0, new GroupDocs[0], Float.NaN);\n    }\n\n    int topNInsideGroup = groupDocsOffset + groupDocsLimit;\n    SecondPassGroupingCollector secondPassCollector\n        = grouper.getSecondPassCollector(topSearchGroups, groupSort, sortWithinGroup, topNInsideGroup,\n                                         includeScores, includeMaxScore, fillSortFields);\n\n    if (cachedCollector != null && cachedCollector.isCached()) {\n      cachedCollector.replay(secondPassCollector);\n    } else {\n      searcher.search(query, secondPassCollector);\n    }\n\n    if (allGroups) {\n      return new TopGroups(secondPassCollector.getTopGroups(groupDocsOffset), matchingGroups.size());\n    } else {\n      return secondPassCollector.getTopGroups(groupDocsOffset);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04c370507e5521b2eb998530736f1c19b851ed5a","date":1531911305,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/GroupingSearch#groupByFieldOrFunction(IndexSearcher,Query,int,int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/GroupingSearch#groupByFieldOrFunction(IndexSearcher,Query,int,int).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  protected TopGroups groupByFieldOrFunction(IndexSearcher searcher, Query query, int groupOffset, int groupLimit) throws IOException {\n    int topN = groupOffset + groupLimit;\n\n    final FirstPassGroupingCollector firstPassCollector = new FirstPassGroupingCollector(grouper, groupSort, topN);\n    final AllGroupsCollector allGroupsCollector = allGroups ? new AllGroupsCollector(grouper) : null;\n    final AllGroupHeadsCollector allGroupHeadsCollector\n        = allGroupHeads ? AllGroupHeadsCollector.newCollector(grouper, sortWithinGroup) : null;\n\n    final Collector firstRound = MultiCollector.wrap(firstPassCollector, allGroupsCollector, allGroupHeadsCollector);\n\n    CachingCollector cachedCollector = null;\n    if (maxCacheRAMMB != null || maxDocsToCache != null) {\n      if (maxCacheRAMMB != null) {\n        cachedCollector = CachingCollector.create(firstRound, cacheScores, maxCacheRAMMB);\n      } else {\n        cachedCollector = CachingCollector.create(firstRound, cacheScores, maxDocsToCache);\n      }\n      searcher.search(query, cachedCollector);\n    } else {\n      searcher.search(query, firstRound);\n    }\n\n    matchingGroups = allGroups ? allGroupsCollector.getGroups() : Collections.emptyList();\n    matchingGroupHeads = allGroupHeads ? allGroupHeadsCollector.retrieveGroupHeads(searcher.getIndexReader().maxDoc())\n        : new Bits.MatchNoBits(searcher.getIndexReader().maxDoc());\n\n    Collection<SearchGroup> topSearchGroups = firstPassCollector.getTopGroups(groupOffset);\n    if (topSearchGroups == null) {\n      return new TopGroups(new SortField[0], new SortField[0], 0, 0, new GroupDocs[0], Float.NaN);\n    }\n\n    int topNInsideGroup = groupDocsOffset + groupDocsLimit;\n    TopGroupsCollector secondPassCollector\n        = new TopGroupsCollector(grouper, topSearchGroups, groupSort, sortWithinGroup, topNInsideGroup,\n                                         includeScores, includeMaxScore);\n\n    if (cachedCollector != null && cachedCollector.isCached()) {\n      cachedCollector.replay(secondPassCollector);\n    } else {\n      searcher.search(query, secondPassCollector);\n    }\n\n    if (allGroups) {\n      return new TopGroups(secondPassCollector.getTopGroups(groupDocsOffset), matchingGroups.size());\n    } else {\n      return secondPassCollector.getTopGroups(groupDocsOffset);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  protected TopGroups groupByFieldOrFunction(IndexSearcher searcher, Query query, int groupOffset, int groupLimit) throws IOException {\n    int topN = groupOffset + groupLimit;\n\n    final FirstPassGroupingCollector firstPassCollector = new FirstPassGroupingCollector(grouper, groupSort, topN);\n    final AllGroupsCollector allGroupsCollector = allGroups ? new AllGroupsCollector(grouper) : null;\n    final AllGroupHeadsCollector allGroupHeadsCollector\n        = allGroupHeads ? AllGroupHeadsCollector.newCollector(grouper, sortWithinGroup) : null;\n\n    final Collector firstRound = MultiCollector.wrap(firstPassCollector, allGroupsCollector, allGroupHeadsCollector);\n\n    CachingCollector cachedCollector = null;\n    if (maxCacheRAMMB != null || maxDocsToCache != null) {\n      if (maxCacheRAMMB != null) {\n        cachedCollector = CachingCollector.create(firstRound, cacheScores, maxCacheRAMMB);\n      } else {\n        cachedCollector = CachingCollector.create(firstRound, cacheScores, maxDocsToCache);\n      }\n      searcher.search(query, cachedCollector);\n    } else {\n      searcher.search(query, firstRound);\n    }\n\n    matchingGroups = allGroups ? allGroupsCollector.getGroups() : Collections.emptyList();\n    matchingGroupHeads = allGroupHeads ? allGroupHeadsCollector.retrieveGroupHeads(searcher.getIndexReader().maxDoc())\n        : new Bits.MatchNoBits(searcher.getIndexReader().maxDoc());\n\n    Collection<SearchGroup> topSearchGroups = firstPassCollector.getTopGroups(groupOffset, fillSortFields);\n    if (topSearchGroups == null) {\n      return new TopGroups(new SortField[0], new SortField[0], 0, 0, new GroupDocs[0], Float.NaN);\n    }\n\n    int topNInsideGroup = groupDocsOffset + groupDocsLimit;\n    TopGroupsCollector secondPassCollector\n        = new TopGroupsCollector(grouper, topSearchGroups, groupSort, sortWithinGroup, topNInsideGroup,\n                                         includeScores, includeMaxScore, fillSortFields);\n\n    if (cachedCollector != null && cachedCollector.isCached()) {\n      cachedCollector.replay(secondPassCollector);\n    } else {\n      searcher.search(query, secondPassCollector);\n    }\n\n    if (allGroups) {\n      return new TopGroups(secondPassCollector.getTopGroups(groupDocsOffset), matchingGroups.size());\n    } else {\n      return secondPassCollector.getTopGroups(groupDocsOffset);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d3f7ab1a502671bbdb03bcced21e764d2483221","date":1532329609,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/GroupingSearch#groupByFieldOrFunction(IndexSearcher,Query,int,int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/GroupingSearch#groupByFieldOrFunction(IndexSearcher,Query,int,int).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  protected TopGroups groupByFieldOrFunction(IndexSearcher searcher, Query query, int groupOffset, int groupLimit) throws IOException {\n    int topN = groupOffset + groupLimit;\n\n    final FirstPassGroupingCollector firstPassCollector = new FirstPassGroupingCollector(grouper, groupSort, topN);\n    final AllGroupsCollector allGroupsCollector = allGroups ? new AllGroupsCollector(grouper) : null;\n    final AllGroupHeadsCollector allGroupHeadsCollector\n        = allGroupHeads ? AllGroupHeadsCollector.newCollector(grouper, sortWithinGroup) : null;\n\n    final Collector firstRound = MultiCollector.wrap(firstPassCollector, allGroupsCollector, allGroupHeadsCollector);\n\n    CachingCollector cachedCollector = null;\n    if (maxCacheRAMMB != null || maxDocsToCache != null) {\n      if (maxCacheRAMMB != null) {\n        cachedCollector = CachingCollector.create(firstRound, cacheScores, maxCacheRAMMB);\n      } else {\n        cachedCollector = CachingCollector.create(firstRound, cacheScores, maxDocsToCache);\n      }\n      searcher.search(query, cachedCollector);\n    } else {\n      searcher.search(query, firstRound);\n    }\n\n    matchingGroups = allGroups ? allGroupsCollector.getGroups() : Collections.emptyList();\n    matchingGroupHeads = allGroupHeads ? allGroupHeadsCollector.retrieveGroupHeads(searcher.getIndexReader().maxDoc())\n        : new Bits.MatchNoBits(searcher.getIndexReader().maxDoc());\n\n    Collection<SearchGroup> topSearchGroups = firstPassCollector.getTopGroups(groupOffset);\n    if (topSearchGroups == null) {\n      return new TopGroups(new SortField[0], new SortField[0], 0, 0, new GroupDocs[0], Float.NaN);\n    }\n\n    int topNInsideGroup = groupDocsOffset + groupDocsLimit;\n    TopGroupsCollector secondPassCollector\n        = new TopGroupsCollector(grouper, topSearchGroups, groupSort, sortWithinGroup, topNInsideGroup, includeMaxScore);\n\n    if (cachedCollector != null && cachedCollector.isCached()) {\n      cachedCollector.replay(secondPassCollector);\n    } else {\n      searcher.search(query, secondPassCollector);\n    }\n\n    if (allGroups) {\n      return new TopGroups(secondPassCollector.getTopGroups(groupDocsOffset), matchingGroups.size());\n    } else {\n      return secondPassCollector.getTopGroups(groupDocsOffset);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  protected TopGroups groupByFieldOrFunction(IndexSearcher searcher, Query query, int groupOffset, int groupLimit) throws IOException {\n    int topN = groupOffset + groupLimit;\n\n    final FirstPassGroupingCollector firstPassCollector = new FirstPassGroupingCollector(grouper, groupSort, topN);\n    final AllGroupsCollector allGroupsCollector = allGroups ? new AllGroupsCollector(grouper) : null;\n    final AllGroupHeadsCollector allGroupHeadsCollector\n        = allGroupHeads ? AllGroupHeadsCollector.newCollector(grouper, sortWithinGroup) : null;\n\n    final Collector firstRound = MultiCollector.wrap(firstPassCollector, allGroupsCollector, allGroupHeadsCollector);\n\n    CachingCollector cachedCollector = null;\n    if (maxCacheRAMMB != null || maxDocsToCache != null) {\n      if (maxCacheRAMMB != null) {\n        cachedCollector = CachingCollector.create(firstRound, cacheScores, maxCacheRAMMB);\n      } else {\n        cachedCollector = CachingCollector.create(firstRound, cacheScores, maxDocsToCache);\n      }\n      searcher.search(query, cachedCollector);\n    } else {\n      searcher.search(query, firstRound);\n    }\n\n    matchingGroups = allGroups ? allGroupsCollector.getGroups() : Collections.emptyList();\n    matchingGroupHeads = allGroupHeads ? allGroupHeadsCollector.retrieveGroupHeads(searcher.getIndexReader().maxDoc())\n        : new Bits.MatchNoBits(searcher.getIndexReader().maxDoc());\n\n    Collection<SearchGroup> topSearchGroups = firstPassCollector.getTopGroups(groupOffset);\n    if (topSearchGroups == null) {\n      return new TopGroups(new SortField[0], new SortField[0], 0, 0, new GroupDocs[0], Float.NaN);\n    }\n\n    int topNInsideGroup = groupDocsOffset + groupDocsLimit;\n    TopGroupsCollector secondPassCollector\n        = new TopGroupsCollector(grouper, topSearchGroups, groupSort, sortWithinGroup, topNInsideGroup,\n                                         includeScores, includeMaxScore);\n\n    if (cachedCollector != null && cachedCollector.isCached()) {\n      cachedCollector.replay(secondPassCollector);\n    } else {\n      searcher.search(query, secondPassCollector);\n    }\n\n    if (allGroups) {\n      return new TopGroups(secondPassCollector.getTopGroups(groupDocsOffset), matchingGroups.size());\n    } else {\n      return secondPassCollector.getTopGroups(groupDocsOffset);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["20e94e61fe5291647346b70437617e6b6c370408"],"20e94e61fe5291647346b70437617e6b6c370408":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"04c370507e5521b2eb998530736f1c19b851ed5a":["7ae958a739da1866696f442384393ba2f13e33e5"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","20e94e61fe5291647346b70437617e6b6c370408"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1d3f7ab1a502671bbdb03bcced21e764d2483221"],"1d3f7ab1a502671bbdb03bcced21e764d2483221":["04c370507e5521b2eb998530736f1c19b851ed5a"],"7ae958a739da1866696f442384393ba2f13e33e5":["20e94e61fe5291647346b70437617e6b6c370408"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"20e94e61fe5291647346b70437617e6b6c370408":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","7ae958a739da1866696f442384393ba2f13e33e5"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["20e94e61fe5291647346b70437617e6b6c370408","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"04c370507e5521b2eb998530736f1c19b851ed5a":["1d3f7ab1a502671bbdb03bcced21e764d2483221"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"7ae958a739da1866696f442384393ba2f13e33e5":["04c370507e5521b2eb998530736f1c19b851ed5a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"1d3f7ab1a502671bbdb03bcced21e764d2483221":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}