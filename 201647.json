{"path":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","commits":[{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfoPerCommit,SegmentInfoPerCommit,String,boolean).mjava","sourceNew":"   private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, context);\n      SegmentReader r2 = new SegmentReader(si2, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged, -1, false, codec, null);\n\n      SegmentMerger merger = new SegmentMerger(Arrays.<AtomicReader>asList(r1, r2),\n          si, InfoStream.getDefault(), trackingDir,\n          MergeState.CheckAbort.NONE, new FieldInfos.FieldNumbers(), context);\n\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.getDocCount() + si2.info.getDocCount(),\n                                               false, codec, null);\n      info.setFiles(new HashSet<String>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentCommitInfo(info, 0, -1L, -1L);\n   }\n\n","sourceOld":"   private SegmentInfoPerCommit merge(Directory dir, SegmentInfoPerCommit si1, SegmentInfoPerCommit si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, context);\n      SegmentReader r2 = new SegmentReader(si2, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged, -1, false, codec, null);\n\n      SegmentMerger merger = new SegmentMerger(Arrays.<AtomicReader>asList(r1, r2),\n          si, InfoStream.getDefault(), trackingDir,\n          MergeState.CheckAbort.NONE, new FieldInfos.FieldNumbers(), context);\n\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.getDocCount() + si2.info.getDocCount(),\n                                               false, codec, null);\n      info.setFiles(new HashSet<String>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentInfoPerCommit(info, 0, -1L, -1L);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","sourceNew":"   private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, context);\n      SegmentReader r2 = new SegmentReader(si2, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged, -1, false, codec, null);\n\n      SegmentMerger merger = new SegmentMerger(Arrays.<AtomicReader>asList(r1, r2),\n          si, InfoStream.getDefault(), trackingDir,\n          MergeState.CheckAbort.NONE, new FieldInfos.FieldNumbers(), context);\n\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.getDocCount() + si2.info.getDocCount(),\n                                               false, codec, null);\n      info.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentCommitInfo(info, 0, -1L, -1L);\n   }\n\n","sourceOld":"   private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, context);\n      SegmentReader r2 = new SegmentReader(si2, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged, -1, false, codec, null);\n\n      SegmentMerger merger = new SegmentMerger(Arrays.<AtomicReader>asList(r1, r2),\n          si, InfoStream.getDefault(), trackingDir,\n          MergeState.CheckAbort.NONE, new FieldInfos.FieldNumbers(), context);\n\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.getDocCount() + si2.info.getDocCount(),\n                                               false, codec, null);\n      info.setFiles(new HashSet<String>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentCommitInfo(info, 0, -1L, -1L);\n   }\n\n","bugFix":null,"bugIntro":["5f6bd27530a2846413fe2d00030493c0e2d3a072"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f3b037cd083286b2af89f96e768f85dcd8072d6","date":1396337805,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","sourceNew":"   private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, context);\n      SegmentReader r2 = new SegmentReader(si2, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged, -1, false, codec, null);\n\n      SegmentMerger merger = new SegmentMerger(Arrays.<AtomicReader>asList(r1, r2),\n          si, InfoStream.getDefault(), trackingDir,\n          MergeState.CheckAbort.NONE, new FieldInfos.FieldNumbers(), context, true);\n\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.getDocCount() + si2.info.getDocCount(),\n                                               false, codec, null);\n      info.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentCommitInfo(info, 0, -1L, -1L);\n   }\n\n","sourceOld":"   private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, context);\n      SegmentReader r2 = new SegmentReader(si2, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged, -1, false, codec, null);\n\n      SegmentMerger merger = new SegmentMerger(Arrays.<AtomicReader>asList(r1, r2),\n          si, InfoStream.getDefault(), trackingDir,\n          MergeState.CheckAbort.NONE, new FieldInfos.FieldNumbers(), context);\n\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.getDocCount() + si2.info.getDocCount(),\n                                               false, codec, null);\n      info.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentCommitInfo(info, 0, -1L, -1L);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","sourceNew":"   private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, context);\n      SegmentReader r2 = new SegmentReader(si2, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged, -1, false, codec, null);\n\n      SegmentMerger merger = new SegmentMerger(Arrays.<AtomicReader>asList(r1, r2),\n          si, InfoStream.getDefault(), trackingDir,\n          MergeState.CheckAbort.NONE, new FieldInfos.FieldNumbers(), context, true);\n\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.getDocCount() + si2.info.getDocCount(),\n                                               false, codec, null);\n      info.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentCommitInfo(info, 0, -1L, -1L);\n   }\n\n","sourceOld":"   private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, context);\n      SegmentReader r2 = new SegmentReader(si2, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged, -1, false, codec, null);\n\n      SegmentMerger merger = new SegmentMerger(Arrays.<AtomicReader>asList(r1, r2),\n          si, InfoStream.getDefault(), trackingDir,\n          MergeState.CheckAbort.NONE, new FieldInfos.FieldNumbers(), context);\n\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.getDocCount() + si2.info.getDocCount(),\n                                               false, codec, null);\n      info.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentCommitInfo(info, 0, -1L, -1L);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0567bdc5c86c94ced64201187cfcef2417d76dda","date":1400678298,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","sourceNew":"   private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, context);\n      SegmentReader r2 = new SegmentReader(si2, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged, -1, false, codec, null);\n\n      SegmentMerger merger = new SegmentMerger(Arrays.<AtomicReader>asList(r1, r2),\n          si, InfoStream.getDefault(), trackingDir,\n          MergeState.CheckAbort.NONE, new FieldInfos.FieldNumbers(), context, true);\n\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.getDocCount() + si2.info.getDocCount(),\n                                               false, codec, null);\n      info.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentCommitInfo(info, 0, -1L, -1L, -1L);\n   }\n\n","sourceOld":"   private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, context);\n      SegmentReader r2 = new SegmentReader(si2, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged, -1, false, codec, null);\n\n      SegmentMerger merger = new SegmentMerger(Arrays.<AtomicReader>asList(r1, r2),\n          si, InfoStream.getDefault(), trackingDir,\n          MergeState.CheckAbort.NONE, new FieldInfos.FieldNumbers(), context, true);\n\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.getDocCount() + si2.info.getDocCount(),\n                                               false, codec, null);\n      info.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentCommitInfo(info, 0, -1L, -1L);\n   }\n\n","bugFix":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"bugIntro":["5f6bd27530a2846413fe2d00030493c0e2d3a072"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a656b32c3aa151037a8c52e9b134acc3cbf482bc","date":1400688195,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","sourceNew":"   private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, context);\n      SegmentReader r2 = new SegmentReader(si2, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged, -1, false, codec, null);\n\n      SegmentMerger merger = new SegmentMerger(Arrays.<AtomicReader>asList(r1, r2),\n          si, InfoStream.getDefault(), trackingDir,\n          MergeState.CheckAbort.NONE, new FieldInfos.FieldNumbers(), context, true);\n\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.getDocCount() + si2.info.getDocCount(),\n                                               false, codec, null);\n      info.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentCommitInfo(info, 0, -1L, -1L, -1L);\n   }\n\n","sourceOld":"   private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, context);\n      SegmentReader r2 = new SegmentReader(si2, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged, -1, false, codec, null);\n\n      SegmentMerger merger = new SegmentMerger(Arrays.<AtomicReader>asList(r1, r2),\n          si, InfoStream.getDefault(), trackingDir,\n          MergeState.CheckAbort.NONE, new FieldInfos.FieldNumbers(), context, true);\n\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.getDocCount() + si2.info.getDocCount(),\n                                               false, codec, null);\n      info.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentCommitInfo(info, 0, -1L, -1L);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","sourceNew":"   private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, context);\n      SegmentReader r2 = new SegmentReader(si2, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged, -1, false, codec, null);\n\n      SegmentMerger merger = new SegmentMerger(Arrays.<AtomicReader>asList(r1, r2),\n          si, InfoStream.getDefault(), trackingDir,\n          MergeState.CheckAbort.NONE, new FieldInfos.FieldNumbers(), context, true);\n\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.getDocCount() + si2.info.getDocCount(),\n                                               false, codec, null);\n      info.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentCommitInfo(info, 0, -1L, -1L, -1L);\n   }\n\n","sourceOld":"   private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, context);\n      SegmentReader r2 = new SegmentReader(si2, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged, -1, false, codec, null);\n\n      SegmentMerger merger = new SegmentMerger(Arrays.<AtomicReader>asList(r1, r2),\n          si, InfoStream.getDefault(), trackingDir,\n          MergeState.CheckAbort.NONE, new FieldInfos.FieldNumbers(), context, true);\n\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.getDocCount() + si2.info.getDocCount(),\n                                               false, codec, null);\n      info.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentCommitInfo(info, 0, -1L, -1L);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"057a1793765d068ea9302f1a29e21734ee58d41e","date":1408130117,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","sourceNew":"   private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, context);\n      SegmentReader r2 = new SegmentReader(si2, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, merged, -1, false, codec, null);\n\n      SegmentMerger merger = new SegmentMerger(Arrays.<AtomicReader>asList(r1, r2),\n          si, InfoStream.getDefault(), trackingDir,\n          MergeState.CheckAbort.NONE, new FieldInfos.FieldNumbers(), context, true);\n\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Version.LATEST, merged,\n                                               si1.info.getDocCount() + si2.info.getDocCount(),\n                                               false, codec, null);\n      info.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentCommitInfo(info, 0, -1L, -1L, -1L);\n   }\n\n","sourceOld":"   private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, context);\n      SegmentReader r2 = new SegmentReader(si2, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged, -1, false, codec, null);\n\n      SegmentMerger merger = new SegmentMerger(Arrays.<AtomicReader>asList(r1, r2),\n          si, InfoStream.getDefault(), trackingDir,\n          MergeState.CheckAbort.NONE, new FieldInfos.FieldNumbers(), context, true);\n\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.getDocCount() + si2.info.getDocCount(),\n                                               false, codec, null);\n      info.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentCommitInfo(info, 0, -1L, -1L, -1L);\n   }\n\n","bugFix":null,"bugIntro":["5f6bd27530a2846413fe2d00030493c0e2d3a072"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","sourceNew":"   private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, context);\n      SegmentReader r2 = new SegmentReader(si2, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, merged, -1, false, codec, null);\n\n      SegmentMerger merger = new SegmentMerger(Arrays.<LeafReader>asList(r1, r2),\n          si, InfoStream.getDefault(), trackingDir,\n          MergeState.CheckAbort.NONE, new FieldInfos.FieldNumbers(), context, true);\n\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Version.LATEST, merged,\n                                               si1.info.getDocCount() + si2.info.getDocCount(),\n                                               false, codec, null);\n      info.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentCommitInfo(info, 0, -1L, -1L, -1L);\n   }\n\n","sourceOld":"   private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, context);\n      SegmentReader r2 = new SegmentReader(si2, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, merged, -1, false, codec, null);\n\n      SegmentMerger merger = new SegmentMerger(Arrays.<AtomicReader>asList(r1, r2),\n          si, InfoStream.getDefault(), trackingDir,\n          MergeState.CheckAbort.NONE, new FieldInfos.FieldNumbers(), context, true);\n\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Version.LATEST, merged,\n                                               si1.info.getDocCount() + si2.info.getDocCount(),\n                                               false, codec, null);\n      info.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentCommitInfo(info, 0, -1L, -1L, -1L);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c65d2864d936ccf22dc7ec14dd48b4dff7bacceb","date":1411653326,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","sourceNew":"   private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, context);\n      SegmentReader r2 = new SegmentReader(si2, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, merged, -1, false, codec, null, StringHelper.randomId());\n\n      SegmentMerger merger = new SegmentMerger(Arrays.<LeafReader>asList(r1, r2),\n          si, InfoStream.getDefault(), trackingDir,\n          MergeState.CheckAbort.NONE, new FieldInfos.FieldNumbers(), context, true);\n\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();;\n      si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, si, newIOContext(random()));\n        si.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentCommitInfo(si, 0, -1L, -1L, -1L);\n   }\n\n","sourceOld":"   private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, context);\n      SegmentReader r2 = new SegmentReader(si2, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, merged, -1, false, codec, null);\n\n      SegmentMerger merger = new SegmentMerger(Arrays.<LeafReader>asList(r1, r2),\n          si, InfoStream.getDefault(), trackingDir,\n          MergeState.CheckAbort.NONE, new FieldInfos.FieldNumbers(), context, true);\n\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Version.LATEST, merged,\n                                               si1.info.getDocCount() + si2.info.getDocCount(),\n                                               false, codec, null);\n      info.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentCommitInfo(info, 0, -1L, -1L, -1L);\n   }\n\n","bugFix":null,"bugIntro":["8521d944f9dfb45692ec28235dbf116d47ef69ba"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f6bd27530a2846413fe2d00030493c0e2d3a072","date":1411811855,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","sourceNew":"   private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, context);\n      SegmentReader r2 = new SegmentReader(si2, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, merged, -1, false, codec, null, StringHelper.randomId());\n\n      SegmentMerger merger = new SegmentMerger(Arrays.<LeafReader>asList(r1, r2),\n          si, InfoStream.getDefault(), trackingDir,\n          MergeState.CheckAbort.NONE, new FieldInfos.FieldNumbers(), context, true);\n\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();;\n      si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, si, newIOContext(random()));\n        si.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentCommitInfo(si, 0, -1L, -1L, -1L);\n   }\n\n","sourceOld":"   private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, context);\n      SegmentReader r2 = new SegmentReader(si2, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, merged, -1, false, codec, null);\n\n      SegmentMerger merger = new SegmentMerger(Arrays.<LeafReader>asList(r1, r2),\n          si, InfoStream.getDefault(), trackingDir,\n          MergeState.CheckAbort.NONE, new FieldInfos.FieldNumbers(), context, true);\n\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Version.LATEST, merged,\n                                               si1.info.getDocCount() + si2.info.getDocCount(),\n                                               false, codec, null);\n      info.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentCommitInfo(info, 0, -1L, -1L, -1L);\n   }\n\n","bugFix":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","0567bdc5c86c94ced64201187cfcef2417d76dda","057a1793765d068ea9302f1a29e21734ee58d41e","6a917aca07a305ab70118a83e84d931503441271","3cc749c053615f5871f3b95715fe292f34e70a53","1494abe5dc85557ec2e2772f87660d48f831c3a5","77f264c55cbf75404f8601ae7290d69157273a56"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2131047ecceac64b54ba70feec3d26bbd7e483d7","date":1411862069,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","sourceNew":"   private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, context);\n      SegmentReader r2 = new SegmentReader(si2, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, merged, -1, false, codec, null, StringHelper.randomId());\n\n      SegmentMerger merger = new SegmentMerger(Arrays.<LeafReader>asList(r1, r2),\n          si, InfoStream.getDefault(), trackingDir,\n          MergeState.CheckAbort.NONE, new FieldInfos.FieldNumbers(), context);\n\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();;\n      si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, si, newIOContext(random()));\n        si.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentCommitInfo(si, 0, -1L, -1L, -1L);\n   }\n\n","sourceOld":"   private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, context);\n      SegmentReader r2 = new SegmentReader(si2, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, merged, -1, false, codec, null, StringHelper.randomId());\n\n      SegmentMerger merger = new SegmentMerger(Arrays.<LeafReader>asList(r1, r2),\n          si, InfoStream.getDefault(), trackingDir,\n          MergeState.CheckAbort.NONE, new FieldInfos.FieldNumbers(), context, true);\n\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();;\n      si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, si, newIOContext(random()));\n        si.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentCommitInfo(si, 0, -1L, -1L, -1L);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","sourceNew":"   private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, context);\n      SegmentReader r2 = new SegmentReader(si2, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, merged, -1, false, codec, null, StringHelper.randomId());\n\n      SegmentMerger merger = new SegmentMerger(Arrays.<LeafReader>asList(r1, r2),\n          si, InfoStream.getDefault(), trackingDir,\n          MergeState.CheckAbort.NONE, new FieldInfos.FieldNumbers(), context);\n\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();;\n      si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, si, newIOContext(random()));\n        si.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentCommitInfo(si, 0, -1L, -1L, -1L);\n   }\n\n","sourceOld":"   private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, context);\n      SegmentReader r2 = new SegmentReader(si2, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, merged, -1, false, codec, null, StringHelper.randomId());\n\n      SegmentMerger merger = new SegmentMerger(Arrays.<LeafReader>asList(r1, r2),\n          si, InfoStream.getDefault(), trackingDir,\n          MergeState.CheckAbort.NONE, new FieldInfos.FieldNumbers(), context, true);\n\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();;\n      si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, si, newIOContext(random()));\n        si.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentCommitInfo(si, 0, -1L, -1L, -1L);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8521d944f9dfb45692ec28235dbf116d47ef69ba","date":1417535150,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","sourceNew":"   private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, context);\n      SegmentReader r2 = new SegmentReader(si2, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, merged, -1, false, codec, null, StringHelper.randomId(), new HashMap<>());\n\n      SegmentMerger merger = new SegmentMerger(Arrays.<LeafReader>asList(r1, r2),\n          si, InfoStream.getDefault(), trackingDir,\n          MergeState.CheckAbort.NONE, new FieldInfos.FieldNumbers(), context);\n\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();;\n      si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, si, newIOContext(random()));\n        si.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentCommitInfo(si, 0, -1L, -1L, -1L);\n   }\n\n","sourceOld":"   private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, context);\n      SegmentReader r2 = new SegmentReader(si2, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, merged, -1, false, codec, null, StringHelper.randomId());\n\n      SegmentMerger merger = new SegmentMerger(Arrays.<LeafReader>asList(r1, r2),\n          si, InfoStream.getDefault(), trackingDir,\n          MergeState.CheckAbort.NONE, new FieldInfos.FieldNumbers(), context);\n\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();;\n      si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, si, newIOContext(random()));\n        si.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentCommitInfo(si, 0, -1L, -1L, -1L);\n   }\n\n","bugFix":["c65d2864d936ccf22dc7ec14dd48b4dff7bacceb"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5faf65b6692f15cca0f87bf8666c87899afc619f","date":1420468108,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","sourceNew":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, context);\n    SegmentReader r2 = new SegmentReader(si2, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, merged, -1, false, codec, null, StringHelper.randomId(), new HashMap<>());\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<LeafReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, si, newIOContext(random()));\n      si.setUseCompoundFile(true);\n      for (final String fileToDelete : filesToDelete) {\n        si1.info.dir.deleteFile(fileToDelete);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, -1L, -1L, -1L);\n  }\n\n","sourceOld":"   private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, context);\n      SegmentReader r2 = new SegmentReader(si2, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, merged, -1, false, codec, null, StringHelper.randomId(), new HashMap<>());\n\n      SegmentMerger merger = new SegmentMerger(Arrays.<LeafReader>asList(r1, r2),\n          si, InfoStream.getDefault(), trackingDir,\n          MergeState.CheckAbort.NONE, new FieldInfos.FieldNumbers(), context);\n\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();;\n      si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, si, newIOContext(random()));\n        si.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentCommitInfo(si, 0, -1L, -1L, -1L);\n   }\n\n","bugFix":null,"bugIntro":["505bff044e47a553f461b6f4484d1d08faf4ac85"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"505bff044e47a553f461b6f4484d1d08faf4ac85","date":1420728783,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","sourceNew":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, context);\n    SegmentReader r2 = new SegmentReader(si2, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, merged, -1, false, codec, null, StringHelper.randomId(), new HashMap<>());\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, si, newIOContext(random()));\n      si.setUseCompoundFile(true);\n      for (final String fileToDelete : filesToDelete) {\n        si1.info.dir.deleteFile(fileToDelete);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, -1L, -1L, -1L);\n  }\n\n","sourceOld":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, context);\n    SegmentReader r2 = new SegmentReader(si2, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, merged, -1, false, codec, null, StringHelper.randomId(), new HashMap<>());\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<LeafReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, si, newIOContext(random()));\n      si.setUseCompoundFile(true);\n      for (final String fileToDelete : filesToDelete) {\n        si1.info.dir.deleteFile(fileToDelete);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, -1L, -1L, -1L);\n  }\n\n","bugFix":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c5705cb93fb3daa46c676cad08b916dd57bf1be","date":1422473298,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","sourceNew":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, context);\n    SegmentReader r2 = new SegmentReader(si2, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, merged, -1, false, codec, null, StringHelper.randomId(), new HashMap<>());\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = si.files();\n      IndexWriter.createCompoundFile(InfoStream.getDefault(), new TrackingDirectoryWrapper(dir), si, newIOContext(random()));\n      si.setUseCompoundFile(true);\n      for (final String fileToDelete : filesToDelete) {\n        si1.info.dir.deleteFile(fileToDelete);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, -1L, -1L, -1L);\n  }\n\n","sourceOld":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, context);\n    SegmentReader r2 = new SegmentReader(si2, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, merged, -1, false, codec, null, StringHelper.randomId(), new HashMap<>());\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, si, newIOContext(random()));\n      si.setUseCompoundFile(true);\n      for (final String fileToDelete : filesToDelete) {\n        si1.info.dir.deleteFile(fileToDelete);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, -1L, -1L, -1L);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79700663e164dece87bed4adfd3e28bab6cb1385","date":1425241849,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","sourceNew":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, context);\n    SegmentReader r2 = new SegmentReader(si2, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, merged, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>());\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = si.files();\n      IndexWriter.createCompoundFile(InfoStream.getDefault(), new TrackingDirectoryWrapper(dir), si, newIOContext(random()));\n      si.setUseCompoundFile(true);\n      for (final String fileToDelete : filesToDelete) {\n        si1.info.dir.deleteFile(fileToDelete);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, -1L, -1L, -1L);\n  }\n\n","sourceOld":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, context);\n    SegmentReader r2 = new SegmentReader(si2, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, merged, -1, false, codec, null, StringHelper.randomId(), new HashMap<>());\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = si.files();\n      IndexWriter.createCompoundFile(InfoStream.getDefault(), new TrackingDirectoryWrapper(dir), si, newIOContext(random()));\n      si.setUseCompoundFile(true);\n      for (final String fileToDelete : filesToDelete) {\n        si1.info.dir.deleteFile(fileToDelete);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, -1L, -1L, -1L);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"299a2348fa24151d150182211b6208a38e5e3450","date":1425304608,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","sourceNew":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, context);\n    SegmentReader r2 = new SegmentReader(si2, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, merged, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>());\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = si.files();\n      IndexWriter.createCompoundFile(InfoStream.getDefault(), new TrackingDirectoryWrapper(dir), si, newIOContext(random()));\n      si.setUseCompoundFile(true);\n      for (final String fileToDelete : filesToDelete) {\n        si1.info.dir.deleteFile(fileToDelete);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, -1L, -1L, -1L);\n  }\n\n","sourceOld":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, context);\n    SegmentReader r2 = new SegmentReader(si2, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, merged, -1, false, codec, null, StringHelper.randomId(), new HashMap<>());\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = si.files();\n      IndexWriter.createCompoundFile(InfoStream.getDefault(), new TrackingDirectoryWrapper(dir), si, newIOContext(random()));\n      si.setUseCompoundFile(true);\n      for (final String fileToDelete : filesToDelete) {\n        si1.info.dir.deleteFile(fileToDelete);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, -1L, -1L, -1L);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","sourceNew":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, context);\n    SegmentReader r2 = new SegmentReader(si2, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, merged, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>());\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = si.files();\n      IndexWriter.createCompoundFile(InfoStream.getDefault(), new TrackingDirectoryWrapper(dir), si, newIOContext(random()));\n      si.setUseCompoundFile(true);\n      for (final String fileToDelete : filesToDelete) {\n        si1.info.dir.deleteFile(fileToDelete);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, -1L, -1L, -1L);\n  }\n\n","sourceOld":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, context);\n    SegmentReader r2 = new SegmentReader(si2, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, merged, -1, false, codec, null, StringHelper.randomId(), new HashMap<>());\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = si.files();\n      IndexWriter.createCompoundFile(InfoStream.getDefault(), new TrackingDirectoryWrapper(dir), si, newIOContext(random()));\n      si.setUseCompoundFile(true);\n      for (final String fileToDelete : filesToDelete) {\n        si1.info.dir.deleteFile(fileToDelete);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, -1L, -1L, -1L);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"950882a2bd2a5f9dc16a154871584eaa643d882a","date":1436366563,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","sourceNew":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, context);\n    SegmentReader r2 = new SegmentReader(si2, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, merged, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>());\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = si.files();\n      codec.compoundFormat().write(dir, si, context);\n      si.setUseCompoundFile(true);\n      for (final String fileToDelete : filesToDelete) {\n        si1.info.dir.deleteFile(fileToDelete);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, -1L, -1L, -1L);\n  }\n\n","sourceOld":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, context);\n    SegmentReader r2 = new SegmentReader(si2, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, merged, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>());\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = si.files();\n      IndexWriter.createCompoundFile(InfoStream.getDefault(), new TrackingDirectoryWrapper(dir), si, newIOContext(random()));\n      si.setUseCompoundFile(true);\n      for (final String fileToDelete : filesToDelete) {\n        si1.info.dir.deleteFile(fileToDelete);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, -1L, -1L, -1L);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","sourceNew":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, context);\n    SegmentReader r2 = new SegmentReader(si2, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, merged, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>());\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = si.files();\n      codec.compoundFormat().write(dir, si, context);\n      si.setUseCompoundFile(true);\n      si1.info.dir.deleteFiles(filesToDelete);\n    }\n\n    return new SegmentCommitInfo(si, 0, -1L, -1L, -1L);\n  }\n\n","sourceOld":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, context);\n    SegmentReader r2 = new SegmentReader(si2, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, merged, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>());\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = si.files();\n      codec.compoundFormat().write(dir, si, context);\n      si.setUseCompoundFile(true);\n      for (final String fileToDelete : filesToDelete) {\n        si1.info.dir.deleteFile(fileToDelete);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, -1L, -1L, -1L);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1","date":1454513757,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","sourceNew":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, context);\n    SegmentReader r2 = new SegmentReader(si2, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, merged, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>());\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = si.files();\n      codec.compoundFormat().write(dir, si, context);\n      si.setUseCompoundFile(true);\n      for(String name : filesToDelete) {\n        si1.info.dir.deleteFile(name);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, -1L, -1L, -1L);\n  }\n\n","sourceOld":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, context);\n    SegmentReader r2 = new SegmentReader(si2, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, merged, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>());\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = si.files();\n      codec.compoundFormat().write(dir, si, context);\n      si.setUseCompoundFile(true);\n      si1.info.dir.deleteFiles(filesToDelete);\n    }\n\n    return new SegmentCommitInfo(si, 0, -1L, -1L, -1L);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","sourceNew":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, context);\n    SegmentReader r2 = new SegmentReader(si2, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, merged, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>());\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = si.files();\n      codec.compoundFormat().write(dir, si, context);\n      si.setUseCompoundFile(true);\n      for(String name : filesToDelete) {\n        si1.info.dir.deleteFile(name);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, -1L, -1L, -1L);\n  }\n\n","sourceOld":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, context);\n    SegmentReader r2 = new SegmentReader(si2, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, merged, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>());\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = si.files();\n      codec.compoundFormat().write(dir, si, context);\n      si.setUseCompoundFile(true);\n      for (final String fileToDelete : filesToDelete) {\n        si1.info.dir.deleteFile(fileToDelete);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, -1L, -1L, -1L);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","sourceNew":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, context);\n    SegmentReader r2 = new SegmentReader(si2, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, merged, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>());\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = si.files();\n      codec.compoundFormat().write(dir, si, context);\n      si.setUseCompoundFile(true);\n      for(String name : filesToDelete) {\n        si1.info.dir.deleteFile(name);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, -1L, -1L, -1L);\n  }\n\n","sourceOld":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, context);\n    SegmentReader r2 = new SegmentReader(si2, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, merged, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>());\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = si.files();\n      codec.compoundFormat().write(dir, si, context);\n      si.setUseCompoundFile(true);\n      for (final String fileToDelete : filesToDelete) {\n        si1.info.dir.deleteFile(fileToDelete);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, -1L, -1L, -1L);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","sourceNew":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, context);\n    SegmentReader r2 = new SegmentReader(si2, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, merged, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>());\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = si.files();\n      codec.compoundFormat().write(dir, si, context);\n      si.setUseCompoundFile(true);\n      for(String name : filesToDelete) {\n        si1.info.dir.deleteFile(name);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, -1L, -1L, -1L);\n  }\n\n","sourceOld":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, context);\n    SegmentReader r2 = new SegmentReader(si2, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, merged, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>());\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = si.files();\n      codec.compoundFormat().write(dir, si, context);\n      si.setUseCompoundFile(true);\n      for (final String fileToDelete : filesToDelete) {\n        si1.info.dir.deleteFile(fileToDelete);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, -1L, -1L, -1L);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","sourceNew":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, context);\n    SegmentReader r2 = new SegmentReader(si2, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, merged, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = si.files();\n      codec.compoundFormat().write(dir, si, context);\n      si.setUseCompoundFile(true);\n      for(String name : filesToDelete) {\n        si1.info.dir.deleteFile(name);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, -1L, -1L, -1L);\n  }\n\n","sourceOld":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, context);\n    SegmentReader r2 = new SegmentReader(si2, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, merged, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>());\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = si.files();\n      codec.compoundFormat().write(dir, si, context);\n      si.setUseCompoundFile(true);\n      for(String name : filesToDelete) {\n        si1.info.dir.deleteFile(name);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, -1L, -1L, -1L);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","sourceNew":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, context);\n    SegmentReader r2 = new SegmentReader(si2, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, merged, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = si.files();\n      codec.compoundFormat().write(dir, si, context);\n      si.setUseCompoundFile(true);\n      for(String name : filesToDelete) {\n        si1.info.dir.deleteFile(name);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, -1L, -1L, -1L);\n  }\n\n","sourceOld":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, context);\n    SegmentReader r2 = new SegmentReader(si2, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, merged, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>());\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = si.files();\n      codec.compoundFormat().write(dir, si, context);\n      si.setUseCompoundFile(true);\n      for(String name : filesToDelete) {\n        si1.info.dir.deleteFile(name);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, -1L, -1L, -1L);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","sourceNew":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, context);\n    SegmentReader r2 = new SegmentReader(si2, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, merged, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = si.files();\n      codec.compoundFormat().write(dir, si, context);\n      si.setUseCompoundFile(true);\n      for(String name : filesToDelete) {\n        si1.info.dir.deleteFile(name);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, -1L, -1L, -1L);\n  }\n\n","sourceOld":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, context);\n    SegmentReader r2 = new SegmentReader(si2, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, merged, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>());\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = si.files();\n      codec.compoundFormat().write(dir, si, context);\n      si.setUseCompoundFile(true);\n      for(String name : filesToDelete) {\n        si1.info.dir.deleteFile(name);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, -1L, -1L, -1L);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","sourceNew":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, context);\n    SegmentReader r2 = new SegmentReader(si2, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, merged, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = si.files();\n      codec.compoundFormat().write(dir, si, context);\n      si.setUseCompoundFile(true);\n      for(String name : filesToDelete) {\n        si1.info.dir.deleteFile(name);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, -1L, -1L, -1L);\n  }\n\n","sourceOld":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, context);\n    SegmentReader r2 = new SegmentReader(si2, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, merged, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>());\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = si.files();\n      codec.compoundFormat().write(dir, si, context);\n      si.setUseCompoundFile(true);\n      for(String name : filesToDelete) {\n        si1.info.dir.deleteFile(name);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, -1L, -1L, -1L);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","sourceNew":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, context);\n    SegmentReader r2 = new SegmentReader(si2, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, merged, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = si.files();\n      codec.compoundFormat().write(dir, si, context);\n      si.setUseCompoundFile(true);\n      for(String name : filesToDelete) {\n        si1.info.dir.deleteFile(name);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, -1L, -1L, -1L);\n  }\n\n","sourceOld":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, context);\n    SegmentReader r2 = new SegmentReader(si2, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, merged, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>());\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = si.files();\n      codec.compoundFormat().write(dir, si, context);\n      si.setUseCompoundFile(true);\n      for(String name : filesToDelete) {\n        si1.info.dir.deleteFile(name);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, -1L, -1L, -1L);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31741cf1390044e38a2ec3127cf302ba841bfd75","date":1491292636,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","sourceNew":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, Version.LATEST.major, context);\n    SegmentReader r2 = new SegmentReader(si2, Version.LATEST.major, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, null, merged, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = si.files();\n      codec.compoundFormat().write(dir, si, context);\n      si.setUseCompoundFile(true);\n      for(String name : filesToDelete) {\n        si1.info.dir.deleteFile(name);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, -1L, -1L, -1L);\n  }\n\n","sourceOld":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, context);\n    SegmentReader r2 = new SegmentReader(si2, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, merged, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = si.files();\n      codec.compoundFormat().write(dir, si, context);\n      si.setUseCompoundFile(true);\n      for(String name : filesToDelete) {\n        si1.info.dir.deleteFile(name);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, -1L, -1L, -1L);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92212fd254551a0b1156aafc3a1a6ed1a43932ad","date":1491296431,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","sourceNew":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, Version.LATEST.major, context);\n    SegmentReader r2 = new SegmentReader(si2, Version.LATEST.major, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, null, merged, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = si.files();\n      codec.compoundFormat().write(dir, si, context);\n      si.setUseCompoundFile(true);\n      for(String name : filesToDelete) {\n        si1.info.dir.deleteFile(name);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, -1L, -1L, -1L);\n  }\n\n","sourceOld":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, context);\n    SegmentReader r2 = new SegmentReader(si2, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, merged, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = si.files();\n      codec.compoundFormat().write(dir, si, context);\n      si.setUseCompoundFile(true);\n      for(String name : filesToDelete) {\n        si1.info.dir.deleteFile(name);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, -1L, -1L, -1L);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeba0a4d0845889a402dd225793d62f009d029c9","date":1527938093,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","sourceNew":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, Version.LATEST.major, context);\n    SegmentReader r2 = new SegmentReader(si2, Version.LATEST.major, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, null, merged, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(null), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = si.files();\n      codec.compoundFormat().write(dir, si, context);\n      si.setUseCompoundFile(true);\n      for(String name : filesToDelete) {\n        si1.info.dir.deleteFile(name);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, -1L, -1L, -1L);\n  }\n\n","sourceOld":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, Version.LATEST.major, context);\n    SegmentReader r2 = new SegmentReader(si2, Version.LATEST.major, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, null, merged, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = si.files();\n      codec.compoundFormat().write(dir, si, context);\n      si.setUseCompoundFile(true);\n      for(String name : filesToDelete) {\n        si1.info.dir.deleteFile(name);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, -1L, -1L, -1L);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab548c8f96022b4780f7500a30b19b4f4a5feeb6","date":1527940044,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","sourceNew":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, Version.LATEST.major, context);\n    SegmentReader r2 = new SegmentReader(si2, Version.LATEST.major, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, null, merged, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = si.files();\n      codec.compoundFormat().write(dir, si, context);\n      si.setUseCompoundFile(true);\n      for(String name : filesToDelete) {\n        si1.info.dir.deleteFile(name);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, -1L, -1L, -1L);\n  }\n\n","sourceOld":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, Version.LATEST.major, context);\n    SegmentReader r2 = new SegmentReader(si2, Version.LATEST.major, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, null, merged, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(null), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = si.files();\n      codec.compoundFormat().write(dir, si, context);\n      si.setUseCompoundFile(true);\n      for(String name : filesToDelete) {\n        si1.info.dir.deleteFile(name);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, -1L, -1L, -1L);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7e4ca6dc9612ff741d8713743e2bccfae5eadac","date":1528093718,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","sourceNew":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, Version.LATEST.major, context);\n    SegmentReader r2 = new SegmentReader(si2, Version.LATEST.major, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, null, merged, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(null), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = si.files();\n      codec.compoundFormat().write(dir, si, context);\n      si.setUseCompoundFile(true);\n      for(String name : filesToDelete) {\n        si1.info.dir.deleteFile(name);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, -1L, -1L, -1L);\n  }\n\n","sourceOld":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, Version.LATEST.major, context);\n    SegmentReader r2 = new SegmentReader(si2, Version.LATEST.major, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, null, merged, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = si.files();\n      codec.compoundFormat().write(dir, si, context);\n      si.setUseCompoundFile(true);\n      for(String name : filesToDelete) {\n        si1.info.dir.deleteFile(name);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, -1L, -1L, -1L);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f2203cb8ae87188877cfbf6ad170c5738a0aad5","date":1528117512,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","sourceNew":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, Version.LATEST.major, context);\n    SegmentReader r2 = new SegmentReader(si2, Version.LATEST.major, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, null, merged, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(null), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = si.files();\n      codec.compoundFormat().write(dir, si, context);\n      si.setUseCompoundFile(true);\n      for(String name : filesToDelete) {\n        si1.info.dir.deleteFile(name);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, 0, -1L, -1L, -1L);\n  }\n\n","sourceOld":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, Version.LATEST.major, context);\n    SegmentReader r2 = new SegmentReader(si2, Version.LATEST.major, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, null, merged, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(null), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = si.files();\n      codec.compoundFormat().write(dir, si, context);\n      si.setUseCompoundFile(true);\n      for(String name : filesToDelete) {\n        si1.info.dir.deleteFile(name);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, -1L, -1L, -1L);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","sourceNew":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, Version.LATEST.major, context);\n    SegmentReader r2 = new SegmentReader(si2, Version.LATEST.major, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, null, merged, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(null), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = si.files();\n      codec.compoundFormat().write(dir, si, context);\n      si.setUseCompoundFile(true);\n      for(String name : filesToDelete) {\n        si1.info.dir.deleteFile(name);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, 0, -1L, -1L, -1L);\n  }\n\n","sourceOld":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, Version.LATEST.major, context);\n    SegmentReader r2 = new SegmentReader(si2, Version.LATEST.major, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, null, merged, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = si.files();\n      codec.compoundFormat().write(dir, si, context);\n      si.setUseCompoundFile(true);\n      for(String name : filesToDelete) {\n        si1.info.dir.deleteFile(name);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, -1L, -1L, -1L);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","sourceNew":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, Version.LATEST.major, context);\n    SegmentReader r2 = new SegmentReader(si2, Version.LATEST.major, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, null, merged, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(null), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = si.files();\n      codec.compoundFormat().write(dir, si, context);\n      si.setUseCompoundFile(true);\n      for(String name : filesToDelete) {\n        si1.info.dir.deleteFile(name);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, 0, -1L, -1L, -1L);\n  }\n\n","sourceOld":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, Version.LATEST.major, context);\n    SegmentReader r2 = new SegmentReader(si2, Version.LATEST.major, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, null, merged, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = si.files();\n      codec.compoundFormat().write(dir, si, context);\n      si.setUseCompoundFile(true);\n      for(String name : filesToDelete) {\n        si1.info.dir.deleteFile(name);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, -1L, -1L, -1L);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790693f23f4e88a59fbb25e47cc25f6d493b03cb","date":1553077690,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","sourceNew":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, Version.LATEST.major, false, context);\n    SegmentReader r2 = new SegmentReader(si2, Version.LATEST.major, false, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, null, merged, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(null), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = si.files();\n      codec.compoundFormat().write(dir, si, context);\n      si.setUseCompoundFile(true);\n      for(String name : filesToDelete) {\n        si1.info.dir.deleteFile(name);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, 0, -1L, -1L, -1L);\n  }\n\n","sourceOld":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, Version.LATEST.major, context);\n    SegmentReader r2 = new SegmentReader(si2, Version.LATEST.major, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, null, merged, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(null), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = si.files();\n      codec.compoundFormat().write(dir, si, context);\n      si.setUseCompoundFile(true);\n      for(String name : filesToDelete) {\n        si1.info.dir.deleteFile(name);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, 0, -1L, -1L, -1L);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"763da4a9605e47013078edc323b9d4b608f0f9e0","date":1555353576,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","sourceNew":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, Version.LATEST.major, false, context, Collections.emptyMap());\n    SegmentReader r2 = new SegmentReader(si2, Version.LATEST.major, false, context, Collections.emptyMap());\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, null, merged, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(null), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = si.files();\n      codec.compoundFormat().write(dir, si, context);\n      si.setUseCompoundFile(true);\n      for(String name : filesToDelete) {\n        si1.info.dir.deleteFile(name);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, 0, -1L, -1L, -1L);\n  }\n\n","sourceOld":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, Version.LATEST.major, false, context);\n    SegmentReader r2 = new SegmentReader(si2, Version.LATEST.major, false, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, null, merged, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(null), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = si.files();\n      codec.compoundFormat().write(dir, si, context);\n      si.setUseCompoundFile(true);\n      for(String name : filesToDelete) {\n        si1.info.dir.deleteFile(name);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, 0, -1L, -1L, -1L);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4e83191a3e02851a0b67e5335e6922f3e9ea86d","date":1583489709,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","sourceNew":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, Version.LATEST.major, false, context);\n    SegmentReader r2 = new SegmentReader(si2, Version.LATEST.major, false, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, null, merged, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(null), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = si.files();\n      codec.compoundFormat().write(dir, si, context);\n      si.setUseCompoundFile(true);\n      for(String name : filesToDelete) {\n        si1.info.dir.deleteFile(name);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, 0, -1L, -1L, -1L);\n  }\n\n","sourceOld":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, Version.LATEST.major, false, context, Collections.emptyMap());\n    SegmentReader r2 = new SegmentReader(si2, Version.LATEST.major, false, context, Collections.emptyMap());\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, null, merged, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(null), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = si.files();\n      codec.compoundFormat().write(dir, si, context);\n      si.setUseCompoundFile(true);\n      for(String name : filesToDelete) {\n        si1.info.dir.deleteFile(name);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, 0, -1L, -1L, -1L);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bec68e7c41fed133827595747d853cad504e481e","date":1583501052,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","sourceNew":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, Version.LATEST.major, context);\n    SegmentReader r2 = new SegmentReader(si2, Version.LATEST.major, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, null, merged, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(null), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = si.files();\n      codec.compoundFormat().write(dir, si, context);\n      si.setUseCompoundFile(true);\n      for(String name : filesToDelete) {\n        si1.info.dir.deleteFile(name);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, 0, -1L, -1L, -1L);\n  }\n\n","sourceOld":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, Version.LATEST.major, false, context);\n    SegmentReader r2 = new SegmentReader(si2, Version.LATEST.major, false, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, null, merged, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(null), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = si.files();\n      codec.compoundFormat().write(dir, si, context);\n      si.setUseCompoundFile(true);\n      for(String name : filesToDelete) {\n        si1.info.dir.deleteFile(name);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, 0, -1L, -1L, -1L);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14654be3f7a82c9a3c52169e365baa55bfe64f66","date":1587212697,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","sourceNew":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, Version.LATEST.major, context);\n    SegmentReader r2 = new SegmentReader(si2, Version.LATEST.major, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, null, merged, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(null), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = si.files();\n      codec.compoundFormat().write(dir, si, context);\n      si.setUseCompoundFile(true);\n      for(String name : filesToDelete) {\n        si1.info.dir.deleteFile(name);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, 0, -1L, -1L, -1L, StringHelper.randomId());\n  }\n\n","sourceOld":"  private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n    throws Exception {\n    IOContext context = newIOContext(random(), new IOContext(new MergeInfo(-1, -1, false, -1)));\n    SegmentReader r1 = new SegmentReader(si1, Version.LATEST.major, context);\n    SegmentReader r2 = new SegmentReader(si2, Version.LATEST.major, context);\n\n    final Codec codec = Codec.getDefault();\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n    final SegmentInfo si = new SegmentInfo(si1.info.dir, Version.LATEST, null, merged, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n\n    SegmentMerger merger = new SegmentMerger(Arrays.<CodecReader>asList(r1, r2),\n                                             si, InfoStream.getDefault(), trackingDir,\n                                             new FieldInfos.FieldNumbers(null), context);\n\n    MergeState mergeState = merger.merge();\n    r1.close();\n    r2.close();;\n    si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));\n      \n    if (useCompoundFile) {\n      Collection<String> filesToDelete = si.files();\n      codec.compoundFormat().write(dir, si, context);\n      si.setUseCompoundFile(true);\n      for(String name : filesToDelete) {\n        si1.info.dir.deleteFile(name);\n      }\n    }\n\n    return new SegmentCommitInfo(si, 0, 0, -1L, -1L, -1L);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1f3b037cd083286b2af89f96e768f85dcd8072d6":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"763da4a9605e47013078edc323b9d4b608f0f9e0":["790693f23f4e88a59fbb25e47cc25f6d493b03cb"],"3c5705cb93fb3daa46c676cad08b916dd57bf1be":["505bff044e47a553f461b6f4484d1d08faf4ac85"],"5a207d19eac354d649c3f0e2cce070017c78125e":["950882a2bd2a5f9dc16a154871584eaa643d882a","b470f36a9372c97283360b1304eacbde22df6c0d"],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["c9fb5f46e264daf5ba3860defe623a89d202dd87","c65d2864d936ccf22dc7ec14dd48b4dff7bacceb"],"0ad30c6a479e764150a3316e57263319775f1df2":["5a207d19eac354d649c3f0e2cce070017c78125e","3d33e731a93d4b57e662ff094f64f94a745422d4"],"b7605579001505896d48b07160075a5c8b8e128e":["1f3b037cd083286b2af89f96e768f85dcd8072d6","0567bdc5c86c94ced64201187cfcef2417d76dda"],"057a1793765d068ea9302f1a29e21734ee58d41e":["0567bdc5c86c94ced64201187cfcef2417d76dda"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["057a1793765d068ea9302f1a29e21734ee58d41e"],"a4e83191a3e02851a0b67e5335e6922f3e9ea86d":["763da4a9605e47013078edc323b9d4b608f0f9e0"],"31741cf1390044e38a2ec3127cf302ba841bfd75":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["5a207d19eac354d649c3f0e2cce070017c78125e","0ad30c6a479e764150a3316e57263319775f1df2"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["3c5705cb93fb3daa46c676cad08b916dd57bf1be","79700663e164dece87bed4adfd3e28bab6cb1385"],"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1":["6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"9bb9a29a5e71a90295f175df8919802993142c9a":["5f6bd27530a2846413fe2d00030493c0e2d3a072","2131047ecceac64b54ba70feec3d26bbd7e483d7"],"ab548c8f96022b4780f7500a30b19b4f4a5feeb6":["eeba0a4d0845889a402dd225793d62f009d029c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["31741cf1390044e38a2ec3127cf302ba841bfd75","8f2203cb8ae87188877cfbf6ad170c5738a0aad5"],"b7e4ca6dc9612ff741d8713743e2bccfae5eadac":["ab548c8f96022b4780f7500a30b19b4f4a5feeb6"],"79700663e164dece87bed4adfd3e28bab6cb1385":["3c5705cb93fb3daa46c676cad08b916dd57bf1be"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["950882a2bd2a5f9dc16a154871584eaa643d882a"],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"299a2348fa24151d150182211b6208a38e5e3450":["3c5705cb93fb3daa46c676cad08b916dd57bf1be","79700663e164dece87bed4adfd3e28bab6cb1385"],"790693f23f4e88a59fbb25e47cc25f6d493b03cb":["8f2203cb8ae87188877cfbf6ad170c5738a0aad5"],"5eb2511ababf862ea11e10761c70ee560cd84510":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["950882a2bd2a5f9dc16a154871584eaa643d882a","b470f36a9372c97283360b1304eacbde22df6c0d"],"0567bdc5c86c94ced64201187cfcef2417d76dda":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"bec68e7c41fed133827595747d853cad504e481e":["a4e83191a3e02851a0b67e5335e6922f3e9ea86d"],"505bff044e47a553f461b6f4484d1d08faf4ac85":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5a207d19eac354d649c3f0e2cce070017c78125e","d470c8182e92b264680e34081b75e70a9f2b3c89"],"8521d944f9dfb45692ec28235dbf116d47ef69ba":["9bb9a29a5e71a90295f175df8919802993142c9a"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["5a207d19eac354d649c3f0e2cce070017c78125e"],"14654be3f7a82c9a3c52169e365baa55bfe64f66":["bec68e7c41fed133827595747d853cad504e481e"],"b470f36a9372c97283360b1304eacbde22df6c0d":["950882a2bd2a5f9dc16a154871584eaa643d882a","8f4e2dcb5e470991d83a63c264bfe20880d3b3c1"],"eeba0a4d0845889a402dd225793d62f009d029c9":["31741cf1390044e38a2ec3127cf302ba841bfd75"],"950882a2bd2a5f9dc16a154871584eaa643d882a":["79700663e164dece87bed4adfd3e28bab6cb1385"],"2131047ecceac64b54ba70feec3d26bbd7e483d7":["c65d2864d936ccf22dc7ec14dd48b4dff7bacceb"],"a656b32c3aa151037a8c52e9b134acc3cbf482bc":["1f3b037cd083286b2af89f96e768f85dcd8072d6","0567bdc5c86c94ced64201187cfcef2417d76dda"],"5faf65b6692f15cca0f87bf8666c87899afc619f":["8521d944f9dfb45692ec28235dbf116d47ef69ba"],"8f2203cb8ae87188877cfbf6ad170c5738a0aad5":["b7e4ca6dc9612ff741d8713743e2bccfae5eadac"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["5a207d19eac354d649c3f0e2cce070017c78125e","ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"f592209545c71895260367152601e9200399776d":["ab548c8f96022b4780f7500a30b19b4f4a5feeb6","8f2203cb8ae87188877cfbf6ad170c5738a0aad5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["14654be3f7a82c9a3c52169e365baa55bfe64f66"],"c65d2864d936ccf22dc7ec14dd48b4dff7bacceb":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"1f3b037cd083286b2af89f96e768f85dcd8072d6":["b7605579001505896d48b07160075a5c8b8e128e","5eb2511ababf862ea11e10761c70ee560cd84510","0567bdc5c86c94ced64201187cfcef2417d76dda","a656b32c3aa151037a8c52e9b134acc3cbf482bc"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"763da4a9605e47013078edc323b9d4b608f0f9e0":["a4e83191a3e02851a0b67e5335e6922f3e9ea86d"],"3c5705cb93fb3daa46c676cad08b916dd57bf1be":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","79700663e164dece87bed4adfd3e28bab6cb1385","299a2348fa24151d150182211b6208a38e5e3450"],"5a207d19eac354d649c3f0e2cce070017c78125e":["0ad30c6a479e764150a3316e57263319775f1df2","d470c8182e92b264680e34081b75e70a9f2b3c89","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","ceaef6cfc68c8ab22a684192e469a8280f9e6e70","3d33e731a93d4b57e662ff094f64f94a745422d4"],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["9bb9a29a5e71a90295f175df8919802993142c9a"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"b7605579001505896d48b07160075a5c8b8e128e":[],"057a1793765d068ea9302f1a29e21734ee58d41e":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["5f6bd27530a2846413fe2d00030493c0e2d3a072","c65d2864d936ccf22dc7ec14dd48b4dff7bacceb"],"a4e83191a3e02851a0b67e5335e6922f3e9ea86d":["bec68e7c41fed133827595747d853cad504e481e"],"31741cf1390044e38a2ec3127cf302ba841bfd75":["b70042a8a492f7054d480ccdd2be9796510d4327","eeba0a4d0845889a402dd225793d62f009d029c9"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["31741cf1390044e38a2ec3127cf302ba841bfd75","92212fd254551a0b1156aafc3a1a6ed1a43932ad","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1":["b470f36a9372c97283360b1304eacbde22df6c0d"],"9bb9a29a5e71a90295f175df8919802993142c9a":["8521d944f9dfb45692ec28235dbf116d47ef69ba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"ab548c8f96022b4780f7500a30b19b4f4a5feeb6":["b7e4ca6dc9612ff741d8713743e2bccfae5eadac","f592209545c71895260367152601e9200399776d"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"79700663e164dece87bed4adfd3e28bab6cb1385":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","299a2348fa24151d150182211b6208a38e5e3450","950882a2bd2a5f9dc16a154871584eaa643d882a"],"b7e4ca6dc9612ff741d8713743e2bccfae5eadac":["8f2203cb8ae87188877cfbf6ad170c5738a0aad5"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["8f4e2dcb5e470991d83a63c264bfe20880d3b3c1"],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":[],"299a2348fa24151d150182211b6208a38e5e3450":[],"790693f23f4e88a59fbb25e47cc25f6d493b03cb":["763da4a9605e47013078edc323b9d4b608f0f9e0"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["1f3b037cd083286b2af89f96e768f85dcd8072d6","5eb2511ababf862ea11e10761c70ee560cd84510"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"0567bdc5c86c94ced64201187cfcef2417d76dda":["b7605579001505896d48b07160075a5c8b8e128e","057a1793765d068ea9302f1a29e21734ee58d41e","a656b32c3aa151037a8c52e9b134acc3cbf482bc"],"bec68e7c41fed133827595747d853cad504e481e":["14654be3f7a82c9a3c52169e365baa55bfe64f66"],"505bff044e47a553f461b6f4484d1d08faf4ac85":["3c5705cb93fb3daa46c676cad08b916dd57bf1be"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"8521d944f9dfb45692ec28235dbf116d47ef69ba":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"14654be3f7a82c9a3c52169e365baa55bfe64f66":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"950882a2bd2a5f9dc16a154871584eaa643d882a":["5a207d19eac354d649c3f0e2cce070017c78125e","6bfe104fc023fadc9e709f8d17403d2cc61133fe","1e6acbaae7af722f17204ceccf0f7db5753eccf3","b470f36a9372c97283360b1304eacbde22df6c0d"],"2131047ecceac64b54ba70feec3d26bbd7e483d7":["9bb9a29a5e71a90295f175df8919802993142c9a"],"eeba0a4d0845889a402dd225793d62f009d029c9":["ab548c8f96022b4780f7500a30b19b4f4a5feeb6"],"a656b32c3aa151037a8c52e9b134acc3cbf482bc":[],"5faf65b6692f15cca0f87bf8666c87899afc619f":["505bff044e47a553f461b6f4484d1d08faf4ac85"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"8f2203cb8ae87188877cfbf6ad170c5738a0aad5":["b70042a8a492f7054d480ccdd2be9796510d4327","790693f23f4e88a59fbb25e47cc25f6d493b03cb","f592209545c71895260367152601e9200399776d"],"f592209545c71895260367152601e9200399776d":[],"c65d2864d936ccf22dc7ec14dd48b4dff7bacceb":["5f6bd27530a2846413fe2d00030493c0e2d3a072","2131047ecceac64b54ba70feec3d26bbd7e483d7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7605579001505896d48b07160075a5c8b8e128e","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b70042a8a492f7054d480ccdd2be9796510d4327","92212fd254551a0b1156aafc3a1a6ed1a43932ad","299a2348fa24151d150182211b6208a38e5e3450","5eb2511ababf862ea11e10761c70ee560cd84510","1e6acbaae7af722f17204ceccf0f7db5753eccf3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a656b32c3aa151037a8c52e9b134acc3cbf482bc","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}