{"path":"solr/core/src/java/org/apache/solr/search/facet/SlotAcc#collect(int,int,IntFunction[SlotContext]).mjava","commits":[{"id":"2c705a0d590cf911e7c942df49563ca2ea176e22","date":1526916174,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/SlotAcc#collect(int,int,IntFunction[SlotContext]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * All subclasses should override this method, for backcompatability the default implementaion\n   * delegates to the (deprecated) {@link #collect(int,int)}\n   *\n   * @param doc Single Segment docId (relative to the current {@link LeafReaderContext} to collect\n   * @param slot The slot number to collect this document in\n   * @param slotContext A callback that can be used for Accumulators that would like additional info \n   *        about the current slot -- the {@link IntFunction} is only garunteed to be valid for \n   *        the current slot, and the {@link SlotContext} returned is only valid for the duration \n   *        of the <code>collect()</code> call.\n   */\n  @Deprecated\n  public void collect(int doc, int slot, IntFunction<SlotContext> slotContext) throws IOException {\n    collect(doc,slot);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e87b986b4b9d1932b138902839843f855f4eb73d","date":1526944707,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/SlotAcc#collect(int,int,IntFunction[SlotContext]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/SlotAcc#collect(int,int,IntFunction[SlotContext]).mjava","sourceNew":"  /**\n   * All subclasses must override this method to collect documents.  This method is called by the \n   * default impl of {@link #collect(DocSet,int,IntFunction)} but it's also neccessary if this accumulator \n   * is used for sorting.\n   *\n   * @param doc Single Segment docId (relative to the current {@link LeafReaderContext} to collect\n   * @param slot The slot number to collect this document in\n   * @param slotContext A callback that can be used for Accumulators that would like additional info \n   *        about the current slot -- the {@link IntFunction} is only garunteed to be valid for \n   *        the current slot, and the {@link SlotContext} returned is only valid for the duration \n   *        of the <code>collect()</code> call.\n   */\n  public abstract void collect(int doc, int slot, IntFunction<SlotContext> slotContext) throws IOException;\n\n","sourceOld":"  /**\n   * All subclasses should override this method, for backcompatability the default implementaion\n   * delegates to the (deprecated) {@link #collect(int,int)}\n   *\n   * @param doc Single Segment docId (relative to the current {@link LeafReaderContext} to collect\n   * @param slot The slot number to collect this document in\n   * @param slotContext A callback that can be used for Accumulators that would like additional info \n   *        about the current slot -- the {@link IntFunction} is only garunteed to be valid for \n   *        the current slot, and the {@link SlotContext} returned is only valid for the duration \n   *        of the <code>collect()</code> call.\n   */\n  @Deprecated\n  public void collect(int doc, int slot, IntFunction<SlotContext> slotContext) throws IOException {\n    collect(doc,slot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56a9893014b284af4d1af451e6c02e7ffdf5b6e","date":1590065972,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/SlotAcc#collect(int,int,IntFunction[SlotContext]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/SlotAcc#collect(int,int,IntFunction[SlotContext]).mjava","sourceNew":"  /**\n   * All subclasses must override this method to collect documents.  This method is called by the\n   * default impl of {@link #collect(DocSet, int, IntFunction)} but it's also neccessary if this accumulator\n   * is used for sorting.\n   *\n   * @param doc         Single Segment docId (relative to the current {@link LeafReaderContext} to collect\n   * @param slot        The slot number to collect this document in\n   * @param slotContext A callback that can be used for Accumulators that would like additional info\n   *                    about the current slot -- the {@link IntFunction} is only garunteed to be valid for\n   *                    the current slot, and the {@link SlotContext} returned is only valid for the duration\n   *                    of the <code>collect()</code> call.\n   */\n  public abstract void collect(int doc, int slot, IntFunction<SlotContext> slotContext) throws IOException;\n\n","sourceOld":"  /**\n   * All subclasses must override this method to collect documents.  This method is called by the \n   * default impl of {@link #collect(DocSet,int,IntFunction)} but it's also neccessary if this accumulator \n   * is used for sorting.\n   *\n   * @param doc Single Segment docId (relative to the current {@link LeafReaderContext} to collect\n   * @param slot The slot number to collect this document in\n   * @param slotContext A callback that can be used for Accumulators that would like additional info \n   *        about the current slot -- the {@link IntFunction} is only garunteed to be valid for \n   *        the current slot, and the {@link SlotContext} returned is only valid for the duration \n   *        of the <code>collect()</code> call.\n   */\n  public abstract void collect(int doc, int slot, IntFunction<SlotContext> slotContext) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2c705a0d590cf911e7c942df49563ca2ea176e22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e87b986b4b9d1932b138902839843f855f4eb73d":["2c705a0d590cf911e7c942df49563ca2ea176e22"],"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["e87b986b4b9d1932b138902839843f855f4eb73d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"]},"commit2Childs":{"2c705a0d590cf911e7c942df49563ca2ea176e22":["e87b986b4b9d1932b138902839843f855f4eb73d"],"e87b986b4b9d1932b138902839843f855f4eb73d":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2c705a0d590cf911e7c942df49563ca2ea176e22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}