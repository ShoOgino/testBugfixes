{"path":"lucene/contrib/queries/src/test/org/apache/lucene/search/TestSlowCollationMethods#testSort().mjava","commits":[{"id":"3e492fb0f2bb0b4b47208286f9331ff55963c656","date":1298870150,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/TestSlowCollationMethods#testSort().mjava","pathOld":"/dev/null","sourceNew":"  public void testSort() throws Exception {\n    SortField sf = new SortField(\"field\", new FieldComparatorSource() {\n      @Override\n      public FieldComparator newComparator(String fieldname, int numHits, int sortPos, boolean reversed) throws IOException {\n        return new SlowCollatedStringComparator(numHits, fieldname, collator);\n      }\n    });\n    TopFieldDocs docs = searcher.search(new MatchAllDocsQuery(), null, numDocs, new Sort(sf));\n    String prev = \"\";\n    for (ScoreDoc doc : docs.scoreDocs) {\n      String value = reader.document(doc.doc).get(\"field\");\n      assertTrue(collator.compare(value, prev) >= 0);\n      prev = value;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/TestSlowCollationMethods#testSort().mjava","pathOld":"/dev/null","sourceNew":"  public void testSort() throws Exception {\n    SortField sf = new SortField(\"field\", new FieldComparatorSource() {\n      @Override\n      public FieldComparator newComparator(String fieldname, int numHits, int sortPos, boolean reversed) throws IOException {\n        return new SlowCollatedStringComparator(numHits, fieldname, collator);\n      }\n    });\n    TopFieldDocs docs = searcher.search(new MatchAllDocsQuery(), null, numDocs, new Sort(sf));\n    String prev = \"\";\n    for (ScoreDoc doc : docs.scoreDocs) {\n      String value = reader.document(doc.doc).get(\"field\");\n      assertTrue(collator.compare(value, prev) >= 0);\n      prev = value;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/TestSlowCollationMethods#testSort().mjava","pathOld":"/dev/null","sourceNew":"  public void testSort() throws Exception {\n    SortField sf = new SortField(\"field\", new FieldComparatorSource() {\n      @Override\n      public FieldComparator newComparator(String fieldname, int numHits, int sortPos, boolean reversed) throws IOException {\n        return new SlowCollatedStringComparator(numHits, fieldname, collator);\n      }\n    });\n    TopFieldDocs docs = searcher.search(new MatchAllDocsQuery(), null, numDocs, new Sort(sf));\n    String prev = \"\";\n    for (ScoreDoc doc : docs.scoreDocs) {\n      String value = reader.document(doc.doc).get(\"field\");\n      assertTrue(collator.compare(value, prev) >= 0);\n      prev = value;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1339b30c5298a1bbc583b1538dafe2dfe001c9c7","date":1309278655,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/TestSlowCollationMethods#testSort().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/TestSlowCollationMethods#testSort().mjava","sourceNew":"  public void testSort() throws Exception {\n    SortField sf = new SortField(\"field\", new FieldComparatorSource() {\n      @Override\n      public FieldComparator newComparator(String fieldname, int numHits, int sortPos, boolean reversed) throws IOException {\n        return new SlowCollatedStringComparator(numHits, fieldname, collator);\n      }\n    });\n    final Sort sort = new Sort(sf);\n    \n    final TopDocs docs1 = searcher.search(TermRangeQuery.newStringRange(\"field\", null, splitDoc, true, true), null, numDocs/(1+random.nextInt(4)), sort);\n    doCheckSorting(docs1);\n    \n    final TopDocs docs2 = searcher.search(TermRangeQuery.newStringRange(\"field\", splitDoc, null, true, true), null, numDocs/(1+random.nextInt(4)), sort);\n    doCheckSorting(docs2);\n    \n    final TopDocs docs = TopDocs.merge(sort, numDocs/(1+random.nextInt(4)), new TopDocs[]{docs1, docs2});\n    doCheckSorting(docs);\n  }\n\n","sourceOld":"  public void testSort() throws Exception {\n    SortField sf = new SortField(\"field\", new FieldComparatorSource() {\n      @Override\n      public FieldComparator newComparator(String fieldname, int numHits, int sortPos, boolean reversed) throws IOException {\n        return new SlowCollatedStringComparator(numHits, fieldname, collator);\n      }\n    });\n    TopFieldDocs docs = searcher.search(new MatchAllDocsQuery(), null, numDocs, new Sort(sf));\n    String prev = \"\";\n    for (ScoreDoc doc : docs.scoreDocs) {\n      String value = reader.document(doc.doc).get(\"field\");\n      assertTrue(collator.compare(value, prev) >= 0);\n      prev = value;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/TestSlowCollationMethods#testSort().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/TestSlowCollationMethods#testSort().mjava","sourceNew":"  public void testSort() throws Exception {\n    SortField sf = new SortField(\"field\", new FieldComparatorSource() {\n      @Override\n      public FieldComparator newComparator(String fieldname, int numHits, int sortPos, boolean reversed) throws IOException {\n        return new SlowCollatedStringComparator(numHits, fieldname, collator);\n      }\n    });\n    final Sort sort = new Sort(sf);\n    \n    final TopDocs docs1 = searcher.search(TermRangeQuery.newStringRange(\"field\", null, splitDoc, true, true), null, numDocs/(1+random.nextInt(4)), sort);\n    doCheckSorting(docs1);\n    \n    final TopDocs docs2 = searcher.search(TermRangeQuery.newStringRange(\"field\", splitDoc, null, true, true), null, numDocs/(1+random.nextInt(4)), sort);\n    doCheckSorting(docs2);\n    \n    final TopDocs docs = TopDocs.merge(sort, numDocs/(1+random.nextInt(4)), new TopDocs[]{docs1, docs2});\n    doCheckSorting(docs);\n  }\n\n","sourceOld":"  public void testSort() throws Exception {\n    SortField sf = new SortField(\"field\", new FieldComparatorSource() {\n      @Override\n      public FieldComparator newComparator(String fieldname, int numHits, int sortPos, boolean reversed) throws IOException {\n        return new SlowCollatedStringComparator(numHits, fieldname, collator);\n      }\n    });\n    TopFieldDocs docs = searcher.search(new MatchAllDocsQuery(), null, numDocs, new Sort(sf));\n    String prev = \"\";\n    for (ScoreDoc doc : docs.scoreDocs) {\n      String value = reader.document(doc.doc).get(\"field\");\n      assertTrue(collator.compare(value, prev) >= 0);\n      prev = value;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/TestSlowCollationMethods#testSort().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/TestSlowCollationMethods#testSort().mjava","sourceNew":"  public void testSort() throws Exception {\n    SortField sf = new SortField(\"field\", new FieldComparatorSource() {\n      @Override\n      public FieldComparator newComparator(String fieldname, int numHits, int sortPos, boolean reversed) throws IOException {\n        return new SlowCollatedStringComparator(numHits, fieldname, collator);\n      }\n    });\n    final Sort sort = new Sort(sf);\n    \n    final TopDocs docs1 = searcher.search(TermRangeQuery.newStringRange(\"field\", null, splitDoc, true, true), null, numDocs/(1+random.nextInt(4)), sort);\n    doCheckSorting(docs1);\n    \n    final TopDocs docs2 = searcher.search(TermRangeQuery.newStringRange(\"field\", splitDoc, null, true, true), null, numDocs/(1+random.nextInt(4)), sort);\n    doCheckSorting(docs2);\n    \n    final TopDocs docs = TopDocs.merge(sort, numDocs/(1+random.nextInt(4)), new TopDocs[]{docs1, docs2});\n    doCheckSorting(docs);\n  }\n\n","sourceOld":"  public void testSort() throws Exception {\n    SortField sf = new SortField(\"field\", new FieldComparatorSource() {\n      @Override\n      public FieldComparator newComparator(String fieldname, int numHits, int sortPos, boolean reversed) throws IOException {\n        return new SlowCollatedStringComparator(numHits, fieldname, collator);\n      }\n    });\n    TopFieldDocs docs = searcher.search(new MatchAllDocsQuery(), null, numDocs, new Sort(sf));\n    String prev = \"\";\n    for (ScoreDoc doc : docs.scoreDocs) {\n      String value = reader.document(doc.doc).get(\"field\");\n      assertTrue(collator.compare(value, prev) >= 0);\n      prev = value;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9fdc0777b84633cc8cfa8995ff5b0d411e4515b","date":1313816278,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowCollationMethods#testSort().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/TestSlowCollationMethods#testSort().mjava","sourceNew":"  public void testSort() throws Exception {\n    SortField sf = new SortField(\"field\", new FieldComparatorSource() {\n      @Override\n      public FieldComparator newComparator(String fieldname, int numHits, int sortPos, boolean reversed) throws IOException {\n        return new SlowCollatedStringComparator(numHits, fieldname, collator);\n      }\n    });\n    final Sort sort = new Sort(sf);\n    \n    final TopDocs docs1 = searcher.search(TermRangeQuery.newStringRange(\"field\", null, splitDoc, true, true), null, numDocs/(1+random.nextInt(4)), sort);\n    doCheckSorting(docs1);\n    \n    final TopDocs docs2 = searcher.search(TermRangeQuery.newStringRange(\"field\", splitDoc, null, true, true), null, numDocs/(1+random.nextInt(4)), sort);\n    doCheckSorting(docs2);\n    \n    final TopDocs docs = TopDocs.merge(sort, numDocs/(1+random.nextInt(4)), new TopDocs[]{docs1, docs2});\n    doCheckSorting(docs);\n  }\n\n","sourceOld":"  public void testSort() throws Exception {\n    SortField sf = new SortField(\"field\", new FieldComparatorSource() {\n      @Override\n      public FieldComparator newComparator(String fieldname, int numHits, int sortPos, boolean reversed) throws IOException {\n        return new SlowCollatedStringComparator(numHits, fieldname, collator);\n      }\n    });\n    final Sort sort = new Sort(sf);\n    \n    final TopDocs docs1 = searcher.search(TermRangeQuery.newStringRange(\"field\", null, splitDoc, true, true), null, numDocs/(1+random.nextInt(4)), sort);\n    doCheckSorting(docs1);\n    \n    final TopDocs docs2 = searcher.search(TermRangeQuery.newStringRange(\"field\", splitDoc, null, true, true), null, numDocs/(1+random.nextInt(4)), sort);\n    doCheckSorting(docs2);\n    \n    final TopDocs docs = TopDocs.merge(sort, numDocs/(1+random.nextInt(4)), new TopDocs[]{docs1, docs2});\n    doCheckSorting(docs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f9fdc0777b84633cc8cfa8995ff5b0d411e4515b":["1339b30c5298a1bbc583b1538dafe2dfe001c9c7"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"1339b30c5298a1bbc583b1538dafe2dfe001c9c7":["3e492fb0f2bb0b4b47208286f9331ff55963c656"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2553b00f699380c64959ccb27991289aae87be2e":["3e492fb0f2bb0b4b47208286f9331ff55963c656","1339b30c5298a1bbc583b1538dafe2dfe001c9c7"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["3e492fb0f2bb0b4b47208286f9331ff55963c656","1339b30c5298a1bbc583b1538dafe2dfe001c9c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f9fdc0777b84633cc8cfa8995ff5b0d411e4515b"]},"commit2Childs":{"f9fdc0777b84633cc8cfa8995ff5b0d411e4515b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"1339b30c5298a1bbc583b1538dafe2dfe001c9c7":["f9fdc0777b84633cc8cfa8995ff5b0d411e4515b","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","1339b30c5298a1bbc583b1538dafe2dfe001c9c7","d619839baa8ce5503e496b94a9e42ad6f079293f","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"2553b00f699380c64959ccb27991289aae87be2e":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}