{"path":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesTermsQuery#testApproximation().mjava","commits":[{"id":"9fb0efe75e5c6021561f115dfe334b74786364ba","date":1434366074,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesTermsQuery#testApproximation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesTermsQuery#testApproximation().mjava","sourceNew":"  public void testApproximation() throws IOException {\n    final int iters = atLeast(2);\n    for (int iter = 0; iter < iters; ++iter) {\n      final List<Term> allTerms = new ArrayList<>();\n      final int numTerms = TestUtil.nextInt(random(), 1, 1 << TestUtil.nextInt(random(), 1, 10));\n      for (int i = 0; i < numTerms; ++i) {\n        final String value = TestUtil.randomAnalysisString(random(), 10, true);\n        allTerms.add(new Term(\"f\", value));\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final Term term = allTerms.get(random().nextInt(allTerms.size()));\n        doc.add(new StringField(term.field(), term.text(), Store.NO));\n        doc.add(new SortedDocValuesField(term.field(), new BytesRef(term.text())));\n        iw.addDocument(doc);\n      }\n      if (numTerms > 1 && random().nextBoolean()) {\n        iw.deleteDocuments(new TermQuery(allTerms.get(0)));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader);\n      iw.close();\n\n      if (reader.numDocs() == 0) {\n        // may occasionally happen if all documents got the same term\n        IOUtils.close(reader, dir);\n        continue;\n      }\n\n      for (int i = 0; i < 100; ++i) {\n        final float boost = random().nextFloat() * 10;\n        final int numQueryTerms = TestUtil.nextInt(random(), 1, 1 << TestUtil.nextInt(random(), 1, 8));\n        List<Term> queryTerms = new ArrayList<>();\n        for (int j = 0; j < numQueryTerms; ++j) {\n          queryTerms.add(allTerms.get(random().nextInt(allTerms.size())));\n        }\n        final BooleanQuery bq = new BooleanQuery();\n        for (Term term : queryTerms) {\n          bq.add(new TermQuery(term), Occur.SHOULD);\n        }\n        Query q1 = new ConstantScoreQuery(bq);\n        q1.setBoost(boost);\n        List<String> bytesTerms = new ArrayList<>();\n        for (Term term : queryTerms) {\n          bytesTerms.add(term.text());\n        }\n        final Query q2 = new DocValuesTermsQuery(\"f\", bytesTerms.toArray(new String[0]));\n        q2.setBoost(boost);\n\n        BooleanQuery bq1 = new BooleanQuery();\n        bq1.add(q1, Occur.MUST);\n        bq1.add(new TermQuery(allTerms.get(0)), Occur.FILTER);\n\n        BooleanQuery bq2 = new BooleanQuery();\n        bq2.add(q2, Occur.MUST);\n        bq2.add(new TermQuery(allTerms.get(0)), Occur.FILTER);\n\n        assertSameMatches(searcher, bq1, bq2, true);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testApproximation() throws IOException {\n    final int iters = atLeast(2);\n    for (int iter = 0; iter < iters; ++iter) {\n      final List<Term> allTerms = new ArrayList<>();\n      final int numTerms = TestUtil.nextInt(random(), 1, 1 << TestUtil.nextInt(random(), 1, 10));\n      for (int i = 0; i < numTerms; ++i) {\n        final String value = TestUtil.randomAnalysisString(random(), 10, true);\n        allTerms.add(new Term(\"f\", value));\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final Term term = allTerms.get(random().nextInt(allTerms.size()));\n        doc.add(new StringField(term.field(), term.text(), Store.NO));\n        doc.add(new SortedDocValuesField(term.field(), new BytesRef(term.text())));\n        iw.addDocument(doc);\n      }\n      if (numTerms > 1 && random().nextBoolean()) {\n        iw.deleteDocuments(new TermQuery(allTerms.get(0)));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader);\n      iw.close();\n\n      if (reader.numDocs() == 0) {\n        // may occasionally happen if all documents got the same term\n        IOUtils.close(reader, dir);\n        continue;\n      }\n\n      for (int i = 0; i < 100; ++i) {\n        final float boost = random().nextFloat() * 10;\n        final int numQueryTerms = TestUtil.nextInt(random(), 1, 1 << TestUtil.nextInt(random(), 1, 8));\n        List<Term> queryTerms = new ArrayList<>();\n        for (int j = 0; j < numQueryTerms; ++j) {\n          queryTerms.add(allTerms.get(random().nextInt(allTerms.size())));\n        }\n        final BooleanQuery bq = new BooleanQuery();\n        for (Term term : queryTerms) {\n          bq.add(new TermQuery(term), Occur.SHOULD);\n        }\n        Query q1 = new ConstantScoreQuery(bq);\n        q1.setBoost(boost);\n        List<String> bytesTerms = new ArrayList<>();\n        for (Term term : queryTerms) {\n          bytesTerms.add(term.text());\n        }\n        final Query q2 = new DocValuesTermsQuery(\"f\", bytesTerms.toArray(new String[0]));\n        q2.setBoost(boost);\n\n        BooleanQuery bq1 = new BooleanQuery();\n        bq1.add(q1, Occur.MUST);\n        bq1.add(new TermQuery(allTerms.get(0)), Occur.FILTER);\n\n        BooleanQuery bq2 = new BooleanQuery();\n        bq2.add(q2, Occur.MUST);\n        bq2.add(new TermQuery(allTerms.get(0)), Occur.FILTER);\n\n        assertSameMatches(searcher, bq1, bq2, true);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesTermsQuery#testApproximation().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesTermsQuery#testApproximation().mjava","sourceNew":"  public void testApproximation() throws IOException {\n    final int iters = atLeast(2);\n    for (int iter = 0; iter < iters; ++iter) {\n      final List<Term> allTerms = new ArrayList<>();\n      final int numTerms = TestUtil.nextInt(random(), 1, 1 << TestUtil.nextInt(random(), 1, 10));\n      for (int i = 0; i < numTerms; ++i) {\n        final String value = TestUtil.randomAnalysisString(random(), 10, true);\n        allTerms.add(new Term(\"f\", value));\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final Term term = allTerms.get(random().nextInt(allTerms.size()));\n        doc.add(new StringField(term.field(), term.text(), Store.NO));\n        doc.add(new SortedDocValuesField(term.field(), new BytesRef(term.text())));\n        iw.addDocument(doc);\n      }\n      if (numTerms > 1 && random().nextBoolean()) {\n        iw.deleteDocuments(new TermQuery(allTerms.get(0)));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader);\n      iw.close();\n\n      if (reader.numDocs() == 0) {\n        // may occasionally happen if all documents got the same term\n        IOUtils.close(reader, dir);\n        continue;\n      }\n\n      for (int i = 0; i < 100; ++i) {\n        final float boost = random().nextFloat() * 10;\n        final int numQueryTerms = TestUtil.nextInt(random(), 1, 1 << TestUtil.nextInt(random(), 1, 8));\n        List<Term> queryTerms = new ArrayList<>();\n        for (int j = 0; j < numQueryTerms; ++j) {\n          queryTerms.add(allTerms.get(random().nextInt(allTerms.size())));\n        }\n        final BooleanQuery.Builder bq = new BooleanQuery.Builder();\n        for (Term term : queryTerms) {\n          bq.add(new TermQuery(term), Occur.SHOULD);\n        }\n        Query q1 = new ConstantScoreQuery(bq.build());\n        q1.setBoost(boost);\n        List<String> bytesTerms = new ArrayList<>();\n        for (Term term : queryTerms) {\n          bytesTerms.add(term.text());\n        }\n        final Query q2 = new DocValuesTermsQuery(\"f\", bytesTerms.toArray(new String[0]));\n        q2.setBoost(boost);\n\n        BooleanQuery.Builder bq1 = new BooleanQuery.Builder();\n        bq1.add(q1, Occur.MUST);\n        bq1.add(new TermQuery(allTerms.get(0)), Occur.FILTER);\n\n        BooleanQuery.Builder bq2 = new BooleanQuery.Builder();\n        bq2.add(q2, Occur.MUST);\n        bq2.add(new TermQuery(allTerms.get(0)), Occur.FILTER);\n\n        assertSameMatches(searcher, bq1.build(), bq2.build(), true);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testApproximation() throws IOException {\n    final int iters = atLeast(2);\n    for (int iter = 0; iter < iters; ++iter) {\n      final List<Term> allTerms = new ArrayList<>();\n      final int numTerms = TestUtil.nextInt(random(), 1, 1 << TestUtil.nextInt(random(), 1, 10));\n      for (int i = 0; i < numTerms; ++i) {\n        final String value = TestUtil.randomAnalysisString(random(), 10, true);\n        allTerms.add(new Term(\"f\", value));\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final Term term = allTerms.get(random().nextInt(allTerms.size()));\n        doc.add(new StringField(term.field(), term.text(), Store.NO));\n        doc.add(new SortedDocValuesField(term.field(), new BytesRef(term.text())));\n        iw.addDocument(doc);\n      }\n      if (numTerms > 1 && random().nextBoolean()) {\n        iw.deleteDocuments(new TermQuery(allTerms.get(0)));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader);\n      iw.close();\n\n      if (reader.numDocs() == 0) {\n        // may occasionally happen if all documents got the same term\n        IOUtils.close(reader, dir);\n        continue;\n      }\n\n      for (int i = 0; i < 100; ++i) {\n        final float boost = random().nextFloat() * 10;\n        final int numQueryTerms = TestUtil.nextInt(random(), 1, 1 << TestUtil.nextInt(random(), 1, 8));\n        List<Term> queryTerms = new ArrayList<>();\n        for (int j = 0; j < numQueryTerms; ++j) {\n          queryTerms.add(allTerms.get(random().nextInt(allTerms.size())));\n        }\n        final BooleanQuery bq = new BooleanQuery();\n        for (Term term : queryTerms) {\n          bq.add(new TermQuery(term), Occur.SHOULD);\n        }\n        Query q1 = new ConstantScoreQuery(bq);\n        q1.setBoost(boost);\n        List<String> bytesTerms = new ArrayList<>();\n        for (Term term : queryTerms) {\n          bytesTerms.add(term.text());\n        }\n        final Query q2 = new DocValuesTermsQuery(\"f\", bytesTerms.toArray(new String[0]));\n        q2.setBoost(boost);\n\n        BooleanQuery bq1 = new BooleanQuery();\n        bq1.add(q1, Occur.MUST);\n        bq1.add(new TermQuery(allTerms.get(0)), Occur.FILTER);\n\n        BooleanQuery bq2 = new BooleanQuery();\n        bq2.add(q2, Occur.MUST);\n        bq2.add(new TermQuery(allTerms.get(0)), Occur.FILTER);\n\n        assertSameMatches(searcher, bq1, bq2, true);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesTermsQuery#testApproximation().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesTermsQuery#testApproximation().mjava","sourceNew":"  public void testApproximation() throws IOException {\n    final int iters = atLeast(2);\n    for (int iter = 0; iter < iters; ++iter) {\n      final List<Term> allTerms = new ArrayList<>();\n      final int numTerms = TestUtil.nextInt(random(), 1, 1 << TestUtil.nextInt(random(), 1, 10));\n      for (int i = 0; i < numTerms; ++i) {\n        final String value = TestUtil.randomAnalysisString(random(), 10, true);\n        allTerms.add(new Term(\"f\", value));\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final Term term = allTerms.get(random().nextInt(allTerms.size()));\n        doc.add(new StringField(term.field(), term.text(), Store.NO));\n        doc.add(new SortedDocValuesField(term.field(), new BytesRef(term.text())));\n        iw.addDocument(doc);\n      }\n      if (numTerms > 1 && random().nextBoolean()) {\n        iw.deleteDocuments(new TermQuery(allTerms.get(0)));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader);\n      iw.close();\n\n      if (reader.numDocs() == 0) {\n        // may occasionally happen if all documents got the same term\n        IOUtils.close(reader, dir);\n        continue;\n      }\n\n      for (int i = 0; i < 100; ++i) {\n        final float boost = random().nextFloat() * 10;\n        final int numQueryTerms = TestUtil.nextInt(random(), 1, 1 << TestUtil.nextInt(random(), 1, 8));\n        List<Term> queryTerms = new ArrayList<>();\n        for (int j = 0; j < numQueryTerms; ++j) {\n          queryTerms.add(allTerms.get(random().nextInt(allTerms.size())));\n        }\n        final BooleanQuery.Builder bq = new BooleanQuery.Builder();\n        for (Term term : queryTerms) {\n          bq.add(new TermQuery(term), Occur.SHOULD);\n        }\n        Query q1 = new BoostQuery(new ConstantScoreQuery(bq.build()), boost);\n        List<String> bytesTerms = new ArrayList<>();\n        for (Term term : queryTerms) {\n          bytesTerms.add(term.text());\n        }\n        final Query q2 = new BoostQuery(new DocValuesTermsQuery(\"f\", bytesTerms.toArray(new String[0])), boost);\n\n        BooleanQuery.Builder bq1 = new BooleanQuery.Builder();\n        bq1.add(q1, Occur.MUST);\n        bq1.add(new TermQuery(allTerms.get(0)), Occur.FILTER);\n\n        BooleanQuery.Builder bq2 = new BooleanQuery.Builder();\n        bq2.add(q2, Occur.MUST);\n        bq2.add(new TermQuery(allTerms.get(0)), Occur.FILTER);\n\n        assertSameMatches(searcher, bq1.build(), bq2.build(), true);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testApproximation() throws IOException {\n    final int iters = atLeast(2);\n    for (int iter = 0; iter < iters; ++iter) {\n      final List<Term> allTerms = new ArrayList<>();\n      final int numTerms = TestUtil.nextInt(random(), 1, 1 << TestUtil.nextInt(random(), 1, 10));\n      for (int i = 0; i < numTerms; ++i) {\n        final String value = TestUtil.randomAnalysisString(random(), 10, true);\n        allTerms.add(new Term(\"f\", value));\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final Term term = allTerms.get(random().nextInt(allTerms.size()));\n        doc.add(new StringField(term.field(), term.text(), Store.NO));\n        doc.add(new SortedDocValuesField(term.field(), new BytesRef(term.text())));\n        iw.addDocument(doc);\n      }\n      if (numTerms > 1 && random().nextBoolean()) {\n        iw.deleteDocuments(new TermQuery(allTerms.get(0)));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader);\n      iw.close();\n\n      if (reader.numDocs() == 0) {\n        // may occasionally happen if all documents got the same term\n        IOUtils.close(reader, dir);\n        continue;\n      }\n\n      for (int i = 0; i < 100; ++i) {\n        final float boost = random().nextFloat() * 10;\n        final int numQueryTerms = TestUtil.nextInt(random(), 1, 1 << TestUtil.nextInt(random(), 1, 8));\n        List<Term> queryTerms = new ArrayList<>();\n        for (int j = 0; j < numQueryTerms; ++j) {\n          queryTerms.add(allTerms.get(random().nextInt(allTerms.size())));\n        }\n        final BooleanQuery.Builder bq = new BooleanQuery.Builder();\n        for (Term term : queryTerms) {\n          bq.add(new TermQuery(term), Occur.SHOULD);\n        }\n        Query q1 = new ConstantScoreQuery(bq.build());\n        q1.setBoost(boost);\n        List<String> bytesTerms = new ArrayList<>();\n        for (Term term : queryTerms) {\n          bytesTerms.add(term.text());\n        }\n        final Query q2 = new DocValuesTermsQuery(\"f\", bytesTerms.toArray(new String[0]));\n        q2.setBoost(boost);\n\n        BooleanQuery.Builder bq1 = new BooleanQuery.Builder();\n        bq1.add(q1, Occur.MUST);\n        bq1.add(new TermQuery(allTerms.get(0)), Occur.FILTER);\n\n        BooleanQuery.Builder bq2 = new BooleanQuery.Builder();\n        bq2.add(q2, Occur.MUST);\n        bq2.add(new TermQuery(allTerms.get(0)), Occur.FILTER);\n\n        assertSameMatches(searcher, bq1.build(), bq2.build(), true);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["9fb0efe75e5c6021561f115dfe334b74786364ba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"9fb0efe75e5c6021561f115dfe334b74786364ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2dfdf766e55e943d942055d7de53c7ad6bc45283"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fb0efe75e5c6021561f115dfe334b74786364ba"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9fb0efe75e5c6021561f115dfe334b74786364ba":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}