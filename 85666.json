{"path":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedExactQuery(String,String[]).mjava","commits":[{"id":"46dc9ac8b3e748407baaef82453138ff3974480c","date":1484789241,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedExactQuery(String,String[]).mjava","pathOld":"/dev/null","sourceNew":"  private void testPointFieldMultiValuedExactQuery(String fieldName, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    assertU(commit());\n    for (int i = 0; i < 20; i++) {\n      assertQ(req(\"q\", fieldName + \":\" + numbers[i].replace(\"-\", \"\\\\-\")), \n          \"//*[@numFound='1']\");\n    }\n    \n    for (int i = 0; i < 20; i++) {\n      assertQ(req(\"q\", fieldName + \":\" + numbers[i].replace(\"-\", \"\\\\-\") + \" OR \" + fieldName + \":\" + numbers[(i+1)%10].replace(\"-\", \"\\\\-\")), \"//*[@numFound='2']\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0ff61c2e5ce6b1f26a271d9d454206db1917d628"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedExactQuery(String,String[]).mjava","pathOld":"/dev/null","sourceNew":"  private void testPointFieldMultiValuedExactQuery(String fieldName, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    assertU(commit());\n    for (int i = 0; i < 20; i++) {\n      assertQ(req(\"q\", fieldName + \":\" + numbers[i].replace(\"-\", \"\\\\-\")), \n          \"//*[@numFound='1']\");\n    }\n    \n    for (int i = 0; i < 20; i++) {\n      assertQ(req(\"q\", fieldName + \":\" + numbers[i].replace(\"-\", \"\\\\-\") + \" OR \" + fieldName + \":\" + numbers[(i+1)%10].replace(\"-\", \"\\\\-\")), \"//*[@numFound='2']\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daa9f76a48e97bb2d40fc67ecdaad33d166d596e","date":1488856307,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedExactQuery(String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedExactQuery(String,String[]).mjava","sourceNew":"  private void testPointFieldMultiValuedExactQuery(String fieldName, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    assertU(commit());\n    for (int i = 0; i < 20; i++) {\n      if (h.getCore().getLatestSchema().getField(fieldName).getType() instanceof DatePointField) {\n        assertQ(req(\"q\", fieldName + \":\\\"\" + numbers[i] + \"\\\"\"),\n            \"//*[@numFound='1']\");\n      } else {\n        assertQ(req(\"q\", fieldName + \":\" + numbers[i].replace(\"-\", \"\\\\-\")),\n            \"//*[@numFound='1']\");\n      }\n    }\n    \n    for (int i = 0; i < 20; i++) {\n      if (h.getCore().getLatestSchema().getField(fieldName).getType() instanceof DatePointField) {\n        assertQ(req(\"q\", fieldName + \":\\\"\" + numbers[i] + \"\\\"\" + \" OR \" + fieldName + \":\\\"\" + numbers[(i+1)%10]+\"\\\"\"), \"//*[@numFound='2']\");\n      } else {\n        assertQ(req(\"q\", fieldName + \":\" + numbers[i].replace(\"-\", \"\\\\-\") + \" OR \" + fieldName + \":\" + numbers[(i+1)%10].replace(\"-\", \"\\\\-\")), \"//*[@numFound='2']\");\n      }\n    }\n  }\n\n","sourceOld":"  private void testPointFieldMultiValuedExactQuery(String fieldName, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    assertU(commit());\n    for (int i = 0; i < 20; i++) {\n      assertQ(req(\"q\", fieldName + \":\" + numbers[i].replace(\"-\", \"\\\\-\")), \n          \"//*[@numFound='1']\");\n    }\n    \n    for (int i = 0; i < 20; i++) {\n      assertQ(req(\"q\", fieldName + \":\" + numbers[i].replace(\"-\", \"\\\\-\") + \" OR \" + fieldName + \":\" + numbers[(i+1)%10].replace(\"-\", \"\\\\-\")), \"//*[@numFound='2']\");\n    }\n  }\n\n","bugFix":null,"bugIntro":["0ff61c2e5ce6b1f26a271d9d454206db1917d628"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0ff61c2e5ce6b1f26a271d9d454206db1917d628","date":1491505661,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedExactQuery(String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedExactQuery(String,String[]).mjava","sourceNew":"  private void testPointFieldMultiValuedExactQuery(final String fieldName, final String[] numbers) throws Exception {\n    testPointFieldMultiValuedExactQuery(fieldName, numbers, true);\n  }\n\n","sourceOld":"  private void testPointFieldMultiValuedExactQuery(String fieldName, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    assertU(commit());\n    for (int i = 0; i < 20; i++) {\n      if (h.getCore().getLatestSchema().getField(fieldName).getType() instanceof DatePointField) {\n        assertQ(req(\"q\", fieldName + \":\\\"\" + numbers[i] + \"\\\"\"),\n            \"//*[@numFound='1']\");\n      } else {\n        assertQ(req(\"q\", fieldName + \":\" + numbers[i].replace(\"-\", \"\\\\-\")),\n            \"//*[@numFound='1']\");\n      }\n    }\n    \n    for (int i = 0; i < 20; i++) {\n      if (h.getCore().getLatestSchema().getField(fieldName).getType() instanceof DatePointField) {\n        assertQ(req(\"q\", fieldName + \":\\\"\" + numbers[i] + \"\\\"\" + \" OR \" + fieldName + \":\\\"\" + numbers[(i+1)%10]+\"\\\"\"), \"//*[@numFound='2']\");\n      } else {\n        assertQ(req(\"q\", fieldName + \":\" + numbers[i].replace(\"-\", \"\\\\-\") + \" OR \" + fieldName + \":\" + numbers[(i+1)%10].replace(\"-\", \"\\\\-\")), \"//*[@numFound='2']\");\n      }\n    }\n  }\n\n","bugFix":["46dc9ac8b3e748407baaef82453138ff3974480c","daa9f76a48e97bb2d40fc67ecdaad33d166d596e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedExactQuery(String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedExactQuery(String,String[]).mjava","sourceNew":"  private void testPointFieldMultiValuedExactQuery(final String fieldName, final String[] numbers) throws Exception {\n    testPointFieldMultiValuedExactQuery(fieldName, numbers, true);\n  }\n\n","sourceOld":"  private void testPointFieldMultiValuedExactQuery(String fieldName, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    assertU(commit());\n    for (int i = 0; i < 20; i++) {\n      if (h.getCore().getLatestSchema().getField(fieldName).getType() instanceof DatePointField) {\n        assertQ(req(\"q\", fieldName + \":\\\"\" + numbers[i] + \"\\\"\"),\n            \"//*[@numFound='1']\");\n      } else {\n        assertQ(req(\"q\", fieldName + \":\" + numbers[i].replace(\"-\", \"\\\\-\")),\n            \"//*[@numFound='1']\");\n      }\n    }\n    \n    for (int i = 0; i < 20; i++) {\n      if (h.getCore().getLatestSchema().getField(fieldName).getType() instanceof DatePointField) {\n        assertQ(req(\"q\", fieldName + \":\\\"\" + numbers[i] + \"\\\"\" + \" OR \" + fieldName + \":\\\"\" + numbers[(i+1)%10]+\"\\\"\"), \"//*[@numFound='2']\");\n      } else {\n        assertQ(req(\"q\", fieldName + \":\" + numbers[i].replace(\"-\", \"\\\\-\") + \" OR \" + fieldName + \":\" + numbers[(i+1)%10].replace(\"-\", \"\\\\-\")), \"//*[@numFound='2']\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e844d4f9ba6804f10747d7e51e83a9a8868c94","date":1500054875,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedExactQuery(String,String[]).mjava","sourceNew":null,"sourceOld":"  private void testPointFieldMultiValuedExactQuery(final String fieldName, final String[] numbers) throws Exception {\n    testPointFieldMultiValuedExactQuery(fieldName, numbers, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aaf90fc29510e72665ac7934f34c3d1c25efad64","date":1500354819,"type":4,"author":"Cao Manh Dat","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedExactQuery(String,String[]).mjava","sourceNew":null,"sourceOld":"  private void testPointFieldMultiValuedExactQuery(final String fieldName, final String[] numbers) throws Exception {\n    testPointFieldMultiValuedExactQuery(fieldName, numbers, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["daa9f76a48e97bb2d40fc67ecdaad33d166d596e"],"daa9f76a48e97bb2d40fc67ecdaad33d166d596e":["46dc9ac8b3e748407baaef82453138ff3974480c"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","17e844d4f9ba6804f10747d7e51e83a9a8868c94"],"46dc9ac8b3e748407baaef82453138ff3974480c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e844d4f9ba6804f10747d7e51e83a9a8868c94":["0ff61c2e5ce6b1f26a271d9d454206db1917d628"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","46dc9ac8b3e748407baaef82453138ff3974480c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e844d4f9ba6804f10747d7e51e83a9a8868c94"],"0ff61c2e5ce6b1f26a271d9d454206db1917d628":["daa9f76a48e97bb2d40fc67ecdaad33d166d596e"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["aaf90fc29510e72665ac7934f34c3d1c25efad64"],"daa9f76a48e97bb2d40fc67ecdaad33d166d596e":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","0ff61c2e5ce6b1f26a271d9d454206db1917d628"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":[],"46dc9ac8b3e748407baaef82453138ff3974480c":["daa9f76a48e97bb2d40fc67ecdaad33d166d596e","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["46dc9ac8b3e748407baaef82453138ff3974480c","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"17e844d4f9ba6804f10747d7e51e83a9a8868c94":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"0ff61c2e5ce6b1f26a271d9d454206db1917d628":["17e844d4f9ba6804f10747d7e51e83a9a8868c94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aaf90fc29510e72665ac7934f34c3d1c25efad64","90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}