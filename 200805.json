{"path":"solr/core/src/test/org/apache/solr/handler/component/TestDistributedStatsComponentCardinality#buildCardinalityQ(int,int,int,int).mjava","commits":[{"id":"4a4e2c829188fb99886a64558664d79c9ac0fdf1","date":1431021538,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TestDistributedStatsComponentCardinality#buildCardinalityQ(int,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Helper utility for building up a set of query params.  \n   *\n   * The main query is a simple range query against the id field (using lowId TO highId). \n   * 2 stats.field params are generated for every field in {@link #STAT_FIELDS} --\n   * both with and w/o a prehashed_l suffix -- using the specified log2m and regwidth.\n   * \n   * The response keys will be the full field names\n   */\n  private static SolrParams buildCardinalityQ(final int lowId, \n                                              final int highId, \n                                              final int log2m, \n                                              final int regwidth) {\n    ModifiableSolrParams p = params(\"q\", \"id:[\"+lowId+\" TO \"+highId+\"]\", \n                                    \"rows\", \"0\", \"stats\", \"true\");\n    final String prefix = \"{!cardinality=true hllLog2m=\"+log2m+\" hllRegwidth=\"+regwidth;\n    for (String f : STAT_FIELDS) {\n      p.add(\"stats.field\", prefix+\"}\"+f);\n      p.add(\"stats.field\", prefix+\" hllPreHashed=true}\"+f+\"_prehashed_l\");\n    }\n    return p;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71f63026529f3c1f03cfdd664910873ab2369ae","date":1497543264,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TestDistributedStatsComponentCardinality#buildCardinalityQ(int,int,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/TestDistributedStatsComponentCardinality#buildCardinalityQ(int,int,int,int).mjava","sourceNew":"  /** \n   * Helper utility for building up a set of query params.  \n   *\n   * The main query is a simple range query against the id field (using lowId TO highId). \n   * 2 stats.field params are generated for every field in {@link #STAT_FIELDS} --\n   * both with and w/o a prehashed_l suffix -- using the specified log2m and regwidth.\n   * \n   * The response keys will be the full field names\n   */\n  private static SolrParams buildCardinalityQ(final int lowId, \n                                              final int highId, \n                                              final int log2m, \n                                              final int regwidth) {\n    ModifiableSolrParams p = params(\"q\", \"id_i1:[\"+lowId+\" TO \"+highId+\"]\", \n                                    \"rows\", \"0\", \"stats\", \"true\");\n    final String prefix = \"{!cardinality=true hllLog2m=\"+log2m+\" hllRegwidth=\"+regwidth;\n    for (String f : STAT_FIELDS) {\n      p.add(\"stats.field\", prefix+\"}\"+f);\n      p.add(\"stats.field\", prefix+\" hllPreHashed=true}\"+f+\"_prehashed_l\");\n    }\n    return p;\n  }\n\n","sourceOld":"  /** \n   * Helper utility for building up a set of query params.  \n   *\n   * The main query is a simple range query against the id field (using lowId TO highId). \n   * 2 stats.field params are generated for every field in {@link #STAT_FIELDS} --\n   * both with and w/o a prehashed_l suffix -- using the specified log2m and regwidth.\n   * \n   * The response keys will be the full field names\n   */\n  private static SolrParams buildCardinalityQ(final int lowId, \n                                              final int highId, \n                                              final int log2m, \n                                              final int regwidth) {\n    ModifiableSolrParams p = params(\"q\", \"id:[\"+lowId+\" TO \"+highId+\"]\", \n                                    \"rows\", \"0\", \"stats\", \"true\");\n    final String prefix = \"{!cardinality=true hllLog2m=\"+log2m+\" hllRegwidth=\"+regwidth;\n    for (String f : STAT_FIELDS) {\n      p.add(\"stats.field\", prefix+\"}\"+f);\n      p.add(\"stats.field\", prefix+\" hllPreHashed=true}\"+f+\"_prehashed_l\");\n    }\n    return p;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TestDistributedStatsComponentCardinality#buildCardinalityQ(int,int,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/TestDistributedStatsComponentCardinality#buildCardinalityQ(int,int,int,int).mjava","sourceNew":"  /** \n   * Helper utility for building up a set of query params.  \n   *\n   * The main query is a simple range query against the id field (using lowId TO highId). \n   * 2 stats.field params are generated for every field in {@link #STAT_FIELDS} --\n   * both with and w/o a prehashed_l suffix -- using the specified log2m and regwidth.\n   * \n   * The response keys will be the full field names\n   */\n  private static SolrParams buildCardinalityQ(final int lowId, \n                                              final int highId, \n                                              final int log2m, \n                                              final int regwidth) {\n    ModifiableSolrParams p = params(\"q\", \"id_i1:[\"+lowId+\" TO \"+highId+\"]\", \n                                    \"rows\", \"0\", \"stats\", \"true\");\n    final String prefix = \"{!cardinality=true hllLog2m=\"+log2m+\" hllRegwidth=\"+regwidth;\n    for (String f : STAT_FIELDS) {\n      p.add(\"stats.field\", prefix+\"}\"+f);\n      p.add(\"stats.field\", prefix+\" hllPreHashed=true}\"+f+\"_prehashed_l\");\n    }\n    return p;\n  }\n\n","sourceOld":"  /** \n   * Helper utility for building up a set of query params.  \n   *\n   * The main query is a simple range query against the id field (using lowId TO highId). \n   * 2 stats.field params are generated for every field in {@link #STAT_FIELDS} --\n   * both with and w/o a prehashed_l suffix -- using the specified log2m and regwidth.\n   * \n   * The response keys will be the full field names\n   */\n  private static SolrParams buildCardinalityQ(final int lowId, \n                                              final int highId, \n                                              final int log2m, \n                                              final int regwidth) {\n    ModifiableSolrParams p = params(\"q\", \"id:[\"+lowId+\" TO \"+highId+\"]\", \n                                    \"rows\", \"0\", \"stats\", \"true\");\n    final String prefix = \"{!cardinality=true hllLog2m=\"+log2m+\" hllRegwidth=\"+regwidth;\n    for (String f : STAT_FIELDS) {\n      p.add(\"stats.field\", prefix+\"}\"+f);\n      p.add(\"stats.field\", prefix+\" hllPreHashed=true}\"+f+\"_prehashed_l\");\n    }\n    return p;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TestDistributedStatsComponentCardinality#buildCardinalityQ(int,int,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/TestDistributedStatsComponentCardinality#buildCardinalityQ(int,int,int,int).mjava","sourceNew":"  /** \n   * Helper utility for building up a set of query params.  \n   *\n   * The main query is a simple range query against the id field (using lowId TO highId). \n   * 2 stats.field params are generated for every field in {@link #STAT_FIELDS} --\n   * both with and w/o a prehashed_l suffix -- using the specified log2m and regwidth.\n   * \n   * The response keys will be the full field names\n   */\n  private static SolrParams buildCardinalityQ(final int lowId, \n                                              final int highId, \n                                              final int log2m, \n                                              final int regwidth) {\n    ModifiableSolrParams p = params(\"q\", \"id_i1:[\"+lowId+\" TO \"+highId+\"]\", \n                                    \"rows\", \"0\", \"stats\", \"true\");\n    final String prefix = \"{!cardinality=true hllLog2m=\"+log2m+\" hllRegwidth=\"+regwidth;\n    for (String f : STAT_FIELDS) {\n      p.add(\"stats.field\", prefix+\"}\"+f);\n      p.add(\"stats.field\", prefix+\" hllPreHashed=true}\"+f+\"_prehashed_l\");\n    }\n    return p;\n  }\n\n","sourceOld":"  /** \n   * Helper utility for building up a set of query params.  \n   *\n   * The main query is a simple range query against the id field (using lowId TO highId). \n   * 2 stats.field params are generated for every field in {@link #STAT_FIELDS} --\n   * both with and w/o a prehashed_l suffix -- using the specified log2m and regwidth.\n   * \n   * The response keys will be the full field names\n   */\n  private static SolrParams buildCardinalityQ(final int lowId, \n                                              final int highId, \n                                              final int log2m, \n                                              final int regwidth) {\n    ModifiableSolrParams p = params(\"q\", \"id:[\"+lowId+\" TO \"+highId+\"]\", \n                                    \"rows\", \"0\", \"stats\", \"true\");\n    final String prefix = \"{!cardinality=true hllLog2m=\"+log2m+\" hllRegwidth=\"+regwidth;\n    for (String f : STAT_FIELDS) {\n      p.add(\"stats.field\", prefix+\"}\"+f);\n      p.add(\"stats.field\", prefix+\" hllPreHashed=true}\"+f+\"_prehashed_l\");\n    }\n    return p;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4a4e2c829188fb99886a64558664d79c9ac0fdf1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a71f63026529f3c1f03cfdd664910873ab2369ae":["4a4e2c829188fb99886a64558664d79c9ac0fdf1"],"28288370235ed02234a64753cdbf0c6ec096304a":["4a4e2c829188fb99886a64558664d79c9ac0fdf1","a71f63026529f3c1f03cfdd664910873ab2369ae"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["4a4e2c829188fb99886a64558664d79c9ac0fdf1","a71f63026529f3c1f03cfdd664910873ab2369ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"4a4e2c829188fb99886a64558664d79c9ac0fdf1":["a71f63026529f3c1f03cfdd664910873ab2369ae","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4a4e2c829188fb99886a64558664d79c9ac0fdf1"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}