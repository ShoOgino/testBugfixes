{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeepFilterFactory#testInform().mjava","commits":[{"id":"3241e06e642196396b80bb293acd9c0814d079e0","date":1343094999,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeepFilterFactory#testInform().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestKeepFilterFactory#testInform().mjava","sourceNew":"  public void testInform() throws Exception {\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    KeepWordFilterFactory factory = new KeepWordFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"keep-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2, words.size() == 2);\n\n\n    factory = new KeepWordFilterFactory();\n    args.put(\"words\", \"keep-1.txt, keep-2.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4, words.size() == 4);\n\n\n\n  }\n\n","sourceOld":"  public void testInform() throws Exception {\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    KeepWordFilterFactory factory = new KeepWordFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"keep-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2, words.size() == 2);\n\n\n    factory = new KeepWordFilterFactory();\n    args.put(\"words\", \"keep-1.txt, keep-2.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4, words.size() == 4);\n\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80231a39fa20f6c8567eb4e3a3a0511630a97ac7","date":1343105908,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeepFilterFactory#testInform().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeepFilterFactory#testInform().mjava","sourceNew":"  public void testInform() throws Exception {\n    ResourceLoader loader = new ResourceAsStreamResourceLoader(getClass());\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    KeepWordFilterFactory factory = new KeepWordFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"keep-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2, words.size() == 2);\n\n\n    factory = new KeepWordFilterFactory();\n    args.put(\"words\", \"keep-1.txt, keep-2.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4, words.size() == 4);\n\n\n\n  }\n\n","sourceOld":"  public void testInform() throws Exception {\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    KeepWordFilterFactory factory = new KeepWordFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"keep-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2, words.size() == 2);\n\n\n    factory = new KeepWordFilterFactory();\n    args.put(\"words\", \"keep-1.txt, keep-2.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4, words.size() == 4);\n\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeepFilterFactory#testInform().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestKeepFilterFactory#testInform().mjava","sourceNew":"  public void testInform() throws Exception {\n    ResourceLoader loader = new ResourceAsStreamResourceLoader(getClass());\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    KeepWordFilterFactory factory = new KeepWordFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"keep-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2, words.size() == 2);\n\n\n    factory = new KeepWordFilterFactory();\n    args.put(\"words\", \"keep-1.txt, keep-2.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4, words.size() == 4);\n\n\n\n  }\n\n","sourceOld":"  public void testInform() throws Exception {\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    KeepWordFilterFactory factory = new KeepWordFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"keep-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2, words.size() == 2);\n\n\n    factory = new KeepWordFilterFactory();\n    args.put(\"words\", \"keep-1.txt, keep-2.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4, words.size() == 4);\n\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeepFilterFactory#testInform().mjava","pathOld":"/dev/null","sourceNew":"  public void testInform() throws Exception {\n    ResourceLoader loader = new ResourceAsStreamResourceLoader(getClass());\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    KeepWordFilterFactory factory = new KeepWordFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"keep-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2, words.size() == 2);\n\n\n    factory = new KeepWordFilterFactory();\n    args.put(\"words\", \"keep-1.txt, keep-2.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4, words.size() == 4);\n\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e456307e9593d8518ec97cd724d8a7d3a109297b","date":1343503424,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeepFilterFactory#testInform().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeepFilterFactory#testInform().mjava","sourceNew":"  public void testInform() throws Exception {\n    ResourceLoader loader = new ClasspathResourceLoader(getClass());\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    KeepWordFilterFactory factory = new KeepWordFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"keep-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2, words.size() == 2);\n\n\n    factory = new KeepWordFilterFactory();\n    args.put(\"words\", \"keep-1.txt, keep-2.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4, words.size() == 4);\n\n\n\n  }\n\n","sourceOld":"  public void testInform() throws Exception {\n    ResourceLoader loader = new ResourceAsStreamResourceLoader(getClass());\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    KeepWordFilterFactory factory = new KeepWordFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"keep-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2, words.size() == 2);\n\n\n    factory = new KeepWordFilterFactory();\n    args.put(\"words\", \"keep-1.txt, keep-2.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4, words.size() == 4);\n\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeepFilterFactory#testInform().mjava","pathOld":"/dev/null","sourceNew":"  public void testInform() throws Exception {\n    ResourceLoader loader = new ClasspathResourceLoader(getClass());\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    KeepWordFilterFactory factory = new KeepWordFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"keep-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2, words.size() == 2);\n\n\n    factory = new KeepWordFilterFactory();\n    args.put(\"words\", \"keep-1.txt, keep-2.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4, words.size() == 4);\n\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeepFilterFactory#testInform().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeepFilterFactory#testInform().mjava","sourceNew":"  public void testInform() throws Exception {\n    ResourceLoader loader = new ClasspathResourceLoader(getClass());\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    KeepWordFilterFactory factory = new KeepWordFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"keep-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2, words.size() == 2);\n\n\n    factory = new KeepWordFilterFactory();\n    args.put(\"words\", \"keep-1.txt, keep-2.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4, words.size() == 4);\n\n\n\n  }\n\n","sourceOld":"  public void testInform() throws Exception {\n    ResourceLoader loader = new ResourceAsStreamResourceLoader(getClass());\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    KeepWordFilterFactory factory = new KeepWordFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"keep-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2, words.size() == 2);\n\n\n    factory = new KeepWordFilterFactory();\n    args.put(\"words\", \"keep-1.txt, keep-2.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4, words.size() == 4);\n\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeepFilterFactory#testInform().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeepFilterFactory#testInform().mjava","sourceNew":"  public void testInform() throws Exception {\n    ResourceLoader loader = new ClasspathResourceLoader(getClass());\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    KeepWordFilterFactory factory = (KeepWordFilterFactory) tokenFilterFactory(\"KeepWord\",\n        \"words\", \"keep-1.txt\",\n        \"ignoreCase\", \"true\");\n    CharArraySet words = factory.getWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2, words.size() == 2);\n\n    factory = (KeepWordFilterFactory) tokenFilterFactory(\"KeepWord\",\n        \"words\", \"keep-1.txt, keep-2.txt\",\n        \"ignoreCase\", \"true\");\n    words = factory.getWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4, words.size() == 4);\n  }\n\n","sourceOld":"  public void testInform() throws Exception {\n    ResourceLoader loader = new ClasspathResourceLoader(getClass());\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    KeepWordFilterFactory factory = new KeepWordFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"keep-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2, words.size() == 2);\n\n\n    factory = new KeepWordFilterFactory();\n    args.put(\"words\", \"keep-1.txt, keep-2.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4, words.size() == 4);\n\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"80231a39fa20f6c8567eb4e3a3a0511630a97ac7":["3241e06e642196396b80bb293acd9c0814d079e0"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a1a22b1ad88b436661458df567f3fdb446392a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e456307e9593d8518ec97cd724d8a7d3a109297b"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["aba371508186796cc6151d8223a5b4e16d02e26e","e456307e9593d8518ec97cd724d8a7d3a109297b"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["e456307e9593d8518ec97cd724d8a7d3a109297b"],"e456307e9593d8518ec97cd724d8a7d3a109297b":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","80231a39fa20f6c8567eb4e3a3a0511630a97ac7"],"3241e06e642196396b80bb293acd9c0814d079e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"]},"commit2Childs":{"80231a39fa20f6c8567eb4e3a3a0511630a97ac7":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"aba371508186796cc6151d8223a5b4e16d02e26e":["d6f074e73200c07d54f242d3880a8da5a35ff97b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","5a1a22b1ad88b436661458df567f3fdb446392a4","3241e06e642196396b80bb293acd9c0814d079e0"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e456307e9593d8518ec97cd724d8a7d3a109297b":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"3241e06e642196396b80bb293acd9c0814d079e0":["80231a39fa20f6c8567eb4e3a3a0511630a97ac7"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["aba371508186796cc6151d8223a5b4e16d02e26e","e456307e9593d8518ec97cd724d8a7d3a109297b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}