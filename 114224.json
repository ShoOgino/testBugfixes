{"path":"lucene/src/test/org/apache/lucene/search/TestSearchAfter#testQueries().mjava","commits":[{"id":"c36f7a2dc9a2d9c7cff5a1e07a7e7f5ef93e6d15","date":1316561169,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSearchAfter#testQueries().mjava","pathOld":"/dev/null","sourceNew":"  public void testQueries() throws Exception {\n    Filter odd = new QueryWrapperFilter(new TermQuery(new Term(\"oddeven\", \"odd\")));\n    assertQuery(new MatchAllDocsQuery(), null);\n    assertQuery(new TermQuery(new Term(\"english\", \"one\")), null);\n    assertQuery(new MatchAllDocsQuery(), odd);\n    assertQuery(new TermQuery(new Term(\"english\", \"four\")), odd);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"english\", \"one\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"oddeven\", \"even\")), BooleanClause.Occur.SHOULD);\n    assertQuery(bq, null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c80e984aa63f91c11c1eccfc5b52c6811628277","date":1323824886,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSearchAfter#testQueries().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSearchAfter#testQueries().mjava","sourceNew":"  public void testQueries() throws Exception {\n    // because the first page has a null 'after', we get a normal collector.\n    // so we need to run the test a few times to ensure we will collect multiple\n    // pages.\n    int n = atLeast(10);\n    for (int i = 0; i < n; i++) {\n      Filter odd = new QueryWrapperFilter(new TermQuery(new Term(\"oddeven\", \"odd\")));\n      assertQuery(new MatchAllDocsQuery(), null);\n      assertQuery(new TermQuery(new Term(\"english\", \"one\")), null);\n      assertQuery(new MatchAllDocsQuery(), odd);\n      assertQuery(new TermQuery(new Term(\"english\", \"four\")), odd);\n      BooleanQuery bq = new BooleanQuery();\n      bq.add(new TermQuery(new Term(\"english\", \"one\")), BooleanClause.Occur.SHOULD);\n      bq.add(new TermQuery(new Term(\"oddeven\", \"even\")), BooleanClause.Occur.SHOULD);\n      assertQuery(bq, null);\n    }\n  }\n\n","sourceOld":"  public void testQueries() throws Exception {\n    Filter odd = new QueryWrapperFilter(new TermQuery(new Term(\"oddeven\", \"odd\")));\n    assertQuery(new MatchAllDocsQuery(), null);\n    assertQuery(new TermQuery(new Term(\"english\", \"one\")), null);\n    assertQuery(new MatchAllDocsQuery(), odd);\n    assertQuery(new TermQuery(new Term(\"english\", \"four\")), odd);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"english\", \"one\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"oddeven\", \"even\")), BooleanClause.Occur.SHOULD);\n    assertQuery(bq, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#testQueries().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSearchAfter#testQueries().mjava","sourceNew":"  public void testQueries() throws Exception {\n    // because the first page has a null 'after', we get a normal collector.\n    // so we need to run the test a few times to ensure we will collect multiple\n    // pages.\n    int n = atLeast(10);\n    for (int i = 0; i < n; i++) {\n      Filter odd = new QueryWrapperFilter(new TermQuery(new Term(\"oddeven\", \"odd\")));\n      assertQuery(new MatchAllDocsQuery(), null);\n      assertQuery(new TermQuery(new Term(\"english\", \"one\")), null);\n      assertQuery(new MatchAllDocsQuery(), odd);\n      assertQuery(new TermQuery(new Term(\"english\", \"four\")), odd);\n      BooleanQuery bq = new BooleanQuery();\n      bq.add(new TermQuery(new Term(\"english\", \"one\")), BooleanClause.Occur.SHOULD);\n      bq.add(new TermQuery(new Term(\"oddeven\", \"even\")), BooleanClause.Occur.SHOULD);\n      assertQuery(bq, null);\n    }\n  }\n\n","sourceOld":"  public void testQueries() throws Exception {\n    // because the first page has a null 'after', we get a normal collector.\n    // so we need to run the test a few times to ensure we will collect multiple\n    // pages.\n    int n = atLeast(10);\n    for (int i = 0; i < n; i++) {\n      Filter odd = new QueryWrapperFilter(new TermQuery(new Term(\"oddeven\", \"odd\")));\n      assertQuery(new MatchAllDocsQuery(), null);\n      assertQuery(new TermQuery(new Term(\"english\", \"one\")), null);\n      assertQuery(new MatchAllDocsQuery(), odd);\n      assertQuery(new TermQuery(new Term(\"english\", \"four\")), odd);\n      BooleanQuery bq = new BooleanQuery();\n      bq.add(new TermQuery(new Term(\"english\", \"one\")), BooleanClause.Occur.SHOULD);\n      bq.add(new TermQuery(new Term(\"oddeven\", \"even\")), BooleanClause.Occur.SHOULD);\n      assertQuery(bq, null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c36f7a2dc9a2d9c7cff5a1e07a7e7f5ef93e6d15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2c80e984aa63f91c11c1eccfc5b52c6811628277":["c36f7a2dc9a2d9c7cff5a1e07a7e7f5ef93e6d15"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["2c80e984aa63f91c11c1eccfc5b52c6811628277"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"c36f7a2dc9a2d9c7cff5a1e07a7e7f5ef93e6d15":["2c80e984aa63f91c11c1eccfc5b52c6811628277"],"2c80e984aa63f91c11c1eccfc5b52c6811628277":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c36f7a2dc9a2d9c7cff5a1e07a7e7f5ef93e6d15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}