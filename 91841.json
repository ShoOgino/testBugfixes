{"path":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testFlattenTermAndPhrase().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testFlattenTermAndPhrase().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testFlattenTermAndPhrase().mjava","sourceNew":"  public void testFlattenTermAndPhrase() throws Exception {\n    BooleanQuery booleanQuery = new BooleanQuery();\n    booleanQuery.add(new TermQuery(new Term(F, \"A\")), Occur.MUST);\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(F, \"B\"));\n    phraseQuery.add(new Term(F, \"C\"));\n    booleanQuery.add(phraseQuery, Occur.MUST);\n\n    FieldQuery fq = new FieldQuery(booleanQuery, true, true );\n    Set<Query> flatQueries = new HashSet<Query>();\n    fq.flatten(booleanQuery, reader, flatQueries);\n    assertCollectionQueries( flatQueries, tq( \"A\" ), pqF( \"B\", \"C\" ) );\n  }\n\n","sourceOld":"  public void testFlattenTermAndPhrase() throws Exception {\n    BooleanQuery booleanQuery = new BooleanQuery();\n    booleanQuery.add(new TermQuery(new Term(F, \"A\")), Occur.MUST);\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(F, \"B\"));\n    phraseQuery.add(new Term(F, \"C\"));\n    booleanQuery.add(phraseQuery, Occur.MUST);\n\n    FieldQuery fq = new FieldQuery(booleanQuery, true, true );\n    Set<Query> flatQueries = new HashSet<Query>();\n    fq.flatten(booleanQuery, reader, flatQueries);\n    assertCollectionQueries( flatQueries, tq( \"A\" ), pqF( \"B\", \"C\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94221e4190ec47a1ec4f0bd8f99b3648af295a06","date":1389175887,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testFlattenTermAndPhrase().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testFlattenTermAndPhrase().mjava","sourceNew":"  public void testFlattenTermAndPhrase() throws Exception {\n    initBoost();\n    BooleanQuery booleanQuery = new BooleanQuery();\n    booleanQuery.setBoost( boost );\n    booleanQuery.add(tq(\"A\"), Occur.MUST);\n    booleanQuery.add(pqF(\"B\", \"C\"), Occur.MUST);\n\n    FieldQuery fq = new FieldQuery(booleanQuery, true, true );\n    Set<Query> flatQueries = new HashSet<Query>();\n    fq.flatten(booleanQuery, reader, flatQueries);\n    assertCollectionQueries( flatQueries, tq( boost, \"A\" ), pqF( boost, \"B\", \"C\" ) );\n  }\n\n","sourceOld":"  public void testFlattenTermAndPhrase() throws Exception {\n    BooleanQuery booleanQuery = new BooleanQuery();\n    booleanQuery.add(new TermQuery(new Term(F, \"A\")), Occur.MUST);\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(F, \"B\"));\n    phraseQuery.add(new Term(F, \"C\"));\n    booleanQuery.add(phraseQuery, Occur.MUST);\n\n    FieldQuery fq = new FieldQuery(booleanQuery, true, true );\n    Set<Query> flatQueries = new HashSet<Query>();\n    fq.flatten(booleanQuery, reader, flatQueries);\n    assertCollectionQueries( flatQueries, tq( \"A\" ), pqF( \"B\", \"C\" ) );\n  }\n\n","bugFix":["d64148a458eb3ddf4d1bb1f1753cb9af194e1707","dfd4d352ddf04b37253ad97ce1aad1448253f0f7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testFlattenTermAndPhrase().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testFlattenTermAndPhrase().mjava","sourceNew":"  public void testFlattenTermAndPhrase() throws Exception {\n    initBoost();\n    BooleanQuery booleanQuery = new BooleanQuery();\n    booleanQuery.setBoost( boost );\n    booleanQuery.add(tq(\"A\"), Occur.MUST);\n    booleanQuery.add(pqF(\"B\", \"C\"), Occur.MUST);\n\n    FieldQuery fq = new FieldQuery(booleanQuery, true, true );\n    Set<Query> flatQueries = new HashSet<>();\n    fq.flatten(booleanQuery, reader, flatQueries);\n    assertCollectionQueries( flatQueries, tq( boost, \"A\" ), pqF( boost, \"B\", \"C\" ) );\n  }\n\n","sourceOld":"  public void testFlattenTermAndPhrase() throws Exception {\n    initBoost();\n    BooleanQuery booleanQuery = new BooleanQuery();\n    booleanQuery.setBoost( boost );\n    booleanQuery.add(tq(\"A\"), Occur.MUST);\n    booleanQuery.add(pqF(\"B\", \"C\"), Occur.MUST);\n\n    FieldQuery fq = new FieldQuery(booleanQuery, true, true );\n    Set<Query> flatQueries = new HashSet<Query>();\n    fq.flatten(booleanQuery, reader, flatQueries);\n    assertCollectionQueries( flatQueries, tq( boost, \"A\" ), pqF( boost, \"B\", \"C\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testFlattenTermAndPhrase().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testFlattenTermAndPhrase().mjava","sourceNew":"  public void testFlattenTermAndPhrase() throws Exception {\n    initBoost();\n    BooleanQuery.Builder booleanQueryB = new BooleanQuery.Builder();\n    booleanQueryB.add(tq(\"A\"), Occur.MUST);\n    booleanQueryB.add(pqF(\"B\", \"C\"), Occur.MUST);\n    BooleanQuery booleanQuery = booleanQueryB.build();\n    booleanQuery.setBoost(boost);\n\n    FieldQuery fq = new FieldQuery(booleanQuery, true, true );\n    Set<Query> flatQueries = new HashSet<>();\n    fq.flatten(booleanQuery, reader, flatQueries);\n    assertCollectionQueries( flatQueries, tq( boost, \"A\" ), pqF( boost, \"B\", \"C\" ) );\n  }\n\n","sourceOld":"  public void testFlattenTermAndPhrase() throws Exception {\n    initBoost();\n    BooleanQuery booleanQuery = new BooleanQuery();\n    booleanQuery.setBoost( boost );\n    booleanQuery.add(tq(\"A\"), Occur.MUST);\n    booleanQuery.add(pqF(\"B\", \"C\"), Occur.MUST);\n\n    FieldQuery fq = new FieldQuery(booleanQuery, true, true );\n    Set<Query> flatQueries = new HashSet<>();\n    fq.flatten(booleanQuery, reader, flatQueries);\n    assertCollectionQueries( flatQueries, tq( boost, \"A\" ), pqF( boost, \"B\", \"C\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testFlattenTermAndPhrase().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testFlattenTermAndPhrase().mjava","sourceNew":"  public void testFlattenTermAndPhrase() throws Exception {\n    initBoost();\n    BooleanQuery.Builder booleanQueryB = new BooleanQuery.Builder();\n    booleanQueryB.add(tq(\"A\"), Occur.MUST);\n    booleanQueryB.add(pqF(\"B\", \"C\"), Occur.MUST);\n    Query booleanQuery = booleanQueryB.build();\n    booleanQuery = new BoostQuery(booleanQuery, boost);\n\n    FieldQuery fq = new FieldQuery(booleanQuery, true, true );\n    Set<Query> flatQueries = new HashSet<>();\n    fq.flatten(booleanQuery, reader, flatQueries, 1f);\n    assertCollectionQueries( flatQueries, tq( boost, \"A\" ), pqF( boost, \"B\", \"C\" ) );\n  }\n\n","sourceOld":"  public void testFlattenTermAndPhrase() throws Exception {\n    initBoost();\n    BooleanQuery.Builder booleanQueryB = new BooleanQuery.Builder();\n    booleanQueryB.add(tq(\"A\"), Occur.MUST);\n    booleanQueryB.add(pqF(\"B\", \"C\"), Occur.MUST);\n    BooleanQuery booleanQuery = booleanQueryB.build();\n    booleanQuery.setBoost(boost);\n\n    FieldQuery fq = new FieldQuery(booleanQuery, true, true );\n    Set<Query> flatQueries = new HashSet<>();\n    fq.flatten(booleanQuery, reader, flatQueries);\n    assertCollectionQueries( flatQueries, tq( boost, \"A\" ), pqF( boost, \"B\", \"C\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["94221e4190ec47a1ec4f0bd8f99b3648af295a06"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"94221e4190ec47a1ec4f0bd8f99b3648af295a06":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2dfdf766e55e943d942055d7de53c7ad6bc45283"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["94221e4190ec47a1ec4f0bd8f99b3648af295a06"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"94221e4190ec47a1ec4f0bd8f99b3648af295a06":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}