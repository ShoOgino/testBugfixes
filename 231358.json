{"path":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(CMD_INDEX_VERSION);\n    if (v == null) {\n      rsp.add(\"status\", \"no indexversion specified\");\n      return;\n    }\n    long version = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(version);\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid indexversion\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(version, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    try {\n      //get all the files in the commit\n      //use a set to workaround possible Lucene bug which returns same file name multiple times\n      Collection<String> files = new HashSet<String>(commit.getFileNames());\n      for (String fileName : files) {\n        if(fileName.endsWith(\".lock\")) continue;\n        File file = new File(core.getIndexDir(), fileName);\n        Map<String, Object> fileMeta = getFileInfo(file);\n        result.add(fileMeta);\n      }\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given indexversion\");\n      rsp.add(\"exception\", e);\n      LOG.warn(\"Unable to get file names for indexCommit version: \"\n              + version, e);\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1)\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(CMD_INDEX_VERSION);\n    if (v == null) {\n      rsp.add(\"status\", \"no indexversion specified\");\n      return;\n    }\n    long version = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(version);\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid indexversion\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(version, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    try {\n      //get all the files in the commit\n      //use a set to workaround possible Lucene bug which returns same file name multiple times\n      Collection<String> files = new HashSet<String>(commit.getFileNames());\n      for (String fileName : files) {\n        if(fileName.endsWith(\".lock\")) continue;\n        File file = new File(core.getIndexDir(), fileName);\n        Map<String, Object> fileMeta = getFileInfo(file);\n        result.add(fileMeta);\n      }\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given indexversion\");\n      rsp.add(\"exception\", e);\n      LOG.warn(\"Unable to get file names for indexCommit version: \"\n              + version, e);\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1)\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(CMD_INDEX_VERSION);\n    if (v == null) {\n      rsp.add(\"status\", \"no indexversion specified\");\n      return;\n    }\n    long version = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(version);\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid indexversion\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(version, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    try {\n      //get all the files in the commit\n      //use a set to workaround possible Lucene bug which returns same file name multiple times\n      Collection<String> files = new HashSet<String>(commit.getFileNames());\n      for (String fileName : files) {\n        if(fileName.endsWith(\".lock\")) continue;\n        File file = new File(core.getIndexDir(), fileName);\n        Map<String, Object> fileMeta = getFileInfo(file);\n        result.add(fileMeta);\n      }\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given indexversion\");\n      rsp.add(\"exception\", e);\n      LOG.warn(\"Unable to get file names for indexCommit version: \"\n              + version, e);\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1)\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(CMD_INDEX_VERSION);\n    if (v == null) {\n      rsp.add(\"status\", \"no indexversion specified\");\n      return;\n    }\n    long version = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(version);\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid indexversion\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(version, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    try {\n      //get all the files in the commit\n      //use a set to workaround possible Lucene bug which returns same file name multiple times\n      Collection<String> files = new HashSet<String>(commit.getFileNames());\n      for (String fileName : files) {\n        if(fileName.endsWith(\".lock\")) continue;\n        File file = new File(core.getIndexDir(), fileName);\n        Map<String, Object> fileMeta = getFileInfo(file);\n        result.add(fileMeta);\n      }\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given indexversion\");\n      rsp.add(\"exception\", e);\n      LOG.warn(\"Unable to get file names for indexCommit version: \"\n              + version, e);\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1)\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(CMD_INDEX_VERSION);\n    if (v == null) {\n      rsp.add(\"status\", \"no indexversion specified\");\n      return;\n    }\n    long version = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(version);\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid indexversion\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(version, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    try {\n      //get all the files in the commit\n      //use a set to workaround possible Lucene bug which returns same file name multiple times\n      Collection<String> files = new HashSet<String>(commit.getFileNames());\n      for (String fileName : files) {\n        if(fileName.endsWith(\".lock\")) continue;\n        File file = new File(core.getIndexDir(), fileName);\n        Map<String, Object> fileMeta = getFileInfo(file);\n        result.add(fileMeta);\n      }\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given indexversion\");\n      rsp.add(\"exception\", e);\n      LOG.warn(\"Unable to get file names for indexCommit version: \"\n              + version, e);\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1)\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(CMD_INDEX_VERSION);\n    if (v == null) {\n      rsp.add(\"status\", \"no indexversion specified\");\n      return;\n    }\n    long version = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(version);\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid indexversion\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(version, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    try {\n      //get all the files in the commit\n      //use a set to workaround possible Lucene bug which returns same file name multiple times\n      Collection<String> files = new HashSet<String>(commit.getFileNames());\n      for (String fileName : files) {\n        if(fileName.endsWith(\".lock\")) continue;\n        File file = new File(core.getIndexDir(), fileName);\n        Map<String, Object> fileMeta = getFileInfo(file);\n        result.add(fileMeta);\n      }\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given indexversion\");\n      rsp.add(\"exception\", e);\n      LOG.warn(\"Unable to get file names for indexCommit version: \"\n              + version, e);\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1)\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f11ea4f58f7fefe4a8c99ee19b3c388d7f98d60","date":1321493601,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(CMD_INDEX_VERSION);\n    if (v == null) {\n      rsp.add(\"status\", \"no indexversion specified\");\n      return;\n    }\n    long version = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(version);\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid indexversion\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(version, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    try {\n      //get all the files in the commit\n      //use a set to workaround possible Lucene bug which returns same file name multiple times\n      Collection<String> files = new HashSet<String>(commit.getFileNames());\n      for (String fileName : files) {\n        if(fileName.endsWith(\".lock\")) continue;\n        File file = new File(core.getIndexDir(), fileName);\n        Map<String, Object> fileMeta = getFileInfo(file);\n        result.add(fileMeta);\n      }\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given indexversion\");\n      rsp.add(\"exception\", e);\n      LOG.warn(\"Unable to get file names for indexCommit version: \"\n               + version, e);\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1)\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(CMD_INDEX_VERSION);\n    if (v == null) {\n      rsp.add(\"status\", \"no indexversion specified\");\n      return;\n    }\n    long version = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(version);\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid indexversion\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(version, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    try {\n      //get all the files in the commit\n      //use a set to workaround possible Lucene bug which returns same file name multiple times\n      Collection<String> files = new HashSet<String>(commit.getFileNames());\n      for (String fileName : files) {\n        if(fileName.endsWith(\".lock\")) continue;\n        File file = new File(core.getIndexDir(), fileName);\n        Map<String, Object> fileMeta = getFileInfo(file);\n        result.add(fileMeta);\n      }\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given indexversion\");\n      rsp.add(\"exception\", e);\n      LOG.warn(\"Unable to get file names for indexCommit version: \"\n              + version, e);\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1)\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","bugFix":null,"bugIntro":["c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(CMD_INDEX_VERSION);\n    if (v == null) {\n      rsp.add(\"status\", \"no indexversion specified\");\n      return;\n    }\n    long version = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(version);\n \n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid indexversion\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(version, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    try {\n      //get all the files in the commit\n      //use a set to workaround possible Lucene bug which returns same file name multiple times\n      Collection<String> files = new HashSet<String>(commit.getFileNames());\n      for (String fileName : files) {\n        if(fileName.endsWith(\".lock\")) continue;\n        File file = new File(core.getIndexDir(), fileName);\n        Map<String, Object> fileMeta = getFileInfo(file);\n        result.add(fileMeta);\n      }\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given indexversion\");\n      rsp.add(\"exception\", e);\n      LOG.warn(\"Unable to get file names for indexCommit version: \"\n               + version, e);\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1)\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(CMD_INDEX_VERSION);\n    if (v == null) {\n      rsp.add(\"status\", \"no indexversion specified\");\n      return;\n    }\n    long version = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(version);\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid indexversion\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(version, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    try {\n      //get all the files in the commit\n      //use a set to workaround possible Lucene bug which returns same file name multiple times\n      Collection<String> files = new HashSet<String>(commit.getFileNames());\n      for (String fileName : files) {\n        if(fileName.endsWith(\".lock\")) continue;\n        File file = new File(core.getIndexDir(), fileName);\n        Map<String, Object> fileMeta = getFileInfo(file);\n        result.add(fileMeta);\n      }\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given indexversion\");\n      rsp.add(\"exception\", e);\n      LOG.warn(\"Unable to get file names for indexCommit version: \"\n               + version, e);\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1)\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","bugFix":null,"bugIntro":["5cb65c1c2f90852e718f86c8be09beb1c4dba408"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(CMD_INDEX_VERSION);\n    if (v == null) {\n      rsp.add(\"status\", \"no indexversion specified\");\n      return;\n    }\n    long version = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(version);\n \n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid indexversion\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(version, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    try {\n      //get all the files in the commit\n      //use a set to workaround possible Lucene bug which returns same file name multiple times\n      Collection<String> files = new HashSet<String>(commit.getFileNames());\n      for (String fileName : files) {\n        if(fileName.endsWith(\".lock\")) continue;\n        File file = new File(core.getIndexDir(), fileName);\n        Map<String, Object> fileMeta = getFileInfo(file);\n        result.add(fileMeta);\n      }\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given indexversion\");\n      rsp.add(\"exception\", e);\n      LOG.warn(\"Unable to get file names for indexCommit version: \"\n               + version, e);\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1)\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(CMD_INDEX_VERSION);\n    if (v == null) {\n      rsp.add(\"status\", \"no indexversion specified\");\n      return;\n    }\n    long version = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(version);\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid indexversion\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(version, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    try {\n      //get all the files in the commit\n      //use a set to workaround possible Lucene bug which returns same file name multiple times\n      Collection<String> files = new HashSet<String>(commit.getFileNames());\n      for (String fileName : files) {\n        if(fileName.endsWith(\".lock\")) continue;\n        File file = new File(core.getIndexDir(), fileName);\n        Map<String, Object> fileMeta = getFileInfo(file);\n        result.add(fileMeta);\n      }\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given indexversion\");\n      rsp.add(\"exception\", e);\n      LOG.warn(\"Unable to get file names for indexCommit version: \"\n               + version, e);\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1)\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(CMD_INDEX_VERSION);\n    if (v == null) {\n      rsp.add(\"status\", \"no indexversion specified\");\n      return;\n    }\n    long version = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(version);\n \n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid indexversion\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(version, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    try {\n      //get all the files in the commit\n      //use a set to workaround possible Lucene bug which returns same file name multiple times\n      Collection<String> files = new HashSet<String>(commit.getFileNames());\n      for (String fileName : files) {\n        if(fileName.endsWith(\".lock\")) continue;\n        File file = new File(core.getIndexDir(), fileName);\n        Map<String, Object> fileMeta = getFileInfo(file);\n        result.add(fileMeta);\n      }\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given indexversion\");\n      rsp.add(\"exception\", e);\n      LOG.warn(\"Unable to get file names for indexCommit version: \"\n               + version, e);\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1)\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(CMD_INDEX_VERSION);\n    if (v == null) {\n      rsp.add(\"status\", \"no indexversion specified\");\n      return;\n    }\n    long version = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(version);\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid indexversion\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(version, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    try {\n      //get all the files in the commit\n      //use a set to workaround possible Lucene bug which returns same file name multiple times\n      Collection<String> files = new HashSet<String>(commit.getFileNames());\n      for (String fileName : files) {\n        if(fileName.endsWith(\".lock\")) continue;\n        File file = new File(core.getIndexDir(), fileName);\n        Map<String, Object> fileMeta = getFileInfo(file);\n        result.add(fileMeta);\n      }\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given indexversion\");\n      rsp.add(\"exception\", e);\n      LOG.warn(\"Unable to get file names for indexCommit version: \"\n               + version, e);\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1)\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c01638f4dd94981c1d3d52c4f7991246a5a24aba","date":1327876712,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(GENERATION);\n    if (v == null) {\n      rsp.add(\"status\", \"no index generation specified\");\n      return;\n    }\n    long gen = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n \n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid index generation\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    try {\n      //get all the files in the commit\n      //use a set to workaround possible Lucene bug which returns same file name multiple times\n      Collection<String> files = new HashSet<String>(commit.getFileNames());\n      for (String fileName : files) {\n        if(fileName.endsWith(\".lock\")) continue;\n        File file = new File(core.getIndexDir(), fileName);\n        Map<String, Object> fileMeta = getFileInfo(file);\n        result.add(fileMeta);\n      }\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given index generation\");\n      rsp.add(\"exception\", e);\n      LOG.warn(\"Unable to get file names for indexCommit generation: \"\n               + gen, e);\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1)\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(CMD_INDEX_VERSION);\n    if (v == null) {\n      rsp.add(\"status\", \"no indexversion specified\");\n      return;\n    }\n    long version = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(version);\n \n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid indexversion\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(version, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    try {\n      //get all the files in the commit\n      //use a set to workaround possible Lucene bug which returns same file name multiple times\n      Collection<String> files = new HashSet<String>(commit.getFileNames());\n      for (String fileName : files) {\n        if(fileName.endsWith(\".lock\")) continue;\n        File file = new File(core.getIndexDir(), fileName);\n        Map<String, Object> fileMeta = getFileInfo(file);\n        result.add(fileMeta);\n      }\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given indexversion\");\n      rsp.add(\"exception\", e);\n      LOG.warn(\"Unable to get file names for indexCommit version: \"\n               + version, e);\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1)\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","bugFix":["f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349","4f11ea4f58f7fefe4a8c99ee19b3c388d7f98d60"],"bugIntro":["19f02bb04467ed179738a398a7da80bbbe161c16","5cb65c1c2f90852e718f86c8be09beb1c4dba408"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817882884229bace7dc5d1b75f6b0e4aa1e47122","date":1327879145,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(GENERATION);\n    if (v == null) {\n      rsp.add(\"status\", \"no index generation specified\");\n      return;\n    }\n    long gen = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n \n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid index generation\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    try {\n      //get all the files in the commit\n      //use a set to workaround possible Lucene bug which returns same file name multiple times\n      Collection<String> files = new HashSet<String>(commit.getFileNames());\n      for (String fileName : files) {\n        if(fileName.endsWith(\".lock\")) continue;\n        File file = new File(core.getIndexDir(), fileName);\n        Map<String, Object> fileMeta = getFileInfo(file);\n        result.add(fileMeta);\n      }\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given index generation\");\n      rsp.add(\"exception\", e);\n      LOG.warn(\"Unable to get file names for indexCommit generation: \"\n               + gen, e);\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1)\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(CMD_INDEX_VERSION);\n    if (v == null) {\n      rsp.add(\"status\", \"no indexversion specified\");\n      return;\n    }\n    long version = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(version);\n \n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid indexversion\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(version, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    try {\n      //get all the files in the commit\n      //use a set to workaround possible Lucene bug which returns same file name multiple times\n      Collection<String> files = new HashSet<String>(commit.getFileNames());\n      for (String fileName : files) {\n        if(fileName.endsWith(\".lock\")) continue;\n        File file = new File(core.getIndexDir(), fileName);\n        Map<String, Object> fileMeta = getFileInfo(file);\n        result.add(fileMeta);\n      }\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given indexversion\");\n      rsp.add(\"exception\", e);\n      LOG.warn(\"Unable to get file names for indexCommit version: \"\n               + version, e);\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1)\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(GENERATION);\n    if (v == null) {\n      rsp.add(\"status\", \"no index generation specified\");\n      return;\n    }\n    long gen = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n \n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid index generation\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    try {\n      //get all the files in the commit\n      //use a set to workaround possible Lucene bug which returns same file name multiple times\n      Collection<String> files = new HashSet<String>(commit.getFileNames());\n      for (String fileName : files) {\n        if(fileName.endsWith(\".lock\")) continue;\n        File file = new File(core.getIndexDir(), fileName);\n        Map<String, Object> fileMeta = getFileInfo(file);\n        result.add(fileMeta);\n      }\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given index generation\");\n      rsp.add(\"exception\", e);\n      LOG.warn(\"Unable to get file names for indexCommit generation: \"\n               + gen, e);\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1)\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(CMD_INDEX_VERSION);\n    if (v == null) {\n      rsp.add(\"status\", \"no indexversion specified\");\n      return;\n    }\n    long version = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(version);\n \n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid indexversion\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(version, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    try {\n      //get all the files in the commit\n      //use a set to workaround possible Lucene bug which returns same file name multiple times\n      Collection<String> files = new HashSet<String>(commit.getFileNames());\n      for (String fileName : files) {\n        if(fileName.endsWith(\".lock\")) continue;\n        File file = new File(core.getIndexDir(), fileName);\n        Map<String, Object> fileMeta = getFileInfo(file);\n        result.add(fileMeta);\n      }\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given indexversion\");\n      rsp.add(\"exception\", e);\n      LOG.warn(\"Unable to get file names for indexCommit version: \"\n               + version, e);\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1)\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4595e68ef6915713e33c6d6c83bffdb49b65761e","date":1330372170,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(GENERATION);\n    if (v == null) {\n      rsp.add(\"status\", \"no index generation specified\");\n      return;\n    }\n    long gen = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n \n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid index generation\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    try {\n      //get all the files in the commit\n      //use a set to workaround possible Lucene bug which returns same file name multiple times\n      Collection<String> files = new HashSet<String>(commit.getFileNames());\n      for (String fileName : files) {\n        if(fileName.endsWith(\".lock\")) continue;\n        File file = new File(core.getIndexDir(), fileName);\n        Map<String, Object> fileMeta = getFileInfo(file);\n        result.add(fileMeta);\n      }\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given index generation\");\n      rsp.add(\"exception\", e);\n      LOG.warn(\"Unable to get file names for indexCommit generation: \"\n               + gen, e);\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1 || core.getCoreDescriptor().getCoreContainer().isZooKeeperAware())\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(GENERATION);\n    if (v == null) {\n      rsp.add(\"status\", \"no index generation specified\");\n      return;\n    }\n    long gen = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n \n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid index generation\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    try {\n      //get all the files in the commit\n      //use a set to workaround possible Lucene bug which returns same file name multiple times\n      Collection<String> files = new HashSet<String>(commit.getFileNames());\n      for (String fileName : files) {\n        if(fileName.endsWith(\".lock\")) continue;\n        File file = new File(core.getIndexDir(), fileName);\n        Map<String, Object> fileMeta = getFileInfo(file);\n        result.add(fileMeta);\n      }\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given index generation\");\n      rsp.add(\"exception\", e);\n      LOG.warn(\"Unable to get file names for indexCommit generation: \"\n               + gen, e);\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1)\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(GENERATION);\n    if (v == null) {\n      rsp.add(\"status\", \"no index generation specified\");\n      return;\n    }\n    long gen = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n \n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid index generation\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    try {\n      //get all the files in the commit\n      //use a set to workaround possible Lucene bug which returns same file name multiple times\n      Collection<String> files = new HashSet<String>(commit.getFileNames());\n      for (String fileName : files) {\n        if(fileName.endsWith(\".lock\")) continue;\n        File file = new File(core.getIndexDir(), fileName);\n        Map<String, Object> fileMeta = getFileInfo(file);\n        result.add(fileMeta);\n      }\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given index generation\");\n      rsp.add(\"exception\", e);\n      LOG.warn(\"Unable to get file names for indexCommit generation: \"\n               + gen, e);\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1 || core.getCoreDescriptor().getCoreContainer().isZooKeeperAware())\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(GENERATION);\n    if (v == null) {\n      rsp.add(\"status\", \"no index generation specified\");\n      return;\n    }\n    long gen = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n \n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid index generation\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    try {\n      //get all the files in the commit\n      //use a set to workaround possible Lucene bug which returns same file name multiple times\n      Collection<String> files = new HashSet<String>(commit.getFileNames());\n      for (String fileName : files) {\n        if(fileName.endsWith(\".lock\")) continue;\n        File file = new File(core.getIndexDir(), fileName);\n        Map<String, Object> fileMeta = getFileInfo(file);\n        result.add(fileMeta);\n      }\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given index generation\");\n      rsp.add(\"exception\", e);\n      LOG.warn(\"Unable to get file names for indexCommit generation: \"\n               + gen, e);\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1)\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(GENERATION);\n    if (v == null) {\n      rsp.add(\"status\", \"no index generation specified\");\n      return;\n    }\n    long gen = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n \n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid index generation\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    Directory dir = null;\n    try {\n      // get all the files in the commit\n      // use a set to workaround possible Lucene bug which returns same file\n      // name multiple times\n      Collection<String> files = new HashSet<String>(commit.getFileNames());\n      dir = core.getDirectoryFactory().get(core.getNewIndexDir(), null);\n      try {\n        \n        for (String fileName : files) {\n          if (fileName.endsWith(\".lock\")) continue;\n          Map<String,Object> fileMeta = new HashMap<String,Object>();\n          fileMeta.put(NAME, fileName);\n          fileMeta.put(SIZE, dir.fileLength(fileName));\n          result.add(fileMeta);\n        }\n      } finally {\n        core.getDirectoryFactory().release(dir);\n      }\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given index generation\");\n      rsp.add(\"exception\", e);\n      LOG.error(\"Unable to get file names for indexCommit generation: \" + gen, e);\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1 || core.getCoreDescriptor().getCoreContainer().isZooKeeperAware())\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(GENERATION);\n    if (v == null) {\n      rsp.add(\"status\", \"no index generation specified\");\n      return;\n    }\n    long gen = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n \n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid index generation\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    try {\n      //get all the files in the commit\n      //use a set to workaround possible Lucene bug which returns same file name multiple times\n      Collection<String> files = new HashSet<String>(commit.getFileNames());\n      for (String fileName : files) {\n        if(fileName.endsWith(\".lock\")) continue;\n        File file = new File(core.getIndexDir(), fileName);\n        Map<String, Object> fileMeta = getFileInfo(file);\n        result.add(fileMeta);\n      }\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given index generation\");\n      rsp.add(\"exception\", e);\n      LOG.warn(\"Unable to get file names for indexCommit generation: \"\n               + gen, e);\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1 || core.getCoreDescriptor().getCoreContainer().isZooKeeperAware())\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","bugFix":null,"bugIntro":["19f02bb04467ed179738a398a7da80bbbe161c16","718607d99d02778db3280e64975663762c94170d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(GENERATION);\n    if (v == null) {\n      rsp.add(\"status\", \"no index generation specified\");\n      return;\n    }\n    long gen = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n \n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid index generation\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    Directory dir = null;\n    try {\n      // get all the files in the commit\n      // use a set to workaround possible Lucene bug which returns same file\n      // name multiple times\n      Collection<String> files = new HashSet<String>(commit.getFileNames());\n      dir = core.getDirectoryFactory().get(core.getNewIndexDir(), null);\n      try {\n        \n        for (String fileName : files) {\n          if (fileName.endsWith(\".lock\")) continue;\n          Map<String,Object> fileMeta = new HashMap<String,Object>();\n          fileMeta.put(NAME, fileName);\n          fileMeta.put(SIZE, dir.fileLength(fileName));\n          result.add(fileMeta);\n        }\n      } finally {\n        core.getDirectoryFactory().release(dir);\n      }\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given index generation\");\n      rsp.add(\"exception\", e);\n      LOG.error(\"Unable to get file names for indexCommit generation: \" + gen, e);\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1 || core.getCoreDescriptor().getCoreContainer().isZooKeeperAware())\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(GENERATION);\n    if (v == null) {\n      rsp.add(\"status\", \"no index generation specified\");\n      return;\n    }\n    long gen = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n \n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid index generation\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    try {\n      //get all the files in the commit\n      //use a set to workaround possible Lucene bug which returns same file name multiple times\n      Collection<String> files = new HashSet<String>(commit.getFileNames());\n      for (String fileName : files) {\n        if(fileName.endsWith(\".lock\")) continue;\n        File file = new File(core.getIndexDir(), fileName);\n        Map<String, Object> fileMeta = getFileInfo(file);\n        result.add(fileMeta);\n      }\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given index generation\");\n      rsp.add(\"exception\", e);\n      LOG.warn(\"Unable to get file names for indexCommit generation: \"\n               + gen, e);\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1 || core.getCoreDescriptor().getCoreContainer().isZooKeeperAware())\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"718607d99d02778db3280e64975663762c94170d","date":1354986964,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(GENERATION);\n    if (v == null) {\n      rsp.add(\"status\", \"no index generation specified\");\n      return;\n    }\n    long gen = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n \n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid index generation\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    Directory dir = null;\n    try {\n      // get all the files in the commit\n      // use a set to workaround possible Lucene bug which returns same file\n      // name multiple times\n      Collection<String> files = new HashSet<String>(commit.getFileNames());\n      dir = core.getDirectoryFactory().get(core.getNewIndexDir(), core.getSolrConfig().indexConfig.lockType);\n      try {\n        \n        for (String fileName : files) {\n          if (fileName.endsWith(\".lock\")) continue;\n          Map<String,Object> fileMeta = new HashMap<String,Object>();\n          fileMeta.put(NAME, fileName);\n          fileMeta.put(SIZE, dir.fileLength(fileName));\n          result.add(fileMeta);\n        }\n      } finally {\n        core.getDirectoryFactory().release(dir);\n      }\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given index generation\");\n      rsp.add(\"exception\", e);\n      LOG.error(\"Unable to get file names for indexCommit generation: \" + gen, e);\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1 || core.getCoreDescriptor().getCoreContainer().isZooKeeperAware())\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(GENERATION);\n    if (v == null) {\n      rsp.add(\"status\", \"no index generation specified\");\n      return;\n    }\n    long gen = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n \n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid index generation\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    Directory dir = null;\n    try {\n      // get all the files in the commit\n      // use a set to workaround possible Lucene bug which returns same file\n      // name multiple times\n      Collection<String> files = new HashSet<String>(commit.getFileNames());\n      dir = core.getDirectoryFactory().get(core.getNewIndexDir(), null);\n      try {\n        \n        for (String fileName : files) {\n          if (fileName.endsWith(\".lock\")) continue;\n          Map<String,Object> fileMeta = new HashMap<String,Object>();\n          fileMeta.put(NAME, fileName);\n          fileMeta.put(SIZE, dir.fileLength(fileName));\n          result.add(fileMeta);\n        }\n      } finally {\n        core.getDirectoryFactory().release(dir);\n      }\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given index generation\");\n      rsp.add(\"exception\", e);\n      LOG.error(\"Unable to get file names for indexCommit generation: \" + gen, e);\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1 || core.getCoreDescriptor().getCoreContainer().isZooKeeperAware())\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","bugFix":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(GENERATION);\n    if (v == null) {\n      rsp.add(\"status\", \"no index generation specified\");\n      return;\n    }\n    long gen = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n \n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid index generation\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    Directory dir = null;\n    try {\n      // get all the files in the commit\n      // use a set to workaround possible Lucene bug which returns same file\n      // name multiple times\n      Collection<String> files = new HashSet<String>(commit.getFileNames());\n      dir = core.getDirectoryFactory().get(core.getNewIndexDir(), core.getSolrConfig().indexConfig.lockType);\n      try {\n        \n        for (String fileName : files) {\n          if (fileName.endsWith(\".lock\")) continue;\n          Map<String,Object> fileMeta = new HashMap<String,Object>();\n          fileMeta.put(NAME, fileName);\n          fileMeta.put(SIZE, dir.fileLength(fileName));\n          result.add(fileMeta);\n        }\n      } finally {\n        core.getDirectoryFactory().release(dir);\n      }\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given index generation\");\n      rsp.add(\"exception\", e);\n      LOG.error(\"Unable to get file names for indexCommit generation: \" + gen, e);\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1 || core.getCoreDescriptor().getCoreContainer().isZooKeeperAware())\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(GENERATION);\n    if (v == null) {\n      rsp.add(\"status\", \"no index generation specified\");\n      return;\n    }\n    long gen = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n \n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid index generation\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    Directory dir = null;\n    try {\n      // get all the files in the commit\n      // use a set to workaround possible Lucene bug which returns same file\n      // name multiple times\n      Collection<String> files = new HashSet<String>(commit.getFileNames());\n      dir = core.getDirectoryFactory().get(core.getNewIndexDir(), null);\n      try {\n        \n        for (String fileName : files) {\n          if (fileName.endsWith(\".lock\")) continue;\n          Map<String,Object> fileMeta = new HashMap<String,Object>();\n          fileMeta.put(NAME, fileName);\n          fileMeta.put(SIZE, dir.fileLength(fileName));\n          result.add(fileMeta);\n        }\n      } finally {\n        core.getDirectoryFactory().release(dir);\n      }\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given index generation\");\n      rsp.add(\"exception\", e);\n      LOG.error(\"Unable to get file names for indexCommit generation: \" + gen, e);\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1 || core.getCoreDescriptor().getCoreContainer().isZooKeeperAware())\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674","date":1358098706,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(GENERATION);\n    if (v == null) {\n      rsp.add(\"status\", \"no index generation specified\");\n      return;\n    }\n    long gen = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n \n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid index generation\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    Directory dir = null;\n    try {\n      // get all the files in the commit\n      // use a set to workaround possible Lucene bug which returns same file\n      // name multiple times\n      Collection<String> files = new HashSet<String>(commit.getFileNames());\n      dir = core.getDirectoryFactory().get(core.getNewIndexDir(), DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n      try {\n        \n        for (String fileName : files) {\n          if (fileName.endsWith(\".lock\")) continue;\n          Map<String,Object> fileMeta = new HashMap<String,Object>();\n          fileMeta.put(NAME, fileName);\n          fileMeta.put(SIZE, dir.fileLength(fileName));\n          result.add(fileMeta);\n        }\n      } finally {\n        core.getDirectoryFactory().release(dir);\n      }\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given index generation\");\n      rsp.add(\"exception\", e);\n      LOG.error(\"Unable to get file names for indexCommit generation: \" + gen, e);\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1 || core.getCoreDescriptor().getCoreContainer().isZooKeeperAware())\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(GENERATION);\n    if (v == null) {\n      rsp.add(\"status\", \"no index generation specified\");\n      return;\n    }\n    long gen = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n \n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid index generation\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    Directory dir = null;\n    try {\n      // get all the files in the commit\n      // use a set to workaround possible Lucene bug which returns same file\n      // name multiple times\n      Collection<String> files = new HashSet<String>(commit.getFileNames());\n      dir = core.getDirectoryFactory().get(core.getNewIndexDir(), core.getSolrConfig().indexConfig.lockType);\n      try {\n        \n        for (String fileName : files) {\n          if (fileName.endsWith(\".lock\")) continue;\n          Map<String,Object> fileMeta = new HashMap<String,Object>();\n          fileMeta.put(NAME, fileName);\n          fileMeta.put(SIZE, dir.fileLength(fileName));\n          result.add(fileMeta);\n        }\n      } finally {\n        core.getDirectoryFactory().release(dir);\n      }\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given index generation\");\n      rsp.add(\"exception\", e);\n      LOG.error(\"Unable to get file names for indexCommit generation: \" + gen, e);\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1 || core.getCoreDescriptor().getCoreContainer().isZooKeeperAware())\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","bugFix":null,"bugIntro":["19f02bb04467ed179738a398a7da80bbbe161c16"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(GENERATION);\n    if (v == null) {\n      rsp.add(\"status\", \"no index generation specified\");\n      return;\n    }\n    long gen = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n \n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid index generation\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    Directory dir = null;\n    try {\n      // get all the files in the commit\n      // use a set to workaround possible Lucene bug which returns same file\n      // name multiple times\n      Collection<String> files = new HashSet<String>(commit.getFileNames());\n      dir = core.getDirectoryFactory().get(core.getNewIndexDir(), DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n      try {\n        \n        for (String fileName : files) {\n          if (fileName.endsWith(\".lock\")) continue;\n          Map<String,Object> fileMeta = new HashMap<String,Object>();\n          fileMeta.put(NAME, fileName);\n          fileMeta.put(SIZE, dir.fileLength(fileName));\n          result.add(fileMeta);\n        }\n      } finally {\n        core.getDirectoryFactory().release(dir);\n      }\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given index generation\");\n      rsp.add(\"exception\", e);\n      LOG.error(\"Unable to get file names for indexCommit generation: \" + gen, e);\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1 || core.getCoreDescriptor().getCoreContainer().isZooKeeperAware())\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(GENERATION);\n    if (v == null) {\n      rsp.add(\"status\", \"no index generation specified\");\n      return;\n    }\n    long gen = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n \n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid index generation\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    Directory dir = null;\n    try {\n      // get all the files in the commit\n      // use a set to workaround possible Lucene bug which returns same file\n      // name multiple times\n      Collection<String> files = new HashSet<String>(commit.getFileNames());\n      dir = core.getDirectoryFactory().get(core.getNewIndexDir(), core.getSolrConfig().indexConfig.lockType);\n      try {\n        \n        for (String fileName : files) {\n          if (fileName.endsWith(\".lock\")) continue;\n          Map<String,Object> fileMeta = new HashMap<String,Object>();\n          fileMeta.put(NAME, fileName);\n          fileMeta.put(SIZE, dir.fileLength(fileName));\n          result.add(fileMeta);\n        }\n      } finally {\n        core.getDirectoryFactory().release(dir);\n      }\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given index generation\");\n      rsp.add(\"exception\", e);\n      LOG.error(\"Unable to get file names for indexCommit generation: \" + gen, e);\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1 || core.getCoreDescriptor().getCoreContainer().isZooKeeperAware())\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(GENERATION);\n    if (v == null) {\n      rsp.add(\"status\", \"no index generation specified\");\n      return;\n    }\n    long gen = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n \n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid index generation\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<>();\n    Directory dir = null;\n    try {\n      // get all the files in the commit\n      // use a set to workaround possible Lucene bug which returns same file\n      // name multiple times\n      Collection<String> files = new HashSet<>(commit.getFileNames());\n      dir = core.getDirectoryFactory().get(core.getNewIndexDir(), DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n      try {\n        \n        for (String fileName : files) {\n          if (fileName.endsWith(\".lock\")) continue;\n          Map<String,Object> fileMeta = new HashMap<>();\n          fileMeta.put(NAME, fileName);\n          fileMeta.put(SIZE, dir.fileLength(fileName));\n          result.add(fileMeta);\n        }\n      } finally {\n        core.getDirectoryFactory().release(dir);\n      }\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given index generation\");\n      rsp.add(\"exception\", e);\n      LOG.error(\"Unable to get file names for indexCommit generation: \" + gen, e);\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1 || core.getCoreDescriptor().getCoreContainer().isZooKeeperAware())\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(GENERATION);\n    if (v == null) {\n      rsp.add(\"status\", \"no index generation specified\");\n      return;\n    }\n    long gen = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n \n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid index generation\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    Directory dir = null;\n    try {\n      // get all the files in the commit\n      // use a set to workaround possible Lucene bug which returns same file\n      // name multiple times\n      Collection<String> files = new HashSet<String>(commit.getFileNames());\n      dir = core.getDirectoryFactory().get(core.getNewIndexDir(), DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n      try {\n        \n        for (String fileName : files) {\n          if (fileName.endsWith(\".lock\")) continue;\n          Map<String,Object> fileMeta = new HashMap<String,Object>();\n          fileMeta.put(NAME, fileName);\n          fileMeta.put(SIZE, dir.fileLength(fileName));\n          result.add(fileMeta);\n        }\n      } finally {\n        core.getDirectoryFactory().release(dir);\n      }\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given index generation\");\n      rsp.add(\"exception\", e);\n      LOG.error(\"Unable to get file names for indexCommit generation: \" + gen, e);\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1 || core.getCoreDescriptor().getCoreContainer().isZooKeeperAware())\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","bugFix":null,"bugIntro":["19f02bb04467ed179738a398a7da80bbbe161c16"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8d50ba1695a40ff11a41bbfc1ad45c7bfd6a5738","date":1423258737,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(GENERATION);\n    if (v == null) {\n      rsp.add(\"status\", \"no index generation specified\");\n      return;\n    }\n    long gen = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n \n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid index generation\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<>();\n    Directory dir = null;\n    try {\n      dir = core.getDirectoryFactory().get(core.getNewIndexDir(), DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n      SegmentInfos infos = SegmentInfos.readCommit(dir, commit.getSegmentsFileName());\n      for (SegmentCommitInfo commitInfo : infos) {\n        for (String file : commitInfo.files()) {\n          Map<String,Object> fileMeta = new HashMap<>();\n          fileMeta.put(NAME, file);\n          fileMeta.put(SIZE, dir.fileLength(file));\n          \n          try (final IndexInput in = dir.openInput(file, IOContext.READONCE)) {\n            try {\n              long checksum = CodecUtil.retrieveChecksum(in);\n              fileMeta.put(CHECKSUM, checksum);\n            } catch(Exception e) {\n              LOG.warn(\"Could not read checksum from index file.\", e);\n            }\n          }\n          \n          result.add(fileMeta);\n        }\n      }\n\n      // add the segments_N file\n      Map<String,Object> fileMeta = new HashMap<>();\n      fileMeta.put(NAME, infos.getSegmentsFileName());\n      fileMeta.put(SIZE, dir.fileLength(infos.getSegmentsFileName()));\n      if (infos.getId() != null) {\n        try (final IndexInput in = dir.openInput(infos.getSegmentsFileName(), IOContext.READONCE)) {\n          fileMeta.put(CHECKSUM, CodecUtil.retrieveChecksum(in));\n        }\n      }\n      result.add(fileMeta);\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given index generation\");\n      rsp.add(\"exception\", e);\n      LOG.error(\"Unable to get file names for indexCommit generation: \" + gen, e);\n    } finally {\n      if (dir != null) {\n        try {\n          core.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"Could not release directory after fetching file list\", e);\n        }\n      }\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1 || core.getCoreDescriptor().getCoreContainer().isZooKeeperAware())\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(GENERATION);\n    if (v == null) {\n      rsp.add(\"status\", \"no index generation specified\");\n      return;\n    }\n    long gen = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n \n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid index generation\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<>();\n    Directory dir = null;\n    try {\n      // get all the files in the commit\n      // use a set to workaround possible Lucene bug which returns same file\n      // name multiple times\n      Collection<String> files = new HashSet<>(commit.getFileNames());\n      dir = core.getDirectoryFactory().get(core.getNewIndexDir(), DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n      try {\n        \n        for (String fileName : files) {\n          if (fileName.endsWith(\".lock\")) continue;\n          Map<String,Object> fileMeta = new HashMap<>();\n          fileMeta.put(NAME, fileName);\n          fileMeta.put(SIZE, dir.fileLength(fileName));\n          result.add(fileMeta);\n        }\n      } finally {\n        core.getDirectoryFactory().release(dir);\n      }\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given index generation\");\n      rsp.add(\"exception\", e);\n      LOG.error(\"Unable to get file names for indexCommit generation: \" + gen, e);\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1 || core.getCoreDescriptor().getCoreContainer().isZooKeeperAware())\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","bugFix":null,"bugIntro":["19f02bb04467ed179738a398a7da80bbbe161c16"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cef15a56c64f46175c1d6df43f47d4b09f44d57b","date":1423328408,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(GENERATION);\n    if (v == null) {\n      rsp.add(\"status\", \"no index generation specified\");\n      return;\n    }\n    long gen = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n \n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid index generation\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<>();\n    Directory dir = null;\n    try {\n      dir = core.getDirectoryFactory().get(core.getNewIndexDir(), DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n      SegmentInfos infos = SegmentInfos.readCommit(dir, commit.getSegmentsFileName());\n      for (SegmentCommitInfo commitInfo : infos) {\n        for (String file : commitInfo.files()) {\n          Map<String,Object> fileMeta = new HashMap<>();\n          fileMeta.put(NAME, file);\n          fileMeta.put(SIZE, dir.fileLength(file));\n          \n          try (final IndexInput in = dir.openInput(file, IOContext.READONCE)) {\n            try {\n              long checksum = CodecUtil.retrieveChecksum(in);\n              fileMeta.put(CHECKSUM, checksum);\n            } catch(Exception e) {\n              LOG.warn(\"Could not read checksum from index file.\", e);\n            }\n          }\n          \n          result.add(fileMeta);\n        }\n      }\n\n      // add the segments_N file\n      \n      Map<String,Object> fileMeta = new HashMap<>();\n      fileMeta.put(NAME, infos.getSegmentsFileName());\n      fileMeta.put(SIZE, dir.fileLength(infos.getSegmentsFileName()));\n      if (infos.getId() != null) {\n        try (final IndexInput in = dir.openInput(infos.getSegmentsFileName(), IOContext.READONCE)) {\n          try {\n            fileMeta.put(CHECKSUM, CodecUtil.retrieveChecksum(in));\n          } catch(Exception e) {\n             LOG.warn(\"Could not read checksum from index file.\", e);\n          }\n        }\n      }\n      result.add(fileMeta);\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given index generation\");\n      rsp.add(\"exception\", e);\n      LOG.error(\"Unable to get file names for indexCommit generation: \" + gen, e);\n    } finally {\n      if (dir != null) {\n        try {\n          core.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"Could not release directory after fetching file list\", e);\n        }\n      }\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1 || core.getCoreDescriptor().getCoreContainer().isZooKeeperAware())\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(GENERATION);\n    if (v == null) {\n      rsp.add(\"status\", \"no index generation specified\");\n      return;\n    }\n    long gen = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n \n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid index generation\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<>();\n    Directory dir = null;\n    try {\n      dir = core.getDirectoryFactory().get(core.getNewIndexDir(), DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n      SegmentInfos infos = SegmentInfos.readCommit(dir, commit.getSegmentsFileName());\n      for (SegmentCommitInfo commitInfo : infos) {\n        for (String file : commitInfo.files()) {\n          Map<String,Object> fileMeta = new HashMap<>();\n          fileMeta.put(NAME, file);\n          fileMeta.put(SIZE, dir.fileLength(file));\n          \n          try (final IndexInput in = dir.openInput(file, IOContext.READONCE)) {\n            try {\n              long checksum = CodecUtil.retrieveChecksum(in);\n              fileMeta.put(CHECKSUM, checksum);\n            } catch(Exception e) {\n              LOG.warn(\"Could not read checksum from index file.\", e);\n            }\n          }\n          \n          result.add(fileMeta);\n        }\n      }\n\n      // add the segments_N file\n      Map<String,Object> fileMeta = new HashMap<>();\n      fileMeta.put(NAME, infos.getSegmentsFileName());\n      fileMeta.put(SIZE, dir.fileLength(infos.getSegmentsFileName()));\n      if (infos.getId() != null) {\n        try (final IndexInput in = dir.openInput(infos.getSegmentsFileName(), IOContext.READONCE)) {\n          fileMeta.put(CHECKSUM, CodecUtil.retrieveChecksum(in));\n        }\n      }\n      result.add(fileMeta);\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given index generation\");\n      rsp.add(\"exception\", e);\n      LOG.error(\"Unable to get file names for indexCommit generation: \" + gen, e);\n    } finally {\n      if (dir != null) {\n        try {\n          core.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"Could not release directory after fetching file list\", e);\n        }\n      }\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1 || core.getCoreDescriptor().getCoreContainer().isZooKeeperAware())\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","bugFix":null,"bugIntro":["19f02bb04467ed179738a398a7da80bbbe161c16"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"46072079af1a2f83383e9483505da7226a0aec03","date":1427952562,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(GENERATION);\n    if (v == null) {\n      rsp.add(\"status\", \"no index generation specified\");\n      return;\n    }\n    long gen = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n \n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid index generation\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<>();\n    Directory dir = null;\n    try {\n      dir = core.getDirectoryFactory().get(core.getNewIndexDir(), DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n      SegmentInfos infos = SegmentInfos.readCommit(dir, commit.getSegmentsFileName());\n      for (SegmentCommitInfo commitInfo : infos) {\n        for (String file : commitInfo.files()) {\n          Map<String,Object> fileMeta = new HashMap<>();\n          fileMeta.put(NAME, file);\n          fileMeta.put(SIZE, dir.fileLength(file));\n          \n          try (final IndexInput in = dir.openInput(file, IOContext.READONCE)) {\n            try {\n              long checksum = CodecUtil.retrieveChecksum(in);\n              fileMeta.put(CHECKSUM, checksum);\n            } catch(Exception e) {\n              LOG.warn(\"Could not read checksum from index file: \" + file, e);\n            }\n          }\n          \n          result.add(fileMeta);\n        }\n      }\n\n      // add the segments_N file\n      \n      Map<String,Object> fileMeta = new HashMap<>();\n      fileMeta.put(NAME, infos.getSegmentsFileName());\n      fileMeta.put(SIZE, dir.fileLength(infos.getSegmentsFileName()));\n      if (infos.getId() != null) {\n        try (final IndexInput in = dir.openInput(infos.getSegmentsFileName(), IOContext.READONCE)) {\n          try {\n            fileMeta.put(CHECKSUM, CodecUtil.retrieveChecksum(in));\n          } catch(Exception e) {\n             LOG.warn(\"Could not read checksum from index file: \" + infos.getSegmentsFileName(), e);\n          }\n        }\n      }\n      result.add(fileMeta);\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given index generation\");\n      rsp.add(\"exception\", e);\n      LOG.error(\"Unable to get file names for indexCommit generation: \" + gen, e);\n    } finally {\n      if (dir != null) {\n        try {\n          core.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"Could not release directory after fetching file list\", e);\n        }\n      }\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1 || core.getCoreDescriptor().getCoreContainer().isZooKeeperAware())\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(GENERATION);\n    if (v == null) {\n      rsp.add(\"status\", \"no index generation specified\");\n      return;\n    }\n    long gen = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n \n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid index generation\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<>();\n    Directory dir = null;\n    try {\n      dir = core.getDirectoryFactory().get(core.getNewIndexDir(), DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n      SegmentInfos infos = SegmentInfos.readCommit(dir, commit.getSegmentsFileName());\n      for (SegmentCommitInfo commitInfo : infos) {\n        for (String file : commitInfo.files()) {\n          Map<String,Object> fileMeta = new HashMap<>();\n          fileMeta.put(NAME, file);\n          fileMeta.put(SIZE, dir.fileLength(file));\n          \n          try (final IndexInput in = dir.openInput(file, IOContext.READONCE)) {\n            try {\n              long checksum = CodecUtil.retrieveChecksum(in);\n              fileMeta.put(CHECKSUM, checksum);\n            } catch(Exception e) {\n              LOG.warn(\"Could not read checksum from index file.\", e);\n            }\n          }\n          \n          result.add(fileMeta);\n        }\n      }\n\n      // add the segments_N file\n      \n      Map<String,Object> fileMeta = new HashMap<>();\n      fileMeta.put(NAME, infos.getSegmentsFileName());\n      fileMeta.put(SIZE, dir.fileLength(infos.getSegmentsFileName()));\n      if (infos.getId() != null) {\n        try (final IndexInput in = dir.openInput(infos.getSegmentsFileName(), IOContext.READONCE)) {\n          try {\n            fileMeta.put(CHECKSUM, CodecUtil.retrieveChecksum(in));\n          } catch(Exception e) {\n             LOG.warn(\"Could not read checksum from index file.\", e);\n          }\n        }\n      }\n      result.add(fileMeta);\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given index generation\");\n      rsp.add(\"exception\", e);\n      LOG.error(\"Unable to get file names for indexCommit generation: \" + gen, e);\n    } finally {\n      if (dir != null) {\n        try {\n          core.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"Could not release directory after fetching file list\", e);\n        }\n      }\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1 || core.getCoreDescriptor().getCoreContainer().isZooKeeperAware())\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(GENERATION);\n    if (v == null) {\n      rsp.add(\"status\", \"no index generation specified\");\n      return;\n    }\n    long gen = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n \n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid index generation\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<>();\n    Directory dir = null;\n    try {\n      dir = core.getDirectoryFactory().get(core.getNewIndexDir(), DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n      SegmentInfos infos = SegmentInfos.readCommit(dir, commit.getSegmentsFileName());\n      for (SegmentCommitInfo commitInfo : infos) {\n        for (String file : commitInfo.files()) {\n          Map<String,Object> fileMeta = new HashMap<>();\n          fileMeta.put(NAME, file);\n          fileMeta.put(SIZE, dir.fileLength(file));\n          \n          try (final IndexInput in = dir.openInput(file, IOContext.READONCE)) {\n            try {\n              long checksum = CodecUtil.retrieveChecksum(in);\n              fileMeta.put(CHECKSUM, checksum);\n            } catch(Exception e) {\n              LOG.warn(\"Could not read checksum from index file: \" + file, e);\n            }\n          }\n          \n          result.add(fileMeta);\n        }\n      }\n\n      // add the segments_N file\n      \n      Map<String,Object> fileMeta = new HashMap<>();\n      fileMeta.put(NAME, infos.getSegmentsFileName());\n      fileMeta.put(SIZE, dir.fileLength(infos.getSegmentsFileName()));\n      if (infos.getId() != null) {\n        try (final IndexInput in = dir.openInput(infos.getSegmentsFileName(), IOContext.READONCE)) {\n          try {\n            fileMeta.put(CHECKSUM, CodecUtil.retrieveChecksum(in));\n          } catch(Exception e) {\n             LOG.warn(\"Could not read checksum from index file: \" + infos.getSegmentsFileName(), e);\n          }\n        }\n      }\n      result.add(fileMeta);\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given index generation\");\n      rsp.add(\"exception\", e);\n      LOG.error(\"Unable to get file names for indexCommit generation: \" + gen, e);\n    } finally {\n      if (dir != null) {\n        try {\n          core.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"Could not release directory after fetching file list\", e);\n        }\n      }\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1 || core.getCoreDescriptor().getCoreContainer().isZooKeeperAware())\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(GENERATION);\n    if (v == null) {\n      rsp.add(\"status\", \"no index generation specified\");\n      return;\n    }\n    long gen = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n \n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid index generation\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<>();\n    Directory dir = null;\n    try {\n      dir = core.getDirectoryFactory().get(core.getNewIndexDir(), DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n      SegmentInfos infos = SegmentInfos.readCommit(dir, commit.getSegmentsFileName());\n      for (SegmentCommitInfo commitInfo : infos) {\n        for (String file : commitInfo.files()) {\n          Map<String,Object> fileMeta = new HashMap<>();\n          fileMeta.put(NAME, file);\n          fileMeta.put(SIZE, dir.fileLength(file));\n          \n          try (final IndexInput in = dir.openInput(file, IOContext.READONCE)) {\n            try {\n              long checksum = CodecUtil.retrieveChecksum(in);\n              fileMeta.put(CHECKSUM, checksum);\n            } catch(Exception e) {\n              LOG.warn(\"Could not read checksum from index file.\", e);\n            }\n          }\n          \n          result.add(fileMeta);\n        }\n      }\n\n      // add the segments_N file\n      \n      Map<String,Object> fileMeta = new HashMap<>();\n      fileMeta.put(NAME, infos.getSegmentsFileName());\n      fileMeta.put(SIZE, dir.fileLength(infos.getSegmentsFileName()));\n      if (infos.getId() != null) {\n        try (final IndexInput in = dir.openInput(infos.getSegmentsFileName(), IOContext.READONCE)) {\n          try {\n            fileMeta.put(CHECKSUM, CodecUtil.retrieveChecksum(in));\n          } catch(Exception e) {\n             LOG.warn(\"Could not read checksum from index file.\", e);\n          }\n        }\n      }\n      result.add(fileMeta);\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given index generation\");\n      rsp.add(\"exception\", e);\n      LOG.error(\"Unable to get file names for indexCommit generation: \" + gen, e);\n    } finally {\n      if (dir != null) {\n        try {\n          core.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"Could not release directory after fetching file list\", e);\n        }\n      }\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1 || core.getCoreDescriptor().getCoreContainer().isZooKeeperAware())\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b13106276bb5ea342253dbf6aae7b675adb38d3","date":1428054414,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(GENERATION);\n    if (v == null) {\n      rsp.add(\"status\", \"no index generation specified\");\n      return;\n    }\n    long gen = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n\n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid index generation\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<>();\n    Directory dir = null;\n    try {\n      dir = core.getDirectoryFactory().get(core.getNewIndexDir(), DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n      SegmentInfos infos = SegmentInfos.readCommit(dir, commit.getSegmentsFileName());\n      for (SegmentCommitInfo commitInfo : infos) {\n        for (String file : commitInfo.files()) {\n          Map<String,Object> fileMeta = new HashMap<>();\n          fileMeta.put(NAME, file);\n          fileMeta.put(SIZE, dir.fileLength(file));\n\n          try (final IndexInput in = dir.openInput(file, IOContext.READONCE)) {\n            try {\n              long checksum = CodecUtil.retrieveChecksum(in);\n              fileMeta.put(CHECKSUM, checksum);\n            } catch(Exception e) {\n              LOG.warn(\"Could not read checksum from index file: \" + file, e);\n            }\n          }\n\n          result.add(fileMeta);\n        }\n      }\n\n      // add the segments_N file\n\n      Map<String,Object> fileMeta = new HashMap<>();\n      fileMeta.put(NAME, infos.getSegmentsFileName());\n      fileMeta.put(SIZE, dir.fileLength(infos.getSegmentsFileName()));\n      if (infos.getId() != null) {\n        try (final IndexInput in = dir.openInput(infos.getSegmentsFileName(), IOContext.READONCE)) {\n          try {\n            fileMeta.put(CHECKSUM, CodecUtil.retrieveChecksum(in));\n          } catch(Exception e) {\n             LOG.warn(\"Could not read checksum from index file: \" + infos.getSegmentsFileName(), e);\n          }\n        }\n      }\n      result.add(fileMeta);\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given index generation\");\n      rsp.add(EXCEPTION, e);\n      LOG.error(\"Unable to get file names for indexCommit generation: \" + gen, e);\n    } finally {\n      if (dir != null) {\n        try {\n          core.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"Could not release directory after fetching file list\", e);\n        }\n      }\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1 || core.getCoreDescriptor().getCoreContainer().isZooKeeperAware())\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(GENERATION);\n    if (v == null) {\n      rsp.add(\"status\", \"no index generation specified\");\n      return;\n    }\n    long gen = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n \n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid index generation\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<>();\n    Directory dir = null;\n    try {\n      dir = core.getDirectoryFactory().get(core.getNewIndexDir(), DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n      SegmentInfos infos = SegmentInfos.readCommit(dir, commit.getSegmentsFileName());\n      for (SegmentCommitInfo commitInfo : infos) {\n        for (String file : commitInfo.files()) {\n          Map<String,Object> fileMeta = new HashMap<>();\n          fileMeta.put(NAME, file);\n          fileMeta.put(SIZE, dir.fileLength(file));\n          \n          try (final IndexInput in = dir.openInput(file, IOContext.READONCE)) {\n            try {\n              long checksum = CodecUtil.retrieveChecksum(in);\n              fileMeta.put(CHECKSUM, checksum);\n            } catch(Exception e) {\n              LOG.warn(\"Could not read checksum from index file: \" + file, e);\n            }\n          }\n          \n          result.add(fileMeta);\n        }\n      }\n\n      // add the segments_N file\n      \n      Map<String,Object> fileMeta = new HashMap<>();\n      fileMeta.put(NAME, infos.getSegmentsFileName());\n      fileMeta.put(SIZE, dir.fileLength(infos.getSegmentsFileName()));\n      if (infos.getId() != null) {\n        try (final IndexInput in = dir.openInput(infos.getSegmentsFileName(), IOContext.READONCE)) {\n          try {\n            fileMeta.put(CHECKSUM, CodecUtil.retrieveChecksum(in));\n          } catch(Exception e) {\n             LOG.warn(\"Could not read checksum from index file: \" + infos.getSegmentsFileName(), e);\n          }\n        }\n      }\n      result.add(fileMeta);\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given index generation\");\n      rsp.add(\"exception\", e);\n      LOG.error(\"Unable to get file names for indexCommit generation: \" + gen, e);\n    } finally {\n      if (dir != null) {\n        try {\n          core.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"Could not release directory after fetching file list\", e);\n        }\n      }\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1 || core.getCoreDescriptor().getCoreContainer().isZooKeeperAware())\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","bugFix":null,"bugIntro":["19f02bb04467ed179738a398a7da80bbbe161c16","5cb65c1c2f90852e718f86c8be09beb1c4dba408"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","date":1428091986,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(GENERATION);\n    if (v == null) {\n      rsp.add(\"status\", \"no index generation specified\");\n      return;\n    }\n    long gen = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n\n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid index generation\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<>();\n    Directory dir = null;\n    try {\n      dir = core.getDirectoryFactory().get(core.getNewIndexDir(), DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n      SegmentInfos infos = SegmentInfos.readCommit(dir, commit.getSegmentsFileName());\n      for (SegmentCommitInfo commitInfo : infos) {\n        for (String file : commitInfo.files()) {\n          Map<String,Object> fileMeta = new HashMap<>();\n          fileMeta.put(NAME, file);\n          fileMeta.put(SIZE, dir.fileLength(file));\n\n          try (final IndexInput in = dir.openInput(file, IOContext.READONCE)) {\n            try {\n              long checksum = CodecUtil.retrieveChecksum(in);\n              fileMeta.put(CHECKSUM, checksum);\n            } catch(Exception e) {\n              LOG.warn(\"Could not read checksum from index file: \" + file, e);\n            }\n          }\n\n          result.add(fileMeta);\n        }\n      }\n\n      // add the segments_N file\n\n      Map<String,Object> fileMeta = new HashMap<>();\n      fileMeta.put(NAME, infos.getSegmentsFileName());\n      fileMeta.put(SIZE, dir.fileLength(infos.getSegmentsFileName()));\n      if (infos.getId() != null) {\n        try (final IndexInput in = dir.openInput(infos.getSegmentsFileName(), IOContext.READONCE)) {\n          try {\n            fileMeta.put(CHECKSUM, CodecUtil.retrieveChecksum(in));\n          } catch(Exception e) {\n             LOG.warn(\"Could not read checksum from index file: \" + infos.getSegmentsFileName(), e);\n          }\n        }\n      }\n      result.add(fileMeta);\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given index generation\");\n      rsp.add(EXCEPTION, e);\n      LOG.error(\"Unable to get file names for indexCommit generation: \" + gen, e);\n    } finally {\n      if (dir != null) {\n        try {\n          core.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"Could not release directory after fetching file list\", e);\n        }\n      }\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1 || core.getCoreDescriptor().getCoreContainer().isZooKeeperAware())\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(GENERATION);\n    if (v == null) {\n      rsp.add(\"status\", \"no index generation specified\");\n      return;\n    }\n    long gen = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n \n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid index generation\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<>();\n    Directory dir = null;\n    try {\n      dir = core.getDirectoryFactory().get(core.getNewIndexDir(), DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n      SegmentInfos infos = SegmentInfos.readCommit(dir, commit.getSegmentsFileName());\n      for (SegmentCommitInfo commitInfo : infos) {\n        for (String file : commitInfo.files()) {\n          Map<String,Object> fileMeta = new HashMap<>();\n          fileMeta.put(NAME, file);\n          fileMeta.put(SIZE, dir.fileLength(file));\n          \n          try (final IndexInput in = dir.openInput(file, IOContext.READONCE)) {\n            try {\n              long checksum = CodecUtil.retrieveChecksum(in);\n              fileMeta.put(CHECKSUM, checksum);\n            } catch(Exception e) {\n              LOG.warn(\"Could not read checksum from index file: \" + file, e);\n            }\n          }\n          \n          result.add(fileMeta);\n        }\n      }\n\n      // add the segments_N file\n      \n      Map<String,Object> fileMeta = new HashMap<>();\n      fileMeta.put(NAME, infos.getSegmentsFileName());\n      fileMeta.put(SIZE, dir.fileLength(infos.getSegmentsFileName()));\n      if (infos.getId() != null) {\n        try (final IndexInput in = dir.openInput(infos.getSegmentsFileName(), IOContext.READONCE)) {\n          try {\n            fileMeta.put(CHECKSUM, CodecUtil.retrieveChecksum(in));\n          } catch(Exception e) {\n             LOG.warn(\"Could not read checksum from index file: \" + infos.getSegmentsFileName(), e);\n          }\n        }\n      }\n      result.add(fileMeta);\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given index generation\");\n      rsp.add(\"exception\", e);\n      LOG.error(\"Unable to get file names for indexCommit generation: \" + gen, e);\n    } finally {\n      if (dir != null) {\n        try {\n          core.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"Could not release directory after fetching file list\", e);\n        }\n      }\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1 || core.getCoreDescriptor().getCoreContainer().isZooKeeperAware())\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(GENERATION);\n    if (v == null) {\n      rsp.add(\"status\", \"no index generation specified\");\n      return;\n    }\n    long gen = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n\n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid index generation\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<>();\n    Directory dir = null;\n    try {\n      dir = core.getDirectoryFactory().get(core.getNewIndexDir(), DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n      SegmentInfos infos = SegmentInfos.readCommit(dir, commit.getSegmentsFileName());\n      for (SegmentCommitInfo commitInfo : infos) {\n        for (String file : commitInfo.files()) {\n          Map<String,Object> fileMeta = new HashMap<>();\n          fileMeta.put(NAME, file);\n          fileMeta.put(SIZE, dir.fileLength(file));\n\n          try (final IndexInput in = dir.openInput(file, IOContext.READONCE)) {\n            try {\n              long checksum = CodecUtil.retrieveChecksum(in);\n              fileMeta.put(CHECKSUM, checksum);\n            } catch(Exception e) {\n              LOG.warn(\"Could not read checksum from index file: \" + file, e);\n            }\n          }\n\n          result.add(fileMeta);\n        }\n      }\n\n      // add the segments_N file\n\n      Map<String,Object> fileMeta = new HashMap<>();\n      fileMeta.put(NAME, infos.getSegmentsFileName());\n      fileMeta.put(SIZE, dir.fileLength(infos.getSegmentsFileName()));\n      if (infos.getId() != null) {\n        try (final IndexInput in = dir.openInput(infos.getSegmentsFileName(), IOContext.READONCE)) {\n          try {\n            fileMeta.put(CHECKSUM, CodecUtil.retrieveChecksum(in));\n          } catch(Exception e) {\n             LOG.warn(\"Could not read checksum from index file: \" + infos.getSegmentsFileName(), e);\n          }\n        }\n      }\n      result.add(fileMeta);\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given index generation\");\n      rsp.add(EXCEPTION, e);\n      LOG.error(\"Unable to get file names for indexCommit generation: \" + gen, e);\n    } finally {\n      if (dir != null) {\n        try {\n          core.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"Could not release directory after fetching file list\", e);\n        }\n      }\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n\n    // fetch list of tlog files only if cdcr is activated\n    if (core.getUpdateHandler().getUpdateLog() != null && core.getUpdateHandler().getUpdateLog() instanceof CdcrUpdateLog) {\n      List<Map<String, Object>> tlogfiles = getTlogFileList();\n      LOG.info(\"Adding tlog files to list: \" + tlogfiles);\n      rsp.add(TLOG_FILES, tlogfiles);\n    }\n\n    if (confFileNameAlias.size() < 1 || core.getCoreDescriptor().getCoreContainer().isZooKeeperAware())\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(GENERATION);\n    if (v == null) {\n      rsp.add(\"status\", \"no index generation specified\");\n      return;\n    }\n    long gen = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n\n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid index generation\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<>();\n    Directory dir = null;\n    try {\n      dir = core.getDirectoryFactory().get(core.getNewIndexDir(), DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n      SegmentInfos infos = SegmentInfos.readCommit(dir, commit.getSegmentsFileName());\n      for (SegmentCommitInfo commitInfo : infos) {\n        for (String file : commitInfo.files()) {\n          Map<String,Object> fileMeta = new HashMap<>();\n          fileMeta.put(NAME, file);\n          fileMeta.put(SIZE, dir.fileLength(file));\n\n          try (final IndexInput in = dir.openInput(file, IOContext.READONCE)) {\n            try {\n              long checksum = CodecUtil.retrieveChecksum(in);\n              fileMeta.put(CHECKSUM, checksum);\n            } catch(Exception e) {\n              LOG.warn(\"Could not read checksum from index file: \" + file, e);\n            }\n          }\n\n          result.add(fileMeta);\n        }\n      }\n\n      // add the segments_N file\n\n      Map<String,Object> fileMeta = new HashMap<>();\n      fileMeta.put(NAME, infos.getSegmentsFileName());\n      fileMeta.put(SIZE, dir.fileLength(infos.getSegmentsFileName()));\n      if (infos.getId() != null) {\n        try (final IndexInput in = dir.openInput(infos.getSegmentsFileName(), IOContext.READONCE)) {\n          try {\n            fileMeta.put(CHECKSUM, CodecUtil.retrieveChecksum(in));\n          } catch(Exception e) {\n             LOG.warn(\"Could not read checksum from index file: \" + infos.getSegmentsFileName(), e);\n          }\n        }\n      }\n      result.add(fileMeta);\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given index generation\");\n      rsp.add(EXCEPTION, e);\n      LOG.error(\"Unable to get file names for indexCommit generation: \" + gen, e);\n    } finally {\n      if (dir != null) {\n        try {\n          core.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"Could not release directory after fetching file list\", e);\n        }\n      }\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1 || core.getCoreDescriptor().getCoreContainer().isZooKeeperAware())\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","bugFix":null,"bugIntro":["9767eba84e83b05b2a675421e190f4a4c15dad44","19f02bb04467ed179738a398a7da80bbbe161c16"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"77cae179618908dcb534af567cdf3019505ada6c","date":1449365361,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(GENERATION);\n    if (v == null) {\n      rsp.add(\"status\", \"no index generation specified\");\n      return;\n    }\n    long gen = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n\n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid index generation\");\n      return;\n    }\n\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<>();\n    Directory dir = null;\n    try {\n      dir = core.getDirectoryFactory().get(core.getNewIndexDir(), DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n      SegmentInfos infos = SegmentInfos.readCommit(dir, commit.getSegmentsFileName());\n      for (SegmentCommitInfo commitInfo : infos) {\n        for (String file : commitInfo.files()) {\n          Map<String, Object> fileMeta = new HashMap<>();\n          fileMeta.put(NAME, file);\n          fileMeta.put(SIZE, dir.fileLength(file));\n\n          try (final IndexInput in = dir.openInput(file, IOContext.READONCE)) {\n            try {\n              long checksum = CodecUtil.retrieveChecksum(in);\n              fileMeta.put(CHECKSUM, checksum);\n            } catch (Exception e) {\n              LOG.warn(\"Could not read checksum from index file: \" + file, e);\n            }\n          }\n\n          result.add(fileMeta);\n        }\n      }\n\n      // add the segments_N file\n\n      Map<String, Object> fileMeta = new HashMap<>();\n      fileMeta.put(NAME, infos.getSegmentsFileName());\n      fileMeta.put(SIZE, dir.fileLength(infos.getSegmentsFileName()));\n      if (infos.getId() != null) {\n        try (final IndexInput in = dir.openInput(infos.getSegmentsFileName(), IOContext.READONCE)) {\n          try {\n            fileMeta.put(CHECKSUM, CodecUtil.retrieveChecksum(in));\n          } catch (Exception e) {\n            LOG.warn(\"Could not read checksum from index file: \" + infos.getSegmentsFileName(), e);\n          }\n        }\n      }\n      result.add(fileMeta);\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given index generation\");\n      rsp.add(EXCEPTION, e);\n      LOG.error(\"Unable to get file names for indexCommit generation: \" + gen, e);\n    } finally {\n      if (dir != null) {\n        try {\n          core.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"Could not release directory after fetching file list\", e);\n        }\n      }\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n\n    // fetch list of tlog files only if cdcr is activated\n    if (core.getUpdateHandler().getUpdateLog() != null && core.getUpdateHandler().getUpdateLog() instanceof CdcrUpdateLog) {\n      try {\n        List<Map<String, Object>> tlogfiles = getTlogFileList(commit);\n        LOG.info(\"Adding tlog files to list: \" + tlogfiles);\n        rsp.add(TLOG_FILES, tlogfiles);\n      }\n      catch (IOException e) {\n        rsp.add(\"status\", \"unable to get tlog file names for given index generation\");\n        rsp.add(EXCEPTION, e);\n        LOG.error(\"Unable to get tlog file names for indexCommit generation: \" + gen, e);\n      }\n    }\n\n    if (confFileNameAlias.size() < 1 || core.getCoreDescriptor().getCoreContainer().isZooKeeperAware())\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(GENERATION);\n    if (v == null) {\n      rsp.add(\"status\", \"no index generation specified\");\n      return;\n    }\n    long gen = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n\n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid index generation\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<>();\n    Directory dir = null;\n    try {\n      dir = core.getDirectoryFactory().get(core.getNewIndexDir(), DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n      SegmentInfos infos = SegmentInfos.readCommit(dir, commit.getSegmentsFileName());\n      for (SegmentCommitInfo commitInfo : infos) {\n        for (String file : commitInfo.files()) {\n          Map<String,Object> fileMeta = new HashMap<>();\n          fileMeta.put(NAME, file);\n          fileMeta.put(SIZE, dir.fileLength(file));\n\n          try (final IndexInput in = dir.openInput(file, IOContext.READONCE)) {\n            try {\n              long checksum = CodecUtil.retrieveChecksum(in);\n              fileMeta.put(CHECKSUM, checksum);\n            } catch(Exception e) {\n              LOG.warn(\"Could not read checksum from index file: \" + file, e);\n            }\n          }\n\n          result.add(fileMeta);\n        }\n      }\n\n      // add the segments_N file\n\n      Map<String,Object> fileMeta = new HashMap<>();\n      fileMeta.put(NAME, infos.getSegmentsFileName());\n      fileMeta.put(SIZE, dir.fileLength(infos.getSegmentsFileName()));\n      if (infos.getId() != null) {\n        try (final IndexInput in = dir.openInput(infos.getSegmentsFileName(), IOContext.READONCE)) {\n          try {\n            fileMeta.put(CHECKSUM, CodecUtil.retrieveChecksum(in));\n          } catch(Exception e) {\n             LOG.warn(\"Could not read checksum from index file: \" + infos.getSegmentsFileName(), e);\n          }\n        }\n      }\n      result.add(fileMeta);\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given index generation\");\n      rsp.add(EXCEPTION, e);\n      LOG.error(\"Unable to get file names for indexCommit generation: \" + gen, e);\n    } finally {\n      if (dir != null) {\n        try {\n          core.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"Could not release directory after fetching file list\", e);\n        }\n      }\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n\n    // fetch list of tlog files only if cdcr is activated\n    if (core.getUpdateHandler().getUpdateLog() != null && core.getUpdateHandler().getUpdateLog() instanceof CdcrUpdateLog) {\n      List<Map<String, Object>> tlogfiles = getTlogFileList();\n      LOG.info(\"Adding tlog files to list: \" + tlogfiles);\n      rsp.add(TLOG_FILES, tlogfiles);\n    }\n\n    if (confFileNameAlias.size() < 1 || core.getCoreDescriptor().getCoreContainer().isZooKeeperAware())\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","bugFix":null,"bugIntro":["19f02bb04467ed179738a398a7da80bbbe161c16","5cb65c1c2f90852e718f86c8be09beb1c4dba408"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06e38ae84477e7a7eacea808dc3de9950fce5ccf","date":1470634560,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(GENERATION);\n    if (v == null) {\n      rsp.add(\"status\", \"no index generation specified\");\n      return;\n    }\n    long gen = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n\n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid index generation\");\n      return;\n    }\n\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<>();\n    Directory dir = null;\n    try {\n      dir = core.getDirectoryFactory().get(core.getNewIndexDir(), DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n      SegmentInfos infos = SegmentInfos.readCommit(dir, commit.getSegmentsFileName());\n      for (SegmentCommitInfo commitInfo : infos) {\n        for (String file : commitInfo.files()) {\n          Map<String, Object> fileMeta = new HashMap<>();\n          fileMeta.put(NAME, file);\n          fileMeta.put(SIZE, dir.fileLength(file));\n\n          try (final IndexInput in = dir.openInput(file, IOContext.READONCE)) {\n            try {\n              long checksum = CodecUtil.retrieveChecksum(in);\n              fileMeta.put(CHECKSUM, checksum);\n            } catch (Exception e) {\n              LOG.warn(\"Could not read checksum from index file: \" + file, e);\n            }\n          }\n\n          result.add(fileMeta);\n        }\n      }\n\n      // add the segments_N file\n\n      Map<String, Object> fileMeta = new HashMap<>();\n      fileMeta.put(NAME, infos.getSegmentsFileName());\n      fileMeta.put(SIZE, dir.fileLength(infos.getSegmentsFileName()));\n      if (infos.getId() != null) {\n        try (final IndexInput in = dir.openInput(infos.getSegmentsFileName(), IOContext.READONCE)) {\n          try {\n            fileMeta.put(CHECKSUM, CodecUtil.retrieveChecksum(in));\n          } catch (Exception e) {\n            LOG.warn(\"Could not read checksum from index file: \" + infos.getSegmentsFileName(), e);\n          }\n        }\n      }\n      result.add(fileMeta);\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given index generation\");\n      rsp.add(EXCEPTION, e);\n      LOG.error(\"Unable to get file names for indexCommit generation: \" + gen, e);\n    } finally {\n      if (dir != null) {\n        try {\n          core.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"Could not release directory after fetching file list\", e);\n        }\n      }\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n\n    // fetch list of tlog files only if cdcr is activated\n    if (solrParams.getBool(TLOG_FILES, true) && core.getUpdateHandler().getUpdateLog() != null\n        && core.getUpdateHandler().getUpdateLog() instanceof CdcrUpdateLog) {\n      try {\n        List<Map<String, Object>> tlogfiles = getTlogFileList(commit);\n        LOG.info(\"Adding tlog files to list: \" + tlogfiles);\n        rsp.add(TLOG_FILES, tlogfiles);\n      }\n      catch (IOException e) {\n        rsp.add(\"status\", \"unable to get tlog file names for given index generation\");\n        rsp.add(EXCEPTION, e);\n        LOG.error(\"Unable to get tlog file names for indexCommit generation: \" + gen, e);\n      }\n    }\n\n    if (confFileNameAlias.size() < 1 || core.getCoreDescriptor().getCoreContainer().isZooKeeperAware())\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(GENERATION);\n    if (v == null) {\n      rsp.add(\"status\", \"no index generation specified\");\n      return;\n    }\n    long gen = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n\n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid index generation\");\n      return;\n    }\n\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<>();\n    Directory dir = null;\n    try {\n      dir = core.getDirectoryFactory().get(core.getNewIndexDir(), DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n      SegmentInfos infos = SegmentInfos.readCommit(dir, commit.getSegmentsFileName());\n      for (SegmentCommitInfo commitInfo : infos) {\n        for (String file : commitInfo.files()) {\n          Map<String, Object> fileMeta = new HashMap<>();\n          fileMeta.put(NAME, file);\n          fileMeta.put(SIZE, dir.fileLength(file));\n\n          try (final IndexInput in = dir.openInput(file, IOContext.READONCE)) {\n            try {\n              long checksum = CodecUtil.retrieveChecksum(in);\n              fileMeta.put(CHECKSUM, checksum);\n            } catch (Exception e) {\n              LOG.warn(\"Could not read checksum from index file: \" + file, e);\n            }\n          }\n\n          result.add(fileMeta);\n        }\n      }\n\n      // add the segments_N file\n\n      Map<String, Object> fileMeta = new HashMap<>();\n      fileMeta.put(NAME, infos.getSegmentsFileName());\n      fileMeta.put(SIZE, dir.fileLength(infos.getSegmentsFileName()));\n      if (infos.getId() != null) {\n        try (final IndexInput in = dir.openInput(infos.getSegmentsFileName(), IOContext.READONCE)) {\n          try {\n            fileMeta.put(CHECKSUM, CodecUtil.retrieveChecksum(in));\n          } catch (Exception e) {\n            LOG.warn(\"Could not read checksum from index file: \" + infos.getSegmentsFileName(), e);\n          }\n        }\n      }\n      result.add(fileMeta);\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given index generation\");\n      rsp.add(EXCEPTION, e);\n      LOG.error(\"Unable to get file names for indexCommit generation: \" + gen, e);\n    } finally {\n      if (dir != null) {\n        try {\n          core.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"Could not release directory after fetching file list\", e);\n        }\n      }\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n\n    // fetch list of tlog files only if cdcr is activated\n    if (core.getUpdateHandler().getUpdateLog() != null && core.getUpdateHandler().getUpdateLog() instanceof CdcrUpdateLog) {\n      try {\n        List<Map<String, Object>> tlogfiles = getTlogFileList(commit);\n        LOG.info(\"Adding tlog files to list: \" + tlogfiles);\n        rsp.add(TLOG_FILES, tlogfiles);\n      }\n      catch (IOException e) {\n        rsp.add(\"status\", \"unable to get tlog file names for given index generation\");\n        rsp.add(EXCEPTION, e);\n        LOG.error(\"Unable to get tlog file names for indexCommit generation: \" + gen, e);\n      }\n    }\n\n    if (confFileNameAlias.size() < 1 || core.getCoreDescriptor().getCoreContainer().isZooKeeperAware())\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","bugFix":null,"bugIntro":["9767eba84e83b05b2a675421e190f4a4c15dad44"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(GENERATION);\n    if (v == null) {\n      rsp.add(\"status\", \"no index generation specified\");\n      return;\n    }\n    long gen = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n\n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid index generation\");\n      return;\n    }\n\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<>();\n    Directory dir = null;\n    try {\n      dir = core.getDirectoryFactory().get(core.getNewIndexDir(), DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n      SegmentInfos infos = SegmentInfos.readCommit(dir, commit.getSegmentsFileName());\n      for (SegmentCommitInfo commitInfo : infos) {\n        for (String file : commitInfo.files()) {\n          Map<String, Object> fileMeta = new HashMap<>();\n          fileMeta.put(NAME, file);\n          fileMeta.put(SIZE, dir.fileLength(file));\n\n          try (final IndexInput in = dir.openInput(file, IOContext.READONCE)) {\n            try {\n              long checksum = CodecUtil.retrieveChecksum(in);\n              fileMeta.put(CHECKSUM, checksum);\n            } catch (Exception e) {\n              LOG.warn(\"Could not read checksum from index file: \" + file, e);\n            }\n          }\n\n          result.add(fileMeta);\n        }\n      }\n\n      // add the segments_N file\n\n      Map<String, Object> fileMeta = new HashMap<>();\n      fileMeta.put(NAME, infos.getSegmentsFileName());\n      fileMeta.put(SIZE, dir.fileLength(infos.getSegmentsFileName()));\n      if (infos.getId() != null) {\n        try (final IndexInput in = dir.openInput(infos.getSegmentsFileName(), IOContext.READONCE)) {\n          try {\n            fileMeta.put(CHECKSUM, CodecUtil.retrieveChecksum(in));\n          } catch (Exception e) {\n            LOG.warn(\"Could not read checksum from index file: \" + infos.getSegmentsFileName(), e);\n          }\n        }\n      }\n      result.add(fileMeta);\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given index generation\");\n      rsp.add(EXCEPTION, e);\n      LOG.error(\"Unable to get file names for indexCommit generation: \" + gen, e);\n    } finally {\n      if (dir != null) {\n        try {\n          core.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"Could not release directory after fetching file list\", e);\n        }\n      }\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n\n    // fetch list of tlog files only if cdcr is activated\n    if (solrParams.getBool(TLOG_FILES, true) && core.getUpdateHandler().getUpdateLog() != null\n        && core.getUpdateHandler().getUpdateLog() instanceof CdcrUpdateLog) {\n      try {\n        List<Map<String, Object>> tlogfiles = getTlogFileList(commit);\n        LOG.info(\"Adding tlog files to list: \" + tlogfiles);\n        rsp.add(TLOG_FILES, tlogfiles);\n      }\n      catch (IOException e) {\n        rsp.add(\"status\", \"unable to get tlog file names for given index generation\");\n        rsp.add(EXCEPTION, e);\n        LOG.error(\"Unable to get tlog file names for indexCommit generation: \" + gen, e);\n      }\n    }\n\n    if (confFileNameAlias.size() < 1 || core.getCoreDescriptor().getCoreContainer().isZooKeeperAware())\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(GENERATION);\n    if (v == null) {\n      rsp.add(\"status\", \"no index generation specified\");\n      return;\n    }\n    long gen = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n\n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid index generation\");\n      return;\n    }\n\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<>();\n    Directory dir = null;\n    try {\n      dir = core.getDirectoryFactory().get(core.getNewIndexDir(), DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n      SegmentInfos infos = SegmentInfos.readCommit(dir, commit.getSegmentsFileName());\n      for (SegmentCommitInfo commitInfo : infos) {\n        for (String file : commitInfo.files()) {\n          Map<String, Object> fileMeta = new HashMap<>();\n          fileMeta.put(NAME, file);\n          fileMeta.put(SIZE, dir.fileLength(file));\n\n          try (final IndexInput in = dir.openInput(file, IOContext.READONCE)) {\n            try {\n              long checksum = CodecUtil.retrieveChecksum(in);\n              fileMeta.put(CHECKSUM, checksum);\n            } catch (Exception e) {\n              LOG.warn(\"Could not read checksum from index file: \" + file, e);\n            }\n          }\n\n          result.add(fileMeta);\n        }\n      }\n\n      // add the segments_N file\n\n      Map<String, Object> fileMeta = new HashMap<>();\n      fileMeta.put(NAME, infos.getSegmentsFileName());\n      fileMeta.put(SIZE, dir.fileLength(infos.getSegmentsFileName()));\n      if (infos.getId() != null) {\n        try (final IndexInput in = dir.openInput(infos.getSegmentsFileName(), IOContext.READONCE)) {\n          try {\n            fileMeta.put(CHECKSUM, CodecUtil.retrieveChecksum(in));\n          } catch (Exception e) {\n            LOG.warn(\"Could not read checksum from index file: \" + infos.getSegmentsFileName(), e);\n          }\n        }\n      }\n      result.add(fileMeta);\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given index generation\");\n      rsp.add(EXCEPTION, e);\n      LOG.error(\"Unable to get file names for indexCommit generation: \" + gen, e);\n    } finally {\n      if (dir != null) {\n        try {\n          core.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"Could not release directory after fetching file list\", e);\n        }\n      }\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n\n    // fetch list of tlog files only if cdcr is activated\n    if (core.getUpdateHandler().getUpdateLog() != null && core.getUpdateHandler().getUpdateLog() instanceof CdcrUpdateLog) {\n      try {\n        List<Map<String, Object>> tlogfiles = getTlogFileList(commit);\n        LOG.info(\"Adding tlog files to list: \" + tlogfiles);\n        rsp.add(TLOG_FILES, tlogfiles);\n      }\n      catch (IOException e) {\n        rsp.add(\"status\", \"unable to get tlog file names for given index generation\");\n        rsp.add(EXCEPTION, e);\n        LOG.error(\"Unable to get tlog file names for indexCommit generation: \" + gen, e);\n      }\n    }\n\n    if (confFileNameAlias.size() < 1 || core.getCoreDescriptor().getCoreContainer().isZooKeeperAware())\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(GENERATION);\n    if (v == null) {\n      rsp.add(\"status\", \"no index generation specified\");\n      return;\n    }\n    long gen = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n\n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid index generation\");\n      return;\n    }\n\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<>();\n    Directory dir = null;\n    try {\n      dir = core.getDirectoryFactory().get(core.getNewIndexDir(), DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n      SegmentInfos infos = SegmentInfos.readCommit(dir, commit.getSegmentsFileName());\n      for (SegmentCommitInfo commitInfo : infos) {\n        for (String file : commitInfo.files()) {\n          Map<String, Object> fileMeta = new HashMap<>();\n          fileMeta.put(NAME, file);\n          fileMeta.put(SIZE, dir.fileLength(file));\n\n          try (final IndexInput in = dir.openInput(file, IOContext.READONCE)) {\n            try {\n              long checksum = CodecUtil.retrieveChecksum(in);\n              fileMeta.put(CHECKSUM, checksum);\n            } catch (Exception e) {\n              LOG.warn(\"Could not read checksum from index file: \" + file, e);\n            }\n          }\n\n          result.add(fileMeta);\n        }\n      }\n\n      // add the segments_N file\n\n      Map<String, Object> fileMeta = new HashMap<>();\n      fileMeta.put(NAME, infos.getSegmentsFileName());\n      fileMeta.put(SIZE, dir.fileLength(infos.getSegmentsFileName()));\n      if (infos.getId() != null) {\n        try (final IndexInput in = dir.openInput(infos.getSegmentsFileName(), IOContext.READONCE)) {\n          try {\n            fileMeta.put(CHECKSUM, CodecUtil.retrieveChecksum(in));\n          } catch (Exception e) {\n            LOG.warn(\"Could not read checksum from index file: \" + infos.getSegmentsFileName(), e);\n          }\n        }\n      }\n      result.add(fileMeta);\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given index generation\");\n      rsp.add(EXCEPTION, e);\n      LOG.error(\"Unable to get file names for indexCommit generation: \" + gen, e);\n    } finally {\n      if (dir != null) {\n        try {\n          core.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"Could not release directory after fetching file list\", e);\n        }\n      }\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n\n    // fetch list of tlog files only if cdcr is activated\n    if (solrParams.getBool(TLOG_FILES, true) && core.getUpdateHandler().getUpdateLog() != null\n        && core.getUpdateHandler().getUpdateLog() instanceof CdcrUpdateLog) {\n      try {\n        List<Map<String, Object>> tlogfiles = getTlogFileList(commit);\n        LOG.info(\"Adding tlog files to list: \" + tlogfiles);\n        rsp.add(TLOG_FILES, tlogfiles);\n      }\n      catch (IOException e) {\n        rsp.add(\"status\", \"unable to get tlog file names for given index generation\");\n        rsp.add(EXCEPTION, e);\n        LOG.error(\"Unable to get tlog file names for indexCommit generation: \" + gen, e);\n      }\n    }\n\n    if (confFileNameAlias.size() < 1 || core.getCoreDescriptor().getCoreContainer().isZooKeeperAware())\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(GENERATION);\n    if (v == null) {\n      rsp.add(\"status\", \"no index generation specified\");\n      return;\n    }\n    long gen = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n\n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid index generation\");\n      return;\n    }\n\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<>();\n    Directory dir = null;\n    try {\n      dir = core.getDirectoryFactory().get(core.getNewIndexDir(), DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n      SegmentInfos infos = SegmentInfos.readCommit(dir, commit.getSegmentsFileName());\n      for (SegmentCommitInfo commitInfo : infos) {\n        for (String file : commitInfo.files()) {\n          Map<String, Object> fileMeta = new HashMap<>();\n          fileMeta.put(NAME, file);\n          fileMeta.put(SIZE, dir.fileLength(file));\n\n          try (final IndexInput in = dir.openInput(file, IOContext.READONCE)) {\n            try {\n              long checksum = CodecUtil.retrieveChecksum(in);\n              fileMeta.put(CHECKSUM, checksum);\n            } catch (Exception e) {\n              LOG.warn(\"Could not read checksum from index file: \" + file, e);\n            }\n          }\n\n          result.add(fileMeta);\n        }\n      }\n\n      // add the segments_N file\n\n      Map<String, Object> fileMeta = new HashMap<>();\n      fileMeta.put(NAME, infos.getSegmentsFileName());\n      fileMeta.put(SIZE, dir.fileLength(infos.getSegmentsFileName()));\n      if (infos.getId() != null) {\n        try (final IndexInput in = dir.openInput(infos.getSegmentsFileName(), IOContext.READONCE)) {\n          try {\n            fileMeta.put(CHECKSUM, CodecUtil.retrieveChecksum(in));\n          } catch (Exception e) {\n            LOG.warn(\"Could not read checksum from index file: \" + infos.getSegmentsFileName(), e);\n          }\n        }\n      }\n      result.add(fileMeta);\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given index generation\");\n      rsp.add(EXCEPTION, e);\n      LOG.error(\"Unable to get file names for indexCommit generation: \" + gen, e);\n    } finally {\n      if (dir != null) {\n        try {\n          core.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"Could not release directory after fetching file list\", e);\n        }\n      }\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n\n    // fetch list of tlog files only if cdcr is activated\n    if (core.getUpdateHandler().getUpdateLog() != null && core.getUpdateHandler().getUpdateLog() instanceof CdcrUpdateLog) {\n      try {\n        List<Map<String, Object>> tlogfiles = getTlogFileList(commit);\n        LOG.info(\"Adding tlog files to list: \" + tlogfiles);\n        rsp.add(TLOG_FILES, tlogfiles);\n      }\n      catch (IOException e) {\n        rsp.add(\"status\", \"unable to get tlog file names for given index generation\");\n        rsp.add(EXCEPTION, e);\n        LOG.error(\"Unable to get tlog file names for indexCommit generation: \" + gen, e);\n      }\n    }\n\n    if (confFileNameAlias.size() < 1 || core.getCoreDescriptor().getCoreContainer().isZooKeeperAware())\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(GENERATION);\n    if (v == null) {\n      rsp.add(\"status\", \"no index generation specified\");\n      return;\n    }\n    long gen = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n\n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid index generation\");\n      return;\n    }\n\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<>();\n    Directory dir = null;\n    try {\n      dir = core.getDirectoryFactory().get(core.getNewIndexDir(), DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n      SegmentInfos infos = SegmentInfos.readCommit(dir, commit.getSegmentsFileName());\n      for (SegmentCommitInfo commitInfo : infos) {\n        for (String file : commitInfo.files()) {\n          Map<String, Object> fileMeta = new HashMap<>();\n          fileMeta.put(NAME, file);\n          fileMeta.put(SIZE, dir.fileLength(file));\n\n          try (final IndexInput in = dir.openInput(file, IOContext.READONCE)) {\n            try {\n              long checksum = CodecUtil.retrieveChecksum(in);\n              fileMeta.put(CHECKSUM, checksum);\n            } catch (Exception e) {\n              LOG.warn(\"Could not read checksum from index file: \" + file, e);\n            }\n          }\n\n          result.add(fileMeta);\n        }\n      }\n\n      // add the segments_N file\n\n      Map<String, Object> fileMeta = new HashMap<>();\n      fileMeta.put(NAME, infos.getSegmentsFileName());\n      fileMeta.put(SIZE, dir.fileLength(infos.getSegmentsFileName()));\n      if (infos.getId() != null) {\n        try (final IndexInput in = dir.openInput(infos.getSegmentsFileName(), IOContext.READONCE)) {\n          try {\n            fileMeta.put(CHECKSUM, CodecUtil.retrieveChecksum(in));\n          } catch (Exception e) {\n            LOG.warn(\"Could not read checksum from index file: \" + infos.getSegmentsFileName(), e);\n          }\n        }\n      }\n      result.add(fileMeta);\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given index generation\");\n      rsp.add(EXCEPTION, e);\n      LOG.error(\"Unable to get file names for indexCommit generation: \" + gen, e);\n    } finally {\n      if (dir != null) {\n        try {\n          core.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"Could not release directory after fetching file list\", e);\n        }\n      }\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n\n    // fetch list of tlog files only if cdcr is activated\n    if (solrParams.getBool(TLOG_FILES, true) && core.getUpdateHandler().getUpdateLog() != null\n        && core.getUpdateHandler().getUpdateLog() instanceof CdcrUpdateLog) {\n      try {\n        List<Map<String, Object>> tlogfiles = getTlogFileList(commit);\n        LOG.info(\"Adding tlog files to list: \" + tlogfiles);\n        rsp.add(TLOG_FILES, tlogfiles);\n      }\n      catch (IOException e) {\n        rsp.add(\"status\", \"unable to get tlog file names for given index generation\");\n        rsp.add(EXCEPTION, e);\n        LOG.error(\"Unable to get tlog file names for indexCommit generation: \" + gen, e);\n      }\n    }\n\n    if (confFileNameAlias.size() < 1 || core.getCoreContainer().isZooKeeperAware())\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(GENERATION);\n    if (v == null) {\n      rsp.add(\"status\", \"no index generation specified\");\n      return;\n    }\n    long gen = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n\n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid index generation\");\n      return;\n    }\n\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<>();\n    Directory dir = null;\n    try {\n      dir = core.getDirectoryFactory().get(core.getNewIndexDir(), DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n      SegmentInfos infos = SegmentInfos.readCommit(dir, commit.getSegmentsFileName());\n      for (SegmentCommitInfo commitInfo : infos) {\n        for (String file : commitInfo.files()) {\n          Map<String, Object> fileMeta = new HashMap<>();\n          fileMeta.put(NAME, file);\n          fileMeta.put(SIZE, dir.fileLength(file));\n\n          try (final IndexInput in = dir.openInput(file, IOContext.READONCE)) {\n            try {\n              long checksum = CodecUtil.retrieveChecksum(in);\n              fileMeta.put(CHECKSUM, checksum);\n            } catch (Exception e) {\n              LOG.warn(\"Could not read checksum from index file: \" + file, e);\n            }\n          }\n\n          result.add(fileMeta);\n        }\n      }\n\n      // add the segments_N file\n\n      Map<String, Object> fileMeta = new HashMap<>();\n      fileMeta.put(NAME, infos.getSegmentsFileName());\n      fileMeta.put(SIZE, dir.fileLength(infos.getSegmentsFileName()));\n      if (infos.getId() != null) {\n        try (final IndexInput in = dir.openInput(infos.getSegmentsFileName(), IOContext.READONCE)) {\n          try {\n            fileMeta.put(CHECKSUM, CodecUtil.retrieveChecksum(in));\n          } catch (Exception e) {\n            LOG.warn(\"Could not read checksum from index file: \" + infos.getSegmentsFileName(), e);\n          }\n        }\n      }\n      result.add(fileMeta);\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given index generation\");\n      rsp.add(EXCEPTION, e);\n      LOG.error(\"Unable to get file names for indexCommit generation: \" + gen, e);\n    } finally {\n      if (dir != null) {\n        try {\n          core.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"Could not release directory after fetching file list\", e);\n        }\n      }\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n\n    // fetch list of tlog files only if cdcr is activated\n    if (solrParams.getBool(TLOG_FILES, true) && core.getUpdateHandler().getUpdateLog() != null\n        && core.getUpdateHandler().getUpdateLog() instanceof CdcrUpdateLog) {\n      try {\n        List<Map<String, Object>> tlogfiles = getTlogFileList(commit);\n        LOG.info(\"Adding tlog files to list: \" + tlogfiles);\n        rsp.add(TLOG_FILES, tlogfiles);\n      }\n      catch (IOException e) {\n        rsp.add(\"status\", \"unable to get tlog file names for given index generation\");\n        rsp.add(EXCEPTION, e);\n        LOG.error(\"Unable to get tlog file names for indexCommit generation: \" + gen, e);\n      }\n    }\n\n    if (confFileNameAlias.size() < 1 || core.getCoreDescriptor().getCoreContainer().isZooKeeperAware())\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","bugFix":null,"bugIntro":["19f02bb04467ed179738a398a7da80bbbe161c16"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(GENERATION);\n    if (v == null) {\n      rsp.add(\"status\", \"no index generation specified\");\n      return;\n    }\n    long gen = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n\n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid index generation\");\n      return;\n    }\n\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<>();\n    Directory dir = null;\n    try {\n      dir = core.getDirectoryFactory().get(core.getNewIndexDir(), DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n      SegmentInfos infos = SegmentInfos.readCommit(dir, commit.getSegmentsFileName());\n      for (SegmentCommitInfo commitInfo : infos) {\n        for (String file : commitInfo.files()) {\n          Map<String, Object> fileMeta = new HashMap<>();\n          fileMeta.put(NAME, file);\n          fileMeta.put(SIZE, dir.fileLength(file));\n\n          try (final IndexInput in = dir.openInput(file, IOContext.READONCE)) {\n            try {\n              long checksum = CodecUtil.retrieveChecksum(in);\n              fileMeta.put(CHECKSUM, checksum);\n            } catch (Exception e) {\n              LOG.warn(\"Could not read checksum from index file: \" + file, e);\n            }\n          }\n\n          result.add(fileMeta);\n        }\n      }\n\n      // add the segments_N file\n\n      Map<String, Object> fileMeta = new HashMap<>();\n      fileMeta.put(NAME, infos.getSegmentsFileName());\n      fileMeta.put(SIZE, dir.fileLength(infos.getSegmentsFileName()));\n      if (infos.getId() != null) {\n        try (final IndexInput in = dir.openInput(infos.getSegmentsFileName(), IOContext.READONCE)) {\n          try {\n            fileMeta.put(CHECKSUM, CodecUtil.retrieveChecksum(in));\n          } catch (Exception e) {\n            LOG.warn(\"Could not read checksum from index file: \" + infos.getSegmentsFileName(), e);\n          }\n        }\n      }\n      result.add(fileMeta);\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given index generation\");\n      rsp.add(EXCEPTION, e);\n      LOG.error(\"Unable to get file names for indexCommit generation: \" + gen, e);\n    } finally {\n      if (dir != null) {\n        try {\n          core.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"Could not release directory after fetching file list\", e);\n        }\n      }\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n\n    // fetch list of tlog files only if cdcr is activated\n    if (solrParams.getBool(TLOG_FILES, true) && core.getUpdateHandler().getUpdateLog() != null\n        && core.getUpdateHandler().getUpdateLog() instanceof CdcrUpdateLog) {\n      try {\n        List<Map<String, Object>> tlogfiles = getTlogFileList(commit);\n        LOG.info(\"Adding tlog files to list: \" + tlogfiles);\n        rsp.add(TLOG_FILES, tlogfiles);\n      }\n      catch (IOException e) {\n        rsp.add(\"status\", \"unable to get tlog file names for given index generation\");\n        rsp.add(EXCEPTION, e);\n        LOG.error(\"Unable to get tlog file names for indexCommit generation: \" + gen, e);\n      }\n    }\n\n    if (confFileNameAlias.size() < 1 || core.getCoreContainer().isZooKeeperAware())\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(GENERATION);\n    if (v == null) {\n      rsp.add(\"status\", \"no index generation specified\");\n      return;\n    }\n    long gen = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n\n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid index generation\");\n      return;\n    }\n\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<>();\n    Directory dir = null;\n    try {\n      dir = core.getDirectoryFactory().get(core.getNewIndexDir(), DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n      SegmentInfos infos = SegmentInfos.readCommit(dir, commit.getSegmentsFileName());\n      for (SegmentCommitInfo commitInfo : infos) {\n        for (String file : commitInfo.files()) {\n          Map<String, Object> fileMeta = new HashMap<>();\n          fileMeta.put(NAME, file);\n          fileMeta.put(SIZE, dir.fileLength(file));\n\n          try (final IndexInput in = dir.openInput(file, IOContext.READONCE)) {\n            try {\n              long checksum = CodecUtil.retrieveChecksum(in);\n              fileMeta.put(CHECKSUM, checksum);\n            } catch (Exception e) {\n              LOG.warn(\"Could not read checksum from index file: \" + file, e);\n            }\n          }\n\n          result.add(fileMeta);\n        }\n      }\n\n      // add the segments_N file\n\n      Map<String, Object> fileMeta = new HashMap<>();\n      fileMeta.put(NAME, infos.getSegmentsFileName());\n      fileMeta.put(SIZE, dir.fileLength(infos.getSegmentsFileName()));\n      if (infos.getId() != null) {\n        try (final IndexInput in = dir.openInput(infos.getSegmentsFileName(), IOContext.READONCE)) {\n          try {\n            fileMeta.put(CHECKSUM, CodecUtil.retrieveChecksum(in));\n          } catch (Exception e) {\n            LOG.warn(\"Could not read checksum from index file: \" + infos.getSegmentsFileName(), e);\n          }\n        }\n      }\n      result.add(fileMeta);\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given index generation\");\n      rsp.add(EXCEPTION, e);\n      LOG.error(\"Unable to get file names for indexCommit generation: \" + gen, e);\n    } finally {\n      if (dir != null) {\n        try {\n          core.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"Could not release directory after fetching file list\", e);\n        }\n      }\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n\n    // fetch list of tlog files only if cdcr is activated\n    if (solrParams.getBool(TLOG_FILES, true) && core.getUpdateHandler().getUpdateLog() != null\n        && core.getUpdateHandler().getUpdateLog() instanceof CdcrUpdateLog) {\n      try {\n        List<Map<String, Object>> tlogfiles = getTlogFileList(commit);\n        LOG.info(\"Adding tlog files to list: \" + tlogfiles);\n        rsp.add(TLOG_FILES, tlogfiles);\n      }\n      catch (IOException e) {\n        rsp.add(\"status\", \"unable to get tlog file names for given index generation\");\n        rsp.add(EXCEPTION, e);\n        LOG.error(\"Unable to get tlog file names for indexCommit generation: \" + gen, e);\n      }\n    }\n\n    if (confFileNameAlias.size() < 1 || core.getCoreDescriptor().getCoreContainer().isZooKeeperAware())\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9767eba84e83b05b2a675421e190f4a4c15dad44","date":1508967004,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(GENERATION);\n    if (v == null) {\n      rsp.add(\"status\", \"no index generation specified\");\n      return;\n    }\n    long gen = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n\n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid index generation\");\n      return;\n    }\n\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<>();\n    Directory dir = null;\n    try {\n      dir = core.getDirectoryFactory().get(core.getNewIndexDir(), DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n      SegmentInfos infos = SegmentInfos.readCommit(dir, commit.getSegmentsFileName());\n      for (SegmentCommitInfo commitInfo : infos) {\n        for (String file : commitInfo.files()) {\n          Map<String, Object> fileMeta = new HashMap<>();\n          fileMeta.put(NAME, file);\n          fileMeta.put(SIZE, dir.fileLength(file));\n\n          try (final IndexInput in = dir.openInput(file, IOContext.READONCE)) {\n            try {\n              long checksum = CodecUtil.retrieveChecksum(in);\n              fileMeta.put(CHECKSUM, checksum);\n            } catch (Exception e) {\n              LOG.warn(\"Could not read checksum from index file: \" + file, e);\n            }\n          }\n\n          result.add(fileMeta);\n        }\n      }\n\n      // add the segments_N file\n\n      Map<String, Object> fileMeta = new HashMap<>();\n      fileMeta.put(NAME, infos.getSegmentsFileName());\n      fileMeta.put(SIZE, dir.fileLength(infos.getSegmentsFileName()));\n      if (infos.getId() != null) {\n        try (final IndexInput in = dir.openInput(infos.getSegmentsFileName(), IOContext.READONCE)) {\n          try {\n            fileMeta.put(CHECKSUM, CodecUtil.retrieveChecksum(in));\n          } catch (Exception e) {\n            LOG.warn(\"Could not read checksum from index file: \" + infos.getSegmentsFileName(), e);\n          }\n        }\n      }\n      result.add(fileMeta);\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given index generation\");\n      rsp.add(EXCEPTION, e);\n      LOG.error(\"Unable to get file names for indexCommit generation: \" + gen, e);\n    } finally {\n      if (dir != null) {\n        try {\n          core.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"Could not release directory after fetching file list\", e);\n        }\n      }\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n\n    if (solrParams.getBool(TLOG_FILES, false)) {\n      try {\n        List<Map<String, Object>> tlogfiles = getTlogFileList(commit);\n        LOG.info(\"Adding tlog files to list: \" + tlogfiles);\n        rsp.add(TLOG_FILES, tlogfiles);\n      }\n      catch (IOException e) {\n        rsp.add(\"status\", \"unable to get tlog file names for given index generation\");\n        rsp.add(EXCEPTION, e);\n        LOG.error(\"Unable to get tlog file names for indexCommit generation: \" + gen, e);\n      }\n    }\n\n    if (confFileNameAlias.size() < 1 || core.getCoreContainer().isZooKeeperAware())\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(GENERATION);\n    if (v == null) {\n      rsp.add(\"status\", \"no index generation specified\");\n      return;\n    }\n    long gen = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n\n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid index generation\");\n      return;\n    }\n\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<>();\n    Directory dir = null;\n    try {\n      dir = core.getDirectoryFactory().get(core.getNewIndexDir(), DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n      SegmentInfos infos = SegmentInfos.readCommit(dir, commit.getSegmentsFileName());\n      for (SegmentCommitInfo commitInfo : infos) {\n        for (String file : commitInfo.files()) {\n          Map<String, Object> fileMeta = new HashMap<>();\n          fileMeta.put(NAME, file);\n          fileMeta.put(SIZE, dir.fileLength(file));\n\n          try (final IndexInput in = dir.openInput(file, IOContext.READONCE)) {\n            try {\n              long checksum = CodecUtil.retrieveChecksum(in);\n              fileMeta.put(CHECKSUM, checksum);\n            } catch (Exception e) {\n              LOG.warn(\"Could not read checksum from index file: \" + file, e);\n            }\n          }\n\n          result.add(fileMeta);\n        }\n      }\n\n      // add the segments_N file\n\n      Map<String, Object> fileMeta = new HashMap<>();\n      fileMeta.put(NAME, infos.getSegmentsFileName());\n      fileMeta.put(SIZE, dir.fileLength(infos.getSegmentsFileName()));\n      if (infos.getId() != null) {\n        try (final IndexInput in = dir.openInput(infos.getSegmentsFileName(), IOContext.READONCE)) {\n          try {\n            fileMeta.put(CHECKSUM, CodecUtil.retrieveChecksum(in));\n          } catch (Exception e) {\n            LOG.warn(\"Could not read checksum from index file: \" + infos.getSegmentsFileName(), e);\n          }\n        }\n      }\n      result.add(fileMeta);\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given index generation\");\n      rsp.add(EXCEPTION, e);\n      LOG.error(\"Unable to get file names for indexCommit generation: \" + gen, e);\n    } finally {\n      if (dir != null) {\n        try {\n          core.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"Could not release directory after fetching file list\", e);\n        }\n      }\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n\n    // fetch list of tlog files only if cdcr is activated\n    if (solrParams.getBool(TLOG_FILES, true) && core.getUpdateHandler().getUpdateLog() != null\n        && core.getUpdateHandler().getUpdateLog() instanceof CdcrUpdateLog) {\n      try {\n        List<Map<String, Object>> tlogfiles = getTlogFileList(commit);\n        LOG.info(\"Adding tlog files to list: \" + tlogfiles);\n        rsp.add(TLOG_FILES, tlogfiles);\n      }\n      catch (IOException e) {\n        rsp.add(\"status\", \"unable to get tlog file names for given index generation\");\n        rsp.add(EXCEPTION, e);\n        LOG.error(\"Unable to get tlog file names for indexCommit generation: \" + gen, e);\n      }\n    }\n\n    if (confFileNameAlias.size() < 1 || core.getCoreContainer().isZooKeeperAware())\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","bugFix":["06e38ae84477e7a7eacea808dc3de9950fce5ccf","86290366cefc1b9d4eced13b430858c4a4c0421d"],"bugIntro":["19f02bb04467ed179738a398a7da80bbbe161c16"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(GENERATION);\n    if (v == null) {\n      rsp.add(\"status\", \"no index generation specified\");\n      return;\n    }\n    long gen = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n\n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid index generation\");\n      return;\n    }\n\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<>();\n    Directory dir = null;\n    try {\n      dir = core.getDirectoryFactory().get(core.getNewIndexDir(), DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n      SegmentInfos infos = SegmentInfos.readCommit(dir, commit.getSegmentsFileName());\n      for (SegmentCommitInfo commitInfo : infos) {\n        for (String file : commitInfo.files()) {\n          Map<String, Object> fileMeta = new HashMap<>();\n          fileMeta.put(NAME, file);\n          fileMeta.put(SIZE, dir.fileLength(file));\n\n          try (final IndexInput in = dir.openInput(file, IOContext.READONCE)) {\n            try {\n              long checksum = CodecUtil.retrieveChecksum(in);\n              fileMeta.put(CHECKSUM, checksum);\n            } catch (Exception e) {\n              log.warn(\"Could not read checksum from index file: \" + file, e);\n            }\n          }\n\n          result.add(fileMeta);\n        }\n      }\n\n      // add the segments_N file\n\n      Map<String, Object> fileMeta = new HashMap<>();\n      fileMeta.put(NAME, infos.getSegmentsFileName());\n      fileMeta.put(SIZE, dir.fileLength(infos.getSegmentsFileName()));\n      if (infos.getId() != null) {\n        try (final IndexInput in = dir.openInput(infos.getSegmentsFileName(), IOContext.READONCE)) {\n          try {\n            fileMeta.put(CHECKSUM, CodecUtil.retrieveChecksum(in));\n          } catch (Exception e) {\n            log.warn(\"Could not read checksum from index file: \" + infos.getSegmentsFileName(), e);\n          }\n        }\n      }\n      result.add(fileMeta);\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given index generation\");\n      rsp.add(EXCEPTION, e);\n      log.error(\"Unable to get file names for indexCommit generation: \" + gen, e);\n    } finally {\n      if (dir != null) {\n        try {\n          core.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(log, \"Could not release directory after fetching file list\", e);\n        }\n      }\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n\n    if (solrParams.getBool(TLOG_FILES, false)) {\n      try {\n        List<Map<String, Object>> tlogfiles = getTlogFileList(commit);\n        log.info(\"Adding tlog files to list: \" + tlogfiles);\n        rsp.add(TLOG_FILES, tlogfiles);\n      }\n      catch (IOException e) {\n        rsp.add(\"status\", \"unable to get tlog file names for given index generation\");\n        rsp.add(EXCEPTION, e);\n        log.error(\"Unable to get tlog file names for indexCommit generation: \" + gen, e);\n      }\n    }\n\n    if (confFileNameAlias.size() < 1 || core.getCoreContainer().isZooKeeperAware())\n      return;\n    log.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(GENERATION);\n    if (v == null) {\n      rsp.add(\"status\", \"no index generation specified\");\n      return;\n    }\n    long gen = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n\n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid index generation\");\n      return;\n    }\n\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<>();\n    Directory dir = null;\n    try {\n      dir = core.getDirectoryFactory().get(core.getNewIndexDir(), DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n      SegmentInfos infos = SegmentInfos.readCommit(dir, commit.getSegmentsFileName());\n      for (SegmentCommitInfo commitInfo : infos) {\n        for (String file : commitInfo.files()) {\n          Map<String, Object> fileMeta = new HashMap<>();\n          fileMeta.put(NAME, file);\n          fileMeta.put(SIZE, dir.fileLength(file));\n\n          try (final IndexInput in = dir.openInput(file, IOContext.READONCE)) {\n            try {\n              long checksum = CodecUtil.retrieveChecksum(in);\n              fileMeta.put(CHECKSUM, checksum);\n            } catch (Exception e) {\n              LOG.warn(\"Could not read checksum from index file: \" + file, e);\n            }\n          }\n\n          result.add(fileMeta);\n        }\n      }\n\n      // add the segments_N file\n\n      Map<String, Object> fileMeta = new HashMap<>();\n      fileMeta.put(NAME, infos.getSegmentsFileName());\n      fileMeta.put(SIZE, dir.fileLength(infos.getSegmentsFileName()));\n      if (infos.getId() != null) {\n        try (final IndexInput in = dir.openInput(infos.getSegmentsFileName(), IOContext.READONCE)) {\n          try {\n            fileMeta.put(CHECKSUM, CodecUtil.retrieveChecksum(in));\n          } catch (Exception e) {\n            LOG.warn(\"Could not read checksum from index file: \" + infos.getSegmentsFileName(), e);\n          }\n        }\n      }\n      result.add(fileMeta);\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given index generation\");\n      rsp.add(EXCEPTION, e);\n      LOG.error(\"Unable to get file names for indexCommit generation: \" + gen, e);\n    } finally {\n      if (dir != null) {\n        try {\n          core.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"Could not release directory after fetching file list\", e);\n        }\n      }\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n\n    if (solrParams.getBool(TLOG_FILES, false)) {\n      try {\n        List<Map<String, Object>> tlogfiles = getTlogFileList(commit);\n        LOG.info(\"Adding tlog files to list: \" + tlogfiles);\n        rsp.add(TLOG_FILES, tlogfiles);\n      }\n      catch (IOException e) {\n        rsp.add(\"status\", \"unable to get tlog file names for given index generation\");\n        rsp.add(EXCEPTION, e);\n        LOG.error(\"Unable to get tlog file names for indexCommit generation: \" + gen, e);\n      }\n    }\n\n    if (confFileNameAlias.size() < 1 || core.getCoreContainer().isZooKeeperAware())\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","bugFix":null,"bugIntro":["19f02bb04467ed179738a398a7da80bbbe161c16"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cb65c1c2f90852e718f86c8be09beb1c4dba408","date":1543785784,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.required().get(GENERATION);\n    long gen = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n\n    if (commit == null) {\n      reportErrorOnResponse(rsp, \"invalid index generation\", null);\n      return;\n    }\n\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<>();\n    Directory dir = null;\n    try {\n      dir = core.getDirectoryFactory().get(core.getNewIndexDir(), DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n      SegmentInfos infos = SegmentInfos.readCommit(dir, commit.getSegmentsFileName());\n      for (SegmentCommitInfo commitInfo : infos) {\n        for (String file : commitInfo.files()) {\n          Map<String, Object> fileMeta = new HashMap<>();\n          fileMeta.put(NAME, file);\n          fileMeta.put(SIZE, dir.fileLength(file));\n\n          try (final IndexInput in = dir.openInput(file, IOContext.READONCE)) {\n            try {\n              long checksum = CodecUtil.retrieveChecksum(in);\n              fileMeta.put(CHECKSUM, checksum);\n            } catch (Exception e) {\n              //TODO Should this trigger a larger error?\n              log.warn(\"Could not read checksum from index file: \" + file, e);\n            }\n          }\n\n          result.add(fileMeta);\n        }\n      }\n\n      // add the segments_N file\n\n      Map<String, Object> fileMeta = new HashMap<>();\n      fileMeta.put(NAME, infos.getSegmentsFileName());\n      fileMeta.put(SIZE, dir.fileLength(infos.getSegmentsFileName()));\n      if (infos.getId() != null) {\n        try (final IndexInput in = dir.openInput(infos.getSegmentsFileName(), IOContext.READONCE)) {\n          try {\n            fileMeta.put(CHECKSUM, CodecUtil.retrieveChecksum(in));\n          } catch (Exception e) {\n            //TODO Should this trigger a larger error?\n            log.warn(\"Could not read checksum from index file: \" + infos.getSegmentsFileName(), e);\n          }\n        }\n      }\n      result.add(fileMeta);\n    } catch (IOException e) {\n      log.error(\"Unable to get file names for indexCommit generation: \" + gen, e);\n      reportErrorOnResponse(rsp, \"unable to get file names for given index generation\", e);\n      return;\n    } finally {\n      if (dir != null) {\n        try {\n          core.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(log, \"Could not release directory after fetching file list\", e);\n        }\n      }\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n\n    if (solrParams.getBool(TLOG_FILES, false)) {\n      try {\n        List<Map<String, Object>> tlogfiles = getTlogFileList(commit);\n        log.info(\"Adding tlog files to list: \" + tlogfiles);\n        rsp.add(TLOG_FILES, tlogfiles);\n      }\n      catch (IOException e) {\n        log.error(\"Unable to get tlog file names for indexCommit generation: \" + gen, e);\n        reportErrorOnResponse(rsp, \"unable to get tlog file names for given index generation\", e);\n        return;\n      }\n    }\n\n    if (confFileNameAlias.size() < 1 || core.getCoreContainer().isZooKeeperAware())\n      return;\n    log.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n    rsp.add(STATUS, OK_STATUS);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(GENERATION);\n    if (v == null) {\n      rsp.add(\"status\", \"no index generation specified\");\n      return;\n    }\n    long gen = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n\n    //System.out.println(\"ask for files for gen:\" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid index generation\");\n      return;\n    }\n\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<>();\n    Directory dir = null;\n    try {\n      dir = core.getDirectoryFactory().get(core.getNewIndexDir(), DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n      SegmentInfos infos = SegmentInfos.readCommit(dir, commit.getSegmentsFileName());\n      for (SegmentCommitInfo commitInfo : infos) {\n        for (String file : commitInfo.files()) {\n          Map<String, Object> fileMeta = new HashMap<>();\n          fileMeta.put(NAME, file);\n          fileMeta.put(SIZE, dir.fileLength(file));\n\n          try (final IndexInput in = dir.openInput(file, IOContext.READONCE)) {\n            try {\n              long checksum = CodecUtil.retrieveChecksum(in);\n              fileMeta.put(CHECKSUM, checksum);\n            } catch (Exception e) {\n              log.warn(\"Could not read checksum from index file: \" + file, e);\n            }\n          }\n\n          result.add(fileMeta);\n        }\n      }\n\n      // add the segments_N file\n\n      Map<String, Object> fileMeta = new HashMap<>();\n      fileMeta.put(NAME, infos.getSegmentsFileName());\n      fileMeta.put(SIZE, dir.fileLength(infos.getSegmentsFileName()));\n      if (infos.getId() != null) {\n        try (final IndexInput in = dir.openInput(infos.getSegmentsFileName(), IOContext.READONCE)) {\n          try {\n            fileMeta.put(CHECKSUM, CodecUtil.retrieveChecksum(in));\n          } catch (Exception e) {\n            log.warn(\"Could not read checksum from index file: \" + infos.getSegmentsFileName(), e);\n          }\n        }\n      }\n      result.add(fileMeta);\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given index generation\");\n      rsp.add(EXCEPTION, e);\n      log.error(\"Unable to get file names for indexCommit generation: \" + gen, e);\n    } finally {\n      if (dir != null) {\n        try {\n          core.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(log, \"Could not release directory after fetching file list\", e);\n        }\n      }\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n\n    if (solrParams.getBool(TLOG_FILES, false)) {\n      try {\n        List<Map<String, Object>> tlogfiles = getTlogFileList(commit);\n        log.info(\"Adding tlog files to list: \" + tlogfiles);\n        rsp.add(TLOG_FILES, tlogfiles);\n      }\n      catch (IOException e) {\n        rsp.add(\"status\", \"unable to get tlog file names for given index generation\");\n        rsp.add(EXCEPTION, e);\n        log.error(\"Unable to get tlog file names for indexCommit generation: \" + gen, e);\n      }\n    }\n\n    if (confFileNameAlias.size() < 1 || core.getCoreContainer().isZooKeeperAware())\n      return;\n    log.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","77cae179618908dcb534af567cdf3019505ada6c","c01638f4dd94981c1d3d52c4f7991246a5a24aba","7b13106276bb5ea342253dbf6aae7b675adb38d3","f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349"],"bugIntro":["19f02bb04467ed179738a398a7da80bbbe161c16"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"81d505b8f51b856e1b7e9dd377f5050c337b797a","date":1549455307,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.required().get(GENERATION);\n    long gen = Long.parseLong(v);\n    if (gen == -1) {\n      IndexCommit commitPoint = core.getDeletionPolicy().getLatestCommit();\n      if(commitPoint == null) {\n        rsp.add(CMD_GET_FILE_LIST, Collections.EMPTY_LIST);\n        return;\n      }\n      gen = commitPoint.getGeneration();\n    }\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n\n    if (commit == null) {\n      reportErrorOnResponse(rsp, \"invalid index generation\", null);\n      return;\n    }\n\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<>();\n    Directory dir = null;\n    try {\n      dir = core.getDirectoryFactory().get(core.getNewIndexDir(), DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n      SegmentInfos infos = SegmentInfos.readCommit(dir, commit.getSegmentsFileName());\n      for (SegmentCommitInfo commitInfo : infos) {\n        for (String file : commitInfo.files()) {\n          Map<String, Object> fileMeta = new HashMap<>();\n          fileMeta.put(NAME, file);\n          fileMeta.put(SIZE, dir.fileLength(file));\n\n          try (final IndexInput in = dir.openInput(file, IOContext.READONCE)) {\n            try {\n              long checksum = CodecUtil.retrieveChecksum(in);\n              fileMeta.put(CHECKSUM, checksum);\n            } catch (Exception e) {\n              //TODO Should this trigger a larger error?\n              log.warn(\"Could not read checksum from index file: \" + file, e);\n            }\n          }\n\n          result.add(fileMeta);\n        }\n      }\n\n      // add the segments_N file\n\n      Map<String, Object> fileMeta = new HashMap<>();\n      fileMeta.put(NAME, infos.getSegmentsFileName());\n      fileMeta.put(SIZE, dir.fileLength(infos.getSegmentsFileName()));\n      if (infos.getId() != null) {\n        try (final IndexInput in = dir.openInput(infos.getSegmentsFileName(), IOContext.READONCE)) {\n          try {\n            fileMeta.put(CHECKSUM, CodecUtil.retrieveChecksum(in));\n          } catch (Exception e) {\n            //TODO Should this trigger a larger error?\n            log.warn(\"Could not read checksum from index file: \" + infos.getSegmentsFileName(), e);\n          }\n        }\n      }\n      result.add(fileMeta);\n    } catch (IOException e) {\n      log.error(\"Unable to get file names for indexCommit generation: \" + gen, e);\n      reportErrorOnResponse(rsp, \"unable to get file names for given index generation\", e);\n      return;\n    } finally {\n      if (dir != null) {\n        try {\n          core.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(log, \"Could not release directory after fetching file list\", e);\n        }\n      }\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n\n    if (solrParams.getBool(TLOG_FILES, false)) {\n      try {\n        List<Map<String, Object>> tlogfiles = getTlogFileList(commit);\n        log.info(\"Adding tlog files to list: \" + tlogfiles);\n        rsp.add(TLOG_FILES, tlogfiles);\n      }\n      catch (IOException e) {\n        log.error(\"Unable to get tlog file names for indexCommit generation: \" + gen, e);\n        reportErrorOnResponse(rsp, \"unable to get tlog file names for given index generation\", e);\n        return;\n      }\n    }\n\n    if (confFileNameAlias.size() < 1 || core.getCoreContainer().isZooKeeperAware())\n      return;\n    log.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n    rsp.add(STATUS, OK_STATUS);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.required().get(GENERATION);\n    long gen = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n\n    if (commit == null) {\n      reportErrorOnResponse(rsp, \"invalid index generation\", null);\n      return;\n    }\n\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<>();\n    Directory dir = null;\n    try {\n      dir = core.getDirectoryFactory().get(core.getNewIndexDir(), DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n      SegmentInfos infos = SegmentInfos.readCommit(dir, commit.getSegmentsFileName());\n      for (SegmentCommitInfo commitInfo : infos) {\n        for (String file : commitInfo.files()) {\n          Map<String, Object> fileMeta = new HashMap<>();\n          fileMeta.put(NAME, file);\n          fileMeta.put(SIZE, dir.fileLength(file));\n\n          try (final IndexInput in = dir.openInput(file, IOContext.READONCE)) {\n            try {\n              long checksum = CodecUtil.retrieveChecksum(in);\n              fileMeta.put(CHECKSUM, checksum);\n            } catch (Exception e) {\n              //TODO Should this trigger a larger error?\n              log.warn(\"Could not read checksum from index file: \" + file, e);\n            }\n          }\n\n          result.add(fileMeta);\n        }\n      }\n\n      // add the segments_N file\n\n      Map<String, Object> fileMeta = new HashMap<>();\n      fileMeta.put(NAME, infos.getSegmentsFileName());\n      fileMeta.put(SIZE, dir.fileLength(infos.getSegmentsFileName()));\n      if (infos.getId() != null) {\n        try (final IndexInput in = dir.openInput(infos.getSegmentsFileName(), IOContext.READONCE)) {\n          try {\n            fileMeta.put(CHECKSUM, CodecUtil.retrieveChecksum(in));\n          } catch (Exception e) {\n            //TODO Should this trigger a larger error?\n            log.warn(\"Could not read checksum from index file: \" + infos.getSegmentsFileName(), e);\n          }\n        }\n      }\n      result.add(fileMeta);\n    } catch (IOException e) {\n      log.error(\"Unable to get file names for indexCommit generation: \" + gen, e);\n      reportErrorOnResponse(rsp, \"unable to get file names for given index generation\", e);\n      return;\n    } finally {\n      if (dir != null) {\n        try {\n          core.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(log, \"Could not release directory after fetching file list\", e);\n        }\n      }\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n\n    if (solrParams.getBool(TLOG_FILES, false)) {\n      try {\n        List<Map<String, Object>> tlogfiles = getTlogFileList(commit);\n        log.info(\"Adding tlog files to list: \" + tlogfiles);\n        rsp.add(TLOG_FILES, tlogfiles);\n      }\n      catch (IOException e) {\n        log.error(\"Unable to get tlog file names for indexCommit generation: \" + gen, e);\n        reportErrorOnResponse(rsp, \"unable to get tlog file names for given index generation\", e);\n        return;\n      }\n    }\n\n    if (confFileNameAlias.size() < 1 || core.getCoreContainer().isZooKeeperAware())\n      return;\n    log.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n    rsp.add(STATUS, OK_STATUS);\n  }\n\n","bugFix":null,"bugIntro":["19f02bb04467ed179738a398a7da80bbbe161c16"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"19f02bb04467ed179738a398a7da80bbbe161c16","date":1573660732,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    final IndexDeletionPolicyWrapper delPol = core.getDeletionPolicy();\n    final long gen = Long.parseLong(solrParams.required().get(GENERATION));\n    \n    IndexCommit commit = null;\n    try {\n      if (gen == -1) {\n        commit = delPol.getAndSaveLatestCommit();\n        if (null == commit) {\n          rsp.add(CMD_GET_FILE_LIST, Collections.EMPTY_LIST);\n          return;\n        }\n      } else {\n        try {\n          commit = delPol.getAndSaveCommitPoint(gen);\n        } catch (IllegalStateException ignored) {\n          /* handle this below the same way we handle a return value of null... */\n        }\n        if (null == commit) {\n          // The gen they asked for either doesn't exist or has already been deleted\n          reportErrorOnResponse(rsp, \"invalid index generation\", null);\n          return;\n        }\n      }\n      assert null != commit;\n      \n      List<Map<String, Object>> result = new ArrayList<>();\n      Directory dir = null;\n      try {\n        dir = core.getDirectoryFactory().get(core.getNewIndexDir(), DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n        SegmentInfos infos = SegmentInfos.readCommit(dir, commit.getSegmentsFileName());\n        for (SegmentCommitInfo commitInfo : infos) {\n          for (String file : commitInfo.files()) {\n            Map<String, Object> fileMeta = new HashMap<>();\n            fileMeta.put(NAME, file);\n            fileMeta.put(SIZE, dir.fileLength(file));\n            \n            try (final IndexInput in = dir.openInput(file, IOContext.READONCE)) {\n              try {\n                long checksum = CodecUtil.retrieveChecksum(in);\n                fileMeta.put(CHECKSUM, checksum);\n              } catch (Exception e) {\n                //TODO Should this trigger a larger error?\n                log.warn(\"Could not read checksum from index file: \" + file, e);\n              }\n            }\n            \n            result.add(fileMeta);\n          }\n        }\n        \n        // add the segments_N file\n        \n        Map<String, Object> fileMeta = new HashMap<>();\n        fileMeta.put(NAME, infos.getSegmentsFileName());\n        fileMeta.put(SIZE, dir.fileLength(infos.getSegmentsFileName()));\n        if (infos.getId() != null) {\n          try (final IndexInput in = dir.openInput(infos.getSegmentsFileName(), IOContext.READONCE)) {\n            try {\n              fileMeta.put(CHECKSUM, CodecUtil.retrieveChecksum(in));\n            } catch (Exception e) {\n              //TODO Should this trigger a larger error?\n              log.warn(\"Could not read checksum from index file: \" + infos.getSegmentsFileName(), e);\n            }\n          }\n        }\n        result.add(fileMeta);\n      } catch (IOException e) {\n        log.error(\"Unable to get file names for indexCommit generation: \" + commit.getGeneration(), e);\n        reportErrorOnResponse(rsp, \"unable to get file names for given index generation\", e);\n        return;\n      } finally {\n        if (dir != null) {\n          try {\n            core.getDirectoryFactory().release(dir);\n          } catch (IOException e) {\n            SolrException.log(log, \"Could not release directory after fetching file list\", e);\n          }\n        }\n      }\n      rsp.add(CMD_GET_FILE_LIST, result);\n      \n      if (solrParams.getBool(TLOG_FILES, false)) {\n        try {\n          List<Map<String, Object>> tlogfiles = getTlogFileList(commit);\n          log.info(\"Adding tlog files to list: \" + tlogfiles);\n          rsp.add(TLOG_FILES, tlogfiles);\n        }\n        catch (IOException e) {\n          log.error(\"Unable to get tlog file names for indexCommit generation: \" + commit.getGeneration(), e);\n          reportErrorOnResponse(rsp, \"unable to get tlog file names for given index generation\", e);\n          return;\n        }\n      }\n      \n      if (confFileNameAlias.size() < 1 || core.getCoreContainer().isZooKeeperAware())\n        return;\n      log.debug(\"Adding config files to list: \" + includeConfFiles);\n      //if configuration files need to be included get their details\n      rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n      rsp.add(STATUS, OK_STATUS);\n      \n    } finally {\n      if (null != commit) {\n        // before releasing the save on our commit point, set a short reserve duration since\n        // the main reason remote nodes will ask for the file list is because they are preparing to\n        // replicate from us...\n        delPol.setReserveDuration(commit.getGeneration(), reserveCommitDuration);\n        delPol.releaseCommitPoint(commit);\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.required().get(GENERATION);\n    long gen = Long.parseLong(v);\n    if (gen == -1) {\n      IndexCommit commitPoint = core.getDeletionPolicy().getLatestCommit();\n      if(commitPoint == null) {\n        rsp.add(CMD_GET_FILE_LIST, Collections.EMPTY_LIST);\n        return;\n      }\n      gen = commitPoint.getGeneration();\n    }\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(gen);\n\n    if (commit == null) {\n      reportErrorOnResponse(rsp, \"invalid index generation\", null);\n      return;\n    }\n\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(gen, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<>();\n    Directory dir = null;\n    try {\n      dir = core.getDirectoryFactory().get(core.getNewIndexDir(), DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n      SegmentInfos infos = SegmentInfos.readCommit(dir, commit.getSegmentsFileName());\n      for (SegmentCommitInfo commitInfo : infos) {\n        for (String file : commitInfo.files()) {\n          Map<String, Object> fileMeta = new HashMap<>();\n          fileMeta.put(NAME, file);\n          fileMeta.put(SIZE, dir.fileLength(file));\n\n          try (final IndexInput in = dir.openInput(file, IOContext.READONCE)) {\n            try {\n              long checksum = CodecUtil.retrieveChecksum(in);\n              fileMeta.put(CHECKSUM, checksum);\n            } catch (Exception e) {\n              //TODO Should this trigger a larger error?\n              log.warn(\"Could not read checksum from index file: \" + file, e);\n            }\n          }\n\n          result.add(fileMeta);\n        }\n      }\n\n      // add the segments_N file\n\n      Map<String, Object> fileMeta = new HashMap<>();\n      fileMeta.put(NAME, infos.getSegmentsFileName());\n      fileMeta.put(SIZE, dir.fileLength(infos.getSegmentsFileName()));\n      if (infos.getId() != null) {\n        try (final IndexInput in = dir.openInput(infos.getSegmentsFileName(), IOContext.READONCE)) {\n          try {\n            fileMeta.put(CHECKSUM, CodecUtil.retrieveChecksum(in));\n          } catch (Exception e) {\n            //TODO Should this trigger a larger error?\n            log.warn(\"Could not read checksum from index file: \" + infos.getSegmentsFileName(), e);\n          }\n        }\n      }\n      result.add(fileMeta);\n    } catch (IOException e) {\n      log.error(\"Unable to get file names for indexCommit generation: \" + gen, e);\n      reportErrorOnResponse(rsp, \"unable to get file names for given index generation\", e);\n      return;\n    } finally {\n      if (dir != null) {\n        try {\n          core.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(log, \"Could not release directory after fetching file list\", e);\n        }\n      }\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n\n    if (solrParams.getBool(TLOG_FILES, false)) {\n      try {\n        List<Map<String, Object>> tlogfiles = getTlogFileList(commit);\n        log.info(\"Adding tlog files to list: \" + tlogfiles);\n        rsp.add(TLOG_FILES, tlogfiles);\n      }\n      catch (IOException e) {\n        log.error(\"Unable to get tlog file names for indexCommit generation: \" + gen, e);\n        reportErrorOnResponse(rsp, \"unable to get tlog file names for given index generation\", e);\n        return;\n      }\n    }\n\n    if (confFileNameAlias.size() < 1 || core.getCoreContainer().isZooKeeperAware())\n      return;\n    log.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n    rsp.add(STATUS, OK_STATUS);\n  }\n\n","bugFix":["86290366cefc1b9d4eced13b430858c4a4c0421d","634f330c54fd3f9f491d52036dc3f40b4f4d8934","c01638f4dd94981c1d3d52c4f7991246a5a24aba","729cb470f975115d4c60517b2cb7c42e37a7a2e1","6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9","e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","81d505b8f51b856e1b7e9dd377f5050c337b797a","77cae179618908dcb534af567cdf3019505ada6c","8d50ba1695a40ff11a41bbfc1ad45c7bfd6a5738","d9405f486872f1e416304dfe389741f4ee2f8a4d","1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674","7b13106276bb5ea342253dbf6aae7b675adb38d3","cef15a56c64f46175c1d6df43f47d4b09f44d57b","9767eba84e83b05b2a675421e190f4a4c15dad44","f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349","9be231d18ef58129524215a1d30331523320b744","5cb65c1c2f90852e718f86c8be09beb1c4dba408"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    final IndexDeletionPolicyWrapper delPol = core.getDeletionPolicy();\n    final long gen = Long.parseLong(solrParams.required().get(GENERATION));\n    \n    IndexCommit commit = null;\n    try {\n      if (gen == -1) {\n        commit = delPol.getAndSaveLatestCommit();\n        if (null == commit) {\n          rsp.add(CMD_GET_FILE_LIST, Collections.EMPTY_LIST);\n          return;\n        }\n      } else {\n        try {\n          commit = delPol.getAndSaveCommitPoint(gen);\n        } catch (IllegalStateException ignored) {\n          /* handle this below the same way we handle a return value of null... */\n        }\n        if (null == commit) {\n          // The gen they asked for either doesn't exist or has already been deleted\n          reportErrorOnResponse(rsp, \"invalid index generation\", null);\n          return;\n        }\n      }\n      assert null != commit;\n      \n      List<Map<String, Object>> result = new ArrayList<>();\n      Directory dir = null;\n      try {\n        dir = core.getDirectoryFactory().get(core.getNewIndexDir(), DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n        SegmentInfos infos = SegmentInfos.readCommit(dir, commit.getSegmentsFileName());\n        for (SegmentCommitInfo commitInfo : infos) {\n          for (String file : commitInfo.files()) {\n            Map<String, Object> fileMeta = new HashMap<>();\n            fileMeta.put(NAME, file);\n            fileMeta.put(SIZE, dir.fileLength(file));\n            \n            try (final IndexInput in = dir.openInput(file, IOContext.READONCE)) {\n              try {\n                long checksum = CodecUtil.retrieveChecksum(in);\n                fileMeta.put(CHECKSUM, checksum);\n              } catch (Exception e) {\n                //TODO Should this trigger a larger error?\n                log.warn(\"Could not read checksum from index file: {}\", file, e);\n              }\n            }\n            \n            result.add(fileMeta);\n          }\n        }\n        \n        // add the segments_N file\n        \n        Map<String, Object> fileMeta = new HashMap<>();\n        fileMeta.put(NAME, infos.getSegmentsFileName());\n        fileMeta.put(SIZE, dir.fileLength(infos.getSegmentsFileName()));\n        if (infos.getId() != null) {\n          try (final IndexInput in = dir.openInput(infos.getSegmentsFileName(), IOContext.READONCE)) {\n            try {\n              fileMeta.put(CHECKSUM, CodecUtil.retrieveChecksum(in));\n            } catch (Exception e) {\n              //TODO Should this trigger a larger error?\n              log.warn(\"Could not read checksum from index file: {}\", infos.getSegmentsFileName(), e);\n            }\n          }\n        }\n        result.add(fileMeta);\n      } catch (IOException e) {\n        log.error(\"Unable to get file names for indexCommit generation: {}\", commit.getGeneration(), e);\n        reportErrorOnResponse(rsp, \"unable to get file names for given index generation\", e);\n        return;\n      } finally {\n        if (dir != null) {\n          try {\n            core.getDirectoryFactory().release(dir);\n          } catch (IOException e) {\n            SolrException.log(log, \"Could not release directory after fetching file list\", e);\n          }\n        }\n      }\n      rsp.add(CMD_GET_FILE_LIST, result);\n      \n      if (solrParams.getBool(TLOG_FILES, false)) {\n        try {\n          List<Map<String, Object>> tlogfiles = getTlogFileList(commit);\n          log.info(\"Adding tlog files to list: {}\", tlogfiles);\n          rsp.add(TLOG_FILES, tlogfiles);\n        }\n        catch (IOException e) {\n          log.error(\"Unable to get tlog file names for indexCommit generation: {}\", commit.getGeneration(), e);\n          reportErrorOnResponse(rsp, \"unable to get tlog file names for given index generation\", e);\n          return;\n        }\n      }\n      \n      if (confFileNameAlias.size() < 1 || core.getCoreContainer().isZooKeeperAware())\n        return;\n      log.debug(\"Adding config files to list: {}\", includeConfFiles);\n      //if configuration files need to be included get their details\n      rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n      rsp.add(STATUS, OK_STATUS);\n      \n    } finally {\n      if (null != commit) {\n        // before releasing the save on our commit point, set a short reserve duration since\n        // the main reason remote nodes will ask for the file list is because they are preparing to\n        // replicate from us...\n        delPol.setReserveDuration(commit.getGeneration(), reserveCommitDuration);\n        delPol.releaseCommitPoint(commit);\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    final IndexDeletionPolicyWrapper delPol = core.getDeletionPolicy();\n    final long gen = Long.parseLong(solrParams.required().get(GENERATION));\n    \n    IndexCommit commit = null;\n    try {\n      if (gen == -1) {\n        commit = delPol.getAndSaveLatestCommit();\n        if (null == commit) {\n          rsp.add(CMD_GET_FILE_LIST, Collections.EMPTY_LIST);\n          return;\n        }\n      } else {\n        try {\n          commit = delPol.getAndSaveCommitPoint(gen);\n        } catch (IllegalStateException ignored) {\n          /* handle this below the same way we handle a return value of null... */\n        }\n        if (null == commit) {\n          // The gen they asked for either doesn't exist or has already been deleted\n          reportErrorOnResponse(rsp, \"invalid index generation\", null);\n          return;\n        }\n      }\n      assert null != commit;\n      \n      List<Map<String, Object>> result = new ArrayList<>();\n      Directory dir = null;\n      try {\n        dir = core.getDirectoryFactory().get(core.getNewIndexDir(), DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n        SegmentInfos infos = SegmentInfos.readCommit(dir, commit.getSegmentsFileName());\n        for (SegmentCommitInfo commitInfo : infos) {\n          for (String file : commitInfo.files()) {\n            Map<String, Object> fileMeta = new HashMap<>();\n            fileMeta.put(NAME, file);\n            fileMeta.put(SIZE, dir.fileLength(file));\n            \n            try (final IndexInput in = dir.openInput(file, IOContext.READONCE)) {\n              try {\n                long checksum = CodecUtil.retrieveChecksum(in);\n                fileMeta.put(CHECKSUM, checksum);\n              } catch (Exception e) {\n                //TODO Should this trigger a larger error?\n                log.warn(\"Could not read checksum from index file: \" + file, e);\n              }\n            }\n            \n            result.add(fileMeta);\n          }\n        }\n        \n        // add the segments_N file\n        \n        Map<String, Object> fileMeta = new HashMap<>();\n        fileMeta.put(NAME, infos.getSegmentsFileName());\n        fileMeta.put(SIZE, dir.fileLength(infos.getSegmentsFileName()));\n        if (infos.getId() != null) {\n          try (final IndexInput in = dir.openInput(infos.getSegmentsFileName(), IOContext.READONCE)) {\n            try {\n              fileMeta.put(CHECKSUM, CodecUtil.retrieveChecksum(in));\n            } catch (Exception e) {\n              //TODO Should this trigger a larger error?\n              log.warn(\"Could not read checksum from index file: \" + infos.getSegmentsFileName(), e);\n            }\n          }\n        }\n        result.add(fileMeta);\n      } catch (IOException e) {\n        log.error(\"Unable to get file names for indexCommit generation: \" + commit.getGeneration(), e);\n        reportErrorOnResponse(rsp, \"unable to get file names for given index generation\", e);\n        return;\n      } finally {\n        if (dir != null) {\n          try {\n            core.getDirectoryFactory().release(dir);\n          } catch (IOException e) {\n            SolrException.log(log, \"Could not release directory after fetching file list\", e);\n          }\n        }\n      }\n      rsp.add(CMD_GET_FILE_LIST, result);\n      \n      if (solrParams.getBool(TLOG_FILES, false)) {\n        try {\n          List<Map<String, Object>> tlogfiles = getTlogFileList(commit);\n          log.info(\"Adding tlog files to list: \" + tlogfiles);\n          rsp.add(TLOG_FILES, tlogfiles);\n        }\n        catch (IOException e) {\n          log.error(\"Unable to get tlog file names for indexCommit generation: \" + commit.getGeneration(), e);\n          reportErrorOnResponse(rsp, \"unable to get tlog file names for given index generation\", e);\n          return;\n        }\n      }\n      \n      if (confFileNameAlias.size() < 1 || core.getCoreContainer().isZooKeeperAware())\n        return;\n      log.debug(\"Adding config files to list: \" + includeConfFiles);\n      //if configuration files need to be included get their details\n      rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n      rsp.add(STATUS, OK_STATUS);\n      \n    } finally {\n      if (null != commit) {\n        // before releasing the save on our commit point, set a short reserve duration since\n        // the main reason remote nodes will ask for the file list is because they are preparing to\n        // replicate from us...\n        delPol.setReserveDuration(commit.getGeneration(), reserveCommitDuration);\n        delPol.releaseCommitPoint(commit);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3adc4d119a7deba35b2721853853464857d9d0a9","date":1594608068,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","sourceNew":"  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    final IndexDeletionPolicyWrapper delPol = core.getDeletionPolicy();\n    final long gen = Long.parseLong(solrParams.required().get(GENERATION));\n    \n    IndexCommit commit = null;\n    try {\n      if (gen == -1) {\n        commit = delPol.getAndSaveLatestCommit();\n        if (null == commit) {\n          rsp.add(CMD_GET_FILE_LIST, Collections.emptyList());\n          return;\n        }\n      } else {\n        try {\n          commit = delPol.getAndSaveCommitPoint(gen);\n        } catch (IllegalStateException ignored) {\n          /* handle this below the same way we handle a return value of null... */\n        }\n        if (null == commit) {\n          // The gen they asked for either doesn't exist or has already been deleted\n          reportErrorOnResponse(rsp, \"invalid index generation\", null);\n          return;\n        }\n      }\n      assert null != commit;\n      \n      List<Map<String, Object>> result = new ArrayList<>();\n      Directory dir = null;\n      try {\n        dir = core.getDirectoryFactory().get(core.getNewIndexDir(), DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n        SegmentInfos infos = SegmentInfos.readCommit(dir, commit.getSegmentsFileName());\n        for (SegmentCommitInfo commitInfo : infos) {\n          for (String file : commitInfo.files()) {\n            Map<String, Object> fileMeta = new HashMap<>();\n            fileMeta.put(NAME, file);\n            fileMeta.put(SIZE, dir.fileLength(file));\n            \n            try (final IndexInput in = dir.openInput(file, IOContext.READONCE)) {\n              try {\n                long checksum = CodecUtil.retrieveChecksum(in);\n                fileMeta.put(CHECKSUM, checksum);\n              } catch (Exception e) {\n                //TODO Should this trigger a larger error?\n                log.warn(\"Could not read checksum from index file: {}\", file, e);\n              }\n            }\n            \n            result.add(fileMeta);\n          }\n        }\n        \n        // add the segments_N file\n        \n        Map<String, Object> fileMeta = new HashMap<>();\n        fileMeta.put(NAME, infos.getSegmentsFileName());\n        fileMeta.put(SIZE, dir.fileLength(infos.getSegmentsFileName()));\n        if (infos.getId() != null) {\n          try (final IndexInput in = dir.openInput(infos.getSegmentsFileName(), IOContext.READONCE)) {\n            try {\n              fileMeta.put(CHECKSUM, CodecUtil.retrieveChecksum(in));\n            } catch (Exception e) {\n              //TODO Should this trigger a larger error?\n              log.warn(\"Could not read checksum from index file: {}\", infos.getSegmentsFileName(), e);\n            }\n          }\n        }\n        result.add(fileMeta);\n      } catch (IOException e) {\n        log.error(\"Unable to get file names for indexCommit generation: {}\", commit.getGeneration(), e);\n        reportErrorOnResponse(rsp, \"unable to get file names for given index generation\", e);\n        return;\n      } finally {\n        if (dir != null) {\n          try {\n            core.getDirectoryFactory().release(dir);\n          } catch (IOException e) {\n            SolrException.log(log, \"Could not release directory after fetching file list\", e);\n          }\n        }\n      }\n      rsp.add(CMD_GET_FILE_LIST, result);\n      \n      if (solrParams.getBool(TLOG_FILES, false)) {\n        try {\n          List<Map<String, Object>> tlogfiles = getTlogFileList(commit);\n          log.info(\"Adding tlog files to list: {}\", tlogfiles);\n          rsp.add(TLOG_FILES, tlogfiles);\n        }\n        catch (IOException e) {\n          log.error(\"Unable to get tlog file names for indexCommit generation: {}\", commit.getGeneration(), e);\n          reportErrorOnResponse(rsp, \"unable to get tlog file names for given index generation\", e);\n          return;\n        }\n      }\n      \n      if (confFileNameAlias.size() < 1 || core.getCoreContainer().isZooKeeperAware())\n        return;\n      log.debug(\"Adding config files to list: {}\", includeConfFiles);\n      //if configuration files need to be included get their details\n      rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n      rsp.add(STATUS, OK_STATUS);\n      \n    } finally {\n      if (null != commit) {\n        // before releasing the save on our commit point, set a short reserve duration since\n        // the main reason remote nodes will ask for the file list is because they are preparing to\n        // replicate from us...\n        delPol.setReserveDuration(commit.getGeneration(), reserveCommitDuration);\n        delPol.releaseCommitPoint(commit);\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    final IndexDeletionPolicyWrapper delPol = core.getDeletionPolicy();\n    final long gen = Long.parseLong(solrParams.required().get(GENERATION));\n    \n    IndexCommit commit = null;\n    try {\n      if (gen == -1) {\n        commit = delPol.getAndSaveLatestCommit();\n        if (null == commit) {\n          rsp.add(CMD_GET_FILE_LIST, Collections.EMPTY_LIST);\n          return;\n        }\n      } else {\n        try {\n          commit = delPol.getAndSaveCommitPoint(gen);\n        } catch (IllegalStateException ignored) {\n          /* handle this below the same way we handle a return value of null... */\n        }\n        if (null == commit) {\n          // The gen they asked for either doesn't exist or has already been deleted\n          reportErrorOnResponse(rsp, \"invalid index generation\", null);\n          return;\n        }\n      }\n      assert null != commit;\n      \n      List<Map<String, Object>> result = new ArrayList<>();\n      Directory dir = null;\n      try {\n        dir = core.getDirectoryFactory().get(core.getNewIndexDir(), DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n        SegmentInfos infos = SegmentInfos.readCommit(dir, commit.getSegmentsFileName());\n        for (SegmentCommitInfo commitInfo : infos) {\n          for (String file : commitInfo.files()) {\n            Map<String, Object> fileMeta = new HashMap<>();\n            fileMeta.put(NAME, file);\n            fileMeta.put(SIZE, dir.fileLength(file));\n            \n            try (final IndexInput in = dir.openInput(file, IOContext.READONCE)) {\n              try {\n                long checksum = CodecUtil.retrieveChecksum(in);\n                fileMeta.put(CHECKSUM, checksum);\n              } catch (Exception e) {\n                //TODO Should this trigger a larger error?\n                log.warn(\"Could not read checksum from index file: {}\", file, e);\n              }\n            }\n            \n            result.add(fileMeta);\n          }\n        }\n        \n        // add the segments_N file\n        \n        Map<String, Object> fileMeta = new HashMap<>();\n        fileMeta.put(NAME, infos.getSegmentsFileName());\n        fileMeta.put(SIZE, dir.fileLength(infos.getSegmentsFileName()));\n        if (infos.getId() != null) {\n          try (final IndexInput in = dir.openInput(infos.getSegmentsFileName(), IOContext.READONCE)) {\n            try {\n              fileMeta.put(CHECKSUM, CodecUtil.retrieveChecksum(in));\n            } catch (Exception e) {\n              //TODO Should this trigger a larger error?\n              log.warn(\"Could not read checksum from index file: {}\", infos.getSegmentsFileName(), e);\n            }\n          }\n        }\n        result.add(fileMeta);\n      } catch (IOException e) {\n        log.error(\"Unable to get file names for indexCommit generation: {}\", commit.getGeneration(), e);\n        reportErrorOnResponse(rsp, \"unable to get file names for given index generation\", e);\n        return;\n      } finally {\n        if (dir != null) {\n          try {\n            core.getDirectoryFactory().release(dir);\n          } catch (IOException e) {\n            SolrException.log(log, \"Could not release directory after fetching file list\", e);\n          }\n        }\n      }\n      rsp.add(CMD_GET_FILE_LIST, result);\n      \n      if (solrParams.getBool(TLOG_FILES, false)) {\n        try {\n          List<Map<String, Object>> tlogfiles = getTlogFileList(commit);\n          log.info(\"Adding tlog files to list: {}\", tlogfiles);\n          rsp.add(TLOG_FILES, tlogfiles);\n        }\n        catch (IOException e) {\n          log.error(\"Unable to get tlog file names for indexCommit generation: {}\", commit.getGeneration(), e);\n          reportErrorOnResponse(rsp, \"unable to get tlog file names for given index generation\", e);\n          return;\n        }\n      }\n      \n      if (confFileNameAlias.size() < 1 || core.getCoreContainer().isZooKeeperAware())\n        return;\n      log.debug(\"Adding config files to list: {}\", includeConfFiles);\n      //if configuration files need to be included get their details\n      rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n      rsp.add(STATUS, OK_STATUS);\n      \n    } finally {\n      if (null != commit) {\n        // before releasing the save on our commit point, set a short reserve duration since\n        // the main reason remote nodes will ask for the file list is because they are preparing to\n        // replicate from us...\n        delPol.setReserveDuration(commit.getGeneration(), reserveCommitDuration);\n        delPol.releaseCommitPoint(commit);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","sourceNew":"  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    final IndexDeletionPolicyWrapper delPol = core.getDeletionPolicy();\n    final long gen = Long.parseLong(solrParams.required().get(GENERATION));\n    \n    IndexCommit commit = null;\n    try {\n      if (gen == -1) {\n        commit = delPol.getAndSaveLatestCommit();\n        if (null == commit) {\n          rsp.add(CMD_GET_FILE_LIST, Collections.emptyList());\n          return;\n        }\n      } else {\n        try {\n          commit = delPol.getAndSaveCommitPoint(gen);\n        } catch (IllegalStateException ignored) {\n          /* handle this below the same way we handle a return value of null... */\n        }\n        if (null == commit) {\n          // The gen they asked for either doesn't exist or has already been deleted\n          reportErrorOnResponse(rsp, \"invalid index generation\", null);\n          return;\n        }\n      }\n      assert null != commit;\n      \n      List<Map<String, Object>> result = new ArrayList<>();\n      Directory dir = null;\n      try {\n        dir = core.getDirectoryFactory().get(core.getNewIndexDir(), DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n        SegmentInfos infos = SegmentInfos.readCommit(dir, commit.getSegmentsFileName());\n        for (SegmentCommitInfo commitInfo : infos) {\n          for (String file : commitInfo.files()) {\n            Map<String, Object> fileMeta = new HashMap<>();\n            fileMeta.put(NAME, file);\n            fileMeta.put(SIZE, dir.fileLength(file));\n            \n            try (final IndexInput in = dir.openInput(file, IOContext.READONCE)) {\n              try {\n                long checksum = CodecUtil.retrieveChecksum(in);\n                fileMeta.put(CHECKSUM, checksum);\n              } catch (Exception e) {\n                //TODO Should this trigger a larger error?\n                log.warn(\"Could not read checksum from index file: {}\", file, e);\n              }\n            }\n            \n            result.add(fileMeta);\n          }\n        }\n        \n        // add the segments_N file\n        \n        Map<String, Object> fileMeta = new HashMap<>();\n        fileMeta.put(NAME, infos.getSegmentsFileName());\n        fileMeta.put(SIZE, dir.fileLength(infos.getSegmentsFileName()));\n        if (infos.getId() != null) {\n          try (final IndexInput in = dir.openInput(infos.getSegmentsFileName(), IOContext.READONCE)) {\n            try {\n              fileMeta.put(CHECKSUM, CodecUtil.retrieveChecksum(in));\n            } catch (Exception e) {\n              //TODO Should this trigger a larger error?\n              log.warn(\"Could not read checksum from index file: {}\", infos.getSegmentsFileName(), e);\n            }\n          }\n        }\n        result.add(fileMeta);\n      } catch (IOException e) {\n        log.error(\"Unable to get file names for indexCommit generation: {}\", commit.getGeneration(), e);\n        reportErrorOnResponse(rsp, \"unable to get file names for given index generation\", e);\n        return;\n      } finally {\n        if (dir != null) {\n          try {\n            core.getDirectoryFactory().release(dir);\n          } catch (IOException e) {\n            SolrException.log(log, \"Could not release directory after fetching file list\", e);\n          }\n        }\n      }\n      rsp.add(CMD_GET_FILE_LIST, result);\n      \n      if (confFileNameAlias.size() < 1 || core.getCoreContainer().isZooKeeperAware())\n        return;\n      log.debug(\"Adding config files to list: {}\", includeConfFiles);\n      //if configuration files need to be included get their details\n      rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n      rsp.add(STATUS, OK_STATUS);\n      \n    } finally {\n      if (null != commit) {\n        // before releasing the save on our commit point, set a short reserve duration since\n        // the main reason remote nodes will ask for the file list is because they are preparing to\n        // replicate from us...\n        delPol.setReserveDuration(commit.getGeneration(), reserveCommitDuration);\n        delPol.releaseCommitPoint(commit);\n      }\n    }\n  }\n\n","sourceOld":"  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    final IndexDeletionPolicyWrapper delPol = core.getDeletionPolicy();\n    final long gen = Long.parseLong(solrParams.required().get(GENERATION));\n    \n    IndexCommit commit = null;\n    try {\n      if (gen == -1) {\n        commit = delPol.getAndSaveLatestCommit();\n        if (null == commit) {\n          rsp.add(CMD_GET_FILE_LIST, Collections.emptyList());\n          return;\n        }\n      } else {\n        try {\n          commit = delPol.getAndSaveCommitPoint(gen);\n        } catch (IllegalStateException ignored) {\n          /* handle this below the same way we handle a return value of null... */\n        }\n        if (null == commit) {\n          // The gen they asked for either doesn't exist or has already been deleted\n          reportErrorOnResponse(rsp, \"invalid index generation\", null);\n          return;\n        }\n      }\n      assert null != commit;\n      \n      List<Map<String, Object>> result = new ArrayList<>();\n      Directory dir = null;\n      try {\n        dir = core.getDirectoryFactory().get(core.getNewIndexDir(), DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n        SegmentInfos infos = SegmentInfos.readCommit(dir, commit.getSegmentsFileName());\n        for (SegmentCommitInfo commitInfo : infos) {\n          for (String file : commitInfo.files()) {\n            Map<String, Object> fileMeta = new HashMap<>();\n            fileMeta.put(NAME, file);\n            fileMeta.put(SIZE, dir.fileLength(file));\n            \n            try (final IndexInput in = dir.openInput(file, IOContext.READONCE)) {\n              try {\n                long checksum = CodecUtil.retrieveChecksum(in);\n                fileMeta.put(CHECKSUM, checksum);\n              } catch (Exception e) {\n                //TODO Should this trigger a larger error?\n                log.warn(\"Could not read checksum from index file: {}\", file, e);\n              }\n            }\n            \n            result.add(fileMeta);\n          }\n        }\n        \n        // add the segments_N file\n        \n        Map<String, Object> fileMeta = new HashMap<>();\n        fileMeta.put(NAME, infos.getSegmentsFileName());\n        fileMeta.put(SIZE, dir.fileLength(infos.getSegmentsFileName()));\n        if (infos.getId() != null) {\n          try (final IndexInput in = dir.openInput(infos.getSegmentsFileName(), IOContext.READONCE)) {\n            try {\n              fileMeta.put(CHECKSUM, CodecUtil.retrieveChecksum(in));\n            } catch (Exception e) {\n              //TODO Should this trigger a larger error?\n              log.warn(\"Could not read checksum from index file: {}\", infos.getSegmentsFileName(), e);\n            }\n          }\n        }\n        result.add(fileMeta);\n      } catch (IOException e) {\n        log.error(\"Unable to get file names for indexCommit generation: {}\", commit.getGeneration(), e);\n        reportErrorOnResponse(rsp, \"unable to get file names for given index generation\", e);\n        return;\n      } finally {\n        if (dir != null) {\n          try {\n            core.getDirectoryFactory().release(dir);\n          } catch (IOException e) {\n            SolrException.log(log, \"Could not release directory after fetching file list\", e);\n          }\n        }\n      }\n      rsp.add(CMD_GET_FILE_LIST, result);\n      \n      if (solrParams.getBool(TLOG_FILES, false)) {\n        try {\n          List<Map<String, Object>> tlogfiles = getTlogFileList(commit);\n          log.info(\"Adding tlog files to list: {}\", tlogfiles);\n          rsp.add(TLOG_FILES, tlogfiles);\n        }\n        catch (IOException e) {\n          log.error(\"Unable to get tlog file names for indexCommit generation: {}\", commit.getGeneration(), e);\n          reportErrorOnResponse(rsp, \"unable to get tlog file names for given index generation\", e);\n          return;\n        }\n      }\n      \n      if (confFileNameAlias.size() < 1 || core.getCoreContainer().isZooKeeperAware())\n        return;\n      log.debug(\"Adding config files to list: {}\", includeConfFiles);\n      //if configuration files need to be included get their details\n      rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n      rsp.add(STATUS, OK_STATUS);\n      \n    } finally {\n      if (null != commit) {\n        // before releasing the save on our commit point, set a short reserve duration since\n        // the main reason remote nodes will ask for the file list is because they are preparing to\n        // replicate from us...\n        delPol.setReserveDuration(commit.getGeneration(), reserveCommitDuration);\n        delPol.releaseCommitPoint(commit);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["06e38ae84477e7a7eacea808dc3de9950fce5ccf"],"77cae179618908dcb534af567cdf3019505ada6c":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["c01638f4dd94981c1d3d52c4f7991246a5a24aba","4595e68ef6915713e33c6d6c83bffdb49b65761e"],"c01638f4dd94981c1d3d52c4f7991246a5a24aba":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["407687e67faf6e1f02a211ca078d8e3eed631027","1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674"],"1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674":["718607d99d02778db3280e64975663762c94170d"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["4595e68ef6915713e33c6d6c83bffdb49b65761e"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["4f11ea4f58f7fefe4a8c99ee19b3c388d7f98d60","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"3adc4d119a7deba35b2721853853464857d9d0a9":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"19f02bb04467ed179738a398a7da80bbbe161c16":["81d505b8f51b856e1b7e9dd377f5050c337b797a"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["19f02bb04467ed179738a398a7da80bbbe161c16"],"46072079af1a2f83383e9483505da7226a0aec03":["cef15a56c64f46175c1d6df43f47d4b09f44d57b"],"4595e68ef6915713e33c6d6c83bffdb49b65761e":["c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["cef15a56c64f46175c1d6df43f47d4b09f44d57b","46072079af1a2f83383e9483505da7226a0aec03"],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":["d2638f781be724518ff6c2263d14a48cf6e68017","7b13106276bb5ea342253dbf6aae7b675adb38d3"],"4f11ea4f58f7fefe4a8c99ee19b3c388d7f98d60":["c26f00b574427b55127e869b935845554afde1fa"],"5b6fdfce35d0adb18836cf8711abe487a934df33":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"f2126b84bd093fa3d921582a109a0ee578c28126":["4595e68ef6915713e33c6d6c83bffdb49b65761e","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["9767eba84e83b05b2a675421e190f4a4c15dad44"],"9767eba84e83b05b2a675421e190f4a4c15dad44":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d9405f486872f1e416304dfe389741f4ee2f8a4d","718607d99d02778db3280e64975663762c94170d"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["4f11ea4f58f7fefe4a8c99ee19b3c388d7f98d60","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"81d505b8f51b856e1b7e9dd377f5050c337b797a":["5cb65c1c2f90852e718f86c8be09beb1c4dba408"],"06e38ae84477e7a7eacea808dc3de9950fce5ccf":["77cae179618908dcb534af567cdf3019505ada6c"],"cef15a56c64f46175c1d6df43f47d4b09f44d57b":["8d50ba1695a40ff11a41bbfc1ad45c7bfd6a5738"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["06e38ae84477e7a7eacea808dc3de9950fce5ccf"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["77cae179618908dcb534af567cdf3019505ada6c","06e38ae84477e7a7eacea808dc3de9950fce5ccf"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["7b13106276bb5ea342253dbf6aae7b675adb38d3"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":["0d22ac6a4146774c1bc8400160fc0b6150294e92","c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"8d50ba1695a40ff11a41bbfc1ad45c7bfd6a5738":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["4f11ea4f58f7fefe4a8c99ee19b3c388d7f98d60"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5cb65c1c2f90852e718f86c8be09beb1c4dba408":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"718607d99d02778db3280e64975663762c94170d":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["3adc4d119a7deba35b2721853853464857d9d0a9"],"7b13106276bb5ea342253dbf6aae7b675adb38d3":["46072079af1a2f83383e9483505da7226a0aec03"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["77cae179618908dcb534af567cdf3019505ada6c","06e38ae84477e7a7eacea808dc3de9950fce5ccf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"77cae179618908dcb534af567cdf3019505ada6c":["06e38ae84477e7a7eacea808dc3de9950fce5ccf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"c01638f4dd94981c1d3d52c4f7991246a5a24aba":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","4595e68ef6915713e33c6d6c83bffdb49b65761e","5b6fdfce35d0adb18836cf8711abe487a934df33","817882884229bace7dc5d1b75f6b0e4aa1e47122"],"c26f00b574427b55127e869b935845554afde1fa":["4f11ea4f58f7fefe4a8c99ee19b3c388d7f98d60"],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674":["8917bfede3b4ca30f4305c1e391e9218959cd723","634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["f2126b84bd093fa3d921582a109a0ee578c28126","407687e67faf6e1f02a211ca078d8e3eed631027","718607d99d02778db3280e64975663762c94170d"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["817882884229bace7dc5d1b75f6b0e4aa1e47122"],"3adc4d119a7deba35b2721853853464857d9d0a9":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"19f02bb04467ed179738a398a7da80bbbe161c16":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"4595e68ef6915713e33c6d6c83bffdb49b65761e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d9405f486872f1e416304dfe389741f4ee2f8a4d","f2126b84bd093fa3d921582a109a0ee578c28126"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["3adc4d119a7deba35b2721853853464857d9d0a9"],"46072079af1a2f83383e9483505da7226a0aec03":["d2638f781be724518ff6c2263d14a48cf6e68017","7b13106276bb5ea342253dbf6aae7b675adb38d3"],"d2638f781be724518ff6c2263d14a48cf6e68017":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c"],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":[],"4f11ea4f58f7fefe4a8c99ee19b3c388d7f98d60":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["5cb65c1c2f90852e718f86c8be09beb1c4dba408"],"9767eba84e83b05b2a675421e190f4a4c15dad44":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["8d50ba1695a40ff11a41bbfc1ad45c7bfd6a5738"],"407687e67faf6e1f02a211ca078d8e3eed631027":["8917bfede3b4ca30f4305c1e391e9218959cd723"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["5b6fdfce35d0adb18836cf8711abe487a934df33"],"81d505b8f51b856e1b7e9dd377f5050c337b797a":["19f02bb04467ed179738a398a7da80bbbe161c16"],"06e38ae84477e7a7eacea808dc3de9950fce5ccf":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","729cb470f975115d4c60517b2cb7c42e37a7a2e1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"cef15a56c64f46175c1d6df43f47d4b09f44d57b":["46072079af1a2f83383e9483505da7226a0aec03","d2638f781be724518ff6c2263d14a48cf6e68017"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["9767eba84e83b05b2a675421e190f4a4c15dad44"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"86290366cefc1b9d4eced13b430858c4a4c0421d":["77cae179618908dcb534af567cdf3019505ada6c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":[],"8d50ba1695a40ff11a41bbfc1ad45c7bfd6a5738":["cef15a56c64f46175c1d6df43f47d4b09f44d57b"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["c01638f4dd94981c1d3d52c4f7991246a5a24aba","0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"718607d99d02778db3280e64975663762c94170d":["1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674","407687e67faf6e1f02a211ca078d8e3eed631027"],"5cb65c1c2f90852e718f86c8be09beb1c4dba408":["81d505b8f51b856e1b7e9dd377f5050c337b797a"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7b13106276bb5ea342253dbf6aae7b675adb38d3":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","86290366cefc1b9d4eced13b430858c4a4c0421d"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","8917bfede3b4ca30f4305c1e391e9218959cd723","6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","5b6fdfce35d0adb18836cf8711abe487a934df33","f2126b84bd093fa3d921582a109a0ee578c28126","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","817882884229bace7dc5d1b75f6b0e4aa1e47122","a258fbb26824fd104ed795e5d9033d2d040049ee","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}