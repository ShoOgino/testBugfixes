{"path":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardTermsDictReader.FieldReader.SegmentTermsEnum#seek(long).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardTermsDictReader.FieldReader.SegmentTermsEnum#seek(long).mjava","pathOld":"/dev/null","sourceNew":"      @Override\n      public SeekStatus seek(long ord) throws IOException {\n\n        // TODO: should we cache term lookup by ord as well...?\n\n        if (ord >= numTerms) {\n          state.ord = numTerms-1;\n          return SeekStatus.END;\n        }\n\n        indexReader.getIndexOffset(ord, indexResult);\n        in.seek(indexResult.offset);\n        seekPending = false;\n\n        // NOTE: the first next() after an index seek is\n        // wasteful, since it redundantly reads the same\n        // bytes into the buffer\n        bytesReader.reset(indexResult.term);\n\n        state.ord = indexResult.position-1;\n        assert state.ord >= -1: \"ord=\" + state.ord;\n\n        // Now, scan:\n        int left = (int) (ord - state.ord);\n        while(left > 0) {\n          final BytesRef term = next();\n          assert term != null;\n          left--;\n        }\n\n        // always found\n        return SeekStatus.FOUND;\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"552356653fbcba144cd337e76f4abe8885913817","date":1273339661,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardTermsDictReader.FieldReader.SegmentTermsEnum#seek(long).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardTermsDictReader.FieldReader.SegmentTermsEnum#seek(long).mjava","sourceNew":"      @Override\n      public SeekStatus seek(long ord) throws IOException {\n\n        // TODO: should we cache term lookup by ord as well...?\n\n        if (ord >= numTerms) {\n          state.ord = numTerms-1;\n          return SeekStatus.END;\n        }\n\n        fieldIndexReader.getIndexOffset(ord, indexResult);\n        in.seek(indexResult.offset);\n        seekPending = false;\n\n        // NOTE: the first next() after an index seek is\n        // wasteful, since it redundantly reads the same\n        // bytes into the buffer\n        bytesReader.reset(indexResult.term);\n\n        state.ord = indexResult.position-1;\n        assert state.ord >= -1: \"ord=\" + state.ord;\n\n        // Now, scan:\n        int left = (int) (ord - state.ord);\n        while(left > 0) {\n          final BytesRef term = next();\n          assert term != null;\n          left--;\n        }\n\n        // always found\n        return SeekStatus.FOUND;\n      }\n\n","sourceOld":"      @Override\n      public SeekStatus seek(long ord) throws IOException {\n\n        // TODO: should we cache term lookup by ord as well...?\n\n        if (ord >= numTerms) {\n          state.ord = numTerms-1;\n          return SeekStatus.END;\n        }\n\n        indexReader.getIndexOffset(ord, indexResult);\n        in.seek(indexResult.offset);\n        seekPending = false;\n\n        // NOTE: the first next() after an index seek is\n        // wasteful, since it redundantly reads the same\n        // bytes into the buffer\n        bytesReader.reset(indexResult.term);\n\n        state.ord = indexResult.position-1;\n        assert state.ord >= -1: \"ord=\" + state.ord;\n\n        // Now, scan:\n        int left = (int) (ord - state.ord);\n        while(left > 0) {\n          final BytesRef term = next();\n          assert term != null;\n          left--;\n        }\n\n        // always found\n        return SeekStatus.FOUND;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99cf56f3a650b908f7017a72f9d23940418f8a52","date":1284891529,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader.FieldReader.SegmentTermsEnum#seek(long).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardTermsDictReader.FieldReader.SegmentTermsEnum#seek(long).mjava","sourceNew":"      @Override\n      public SeekStatus seek(long ord) throws IOException {\n\n        // TODO: should we cache term lookup by ord as well...?\n\n        if (ord >= numTerms) {\n          state.ord = numTerms-1;\n          return SeekStatus.END;\n        }\n\n        fieldIndexReader.getIndexOffset(ord, indexResult);\n        in.seek(indexResult.offset);\n        seekPending = false;\n\n        // NOTE: the first next() after an index seek is\n        // wasteful, since it redundantly reads the same\n        // bytes into the buffer\n        bytesReader.reset(indexResult.term);\n\n        state.ord = indexResult.position-1;\n        assert state.ord >= -1: \"ord=\" + state.ord;\n\n        // Now, scan:\n        int left = (int) (ord - state.ord);\n        while(left > 0) {\n          final BytesRef term = next();\n          assert term != null;\n          left--;\n        }\n\n        // always found\n        return SeekStatus.FOUND;\n      }\n\n","sourceOld":"      @Override\n      public SeekStatus seek(long ord) throws IOException {\n\n        // TODO: should we cache term lookup by ord as well...?\n\n        if (ord >= numTerms) {\n          state.ord = numTerms-1;\n          return SeekStatus.END;\n        }\n\n        fieldIndexReader.getIndexOffset(ord, indexResult);\n        in.seek(indexResult.offset);\n        seekPending = false;\n\n        // NOTE: the first next() after an index seek is\n        // wasteful, since it redundantly reads the same\n        // bytes into the buffer\n        bytesReader.reset(indexResult.term);\n\n        state.ord = indexResult.position-1;\n        assert state.ord >= -1: \"ord=\" + state.ord;\n\n        // Now, scan:\n        int left = (int) (ord - state.ord);\n        while(left > 0) {\n          final BytesRef term = next();\n          assert term != null;\n          left--;\n        }\n\n        // always found\n        return SeekStatus.FOUND;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader.FieldReader.SegmentTermsEnum#seek(long).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardTermsDictReader.FieldReader.SegmentTermsEnum#seek(long).mjava","sourceNew":"      @Override\n      public SeekStatus seek(long ord) throws IOException {\n\n        // TODO: should we cache term lookup by ord as well...?\n\n        if (ord >= numTerms) {\n          state.ord = numTerms-1;\n          return SeekStatus.END;\n        }\n\n        fieldIndexReader.getIndexOffset(ord, indexResult);\n        in.seek(indexResult.offset);\n        seekPending = false;\n\n        // NOTE: the first next() after an index seek is\n        // wasteful, since it redundantly reads the same\n        // bytes into the buffer\n        bytesReader.reset(indexResult.term);\n\n        state.ord = indexResult.position-1;\n        assert state.ord >= -1: \"ord=\" + state.ord;\n\n        // Now, scan:\n        int left = (int) (ord - state.ord);\n        while(left > 0) {\n          final BytesRef term = next();\n          assert term != null;\n          left--;\n        }\n\n        // always found\n        return SeekStatus.FOUND;\n      }\n\n","sourceOld":"      @Override\n      public SeekStatus seek(long ord) throws IOException {\n\n        // TODO: should we cache term lookup by ord as well...?\n\n        if (ord >= numTerms) {\n          state.ord = numTerms-1;\n          return SeekStatus.END;\n        }\n\n        fieldIndexReader.getIndexOffset(ord, indexResult);\n        in.seek(indexResult.offset);\n        seekPending = false;\n\n        // NOTE: the first next() after an index seek is\n        // wasteful, since it redundantly reads the same\n        // bytes into the buffer\n        bytesReader.reset(indexResult.term);\n\n        state.ord = indexResult.position-1;\n        assert state.ord >= -1: \"ord=\" + state.ord;\n\n        // Now, scan:\n        int left = (int) (ord - state.ord);\n        while(left > 0) {\n          final BytesRef term = next();\n          assert term != null;\n          left--;\n        }\n\n        // always found\n        return SeekStatus.FOUND;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"552356653fbcba144cd337e76f4abe8885913817":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["552356653fbcba144cd337e76f4abe8885913817","99cf56f3a650b908f7017a72f9d23940418f8a52"],"99cf56f3a650b908f7017a72f9d23940418f8a52":["552356653fbcba144cd337e76f4abe8885913817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["99cf56f3a650b908f7017a72f9d23940418f8a52"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"552356653fbcba144cd337e76f4abe8885913817":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","99cf56f3a650b908f7017a72f9d23940418f8a52"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["552356653fbcba144cd337e76f4abe8885913817"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"99cf56f3a650b908f7017a72f9d23940418f8a52":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}