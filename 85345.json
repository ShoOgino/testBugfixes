{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#rawDocs(int[],int,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#rawDocs(int[],int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#rawDocs(int[],int,int).mjava","sourceNew":"  /** Returns the length in bytes of each raw document in a\n   *  contiguous range of length numDocs starting with\n   *  startDocID.  Returns the IndexInput (the fieldStream),\n   *  already seeked to the starting point for startDocID.*/\n  public final IndexInput rawDocs(int[] lengths, int startDocID, int numDocs) throws IOException {\n    seekIndex(startDocID);\n    long startOffset = indexStream.readLong();\n    long lastOffset = startOffset;\n    int count = 0;\n    while (count < numDocs) {\n      final long offset;\n      final int docID = startDocID + count + 1;\n      assert docID <= numTotalDocs;\n      if (docID < numTotalDocs) \n        offset = indexStream.readLong();\n      else\n        offset = fieldsStream.length();\n      lengths[count++] = (int) (offset-lastOffset);\n      lastOffset = offset;\n    }\n\n    fieldsStream.seek(startOffset);\n\n    return fieldsStream;\n  }\n\n","sourceOld":"  /** Returns the length in bytes of each raw document in a\n   *  contiguous range of length numDocs starting with\n   *  startDocID.  Returns the IndexInput (the fieldStream),\n   *  already seeked to the starting point for startDocID.*/\n  public final IndexInput rawDocs(int[] lengths, int startDocID, int numDocs) throws IOException {\n    seekIndex(startDocID);\n    long startOffset = indexStream.readLong();\n    long lastOffset = startOffset;\n    int count = 0;\n    while (count < numDocs) {\n      final long offset;\n      final int docID = startDocID + count + 1;\n      assert docID <= numTotalDocs;\n      if (docID < numTotalDocs) \n        offset = indexStream.readLong();\n      else\n        offset = fieldsStream.length();\n      lengths[count++] = (int) (offset-lastOffset);\n      lastOffset = offset;\n    }\n\n    fieldsStream.seek(startOffset);\n\n    return fieldsStream;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22a2e66dfda83847e80095b8693c660742ab3e9c","date":1408628796,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#rawDocs(int[],int,int).mjava","sourceNew":null,"sourceOld":"  /** Returns the length in bytes of each raw document in a\n   *  contiguous range of length numDocs starting with\n   *  startDocID.  Returns the IndexInput (the fieldStream),\n   *  already seeked to the starting point for startDocID.*/\n  public final IndexInput rawDocs(int[] lengths, int startDocID, int numDocs) throws IOException {\n    seekIndex(startDocID);\n    long startOffset = indexStream.readLong();\n    long lastOffset = startOffset;\n    int count = 0;\n    while (count < numDocs) {\n      final long offset;\n      final int docID = startDocID + count + 1;\n      assert docID <= numTotalDocs;\n      if (docID < numTotalDocs) \n        offset = indexStream.readLong();\n      else\n        offset = fieldsStream.length();\n      lengths[count++] = (int) (offset-lastOffset);\n      lastOffset = offset;\n    }\n\n    fieldsStream.seek(startOffset);\n\n    return fieldsStream;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22a2e66dfda83847e80095b8693c660742ab3e9c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["22a2e66dfda83847e80095b8693c660742ab3e9c"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["22a2e66dfda83847e80095b8693c660742ab3e9c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"22a2e66dfda83847e80095b8693c660742ab3e9c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}