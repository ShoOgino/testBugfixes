{"path":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionContextKeyTest#test().mjava","commits":[{"id":"2301a3dfd362544fb58cbb209c7fdc6caa93d793","date":1477455587,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionContextKeyTest#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws KeeperException, InterruptedException, IOException, SolrServerException {\n    ZkStateReader stateReader = cluster.getSolrClient().getZkStateReader();\n    stateReader.forceUpdateCollection(TEST_COLLECTION_1);\n    List<Replica> replicasOfCollection1 = stateReader.getClusterState().getCollection(TEST_COLLECTION_1).getReplicas();\n    List<Replica> replicasOfCollection2 = stateReader.getClusterState().getCollection(TEST_COLLECTION_2).getReplicas();\n    Replica replica = findLeaderReplicaWithDuplicatedName(replicasOfCollection1, replicasOfCollection2);\n    assertNotNull(replica);\n\n    SolrClient shardLeaderClient = new HttpSolrClient.Builder(replica.get(\"base_url\").toString()).build();\n    try {\n      assertEquals(1L, getElectionNodes(TEST_COLLECTION_1, \"shard1\", stateReader.getZkClient()).size());\n      List<String> collection2Shard1Nodes = getElectionNodes(TEST_COLLECTION_2, \"shard1\", stateReader.getZkClient());\n      List<String> collection2Shard2Nodes = getElectionNodes(TEST_COLLECTION_2, \"shard2\", stateReader.getZkClient());\n      CoreAdminRequest.unloadCore(replica.getCoreName(), shardLeaderClient);\n      // Waiting for leader election being kicked off\n      long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(60, TimeUnit.SECONDS);\n      boolean found = false;\n      while (System.nanoTime() < timeout) {\n        try {\n          found = getElectionNodes(TEST_COLLECTION_1, \"shard1\", stateReader.getZkClient()).size() == 0;\n          break;\n        } catch (KeeperException.NoNodeException nne) {\n          // ignore\n        }\n      }\n      assertTrue(found);\n      // There are no leader election was kicked off on testCollection2\n      assertThat(collection2Shard1Nodes, CoreMatchers.is(getElectionNodes(TEST_COLLECTION_2, \"shard1\", stateReader.getZkClient())));\n      assertThat(collection2Shard2Nodes, CoreMatchers.is(getElectionNodes(TEST_COLLECTION_2, \"shard2\", stateReader.getZkClient())));\n    } finally {\n      shardLeaderClient.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b363b110592b02d7f488aff0dbe40a53d3ce81df","date":1477469211,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionContextKeyTest#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws KeeperException, InterruptedException, IOException, SolrServerException {\n    ZkStateReader stateReader = cluster.getSolrClient().getZkStateReader();\n    stateReader.forceUpdateCollection(TEST_COLLECTION_1);\n    List<Replica> replicasOfCollection1 = stateReader.getClusterState().getCollection(TEST_COLLECTION_1).getReplicas();\n    List<Replica> replicasOfCollection2 = stateReader.getClusterState().getCollection(TEST_COLLECTION_2).getReplicas();\n    Replica replica = findLeaderReplicaWithDuplicatedName(replicasOfCollection1, replicasOfCollection2);\n    assertNotNull(replica);\n\n    SolrClient shardLeaderClient = new HttpSolrClient.Builder(replica.get(\"base_url\").toString()).build();\n    try {\n      assertEquals(1L, getElectionNodes(TEST_COLLECTION_1, \"shard1\", stateReader.getZkClient()).size());\n      List<String> collection2Shard1Nodes = getElectionNodes(TEST_COLLECTION_2, \"shard1\", stateReader.getZkClient());\n      List<String> collection2Shard2Nodes = getElectionNodes(TEST_COLLECTION_2, \"shard2\", stateReader.getZkClient());\n      CoreAdminRequest.unloadCore(replica.getCoreName(), shardLeaderClient);\n      // Waiting for leader election being kicked off\n      long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(60, TimeUnit.SECONDS);\n      boolean found = false;\n      while (System.nanoTime() < timeout) {\n        try {\n          found = getElectionNodes(TEST_COLLECTION_1, \"shard1\", stateReader.getZkClient()).size() == 0;\n          break;\n        } catch (KeeperException.NoNodeException nne) {\n          // ignore\n        }\n      }\n      assertTrue(found);\n      // There are no leader election was kicked off on testCollection2\n      assertThat(collection2Shard1Nodes, CoreMatchers.is(getElectionNodes(TEST_COLLECTION_2, \"shard1\", stateReader.getZkClient())));\n      assertThat(collection2Shard2Nodes, CoreMatchers.is(getElectionNodes(TEST_COLLECTION_2, \"shard2\", stateReader.getZkClient())));\n    } finally {\n      shardLeaderClient.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionContextKeyTest#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws KeeperException, InterruptedException, IOException, SolrServerException {\n    ZkStateReader stateReader = cluster.getSolrClient().getZkStateReader();\n    stateReader.forceUpdateCollection(TEST_COLLECTION_1);\n    List<Replica> replicasOfCollection1 = stateReader.getClusterState().getCollection(TEST_COLLECTION_1).getReplicas();\n    List<Replica> replicasOfCollection2 = stateReader.getClusterState().getCollection(TEST_COLLECTION_2).getReplicas();\n    Replica replica = findLeaderReplicaWithDuplicatedName(replicasOfCollection1, replicasOfCollection2);\n    assertNotNull(replica);\n\n    SolrClient shardLeaderClient = new HttpSolrClient.Builder(replica.get(\"base_url\").toString()).build();\n    try {\n      assertEquals(1L, getElectionNodes(TEST_COLLECTION_1, \"shard1\", stateReader.getZkClient()).size());\n      List<String> collection2Shard1Nodes = getElectionNodes(TEST_COLLECTION_2, \"shard1\", stateReader.getZkClient());\n      List<String> collection2Shard2Nodes = getElectionNodes(TEST_COLLECTION_2, \"shard2\", stateReader.getZkClient());\n      CoreAdminRequest.unloadCore(replica.getCoreName(), shardLeaderClient);\n      // Waiting for leader election being kicked off\n      long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(60, TimeUnit.SECONDS);\n      boolean found = false;\n      while (System.nanoTime() < timeout) {\n        try {\n          found = getElectionNodes(TEST_COLLECTION_1, \"shard1\", stateReader.getZkClient()).size() == 0;\n          break;\n        } catch (KeeperException.NoNodeException nne) {\n          // ignore\n        }\n      }\n      assertTrue(found);\n      // There are no leader election was kicked off on testCollection2\n      assertThat(collection2Shard1Nodes, CoreMatchers.is(getElectionNodes(TEST_COLLECTION_2, \"shard1\", stateReader.getZkClient())));\n      assertThat(collection2Shard2Nodes, CoreMatchers.is(getElectionNodes(TEST_COLLECTION_2, \"shard2\", stateReader.getZkClient())));\n    } finally {\n      shardLeaderClient.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fdd3313a782bc892efa7f10af81a83cc8c7c41e7","date":1508744732,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionContextKeyTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionContextKeyTest#test().mjava","sourceNew":"  @Test\n  public void test() throws KeeperException, InterruptedException, IOException, SolrServerException {\n    ZkStateReader stateReader = cluster.getSolrClient().getZkStateReader();\n    stateReader.forceUpdateCollection(TEST_COLLECTION_1);\n    List<Replica> replicasOfCollection1 = stateReader.getClusterState().getCollection(TEST_COLLECTION_1).getReplicas();\n    List<Replica> replicasOfCollection2 = stateReader.getClusterState().getCollection(TEST_COLLECTION_2).getReplicas();\n    Replica replica = findLeaderReplicaWithDuplicatedName(replicasOfCollection1, replicasOfCollection2);\n    String shard = getShard(stateReader.getClusterState().getCollection(TEST_COLLECTION_1), replica);\n    assertNotNull(replica);\n\n    SolrClient shardLeaderClient = new HttpSolrClient.Builder(replica.get(\"base_url\").toString()).build();\n    try {\n      assertEquals(1L, getElectionNodes(TEST_COLLECTION_1, shard, stateReader.getZkClient()).size());\n      List<String> collection2Shard1Nodes = getElectionNodes(TEST_COLLECTION_2, \"shard1\", stateReader.getZkClient());\n      List<String> collection2Shard2Nodes = getElectionNodes(TEST_COLLECTION_2, \"shard2\", stateReader.getZkClient());\n      CoreAdminRequest.unloadCore(replica.getCoreName(), shardLeaderClient);\n      // Waiting for leader election being kicked off\n      long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(60, TimeUnit.SECONDS);\n      boolean found = false;\n      while (System.nanoTime() < timeout) {\n        try {\n          found = getElectionNodes(TEST_COLLECTION_1, \"shard1\", stateReader.getZkClient()).size() == 0;\n          break;\n        } catch (KeeperException.NoNodeException nne) {\n          // ignore\n        }\n      }\n      assertTrue(found);\n      // There are no leader election was kicked off on testCollection2\n      assertThat(collection2Shard1Nodes, CoreMatchers.is(getElectionNodes(TEST_COLLECTION_2, \"shard1\", stateReader.getZkClient())));\n      assertThat(collection2Shard2Nodes, CoreMatchers.is(getElectionNodes(TEST_COLLECTION_2, \"shard2\", stateReader.getZkClient())));\n    } finally {\n      shardLeaderClient.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws KeeperException, InterruptedException, IOException, SolrServerException {\n    ZkStateReader stateReader = cluster.getSolrClient().getZkStateReader();\n    stateReader.forceUpdateCollection(TEST_COLLECTION_1);\n    List<Replica> replicasOfCollection1 = stateReader.getClusterState().getCollection(TEST_COLLECTION_1).getReplicas();\n    List<Replica> replicasOfCollection2 = stateReader.getClusterState().getCollection(TEST_COLLECTION_2).getReplicas();\n    Replica replica = findLeaderReplicaWithDuplicatedName(replicasOfCollection1, replicasOfCollection2);\n    assertNotNull(replica);\n\n    SolrClient shardLeaderClient = new HttpSolrClient.Builder(replica.get(\"base_url\").toString()).build();\n    try {\n      assertEquals(1L, getElectionNodes(TEST_COLLECTION_1, \"shard1\", stateReader.getZkClient()).size());\n      List<String> collection2Shard1Nodes = getElectionNodes(TEST_COLLECTION_2, \"shard1\", stateReader.getZkClient());\n      List<String> collection2Shard2Nodes = getElectionNodes(TEST_COLLECTION_2, \"shard2\", stateReader.getZkClient());\n      CoreAdminRequest.unloadCore(replica.getCoreName(), shardLeaderClient);\n      // Waiting for leader election being kicked off\n      long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(60, TimeUnit.SECONDS);\n      boolean found = false;\n      while (System.nanoTime() < timeout) {\n        try {\n          found = getElectionNodes(TEST_COLLECTION_1, \"shard1\", stateReader.getZkClient()).size() == 0;\n          break;\n        } catch (KeeperException.NoNodeException nne) {\n          // ignore\n        }\n      }\n      assertTrue(found);\n      // There are no leader election was kicked off on testCollection2\n      assertThat(collection2Shard1Nodes, CoreMatchers.is(getElectionNodes(TEST_COLLECTION_2, \"shard1\", stateReader.getZkClient())));\n      assertThat(collection2Shard2Nodes, CoreMatchers.is(getElectionNodes(TEST_COLLECTION_2, \"shard2\", stateReader.getZkClient())));\n    } finally {\n      shardLeaderClient.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77489d2ba77d1df41d132c2ac0f1fb47162483e2","date":1508744890,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionContextKeyTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionContextKeyTest#test().mjava","sourceNew":"  @Test\n  public void test() throws KeeperException, InterruptedException, IOException, SolrServerException {\n    ZkStateReader stateReader = cluster.getSolrClient().getZkStateReader();\n    stateReader.forceUpdateCollection(TEST_COLLECTION_1);\n    List<Replica> replicasOfCollection1 = stateReader.getClusterState().getCollection(TEST_COLLECTION_1).getReplicas();\n    List<Replica> replicasOfCollection2 = stateReader.getClusterState().getCollection(TEST_COLLECTION_2).getReplicas();\n    Replica replica = findLeaderReplicaWithDuplicatedName(replicasOfCollection1, replicasOfCollection2);\n    String shard = getShard(stateReader.getClusterState().getCollection(TEST_COLLECTION_1), replica);\n    assertNotNull(replica);\n\n    SolrClient shardLeaderClient = new HttpSolrClient.Builder(replica.get(\"base_url\").toString()).build();\n    try {\n      assertEquals(1L, getElectionNodes(TEST_COLLECTION_1, shard, stateReader.getZkClient()).size());\n      List<String> collection2Shard1Nodes = getElectionNodes(TEST_COLLECTION_2, \"shard1\", stateReader.getZkClient());\n      List<String> collection2Shard2Nodes = getElectionNodes(TEST_COLLECTION_2, \"shard2\", stateReader.getZkClient());\n      CoreAdminRequest.unloadCore(replica.getCoreName(), shardLeaderClient);\n      // Waiting for leader election being kicked off\n      long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(60, TimeUnit.SECONDS);\n      boolean found = false;\n      while (System.nanoTime() < timeout) {\n        try {\n          found = getElectionNodes(TEST_COLLECTION_1, shard, stateReader.getZkClient()).size() == 0;\n          break;\n        } catch (KeeperException.NoNodeException nne) {\n          // ignore\n        }\n      }\n      assertTrue(found);\n      // There are no leader election was kicked off on testCollection2\n      assertThat(collection2Shard1Nodes, CoreMatchers.is(getElectionNodes(TEST_COLLECTION_2, \"shard1\", stateReader.getZkClient())));\n      assertThat(collection2Shard2Nodes, CoreMatchers.is(getElectionNodes(TEST_COLLECTION_2, \"shard2\", stateReader.getZkClient())));\n    } finally {\n      shardLeaderClient.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws KeeperException, InterruptedException, IOException, SolrServerException {\n    ZkStateReader stateReader = cluster.getSolrClient().getZkStateReader();\n    stateReader.forceUpdateCollection(TEST_COLLECTION_1);\n    List<Replica> replicasOfCollection1 = stateReader.getClusterState().getCollection(TEST_COLLECTION_1).getReplicas();\n    List<Replica> replicasOfCollection2 = stateReader.getClusterState().getCollection(TEST_COLLECTION_2).getReplicas();\n    Replica replica = findLeaderReplicaWithDuplicatedName(replicasOfCollection1, replicasOfCollection2);\n    String shard = getShard(stateReader.getClusterState().getCollection(TEST_COLLECTION_1), replica);\n    assertNotNull(replica);\n\n    SolrClient shardLeaderClient = new HttpSolrClient.Builder(replica.get(\"base_url\").toString()).build();\n    try {\n      assertEquals(1L, getElectionNodes(TEST_COLLECTION_1, shard, stateReader.getZkClient()).size());\n      List<String> collection2Shard1Nodes = getElectionNodes(TEST_COLLECTION_2, \"shard1\", stateReader.getZkClient());\n      List<String> collection2Shard2Nodes = getElectionNodes(TEST_COLLECTION_2, \"shard2\", stateReader.getZkClient());\n      CoreAdminRequest.unloadCore(replica.getCoreName(), shardLeaderClient);\n      // Waiting for leader election being kicked off\n      long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(60, TimeUnit.SECONDS);\n      boolean found = false;\n      while (System.nanoTime() < timeout) {\n        try {\n          found = getElectionNodes(TEST_COLLECTION_1, \"shard1\", stateReader.getZkClient()).size() == 0;\n          break;\n        } catch (KeeperException.NoNodeException nne) {\n          // ignore\n        }\n      }\n      assertTrue(found);\n      // There are no leader election was kicked off on testCollection2\n      assertThat(collection2Shard1Nodes, CoreMatchers.is(getElectionNodes(TEST_COLLECTION_2, \"shard1\", stateReader.getZkClient())));\n      assertThat(collection2Shard2Nodes, CoreMatchers.is(getElectionNodes(TEST_COLLECTION_2, \"shard2\", stateReader.getZkClient())));\n    } finally {\n      shardLeaderClient.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78ebe0d74a5fc1aec95cc11635d143f19cb7b137","date":1508897492,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionContextKeyTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionContextKeyTest#test().mjava","sourceNew":"  @Test\n  public void test() throws KeeperException, InterruptedException, IOException, SolrServerException {\n    ZkStateReader stateReader = cluster.getSolrClient().getZkStateReader();\n    stateReader.forceUpdateCollection(TEST_COLLECTION_1);\n    ClusterState clusterState = stateReader.getClusterState();\n    // The test assume that TEST_COLLECTION_1 and TEST_COLLECTION_2 will have identical layout\n    // ( same replica's name on every shard )\n    for (int i = 1; i <= 2; i++) {\n      String coll1ShardiLeader = clusterState.getCollection(TEST_COLLECTION_1).getLeader(\"shard\"+i).getName();\n      String coll2ShardiLeader = clusterState.getCollection(TEST_COLLECTION_2).getLeader(\"shard\"+i).getName();\n      String assertMss = String.format(\"Expect %s and %s each have a replica with same name on shard %s\",\n          coll1ShardiLeader, coll2ShardiLeader, \"shard\"+i);\n      assertEquals(\n          assertMss,\n          coll1ShardiLeader,\n          coll2ShardiLeader\n      );\n    }\n\n    String shard = \"shard\" + String.valueOf(random().nextInt(2) + 1);\n    Replica replica = clusterState.getCollection(TEST_COLLECTION_1).getLeader(shard);\n    assertNotNull(replica);\n\n    try (SolrClient shardLeaderClient = new HttpSolrClient.Builder(replica.get(\"base_url\").toString()).build()) {\n      assertEquals(1L, getElectionNodes(TEST_COLLECTION_1, shard, stateReader.getZkClient()).size());\n      List<String> collection2Shard1Nodes = getElectionNodes(TEST_COLLECTION_2, \"shard1\", stateReader.getZkClient());\n      List<String> collection2Shard2Nodes = getElectionNodes(TEST_COLLECTION_2, \"shard2\", stateReader.getZkClient());\n      CoreAdminRequest.unloadCore(replica.getCoreName(), shardLeaderClient);\n      // Waiting for leader election being kicked off\n      long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(60, TimeUnit.SECONDS);\n      boolean found = false;\n      while (System.nanoTime() < timeout) {\n        try {\n          found = getElectionNodes(TEST_COLLECTION_1, shard, stateReader.getZkClient()).size() == 0;\n          break;\n        } catch (KeeperException.NoNodeException nne) {\n          // ignore\n        }\n      }\n      assertTrue(found);\n      // There are no leader election was kicked off on testCollection2\n      assertThat(collection2Shard1Nodes, CoreMatchers.is(getElectionNodes(TEST_COLLECTION_2, \"shard1\", stateReader.getZkClient())));\n      assertThat(collection2Shard2Nodes, CoreMatchers.is(getElectionNodes(TEST_COLLECTION_2, \"shard2\", stateReader.getZkClient())));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws KeeperException, InterruptedException, IOException, SolrServerException {\n    ZkStateReader stateReader = cluster.getSolrClient().getZkStateReader();\n    stateReader.forceUpdateCollection(TEST_COLLECTION_1);\n    List<Replica> replicasOfCollection1 = stateReader.getClusterState().getCollection(TEST_COLLECTION_1).getReplicas();\n    List<Replica> replicasOfCollection2 = stateReader.getClusterState().getCollection(TEST_COLLECTION_2).getReplicas();\n    Replica replica = findLeaderReplicaWithDuplicatedName(replicasOfCollection1, replicasOfCollection2);\n    String shard = getShard(stateReader.getClusterState().getCollection(TEST_COLLECTION_1), replica);\n    assertNotNull(replica);\n\n    SolrClient shardLeaderClient = new HttpSolrClient.Builder(replica.get(\"base_url\").toString()).build();\n    try {\n      assertEquals(1L, getElectionNodes(TEST_COLLECTION_1, shard, stateReader.getZkClient()).size());\n      List<String> collection2Shard1Nodes = getElectionNodes(TEST_COLLECTION_2, \"shard1\", stateReader.getZkClient());\n      List<String> collection2Shard2Nodes = getElectionNodes(TEST_COLLECTION_2, \"shard2\", stateReader.getZkClient());\n      CoreAdminRequest.unloadCore(replica.getCoreName(), shardLeaderClient);\n      // Waiting for leader election being kicked off\n      long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(60, TimeUnit.SECONDS);\n      boolean found = false;\n      while (System.nanoTime() < timeout) {\n        try {\n          found = getElectionNodes(TEST_COLLECTION_1, shard, stateReader.getZkClient()).size() == 0;\n          break;\n        } catch (KeeperException.NoNodeException nne) {\n          // ignore\n        }\n      }\n      assertTrue(found);\n      // There are no leader election was kicked off on testCollection2\n      assertThat(collection2Shard1Nodes, CoreMatchers.is(getElectionNodes(TEST_COLLECTION_2, \"shard1\", stateReader.getZkClient())));\n      assertThat(collection2Shard2Nodes, CoreMatchers.is(getElectionNodes(TEST_COLLECTION_2, \"shard2\", stateReader.getZkClient())));\n    } finally {\n      shardLeaderClient.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["d8fc4a221314740eba1436a825a996408259717e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d8fc4a221314740eba1436a825a996408259717e","date":1508917253,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionContextKeyTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionContextKeyTest#test().mjava","sourceNew":"  @Test\n  public void test() throws KeeperException, InterruptedException, IOException, SolrServerException {\n    ZkStateReader stateReader = cluster.getSolrClient().getZkStateReader();\n    stateReader.forceUpdateCollection(TEST_COLLECTION_1);\n    ClusterState clusterState = stateReader.getClusterState();\n    // The test assume that TEST_COLLECTION_1 and TEST_COLLECTION_2 will have identical layout\n    // ( same replica's name on every shard )\n    for (int i = 1; i <= 2; i++) {\n      String coll1ShardiLeader = clusterState.getCollection(TEST_COLLECTION_1).getLeader(\"shard\"+i).getName();\n      String coll2ShardiLeader = clusterState.getCollection(TEST_COLLECTION_2).getLeader(\"shard\"+i).getName();\n      String assertMss = String.format(Locale.ROOT, \"Expect %s and %s each have a replica with same name on shard %s\",\n          coll1ShardiLeader, coll2ShardiLeader, \"shard\"+i);\n      assertEquals(\n          assertMss,\n          coll1ShardiLeader,\n          coll2ShardiLeader\n      );\n    }\n\n    String shard = \"shard\" + String.valueOf(random().nextInt(2) + 1);\n    Replica replica = clusterState.getCollection(TEST_COLLECTION_1).getLeader(shard);\n    assertNotNull(replica);\n\n    try (SolrClient shardLeaderClient = new HttpSolrClient.Builder(replica.get(\"base_url\").toString()).build()) {\n      assertEquals(1L, getElectionNodes(TEST_COLLECTION_1, shard, stateReader.getZkClient()).size());\n      List<String> collection2Shard1Nodes = getElectionNodes(TEST_COLLECTION_2, \"shard1\", stateReader.getZkClient());\n      List<String> collection2Shard2Nodes = getElectionNodes(TEST_COLLECTION_2, \"shard2\", stateReader.getZkClient());\n      CoreAdminRequest.unloadCore(replica.getCoreName(), shardLeaderClient);\n      // Waiting for leader election being kicked off\n      long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(60, TimeUnit.SECONDS);\n      boolean found = false;\n      while (System.nanoTime() < timeout) {\n        try {\n          found = getElectionNodes(TEST_COLLECTION_1, shard, stateReader.getZkClient()).size() == 0;\n          break;\n        } catch (KeeperException.NoNodeException nne) {\n          // ignore\n        }\n      }\n      assertTrue(found);\n      // There are no leader election was kicked off on testCollection2\n      assertThat(collection2Shard1Nodes, CoreMatchers.is(getElectionNodes(TEST_COLLECTION_2, \"shard1\", stateReader.getZkClient())));\n      assertThat(collection2Shard2Nodes, CoreMatchers.is(getElectionNodes(TEST_COLLECTION_2, \"shard2\", stateReader.getZkClient())));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws KeeperException, InterruptedException, IOException, SolrServerException {\n    ZkStateReader stateReader = cluster.getSolrClient().getZkStateReader();\n    stateReader.forceUpdateCollection(TEST_COLLECTION_1);\n    ClusterState clusterState = stateReader.getClusterState();\n    // The test assume that TEST_COLLECTION_1 and TEST_COLLECTION_2 will have identical layout\n    // ( same replica's name on every shard )\n    for (int i = 1; i <= 2; i++) {\n      String coll1ShardiLeader = clusterState.getCollection(TEST_COLLECTION_1).getLeader(\"shard\"+i).getName();\n      String coll2ShardiLeader = clusterState.getCollection(TEST_COLLECTION_2).getLeader(\"shard\"+i).getName();\n      String assertMss = String.format(\"Expect %s and %s each have a replica with same name on shard %s\",\n          coll1ShardiLeader, coll2ShardiLeader, \"shard\"+i);\n      assertEquals(\n          assertMss,\n          coll1ShardiLeader,\n          coll2ShardiLeader\n      );\n    }\n\n    String shard = \"shard\" + String.valueOf(random().nextInt(2) + 1);\n    Replica replica = clusterState.getCollection(TEST_COLLECTION_1).getLeader(shard);\n    assertNotNull(replica);\n\n    try (SolrClient shardLeaderClient = new HttpSolrClient.Builder(replica.get(\"base_url\").toString()).build()) {\n      assertEquals(1L, getElectionNodes(TEST_COLLECTION_1, shard, stateReader.getZkClient()).size());\n      List<String> collection2Shard1Nodes = getElectionNodes(TEST_COLLECTION_2, \"shard1\", stateReader.getZkClient());\n      List<String> collection2Shard2Nodes = getElectionNodes(TEST_COLLECTION_2, \"shard2\", stateReader.getZkClient());\n      CoreAdminRequest.unloadCore(replica.getCoreName(), shardLeaderClient);\n      // Waiting for leader election being kicked off\n      long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(60, TimeUnit.SECONDS);\n      boolean found = false;\n      while (System.nanoTime() < timeout) {\n        try {\n          found = getElectionNodes(TEST_COLLECTION_1, shard, stateReader.getZkClient()).size() == 0;\n          break;\n        } catch (KeeperException.NoNodeException nne) {\n          // ignore\n        }\n      }\n      assertTrue(found);\n      // There are no leader election was kicked off on testCollection2\n      assertThat(collection2Shard1Nodes, CoreMatchers.is(getElectionNodes(TEST_COLLECTION_2, \"shard1\", stateReader.getZkClient())));\n      assertThat(collection2Shard2Nodes, CoreMatchers.is(getElectionNodes(TEST_COLLECTION_2, \"shard2\", stateReader.getZkClient())));\n    }\n  }\n\n","bugFix":["78ebe0d74a5fc1aec95cc11635d143f19cb7b137"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d8fc4a221314740eba1436a825a996408259717e":["78ebe0d74a5fc1aec95cc11635d143f19cb7b137"],"78ebe0d74a5fc1aec95cc11635d143f19cb7b137":["77489d2ba77d1df41d132c2ac0f1fb47162483e2"],"2301a3dfd362544fb58cbb209c7fdc6caa93d793":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b363b110592b02d7f488aff0dbe40a53d3ce81df"],"77489d2ba77d1df41d132c2ac0f1fb47162483e2":["fdd3313a782bc892efa7f10af81a83cc8c7c41e7"],"b363b110592b02d7f488aff0dbe40a53d3ce81df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2301a3dfd362544fb58cbb209c7fdc6caa93d793"],"fdd3313a782bc892efa7f10af81a83cc8c7c41e7":["b363b110592b02d7f488aff0dbe40a53d3ce81df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d8fc4a221314740eba1436a825a996408259717e"]},"commit2Childs":{"d8fc4a221314740eba1436a825a996408259717e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"78ebe0d74a5fc1aec95cc11635d143f19cb7b137":["d8fc4a221314740eba1436a825a996408259717e"],"2301a3dfd362544fb58cbb209c7fdc6caa93d793":["b363b110592b02d7f488aff0dbe40a53d3ce81df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2301a3dfd362544fb58cbb209c7fdc6caa93d793","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","b363b110592b02d7f488aff0dbe40a53d3ce81df"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"77489d2ba77d1df41d132c2ac0f1fb47162483e2":["78ebe0d74a5fc1aec95cc11635d143f19cb7b137"],"b363b110592b02d7f488aff0dbe40a53d3ce81df":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","fdd3313a782bc892efa7f10af81a83cc8c7c41e7"],"fdd3313a782bc892efa7f10af81a83cc8c7c41e7":["77489d2ba77d1df41d132c2ac0f1fb47162483e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}