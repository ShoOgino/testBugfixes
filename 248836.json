{"path":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationHandlerTest#assertUpdateLogsEquals(String,int).mjava","commits":[{"id":"e7da9d8536c11576df10e348efa79d2739170936","date":1509475399,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationHandlerTest#assertUpdateLogsEquals(String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationHandlerTest#assertUpdateLogsEquals(String,int).mjava","sourceNew":"  /**\n   * Asserts that the update logs are in sync between the leader and slave. The leader and the slaves\n   * must have identical tlog files.\n   */\n  protected void assertUpdateLogsEquals(String collection, int numberOfTLogs) throws Exception {\n    CollectionInfo info = collectInfo(collection);\n    Map<String, List<CollectionInfo.CoreInfo>> shardToCoresMap = info.getShardToCoresMap();\n\n    for (String shard : shardToCoresMap.keySet()) {\n      Map<Long, Long> leaderFilesMeta = this.getFilesMeta(info.getLeader(shard).ulogDir);\n      Map<Long, Long> slaveFilesMeta = this.getFilesMeta(info.getReplicas(shard).get(0).ulogDir);\n\n      assertEquals(\"Incorrect number of tlog files on the leader\", numberOfTLogs, leaderFilesMeta.size());\n      assertEquals(\"Incorrect number of tlog files on the slave\", numberOfTLogs, slaveFilesMeta.size());\n\n      for (Long leaderFileVersion : leaderFilesMeta.keySet()) {\n        assertTrue(\"Slave is missing a tlog for version \" + leaderFileVersion, slaveFilesMeta.containsKey(leaderFileVersion));\n        assertEquals(\"Slave's tlog file size differs for version \" + leaderFileVersion, leaderFilesMeta.get(leaderFileVersion), slaveFilesMeta.get(leaderFileVersion));\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Asserts that the update logs are in sync between the leader and slave. The leader and the slaves\n   * must have identical tlog files.\n   */\n  protected void assertUpdateLogsEquals(String collection, int numberOfTLogs) throws Exception {\n    CollectionInfo info = collectInfo(collection);\n    Map<String, List<CollectionInfo.CoreInfo>> shardToCoresMap = info.getShardToCoresMap();\n\n    for (String shard : shardToCoresMap.keySet()) {\n      Map<Long, Long> leaderFilesMeta = this.getFilesMeta(info.getLeader(shard).ulogDir);\n      Map<Long, Long> slaveFilesMeta = this.getFilesMeta(info.getReplicas(shard).get(0).ulogDir);\n\n      assertEquals(\"Incorrect number of tlog files on the leader\", numberOfTLogs, leaderFilesMeta.size());\n      assertEquals(\"Incorrect number of tlog files on the slave\", numberOfTLogs, slaveFilesMeta.size());\n\n      for (Long leaderFileVersion : leaderFilesMeta.keySet()) {\n        assertTrue(\"Slave is missing a tlog for version \" + leaderFileVersion, slaveFilesMeta.containsKey(leaderFileVersion));\n        assertEquals(\"Slave's tlog file size differs for version \" + leaderFileVersion, leaderFilesMeta.get(leaderFileVersion), slaveFilesMeta.get(leaderFileVersion));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","date":1509475828,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationHandlerTest#assertUpdateLogsEquals(String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationHandlerTest#assertUpdateLogsEquals(String,int).mjava","sourceNew":"  /**\n   * Asserts that the update logs are in sync between the leader and slave. The leader and the slaves\n   * must have identical tlog files.\n   */\n  protected void assertUpdateLogsEquals(String collection, int numberOfTLogs) throws Exception {\n    CollectionInfo info = collectInfo(collection);\n    Map<String, List<CollectionInfo.CoreInfo>> shardToCoresMap = info.getShardToCoresMap();\n\n    for (String shard : shardToCoresMap.keySet()) {\n      Map<Long, Long> leaderFilesMeta = this.getFilesMeta(info.getLeader(shard).ulogDir);\n      Map<Long, Long> slaveFilesMeta = this.getFilesMeta(info.getReplicas(shard).get(0).ulogDir);\n\n      assertEquals(\"Incorrect number of tlog files on the leader\", numberOfTLogs, leaderFilesMeta.size());\n      assertEquals(\"Incorrect number of tlog files on the slave\", numberOfTLogs, slaveFilesMeta.size());\n\n      for (Long leaderFileVersion : leaderFilesMeta.keySet()) {\n        assertTrue(\"Slave is missing a tlog for version \" + leaderFileVersion, slaveFilesMeta.containsKey(leaderFileVersion));\n        assertEquals(\"Slave's tlog file size differs for version \" + leaderFileVersion, leaderFilesMeta.get(leaderFileVersion), slaveFilesMeta.get(leaderFileVersion));\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Asserts that the update logs are in sync between the leader and slave. The leader and the slaves\n   * must have identical tlog files.\n   */\n  protected void assertUpdateLogsEquals(String collection, int numberOfTLogs) throws Exception {\n    CollectionInfo info = collectInfo(collection);\n    Map<String, List<CollectionInfo.CoreInfo>> shardToCoresMap = info.getShardToCoresMap();\n\n    for (String shard : shardToCoresMap.keySet()) {\n      Map<Long, Long> leaderFilesMeta = this.getFilesMeta(info.getLeader(shard).ulogDir);\n      Map<Long, Long> slaveFilesMeta = this.getFilesMeta(info.getReplicas(shard).get(0).ulogDir);\n\n      assertEquals(\"Incorrect number of tlog files on the leader\", numberOfTLogs, leaderFilesMeta.size());\n      assertEquals(\"Incorrect number of tlog files on the slave\", numberOfTLogs, slaveFilesMeta.size());\n\n      for (Long leaderFileVersion : leaderFilesMeta.keySet()) {\n        assertTrue(\"Slave is missing a tlog for version \" + leaderFileVersion, slaveFilesMeta.containsKey(leaderFileVersion));\n        assertEquals(\"Slave's tlog file size differs for version \" + leaderFileVersion, leaderFilesMeta.get(leaderFileVersion), slaveFilesMeta.get(leaderFileVersion));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","date":1509748659,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationHandlerTest#assertUpdateLogsEquals(String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationHandlerTest#assertUpdateLogsEquals(String,int).mjava","sourceNew":"  /**\n   * Asserts that the update logs are in sync between the leader and slave. The leader and the slaves\n   * must have identical tlog files.\n   */\n  protected void assertUpdateLogsEquals(String collection, int numberOfTLogs) throws Exception {\n    CollectionInfo info = collectInfo(collection);\n    Map<String, List<CollectionInfo.CoreInfo>> shardToCoresMap = info.getShardToCoresMap();\n\n    for (String shard : shardToCoresMap.keySet()) {\n      Map<Long, Long> leaderFilesMeta = this.getFilesMeta(info.getLeader(shard).ulogDir);\n      Map<Long, Long> slaveFilesMeta = this.getFilesMeta(info.getReplicas(shard).get(0).ulogDir);\n\n      assertEquals(\"Incorrect number of tlog files on the leader\", numberOfTLogs, leaderFilesMeta.size());\n      assertEquals(\"Incorrect number of tlog files on the slave\", numberOfTLogs, slaveFilesMeta.size());\n\n      for (Long leaderFileVersion : leaderFilesMeta.keySet()) {\n        assertTrue(\"Slave is missing a tlog for version \" + leaderFileVersion, slaveFilesMeta.containsKey(leaderFileVersion));\n        assertEquals(\"Slave's tlog file size differs for version \" + leaderFileVersion, leaderFilesMeta.get(leaderFileVersion), slaveFilesMeta.get(leaderFileVersion));\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Asserts that the update logs are in sync between the leader and slave. The leader and the slaves\n   * must have identical tlog files.\n   */\n  protected void assertUpdateLogsEquals(String collection, int numberOfTLogs) throws Exception {\n    CollectionInfo info = collectInfo(collection);\n    Map<String, List<CollectionInfo.CoreInfo>> shardToCoresMap = info.getShardToCoresMap();\n\n    for (String shard : shardToCoresMap.keySet()) {\n      Map<Long, Long> leaderFilesMeta = this.getFilesMeta(info.getLeader(shard).ulogDir);\n      Map<Long, Long> slaveFilesMeta = this.getFilesMeta(info.getReplicas(shard).get(0).ulogDir);\n\n      assertEquals(\"Incorrect number of tlog files on the leader\", numberOfTLogs, leaderFilesMeta.size());\n      assertEquals(\"Incorrect number of tlog files on the slave\", numberOfTLogs, slaveFilesMeta.size());\n\n      for (Long leaderFileVersion : leaderFilesMeta.keySet()) {\n        assertTrue(\"Slave is missing a tlog for version \" + leaderFileVersion, slaveFilesMeta.containsKey(leaderFileVersion));\n        assertEquals(\"Slave's tlog file size differs for version \" + leaderFileVersion, leaderFilesMeta.get(leaderFileVersion), slaveFilesMeta.get(leaderFileVersion));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationHandlerTest#assertUpdateLogsEquals(String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationHandlerTest#assertUpdateLogsEquals(String,int).mjava","sourceNew":"  /**\n   * Asserts that the update logs are in sync between the leader and slave. The leader and the slaves\n   * must have identical tlog files.\n   */\n  protected void assertUpdateLogsEquals(String collection, int numberOfTLogs) throws Exception {\n    CollectionInfo info = collectInfo(collection);\n    Map<String, List<CollectionInfo.CoreInfo>> shardToCoresMap = info.getShardToCoresMap();\n\n    for (String shard : shardToCoresMap.keySet()) {\n      Map<Long, Long> leaderFilesMeta = this.getFilesMeta(info.getLeader(shard).ulogDir);\n      Map<Long, Long> slaveFilesMeta = this.getFilesMeta(info.getReplicas(shard).get(0).ulogDir);\n\n      assertEquals(\"Incorrect number of tlog files on the leader\", numberOfTLogs, leaderFilesMeta.size());\n      assertEquals(\"Incorrect number of tlog files on the slave\", numberOfTLogs, slaveFilesMeta.size());\n\n      for (Long leaderFileVersion : leaderFilesMeta.keySet()) {\n        assertTrue(\"Slave is missing a tlog for version \" + leaderFileVersion, slaveFilesMeta.containsKey(leaderFileVersion));\n        assertEquals(\"Slave's tlog file size differs for version \" + leaderFileVersion, leaderFilesMeta.get(leaderFileVersion), slaveFilesMeta.get(leaderFileVersion));\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Asserts that the update logs are in sync between the leader and slave. The leader and the slaves\n   * must have identical tlog files.\n   */\n  protected void assertUpdateLogsEquals(String collection, int numberOfTLogs) throws Exception {\n    CollectionInfo info = collectInfo(collection);\n    Map<String, List<CollectionInfo.CoreInfo>> shardToCoresMap = info.getShardToCoresMap();\n\n    for (String shard : shardToCoresMap.keySet()) {\n      Map<Long, Long> leaderFilesMeta = this.getFilesMeta(info.getLeader(shard).ulogDir);\n      Map<Long, Long> slaveFilesMeta = this.getFilesMeta(info.getReplicas(shard).get(0).ulogDir);\n\n      assertEquals(\"Incorrect number of tlog files on the leader\", numberOfTLogs, leaderFilesMeta.size());\n      assertEquals(\"Incorrect number of tlog files on the slave\", numberOfTLogs, slaveFilesMeta.size());\n\n      for (Long leaderFileVersion : leaderFilesMeta.keySet()) {\n        assertTrue(\"Slave is missing a tlog for version \" + leaderFileVersion, slaveFilesMeta.containsKey(leaderFileVersion));\n        assertEquals(\"Slave's tlog file size differs for version \" + leaderFileVersion, leaderFilesMeta.get(leaderFileVersion), slaveFilesMeta.get(leaderFileVersion));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e","date":1596664368,"type":3,"author":"Marcus","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationHandlerTest#assertUpdateLogsEquals(String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationHandlerTest#assertUpdateLogsEquals(String,int).mjava","sourceNew":"  /**\n   * Asserts that the update logs are in sync between the leader and follower. The leader and the followers\n   * must have identical tlog files.\n   */\n  protected void assertUpdateLogsEquals(String collection, int numberOfTLogs) throws Exception {\n    CollectionInfo info = collectInfo(collection);\n    Map<String, List<CollectionInfo.CoreInfo>> shardToCoresMap = info.getShardToCoresMap();\n\n    for (String shard : shardToCoresMap.keySet()) {\n      Map<Long, Long> leaderFilesMeta = this.getFilesMeta(info.getLeader(shard).ulogDir);\n      Map<Long, Long> followerFilesMeta = this.getFilesMeta(info.getReplicas(shard).get(0).ulogDir);\n\n      assertEquals(\"Incorrect number of tlog files on the leader\", numberOfTLogs, leaderFilesMeta.size());\n      assertEquals(\"Incorrect number of tlog files on the follower\", numberOfTLogs, followerFilesMeta.size());\n\n      for (Long leaderFileVersion : leaderFilesMeta.keySet()) {\n        assertTrue(\"Follower is missing a tlog for version \" + leaderFileVersion, followerFilesMeta.containsKey(leaderFileVersion));\n        assertEquals(\"Follower's tlog file size differs for version \" + leaderFileVersion, leaderFilesMeta.get(leaderFileVersion), followerFilesMeta.get(leaderFileVersion));\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Asserts that the update logs are in sync between the leader and slave. The leader and the slaves\n   * must have identical tlog files.\n   */\n  protected void assertUpdateLogsEquals(String collection, int numberOfTLogs) throws Exception {\n    CollectionInfo info = collectInfo(collection);\n    Map<String, List<CollectionInfo.CoreInfo>> shardToCoresMap = info.getShardToCoresMap();\n\n    for (String shard : shardToCoresMap.keySet()) {\n      Map<Long, Long> leaderFilesMeta = this.getFilesMeta(info.getLeader(shard).ulogDir);\n      Map<Long, Long> slaveFilesMeta = this.getFilesMeta(info.getReplicas(shard).get(0).ulogDir);\n\n      assertEquals(\"Incorrect number of tlog files on the leader\", numberOfTLogs, leaderFilesMeta.size());\n      assertEquals(\"Incorrect number of tlog files on the slave\", numberOfTLogs, slaveFilesMeta.size());\n\n      for (Long leaderFileVersion : leaderFilesMeta.keySet()) {\n        assertTrue(\"Slave is missing a tlog for version \" + leaderFileVersion, slaveFilesMeta.containsKey(leaderFileVersion));\n        assertEquals(\"Slave's tlog file size differs for version \" + leaderFileVersion, leaderFilesMeta.get(leaderFileVersion), slaveFilesMeta.get(leaderFileVersion));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationHandlerTest#assertUpdateLogsEquals(String,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Asserts that the update logs are in sync between the leader and follower. The leader and the followers\n   * must have identical tlog files.\n   */\n  protected void assertUpdateLogsEquals(String collection, int numberOfTLogs) throws Exception {\n    CollectionInfo info = collectInfo(collection);\n    Map<String, List<CollectionInfo.CoreInfo>> shardToCoresMap = info.getShardToCoresMap();\n\n    for (String shard : shardToCoresMap.keySet()) {\n      Map<Long, Long> leaderFilesMeta = this.getFilesMeta(info.getLeader(shard).ulogDir);\n      Map<Long, Long> followerFilesMeta = this.getFilesMeta(info.getReplicas(shard).get(0).ulogDir);\n\n      assertEquals(\"Incorrect number of tlog files on the leader\", numberOfTLogs, leaderFilesMeta.size());\n      assertEquals(\"Incorrect number of tlog files on the follower\", numberOfTLogs, followerFilesMeta.size());\n\n      for (Long leaderFileVersion : leaderFilesMeta.keySet()) {\n        assertTrue(\"Follower is missing a tlog for version \" + leaderFileVersion, followerFilesMeta.containsKey(leaderFileVersion));\n        assertEquals(\"Follower's tlog file size differs for version \" + leaderFileVersion, leaderFilesMeta.get(leaderFileVersion), followerFilesMeta.get(leaderFileVersion));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"e7da9d8536c11576df10e348efa79d2739170936":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","fba58147c9753bb58bbfbd2ebbbf02aecc1eafde"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["e7da9d8536c11576df10e348efa79d2739170936"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"]},"commit2Childs":{"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"e7da9d8536c11576df10e348efa79d2739170936":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e7da9d8536c11576df10e348efa79d2739170936"],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}