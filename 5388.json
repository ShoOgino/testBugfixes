{"path":"solr/core/src/java/org/apache/solr/search/SortedIntDocSet#intersects(DocSet).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SortedIntDocSet#intersects(DocSet).mjava","pathOld":"solr/src/java/org/apache/solr/search/SortedIntDocSet#intersects(DocSet).mjava","sourceNew":"  @Override\n  public boolean intersects(DocSet other) {\n    if (!(other instanceof SortedIntDocSet)) {\n      // assume other implementations are better at random access than we are,\n      // true of BitDocSet and HashDocSet.\n      for (int i=0; i<docs.length; i++) {\n        if (other.exists(docs[i])) return true;\n      }\n      return false;\n    }\n\n    // make \"a\" the smaller set.\n    int[] otherDocs = ((SortedIntDocSet)other).docs;\n    final int[] a = docs.length < otherDocs.length ? docs : otherDocs;\n    final int[] b = docs.length < otherDocs.length ? otherDocs : docs;\n\n    if (a.length==0) return false;\n\n    // if b is 8 times bigger than a, use the modified binary search.\n    if ((b.length>>3) >= a.length) {\n      return intersects(a,b);\n    }\n\n    // if they are close in size, just do a linear walk of both.\n    int i=0,j=0;\n    int doca=a[i],docb=b[j];\n    for(;;) {\n      // switch on the sign bit somehow?  Hopefull JVM is smart enough to just test once.\n\n      // Since set a is less dense then set b, doca is likely to be greater than docb so\n      // check that case first.  This resulted in a 13% speedup.\n      if (doca > docb) {\n        if (++j >= b.length) break;\n        docb=b[j];\n      } else if (doca < docb) {\n        if (++i >= a.length) break;\n        doca=a[i];\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean intersects(DocSet other) {\n    if (!(other instanceof SortedIntDocSet)) {\n      // assume other implementations are better at random access than we are,\n      // true of BitDocSet and HashDocSet.\n      for (int i=0; i<docs.length; i++) {\n        if (other.exists(docs[i])) return true;\n      }\n      return false;\n    }\n\n    // make \"a\" the smaller set.\n    int[] otherDocs = ((SortedIntDocSet)other).docs;\n    final int[] a = docs.length < otherDocs.length ? docs : otherDocs;\n    final int[] b = docs.length < otherDocs.length ? otherDocs : docs;\n\n    if (a.length==0) return false;\n\n    // if b is 8 times bigger than a, use the modified binary search.\n    if ((b.length>>3) >= a.length) {\n      return intersects(a,b);\n    }\n\n    // if they are close in size, just do a linear walk of both.\n    int i=0,j=0;\n    int doca=a[i],docb=b[j];\n    for(;;) {\n      // switch on the sign bit somehow?  Hopefull JVM is smart enough to just test once.\n\n      // Since set a is less dense then set b, doca is likely to be greater than docb so\n      // check that case first.  This resulted in a 13% speedup.\n      if (doca > docb) {\n        if (++j >= b.length) break;\n        docb=b[j];\n      } else if (doca < docb) {\n        if (++i >= a.length) break;\n        doca=a[i];\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SortedIntDocSet#intersects(DocSet).mjava","pathOld":"solr/src/java/org/apache/solr/search/SortedIntDocSet#intersects(DocSet).mjava","sourceNew":"  @Override\n  public boolean intersects(DocSet other) {\n    if (!(other instanceof SortedIntDocSet)) {\n      // assume other implementations are better at random access than we are,\n      // true of BitDocSet and HashDocSet.\n      for (int i=0; i<docs.length; i++) {\n        if (other.exists(docs[i])) return true;\n      }\n      return false;\n    }\n\n    // make \"a\" the smaller set.\n    int[] otherDocs = ((SortedIntDocSet)other).docs;\n    final int[] a = docs.length < otherDocs.length ? docs : otherDocs;\n    final int[] b = docs.length < otherDocs.length ? otherDocs : docs;\n\n    if (a.length==0) return false;\n\n    // if b is 8 times bigger than a, use the modified binary search.\n    if ((b.length>>3) >= a.length) {\n      return intersects(a,b);\n    }\n\n    // if they are close in size, just do a linear walk of both.\n    int i=0,j=0;\n    int doca=a[i],docb=b[j];\n    for(;;) {\n      // switch on the sign bit somehow?  Hopefull JVM is smart enough to just test once.\n\n      // Since set a is less dense then set b, doca is likely to be greater than docb so\n      // check that case first.  This resulted in a 13% speedup.\n      if (doca > docb) {\n        if (++j >= b.length) break;\n        docb=b[j];\n      } else if (doca < docb) {\n        if (++i >= a.length) break;\n        doca=a[i];\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean intersects(DocSet other) {\n    if (!(other instanceof SortedIntDocSet)) {\n      // assume other implementations are better at random access than we are,\n      // true of BitDocSet and HashDocSet.\n      for (int i=0; i<docs.length; i++) {\n        if (other.exists(docs[i])) return true;\n      }\n      return false;\n    }\n\n    // make \"a\" the smaller set.\n    int[] otherDocs = ((SortedIntDocSet)other).docs;\n    final int[] a = docs.length < otherDocs.length ? docs : otherDocs;\n    final int[] b = docs.length < otherDocs.length ? otherDocs : docs;\n\n    if (a.length==0) return false;\n\n    // if b is 8 times bigger than a, use the modified binary search.\n    if ((b.length>>3) >= a.length) {\n      return intersects(a,b);\n    }\n\n    // if they are close in size, just do a linear walk of both.\n    int i=0,j=0;\n    int doca=a[i],docb=b[j];\n    for(;;) {\n      // switch on the sign bit somehow?  Hopefull JVM is smart enough to just test once.\n\n      // Since set a is less dense then set b, doca is likely to be greater than docb so\n      // check that case first.  This resulted in a 13% speedup.\n      if (doca > docb) {\n        if (++j >= b.length) break;\n        docb=b[j];\n      } else if (doca < docb) {\n        if (++i >= a.length) break;\n        doca=a[i];\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SortedIntDocSet#intersects(DocSet).mjava","pathOld":"solr/src/java/org/apache/solr/search/SortedIntDocSet#intersects(DocSet).mjava","sourceNew":"  @Override\n  public boolean intersects(DocSet other) {\n    if (!(other instanceof SortedIntDocSet)) {\n      // assume other implementations are better at random access than we are,\n      // true of BitDocSet and HashDocSet.\n      for (int i=0; i<docs.length; i++) {\n        if (other.exists(docs[i])) return true;\n      }\n      return false;\n    }\n\n    // make \"a\" the smaller set.\n    int[] otherDocs = ((SortedIntDocSet)other).docs;\n    final int[] a = docs.length < otherDocs.length ? docs : otherDocs;\n    final int[] b = docs.length < otherDocs.length ? otherDocs : docs;\n\n    if (a.length==0) return false;\n\n    // if b is 8 times bigger than a, use the modified binary search.\n    if ((b.length>>3) >= a.length) {\n      return intersects(a,b);\n    }\n\n    // if they are close in size, just do a linear walk of both.\n    int i=0,j=0;\n    int doca=a[i],docb=b[j];\n    for(;;) {\n      // switch on the sign bit somehow?  Hopefull JVM is smart enough to just test once.\n\n      // Since set a is less dense then set b, doca is likely to be greater than docb so\n      // check that case first.  This resulted in a 13% speedup.\n      if (doca > docb) {\n        if (++j >= b.length) break;\n        docb=b[j];\n      } else if (doca < docb) {\n        if (++i >= a.length) break;\n        doca=a[i];\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean intersects(DocSet other) {\n    if (!(other instanceof SortedIntDocSet)) {\n      // assume other implementations are better at random access than we are,\n      // true of BitDocSet and HashDocSet.\n      for (int i=0; i<docs.length; i++) {\n        if (other.exists(docs[i])) return true;\n      }\n      return false;\n    }\n\n    // make \"a\" the smaller set.\n    int[] otherDocs = ((SortedIntDocSet)other).docs;\n    final int[] a = docs.length < otherDocs.length ? docs : otherDocs;\n    final int[] b = docs.length < otherDocs.length ? otherDocs : docs;\n\n    if (a.length==0) return false;\n\n    // if b is 8 times bigger than a, use the modified binary search.\n    if ((b.length>>3) >= a.length) {\n      return intersects(a,b);\n    }\n\n    // if they are close in size, just do a linear walk of both.\n    int i=0,j=0;\n    int doca=a[i],docb=b[j];\n    for(;;) {\n      // switch on the sign bit somehow?  Hopefull JVM is smart enough to just test once.\n\n      // Since set a is less dense then set b, doca is likely to be greater than docb so\n      // check that case first.  This resulted in a 13% speedup.\n      if (doca > docb) {\n        if (++j >= b.length) break;\n        docb=b[j];\n      } else if (doca < docb) {\n        if (++i >= a.length) break;\n        doca=a[i];\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SortedIntDocSet#intersects(DocSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SortedIntDocSet#intersects(DocSet).mjava","sourceNew":"  @Override\n  public boolean intersects(DocSet other) {\n    if (!(other instanceof SortedIntDocSet)) {\n      // assume other implementations are better at random access than we are,\n      // true of BitDocSet and HashDocSet.\n      for (int i=0; i<docs.length; i++) {\n        if (other.exists(docs[i])) return true;\n      }\n      return false;\n    }\n\n    // make \"a\" the smaller set.\n    int[] otherDocs = ((SortedIntDocSet)other).docs;\n    final int[] a = docs.length < otherDocs.length ? docs : otherDocs;\n    final int[] b = docs.length < otherDocs.length ? otherDocs : docs;\n\n    if (a.length==0) return false;\n\n    // if b is 8 times bigger than a, use the modified binary search.\n    if ((b.length>>3) >= a.length) {\n      return intersects(a,b);\n    }\n\n    // if they are close in size, just do a linear walk of both.\n    int i=0,j=0;\n    int doca=a[i],docb=b[j];\n    for(;;) {\n      // switch on the sign bit somehow?  Hopefull JVM is smart enough to just test once.\n\n      // Since set a is less dense then set b, doca is likely to be greater than docb so\n      // check that case first.  This resulted in a 13% speedup.\n      if (doca > docb) {\n        if (++j >= b.length) break;\n        docb=b[j];\n      } else if (doca < docb) {\n        if (++i >= a.length) break;\n        doca=a[i];\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean intersects(DocSet other) {\n    if (!(other instanceof SortedIntDocSet)) {\n      // assume other implementations are better at random access than we are,\n      // true of BitDocSet and HashDocSet.\n      for (int i=0; i<docs.length; i++) {\n        if (other.exists(docs[i])) return true;\n      }\n      return false;\n    }\n\n    // make \"a\" the smaller set.\n    int[] otherDocs = ((SortedIntDocSet)other).docs;\n    final int[] a = docs.length < otherDocs.length ? docs : otherDocs;\n    final int[] b = docs.length < otherDocs.length ? otherDocs : docs;\n\n    if (a.length==0) return false;\n\n    // if b is 8 times bigger than a, use the modified binary search.\n    if ((b.length>>3) >= a.length) {\n      return intersects(a,b);\n    }\n\n    // if they are close in size, just do a linear walk of both.\n    int i=0,j=0;\n    int doca=a[i],docb=b[j];\n    for(;;) {\n      // switch on the sign bit somehow?  Hopefull JVM is smart enough to just test once.\n\n      // Since set a is less dense then set b, doca is likely to be greater than docb so\n      // check that case first.  This resulted in a 13% speedup.\n      if (doca > docb) {\n        if (++j >= b.length) break;\n        docb=b[j];\n      } else if (doca < docb) {\n        if (++i >= a.length) break;\n        doca=a[i];\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SortedIntDocSet#intersects(DocSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SortedIntDocSet#intersects(DocSet).mjava","sourceNew":"  @Override\n  public boolean intersects(DocSet other) {\n    if (!(other instanceof SortedIntDocSet)) {\n      // assume other implementations are better at random access than we are,\n      // true of BitDocSet and HashDocSet.\n      for (int i=0; i<docs.length; i++) {\n        if (other.exists(docs[i])) return true;\n      }\n      return false;\n    }\n\n    // make \"a\" the smaller set.\n    int[] otherDocs = ((SortedIntDocSet)other).docs;\n    final int[] a = docs.length < otherDocs.length ? docs : otherDocs;\n    final int[] b = docs.length < otherDocs.length ? otherDocs : docs;\n\n    if (a.length==0) return false;\n\n    // if b is 8 times bigger than a, use the modified binary search.\n    if ((b.length>>3) >= a.length) {\n      return intersects(a,b);\n    }\n\n    // if they are close in size, just do a linear walk of both.\n    int i=0,j=0;\n    int doca=a[i],docb=b[j];\n    for(;;) {\n      // switch on the sign bit somehow?  Hopefull JVM is smart enough to just test once.\n\n      // Since set a is less dense then set b, doca is likely to be greater than docb so\n      // check that case first.  This resulted in a 13% speedup.\n      if (doca > docb) {\n        if (++j >= b.length) break;\n        docb=b[j];\n      } else if (doca < docb) {\n        if (++i >= a.length) break;\n        doca=a[i];\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean intersects(DocSet other) {\n    if (!(other instanceof SortedIntDocSet)) {\n      // assume other implementations are better at random access than we are,\n      // true of BitDocSet and HashDocSet.\n      for (int i=0; i<docs.length; i++) {\n        if (other.exists(docs[i])) return true;\n      }\n      return false;\n    }\n\n    // make \"a\" the smaller set.\n    int[] otherDocs = ((SortedIntDocSet)other).docs;\n    final int[] a = docs.length < otherDocs.length ? docs : otherDocs;\n    final int[] b = docs.length < otherDocs.length ? otherDocs : docs;\n\n    if (a.length==0) return false;\n\n    // if b is 8 times bigger than a, use the modified binary search.\n    if ((b.length>>3) >= a.length) {\n      return intersects(a,b);\n    }\n\n    // if they are close in size, just do a linear walk of both.\n    int i=0,j=0;\n    int doca=a[i],docb=b[j];\n    for(;;) {\n      // switch on the sign bit somehow?  Hopefull JVM is smart enough to just test once.\n\n      // Since set a is less dense then set b, doca is likely to be greater than docb so\n      // check that case first.  This resulted in a 13% speedup.\n      if (doca > docb) {\n        if (++j >= b.length) break;\n        docb=b[j];\n      } else if (doca < docb) {\n        if (++i >= a.length) break;\n        doca=a[i];\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90440a2155c2b9ce30bf8fc29b1c978c58dae1e7","date":1582642100,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SortedIntDocSet#intersects(DocSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SortedIntDocSet#intersects(DocSet).mjava","sourceNew":"  @Override\n  public boolean intersects(DocSet other) {\n    if (!(other instanceof SortedIntDocSet)) {\n      // assume BitDocSet is better at random access than we are\n      for (int doc : docs) {\n        if (other.exists(doc)) return true;\n      }\n      return false;\n    }\n\n    // make \"a\" the smaller set.\n    int[] otherDocs = ((SortedIntDocSet)other).docs;\n    final int[] a = docs.length < otherDocs.length ? docs : otherDocs;\n    final int[] b = docs.length < otherDocs.length ? otherDocs : docs;\n\n    if (a.length==0) return false;\n\n    // if b is 8 times bigger than a, use the modified binary search.\n    if ((b.length>>3) >= a.length) {\n      return intersects(a,b);\n    }\n\n    // if they are close in size, just do a linear walk of both.\n    int i=0,j=0;\n    int doca=a[i],docb=b[j];\n    for(;;) {\n      // switch on the sign bit somehow?  Hopefull JVM is smart enough to just test once.\n\n      // Since set a is less dense then set b, doca is likely to be greater than docb so\n      // check that case first.  This resulted in a 13% speedup.\n      if (doca > docb) {\n        if (++j >= b.length) break;\n        docb=b[j];\n      } else if (doca < docb) {\n        if (++i >= a.length) break;\n        doca=a[i];\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean intersects(DocSet other) {\n    if (!(other instanceof SortedIntDocSet)) {\n      // assume other implementations are better at random access than we are,\n      // true of BitDocSet and HashDocSet.\n      for (int i=0; i<docs.length; i++) {\n        if (other.exists(docs[i])) return true;\n      }\n      return false;\n    }\n\n    // make \"a\" the smaller set.\n    int[] otherDocs = ((SortedIntDocSet)other).docs;\n    final int[] a = docs.length < otherDocs.length ? docs : otherDocs;\n    final int[] b = docs.length < otherDocs.length ? otherDocs : docs;\n\n    if (a.length==0) return false;\n\n    // if b is 8 times bigger than a, use the modified binary search.\n    if ((b.length>>3) >= a.length) {\n      return intersects(a,b);\n    }\n\n    // if they are close in size, just do a linear walk of both.\n    int i=0,j=0;\n    int doca=a[i],docb=b[j];\n    for(;;) {\n      // switch on the sign bit somehow?  Hopefull JVM is smart enough to just test once.\n\n      // Since set a is less dense then set b, doca is likely to be greater than docb so\n      // check that case first.  This resulted in a 13% speedup.\n      if (doca > docb) {\n        if (++j >= b.length) break;\n        docb=b[j];\n      } else if (doca < docb) {\n        if (++i >= a.length) break;\n        doca=a[i];\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["c26f00b574427b55127e869b935845554afde1fa","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"90440a2155c2b9ce30bf8fc29b1c978c58dae1e7":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90440a2155c2b9ce30bf8fc29b1c978c58dae1e7"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","90440a2155c2b9ce30bf8fc29b1c978c58dae1e7"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"90440a2155c2b9ce30bf8fc29b1c978c58dae1e7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}