{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#registerCore(String).mjava","commits":[{"id":"5b4df85b7268ca40452d6c01343d8eb00ed1f70a","date":1463171656,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#registerCore(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Notify this reader that a local Core is a member of a collection, and so that collection\n   * state should be watched.\n   *\n   * Not a public API.  This method should only be called from ZkController.\n   *\n   * The number of cores per-collection is tracked, and adding multiple cores from the same\n   * collection does not increase the number of watches.\n   *\n   * @param collection the collection that the core is a member of\n   *\n   * @see ZkStateReader#unregisterCore(String)\n   */\n  public void registerCore(String collection) {\n    AtomicBoolean reconstructState = new AtomicBoolean(false);\n    collectionWatches.compute(collection, (k, v) -> {\n      if (v == null) {\n        reconstructState.set(true);\n        v = new CollectionWatch();\n      }\n      v.coreRefCount++;\n      return v;\n    });\n    if (reconstructState.get()) {\n      new StateWatcher(collection).refreshAndWatch();\n      synchronized (getUpdateLock()) {\n        constructState();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#registerCore(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Notify this reader that a local Core is a member of a collection, and so that collection\n   * state should be watched.\n   *\n   * Not a public API.  This method should only be called from ZkController.\n   *\n   * The number of cores per-collection is tracked, and adding multiple cores from the same\n   * collection does not increase the number of watches.\n   *\n   * @param collection the collection that the core is a member of\n   *\n   * @see ZkStateReader#unregisterCore(String)\n   */\n  public void registerCore(String collection) {\n    AtomicBoolean reconstructState = new AtomicBoolean(false);\n    collectionWatches.compute(collection, (k, v) -> {\n      if (v == null) {\n        reconstructState.set(true);\n        v = new CollectionWatch();\n      }\n      v.coreRefCount++;\n      return v;\n    });\n    if (reconstructState.get()) {\n      new StateWatcher(collection).refreshAndWatch();\n      synchronized (getUpdateLock()) {\n        constructState();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#registerCore(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Notify this reader that a local Core is a member of a collection, and so that collection\n   * state should be watched.\n   *\n   * Not a public API.  This method should only be called from ZkController.\n   *\n   * The number of cores per-collection is tracked, and adding multiple cores from the same\n   * collection does not increase the number of watches.\n   *\n   * @param collection the collection that the core is a member of\n   *\n   * @see ZkStateReader#unregisterCore(String)\n   */\n  public void registerCore(String collection) {\n    AtomicBoolean reconstructState = new AtomicBoolean(false);\n    collectionWatches.compute(collection, (k, v) -> {\n      if (v == null) {\n        reconstructState.set(true);\n        v = new CollectionWatch();\n      }\n      v.coreRefCount++;\n      return v;\n    });\n    if (reconstructState.get()) {\n      new StateWatcher(collection).refreshAndWatch();\n      synchronized (getUpdateLock()) {\n        constructState();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f","date":1467384467,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#registerCore(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#registerCore(String).mjava","sourceNew":"  /**\n   * Notify this reader that a local Core is a member of a collection, and so that collection\n   * state should be watched.\n   *\n   * Not a public API.  This method should only be called from ZkController.\n   *\n   * The number of cores per-collection is tracked, and adding multiple cores from the same\n   * collection does not increase the number of watches.\n   *\n   * @param collection the collection that the core is a member of\n   *\n   * @see ZkStateReader#unregisterCore(String)\n   */\n  public void registerCore(String collection) {\n    AtomicBoolean reconstructState = new AtomicBoolean(false);\n    collectionWatches.compute(collection, (k, v) -> {\n      if (v == null) {\n        reconstructState.set(true);\n        v = new CollectionWatch();\n      }\n      v.coreRefCount++;\n      return v;\n    });\n    if (reconstructState.get()) {\n      new StateWatcher(collection).refreshAndWatch();\n    }\n  }\n\n","sourceOld":"  /**\n   * Notify this reader that a local Core is a member of a collection, and so that collection\n   * state should be watched.\n   *\n   * Not a public API.  This method should only be called from ZkController.\n   *\n   * The number of cores per-collection is tracked, and adding multiple cores from the same\n   * collection does not increase the number of watches.\n   *\n   * @param collection the collection that the core is a member of\n   *\n   * @see ZkStateReader#unregisterCore(String)\n   */\n  public void registerCore(String collection) {\n    AtomicBoolean reconstructState = new AtomicBoolean(false);\n    collectionWatches.compute(collection, (k, v) -> {\n      if (v == null) {\n        reconstructState.set(true);\n        v = new CollectionWatch();\n      }\n      v.coreRefCount++;\n      return v;\n    });\n    if (reconstructState.get()) {\n      new StateWatcher(collection).refreshAndWatch();\n      synchronized (getUpdateLock()) {\n        constructState();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#registerCore(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Notify this reader that a local Core is a member of a collection, and so that collection\n   * state should be watched.\n   *\n   * Not a public API.  This method should only be called from ZkController.\n   *\n   * The number of cores per-collection is tracked, and adding multiple cores from the same\n   * collection does not increase the number of watches.\n   *\n   * @param collection the collection that the core is a member of\n   *\n   * @see ZkStateReader#unregisterCore(String)\n   */\n  public void registerCore(String collection) {\n    AtomicBoolean reconstructState = new AtomicBoolean(false);\n    collectionWatches.compute(collection, (k, v) -> {\n      if (v == null) {\n        reconstructState.set(true);\n        v = new CollectionWatch();\n      }\n      v.coreRefCount++;\n      return v;\n    });\n    if (reconstructState.get()) {\n      new StateWatcher(collection).refreshAndWatch();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de3459a54b4c8751d9ef19b035577e2418064be7","date":1520297996,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#registerCore(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#registerCore(String).mjava","sourceNew":"  /**\n   * Notify this reader that a local Core is a member of a collection, and so that collection\n   * state should be watched.\n   *\n   * Not a public API.  This method should only be called from ZkController.\n   *\n   * The number of cores per-collection is tracked, and adding multiple cores from the same\n   * collection does not increase the number of watches.\n   *\n   * @param collection the collection that the core is a member of\n   *\n   * @see ZkStateReader#unregisterCore(String)\n   */\n  public void registerCore(String collection) {\n    AtomicBoolean reconstructState = new AtomicBoolean(false);\n    collectionWatches.compute(collection, (k, v) -> {\n      if (v == null) {\n        reconstructState.set(true);\n        v = new CollectionWatch<>();\n      }\n      v.coreRefCount++;\n      return v;\n    });\n    if (reconstructState.get()) {\n      new StateWatcher(collection).refreshAndWatch();\n    }\n\n    AtomicBoolean addPropsWatch = new AtomicBoolean(false);\n    collectionPropsWatches.compute(collection, (k, v) -> {\n      if (v == null) {\n        addPropsWatch.set(true);\n        v = new CollectionWatch<>();\n      }\n      v.coreRefCount++;\n      return v;\n    });\n\n    if (addPropsWatch.get()) {\n      new PropsWatcher(collection).refreshAndWatch(false);\n    }\n  }\n\n","sourceOld":"  /**\n   * Notify this reader that a local Core is a member of a collection, and so that collection\n   * state should be watched.\n   *\n   * Not a public API.  This method should only be called from ZkController.\n   *\n   * The number of cores per-collection is tracked, and adding multiple cores from the same\n   * collection does not increase the number of watches.\n   *\n   * @param collection the collection that the core is a member of\n   *\n   * @see ZkStateReader#unregisterCore(String)\n   */\n  public void registerCore(String collection) {\n    AtomicBoolean reconstructState = new AtomicBoolean(false);\n    collectionWatches.compute(collection, (k, v) -> {\n      if (v == null) {\n        reconstructState.set(true);\n        v = new CollectionWatch();\n      }\n      v.coreRefCount++;\n      return v;\n    });\n    if (reconstructState.get()) {\n      new StateWatcher(collection).refreshAndWatch();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"425608fe319a24666a13392bde3c85ba233d05d8","date":1521141680,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#registerCore(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#registerCore(String).mjava","sourceNew":"  /**\n   * Notify this reader that a local Core is a member of a collection, and so that collection\n   * state should be watched.\n   *\n   * Not a public API.  This method should only be called from ZkController.\n   *\n   * The number of cores per-collection is tracked, and adding multiple cores from the same\n   * collection does not increase the number of watches.\n   *\n   * @param collection the collection that the core is a member of\n   *\n   * @see ZkStateReader#unregisterCore(String)\n   */\n  public void registerCore(String collection) {\n    AtomicBoolean reconstructState = new AtomicBoolean(false);\n    collectionWatches.compute(collection, (k, v) -> {\n      if (v == null) {\n        reconstructState.set(true);\n        v = new CollectionWatch<>();\n      }\n      v.coreRefCount++;\n      return v;\n    });\n    if (reconstructState.get()) {\n      new StateWatcher(collection).refreshAndWatch();\n    }\n  }\n\n","sourceOld":"  /**\n   * Notify this reader that a local Core is a member of a collection, and so that collection\n   * state should be watched.\n   *\n   * Not a public API.  This method should only be called from ZkController.\n   *\n   * The number of cores per-collection is tracked, and adding multiple cores from the same\n   * collection does not increase the number of watches.\n   *\n   * @param collection the collection that the core is a member of\n   *\n   * @see ZkStateReader#unregisterCore(String)\n   */\n  public void registerCore(String collection) {\n    AtomicBoolean reconstructState = new AtomicBoolean(false);\n    collectionWatches.compute(collection, (k, v) -> {\n      if (v == null) {\n        reconstructState.set(true);\n        v = new CollectionWatch<>();\n      }\n      v.coreRefCount++;\n      return v;\n    });\n    if (reconstructState.get()) {\n      new StateWatcher(collection).refreshAndWatch();\n    }\n\n    AtomicBoolean addPropsWatch = new AtomicBoolean(false);\n    collectionPropsWatches.compute(collection, (k, v) -> {\n      if (v == null) {\n        addPropsWatch.set(true);\n        v = new CollectionWatch<>();\n      }\n      v.coreRefCount++;\n      return v;\n    });\n\n    if (addPropsWatch.get()) {\n      new PropsWatcher(collection).refreshAndWatch(false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"518199996073b2a0fc5dcb97ddea3717400b74c5","date":1521211448,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#registerCore(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#registerCore(String).mjava","sourceNew":"  /**\n   * Notify this reader that a local Core is a member of a collection, and so that collection\n   * state should be watched.\n   *\n   * Not a public API.  This method should only be called from ZkController.\n   *\n   * The number of cores per-collection is tracked, and adding multiple cores from the same\n   * collection does not increase the number of watches.\n   *\n   * @param collection the collection that the core is a member of\n   *\n   * @see ZkStateReader#unregisterCore(String)\n   */\n  public void registerCore(String collection) {\n    AtomicBoolean reconstructState = new AtomicBoolean(false);\n    collectionWatches.compute(collection, (k, v) -> {\n      if (v == null) {\n        reconstructState.set(true);\n        v = new CollectionWatch<>();\n      }\n      v.coreRefCount++;\n      return v;\n    });\n    if (reconstructState.get()) {\n      new StateWatcher(collection).refreshAndWatch();\n    }\n  }\n\n","sourceOld":"  /**\n   * Notify this reader that a local Core is a member of a collection, and so that collection\n   * state should be watched.\n   *\n   * Not a public API.  This method should only be called from ZkController.\n   *\n   * The number of cores per-collection is tracked, and adding multiple cores from the same\n   * collection does not increase the number of watches.\n   *\n   * @param collection the collection that the core is a member of\n   *\n   * @see ZkStateReader#unregisterCore(String)\n   */\n  public void registerCore(String collection) {\n    AtomicBoolean reconstructState = new AtomicBoolean(false);\n    collectionWatches.compute(collection, (k, v) -> {\n      if (v == null) {\n        reconstructState.set(true);\n        v = new CollectionWatch<>();\n      }\n      v.coreRefCount++;\n      return v;\n    });\n    if (reconstructState.get()) {\n      new StateWatcher(collection).refreshAndWatch();\n    }\n\n    AtomicBoolean addPropsWatch = new AtomicBoolean(false);\n    collectionPropsWatches.compute(collection, (k, v) -> {\n      if (v == null) {\n        addPropsWatch.set(true);\n        v = new CollectionWatch<>();\n      }\n      v.coreRefCount++;\n      return v;\n    });\n\n    if (addPropsWatch.get()) {\n      new PropsWatcher(collection).refreshAndWatch(false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#registerCore(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#registerCore(String).mjava","sourceNew":"  /**\n   * Notify this reader that a local Core is a member of a collection, and so that collection\n   * state should be watched.\n   * <p>\n   * Not a public API.  This method should only be called from ZkController.\n   * <p>\n   * The number of cores per-collection is tracked, and adding multiple cores from the same\n   * collection does not increase the number of watches.\n   *\n   * @param collection the collection that the core is a member of\n   * @see ZkStateReader#unregisterCore(String)\n   */\n  public void registerCore(String collection) {\n    AtomicBoolean reconstructState = new AtomicBoolean(false);\n    collectionWatches.compute(collection, (k, v) -> {\n      if (v == null) {\n        reconstructState.set(true);\n        v = new CollectionWatch<>();\n      }\n      v.coreRefCount++;\n      return v;\n    });\n    if (reconstructState.get()) {\n      new StateWatcher(collection).refreshAndWatch();\n    }\n  }\n\n","sourceOld":"  /**\n   * Notify this reader that a local Core is a member of a collection, and so that collection\n   * state should be watched.\n   *\n   * Not a public API.  This method should only be called from ZkController.\n   *\n   * The number of cores per-collection is tracked, and adding multiple cores from the same\n   * collection does not increase the number of watches.\n   *\n   * @param collection the collection that the core is a member of\n   *\n   * @see ZkStateReader#unregisterCore(String)\n   */\n  public void registerCore(String collection) {\n    AtomicBoolean reconstructState = new AtomicBoolean(false);\n    collectionWatches.compute(collection, (k, v) -> {\n      if (v == null) {\n        reconstructState.set(true);\n        v = new CollectionWatch<>();\n      }\n      v.coreRefCount++;\n      return v;\n    });\n    if (reconstructState.get()) {\n      new StateWatcher(collection).refreshAndWatch();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2668c99990e4c94a78bac005aa682b7c5986d23a":["518199996073b2a0fc5dcb97ddea3717400b74c5"],"de3459a54b4c8751d9ef19b035577e2418064be7":["b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"518199996073b2a0fc5dcb97ddea3717400b74c5":["de3459a54b4c8751d9ef19b035577e2418064be7","425608fe319a24666a13392bde3c85ba233d05d8"],"0ad30c6a479e764150a3316e57263319775f1df2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5b4df85b7268ca40452d6c01343d8eb00ed1f70a"],"b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"5b4df85b7268ca40452d6c01343d8eb00ed1f70a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"425608fe319a24666a13392bde3c85ba233d05d8":["de3459a54b4c8751d9ef19b035577e2418064be7"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"2668c99990e4c94a78bac005aa682b7c5986d23a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"de3459a54b4c8751d9ef19b035577e2418064be7":["518199996073b2a0fc5dcb97ddea3717400b74c5","425608fe319a24666a13392bde3c85ba233d05d8"],"518199996073b2a0fc5dcb97ddea3717400b74c5":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ad30c6a479e764150a3316e57263319775f1df2","5b4df85b7268ca40452d6c01343d8eb00ed1f70a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f":["de3459a54b4c8751d9ef19b035577e2418064be7","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"425608fe319a24666a13392bde3c85ba233d05d8":["518199996073b2a0fc5dcb97ddea3717400b74c5"],"5b4df85b7268ca40452d6c01343d8eb00ed1f70a":["0ad30c6a479e764150a3316e57263319775f1df2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}