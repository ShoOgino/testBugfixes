{"path":"src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans1().mjava","commits":[{"id":"2f86b525ce098b3c7b0f79b5b8ab050eab273e99","date":1241205271,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans1().mjava","pathOld":"/dev/null","sourceNew":"  public void testSpans1() throws Exception {\n    SpanQuery q1 = new SpanTermQuery(new Term(\"first\", \"sally\"));\n    SpanQuery q2 = new SpanTermQuery(new Term(\"first\", \"james\"));\n    SpanQuery qA = new SpanOrQuery(new SpanQuery[] { q1, q2 });\n    SpanQuery qB = new FieldMaskingSpanQuery(qA, \"id\");\n                                            \n    check(qA, new int[] { 0, 1, 2, 4 });\n    check(qB, new int[] { 0, 1, 2, 4 });\n  \n    Spans spanA = qA.getSpans(searcher.getIndexReader());\n    Spans spanB = qB.getSpans(searcher.getIndexReader());\n    \n    while (spanA.next()) {\n      assertTrue(\"spanB not still going\", spanB.next());\n      assertEquals(\"spanA not equal spanB\", s(spanA), s(spanB));\n    }\n    assertTrue(\"spanB still going even tough spanA is done\", !(spanB.next()));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans1().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans1().mjava","sourceNew":"  public void testSpans1() throws Exception {\n    SpanQuery q1 = new SpanTermQuery(new Term(\"first\", \"sally\"));\n    SpanQuery q2 = new SpanTermQuery(new Term(\"first\", \"james\"));\n    SpanQuery qA = new SpanOrQuery(new SpanQuery[] { q1, q2 });\n    SpanQuery qB = new FieldMaskingSpanQuery(qA, \"id\");\n                                            \n    check(qA, new int[] { 0, 1, 2, 4 });\n    check(qB, new int[] { 0, 1, 2, 4 });\n  \n    Spans spanA = qA.getSpans(searcher.getIndexReader());\n    Spans spanB = qB.getSpans(searcher.getIndexReader());\n    \n    while (spanA.next()) {\n      assertTrue(\"spanB not still going\", spanB.next());\n      assertEquals(\"spanA not equal spanB\", s(spanA), s(spanB));\n    }\n    assertTrue(\"spanB still going even tough spanA is done\", !(spanB.next()));\n\n  }\n\n","sourceOld":"  public void testSpans1() throws Exception {\n    SpanQuery q1 = new SpanTermQuery(new Term(\"first\", \"sally\"));\n    SpanQuery q2 = new SpanTermQuery(new Term(\"first\", \"james\"));\n    SpanQuery qA = new SpanOrQuery(new SpanQuery[] { q1, q2 });\n    SpanQuery qB = new FieldMaskingSpanQuery(qA, \"id\");\n                                            \n    check(qA, new int[] { 0, 1, 2, 4 });\n    check(qB, new int[] { 0, 1, 2, 4 });\n  \n    Spans spanA = qA.getSpans(searcher.getIndexReader());\n    Spans spanB = qB.getSpans(searcher.getIndexReader());\n    \n    while (spanA.next()) {\n      assertTrue(\"spanB not still going\", spanB.next());\n      assertEquals(\"spanA not equal spanB\", s(spanA), s(spanB));\n    }\n    assertTrue(\"spanB still going even tough spanA is done\", !(spanB.next()));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2f86b525ce098b3c7b0f79b5b8ab050eab273e99":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["2f86b525ce098b3c7b0f79b5b8ab050eab273e99"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2f86b525ce098b3c7b0f79b5b8ab050eab273e99"],"2f86b525ce098b3c7b0f79b5b8ab050eab273e99":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}