{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/routing/ReplicaListTransformerTest#testTransform().mjava","commits":[{"id":"833432c363468a5df50f87446a68015404b1fbcf","date":1572302961,"type":1,"author":"Houston Putman","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/routing/ReplicaListTransformerTest#testTransform().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/ReplicaListTransformerTest#testTransform().mjava","sourceNew":"  @Test\n  public void testTransform() throws Exception {\n\n    final String regex = \".*\" + random().nextInt(10) + \".*\";\n\n    final ReplicaListTransformer transformer;\n    if (random().nextBoolean()) {\n\n      transformer = new ToyMatchingReplicaListTransformer(regex);\n\n    } else {\n\n      transformer = new HttpShardHandlerFactory() {\n\n        @Override\n        protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req)\n        {\n          final SolrParams params = req.getParams();\n\n          if (params.getBool(\"toyNoTransform\", false)) {\n            return new ToyNoOpReplicaListTransformer();\n          }\n\n          final String regex = params.get(\"toyRegEx\");\n          if (regex != null) {\n            return new ToyMatchingReplicaListTransformer(regex);\n          }\n\n          return super.getReplicaListTransformer(req);\n        }\n\n      }.getReplicaListTransformer(\n          new LocalSolrQueryRequest(null,\n              new ModifiableSolrParams().add(\"toyRegEx\", regex)));\n    }\n\n    final List<Replica> inputs = new ArrayList<>();\n    final List<Replica> expectedTransformed = new ArrayList<>();\n\n    final List<String> urls = createRandomUrls();\n    for (int ii=0; ii<urls.size(); ++ii) {\n\n      final String name = \"replica\"+(ii+1);\n      final String url = urls.get(ii);\n      final Map<String,Object> propMap = new HashMap<String,Object>();\n      propMap.put(\"base_url\", url);\n      // a skeleton replica, good enough for this test's purposes\n      final Replica replica = new Replica(name, propMap);\n\n      inputs.add(replica);\n      if (url.matches(regex)) {\n        expectedTransformed.add(replica);\n      }\n    }\n\n    final List<Replica> actualTransformed = new ArrayList<>(inputs);\n    transformer.transform(actualTransformed);\n\n    assertEquals(expectedTransformed.size(), actualTransformed.size());\n    for (int ii=0; ii<expectedTransformed.size(); ++ii) {\n      assertEquals(\"mismatch for ii=\"+ii, expectedTransformed.get(ii), actualTransformed.get(ii));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTransform() throws Exception {\n\n    final String regex = \".*\" + random().nextInt(10) + \".*\";\n\n    final ReplicaListTransformer transformer;\n    if (random().nextBoolean()) {\n\n      transformer = new ToyMatchingReplicaListTransformer(regex);\n\n    } else {\n\n      transformer = new HttpShardHandlerFactory() {\n\n        @Override\n        protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req)\n        {\n          final SolrParams params = req.getParams();\n\n          if (params.getBool(\"toyNoTransform\", false)) {\n            return new ToyNoOpReplicaListTransformer();\n          }\n\n          final String regex = params.get(\"toyRegEx\");\n          if (regex != null) {\n            return new ToyMatchingReplicaListTransformer(regex);\n          }\n\n          return super.getReplicaListTransformer(req);\n        }\n\n      }.getReplicaListTransformer(\n          new LocalSolrQueryRequest(null,\n              new ModifiableSolrParams().add(\"toyRegEx\", regex)));\n    }\n\n    final List<Replica> inputs = new ArrayList<>();\n    final List<Replica> expectedTransformed = new ArrayList<>();\n\n    final List<String> urls = createRandomUrls();\n    for (int ii=0; ii<urls.size(); ++ii) {\n\n      final String name = \"replica\"+(ii+1);\n      final String url = urls.get(ii);\n      final Map<String,Object> propMap = new HashMap<String,Object>();\n      propMap.put(\"base_url\", url);\n      // a skeleton replica, good enough for this test's purposes\n      final Replica replica = new Replica(name, propMap);\n\n      inputs.add(replica);\n      if (url.matches(regex)) {\n        expectedTransformed.add(replica);\n      }\n    }\n\n    final List<Replica> actualTransformed = new ArrayList<>(inputs);\n    transformer.transform(actualTransformed);\n\n    assertEquals(expectedTransformed.size(), actualTransformed.size());\n    for (int ii=0; ii<expectedTransformed.size(); ++ii) {\n      assertEquals(\"mismatch for ii=\"+ii, expectedTransformed.get(ii), actualTransformed.get(ii));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6681d02f2302c363be938426e68f8dfd090cc1bf","date":1575339019,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/routing/ReplicaListTransformerTest#testTransform().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/routing/ReplicaListTransformerTest#testTransform().mjava","sourceNew":"  @Test\n  public void testTransform() throws Exception {\n\n    final String regex = \".*\" + random().nextInt(10) + \".*\";\n\n    final ReplicaListTransformer transformer;\n    if (random().nextBoolean()) {\n\n      transformer = new ToyMatchingReplicaListTransformer(regex);\n\n    } else {\n\n      transformer = new HttpShardHandlerFactory() {\n\n        @Override\n        protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req)\n        {\n          final SolrParams params = req.getParams();\n\n          if (params.getBool(\"toyNoTransform\", false)) {\n            return new ToyNoOpReplicaListTransformer();\n          }\n\n          final String regex = params.get(\"toyRegEx\");\n          if (regex != null) {\n            return new ToyMatchingReplicaListTransformer(regex);\n          }\n\n          return super.getReplicaListTransformer(req);\n        }\n\n      }.getReplicaListTransformer(\n          new LocalSolrQueryRequest(null,\n              new ModifiableSolrParams().add(\"toyRegEx\", regex)));\n    }\n\n    final List<Replica> inputs = new ArrayList<>();\n    final List<Replica> expectedTransformed = new ArrayList<>();\n\n    final List<String> urls = createRandomUrls();\n    for (int ii=0; ii<urls.size(); ++ii) {\n\n      final String name = \"replica\"+(ii+1);\n      final String url = urls.get(ii);\n      final Map<String,Object> propMap = new HashMap<String,Object>();\n      propMap.put(\"base_url\", url);\n      // a skeleton replica, good enough for this test's purposes\n      final Replica replica = new Replica(name, propMap,\"c1\",\"s1\");\n\n      inputs.add(replica);\n      if (url.matches(regex)) {\n        expectedTransformed.add(replica);\n      }\n    }\n\n    final List<Replica> actualTransformed = new ArrayList<>(inputs);\n    transformer.transform(actualTransformed);\n\n    assertEquals(expectedTransformed.size(), actualTransformed.size());\n    for (int ii=0; ii<expectedTransformed.size(); ++ii) {\n      assertEquals(\"mismatch for ii=\"+ii, expectedTransformed.get(ii), actualTransformed.get(ii));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTransform() throws Exception {\n\n    final String regex = \".*\" + random().nextInt(10) + \".*\";\n\n    final ReplicaListTransformer transformer;\n    if (random().nextBoolean()) {\n\n      transformer = new ToyMatchingReplicaListTransformer(regex);\n\n    } else {\n\n      transformer = new HttpShardHandlerFactory() {\n\n        @Override\n        protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req)\n        {\n          final SolrParams params = req.getParams();\n\n          if (params.getBool(\"toyNoTransform\", false)) {\n            return new ToyNoOpReplicaListTransformer();\n          }\n\n          final String regex = params.get(\"toyRegEx\");\n          if (regex != null) {\n            return new ToyMatchingReplicaListTransformer(regex);\n          }\n\n          return super.getReplicaListTransformer(req);\n        }\n\n      }.getReplicaListTransformer(\n          new LocalSolrQueryRequest(null,\n              new ModifiableSolrParams().add(\"toyRegEx\", regex)));\n    }\n\n    final List<Replica> inputs = new ArrayList<>();\n    final List<Replica> expectedTransformed = new ArrayList<>();\n\n    final List<String> urls = createRandomUrls();\n    for (int ii=0; ii<urls.size(); ++ii) {\n\n      final String name = \"replica\"+(ii+1);\n      final String url = urls.get(ii);\n      final Map<String,Object> propMap = new HashMap<String,Object>();\n      propMap.put(\"base_url\", url);\n      // a skeleton replica, good enough for this test's purposes\n      final Replica replica = new Replica(name, propMap);\n\n      inputs.add(replica);\n      if (url.matches(regex)) {\n        expectedTransformed.add(replica);\n      }\n    }\n\n    final List<Replica> actualTransformed = new ArrayList<>(inputs);\n    transformer.transform(actualTransformed);\n\n    assertEquals(expectedTransformed.size(), actualTransformed.size());\n    for (int ii=0; ii<expectedTransformed.size(); ++ii) {\n      assertEquals(\"mismatch for ii=\"+ii, expectedTransformed.get(ii), actualTransformed.get(ii));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3aa683bba99315838c968fefedf3d74f44aa993","date":1575395112,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/routing/ReplicaListTransformerTest#testTransform().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/routing/ReplicaListTransformerTest#testTransform().mjava","sourceNew":"  @Test\n  public void testTransform() throws Exception {\n\n    final String regex = \".*\" + random().nextInt(10) + \".*\";\n\n    final ReplicaListTransformer transformer;\n    if (random().nextBoolean()) {\n\n      transformer = new ToyMatchingReplicaListTransformer(regex);\n\n    } else {\n\n      transformer = new HttpShardHandlerFactory() {\n\n        @Override\n        protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req)\n        {\n          final SolrParams params = req.getParams();\n\n          if (params.getBool(\"toyNoTransform\", false)) {\n            return new ToyNoOpReplicaListTransformer();\n          }\n\n          final String regex = params.get(\"toyRegEx\");\n          if (regex != null) {\n            return new ToyMatchingReplicaListTransformer(regex);\n          }\n\n          return super.getReplicaListTransformer(req);\n        }\n\n      }.getReplicaListTransformer(\n          new LocalSolrQueryRequest(null,\n              new ModifiableSolrParams().add(\"toyRegEx\", regex)));\n    }\n\n    final List<Replica> inputs = new ArrayList<>();\n    final List<Replica> expectedTransformed = new ArrayList<>();\n\n    final List<String> urls = createRandomUrls();\n    for (int ii=0; ii<urls.size(); ++ii) {\n\n      final String name = \"replica\"+(ii+1);\n      final String url = urls.get(ii);\n      final Map<String,Object> propMap = new HashMap<String,Object>();\n      propMap.put(\"base_url\", url);\n      // a skeleton replica, good enough for this test's purposes\n      final Replica replica = new Replica(name, propMap,\"c1\",\"s1\");\n\n      inputs.add(replica);\n      if (url.matches(regex)) {\n        expectedTransformed.add(replica);\n      }\n    }\n\n    final List<Replica> actualTransformed = new ArrayList<>(inputs);\n    transformer.transform(actualTransformed);\n\n    assertEquals(expectedTransformed.size(), actualTransformed.size());\n    for (int ii=0; ii<expectedTransformed.size(); ++ii) {\n      assertEquals(\"mismatch for ii=\"+ii, expectedTransformed.get(ii), actualTransformed.get(ii));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTransform() throws Exception {\n\n    final String regex = \".*\" + random().nextInt(10) + \".*\";\n\n    final ReplicaListTransformer transformer;\n    if (random().nextBoolean()) {\n\n      transformer = new ToyMatchingReplicaListTransformer(regex);\n\n    } else {\n\n      transformer = new HttpShardHandlerFactory() {\n\n        @Override\n        protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req)\n        {\n          final SolrParams params = req.getParams();\n\n          if (params.getBool(\"toyNoTransform\", false)) {\n            return new ToyNoOpReplicaListTransformer();\n          }\n\n          final String regex = params.get(\"toyRegEx\");\n          if (regex != null) {\n            return new ToyMatchingReplicaListTransformer(regex);\n          }\n\n          return super.getReplicaListTransformer(req);\n        }\n\n      }.getReplicaListTransformer(\n          new LocalSolrQueryRequest(null,\n              new ModifiableSolrParams().add(\"toyRegEx\", regex)));\n    }\n\n    final List<Replica> inputs = new ArrayList<>();\n    final List<Replica> expectedTransformed = new ArrayList<>();\n\n    final List<String> urls = createRandomUrls();\n    for (int ii=0; ii<urls.size(); ++ii) {\n\n      final String name = \"replica\"+(ii+1);\n      final String url = urls.get(ii);\n      final Map<String,Object> propMap = new HashMap<String,Object>();\n      propMap.put(\"base_url\", url);\n      // a skeleton replica, good enough for this test's purposes\n      final Replica replica = new Replica(name, propMap);\n\n      inputs.add(replica);\n      if (url.matches(regex)) {\n        expectedTransformed.add(replica);\n      }\n    }\n\n    final List<Replica> actualTransformed = new ArrayList<>(inputs);\n    transformer.transform(actualTransformed);\n\n    assertEquals(expectedTransformed.size(), actualTransformed.size());\n    for (int ii=0; ii<expectedTransformed.size(); ++ii) {\n      assertEquals(\"mismatch for ii=\"+ii, expectedTransformed.get(ii), actualTransformed.get(ii));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ea07d22cef2406e950de111f8aa7bc2edb91d56","date":1581094599,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/routing/ReplicaListTransformerTest#testTransform().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/routing/ReplicaListTransformerTest#testTransform().mjava","sourceNew":"  @Test\n  public void testTransform() throws Exception {\n\n    final String regex = \".*\" + random().nextInt(10) + \".*\";\n\n    final ReplicaListTransformer transformer;\n    if (random().nextBoolean()) {\n\n      transformer = new ToyMatchingReplicaListTransformer(regex);\n\n    } else {\n\n      transformer = new HttpShardHandlerFactory() {\n\n        @Override\n        protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req)\n        {\n          final SolrParams params = req.getParams();\n\n          if (params.getBool(\"toyNoTransform\", false)) {\n            return new ToyNoOpReplicaListTransformer();\n          }\n\n          final String regex = params.get(\"toyRegEx\");\n          if (regex != null) {\n            return new ToyMatchingReplicaListTransformer(regex);\n          }\n\n          return super.getReplicaListTransformer(req);\n        }\n\n      }.getReplicaListTransformer(\n          new LocalSolrQueryRequest(null,\n              new ModifiableSolrParams().add(\"toyRegEx\", regex)));\n    }\n\n    final List<Replica> inputs = new ArrayList<>();\n    final List<Replica> expectedTransformed = new ArrayList<>();\n\n    final List<String> urls = createRandomUrls();\n    for (int ii=0; ii<urls.size(); ++ii) {\n\n      final String name = \"replica\"+(ii+1);\n      final String url = urls.get(ii);\n      final Map<String,Object> propMap = new HashMap<String,Object>();\n      propMap.put(\"base_url\", url);\n      propMap.put(\"core\", \"core1\");\n      propMap.put(\"node_name\", \"node1\");\n      propMap.put(\"type\", \"NRT\");\n      // a skeleton replica, good enough for this test's purposes\n      final Replica replica = new Replica(name, propMap,\"c1\",\"s1\");\n\n      inputs.add(replica);\n      if (url.matches(regex)) {\n        expectedTransformed.add(replica);\n      }\n    }\n\n    final List<Replica> actualTransformed = new ArrayList<>(inputs);\n    transformer.transform(actualTransformed);\n\n    assertEquals(expectedTransformed.size(), actualTransformed.size());\n    for (int ii=0; ii<expectedTransformed.size(); ++ii) {\n      assertEquals(\"mismatch for ii=\"+ii, expectedTransformed.get(ii), actualTransformed.get(ii));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTransform() throws Exception {\n\n    final String regex = \".*\" + random().nextInt(10) + \".*\";\n\n    final ReplicaListTransformer transformer;\n    if (random().nextBoolean()) {\n\n      transformer = new ToyMatchingReplicaListTransformer(regex);\n\n    } else {\n\n      transformer = new HttpShardHandlerFactory() {\n\n        @Override\n        protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req)\n        {\n          final SolrParams params = req.getParams();\n\n          if (params.getBool(\"toyNoTransform\", false)) {\n            return new ToyNoOpReplicaListTransformer();\n          }\n\n          final String regex = params.get(\"toyRegEx\");\n          if (regex != null) {\n            return new ToyMatchingReplicaListTransformer(regex);\n          }\n\n          return super.getReplicaListTransformer(req);\n        }\n\n      }.getReplicaListTransformer(\n          new LocalSolrQueryRequest(null,\n              new ModifiableSolrParams().add(\"toyRegEx\", regex)));\n    }\n\n    final List<Replica> inputs = new ArrayList<>();\n    final List<Replica> expectedTransformed = new ArrayList<>();\n\n    final List<String> urls = createRandomUrls();\n    for (int ii=0; ii<urls.size(); ++ii) {\n\n      final String name = \"replica\"+(ii+1);\n      final String url = urls.get(ii);\n      final Map<String,Object> propMap = new HashMap<String,Object>();\n      propMap.put(\"base_url\", url);\n      // a skeleton replica, good enough for this test's purposes\n      final Replica replica = new Replica(name, propMap,\"c1\",\"s1\");\n\n      inputs.add(replica);\n      if (url.matches(regex)) {\n        expectedTransformed.add(replica);\n      }\n    }\n\n    final List<Replica> actualTransformed = new ArrayList<>(inputs);\n    transformer.transform(actualTransformed);\n\n    assertEquals(expectedTransformed.size(), actualTransformed.size());\n    for (int ii=0; ii<expectedTransformed.size(); ++ii) {\n      assertEquals(\"mismatch for ii=\"+ii, expectedTransformed.get(ii), actualTransformed.get(ii));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bd42faf21dd7b59dc775c9426172e2b479925a1","date":1581531026,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/routing/ReplicaListTransformerTest#testTransform().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/routing/ReplicaListTransformerTest#testTransform().mjava","sourceNew":"  @Test\n  public void testTransform() throws Exception {\n\n    final String regex = \".*\" + random().nextInt(10) + \".*\";\n\n    final ReplicaListTransformer transformer;\n    if (random().nextBoolean()) {\n      log.info(\"Using ToyMatching Transfomer\");\n      transformer = new ToyMatchingReplicaListTransformer(regex);\n\n    } else {\n      log.info(\"Using conditional Transfomer\");\n      transformer = new HttpShardHandlerFactory() {\n\n        @Override\n        protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req)\n        {\n          final SolrParams params = req.getParams();\n\n          if (params.getBool(\"toyNoTransform\", false)) {\n            return new ToyNoOpReplicaListTransformer();\n          }\n\n          final String regex = params.get(\"toyRegEx\");\n          if (regex != null) {\n            return new ToyMatchingReplicaListTransformer(regex);\n          }\n\n          return super.getReplicaListTransformer(req);\n        }\n\n      }.getReplicaListTransformer(\n          new LocalSolrQueryRequest(null,\n              new ModifiableSolrParams().add(\"toyRegEx\", regex)));\n    }\n\n    final List<Replica> inputs = new ArrayList<>();\n    final List<Replica> expectedTransformed = new ArrayList<>();\n\n    final List<String> urls = createRandomUrls();\n    for (int ii=0; ii<urls.size(); ++ii) {\n\n      final String name = \"replica\"+(ii+1);\n      final String url = urls.get(ii);\n      final Map<String,Object> propMap = new HashMap<String,Object>();\n      propMap.put(\"base_url\", url);\n      propMap.put(\"core\", \"test_core\");\n      propMap.put(\"node_name\", \"test_node\");\n      propMap.put(\"type\", \"NRT\");\n      // a skeleton replica, good enough for this test's purposes\n      final Replica replica = new Replica(name, propMap,\"c1\",\"s1\");\n\n      inputs.add(replica);\n      final String coreUrl = replica.getCoreUrl();\n      if (coreUrl.matches(regex)) {\n        log.info(\"adding replica=[{}] to expected due to core url ({}) regex match on {} \",\n                 replica, coreUrl, regex);\n        expectedTransformed.add(replica);\n      } else {\n        log.info(\"NOT expecting replica=[{}] due to core url ({}) regex mismatch ({})\",\n                 replica, coreUrl, regex);\n      }\n      \n    }\n\n    final List<Replica> actualTransformed = new ArrayList<>(inputs);\n    transformer.transform(actualTransformed);\n\n    assertEquals(expectedTransformed, actualTransformed);\n  }\n\n","sourceOld":"  @Test\n  public void testTransform() throws Exception {\n\n    final String regex = \".*\" + random().nextInt(10) + \".*\";\n\n    final ReplicaListTransformer transformer;\n    if (random().nextBoolean()) {\n\n      transformer = new ToyMatchingReplicaListTransformer(regex);\n\n    } else {\n\n      transformer = new HttpShardHandlerFactory() {\n\n        @Override\n        protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req)\n        {\n          final SolrParams params = req.getParams();\n\n          if (params.getBool(\"toyNoTransform\", false)) {\n            return new ToyNoOpReplicaListTransformer();\n          }\n\n          final String regex = params.get(\"toyRegEx\");\n          if (regex != null) {\n            return new ToyMatchingReplicaListTransformer(regex);\n          }\n\n          return super.getReplicaListTransformer(req);\n        }\n\n      }.getReplicaListTransformer(\n          new LocalSolrQueryRequest(null,\n              new ModifiableSolrParams().add(\"toyRegEx\", regex)));\n    }\n\n    final List<Replica> inputs = new ArrayList<>();\n    final List<Replica> expectedTransformed = new ArrayList<>();\n\n    final List<String> urls = createRandomUrls();\n    for (int ii=0; ii<urls.size(); ++ii) {\n\n      final String name = \"replica\"+(ii+1);\n      final String url = urls.get(ii);\n      final Map<String,Object> propMap = new HashMap<String,Object>();\n      propMap.put(\"base_url\", url);\n      propMap.put(\"core\", \"core1\");\n      propMap.put(\"node_name\", \"node1\");\n      propMap.put(\"type\", \"NRT\");\n      // a skeleton replica, good enough for this test's purposes\n      final Replica replica = new Replica(name, propMap,\"c1\",\"s1\");\n\n      inputs.add(replica);\n      if (url.matches(regex)) {\n        expectedTransformed.add(replica);\n      }\n    }\n\n    final List<Replica> actualTransformed = new ArrayList<>(inputs);\n    transformer.transform(actualTransformed);\n\n    assertEquals(expectedTransformed.size(), actualTransformed.size());\n    for (int ii=0; ii<expectedTransformed.size(); ++ii) {\n      assertEquals(\"mismatch for ii=\"+ii, expectedTransformed.get(ii), actualTransformed.get(ii));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3aa683bba99315838c968fefedf3d74f44aa993":["833432c363468a5df50f87446a68015404b1fbcf","6681d02f2302c363be938426e68f8dfd090cc1bf"],"9bd42faf21dd7b59dc775c9426172e2b479925a1":["3ea07d22cef2406e950de111f8aa7bc2edb91d56"],"833432c363468a5df50f87446a68015404b1fbcf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3ea07d22cef2406e950de111f8aa7bc2edb91d56":["6681d02f2302c363be938426e68f8dfd090cc1bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9bd42faf21dd7b59dc775c9426172e2b479925a1"],"6681d02f2302c363be938426e68f8dfd090cc1bf":["833432c363468a5df50f87446a68015404b1fbcf"]},"commit2Childs":{"d3aa683bba99315838c968fefedf3d74f44aa993":[],"833432c363468a5df50f87446a68015404b1fbcf":["d3aa683bba99315838c968fefedf3d74f44aa993","6681d02f2302c363be938426e68f8dfd090cc1bf"],"9bd42faf21dd7b59dc775c9426172e2b479925a1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["833432c363468a5df50f87446a68015404b1fbcf"],"3ea07d22cef2406e950de111f8aa7bc2edb91d56":["9bd42faf21dd7b59dc775c9426172e2b479925a1"],"6681d02f2302c363be938426e68f8dfd090cc1bf":["d3aa683bba99315838c968fefedf3d74f44aa993","3ea07d22cef2406e950de111f8aa7bc2edb91d56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3aa683bba99315838c968fefedf3d74f44aa993","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}