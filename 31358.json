{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testTaskTimeout().mjava","commits":[{"id":"39561034e67ea008831f095a2f7be7fcdbd37f53","date":1570744746,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testTaskTimeout().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testTaskTimeout() throws Exception  {\n    int DELAY = 2000;\n    boolean taskTimeoutFail = random().nextBoolean();\n    TestInjection.delayInExecutePlanAction = DELAY;\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String triggerName = \"node_lost_trigger2\";\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : '\" + triggerName + \"',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction', 'taskTimeoutSeconds' : '1','taskTimeoutFail':'\" + taskTimeoutFail + \"'},\" +\n        \"{'name':'finish','class':'\" + FinishAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionName = \"testTaskTimeout\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    cluster.waitForActiveCollection(collectionName, 1, 2);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    JettySolrRunner sourceNode = cluster.getRandomJetty(random());\n\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner runner = cluster.getJettySolrRunner(i);\n      if (runner == sourceNode) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n      }\n    }\n\n    boolean await = finishedProcessing.await(DELAY * 5, TimeUnit.MILLISECONDS);\n    if (taskTimeoutFail) {\n      assertFalse(\"finished processing event but should fail\", await);\n    } else {\n      assertTrue(\"did not finish processing event in time\", await);\n    }\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + triggerName + \"/execute_plan\";\n    assertTrue(path + \" does not exist\", zkClient().exists(path, true));\n    List<String> requests = zkClient().getChildren(path, null, true);\n    assertFalse(\"some requests should be still present\", requests.isEmpty());\n\n    // in either case the task will complete and move the replica as needed\n    waitForState(\"Timed out waiting for replicas of collection to be 2 again\",\n        collectionName, clusterShape(1, 2));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testTaskTimeout().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testTaskTimeout() throws Exception  {\n    int DELAY = 2000;\n    boolean taskTimeoutFail = random().nextBoolean();\n    TestInjection.delayInExecutePlanAction = DELAY;\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String triggerName = \"node_lost_trigger2\";\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : '\" + triggerName + \"',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction', 'taskTimeoutSeconds' : '1','taskTimeoutFail':'\" + taskTimeoutFail + \"'},\" +\n        \"{'name':'finish','class':'\" + FinishAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionName = \"testTaskTimeout\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    cluster.waitForActiveCollection(collectionName, 1, 2);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    JettySolrRunner sourceNode = cluster.getRandomJetty(random());\n\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner runner = cluster.getJettySolrRunner(i);\n      if (runner == sourceNode) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n      }\n    }\n\n    boolean await = finishedProcessing.await(DELAY * 5, TimeUnit.MILLISECONDS);\n    if (taskTimeoutFail) {\n      assertFalse(\"finished processing event but should fail\", await);\n    } else {\n      assertTrue(\"did not finish processing event in time\", await);\n    }\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + triggerName + \"/execute_plan\";\n    assertTrue(path + \" does not exist\", zkClient().exists(path, true));\n    List<String> requests = zkClient().getChildren(path, null, true);\n    assertFalse(\"some requests should be still present\", requests.isEmpty());\n\n    // in either case the task will complete and move the replica as needed\n    waitForState(\"Timed out waiting for replicas of collection to be 2 again\",\n        collectionName, clusterShape(1, 2));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testTaskTimeout().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testTaskTimeout().mjava","sourceNew":"  @Test\n  public void testTaskTimeout() throws Exception  {\n    int DELAY = 2000;\n    boolean taskTimeoutFail = random().nextBoolean();\n    TestInjection.delayInExecutePlanAction = DELAY;\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String triggerName = \"node_lost_trigger2\";\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : '\" + triggerName + \"',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction', 'taskTimeoutSeconds' : '1','taskTimeoutFail':'\" + taskTimeoutFail + \"'},\" +\n        \"{'name':'finish','class':'\" + FinishAction.class.getName() + \"'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionName = \"testTaskTimeout\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    cluster.waitForActiveCollection(collectionName, 1, 2);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    JettySolrRunner sourceNode = cluster.getRandomJetty(random());\n\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner runner = cluster.getJettySolrRunner(i);\n      if (runner == sourceNode) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n      }\n    }\n\n    boolean await = finishedProcessing.await(DELAY * 5, TimeUnit.MILLISECONDS);\n    if (taskTimeoutFail) {\n      assertFalse(\"finished processing event but should fail\", await);\n    } else {\n      assertTrue(\"did not finish processing event in time\", await);\n    }\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + triggerName + \"/execute_plan\";\n    assertTrue(path + \" does not exist\", zkClient().exists(path, true));\n    List<String> requests = zkClient().getChildren(path, null, true);\n    assertFalse(\"some requests should be still present\", requests.isEmpty());\n\n    // in either case the task will complete and move the replica as needed\n    waitForState(\"Timed out waiting for replicas of collection to be 2 again\",\n        collectionName, clusterShape(1, 2));\n  }\n\n","sourceOld":"  @Test\n  public void testTaskTimeout() throws Exception  {\n    int DELAY = 2000;\n    boolean taskTimeoutFail = random().nextBoolean();\n    TestInjection.delayInExecutePlanAction = DELAY;\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String triggerName = \"node_lost_trigger2\";\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : '\" + triggerName + \"',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction', 'taskTimeoutSeconds' : '1','taskTimeoutFail':'\" + taskTimeoutFail + \"'},\" +\n        \"{'name':'finish','class':'\" + FinishAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionName = \"testTaskTimeout\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    cluster.waitForActiveCollection(collectionName, 1, 2);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    JettySolrRunner sourceNode = cluster.getRandomJetty(random());\n\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner runner = cluster.getJettySolrRunner(i);\n      if (runner == sourceNode) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n      }\n    }\n\n    boolean await = finishedProcessing.await(DELAY * 5, TimeUnit.MILLISECONDS);\n    if (taskTimeoutFail) {\n      assertFalse(\"finished processing event but should fail\", await);\n    } else {\n      assertTrue(\"did not finish processing event in time\", await);\n    }\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + triggerName + \"/execute_plan\";\n    assertTrue(path + \" does not exist\", zkClient().exists(path, true));\n    List<String> requests = zkClient().getChildren(path, null, true);\n    assertFalse(\"some requests should be still present\", requests.isEmpty());\n\n    // in either case the task will complete and move the replica as needed\n    waitForState(\"Timed out waiting for replicas of collection to be 2 again\",\n        collectionName, clusterShape(1, 2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testTaskTimeout().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testTaskTimeout().mjava","sourceNew":"  @Test\n  public void testTaskTimeout() throws Exception  {\n    int DELAY = 2000;\n    boolean taskTimeoutFail = random().nextBoolean();\n    TestInjection.delayInExecutePlanAction = DELAY;\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String triggerName = \"node_lost_trigger2\";\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : '\" + triggerName + \"',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction', 'taskTimeoutSeconds' : '1','taskTimeoutFail':'\" + taskTimeoutFail + \"'},\" +\n        \"{'name':'finish','class':'\" + FinishAction.class.getName() + \"'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionName = \"testTaskTimeout\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n\n    cluster.waitForActiveCollection(collectionName, 1, 2);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    JettySolrRunner sourceNode = cluster.getRandomJetty(random());\n\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner runner = cluster.getJettySolrRunner(i);\n      if (runner == sourceNode) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n      }\n    }\n\n    boolean await = finishedProcessing.await(DELAY * 5, TimeUnit.MILLISECONDS);\n    if (taskTimeoutFail) {\n      assertFalse(\"finished processing event but should fail\", await);\n    } else {\n      assertTrue(\"did not finish processing event in time\", await);\n    }\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + triggerName + \"/execute_plan\";\n    assertTrue(path + \" does not exist\", zkClient().exists(path, true));\n    List<String> requests = zkClient().getChildren(path, null, true);\n    assertFalse(\"some requests should be still present\", requests.isEmpty());\n\n    // in either case the task will complete and move the replica as needed\n    waitForState(\"Timed out waiting for replicas of collection to be 2 again\",\n        collectionName, clusterShape(1, 2));\n  }\n\n","sourceOld":"  @Test\n  public void testTaskTimeout() throws Exception  {\n    int DELAY = 2000;\n    boolean taskTimeoutFail = random().nextBoolean();\n    TestInjection.delayInExecutePlanAction = DELAY;\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String triggerName = \"node_lost_trigger2\";\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : '\" + triggerName + \"',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction', 'taskTimeoutSeconds' : '1','taskTimeoutFail':'\" + taskTimeoutFail + \"'},\" +\n        \"{'name':'finish','class':'\" + FinishAction.class.getName() + \"'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionName = \"testTaskTimeout\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    cluster.waitForActiveCollection(collectionName, 1, 2);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    JettySolrRunner sourceNode = cluster.getRandomJetty(random());\n\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner runner = cluster.getJettySolrRunner(i);\n      if (runner == sourceNode) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n      }\n    }\n\n    boolean await = finishedProcessing.await(DELAY * 5, TimeUnit.MILLISECONDS);\n    if (taskTimeoutFail) {\n      assertFalse(\"finished processing event but should fail\", await);\n    } else {\n      assertTrue(\"did not finish processing event in time\", await);\n    }\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + triggerName + \"/execute_plan\";\n    assertTrue(path + \" does not exist\", zkClient().exists(path, true));\n    List<String> requests = zkClient().getChildren(path, null, true);\n    assertFalse(\"some requests should be still present\", requests.isEmpty());\n\n    // in either case the task will complete and move the replica as needed\n    waitForState(\"Timed out waiting for replicas of collection to be 2 again\",\n        collectionName, clusterShape(1, 2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testTaskTimeout().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testTaskTimeout() throws Exception  {\n    int DELAY = 2000;\n    boolean taskTimeoutFail = random().nextBoolean();\n    TestInjection.delayInExecutePlanAction = DELAY;\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String triggerName = \"node_lost_trigger2\";\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : '\" + triggerName + \"',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction', 'taskTimeoutSeconds' : '1','taskTimeoutFail':'\" + taskTimeoutFail + \"'},\" +\n        \"{'name':'finish','class':'\" + FinishAction.class.getName() + \"'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionName = \"testTaskTimeout\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n\n    cluster.waitForActiveCollection(collectionName, 1, 2);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    JettySolrRunner sourceNode = cluster.getRandomJetty(random());\n\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner runner = cluster.getJettySolrRunner(i);\n      if (runner == sourceNode) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n      }\n    }\n\n    boolean await = finishedProcessing.await(DELAY * 5, TimeUnit.MILLISECONDS);\n    if (taskTimeoutFail) {\n      assertFalse(\"finished processing event but should fail\", await);\n    } else {\n      assertTrue(\"did not finish processing event in time\", await);\n    }\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + triggerName + \"/execute_plan\";\n    assertTrue(path + \" does not exist\", zkClient().exists(path, true));\n    List<String> requests = zkClient().getChildren(path, null, true);\n    assertFalse(\"some requests should be still present\", requests.isEmpty());\n\n    // in either case the task will complete and move the replica as needed\n    waitForState(\"Timed out waiting for replicas of collection to be 2 again\",\n        collectionName, clusterShape(1, 2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["39561034e67ea008831f095a2f7be7fcdbd37f53"],"39561034e67ea008831f095a2f7be7fcdbd37f53":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","39561034e67ea008831f095a2f7be7fcdbd37f53"]},"commit2Childs":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"39561034e67ea008831f095a2f7be7fcdbd37f53":["aa2585c33d5d66a1c837c312221eb55ddb3c4300","b0b597c65628ca9e73913a07e81691f8229bae35"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["39561034e67ea008831f095a2f7be7fcdbd37f53","b0b597c65628ca9e73913a07e81691f8229bae35"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}