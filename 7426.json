{"path":"src/webapp/src/org/apache/solr/servlet/SolrUpdateServlet#doPost(HttpServletRequest,HttpServletResponse).mjava","commits":[{"id":"cbe98c74fdb9ed434e14c3d856735ab5c437c936","date":1144423212,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/SolrUpdateServlet#doPost(HttpServletRequest,HttpServletResponse).mjava","pathOld":"/dev/null","sourceNew":"  public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n    BufferedReader requestReader = request.getReader();\r\n    response.setContentType(CONTENT_TYPE);\r\n    PrintWriter responseWriter = response.getWriter();\r\n    core.update(requestReader, responseWriter);\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c0e301b711811c6aaee90440cc1a7925fdd1a1e","date":1153259525,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/SolrUpdateServlet#doPost(HttpServletRequest,HttpServletResponse).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/SolrUpdateServlet#doPost(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    BufferedReader requestReader = request.getReader();\n    response.setContentType(CONTENT_TYPE);\n    PrintWriter responseWriter = response.getWriter();\n    core.update(requestReader, responseWriter);\n  }\n\n","sourceOld":"  public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n    BufferedReader requestReader = request.getReader();\r\n    response.setContentType(CONTENT_TYPE);\r\n    PrintWriter responseWriter = response.getWriter();\r\n    core.update(requestReader, responseWriter);\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05bdeda94e7280068214ad7e5d15c18cf0191b92","date":1153334896,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/SolrUpdateServlet#doPost(HttpServletRequest,HttpServletResponse).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/SolrUpdateServlet#doPost(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    BufferedReader requestReader = request.getReader();\n    response.setContentType(QueryResponseWriter.CONTENT_TYPE_XML_UTF8);\n    PrintWriter responseWriter = response.getWriter();\n    core.update(requestReader, responseWriter);\n  }\n\n","sourceOld":"  public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    BufferedReader requestReader = request.getReader();\n    response.setContentType(CONTENT_TYPE);\n    PrintWriter responseWriter = response.getWriter();\n    core.update(requestReader, responseWriter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d80013b5e260def972025c93a0b08524f9c38f49","date":1170102801,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/SolrUpdateServlet#doPost(HttpServletRequest,HttpServletResponse).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/SolrUpdateServlet#doPost(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    BufferedReader requestReader = request.getReader();\n    response.setContentType(QueryResponseWriter.CONTENT_TYPE_XML_UTF8);\n\n    PrintWriter writer = response.getWriter();\n    legacyUpdateHandler.doLegacyUpdate(requestReader, writer);\n  }\n\n","sourceOld":"  public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    BufferedReader requestReader = request.getReader();\n    response.setContentType(QueryResponseWriter.CONTENT_TYPE_XML_UTF8);\n    PrintWriter responseWriter = response.getWriter();\n    core.update(requestReader, responseWriter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d6338c87060be5f66757a94945975f3bbd377a9","date":1189278234,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/SolrUpdateServlet#doPost(HttpServletRequest,HttpServletResponse).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/SolrUpdateServlet#doPost(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    BufferedReader requestReader = request.getReader();\n    response.setContentType(QueryResponseWriter.CONTENT_TYPE_XML_UTF8);\n\n    SolrCore core = SolrCore.getSolrCore();\n    PrintWriter writer = response.getWriter();\n    legacyUpdateHandler.doLegacyUpdate(core,requestReader, writer);\n  }\n\n","sourceOld":"  public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    BufferedReader requestReader = request.getReader();\n    response.setContentType(QueryResponseWriter.CONTENT_TYPE_XML_UTF8);\n\n    PrintWriter writer = response.getWriter();\n    legacyUpdateHandler.doLegacyUpdate(requestReader, writer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abbfb3ad1f90df8ebf4751c8e72b2756ace50699","date":1190497478,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/SolrUpdateServlet#doPost(HttpServletRequest,HttpServletResponse).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/SolrUpdateServlet#doPost(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  @Override\n  public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    BufferedReader requestReader = request.getReader();\n    response.setContentType(QueryResponseWriter.CONTENT_TYPE_XML_UTF8);\n\n    PrintWriter writer = response.getWriter();\n    legacyUpdateHandler.doLegacyUpdate(requestReader, writer);\n  }\n\n","sourceOld":"  public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    BufferedReader requestReader = request.getReader();\n    response.setContentType(QueryResponseWriter.CONTENT_TYPE_XML_UTF8);\n\n    SolrCore core = SolrCore.getSolrCore();\n    PrintWriter writer = response.getWriter();\n    legacyUpdateHandler.doLegacyUpdate(core,requestReader, writer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9838cf6df347ac0ac7befce8a404807ddfa9f701","date":1200592896,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/SolrUpdateServlet#doPost(HttpServletRequest,HttpServletResponse).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/SolrUpdateServlet#doPost(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  @Override\n  public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    BufferedReader requestReader = request.getReader();\n    response.setContentType(QueryResponseWriter.CONTENT_TYPE_XML_UTF8);\n\n    if( request.getQueryString() != null ) {\n      log.warning( \n          \"The @Deprecated SolrUpdateServlet does not accept query parameters: \"+request.getQueryString()+\"\\n\"\n          +\"  If you are using solrj, make sure to register a request handler to /update rather then use this servlet.\\n\"\n          +\"  Add: <requestHandler name=\\\"/update\\\" class=\\\"solr.XmlUpdateRequestHandler\\\" > to your solrconfig.xml\\n\\n\" );\n    }\n    PrintWriter writer = response.getWriter();\n    legacyUpdateHandler.doLegacyUpdate(requestReader, writer);\n  }\n\n","sourceOld":"  @Override\n  public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    BufferedReader requestReader = request.getReader();\n    response.setContentType(QueryResponseWriter.CONTENT_TYPE_XML_UTF8);\n\n    PrintWriter writer = response.getWriter();\n    legacyUpdateHandler.doLegacyUpdate(requestReader, writer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e864d6c9a08b78e25cb2a239775a1213b0d0c410","date":1218655599,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/SolrUpdateServlet#doPost(HttpServletRequest,HttpServletResponse).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/SolrUpdateServlet#doPost(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  @Override\n  public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    if( hasMulticore ) {\n      response.sendError( 400, \"Missing solr core name in path\" );\n      return;\n    }\n    BufferedReader requestReader = request.getReader();\n    response.setContentType(QueryResponseWriter.CONTENT_TYPE_XML_UTF8);\n\n    if( request.getQueryString() != null ) {\n      log.warning( \n          \"The @Deprecated SolrUpdateServlet does not accept query parameters: \"+request.getQueryString()+\"\\n\"\n          +\"  If you are using solrj, make sure to register a request handler to /update rather then use this servlet.\\n\"\n          +\"  Add: <requestHandler name=\\\"/update\\\" class=\\\"solr.XmlUpdateRequestHandler\\\" > to your solrconfig.xml\\n\\n\" );\n    }\n    PrintWriter writer = response.getWriter();\n    legacyUpdateHandler.doLegacyUpdate(requestReader, writer);\n  }\n\n","sourceOld":"  @Override\n  public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    BufferedReader requestReader = request.getReader();\n    response.setContentType(QueryResponseWriter.CONTENT_TYPE_XML_UTF8);\n\n    if( request.getQueryString() != null ) {\n      log.warning( \n          \"The @Deprecated SolrUpdateServlet does not accept query parameters: \"+request.getQueryString()+\"\\n\"\n          +\"  If you are using solrj, make sure to register a request handler to /update rather then use this servlet.\\n\"\n          +\"  Add: <requestHandler name=\\\"/update\\\" class=\\\"solr.XmlUpdateRequestHandler\\\" > to your solrconfig.xml\\n\\n\" );\n    }\n    PrintWriter writer = response.getWriter();\n    legacyUpdateHandler.doLegacyUpdate(requestReader, writer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00da8b51bdeae168a5b26ec506db372b219ca7a2","date":1221704186,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/SolrUpdateServlet#doPost(HttpServletRequest,HttpServletResponse).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/SolrUpdateServlet#doPost(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  @Override\n  public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    if( hasMulticore ) {\n      response.sendError( 400, \"Missing solr core name in path\" );\n      return;\n    }\n    BufferedReader requestReader = request.getReader();\n    response.setContentType(QueryResponseWriter.CONTENT_TYPE_XML_UTF8);\n\n    if( request.getQueryString() != null ) {\n      log.warn( \n          \"The @Deprecated SolrUpdateServlet does not accept query parameters: \"+request.getQueryString()+\"\\n\"\n          +\"  If you are using solrj, make sure to register a request handler to /update rather then use this servlet.\\n\"\n          +\"  Add: <requestHandler name=\\\"/update\\\" class=\\\"solr.XmlUpdateRequestHandler\\\" > to your solrconfig.xml\\n\\n\" );\n    }\n    PrintWriter writer = response.getWriter();\n    legacyUpdateHandler.doLegacyUpdate(requestReader, writer);\n  }\n\n","sourceOld":"  @Override\n  public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    if( hasMulticore ) {\n      response.sendError( 400, \"Missing solr core name in path\" );\n      return;\n    }\n    BufferedReader requestReader = request.getReader();\n    response.setContentType(QueryResponseWriter.CONTENT_TYPE_XML_UTF8);\n\n    if( request.getQueryString() != null ) {\n      log.warning( \n          \"The @Deprecated SolrUpdateServlet does not accept query parameters: \"+request.getQueryString()+\"\\n\"\n          +\"  If you are using solrj, make sure to register a request handler to /update rather then use this servlet.\\n\"\n          +\"  Add: <requestHandler name=\\\"/update\\\" class=\\\"solr.XmlUpdateRequestHandler\\\" > to your solrconfig.xml\\n\\n\" );\n    }\n    PrintWriter writer = response.getWriter();\n    legacyUpdateHandler.doLegacyUpdate(requestReader, writer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/webapp/src/org/apache/solr/servlet/SolrUpdateServlet#doPost(HttpServletRequest,HttpServletResponse).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/SolrUpdateServlet#doPost(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  @Override\n  public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    if( hasMulticore ) {\n      response.sendError( 400, \"Missing solr core name in path\" );\n      return;\n    }\n    BufferedReader requestReader = request.getReader();\n    response.setContentType(QueryResponseWriter.CONTENT_TYPE_XML_UTF8);\n\n    if( request.getQueryString() != null ) {\n      log.warn( \n          \"The @Deprecated SolrUpdateServlet does not accept query parameters: \"+request.getQueryString()+\"\\n\"\n          +\"  If you are using solrj, make sure to register a request handler to /update rather then use this servlet.\\n\"\n          +\"  Add: <requestHandler name=\\\"/update\\\" class=\\\"solr.XmlUpdateRequestHandler\\\" > to your solrconfig.xml\\n\\n\" );\n    }\n    PrintWriter writer = response.getWriter();\n    legacyUpdateHandler.doLegacyUpdate(requestReader, writer);\n  }\n\n","sourceOld":"  @Override\n  public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    if( hasMulticore ) {\n      response.sendError( 400, \"Missing solr core name in path\" );\n      return;\n    }\n    BufferedReader requestReader = request.getReader();\n    response.setContentType(QueryResponseWriter.CONTENT_TYPE_XML_UTF8);\n\n    if( request.getQueryString() != null ) {\n      log.warn( \n          \"The @Deprecated SolrUpdateServlet does not accept query parameters: \"+request.getQueryString()+\"\\n\"\n          +\"  If you are using solrj, make sure to register a request handler to /update rather then use this servlet.\\n\"\n          +\"  Add: <requestHandler name=\\\"/update\\\" class=\\\"solr.XmlUpdateRequestHandler\\\" > to your solrconfig.xml\\n\\n\" );\n    }\n    PrintWriter writer = response.getWriter();\n    legacyUpdateHandler.doLegacyUpdate(requestReader, writer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6d6338c87060be5f66757a94945975f3bbd377a9":["d80013b5e260def972025c93a0b08524f9c38f49"],"e864d6c9a08b78e25cb2a239775a1213b0d0c410":["9838cf6df347ac0ac7befce8a404807ddfa9f701"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"abbfb3ad1f90df8ebf4751c8e72b2756ace50699":["6d6338c87060be5f66757a94945975f3bbd377a9"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["e864d6c9a08b78e25cb2a239775a1213b0d0c410"],"d80013b5e260def972025c93a0b08524f9c38f49":["05bdeda94e7280068214ad7e5d15c18cf0191b92"],"0c0e301b711811c6aaee90440cc1a7925fdd1a1e":["cbe98c74fdb9ed434e14c3d856735ab5c437c936"],"05bdeda94e7280068214ad7e5d15c18cf0191b92":["0c0e301b711811c6aaee90440cc1a7925fdd1a1e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cbe98c74fdb9ed434e14c3d856735ab5c437c936":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"9838cf6df347ac0ac7befce8a404807ddfa9f701":["abbfb3ad1f90df8ebf4751c8e72b2756ace50699"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6d6338c87060be5f66757a94945975f3bbd377a9":["abbfb3ad1f90df8ebf4751c8e72b2756ace50699"],"e864d6c9a08b78e25cb2a239775a1213b0d0c410":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["cbe98c74fdb9ed434e14c3d856735ab5c437c936"],"abbfb3ad1f90df8ebf4751c8e72b2756ace50699":["9838cf6df347ac0ac7befce8a404807ddfa9f701"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["ad94625fb8d088209f46650c8097196fec67f00c"],"d80013b5e260def972025c93a0b08524f9c38f49":["6d6338c87060be5f66757a94945975f3bbd377a9"],"0c0e301b711811c6aaee90440cc1a7925fdd1a1e":["05bdeda94e7280068214ad7e5d15c18cf0191b92"],"05bdeda94e7280068214ad7e5d15c18cf0191b92":["d80013b5e260def972025c93a0b08524f9c38f49"],"cbe98c74fdb9ed434e14c3d856735ab5c437c936":["0c0e301b711811c6aaee90440cc1a7925fdd1a1e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"9838cf6df347ac0ac7befce8a404807ddfa9f701":["e864d6c9a08b78e25cb2a239775a1213b0d0c410"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}