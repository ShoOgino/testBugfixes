{"path":"solr/core/src/java/org/apache/solr/search/CaffeineCache#setMaxRamMB(int).mjava","commits":[{"id":"87f0484c38f986062889ed50f3bf3bd462848c26","date":1570108628,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CaffeineCache#setMaxRamMB(int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void setMaxRamMB(int maxRamMB) {\n    long newMaxRamBytes = maxRamMB < 0 ? Long.MAX_VALUE : maxRamMB * 1024L * 1024L;\n    if (newMaxRamBytes != maxRamBytes) {\n      maxRamBytes = newMaxRamBytes;\n      Optional<Eviction<K, V>> evictionOpt = cache.policy().eviction();\n      if (evictionOpt.isPresent()) {\n        Eviction<K, V> eviction = evictionOpt.get();\n        if (!eviction.isWeighted()) {\n          // rebuild cache using weigher\n          cache = buildCache(cache);\n          return;\n        } else if (maxRamBytes == Long.MAX_VALUE) {\n          // rebuild cache using maxSize\n          cache = buildCache(cache);\n          return;\n        }\n        eviction.setMaximum(newMaxRamBytes);\n        description = generateDescription(this.maxSize, initialSize);\n        cache.cleanUp();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/CaffeineCache#setMaxRamMB(int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void setMaxRamMB(int maxRamMB) {\n    long newMaxRamBytes = maxRamMB < 0 ? Long.MAX_VALUE : maxRamMB * 1024L * 1024L;\n    if (newMaxRamBytes != maxRamBytes) {\n      maxRamBytes = newMaxRamBytes;\n      Optional<Eviction<K, V>> evictionOpt = cache.policy().eviction();\n      if (evictionOpt.isPresent()) {\n        Eviction<K, V> eviction = evictionOpt.get();\n        if (!eviction.isWeighted()) {\n          // rebuild cache using weigher\n          cache = buildCache(cache);\n          return;\n        } else if (maxRamBytes == Long.MAX_VALUE) {\n          // rebuild cache using maxSize\n          cache = buildCache(cache);\n          return;\n        }\n        eviction.setMaximum(newMaxRamBytes);\n        description = generateDescription(this.maxSize, initialSize);\n        cache.cleanUp();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"87f0484c38f986062889ed50f3bf3bd462848c26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["87f0484c38f986062889ed50f3bf3bd462848c26"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","87f0484c38f986062889ed50f3bf3bd462848c26"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["87f0484c38f986062889ed50f3bf3bd462848c26","b0b597c65628ca9e73913a07e81691f8229bae35"],"87f0484c38f986062889ed50f3bf3bd462848c26":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}