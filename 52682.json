{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#read().mjava","commits":[{"id":"c533b201163bd7b15aa8881f922f9289a7668187","date":1452268593,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#read().mjava","pathOld":"/dev/null","sourceNew":"  public Tuple read() throws IOException {\n    \n    try{\n      Map<Object,Object> fields = new HashMap<Object,Object>();\n      if(resultSet.next()){\n        // we have a record\n        for(ResultSetValueSelector selector : valueSelectors){\n          fields.put(selector.getColumnName(), selector.selectValue(resultSet));\n        }\n      }\n      else{\n        // we do not have a record\n        fields.put(\"EOF\", true);\n      }\n      \n      return new Tuple(fields);\n    }\n    catch(SQLException e){\n      throw new IOException(String.format(Locale.ROOT, \"Failed to read next record with error '%s'\", e.getMessage()), e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb7c01f80e536140839f2b15359fe04106b0eced","date":1479265585,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#read().mjava","sourceNew":"  public Tuple read() throws IOException {\n    \n    try{\n      Map<Object,Object> fields = new HashMap<>();\n      if(resultSet.next()){\n        // we have a record\n        for(ResultSetValueSelector selector : valueSelectors){\n          fields.put(selector.getColumnName(), selector.selectValue(resultSet));\n        }\n      }\n      else{\n        // we do not have a record\n        fields.put(\"EOF\", true);\n      }\n      \n      return new Tuple(fields);\n    }\n    catch(SQLException e){\n      throw new IOException(String.format(Locale.ROOT, \"Failed to read next record with error '%s'\", e.getMessage()), e);\n    }\n  }\n\n","sourceOld":"  public Tuple read() throws IOException {\n    \n    try{\n      Map<Object,Object> fields = new HashMap<Object,Object>();\n      if(resultSet.next()){\n        // we have a record\n        for(ResultSetValueSelector selector : valueSelectors){\n          fields.put(selector.getColumnName(), selector.selectValue(resultSet));\n        }\n      }\n      else{\n        // we do not have a record\n        fields.put(\"EOF\", true);\n      }\n      \n      return new Tuple(fields);\n    }\n    catch(SQLException e){\n      throw new IOException(String.format(Locale.ROOT, \"Failed to read next record with error '%s'\", e.getMessage()), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#read().mjava","sourceNew":"  public Tuple read() throws IOException {\n    \n    try{\n      Map<Object,Object> fields = new HashMap<>();\n      if(resultSet.next()){\n        // we have a record\n        for(ResultSetValueSelector selector : valueSelectors){\n          fields.put(selector.getColumnName(), selector.selectValue(resultSet));\n        }\n      }\n      else{\n        // we do not have a record\n        fields.put(\"EOF\", true);\n      }\n      \n      return new Tuple(fields);\n    }\n    catch(SQLException e){\n      throw new IOException(String.format(Locale.ROOT, \"Failed to read next record with error '%s'\", e.getMessage()), e);\n    }\n  }\n\n","sourceOld":"  public Tuple read() throws IOException {\n    \n    try{\n      Map<Object,Object> fields = new HashMap<Object,Object>();\n      if(resultSet.next()){\n        // we have a record\n        for(ResultSetValueSelector selector : valueSelectors){\n          fields.put(selector.getColumnName(), selector.selectValue(resultSet));\n        }\n      }\n      else{\n        // we do not have a record\n        fields.put(\"EOF\", true);\n      }\n      \n      return new Tuple(fields);\n    }\n    catch(SQLException e){\n      throw new IOException(String.format(Locale.ROOT, \"Failed to read next record with error '%s'\", e.getMessage()), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"804a8d5358fe7b7563b85ee7838714d720b89272","date":1591624987,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#read().mjava","sourceNew":"  public Tuple read() throws IOException {\n    \n    try {\n      Tuple tuple = new Tuple();\n      if (resultSet.next()) {\n        // we have a record\n        for (ResultSetValueSelector selector : valueSelectors) {\n          tuple.put(selector.getColumnName(), selector.selectValue(resultSet));\n        }\n      } else {\n        // we do not have a record\n        tuple.put(StreamParams.EOF, true);\n      }\n      \n      return tuple;\n    } catch (SQLException e) {\n      throw new IOException(String.format(Locale.ROOT, \"Failed to read next record with error '%s'\", e.getMessage()), e);\n    }\n  }\n\n","sourceOld":"  public Tuple read() throws IOException {\n    \n    try{\n      Map<Object,Object> fields = new HashMap<>();\n      if(resultSet.next()){\n        // we have a record\n        for(ResultSetValueSelector selector : valueSelectors){\n          fields.put(selector.getColumnName(), selector.selectValue(resultSet));\n        }\n      }\n      else{\n        // we do not have a record\n        fields.put(\"EOF\", true);\n      }\n      \n      return new Tuple(fields);\n    }\n    catch(SQLException e){\n      throw new IOException(String.format(Locale.ROOT, \"Failed to read next record with error '%s'\", e.getMessage()), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb7c01f80e536140839f2b15359fe04106b0eced":["c533b201163bd7b15aa8881f922f9289a7668187"],"c533b201163bd7b15aa8881f922f9289a7668187":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["c533b201163bd7b15aa8881f922f9289a7668187","bb7c01f80e536140839f2b15359fe04106b0eced"],"804a8d5358fe7b7563b85ee7838714d720b89272":["bb7c01f80e536140839f2b15359fe04106b0eced"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["804a8d5358fe7b7563b85ee7838714d720b89272"]},"commit2Childs":{"bb7c01f80e536140839f2b15359fe04106b0eced":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","804a8d5358fe7b7563b85ee7838714d720b89272"],"c533b201163bd7b15aa8881f922f9289a7668187":["bb7c01f80e536140839f2b15359fe04106b0eced","a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c533b201163bd7b15aa8881f922f9289a7668187"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"804a8d5358fe7b7563b85ee7838714d720b89272":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}