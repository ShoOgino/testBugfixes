{"path":"solr/core/src/java/org/apache/solr/cloud/Overseer.ExclusiveSliceProperty#collectCurrentPropStats().mjava","commits":[{"id":"64707d25b6352cf02909d3916038a3b3cec7f0a8","date":1412782122,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ExclusiveSliceProperty#collectCurrentPropStats().mjava","pathOld":"/dev/null","sourceNew":"    private boolean collectCurrentPropStats() {\n      int maxAssigned = 0;\n      // Get a list of potential replicas that can host the property _and_ their counts\n      // Move any obvious entries to a list of replicas to change the property on\n      Set<String> allHosts = new HashSet<>();\n      for (Slice slice : collection.getSlices()) {\n        boolean sliceHasProp = false;\n        for (Replica replica : slice.getReplicas()) {\n          if (onlyActiveNodes && isActive(replica) == false) {\n            if (StringUtils.isNotBlank(replica.getStr(property))) {\n              removeProp(slice, replica.getName()); // Note, we won't be committing this to ZK until later.\n            }\n            continue;\n          }\n          allHosts.add(replica.getNodeName());\n          String nodeName = replica.getNodeName();\n          if (StringUtils.isNotBlank(replica.getStr(property))) {\n            if (sliceHasProp) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"'\" + BALANCESLICEUNIQUE + \"' should only be called for properties that have at most one member \" +\n                      \"in any slice with the property set. No action taken.\");\n            }\n            if (nodesHostingProp.containsKey(nodeName) == false) {\n              nodesHostingProp.put(nodeName, new ArrayList<SliceReplica>());\n            }\n            nodesHostingProp.get(nodeName).add(new SliceReplica(slice, replica));\n            ++assigned;\n            maxAssigned = Math.max(maxAssigned, nodesHostingProp.get(nodeName).size());\n            sliceHasProp = true;\n          }\n          if (nodesHostingReplicas.containsKey(nodeName) == false) {\n            nodesHostingReplicas.put(nodeName, new ArrayList<SliceReplica>());\n          }\n          nodesHostingReplicas.get(nodeName).add(new SliceReplica(slice, replica));\n        }\n      }\n\n      // If the total number of already-hosted properties assigned to nodes\n      // that have potential to host leaders is equal to the slice count _AND_ none of the current nodes has more than\n      // the max number of properties, there's nothing to do.\n      origMaxPropPerNode = collection.getSlices().size() / allHosts.size();\n\n      // Some nodes can have one more of the proeprty if the numbers aren't exactly even.\n      origModulo = collection.getSlices().size() % allHosts.size();\n      if (origModulo > 0) {\n        origMaxPropPerNode++;  // have to have some nodes with 1 more property.\n      }\n\n      // We can say for sure that we need to rebalance if we don't have as many assigned properties as slices.\n      if (assigned != collection.getSlices().size()) {\n        return true;\n      }\n\n      // Make sure there are no more slices at the limit than the \"leftovers\"\n      // Let's say there's 7 slices and 3 nodes. We need to distribute the property as 3 on node1, 2 on node2 and 2 on node3\n      // (3, 2, 2) We need to be careful to not distribute them as 3, 3, 1. that's what this check is all about.\n      int counter = origModulo;\n      for (List<SliceReplica> list : nodesHostingProp.values()) {\n        if (list.size() == origMaxPropPerNode) --counter;\n      }\n      if (counter == 0) return false; // nodes with 1 extra leader are exactly the needed number\n\n      return true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ExclusiveSliceProperty#collectCurrentPropStats().mjava","pathOld":"/dev/null","sourceNew":"    private boolean collectCurrentPropStats() {\n      int maxAssigned = 0;\n      // Get a list of potential replicas that can host the property _and_ their counts\n      // Move any obvious entries to a list of replicas to change the property on\n      Set<String> allHosts = new HashSet<>();\n      for (Slice slice : collection.getSlices()) {\n        boolean sliceHasProp = false;\n        for (Replica replica : slice.getReplicas()) {\n          if (onlyActiveNodes && isActive(replica) == false) {\n            if (StringUtils.isNotBlank(replica.getStr(property))) {\n              removeProp(slice, replica.getName()); // Note, we won't be committing this to ZK until later.\n            }\n            continue;\n          }\n          allHosts.add(replica.getNodeName());\n          String nodeName = replica.getNodeName();\n          if (StringUtils.isNotBlank(replica.getStr(property))) {\n            if (sliceHasProp) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"'\" + BALANCESLICEUNIQUE + \"' should only be called for properties that have at most one member \" +\n                      \"in any slice with the property set. No action taken.\");\n            }\n            if (nodesHostingProp.containsKey(nodeName) == false) {\n              nodesHostingProp.put(nodeName, new ArrayList<SliceReplica>());\n            }\n            nodesHostingProp.get(nodeName).add(new SliceReplica(slice, replica));\n            ++assigned;\n            maxAssigned = Math.max(maxAssigned, nodesHostingProp.get(nodeName).size());\n            sliceHasProp = true;\n          }\n          if (nodesHostingReplicas.containsKey(nodeName) == false) {\n            nodesHostingReplicas.put(nodeName, new ArrayList<SliceReplica>());\n          }\n          nodesHostingReplicas.get(nodeName).add(new SliceReplica(slice, replica));\n        }\n      }\n\n      // If the total number of already-hosted properties assigned to nodes\n      // that have potential to host leaders is equal to the slice count _AND_ none of the current nodes has more than\n      // the max number of properties, there's nothing to do.\n      origMaxPropPerNode = collection.getSlices().size() / allHosts.size();\n\n      // Some nodes can have one more of the proeprty if the numbers aren't exactly even.\n      origModulo = collection.getSlices().size() % allHosts.size();\n      if (origModulo > 0) {\n        origMaxPropPerNode++;  // have to have some nodes with 1 more property.\n      }\n\n      // We can say for sure that we need to rebalance if we don't have as many assigned properties as slices.\n      if (assigned != collection.getSlices().size()) {\n        return true;\n      }\n\n      // Make sure there are no more slices at the limit than the \"leftovers\"\n      // Let's say there's 7 slices and 3 nodes. We need to distribute the property as 3 on node1, 2 on node2 and 2 on node3\n      // (3, 2, 2) We need to be careful to not distribute them as 3, 3, 1. that's what this check is all about.\n      int counter = origModulo;\n      for (List<SliceReplica> list : nodesHostingProp.values()) {\n        if (list.size() == origMaxPropPerNode) --counter;\n      }\n      if (counter == 0) return false; // nodes with 1 extra leader are exactly the needed number\n\n      return true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfb61c9baefa8681e40fca3c803f61bf485a9d8d","date":1414979559,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ExclusiveSliceProperty#collectCurrentPropStats().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ExclusiveSliceProperty#collectCurrentPropStats().mjava","sourceNew":"    private boolean collectCurrentPropStats() {\n      int maxAssigned = 0;\n      // Get a list of potential replicas that can host the property _and_ their counts\n      // Move any obvious entries to a list of replicas to change the property on\n      Set<String> allHosts = new HashSet<>();\n      for (Slice slice : collection.getSlices()) {\n        boolean sliceHasProp = false;\n        for (Replica replica : slice.getReplicas()) {\n          if (onlyActiveNodes && isActive(replica) == false) {\n            if (StringUtils.isNotBlank(replica.getStr(property))) {\n              removeProp(slice, replica.getName()); // Note, we won't be committing this to ZK until later.\n            }\n            continue;\n          }\n          allHosts.add(replica.getNodeName());\n          String nodeName = replica.getNodeName();\n          if (StringUtils.isNotBlank(replica.getStr(property))) {\n            if (sliceHasProp) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"'\" + BALANCESHARDUNIQUE + \"' should only be called for properties that have at most one member \" +\n                      \"in any slice with the property set. No action taken.\");\n            }\n            if (nodesHostingProp.containsKey(nodeName) == false) {\n              nodesHostingProp.put(nodeName, new ArrayList<SliceReplica>());\n            }\n            nodesHostingProp.get(nodeName).add(new SliceReplica(slice, replica));\n            ++assigned;\n            maxAssigned = Math.max(maxAssigned, nodesHostingProp.get(nodeName).size());\n            sliceHasProp = true;\n          }\n          if (nodesHostingReplicas.containsKey(nodeName) == false) {\n            nodesHostingReplicas.put(nodeName, new ArrayList<SliceReplica>());\n          }\n          nodesHostingReplicas.get(nodeName).add(new SliceReplica(slice, replica));\n        }\n      }\n\n      // If the total number of already-hosted properties assigned to nodes\n      // that have potential to host leaders is equal to the slice count _AND_ none of the current nodes has more than\n      // the max number of properties, there's nothing to do.\n      origMaxPropPerNode = collection.getSlices().size() / allHosts.size();\n\n      // Some nodes can have one more of the proeprty if the numbers aren't exactly even.\n      origModulo = collection.getSlices().size() % allHosts.size();\n      if (origModulo > 0) {\n        origMaxPropPerNode++;  // have to have some nodes with 1 more property.\n      }\n\n      // We can say for sure that we need to rebalance if we don't have as many assigned properties as slices.\n      if (assigned != collection.getSlices().size()) {\n        return true;\n      }\n\n      // Make sure there are no more slices at the limit than the \"leftovers\"\n      // Let's say there's 7 slices and 3 nodes. We need to distribute the property as 3 on node1, 2 on node2 and 2 on node3\n      // (3, 2, 2) We need to be careful to not distribute them as 3, 3, 1. that's what this check is all about.\n      int counter = origModulo;\n      for (List<SliceReplica> list : nodesHostingProp.values()) {\n        if (list.size() == origMaxPropPerNode) --counter;\n      }\n      if (counter == 0) return false; // nodes with 1 extra leader are exactly the needed number\n\n      return true;\n    }\n\n","sourceOld":"    private boolean collectCurrentPropStats() {\n      int maxAssigned = 0;\n      // Get a list of potential replicas that can host the property _and_ their counts\n      // Move any obvious entries to a list of replicas to change the property on\n      Set<String> allHosts = new HashSet<>();\n      for (Slice slice : collection.getSlices()) {\n        boolean sliceHasProp = false;\n        for (Replica replica : slice.getReplicas()) {\n          if (onlyActiveNodes && isActive(replica) == false) {\n            if (StringUtils.isNotBlank(replica.getStr(property))) {\n              removeProp(slice, replica.getName()); // Note, we won't be committing this to ZK until later.\n            }\n            continue;\n          }\n          allHosts.add(replica.getNodeName());\n          String nodeName = replica.getNodeName();\n          if (StringUtils.isNotBlank(replica.getStr(property))) {\n            if (sliceHasProp) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"'\" + BALANCESLICEUNIQUE + \"' should only be called for properties that have at most one member \" +\n                      \"in any slice with the property set. No action taken.\");\n            }\n            if (nodesHostingProp.containsKey(nodeName) == false) {\n              nodesHostingProp.put(nodeName, new ArrayList<SliceReplica>());\n            }\n            nodesHostingProp.get(nodeName).add(new SliceReplica(slice, replica));\n            ++assigned;\n            maxAssigned = Math.max(maxAssigned, nodesHostingProp.get(nodeName).size());\n            sliceHasProp = true;\n          }\n          if (nodesHostingReplicas.containsKey(nodeName) == false) {\n            nodesHostingReplicas.put(nodeName, new ArrayList<SliceReplica>());\n          }\n          nodesHostingReplicas.get(nodeName).add(new SliceReplica(slice, replica));\n        }\n      }\n\n      // If the total number of already-hosted properties assigned to nodes\n      // that have potential to host leaders is equal to the slice count _AND_ none of the current nodes has more than\n      // the max number of properties, there's nothing to do.\n      origMaxPropPerNode = collection.getSlices().size() / allHosts.size();\n\n      // Some nodes can have one more of the proeprty if the numbers aren't exactly even.\n      origModulo = collection.getSlices().size() % allHosts.size();\n      if (origModulo > 0) {\n        origMaxPropPerNode++;  // have to have some nodes with 1 more property.\n      }\n\n      // We can say for sure that we need to rebalance if we don't have as many assigned properties as slices.\n      if (assigned != collection.getSlices().size()) {\n        return true;\n      }\n\n      // Make sure there are no more slices at the limit than the \"leftovers\"\n      // Let's say there's 7 slices and 3 nodes. We need to distribute the property as 3 on node1, 2 on node2 and 2 on node3\n      // (3, 2, 2) We need to be careful to not distribute them as 3, 3, 1. that's what this check is all about.\n      int counter = origModulo;\n      for (List<SliceReplica> list : nodesHostingProp.values()) {\n        if (list.size() == origMaxPropPerNode) --counter;\n      }\n      if (counter == 0) return false; // nodes with 1 extra leader are exactly the needed number\n\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5886c3d78997b0c3f9151247c967e32a8529c59e","date":1473837274,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ExclusiveSliceProperty#collectCurrentPropStats().mjava","sourceNew":null,"sourceOld":"    private boolean collectCurrentPropStats() {\n      int maxAssigned = 0;\n      // Get a list of potential replicas that can host the property _and_ their counts\n      // Move any obvious entries to a list of replicas to change the property on\n      Set<String> allHosts = new HashSet<>();\n      for (Slice slice : collection.getSlices()) {\n        boolean sliceHasProp = false;\n        for (Replica replica : slice.getReplicas()) {\n          if (onlyActiveNodes && isActive(replica) == false) {\n            if (StringUtils.isNotBlank(replica.getStr(property))) {\n              removeProp(slice, replica.getName()); // Note, we won't be committing this to ZK until later.\n            }\n            continue;\n          }\n          allHosts.add(replica.getNodeName());\n          String nodeName = replica.getNodeName();\n          if (StringUtils.isNotBlank(replica.getStr(property))) {\n            if (sliceHasProp) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"'\" + BALANCESHARDUNIQUE + \"' should only be called for properties that have at most one member \" +\n                      \"in any slice with the property set. No action taken.\");\n            }\n            if (nodesHostingProp.containsKey(nodeName) == false) {\n              nodesHostingProp.put(nodeName, new ArrayList<SliceReplica>());\n            }\n            nodesHostingProp.get(nodeName).add(new SliceReplica(slice, replica));\n            ++assigned;\n            maxAssigned = Math.max(maxAssigned, nodesHostingProp.get(nodeName).size());\n            sliceHasProp = true;\n          }\n          if (nodesHostingReplicas.containsKey(nodeName) == false) {\n            nodesHostingReplicas.put(nodeName, new ArrayList<SliceReplica>());\n          }\n          nodesHostingReplicas.get(nodeName).add(new SliceReplica(slice, replica));\n        }\n      }\n\n      // If the total number of already-hosted properties assigned to nodes\n      // that have potential to host leaders is equal to the slice count _AND_ none of the current nodes has more than\n      // the max number of properties, there's nothing to do.\n      origMaxPropPerNode = collection.getSlices().size() / allHosts.size();\n\n      // Some nodes can have one more of the proeprty if the numbers aren't exactly even.\n      origModulo = collection.getSlices().size() % allHosts.size();\n      if (origModulo > 0) {\n        origMaxPropPerNode++;  // have to have some nodes with 1 more property.\n      }\n\n      // We can say for sure that we need to rebalance if we don't have as many assigned properties as slices.\n      if (assigned != collection.getSlices().size()) {\n        return true;\n      }\n\n      // Make sure there are no more slices at the limit than the \"leftovers\"\n      // Let's say there's 7 slices and 3 nodes. We need to distribute the property as 3 on node1, 2 on node2 and 2 on node3\n      // (3, 2, 2) We need to be careful to not distribute them as 3, 3, 1. that's what this check is all about.\n      int counter = origModulo;\n      for (List<SliceReplica> list : nodesHostingProp.values()) {\n        if (list.size() == origMaxPropPerNode) --counter;\n      }\n      if (counter == 0) return false; // nodes with 1 extra leader are exactly the needed number\n\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ExclusiveSliceProperty#collectCurrentPropStats().mjava","sourceNew":null,"sourceOld":"    private boolean collectCurrentPropStats() {\n      int maxAssigned = 0;\n      // Get a list of potential replicas that can host the property _and_ their counts\n      // Move any obvious entries to a list of replicas to change the property on\n      Set<String> allHosts = new HashSet<>();\n      for (Slice slice : collection.getSlices()) {\n        boolean sliceHasProp = false;\n        for (Replica replica : slice.getReplicas()) {\n          if (onlyActiveNodes && isActive(replica) == false) {\n            if (StringUtils.isNotBlank(replica.getStr(property))) {\n              removeProp(slice, replica.getName()); // Note, we won't be committing this to ZK until later.\n            }\n            continue;\n          }\n          allHosts.add(replica.getNodeName());\n          String nodeName = replica.getNodeName();\n          if (StringUtils.isNotBlank(replica.getStr(property))) {\n            if (sliceHasProp) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"'\" + BALANCESHARDUNIQUE + \"' should only be called for properties that have at most one member \" +\n                      \"in any slice with the property set. No action taken.\");\n            }\n            if (nodesHostingProp.containsKey(nodeName) == false) {\n              nodesHostingProp.put(nodeName, new ArrayList<SliceReplica>());\n            }\n            nodesHostingProp.get(nodeName).add(new SliceReplica(slice, replica));\n            ++assigned;\n            maxAssigned = Math.max(maxAssigned, nodesHostingProp.get(nodeName).size());\n            sliceHasProp = true;\n          }\n          if (nodesHostingReplicas.containsKey(nodeName) == false) {\n            nodesHostingReplicas.put(nodeName, new ArrayList<SliceReplica>());\n          }\n          nodesHostingReplicas.get(nodeName).add(new SliceReplica(slice, replica));\n        }\n      }\n\n      // If the total number of already-hosted properties assigned to nodes\n      // that have potential to host leaders is equal to the slice count _AND_ none of the current nodes has more than\n      // the max number of properties, there's nothing to do.\n      origMaxPropPerNode = collection.getSlices().size() / allHosts.size();\n\n      // Some nodes can have one more of the proeprty if the numbers aren't exactly even.\n      origModulo = collection.getSlices().size() % allHosts.size();\n      if (origModulo > 0) {\n        origMaxPropPerNode++;  // have to have some nodes with 1 more property.\n      }\n\n      // We can say for sure that we need to rebalance if we don't have as many assigned properties as slices.\n      if (assigned != collection.getSlices().size()) {\n        return true;\n      }\n\n      // Make sure there are no more slices at the limit than the \"leftovers\"\n      // Let's say there's 7 slices and 3 nodes. We need to distribute the property as 3 on node1, 2 on node2 and 2 on node3\n      // (3, 2, 2) We need to be careful to not distribute them as 3, 3, 1. that's what this check is all about.\n      int counter = origModulo;\n      for (List<SliceReplica> list : nodesHostingProp.values()) {\n        if (list.size() == origMaxPropPerNode) --counter;\n      }\n      if (counter == 0) return false; // nodes with 1 extra leader are exactly the needed number\n\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ExclusiveSliceProperty#collectCurrentPropStats().mjava","sourceNew":null,"sourceOld":"    private boolean collectCurrentPropStats() {\n      int maxAssigned = 0;\n      // Get a list of potential replicas that can host the property _and_ their counts\n      // Move any obvious entries to a list of replicas to change the property on\n      Set<String> allHosts = new HashSet<>();\n      for (Slice slice : collection.getSlices()) {\n        boolean sliceHasProp = false;\n        for (Replica replica : slice.getReplicas()) {\n          if (onlyActiveNodes && isActive(replica) == false) {\n            if (StringUtils.isNotBlank(replica.getStr(property))) {\n              removeProp(slice, replica.getName()); // Note, we won't be committing this to ZK until later.\n            }\n            continue;\n          }\n          allHosts.add(replica.getNodeName());\n          String nodeName = replica.getNodeName();\n          if (StringUtils.isNotBlank(replica.getStr(property))) {\n            if (sliceHasProp) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"'\" + BALANCESHARDUNIQUE + \"' should only be called for properties that have at most one member \" +\n                      \"in any slice with the property set. No action taken.\");\n            }\n            if (nodesHostingProp.containsKey(nodeName) == false) {\n              nodesHostingProp.put(nodeName, new ArrayList<SliceReplica>());\n            }\n            nodesHostingProp.get(nodeName).add(new SliceReplica(slice, replica));\n            ++assigned;\n            maxAssigned = Math.max(maxAssigned, nodesHostingProp.get(nodeName).size());\n            sliceHasProp = true;\n          }\n          if (nodesHostingReplicas.containsKey(nodeName) == false) {\n            nodesHostingReplicas.put(nodeName, new ArrayList<SliceReplica>());\n          }\n          nodesHostingReplicas.get(nodeName).add(new SliceReplica(slice, replica));\n        }\n      }\n\n      // If the total number of already-hosted properties assigned to nodes\n      // that have potential to host leaders is equal to the slice count _AND_ none of the current nodes has more than\n      // the max number of properties, there's nothing to do.\n      origMaxPropPerNode = collection.getSlices().size() / allHosts.size();\n\n      // Some nodes can have one more of the proeprty if the numbers aren't exactly even.\n      origModulo = collection.getSlices().size() % allHosts.size();\n      if (origModulo > 0) {\n        origMaxPropPerNode++;  // have to have some nodes with 1 more property.\n      }\n\n      // We can say for sure that we need to rebalance if we don't have as many assigned properties as slices.\n      if (assigned != collection.getSlices().size()) {\n        return true;\n      }\n\n      // Make sure there are no more slices at the limit than the \"leftovers\"\n      // Let's say there's 7 slices and 3 nodes. We need to distribute the property as 3 on node1, 2 on node2 and 2 on node3\n      // (3, 2, 2) We need to be careful to not distribute them as 3, 3, 1. that's what this check is all about.\n      int counter = origModulo;\n      for (List<SliceReplica> list : nodesHostingProp.values()) {\n        if (list.size() == origMaxPropPerNode) --counter;\n      }\n      if (counter == 0) return false; // nodes with 1 extra leader are exactly the needed number\n\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5886c3d78997b0c3f9151247c967e32a8529c59e":["cfb61c9baefa8681e40fca3c803f61bf485a9d8d"],"55980207f1977bd1463465de1659b821347e2fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","64707d25b6352cf02909d3916038a3b3cec7f0a8"],"cfb61c9baefa8681e40fca3c803f61bf485a9d8d":["64707d25b6352cf02909d3916038a3b3cec7f0a8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["cfb61c9baefa8681e40fca3c803f61bf485a9d8d","5886c3d78997b0c3f9151247c967e32a8529c59e"],"64707d25b6352cf02909d3916038a3b3cec7f0a8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["cfb61c9baefa8681e40fca3c803f61bf485a9d8d","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"5886c3d78997b0c3f9151247c967e32a8529c59e":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"55980207f1977bd1463465de1659b821347e2fa8":[],"cfb61c9baefa8681e40fca3c803f61bf485a9d8d":["5886c3d78997b0c3f9151247c967e32a8529c59e","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["55980207f1977bd1463465de1659b821347e2fa8","64707d25b6352cf02909d3916038a3b3cec7f0a8"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"64707d25b6352cf02909d3916038a3b3cec7f0a8":["55980207f1977bd1463465de1659b821347e2fa8","cfb61c9baefa8681e40fca3c803f61bf485a9d8d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}