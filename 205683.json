{"path":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testRepeatingTermsInMultBooleans().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testRepeatingTermsInMultBooleans().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testRepeatingTermsInMultBooleans().mjava","sourceNew":"  // LUCENE-1752\n  public void testRepeatingTermsInMultBooleans() throws Exception {\n    String content = \"x y z a b c d e f g b c g\";\n    String f1 = \"f1\";\n    String f2 = \"f2\";\n\n    PhraseQuery f1ph1 = new PhraseQuery();\n    f1ph1.add(new Term(f1, \"a\"));\n    f1ph1.add(new Term(f1, \"b\"));\n    f1ph1.add(new Term(f1, \"c\"));\n    f1ph1.add(new Term(f1, \"d\"));\n\n    PhraseQuery f2ph1 = new PhraseQuery();\n    f2ph1.add(new Term(f2, \"a\"));\n    f2ph1.add(new Term(f2, \"b\"));\n    f2ph1.add(new Term(f2, \"c\"));\n    f2ph1.add(new Term(f2, \"d\"));\n\n    PhraseQuery f1ph2 = new PhraseQuery();\n    f1ph2.add(new Term(f1, \"b\"));\n    f1ph2.add(new Term(f1, \"c\"));\n    f1ph2.add(new Term(f1, \"g\"));\n\n    PhraseQuery f2ph2 = new PhraseQuery();\n    f2ph2.add(new Term(f2, \"b\"));\n    f2ph2.add(new Term(f2, \"c\"));\n    f2ph2.add(new Term(f2, \"g\"));\n\n    BooleanQuery booleanQuery = new BooleanQuery();\n    BooleanQuery leftChild = new BooleanQuery();\n    leftChild.add(f1ph1, Occur.SHOULD);\n    leftChild.add(f2ph1, Occur.SHOULD);\n    booleanQuery.add(leftChild, Occur.MUST);\n\n    BooleanQuery rightChild = new BooleanQuery();\n    rightChild.add(f1ph2, Occur.SHOULD);\n    rightChild.add(f2ph2, Occur.SHOULD);\n    booleanQuery.add(rightChild, Occur.MUST);\n\n    QueryScorer scorer = new QueryScorer(booleanQuery, f1);\n    scorer.setExpandMultiTermQuery(false);\n\n    Highlighter h = new Highlighter(this, scorer);\n\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n\n    h.getBestFragment(analyzer, f1, content);\n\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 7);\n  }\n\n","sourceOld":"  // LUCENE-1752\n  public void testRepeatingTermsInMultBooleans() throws Exception {\n    String content = \"x y z a b c d e f g b c g\";\n    String f1 = \"f1\";\n    String f2 = \"f2\";\n\n    PhraseQuery f1ph1 = new PhraseQuery();\n    f1ph1.add(new Term(f1, \"a\"));\n    f1ph1.add(new Term(f1, \"b\"));\n    f1ph1.add(new Term(f1, \"c\"));\n    f1ph1.add(new Term(f1, \"d\"));\n\n    PhraseQuery f2ph1 = new PhraseQuery();\n    f2ph1.add(new Term(f2, \"a\"));\n    f2ph1.add(new Term(f2, \"b\"));\n    f2ph1.add(new Term(f2, \"c\"));\n    f2ph1.add(new Term(f2, \"d\"));\n\n    PhraseQuery f1ph2 = new PhraseQuery();\n    f1ph2.add(new Term(f1, \"b\"));\n    f1ph2.add(new Term(f1, \"c\"));\n    f1ph2.add(new Term(f1, \"g\"));\n\n    PhraseQuery f2ph2 = new PhraseQuery();\n    f2ph2.add(new Term(f2, \"b\"));\n    f2ph2.add(new Term(f2, \"c\"));\n    f2ph2.add(new Term(f2, \"g\"));\n\n    BooleanQuery booleanQuery = new BooleanQuery();\n    BooleanQuery leftChild = new BooleanQuery();\n    leftChild.add(f1ph1, Occur.SHOULD);\n    leftChild.add(f2ph1, Occur.SHOULD);\n    booleanQuery.add(leftChild, Occur.MUST);\n\n    BooleanQuery rightChild = new BooleanQuery();\n    rightChild.add(f1ph2, Occur.SHOULD);\n    rightChild.add(f2ph2, Occur.SHOULD);\n    booleanQuery.add(rightChild, Occur.MUST);\n\n    QueryScorer scorer = new QueryScorer(booleanQuery, f1);\n    scorer.setExpandMultiTermQuery(false);\n\n    Highlighter h = new Highlighter(this, scorer);\n\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n\n    h.getBestFragment(analyzer, f1, content);\n\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 7);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9e1499c5d26c936238506df90a3c02c76707722","date":1434449920,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testRepeatingTermsInMultBooleans().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testRepeatingTermsInMultBooleans().mjava","sourceNew":"  // LUCENE-1752\n  public void testRepeatingTermsInMultBooleans() throws Exception {\n    String content = \"x y z a b c d e f g b c g\";\n    String f1 = \"f1\";\n    String f2 = \"f2\";\n\n    PhraseQuery f1ph1 = new PhraseQuery(f1, \"a\", \"b\", \"c\", \"d\");\n\n    PhraseQuery f2ph1 = new PhraseQuery(f2, \"a\", \"b\", \"c\", \"d\");\n\n    PhraseQuery f1ph2 = new PhraseQuery(f1, \"b\", \"c\", \"g\");\n\n    PhraseQuery f2ph2 = new PhraseQuery(f2, \"b\", \"c\", \"g\");\n\n    BooleanQuery booleanQuery = new BooleanQuery();\n    BooleanQuery leftChild = new BooleanQuery();\n    leftChild.add(f1ph1, Occur.SHOULD);\n    leftChild.add(f2ph1, Occur.SHOULD);\n    booleanQuery.add(leftChild, Occur.MUST);\n\n    BooleanQuery rightChild = new BooleanQuery();\n    rightChild.add(f1ph2, Occur.SHOULD);\n    rightChild.add(f2ph2, Occur.SHOULD);\n    booleanQuery.add(rightChild, Occur.MUST);\n\n    QueryScorer scorer = new QueryScorer(booleanQuery, f1);\n    scorer.setExpandMultiTermQuery(false);\n\n    Highlighter h = new Highlighter(this, scorer);\n\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n\n    h.getBestFragment(analyzer, f1, content);\n\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 7);\n  }\n\n","sourceOld":"  // LUCENE-1752\n  public void testRepeatingTermsInMultBooleans() throws Exception {\n    String content = \"x y z a b c d e f g b c g\";\n    String f1 = \"f1\";\n    String f2 = \"f2\";\n\n    PhraseQuery f1ph1 = new PhraseQuery();\n    f1ph1.add(new Term(f1, \"a\"));\n    f1ph1.add(new Term(f1, \"b\"));\n    f1ph1.add(new Term(f1, \"c\"));\n    f1ph1.add(new Term(f1, \"d\"));\n\n    PhraseQuery f2ph1 = new PhraseQuery();\n    f2ph1.add(new Term(f2, \"a\"));\n    f2ph1.add(new Term(f2, \"b\"));\n    f2ph1.add(new Term(f2, \"c\"));\n    f2ph1.add(new Term(f2, \"d\"));\n\n    PhraseQuery f1ph2 = new PhraseQuery();\n    f1ph2.add(new Term(f1, \"b\"));\n    f1ph2.add(new Term(f1, \"c\"));\n    f1ph2.add(new Term(f1, \"g\"));\n\n    PhraseQuery f2ph2 = new PhraseQuery();\n    f2ph2.add(new Term(f2, \"b\"));\n    f2ph2.add(new Term(f2, \"c\"));\n    f2ph2.add(new Term(f2, \"g\"));\n\n    BooleanQuery booleanQuery = new BooleanQuery();\n    BooleanQuery leftChild = new BooleanQuery();\n    leftChild.add(f1ph1, Occur.SHOULD);\n    leftChild.add(f2ph1, Occur.SHOULD);\n    booleanQuery.add(leftChild, Occur.MUST);\n\n    BooleanQuery rightChild = new BooleanQuery();\n    rightChild.add(f1ph2, Occur.SHOULD);\n    rightChild.add(f2ph2, Occur.SHOULD);\n    booleanQuery.add(rightChild, Occur.MUST);\n\n    QueryScorer scorer = new QueryScorer(booleanQuery, f1);\n    scorer.setExpandMultiTermQuery(false);\n\n    Highlighter h = new Highlighter(this, scorer);\n\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n\n    h.getBestFragment(analyzer, f1, content);\n\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 7);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testRepeatingTermsInMultBooleans().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testRepeatingTermsInMultBooleans().mjava","sourceNew":"  // LUCENE-1752\n  public void testRepeatingTermsInMultBooleans() throws Exception {\n    String content = \"x y z a b c d e f g b c g\";\n    String f1 = \"f1\";\n    String f2 = \"f2\";\n\n    PhraseQuery f1ph1 = new PhraseQuery(f1, \"a\", \"b\", \"c\", \"d\");\n\n    PhraseQuery f2ph1 = new PhraseQuery(f2, \"a\", \"b\", \"c\", \"d\");\n\n    PhraseQuery f1ph2 = new PhraseQuery(f1, \"b\", \"c\", \"g\");\n\n    PhraseQuery f2ph2 = new PhraseQuery(f2, \"b\", \"c\", \"g\");\n\n    BooleanQuery.Builder booleanQuery = new BooleanQuery.Builder();\n    BooleanQuery.Builder leftChild = new BooleanQuery.Builder();\n    leftChild.add(f1ph1, Occur.SHOULD);\n    leftChild.add(f2ph1, Occur.SHOULD);\n    booleanQuery.add(leftChild.build(), Occur.MUST);\n\n    BooleanQuery.Builder rightChild = new BooleanQuery.Builder();\n    rightChild.add(f1ph2, Occur.SHOULD);\n    rightChild.add(f2ph2, Occur.SHOULD);\n    booleanQuery.add(rightChild.build(), Occur.MUST);\n\n    QueryScorer scorer = new QueryScorer(booleanQuery.build(), f1);\n    scorer.setExpandMultiTermQuery(false);\n\n    Highlighter h = new Highlighter(this, scorer);\n\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n\n    h.getBestFragment(analyzer, f1, content);\n\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 7);\n  }\n\n","sourceOld":"  // LUCENE-1752\n  public void testRepeatingTermsInMultBooleans() throws Exception {\n    String content = \"x y z a b c d e f g b c g\";\n    String f1 = \"f1\";\n    String f2 = \"f2\";\n\n    PhraseQuery f1ph1 = new PhraseQuery(f1, \"a\", \"b\", \"c\", \"d\");\n\n    PhraseQuery f2ph1 = new PhraseQuery(f2, \"a\", \"b\", \"c\", \"d\");\n\n    PhraseQuery f1ph2 = new PhraseQuery(f1, \"b\", \"c\", \"g\");\n\n    PhraseQuery f2ph2 = new PhraseQuery(f2, \"b\", \"c\", \"g\");\n\n    BooleanQuery booleanQuery = new BooleanQuery();\n    BooleanQuery leftChild = new BooleanQuery();\n    leftChild.add(f1ph1, Occur.SHOULD);\n    leftChild.add(f2ph1, Occur.SHOULD);\n    booleanQuery.add(leftChild, Occur.MUST);\n\n    BooleanQuery rightChild = new BooleanQuery();\n    rightChild.add(f1ph2, Occur.SHOULD);\n    rightChild.add(f2ph2, Occur.SHOULD);\n    booleanQuery.add(rightChild, Occur.MUST);\n\n    QueryScorer scorer = new QueryScorer(booleanQuery, f1);\n    scorer.setExpandMultiTermQuery(false);\n\n    Highlighter h = new Highlighter(this, scorer);\n\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n\n    h.getBestFragment(analyzer, f1, content);\n\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 7);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["e9e1499c5d26c936238506df90a3c02c76707722"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9e1499c5d26c936238506df90a3c02c76707722":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e9e1499c5d26c936238506df90a3c02c76707722"],"e9e1499c5d26c936238506df90a3c02c76707722":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}