{"path":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter.TokenListStream#incrementToken().mjava","commits":[{"id":"0dda87e5ad7246b25d0da56a16ead95360499d86","date":1249273990,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter.TokenListStream#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"    public boolean incrementToken() throws IOException {\n      if (iterator == null) {\n        iterator = tokens.iterator();\n      }\n      if (!iterator.hasNext()) {\n        return false;\n      }\n      Token prototype = (Token) iterator.next();\n      termAtt.setTermBuffer(prototype.termBuffer(), 0, prototype.termLength());\n      posIncrAtt.setPositionIncrement(prototype.getPositionIncrement());\n      flagsAtt.setFlags(prototype.getFlags());\n      offsetAtt.setOffset(prototype.startOffset(), prototype.endOffset());\n      typeAtt.setType(prototype.type());\n      payloadAtt.setPayload(prototype.getPayload());\n\n      return true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter.TokenListStream#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter.TokenListStream#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (iterator == null) {\n        iterator = tokens.iterator();\n      }\n      if (!iterator.hasNext()) {\n        return false;\n      }\n      Token prototype = (Token) iterator.next();\n      termAtt.setTermBuffer(prototype.termBuffer(), 0, prototype.termLength());\n      posIncrAtt.setPositionIncrement(prototype.getPositionIncrement());\n      flagsAtt.setFlags(prototype.getFlags());\n      offsetAtt.setOffset(prototype.startOffset(), prototype.endOffset());\n      typeAtt.setType(prototype.type());\n      payloadAtt.setPayload(prototype.getPayload());\n\n      return true;\n    }\n\n","sourceOld":"    public boolean incrementToken() throws IOException {\n      if (iterator == null) {\n        iterator = tokens.iterator();\n      }\n      if (!iterator.hasNext()) {\n        return false;\n      }\n      Token prototype = (Token) iterator.next();\n      termAtt.setTermBuffer(prototype.termBuffer(), 0, prototype.termLength());\n      posIncrAtt.setPositionIncrement(prototype.getPositionIncrement());\n      flagsAtt.setFlags(prototype.getFlags());\n      offsetAtt.setOffset(prototype.startOffset(), prototype.endOffset());\n      typeAtt.setType(prototype.type());\n      payloadAtt.setPayload(prototype.getPayload());\n\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"360d15dc189fb48153cb62234f7d20819e4e292e","date":1263562938,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter.TokenListStream#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter.TokenListStream#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (iterator == null) {\n        iterator = tokens.iterator();\n      }\n      if (!iterator.hasNext()) {\n        return false;\n      }\n      Token prototype = (Token) iterator.next();\n      clearAttributes();\n      termAtt.setTermBuffer(prototype.termBuffer(), 0, prototype.termLength());\n      posIncrAtt.setPositionIncrement(prototype.getPositionIncrement());\n      flagsAtt.setFlags(prototype.getFlags());\n      offsetAtt.setOffset(prototype.startOffset(), prototype.endOffset());\n      typeAtt.setType(prototype.type());\n      payloadAtt.setPayload(prototype.getPayload());\n\n      return true;\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (iterator == null) {\n        iterator = tokens.iterator();\n      }\n      if (!iterator.hasNext()) {\n        return false;\n      }\n      Token prototype = (Token) iterator.next();\n      termAtt.setTermBuffer(prototype.termBuffer(), 0, prototype.termLength());\n      posIncrAtt.setPositionIncrement(prototype.getPositionIncrement());\n      flagsAtt.setFlags(prototype.getFlags());\n      offsetAtt.setOffset(prototype.startOffset(), prototype.endOffset());\n      typeAtt.setType(prototype.type());\n      payloadAtt.setPayload(prototype.getPayload());\n\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter.TokenListStream#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter.TokenListStream#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (iterator == null) {\n        iterator = tokens.iterator();\n      }\n      if (!iterator.hasNext()) {\n        return false;\n      }\n      Token prototype = iterator.next();\n      clearAttributes();\n      termAtt.setTermBuffer(prototype.termBuffer(), 0, prototype.termLength());\n      posIncrAtt.setPositionIncrement(prototype.getPositionIncrement());\n      flagsAtt.setFlags(prototype.getFlags());\n      offsetAtt.setOffset(prototype.startOffset(), prototype.endOffset());\n      typeAtt.setType(prototype.type());\n      payloadAtt.setPayload(prototype.getPayload());\n\n      return true;\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (iterator == null) {\n        iterator = tokens.iterator();\n      }\n      if (!iterator.hasNext()) {\n        return false;\n      }\n      Token prototype = (Token) iterator.next();\n      clearAttributes();\n      termAtt.setTermBuffer(prototype.termBuffer(), 0, prototype.termLength());\n      posIncrAtt.setPositionIncrement(prototype.getPositionIncrement());\n      flagsAtt.setFlags(prototype.getFlags());\n      offsetAtt.setOffset(prototype.startOffset(), prototype.endOffset());\n      typeAtt.setType(prototype.type());\n      payloadAtt.setPayload(prototype.getPayload());\n\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter.TokenListStream#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter.TokenListStream#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (iterator == null) {\n        iterator = tokens.iterator();\n      }\n      if (!iterator.hasNext()) {\n        return false;\n      }\n      Token prototype = iterator.next();\n      clearAttributes();\n      termAtt.setTermBuffer(prototype.termBuffer(), 0, prototype.termLength());\n      posIncrAtt.setPositionIncrement(prototype.getPositionIncrement());\n      flagsAtt.setFlags(prototype.getFlags());\n      offsetAtt.setOffset(prototype.startOffset(), prototype.endOffset());\n      typeAtt.setType(prototype.type());\n      payloadAtt.setPayload(prototype.getPayload());\n\n      return true;\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (iterator == null) {\n        iterator = tokens.iterator();\n      }\n      if (!iterator.hasNext()) {\n        return false;\n      }\n      Token prototype = iterator.next();\n      clearAttributes();\n      termAtt.setTermBuffer(prototype.termBuffer(), 0, prototype.termLength());\n      posIncrAtt.setPositionIncrement(prototype.getPositionIncrement());\n      flagsAtt.setFlags(prototype.getFlags());\n      offsetAtt.setOffset(prototype.startOffset(), prototype.endOffset());\n      typeAtt.setType(prototype.type());\n      payloadAtt.setPayload(prototype.getPayload());\n\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["0dda87e5ad7246b25d0da56a16ead95360499d86"],"0dda87e5ad7246b25d0da56a16ead95360499d86":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["360d15dc189fb48153cb62234f7d20819e4e292e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"360d15dc189fb48153cb62234f7d20819e4e292e":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0dda87e5ad7246b25d0da56a16ead95360499d86"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["360d15dc189fb48153cb62234f7d20819e4e292e"],"0dda87e5ad7246b25d0da56a16ead95360499d86":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"360d15dc189fb48153cb62234f7d20819e4e292e":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}