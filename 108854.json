{"path":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setMergePolicy(newLogMergePolicy())\n          .setSimilarity(new DefaultSimilarity()));\n\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"foo firstname lastname foo\", TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo firstname zzz lastname foo\", TextField.TYPE_STORED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newField(\"field\", \"foo firstname zzz yyy lastname foo\", TextField.TYPE_STORED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new DefaultSimilarity());\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random, query,searcher);\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setMergePolicy(newLogMergePolicy())\n          .setSimilarity(new DefaultSimilarity()));\n\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"foo firstname lastname foo\", TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo firstname zzz lastname foo\", TextField.TYPE_STORED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newField(\"field\", \"foo firstname zzz yyy lastname foo\", TextField.TYPE_STORED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new DefaultSimilarity());\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random, query,searcher);\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n          .setMergePolicy(newLogMergePolicy())\n          .setSimilarity(new DefaultSimilarity()));\n\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"foo firstname lastname foo\", TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo firstname zzz lastname foo\", TextField.TYPE_STORED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newField(\"field\", \"foo firstname zzz yyy lastname foo\", TextField.TYPE_STORED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new DefaultSimilarity());\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random(), query,searcher);\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setMergePolicy(newLogMergePolicy())\n          .setSimilarity(new DefaultSimilarity()));\n\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"foo firstname lastname foo\", TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo firstname zzz lastname foo\", TextField.TYPE_STORED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newField(\"field\", \"foo firstname zzz yyy lastname foo\", TextField.TYPE_STORED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new DefaultSimilarity());\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random, query,searcher);\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n          .setMergePolicy(newLogMergePolicy())\n          .setSimilarity(new DefaultSimilarity()));\n\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"foo firstname lastname foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newTextField(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newTextField(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new DefaultSimilarity());\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random(), query,searcher);\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n          .setMergePolicy(newLogMergePolicy())\n          .setSimilarity(new DefaultSimilarity()));\n\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"foo firstname lastname foo\", TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo firstname zzz lastname foo\", TextField.TYPE_STORED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newField(\"field\", \"foo firstname zzz yyy lastname foo\", TextField.TYPE_STORED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new DefaultSimilarity());\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random(), query,searcher);\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n          .setMergePolicy(newLogMergePolicy())\n          .setSimilarity(new DefaultSimilarity()));\n\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"foo firstname lastname foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newTextField(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newTextField(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.shutdown();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new DefaultSimilarity());\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random(), query,searcher);\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n          .setMergePolicy(newLogMergePolicy())\n          .setSimilarity(new DefaultSimilarity()));\n\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"foo firstname lastname foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newTextField(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newTextField(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new DefaultSimilarity());\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random(), query,searcher);\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory, \n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setMergePolicy(newLogMergePolicy())\n          .setSimilarity(new DefaultSimilarity()));\n\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"foo firstname lastname foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newTextField(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newTextField(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.shutdown();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new DefaultSimilarity());\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random(), query,searcher);\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n          .setMergePolicy(newLogMergePolicy())\n          .setSimilarity(new DefaultSimilarity()));\n\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"foo firstname lastname foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newTextField(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newTextField(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.shutdown();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new DefaultSimilarity());\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random(), query,searcher);\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory, \n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setMergePolicy(newLogMergePolicy())\n          .setSimilarity(new DefaultSimilarity()));\n\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"foo firstname lastname foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newTextField(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newTextField(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new DefaultSimilarity());\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random(), query,searcher);\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory, \n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setMergePolicy(newLogMergePolicy())\n          .setSimilarity(new DefaultSimilarity()));\n\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"foo firstname lastname foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newTextField(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newTextField(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.shutdown();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new DefaultSimilarity());\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random(), query,searcher);\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory, \n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setMergePolicy(newLogMergePolicy())\n          .setSimilarity(new DefaultSimilarity()));\n\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"foo firstname lastname foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newTextField(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newTextField(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new DefaultSimilarity());\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random(), query,searcher);\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory, \n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setMergePolicy(newLogMergePolicy())\n          .setSimilarity(new DefaultSimilarity()));\n\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"foo firstname lastname foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newTextField(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newTextField(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new DefaultSimilarity());\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random(), query,searcher);\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9e1499c5d26c936238506df90a3c02c76707722","date":1434449920,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory, \n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setMergePolicy(newLogMergePolicy())\n          .setSimilarity(new DefaultSimilarity()));\n\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"foo firstname lastname foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newTextField(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newTextField(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new DefaultSimilarity());\n    PhraseQuery query = new PhraseQuery(Integer.MAX_VALUE, \"field\", \"firstname\", \"lastname\");\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random(), query,searcher);\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory, \n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setMergePolicy(newLogMergePolicy())\n          .setSimilarity(new DefaultSimilarity()));\n\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"foo firstname lastname foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newTextField(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newTextField(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new DefaultSimilarity());\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random(), query,searcher);\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6e75448368ba628d73e9967b45e29c40bbfe39fa","date":1441768575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory, \n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setMergePolicy(newLogMergePolicy())\n          .setSimilarity(new DefaultSimilarity()));\n\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"foo firstname lastname foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newTextField(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newTextField(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new DefaultSimilarity());\n    PhraseQuery query = new PhraseQuery(Integer.MAX_VALUE, \"field\", \"firstname\", \"lastname\");\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(1.0, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.62, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.43, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random(), query,searcher);\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory, \n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setMergePolicy(newLogMergePolicy())\n          .setSimilarity(new DefaultSimilarity()));\n\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"foo firstname lastname foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newTextField(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newTextField(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new DefaultSimilarity());\n    PhraseQuery query = new PhraseQuery(Integer.MAX_VALUE, \"field\", \"firstname\", \"lastname\");\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random(), query,searcher);\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81d0720146de53dd3a4a023d2a3d1089d86d748d","date":1442268215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory, \n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setMergePolicy(newLogMergePolicy())\n          .setSimilarity(new ClassicSimilarity()));\n\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"foo firstname lastname foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newTextField(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newTextField(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new ClassicSimilarity());\n    PhraseQuery query = new PhraseQuery(Integer.MAX_VALUE, \"field\", \"firstname\", \"lastname\");\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(1.0, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.62, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.43, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random(), query,searcher);\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory, \n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setMergePolicy(newLogMergePolicy())\n          .setSimilarity(new DefaultSimilarity()));\n\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"foo firstname lastname foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newTextField(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newTextField(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new DefaultSimilarity());\n    PhraseQuery query = new PhraseQuery(Integer.MAX_VALUE, \"field\", \"firstname\", \"lastname\");\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(1.0, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.62, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.43, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random(), query,searcher);\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615370d2b876c3435773b5174df2e2242ad7981a","date":1495117651,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory, \n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setMergePolicy(newLogMergePolicy())\n          .setSimilarity(new BM25Similarity()));\n\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"foo firstname lastname foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newTextField(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newTextField(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new ClassicSimilarity());\n    PhraseQuery query = new PhraseQuery(Integer.MAX_VALUE, \"field\", \"firstname\", \"lastname\");\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(1.0, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.63, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.47, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random(), query,searcher);\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory, \n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setMergePolicy(newLogMergePolicy())\n          .setSimilarity(new ClassicSimilarity()));\n\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"foo firstname lastname foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newTextField(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newTextField(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new ClassicSimilarity());\n    PhraseQuery query = new PhraseQuery(Integer.MAX_VALUE, \"field\", \"firstname\", \"lastname\");\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(1.0, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.62, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.43, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random(), query,searcher);\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory, \n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setMergePolicy(newLogMergePolicy())\n          .setSimilarity(new BM25Similarity()));\n\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"foo firstname lastname foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newTextField(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newTextField(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new ClassicSimilarity());\n    PhraseQuery query = new PhraseQuery(Integer.MAX_VALUE, \"field\", \"firstname\", \"lastname\");\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(1.0, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.63, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.47, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random(), query,searcher);\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory, \n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setMergePolicy(newLogMergePolicy())\n          .setSimilarity(new ClassicSimilarity()));\n\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"foo firstname lastname foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newTextField(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newTextField(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new ClassicSimilarity());\n    PhraseQuery query = new PhraseQuery(Integer.MAX_VALUE, \"field\", \"firstname\", \"lastname\");\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(1.0, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.62, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.43, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random(), query,searcher);\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6e75448368ba628d73e9967b45e29c40bbfe39fa":["e9e1499c5d26c936238506df90a3c02c76707722"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["6e75448368ba628d73e9967b45e29c40bbfe39fa"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["81d0720146de53dd3a4a023d2a3d1089d86d748d","615370d2b876c3435773b5174df2e2242ad7981a"],"615370d2b876c3435773b5174df2e2242ad7981a":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"e9e1499c5d26c936238506df90a3c02c76707722":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["615370d2b876c3435773b5174df2e2242ad7981a"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"6e75448368ba628d73e9967b45e29c40bbfe39fa":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["e9017cf144952056066919f1ebc7897ff9bd71b1","615370d2b876c3435773b5174df2e2242ad7981a"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"e9e1499c5d26c936238506df90a3c02c76707722":["6e75448368ba628d73e9967b45e29c40bbfe39fa"],"615370d2b876c3435773b5174df2e2242ad7981a":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["e9e1499c5d26c936238506df90a3c02c76707722"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}