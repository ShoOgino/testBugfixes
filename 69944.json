{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testOnlyRollbackOnceOnException().mjava","commits":[{"id":"9841ef0704c22c54e9a7c60b228a863a08e50520","date":1597905625,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testOnlyRollbackOnceOnException().mjava","pathOld":"/dev/null","sourceNew":"  public void testOnlyRollbackOnceOnException() throws IOException {\n    AtomicBoolean once = new AtomicBoolean(false);\n    InfoStream stream = new InfoStream() {\n      @Override\n      public void message(String component, String message) {\n        if (\"TP\".equals(component) && \"rollback before checkpoint\".equals(message)) {\n          if (once.compareAndSet(false, true)) {\n            throw new RuntimeException(\"boom\");\n          } else {\n            throw new AssertionError(\"has been rolled back twice\");\n          }\n\n        }\n      }\n\n      @Override\n      public boolean isEnabled(String component) {\n        return \"TP\".equals(component);\n      }\n\n      @Override\n      public void close() {\n      }\n    };\n    try (Directory dir = newDirectory()) {\n      try (IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig().setInfoStream(stream)){\n        @Override\n        protected boolean isEnableTestPoints() {\n          return true;\n        }\n      }) {\n      }\n    } catch (RuntimeException e) {\n      assertEquals(\"boom\", e.getMessage());\n      assertEquals(\"has suppressed exceptions: \" + Arrays.toString(e.getSuppressed()), 0, e.getSuppressed().length);\n      assertNull(e.getCause());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84b36aac77119c77e5a8959555851bc879ae8913","date":1597905989,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testOnlyRollbackOnceOnException().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testOnlyRollbackOnceOnException().mjava","sourceNew":"  public void testOnlyRollbackOnceOnException() throws IOException {\n    AtomicBoolean once = new AtomicBoolean(false);\n    InfoStream stream = new InfoStream() {\n      @Override\n      public void message(String component, String message) {\n        if (\"TP\".equals(component) && \"rollback before checkpoint\".equals(message)) {\n          if (once.compareAndSet(false, true)) {\n            throw new RuntimeException(\"boom\");\n          } else {\n            throw new AssertionError(\"has been rolled back twice\");\n          }\n\n        }\n      }\n\n      @Override\n      public boolean isEnabled(String component) {\n        return \"TP\".equals(component);\n      }\n\n      @Override\n      public void close() {\n      }\n    };\n    try (Directory dir = newDirectory()) {\n      try (IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig().setInfoStream(stream)){\n        @Override\n        protected boolean isEnableTestPoints() {\n          return true;\n        }\n      }) {\n        writer.rollback();\n        fail();\n      }\n    } catch (RuntimeException e) {\n      assertEquals(\"boom\", e.getMessage());\n      assertEquals(\"has suppressed exceptions: \" + Arrays.toString(e.getSuppressed()), 0, e.getSuppressed().length);\n      assertNull(e.getCause());\n    }\n  }\n\n","sourceOld":"  public void testOnlyRollbackOnceOnException() throws IOException {\n    AtomicBoolean once = new AtomicBoolean(false);\n    InfoStream stream = new InfoStream() {\n      @Override\n      public void message(String component, String message) {\n        if (\"TP\".equals(component) && \"rollback before checkpoint\".equals(message)) {\n          if (once.compareAndSet(false, true)) {\n            throw new RuntimeException(\"boom\");\n          } else {\n            throw new AssertionError(\"has been rolled back twice\");\n          }\n\n        }\n      }\n\n      @Override\n      public boolean isEnabled(String component) {\n        return \"TP\".equals(component);\n      }\n\n      @Override\n      public void close() {\n      }\n    };\n    try (Directory dir = newDirectory()) {\n      try (IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig().setInfoStream(stream)){\n        @Override\n        protected boolean isEnableTestPoints() {\n          return true;\n        }\n      }) {\n      }\n    } catch (RuntimeException e) {\n      assertEquals(\"boom\", e.getMessage());\n      assertEquals(\"has suppressed exceptions: \" + Arrays.toString(e.getSuppressed()), 0, e.getSuppressed().length);\n      assertNull(e.getCause());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"84b36aac77119c77e5a8959555851bc879ae8913":["9841ef0704c22c54e9a7c60b228a863a08e50520"],"9841ef0704c22c54e9a7c60b228a863a08e50520":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["84b36aac77119c77e5a8959555851bc879ae8913"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9841ef0704c22c54e9a7c60b228a863a08e50520"],"84b36aac77119c77e5a8959555851bc879ae8913":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9841ef0704c22c54e9a7c60b228a863a08e50520":["84b36aac77119c77e5a8959555851bc879ae8913"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}