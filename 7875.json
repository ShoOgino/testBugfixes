{"path":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader.ReindexingReader.ParallelLeafDirectoryReader#doClose().mjava","commits":[{"id":"4d9aa91d3fdd25528bac3b2e6115d54fc2f28753","date":1416999434,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader.ReindexingReader.ParallelLeafDirectoryReader#doClose().mjava","pathOld":"/dev/null","sourceNew":"      @Override\n      protected void doClose() throws IOException {\n        Throwable firstExc = null;\n        for (final LeafReader r : getSequentialSubReaders()) {\n          if (r instanceof ParallelLeafReader) {\n            // try to close each reader, even if an exception is thrown\n            try {\n              r.decRef();\n            } catch (Throwable t) {\n              if (firstExc == null) {\n                firstExc = t;\n              }\n            }\n          }\n        }\n        // Also close in, so it decRef's the SegmentInfos\n        try {\n          in.doClose();\n        } catch (Throwable t) {\n          if (firstExc == null) {\n            firstExc = t;\n          }\n        }\n        // throw the first exception\n        IOUtils.reThrow(firstExc);\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2","date":1493374641,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader.ReindexingReader.ParallelLeafDirectoryReader#doClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader.ReindexingReader.ParallelLeafDirectoryReader#doClose().mjava","sourceNew":"      @Override\n      protected void doClose() throws IOException {\n        Throwable firstExc = null;\n        for (final LeafReader r : getSequentialSubReaders()) {\n          if (r instanceof ParallelLeafReader) {\n            // try to close each reader, even if an exception is thrown\n            try {\n              r.decRef();\n            } catch (Throwable t) {\n              if (firstExc == null) {\n                firstExc = t;\n              }\n            }\n          }\n        }\n        // Also close in, so it decRef's the SegmentInfos\n        try {\n          in.doClose();\n        } catch (Throwable t) {\n          if (firstExc == null) {\n            firstExc = t;\n          }\n        }\n        \n        // throw the first exception\n        if (firstExc != null) {\n          throw IOUtils.rethrowAlways(firstExc);\n        }\n      }\n\n","sourceOld":"      @Override\n      protected void doClose() throws IOException {\n        Throwable firstExc = null;\n        for (final LeafReader r : getSequentialSubReaders()) {\n          if (r instanceof ParallelLeafReader) {\n            // try to close each reader, even if an exception is thrown\n            try {\n              r.decRef();\n            } catch (Throwable t) {\n              if (firstExc == null) {\n                firstExc = t;\n              }\n            }\n          }\n        }\n        // Also close in, so it decRef's the SegmentInfos\n        try {\n          in.doClose();\n        } catch (Throwable t) {\n          if (firstExc == null) {\n            firstExc = t;\n          }\n        }\n        // throw the first exception\n        IOUtils.reThrow(firstExc);\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader.ReindexingReader.ParallelLeafDirectoryReader#doClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader.ReindexingReader.ParallelLeafDirectoryReader#doClose().mjava","sourceNew":"      @Override\n      protected void doClose() throws IOException {\n        Throwable firstExc = null;\n        for (final LeafReader r : getSequentialSubReaders()) {\n          if (r instanceof ParallelLeafReader) {\n            // try to close each reader, even if an exception is thrown\n            try {\n              r.decRef();\n            } catch (Throwable t) {\n              if (firstExc == null) {\n                firstExc = t;\n              }\n            }\n          }\n        }\n        // Also close in, so it decRef's the SegmentInfos\n        try {\n          in.doClose();\n        } catch (Throwable t) {\n          if (firstExc == null) {\n            firstExc = t;\n          }\n        }\n        \n        // throw the first exception\n        if (firstExc != null) {\n          throw IOUtils.rethrowAlways(firstExc);\n        }\n      }\n\n","sourceOld":"      @Override\n      protected void doClose() throws IOException {\n        Throwable firstExc = null;\n        for (final LeafReader r : getSequentialSubReaders()) {\n          if (r instanceof ParallelLeafReader) {\n            // try to close each reader, even if an exception is thrown\n            try {\n              r.decRef();\n            } catch (Throwable t) {\n              if (firstExc == null) {\n                firstExc = t;\n              }\n            }\n          }\n        }\n        // Also close in, so it decRef's the SegmentInfos\n        try {\n          in.doClose();\n        } catch (Throwable t) {\n          if (firstExc == null) {\n            firstExc = t;\n          }\n        }\n        // throw the first exception\n        IOUtils.reThrow(firstExc);\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["4d9aa91d3fdd25528bac3b2e6115d54fc2f28753","97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"],"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2":["4d9aa91d3fdd25528bac3b2e6115d54fc2f28753"],"4d9aa91d3fdd25528bac3b2e6115d54fc2f28753":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4d9aa91d3fdd25528bac3b2e6115d54fc2f28753":["e9017cf144952056066919f1ebc7897ff9bd71b1","97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d9aa91d3fdd25528bac3b2e6115d54fc2f28753"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}