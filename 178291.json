{"path":"solr/src/test/org/apache/solr/SolrTestCaseJ4#createSort(IndexSchema,List[FldType],String[]).mjava","commits":[{"id":"0bdcfb7ac18ce2bf2cfad84f4509ef2950e695a2","date":1289765998,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/SolrTestCaseJ4#createSort(IndexSchema,List[FldType],String[]).mjava","pathOld":"/dev/null","sourceNew":"  public static Comparator<Doc> createSort(IndexSchema schema, List<FldType> fieldTypes, String[] out) {\n    StringBuilder sortSpec = new StringBuilder();\n    int nSorts = random.nextInt(4);\n    List<Comparator<Doc>> comparators = new ArrayList<Comparator<Doc>>();\n    for (int i=0; i<nSorts; i++) {\n      if (i>0) sortSpec.append(',');\n\n      int which = random.nextInt(fieldTypes.size()+2);\n      boolean asc = random.nextBoolean();\n      if (which == fieldTypes.size()) {\n        // sort by score\n        sortSpec.append(\"score\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"score\", asc, false, false));\n      } else if (which == fieldTypes.size() + 1) {\n        // sort by docid\n        sortSpec.append(\"_docid_\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"_docid_\", asc, false, false));\n      } else {\n        String field = fieldTypes.get(which).fname;\n        sortSpec.append(field).append(asc ? \" asc\" : \" desc\");\n        SchemaField sf = schema.getField(field);\n        comparators.add(createComparator(field, asc, sf.sortMissingLast(), sf.sortMissingFirst()));\n      }\n    }\n\n    out[0] = sortSpec.length() > 0 ? sortSpec.toString() : null;\n\n    if (comparators.size() == 0) {\n      // default sort is by score desc\n      comparators.add(createComparator(\"score\", false, false, false));      \n    }\n\n    return createComparator(comparators);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/SolrTestCaseJ4#createSort(IndexSchema,List[FldType],String[]).mjava","pathOld":"/dev/null","sourceNew":"  public static Comparator<Doc> createSort(IndexSchema schema, List<FldType> fieldTypes, String[] out) {\n    StringBuilder sortSpec = new StringBuilder();\n    int nSorts = random.nextInt(4);\n    List<Comparator<Doc>> comparators = new ArrayList<Comparator<Doc>>();\n    for (int i=0; i<nSorts; i++) {\n      if (i>0) sortSpec.append(',');\n\n      int which = random.nextInt(fieldTypes.size()+2);\n      boolean asc = random.nextBoolean();\n      if (which == fieldTypes.size()) {\n        // sort by score\n        sortSpec.append(\"score\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"score\", asc, false, false));\n      } else if (which == fieldTypes.size() + 1) {\n        // sort by docid\n        sortSpec.append(\"_docid_\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"_docid_\", asc, false, false));\n      } else {\n        String field = fieldTypes.get(which).fname;\n        sortSpec.append(field).append(asc ? \" asc\" : \" desc\");\n        SchemaField sf = schema.getField(field);\n        comparators.add(createComparator(field, asc, sf.sortMissingLast(), sf.sortMissingFirst()));\n      }\n    }\n\n    out[0] = sortSpec.length() > 0 ? sortSpec.toString() : null;\n\n    if (comparators.size() == 0) {\n      // default sort is by score desc\n      comparators.add(createComparator(\"score\", false, false, false));      \n    }\n\n    return createComparator(comparators);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a1f2fd9c5ec6d68e6c57de139a66673b613e13b","date":1290540872,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/SolrTestCaseJ4#createSort(IndexSchema,List[FldType],String[]).mjava","pathOld":"solr/src/test/org/apache/solr/SolrTestCaseJ4#createSort(IndexSchema,List[FldType],String[]).mjava","sourceNew":"  public static Comparator<Doc> createSort(IndexSchema schema, List<FldType> fieldTypes, String[] out) {\n    StringBuilder sortSpec = new StringBuilder();\n    int nSorts = random.nextInt(4);\n    List<Comparator<Doc>> comparators = new ArrayList<Comparator<Doc>>();\n    for (int i=0; i<nSorts; i++) {\n      if (i>0) sortSpec.append(',');\n\n      int which = random.nextInt(fieldTypes.size()+2);\n      boolean asc = random.nextBoolean();\n      if (which == fieldTypes.size()) {\n        // sort by score\n        sortSpec.append(\"score\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"score\", asc, false, false, false));\n      } else if (which == fieldTypes.size() + 1) {\n        // sort by docid\n        sortSpec.append(\"_docid_\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"_docid_\", asc, false, false, false));\n      } else {\n        String field = fieldTypes.get(which).fname;\n        sortSpec.append(field).append(asc ? \" asc\" : \" desc\");\n        SchemaField sf = schema.getField(field);\n        comparators.add(createComparator(field, asc, sf.sortMissingLast(), sf.sortMissingFirst(), !(sf.sortMissingLast()||sf.sortMissingFirst()) ));\n      }\n    }\n\n    out[0] = sortSpec.length() > 0 ? sortSpec.toString() : null;\n\n    if (comparators.size() == 0) {\n      // default sort is by score desc\n      comparators.add(createComparator(\"score\", false, false, false, false));      \n    }\n\n    return createComparator(comparators);\n  }\n\n","sourceOld":"  public static Comparator<Doc> createSort(IndexSchema schema, List<FldType> fieldTypes, String[] out) {\n    StringBuilder sortSpec = new StringBuilder();\n    int nSorts = random.nextInt(4);\n    List<Comparator<Doc>> comparators = new ArrayList<Comparator<Doc>>();\n    for (int i=0; i<nSorts; i++) {\n      if (i>0) sortSpec.append(',');\n\n      int which = random.nextInt(fieldTypes.size()+2);\n      boolean asc = random.nextBoolean();\n      if (which == fieldTypes.size()) {\n        // sort by score\n        sortSpec.append(\"score\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"score\", asc, false, false));\n      } else if (which == fieldTypes.size() + 1) {\n        // sort by docid\n        sortSpec.append(\"_docid_\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"_docid_\", asc, false, false));\n      } else {\n        String field = fieldTypes.get(which).fname;\n        sortSpec.append(field).append(asc ? \" asc\" : \" desc\");\n        SchemaField sf = schema.getField(field);\n        comparators.add(createComparator(field, asc, sf.sortMissingLast(), sf.sortMissingFirst()));\n      }\n    }\n\n    out[0] = sortSpec.length() > 0 ? sortSpec.toString() : null;\n\n    if (comparators.size() == 0) {\n      // default sort is by score desc\n      comparators.add(createComparator(\"score\", false, false, false));      \n    }\n\n    return createComparator(comparators);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/SolrTestCaseJ4#createSort(IndexSchema,List[FldType],String[]).mjava","pathOld":"solr/src/test/org/apache/solr/SolrTestCaseJ4#createSort(IndexSchema,List[FldType],String[]).mjava","sourceNew":"  public static Comparator<Doc> createSort(IndexSchema schema, List<FldType> fieldTypes, String[] out) {\n    StringBuilder sortSpec = new StringBuilder();\n    int nSorts = random.nextInt(4);\n    List<Comparator<Doc>> comparators = new ArrayList<Comparator<Doc>>();\n    for (int i=0; i<nSorts; i++) {\n      if (i>0) sortSpec.append(',');\n\n      int which = random.nextInt(fieldTypes.size()+2);\n      boolean asc = random.nextBoolean();\n      if (which == fieldTypes.size()) {\n        // sort by score\n        sortSpec.append(\"score\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"score\", asc, false, false, false));\n      } else if (which == fieldTypes.size() + 1) {\n        // sort by docid\n        sortSpec.append(\"_docid_\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"_docid_\", asc, false, false, false));\n      } else {\n        String field = fieldTypes.get(which).fname;\n        sortSpec.append(field).append(asc ? \" asc\" : \" desc\");\n        SchemaField sf = schema.getField(field);\n        comparators.add(createComparator(field, asc, sf.sortMissingLast(), sf.sortMissingFirst(), !(sf.sortMissingLast()||sf.sortMissingFirst()) ));\n      }\n    }\n\n    out[0] = sortSpec.length() > 0 ? sortSpec.toString() : null;\n\n    if (comparators.size() == 0) {\n      // default sort is by score desc\n      comparators.add(createComparator(\"score\", false, false, false, false));      \n    }\n\n    return createComparator(comparators);\n  }\n\n","sourceOld":"  public static Comparator<Doc> createSort(IndexSchema schema, List<FldType> fieldTypes, String[] out) {\n    StringBuilder sortSpec = new StringBuilder();\n    int nSorts = random.nextInt(4);\n    List<Comparator<Doc>> comparators = new ArrayList<Comparator<Doc>>();\n    for (int i=0; i<nSorts; i++) {\n      if (i>0) sortSpec.append(',');\n\n      int which = random.nextInt(fieldTypes.size()+2);\n      boolean asc = random.nextBoolean();\n      if (which == fieldTypes.size()) {\n        // sort by score\n        sortSpec.append(\"score\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"score\", asc, false, false));\n      } else if (which == fieldTypes.size() + 1) {\n        // sort by docid\n        sortSpec.append(\"_docid_\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"_docid_\", asc, false, false));\n      } else {\n        String field = fieldTypes.get(which).fname;\n        sortSpec.append(field).append(asc ? \" asc\" : \" desc\");\n        SchemaField sf = schema.getField(field);\n        comparators.add(createComparator(field, asc, sf.sortMissingLast(), sf.sortMissingFirst()));\n      }\n    }\n\n    out[0] = sortSpec.length() > 0 ? sortSpec.toString() : null;\n\n    if (comparators.size() == 0) {\n      // default sort is by score desc\n      comparators.add(createComparator(\"score\", false, false, false));      \n    }\n\n    return createComparator(comparators);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/SolrTestCaseJ4#createSort(IndexSchema,List[FldType],String[]).mjava","pathOld":"/dev/null","sourceNew":"  public static Comparator<Doc> createSort(IndexSchema schema, List<FldType> fieldTypes, String[] out) {\n    StringBuilder sortSpec = new StringBuilder();\n    int nSorts = random.nextInt(4);\n    List<Comparator<Doc>> comparators = new ArrayList<Comparator<Doc>>();\n    for (int i=0; i<nSorts; i++) {\n      if (i>0) sortSpec.append(',');\n\n      int which = random.nextInt(fieldTypes.size()+2);\n      boolean asc = random.nextBoolean();\n      if (which == fieldTypes.size()) {\n        // sort by score\n        sortSpec.append(\"score\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"score\", asc, false, false, false));\n      } else if (which == fieldTypes.size() + 1) {\n        // sort by docid\n        sortSpec.append(\"_docid_\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"_docid_\", asc, false, false, false));\n      } else {\n        String field = fieldTypes.get(which).fname;\n        sortSpec.append(field).append(asc ? \" asc\" : \" desc\");\n        SchemaField sf = schema.getField(field);\n        comparators.add(createComparator(field, asc, sf.sortMissingLast(), sf.sortMissingFirst(), !(sf.sortMissingLast()||sf.sortMissingFirst()) ));\n      }\n    }\n\n    out[0] = sortSpec.length() > 0 ? sortSpec.toString() : null;\n\n    if (comparators.size() == 0) {\n      // default sort is by score desc\n      comparators.add(createComparator(\"score\", false, false, false, false));      \n    }\n\n    return createComparator(comparators);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d20d5e40789b1c42f4f926e3174b271256c43657","date":1301641092,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test-framework/org/apache/solr/SolrTestCaseJ4#createSort(IndexSchema,List[FldType],String[]).mjava","pathOld":"solr/src/test/org/apache/solr/SolrTestCaseJ4#createSort(IndexSchema,List[FldType],String[]).mjava","sourceNew":"  public static Comparator<Doc> createSort(IndexSchema schema, List<FldType> fieldTypes, String[] out) {\n    StringBuilder sortSpec = new StringBuilder();\n    int nSorts = random.nextInt(4);\n    List<Comparator<Doc>> comparators = new ArrayList<Comparator<Doc>>();\n    for (int i=0; i<nSorts; i++) {\n      if (i>0) sortSpec.append(',');\n\n      int which = random.nextInt(fieldTypes.size()+2);\n      boolean asc = random.nextBoolean();\n      if (which == fieldTypes.size()) {\n        // sort by score\n        sortSpec.append(\"score\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"score\", asc, false, false, false));\n      } else if (which == fieldTypes.size() + 1) {\n        // sort by docid\n        sortSpec.append(\"_docid_\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"_docid_\", asc, false, false, false));\n      } else {\n        String field = fieldTypes.get(which).fname;\n        sortSpec.append(field).append(asc ? \" asc\" : \" desc\");\n        SchemaField sf = schema.getField(field);\n        comparators.add(createComparator(field, asc, sf.sortMissingLast(), sf.sortMissingFirst(), !(sf.sortMissingLast()||sf.sortMissingFirst()) ));\n      }\n    }\n\n    out[0] = sortSpec.length() > 0 ? sortSpec.toString() : null;\n\n    if (comparators.size() == 0) {\n      // default sort is by score desc\n      comparators.add(createComparator(\"score\", false, false, false, false));      \n    }\n\n    return createComparator(comparators);\n  }\n\n","sourceOld":"  public static Comparator<Doc> createSort(IndexSchema schema, List<FldType> fieldTypes, String[] out) {\n    StringBuilder sortSpec = new StringBuilder();\n    int nSorts = random.nextInt(4);\n    List<Comparator<Doc>> comparators = new ArrayList<Comparator<Doc>>();\n    for (int i=0; i<nSorts; i++) {\n      if (i>0) sortSpec.append(',');\n\n      int which = random.nextInt(fieldTypes.size()+2);\n      boolean asc = random.nextBoolean();\n      if (which == fieldTypes.size()) {\n        // sort by score\n        sortSpec.append(\"score\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"score\", asc, false, false, false));\n      } else if (which == fieldTypes.size() + 1) {\n        // sort by docid\n        sortSpec.append(\"_docid_\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"_docid_\", asc, false, false, false));\n      } else {\n        String field = fieldTypes.get(which).fname;\n        sortSpec.append(field).append(asc ? \" asc\" : \" desc\");\n        SchemaField sf = schema.getField(field);\n        comparators.add(createComparator(field, asc, sf.sortMissingLast(), sf.sortMissingFirst(), !(sf.sortMissingLast()||sf.sortMissingFirst()) ));\n      }\n    }\n\n    out[0] = sortSpec.length() > 0 ? sortSpec.toString() : null;\n\n    if (comparators.size() == 0) {\n      // default sort is by score desc\n      comparators.add(createComparator(\"score\", false, false, false, false));      \n    }\n\n    return createComparator(comparators);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b09c7419b92e982a901698cb401ce22ac35e4b04","date":1301668869,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/src/test-framework/org/apache/solr/SolrTestCaseJ4#createSort(IndexSchema,List[FldType],String[]).mjava","pathOld":"solr/src/test/org/apache/solr/SolrTestCaseJ4#createSort(IndexSchema,List[FldType],String[]).mjava","sourceNew":"  public static Comparator<Doc> createSort(IndexSchema schema, List<FldType> fieldTypes, String[] out) {\n    StringBuilder sortSpec = new StringBuilder();\n    int nSorts = random.nextInt(4);\n    List<Comparator<Doc>> comparators = new ArrayList<Comparator<Doc>>();\n    for (int i=0; i<nSorts; i++) {\n      if (i>0) sortSpec.append(',');\n\n      int which = random.nextInt(fieldTypes.size()+2);\n      boolean asc = random.nextBoolean();\n      if (which == fieldTypes.size()) {\n        // sort by score\n        sortSpec.append(\"score\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"score\", asc, false, false, false));\n      } else if (which == fieldTypes.size() + 1) {\n        // sort by docid\n        sortSpec.append(\"_docid_\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"_docid_\", asc, false, false, false));\n      } else {\n        String field = fieldTypes.get(which).fname;\n        sortSpec.append(field).append(asc ? \" asc\" : \" desc\");\n        SchemaField sf = schema.getField(field);\n        comparators.add(createComparator(field, asc, sf.sortMissingLast(), sf.sortMissingFirst(), !(sf.sortMissingLast()||sf.sortMissingFirst()) ));\n      }\n    }\n\n    out[0] = sortSpec.length() > 0 ? sortSpec.toString() : null;\n\n    if (comparators.size() == 0) {\n      // default sort is by score desc\n      comparators.add(createComparator(\"score\", false, false, false, false));      \n    }\n\n    return createComparator(comparators);\n  }\n\n","sourceOld":"  public static Comparator<Doc> createSort(IndexSchema schema, List<FldType> fieldTypes, String[] out) {\n    StringBuilder sortSpec = new StringBuilder();\n    int nSorts = random.nextInt(4);\n    List<Comparator<Doc>> comparators = new ArrayList<Comparator<Doc>>();\n    for (int i=0; i<nSorts; i++) {\n      if (i>0) sortSpec.append(',');\n\n      int which = random.nextInt(fieldTypes.size()+2);\n      boolean asc = random.nextBoolean();\n      if (which == fieldTypes.size()) {\n        // sort by score\n        sortSpec.append(\"score\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"score\", asc, false, false, false));\n      } else if (which == fieldTypes.size() + 1) {\n        // sort by docid\n        sortSpec.append(\"_docid_\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"_docid_\", asc, false, false, false));\n      } else {\n        String field = fieldTypes.get(which).fname;\n        sortSpec.append(field).append(asc ? \" asc\" : \" desc\");\n        SchemaField sf = schema.getField(field);\n        comparators.add(createComparator(field, asc, sf.sortMissingLast(), sf.sortMissingFirst(), !(sf.sortMissingLast()||sf.sortMissingFirst()) ));\n      }\n    }\n\n    out[0] = sortSpec.length() > 0 ? sortSpec.toString() : null;\n\n    if (comparators.size() == 0) {\n      // default sort is by score desc\n      comparators.add(createComparator(\"score\", false, false, false, false));      \n    }\n\n    return createComparator(comparators);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test-framework/org/apache/solr/SolrTestCaseJ4#createSort(IndexSchema,List[FldType],String[]).mjava","pathOld":"solr/src/test/org/apache/solr/SolrTestCaseJ4#createSort(IndexSchema,List[FldType],String[]).mjava","sourceNew":"  public static Comparator<Doc> createSort(IndexSchema schema, List<FldType> fieldTypes, String[] out) {\n    StringBuilder sortSpec = new StringBuilder();\n    int nSorts = random.nextInt(4);\n    List<Comparator<Doc>> comparators = new ArrayList<Comparator<Doc>>();\n    for (int i=0; i<nSorts; i++) {\n      if (i>0) sortSpec.append(',');\n\n      int which = random.nextInt(fieldTypes.size()+2);\n      boolean asc = random.nextBoolean();\n      if (which == fieldTypes.size()) {\n        // sort by score\n        sortSpec.append(\"score\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"score\", asc, false, false, false));\n      } else if (which == fieldTypes.size() + 1) {\n        // sort by docid\n        sortSpec.append(\"_docid_\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"_docid_\", asc, false, false, false));\n      } else {\n        String field = fieldTypes.get(which).fname;\n        sortSpec.append(field).append(asc ? \" asc\" : \" desc\");\n        SchemaField sf = schema.getField(field);\n        comparators.add(createComparator(field, asc, sf.sortMissingLast(), sf.sortMissingFirst(), !(sf.sortMissingLast()||sf.sortMissingFirst()) ));\n      }\n    }\n\n    out[0] = sortSpec.length() > 0 ? sortSpec.toString() : null;\n\n    if (comparators.size() == 0) {\n      // default sort is by score desc\n      comparators.add(createComparator(\"score\", false, false, false, false));      \n    }\n\n    return createComparator(comparators);\n  }\n\n","sourceOld":"  public static Comparator<Doc> createSort(IndexSchema schema, List<FldType> fieldTypes, String[] out) {\n    StringBuilder sortSpec = new StringBuilder();\n    int nSorts = random.nextInt(4);\n    List<Comparator<Doc>> comparators = new ArrayList<Comparator<Doc>>();\n    for (int i=0; i<nSorts; i++) {\n      if (i>0) sortSpec.append(',');\n\n      int which = random.nextInt(fieldTypes.size()+2);\n      boolean asc = random.nextBoolean();\n      if (which == fieldTypes.size()) {\n        // sort by score\n        sortSpec.append(\"score\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"score\", asc, false, false, false));\n      } else if (which == fieldTypes.size() + 1) {\n        // sort by docid\n        sortSpec.append(\"_docid_\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"_docid_\", asc, false, false, false));\n      } else {\n        String field = fieldTypes.get(which).fname;\n        sortSpec.append(field).append(asc ? \" asc\" : \" desc\");\n        SchemaField sf = schema.getField(field);\n        comparators.add(createComparator(field, asc, sf.sortMissingLast(), sf.sortMissingFirst(), !(sf.sortMissingLast()||sf.sortMissingFirst()) ));\n      }\n    }\n\n    out[0] = sortSpec.length() > 0 ? sortSpec.toString() : null;\n\n    if (comparators.size() == 0) {\n      // default sort is by score desc\n      comparators.add(createComparator(\"score\", false, false, false, false));      \n    }\n\n    return createComparator(comparators);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test-framework/org/apache/solr/SolrTestCaseJ4#createSort(IndexSchema,List[FldType],String[]).mjava","pathOld":"solr/src/test/org/apache/solr/SolrTestCaseJ4#createSort(IndexSchema,List[FldType],String[]).mjava","sourceNew":"  public static Comparator<Doc> createSort(IndexSchema schema, List<FldType> fieldTypes, String[] out) {\n    StringBuilder sortSpec = new StringBuilder();\n    int nSorts = random.nextInt(4);\n    List<Comparator<Doc>> comparators = new ArrayList<Comparator<Doc>>();\n    for (int i=0; i<nSorts; i++) {\n      if (i>0) sortSpec.append(',');\n\n      int which = random.nextInt(fieldTypes.size()+2);\n      boolean asc = random.nextBoolean();\n      if (which == fieldTypes.size()) {\n        // sort by score\n        sortSpec.append(\"score\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"score\", asc, false, false, false));\n      } else if (which == fieldTypes.size() + 1) {\n        // sort by docid\n        sortSpec.append(\"_docid_\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"_docid_\", asc, false, false, false));\n      } else {\n        String field = fieldTypes.get(which).fname;\n        sortSpec.append(field).append(asc ? \" asc\" : \" desc\");\n        SchemaField sf = schema.getField(field);\n        comparators.add(createComparator(field, asc, sf.sortMissingLast(), sf.sortMissingFirst(), !(sf.sortMissingLast()||sf.sortMissingFirst()) ));\n      }\n    }\n\n    out[0] = sortSpec.length() > 0 ? sortSpec.toString() : null;\n\n    if (comparators.size() == 0) {\n      // default sort is by score desc\n      comparators.add(createComparator(\"score\", false, false, false, false));      \n    }\n\n    return createComparator(comparators);\n  }\n\n","sourceOld":"  public static Comparator<Doc> createSort(IndexSchema schema, List<FldType> fieldTypes, String[] out) {\n    StringBuilder sortSpec = new StringBuilder();\n    int nSorts = random.nextInt(4);\n    List<Comparator<Doc>> comparators = new ArrayList<Comparator<Doc>>();\n    for (int i=0; i<nSorts; i++) {\n      if (i>0) sortSpec.append(',');\n\n      int which = random.nextInt(fieldTypes.size()+2);\n      boolean asc = random.nextBoolean();\n      if (which == fieldTypes.size()) {\n        // sort by score\n        sortSpec.append(\"score\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"score\", asc, false, false, false));\n      } else if (which == fieldTypes.size() + 1) {\n        // sort by docid\n        sortSpec.append(\"_docid_\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"_docid_\", asc, false, false, false));\n      } else {\n        String field = fieldTypes.get(which).fname;\n        sortSpec.append(field).append(asc ? \" asc\" : \" desc\");\n        SchemaField sf = schema.getField(field);\n        comparators.add(createComparator(field, asc, sf.sortMissingLast(), sf.sortMissingFirst(), !(sf.sortMissingLast()||sf.sortMissingFirst()) ));\n      }\n    }\n\n    out[0] = sortSpec.length() > 0 ? sortSpec.toString() : null;\n\n    if (comparators.size() == 0) {\n      // default sort is by score desc\n      comparators.add(createComparator(\"score\", false, false, false, false));      \n    }\n\n    return createComparator(comparators);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0bdcfb7ac18ce2bf2cfad84f4509ef2950e695a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0bdcfb7ac18ce2bf2cfad84f4509ef2950e695a2"],"1a1f2fd9c5ec6d68e6c57de139a66673b613e13b":["0bdcfb7ac18ce2bf2cfad84f4509ef2950e695a2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["3bb13258feba31ab676502787ab2e1779f129b7a","b09c7419b92e982a901698cb401ce22ac35e4b04"],"b09c7419b92e982a901698cb401ce22ac35e4b04":["1a1f2fd9c5ec6d68e6c57de139a66673b613e13b"],"d20d5e40789b1c42f4f926e3174b271256c43657":["1a1f2fd9c5ec6d68e6c57de139a66673b613e13b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1a1f2fd9c5ec6d68e6c57de139a66673b613e13b"],"45669a651c970812a680841b97a77cce06af559f":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b09c7419b92e982a901698cb401ce22ac35e4b04"],"3bb13258feba31ab676502787ab2e1779f129b7a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","1a1f2fd9c5ec6d68e6c57de139a66673b613e13b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b09c7419b92e982a901698cb401ce22ac35e4b04"]},"commit2Childs":{"0bdcfb7ac18ce2bf2cfad84f4509ef2950e695a2":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","1a1f2fd9c5ec6d68e6c57de139a66673b613e13b"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["3bb13258feba31ab676502787ab2e1779f129b7a"],"1a1f2fd9c5ec6d68e6c57de139a66673b613e13b":["b09c7419b92e982a901698cb401ce22ac35e4b04","d20d5e40789b1c42f4f926e3174b271256c43657","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0bdcfb7ac18ce2bf2cfad84f4509ef2950e695a2","9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b09c7419b92e982a901698cb401ce22ac35e4b04":["135621f3a0670a9394eb563224a3b76cc4dddc0f","45669a651c970812a680841b97a77cce06af559f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d20d5e40789b1c42f4f926e3174b271256c43657":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["45669a651c970812a680841b97a77cce06af559f"],"45669a651c970812a680841b97a77cce06af559f":[],"3bb13258feba31ab676502787ab2e1779f129b7a":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","d20d5e40789b1c42f4f926e3174b271256c43657","45669a651c970812a680841b97a77cce06af559f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}