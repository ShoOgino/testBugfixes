{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40IntersectTermsEnumFrame#load(BytesRef).mjava","commits":[{"id":"0628077afea69a2955260949478afabab8e500d8","date":1413915332,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40IntersectTermsEnumFrame#load(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  void load(BytesRef frameIndexData) throws IOException {\n\n    // if (DEBUG) System.out.println(\"    load fp=\" + fp + \" fpOrig=\" + fpOrig + \" frameIndexData=\" + frameIndexData + \" trans=\" + (transitions.length != 0 ? transitions[0] : \"n/a\" + \" state=\" + state));\n\n    if (frameIndexData != null && transitionCount != 0) {\n      // Floor frame\n      if (floorData.length < frameIndexData.length) {\n        this.floorData = new byte[ArrayUtil.oversize(frameIndexData.length, 1)];\n      }\n      System.arraycopy(frameIndexData.bytes, frameIndexData.offset, floorData, 0, frameIndexData.length);\n      floorDataReader.reset(floorData, 0, frameIndexData.length);\n      // Skip first long -- has redundant fp, hasTerms\n      // flag, isFloor flag\n      final long code = floorDataReader.readVLong();\n      if ((code & Lucene40BlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR) != 0) {\n        numFollowFloorBlocks = floorDataReader.readVInt();\n        nextFloorLabel = floorDataReader.readByte() & 0xff;\n        // if (DEBUG) System.out.println(\"    numFollowFloorBlocks=\" + numFollowFloorBlocks + \" nextFloorLabel=\" + nextFloorLabel);\n\n        // If current state is accept, we must process\n        // first block in case it has empty suffix:\n        if (!ite.runAutomaton.isAccept(state)) {\n          // Maybe skip floor blocks:\n          assert transitionIndex == 0: \"transitionIndex=\" + transitionIndex;\n          while (numFollowFloorBlocks != 0 && nextFloorLabel <= transition.min) {\n            fp = fpOrig + (floorDataReader.readVLong() >>> 1);\n            numFollowFloorBlocks--;\n            // if (DEBUG) System.out.println(\"    skip floor block!  nextFloorLabel=\" + (char) nextFloorLabel + \" vs target=\" + (char) transitions[0].getMin() + \" newFP=\" + fp + \" numFollowFloorBlocks=\" + numFollowFloorBlocks);\n            if (numFollowFloorBlocks != 0) {\n              nextFloorLabel = floorDataReader.readByte() & 0xff;\n            } else {\n              nextFloorLabel = 256;\n            }\n          }\n        }\n      }\n    }\n\n    ite.in.seek(fp);\n    int code = ite.in.readVInt();\n    entCount = code >>> 1;\n    assert entCount > 0;\n    isLastInFloor = (code & 1) != 0;\n\n    // term suffixes:\n    code = ite.in.readVInt();\n    isLeafBlock = (code & 1) != 0;\n    int numBytes = code >>> 1;\n    // if (DEBUG) System.out.println(\"      entCount=\" + entCount + \" lastInFloor?=\" + isLastInFloor + \" leafBlock?=\" + isLeafBlock + \" numSuffixBytes=\" + numBytes);\n    if (suffixBytes.length < numBytes) {\n      suffixBytes = new byte[ArrayUtil.oversize(numBytes, 1)];\n    }\n    ite.in.readBytes(suffixBytes, 0, numBytes);\n    suffixesReader.reset(suffixBytes, 0, numBytes);\n\n    // stats\n    numBytes = ite.in.readVInt();\n    if (statBytes.length < numBytes) {\n      statBytes = new byte[ArrayUtil.oversize(numBytes, 1)];\n    }\n    ite.in.readBytes(statBytes, 0, numBytes);\n    statsReader.reset(statBytes, 0, numBytes);\n    metaDataUpto = 0;\n\n    termState.termBlockOrd = 0;\n    nextEnt = 0;\n         \n    // metadata\n    numBytes = ite.in.readVInt();\n    if (bytes == null) {\n      bytes = new byte[ArrayUtil.oversize(numBytes, 1)];\n      bytesReader = new ByteArrayDataInput();\n    } else if (bytes.length < numBytes) {\n      bytes = new byte[ArrayUtil.oversize(numBytes, 1)];\n    }\n    ite.in.readBytes(bytes, 0, numBytes);\n    bytesReader.reset(bytes, 0, numBytes);\n\n    if (!isLastInFloor) {\n      // Sub-blocks of a single floor block are always\n      // written one after another -- tail recurse:\n      fpEnd = ite.in.getFilePointer();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6d238816bcdf9bbe4ec886226d89bd93834eb7e","date":1413925889,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40IntersectTermsEnumFrame#load(BytesRef).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40IntersectTermsEnumFrame#load(BytesRef).mjava","sourceNew":"  void load(BytesRef frameIndexData) throws IOException {\n\n    // if (DEBUG) System.out.println(\"    load fp=\" + fp + \" fpOrig=\" + fpOrig + \" frameIndexData=\" + frameIndexData + \" trans=\" + (transitions.length != 0 ? transitions[0] : \"n/a\" + \" state=\" + state));\n\n    if (frameIndexData != null && transitionCount != 0) {\n      // Floor frame\n      if (floorData.length < frameIndexData.length) {\n        this.floorData = new byte[ArrayUtil.oversize(frameIndexData.length, 1)];\n      }\n      System.arraycopy(frameIndexData.bytes, frameIndexData.offset, floorData, 0, frameIndexData.length);\n      floorDataReader.reset(floorData, 0, frameIndexData.length);\n      // Skip first long -- has redundant fp, hasTerms\n      // flag, isFloor flag\n      final long code = floorDataReader.readVLong();\n      if ((code & Lucene40BlockTreeTermsReader.OUTPUT_FLAG_IS_FLOOR) != 0) {\n        numFollowFloorBlocks = floorDataReader.readVInt();\n        nextFloorLabel = floorDataReader.readByte() & 0xff;\n        // if (DEBUG) System.out.println(\"    numFollowFloorBlocks=\" + numFollowFloorBlocks + \" nextFloorLabel=\" + nextFloorLabel);\n\n        // If current state is accept, we must process\n        // first block in case it has empty suffix:\n        if (!ite.runAutomaton.isAccept(state)) {\n          // Maybe skip floor blocks:\n          assert transitionIndex == 0: \"transitionIndex=\" + transitionIndex;\n          while (numFollowFloorBlocks != 0 && nextFloorLabel <= transition.min) {\n            fp = fpOrig + (floorDataReader.readVLong() >>> 1);\n            numFollowFloorBlocks--;\n            // if (DEBUG) System.out.println(\"    skip floor block!  nextFloorLabel=\" + (char) nextFloorLabel + \" vs target=\" + (char) transitions[0].getMin() + \" newFP=\" + fp + \" numFollowFloorBlocks=\" + numFollowFloorBlocks);\n            if (numFollowFloorBlocks != 0) {\n              nextFloorLabel = floorDataReader.readByte() & 0xff;\n            } else {\n              nextFloorLabel = 256;\n            }\n          }\n        }\n      }\n    }\n\n    ite.in.seek(fp);\n    int code = ite.in.readVInt();\n    entCount = code >>> 1;\n    assert entCount > 0;\n    isLastInFloor = (code & 1) != 0;\n\n    // term suffixes:\n    code = ite.in.readVInt();\n    isLeafBlock = (code & 1) != 0;\n    int numBytes = code >>> 1;\n    // if (DEBUG) System.out.println(\"      entCount=\" + entCount + \" lastInFloor?=\" + isLastInFloor + \" leafBlock?=\" + isLeafBlock + \" numSuffixBytes=\" + numBytes);\n    if (suffixBytes.length < numBytes) {\n      suffixBytes = new byte[ArrayUtil.oversize(numBytes, 1)];\n    }\n    ite.in.readBytes(suffixBytes, 0, numBytes);\n    suffixesReader.reset(suffixBytes, 0, numBytes);\n\n    // stats\n    numBytes = ite.in.readVInt();\n    if (statBytes.length < numBytes) {\n      statBytes = new byte[ArrayUtil.oversize(numBytes, 1)];\n    }\n    ite.in.readBytes(statBytes, 0, numBytes);\n    statsReader.reset(statBytes, 0, numBytes);\n    metaDataUpto = 0;\n\n    termState.termBlockOrd = 0;\n    nextEnt = 0;\n         \n    // metadata\n    numBytes = ite.in.readVInt();\n    if (bytes == null) {\n      bytes = new byte[ArrayUtil.oversize(numBytes, 1)];\n      bytesReader = new ByteArrayDataInput();\n    } else if (bytes.length < numBytes) {\n      bytes = new byte[ArrayUtil.oversize(numBytes, 1)];\n    }\n    ite.in.readBytes(bytes, 0, numBytes);\n    bytesReader.reset(bytes, 0, numBytes);\n\n    if (!isLastInFloor) {\n      // Sub-blocks of a single floor block are always\n      // written one after another -- tail recurse:\n      fpEnd = ite.in.getFilePointer();\n    }\n  }\n\n","sourceOld":"  void load(BytesRef frameIndexData) throws IOException {\n\n    // if (DEBUG) System.out.println(\"    load fp=\" + fp + \" fpOrig=\" + fpOrig + \" frameIndexData=\" + frameIndexData + \" trans=\" + (transitions.length != 0 ? transitions[0] : \"n/a\" + \" state=\" + state));\n\n    if (frameIndexData != null && transitionCount != 0) {\n      // Floor frame\n      if (floorData.length < frameIndexData.length) {\n        this.floorData = new byte[ArrayUtil.oversize(frameIndexData.length, 1)];\n      }\n      System.arraycopy(frameIndexData.bytes, frameIndexData.offset, floorData, 0, frameIndexData.length);\n      floorDataReader.reset(floorData, 0, frameIndexData.length);\n      // Skip first long -- has redundant fp, hasTerms\n      // flag, isFloor flag\n      final long code = floorDataReader.readVLong();\n      if ((code & Lucene40BlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR) != 0) {\n        numFollowFloorBlocks = floorDataReader.readVInt();\n        nextFloorLabel = floorDataReader.readByte() & 0xff;\n        // if (DEBUG) System.out.println(\"    numFollowFloorBlocks=\" + numFollowFloorBlocks + \" nextFloorLabel=\" + nextFloorLabel);\n\n        // If current state is accept, we must process\n        // first block in case it has empty suffix:\n        if (!ite.runAutomaton.isAccept(state)) {\n          // Maybe skip floor blocks:\n          assert transitionIndex == 0: \"transitionIndex=\" + transitionIndex;\n          while (numFollowFloorBlocks != 0 && nextFloorLabel <= transition.min) {\n            fp = fpOrig + (floorDataReader.readVLong() >>> 1);\n            numFollowFloorBlocks--;\n            // if (DEBUG) System.out.println(\"    skip floor block!  nextFloorLabel=\" + (char) nextFloorLabel + \" vs target=\" + (char) transitions[0].getMin() + \" newFP=\" + fp + \" numFollowFloorBlocks=\" + numFollowFloorBlocks);\n            if (numFollowFloorBlocks != 0) {\n              nextFloorLabel = floorDataReader.readByte() & 0xff;\n            } else {\n              nextFloorLabel = 256;\n            }\n          }\n        }\n      }\n    }\n\n    ite.in.seek(fp);\n    int code = ite.in.readVInt();\n    entCount = code >>> 1;\n    assert entCount > 0;\n    isLastInFloor = (code & 1) != 0;\n\n    // term suffixes:\n    code = ite.in.readVInt();\n    isLeafBlock = (code & 1) != 0;\n    int numBytes = code >>> 1;\n    // if (DEBUG) System.out.println(\"      entCount=\" + entCount + \" lastInFloor?=\" + isLastInFloor + \" leafBlock?=\" + isLeafBlock + \" numSuffixBytes=\" + numBytes);\n    if (suffixBytes.length < numBytes) {\n      suffixBytes = new byte[ArrayUtil.oversize(numBytes, 1)];\n    }\n    ite.in.readBytes(suffixBytes, 0, numBytes);\n    suffixesReader.reset(suffixBytes, 0, numBytes);\n\n    // stats\n    numBytes = ite.in.readVInt();\n    if (statBytes.length < numBytes) {\n      statBytes = new byte[ArrayUtil.oversize(numBytes, 1)];\n    }\n    ite.in.readBytes(statBytes, 0, numBytes);\n    statsReader.reset(statBytes, 0, numBytes);\n    metaDataUpto = 0;\n\n    termState.termBlockOrd = 0;\n    nextEnt = 0;\n         \n    // metadata\n    numBytes = ite.in.readVInt();\n    if (bytes == null) {\n      bytes = new byte[ArrayUtil.oversize(numBytes, 1)];\n      bytesReader = new ByteArrayDataInput();\n    } else if (bytes.length < numBytes) {\n      bytes = new byte[ArrayUtil.oversize(numBytes, 1)];\n    }\n    ite.in.readBytes(bytes, 0, numBytes);\n    bytesReader.reset(bytes, 0, numBytes);\n\n    if (!isLastInFloor) {\n      // Sub-blocks of a single floor block are always\n      // written one after another -- tail recurse:\n      fpEnd = ite.in.getFilePointer();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40IntersectTermsEnumFrame#load(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  void load(BytesRef frameIndexData) throws IOException {\n\n    // if (DEBUG) System.out.println(\"    load fp=\" + fp + \" fpOrig=\" + fpOrig + \" frameIndexData=\" + frameIndexData + \" trans=\" + (transitions.length != 0 ? transitions[0] : \"n/a\" + \" state=\" + state));\n\n    if (frameIndexData != null && transitionCount != 0) {\n      // Floor frame\n      if (floorData.length < frameIndexData.length) {\n        this.floorData = new byte[ArrayUtil.oversize(frameIndexData.length, 1)];\n      }\n      System.arraycopy(frameIndexData.bytes, frameIndexData.offset, floorData, 0, frameIndexData.length);\n      floorDataReader.reset(floorData, 0, frameIndexData.length);\n      // Skip first long -- has redundant fp, hasTerms\n      // flag, isFloor flag\n      final long code = floorDataReader.readVLong();\n      if ((code & Lucene40BlockTreeTermsReader.OUTPUT_FLAG_IS_FLOOR) != 0) {\n        numFollowFloorBlocks = floorDataReader.readVInt();\n        nextFloorLabel = floorDataReader.readByte() & 0xff;\n        // if (DEBUG) System.out.println(\"    numFollowFloorBlocks=\" + numFollowFloorBlocks + \" nextFloorLabel=\" + nextFloorLabel);\n\n        // If current state is accept, we must process\n        // first block in case it has empty suffix:\n        if (!ite.runAutomaton.isAccept(state)) {\n          // Maybe skip floor blocks:\n          assert transitionIndex == 0: \"transitionIndex=\" + transitionIndex;\n          while (numFollowFloorBlocks != 0 && nextFloorLabel <= transition.min) {\n            fp = fpOrig + (floorDataReader.readVLong() >>> 1);\n            numFollowFloorBlocks--;\n            // if (DEBUG) System.out.println(\"    skip floor block!  nextFloorLabel=\" + (char) nextFloorLabel + \" vs target=\" + (char) transitions[0].getMin() + \" newFP=\" + fp + \" numFollowFloorBlocks=\" + numFollowFloorBlocks);\n            if (numFollowFloorBlocks != 0) {\n              nextFloorLabel = floorDataReader.readByte() & 0xff;\n            } else {\n              nextFloorLabel = 256;\n            }\n          }\n        }\n      }\n    }\n\n    ite.in.seek(fp);\n    int code = ite.in.readVInt();\n    entCount = code >>> 1;\n    assert entCount > 0;\n    isLastInFloor = (code & 1) != 0;\n\n    // term suffixes:\n    code = ite.in.readVInt();\n    isLeafBlock = (code & 1) != 0;\n    int numBytes = code >>> 1;\n    // if (DEBUG) System.out.println(\"      entCount=\" + entCount + \" lastInFloor?=\" + isLastInFloor + \" leafBlock?=\" + isLeafBlock + \" numSuffixBytes=\" + numBytes);\n    if (suffixBytes.length < numBytes) {\n      suffixBytes = new byte[ArrayUtil.oversize(numBytes, 1)];\n    }\n    ite.in.readBytes(suffixBytes, 0, numBytes);\n    suffixesReader.reset(suffixBytes, 0, numBytes);\n\n    // stats\n    numBytes = ite.in.readVInt();\n    if (statBytes.length < numBytes) {\n      statBytes = new byte[ArrayUtil.oversize(numBytes, 1)];\n    }\n    ite.in.readBytes(statBytes, 0, numBytes);\n    statsReader.reset(statBytes, 0, numBytes);\n    metaDataUpto = 0;\n\n    termState.termBlockOrd = 0;\n    nextEnt = 0;\n         \n    // metadata\n    numBytes = ite.in.readVInt();\n    if (bytes == null) {\n      bytes = new byte[ArrayUtil.oversize(numBytes, 1)];\n      bytesReader = new ByteArrayDataInput();\n    } else if (bytes.length < numBytes) {\n      bytes = new byte[ArrayUtil.oversize(numBytes, 1)];\n    }\n    ite.in.readBytes(bytes, 0, numBytes);\n    bytesReader.reset(bytes, 0, numBytes);\n\n    if (!isLastInFloor) {\n      // Sub-blocks of a single floor block are always\n      // written one after another -- tail recurse:\n      fpEnd = ite.in.getFilePointer();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40IntersectTermsEnumFrame#load(BytesRef).mjava","sourceNew":null,"sourceOld":"  void load(BytesRef frameIndexData) throws IOException {\n\n    // if (DEBUG) System.out.println(\"    load fp=\" + fp + \" fpOrig=\" + fpOrig + \" frameIndexData=\" + frameIndexData + \" trans=\" + (transitions.length != 0 ? transitions[0] : \"n/a\" + \" state=\" + state));\n\n    if (frameIndexData != null && transitionCount != 0) {\n      // Floor frame\n      if (floorData.length < frameIndexData.length) {\n        this.floorData = new byte[ArrayUtil.oversize(frameIndexData.length, 1)];\n      }\n      System.arraycopy(frameIndexData.bytes, frameIndexData.offset, floorData, 0, frameIndexData.length);\n      floorDataReader.reset(floorData, 0, frameIndexData.length);\n      // Skip first long -- has redundant fp, hasTerms\n      // flag, isFloor flag\n      final long code = floorDataReader.readVLong();\n      if ((code & Lucene40BlockTreeTermsReader.OUTPUT_FLAG_IS_FLOOR) != 0) {\n        numFollowFloorBlocks = floorDataReader.readVInt();\n        nextFloorLabel = floorDataReader.readByte() & 0xff;\n        // if (DEBUG) System.out.println(\"    numFollowFloorBlocks=\" + numFollowFloorBlocks + \" nextFloorLabel=\" + nextFloorLabel);\n\n        // If current state is accept, we must process\n        // first block in case it has empty suffix:\n        if (!ite.runAutomaton.isAccept(state)) {\n          // Maybe skip floor blocks:\n          assert transitionIndex == 0: \"transitionIndex=\" + transitionIndex;\n          while (numFollowFloorBlocks != 0 && nextFloorLabel <= transition.min) {\n            fp = fpOrig + (floorDataReader.readVLong() >>> 1);\n            numFollowFloorBlocks--;\n            // if (DEBUG) System.out.println(\"    skip floor block!  nextFloorLabel=\" + (char) nextFloorLabel + \" vs target=\" + (char) transitions[0].getMin() + \" newFP=\" + fp + \" numFollowFloorBlocks=\" + numFollowFloorBlocks);\n            if (numFollowFloorBlocks != 0) {\n              nextFloorLabel = floorDataReader.readByte() & 0xff;\n            } else {\n              nextFloorLabel = 256;\n            }\n          }\n        }\n      }\n    }\n\n    ite.in.seek(fp);\n    int code = ite.in.readVInt();\n    entCount = code >>> 1;\n    assert entCount > 0;\n    isLastInFloor = (code & 1) != 0;\n\n    // term suffixes:\n    code = ite.in.readVInt();\n    isLeafBlock = (code & 1) != 0;\n    int numBytes = code >>> 1;\n    // if (DEBUG) System.out.println(\"      entCount=\" + entCount + \" lastInFloor?=\" + isLastInFloor + \" leafBlock?=\" + isLeafBlock + \" numSuffixBytes=\" + numBytes);\n    if (suffixBytes.length < numBytes) {\n      suffixBytes = new byte[ArrayUtil.oversize(numBytes, 1)];\n    }\n    ite.in.readBytes(suffixBytes, 0, numBytes);\n    suffixesReader.reset(suffixBytes, 0, numBytes);\n\n    // stats\n    numBytes = ite.in.readVInt();\n    if (statBytes.length < numBytes) {\n      statBytes = new byte[ArrayUtil.oversize(numBytes, 1)];\n    }\n    ite.in.readBytes(statBytes, 0, numBytes);\n    statsReader.reset(statBytes, 0, numBytes);\n    metaDataUpto = 0;\n\n    termState.termBlockOrd = 0;\n    nextEnt = 0;\n         \n    // metadata\n    numBytes = ite.in.readVInt();\n    if (bytes == null) {\n      bytes = new byte[ArrayUtil.oversize(numBytes, 1)];\n      bytesReader = new ByteArrayDataInput();\n    } else if (bytes.length < numBytes) {\n      bytes = new byte[ArrayUtil.oversize(numBytes, 1)];\n    }\n    ite.in.readBytes(bytes, 0, numBytes);\n    bytesReader.reset(bytes, 0, numBytes);\n\n    if (!isLastInFloor) {\n      // Sub-blocks of a single floor block are always\n      // written one after another -- tail recurse:\n      fpEnd = ite.in.getFilePointer();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c6d238816bcdf9bbe4ec886226d89bd93834eb7e":["0628077afea69a2955260949478afabab8e500d8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c6d238816bcdf9bbe4ec886226d89bd93834eb7e"],"0628077afea69a2955260949478afabab8e500d8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"c6d238816bcdf9bbe4ec886226d89bd93834eb7e":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","0628077afea69a2955260949478afabab8e500d8"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"0628077afea69a2955260949478afabab8e500d8":["c6d238816bcdf9bbe4ec886226d89bd93834eb7e"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}