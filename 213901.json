{"path":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/DistanceUtils#pointOnBearing(double,double,double,double,double[],double).mjava","commits":[{"id":"6baa337076125dc01fc8cda597f52f2a9d0edcef","date":1285244980,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/DistanceUtils#pointOnBearing(double,double,double,double,double[],double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Given a start point (startLat, startLon) and a bearing on a sphere of radius <i>sphereRadius</i>, return the destination point.\n   * @param startLat The starting point latitude, in radians\n   * @param startLon The starting point longitude, in radians\n   * @param distance The distance to travel along the bearing.  The units are assumed to be the same as the sphereRadius units, both of which is up to the caller to know\n   * @param bearing The bearing, in radians.  North is a 0 deg. bearing, east is 90 deg, south is 180 deg, west is 270 deg. \n   * @param result A preallocated array to hold the results.  If null, a new one is constructed.\n   * @param sphereRadius The radius of the sphere to use for the calculation.\n   * @return The destination point, in radians.  First entry is latitude, second is longitude\n   */\n  public static double[] pointOnBearing(double startLat, double startLon, double distance, double bearing, double[] result, double sphereRadius) {\n    /*\n \tlat2 = asin(sin(lat1)*cos(d/R) + cos(lat1)*sin(d/R)*cos(θ))\n  \tlon2 = lon1 + atan2(sin(θ)*sin(d/R)*cos(lat1), cos(d/R)−sin(lat1)*sin(lat2))    \n\n     */\n    double cosAngDist = Math.cos(distance / sphereRadius);\n    double cosStartLat = Math.cos(startLat);\n    double sinAngDist = Math.sin(distance / sphereRadius);\n    double lat2 = Math.asin(Math.sin(startLat) * cosAngDist +\n            cosStartLat * sinAngDist * Math.cos(bearing));\n    \n    double lon2 = startLon + Math.atan2(Math.sin(bearing) * sinAngDist * cosStartLat,\n            cosAngDist - Math.sin(startLat) * Math.sin(lat2));\n\n    /*lat2 = (lat2*180)/Math.PI;\n    lon2 = (lon2*180)/Math.PI;*/\n    //From Lucene.  Move back to Lucene when synced\n    // normalize long first\n    if (result == null || result.length != 2){\n      result = new double[2];\n    }\n    result[0] = lat2;\n    result[1] = lon2;\n    normLng(result);\n\n    // normalize lat - could flip poles\n    normLat(result);\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/DistanceUtils#pointOnBearing(double,double,double,double,double[],double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Given a start point (startLat, startLon) and a bearing on a sphere of radius <i>sphereRadius</i>, return the destination point.\n   * @param startLat The starting point latitude, in radians\n   * @param startLon The starting point longitude, in radians\n   * @param distance The distance to travel along the bearing.  The units are assumed to be the same as the sphereRadius units, both of which is up to the caller to know\n   * @param bearing The bearing, in radians.  North is a 0 deg. bearing, east is 90 deg, south is 180 deg, west is 270 deg. \n   * @param result A preallocated array to hold the results.  If null, a new one is constructed.\n   * @param sphereRadius The radius of the sphere to use for the calculation.\n   * @return The destination point, in radians.  First entry is latitude, second is longitude\n   */\n  public static double[] pointOnBearing(double startLat, double startLon, double distance, double bearing, double[] result, double sphereRadius) {\n    /*\n \tlat2 = asin(sin(lat1)*cos(d/R) + cos(lat1)*sin(d/R)*cos(θ))\n  \tlon2 = lon1 + atan2(sin(θ)*sin(d/R)*cos(lat1), cos(d/R)−sin(lat1)*sin(lat2))    \n\n     */\n    double cosAngDist = Math.cos(distance / sphereRadius);\n    double cosStartLat = Math.cos(startLat);\n    double sinAngDist = Math.sin(distance / sphereRadius);\n    double lat2 = Math.asin(Math.sin(startLat) * cosAngDist +\n            cosStartLat * sinAngDist * Math.cos(bearing));\n    \n    double lon2 = startLon + Math.atan2(Math.sin(bearing) * sinAngDist * cosStartLat,\n            cosAngDist - Math.sin(startLat) * Math.sin(lat2));\n\n    /*lat2 = (lat2*180)/Math.PI;\n    lon2 = (lon2*180)/Math.PI;*/\n    //From Lucene.  Move back to Lucene when synced\n    // normalize long first\n    if (result == null || result.length != 2){\n      result = new double[2];\n    }\n    result[0] = lat2;\n    result[1] = lon2;\n    normLng(result);\n\n    // normalize lat - could flip poles\n    normLat(result);\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fb7e38713d15939e085d376c6391e6e6262a81f","date":1329897272,"type":4,"author":"David Wayne Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/DistanceUtils#pointOnBearing(double,double,double,double,double[],double).mjava","sourceNew":null,"sourceOld":"  /**\n   * Given a start point (startLat, startLon) and a bearing on a sphere of radius <i>sphereRadius</i>, return the destination point.\n   * @param startLat The starting point latitude, in radians\n   * @param startLon The starting point longitude, in radians\n   * @param distance The distance to travel along the bearing.  The units are assumed to be the same as the sphereRadius units, both of which is up to the caller to know\n   * @param bearing The bearing, in radians.  North is a 0 deg. bearing, east is 90 deg, south is 180 deg, west is 270 deg. \n   * @param result A preallocated array to hold the results.  If null, a new one is constructed.\n   * @param sphereRadius The radius of the sphere to use for the calculation.\n   * @return The destination point, in radians.  First entry is latitude, second is longitude\n   */\n  public static double[] pointOnBearing(double startLat, double startLon, double distance, double bearing, double[] result, double sphereRadius) {\n    /*\n \tlat2 = asin(sin(lat1)*cos(d/R) + cos(lat1)*sin(d/R)*cos(θ))\n  \tlon2 = lon1 + atan2(sin(θ)*sin(d/R)*cos(lat1), cos(d/R)−sin(lat1)*sin(lat2))    \n\n     */\n    double cosAngDist = Math.cos(distance / sphereRadius);\n    double cosStartLat = Math.cos(startLat);\n    double sinAngDist = Math.sin(distance / sphereRadius);\n    double lat2 = Math.asin(Math.sin(startLat) * cosAngDist +\n            cosStartLat * sinAngDist * Math.cos(bearing));\n    \n    double lon2 = startLon + Math.atan2(Math.sin(bearing) * sinAngDist * cosStartLat,\n            cosAngDist - Math.sin(startLat) * Math.sin(lat2));\n\n    /*lat2 = (lat2*180)/Math.PI;\n    lon2 = (lon2*180)/Math.PI;*/\n    //From Lucene.  Move back to Lucene when synced\n    // normalize long first\n    if (result == null || result.length != 2){\n      result = new double[2];\n    }\n    result[0] = lat2;\n    result[1] = lon2;\n    normLng(result);\n\n    // normalize lat - could flip poles\n    normLat(result);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e47768b261c28e7e6032060e8331475c81057953","date":1331681297,"type":4,"author":"Ryan McKinley","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/DistanceUtils#pointOnBearing(double,double,double,double,double[],double).mjava","sourceNew":null,"sourceOld":"  /**\n   * Given a start point (startLat, startLon) and a bearing on a sphere of radius <i>sphereRadius</i>, return the destination point.\n   * @param startLat The starting point latitude, in radians\n   * @param startLon The starting point longitude, in radians\n   * @param distance The distance to travel along the bearing.  The units are assumed to be the same as the sphereRadius units, both of which is up to the caller to know\n   * @param bearing The bearing, in radians.  North is a 0 deg. bearing, east is 90 deg, south is 180 deg, west is 270 deg. \n   * @param result A preallocated array to hold the results.  If null, a new one is constructed.\n   * @param sphereRadius The radius of the sphere to use for the calculation.\n   * @return The destination point, in radians.  First entry is latitude, second is longitude\n   */\n  public static double[] pointOnBearing(double startLat, double startLon, double distance, double bearing, double[] result, double sphereRadius) {\n    /*\n \tlat2 = asin(sin(lat1)*cos(d/R) + cos(lat1)*sin(d/R)*cos(θ))\n  \tlon2 = lon1 + atan2(sin(θ)*sin(d/R)*cos(lat1), cos(d/R)−sin(lat1)*sin(lat2))    \n\n     */\n    double cosAngDist = Math.cos(distance / sphereRadius);\n    double cosStartLat = Math.cos(startLat);\n    double sinAngDist = Math.sin(distance / sphereRadius);\n    double lat2 = Math.asin(Math.sin(startLat) * cosAngDist +\n            cosStartLat * sinAngDist * Math.cos(bearing));\n    \n    double lon2 = startLon + Math.atan2(Math.sin(bearing) * sinAngDist * cosStartLat,\n            cosAngDist - Math.sin(startLat) * Math.sin(lat2));\n\n    /*lat2 = (lat2*180)/Math.PI;\n    lon2 = (lon2*180)/Math.PI;*/\n    //From Lucene.  Move back to Lucene when synced\n    // normalize long first\n    if (result == null || result.length != 2){\n      result = new double[2];\n    }\n    result[0] = lat2;\n    result[1] = lon2;\n    normLng(result);\n\n    // normalize lat - could flip poles\n    normLat(result);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6baa337076125dc01fc8cda597f52f2a9d0edcef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6baa337076125dc01fc8cda597f52f2a9d0edcef"],"e47768b261c28e7e6032060e8331475c81057953":["6baa337076125dc01fc8cda597f52f2a9d0edcef","2fb7e38713d15939e085d376c6391e6e6262a81f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e47768b261c28e7e6032060e8331475c81057953"],"2fb7e38713d15939e085d376c6391e6e6262a81f":["6baa337076125dc01fc8cda597f52f2a9d0edcef"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6baa337076125dc01fc8cda597f52f2a9d0edcef","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"6baa337076125dc01fc8cda597f52f2a9d0edcef":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","e47768b261c28e7e6032060e8331475c81057953","2fb7e38713d15939e085d376c6391e6e6262a81f"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"e47768b261c28e7e6032060e8331475c81057953":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2fb7e38713d15939e085d376c6391e6e6262a81f":["e47768b261c28e7e6032060e8331475c81057953"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}