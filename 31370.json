{"path":"lucene/src/java/org/apache/lucene/util/ByteBlockPool#allocSlice(byte[],int).mjava","commits":[{"id":"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","date":1286023472,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/ByteBlockPool#allocSlice(byte[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ByteBlockPool#allocSlice(byte[],int).mjava","sourceNew":"  public int allocSlice(final byte[] slice, final int upto) {\n\n    final int level = slice[upto] & 15;\n    final int newLevel = nextLevelArray[level];\n    final int newSize = levelSizeArray[newLevel];\n\n    // Maybe allocate another block\n    if (byteUpto > BYTE_BLOCK_SIZE-newSize)\n      nextBuffer();\n\n    final int newUpto = byteUpto;\n    final int offset = newUpto + byteOffset;\n    byteUpto += newSize;\n\n    // Copy forward the past 3 bytes (which we are about\n    // to overwrite with the forwarding address):\n    buffer[newUpto] = slice[upto-3];\n    buffer[newUpto+1] = slice[upto-2];\n    buffer[newUpto+2] = slice[upto-1];\n\n    // Write forwarding address at end of last slice:\n    slice[upto-3] = (byte) (offset >>> 24);\n    slice[upto-2] = (byte) (offset >>> 16);\n    slice[upto-1] = (byte) (offset >>> 8);\n    slice[upto] = (byte) offset;\n        \n    // Write new level:\n    buffer[byteUpto-1] = (byte) (16|newLevel);\n\n    return newUpto+3;\n  }\n\n","sourceOld":"  public int allocSlice(final byte[] slice, final int upto) {\n\n    final int level = slice[upto] & 15;\n    final int newLevel = nextLevelArray[level];\n    final int newSize = levelSizeArray[newLevel];\n\n    // Maybe allocate another block\n    if (byteUpto > DocumentsWriter.BYTE_BLOCK_SIZE-newSize)\n      nextBuffer();\n\n    final int newUpto = byteUpto;\n    final int offset = newUpto + byteOffset;\n    byteUpto += newSize;\n\n    // Copy forward the past 3 bytes (which we are about\n    // to overwrite with the forwarding address):\n    buffer[newUpto] = slice[upto-3];\n    buffer[newUpto+1] = slice[upto-2];\n    buffer[newUpto+2] = slice[upto-1];\n\n    // Write forwarding address at end of last slice:\n    slice[upto-3] = (byte) (offset >>> 24);\n    slice[upto-2] = (byte) (offset >>> 16);\n    slice[upto-1] = (byte) (offset >>> 8);\n    slice[upto] = (byte) offset;\n        \n    // Write new level:\n    buffer[byteUpto-1] = (byte) (16|newLevel);\n\n    return newUpto+3;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/ByteBlockPool#allocSlice(byte[],int).mjava","pathOld":"/dev/null","sourceNew":"  public int allocSlice(final byte[] slice, final int upto) {\n\n    final int level = slice[upto] & 15;\n    final int newLevel = nextLevelArray[level];\n    final int newSize = levelSizeArray[newLevel];\n\n    // Maybe allocate another block\n    if (byteUpto > BYTE_BLOCK_SIZE-newSize)\n      nextBuffer();\n\n    final int newUpto = byteUpto;\n    final int offset = newUpto + byteOffset;\n    byteUpto += newSize;\n\n    // Copy forward the past 3 bytes (which we are about\n    // to overwrite with the forwarding address):\n    buffer[newUpto] = slice[upto-3];\n    buffer[newUpto+1] = slice[upto-2];\n    buffer[newUpto+2] = slice[upto-1];\n\n    // Write forwarding address at end of last slice:\n    slice[upto-3] = (byte) (offset >>> 24);\n    slice[upto-2] = (byte) (offset >>> 16);\n    slice[upto-1] = (byte) (offset >>> 8);\n    slice[upto] = (byte) offset;\n        \n    // Write new level:\n    buffer[byteUpto-1] = (byte) (16|newLevel);\n\n    return newUpto+3;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#allocSlice(byte[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ByteBlockPool#allocSlice(byte[],int).mjava","sourceNew":"  public int allocSlice(final byte[] slice, final int upto) {\n\n    final int level = slice[upto] & 15;\n    final int newLevel = nextLevelArray[level];\n    final int newSize = levelSizeArray[newLevel];\n\n    // Maybe allocate another block\n    if (byteUpto > BYTE_BLOCK_SIZE-newSize)\n      nextBuffer();\n\n    final int newUpto = byteUpto;\n    final int offset = newUpto + byteOffset;\n    byteUpto += newSize;\n\n    // Copy forward the past 3 bytes (which we are about\n    // to overwrite with the forwarding address):\n    buffer[newUpto] = slice[upto-3];\n    buffer[newUpto+1] = slice[upto-2];\n    buffer[newUpto+2] = slice[upto-1];\n\n    // Write forwarding address at end of last slice:\n    slice[upto-3] = (byte) (offset >>> 24);\n    slice[upto-2] = (byte) (offset >>> 16);\n    slice[upto-1] = (byte) (offset >>> 8);\n    slice[upto] = (byte) offset;\n        \n    // Write new level:\n    buffer[byteUpto-1] = (byte) (16|newLevel);\n\n    return newUpto+3;\n  }\n\n","sourceOld":"  public int allocSlice(final byte[] slice, final int upto) {\n\n    final int level = slice[upto] & 15;\n    final int newLevel = nextLevelArray[level];\n    final int newSize = levelSizeArray[newLevel];\n\n    // Maybe allocate another block\n    if (byteUpto > BYTE_BLOCK_SIZE-newSize)\n      nextBuffer();\n\n    final int newUpto = byteUpto;\n    final int offset = newUpto + byteOffset;\n    byteUpto += newSize;\n\n    // Copy forward the past 3 bytes (which we are about\n    // to overwrite with the forwarding address):\n    buffer[newUpto] = slice[upto-3];\n    buffer[newUpto+1] = slice[upto-2];\n    buffer[newUpto+2] = slice[upto-1];\n\n    // Write forwarding address at end of last slice:\n    slice[upto-3] = (byte) (offset >>> 24);\n    slice[upto-2] = (byte) (offset >>> 16);\n    slice[upto-1] = (byte) (offset >>> 8);\n    slice[upto] = (byte) offset;\n        \n    // Write new level:\n    buffer[byteUpto-1] = (byte) (16|newLevel);\n\n    return newUpto+3;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}