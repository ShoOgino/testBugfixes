{"path":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Random,SimilarityProvider,int).mjava","commits":[{"id":"fd9325c7ff9928fabe81c28553b41fc7aa57dfab","date":1295896411,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Random,SimilarityProvider,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Random,Similarity,int).mjava","sourceNew":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, SimilarityProvider similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarityProvider(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = IndexReader.open(writer);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarityProvider(similarity);\n    return searcher;\n  }\n\n","sourceOld":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, Similarity similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = IndexReader.open(writer);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Random,SimilarityProvider,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Random,Similarity,int).mjava","sourceNew":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, SimilarityProvider similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarityProvider(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = IndexReader.open(writer);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarityProvider(similarity);\n    return searcher;\n  }\n\n","sourceOld":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, Similarity similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = new SlowMultiReaderWrapper(IndexReader.open(writer));\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb378f8bdee16a26810e086303a4a86b4930ea12","date":1296410797,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Random,SimilarityProvider,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Random,SimilarityProvider,int).mjava","sourceNew":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, SimilarityProvider similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarityProvider(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = IndexReader.open(writer, true);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarityProvider(similarity);\n    return searcher;\n  }\n\n","sourceOld":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, SimilarityProvider similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarityProvider(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = IndexReader.open(writer);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarityProvider(similarity);\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Random,SimilarityProvider,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Random,SimilarityProvider,int).mjava","sourceNew":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, SimilarityProvider similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarityProvider(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = IndexReader.open(writer, true);\n    writer.close();\n\n    IndexSearcher searcher = LuceneTestCase.newSearcher(reader);\n    searcher.setSimilarityProvider(similarity);\n    return searcher;\n  }\n\n","sourceOld":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, SimilarityProvider similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarityProvider(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = IndexReader.open(writer, true);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarityProvider(similarity);\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Random,SimilarityProvider,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, SimilarityProvider similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarityProvider(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = IndexReader.open(writer, true);\n    writer.close();\n\n    IndexSearcher searcher = LuceneTestCase.newSearcher(reader);\n    searcher.setSimilarityProvider(similarity);\n    return searcher;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Random,SimilarityProvider,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Random,SimilarityProvider,int).mjava","sourceNew":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, SimilarityProvider similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarityProvider(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = IndexReader.open(writer, true);\n    writer.close();\n\n    IndexSearcher searcher = LuceneTestCase.newSearcher(reader);\n    searcher.setSimilarityProvider(similarity);\n    return searcher;\n  }\n\n","sourceOld":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, SimilarityProvider similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarityProvider(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = IndexReader.open(writer);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarityProvider(similarity);\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Random,SimilarityProvider,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Random,SimilarityProvider,int).mjava","sourceNew":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, SimilarityProvider similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarityProvider(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, TextField.TYPE_STORED, English.intToEnglish(i)));\n      doc.add(new Field(MULTI_FIELD, TextField.TYPE_STORED, English.intToEnglish(i) + \"  \" + English.intToEnglish(i)));\n      doc.add(new Field(NO_PAYLOAD_FIELD, TextField.TYPE_STORED, English.intToEnglish(i)));\n      writer.addDocument(doc);\n    }\n    reader = IndexReader.open(writer, true);\n    writer.close();\n\n    IndexSearcher searcher = LuceneTestCase.newSearcher(reader);\n    searcher.setSimilarityProvider(similarity);\n    return searcher;\n  }\n\n","sourceOld":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, SimilarityProvider similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarityProvider(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = IndexReader.open(writer, true);\n    writer.close();\n\n    IndexSearcher searcher = LuceneTestCase.newSearcher(reader);\n    searcher.setSimilarityProvider(similarity);\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd","date":1317197236,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Random,SimilarityProvider,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Random,SimilarityProvider,int).mjava","sourceNew":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, SimilarityProvider similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarityProvider(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), TextField.TYPE_STORED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), TextField.TYPE_STORED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    reader = IndexReader.open(writer, true);\n    writer.close();\n\n    IndexSearcher searcher = LuceneTestCase.newSearcher(reader);\n    searcher.setSimilarityProvider(similarity);\n    return searcher;\n  }\n\n","sourceOld":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, SimilarityProvider similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarityProvider(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, TextField.TYPE_STORED, English.intToEnglish(i)));\n      doc.add(new Field(MULTI_FIELD, TextField.TYPE_STORED, English.intToEnglish(i) + \"  \" + English.intToEnglish(i)));\n      doc.add(new Field(NO_PAYLOAD_FIELD, TextField.TYPE_STORED, English.intToEnglish(i)));\n      writer.addDocument(doc);\n    }\n    reader = IndexReader.open(writer, true);\n    writer.close();\n\n    IndexSearcher searcher = LuceneTestCase.newSearcher(reader);\n    searcher.setSimilarityProvider(similarity);\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b","date":1328532481,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Random,Similarity,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Random,SimilarityProvider,int).mjava","sourceNew":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, Similarity similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), TextField.TYPE_STORED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), TextField.TYPE_STORED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    reader = IndexReader.open(writer, true);\n    writer.close();\n\n    IndexSearcher searcher = LuceneTestCase.newSearcher(reader);\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","sourceOld":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, SimilarityProvider similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarityProvider(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), TextField.TYPE_STORED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), TextField.TYPE_STORED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    reader = IndexReader.open(writer, true);\n    writer.close();\n\n    IndexSearcher searcher = LuceneTestCase.newSearcher(reader);\n    searcher.setSimilarityProvider(similarity);\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"790e1fde4caa765b3faaad3fbcd25c6973450336":["eb378f8bdee16a26810e086303a4a86b4930ea12"],"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","790e1fde4caa765b3faaad3fbcd25c6973450336"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"eb378f8bdee16a26810e086303a4a86b4930ea12":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","790e1fde4caa765b3faaad3fbcd25c6973450336"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fd9325c7ff9928fabe81c28553b41fc7aa57dfab"]},"commit2Childs":{"790e1fde4caa765b3faaad3fbcd25c6973450336":["29ef99d61cda9641b6250bf9567329a6e65f901d","1509f151d7692d84fae414b2b799ac06ba60fcb4","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["eb378f8bdee16a26810e086303a4a86b4930ea12","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab","29ef99d61cda9641b6250bf9567329a6e65f901d","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"eb378f8bdee16a26810e086303a4a86b4930ea12":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}