{"path":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ContentSource#getInputStream(File).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ContentSource#getInputStream(File).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ContentSource#getInputStream(File).mjava","sourceNew":"  /**\n   * Returns an {@link InputStream} over the requested file. This method\n   * attempts to identify the appropriate {@link InputStream} instance to return\n   * based on the file name (e.g., if it ends with .bz2 or .bzip, return a\n   * 'bzip' {@link InputStream}).\n   */\n  protected InputStream getInputStream(File file) throws IOException {\n    // First, create a FileInputStream, as this will be required by all types.\n    // Wrap with BufferedInputStream for better performance\n    InputStream is = new BufferedInputStream(new FileInputStream(file), BUFFER_SIZE);\n    \n    String fileName = file.getName();\n    int idx = fileName.lastIndexOf('.');\n    int type = OTHER;\n    if (idx != -1) {\n      Integer typeInt = extensionToType.get(fileName.substring(idx));\n      if (typeInt != null) {\n        type = typeInt.intValue();\n      }\n    }\n    switch (type) {\n      case BZIP:\n        try {\n          // According to BZip2CompressorInputStream's code, it reads the first \n          // two file header chars ('B' and 'Z'). It is important to wrap the\n          // underlying input stream with a buffered one since\n          // Bzip2CompressorInputStream uses the read() method exclusively.\n          is = csFactory.createCompressorInputStream(\"bzip2\", is);\n        } catch (CompressorException e) {\n          IOException ioe = new IOException(e.getMessage());\n          ioe.initCause(e);\n          throw ioe;\n        }\n        break;\n      default: // Do nothing, stay with FileInputStream\n    }\n    \n    return is;\n  }\n\n","sourceOld":"  /**\n   * Returns an {@link InputStream} over the requested file. This method\n   * attempts to identify the appropriate {@link InputStream} instance to return\n   * based on the file name (e.g., if it ends with .bz2 or .bzip, return a\n   * 'bzip' {@link InputStream}).\n   */\n  protected InputStream getInputStream(File file) throws IOException {\n    // First, create a FileInputStream, as this will be required by all types.\n    // Wrap with BufferedInputStream for better performance\n    InputStream is = new BufferedInputStream(new FileInputStream(file), BUFFER_SIZE);\n    \n    String fileName = file.getName();\n    int idx = fileName.lastIndexOf('.');\n    int type = OTHER;\n    if (idx != -1) {\n      Integer typeInt = extensionToType.get(fileName.substring(idx));\n      if (typeInt != null) {\n        type = typeInt.intValue();\n      }\n    }\n    switch (type) {\n      case BZIP:\n        try {\n          // According to BZip2CompressorInputStream's code, it reads the first \n          // two file header chars ('B' and 'Z'). It is important to wrap the\n          // underlying input stream with a buffered one since\n          // Bzip2CompressorInputStream uses the read() method exclusively.\n          is = csFactory.createCompressorInputStream(\"bzip2\", is);\n        } catch (CompressorException e) {\n          IOException ioe = new IOException(e.getMessage());\n          ioe.initCause(e);\n          throw ioe;\n        }\n        break;\n      default: // Do nothing, stay with FileInputStream\n    }\n    \n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ContentSource#getInputStream(File).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ContentSource#getInputStream(File).mjava","sourceNew":"  /**\n   * Returns an {@link InputStream} over the requested file. This method\n   * attempts to identify the appropriate {@link InputStream} instance to return\n   * based on the file name (e.g., if it ends with .bz2 or .bzip, return a\n   * 'bzip' {@link InputStream}).\n   */\n  protected InputStream getInputStream(File file) throws IOException {\n    // First, create a FileInputStream, as this will be required by all types.\n    // Wrap with BufferedInputStream for better performance\n    InputStream is = new BufferedInputStream(new FileInputStream(file), BUFFER_SIZE);\n    \n    String fileName = file.getName();\n    int idx = fileName.lastIndexOf('.');\n    int type = OTHER;\n    if (idx != -1) {\n      Integer typeInt = extensionToType.get(fileName.substring(idx));\n      if (typeInt != null) {\n        type = typeInt.intValue();\n      }\n    }\n    switch (type) {\n      case BZIP:\n        try {\n          // According to BZip2CompressorInputStream's code, it reads the first \n          // two file header chars ('B' and 'Z'). It is important to wrap the\n          // underlying input stream with a buffered one since\n          // Bzip2CompressorInputStream uses the read() method exclusively.\n          is = csFactory.createCompressorInputStream(\"bzip2\", is);\n        } catch (CompressorException e) {\n          IOException ioe = new IOException(e.getMessage());\n          ioe.initCause(e);\n          throw ioe;\n        }\n        break;\n      default: // Do nothing, stay with FileInputStream\n    }\n    \n    return is;\n  }\n\n","sourceOld":"  /**\n   * Returns an {@link InputStream} over the requested file. This method\n   * attempts to identify the appropriate {@link InputStream} instance to return\n   * based on the file name (e.g., if it ends with .bz2 or .bzip, return a\n   * 'bzip' {@link InputStream}).\n   */\n  protected InputStream getInputStream(File file) throws IOException {\n    // First, create a FileInputStream, as this will be required by all types.\n    // Wrap with BufferedInputStream for better performance\n    InputStream is = new BufferedInputStream(new FileInputStream(file), BUFFER_SIZE);\n    \n    String fileName = file.getName();\n    int idx = fileName.lastIndexOf('.');\n    int type = OTHER;\n    if (idx != -1) {\n      Integer typeInt = extensionToType.get(fileName.substring(idx));\n      if (typeInt != null) {\n        type = typeInt.intValue();\n      }\n    }\n    switch (type) {\n      case BZIP:\n        try {\n          // According to BZip2CompressorInputStream's code, it reads the first \n          // two file header chars ('B' and 'Z'). It is important to wrap the\n          // underlying input stream with a buffered one since\n          // Bzip2CompressorInputStream uses the read() method exclusively.\n          is = csFactory.createCompressorInputStream(\"bzip2\", is);\n        } catch (CompressorException e) {\n          IOException ioe = new IOException(e.getMessage());\n          ioe.initCause(e);\n          throw ioe;\n        }\n        break;\n      default: // Do nothing, stay with FileInputStream\n    }\n    \n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ContentSource#getInputStream(File).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ContentSource#getInputStream(File).mjava","sourceNew":"  /**\n   * Returns an {@link InputStream} over the requested file. This method\n   * attempts to identify the appropriate {@link InputStream} instance to return\n   * based on the file name (e.g., if it ends with .bz2 or .bzip, return a\n   * 'bzip' {@link InputStream}).\n   */\n  protected InputStream getInputStream(File file) throws IOException {\n    // First, create a FileInputStream, as this will be required by all types.\n    // Wrap with BufferedInputStream for better performance\n    InputStream is = new BufferedInputStream(new FileInputStream(file), BUFFER_SIZE);\n    \n    String fileName = file.getName();\n    int idx = fileName.lastIndexOf('.');\n    int type = OTHER;\n    if (idx != -1) {\n      Integer typeInt = extensionToType.get(fileName.substring(idx));\n      if (typeInt != null) {\n        type = typeInt.intValue();\n      }\n    }\n    switch (type) {\n      case BZIP:\n        try {\n          // According to BZip2CompressorInputStream's code, it reads the first \n          // two file header chars ('B' and 'Z'). It is important to wrap the\n          // underlying input stream with a buffered one since\n          // Bzip2CompressorInputStream uses the read() method exclusively.\n          is = csFactory.createCompressorInputStream(\"bzip2\", is);\n        } catch (CompressorException e) {\n          IOException ioe = new IOException(e.getMessage());\n          ioe.initCause(e);\n          throw ioe;\n        }\n        break;\n      default: // Do nothing, stay with FileInputStream\n    }\n    \n    return is;\n  }\n\n","sourceOld":"  /**\n   * Returns an {@link InputStream} over the requested file. This method\n   * attempts to identify the appropriate {@link InputStream} instance to return\n   * based on the file name (e.g., if it ends with .bz2 or .bzip, return a\n   * 'bzip' {@link InputStream}).\n   */\n  protected InputStream getInputStream(File file) throws IOException {\n    // First, create a FileInputStream, as this will be required by all types.\n    // Wrap with BufferedInputStream for better performance\n    InputStream is = new BufferedInputStream(new FileInputStream(file), BUFFER_SIZE);\n    \n    String fileName = file.getName();\n    int idx = fileName.lastIndexOf('.');\n    int type = OTHER;\n    if (idx != -1) {\n      Integer typeInt = extensionToType.get(fileName.substring(idx));\n      if (typeInt != null) {\n        type = typeInt.intValue();\n      }\n    }\n    switch (type) {\n      case BZIP:\n        try {\n          // According to BZip2CompressorInputStream's code, it reads the first \n          // two file header chars ('B' and 'Z'). It is important to wrap the\n          // underlying input stream with a buffered one since\n          // Bzip2CompressorInputStream uses the read() method exclusively.\n          is = csFactory.createCompressorInputStream(\"bzip2\", is);\n        } catch (CompressorException e) {\n          IOException ioe = new IOException(e.getMessage());\n          ioe.initCause(e);\n          throw ioe;\n        }\n        break;\n      default: // Do nothing, stay with FileInputStream\n    }\n    \n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ContentSource#getInputStream(File).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ContentSource#getInputStream(File).mjava","sourceNew":"  /**\n   * Returns an {@link InputStream} over the requested file. This method\n   * attempts to identify the appropriate {@link InputStream} instance to return\n   * based on the file name (e.g., if it ends with .bz2 or .bzip, return a\n   * 'bzip' {@link InputStream}).\n   */\n  protected InputStream getInputStream(File file) throws IOException {\n    // First, create a FileInputStream, as this will be required by all types.\n    // Wrap with BufferedInputStream for better performance\n    InputStream is = new BufferedInputStream(new FileInputStream(file), BUFFER_SIZE);\n    \n    String fileName = file.getName();\n    int idx = fileName.lastIndexOf('.');\n    int type = OTHER;\n    if (idx != -1) {\n      Integer typeInt = extensionToType.get(fileName.substring(idx));\n      if (typeInt != null) {\n        type = typeInt.intValue();\n      }\n    }\n    switch (type) {\n      case BZIP:\n        try {\n          // According to BZip2CompressorInputStream's code, it reads the first \n          // two file header chars ('B' and 'Z'). It is important to wrap the\n          // underlying input stream with a buffered one since\n          // Bzip2CompressorInputStream uses the read() method exclusively.\n          is = csFactory.createCompressorInputStream(\"bzip2\", is);\n        } catch (CompressorException e) {\n          IOException ioe = new IOException(e.getMessage());\n          ioe.initCause(e);\n          throw ioe;\n        }\n        break;\n      default: // Do nothing, stay with FileInputStream\n    }\n    \n    return is;\n  }\n\n","sourceOld":"  /**\n   * Returns an {@link InputStream} over the requested file. This method\n   * attempts to identify the appropriate {@link InputStream} instance to return\n   * based on the file name (e.g., if it ends with .bz2 or .bzip, return a\n   * 'bzip' {@link InputStream}).\n   */\n  protected InputStream getInputStream(File file) throws IOException {\n    // First, create a FileInputStream, as this will be required by all types.\n    // Wrap with BufferedInputStream for better performance\n    InputStream is = new BufferedInputStream(new FileInputStream(file), BUFFER_SIZE);\n    \n    String fileName = file.getName();\n    int idx = fileName.lastIndexOf('.');\n    int type = OTHER;\n    if (idx != -1) {\n      Integer typeInt = extensionToType.get(fileName.substring(idx));\n      if (typeInt != null) {\n        type = typeInt.intValue();\n      }\n    }\n    switch (type) {\n      case BZIP:\n        try {\n          // According to BZip2CompressorInputStream's code, it reads the first \n          // two file header chars ('B' and 'Z'). It is important to wrap the\n          // underlying input stream with a buffered one since\n          // Bzip2CompressorInputStream uses the read() method exclusively.\n          is = csFactory.createCompressorInputStream(\"bzip2\", is);\n        } catch (CompressorException e) {\n          IOException ioe = new IOException(e.getMessage());\n          ioe.initCause(e);\n          throw ioe;\n        }\n        break;\n      default: // Do nothing, stay with FileInputStream\n    }\n    \n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["9454a6510e2db155fb01faa5c049b06ece95fab9","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["9454a6510e2db155fb01faa5c049b06ece95fab9","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}