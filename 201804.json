{"path":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyRangeFacetTest#multiGapTest().mjava","commits":[{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":1,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyRangeFacetTest#multiGapTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/RangeFacetTest#multiGapTest().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void multiGapTest() throws Exception {\n    //Int Long\n    ArrayList<Double> intLong = getDoubleList(\"mi\", \"rangeFacets\", \"long_ld\", \"double\", \"sum\");\n    ArrayList<Double> intLongTest = calculateNumberStat(transformLists(intLongTestStart, 5, 30, \"4,2,6,3\"\n                                                        , false, true, false, false, false), \"sum\");\n    assertEquals(getRawResponse(), intLong,intLongTest);\n    //Int Double\n    ArrayList<Double> intDouble = getDoubleList(\"mi\", \"rangeFacets\", \"double_dd\", \"double\", \"mean\");\n    ArrayList<Double> intDoubleTest = calculateNumberStat(transformLists(intDoubleTestStart, 3, 39, \"3,1,7\"\n                                                          , false, false, true, false, true), \"mean\");\n    assertEquals(getRawResponse(), intDouble,intDoubleTest);\n    //Int Date\n    ArrayList<Long> intDate = getLongList(\"mi\", \"rangeFacets\", \"date_dtd\", \"long\", \"count\");\n    ArrayList<Long> intDateTest = (ArrayList<Long>)calculateStat(transformLists(intDateTestStart, 7, 44, \"2,7\"\n                                                      , false, true, false, true, true), \"count\");\n    assertEquals(getRawResponse(), intDate,intDateTest);\n    \n    //Float Long\n    ArrayList<Double> floatLong = getDoubleList(\"mf\", \"rangeFacets\", \"long_ld\", \"double\", \"median\");\n    ArrayList<Double> floatLongTest = calculateNumberStat(transformLists(floatLongTestStart, 0, 29, \"1,4\"\n                                                          , false, true, true, true, true), \"median\");;\n    assertEquals(getRawResponse(), floatLong,floatLongTest);\n    //Float Double\n    ArrayList<Long> floatDouble = getLongList(\"mf\", \"rangeFacets\", \"double_dd\", \"long\", \"count\");\n    ArrayList<Long> floatDoubleTest = (ArrayList<Long>)calculateStat(transformLists(floatDoubleTestStart, 4, 47, \"2,3,11\"\n                                                          , false, false, false, true, false), \"count\");\n    assertEquals(getRawResponse(), floatDouble,floatDoubleTest);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void multiGapTest() throws Exception {\n    //Int Long\n    ArrayList<Double> intLong = getDoubleList(\"mi\", \"rangeFacets\", \"long_ld\", \"double\", \"sum\");\n    ArrayList<Double> intLongTest = calculateNumberStat(transformLists(intLongTestStart, 5, 30, \"4,2,6,3\"\n                                                        , false, true, false, false, false), \"sum\");\n    assertEquals(getRawResponse(), intLong,intLongTest);\n    //Int Double\n    ArrayList<Double> intDouble = getDoubleList(\"mi\", \"rangeFacets\", \"double_dd\", \"double\", \"mean\");\n    ArrayList<Double> intDoubleTest = calculateNumberStat(transformLists(intDoubleTestStart, 3, 39, \"3,1,7\"\n                                                          , false, false, true, false, true), \"mean\");\n    assertEquals(getRawResponse(), intDouble,intDoubleTest);\n    //Int Date\n    ArrayList<Long> intDate = getLongList(\"mi\", \"rangeFacets\", \"date_dtd\", \"long\", \"count\");\n    ArrayList<Long> intDateTest = (ArrayList<Long>)calculateStat(transformLists(intDateTestStart, 7, 44, \"2,7\"\n                                                      , false, true, false, true, true), \"count\");\n    assertEquals(getRawResponse(), intDate,intDateTest);\n    \n    //Float Long\n    ArrayList<Double> floatLong = getDoubleList(\"mf\", \"rangeFacets\", \"long_ld\", \"double\", \"median\");\n    ArrayList<Double> floatLongTest = calculateNumberStat(transformLists(floatLongTestStart, 0, 29, \"1,4\"\n                                                          , false, true, true, true, true), \"median\");;\n    assertEquals(getRawResponse(), floatLong,floatLongTest);\n    //Float Double\n    ArrayList<Long> floatDouble = getLongList(\"mf\", \"rangeFacets\", \"double_dd\", \"long\", \"count\");\n    ArrayList<Long> floatDoubleTest = (ArrayList<Long>)calculateStat(transformLists(floatDoubleTestStart, 4, 47, \"2,3,11\"\n                                                          , false, false, false, true, false), \"count\");\n    assertEquals(getRawResponse(), floatDouble,floatDoubleTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4e64b7199d2f2a17be7f3926c7532553910dce","date":1564342581,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyRangeFacetTest#multiGapTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyRangeFacetTest#multiGapTest().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void multiGapTest() throws Exception {\n    //Int Long\n    ArrayList<Double> intLong = getDoubleList(\"mi\", \"rangeFacets\", \"long_ld\", \"double\", \"sum\");\n    ArrayList<Double> intLongTest = calculateNumberStat(transformLists(intLongTestStart, 5, 30, \"4,2,6,3\"\n                                                        , false, true, false, false, false), \"sum\");\n    assertEquals(getRawResponse(), intLong,intLongTest);\n    //Int Double\n    ArrayList<Double> intDouble = getDoubleList(\"mi\", \"rangeFacets\", \"double_dd\", \"double\", \"mean\");\n    ArrayList<Double> intDoubleTest = calculateNumberStat(transformLists(intDoubleTestStart, 3, 39, \"3,1,7\"\n                                                          , false, false, true, false, true), \"mean\");\n    assertEquals(getRawResponse(), intDouble,intDoubleTest);\n    //Int Date\n    ArrayList<Long> intDate = getLongList(\"mi\", \"rangeFacets\", \"date_dtd\", \"long\", \"count\");\n    ArrayList<Long> intDateTest = (ArrayList<Long>)calculateStat(transformLists(intDateTestStart, 7, 44, \"2,7\"\n                                                      , false, true, false, true, true), \"count\");\n    assertEquals(getRawResponse(), intDate,intDateTest);\n\n    //Float Long\n    ArrayList<Double> floatLong = getDoubleList(\"mf\", \"rangeFacets\", \"long_ld\", \"double\", \"median\");\n    ArrayList<Double> floatLongTest = calculateNumberStat(transformLists(floatLongTestStart, 0, 29, \"1,4\"\n                                                          , false, true, true, true, true), \"median\");;\n    assertEquals(getRawResponse(), floatLong,floatLongTest);\n    //Float Double\n    ArrayList<Long> floatDouble = getLongList(\"mf\", \"rangeFacets\", \"double_dd\", \"long\", \"count\");\n    ArrayList<Long> floatDoubleTest = (ArrayList<Long>)calculateStat(transformLists(floatDoubleTestStart, 4, 47, \"2,3,11\"\n                                                          , false, false, false, true, false), \"count\");\n    assertEquals(getRawResponse(), floatDouble,floatDoubleTest);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void multiGapTest() throws Exception {\n    //Int Long\n    ArrayList<Double> intLong = getDoubleList(\"mi\", \"rangeFacets\", \"long_ld\", \"double\", \"sum\");\n    ArrayList<Double> intLongTest = calculateNumberStat(transformLists(intLongTestStart, 5, 30, \"4,2,6,3\"\n                                                        , false, true, false, false, false), \"sum\");\n    assertEquals(getRawResponse(), intLong,intLongTest);\n    //Int Double\n    ArrayList<Double> intDouble = getDoubleList(\"mi\", \"rangeFacets\", \"double_dd\", \"double\", \"mean\");\n    ArrayList<Double> intDoubleTest = calculateNumberStat(transformLists(intDoubleTestStart, 3, 39, \"3,1,7\"\n                                                          , false, false, true, false, true), \"mean\");\n    assertEquals(getRawResponse(), intDouble,intDoubleTest);\n    //Int Date\n    ArrayList<Long> intDate = getLongList(\"mi\", \"rangeFacets\", \"date_dtd\", \"long\", \"count\");\n    ArrayList<Long> intDateTest = (ArrayList<Long>)calculateStat(transformLists(intDateTestStart, 7, 44, \"2,7\"\n                                                      , false, true, false, true, true), \"count\");\n    assertEquals(getRawResponse(), intDate,intDateTest);\n    \n    //Float Long\n    ArrayList<Double> floatLong = getDoubleList(\"mf\", \"rangeFacets\", \"long_ld\", \"double\", \"median\");\n    ArrayList<Double> floatLongTest = calculateNumberStat(transformLists(floatLongTestStart, 0, 29, \"1,4\"\n                                                          , false, true, true, true, true), \"median\");;\n    assertEquals(getRawResponse(), floatLong,floatLongTest);\n    //Float Double\n    ArrayList<Long> floatDouble = getLongList(\"mf\", \"rangeFacets\", \"double_dd\", \"long\", \"count\");\n    ArrayList<Long> floatDoubleTest = (ArrayList<Long>)calculateStat(transformLists(floatDoubleTestStart, 4, 47, \"2,3,11\"\n                                                          , false, false, false, true, false), \"count\");\n    assertEquals(getRawResponse(), floatDouble,floatDoubleTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyRangeFacetTest#multiGapTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyRangeFacetTest#multiGapTest().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void multiGapTest() throws Exception {\n    //Int Long\n    ArrayList<Double> intLong = getDoubleList(\"mi\", \"rangeFacets\", \"long_ld\", \"double\", \"sum\");\n    ArrayList<Double> intLongTest = calculateNumberStat(transformLists(intLongTestStart, 5, 30, \"4,2,6,3\"\n                                                        , false, true, false, false, false), \"sum\");\n    assertEquals(getRawResponse(), intLong,intLongTest);\n    //Int Double\n    ArrayList<Double> intDouble = getDoubleList(\"mi\", \"rangeFacets\", \"double_dd\", \"double\", \"mean\");\n    ArrayList<Double> intDoubleTest = calculateNumberStat(transformLists(intDoubleTestStart, 3, 39, \"3,1,7\"\n                                                          , false, false, true, false, true), \"mean\");\n    assertEquals(getRawResponse(), intDouble,intDoubleTest);\n    //Int Date\n    ArrayList<Long> intDate = getLongList(\"mi\", \"rangeFacets\", \"date_dtd\", \"long\", \"count\");\n    ArrayList<Long> intDateTest = (ArrayList<Long>)calculateStat(transformLists(intDateTestStart, 7, 44, \"2,7\"\n                                                      , false, true, false, true, true), \"count\");\n    assertEquals(getRawResponse(), intDate,intDateTest);\n\n    //Float Long\n    ArrayList<Double> floatLong = getDoubleList(\"mf\", \"rangeFacets\", \"long_ld\", \"double\", \"median\");\n    ArrayList<Double> floatLongTest = calculateNumberStat(transformLists(floatLongTestStart, 0, 29, \"1,4\"\n                                                          , false, true, true, true, true), \"median\");;\n    assertEquals(getRawResponse(), floatLong,floatLongTest);\n    //Float Double\n    ArrayList<Long> floatDouble = getLongList(\"mf\", \"rangeFacets\", \"double_dd\", \"long\", \"count\");\n    ArrayList<Long> floatDoubleTest = (ArrayList<Long>)calculateStat(transformLists(floatDoubleTestStart, 4, 47, \"2,3,11\"\n                                                          , false, false, false, true, false), \"count\");\n    assertEquals(getRawResponse(), floatDouble,floatDoubleTest);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void multiGapTest() throws Exception {\n    //Int Long\n    ArrayList<Double> intLong = getDoubleList(\"mi\", \"rangeFacets\", \"long_ld\", \"double\", \"sum\");\n    ArrayList<Double> intLongTest = calculateNumberStat(transformLists(intLongTestStart, 5, 30, \"4,2,6,3\"\n                                                        , false, true, false, false, false), \"sum\");\n    assertEquals(getRawResponse(), intLong,intLongTest);\n    //Int Double\n    ArrayList<Double> intDouble = getDoubleList(\"mi\", \"rangeFacets\", \"double_dd\", \"double\", \"mean\");\n    ArrayList<Double> intDoubleTest = calculateNumberStat(transformLists(intDoubleTestStart, 3, 39, \"3,1,7\"\n                                                          , false, false, true, false, true), \"mean\");\n    assertEquals(getRawResponse(), intDouble,intDoubleTest);\n    //Int Date\n    ArrayList<Long> intDate = getLongList(\"mi\", \"rangeFacets\", \"date_dtd\", \"long\", \"count\");\n    ArrayList<Long> intDateTest = (ArrayList<Long>)calculateStat(transformLists(intDateTestStart, 7, 44, \"2,7\"\n                                                      , false, true, false, true, true), \"count\");\n    assertEquals(getRawResponse(), intDate,intDateTest);\n    \n    //Float Long\n    ArrayList<Double> floatLong = getDoubleList(\"mf\", \"rangeFacets\", \"long_ld\", \"double\", \"median\");\n    ArrayList<Double> floatLongTest = calculateNumberStat(transformLists(floatLongTestStart, 0, 29, \"1,4\"\n                                                          , false, true, true, true, true), \"median\");;\n    assertEquals(getRawResponse(), floatLong,floatLongTest);\n    //Float Double\n    ArrayList<Long> floatDouble = getLongList(\"mf\", \"rangeFacets\", \"double_dd\", \"long\", \"count\");\n    ArrayList<Long> floatDoubleTest = (ArrayList<Long>)calculateStat(transformLists(floatDoubleTestStart, 4, 47, \"2,3,11\"\n                                                          , false, false, false, true, false), \"count\");\n    assertEquals(getRawResponse(), floatDouble,floatDoubleTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8061ddd97f3352007d927dae445884a6f3d857b":["3bd4c6955956e76c96eb12dfe64108ed03522983","1e4e64b7199d2f2a17be7f3926c7532553910dce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1e4e64b7199d2f2a17be7f3926c7532553910dce"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["1e4e64b7199d2f2a17be7f3926c7532553910dce","f8061ddd97f3352007d927dae445884a6f3d857b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}