{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","sourceNew":"  @Override\n  public void init(Context context, Properties initProps) {\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    factory = createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      bsz = context.replaceTokens(bsz);\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else if (\"binary\".equals(t))\n        fieldNameVsType.put(n, Types.BLOB);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Context context, Properties initProps) {\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    factory = createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      bsz = context.replaceTokens(bsz);\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else if (\"binary\".equals(t))\n        fieldNameVsType.put(n, Types.BLOB);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","sourceNew":"  @Override\n  public void init(Context context, Properties initProps) {\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    factory = createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      bsz = context.replaceTokens(bsz);\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else if (\"binary\".equals(t))\n        fieldNameVsType.put(n, Types.BLOB);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Context context, Properties initProps) {\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    factory = createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      bsz = context.replaceTokens(bsz);\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else if (\"binary\".equals(t))\n        fieldNameVsType.put(n, Types.BLOB);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"284866683716f2dec31be6489f8f5d2432074d14","date":1431005603,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","sourceNew":"  @Override\n  public void init(Context context, Properties initProps) {\n    initProps = decryptPwd(initProps);\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    factory = createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      bsz = context.replaceTokens(bsz);\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else if (\"binary\".equals(t))\n        fieldNameVsType.put(n, Types.BLOB);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Context context, Properties initProps) {\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    factory = createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      bsz = context.replaceTokens(bsz);\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else if (\"binary\".equals(t))\n        fieldNameVsType.put(n, Types.BLOB);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d757ce39e75479053df1fc9641acbe360e28376","date":1431020684,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","sourceNew":"  @Override\n  public void init(Context context, Properties initProps) {\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    factory = createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      bsz = context.replaceTokens(bsz);\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else if (\"binary\".equals(t))\n        fieldNameVsType.put(n, Types.BLOB);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Context context, Properties initProps) {\n    initProps = decryptPwd(initProps);\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    factory = createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      bsz = context.replaceTokens(bsz);\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else if (\"binary\".equals(t))\n        fieldNameVsType.put(n, Types.BLOB);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c771b7f862d3df7cfa7208b4f79ac658406d6d15","date":1431023495,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","sourceNew":"  @Override\n  public void init(Context context, Properties initProps) {\n    initProps = decryptPwd(initProps);\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    factory = createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      bsz = context.replaceTokens(bsz);\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else if (\"binary\".equals(t))\n        fieldNameVsType.put(n, Types.BLOB);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Context context, Properties initProps) {\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    factory = createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      bsz = context.replaceTokens(bsz);\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else if (\"binary\".equals(t))\n        fieldNameVsType.put(n, Types.BLOB);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e096dd0a4f62652c91292a2bfba8f08c4cdba94","date":1465245662,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","sourceNew":"  @Override\n  public void init(Context context, Properties initProps) {\n    initProps = decryptPwd(context, initProps);\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    factory = createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      bsz = context.replaceTokens(bsz);\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else if (\"binary\".equals(t))\n        fieldNameVsType.put(n, Types.BLOB);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Context context, Properties initProps) {\n    initProps = decryptPwd(initProps);\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    factory = createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      bsz = context.replaceTokens(bsz);\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else if (\"binary\".equals(t))\n        fieldNameVsType.put(n, Types.BLOB);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"191128ac5b85671b1671e2c857437694283b6ebf","date":1465297861,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","sourceNew":"  @Override\n  public void init(Context context, Properties initProps) {\n    initProps = decryptPwd(context, initProps);\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    factory = createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      bsz = context.replaceTokens(bsz);\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else if (\"binary\".equals(t))\n        fieldNameVsType.put(n, Types.BLOB);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Context context, Properties initProps) {\n    initProps = decryptPwd(initProps);\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    factory = createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      bsz = context.replaceTokens(bsz);\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else if (\"binary\".equals(t))\n        fieldNameVsType.put(n, Types.BLOB);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","sourceNew":"  @Override\n  public void init(Context context, Properties initProps) {\n    initProps = decryptPwd(context, initProps);\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    factory = createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      bsz = context.replaceTokens(bsz);\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else if (\"binary\".equals(t))\n        fieldNameVsType.put(n, Types.BLOB);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Context context, Properties initProps) {\n    initProps = decryptPwd(initProps);\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    factory = createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      bsz = context.replaceTokens(bsz);\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else if (\"binary\".equals(t))\n        fieldNameVsType.put(n, Types.BLOB);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0957b9b8725b7ad93845495d2512df18cd240731","date":1482658887,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","sourceNew":"  @Override\n  public void init(Context context, Properties initProps) {\n    resolveVariables(context, initProps);\n    initProps = decryptPwd(context, initProps);\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    factory = createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      bsz = context.replaceTokens(bsz);\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else if (\"binary\".equals(t))\n        fieldNameVsType.put(n, Types.BLOB);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Context context, Properties initProps) {\n    initProps = decryptPwd(context, initProps);\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    factory = createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      bsz = context.replaceTokens(bsz);\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else if (\"binary\".equals(t))\n        fieldNameVsType.put(n, Types.BLOB);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","sourceNew":"  @Override\n  public void init(Context context, Properties initProps) {\n    resolveVariables(context, initProps);\n    initProps = decryptPwd(context, initProps);\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    factory = createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      bsz = context.replaceTokens(bsz);\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else if (\"binary\".equals(t))\n        fieldNameVsType.put(n, Types.BLOB);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Context context, Properties initProps) {\n    initProps = decryptPwd(context, initProps);\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    factory = createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      bsz = context.replaceTokens(bsz);\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else if (\"binary\".equals(t))\n        fieldNameVsType.put(n, Types.BLOB);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","sourceNew":"  @Override\n  public void init(Context context, Properties initProps) {\n    resolveVariables(context, initProps);\n    initProps = decryptPwd(context, initProps);\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    factory = createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      bsz = context.replaceTokens(bsz);\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        log.warn(\"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else if (\"binary\".equals(t))\n        fieldNameVsType.put(n, Types.BLOB);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Context context, Properties initProps) {\n    resolveVariables(context, initProps);\n    initProps = decryptPwd(context, initProps);\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    factory = createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      bsz = context.replaceTokens(bsz);\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else if (\"binary\".equals(t))\n        fieldNameVsType.put(n, Types.BLOB);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","sourceNew":"  @Override\n  public void init(Context context, Properties initProps) {\n    resolveVariables(context, initProps);\n    initProps = decryptPwd(context, initProps);\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    factory = createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      bsz = context.replaceTokens(bsz);\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        log.warn(\"Invalid batch size: {}\", bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else if (\"binary\".equals(t))\n        fieldNameVsType.put(n, Types.BLOB);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Context context, Properties initProps) {\n    resolveVariables(context, initProps);\n    initProps = decryptPwd(context, initProps);\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    factory = createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      bsz = context.replaceTokens(bsz);\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        log.warn(\"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else if (\"binary\".equals(t))\n        fieldNameVsType.put(n, Types.BLOB);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void init(Context context, Properties initProps) {\n    resolveVariables(context, initProps);\n    initProps = decryptPwd(context, initProps);\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    factory = createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      bsz = context.replaceTokens(bsz);\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        log.warn(\"Invalid batch size: {}\", bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else if (\"binary\".equals(t))\n        fieldNameVsType.put(n, Types.BLOB);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"2e096dd0a4f62652c91292a2bfba8f08c4cdba94":["c771b7f862d3df7cfa7208b4f79ac658406d6d15"],"9d757ce39e75479053df1fc9641acbe360e28376":["284866683716f2dec31be6489f8f5d2432074d14"],"191128ac5b85671b1671e2c857437694283b6ebf":["c771b7f862d3df7cfa7208b4f79ac658406d6d15","2e096dd0a4f62652c91292a2bfba8f08c4cdba94"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"c771b7f862d3df7cfa7208b4f79ac658406d6d15":["9d757ce39e75479053df1fc9641acbe360e28376"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c771b7f862d3df7cfa7208b4f79ac658406d6d15","191128ac5b85671b1671e2c857437694283b6ebf"],"0957b9b8725b7ad93845495d2512df18cd240731":["191128ac5b85671b1671e2c857437694283b6ebf"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0957b9b8725b7ad93845495d2512df18cd240731"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"284866683716f2dec31be6489f8f5d2432074d14":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["0957b9b8725b7ad93845495d2512df18cd240731"]},"commit2Childs":{"c26f00b574427b55127e869b935845554afde1fa":["284866683716f2dec31be6489f8f5d2432074d14"],"2e096dd0a4f62652c91292a2bfba8f08c4cdba94":["191128ac5b85671b1671e2c857437694283b6ebf"],"9d757ce39e75479053df1fc9641acbe360e28376":["c771b7f862d3df7cfa7208b4f79ac658406d6d15"],"191128ac5b85671b1671e2c857437694283b6ebf":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0957b9b8725b7ad93845495d2512df18cd240731"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"c771b7f862d3df7cfa7208b4f79ac658406d6d15":["2e096dd0a4f62652c91292a2bfba8f08c4cdba94","191128ac5b85671b1671e2c857437694283b6ebf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"0957b9b8725b7ad93845495d2512df18cd240731":["f03e4bed5023ec3ef93a771b8888cae991cf448d","e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"284866683716f2dec31be6489f8f5d2432074d14":["9d757ce39e75479053df1fc9641acbe360e28376"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f03e4bed5023ec3ef93a771b8888cae991cf448d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}