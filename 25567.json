{"path":"src/java/org/apache/lucene/search/RangeFilter#RangeFilter(String,String,String,boolean,boolean).mjava","commits":[{"id":"95395bf94a1949052d9110b07e728d9cf6aba90c","date":1101219438,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/RangeFilter#RangeFilter(String,String,String,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * @param fieldName The field this range applies to\n     * @param lowerTerm The lower bound on this range\n     * @param upperTerm The upper bound on this range\n     * @param includeLower Does this range include the lower bound?\n     * @param includeUpper Does this range include the upper bound?\n     */\n    public RangeFilter(String fieldName, String lowerTerm, String upperTerm,\n                       boolean includeLower, boolean includeUpper) {\n        this.fieldName = fieldName;\n        this.lowerTerm = lowerTerm;\n        this.upperTerm = upperTerm;\n        this.includeLower = includeLower;\n        this.includeUpper = includeUpper;\n        \n        if (null == lowerTerm && null == upperTerm) {\n            throw new IllegalArgumentException\n                (\"At least one value must be non-null\");\n        }\n        if (includeLower && null == lowerTerm) {\n            throw new IllegalArgumentException\n                (\"The lower bound must be non-null to be inclusive\");\n        }\n        if (includeUpper && null == upperTerm) {\n            throw new IllegalArgumentException\n                (\"The upper bound must be non-null to be inclusive\");\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5e500eae7bf33ebb6b269891c416b27799a4a45","date":1101243366,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/RangeFilter#RangeFilter(String,String,String,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/RangeFilter#RangeFilter(String,String,String,boolean,boolean).mjava","sourceNew":"    /**\n     * @param fieldName The field this range applies to\n     * @param lowerTerm The lower bound on this range\n     * @param upperTerm The upper bound on this range\n     * @param includeLower Does this range include the lower bound?\n     * @param includeUpper Does this range include the upper bound?\n     * @throws IllegalArgumentException if both terms are null or if\n     *  lowerTerm is null and includeLower is true (similar for upperTerm\n     *  and includeUpper)\n     */\n    public RangeFilter(String fieldName, String lowerTerm, String upperTerm,\n                       boolean includeLower, boolean includeUpper) {\n        this.fieldName = fieldName;\n        this.lowerTerm = lowerTerm;\n        this.upperTerm = upperTerm;\n        this.includeLower = includeLower;\n        this.includeUpper = includeUpper;\n        \n        if (null == lowerTerm && null == upperTerm) {\n            throw new IllegalArgumentException\n                (\"At least one value must be non-null\");\n        }\n        if (includeLower && null == lowerTerm) {\n            throw new IllegalArgumentException\n                (\"The lower bound must be non-null to be inclusive\");\n        }\n        if (includeUpper && null == upperTerm) {\n            throw new IllegalArgumentException\n                (\"The upper bound must be non-null to be inclusive\");\n        }\n    }\n\n","sourceOld":"    /**\n     * @param fieldName The field this range applies to\n     * @param lowerTerm The lower bound on this range\n     * @param upperTerm The upper bound on this range\n     * @param includeLower Does this range include the lower bound?\n     * @param includeUpper Does this range include the upper bound?\n     */\n    public RangeFilter(String fieldName, String lowerTerm, String upperTerm,\n                       boolean includeLower, boolean includeUpper) {\n        this.fieldName = fieldName;\n        this.lowerTerm = lowerTerm;\n        this.upperTerm = upperTerm;\n        this.includeLower = includeLower;\n        this.includeUpper = includeUpper;\n        \n        if (null == lowerTerm && null == upperTerm) {\n            throw new IllegalArgumentException\n                (\"At least one value must be non-null\");\n        }\n        if (includeLower && null == lowerTerm) {\n            throw new IllegalArgumentException\n                (\"The lower bound must be non-null to be inclusive\");\n        }\n        if (includeUpper && null == upperTerm) {\n            throw new IllegalArgumentException\n                (\"The upper bound must be non-null to be inclusive\");\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b33dc4652df2747e38f9782fde82bd426b77c538","date":1221599001,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/RangeFilter#RangeFilter(String,String,String,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/RangeFilter#RangeFilter(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n     * @param fieldName The field this range applies to\n     * @param lowerTerm The lower bound on this range\n     * @param upperTerm The upper bound on this range\n     * @param includeLower Does this range include the lower bound?\n     * @param includeUpper Does this range include the upper bound?\n     * @throws IllegalArgumentException if both terms are null or if\n     *  lowerTerm is null and includeLower is true (similar for upperTerm\n     *  and includeUpper)\n     */\n    public RangeFilter(String fieldName, String lowerTerm, String upperTerm,\n                       boolean includeLower, boolean includeUpper) {\n        this.fieldName = fieldName;\n        this.lowerTerm = lowerTerm;\n        this.upperTerm = upperTerm;\n        this.includeLower = includeLower;\n        this.includeUpper = includeUpper;\n        \n        if (null == lowerTerm && null == upperTerm) {\n            throw new IllegalArgumentException\n                (\"At least one value must be non-null\");\n        }\n        if (includeLower && null == lowerTerm) {\n            throw new IllegalArgumentException\n                (\"The lower bound must be non-null to be inclusive\");\n        }\n        if (includeUpper && null == upperTerm) {\n            throw new IllegalArgumentException\n                (\"The upper bound must be non-null to be inclusive\");\n        }\n    }\n\n","sourceOld":"    /**\n     * @param fieldName The field this range applies to\n     * @param lowerTerm The lower bound on this range\n     * @param upperTerm The upper bound on this range\n     * @param includeLower Does this range include the lower bound?\n     * @param includeUpper Does this range include the upper bound?\n     * @throws IllegalArgumentException if both terms are null or if\n     *  lowerTerm is null and includeLower is true (similar for upperTerm\n     *  and includeUpper)\n     */\n    public RangeFilter(String fieldName, String lowerTerm, String upperTerm,\n                       boolean includeLower, boolean includeUpper) {\n        this.fieldName = fieldName;\n        this.lowerTerm = lowerTerm;\n        this.upperTerm = upperTerm;\n        this.includeLower = includeLower;\n        this.includeUpper = includeUpper;\n        \n        if (null == lowerTerm && null == upperTerm) {\n            throw new IllegalArgumentException\n                (\"At least one value must be non-null\");\n        }\n        if (includeLower && null == lowerTerm) {\n            throw new IllegalArgumentException\n                (\"The lower bound must be non-null to be inclusive\");\n        }\n        if (includeUpper && null == upperTerm) {\n            throw new IllegalArgumentException\n                (\"The upper bound must be non-null to be inclusive\");\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f7a11eba51d213f09b96054111cf56a1e5796a3","date":1226364000,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/RangeFilter#RangeFilter(String,String,String,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/RangeFilter#RangeFilter(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n     * @param fieldName The field this range applies to\n     * @param lowerTerm The lower bound on this range\n     * @param upperTerm The upper bound on this range\n     * @param includeLower Does this range include the lower bound?\n     * @param includeUpper Does this range include the upper bound?\n     * @throws IllegalArgumentException if both terms are null or if\n     *  lowerTerm is null and includeLower is true (similar for upperTerm\n     *  and includeUpper)\n     */\n    public RangeFilter(String fieldName, String lowerTerm, String upperTerm,\n                       boolean includeLower, boolean includeUpper) {\n        this.fieldName = fieldName;\n        this.lowerTerm = lowerTerm;\n        this.upperTerm = upperTerm;\n        this.includeLower = includeLower;\n        this.includeUpper = includeUpper;\n        \n        if (null == lowerTerm && null == upperTerm) {\n            throw new IllegalArgumentException\n                (\"At least one value must be non-null\");\n        }\n        if (includeLower && null == lowerTerm) {\n            throw new IllegalArgumentException\n                (\"The lower bound must be non-null to be inclusive\");\n        }\n        if (includeUpper && null == upperTerm) {\n            throw new IllegalArgumentException\n                (\"The upper bound must be non-null to be inclusive\");\n        }\n        initRangeQuery();\n    }\n\n","sourceOld":"  /**\n     * @param fieldName The field this range applies to\n     * @param lowerTerm The lower bound on this range\n     * @param upperTerm The upper bound on this range\n     * @param includeLower Does this range include the lower bound?\n     * @param includeUpper Does this range include the upper bound?\n     * @throws IllegalArgumentException if both terms are null or if\n     *  lowerTerm is null and includeLower is true (similar for upperTerm\n     *  and includeUpper)\n     */\n    public RangeFilter(String fieldName, String lowerTerm, String upperTerm,\n                       boolean includeLower, boolean includeUpper) {\n        this.fieldName = fieldName;\n        this.lowerTerm = lowerTerm;\n        this.upperTerm = upperTerm;\n        this.includeLower = includeLower;\n        this.includeUpper = includeUpper;\n        \n        if (null == lowerTerm && null == upperTerm) {\n            throw new IllegalArgumentException\n                (\"At least one value must be non-null\");\n        }\n        if (includeLower && null == lowerTerm) {\n            throw new IllegalArgumentException\n                (\"The lower bound must be non-null to be inclusive\");\n        }\n        if (includeUpper && null == upperTerm) {\n            throw new IllegalArgumentException\n                (\"The upper bound must be non-null to be inclusive\");\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2aa365c0765407d280cd5df0569b430c6f36832e","date":1239881843,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/RangeFilter#RangeFilter(String,String,String,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/RangeFilter#RangeFilter(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n     * @param fieldName The field this range applies to\n     * @param lowerTerm The lower bound on this range\n     * @param upperTerm The upper bound on this range\n     * @param includeLower Does this range include the lower bound?\n     * @param includeUpper Does this range include the upper bound?\n     * @throws IllegalArgumentException if both terms are null or if\n     *  lowerTerm is null and includeLower is true (similar for upperTerm\n     *  and includeUpper)\n     */\n    public RangeFilter(String fieldName, String lowerTerm, String upperTerm,\n                       boolean includeLower, boolean includeUpper) {\n        super(new RangeQuery(fieldName, lowerTerm, upperTerm, includeLower, includeUpper));\n    }\n\n","sourceOld":"  /**\n     * @param fieldName The field this range applies to\n     * @param lowerTerm The lower bound on this range\n     * @param upperTerm The upper bound on this range\n     * @param includeLower Does this range include the lower bound?\n     * @param includeUpper Does this range include the upper bound?\n     * @throws IllegalArgumentException if both terms are null or if\n     *  lowerTerm is null and includeLower is true (similar for upperTerm\n     *  and includeUpper)\n     */\n    public RangeFilter(String fieldName, String lowerTerm, String upperTerm,\n                       boolean includeLower, boolean includeUpper) {\n        this.fieldName = fieldName;\n        this.lowerTerm = lowerTerm;\n        this.upperTerm = upperTerm;\n        this.includeLower = includeLower;\n        this.includeUpper = includeUpper;\n        \n        if (null == lowerTerm && null == upperTerm) {\n            throw new IllegalArgumentException\n                (\"At least one value must be non-null\");\n        }\n        if (includeLower && null == lowerTerm) {\n            throw new IllegalArgumentException\n                (\"The lower bound must be non-null to be inclusive\");\n        }\n        if (includeUpper && null == upperTerm) {\n            throw new IllegalArgumentException\n                (\"The upper bound must be non-null to be inclusive\");\n        }\n        initRangeQuery();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f612096ab5275c4821d05f126bf45a89f4782b8","date":1246738452,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/RangeFilter#RangeFilter(String,String,String,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n     * @param fieldName The field this range applies to\n     * @param lowerTerm The lower bound on this range\n     * @param upperTerm The upper bound on this range\n     * @param includeLower Does this range include the lower bound?\n     * @param includeUpper Does this range include the upper bound?\n     * @throws IllegalArgumentException if both terms are null or if\n     *  lowerTerm is null and includeLower is true (similar for upperTerm\n     *  and includeUpper)\n     */\n    public RangeFilter(String fieldName, String lowerTerm, String upperTerm,\n                       boolean includeLower, boolean includeUpper) {\n        super(new RangeQuery(fieldName, lowerTerm, upperTerm, includeLower, includeUpper));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d5a0b761c4f4d0c34ebb3a8e04b62c71b3a8c0c","date":1246738520,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/RangeFilter#RangeFilter(String,String,String,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param fieldName The field this range applies to\n   * @param lowerTerm The lower bound on this range\n   * @param upperTerm The upper bound on this range\n   * @param includeLower Does this range include the lower bound?\n   * @param includeUpper Does this range include the upper bound?\n   * @throws IllegalArgumentException if both terms are null or if\n   *  lowerTerm is null and includeLower is true (similar for upperTerm\n   *  and includeUpper)\n   */\n  public RangeFilter(String fieldName, String lowerTerm, String upperTerm,\n                     boolean includeLower, boolean includeUpper) {\n      super(new TermRangeQuery(fieldName, lowerTerm, upperTerm, includeLower, includeUpper));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da","date":1255296547,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/RangeFilter#RangeFilter(String,String,String,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * @param fieldName The field this range applies to\n   * @param lowerTerm The lower bound on this range\n   * @param upperTerm The upper bound on this range\n   * @param includeLower Does this range include the lower bound?\n   * @param includeUpper Does this range include the upper bound?\n   * @throws IllegalArgumentException if both terms are null or if\n   *  lowerTerm is null and includeLower is true (similar for upperTerm\n   *  and includeUpper)\n   */\n  public RangeFilter(String fieldName, String lowerTerm, String upperTerm,\n                     boolean includeLower, boolean includeUpper) {\n      super(new TermRangeQuery(fieldName, lowerTerm, upperTerm, includeLower, includeUpper));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da":["5d5a0b761c4f4d0c34ebb3a8e04b62c71b3a8c0c"],"0f612096ab5275c4821d05f126bf45a89f4782b8":["2aa365c0765407d280cd5df0569b430c6f36832e"],"b33dc4652df2747e38f9782fde82bd426b77c538":["b5e500eae7bf33ebb6b269891c416b27799a4a45"],"b5e500eae7bf33ebb6b269891c416b27799a4a45":["95395bf94a1949052d9110b07e728d9cf6aba90c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2aa365c0765407d280cd5df0569b430c6f36832e":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"5d5a0b761c4f4d0c34ebb3a8e04b62c71b3a8c0c":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"95395bf94a1949052d9110b07e728d9cf6aba90c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["b33dc4652df2747e38f9782fde82bd426b77c538"]},"commit2Childs":{"80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0f612096ab5275c4821d05f126bf45a89f4782b8":["5d5a0b761c4f4d0c34ebb3a8e04b62c71b3a8c0c"],"b33dc4652df2747e38f9782fde82bd426b77c538":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"b5e500eae7bf33ebb6b269891c416b27799a4a45":["b33dc4652df2747e38f9782fde82bd426b77c538"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["95395bf94a1949052d9110b07e728d9cf6aba90c"],"2aa365c0765407d280cd5df0569b430c6f36832e":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"5d5a0b761c4f4d0c34ebb3a8e04b62c71b3a8c0c":["80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da"],"95395bf94a1949052d9110b07e728d9cf6aba90c":["b5e500eae7bf33ebb6b269891c416b27799a4a45"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["2aa365c0765407d280cd5df0569b430c6f36832e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}