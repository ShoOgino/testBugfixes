{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/TestMinimize#test().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestMinimize#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestMinimize#test().mjava","sourceNew":"  /** the minimal and non-minimal are compared to ensure they are the same. */\n  public void test() {\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Automaton a = AutomatonTestUtil.randomAutomaton(random);\n      Automaton b = a.clone();\n      MinimizationOperations.minimize(b);\n      assertTrue(BasicOperations.sameLanguage(a, b));\n    }\n  }\n\n","sourceOld":"  /** the minimal and non-minimal are compared to ensure they are the same. */\n  public void test() {\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Automaton a = AutomatonTestUtil.randomAutomaton(random);\n      Automaton b = a.clone();\n      MinimizationOperations.minimize(b);\n      assertTrue(BasicOperations.sameLanguage(a, b));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestMinimize#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestMinimize#test().mjava","sourceNew":"  /** the minimal and non-minimal are compared to ensure they are the same. */\n  public void test() {\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Automaton a = AutomatonTestUtil.randomAutomaton(random());\n      Automaton b = a.clone();\n      MinimizationOperations.minimize(b);\n      assertTrue(BasicOperations.sameLanguage(a, b));\n    }\n  }\n\n","sourceOld":"  /** the minimal and non-minimal are compared to ensure they are the same. */\n  public void test() {\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Automaton a = AutomatonTestUtil.randomAutomaton(random);\n      Automaton b = a.clone();\n      MinimizationOperations.minimize(b);\n      assertTrue(BasicOperations.sameLanguage(a, b));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestMinimize#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestMinimize#test().mjava","sourceNew":"  /** the minimal and non-minimal are compared to ensure they are the same. */\n  public void testBasic() {\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      LightAutomaton a = AutomatonTestUtil.randomAutomaton(random());\n      LightAutomaton la = BasicOperations.determinize(a);\n      LightAutomaton lb = BasicOperations.determinize(MinimizationOperationsLight.minimize(a));\n      assertTrue(BasicOperations.sameLanguage(la, lb));\n    }\n  }\n\n","sourceOld":"  /** the minimal and non-minimal are compared to ensure they are the same. */\n  public void test() {\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Automaton a = AutomatonTestUtil.randomAutomaton(random());\n      Automaton b = a.clone();\n      MinimizationOperations.minimize(b);\n      assertTrue(BasicOperations.sameLanguage(a, b));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestMinimize#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestMinimize#test().mjava","sourceNew":"  /** the minimal and non-minimal are compared to ensure they are the same. */\n  public void testBasic() {\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Automaton a = AutomatonTestUtil.randomAutomaton(random());\n      Automaton la = Operations.determinize(Operations.removeDeadStates(a));\n      Automaton lb = MinimizationOperations.minimize(a);\n      assertTrue(Operations.sameLanguage(la, lb));\n    }\n  }\n\n","sourceOld":"  /** the minimal and non-minimal are compared to ensure they are the same. */\n  public void test() {\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Automaton a = AutomatonTestUtil.randomAutomaton(random());\n      Automaton b = a.clone();\n      MinimizationOperations.minimize(b);\n      assertTrue(BasicOperations.sameLanguage(a, b));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5c84485629d80d203608e8975a1139de9933cc38":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["5c84485629d80d203608e8975a1139de9933cc38","ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["5c84485629d80d203608e8975a1139de9933cc38"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}