{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimDistributedQueueFactory.SimDistributedQueue#peekElements(int,long,Predicate[String]).mjava","commits":[{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimDistributedQueueFactory.SimDistributedQueue#peekElements(int,long,Predicate[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimDistributedQueueFactory.SimDistributedQueue#peekElements(int,long,Predicate[String]).mjava","sourceNew":"    @Override\n    public Collection<Pair<String, byte[]>> peekElements(int max, long waitMillis, Predicate<String> acceptFilter) throws Exception {\n      updateLock.lockInterruptibly();\n      try {\n        List<Pair<String, byte[]>> res = new LinkedList<>();\n        final int maximum = max < 0 ? Integer.MAX_VALUE : max;\n        final AtomicReference<Pair<String, byte[]>> pairRef = new AtomicReference<>();\n        queue.forEach(pair -> {\n          if (acceptFilter != null && !acceptFilter.test(pair.first())) {\n            return;\n          }\n          if (res.size() < maximum) {\n            pairRef.set(pair);\n            res.add(pair);\n          }\n        });\n        if (res.size() < maximum && waitMillis > 0) {\n          long waitNanos = TimeUnit.MILLISECONDS.toNanos(waitMillis);\n          waitNanos = changed.awaitNanos(waitNanos);\n          if (waitNanos < 0) {\n            return res;\n          }\n          AtomicBoolean seen = new AtomicBoolean(false);\n          queue.forEach(pair -> {\n            if (!seen.get()) {\n              if (pairRef.get() == null) {\n                seen.set(true);\n              } else {\n                if (pairRef.get().first().equals(pair.first())) {\n                  seen.set(true);\n                  return;\n                }\n              }\n            }\n            if (!seen.get()) {\n              return;\n            }\n            if (!acceptFilter.test(pair.first())) {\n              return;\n            }\n            if (res.size() < maximum) {\n              res.add(pair);\n              pairRef.set(pair);\n            } else {\n              return;\n            }\n          });\n        }\n        return res;\n      } finally {\n        updateLock.unlock();\n      }\n    }\n\n","sourceOld":"    @Override\n    public Collection<Pair<String, byte[]>> peekElements(int max, long waitMillis, Predicate<String> acceptFilter) throws Exception {\n      updateLock.lockInterruptibly();\n      try {\n        List<Pair<String, byte[]>> res = new LinkedList<>();\n        final int maximum = max < 0 ? Integer.MAX_VALUE : max;\n        final AtomicReference<Pair<String, byte[]>> pairRef = new AtomicReference<>();\n        queue.forEach(pair -> {\n          if (acceptFilter != null && !acceptFilter.test(pair.first())) {\n            return;\n          }\n          if (res.size() < maximum) {\n            pairRef.set(pair);\n            res.add(pair);\n          }\n        });\n        if (res.size() < maximum && waitMillis > 0) {\n          long waitNanos = TimeUnit.MILLISECONDS.toNanos(waitMillis);\n          waitNanos = changed.awaitNanos(waitNanos);\n          if (waitNanos < 0) {\n            return res;\n          }\n          AtomicBoolean seen = new AtomicBoolean(false);\n          queue.forEach(pair -> {\n            if (!seen.get()) {\n              if (pairRef.get() == null) {\n                seen.set(true);\n              } else {\n                if (pairRef.get().first().equals(pair.first())) {\n                  seen.set(true);\n                  return;\n                }\n              }\n            }\n            if (!seen.get()) {\n              return;\n            }\n            if (!acceptFilter.test(pair.first())) {\n              return;\n            }\n            if (res.size() < maximum) {\n              res.add(pair);\n              pairRef.set(pair);\n            } else {\n              return;\n            }\n          });\n        }\n        return res;\n      } finally {\n        updateLock.unlock();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimDistributedQueueFactory.SimDistributedQueue#peekElements(int,long,Predicate[String]).mjava","sourceNew":null,"sourceOld":"    @Override\n    public Collection<Pair<String, byte[]>> peekElements(int max, long waitMillis, Predicate<String> acceptFilter) throws Exception {\n      updateLock.lockInterruptibly();\n      try {\n        List<Pair<String, byte[]>> res = new LinkedList<>();\n        final int maximum = max < 0 ? Integer.MAX_VALUE : max;\n        final AtomicReference<Pair<String, byte[]>> pairRef = new AtomicReference<>();\n        queue.forEach(pair -> {\n          if (acceptFilter != null && !acceptFilter.test(pair.first())) {\n            return;\n          }\n          if (res.size() < maximum) {\n            pairRef.set(pair);\n            res.add(pair);\n          }\n        });\n        if (res.size() < maximum && waitMillis > 0) {\n          long waitNanos = TimeUnit.MILLISECONDS.toNanos(waitMillis);\n          waitNanos = changed.awaitNanos(waitNanos);\n          if (waitNanos < 0) {\n            return res;\n          }\n          AtomicBoolean seen = new AtomicBoolean(false);\n          queue.forEach(pair -> {\n            if (!seen.get()) {\n              if (pairRef.get() == null) {\n                seen.set(true);\n              } else {\n                if (pairRef.get().first().equals(pair.first())) {\n                  seen.set(true);\n                  return;\n                }\n              }\n            }\n            if (!seen.get()) {\n              return;\n            }\n            if (!acceptFilter.test(pair.first())) {\n              return;\n            }\n            if (res.size() < maximum) {\n              res.add(pair);\n              pairRef.set(pair);\n            } else {\n              return;\n            }\n          });\n        }\n        return res;\n      } finally {\n        updateLock.unlock();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}