{"path":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#matchHits(IndexSearcher,Sort).mjava","commits":[{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#matchHits(IndexSearcher,Sort).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#matchHits(Searcher,Sort).mjava","sourceNew":"  // make sure the documents returned by the search match the expected list\n  private void matchHits(IndexSearcher searcher, Sort sort) throws IOException {\n    // make a query without sorting first\n    ScoreDoc[] hitsByRank = searcher.search(query, null, Integer.MAX_VALUE).scoreDocs;\n    checkHits(hitsByRank, \"Sort by rank: \"); // check for duplicates\n    Map<Integer,Integer> resultMap = new TreeMap<Integer,Integer>();\n    // store hits in TreeMap - TreeMap does not allow duplicates; existing\n    // entries are silently overwritten\n    for (int hitid = 0; hitid < hitsByRank.length; ++hitid) {\n      resultMap.put(Integer.valueOf(hitsByRank[hitid].doc), // Key: Lucene\n                                                            // Document ID\n          Integer.valueOf(hitid)); // Value: Hits-Objekt Index\n    }\n    \n    // now make a query using the sort criteria\n    ScoreDoc[] resultSort = searcher.search(query, null, Integer.MAX_VALUE,\n        sort).scoreDocs;\n    checkHits(resultSort, \"Sort by custom criteria: \"); // check for duplicates\n    \n    // besides the sorting both sets of hits must be identical\n    for (int hitid = 0; hitid < resultSort.length; ++hitid) {\n      Integer idHitDate = Integer.valueOf(resultSort[hitid].doc); // document ID\n                                                                  // from sorted\n                                                                  // search\n      if (!resultMap.containsKey(idHitDate)) {\n        log(\"ID \" + idHitDate + \" not found. Possibliy a duplicate.\");\n      }\n      assertTrue(resultMap.containsKey(idHitDate)); // same ID must be in the\n                                                    // Map from the rank-sorted\n                                                    // search\n      // every hit must appear once in both result sets --> remove it from the\n      // Map.\n      // At the end the Map must be empty!\n      resultMap.remove(idHitDate);\n    }\n    if (resultMap.size() == 0) {\n      // log(\"All hits matched\");\n    } else {\n      log(\"Couldn't match \" + resultMap.size() + \" hits.\");\n    }\n    assertEquals(resultMap.size(), 0);\n  }\n\n","sourceOld":"  // make sure the documents returned by the search match the expected list\n  private void matchHits(Searcher searcher, Sort sort) throws IOException {\n    // make a query without sorting first\n    ScoreDoc[] hitsByRank = searcher.search(query, null, Integer.MAX_VALUE).scoreDocs;\n    checkHits(hitsByRank, \"Sort by rank: \"); // check for duplicates\n    Map<Integer,Integer> resultMap = new TreeMap<Integer,Integer>();\n    // store hits in TreeMap - TreeMap does not allow duplicates; existing\n    // entries are silently overwritten\n    for (int hitid = 0; hitid < hitsByRank.length; ++hitid) {\n      resultMap.put(Integer.valueOf(hitsByRank[hitid].doc), // Key: Lucene\n                                                            // Document ID\n          Integer.valueOf(hitid)); // Value: Hits-Objekt Index\n    }\n    \n    // now make a query using the sort criteria\n    ScoreDoc[] resultSort = searcher.search(query, null, Integer.MAX_VALUE,\n        sort).scoreDocs;\n    checkHits(resultSort, \"Sort by custom criteria: \"); // check for duplicates\n    \n    // besides the sorting both sets of hits must be identical\n    for (int hitid = 0; hitid < resultSort.length; ++hitid) {\n      Integer idHitDate = Integer.valueOf(resultSort[hitid].doc); // document ID\n                                                                  // from sorted\n                                                                  // search\n      if (!resultMap.containsKey(idHitDate)) {\n        log(\"ID \" + idHitDate + \" not found. Possibliy a duplicate.\");\n      }\n      assertTrue(resultMap.containsKey(idHitDate)); // same ID must be in the\n                                                    // Map from the rank-sorted\n                                                    // search\n      // every hit must appear once in both result sets --> remove it from the\n      // Map.\n      // At the end the Map must be empty!\n      resultMap.remove(idHitDate);\n    }\n    if (resultMap.size() == 0) {\n      // log(\"All hits matched\");\n    } else {\n      log(\"Couldn't match \" + resultMap.size() + \" hits.\");\n    }\n    assertEquals(resultMap.size(), 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#matchHits(IndexSearcher,Sort).mjava","pathOld":"/dev/null","sourceNew":"  // make sure the documents returned by the search match the expected list\n  private void matchHits(IndexSearcher searcher, Sort sort) throws IOException {\n    // make a query without sorting first\n    ScoreDoc[] hitsByRank = searcher.search(query, null, Integer.MAX_VALUE).scoreDocs;\n    checkHits(hitsByRank, \"Sort by rank: \"); // check for duplicates\n    Map<Integer,Integer> resultMap = new TreeMap<Integer,Integer>();\n    // store hits in TreeMap - TreeMap does not allow duplicates; existing\n    // entries are silently overwritten\n    for (int hitid = 0; hitid < hitsByRank.length; ++hitid) {\n      resultMap.put(Integer.valueOf(hitsByRank[hitid].doc), // Key: Lucene\n                                                            // Document ID\n          Integer.valueOf(hitid)); // Value: Hits-Objekt Index\n    }\n    \n    // now make a query using the sort criteria\n    ScoreDoc[] resultSort = searcher.search(query, null, Integer.MAX_VALUE,\n        sort).scoreDocs;\n    checkHits(resultSort, \"Sort by custom criteria: \"); // check for duplicates\n    \n    // besides the sorting both sets of hits must be identical\n    for (int hitid = 0; hitid < resultSort.length; ++hitid) {\n      Integer idHitDate = Integer.valueOf(resultSort[hitid].doc); // document ID\n                                                                  // from sorted\n                                                                  // search\n      if (!resultMap.containsKey(idHitDate)) {\n        log(\"ID \" + idHitDate + \" not found. Possibliy a duplicate.\");\n      }\n      assertTrue(resultMap.containsKey(idHitDate)); // same ID must be in the\n                                                    // Map from the rank-sorted\n                                                    // search\n      // every hit must appear once in both result sets --> remove it from the\n      // Map.\n      // At the end the Map must be empty!\n      resultMap.remove(idHitDate);\n    }\n    if (resultMap.size() == 0) {\n      // log(\"All hits matched\");\n    } else {\n      log(\"Couldn't match \" + resultMap.size() + \" hits.\");\n    }\n    assertEquals(resultMap.size(), 0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#matchHits(IndexSearcher,Sort).mjava","pathOld":"/dev/null","sourceNew":"  // make sure the documents returned by the search match the expected list\n  private void matchHits(IndexSearcher searcher, Sort sort) throws IOException {\n    // make a query without sorting first\n    ScoreDoc[] hitsByRank = searcher.search(query, null, Integer.MAX_VALUE).scoreDocs;\n    checkHits(hitsByRank, \"Sort by rank: \"); // check for duplicates\n    Map<Integer,Integer> resultMap = new TreeMap<Integer,Integer>();\n    // store hits in TreeMap - TreeMap does not allow duplicates; existing\n    // entries are silently overwritten\n    for (int hitid = 0; hitid < hitsByRank.length; ++hitid) {\n      resultMap.put(Integer.valueOf(hitsByRank[hitid].doc), // Key: Lucene\n                                                            // Document ID\n          Integer.valueOf(hitid)); // Value: Hits-Objekt Index\n    }\n    \n    // now make a query using the sort criteria\n    ScoreDoc[] resultSort = searcher.search(query, null, Integer.MAX_VALUE,\n        sort).scoreDocs;\n    checkHits(resultSort, \"Sort by custom criteria: \"); // check for duplicates\n    \n    // besides the sorting both sets of hits must be identical\n    for (int hitid = 0; hitid < resultSort.length; ++hitid) {\n      Integer idHitDate = Integer.valueOf(resultSort[hitid].doc); // document ID\n                                                                  // from sorted\n                                                                  // search\n      if (!resultMap.containsKey(idHitDate)) {\n        log(\"ID \" + idHitDate + \" not found. Possibliy a duplicate.\");\n      }\n      assertTrue(resultMap.containsKey(idHitDate)); // same ID must be in the\n                                                    // Map from the rank-sorted\n                                                    // search\n      // every hit must appear once in both result sets --> remove it from the\n      // Map.\n      // At the end the Map must be empty!\n      resultMap.remove(idHitDate);\n    }\n    if (resultMap.size() == 0) {\n      // log(\"All hits matched\");\n    } else {\n      log(\"Couldn't match \" + resultMap.size() + \" hits.\");\n    }\n    assertEquals(resultMap.size(), 0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCustomSearcherSort#matchHits(IndexSearcher,Sort).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#matchHits(IndexSearcher,Sort).mjava","sourceNew":"  // make sure the documents returned by the search match the expected list\n  private void matchHits(IndexSearcher searcher, Sort sort) throws IOException {\n    // make a query without sorting first\n    ScoreDoc[] hitsByRank = searcher.search(query, null, Integer.MAX_VALUE).scoreDocs;\n    checkHits(hitsByRank, \"Sort by rank: \"); // check for duplicates\n    Map<Integer,Integer> resultMap = new TreeMap<Integer,Integer>();\n    // store hits in TreeMap - TreeMap does not allow duplicates; existing\n    // entries are silently overwritten\n    for (int hitid = 0; hitid < hitsByRank.length; ++hitid) {\n      resultMap.put(Integer.valueOf(hitsByRank[hitid].doc), // Key: Lucene\n                                                            // Document ID\n          Integer.valueOf(hitid)); // Value: Hits-Objekt Index\n    }\n    \n    // now make a query using the sort criteria\n    ScoreDoc[] resultSort = searcher.search(query, null, Integer.MAX_VALUE,\n        sort).scoreDocs;\n    checkHits(resultSort, \"Sort by custom criteria: \"); // check for duplicates\n    \n    // besides the sorting both sets of hits must be identical\n    for (int hitid = 0; hitid < resultSort.length; ++hitid) {\n      Integer idHitDate = Integer.valueOf(resultSort[hitid].doc); // document ID\n                                                                  // from sorted\n                                                                  // search\n      if (!resultMap.containsKey(idHitDate)) {\n        log(\"ID \" + idHitDate + \" not found. Possibliy a duplicate.\");\n      }\n      assertTrue(resultMap.containsKey(idHitDate)); // same ID must be in the\n                                                    // Map from the rank-sorted\n                                                    // search\n      // every hit must appear once in both result sets --> remove it from the\n      // Map.\n      // At the end the Map must be empty!\n      resultMap.remove(idHitDate);\n    }\n    if (resultMap.size() == 0) {\n      // log(\"All hits matched\");\n    } else {\n      log(\"Couldn't match \" + resultMap.size() + \" hits.\");\n    }\n    assertEquals(resultMap.size(), 0);\n  }\n\n","sourceOld":"  // make sure the documents returned by the search match the expected list\n  private void matchHits(IndexSearcher searcher, Sort sort) throws IOException {\n    // make a query without sorting first\n    ScoreDoc[] hitsByRank = searcher.search(query, null, Integer.MAX_VALUE).scoreDocs;\n    checkHits(hitsByRank, \"Sort by rank: \"); // check for duplicates\n    Map<Integer,Integer> resultMap = new TreeMap<Integer,Integer>();\n    // store hits in TreeMap - TreeMap does not allow duplicates; existing\n    // entries are silently overwritten\n    for (int hitid = 0; hitid < hitsByRank.length; ++hitid) {\n      resultMap.put(Integer.valueOf(hitsByRank[hitid].doc), // Key: Lucene\n                                                            // Document ID\n          Integer.valueOf(hitid)); // Value: Hits-Objekt Index\n    }\n    \n    // now make a query using the sort criteria\n    ScoreDoc[] resultSort = searcher.search(query, null, Integer.MAX_VALUE,\n        sort).scoreDocs;\n    checkHits(resultSort, \"Sort by custom criteria: \"); // check for duplicates\n    \n    // besides the sorting both sets of hits must be identical\n    for (int hitid = 0; hitid < resultSort.length; ++hitid) {\n      Integer idHitDate = Integer.valueOf(resultSort[hitid].doc); // document ID\n                                                                  // from sorted\n                                                                  // search\n      if (!resultMap.containsKey(idHitDate)) {\n        log(\"ID \" + idHitDate + \" not found. Possibliy a duplicate.\");\n      }\n      assertTrue(resultMap.containsKey(idHitDate)); // same ID must be in the\n                                                    // Map from the rank-sorted\n                                                    // search\n      // every hit must appear once in both result sets --> remove it from the\n      // Map.\n      // At the end the Map must be empty!\n      resultMap.remove(idHitDate);\n    }\n    if (resultMap.size() == 0) {\n      // log(\"All hits matched\");\n    } else {\n      log(\"Couldn't match \" + resultMap.size() + \" hits.\");\n    }\n    assertEquals(resultMap.size(), 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","3a119bbc8703c10faa329ec201c654b3a35a1e3e","868da859b43505d9d2a023bfeae6dd0c795f5295"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","8b241ea5e635d896cc0af83cd96ffd0322e0aba7","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}