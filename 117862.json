{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testWickedLongTerm().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testWickedLongTerm().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testWickedLongTerm().mjava","sourceNew":"    /**\n     * Make sure we skip wicked long terms.\n    */\n    public void testWickedLongTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      char[] chars = new char[DocumentsWriter.CHAR_BLOCK_SIZE-1];\n      Arrays.fill(chars, 'x');\n      Document doc = new Document();\n      final String bigTerm = new String(chars);\n\n      // Max length term is 16383, so this contents produces\n      // a too-long term:\n      String contents = \"abc xyz x\" + bigTerm + \" another term\";\n      doc.add(new Field(\"content\", contents, Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n\n      // Make sure we can add another normal document\n      doc = new Document();\n      doc.add(new Field(\"content\", \"abc bbb ccc\", Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Make sure all terms < max size were indexed\n      assertEquals(2, reader.docFreq(new Term(\"content\", \"abc\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"bbb\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"term\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"another\")));\n\n      // Make sure position is still incremented when\n      // massive term is skipped:\n      TermPositions tps = reader.termPositions(new Term(\"content\", \"another\"));\n      assertTrue(tps.next());\n      assertEquals(1, tps.freq());\n      assertEquals(3, tps.nextPosition());\n\n      // Make sure the doc that has the massive term is in\n      // the index:\n      assertEquals(\"document with wicked long term should is not in the index!\", 2, reader.numDocs());\n\n      reader.close();\n\n      // Make sure we can add a document with exactly the\n      // maximum length term, and search on that term:\n      doc = new Document();\n      doc.add(new Field(\"content\", bigTerm, Field.Store.NO, Field.Index.ANALYZED));\n      StandardAnalyzer sa = new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT);\n      sa.setMaxTokenLength(100000);\n      writer  = new IndexWriter(dir, sa, IndexWriter.MaxFieldLength.LIMITED);\n      writer.addDocument(doc);\n      writer.close();\n      reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.docFreq(new Term(\"content\", bigTerm)));\n      reader.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure we skip wicked long terms.\n    */\n    public void testWickedLongTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      char[] chars = new char[DocumentsWriter.CHAR_BLOCK_SIZE-1];\n      Arrays.fill(chars, 'x');\n      Document doc = new Document();\n      final String bigTerm = new String(chars);\n\n      // Max length term is 16383, so this contents produces\n      // a too-long term:\n      String contents = \"abc xyz x\" + bigTerm + \" another term\";\n      doc.add(new Field(\"content\", contents, Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n\n      // Make sure we can add another normal document\n      doc = new Document();\n      doc.add(new Field(\"content\", \"abc bbb ccc\", Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Make sure all terms < max size were indexed\n      assertEquals(2, reader.docFreq(new Term(\"content\", \"abc\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"bbb\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"term\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"another\")));\n\n      // Make sure position is still incremented when\n      // massive term is skipped:\n      TermPositions tps = reader.termPositions(new Term(\"content\", \"another\"));\n      assertTrue(tps.next());\n      assertEquals(1, tps.freq());\n      assertEquals(3, tps.nextPosition());\n\n      // Make sure the doc that has the massive term is in\n      // the index:\n      assertEquals(\"document with wicked long term should is not in the index!\", 2, reader.numDocs());\n\n      reader.close();\n\n      // Make sure we can add a document with exactly the\n      // maximum length term, and search on that term:\n      doc = new Document();\n      doc.add(new Field(\"content\", bigTerm, Field.Store.NO, Field.Index.ANALYZED));\n      StandardAnalyzer sa = new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT);\n      sa.setMaxTokenLength(100000);\n      writer  = new IndexWriter(dir, sa, IndexWriter.MaxFieldLength.LIMITED);\n      writer.addDocument(doc);\n      writer.close();\n      reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.docFreq(new Term(\"content\", bigTerm)));\n      reader.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testWickedLongTerm().mjava","sourceNew":null,"sourceOld":"    /**\n     * Make sure we skip wicked long terms.\n    */\n    public void testWickedLongTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      char[] chars = new char[DocumentsWriter.CHAR_BLOCK_SIZE-1];\n      Arrays.fill(chars, 'x');\n      Document doc = new Document();\n      final String bigTerm = new String(chars);\n\n      // Max length term is 16383, so this contents produces\n      // a too-long term:\n      String contents = \"abc xyz x\" + bigTerm + \" another term\";\n      doc.add(new Field(\"content\", contents, Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n\n      // Make sure we can add another normal document\n      doc = new Document();\n      doc.add(new Field(\"content\", \"abc bbb ccc\", Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Make sure all terms < max size were indexed\n      assertEquals(2, reader.docFreq(new Term(\"content\", \"abc\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"bbb\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"term\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"another\")));\n\n      // Make sure position is still incremented when\n      // massive term is skipped:\n      TermPositions tps = reader.termPositions(new Term(\"content\", \"another\"));\n      assertTrue(tps.next());\n      assertEquals(1, tps.freq());\n      assertEquals(3, tps.nextPosition());\n\n      // Make sure the doc that has the massive term is in\n      // the index:\n      assertEquals(\"document with wicked long term should is not in the index!\", 2, reader.numDocs());\n\n      reader.close();\n\n      // Make sure we can add a document with exactly the\n      // maximum length term, and search on that term:\n      doc = new Document();\n      doc.add(new Field(\"content\", bigTerm, Field.Store.NO, Field.Index.ANALYZED));\n      StandardAnalyzer sa = new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT);\n      sa.setMaxTokenLength(100000);\n      writer  = new IndexWriter(dir, sa, IndexWriter.MaxFieldLength.LIMITED);\n      writer.addDocument(doc);\n      writer.close();\n      reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.docFreq(new Term(\"content\", bigTerm)));\n      reader.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}