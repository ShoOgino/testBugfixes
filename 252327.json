{"path":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/GeoBBoxTest#testBBoxPointWithin().mjava","commits":[{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/GeoBBoxTest#testBBoxPointWithin().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoBBoxTest#testBBoxPointWithin().mjava","sourceNew":"  @Test\n  public void testBBoxPointWithin() {\n    GeoBBox box;\n    GeoPoint gp;\n\n    // Standard normal Rect box, not crossing dateline\n    box = GeoBBoxFactory.makeGeoBBox(PlanetModel.SPHERE, 0.0, -Math.PI * 0.25, -1.0, 1.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, 0.0);\n    assertTrue(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.1, 0.0);\n    assertFalse(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -Math.PI * 0.5, 0.0);\n    assertFalse(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, 1.1);\n    assertFalse(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, -1.1);\n    assertFalse(box.isWithin(gp));\n    assertEquals(0.1,box.computeOutsideDistance(DistanceStyle.ARC,gp),1e-2);\n    assertEquals(0.1,box.computeOutsideDistance(DistanceStyle.NORMAL,gp),1e-2);\n    assertEquals(0.1,box.computeOutsideDistance(DistanceStyle.NORMAL,gp),1e-2);\n\n    // Standard normal Rect box, crossing dateline\n    box = GeoBBoxFactory.makeGeoBBox(PlanetModel.SPHERE, 0.0, -Math.PI * 0.25, Math.PI - 1.0, -Math.PI + 1.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, -Math.PI);\n    assertTrue(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.1, -Math.PI);\n    assertFalse(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -Math.PI * 0.5, -Math.PI);\n    assertFalse(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, -Math.PI + 1.1);\n    assertFalse(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, (-Math.PI - 1.1) + Math.PI * 2.0);\n    assertFalse(box.isWithin(gp));\n\n    // Latitude zone rectangle\n    box = GeoBBoxFactory.makeGeoBBox(PlanetModel.SPHERE, 0.0, -Math.PI * 0.25, -Math.PI, Math.PI);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, -Math.PI);\n    assertTrue(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.1, -Math.PI);\n    assertFalse(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -Math.PI * 0.5, -Math.PI);\n    assertFalse(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, -Math.PI + 1.1);\n    assertTrue(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, (-Math.PI - 1.1) + Math.PI * 2.0);\n    assertTrue(box.isWithin(gp));\n\n    // World\n    box = GeoBBoxFactory.makeGeoBBox(PlanetModel.SPHERE, Math.PI * 0.5, -Math.PI * 0.5, -Math.PI, Math.PI);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, -Math.PI);\n    assertTrue(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.1, -Math.PI);\n    assertTrue(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -Math.PI * 0.5, -Math.PI);\n    assertTrue(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, -Math.PI + 1.1);\n    assertTrue(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, (-Math.PI - 1.1) + Math.PI * 2.0);\n    assertTrue(box.isWithin(gp));\n\n  }\n\n","sourceOld":"  @Test\n  public void testBBoxPointWithin() {\n    GeoBBox box;\n    GeoPoint gp;\n\n    // Standard normal Rect box, not crossing dateline\n    box = GeoBBoxFactory.makeGeoBBox(PlanetModel.SPHERE, 0.0, -Math.PI * 0.25, -1.0, 1.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, 0.0);\n    assertTrue(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.1, 0.0);\n    assertFalse(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -Math.PI * 0.5, 0.0);\n    assertFalse(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, 1.1);\n    assertFalse(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, -1.1);\n    assertFalse(box.isWithin(gp));\n    assertEquals(0.1,box.computeOutsideDistance(DistanceStyle.ARC,gp),1e-2);\n    assertEquals(0.1,box.computeOutsideDistance(DistanceStyle.NORMAL,gp),1e-2);\n    assertEquals(0.1,box.computeOutsideDistance(DistanceStyle.NORMAL,gp),1e-2);\n\n    // Standard normal Rect box, crossing dateline\n    box = GeoBBoxFactory.makeGeoBBox(PlanetModel.SPHERE, 0.0, -Math.PI * 0.25, Math.PI - 1.0, -Math.PI + 1.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, -Math.PI);\n    assertTrue(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.1, -Math.PI);\n    assertFalse(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -Math.PI * 0.5, -Math.PI);\n    assertFalse(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, -Math.PI + 1.1);\n    assertFalse(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, (-Math.PI - 1.1) + Math.PI * 2.0);\n    assertFalse(box.isWithin(gp));\n\n    // Latitude zone rectangle\n    box = GeoBBoxFactory.makeGeoBBox(PlanetModel.SPHERE, 0.0, -Math.PI * 0.25, -Math.PI, Math.PI);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, -Math.PI);\n    assertTrue(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.1, -Math.PI);\n    assertFalse(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -Math.PI * 0.5, -Math.PI);\n    assertFalse(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, -Math.PI + 1.1);\n    assertTrue(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, (-Math.PI - 1.1) + Math.PI * 2.0);\n    assertTrue(box.isWithin(gp));\n\n    // World\n    box = GeoBBoxFactory.makeGeoBBox(PlanetModel.SPHERE, Math.PI * 0.5, -Math.PI * 0.5, -Math.PI, Math.PI);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, -Math.PI);\n    assertTrue(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.1, -Math.PI);\n    assertTrue(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -Math.PI * 0.5, -Math.PI);\n    assertTrue(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, -Math.PI + 1.1);\n    assertTrue(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, (-Math.PI - 1.1) + Math.PI * 2.0);\n    assertTrue(box.isWithin(gp));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e444678504caf66a8060b1d514383aa4feac0c","date":1457399659,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoBBoxTest#testBBoxPointWithin().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/GeoBBoxTest#testBBoxPointWithin().mjava","sourceNew":"  @Test\n  public void testBBoxPointWithin() {\n    GeoBBox box;\n    GeoPoint gp;\n\n    // Standard normal Rect box, not crossing dateline\n    box = GeoBBoxFactory.makeGeoBBox(PlanetModel.SPHERE, 0.0, -Math.PI * 0.25, -1.0, 1.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, 0.0);\n    assertTrue(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.1, 0.0);\n    assertFalse(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -Math.PI * 0.5, 0.0);\n    assertFalse(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, 1.1);\n    assertFalse(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, -1.1);\n    assertFalse(box.isWithin(gp));\n    assertEquals(0.1,box.computeOutsideDistance(DistanceStyle.ARC,gp),1e-2);\n    assertEquals(0.1,box.computeOutsideDistance(DistanceStyle.NORMAL,gp),1e-2);\n    assertEquals(0.1,box.computeOutsideDistance(DistanceStyle.NORMAL,gp),1e-2);\n\n    // Standard normal Rect box, crossing dateline\n    box = GeoBBoxFactory.makeGeoBBox(PlanetModel.SPHERE, 0.0, -Math.PI * 0.25, Math.PI - 1.0, -Math.PI + 1.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, -Math.PI);\n    assertTrue(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.1, -Math.PI);\n    assertFalse(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -Math.PI * 0.5, -Math.PI);\n    assertFalse(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, -Math.PI + 1.1);\n    assertFalse(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, (-Math.PI - 1.1) + Math.PI * 2.0);\n    assertFalse(box.isWithin(gp));\n\n    // Latitude zone rectangle\n    box = GeoBBoxFactory.makeGeoBBox(PlanetModel.SPHERE, 0.0, -Math.PI * 0.25, -Math.PI, Math.PI);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, -Math.PI);\n    assertTrue(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.1, -Math.PI);\n    assertFalse(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -Math.PI * 0.5, -Math.PI);\n    assertFalse(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, -Math.PI + 1.1);\n    assertTrue(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, (-Math.PI - 1.1) + Math.PI * 2.0);\n    assertTrue(box.isWithin(gp));\n\n    // World\n    box = GeoBBoxFactory.makeGeoBBox(PlanetModel.SPHERE, Math.PI * 0.5, -Math.PI * 0.5, -Math.PI, Math.PI);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, -Math.PI);\n    assertTrue(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.1, -Math.PI);\n    assertTrue(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -Math.PI * 0.5, -Math.PI);\n    assertTrue(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, -Math.PI + 1.1);\n    assertTrue(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, (-Math.PI - 1.1) + Math.PI * 2.0);\n    assertTrue(box.isWithin(gp));\n\n  }\n\n","sourceOld":"  @Test\n  public void testBBoxPointWithin() {\n    GeoBBox box;\n    GeoPoint gp;\n\n    // Standard normal Rect box, not crossing dateline\n    box = GeoBBoxFactory.makeGeoBBox(PlanetModel.SPHERE, 0.0, -Math.PI * 0.25, -1.0, 1.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, 0.0);\n    assertTrue(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.1, 0.0);\n    assertFalse(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -Math.PI * 0.5, 0.0);\n    assertFalse(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, 1.1);\n    assertFalse(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, -1.1);\n    assertFalse(box.isWithin(gp));\n    assertEquals(0.1,box.computeOutsideDistance(DistanceStyle.ARC,gp),1e-2);\n    assertEquals(0.1,box.computeOutsideDistance(DistanceStyle.NORMAL,gp),1e-2);\n    assertEquals(0.1,box.computeOutsideDistance(DistanceStyle.NORMAL,gp),1e-2);\n\n    // Standard normal Rect box, crossing dateline\n    box = GeoBBoxFactory.makeGeoBBox(PlanetModel.SPHERE, 0.0, -Math.PI * 0.25, Math.PI - 1.0, -Math.PI + 1.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, -Math.PI);\n    assertTrue(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.1, -Math.PI);\n    assertFalse(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -Math.PI * 0.5, -Math.PI);\n    assertFalse(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, -Math.PI + 1.1);\n    assertFalse(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, (-Math.PI - 1.1) + Math.PI * 2.0);\n    assertFalse(box.isWithin(gp));\n\n    // Latitude zone rectangle\n    box = GeoBBoxFactory.makeGeoBBox(PlanetModel.SPHERE, 0.0, -Math.PI * 0.25, -Math.PI, Math.PI);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, -Math.PI);\n    assertTrue(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.1, -Math.PI);\n    assertFalse(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -Math.PI * 0.5, -Math.PI);\n    assertFalse(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, -Math.PI + 1.1);\n    assertTrue(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, (-Math.PI - 1.1) + Math.PI * 2.0);\n    assertTrue(box.isWithin(gp));\n\n    // World\n    box = GeoBBoxFactory.makeGeoBBox(PlanetModel.SPHERE, Math.PI * 0.5, -Math.PI * 0.5, -Math.PI, Math.PI);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, -Math.PI);\n    assertTrue(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.1, -Math.PI);\n    assertTrue(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -Math.PI * 0.5, -Math.PI);\n    assertTrue(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, -Math.PI + 1.1);\n    assertTrue(box.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, (-Math.PI - 1.1) + Math.PI * 2.0);\n    assertTrue(box.isWithin(gp));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3022be5842502b7c2a57a5124199bbc30236f0a0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b4e444678504caf66a8060b1d514383aa4feac0c":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4e444678504caf66a8060b1d514383aa4feac0c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["b4e444678504caf66a8060b1d514383aa4feac0c"],"b4e444678504caf66a8060b1d514383aa4feac0c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}