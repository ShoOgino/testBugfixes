{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/request/V1toV2ApiMapper.ActionInfo#serializeToV2Format(SolrParams,String[]).mjava","commits":[{"id":"4d3fc88a06a44fc3112186e9be4562b36713955d","date":1497587751,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/V1toV2ApiMapper.ActionInfo#serializeToV2Format(SolrParams,String[]).mjava","pathOld":"/dev/null","sourceNew":"    private MapWriter serializeToV2Format(SolrParams params, String[] list) {\n      return ew -> ew.put(meta.commandName, (MapWriter) ew1 -> {\n        Iterator<String> iter = params.getParameterNamesIterator();\n        Map<String, Map<String, String>> subProperties = null;\n        while (iter.hasNext()) {\n          String key = iter.next();\n          if (CoreAdminParams.ACTION.equals(key)) continue;\n          Object substitute = meta.getReverseParamSubstitute(key);\n          int idx = template.variables.indexOf(substitute);\n          if (idx > -1) {\n            String val = params.get(String.valueOf(substitute));\n            if (val == null) throw new RuntimeException(\"null value is not valid for \" + key);\n            list[idx] = val;\n            continue;\n          }\n          if (substitute instanceof Pair) {//this is a nested object\n            Pair<String, String> p = (Pair<String, String>) substitute;\n            if (subProperties == null) subProperties = new HashMap<>();\n            subProperties.computeIfAbsent(p.first(), s -> new HashMap<>()).put(p.second(), params.get(key));\n          } else {\n            Object val = params.get(key);\n            ew1.put(substitute.toString(), val);\n          }\n        }\n        if (subProperties != null) {\n          for (Map.Entry<String, Map<String, String>> e : subProperties.entrySet()) {\n            ew1.put(e.getKey(), e.getValue());\n          }\n        }\n      });\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8fb90b6f156f755246cc924556ceb4bbdba7c2a7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/V1toV2ApiMapper.ActionInfo#serializeToV2Format(SolrParams,String[]).mjava","pathOld":"/dev/null","sourceNew":"    private MapWriter serializeToV2Format(SolrParams params, String[] list) {\n      return ew -> ew.put(meta.commandName, (MapWriter) ew1 -> {\n        Iterator<String> iter = params.getParameterNamesIterator();\n        Map<String, Map<String, String>> subProperties = null;\n        while (iter.hasNext()) {\n          String key = iter.next();\n          if (CoreAdminParams.ACTION.equals(key)) continue;\n          Object substitute = meta.getReverseParamSubstitute(key);\n          int idx = template.variables.indexOf(substitute);\n          if (idx > -1) {\n            String val = params.get(String.valueOf(substitute));\n            if (val == null) throw new RuntimeException(\"null value is not valid for \" + key);\n            list[idx] = val;\n            continue;\n          }\n          if (substitute instanceof Pair) {//this is a nested object\n            Pair<String, String> p = (Pair<String, String>) substitute;\n            if (subProperties == null) subProperties = new HashMap<>();\n            subProperties.computeIfAbsent(p.first(), s -> new HashMap<>()).put(p.second(), params.get(key));\n          } else {\n            Object val = params.get(key);\n            ew1.put(substitute.toString(), val);\n          }\n        }\n        if (subProperties != null) {\n          for (Map.Entry<String, Map<String, String>> e : subProperties.entrySet()) {\n            ew1.put(e.getKey(), e.getValue());\n          }\n        }\n      });\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/V1toV2ApiMapper.ActionInfo#serializeToV2Format(SolrParams,String[]).mjava","pathOld":"/dev/null","sourceNew":"    private MapWriter serializeToV2Format(SolrParams params, String[] list) {\n      return ew -> ew.put(meta.commandName, (MapWriter) ew1 -> {\n        Iterator<String> iter = params.getParameterNamesIterator();\n        Map<String, Map<String, String>> subProperties = null;\n        while (iter.hasNext()) {\n          String key = iter.next();\n          if (CoreAdminParams.ACTION.equals(key)) continue;\n          Object substitute = meta.getReverseParamSubstitute(key);\n          int idx = template.variables.indexOf(substitute);\n          if (idx > -1) {\n            String val = params.get(String.valueOf(substitute));\n            if (val == null) throw new RuntimeException(\"null value is not valid for \" + key);\n            list[idx] = val;\n            continue;\n          }\n          if (substitute instanceof Pair) {//this is a nested object\n            Pair<String, String> p = (Pair<String, String>) substitute;\n            if (subProperties == null) subProperties = new HashMap<>();\n            subProperties.computeIfAbsent(p.first(), s -> new HashMap<>()).put(p.second(), params.get(key));\n          } else {\n            Object val = params.get(key);\n            ew1.put(substitute.toString(), val);\n          }\n        }\n        if (subProperties != null) {\n          for (Map.Entry<String, Map<String, String>> e : subProperties.entrySet()) {\n            ew1.put(e.getKey(), e.getValue());\n          }\n        }\n      });\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8fb90b6f156f755246cc924556ceb4bbdba7c2a7","date":1520449097,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/V1toV2ApiMapper.ActionInfo#serializeToV2Format(SolrParams,String[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/V1toV2ApiMapper.ActionInfo#serializeToV2Format(SolrParams,String[]).mjava","sourceNew":"    private MapWriter serializeToV2Format(SolrParams paramsV1, String[] list) {\n      return ew -> ew.put(meta.commandName, (MapWriter) ew1 -> {\n        Iterator<String> iter = paramsV1.getParameterNamesIterator();\n        Map<String, Map<String, String>> subProperties = null;\n        while (iter.hasNext()) {\n          String key = iter.next();\n          if (CoreAdminParams.ACTION.equals(key)) continue;\n          Object substitute = meta.getReverseParamSubstitute(key);\n          int idx = template.variables.indexOf(substitute);\n          if (idx > -1) {\n            String val = paramsV1.get(key);\n            if (val == null) throw new RuntimeException(\"null value is not valid for \" + key);\n            list[idx] = val;\n            continue;\n          }\n          if (substitute instanceof Pair) {//this is a nested object\n            @SuppressWarnings(\"unchecked\")\n            Pair<String, String> p = (Pair<String, String>) substitute;\n            if (subProperties == null) subProperties = new HashMap<>();\n            subProperties.computeIfAbsent(p.first(), s -> new HashMap<>()).put(p.second(), paramsV1.get(key));\n          } else {\n            Object val = paramsV1.get(key);\n            ew1.put(substitute.toString(), val);\n          }\n        }\n        if (subProperties != null) {\n          for (Map.Entry<String, Map<String, String>> e : subProperties.entrySet()) {\n            ew1.put(e.getKey(), e.getValue());\n          }\n        }\n      });\n    }\n\n","sourceOld":"    private MapWriter serializeToV2Format(SolrParams params, String[] list) {\n      return ew -> ew.put(meta.commandName, (MapWriter) ew1 -> {\n        Iterator<String> iter = params.getParameterNamesIterator();\n        Map<String, Map<String, String>> subProperties = null;\n        while (iter.hasNext()) {\n          String key = iter.next();\n          if (CoreAdminParams.ACTION.equals(key)) continue;\n          Object substitute = meta.getReverseParamSubstitute(key);\n          int idx = template.variables.indexOf(substitute);\n          if (idx > -1) {\n            String val = params.get(String.valueOf(substitute));\n            if (val == null) throw new RuntimeException(\"null value is not valid for \" + key);\n            list[idx] = val;\n            continue;\n          }\n          if (substitute instanceof Pair) {//this is a nested object\n            Pair<String, String> p = (Pair<String, String>) substitute;\n            if (subProperties == null) subProperties = new HashMap<>();\n            subProperties.computeIfAbsent(p.first(), s -> new HashMap<>()).put(p.second(), params.get(key));\n          } else {\n            Object val = params.get(key);\n            ew1.put(substitute.toString(), val);\n          }\n        }\n        if (subProperties != null) {\n          for (Map.Entry<String, Map<String, String>> e : subProperties.entrySet()) {\n            ew1.put(e.getKey(), e.getValue());\n          }\n        }\n      });\n    }\n\n","bugFix":["4d3fc88a06a44fc3112186e9be4562b36713955d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d3fc88a06a44fc3112186e9be4562b36713955d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8fb90b6f156f755246cc924556ceb4bbdba7c2a7":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4d3fc88a06a44fc3112186e9be4562b36713955d"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4d3fc88a06a44fc3112186e9be4562b36713955d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8fb90b6f156f755246cc924556ceb4bbdba7c2a7"]},"commit2Childs":{"4d3fc88a06a44fc3112186e9be4562b36713955d":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"8fb90b6f156f755246cc924556ceb4bbdba7c2a7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d3fc88a06a44fc3112186e9be4562b36713955d","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["8fb90b6f156f755246cc924556ceb4bbdba7c2a7"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}