{"path":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#removeTerm(String).mjava","commits":[{"id":"9339df295b9162e4c81adbb4da44b5939d27c1ef","date":1520594349,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#removeTerm(String).mjava","pathOld":"/dev/null","sourceNew":"  // package private for testing, only used by tests\r\n  // return true if this object should not be reused\r\n  boolean removeTerm(String coreNodeName) {\r\n    Terms newTerms;\r\n    while ( (newTerms = terms.removeTerm(coreNodeName)) != null) {\r\n      try {\r\n        if (saveTerms(newTerms)) return false;\r\n      } catch (KeeperException.NoNodeException e) {\r\n        return true;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6cc501b75cbd5d0319284563cdd20aff857ee6","date":1575346594,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#removeTerm(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#removeTerm(String).mjava","sourceNew":"  // package private for testing, only used by tests\r\n  // return true if this object should not be reused\r\n  boolean removeTerm(String coreNodeName) {\r\n    ShardTerms newTerms;\r\n    while ( (newTerms = terms.removeTerm(coreNodeName)) != null) {\r\n      try {\r\n        if (saveTerms(newTerms)) return false;\r\n      } catch (KeeperException.NoNodeException e) {\r\n        return true;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\n","sourceOld":"  // package private for testing, only used by tests\r\n  // return true if this object should not be reused\r\n  boolean removeTerm(String coreNodeName) {\r\n    Terms newTerms;\r\n    while ( (newTerms = terms.removeTerm(coreNodeName)) != null) {\r\n      try {\r\n        if (saveTerms(newTerms)) return false;\r\n      } catch (KeeperException.NoNodeException e) {\r\n        return true;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3aa683bba99315838c968fefedf3d74f44aa993","date":1575395112,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#removeTerm(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#removeTerm(String).mjava","sourceNew":"  // package private for testing, only used by tests\r\n  // return true if this object should not be reused\r\n  boolean removeTerm(String coreNodeName) {\r\n    ShardTerms newTerms;\r\n    while ( (newTerms = terms.removeTerm(coreNodeName)) != null) {\r\n      try {\r\n        if (saveTerms(newTerms)) return false;\r\n      } catch (KeeperException.NoNodeException e) {\r\n        return true;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\n","sourceOld":"  // package private for testing, only used by tests\r\n  // return true if this object should not be reused\r\n  boolean removeTerm(String coreNodeName) {\r\n    Terms newTerms;\r\n    while ( (newTerms = terms.removeTerm(coreNodeName)) != null) {\r\n      try {\r\n        if (saveTerms(newTerms)) return false;\r\n      } catch (KeeperException.NoNodeException e) {\r\n        return true;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14b990ee56c39c454f5c6bc2e645d1286e93acee","date":1579181439,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#removeTerm(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#removeTerm(String).mjava","sourceNew":"  // package private for testing, only used by tests\n  // return true if this object should not be reused\n  boolean removeTerm(String coreNodeName) {\n    ShardTerms newTerms;\n    while ( (newTerms = terms.removeTerm(coreNodeName)) != null) {\n      try {\n        if (saveTerms(newTerms)) return false;\n      } catch (KeeperException.NoNodeException e) {\n        return true;\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  // package private for testing, only used by tests\r\n  // return true if this object should not be reused\r\n  boolean removeTerm(String coreNodeName) {\r\n    ShardTerms newTerms;\r\n    while ( (newTerms = terms.removeTerm(coreNodeName)) != null) {\r\n      try {\r\n        if (saveTerms(newTerms)) return false;\r\n      } catch (KeeperException.NoNodeException e) {\r\n        return true;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64b136610bf3772c70e2d86fa4c913425cedbca5","date":1580107100,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#removeTerm(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#removeTerm(String).mjava","sourceNew":"  // package private for testing, only used by tests\n  // return true if this object should not be reused\n  boolean removeTerm(String coreNodeName) {\n    ShardTerms newTerms;\n    while ( (newTerms = terms.get().removeTerm(coreNodeName)) != null) {\n      try {\n        if (saveTerms(newTerms)) return false;\n      } catch (KeeperException.NoNodeException e) {\n        return true;\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  // package private for testing, only used by tests\n  // return true if this object should not be reused\n  boolean removeTerm(String coreNodeName) {\n    ShardTerms newTerms;\n    while ( (newTerms = terms.removeTerm(coreNodeName)) != null) {\n      try {\n        if (saveTerms(newTerms)) return false;\n      } catch (KeeperException.NoNodeException e) {\n        return true;\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3aa683bba99315838c968fefedf3d74f44aa993":["9339df295b9162e4c81adbb4da44b5939d27c1ef","5b6cc501b75cbd5d0319284563cdd20aff857ee6"],"14b990ee56c39c454f5c6bc2e645d1286e93acee":["5b6cc501b75cbd5d0319284563cdd20aff857ee6"],"5b6cc501b75cbd5d0319284563cdd20aff857ee6":["9339df295b9162e4c81adbb4da44b5939d27c1ef"],"9339df295b9162e4c81adbb4da44b5939d27c1ef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"64b136610bf3772c70e2d86fa4c913425cedbca5":["14b990ee56c39c454f5c6bc2e645d1286e93acee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["64b136610bf3772c70e2d86fa4c913425cedbca5"]},"commit2Childs":{"d3aa683bba99315838c968fefedf3d74f44aa993":[],"5b6cc501b75cbd5d0319284563cdd20aff857ee6":["d3aa683bba99315838c968fefedf3d74f44aa993","14b990ee56c39c454f5c6bc2e645d1286e93acee"],"14b990ee56c39c454f5c6bc2e645d1286e93acee":["64b136610bf3772c70e2d86fa4c913425cedbca5"],"9339df295b9162e4c81adbb4da44b5939d27c1ef":["d3aa683bba99315838c968fefedf3d74f44aa993","5b6cc501b75cbd5d0319284563cdd20aff857ee6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9339df295b9162e4c81adbb4da44b5939d27c1ef"],"64b136610bf3772c70e2d86fa4c913425cedbca5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3aa683bba99315838c968fefedf3d74f44aa993","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}