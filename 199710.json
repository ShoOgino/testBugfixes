{"path":"solr/core/src/test/org/apache/solr/response/TestGeoJSONResponseWriter#testTransformToAllFormats().mjava","commits":[{"id":"ba1c938737d199113ec96f0d8ce2c8791b61cd18","date":1458148009,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestGeoJSONResponseWriter#testTransformToAllFormats().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testTransformToAllFormats() throws Exception {\n    \n    String wkt = \"POINT( 1 2 )\";\n    SupportedFormats fmts = SpatialContext.GEO.getFormats();\n    Shape shape = fmts.read(wkt);\n    \n    String[] check = new String[] {\n        \"srpt_geohash\",\n        \"srpt_geohash\",\n        \"srpt_quad\",\n        \"srpt_packedquad\",\n        \"srptgeom\",\n //       \"str_shape\",  // NEEDS TO BE A SpatialField!\n    };\n    \n    String[] checkFormats = new String[] {\n        \"GeoJSON\",\n        \"WKT\",\n        \"POLY\"\n    };\n    \n    for(String field : check) {\n      // Add a document with the given field\n      assertU(adoc(\"id\",\"test\", \n          field, wkt));\n      assertU(commit());\n      \n      \n      for(String fmt : checkFormats) {\n        String json = h.query(req(\n            \"q\",\"id:test\", \n            \"wt\",\"json\", \n            \"indent\", \"true\",\n            \"fl\",\"xxx:[geo f=\"+field+\" w=\"+fmt+\"]\"\n            ));\n        \n        Map<String,Object> doc = readFirstDoc(json);\n        Object v = doc.get(\"xxx\");\n        String expect = fmts.getWriter(fmt).toString(shape);\n        \n        if(!(v instanceof String)) {\n          v = normalizeMapToJSON(v.toString());\n          expect = normalizeMapToJSON(expect);\n        }\n        \n        assertEquals(\"Bad result: \"+field+\"/\"+fmt, expect, v.toString());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ba1c938737d199113ec96f0d8ce2c8791b61cd18":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba1c938737d199113ec96f0d8ce2c8791b61cd18"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba1c938737d199113ec96f0d8ce2c8791b61cd18"],"ba1c938737d199113ec96f0d8ce2c8791b61cd18":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}