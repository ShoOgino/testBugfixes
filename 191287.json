{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/IntersectsPrefixTreeQuery#getDocIdSet(LeafReaderContext).mjava","commits":[{"id":"672b198fc3dce868916c727917cae58c2906763d","date":1443669960,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/IntersectsPrefixTreeQuery#getDocIdSet(LeafReaderContext).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/IntersectsPrefixTreeFilter#getDocIdSet(LeafReaderContext,Bits).mjava","sourceNew":"  @Override\n  protected DocIdSet getDocIdSet(LeafReaderContext context) throws IOException {\n    /* Possible optimizations (in IN ADDITION TO THOSE LISTED IN VISITORTEMPLATE):\n\n    * If docFreq is 1 (or < than some small threshold), then check to see if we've already\n      collected it; if so short-circuit. Don't do this just for point data, as there is\n      no benefit, or only marginal benefit when multi-valued.\n\n    * Point query shape optimization when the only indexed data is a point (no leaves).  Result is a term query.\n\n     */\n    return new VisitorTemplate(context) {\n      private FixedBitSet results;\n\n      @Override\n      protected void start() {\n        results = new FixedBitSet(maxDoc);\n      }\n\n      @Override\n      protected DocIdSet finish() {\n        return new BitDocIdSet(results);\n      }\n\n      @Override\n      protected boolean visitPrefix(Cell cell) throws IOException {\n        if (cell.getShapeRel() == SpatialRelation.WITHIN || cell.getLevel() == detailLevel) {\n          collectDocs(results);\n          return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitLeaf(Cell cell) throws IOException {\n        collectDocs(results);\n      }\n\n    }.getDocIdSet();\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    /* Possible optimizations (in IN ADDITION TO THOSE LISTED IN VISITORTEMPLATE):\n\n    * If docFreq is 1 (or < than some small threshold), then check to see if we've already\n      collected it; if so short-circuit. Don't do this just for point data, as there is\n      no benefit, or only marginal benefit when multi-valued.\n\n    * Point query shape optimization when the only indexed data is a point (no leaves).  Result is a term query.\n\n     */\n    return new VisitorTemplate(context, acceptDocs) {\n      private FixedBitSet results;\n\n      @Override\n      protected void start() {\n        results = new FixedBitSet(maxDoc);\n      }\n\n      @Override\n      protected DocIdSet finish() {\n        return new BitDocIdSet(results);\n      }\n\n      @Override\n      protected boolean visitPrefix(Cell cell) throws IOException {\n        if (cell.getShapeRel() == SpatialRelation.WITHIN || cell.getLevel() == detailLevel) {\n          collectDocs(results);\n          return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitLeaf(Cell cell) throws IOException {\n        collectDocs(results);\n      }\n\n    }.getDocIdSet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/IntersectsPrefixTreeQuery#getDocIdSet(LeafReaderContext).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/IntersectsPrefixTreeQuery#getDocIdSet(LeafReaderContext).mjava","sourceNew":"  @Override\n  protected DocIdSet getDocIdSet(LeafReaderContext context) throws IOException {\n    /* Possible optimizations (in IN ADDITION TO THOSE LISTED IN VISITORTEMPLATE):\n\n    * If docFreq is 1 (or < than some small threshold), then check to see if we've already\n      collected it; if so short-circuit. Don't do this just for point data, as there is\n      no benefit, or only marginal benefit when multi-valued.\n\n    * Point query shape optimization when the only indexed data is a point (no leaves).  Result is a term query.\n\n     */\n    return new VisitorTemplate(context) {\n      private FixedBitSet results;\n\n      @Override\n      protected void start() {\n        results = new FixedBitSet(maxDoc);\n      }\n\n      @Override\n      protected DocIdSet finish() {\n        return new BitDocIdSet(results);\n      }\n\n      @Override\n      protected boolean visitPrefix(Cell cell) throws IOException {\n        if (cell.getShapeRel() == SpatialRelation.WITHIN || cell.getLevel() == detailLevel) {\n          collectDocs(results);\n          return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitLeaf(Cell cell) throws IOException {\n        collectDocs(results);\n      }\n\n    }.getDocIdSet();\n  }\n\n","sourceOld":"  @Override\n  protected DocIdSet getDocIdSet(LeafReaderContext context) throws IOException {\n    /* Possible optimizations (in IN ADDITION TO THOSE LISTED IN VISITORTEMPLATE):\n\n    * If docFreq is 1 (or < than some small threshold), then check to see if we've already\n      collected it; if so short-circuit. Don't do this just for point data, as there is\n      no benefit, or only marginal benefit when multi-valued.\n\n    * Point query shape optimization when the only indexed data is a point (no leaves).  Result is a term query.\n\n     */\n    return new VisitorTemplate(context) {\n      private FixedBitSet results;\n\n      @Override\n      protected void start() {\n        results = new FixedBitSet(maxDoc);\n      }\n\n      @Override\n      protected DocIdSet finish() {\n        return new BitDocIdSet(results);\n      }\n\n      @Override\n      protected boolean visitPrefix(Cell cell) throws IOException {\n        if (cell.getShapeRel() == SpatialRelation.WITHIN || cell.getLevel() == detailLevel) {\n          collectDocs(results);\n          return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitLeaf(Cell cell) throws IOException {\n        collectDocs(results);\n      }\n\n    }.getDocIdSet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/IntersectsPrefixTreeQuery#getDocIdSet(LeafReaderContext).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/IntersectsPrefixTreeQuery#getDocIdSet(LeafReaderContext).mjava","sourceNew":"  @Override\n  protected DocIdSet getDocIdSet(LeafReaderContext context) throws IOException {\n    /* Possible optimizations (in IN ADDITION TO THOSE LISTED IN VISITORTEMPLATE):\n\n    * If docFreq is 1 (or < than some small threshold), then check to see if we've already\n      collected it; if so short-circuit. Don't do this just for point data, as there is\n      no benefit, or only marginal benefit when multi-valued.\n\n    * Point query shape optimization when the only indexed data is a point (no leaves).  Result is a term query.\n\n     */\n    return new VisitorTemplate(context) {\n      private FixedBitSet results;\n\n      @Override\n      protected void start() {\n        results = new FixedBitSet(maxDoc);\n      }\n\n      @Override\n      protected DocIdSet finish() {\n        return new BitDocIdSet(results);\n      }\n\n      @Override\n      protected boolean visitPrefix(Cell cell) throws IOException {\n        if (cell.getShapeRel() == SpatialRelation.WITHIN || cell.getLevel() == detailLevel) {\n          collectDocs(results);\n          return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitLeaf(Cell cell) throws IOException {\n        collectDocs(results);\n      }\n\n    }.getDocIdSet();\n  }\n\n","sourceOld":"  @Override\n  protected DocIdSet getDocIdSet(LeafReaderContext context) throws IOException {\n    /* Possible optimizations (in IN ADDITION TO THOSE LISTED IN VISITORTEMPLATE):\n\n    * If docFreq is 1 (or < than some small threshold), then check to see if we've already\n      collected it; if so short-circuit. Don't do this just for point data, as there is\n      no benefit, or only marginal benefit when multi-valued.\n\n    * Point query shape optimization when the only indexed data is a point (no leaves).  Result is a term query.\n\n     */\n    return new VisitorTemplate(context) {\n      private FixedBitSet results;\n\n      @Override\n      protected void start() {\n        results = new FixedBitSet(maxDoc);\n      }\n\n      @Override\n      protected DocIdSet finish() {\n        return new BitDocIdSet(results);\n      }\n\n      @Override\n      protected boolean visitPrefix(Cell cell) throws IOException {\n        if (cell.getShapeRel() == SpatialRelation.WITHIN || cell.getLevel() == detailLevel) {\n          collectDocs(results);\n          return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitLeaf(Cell cell) throws IOException {\n        collectDocs(results);\n      }\n\n    }.getDocIdSet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["672b198fc3dce868916c727917cae58c2906763d","112d77ac8d3e10a362516ad834c9a11d35c94234"],"672b198fc3dce868916c727917cae58c2906763d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["672b198fc3dce868916c727917cae58c2906763d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"672b198fc3dce868916c727917cae58c2906763d":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["672b198fc3dce868916c727917cae58c2906763d"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}