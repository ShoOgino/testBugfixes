{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionOnlyInZk().mjava","commits":[{"id":"f9362075f92dff89425ca488b480f70d565d66e7","date":1454985541,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionOnlyInZk().mjava","pathOld":"/dev/null","sourceNew":"  private void deleteCollectionOnlyInZk() throws Exception {\n    final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));\n    String collectionName = \"onlyinzk\";\n\n    cloudClient.getZkStateReader().getZkClient().makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    makeRequest(baseUrl, request);\n\n    assertCollectionNotExists(collectionName, 45);\n    \n    // now creating that collection should work\n    params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    params.set(\"name\", collectionName);\n    params.set(\"numShards\", 2);\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    if (secondConfigSet) {\n      params.set(\"collection.configName\", \"conf1\");\n    }\n    makeRequest(baseUrl, request);\n    \n    waitForRecoveriesToFinish(collectionName, false);\n    \n    params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", collectionName);\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    makeRequest(baseUrl, request);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["273ff2f5b0b365591fcbe91ea23b5e97027ca60d","273ff2f5b0b365591fcbe91ea23b5e97027ca60d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a4efd3fffdd7acd625bb88e455c8097e17f75735","date":1477647201,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionOnlyInZk().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionOnlyInZk().mjava","sourceNew":"  @Test\n  public void deleteCollectionOnlyInZk() throws Exception {\n\n    final String collectionName = \"onlyinzk\";\n\n    // create the collections node, but nothing else\n    cluster.getZkClient().makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true);\n\n    // delete via API - should remove collections node\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n    assertFalse(CollectionAdminRequest.listCollections(cluster.getSolrClient()).contains(collectionName));\n    \n    // now creating that collection should work\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1)\n        .process(cluster.getSolrClient());\n    assertTrue(CollectionAdminRequest.listCollections(cluster.getSolrClient()).contains(collectionName));\n\n  }\n\n","sourceOld":"  private void deleteCollectionOnlyInZk() throws Exception {\n    final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));\n    String collectionName = \"onlyinzk\";\n\n    cloudClient.getZkStateReader().getZkClient().makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    makeRequest(baseUrl, request);\n\n    assertCollectionNotExists(collectionName, 45);\n    \n    // now creating that collection should work\n    params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    params.set(\"name\", collectionName);\n    params.set(\"numShards\", 2);\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    if (secondConfigSet) {\n      params.set(\"collection.configName\", \"conf1\");\n    }\n    makeRequest(baseUrl, request);\n    \n    waitForRecoveriesToFinish(collectionName, false);\n    \n    params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", collectionName);\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    makeRequest(baseUrl, request);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"59dce44d6a0b58c171de1d47ad8c0a75831f94fd","date":1477668573,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionOnlyInZk().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionOnlyInZk().mjava","sourceNew":"  @Test\n  public void deleteCollectionOnlyInZk() throws Exception {\n\n    final String collectionName = \"onlyinzk\";\n\n    // create the collections node, but nothing else\n    cluster.getZkClient().makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true);\n\n    // delete via API - should remove collections node\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n    assertFalse(CollectionAdminRequest.listCollections(cluster.getSolrClient()).contains(collectionName));\n    \n    // now creating that collection should work\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1)\n        .process(cluster.getSolrClient());\n    assertTrue(CollectionAdminRequest.listCollections(cluster.getSolrClient()).contains(collectionName));\n\n  }\n\n","sourceOld":"  private void deleteCollectionOnlyInZk() throws Exception {\n    final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));\n    String collectionName = \"onlyinzk\";\n\n    cloudClient.getZkStateReader().getZkClient().makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    makeRequest(baseUrl, request);\n\n    assertCollectionNotExists(collectionName, 45);\n    \n    // now creating that collection should work\n    params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    params.set(\"name\", collectionName);\n    params.set(\"numShards\", 2);\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    if (secondConfigSet) {\n      params.set(\"collection.configName\", \"conf1\");\n    }\n    makeRequest(baseUrl, request);\n    \n    waitForRecoveriesToFinish(collectionName, false);\n    \n    params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", collectionName);\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    makeRequest(baseUrl, request);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#deleteCollectionOnlyInZk().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionOnlyInZk().mjava","sourceNew":"  @Test\n  public void deleteCollectionOnlyInZk() throws Exception {\n\n    final String collectionName = \"onlyinzk\";\n\n    // create the collections node, but nothing else\n    cluster.getZkClient().makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true);\n\n    // delete via API - should remove collections node\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n    assertFalse(CollectionAdminRequest.listCollections(cluster.getSolrClient()).contains(collectionName));\n    \n    // now creating that collection should work\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1)\n        .process(cluster.getSolrClient());\n    assertTrue(CollectionAdminRequest.listCollections(cluster.getSolrClient()).contains(collectionName));\n\n  }\n\n","sourceOld":"  @Test\n  public void deleteCollectionOnlyInZk() throws Exception {\n\n    final String collectionName = \"onlyinzk\";\n\n    // create the collections node, but nothing else\n    cluster.getZkClient().makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true);\n\n    // delete via API - should remove collections node\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n    assertFalse(CollectionAdminRequest.listCollections(cluster.getSolrClient()).contains(collectionName));\n    \n    // now creating that collection should work\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1)\n        .process(cluster.getSolrClient());\n    assertTrue(CollectionAdminRequest.listCollections(cluster.getSolrClient()).contains(collectionName));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#deleteCollectionOnlyInZk().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionOnlyInZk().mjava","sourceNew":"  @Test\n  public void deleteCollectionOnlyInZk() throws Exception {\n\n    final String collectionName = \"onlyinzk\";\n\n    // create the collections node, but nothing else\n    cluster.getZkClient().makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true);\n\n    // delete via API - should remove collections node\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n    assertFalse(CollectionAdminRequest.listCollections(cluster.getSolrClient()).contains(collectionName));\n    \n    // now creating that collection should work\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1)\n        .process(cluster.getSolrClient());\n    assertTrue(CollectionAdminRequest.listCollections(cluster.getSolrClient()).contains(collectionName));\n\n  }\n\n","sourceOld":"  @Test\n  public void deleteCollectionOnlyInZk() throws Exception {\n\n    final String collectionName = \"onlyinzk\";\n\n    // create the collections node, but nothing else\n    cluster.getZkClient().makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true);\n\n    // delete via API - should remove collections node\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n    assertFalse(CollectionAdminRequest.listCollections(cluster.getSolrClient()).contains(collectionName));\n    \n    // now creating that collection should work\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1)\n        .process(cluster.getSolrClient());\n    assertTrue(CollectionAdminRequest.listCollections(cluster.getSolrClient()).contains(collectionName));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a4efd3fffdd7acd625bb88e455c8097e17f75735":["f9362075f92dff89425ca488b480f70d565d66e7"],"b94236357aaa22b76c10629851fe4e376e0cea82":["a4efd3fffdd7acd625bb88e455c8097e17f75735","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"59dce44d6a0b58c171de1d47ad8c0a75831f94fd":["f9362075f92dff89425ca488b480f70d565d66e7","a4efd3fffdd7acd625bb88e455c8097e17f75735"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a4efd3fffdd7acd625bb88e455c8097e17f75735"],"f9362075f92dff89425ca488b480f70d565d66e7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"a4efd3fffdd7acd625bb88e455c8097e17f75735":["b94236357aaa22b76c10629851fe4e376e0cea82","59dce44d6a0b58c171de1d47ad8c0a75831f94fd","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"59dce44d6a0b58c171de1d47ad8c0a75831f94fd":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f9362075f92dff89425ca488b480f70d565d66e7"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"f9362075f92dff89425ca488b480f70d565d66e7":["a4efd3fffdd7acd625bb88e455c8097e17f75735","59dce44d6a0b58c171de1d47ad8c0a75831f94fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["59dce44d6a0b58c171de1d47ad8c0a75831f94fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}