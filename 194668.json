{"path":"lucene/expressions/src/test/org/apache/lucene/expressions/js/TestCustomFunctions#testThrowingException().mjava","commits":[{"id":"2720610e53af0ce608268e33c8961e83aae29809","date":1379734971,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/js/TestCustomFunctions#testThrowingException().mjava","pathOld":"/dev/null","sourceNew":"  /** the method throws an exception. We should check the stack trace that it contains the source code of the expression as file name. */\n  public void testThrowingException() throws Exception {\n    Map<String,Method> functions = new HashMap<String,Method>();\n    functions.put(\"foo\", StaticThrowingException.class.getMethod(\"method\"));\n    String source = \"3 * foo() / 5\";\n    Expression expr = JavascriptCompiler.compile(source, functions, getClass().getClassLoader());\n    try {\n      expr.evaluate(0, null);\n      fail();\n    } catch (ArithmeticException e) {\n      assertEquals(MESSAGE, e.getMessage());\n      StringWriter sw = new StringWriter();\n      PrintWriter pw = new PrintWriter(sw);\n      e.printStackTrace(pw);\n      pw.flush();\n      assertTrue(sw.toString().contains(\"JavascriptCompiler$CompiledExpression.evaluate(\" + source + \")\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/js/TestCustomFunctions#testThrowingException().mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/js/TestCustomFunctions#testThrowingException().mjava","sourceNew":"  /** the method throws an exception. We should check the stack trace that it contains the source code of the expression as file name. */\n  public void testThrowingException() throws Exception {\n    Map<String,Method> functions = new HashMap<>();\n    functions.put(\"foo\", StaticThrowingException.class.getMethod(\"method\"));\n    String source = \"3 * foo() / 5\";\n    Expression expr = JavascriptCompiler.compile(source, functions, getClass().getClassLoader());\n    try {\n      expr.evaluate(0, null);\n      fail();\n    } catch (ArithmeticException e) {\n      assertEquals(MESSAGE, e.getMessage());\n      StringWriter sw = new StringWriter();\n      PrintWriter pw = new PrintWriter(sw);\n      e.printStackTrace(pw);\n      pw.flush();\n      assertTrue(sw.toString().contains(\"JavascriptCompiler$CompiledExpression.evaluate(\" + source + \")\"));\n    }\n  }\n\n","sourceOld":"  /** the method throws an exception. We should check the stack trace that it contains the source code of the expression as file name. */\n  public void testThrowingException() throws Exception {\n    Map<String,Method> functions = new HashMap<String,Method>();\n    functions.put(\"foo\", StaticThrowingException.class.getMethod(\"method\"));\n    String source = \"3 * foo() / 5\";\n    Expression expr = JavascriptCompiler.compile(source, functions, getClass().getClassLoader());\n    try {\n      expr.evaluate(0, null);\n      fail();\n    } catch (ArithmeticException e) {\n      assertEquals(MESSAGE, e.getMessage());\n      StringWriter sw = new StringWriter();\n      PrintWriter pw = new PrintWriter(sw);\n      e.printStackTrace(pw);\n      pw.flush();\n      assertTrue(sw.toString().contains(\"JavascriptCompiler$CompiledExpression.evaluate(\" + source + \")\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/js/TestCustomFunctions#testThrowingException().mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/js/TestCustomFunctions#testThrowingException().mjava","sourceNew":"  /** the method throws an exception. We should check the stack trace that it contains the source code of the expression as file name. */\n  public void testThrowingException() throws Exception {\n    Map<String,Method> functions = new HashMap<>();\n    functions.put(\"foo\", StaticThrowingException.class.getMethod(\"method\"));\n    String source = \"3 * foo() / 5\";\n    Expression expr = JavascriptCompiler.compile(source, functions, getClass().getClassLoader());\n    ArithmeticException expected = expectThrows(ArithmeticException.class, () -> {\n      expr.evaluate(0, null);\n    });\n    assertEquals(MESSAGE, expected.getMessage());\n    StringWriter sw = new StringWriter();\n    PrintWriter pw = new PrintWriter(sw);\n    expected.printStackTrace(pw);\n    pw.flush();\n    assertTrue(sw.toString().contains(\"JavascriptCompiler$CompiledExpression.evaluate(\" + source + \")\"));\n  }\n\n","sourceOld":"  /** the method throws an exception. We should check the stack trace that it contains the source code of the expression as file name. */\n  public void testThrowingException() throws Exception {\n    Map<String,Method> functions = new HashMap<>();\n    functions.put(\"foo\", StaticThrowingException.class.getMethod(\"method\"));\n    String source = \"3 * foo() / 5\";\n    Expression expr = JavascriptCompiler.compile(source, functions, getClass().getClassLoader());\n    try {\n      expr.evaluate(0, null);\n      fail();\n    } catch (ArithmeticException e) {\n      assertEquals(MESSAGE, e.getMessage());\n      StringWriter sw = new StringWriter();\n      PrintWriter pw = new PrintWriter(sw);\n      e.printStackTrace(pw);\n      pw.flush();\n      assertTrue(sw.toString().contains(\"JavascriptCompiler$CompiledExpression.evaluate(\" + source + \")\"));\n    }\n  }\n\n","bugFix":["2720610e53af0ce608268e33c8961e83aae29809"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ae1ad302fc92a61505409a38838f2b1a4a2b092","date":1483787106,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/js/TestCustomFunctions#testThrowingException().mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/js/TestCustomFunctions#testThrowingException().mjava","sourceNew":"  /** the method throws an exception. We should check the stack trace that it contains the source code of the expression as file name. */\n  public void testThrowingException() throws Exception {\n    Map<String,Method> functions = new HashMap<>();\n    functions.put(\"foo\", StaticThrowingException.class.getMethod(\"method\"));\n    String source = \"3 * foo() / 5\";\n    Expression expr = JavascriptCompiler.compile(source, functions, getClass().getClassLoader());\n    ArithmeticException expected = expectThrows(ArithmeticException.class, () -> {\n      expr.evaluate(null);\n    });\n    assertEquals(MESSAGE, expected.getMessage());\n    StringWriter sw = new StringWriter();\n    PrintWriter pw = new PrintWriter(sw);\n    expected.printStackTrace(pw);\n    pw.flush();\n    assertTrue(sw.toString().contains(\"JavascriptCompiler$CompiledExpression.evaluate(\" + source + \")\"));\n  }\n\n","sourceOld":"  /** the method throws an exception. We should check the stack trace that it contains the source code of the expression as file name. */\n  public void testThrowingException() throws Exception {\n    Map<String,Method> functions = new HashMap<>();\n    functions.put(\"foo\", StaticThrowingException.class.getMethod(\"method\"));\n    String source = \"3 * foo() / 5\";\n    Expression expr = JavascriptCompiler.compile(source, functions, getClass().getClassLoader());\n    ArithmeticException expected = expectThrows(ArithmeticException.class, () -> {\n      expr.evaluate(0, null);\n    });\n    assertEquals(MESSAGE, expected.getMessage());\n    StringWriter sw = new StringWriter();\n    PrintWriter pw = new PrintWriter(sw);\n    expected.printStackTrace(pw);\n    pw.flush();\n    assertTrue(sw.toString().contains(\"JavascriptCompiler$CompiledExpression.evaluate(\" + source + \")\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/js/TestCustomFunctions#testThrowingException().mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/js/TestCustomFunctions#testThrowingException().mjava","sourceNew":"  /** the method throws an exception. We should check the stack trace that it contains the source code of the expression as file name. */\n  public void testThrowingException() throws Exception {\n    Map<String,Method> functions = new HashMap<>();\n    functions.put(\"foo\", StaticThrowingException.class.getMethod(\"method\"));\n    String source = \"3 * foo() / 5\";\n    Expression expr = JavascriptCompiler.compile(source, functions, getClass().getClassLoader());\n    ArithmeticException expected = expectThrows(ArithmeticException.class, () -> {\n      expr.evaluate(null);\n    });\n    assertEquals(MESSAGE, expected.getMessage());\n    StringWriter sw = new StringWriter();\n    PrintWriter pw = new PrintWriter(sw);\n    expected.printStackTrace(pw);\n    pw.flush();\n    assertTrue(sw.toString().contains(\"JavascriptCompiler$CompiledExpression.evaluate(\" + source + \")\"));\n  }\n\n","sourceOld":"  /** the method throws an exception. We should check the stack trace that it contains the source code of the expression as file name. */\n  public void testThrowingException() throws Exception {\n    Map<String,Method> functions = new HashMap<>();\n    functions.put(\"foo\", StaticThrowingException.class.getMethod(\"method\"));\n    String source = \"3 * foo() / 5\";\n    Expression expr = JavascriptCompiler.compile(source, functions, getClass().getClassLoader());\n    ArithmeticException expected = expectThrows(ArithmeticException.class, () -> {\n      expr.evaluate(0, null);\n    });\n    assertEquals(MESSAGE, expected.getMessage());\n    StringWriter sw = new StringWriter();\n    PrintWriter pw = new PrintWriter(sw);\n    expected.printStackTrace(pw);\n    pw.flush();\n    assertTrue(sw.toString().contains(\"JavascriptCompiler$CompiledExpression.evaluate(\" + source + \")\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["2720610e53af0ce608268e33c8961e83aae29809"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7ae1ad302fc92a61505409a38838f2b1a4a2b092":["05fe562aa248790944d43cdd478f512572835ba0"],"05fe562aa248790944d43cdd478f512572835ba0":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"2720610e53af0ce608268e33c8961e83aae29809":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["05fe562aa248790944d43cdd478f512572835ba0","7ae1ad302fc92a61505409a38838f2b1a4a2b092"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7ae1ad302fc92a61505409a38838f2b1a4a2b092"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["05fe562aa248790944d43cdd478f512572835ba0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2720610e53af0ce608268e33c8961e83aae29809"],"7ae1ad302fc92a61505409a38838f2b1a4a2b092":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"05fe562aa248790944d43cdd478f512572835ba0":["7ae1ad302fc92a61505409a38838f2b1a4a2b092","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"2720610e53af0ce608268e33c8961e83aae29809":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}