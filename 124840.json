{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testPolyfit().mjava","commits":[{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testPolyfit().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testPolyfit().mjava","sourceNew":"  @Test\n  public void testPolyfit() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n                   \"    a=array(0,1,2,3,4,5,6,7),\" +\n                   \"    fit=polyfit(a, 1))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"fit\");\n    assertTrue(out.size() == 8);\n    assertTrue(out.get(0).intValue() == 0);\n    assertTrue(out.get(1).intValue() == 1);\n    assertTrue(out.get(2).intValue() == 2);\n    assertTrue(out.get(3).intValue() == 3);\n    assertTrue(out.get(4).intValue() == 4);\n    assertTrue(out.get(5).intValue() == 5);\n    assertTrue(out.get(6).intValue() == 6);\n    assertTrue(out.get(7).intValue() == 7);\n  }\n\n","sourceOld":"  @Test\n  public void testPolyfit() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n                   \"    a=array(0,1,2,3,4,5,6,7),\" +\n                   \"    fit=polyfit(a, 1))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"fit\");\n    assertTrue(out.size() == 8);\n    assertTrue(out.get(0).intValue() == 0);\n    assertTrue(out.get(1).intValue() == 1);\n    assertTrue(out.get(2).intValue() == 2);\n    assertTrue(out.get(3).intValue() == 3);\n    assertTrue(out.get(4).intValue() == 4);\n    assertTrue(out.get(5).intValue() == 5);\n    assertTrue(out.get(6).intValue() == 6);\n    assertTrue(out.get(7).intValue() == 7);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abdd6d7eec99bf2099b46b3389307036ed6d1a0d","date":1533652313,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testPolyfit().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testPolyfit().mjava","sourceNew":"  @Test\n  public void testPolyfit() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n                   \"    a=array(0,1,2,3,4,5,6,7),\" +\n                   \"    fit=polyfit(a, 1),\" +\n        \"               predictions=predict(fit, a))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"fit\");\n    assertTrue(out.size() == 8);\n    assertTrue(out.get(0).intValue() == 0);\n    assertTrue(out.get(1).intValue() == 1);\n    assertTrue(out.get(2).intValue() == 2);\n    assertTrue(out.get(3).intValue() == 3);\n    assertTrue(out.get(4).intValue() == 4);\n    assertTrue(out.get(5).intValue() == 5);\n    assertTrue(out.get(6).intValue() == 6);\n    assertTrue(out.get(7).intValue() == 7);\n\n\n    out = (List<Number>)tuples.get(0).get(\"predictions\");\n    assertTrue(out.size() == 8);\n    assertTrue(out.get(0).intValue() == 0);\n    assertTrue(out.get(1).intValue() == 1);\n    assertTrue(out.get(2).intValue() == 2);\n    assertTrue(out.get(3).intValue() == 3);\n    assertTrue(out.get(4).intValue() == 4);\n    assertTrue(out.get(5).intValue() == 5);\n    assertTrue(out.get(6).intValue() == 6);\n    assertTrue(out.get(7).intValue() == 7);\n  }\n\n","sourceOld":"  @Test\n  public void testPolyfit() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n                   \"    a=array(0,1,2,3,4,5,6,7),\" +\n                   \"    fit=polyfit(a, 1))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"fit\");\n    assertTrue(out.size() == 8);\n    assertTrue(out.get(0).intValue() == 0);\n    assertTrue(out.get(1).intValue() == 1);\n    assertTrue(out.get(2).intValue() == 2);\n    assertTrue(out.get(3).intValue() == 3);\n    assertTrue(out.get(4).intValue() == 4);\n    assertTrue(out.get(5).intValue() == 5);\n    assertTrue(out.get(6).intValue() == 6);\n    assertTrue(out.get(7).intValue() == 7);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testPolyfit().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testPolyfit().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void testPolyfit() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n                   \"    a=array(0,1,2,3,4,5,6,7),\" +\n                   \"    fit=polyfit(a, 1),\" +\n        \"               predictions=predict(fit, a))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"fit\");\n    assertTrue(out.size() == 8);\n    assertTrue(out.get(0).intValue() == 0);\n    assertTrue(out.get(1).intValue() == 1);\n    assertTrue(out.get(2).intValue() == 2);\n    assertTrue(out.get(3).intValue() == 3);\n    assertTrue(out.get(4).intValue() == 4);\n    assertTrue(out.get(5).intValue() == 5);\n    assertTrue(out.get(6).intValue() == 6);\n    assertTrue(out.get(7).intValue() == 7);\n\n\n    out = (List<Number>)tuples.get(0).get(\"predictions\");\n    assertTrue(out.size() == 8);\n    assertTrue(out.get(0).intValue() == 0);\n    assertTrue(out.get(1).intValue() == 1);\n    assertTrue(out.get(2).intValue() == 2);\n    assertTrue(out.get(3).intValue() == 3);\n    assertTrue(out.get(4).intValue() == 4);\n    assertTrue(out.get(5).intValue() == 5);\n    assertTrue(out.get(6).intValue() == 6);\n    assertTrue(out.get(7).intValue() == 7);\n  }\n\n","sourceOld":"  @Test\n  public void testPolyfit() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n                   \"    a=array(0,1,2,3,4,5,6,7),\" +\n                   \"    fit=polyfit(a, 1),\" +\n        \"               predictions=predict(fit, a))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"fit\");\n    assertTrue(out.size() == 8);\n    assertTrue(out.get(0).intValue() == 0);\n    assertTrue(out.get(1).intValue() == 1);\n    assertTrue(out.get(2).intValue() == 2);\n    assertTrue(out.get(3).intValue() == 3);\n    assertTrue(out.get(4).intValue() == 4);\n    assertTrue(out.get(5).intValue() == 5);\n    assertTrue(out.get(6).intValue() == 6);\n    assertTrue(out.get(7).intValue() == 7);\n\n\n    out = (List<Number>)tuples.get(0).get(\"predictions\");\n    assertTrue(out.size() == 8);\n    assertTrue(out.get(0).intValue() == 0);\n    assertTrue(out.get(1).intValue() == 1);\n    assertTrue(out.get(2).intValue() == 2);\n    assertTrue(out.get(3).intValue() == 3);\n    assertTrue(out.get(4).intValue() == 4);\n    assertTrue(out.get(5).intValue() == 5);\n    assertTrue(out.get(6).intValue() == 6);\n    assertTrue(out.get(7).intValue() == 7);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["abdd6d7eec99bf2099b46b3389307036ed6d1a0d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"abdd6d7eec99bf2099b46b3389307036ed6d1a0d":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"abdd6d7eec99bf2099b46b3389307036ed6d1a0d":["9ba1b632c041956c93c41aa1143d16a567014891"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["abdd6d7eec99bf2099b46b3389307036ed6d1a0d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}