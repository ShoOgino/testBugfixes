{"path":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#testDoesNotLoadNorms().mjava","commits":[{"id":"0ab7a7b7d9840c6df78aaf2d36b9e8765da1069c","date":1433506692,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#testDoesNotLoadNorms().mjava","pathOld":"/dev/null","sourceNew":"  public void testDoesNotLoadNorms() throws IOException {\n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n\n    LeafReader forbiddenNorms = new FilterLeafReader(indexReader) {\n      @Override\n      public NumericDocValues getNormValues(String field) throws IOException {\n        fail(\"Norms should not be loaded\");\n        // unreachable\n        return null;\n      }\n    };\n    IndexSearcher indexSearcher = newSearcher(forbiddenNorms);\n\n    Weight weight = indexSearcher.createNormalizedWeight(termQuery, true);\n    try {\n      weight.scorer(forbiddenNorms.getContext(), null).nextDoc();\n      fail(\"Should load norms\");\n    } catch (AssertionError e) {\n      // ok\n    }\n\n    weight = indexSearcher.createNormalizedWeight(termQuery, false);\n    // should not fail this time since norms are not necessary\n    weight.scorer(forbiddenNorms.getContext(), null).nextDoc();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b003cc6c93e56a94d15efbb204b5200a3644229f","date":1433508857,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#testDoesNotLoadNorms().mjava","sourceNew":null,"sourceOld":"  public void testDoesNotLoadNorms() throws IOException {\n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n\n    LeafReader forbiddenNorms = new FilterLeafReader(indexReader) {\n      @Override\n      public NumericDocValues getNormValues(String field) throws IOException {\n        fail(\"Norms should not be loaded\");\n        // unreachable\n        return null;\n      }\n    };\n    IndexSearcher indexSearcher = newSearcher(forbiddenNorms);\n\n    Weight weight = indexSearcher.createNormalizedWeight(termQuery, true);\n    try {\n      weight.scorer(forbiddenNorms.getContext(), null).nextDoc();\n      fail(\"Should load norms\");\n    } catch (AssertionError e) {\n      // ok\n    }\n\n    weight = indexSearcher.createNormalizedWeight(termQuery, false);\n    // should not fail this time since norms are not necessary\n    weight.scorer(forbiddenNorms.getContext(), null).nextDoc();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"485545da3b4429d6f138b4baac573a97820ee93b","date":1433876557,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#testDoesNotLoadNorms().mjava","pathOld":"/dev/null","sourceNew":"  public void testDoesNotLoadNorms() throws IOException {\n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    LeafReader forbiddenNorms = new FilterLeafReader(indexReader) {\n      @Override\n      public NumericDocValues getNormValues(String field) throws IOException {\n        fail(\"Norms should not be loaded\");\n        // unreachable\n        return null;\n      }\n    };\n    IndexSearcher indexSearcher = newSearcher(forbiddenNorms);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery, true);\n    try {\n      weight.scorer(forbiddenNorms.getContext(), null).nextDoc();\n      fail(\"Should load norms\");\n    } catch (AssertionError e) {\n      // ok\n    }\n    \n    weight = indexSearcher.createNormalizedWeight(termQuery, false);\n    // should not fail this time since norms are not necessary\n    weight.scorer(forbiddenNorms.getContext(), null).nextDoc();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0","953b95122cd4ece40ebbaa294d6ec75586c1f5dc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"953b95122cd4ece40ebbaa294d6ec75586c1f5dc","date":1433883093,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#testDoesNotLoadNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#testDoesNotLoadNorms().mjava","sourceNew":"  public void testDoesNotLoadNorms() throws IOException {\n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    LeafReader forbiddenNorms = new FilterLeafReader(indexReader) {\n      @Override\n      public NumericDocValues getNormValues(String field) throws IOException {\n        fail(\"Norms should not be loaded\");\n        // unreachable\n        return null;\n      }\n    };\n    // We don't use newSearcher because it sometimes runs checkIndex which loads norms\n    IndexSearcher indexSearcher = new IndexSearcher(forbiddenNorms);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery, true);\n    try {\n      weight.scorer(forbiddenNorms.getContext(), null).nextDoc();\n      fail(\"Should load norms\");\n    } catch (AssertionError e) {\n      // ok\n    }\n    \n    weight = indexSearcher.createNormalizedWeight(termQuery, false);\n    // should not fail this time since norms are not necessary\n    weight.scorer(forbiddenNorms.getContext(), null).nextDoc();\n  }\n\n","sourceOld":"  public void testDoesNotLoadNorms() throws IOException {\n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    LeafReader forbiddenNorms = new FilterLeafReader(indexReader) {\n      @Override\n      public NumericDocValues getNormValues(String field) throws IOException {\n        fail(\"Norms should not be loaded\");\n        // unreachable\n        return null;\n      }\n    };\n    IndexSearcher indexSearcher = newSearcher(forbiddenNorms);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery, true);\n    try {\n      weight.scorer(forbiddenNorms.getContext(), null).nextDoc();\n      fail(\"Should load norms\");\n    } catch (AssertionError e) {\n      // ok\n    }\n    \n    weight = indexSearcher.createNormalizedWeight(termQuery, false);\n    // should not fail this time since norms are not necessary\n    weight.scorer(forbiddenNorms.getContext(), null).nextDoc();\n  }\n\n","bugFix":["485545da3b4429d6f138b4baac573a97820ee93b"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#testDoesNotLoadNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#testDoesNotLoadNorms().mjava","sourceNew":"  public void testDoesNotLoadNorms() throws IOException {\n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    LeafReader forbiddenNorms = new FilterLeafReader(indexReader) {\n      @Override\n      public NumericDocValues getNormValues(String field) throws IOException {\n        fail(\"Norms should not be loaded\");\n        // unreachable\n        return null;\n      }\n    };\n    // We don't use newSearcher because it sometimes runs checkIndex which loads norms\n    IndexSearcher indexSearcher = new IndexSearcher(forbiddenNorms);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery, true);\n    try {\n      weight.scorer(forbiddenNorms.getContext()).nextDoc();\n      fail(\"Should load norms\");\n    } catch (AssertionError e) {\n      // ok\n    }\n    \n    weight = indexSearcher.createNormalizedWeight(termQuery, false);\n    // should not fail this time since norms are not necessary\n    weight.scorer(forbiddenNorms.getContext()).nextDoc();\n  }\n\n","sourceOld":"  public void testDoesNotLoadNorms() throws IOException {\n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    LeafReader forbiddenNorms = new FilterLeafReader(indexReader) {\n      @Override\n      public NumericDocValues getNormValues(String field) throws IOException {\n        fail(\"Norms should not be loaded\");\n        // unreachable\n        return null;\n      }\n    };\n    // We don't use newSearcher because it sometimes runs checkIndex which loads norms\n    IndexSearcher indexSearcher = new IndexSearcher(forbiddenNorms);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery, true);\n    try {\n      weight.scorer(forbiddenNorms.getContext(), null).nextDoc();\n      fail(\"Should load norms\");\n    } catch (AssertionError e) {\n      // ok\n    }\n    \n    weight = indexSearcher.createNormalizedWeight(termQuery, false);\n    // should not fail this time since norms are not necessary\n    weight.scorer(forbiddenNorms.getContext(), null).nextDoc();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#testDoesNotLoadNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#testDoesNotLoadNorms().mjava","sourceNew":"  public void testDoesNotLoadNorms() throws IOException {\n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    LeafReader forbiddenNorms = new FilterLeafReader(indexReader) {\n      @Override\n      public NumericDocValues getNormValues(String field) throws IOException {\n        fail(\"Norms should not be loaded\");\n        // unreachable\n        return null;\n      }\n    };\n    // We don't use newSearcher because it sometimes runs checkIndex which loads norms\n    IndexSearcher indexSearcher = new IndexSearcher(forbiddenNorms);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery, true);\n    try {\n      weight.scorer(forbiddenNorms.getContext()).iterator().nextDoc();\n      fail(\"Should load norms\");\n    } catch (AssertionError e) {\n      // ok\n    }\n    \n    weight = indexSearcher.createNormalizedWeight(termQuery, false);\n    // should not fail this time since norms are not necessary\n    weight.scorer(forbiddenNorms.getContext()).iterator().nextDoc();\n  }\n\n","sourceOld":"  public void testDoesNotLoadNorms() throws IOException {\n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    LeafReader forbiddenNorms = new FilterLeafReader(indexReader) {\n      @Override\n      public NumericDocValues getNormValues(String field) throws IOException {\n        fail(\"Norms should not be loaded\");\n        // unreachable\n        return null;\n      }\n    };\n    // We don't use newSearcher because it sometimes runs checkIndex which loads norms\n    IndexSearcher indexSearcher = new IndexSearcher(forbiddenNorms);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery, true);\n    try {\n      weight.scorer(forbiddenNorms.getContext()).nextDoc();\n      fail(\"Should load norms\");\n    } catch (AssertionError e) {\n      // ok\n    }\n    \n    weight = indexSearcher.createNormalizedWeight(termQuery, false);\n    // should not fail this time since norms are not necessary\n    weight.scorer(forbiddenNorms.getContext()).nextDoc();\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#testDoesNotLoadNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#testDoesNotLoadNorms().mjava","sourceNew":"  public void testDoesNotLoadNorms() throws IOException {\n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    LeafReader forbiddenNorms = new FilterLeafReader(indexReader) {\n      @Override\n      public NumericDocValues getNormValues(String field) throws IOException {\n        fail(\"Norms should not be loaded\");\n        // unreachable\n        return null;\n      }\n    };\n    // We don't use newSearcher because it sometimes runs checkIndex which loads norms\n    IndexSearcher indexSearcher = new IndexSearcher(forbiddenNorms);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery, true);\n    expectThrows(AssertionError.class, () -> {\n      weight.scorer(forbiddenNorms.getContext()).iterator().nextDoc();\n    });\n    \n    Weight weight2 = indexSearcher.createNormalizedWeight(termQuery, false);\n    // should not fail this time since norms are not necessary\n    weight2.scorer(forbiddenNorms.getContext()).iterator().nextDoc();\n  }\n\n","sourceOld":"  public void testDoesNotLoadNorms() throws IOException {\n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    LeafReader forbiddenNorms = new FilterLeafReader(indexReader) {\n      @Override\n      public NumericDocValues getNormValues(String field) throws IOException {\n        fail(\"Norms should not be loaded\");\n        // unreachable\n        return null;\n      }\n    };\n    // We don't use newSearcher because it sometimes runs checkIndex which loads norms\n    IndexSearcher indexSearcher = new IndexSearcher(forbiddenNorms);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery, true);\n    try {\n      weight.scorer(forbiddenNorms.getContext()).iterator().nextDoc();\n      fail(\"Should load norms\");\n    } catch (AssertionError e) {\n      // ok\n    }\n    \n    weight = indexSearcher.createNormalizedWeight(termQuery, false);\n    // should not fail this time since norms are not necessary\n    weight.scorer(forbiddenNorms.getContext()).iterator().nextDoc();\n  }\n\n","bugFix":["485545da3b4429d6f138b4baac573a97820ee93b","7dd748bb245633a8195281556bb0e68a6ea97d18"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d211216c83f01894810543d1c107160a9ae3650b","date":1488289605,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#testDoesNotLoadNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#testDoesNotLoadNorms().mjava","sourceNew":"  public void testDoesNotLoadNorms() throws IOException {\n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    LeafReader forbiddenNorms = new FilterLeafReader(indexReader) {\n      @Override\n      public NumericDocValues getNormValues(String field) throws IOException {\n        fail(\"Norms should not be loaded\");\n        // unreachable\n        return null;\n      }\n\n      @Override\n      public CacheHelper getCoreCacheHelper() {\n        return in.getCoreCacheHelper();\n      }\n\n      @Override\n      public CacheHelper getReaderCacheHelper() {\n        return in.getReaderCacheHelper();\n      }\n    };\n    // We don't use newSearcher because it sometimes runs checkIndex which loads norms\n    IndexSearcher indexSearcher = new IndexSearcher(forbiddenNorms);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery, true);\n    expectThrows(AssertionError.class, () -> {\n      weight.scorer(forbiddenNorms.getContext()).iterator().nextDoc();\n    });\n    \n    Weight weight2 = indexSearcher.createNormalizedWeight(termQuery, false);\n    // should not fail this time since norms are not necessary\n    weight2.scorer(forbiddenNorms.getContext()).iterator().nextDoc();\n  }\n\n","sourceOld":"  public void testDoesNotLoadNorms() throws IOException {\n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    LeafReader forbiddenNorms = new FilterLeafReader(indexReader) {\n      @Override\n      public NumericDocValues getNormValues(String field) throws IOException {\n        fail(\"Norms should not be loaded\");\n        // unreachable\n        return null;\n      }\n    };\n    // We don't use newSearcher because it sometimes runs checkIndex which loads norms\n    IndexSearcher indexSearcher = new IndexSearcher(forbiddenNorms);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery, true);\n    expectThrows(AssertionError.class, () -> {\n      weight.scorer(forbiddenNorms.getContext()).iterator().nextDoc();\n    });\n    \n    Weight weight2 = indexSearcher.createNormalizedWeight(termQuery, false);\n    // should not fail this time since norms are not necessary\n    weight2.scorer(forbiddenNorms.getContext()).iterator().nextDoc();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#testDoesNotLoadNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#testDoesNotLoadNorms().mjava","sourceNew":"  public void testDoesNotLoadNorms() throws IOException {\n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    LeafReader forbiddenNorms = new FilterLeafReader(indexReader) {\n      @Override\n      public NumericDocValues getNormValues(String field) throws IOException {\n        fail(\"Norms should not be loaded\");\n        // unreachable\n        return null;\n      }\n\n      @Override\n      public CacheHelper getCoreCacheHelper() {\n        return in.getCoreCacheHelper();\n      }\n\n      @Override\n      public CacheHelper getReaderCacheHelper() {\n        return in.getReaderCacheHelper();\n      }\n    };\n    // We don't use newSearcher because it sometimes runs checkIndex which loads norms\n    IndexSearcher indexSearcher = new IndexSearcher(forbiddenNorms);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery, ScoreMode.COMPLETE);\n    expectThrows(AssertionError.class, () -> {\n      weight.scorer(forbiddenNorms.getContext()).iterator().nextDoc();\n    });\n    \n    Weight weight2 = indexSearcher.createNormalizedWeight(termQuery, ScoreMode.COMPLETE_NO_SCORES);\n    // should not fail this time since norms are not necessary\n    weight2.scorer(forbiddenNorms.getContext()).iterator().nextDoc();\n  }\n\n","sourceOld":"  public void testDoesNotLoadNorms() throws IOException {\n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    LeafReader forbiddenNorms = new FilterLeafReader(indexReader) {\n      @Override\n      public NumericDocValues getNormValues(String field) throws IOException {\n        fail(\"Norms should not be loaded\");\n        // unreachable\n        return null;\n      }\n\n      @Override\n      public CacheHelper getCoreCacheHelper() {\n        return in.getCoreCacheHelper();\n      }\n\n      @Override\n      public CacheHelper getReaderCacheHelper() {\n        return in.getReaderCacheHelper();\n      }\n    };\n    // We don't use newSearcher because it sometimes runs checkIndex which loads norms\n    IndexSearcher indexSearcher = new IndexSearcher(forbiddenNorms);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery, true);\n    expectThrows(AssertionError.class, () -> {\n      weight.scorer(forbiddenNorms.getContext()).iterator().nextDoc();\n    });\n    \n    Weight weight2 = indexSearcher.createNormalizedWeight(termQuery, false);\n    // should not fail this time since norms are not necessary\n    weight2.scorer(forbiddenNorms.getContext()).iterator().nextDoc();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#testDoesNotLoadNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#testDoesNotLoadNorms().mjava","sourceNew":"  public void testDoesNotLoadNorms() throws IOException {\n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    LeafReader forbiddenNorms = new FilterLeafReader(indexReader) {\n      @Override\n      public NumericDocValues getNormValues(String field) throws IOException {\n        fail(\"Norms should not be loaded\");\n        // unreachable\n        return null;\n      }\n\n      @Override\n      public CacheHelper getCoreCacheHelper() {\n        return in.getCoreCacheHelper();\n      }\n\n      @Override\n      public CacheHelper getReaderCacheHelper() {\n        return in.getReaderCacheHelper();\n      }\n    };\n    // We don't use newSearcher because it sometimes runs checkIndex which loads norms\n    IndexSearcher indexSearcher = new IndexSearcher(forbiddenNorms);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery, ScoreMode.COMPLETE);\n    expectThrows(AssertionError.class, () -> {\n      weight.scorer(forbiddenNorms.getContext()).iterator().nextDoc();\n    });\n    \n    Weight weight2 = indexSearcher.createNormalizedWeight(termQuery, ScoreMode.COMPLETE_NO_SCORES);\n    // should not fail this time since norms are not necessary\n    weight2.scorer(forbiddenNorms.getContext()).iterator().nextDoc();\n  }\n\n","sourceOld":"  public void testDoesNotLoadNorms() throws IOException {\n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    LeafReader forbiddenNorms = new FilterLeafReader(indexReader) {\n      @Override\n      public NumericDocValues getNormValues(String field) throws IOException {\n        fail(\"Norms should not be loaded\");\n        // unreachable\n        return null;\n      }\n\n      @Override\n      public CacheHelper getCoreCacheHelper() {\n        return in.getCoreCacheHelper();\n      }\n\n      @Override\n      public CacheHelper getReaderCacheHelper() {\n        return in.getReaderCacheHelper();\n      }\n    };\n    // We don't use newSearcher because it sometimes runs checkIndex which loads norms\n    IndexSearcher indexSearcher = new IndexSearcher(forbiddenNorms);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery, true);\n    expectThrows(AssertionError.class, () -> {\n      weight.scorer(forbiddenNorms.getContext()).iterator().nextDoc();\n    });\n    \n    Weight weight2 = indexSearcher.createNormalizedWeight(termQuery, false);\n    // should not fail this time since norms are not necessary\n    weight2.scorer(forbiddenNorms.getContext()).iterator().nextDoc();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"475584d5e08a22ad3fc7babefe006d77bc744567","date":1523282824,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#testDoesNotLoadNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#testDoesNotLoadNorms().mjava","sourceNew":"  public void testDoesNotLoadNorms() throws IOException {\n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    LeafReader forbiddenNorms = new FilterLeafReader(indexReader) {\n      @Override\n      public NumericDocValues getNormValues(String field) throws IOException {\n        fail(\"Norms should not be loaded\");\n        // unreachable\n        return null;\n      }\n\n      @Override\n      public CacheHelper getCoreCacheHelper() {\n        return in.getCoreCacheHelper();\n      }\n\n      @Override\n      public CacheHelper getReaderCacheHelper() {\n        return in.getReaderCacheHelper();\n      }\n    };\n    // We don't use newSearcher because it sometimes runs checkIndex which loads norms\n    IndexSearcher indexSearcher = new IndexSearcher(forbiddenNorms);\n    \n    Weight weight = indexSearcher.createWeight(termQuery, ScoreMode.COMPLETE, 1);\n    expectThrows(AssertionError.class, () -> {\n      weight.scorer(forbiddenNorms.getContext()).iterator().nextDoc();\n    });\n    \n    Weight weight2 = indexSearcher.createWeight(termQuery, ScoreMode.COMPLETE_NO_SCORES, 1);\n    // should not fail this time since norms are not necessary\n    weight2.scorer(forbiddenNorms.getContext()).iterator().nextDoc();\n  }\n\n","sourceOld":"  public void testDoesNotLoadNorms() throws IOException {\n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    LeafReader forbiddenNorms = new FilterLeafReader(indexReader) {\n      @Override\n      public NumericDocValues getNormValues(String field) throws IOException {\n        fail(\"Norms should not be loaded\");\n        // unreachable\n        return null;\n      }\n\n      @Override\n      public CacheHelper getCoreCacheHelper() {\n        return in.getCoreCacheHelper();\n      }\n\n      @Override\n      public CacheHelper getReaderCacheHelper() {\n        return in.getReaderCacheHelper();\n      }\n    };\n    // We don't use newSearcher because it sometimes runs checkIndex which loads norms\n    IndexSearcher indexSearcher = new IndexSearcher(forbiddenNorms);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery, ScoreMode.COMPLETE);\n    expectThrows(AssertionError.class, () -> {\n      weight.scorer(forbiddenNorms.getContext()).iterator().nextDoc();\n    });\n    \n    Weight weight2 = indexSearcher.createNormalizedWeight(termQuery, ScoreMode.COMPLETE_NO_SCORES);\n    // should not fail this time since norms are not necessary\n    weight2.scorer(forbiddenNorms.getContext()).iterator().nextDoc();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d58e44159788900f4a2113b84463dc3fbbf80f20","date":1523319203,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#testDoesNotLoadNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#testDoesNotLoadNorms().mjava","sourceNew":"  public void testDoesNotLoadNorms() throws IOException {\n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    LeafReader forbiddenNorms = new FilterLeafReader(indexReader) {\n      @Override\n      public NumericDocValues getNormValues(String field) throws IOException {\n        fail(\"Norms should not be loaded\");\n        // unreachable\n        return null;\n      }\n\n      @Override\n      public CacheHelper getCoreCacheHelper() {\n        return in.getCoreCacheHelper();\n      }\n\n      @Override\n      public CacheHelper getReaderCacheHelper() {\n        return in.getReaderCacheHelper();\n      }\n    };\n    // We don't use newSearcher because it sometimes runs checkIndex which loads norms\n    IndexSearcher indexSearcher = new IndexSearcher(forbiddenNorms);\n    \n    Weight weight = indexSearcher.createWeight(termQuery, ScoreMode.COMPLETE, 1);\n    expectThrows(AssertionError.class, () -> {\n      weight.scorer(forbiddenNorms.getContext()).iterator().nextDoc();\n    });\n    \n    Weight weight2 = indexSearcher.createWeight(termQuery, ScoreMode.COMPLETE_NO_SCORES, 1);\n    // should not fail this time since norms are not necessary\n    weight2.scorer(forbiddenNorms.getContext()).iterator().nextDoc();\n  }\n\n","sourceOld":"  public void testDoesNotLoadNorms() throws IOException {\n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    LeafReader forbiddenNorms = new FilterLeafReader(indexReader) {\n      @Override\n      public NumericDocValues getNormValues(String field) throws IOException {\n        fail(\"Norms should not be loaded\");\n        // unreachable\n        return null;\n      }\n\n      @Override\n      public CacheHelper getCoreCacheHelper() {\n        return in.getCoreCacheHelper();\n      }\n\n      @Override\n      public CacheHelper getReaderCacheHelper() {\n        return in.getReaderCacheHelper();\n      }\n    };\n    // We don't use newSearcher because it sometimes runs checkIndex which loads norms\n    IndexSearcher indexSearcher = new IndexSearcher(forbiddenNorms);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery, ScoreMode.COMPLETE);\n    expectThrows(AssertionError.class, () -> {\n      weight.scorer(forbiddenNorms.getContext()).iterator().nextDoc();\n    });\n    \n    Weight weight2 = indexSearcher.createNormalizedWeight(termQuery, ScoreMode.COMPLETE_NO_SCORES);\n    // should not fail this time since norms are not necessary\n    weight2.scorer(forbiddenNorms.getContext()).iterator().nextDoc();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"475584d5e08a22ad3fc7babefe006d77bc744567":["417142ff08fda9cf0b72d5133e63097a166c6458"],"05fe562aa248790944d43cdd478f512572835ba0":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"485545da3b4429d6f138b4baac573a97820ee93b":["b003cc6c93e56a94d15efbb204b5200a3644229f"],"0ab7a7b7d9840c6df78aaf2d36b9e8765da1069c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"953b95122cd4ece40ebbaa294d6ec75586c1f5dc":["485545da3b4429d6f138b4baac573a97820ee93b"],"417142ff08fda9cf0b72d5133e63097a166c6458":["d211216c83f01894810543d1c107160a9ae3650b","9fc47cb7b4346802411bb432f501ed0673d7119e"],"d58e44159788900f4a2113b84463dc3fbbf80f20":["417142ff08fda9cf0b72d5133e63097a166c6458","475584d5e08a22ad3fc7babefe006d77bc744567"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["953b95122cd4ece40ebbaa294d6ec75586c1f5dc"],"d211216c83f01894810543d1c107160a9ae3650b":["05fe562aa248790944d43cdd478f512572835ba0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b003cc6c93e56a94d15efbb204b5200a3644229f":["0ab7a7b7d9840c6df78aaf2d36b9e8765da1069c"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["d211216c83f01894810543d1c107160a9ae3650b"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d58e44159788900f4a2113b84463dc3fbbf80f20"]},"commit2Childs":{"475584d5e08a22ad3fc7babefe006d77bc744567":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"05fe562aa248790944d43cdd478f512572835ba0":["d211216c83f01894810543d1c107160a9ae3650b"],"485545da3b4429d6f138b4baac573a97820ee93b":["953b95122cd4ece40ebbaa294d6ec75586c1f5dc"],"0ab7a7b7d9840c6df78aaf2d36b9e8765da1069c":["b003cc6c93e56a94d15efbb204b5200a3644229f"],"953b95122cd4ece40ebbaa294d6ec75586c1f5dc":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"417142ff08fda9cf0b72d5133e63097a166c6458":["475584d5e08a22ad3fc7babefe006d77bc744567","d58e44159788900f4a2113b84463dc3fbbf80f20"],"d58e44159788900f4a2113b84463dc3fbbf80f20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ab7a7b7d9840c6df78aaf2d36b9e8765da1069c"],"d211216c83f01894810543d1c107160a9ae3650b":["417142ff08fda9cf0b72d5133e63097a166c6458","9fc47cb7b4346802411bb432f501ed0673d7119e"],"b003cc6c93e56a94d15efbb204b5200a3644229f":["485545da3b4429d6f138b4baac573a97820ee93b"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["05fe562aa248790944d43cdd478f512572835ba0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}