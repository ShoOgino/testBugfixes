{"path":"lucene/src/java/org/apache/lucene/index/CheckIndex#testTermIndex(SegmentInfo,SegmentReader).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CheckIndex#testTermIndex(SegmentInfo,SegmentReader).mjava","pathOld":"src/java/org/apache/lucene/index/CheckIndex#testTermIndex(SegmentInfo,SegmentReader).mjava","sourceNew":"  /**\n   * Test the term index.\n   */\n  private Status.TermIndexStatus testTermIndex(SegmentInfo info, SegmentReader reader) {\n    final Status.TermIndexStatus status = new Status.TermIndexStatus();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: terms, freq, prox...\");\n      }\n\n      final TermEnum termEnum = reader.terms();\n      final TermPositions termPositions = reader.termPositions();\n\n      // Used only to count up # deleted docs for this term\n      final MySegmentTermDocs myTermDocs = new MySegmentTermDocs(reader);\n\n      final int maxDoc = reader.maxDoc();\n\n      while (termEnum.next()) {\n        status.termCount++;\n        final Term term = termEnum.term();\n        final int docFreq = termEnum.docFreq();\n        termPositions.seek(term);\n        int lastDoc = -1;\n        int freq0 = 0;\n        status.totFreq += docFreq;\n        while (termPositions.next()) {\n          freq0++;\n          final int doc = termPositions.doc();\n          final int freq = termPositions.freq();\n          if (doc <= lastDoc)\n            throw new RuntimeException(\"term \" + term + \": doc \" + doc + \" <= lastDoc \" + lastDoc);\n          if (doc >= maxDoc)\n            throw new RuntimeException(\"term \" + term + \": doc \" + doc + \" >= maxDoc \" + maxDoc);\n\n          lastDoc = doc;\n          if (freq <= 0)\n            throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": freq \" + freq + \" is out of bounds\");\n            \n          int lastPos = -1;\n          status.totPos += freq;\n          for(int j=0;j<freq;j++) {\n            final int pos = termPositions.nextPosition();\n            if (pos < -1)\n              throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": pos \" + pos + \" is out of bounds\");\n            if (pos < lastPos)\n              throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": pos \" + pos + \" < lastPos \" + lastPos);\n            lastPos = pos;\n          }\n        }\n\n        // Now count how many deleted docs occurred in\n        // this term:\n        final int delCount;\n        if (reader.hasDeletions()) {\n          myTermDocs.seek(term);\n          while(myTermDocs.next()) { }\n          delCount = myTermDocs.delCount;\n        } else {\n          delCount = 0; \n        }\n\n        if (freq0 + delCount != docFreq) {\n          throw new RuntimeException(\"term \" + term + \" docFreq=\" + \n                                     docFreq + \" != num docs seen \" + freq0 + \" + num docs deleted \" + delCount);\n        }\n      }\n\n      msg(\"OK [\" + status.termCount + \" terms; \" + status.totFreq + \" terms/docs pairs; \" + status.totPos + \" tokens]\");\n\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test the term index.\n   */\n  private Status.TermIndexStatus testTermIndex(SegmentInfo info, SegmentReader reader) {\n    final Status.TermIndexStatus status = new Status.TermIndexStatus();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: terms, freq, prox...\");\n      }\n\n      final TermEnum termEnum = reader.terms();\n      final TermPositions termPositions = reader.termPositions();\n\n      // Used only to count up # deleted docs for this term\n      final MySegmentTermDocs myTermDocs = new MySegmentTermDocs(reader);\n\n      final int maxDoc = reader.maxDoc();\n\n      while (termEnum.next()) {\n        status.termCount++;\n        final Term term = termEnum.term();\n        final int docFreq = termEnum.docFreq();\n        termPositions.seek(term);\n        int lastDoc = -1;\n        int freq0 = 0;\n        status.totFreq += docFreq;\n        while (termPositions.next()) {\n          freq0++;\n          final int doc = termPositions.doc();\n          final int freq = termPositions.freq();\n          if (doc <= lastDoc)\n            throw new RuntimeException(\"term \" + term + \": doc \" + doc + \" <= lastDoc \" + lastDoc);\n          if (doc >= maxDoc)\n            throw new RuntimeException(\"term \" + term + \": doc \" + doc + \" >= maxDoc \" + maxDoc);\n\n          lastDoc = doc;\n          if (freq <= 0)\n            throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": freq \" + freq + \" is out of bounds\");\n            \n          int lastPos = -1;\n          status.totPos += freq;\n          for(int j=0;j<freq;j++) {\n            final int pos = termPositions.nextPosition();\n            if (pos < -1)\n              throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": pos \" + pos + \" is out of bounds\");\n            if (pos < lastPos)\n              throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": pos \" + pos + \" < lastPos \" + lastPos);\n            lastPos = pos;\n          }\n        }\n\n        // Now count how many deleted docs occurred in\n        // this term:\n        final int delCount;\n        if (reader.hasDeletions()) {\n          myTermDocs.seek(term);\n          while(myTermDocs.next()) { }\n          delCount = myTermDocs.delCount;\n        } else {\n          delCount = 0; \n        }\n\n        if (freq0 + delCount != docFreq) {\n          throw new RuntimeException(\"term \" + term + \" docFreq=\" + \n                                     docFreq + \" != num docs seen \" + freq0 + \" + num docs deleted \" + delCount);\n        }\n      }\n\n      msg(\"OK [\" + status.termCount + \" terms; \" + status.totFreq + \" terms/docs pairs; \" + status.totPos + \" tokens]\");\n\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/CheckIndex#testTermIndex(SegmentInfo,SegmentReader).mjava","sourceNew":null,"sourceOld":"  /**\n   * Test the term index.\n   */\n  private Status.TermIndexStatus testTermIndex(SegmentInfo info, SegmentReader reader) {\n    final Status.TermIndexStatus status = new Status.TermIndexStatus();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: terms, freq, prox...\");\n      }\n\n      final TermEnum termEnum = reader.terms();\n      final TermPositions termPositions = reader.termPositions();\n\n      // Used only to count up # deleted docs for this term\n      final MySegmentTermDocs myTermDocs = new MySegmentTermDocs(reader);\n\n      final int maxDoc = reader.maxDoc();\n\n      while (termEnum.next()) {\n        status.termCount++;\n        final Term term = termEnum.term();\n        final int docFreq = termEnum.docFreq();\n        termPositions.seek(term);\n        int lastDoc = -1;\n        int freq0 = 0;\n        status.totFreq += docFreq;\n        while (termPositions.next()) {\n          freq0++;\n          final int doc = termPositions.doc();\n          final int freq = termPositions.freq();\n          if (doc <= lastDoc)\n            throw new RuntimeException(\"term \" + term + \": doc \" + doc + \" <= lastDoc \" + lastDoc);\n          if (doc >= maxDoc)\n            throw new RuntimeException(\"term \" + term + \": doc \" + doc + \" >= maxDoc \" + maxDoc);\n\n          lastDoc = doc;\n          if (freq <= 0)\n            throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": freq \" + freq + \" is out of bounds\");\n            \n          int lastPos = -1;\n          status.totPos += freq;\n          for(int j=0;j<freq;j++) {\n            final int pos = termPositions.nextPosition();\n            if (pos < -1)\n              throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": pos \" + pos + \" is out of bounds\");\n            if (pos < lastPos)\n              throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": pos \" + pos + \" < lastPos \" + lastPos);\n            lastPos = pos;\n          }\n        }\n\n        // Now count how many deleted docs occurred in\n        // this term:\n        final int delCount;\n        if (reader.hasDeletions()) {\n          myTermDocs.seek(term);\n          while(myTermDocs.next()) { }\n          delCount = myTermDocs.delCount;\n        } else {\n          delCount = 0; \n        }\n\n        if (freq0 + delCount != docFreq) {\n          throw new RuntimeException(\"term \" + term + \" docFreq=\" + \n                                     docFreq + \" != num docs seen \" + freq0 + \" + num docs deleted \" + delCount);\n        }\n      }\n\n      msg(\"OK [\" + status.termCount + \" terms; \" + status.totFreq + \" terms/docs pairs; \" + status.totPos + \" tokens]\");\n\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}