{"path":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#implTestLogMergePolicyConfig(String,Class[#-extends-LogMergePolicy]).mjava","commits":[{"id":"1ea771da4621a28e1340bdaeb615d8553e4d7c9d","date":1455040025,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#implTestLogMergePolicyConfig(String,Class[#-extends-LogMergePolicy]).mjava","pathOld":"/dev/null","sourceNew":"  private void implTestLogMergePolicyConfig(String solrConfigFileName,\n      Class<? extends LogMergePolicy> mpClass) throws Exception {\n\n    initCore(solrConfigFileName, \"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n\n    // verify some props set to -1 get lucene internal defaults\n    assertEquals(-1, solrConfig.indexConfig.maxBufferedDocs);\n    assertEquals(IndexWriterConfig.DISABLE_AUTO_FLUSH, \n                 iwc.getMaxBufferedDocs());\n    assertEquals(-1, solrConfig.indexConfig.ramBufferSizeMB, 0.0D);\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, \n                 iwc.getRAMBufferSizeMB(), 0.0D);\n\n\n    LogMergePolicy logMP = assertAndCast(mpClass, iwc.getMergePolicy());\n\n    assertEquals(11, logMP.getMergeFactor());\n    assertEquals(456, logMP.getMaxMergeDocs());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fc1a22371a19bbb2a92556c4051ca0aaa823a8c2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fc1a22371a19bbb2a92556c4051ca0aaa823a8c2","date":1529965060,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#implTestLogMergePolicyConfig(String,Class[#-extends-LogMergePolicy]).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#implTestLogMergePolicyConfig(String,Class[#-extends-LogMergePolicy]).mjava","sourceNew":"  private void implTestLogMergePolicyConfig(String solrConfigFileName,\n      Class<? extends LogMergePolicy> mpClass) throws Exception {\n\n    initCore(solrConfigFileName, \"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n\n    // verify some props set to -1 get lucene internal defaults\n    assertEquals(-1, solrConfig.indexConfig.maxBufferedDocs);\n    assertEquals(IndexWriterConfig.DISABLE_AUTO_FLUSH, \n                 iwc.getMaxBufferedDocs());\n    assertEquals(-1, solrConfig.indexConfig.ramBufferSizeMB, 0.0D);\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, \n                 iwc.getRAMBufferSizeMB(), 0.0D);\n\n\n    LogMergePolicy logMP = assertAndCast(mpClass, iwc.getMergePolicy());\n\n    assertEquals(11, logMP.getMergeFactor());\n    assertEquals(456, logMP.getMaxMergeDocs());\n  }\n\n","sourceOld":"  private void implTestLogMergePolicyConfig(String solrConfigFileName,\n      Class<? extends LogMergePolicy> mpClass) throws Exception {\n\n    initCore(solrConfigFileName, \"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n\n    // verify some props set to -1 get lucene internal defaults\n    assertEquals(-1, solrConfig.indexConfig.maxBufferedDocs);\n    assertEquals(IndexWriterConfig.DISABLE_AUTO_FLUSH, \n                 iwc.getMaxBufferedDocs());\n    assertEquals(-1, solrConfig.indexConfig.ramBufferSizeMB, 0.0D);\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, \n                 iwc.getRAMBufferSizeMB(), 0.0D);\n\n\n    LogMergePolicy logMP = assertAndCast(mpClass, iwc.getMergePolicy());\n\n    assertEquals(11, logMP.getMergeFactor());\n    assertEquals(456, logMP.getMaxMergeDocs());\n\n  }\n\n","bugFix":["1ea771da4621a28e1340bdaeb615d8553e4d7c9d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#implTestLogMergePolicyConfig(String,Class[#-extends-LogMergePolicy]).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#implTestLogMergePolicyConfig(String,Class[#-extends-LogMergePolicy]).mjava","sourceNew":"  private void implTestLogMergePolicyConfig(String solrConfigFileName,\n      Class<? extends LogMergePolicy> mpClass) throws Exception {\n\n    initCore(solrConfigFileName, \"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n\n    // verify some props set to -1 get lucene internal defaults\n    assertEquals(-1, solrConfig.indexConfig.maxBufferedDocs);\n    assertEquals(IndexWriterConfig.DISABLE_AUTO_FLUSH, \n                 iwc.getMaxBufferedDocs());\n    assertEquals(-1, solrConfig.indexConfig.ramBufferSizeMB, 0.0D);\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, \n                 iwc.getRAMBufferSizeMB(), 0.0D);\n\n\n    LogMergePolicy logMP = assertAndCast(mpClass, iwc.getMergePolicy());\n\n    assertEquals(11, logMP.getMergeFactor());\n    assertEquals(456, logMP.getMaxMergeDocs());\n  }\n\n","sourceOld":"  private void implTestLogMergePolicyConfig(String solrConfigFileName,\n      Class<? extends LogMergePolicy> mpClass) throws Exception {\n\n    initCore(solrConfigFileName, \"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n\n    // verify some props set to -1 get lucene internal defaults\n    assertEquals(-1, solrConfig.indexConfig.maxBufferedDocs);\n    assertEquals(IndexWriterConfig.DISABLE_AUTO_FLUSH, \n                 iwc.getMaxBufferedDocs());\n    assertEquals(-1, solrConfig.indexConfig.ramBufferSizeMB, 0.0D);\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, \n                 iwc.getRAMBufferSizeMB(), 0.0D);\n\n\n    LogMergePolicy logMP = assertAndCast(mpClass, iwc.getMergePolicy());\n\n    assertEquals(11, logMP.getMergeFactor());\n    assertEquals(456, logMP.getMaxMergeDocs());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#implTestLogMergePolicyConfig(String,Class[#-extends-LogMergePolicy]).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#implTestLogMergePolicyConfig(String,Class[#-extends-LogMergePolicy]).mjava","sourceNew":"  private void implTestLogMergePolicyConfig(String solrConfigFileName,\n      Class<? extends LogMergePolicy> mpClass) throws Exception {\n\n    initCore(solrConfigFileName, \"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n\n    // verify some props set to -1 get lucene internal defaults\n    assertEquals(-1, solrConfig.indexConfig.maxBufferedDocs);\n    assertEquals(IndexWriterConfig.DISABLE_AUTO_FLUSH, \n                 iwc.getMaxBufferedDocs());\n    assertEquals(-1, solrConfig.indexConfig.ramBufferSizeMB, 0.0D);\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, \n                 iwc.getRAMBufferSizeMB(), 0.0D);\n\n\n    LogMergePolicy logMP = assertAndCast(mpClass, iwc.getMergePolicy());\n\n    assertEquals(11, logMP.getMergeFactor());\n    assertEquals(456, logMP.getMaxMergeDocs());\n  }\n\n","sourceOld":"  private void implTestLogMergePolicyConfig(String solrConfigFileName,\n      Class<? extends LogMergePolicy> mpClass) throws Exception {\n\n    initCore(solrConfigFileName, \"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n\n    // verify some props set to -1 get lucene internal defaults\n    assertEquals(-1, solrConfig.indexConfig.maxBufferedDocs);\n    assertEquals(IndexWriterConfig.DISABLE_AUTO_FLUSH, \n                 iwc.getMaxBufferedDocs());\n    assertEquals(-1, solrConfig.indexConfig.ramBufferSizeMB, 0.0D);\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, \n                 iwc.getRAMBufferSizeMB(), 0.0D);\n\n\n    LogMergePolicy logMP = assertAndCast(mpClass, iwc.getMergePolicy());\n\n    assertEquals(11, logMP.getMergeFactor());\n    assertEquals(456, logMP.getMaxMergeDocs());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1ea771da4621a28e1340bdaeb615d8553e4d7c9d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["1ea771da4621a28e1340bdaeb615d8553e4d7c9d","fc1a22371a19bbb2a92556c4051ca0aaa823a8c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fc1a22371a19bbb2a92556c4051ca0aaa823a8c2":["1ea771da4621a28e1340bdaeb615d8553e4d7c9d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fc1a22371a19bbb2a92556c4051ca0aaa823a8c2"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["1ea771da4621a28e1340bdaeb615d8553e4d7c9d","fc1a22371a19bbb2a92556c4051ca0aaa823a8c2"]},"commit2Childs":{"1ea771da4621a28e1340bdaeb615d8553e4d7c9d":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","fc1a22371a19bbb2a92556c4051ca0aaa823a8c2","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1ea771da4621a28e1340bdaeb615d8553e4d7c9d"],"fc1a22371a19bbb2a92556c4051ca0aaa823a8c2":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}