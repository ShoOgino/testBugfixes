{"path":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#test().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermsEnum#test().mjava","sourceNew":"  public void test() throws Exception {\n    final LineFileDocs docs = new LineFileDocs(random);\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, d);\n    final int numDocs = atLeast(10);\n    for(int docCount=0;docCount<numDocs;docCount++) {\n      w.addDocument(docs.nextDoc());\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final List<BytesRef> terms = new ArrayList<BytesRef>();\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"body\").iterator(null);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      terms.add(BytesRef.deepCopyOf(term));\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + terms.size() + \" terms\");\n    }\n\n    int upto = -1;\n    final int iters = atLeast(200);\n    for(int iter=0;iter<iters;iter++) {\n      final boolean isEnd;\n      if (upto != -1 && random.nextBoolean()) {\n        // next\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter next\");\n        }\n        isEnd = termsEnum.next() == null;\n        upto++;\n        if (isEnd) {\n          if (VERBOSE) {\n            System.out.println(\"  end\");\n          }\n          assertEquals(upto, terms.size());\n          upto = -1;\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  got term=\" + termsEnum.term().utf8ToString() + \" expected=\" + terms.get(upto).utf8ToString());\n          }\n          assertTrue(upto < terms.size());\n          assertEquals(terms.get(upto), termsEnum.term());\n        }\n      } else {\n\n        final BytesRef target;\n        final String exists;\n        if (random.nextBoolean()) {\n          // likely fake term\n          if (random.nextBoolean()) {\n            target = new BytesRef(_TestUtil.randomSimpleString(random));\n          } else {\n            target = new BytesRef(_TestUtil.randomRealisticUnicodeString(random));\n          }\n          exists = \"likely not\";\n        } else {\n          // real term\n          target = terms.get(random.nextInt(terms.size()));\n          exists = \"yes\";\n        }\n\n        upto = Collections.binarySearch(terms, target);\n\n        if (random.nextBoolean()) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekCeil target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekCeil\n          final TermsEnum.SeekStatus status = termsEnum.seekCeil(target, random.nextBoolean());\n          if (VERBOSE) {\n            System.out.println(\"  got \" + status);\n          }\n          \n          if (upto < 0) {\n            upto = -(upto+1);\n            if (upto >= terms.size()) {\n              assertEquals(TermsEnum.SeekStatus.END, status);\n              upto = -1;\n            } else {\n              assertEquals(TermsEnum.SeekStatus.NOT_FOUND, status);\n              assertEquals(terms.get(upto), termsEnum.term());\n            }\n          } else {\n            assertEquals(TermsEnum.SeekStatus.FOUND, status);\n            assertEquals(terms.get(upto), termsEnum.term());\n          }\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekExact target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekExact\n          final boolean result = termsEnum.seekExact(target, false);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + result);\n          }\n          if (upto < 0) {\n            assertFalse(result);\n            upto = -1;\n          } else {\n            assertTrue(result);\n            assertEquals(target, termsEnum.term());\n          }\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    final LineFileDocs docs = new LineFileDocs(random);\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, d);\n    final int numDocs = atLeast(10);\n    for(int docCount=0;docCount<numDocs;docCount++) {\n      w.addDocument(docs.nextDoc());\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final List<BytesRef> terms = new ArrayList<BytesRef>();\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"body\").iterator(null);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      terms.add(BytesRef.deepCopyOf(term));\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + terms.size() + \" terms\");\n    }\n\n    int upto = -1;\n    final int iters = atLeast(200);\n    for(int iter=0;iter<iters;iter++) {\n      final boolean isEnd;\n      if (upto != -1 && random.nextBoolean()) {\n        // next\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter next\");\n        }\n        isEnd = termsEnum.next() == null;\n        upto++;\n        if (isEnd) {\n          if (VERBOSE) {\n            System.out.println(\"  end\");\n          }\n          assertEquals(upto, terms.size());\n          upto = -1;\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  got term=\" + termsEnum.term().utf8ToString() + \" expected=\" + terms.get(upto).utf8ToString());\n          }\n          assertTrue(upto < terms.size());\n          assertEquals(terms.get(upto), termsEnum.term());\n        }\n      } else {\n\n        final BytesRef target;\n        final String exists;\n        if (random.nextBoolean()) {\n          // likely fake term\n          if (random.nextBoolean()) {\n            target = new BytesRef(_TestUtil.randomSimpleString(random));\n          } else {\n            target = new BytesRef(_TestUtil.randomRealisticUnicodeString(random));\n          }\n          exists = \"likely not\";\n        } else {\n          // real term\n          target = terms.get(random.nextInt(terms.size()));\n          exists = \"yes\";\n        }\n\n        upto = Collections.binarySearch(terms, target);\n\n        if (random.nextBoolean()) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekCeil target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekCeil\n          final TermsEnum.SeekStatus status = termsEnum.seekCeil(target, random.nextBoolean());\n          if (VERBOSE) {\n            System.out.println(\"  got \" + status);\n          }\n          \n          if (upto < 0) {\n            upto = -(upto+1);\n            if (upto >= terms.size()) {\n              assertEquals(TermsEnum.SeekStatus.END, status);\n              upto = -1;\n            } else {\n              assertEquals(TermsEnum.SeekStatus.NOT_FOUND, status);\n              assertEquals(terms.get(upto), termsEnum.term());\n            }\n          } else {\n            assertEquals(TermsEnum.SeekStatus.FOUND, status);\n            assertEquals(terms.get(upto), termsEnum.term());\n          }\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekExact target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekExact\n          final boolean result = termsEnum.seekExact(target, false);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + result);\n          }\n          if (upto < 0) {\n            assertFalse(result);\n            upto = -1;\n          } else {\n            assertTrue(result);\n            assertEquals(target, termsEnum.term());\n          }\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86365ce8db75e42ebe10805e99e92c463fef63b6","date":1330370408,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#test().mjava","sourceNew":"  public void test() throws Exception {\n    final LineFileDocs docs = new LineFileDocs(random, defaultCodecSupportsDocValues());\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, d);\n    final int numDocs = atLeast(10);\n    for(int docCount=0;docCount<numDocs;docCount++) {\n      w.addDocument(docs.nextDoc());\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final List<BytesRef> terms = new ArrayList<BytesRef>();\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"body\").iterator(null);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      terms.add(BytesRef.deepCopyOf(term));\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + terms.size() + \" terms\");\n    }\n\n    int upto = -1;\n    final int iters = atLeast(200);\n    for(int iter=0;iter<iters;iter++) {\n      final boolean isEnd;\n      if (upto != -1 && random.nextBoolean()) {\n        // next\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter next\");\n        }\n        isEnd = termsEnum.next() == null;\n        upto++;\n        if (isEnd) {\n          if (VERBOSE) {\n            System.out.println(\"  end\");\n          }\n          assertEquals(upto, terms.size());\n          upto = -1;\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  got term=\" + termsEnum.term().utf8ToString() + \" expected=\" + terms.get(upto).utf8ToString());\n          }\n          assertTrue(upto < terms.size());\n          assertEquals(terms.get(upto), termsEnum.term());\n        }\n      } else {\n\n        final BytesRef target;\n        final String exists;\n        if (random.nextBoolean()) {\n          // likely fake term\n          if (random.nextBoolean()) {\n            target = new BytesRef(_TestUtil.randomSimpleString(random));\n          } else {\n            target = new BytesRef(_TestUtil.randomRealisticUnicodeString(random));\n          }\n          exists = \"likely not\";\n        } else {\n          // real term\n          target = terms.get(random.nextInt(terms.size()));\n          exists = \"yes\";\n        }\n\n        upto = Collections.binarySearch(terms, target);\n\n        if (random.nextBoolean()) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekCeil target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekCeil\n          final TermsEnum.SeekStatus status = termsEnum.seekCeil(target, random.nextBoolean());\n          if (VERBOSE) {\n            System.out.println(\"  got \" + status);\n          }\n          \n          if (upto < 0) {\n            upto = -(upto+1);\n            if (upto >= terms.size()) {\n              assertEquals(TermsEnum.SeekStatus.END, status);\n              upto = -1;\n            } else {\n              assertEquals(TermsEnum.SeekStatus.NOT_FOUND, status);\n              assertEquals(terms.get(upto), termsEnum.term());\n            }\n          } else {\n            assertEquals(TermsEnum.SeekStatus.FOUND, status);\n            assertEquals(terms.get(upto), termsEnum.term());\n          }\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekExact target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekExact\n          final boolean result = termsEnum.seekExact(target, false);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + result);\n          }\n          if (upto < 0) {\n            assertFalse(result);\n            upto = -1;\n          } else {\n            assertTrue(result);\n            assertEquals(target, termsEnum.term());\n          }\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    final LineFileDocs docs = new LineFileDocs(random);\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, d);\n    final int numDocs = atLeast(10);\n    for(int docCount=0;docCount<numDocs;docCount++) {\n      w.addDocument(docs.nextDoc());\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final List<BytesRef> terms = new ArrayList<BytesRef>();\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"body\").iterator(null);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      terms.add(BytesRef.deepCopyOf(term));\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + terms.size() + \" terms\");\n    }\n\n    int upto = -1;\n    final int iters = atLeast(200);\n    for(int iter=0;iter<iters;iter++) {\n      final boolean isEnd;\n      if (upto != -1 && random.nextBoolean()) {\n        // next\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter next\");\n        }\n        isEnd = termsEnum.next() == null;\n        upto++;\n        if (isEnd) {\n          if (VERBOSE) {\n            System.out.println(\"  end\");\n          }\n          assertEquals(upto, terms.size());\n          upto = -1;\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  got term=\" + termsEnum.term().utf8ToString() + \" expected=\" + terms.get(upto).utf8ToString());\n          }\n          assertTrue(upto < terms.size());\n          assertEquals(terms.get(upto), termsEnum.term());\n        }\n      } else {\n\n        final BytesRef target;\n        final String exists;\n        if (random.nextBoolean()) {\n          // likely fake term\n          if (random.nextBoolean()) {\n            target = new BytesRef(_TestUtil.randomSimpleString(random));\n          } else {\n            target = new BytesRef(_TestUtil.randomRealisticUnicodeString(random));\n          }\n          exists = \"likely not\";\n        } else {\n          // real term\n          target = terms.get(random.nextInt(terms.size()));\n          exists = \"yes\";\n        }\n\n        upto = Collections.binarySearch(terms, target);\n\n        if (random.nextBoolean()) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekCeil target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekCeil\n          final TermsEnum.SeekStatus status = termsEnum.seekCeil(target, random.nextBoolean());\n          if (VERBOSE) {\n            System.out.println(\"  got \" + status);\n          }\n          \n          if (upto < 0) {\n            upto = -(upto+1);\n            if (upto >= terms.size()) {\n              assertEquals(TermsEnum.SeekStatus.END, status);\n              upto = -1;\n            } else {\n              assertEquals(TermsEnum.SeekStatus.NOT_FOUND, status);\n              assertEquals(terms.get(upto), termsEnum.term());\n            }\n          } else {\n            assertEquals(TermsEnum.SeekStatus.FOUND, status);\n            assertEquals(terms.get(upto), termsEnum.term());\n          }\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekExact target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekExact\n          final boolean result = termsEnum.seekExact(target, false);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + result);\n          }\n          if (upto < 0) {\n            assertFalse(result);\n            upto = -1;\n          } else {\n            assertTrue(result);\n            assertEquals(target, termsEnum.term());\n          }\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#test().mjava","sourceNew":"  public void test() throws Exception {\n    final LineFileDocs docs = new LineFileDocs(random, defaultCodecSupportsDocValues());\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, d);\n    final int numDocs = atLeast(10);\n    for(int docCount=0;docCount<numDocs;docCount++) {\n      w.addDocument(docs.nextDoc());\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final List<BytesRef> terms = new ArrayList<BytesRef>();\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"body\").iterator(null);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      terms.add(BytesRef.deepCopyOf(term));\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + terms.size() + \" terms\");\n    }\n\n    int upto = -1;\n    final int iters = atLeast(200);\n    for(int iter=0;iter<iters;iter++) {\n      final boolean isEnd;\n      if (upto != -1 && random.nextBoolean()) {\n        // next\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter next\");\n        }\n        isEnd = termsEnum.next() == null;\n        upto++;\n        if (isEnd) {\n          if (VERBOSE) {\n            System.out.println(\"  end\");\n          }\n          assertEquals(upto, terms.size());\n          upto = -1;\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  got term=\" + termsEnum.term().utf8ToString() + \" expected=\" + terms.get(upto).utf8ToString());\n          }\n          assertTrue(upto < terms.size());\n          assertEquals(terms.get(upto), termsEnum.term());\n        }\n      } else {\n\n        final BytesRef target;\n        final String exists;\n        if (random.nextBoolean()) {\n          // likely fake term\n          if (random.nextBoolean()) {\n            target = new BytesRef(_TestUtil.randomSimpleString(random));\n          } else {\n            target = new BytesRef(_TestUtil.randomRealisticUnicodeString(random));\n          }\n          exists = \"likely not\";\n        } else {\n          // real term\n          target = terms.get(random.nextInt(terms.size()));\n          exists = \"yes\";\n        }\n\n        upto = Collections.binarySearch(terms, target);\n\n        if (random.nextBoolean()) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekCeil target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekCeil\n          final TermsEnum.SeekStatus status = termsEnum.seekCeil(target, random.nextBoolean());\n          if (VERBOSE) {\n            System.out.println(\"  got \" + status);\n          }\n          \n          if (upto < 0) {\n            upto = -(upto+1);\n            if (upto >= terms.size()) {\n              assertEquals(TermsEnum.SeekStatus.END, status);\n              upto = -1;\n            } else {\n              assertEquals(TermsEnum.SeekStatus.NOT_FOUND, status);\n              assertEquals(terms.get(upto), termsEnum.term());\n            }\n          } else {\n            assertEquals(TermsEnum.SeekStatus.FOUND, status);\n            assertEquals(terms.get(upto), termsEnum.term());\n          }\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekExact target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekExact\n          final boolean result = termsEnum.seekExact(target, false);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + result);\n          }\n          if (upto < 0) {\n            assertFalse(result);\n            upto = -1;\n          } else {\n            assertTrue(result);\n            assertEquals(target, termsEnum.term());\n          }\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    final LineFileDocs docs = new LineFileDocs(random);\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, d);\n    final int numDocs = atLeast(10);\n    for(int docCount=0;docCount<numDocs;docCount++) {\n      w.addDocument(docs.nextDoc());\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final List<BytesRef> terms = new ArrayList<BytesRef>();\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"body\").iterator(null);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      terms.add(BytesRef.deepCopyOf(term));\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + terms.size() + \" terms\");\n    }\n\n    int upto = -1;\n    final int iters = atLeast(200);\n    for(int iter=0;iter<iters;iter++) {\n      final boolean isEnd;\n      if (upto != -1 && random.nextBoolean()) {\n        // next\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter next\");\n        }\n        isEnd = termsEnum.next() == null;\n        upto++;\n        if (isEnd) {\n          if (VERBOSE) {\n            System.out.println(\"  end\");\n          }\n          assertEquals(upto, terms.size());\n          upto = -1;\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  got term=\" + termsEnum.term().utf8ToString() + \" expected=\" + terms.get(upto).utf8ToString());\n          }\n          assertTrue(upto < terms.size());\n          assertEquals(terms.get(upto), termsEnum.term());\n        }\n      } else {\n\n        final BytesRef target;\n        final String exists;\n        if (random.nextBoolean()) {\n          // likely fake term\n          if (random.nextBoolean()) {\n            target = new BytesRef(_TestUtil.randomSimpleString(random));\n          } else {\n            target = new BytesRef(_TestUtil.randomRealisticUnicodeString(random));\n          }\n          exists = \"likely not\";\n        } else {\n          // real term\n          target = terms.get(random.nextInt(terms.size()));\n          exists = \"yes\";\n        }\n\n        upto = Collections.binarySearch(terms, target);\n\n        if (random.nextBoolean()) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekCeil target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekCeil\n          final TermsEnum.SeekStatus status = termsEnum.seekCeil(target, random.nextBoolean());\n          if (VERBOSE) {\n            System.out.println(\"  got \" + status);\n          }\n          \n          if (upto < 0) {\n            upto = -(upto+1);\n            if (upto >= terms.size()) {\n              assertEquals(TermsEnum.SeekStatus.END, status);\n              upto = -1;\n            } else {\n              assertEquals(TermsEnum.SeekStatus.NOT_FOUND, status);\n              assertEquals(terms.get(upto), termsEnum.term());\n            }\n          } else {\n            assertEquals(TermsEnum.SeekStatus.FOUND, status);\n            assertEquals(terms.get(upto), termsEnum.term());\n          }\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekExact target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekExact\n          final boolean result = termsEnum.seekExact(target, false);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + result);\n          }\n          if (upto < 0) {\n            assertFalse(result);\n            upto = -1;\n          } else {\n            assertTrue(result);\n            assertEquals(target, termsEnum.term());\n          }\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#test().mjava","sourceNew":"  public void test() throws Exception {\n    Random random = new Random(random().nextLong());\n    final LineFileDocs docs = new LineFileDocs(random, defaultCodecSupportsDocValues());\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    final int numDocs = atLeast(10);\n    for(int docCount=0;docCount<numDocs;docCount++) {\n      w.addDocument(docs.nextDoc());\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final List<BytesRef> terms = new ArrayList<BytesRef>();\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"body\").iterator(null);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      terms.add(BytesRef.deepCopyOf(term));\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + terms.size() + \" terms\");\n    }\n\n    int upto = -1;\n    final int iters = atLeast(200);\n    for(int iter=0;iter<iters;iter++) {\n      final boolean isEnd;\n      if (upto != -1 && random().nextBoolean()) {\n        // next\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter next\");\n        }\n        isEnd = termsEnum.next() == null;\n        upto++;\n        if (isEnd) {\n          if (VERBOSE) {\n            System.out.println(\"  end\");\n          }\n          assertEquals(upto, terms.size());\n          upto = -1;\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  got term=\" + termsEnum.term().utf8ToString() + \" expected=\" + terms.get(upto).utf8ToString());\n          }\n          assertTrue(upto < terms.size());\n          assertEquals(terms.get(upto), termsEnum.term());\n        }\n      } else {\n\n        final BytesRef target;\n        final String exists;\n        if (random().nextBoolean()) {\n          // likely fake term\n          if (random().nextBoolean()) {\n            target = new BytesRef(_TestUtil.randomSimpleString(random()));\n          } else {\n            target = new BytesRef(_TestUtil.randomRealisticUnicodeString(random()));\n          }\n          exists = \"likely not\";\n        } else {\n          // real term\n          target = terms.get(random().nextInt(terms.size()));\n          exists = \"yes\";\n        }\n\n        upto = Collections.binarySearch(terms, target);\n\n        if (random().nextBoolean()) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekCeil target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekCeil\n          final TermsEnum.SeekStatus status = termsEnum.seekCeil(target, random().nextBoolean());\n          if (VERBOSE) {\n            System.out.println(\"  got \" + status);\n          }\n          \n          if (upto < 0) {\n            upto = -(upto+1);\n            if (upto >= terms.size()) {\n              assertEquals(TermsEnum.SeekStatus.END, status);\n              upto = -1;\n            } else {\n              assertEquals(TermsEnum.SeekStatus.NOT_FOUND, status);\n              assertEquals(terms.get(upto), termsEnum.term());\n            }\n          } else {\n            assertEquals(TermsEnum.SeekStatus.FOUND, status);\n            assertEquals(terms.get(upto), termsEnum.term());\n          }\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekExact target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekExact\n          final boolean result = termsEnum.seekExact(target, false);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + result);\n          }\n          if (upto < 0) {\n            assertFalse(result);\n            upto = -1;\n          } else {\n            assertTrue(result);\n            assertEquals(target, termsEnum.term());\n          }\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    final LineFileDocs docs = new LineFileDocs(random, defaultCodecSupportsDocValues());\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, d);\n    final int numDocs = atLeast(10);\n    for(int docCount=0;docCount<numDocs;docCount++) {\n      w.addDocument(docs.nextDoc());\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final List<BytesRef> terms = new ArrayList<BytesRef>();\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"body\").iterator(null);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      terms.add(BytesRef.deepCopyOf(term));\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + terms.size() + \" terms\");\n    }\n\n    int upto = -1;\n    final int iters = atLeast(200);\n    for(int iter=0;iter<iters;iter++) {\n      final boolean isEnd;\n      if (upto != -1 && random.nextBoolean()) {\n        // next\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter next\");\n        }\n        isEnd = termsEnum.next() == null;\n        upto++;\n        if (isEnd) {\n          if (VERBOSE) {\n            System.out.println(\"  end\");\n          }\n          assertEquals(upto, terms.size());\n          upto = -1;\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  got term=\" + termsEnum.term().utf8ToString() + \" expected=\" + terms.get(upto).utf8ToString());\n          }\n          assertTrue(upto < terms.size());\n          assertEquals(terms.get(upto), termsEnum.term());\n        }\n      } else {\n\n        final BytesRef target;\n        final String exists;\n        if (random.nextBoolean()) {\n          // likely fake term\n          if (random.nextBoolean()) {\n            target = new BytesRef(_TestUtil.randomSimpleString(random));\n          } else {\n            target = new BytesRef(_TestUtil.randomRealisticUnicodeString(random));\n          }\n          exists = \"likely not\";\n        } else {\n          // real term\n          target = terms.get(random.nextInt(terms.size()));\n          exists = \"yes\";\n        }\n\n        upto = Collections.binarySearch(terms, target);\n\n        if (random.nextBoolean()) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekCeil target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekCeil\n          final TermsEnum.SeekStatus status = termsEnum.seekCeil(target, random.nextBoolean());\n          if (VERBOSE) {\n            System.out.println(\"  got \" + status);\n          }\n          \n          if (upto < 0) {\n            upto = -(upto+1);\n            if (upto >= terms.size()) {\n              assertEquals(TermsEnum.SeekStatus.END, status);\n              upto = -1;\n            } else {\n              assertEquals(TermsEnum.SeekStatus.NOT_FOUND, status);\n              assertEquals(terms.get(upto), termsEnum.term());\n            }\n          } else {\n            assertEquals(TermsEnum.SeekStatus.FOUND, status);\n            assertEquals(terms.get(upto), termsEnum.term());\n          }\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekExact target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekExact\n          final boolean result = termsEnum.seekExact(target, false);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + result);\n          }\n          if (upto < 0) {\n            assertFalse(result);\n            upto = -1;\n          } else {\n            assertTrue(result);\n            assertEquals(target, termsEnum.term());\n          }\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6550af40a4977993323e8fd3b3222a2402084800","date":1334548895,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#test().mjava","sourceNew":"  public void test() throws Exception {\n    Random random = new Random(random().nextLong());\n    final LineFileDocs docs = new LineFileDocs(random, defaultCodecSupportsDocValues());\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    final int numDocs = atLeast(10);\n    for(int docCount=0;docCount<numDocs;docCount++) {\n      w.addDocument(docs.nextDoc());\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final List<BytesRef> terms = new ArrayList<BytesRef>();\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"body\").iterator(null);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      terms.add(BytesRef.deepCopyOf(term));\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + terms.size() + \" terms\");\n    }\n\n    int upto = -1;\n    final int iters = atLeast(200);\n    for(int iter=0;iter<iters;iter++) {\n      final boolean isEnd;\n      if (upto != -1 && random().nextBoolean()) {\n        // next\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter next\");\n        }\n        isEnd = termsEnum.next() == null;\n        upto++;\n        if (isEnd) {\n          if (VERBOSE) {\n            System.out.println(\"  end\");\n          }\n          assertEquals(upto, terms.size());\n          upto = -1;\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  got term=\" + termsEnum.term().utf8ToString() + \" expected=\" + terms.get(upto).utf8ToString());\n          }\n          assertTrue(upto < terms.size());\n          assertEquals(terms.get(upto), termsEnum.term());\n        }\n      } else {\n\n        final BytesRef target;\n        final String exists;\n        if (random().nextBoolean()) {\n          // likely fake term\n          if (random().nextBoolean()) {\n            target = new BytesRef(_TestUtil.randomSimpleString(random()));\n          } else {\n            target = new BytesRef(_TestUtil.randomRealisticUnicodeString(random()));\n          }\n          exists = \"likely not\";\n        } else {\n          // real term\n          target = terms.get(random().nextInt(terms.size()));\n          exists = \"yes\";\n        }\n\n        upto = Collections.binarySearch(terms, target);\n\n        if (random().nextBoolean()) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekCeil target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekCeil\n          final TermsEnum.SeekStatus status = termsEnum.seekCeil(target, random().nextBoolean());\n          if (VERBOSE) {\n            System.out.println(\"  got \" + status);\n          }\n          \n          if (upto < 0) {\n            upto = -(upto+1);\n            if (upto >= terms.size()) {\n              assertEquals(TermsEnum.SeekStatus.END, status);\n              upto = -1;\n            } else {\n              assertEquals(TermsEnum.SeekStatus.NOT_FOUND, status);\n              assertEquals(terms.get(upto), termsEnum.term());\n            }\n          } else {\n            assertEquals(TermsEnum.SeekStatus.FOUND, status);\n            assertEquals(terms.get(upto), termsEnum.term());\n          }\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekExact target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekExact\n          final boolean result = termsEnum.seekExact(target, false);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + result);\n          }\n          if (upto < 0) {\n            assertFalse(result);\n            upto = -1;\n          } else {\n            assertTrue(result);\n            assertEquals(target, termsEnum.term());\n          }\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Random random = new Random(random().nextLong());\n    final LineFileDocs docs = new LineFileDocs(random, defaultCodecSupportsDocValues());\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    final int numDocs = atLeast(10);\n    for(int docCount=0;docCount<numDocs;docCount++) {\n      w.addDocument(docs.nextDoc());\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final List<BytesRef> terms = new ArrayList<BytesRef>();\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"body\").iterator(null);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      terms.add(BytesRef.deepCopyOf(term));\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + terms.size() + \" terms\");\n    }\n\n    int upto = -1;\n    final int iters = atLeast(200);\n    for(int iter=0;iter<iters;iter++) {\n      final boolean isEnd;\n      if (upto != -1 && random().nextBoolean()) {\n        // next\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter next\");\n        }\n        isEnd = termsEnum.next() == null;\n        upto++;\n        if (isEnd) {\n          if (VERBOSE) {\n            System.out.println(\"  end\");\n          }\n          assertEquals(upto, terms.size());\n          upto = -1;\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  got term=\" + termsEnum.term().utf8ToString() + \" expected=\" + terms.get(upto).utf8ToString());\n          }\n          assertTrue(upto < terms.size());\n          assertEquals(terms.get(upto), termsEnum.term());\n        }\n      } else {\n\n        final BytesRef target;\n        final String exists;\n        if (random().nextBoolean()) {\n          // likely fake term\n          if (random().nextBoolean()) {\n            target = new BytesRef(_TestUtil.randomSimpleString(random()));\n          } else {\n            target = new BytesRef(_TestUtil.randomRealisticUnicodeString(random()));\n          }\n          exists = \"likely not\";\n        } else {\n          // real term\n          target = terms.get(random().nextInt(terms.size()));\n          exists = \"yes\";\n        }\n\n        upto = Collections.binarySearch(terms, target);\n\n        if (random().nextBoolean()) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekCeil target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekCeil\n          final TermsEnum.SeekStatus status = termsEnum.seekCeil(target, random().nextBoolean());\n          if (VERBOSE) {\n            System.out.println(\"  got \" + status);\n          }\n          \n          if (upto < 0) {\n            upto = -(upto+1);\n            if (upto >= terms.size()) {\n              assertEquals(TermsEnum.SeekStatus.END, status);\n              upto = -1;\n            } else {\n              assertEquals(TermsEnum.SeekStatus.NOT_FOUND, status);\n              assertEquals(terms.get(upto), termsEnum.term());\n            }\n          } else {\n            assertEquals(TermsEnum.SeekStatus.FOUND, status);\n            assertEquals(terms.get(upto), termsEnum.term());\n          }\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekExact target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekExact\n          final boolean result = termsEnum.seekExact(target, false);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + result);\n          }\n          if (upto < 0) {\n            assertFalse(result);\n            upto = -1;\n          } else {\n            assertTrue(result);\n            assertEquals(target, termsEnum.term());\n          }\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57ae3024996ccdb3c36c42cb890e1efb37df4ce8","date":1338343651,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#test().mjava","sourceNew":"  public void test() throws Exception {\n    Random random = new Random(random().nextLong());\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    final int numDocs = atLeast(10);\n    for(int docCount=0;docCount<numDocs;docCount++) {\n      w.addDocument(docs.nextDoc());\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final List<BytesRef> terms = new ArrayList<BytesRef>();\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"body\").iterator(null);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      terms.add(BytesRef.deepCopyOf(term));\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + terms.size() + \" terms\");\n    }\n\n    int upto = -1;\n    final int iters = atLeast(200);\n    for(int iter=0;iter<iters;iter++) {\n      final boolean isEnd;\n      if (upto != -1 && random().nextBoolean()) {\n        // next\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter next\");\n        }\n        isEnd = termsEnum.next() == null;\n        upto++;\n        if (isEnd) {\n          if (VERBOSE) {\n            System.out.println(\"  end\");\n          }\n          assertEquals(upto, terms.size());\n          upto = -1;\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  got term=\" + termsEnum.term().utf8ToString() + \" expected=\" + terms.get(upto).utf8ToString());\n          }\n          assertTrue(upto < terms.size());\n          assertEquals(terms.get(upto), termsEnum.term());\n        }\n      } else {\n\n        final BytesRef target;\n        final String exists;\n        if (random().nextBoolean()) {\n          // likely fake term\n          if (random().nextBoolean()) {\n            target = new BytesRef(_TestUtil.randomSimpleString(random()));\n          } else {\n            target = new BytesRef(_TestUtil.randomRealisticUnicodeString(random()));\n          }\n          exists = \"likely not\";\n        } else {\n          // real term\n          target = terms.get(random().nextInt(terms.size()));\n          exists = \"yes\";\n        }\n\n        upto = Collections.binarySearch(terms, target);\n\n        if (random().nextBoolean()) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekCeil target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekCeil\n          final TermsEnum.SeekStatus status = termsEnum.seekCeil(target, random().nextBoolean());\n          if (VERBOSE) {\n            System.out.println(\"  got \" + status);\n          }\n          \n          if (upto < 0) {\n            upto = -(upto+1);\n            if (upto >= terms.size()) {\n              assertEquals(TermsEnum.SeekStatus.END, status);\n              upto = -1;\n            } else {\n              assertEquals(TermsEnum.SeekStatus.NOT_FOUND, status);\n              assertEquals(terms.get(upto), termsEnum.term());\n            }\n          } else {\n            assertEquals(TermsEnum.SeekStatus.FOUND, status);\n            assertEquals(terms.get(upto), termsEnum.term());\n          }\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekExact target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekExact\n          final boolean result = termsEnum.seekExact(target, false);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + result);\n          }\n          if (upto < 0) {\n            assertFalse(result);\n            upto = -1;\n          } else {\n            assertTrue(result);\n            assertEquals(target, termsEnum.term());\n          }\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Random random = new Random(random().nextLong());\n    final LineFileDocs docs = new LineFileDocs(random, defaultCodecSupportsDocValues());\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    final int numDocs = atLeast(10);\n    for(int docCount=0;docCount<numDocs;docCount++) {\n      w.addDocument(docs.nextDoc());\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final List<BytesRef> terms = new ArrayList<BytesRef>();\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"body\").iterator(null);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      terms.add(BytesRef.deepCopyOf(term));\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + terms.size() + \" terms\");\n    }\n\n    int upto = -1;\n    final int iters = atLeast(200);\n    for(int iter=0;iter<iters;iter++) {\n      final boolean isEnd;\n      if (upto != -1 && random().nextBoolean()) {\n        // next\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter next\");\n        }\n        isEnd = termsEnum.next() == null;\n        upto++;\n        if (isEnd) {\n          if (VERBOSE) {\n            System.out.println(\"  end\");\n          }\n          assertEquals(upto, terms.size());\n          upto = -1;\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  got term=\" + termsEnum.term().utf8ToString() + \" expected=\" + terms.get(upto).utf8ToString());\n          }\n          assertTrue(upto < terms.size());\n          assertEquals(terms.get(upto), termsEnum.term());\n        }\n      } else {\n\n        final BytesRef target;\n        final String exists;\n        if (random().nextBoolean()) {\n          // likely fake term\n          if (random().nextBoolean()) {\n            target = new BytesRef(_TestUtil.randomSimpleString(random()));\n          } else {\n            target = new BytesRef(_TestUtil.randomRealisticUnicodeString(random()));\n          }\n          exists = \"likely not\";\n        } else {\n          // real term\n          target = terms.get(random().nextInt(terms.size()));\n          exists = \"yes\";\n        }\n\n        upto = Collections.binarySearch(terms, target);\n\n        if (random().nextBoolean()) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekCeil target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekCeil\n          final TermsEnum.SeekStatus status = termsEnum.seekCeil(target, random().nextBoolean());\n          if (VERBOSE) {\n            System.out.println(\"  got \" + status);\n          }\n          \n          if (upto < 0) {\n            upto = -(upto+1);\n            if (upto >= terms.size()) {\n              assertEquals(TermsEnum.SeekStatus.END, status);\n              upto = -1;\n            } else {\n              assertEquals(TermsEnum.SeekStatus.NOT_FOUND, status);\n              assertEquals(terms.get(upto), termsEnum.term());\n            }\n          } else {\n            assertEquals(TermsEnum.SeekStatus.FOUND, status);\n            assertEquals(terms.get(upto), termsEnum.term());\n          }\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekExact target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekExact\n          final boolean result = termsEnum.seekExact(target, false);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + result);\n          }\n          if (upto < 0) {\n            assertFalse(result);\n            upto = -1;\n          } else {\n            assertTrue(result);\n            assertEquals(target, termsEnum.term());\n          }\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8","date":1373996650,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#test().mjava","sourceNew":"  public void test() throws Exception {\n    Random random = new Random(random().nextLong());\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    final int numDocs = atLeast(10);\n    for(int docCount=0;docCount<numDocs;docCount++) {\n      w.addDocument(docs.nextDoc());\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final List<BytesRef> terms = new ArrayList<BytesRef>();\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"body\").iterator(null);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      terms.add(BytesRef.deepCopyOf(term));\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + terms.size() + \" terms\");\n    }\n\n    int upto = -1;\n    final int iters = atLeast(200);\n    for(int iter=0;iter<iters;iter++) {\n      final boolean isEnd;\n      if (upto != -1 && random().nextBoolean()) {\n        // next\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter next\");\n        }\n        isEnd = termsEnum.next() == null;\n        upto++;\n        if (isEnd) {\n          if (VERBOSE) {\n            System.out.println(\"  end\");\n          }\n          assertEquals(upto, terms.size());\n          upto = -1;\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  got term=\" + termsEnum.term().utf8ToString() + \" expected=\" + terms.get(upto).utf8ToString());\n          }\n          assertTrue(upto < terms.size());\n          assertEquals(terms.get(upto), termsEnum.term());\n        }\n      } else {\n\n        final BytesRef target;\n        final String exists;\n        if (random().nextBoolean()) {\n          // likely fake term\n          if (random().nextBoolean()) {\n            target = new BytesRef(_TestUtil.randomSimpleString(random()));\n          } else {\n            target = new BytesRef(_TestUtil.randomRealisticUnicodeString(random()));\n          }\n          exists = \"likely not\";\n        } else {\n          // real term\n          target = terms.get(random().nextInt(terms.size()));\n          exists = \"yes\";\n        }\n\n        upto = Collections.binarySearch(terms, target);\n\n        if (random().nextBoolean()) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekCeil target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekCeil\n          final TermsEnum.SeekStatus status = termsEnum.seekCeil(target);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + status);\n          }\n          \n          if (upto < 0) {\n            upto = -(upto+1);\n            if (upto >= terms.size()) {\n              assertEquals(TermsEnum.SeekStatus.END, status);\n              upto = -1;\n            } else {\n              assertEquals(TermsEnum.SeekStatus.NOT_FOUND, status);\n              assertEquals(terms.get(upto), termsEnum.term());\n            }\n          } else {\n            assertEquals(TermsEnum.SeekStatus.FOUND, status);\n            assertEquals(terms.get(upto), termsEnum.term());\n          }\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekExact target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekExact\n          final boolean result = termsEnum.seekExact(target);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + result);\n          }\n          if (upto < 0) {\n            assertFalse(result);\n            upto = -1;\n          } else {\n            assertTrue(result);\n            assertEquals(target, termsEnum.term());\n          }\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Random random = new Random(random().nextLong());\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    final int numDocs = atLeast(10);\n    for(int docCount=0;docCount<numDocs;docCount++) {\n      w.addDocument(docs.nextDoc());\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final List<BytesRef> terms = new ArrayList<BytesRef>();\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"body\").iterator(null);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      terms.add(BytesRef.deepCopyOf(term));\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + terms.size() + \" terms\");\n    }\n\n    int upto = -1;\n    final int iters = atLeast(200);\n    for(int iter=0;iter<iters;iter++) {\n      final boolean isEnd;\n      if (upto != -1 && random().nextBoolean()) {\n        // next\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter next\");\n        }\n        isEnd = termsEnum.next() == null;\n        upto++;\n        if (isEnd) {\n          if (VERBOSE) {\n            System.out.println(\"  end\");\n          }\n          assertEquals(upto, terms.size());\n          upto = -1;\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  got term=\" + termsEnum.term().utf8ToString() + \" expected=\" + terms.get(upto).utf8ToString());\n          }\n          assertTrue(upto < terms.size());\n          assertEquals(terms.get(upto), termsEnum.term());\n        }\n      } else {\n\n        final BytesRef target;\n        final String exists;\n        if (random().nextBoolean()) {\n          // likely fake term\n          if (random().nextBoolean()) {\n            target = new BytesRef(_TestUtil.randomSimpleString(random()));\n          } else {\n            target = new BytesRef(_TestUtil.randomRealisticUnicodeString(random()));\n          }\n          exists = \"likely not\";\n        } else {\n          // real term\n          target = terms.get(random().nextInt(terms.size()));\n          exists = \"yes\";\n        }\n\n        upto = Collections.binarySearch(terms, target);\n\n        if (random().nextBoolean()) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekCeil target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekCeil\n          final TermsEnum.SeekStatus status = termsEnum.seekCeil(target, random().nextBoolean());\n          if (VERBOSE) {\n            System.out.println(\"  got \" + status);\n          }\n          \n          if (upto < 0) {\n            upto = -(upto+1);\n            if (upto >= terms.size()) {\n              assertEquals(TermsEnum.SeekStatus.END, status);\n              upto = -1;\n            } else {\n              assertEquals(TermsEnum.SeekStatus.NOT_FOUND, status);\n              assertEquals(terms.get(upto), termsEnum.term());\n            }\n          } else {\n            assertEquals(TermsEnum.SeekStatus.FOUND, status);\n            assertEquals(terms.get(upto), termsEnum.term());\n          }\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekExact target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekExact\n          final boolean result = termsEnum.seekExact(target, false);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + result);\n          }\n          if (upto < 0) {\n            assertFalse(result);\n            upto = -1;\n          } else {\n            assertTrue(result);\n            assertEquals(target, termsEnum.term());\n          }\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#test().mjava","sourceNew":"  public void test() throws Exception {\n    Random random = new Random(random().nextLong());\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    final int numDocs = atLeast(10);\n    for(int docCount=0;docCount<numDocs;docCount++) {\n      w.addDocument(docs.nextDoc());\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final List<BytesRef> terms = new ArrayList<BytesRef>();\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"body\").iterator(null);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      terms.add(BytesRef.deepCopyOf(term));\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + terms.size() + \" terms\");\n    }\n\n    int upto = -1;\n    final int iters = atLeast(200);\n    for(int iter=0;iter<iters;iter++) {\n      final boolean isEnd;\n      if (upto != -1 && random().nextBoolean()) {\n        // next\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter next\");\n        }\n        isEnd = termsEnum.next() == null;\n        upto++;\n        if (isEnd) {\n          if (VERBOSE) {\n            System.out.println(\"  end\");\n          }\n          assertEquals(upto, terms.size());\n          upto = -1;\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  got term=\" + termsEnum.term().utf8ToString() + \" expected=\" + terms.get(upto).utf8ToString());\n          }\n          assertTrue(upto < terms.size());\n          assertEquals(terms.get(upto), termsEnum.term());\n        }\n      } else {\n\n        final BytesRef target;\n        final String exists;\n        if (random().nextBoolean()) {\n          // likely fake term\n          if (random().nextBoolean()) {\n            target = new BytesRef(_TestUtil.randomSimpleString(random()));\n          } else {\n            target = new BytesRef(_TestUtil.randomRealisticUnicodeString(random()));\n          }\n          exists = \"likely not\";\n        } else {\n          // real term\n          target = terms.get(random().nextInt(terms.size()));\n          exists = \"yes\";\n        }\n\n        upto = Collections.binarySearch(terms, target);\n\n        if (random().nextBoolean()) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekCeil target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekCeil\n          final TermsEnum.SeekStatus status = termsEnum.seekCeil(target);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + status);\n          }\n          \n          if (upto < 0) {\n            upto = -(upto+1);\n            if (upto >= terms.size()) {\n              assertEquals(TermsEnum.SeekStatus.END, status);\n              upto = -1;\n            } else {\n              assertEquals(TermsEnum.SeekStatus.NOT_FOUND, status);\n              assertEquals(terms.get(upto), termsEnum.term());\n            }\n          } else {\n            assertEquals(TermsEnum.SeekStatus.FOUND, status);\n            assertEquals(terms.get(upto), termsEnum.term());\n          }\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekExact target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekExact\n          final boolean result = termsEnum.seekExact(target);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + result);\n          }\n          if (upto < 0) {\n            assertFalse(result);\n            upto = -1;\n          } else {\n            assertTrue(result);\n            assertEquals(target, termsEnum.term());\n          }\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Random random = new Random(random().nextLong());\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    final int numDocs = atLeast(10);\n    for(int docCount=0;docCount<numDocs;docCount++) {\n      w.addDocument(docs.nextDoc());\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final List<BytesRef> terms = new ArrayList<BytesRef>();\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"body\").iterator(null);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      terms.add(BytesRef.deepCopyOf(term));\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + terms.size() + \" terms\");\n    }\n\n    int upto = -1;\n    final int iters = atLeast(200);\n    for(int iter=0;iter<iters;iter++) {\n      final boolean isEnd;\n      if (upto != -1 && random().nextBoolean()) {\n        // next\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter next\");\n        }\n        isEnd = termsEnum.next() == null;\n        upto++;\n        if (isEnd) {\n          if (VERBOSE) {\n            System.out.println(\"  end\");\n          }\n          assertEquals(upto, terms.size());\n          upto = -1;\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  got term=\" + termsEnum.term().utf8ToString() + \" expected=\" + terms.get(upto).utf8ToString());\n          }\n          assertTrue(upto < terms.size());\n          assertEquals(terms.get(upto), termsEnum.term());\n        }\n      } else {\n\n        final BytesRef target;\n        final String exists;\n        if (random().nextBoolean()) {\n          // likely fake term\n          if (random().nextBoolean()) {\n            target = new BytesRef(_TestUtil.randomSimpleString(random()));\n          } else {\n            target = new BytesRef(_TestUtil.randomRealisticUnicodeString(random()));\n          }\n          exists = \"likely not\";\n        } else {\n          // real term\n          target = terms.get(random().nextInt(terms.size()));\n          exists = \"yes\";\n        }\n\n        upto = Collections.binarySearch(terms, target);\n\n        if (random().nextBoolean()) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekCeil target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekCeil\n          final TermsEnum.SeekStatus status = termsEnum.seekCeil(target, random().nextBoolean());\n          if (VERBOSE) {\n            System.out.println(\"  got \" + status);\n          }\n          \n          if (upto < 0) {\n            upto = -(upto+1);\n            if (upto >= terms.size()) {\n              assertEquals(TermsEnum.SeekStatus.END, status);\n              upto = -1;\n            } else {\n              assertEquals(TermsEnum.SeekStatus.NOT_FOUND, status);\n              assertEquals(terms.get(upto), termsEnum.term());\n            }\n          } else {\n            assertEquals(TermsEnum.SeekStatus.FOUND, status);\n            assertEquals(terms.get(upto), termsEnum.term());\n          }\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekExact target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekExact\n          final boolean result = termsEnum.seekExact(target, false);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + result);\n          }\n          if (upto < 0) {\n            assertFalse(result);\n            upto = -1;\n          } else {\n            assertTrue(result);\n            assertEquals(target, termsEnum.term());\n          }\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#test().mjava","sourceNew":"  public void test() throws Exception {\n    Random random = new Random(random().nextLong());\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    final int numDocs = atLeast(10);\n    for(int docCount=0;docCount<numDocs;docCount++) {\n      w.addDocument(docs.nextDoc());\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final List<BytesRef> terms = new ArrayList<BytesRef>();\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"body\").iterator(null);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      terms.add(BytesRef.deepCopyOf(term));\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + terms.size() + \" terms\");\n    }\n\n    int upto = -1;\n    final int iters = atLeast(200);\n    for(int iter=0;iter<iters;iter++) {\n      final boolean isEnd;\n      if (upto != -1 && random().nextBoolean()) {\n        // next\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter next\");\n        }\n        isEnd = termsEnum.next() == null;\n        upto++;\n        if (isEnd) {\n          if (VERBOSE) {\n            System.out.println(\"  end\");\n          }\n          assertEquals(upto, terms.size());\n          upto = -1;\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  got term=\" + termsEnum.term().utf8ToString() + \" expected=\" + terms.get(upto).utf8ToString());\n          }\n          assertTrue(upto < terms.size());\n          assertEquals(terms.get(upto), termsEnum.term());\n        }\n      } else {\n\n        final BytesRef target;\n        final String exists;\n        if (random().nextBoolean()) {\n          // likely fake term\n          if (random().nextBoolean()) {\n            target = new BytesRef(TestUtil.randomSimpleString(random()));\n          } else {\n            target = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n          }\n          exists = \"likely not\";\n        } else {\n          // real term\n          target = terms.get(random().nextInt(terms.size()));\n          exists = \"yes\";\n        }\n\n        upto = Collections.binarySearch(terms, target);\n\n        if (random().nextBoolean()) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekCeil target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekCeil\n          final TermsEnum.SeekStatus status = termsEnum.seekCeil(target);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + status);\n          }\n          \n          if (upto < 0) {\n            upto = -(upto+1);\n            if (upto >= terms.size()) {\n              assertEquals(TermsEnum.SeekStatus.END, status);\n              upto = -1;\n            } else {\n              assertEquals(TermsEnum.SeekStatus.NOT_FOUND, status);\n              assertEquals(terms.get(upto), termsEnum.term());\n            }\n          } else {\n            assertEquals(TermsEnum.SeekStatus.FOUND, status);\n            assertEquals(terms.get(upto), termsEnum.term());\n          }\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekExact target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekExact\n          final boolean result = termsEnum.seekExact(target);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + result);\n          }\n          if (upto < 0) {\n            assertFalse(result);\n            upto = -1;\n          } else {\n            assertTrue(result);\n            assertEquals(target, termsEnum.term());\n          }\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Random random = new Random(random().nextLong());\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    final int numDocs = atLeast(10);\n    for(int docCount=0;docCount<numDocs;docCount++) {\n      w.addDocument(docs.nextDoc());\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final List<BytesRef> terms = new ArrayList<BytesRef>();\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"body\").iterator(null);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      terms.add(BytesRef.deepCopyOf(term));\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + terms.size() + \" terms\");\n    }\n\n    int upto = -1;\n    final int iters = atLeast(200);\n    for(int iter=0;iter<iters;iter++) {\n      final boolean isEnd;\n      if (upto != -1 && random().nextBoolean()) {\n        // next\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter next\");\n        }\n        isEnd = termsEnum.next() == null;\n        upto++;\n        if (isEnd) {\n          if (VERBOSE) {\n            System.out.println(\"  end\");\n          }\n          assertEquals(upto, terms.size());\n          upto = -1;\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  got term=\" + termsEnum.term().utf8ToString() + \" expected=\" + terms.get(upto).utf8ToString());\n          }\n          assertTrue(upto < terms.size());\n          assertEquals(terms.get(upto), termsEnum.term());\n        }\n      } else {\n\n        final BytesRef target;\n        final String exists;\n        if (random().nextBoolean()) {\n          // likely fake term\n          if (random().nextBoolean()) {\n            target = new BytesRef(_TestUtil.randomSimpleString(random()));\n          } else {\n            target = new BytesRef(_TestUtil.randomRealisticUnicodeString(random()));\n          }\n          exists = \"likely not\";\n        } else {\n          // real term\n          target = terms.get(random().nextInt(terms.size()));\n          exists = \"yes\";\n        }\n\n        upto = Collections.binarySearch(terms, target);\n\n        if (random().nextBoolean()) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekCeil target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekCeil\n          final TermsEnum.SeekStatus status = termsEnum.seekCeil(target);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + status);\n          }\n          \n          if (upto < 0) {\n            upto = -(upto+1);\n            if (upto >= terms.size()) {\n              assertEquals(TermsEnum.SeekStatus.END, status);\n              upto = -1;\n            } else {\n              assertEquals(TermsEnum.SeekStatus.NOT_FOUND, status);\n              assertEquals(terms.get(upto), termsEnum.term());\n            }\n          } else {\n            assertEquals(TermsEnum.SeekStatus.FOUND, status);\n            assertEquals(terms.get(upto), termsEnum.term());\n          }\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekExact target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekExact\n          final boolean result = termsEnum.seekExact(target);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + result);\n          }\n          if (upto < 0) {\n            assertFalse(result);\n            upto = -1;\n          } else {\n            assertTrue(result);\n            assertEquals(target, termsEnum.term());\n          }\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1151ecb4798f5c31137aec032c241638018ed20","date":1394284367,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#test().mjava","sourceNew":"  public void test() throws Exception {\n    Random random = new Random(random().nextLong());\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    final Directory d = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d, analyzer);\n    final int numDocs = atLeast(10);\n    for(int docCount=0;docCount<numDocs;docCount++) {\n      w.addDocument(docs.nextDoc());\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final List<BytesRef> terms = new ArrayList<BytesRef>();\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"body\").iterator(null);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      terms.add(BytesRef.deepCopyOf(term));\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + terms.size() + \" terms\");\n    }\n\n    int upto = -1;\n    final int iters = atLeast(200);\n    for(int iter=0;iter<iters;iter++) {\n      final boolean isEnd;\n      if (upto != -1 && random().nextBoolean()) {\n        // next\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter next\");\n        }\n        isEnd = termsEnum.next() == null;\n        upto++;\n        if (isEnd) {\n          if (VERBOSE) {\n            System.out.println(\"  end\");\n          }\n          assertEquals(upto, terms.size());\n          upto = -1;\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  got term=\" + termsEnum.term().utf8ToString() + \" expected=\" + terms.get(upto).utf8ToString());\n          }\n          assertTrue(upto < terms.size());\n          assertEquals(terms.get(upto), termsEnum.term());\n        }\n      } else {\n\n        final BytesRef target;\n        final String exists;\n        if (random().nextBoolean()) {\n          // likely fake term\n          if (random().nextBoolean()) {\n            target = new BytesRef(TestUtil.randomSimpleString(random()));\n          } else {\n            target = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n          }\n          exists = \"likely not\";\n        } else {\n          // real term\n          target = terms.get(random().nextInt(terms.size()));\n          exists = \"yes\";\n        }\n\n        upto = Collections.binarySearch(terms, target);\n\n        if (random().nextBoolean()) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekCeil target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekCeil\n          final TermsEnum.SeekStatus status = termsEnum.seekCeil(target);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + status);\n          }\n          \n          if (upto < 0) {\n            upto = -(upto+1);\n            if (upto >= terms.size()) {\n              assertEquals(TermsEnum.SeekStatus.END, status);\n              upto = -1;\n            } else {\n              assertEquals(TermsEnum.SeekStatus.NOT_FOUND, status);\n              assertEquals(terms.get(upto), termsEnum.term());\n            }\n          } else {\n            assertEquals(TermsEnum.SeekStatus.FOUND, status);\n            assertEquals(terms.get(upto), termsEnum.term());\n          }\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekExact target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekExact\n          final boolean result = termsEnum.seekExact(target);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + result);\n          }\n          if (upto < 0) {\n            assertFalse(result);\n            upto = -1;\n          } else {\n            assertTrue(result);\n            assertEquals(target, termsEnum.term());\n          }\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Random random = new Random(random().nextLong());\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    final int numDocs = atLeast(10);\n    for(int docCount=0;docCount<numDocs;docCount++) {\n      w.addDocument(docs.nextDoc());\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final List<BytesRef> terms = new ArrayList<BytesRef>();\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"body\").iterator(null);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      terms.add(BytesRef.deepCopyOf(term));\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + terms.size() + \" terms\");\n    }\n\n    int upto = -1;\n    final int iters = atLeast(200);\n    for(int iter=0;iter<iters;iter++) {\n      final boolean isEnd;\n      if (upto != -1 && random().nextBoolean()) {\n        // next\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter next\");\n        }\n        isEnd = termsEnum.next() == null;\n        upto++;\n        if (isEnd) {\n          if (VERBOSE) {\n            System.out.println(\"  end\");\n          }\n          assertEquals(upto, terms.size());\n          upto = -1;\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  got term=\" + termsEnum.term().utf8ToString() + \" expected=\" + terms.get(upto).utf8ToString());\n          }\n          assertTrue(upto < terms.size());\n          assertEquals(terms.get(upto), termsEnum.term());\n        }\n      } else {\n\n        final BytesRef target;\n        final String exists;\n        if (random().nextBoolean()) {\n          // likely fake term\n          if (random().nextBoolean()) {\n            target = new BytesRef(TestUtil.randomSimpleString(random()));\n          } else {\n            target = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n          }\n          exists = \"likely not\";\n        } else {\n          // real term\n          target = terms.get(random().nextInt(terms.size()));\n          exists = \"yes\";\n        }\n\n        upto = Collections.binarySearch(terms, target);\n\n        if (random().nextBoolean()) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekCeil target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekCeil\n          final TermsEnum.SeekStatus status = termsEnum.seekCeil(target);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + status);\n          }\n          \n          if (upto < 0) {\n            upto = -(upto+1);\n            if (upto >= terms.size()) {\n              assertEquals(TermsEnum.SeekStatus.END, status);\n              upto = -1;\n            } else {\n              assertEquals(TermsEnum.SeekStatus.NOT_FOUND, status);\n              assertEquals(terms.get(upto), termsEnum.term());\n            }\n          } else {\n            assertEquals(TermsEnum.SeekStatus.FOUND, status);\n            assertEquals(terms.get(upto), termsEnum.term());\n          }\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekExact target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekExact\n          final boolean result = termsEnum.seekExact(target);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + result);\n          }\n          if (upto < 0) {\n            assertFalse(result);\n            upto = -1;\n          } else {\n            assertTrue(result);\n            assertEquals(target, termsEnum.term());\n          }\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","date":1394564625,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#test().mjava","sourceNew":"  public void test() throws Exception {\n    Random random = new Random(random().nextLong());\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    final Directory d = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d, analyzer);\n    final int numDocs = atLeast(10);\n    for(int docCount=0;docCount<numDocs;docCount++) {\n      w.addDocument(docs.nextDoc());\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final List<BytesRef> terms = new ArrayList<BytesRef>();\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"body\").iterator(null);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      terms.add(BytesRef.deepCopyOf(term));\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + terms.size() + \" terms\");\n    }\n\n    int upto = -1;\n    final int iters = atLeast(200);\n    for(int iter=0;iter<iters;iter++) {\n      final boolean isEnd;\n      if (upto != -1 && random().nextBoolean()) {\n        // next\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter next\");\n        }\n        isEnd = termsEnum.next() == null;\n        upto++;\n        if (isEnd) {\n          if (VERBOSE) {\n            System.out.println(\"  end\");\n          }\n          assertEquals(upto, terms.size());\n          upto = -1;\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  got term=\" + termsEnum.term().utf8ToString() + \" expected=\" + terms.get(upto).utf8ToString());\n          }\n          assertTrue(upto < terms.size());\n          assertEquals(terms.get(upto), termsEnum.term());\n        }\n      } else {\n\n        final BytesRef target;\n        final String exists;\n        if (random().nextBoolean()) {\n          // likely fake term\n          if (random().nextBoolean()) {\n            target = new BytesRef(TestUtil.randomSimpleString(random()));\n          } else {\n            target = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n          }\n          exists = \"likely not\";\n        } else {\n          // real term\n          target = terms.get(random().nextInt(terms.size()));\n          exists = \"yes\";\n        }\n\n        upto = Collections.binarySearch(terms, target);\n\n        if (random().nextBoolean()) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekCeil target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekCeil\n          final TermsEnum.SeekStatus status = termsEnum.seekCeil(target);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + status);\n          }\n          \n          if (upto < 0) {\n            upto = -(upto+1);\n            if (upto >= terms.size()) {\n              assertEquals(TermsEnum.SeekStatus.END, status);\n              upto = -1;\n            } else {\n              assertEquals(TermsEnum.SeekStatus.NOT_FOUND, status);\n              assertEquals(terms.get(upto), termsEnum.term());\n            }\n          } else {\n            assertEquals(TermsEnum.SeekStatus.FOUND, status);\n            assertEquals(terms.get(upto), termsEnum.term());\n          }\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekExact target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekExact\n          final boolean result = termsEnum.seekExact(target);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + result);\n          }\n          if (upto < 0) {\n            assertFalse(result);\n            upto = -1;\n          } else {\n            assertTrue(result);\n            assertEquals(target, termsEnum.term());\n          }\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Random random = new Random(random().nextLong());\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    final int numDocs = atLeast(10);\n    for(int docCount=0;docCount<numDocs;docCount++) {\n      w.addDocument(docs.nextDoc());\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final List<BytesRef> terms = new ArrayList<BytesRef>();\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"body\").iterator(null);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      terms.add(BytesRef.deepCopyOf(term));\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + terms.size() + \" terms\");\n    }\n\n    int upto = -1;\n    final int iters = atLeast(200);\n    for(int iter=0;iter<iters;iter++) {\n      final boolean isEnd;\n      if (upto != -1 && random().nextBoolean()) {\n        // next\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter next\");\n        }\n        isEnd = termsEnum.next() == null;\n        upto++;\n        if (isEnd) {\n          if (VERBOSE) {\n            System.out.println(\"  end\");\n          }\n          assertEquals(upto, terms.size());\n          upto = -1;\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  got term=\" + termsEnum.term().utf8ToString() + \" expected=\" + terms.get(upto).utf8ToString());\n          }\n          assertTrue(upto < terms.size());\n          assertEquals(terms.get(upto), termsEnum.term());\n        }\n      } else {\n\n        final BytesRef target;\n        final String exists;\n        if (random().nextBoolean()) {\n          // likely fake term\n          if (random().nextBoolean()) {\n            target = new BytesRef(TestUtil.randomSimpleString(random()));\n          } else {\n            target = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n          }\n          exists = \"likely not\";\n        } else {\n          // real term\n          target = terms.get(random().nextInt(terms.size()));\n          exists = \"yes\";\n        }\n\n        upto = Collections.binarySearch(terms, target);\n\n        if (random().nextBoolean()) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekCeil target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekCeil\n          final TermsEnum.SeekStatus status = termsEnum.seekCeil(target);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + status);\n          }\n          \n          if (upto < 0) {\n            upto = -(upto+1);\n            if (upto >= terms.size()) {\n              assertEquals(TermsEnum.SeekStatus.END, status);\n              upto = -1;\n            } else {\n              assertEquals(TermsEnum.SeekStatus.NOT_FOUND, status);\n              assertEquals(terms.get(upto), termsEnum.term());\n            }\n          } else {\n            assertEquals(TermsEnum.SeekStatus.FOUND, status);\n            assertEquals(terms.get(upto), termsEnum.term());\n          }\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekExact target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekExact\n          final boolean result = termsEnum.seekExact(target);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + result);\n          }\n          if (upto < 0) {\n            assertFalse(result);\n            upto = -1;\n          } else {\n            assertTrue(result);\n            assertEquals(target, termsEnum.term());\n          }\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#test().mjava","sourceNew":"  public void test() throws Exception {\n    Random random = new Random(random().nextLong());\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    final Directory d = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d, analyzer);\n    final int numDocs = atLeast(10);\n    for(int docCount=0;docCount<numDocs;docCount++) {\n      w.addDocument(docs.nextDoc());\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final List<BytesRef> terms = new ArrayList<>();\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"body\").iterator(null);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      terms.add(BytesRef.deepCopyOf(term));\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + terms.size() + \" terms\");\n    }\n\n    int upto = -1;\n    final int iters = atLeast(200);\n    for(int iter=0;iter<iters;iter++) {\n      final boolean isEnd;\n      if (upto != -1 && random().nextBoolean()) {\n        // next\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter next\");\n        }\n        isEnd = termsEnum.next() == null;\n        upto++;\n        if (isEnd) {\n          if (VERBOSE) {\n            System.out.println(\"  end\");\n          }\n          assertEquals(upto, terms.size());\n          upto = -1;\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  got term=\" + termsEnum.term().utf8ToString() + \" expected=\" + terms.get(upto).utf8ToString());\n          }\n          assertTrue(upto < terms.size());\n          assertEquals(terms.get(upto), termsEnum.term());\n        }\n      } else {\n\n        final BytesRef target;\n        final String exists;\n        if (random().nextBoolean()) {\n          // likely fake term\n          if (random().nextBoolean()) {\n            target = new BytesRef(TestUtil.randomSimpleString(random()));\n          } else {\n            target = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n          }\n          exists = \"likely not\";\n        } else {\n          // real term\n          target = terms.get(random().nextInt(terms.size()));\n          exists = \"yes\";\n        }\n\n        upto = Collections.binarySearch(terms, target);\n\n        if (random().nextBoolean()) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekCeil target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekCeil\n          final TermsEnum.SeekStatus status = termsEnum.seekCeil(target);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + status);\n          }\n          \n          if (upto < 0) {\n            upto = -(upto+1);\n            if (upto >= terms.size()) {\n              assertEquals(TermsEnum.SeekStatus.END, status);\n              upto = -1;\n            } else {\n              assertEquals(TermsEnum.SeekStatus.NOT_FOUND, status);\n              assertEquals(terms.get(upto), termsEnum.term());\n            }\n          } else {\n            assertEquals(TermsEnum.SeekStatus.FOUND, status);\n            assertEquals(terms.get(upto), termsEnum.term());\n          }\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekExact target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekExact\n          final boolean result = termsEnum.seekExact(target);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + result);\n          }\n          if (upto < 0) {\n            assertFalse(result);\n            upto = -1;\n          } else {\n            assertTrue(result);\n            assertEquals(target, termsEnum.term());\n          }\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Random random = new Random(random().nextLong());\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    final Directory d = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d, analyzer);\n    final int numDocs = atLeast(10);\n    for(int docCount=0;docCount<numDocs;docCount++) {\n      w.addDocument(docs.nextDoc());\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final List<BytesRef> terms = new ArrayList<BytesRef>();\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"body\").iterator(null);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      terms.add(BytesRef.deepCopyOf(term));\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + terms.size() + \" terms\");\n    }\n\n    int upto = -1;\n    final int iters = atLeast(200);\n    for(int iter=0;iter<iters;iter++) {\n      final boolean isEnd;\n      if (upto != -1 && random().nextBoolean()) {\n        // next\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter next\");\n        }\n        isEnd = termsEnum.next() == null;\n        upto++;\n        if (isEnd) {\n          if (VERBOSE) {\n            System.out.println(\"  end\");\n          }\n          assertEquals(upto, terms.size());\n          upto = -1;\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  got term=\" + termsEnum.term().utf8ToString() + \" expected=\" + terms.get(upto).utf8ToString());\n          }\n          assertTrue(upto < terms.size());\n          assertEquals(terms.get(upto), termsEnum.term());\n        }\n      } else {\n\n        final BytesRef target;\n        final String exists;\n        if (random().nextBoolean()) {\n          // likely fake term\n          if (random().nextBoolean()) {\n            target = new BytesRef(TestUtil.randomSimpleString(random()));\n          } else {\n            target = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n          }\n          exists = \"likely not\";\n        } else {\n          // real term\n          target = terms.get(random().nextInt(terms.size()));\n          exists = \"yes\";\n        }\n\n        upto = Collections.binarySearch(terms, target);\n\n        if (random().nextBoolean()) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekCeil target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekCeil\n          final TermsEnum.SeekStatus status = termsEnum.seekCeil(target);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + status);\n          }\n          \n          if (upto < 0) {\n            upto = -(upto+1);\n            if (upto >= terms.size()) {\n              assertEquals(TermsEnum.SeekStatus.END, status);\n              upto = -1;\n            } else {\n              assertEquals(TermsEnum.SeekStatus.NOT_FOUND, status);\n              assertEquals(terms.get(upto), termsEnum.term());\n            }\n          } else {\n            assertEquals(TermsEnum.SeekStatus.FOUND, status);\n            assertEquals(terms.get(upto), termsEnum.term());\n          }\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekExact target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekExact\n          final boolean result = termsEnum.seekExact(target);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + result);\n          }\n          if (upto < 0) {\n            assertFalse(result);\n            upto = -1;\n          } else {\n            assertTrue(result);\n            assertEquals(target, termsEnum.term());\n          }\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#test().mjava","sourceNew":"  public void test() throws Exception {\n    Random random = new Random(random().nextLong());\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    final Directory d = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d, analyzer);\n    final int numDocs = atLeast(10);\n    for(int docCount=0;docCount<numDocs;docCount++) {\n      w.addDocument(docs.nextDoc());\n    }\n    final IndexReader r = w.getReader();\n    w.shutdown();\n\n    final List<BytesRef> terms = new ArrayList<>();\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"body\").iterator(null);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      terms.add(BytesRef.deepCopyOf(term));\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + terms.size() + \" terms\");\n    }\n\n    int upto = -1;\n    final int iters = atLeast(200);\n    for(int iter=0;iter<iters;iter++) {\n      final boolean isEnd;\n      if (upto != -1 && random().nextBoolean()) {\n        // next\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter next\");\n        }\n        isEnd = termsEnum.next() == null;\n        upto++;\n        if (isEnd) {\n          if (VERBOSE) {\n            System.out.println(\"  end\");\n          }\n          assertEquals(upto, terms.size());\n          upto = -1;\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  got term=\" + termsEnum.term().utf8ToString() + \" expected=\" + terms.get(upto).utf8ToString());\n          }\n          assertTrue(upto < terms.size());\n          assertEquals(terms.get(upto), termsEnum.term());\n        }\n      } else {\n\n        final BytesRef target;\n        final String exists;\n        if (random().nextBoolean()) {\n          // likely fake term\n          if (random().nextBoolean()) {\n            target = new BytesRef(TestUtil.randomSimpleString(random()));\n          } else {\n            target = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n          }\n          exists = \"likely not\";\n        } else {\n          // real term\n          target = terms.get(random().nextInt(terms.size()));\n          exists = \"yes\";\n        }\n\n        upto = Collections.binarySearch(terms, target);\n\n        if (random().nextBoolean()) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekCeil target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekCeil\n          final TermsEnum.SeekStatus status = termsEnum.seekCeil(target);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + status);\n          }\n          \n          if (upto < 0) {\n            upto = -(upto+1);\n            if (upto >= terms.size()) {\n              assertEquals(TermsEnum.SeekStatus.END, status);\n              upto = -1;\n            } else {\n              assertEquals(TermsEnum.SeekStatus.NOT_FOUND, status);\n              assertEquals(terms.get(upto), termsEnum.term());\n            }\n          } else {\n            assertEquals(TermsEnum.SeekStatus.FOUND, status);\n            assertEquals(terms.get(upto), termsEnum.term());\n          }\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekExact target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekExact\n          final boolean result = termsEnum.seekExact(target);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + result);\n          }\n          if (upto < 0) {\n            assertFalse(result);\n            upto = -1;\n          } else {\n            assertTrue(result);\n            assertEquals(target, termsEnum.term());\n          }\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Random random = new Random(random().nextLong());\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    final Directory d = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d, analyzer);\n    final int numDocs = atLeast(10);\n    for(int docCount=0;docCount<numDocs;docCount++) {\n      w.addDocument(docs.nextDoc());\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final List<BytesRef> terms = new ArrayList<>();\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"body\").iterator(null);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      terms.add(BytesRef.deepCopyOf(term));\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + terms.size() + \" terms\");\n    }\n\n    int upto = -1;\n    final int iters = atLeast(200);\n    for(int iter=0;iter<iters;iter++) {\n      final boolean isEnd;\n      if (upto != -1 && random().nextBoolean()) {\n        // next\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter next\");\n        }\n        isEnd = termsEnum.next() == null;\n        upto++;\n        if (isEnd) {\n          if (VERBOSE) {\n            System.out.println(\"  end\");\n          }\n          assertEquals(upto, terms.size());\n          upto = -1;\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  got term=\" + termsEnum.term().utf8ToString() + \" expected=\" + terms.get(upto).utf8ToString());\n          }\n          assertTrue(upto < terms.size());\n          assertEquals(terms.get(upto), termsEnum.term());\n        }\n      } else {\n\n        final BytesRef target;\n        final String exists;\n        if (random().nextBoolean()) {\n          // likely fake term\n          if (random().nextBoolean()) {\n            target = new BytesRef(TestUtil.randomSimpleString(random()));\n          } else {\n            target = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n          }\n          exists = \"likely not\";\n        } else {\n          // real term\n          target = terms.get(random().nextInt(terms.size()));\n          exists = \"yes\";\n        }\n\n        upto = Collections.binarySearch(terms, target);\n\n        if (random().nextBoolean()) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekCeil target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekCeil\n          final TermsEnum.SeekStatus status = termsEnum.seekCeil(target);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + status);\n          }\n          \n          if (upto < 0) {\n            upto = -(upto+1);\n            if (upto >= terms.size()) {\n              assertEquals(TermsEnum.SeekStatus.END, status);\n              upto = -1;\n            } else {\n              assertEquals(TermsEnum.SeekStatus.NOT_FOUND, status);\n              assertEquals(terms.get(upto), termsEnum.term());\n            }\n          } else {\n            assertEquals(TermsEnum.SeekStatus.FOUND, status);\n            assertEquals(terms.get(upto), termsEnum.term());\n          }\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekExact target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekExact\n          final boolean result = termsEnum.seekExact(target);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + result);\n          }\n          if (upto < 0) {\n            assertFalse(result);\n            upto = -1;\n          } else {\n            assertTrue(result);\n            assertEquals(target, termsEnum.term());\n          }\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#test().mjava","sourceNew":"  public void test() throws Exception {\n    Random random = new Random(random().nextLong());\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    final Directory d = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d, analyzer);\n    final int numDocs = atLeast(10);\n    for(int docCount=0;docCount<numDocs;docCount++) {\n      w.addDocument(docs.nextDoc());\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final List<BytesRef> terms = new ArrayList<>();\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"body\").iterator(null);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      terms.add(BytesRef.deepCopyOf(term));\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + terms.size() + \" terms\");\n    }\n\n    int upto = -1;\n    final int iters = atLeast(200);\n    for(int iter=0;iter<iters;iter++) {\n      final boolean isEnd;\n      if (upto != -1 && random().nextBoolean()) {\n        // next\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter next\");\n        }\n        isEnd = termsEnum.next() == null;\n        upto++;\n        if (isEnd) {\n          if (VERBOSE) {\n            System.out.println(\"  end\");\n          }\n          assertEquals(upto, terms.size());\n          upto = -1;\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  got term=\" + termsEnum.term().utf8ToString() + \" expected=\" + terms.get(upto).utf8ToString());\n          }\n          assertTrue(upto < terms.size());\n          assertEquals(terms.get(upto), termsEnum.term());\n        }\n      } else {\n\n        final BytesRef target;\n        final String exists;\n        if (random().nextBoolean()) {\n          // likely fake term\n          if (random().nextBoolean()) {\n            target = new BytesRef(TestUtil.randomSimpleString(random()));\n          } else {\n            target = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n          }\n          exists = \"likely not\";\n        } else {\n          // real term\n          target = terms.get(random().nextInt(terms.size()));\n          exists = \"yes\";\n        }\n\n        upto = Collections.binarySearch(terms, target);\n\n        if (random().nextBoolean()) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekCeil target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekCeil\n          final TermsEnum.SeekStatus status = termsEnum.seekCeil(target);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + status);\n          }\n          \n          if (upto < 0) {\n            upto = -(upto+1);\n            if (upto >= terms.size()) {\n              assertEquals(TermsEnum.SeekStatus.END, status);\n              upto = -1;\n            } else {\n              assertEquals(TermsEnum.SeekStatus.NOT_FOUND, status);\n              assertEquals(terms.get(upto), termsEnum.term());\n            }\n          } else {\n            assertEquals(TermsEnum.SeekStatus.FOUND, status);\n            assertEquals(terms.get(upto), termsEnum.term());\n          }\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekExact target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekExact\n          final boolean result = termsEnum.seekExact(target);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + result);\n          }\n          if (upto < 0) {\n            assertFalse(result);\n            upto = -1;\n          } else {\n            assertTrue(result);\n            assertEquals(target, termsEnum.term());\n          }\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Random random = new Random(random().nextLong());\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    final Directory d = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d, analyzer);\n    final int numDocs = atLeast(10);\n    for(int docCount=0;docCount<numDocs;docCount++) {\n      w.addDocument(docs.nextDoc());\n    }\n    final IndexReader r = w.getReader();\n    w.shutdown();\n\n    final List<BytesRef> terms = new ArrayList<>();\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"body\").iterator(null);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      terms.add(BytesRef.deepCopyOf(term));\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + terms.size() + \" terms\");\n    }\n\n    int upto = -1;\n    final int iters = atLeast(200);\n    for(int iter=0;iter<iters;iter++) {\n      final boolean isEnd;\n      if (upto != -1 && random().nextBoolean()) {\n        // next\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter next\");\n        }\n        isEnd = termsEnum.next() == null;\n        upto++;\n        if (isEnd) {\n          if (VERBOSE) {\n            System.out.println(\"  end\");\n          }\n          assertEquals(upto, terms.size());\n          upto = -1;\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  got term=\" + termsEnum.term().utf8ToString() + \" expected=\" + terms.get(upto).utf8ToString());\n          }\n          assertTrue(upto < terms.size());\n          assertEquals(terms.get(upto), termsEnum.term());\n        }\n      } else {\n\n        final BytesRef target;\n        final String exists;\n        if (random().nextBoolean()) {\n          // likely fake term\n          if (random().nextBoolean()) {\n            target = new BytesRef(TestUtil.randomSimpleString(random()));\n          } else {\n            target = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n          }\n          exists = \"likely not\";\n        } else {\n          // real term\n          target = terms.get(random().nextInt(terms.size()));\n          exists = \"yes\";\n        }\n\n        upto = Collections.binarySearch(terms, target);\n\n        if (random().nextBoolean()) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekCeil target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekCeil\n          final TermsEnum.SeekStatus status = termsEnum.seekCeil(target);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + status);\n          }\n          \n          if (upto < 0) {\n            upto = -(upto+1);\n            if (upto >= terms.size()) {\n              assertEquals(TermsEnum.SeekStatus.END, status);\n              upto = -1;\n            } else {\n              assertEquals(TermsEnum.SeekStatus.NOT_FOUND, status);\n              assertEquals(terms.get(upto), termsEnum.term());\n            }\n          } else {\n            assertEquals(TermsEnum.SeekStatus.FOUND, status);\n            assertEquals(terms.get(upto), termsEnum.term());\n          }\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekExact target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekExact\n          final boolean result = termsEnum.seekExact(target);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + result);\n          }\n          if (upto < 0) {\n            assertFalse(result);\n            upto = -1;\n          } else {\n            assertTrue(result);\n            assertEquals(target, termsEnum.term());\n          }\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#test().mjava","sourceNew":"  public void test() throws Exception {\n    Random random = new Random(random().nextLong());\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    final Directory d = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d, analyzer);\n    final int numDocs = atLeast(10);\n    for(int docCount=0;docCount<numDocs;docCount++) {\n      w.addDocument(docs.nextDoc());\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final List<BytesRef> terms = new ArrayList<>();\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"body\").iterator();\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      terms.add(BytesRef.deepCopyOf(term));\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + terms.size() + \" terms\");\n    }\n\n    int upto = -1;\n    final int iters = atLeast(200);\n    for(int iter=0;iter<iters;iter++) {\n      final boolean isEnd;\n      if (upto != -1 && random().nextBoolean()) {\n        // next\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter next\");\n        }\n        isEnd = termsEnum.next() == null;\n        upto++;\n        if (isEnd) {\n          if (VERBOSE) {\n            System.out.println(\"  end\");\n          }\n          assertEquals(upto, terms.size());\n          upto = -1;\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  got term=\" + termsEnum.term().utf8ToString() + \" expected=\" + terms.get(upto).utf8ToString());\n          }\n          assertTrue(upto < terms.size());\n          assertEquals(terms.get(upto), termsEnum.term());\n        }\n      } else {\n\n        final BytesRef target;\n        final String exists;\n        if (random().nextBoolean()) {\n          // likely fake term\n          if (random().nextBoolean()) {\n            target = new BytesRef(TestUtil.randomSimpleString(random()));\n          } else {\n            target = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n          }\n          exists = \"likely not\";\n        } else {\n          // real term\n          target = terms.get(random().nextInt(terms.size()));\n          exists = \"yes\";\n        }\n\n        upto = Collections.binarySearch(terms, target);\n\n        if (random().nextBoolean()) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekCeil target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekCeil\n          final TermsEnum.SeekStatus status = termsEnum.seekCeil(target);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + status);\n          }\n          \n          if (upto < 0) {\n            upto = -(upto+1);\n            if (upto >= terms.size()) {\n              assertEquals(TermsEnum.SeekStatus.END, status);\n              upto = -1;\n            } else {\n              assertEquals(TermsEnum.SeekStatus.NOT_FOUND, status);\n              assertEquals(terms.get(upto), termsEnum.term());\n            }\n          } else {\n            assertEquals(TermsEnum.SeekStatus.FOUND, status);\n            assertEquals(terms.get(upto), termsEnum.term());\n          }\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekExact target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekExact\n          final boolean result = termsEnum.seekExact(target);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + result);\n          }\n          if (upto < 0) {\n            assertFalse(result);\n            upto = -1;\n          } else {\n            assertTrue(result);\n            assertEquals(target, termsEnum.term());\n          }\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Random random = new Random(random().nextLong());\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    final Directory d = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d, analyzer);\n    final int numDocs = atLeast(10);\n    for(int docCount=0;docCount<numDocs;docCount++) {\n      w.addDocument(docs.nextDoc());\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final List<BytesRef> terms = new ArrayList<>();\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"body\").iterator(null);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      terms.add(BytesRef.deepCopyOf(term));\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + terms.size() + \" terms\");\n    }\n\n    int upto = -1;\n    final int iters = atLeast(200);\n    for(int iter=0;iter<iters;iter++) {\n      final boolean isEnd;\n      if (upto != -1 && random().nextBoolean()) {\n        // next\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter next\");\n        }\n        isEnd = termsEnum.next() == null;\n        upto++;\n        if (isEnd) {\n          if (VERBOSE) {\n            System.out.println(\"  end\");\n          }\n          assertEquals(upto, terms.size());\n          upto = -1;\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  got term=\" + termsEnum.term().utf8ToString() + \" expected=\" + terms.get(upto).utf8ToString());\n          }\n          assertTrue(upto < terms.size());\n          assertEquals(terms.get(upto), termsEnum.term());\n        }\n      } else {\n\n        final BytesRef target;\n        final String exists;\n        if (random().nextBoolean()) {\n          // likely fake term\n          if (random().nextBoolean()) {\n            target = new BytesRef(TestUtil.randomSimpleString(random()));\n          } else {\n            target = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n          }\n          exists = \"likely not\";\n        } else {\n          // real term\n          target = terms.get(random().nextInt(terms.size()));\n          exists = \"yes\";\n        }\n\n        upto = Collections.binarySearch(terms, target);\n\n        if (random().nextBoolean()) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekCeil target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekCeil\n          final TermsEnum.SeekStatus status = termsEnum.seekCeil(target);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + status);\n          }\n          \n          if (upto < 0) {\n            upto = -(upto+1);\n            if (upto >= terms.size()) {\n              assertEquals(TermsEnum.SeekStatus.END, status);\n              upto = -1;\n            } else {\n              assertEquals(TermsEnum.SeekStatus.NOT_FOUND, status);\n              assertEquals(terms.get(upto), termsEnum.term());\n            }\n          } else {\n            assertEquals(TermsEnum.SeekStatus.FOUND, status);\n            assertEquals(terms.get(upto), termsEnum.term());\n          }\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekExact target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekExact\n          final boolean result = termsEnum.seekExact(target);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + result);\n          }\n          if (upto < 0) {\n            assertFalse(result);\n            upto = -1;\n          } else {\n            assertTrue(result);\n            assertEquals(target, termsEnum.term());\n          }\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"221076a44effb5561a3b799974ba1a35119fbcc0","date":1457468497,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#test().mjava","sourceNew":"  public void test() throws Exception {\n    Random random = new Random(random().nextLong());\n    final LineFileDocs docs = new LineFileDocs(random);\n    final Directory d = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d, analyzer);\n    final int numDocs = atLeast(10);\n    for(int docCount=0;docCount<numDocs;docCount++) {\n      w.addDocument(docs.nextDoc());\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final List<BytesRef> terms = new ArrayList<>();\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"body\").iterator();\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      terms.add(BytesRef.deepCopyOf(term));\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + terms.size() + \" terms\");\n    }\n\n    int upto = -1;\n    final int iters = atLeast(200);\n    for(int iter=0;iter<iters;iter++) {\n      final boolean isEnd;\n      if (upto != -1 && random().nextBoolean()) {\n        // next\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter next\");\n        }\n        isEnd = termsEnum.next() == null;\n        upto++;\n        if (isEnd) {\n          if (VERBOSE) {\n            System.out.println(\"  end\");\n          }\n          assertEquals(upto, terms.size());\n          upto = -1;\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  got term=\" + termsEnum.term().utf8ToString() + \" expected=\" + terms.get(upto).utf8ToString());\n          }\n          assertTrue(upto < terms.size());\n          assertEquals(terms.get(upto), termsEnum.term());\n        }\n      } else {\n\n        final BytesRef target;\n        final String exists;\n        if (random().nextBoolean()) {\n          // likely fake term\n          if (random().nextBoolean()) {\n            target = new BytesRef(TestUtil.randomSimpleString(random()));\n          } else {\n            target = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n          }\n          exists = \"likely not\";\n        } else {\n          // real term\n          target = terms.get(random().nextInt(terms.size()));\n          exists = \"yes\";\n        }\n\n        upto = Collections.binarySearch(terms, target);\n\n        if (random().nextBoolean()) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekCeil target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekCeil\n          final TermsEnum.SeekStatus status = termsEnum.seekCeil(target);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + status);\n          }\n          \n          if (upto < 0) {\n            upto = -(upto+1);\n            if (upto >= terms.size()) {\n              assertEquals(TermsEnum.SeekStatus.END, status);\n              upto = -1;\n            } else {\n              assertEquals(TermsEnum.SeekStatus.NOT_FOUND, status);\n              assertEquals(terms.get(upto), termsEnum.term());\n            }\n          } else {\n            assertEquals(TermsEnum.SeekStatus.FOUND, status);\n            assertEquals(terms.get(upto), termsEnum.term());\n          }\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekExact target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekExact\n          final boolean result = termsEnum.seekExact(target);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + result);\n          }\n          if (upto < 0) {\n            assertFalse(result);\n            upto = -1;\n          } else {\n            assertTrue(result);\n            assertEquals(target, termsEnum.term());\n          }\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Random random = new Random(random().nextLong());\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    final Directory d = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d, analyzer);\n    final int numDocs = atLeast(10);\n    for(int docCount=0;docCount<numDocs;docCount++) {\n      w.addDocument(docs.nextDoc());\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final List<BytesRef> terms = new ArrayList<>();\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"body\").iterator();\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      terms.add(BytesRef.deepCopyOf(term));\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + terms.size() + \" terms\");\n    }\n\n    int upto = -1;\n    final int iters = atLeast(200);\n    for(int iter=0;iter<iters;iter++) {\n      final boolean isEnd;\n      if (upto != -1 && random().nextBoolean()) {\n        // next\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter next\");\n        }\n        isEnd = termsEnum.next() == null;\n        upto++;\n        if (isEnd) {\n          if (VERBOSE) {\n            System.out.println(\"  end\");\n          }\n          assertEquals(upto, terms.size());\n          upto = -1;\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  got term=\" + termsEnum.term().utf8ToString() + \" expected=\" + terms.get(upto).utf8ToString());\n          }\n          assertTrue(upto < terms.size());\n          assertEquals(terms.get(upto), termsEnum.term());\n        }\n      } else {\n\n        final BytesRef target;\n        final String exists;\n        if (random().nextBoolean()) {\n          // likely fake term\n          if (random().nextBoolean()) {\n            target = new BytesRef(TestUtil.randomSimpleString(random()));\n          } else {\n            target = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n          }\n          exists = \"likely not\";\n        } else {\n          // real term\n          target = terms.get(random().nextInt(terms.size()));\n          exists = \"yes\";\n        }\n\n        upto = Collections.binarySearch(terms, target);\n\n        if (random().nextBoolean()) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekCeil target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekCeil\n          final TermsEnum.SeekStatus status = termsEnum.seekCeil(target);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + status);\n          }\n          \n          if (upto < 0) {\n            upto = -(upto+1);\n            if (upto >= terms.size()) {\n              assertEquals(TermsEnum.SeekStatus.END, status);\n              upto = -1;\n            } else {\n              assertEquals(TermsEnum.SeekStatus.NOT_FOUND, status);\n              assertEquals(terms.get(upto), termsEnum.term());\n            }\n          } else {\n            assertEquals(TermsEnum.SeekStatus.FOUND, status);\n            assertEquals(terms.get(upto), termsEnum.term());\n          }\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekExact target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekExact\n          final boolean result = termsEnum.seekExact(target);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + result);\n          }\n          if (upto < 0) {\n            assertFalse(result);\n            upto = -1;\n          } else {\n            assertTrue(result);\n            assertEquals(target, termsEnum.term());\n          }\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#test().mjava","sourceNew":"  public void test() throws Exception {\n    Random random = new Random(random().nextLong());\n    final LineFileDocs docs = new LineFileDocs(random);\n    final Directory d = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d, analyzer);\n    final int numDocs = atLeast(10);\n    for(int docCount=0;docCount<numDocs;docCount++) {\n      w.addDocument(docs.nextDoc());\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final List<BytesRef> terms = new ArrayList<>();\n    final TermsEnum termsEnum = MultiTerms.getTerms(r, \"body\").iterator();\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      terms.add(BytesRef.deepCopyOf(term));\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + terms.size() + \" terms\");\n    }\n\n    int upto = -1;\n    final int iters = atLeast(200);\n    for(int iter=0;iter<iters;iter++) {\n      final boolean isEnd;\n      if (upto != -1 && random().nextBoolean()) {\n        // next\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter next\");\n        }\n        isEnd = termsEnum.next() == null;\n        upto++;\n        if (isEnd) {\n          if (VERBOSE) {\n            System.out.println(\"  end\");\n          }\n          assertEquals(upto, terms.size());\n          upto = -1;\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  got term=\" + termsEnum.term().utf8ToString() + \" expected=\" + terms.get(upto).utf8ToString());\n          }\n          assertTrue(upto < terms.size());\n          assertEquals(terms.get(upto), termsEnum.term());\n        }\n      } else {\n\n        final BytesRef target;\n        final String exists;\n        if (random().nextBoolean()) {\n          // likely fake term\n          if (random().nextBoolean()) {\n            target = new BytesRef(TestUtil.randomSimpleString(random()));\n          } else {\n            target = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n          }\n          exists = \"likely not\";\n        } else {\n          // real term\n          target = terms.get(random().nextInt(terms.size()));\n          exists = \"yes\";\n        }\n\n        upto = Collections.binarySearch(terms, target);\n\n        if (random().nextBoolean()) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekCeil target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekCeil\n          final TermsEnum.SeekStatus status = termsEnum.seekCeil(target);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + status);\n          }\n          \n          if (upto < 0) {\n            upto = -(upto+1);\n            if (upto >= terms.size()) {\n              assertEquals(TermsEnum.SeekStatus.END, status);\n              upto = -1;\n            } else {\n              assertEquals(TermsEnum.SeekStatus.NOT_FOUND, status);\n              assertEquals(terms.get(upto), termsEnum.term());\n            }\n          } else {\n            assertEquals(TermsEnum.SeekStatus.FOUND, status);\n            assertEquals(terms.get(upto), termsEnum.term());\n          }\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekExact target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekExact\n          final boolean result = termsEnum.seekExact(target);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + result);\n          }\n          if (upto < 0) {\n            assertFalse(result);\n            upto = -1;\n          } else {\n            assertTrue(result);\n            assertEquals(target, termsEnum.term());\n          }\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Random random = new Random(random().nextLong());\n    final LineFileDocs docs = new LineFileDocs(random);\n    final Directory d = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d, analyzer);\n    final int numDocs = atLeast(10);\n    for(int docCount=0;docCount<numDocs;docCount++) {\n      w.addDocument(docs.nextDoc());\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final List<BytesRef> terms = new ArrayList<>();\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"body\").iterator();\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      terms.add(BytesRef.deepCopyOf(term));\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + terms.size() + \" terms\");\n    }\n\n    int upto = -1;\n    final int iters = atLeast(200);\n    for(int iter=0;iter<iters;iter++) {\n      final boolean isEnd;\n      if (upto != -1 && random().nextBoolean()) {\n        // next\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter next\");\n        }\n        isEnd = termsEnum.next() == null;\n        upto++;\n        if (isEnd) {\n          if (VERBOSE) {\n            System.out.println(\"  end\");\n          }\n          assertEquals(upto, terms.size());\n          upto = -1;\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  got term=\" + termsEnum.term().utf8ToString() + \" expected=\" + terms.get(upto).utf8ToString());\n          }\n          assertTrue(upto < terms.size());\n          assertEquals(terms.get(upto), termsEnum.term());\n        }\n      } else {\n\n        final BytesRef target;\n        final String exists;\n        if (random().nextBoolean()) {\n          // likely fake term\n          if (random().nextBoolean()) {\n            target = new BytesRef(TestUtil.randomSimpleString(random()));\n          } else {\n            target = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n          }\n          exists = \"likely not\";\n        } else {\n          // real term\n          target = terms.get(random().nextInt(terms.size()));\n          exists = \"yes\";\n        }\n\n        upto = Collections.binarySearch(terms, target);\n\n        if (random().nextBoolean()) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekCeil target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekCeil\n          final TermsEnum.SeekStatus status = termsEnum.seekCeil(target);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + status);\n          }\n          \n          if (upto < 0) {\n            upto = -(upto+1);\n            if (upto >= terms.size()) {\n              assertEquals(TermsEnum.SeekStatus.END, status);\n              upto = -1;\n            } else {\n              assertEquals(TermsEnum.SeekStatus.NOT_FOUND, status);\n              assertEquals(terms.get(upto), termsEnum.term());\n            }\n          } else {\n            assertEquals(TermsEnum.SeekStatus.FOUND, status);\n            assertEquals(terms.get(upto), termsEnum.term());\n          }\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekExact target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekExact\n          final boolean result = termsEnum.seekExact(target);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + result);\n          }\n          if (upto < 0) {\n            assertFalse(result);\n            upto = -1;\n          } else {\n            assertTrue(result);\n            assertEquals(target, termsEnum.term());\n          }\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["e1151ecb4798f5c31137aec032c241638018ed20"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","86365ce8db75e42ebe10805e99e92c463fef63b6"],"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":["6613659748fe4411a7dcf85266e55db1f95f7315","e1151ecb4798f5c31137aec032c241638018ed20"],"6613659748fe4411a7dcf85266e55db1f95f7315":["eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6550af40a4977993323e8fd3b3222a2402084800":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"86365ce8db75e42ebe10805e99e92c463fef63b6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"221076a44effb5561a3b799974ba1a35119fbcc0":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"e1151ecb4798f5c31137aec032c241638018ed20":["6613659748fe4411a7dcf85266e55db1f95f7315"],"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["6550af40a4977993323e8fd3b3222a2402084800"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["221076a44effb5561a3b799974ba1a35119fbcc0"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["86365ce8db75e42ebe10805e99e92c463fef63b6"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04e775de416dd2d8067b10db1c8af975a1d5017e"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["221076a44effb5561a3b799974ba1a35119fbcc0"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","86365ce8db75e42ebe10805e99e92c463fef63b6"],"6613659748fe4411a7dcf85266e55db1f95f7315":["a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","e1151ecb4798f5c31137aec032c241638018ed20"],"86365ce8db75e42ebe10805e99e92c463fef63b6":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"6550af40a4977993323e8fd3b3222a2402084800":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"221076a44effb5561a3b799974ba1a35119fbcc0":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"e1151ecb4798f5c31137aec032c241638018ed20":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","a58bbbe1c866963764d3f15d3a26a6a85f6c6af4"],"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["6550af40a4977993323e8fd3b3222a2402084800"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}