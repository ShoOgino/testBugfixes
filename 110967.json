{"path":"solr/core/src/java/org/apache/solr/search/QueryResultKey#QueryResultKey(Query,List[Query],Sort,int,int).mjava","commits":[{"id":"640ded7811e1b7d29236a5e2934ec3cd266a8199","date":1588973147,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryResultKey#QueryResultKey(Query,List[Query],Sort,int,int).mjava","pathOld":"/dev/null","sourceNew":"  public QueryResultKey(Query query, List<Query> filters, Sort sort, int nc_flags, int minExactHits) {\n    this.query = query;\n    this.sort = sort;\n    this.filters = filters;\n    this.nc_flags = nc_flags;\n    this.minExactHits = minExactHits;\n\n    int h = query.hashCode();\n\n    if (filters != null) {\n      for (Query filt : filters)\n        // NOTE: simple summation used here so keys with the same filters but in\n        // different orders get the same hashCode\n        h += filt.hashCode();\n    }\n\n    sfields = (this.sort !=null) ? this.sort.getSort() : defaultSort;\n    long ramSfields = RamUsageEstimator.NUM_BYTES_ARRAY_HEADER;\n    for (SortField sf : sfields) {\n      h = h*29 + sf.hashCode();\n      ramSfields += BASE_SF_RAM_BYTES_USED + RamUsageEstimator.sizeOfObject(sf.getField());\n    }\n    h = h*31 + minExactHits;\n\n    hc = h;\n\n    ramBytesUsed =\n        BASE_RAM_BYTES_USED +\n        ramSfields +\n        RamUsageEstimator.sizeOfObject(query, RamUsageEstimator.QUERY_DEFAULT_RAM_BYTES_USED) +\n        RamUsageEstimator.sizeOfObject(filters, RamUsageEstimator.QUERY_DEFAULT_RAM_BYTES_USED);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b8ad6d99eb2424679c78255c369b8fac243e7dd","date":1590104557,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryResultKey#QueryResultKey(Query,List[Query],Sort,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryResultKey#QueryResultKey(Query,List[Query],Sort,int,int).mjava","sourceNew":"  public QueryResultKey(Query query, List<Query> filters, Sort sort, int nc_flags, int minExactCount) {\n    this.query = query;\n    this.sort = sort;\n    this.filters = filters;\n    this.nc_flags = nc_flags;\n    this.minExactCount = minExactCount;\n\n    int h = query.hashCode();\n\n    if (filters != null) {\n      for (Query filt : filters)\n        // NOTE: simple summation used here so keys with the same filters but in\n        // different orders get the same hashCode\n        h += filt.hashCode();\n    }\n\n    sfields = (this.sort !=null) ? this.sort.getSort() : defaultSort;\n    long ramSfields = RamUsageEstimator.NUM_BYTES_ARRAY_HEADER;\n    for (SortField sf : sfields) {\n      h = h*29 + sf.hashCode();\n      ramSfields += BASE_SF_RAM_BYTES_USED + RamUsageEstimator.sizeOfObject(sf.getField());\n    }\n    h = h*31 + minExactCount;\n\n    hc = h;\n\n    ramBytesUsed =\n        BASE_RAM_BYTES_USED +\n        ramSfields +\n        RamUsageEstimator.sizeOfObject(query, RamUsageEstimator.QUERY_DEFAULT_RAM_BYTES_USED) +\n        RamUsageEstimator.sizeOfObject(filters, RamUsageEstimator.QUERY_DEFAULT_RAM_BYTES_USED);\n  }\n\n","sourceOld":"  public QueryResultKey(Query query, List<Query> filters, Sort sort, int nc_flags, int minExactHits) {\n    this.query = query;\n    this.sort = sort;\n    this.filters = filters;\n    this.nc_flags = nc_flags;\n    this.minExactHits = minExactHits;\n\n    int h = query.hashCode();\n\n    if (filters != null) {\n      for (Query filt : filters)\n        // NOTE: simple summation used here so keys with the same filters but in\n        // different orders get the same hashCode\n        h += filt.hashCode();\n    }\n\n    sfields = (this.sort !=null) ? this.sort.getSort() : defaultSort;\n    long ramSfields = RamUsageEstimator.NUM_BYTES_ARRAY_HEADER;\n    for (SortField sf : sfields) {\n      h = h*29 + sf.hashCode();\n      ramSfields += BASE_SF_RAM_BYTES_USED + RamUsageEstimator.sizeOfObject(sf.getField());\n    }\n    h = h*31 + minExactHits;\n\n    hc = h;\n\n    ramBytesUsed =\n        BASE_RAM_BYTES_USED +\n        ramSfields +\n        RamUsageEstimator.sizeOfObject(query, RamUsageEstimator.QUERY_DEFAULT_RAM_BYTES_USED) +\n        RamUsageEstimator.sizeOfObject(filters, RamUsageEstimator.QUERY_DEFAULT_RAM_BYTES_USED);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"72afa881b0b5c361ebd0b6d37927fe072151fbe0","date":1590107364,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryResultKey#QueryResultKey(Query,List[Query],Sort,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryResultKey#QueryResultKey(Query,List[Query],Sort,int,int).mjava","sourceNew":"  public QueryResultKey(Query query, List<Query> filters, Sort sort, int nc_flags, int minExactCount) {\n    this.query = query;\n    this.sort = sort;\n    this.filters = filters;\n    this.nc_flags = nc_flags;\n    this.minExactCount = minExactCount;\n\n    int h = query.hashCode();\n\n    if (filters != null) {\n      for (Query filt : filters)\n        // NOTE: simple summation used here so keys with the same filters but in\n        // different orders get the same hashCode\n        h += filt.hashCode();\n    }\n\n    sfields = (this.sort !=null) ? this.sort.getSort() : defaultSort;\n    long ramSfields = RamUsageEstimator.NUM_BYTES_ARRAY_HEADER;\n    for (SortField sf : sfields) {\n      h = h*29 + sf.hashCode();\n      ramSfields += BASE_SF_RAM_BYTES_USED + RamUsageEstimator.sizeOfObject(sf.getField());\n    }\n    h = h*31 + minExactCount;\n\n    hc = h;\n\n    ramBytesUsed =\n        BASE_RAM_BYTES_USED +\n        ramSfields +\n        RamUsageEstimator.sizeOfObject(query, RamUsageEstimator.QUERY_DEFAULT_RAM_BYTES_USED) +\n        RamUsageEstimator.sizeOfObject(filters, RamUsageEstimator.QUERY_DEFAULT_RAM_BYTES_USED);\n  }\n\n","sourceOld":"  public QueryResultKey(Query query, List<Query> filters, Sort sort, int nc_flags, int minExactHits) {\n    this.query = query;\n    this.sort = sort;\n    this.filters = filters;\n    this.nc_flags = nc_flags;\n    this.minExactHits = minExactHits;\n\n    int h = query.hashCode();\n\n    if (filters != null) {\n      for (Query filt : filters)\n        // NOTE: simple summation used here so keys with the same filters but in\n        // different orders get the same hashCode\n        h += filt.hashCode();\n    }\n\n    sfields = (this.sort !=null) ? this.sort.getSort() : defaultSort;\n    long ramSfields = RamUsageEstimator.NUM_BYTES_ARRAY_HEADER;\n    for (SortField sf : sfields) {\n      h = h*29 + sf.hashCode();\n      ramSfields += BASE_SF_RAM_BYTES_USED + RamUsageEstimator.sizeOfObject(sf.getField());\n    }\n    h = h*31 + minExactHits;\n\n    hc = h;\n\n    ramBytesUsed =\n        BASE_RAM_BYTES_USED +\n        ramSfields +\n        RamUsageEstimator.sizeOfObject(query, RamUsageEstimator.QUERY_DEFAULT_RAM_BYTES_USED) +\n        RamUsageEstimator.sizeOfObject(filters, RamUsageEstimator.QUERY_DEFAULT_RAM_BYTES_USED);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"640ded7811e1b7d29236a5e2934ec3cd266a8199":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"72afa881b0b5c361ebd0b6d37927fe072151fbe0":["640ded7811e1b7d29236a5e2934ec3cd266a8199","6b8ad6d99eb2424679c78255c369b8fac243e7dd"],"6b8ad6d99eb2424679c78255c369b8fac243e7dd":["640ded7811e1b7d29236a5e2934ec3cd266a8199"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["72afa881b0b5c361ebd0b6d37927fe072151fbe0"]},"commit2Childs":{"640ded7811e1b7d29236a5e2934ec3cd266a8199":["72afa881b0b5c361ebd0b6d37927fe072151fbe0","6b8ad6d99eb2424679c78255c369b8fac243e7dd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["640ded7811e1b7d29236a5e2934ec3cd266a8199"],"72afa881b0b5c361ebd0b6d37927fe072151fbe0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6b8ad6d99eb2424679c78255c369b8fac243e7dd":["72afa881b0b5c361ebd0b6d37927fe072151fbe0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}