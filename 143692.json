{"path":"lucene/src/test/org/apache/lucene/util/_TestUtil#alwaysCodec(Codec).mjava","commits":[{"id":"163fe85a71d778fd2b7747f65ca27b54829e2e57","date":1279898785,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/_TestUtil#alwaysCodec(Codec).mjava","pathOld":"/dev/null","sourceNew":"  public static CodecProvider alwaysCodec(final Codec c) {\n    return new CodecProvider() {\n      @Override\n      public Codec getWriter(SegmentWriteState state) {\n        return c;\n      }\n\n      @Override\n      public Codec lookup(String name) {\n        return c;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82d5bc05ad1c4710c0c32090d485203fa3ee8cc4","date":1279914031,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/_TestUtil#alwaysCodec(Codec).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/_TestUtil#alwaysCodec(Codec).mjava","sourceNew":"  public static CodecProvider alwaysCodec(final Codec c) {\n    return new CodecProvider() {\n      @Override\n      public Codec getWriter(SegmentWriteState state) {\n        return c;\n      }\n\n      @Override\n      public Codec lookup(String name) {\n        // can't do this until we fix PreFlexRW to not\n        //impersonate PreFlex:\n        //return CodecProvider.getDefault().lookup(name);\n        return c;\n      }\n    };\n  }\n\n","sourceOld":"  public static CodecProvider alwaysCodec(final Codec c) {\n    return new CodecProvider() {\n      @Override\n      public Codec getWriter(SegmentWriteState state) {\n        return c;\n      }\n\n      @Override\n      public Codec lookup(String name) {\n        return c;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24b91b08ba3110a0904b8ba9803276bf9a9b5f6d","date":1279972526,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/_TestUtil#alwaysCodec(Codec).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/_TestUtil#alwaysCodec(Codec).mjava","sourceNew":"  public static CodecProvider alwaysCodec(final Codec c) {\n    return new CodecProvider() {\n      @Override\n      public Codec getWriter(SegmentWriteState state) {\n        return c;\n      }\n\n      @Override\n      public Codec lookup(String name) {\n        // can't do this until we fix PreFlexRW to not\n        //impersonate PreFlex:\n        if (name.equals(c.name)) {\n          return c;\n        } else {\n          return CodecProvider.getDefault().lookup(name);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  public static CodecProvider alwaysCodec(final Codec c) {\n    return new CodecProvider() {\n      @Override\n      public Codec getWriter(SegmentWriteState state) {\n        return c;\n      }\n\n      @Override\n      public Codec lookup(String name) {\n        // can't do this until we fix PreFlexRW to not\n        //impersonate PreFlex:\n        //return CodecProvider.getDefault().lookup(name);\n        return c;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/_TestUtil#alwaysCodec(Codec).mjava","pathOld":"/dev/null","sourceNew":"  public static CodecProvider alwaysCodec(final Codec c) {\n    return new CodecProvider() {\n      @Override\n      public Codec getWriter(SegmentWriteState state) {\n        return c;\n      }\n\n      @Override\n      public Codec lookup(String name) {\n        // can't do this until we fix PreFlexRW to not\n        //impersonate PreFlex:\n        if (name.equals(c.name)) {\n          return c;\n        } else {\n          return CodecProvider.getDefault().lookup(name);\n        }\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/_TestUtil#alwaysCodec(Codec).mjava","pathOld":"/dev/null","sourceNew":"  public static CodecProvider alwaysCodec(final Codec c) {\n    return new CodecProvider() {\n      @Override\n      public Codec getWriter(SegmentWriteState state) {\n        return c;\n      }\n\n      @Override\n      public Codec lookup(String name) {\n        // can't do this until we fix PreFlexRW to not\n        //impersonate PreFlex:\n        if (name.equals(c.name)) {\n          return c;\n        } else {\n          return CodecProvider.getDefault().lookup(name);\n        }\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a493e6d0c3ad86bd55c0a1360d110142e948f2bd","date":1289406991,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/_TestUtil#alwaysCodec(Codec).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/_TestUtil#alwaysCodec(Codec).mjava","sourceNew":"  public static CodecProvider alwaysCodec(final Codec c) {\n    CodecProvider p = new CodecProvider() {\n      @Override\n      public Codec lookup(String name) {\n        // can't do this until we fix PreFlexRW to not\n        //impersonate PreFlex:\n        if (name.equals(c.name)) {\n          return c;\n        } else {\n          return CodecProvider.getDefault().lookup(name);\n        }\n      }\n    };\n    p.setDefaultFieldCodec(c.name);\n    return p;\n  }\n\n","sourceOld":"  public static CodecProvider alwaysCodec(final Codec c) {\n    return new CodecProvider() {\n      @Override\n      public Codec getWriter(SegmentWriteState state) {\n        return c;\n      }\n\n      @Override\n      public Codec lookup(String name) {\n        // can't do this until we fix PreFlexRW to not\n        //impersonate PreFlex:\n        if (name.equals(c.name)) {\n          return c;\n        } else {\n          return CodecProvider.getDefault().lookup(name);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/_TestUtil#alwaysCodec(Codec).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/_TestUtil#alwaysCodec(Codec).mjava","sourceNew":"  public static CodecProvider alwaysCodec(final Codec c) {\n    CodecProvider p = new CodecProvider() {\n      @Override\n      public Codec lookup(String name) {\n        // can't do this until we fix PreFlexRW to not\n        //impersonate PreFlex:\n        if (name.equals(c.name)) {\n          return c;\n        } else {\n          return CodecProvider.getDefault().lookup(name);\n        }\n      }\n    };\n    p.setDefaultFieldCodec(c.name);\n    return p;\n  }\n\n","sourceOld":"  public static CodecProvider alwaysCodec(final Codec c) {\n    return new CodecProvider() {\n      @Override\n      public Codec getWriter(SegmentWriteState state) {\n        return c;\n      }\n\n      @Override\n      public Codec lookup(String name) {\n        // can't do this until we fix PreFlexRW to not\n        //impersonate PreFlex:\n        if (name.equals(c.name)) {\n          return c;\n        } else {\n          return CodecProvider.getDefault().lookup(name);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/_TestUtil#alwaysCodec(Codec).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/_TestUtil#alwaysCodec(Codec).mjava","sourceNew":"  public static CodecProvider alwaysCodec(final Codec c) {\n    CodecProvider p = new CodecProvider() {\n      @Override\n      public Codec lookup(String name) {\n        // can't do this until we fix PreFlexRW to not\n        //impersonate PreFlex:\n        if (name.equals(c.name)) {\n          return c;\n        } else {\n          return CodecProvider.getDefault().lookup(name);\n        }\n      }\n    };\n    p.setDefaultFieldCodec(c.name);\n    return p;\n  }\n\n","sourceOld":"  public static CodecProvider alwaysCodec(final Codec c) {\n    return new CodecProvider() {\n      @Override\n      public Codec getWriter(SegmentWriteState state) {\n        return c;\n      }\n\n      @Override\n      public Codec lookup(String name) {\n        // can't do this until we fix PreFlexRW to not\n        //impersonate PreFlex:\n        if (name.equals(c.name)) {\n          return c;\n        } else {\n          return CodecProvider.getDefault().lookup(name);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#alwaysCodec(Codec).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/_TestUtil#alwaysCodec(Codec).mjava","sourceNew":"  public static CodecProvider alwaysCodec(final Codec c) {\n    CodecProvider p = new CodecProvider() {\n      @Override\n      public Codec lookup(String name) {\n        // can't do this until we fix PreFlexRW to not\n        //impersonate PreFlex:\n        if (name.equals(c.name)) {\n          return c;\n        } else {\n          return CodecProvider.getDefault().lookup(name);\n        }\n      }\n    };\n    p.setDefaultFieldCodec(c.name);\n    return p;\n  }\n\n","sourceOld":"  public static CodecProvider alwaysCodec(final Codec c) {\n    CodecProvider p = new CodecProvider() {\n      @Override\n      public Codec lookup(String name) {\n        // can't do this until we fix PreFlexRW to not\n        //impersonate PreFlex:\n        if (name.equals(c.name)) {\n          return c;\n        } else {\n          return CodecProvider.getDefault().lookup(name);\n        }\n      }\n    };\n    p.setDefaultFieldCodec(c.name);\n    return p;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#alwaysCodec(Codec).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/_TestUtil#alwaysCodec(Codec).mjava","sourceNew":"  public static CodecProvider alwaysCodec(final Codec c) {\n    CodecProvider p = new CodecProvider() {\n      @Override\n      public Codec lookup(String name) {\n        // can't do this until we fix PreFlexRW to not\n        //impersonate PreFlex:\n        if (name.equals(c.name)) {\n          return c;\n        } else {\n          return CodecProvider.getDefault().lookup(name);\n        }\n      }\n    };\n    p.setDefaultFieldCodec(c.name);\n    return p;\n  }\n\n","sourceOld":"  public static CodecProvider alwaysCodec(final Codec c) {\n    CodecProvider p = new CodecProvider() {\n      @Override\n      public Codec lookup(String name) {\n        // can't do this until we fix PreFlexRW to not\n        //impersonate PreFlex:\n        if (name.equals(c.name)) {\n          return c;\n        } else {\n          return CodecProvider.getDefault().lookup(name);\n        }\n      }\n    };\n    p.setDefaultFieldCodec(c.name);\n    return p;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#alwaysCodec(Codec).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/_TestUtil#alwaysCodec(Codec).mjava","sourceNew":"  public static CodecProvider alwaysCodec(final Codec c) {\n    CodecProvider p = new CodecProvider() {\n      @Override\n      public Codec lookup(String name) {\n        // can't do this until we fix PreFlexRW to not\n        //impersonate PreFlex:\n        if (name.equals(c.name)) {\n          return c;\n        } else {\n          return CodecProvider.getDefault().lookup(name);\n        }\n      }\n    };\n    p.setDefaultFieldCodec(c.name);\n    return p;\n  }\n\n","sourceOld":"  public static CodecProvider alwaysCodec(final Codec c) {\n    CodecProvider p = new CodecProvider() {\n      @Override\n      public Codec lookup(String name) {\n        // can't do this until we fix PreFlexRW to not\n        //impersonate PreFlex:\n        if (name.equals(c.name)) {\n          return c;\n        } else {\n          return CodecProvider.getDefault().lookup(name);\n        }\n      }\n    };\n    p.setDefaultFieldCodec(c.name);\n    return p;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3242a09f703274d3b9283f2064a1a33064b53a1b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4b103252dee6afa1b6d7a622c773d178788eb85a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","24b91b08ba3110a0904b8ba9803276bf9a9b5f6d"],"163fe85a71d778fd2b7747f65ca27b54829e2e57":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a493e6d0c3ad86bd55c0a1360d110142e948f2bd":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"85a883878c0af761245ab048babc63d099f835f3":["4b103252dee6afa1b6d7a622c773d178788eb85a","a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"82d5bc05ad1c4710c0c32090d485203fa3ee8cc4":["163fe85a71d778fd2b7747f65ca27b54829e2e57"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["85a883878c0af761245ab048babc63d099f835f3","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"24b91b08ba3110a0904b8ba9803276bf9a9b5f6d":["82d5bc05ad1c4710c0c32090d485203fa3ee8cc4"]},"commit2Childs":{"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["3242a09f703274d3b9283f2064a1a33064b53a1b","a493e6d0c3ad86bd55c0a1360d110142e948f2bd","85a883878c0af761245ab048babc63d099f835f3"],"163fe85a71d778fd2b7747f65ca27b54829e2e57":["82d5bc05ad1c4710c0c32090d485203fa3ee8cc4"],"a493e6d0c3ad86bd55c0a1360d110142e948f2bd":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"85a883878c0af761245ab048babc63d099f835f3":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"82d5bc05ad1c4710c0c32090d485203fa3ee8cc4":["24b91b08ba3110a0904b8ba9803276bf9a9b5f6d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3242a09f703274d3b9283f2064a1a33064b53a1b","4b103252dee6afa1b6d7a622c773d178788eb85a","163fe85a71d778fd2b7747f65ca27b54829e2e57"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"24b91b08ba3110a0904b8ba9803276bf9a9b5f6d":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}