{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase.SeedPostings#SeedPostings(long,int,int,Bits,IndexOptions).mjava","commits":[{"id":"2fe4b12f0dcf02b1690143f2ad02d8f89625eb36","date":1349174553,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase.SeedPostings#SeedPostings(long,int,int,Bits,IndexOptions).mjava","pathOld":"/dev/null","sourceNew":"    public SeedPostings(long seed, int minDocFreq, int maxDocFreq, Bits liveDocs, IndexOptions options) {\n      random = new Random(seed);\n      docRandom = new Random(random.nextLong());\n      docFreq = _TestUtil.nextInt(random, minDocFreq, maxDocFreq);\n      this.liveDocs = liveDocs;\n\n      // TODO: more realistic to inversely tie this to numDocs:\n      maxDocSpacing = _TestUtil.nextInt(random, 1, 100);\n\n      if (random.nextInt(10) == 7) {\n        // 10% of the time create big payloads:\n        payloadSize = 1 + random.nextInt(3);\n      } else {\n        payloadSize = 1 + random.nextInt(1);\n      }\n\n      fixedPayloads = random.nextBoolean();\n      byte[] payloadBytes = new byte[payloadSize];\n      payload = new BytesRef(payloadBytes);\n      this.options = options;\n      doPositions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS.compareTo(options) <= 0;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","date":1379624229,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase.SeedPostings#SeedPostings(long,int,int,Bits,IndexOptions,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase.SeedPostings#SeedPostings(long,int,int,Bits,IndexOptions).mjava","sourceNew":"    public SeedPostings(long seed, int minDocFreq, int maxDocFreq, Bits liveDocs, IndexOptions options, boolean allowPayloads) {\n      random = new Random(seed);\n      docRandom = new Random(random.nextLong());\n      docFreq = _TestUtil.nextInt(random, minDocFreq, maxDocFreq);\n      this.liveDocs = liveDocs;\n      this.allowPayloads = allowPayloads;\n\n      // TODO: more realistic to inversely tie this to numDocs:\n      maxDocSpacing = _TestUtil.nextInt(random, 1, 100);\n\n      if (random.nextInt(10) == 7) {\n        // 10% of the time create big payloads:\n        payloadSize = 1 + random.nextInt(3);\n      } else {\n        payloadSize = 1 + random.nextInt(1);\n      }\n\n      fixedPayloads = random.nextBoolean();\n      byte[] payloadBytes = new byte[payloadSize];\n      payload = new BytesRef(payloadBytes);\n      this.options = options;\n      doPositions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS.compareTo(options) <= 0;\n    }\n\n","sourceOld":"    public SeedPostings(long seed, int minDocFreq, int maxDocFreq, Bits liveDocs, IndexOptions options) {\n      random = new Random(seed);\n      docRandom = new Random(random.nextLong());\n      docFreq = _TestUtil.nextInt(random, minDocFreq, maxDocFreq);\n      this.liveDocs = liveDocs;\n\n      // TODO: more realistic to inversely tie this to numDocs:\n      maxDocSpacing = _TestUtil.nextInt(random, 1, 100);\n\n      if (random.nextInt(10) == 7) {\n        // 10% of the time create big payloads:\n        payloadSize = 1 + random.nextInt(3);\n      } else {\n        payloadSize = 1 + random.nextInt(1);\n      }\n\n      fixedPayloads = random.nextBoolean();\n      byte[] payloadBytes = new byte[payloadSize];\n      payload = new BytesRef(payloadBytes);\n      this.options = options;\n      doPositions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS.compareTo(options) <= 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["2fe4b12f0dcf02b1690143f2ad02d8f89625eb36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"2fe4b12f0dcf02b1690143f2ad02d8f89625eb36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2fe4b12f0dcf02b1690143f2ad02d8f89625eb36"],"2fe4b12f0dcf02b1690143f2ad02d8f89625eb36":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}