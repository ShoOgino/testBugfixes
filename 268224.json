{"path":"lucene/contrib/queries/src/java/org/apache/lucene/search/TermsFilter#getDocIdSet(AtomicReaderContext).mjava","commits":[{"id":"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","date":1294747166,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/TermsFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/TermsFilter#getDocIdSet(ReaderContext).mjava","sourceNew":"/* (non-Javadoc)\n   * @see org.apache.lucene.search.Filter#getDocIdSet(org.apache.lucene.index.IndexReader)\n\t */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n    IndexReader reader = context.reader;\n    OpenBitSet result=new OpenBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n    BytesRef br = new BytesRef();\n    Bits delDocs = reader.getDeletedDocs();\n    if (fields != null) {\n      String lastField = null;\n      Terms termsC = null;\n      TermsEnum termsEnum = null;\n      DocsEnum docs = null;\n      for (Iterator<Term> iter = terms.iterator(); iter.hasNext();) {\n        Term term = iter.next();\n        if (term.field() != lastField) {\n          termsC = fields.terms(term.field());\n          termsEnum = termsC.iterator();\n          lastField = term.field();\n        }\n\n        if (terms != null) {\n          br.copy(term.bytes());\n          if (termsEnum.seek(br) == TermsEnum.SeekStatus.FOUND) {\n            docs = termsEnum.docs(delDocs, docs);\n            while(docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n              result.set(docs.docID());\n            }\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"/* (non-Javadoc)\n   * @see org.apache.lucene.search.Filter#getDocIdSet(org.apache.lucene.index.IndexReader)\n\t */\n  @Override\n  public DocIdSet getDocIdSet(ReaderContext context) throws IOException {\n    IndexReader reader = context.reader;\n    OpenBitSet result=new OpenBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n    BytesRef br = new BytesRef();\n    Bits delDocs = reader.getDeletedDocs();\n    if (fields != null) {\n      String lastField = null;\n      Terms termsC = null;\n      TermsEnum termsEnum = null;\n      DocsEnum docs = null;\n      for (Iterator<Term> iter = terms.iterator(); iter.hasNext();) {\n        Term term = iter.next();\n        if (term.field() != lastField) {\n          termsC = fields.terms(term.field());\n          termsEnum = termsC.iterator();\n          lastField = term.field();\n        }\n\n        if (terms != null) {\n          br.copy(term.bytes());\n          if (termsEnum.seek(br) == TermsEnum.SeekStatus.FOUND) {\n            docs = termsEnum.docs(delDocs, docs);\n            while(docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n              result.set(docs.docID());\n            }\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/TermsFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"/* (non-Javadoc)\n   * @see org.apache.lucene.search.Filter#getDocIdSet(org.apache.lucene.index.IndexReader)\n\t */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n    IndexReader reader = context.reader;\n    OpenBitSet result=new OpenBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n    BytesRef br = new BytesRef();\n    Bits delDocs = reader.getDeletedDocs();\n    if (fields != null) {\n      String lastField = null;\n      Terms termsC = null;\n      TermsEnum termsEnum = null;\n      DocsEnum docs = null;\n      for (Iterator<Term> iter = terms.iterator(); iter.hasNext();) {\n        Term term = iter.next();\n        if (term.field() != lastField) {\n          termsC = fields.terms(term.field());\n          termsEnum = termsC.iterator();\n          lastField = term.field();\n        }\n\n        if (terms != null) {\n          br.copy(term.bytes());\n          if (termsEnum.seek(br) == TermsEnum.SeekStatus.FOUND) {\n            docs = termsEnum.docs(delDocs, docs);\n            while(docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n              result.set(docs.docID());\n            }\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/TermsFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"/* (non-Javadoc)\n   * @see org.apache.lucene.search.Filter#getDocIdSet(org.apache.lucene.index.IndexReader)\n\t */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n    IndexReader reader = context.reader;\n    OpenBitSet result=new OpenBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n    BytesRef br = new BytesRef();\n    Bits delDocs = reader.getDeletedDocs();\n    if (fields != null) {\n      String lastField = null;\n      Terms termsC = null;\n      TermsEnum termsEnum = null;\n      DocsEnum docs = null;\n      for (Iterator<Term> iter = terms.iterator(); iter.hasNext();) {\n        Term term = iter.next();\n        if (term.field() != lastField) {\n          termsC = fields.terms(term.field());\n          termsEnum = termsC.iterator();\n          lastField = term.field();\n        }\n\n        if (terms != null) {\n          br.copy(term.bytes());\n          if (termsEnum.seek(br) == TermsEnum.SeekStatus.FOUND) {\n            docs = termsEnum.docs(delDocs, docs);\n            while(docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n              result.set(docs.docID());\n            }\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","date":1308670974,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/TermsFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/TermsFilter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"/* (non-Javadoc)\n   * @see org.apache.lucene.search.Filter#getDocIdSet(org.apache.lucene.index.IndexReader)\n\t */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n    IndexReader reader = context.reader;\n    OpenBitSet result=new OpenBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n    BytesRef br = new BytesRef();\n    Bits delDocs = reader.getDeletedDocs();\n    if (fields != null) {\n      String lastField = null;\n      Terms termsC = null;\n      TermsEnum termsEnum = null;\n      DocsEnum docs = null;\n      for (Iterator<Term> iter = terms.iterator(); iter.hasNext();) {\n        Term term = iter.next();\n        if (!term.field().equals(lastField)) {\n          termsC = fields.terms(term.field());\n          termsEnum = termsC.iterator();\n          lastField = term.field();\n        }\n\n        if (terms != null) {\n          br.copy(term.bytes());\n          if (termsEnum.seek(br) == TermsEnum.SeekStatus.FOUND) {\n            docs = termsEnum.docs(delDocs, docs);\n            while(docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n              result.set(docs.docID());\n            }\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"/* (non-Javadoc)\n   * @see org.apache.lucene.search.Filter#getDocIdSet(org.apache.lucene.index.IndexReader)\n\t */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n    IndexReader reader = context.reader;\n    OpenBitSet result=new OpenBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n    BytesRef br = new BytesRef();\n    Bits delDocs = reader.getDeletedDocs();\n    if (fields != null) {\n      String lastField = null;\n      Terms termsC = null;\n      TermsEnum termsEnum = null;\n      DocsEnum docs = null;\n      for (Iterator<Term> iter = terms.iterator(); iter.hasNext();) {\n        Term term = iter.next();\n        if (term.field() != lastField) {\n          termsC = fields.terms(term.field());\n          termsEnum = termsC.iterator();\n          lastField = term.field();\n        }\n\n        if (terms != null) {\n          br.copy(term.bytes());\n          if (termsEnum.seek(br) == TermsEnum.SeekStatus.FOUND) {\n            docs = termsEnum.docs(delDocs, docs);\n            while(docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n              result.set(docs.docID());\n            }\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd9cc9d77712aba3662f24632df7539ab75e3667","date":1309095238,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/TermsFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/TermsFilter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"/* (non-Javadoc)\n   * @see org.apache.lucene.search.Filter#getDocIdSet(org.apache.lucene.index.IndexReader)\n\t */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n    IndexReader reader = context.reader;\n    OpenBitSet result=new OpenBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n    BytesRef br = new BytesRef();\n    Bits delDocs = reader.getDeletedDocs();\n    if (fields != null) {\n      String lastField = null;\n      Terms termsC = null;\n      TermsEnum termsEnum = null;\n      DocsEnum docs = null;\n      for (Iterator<Term> iter = terms.iterator(); iter.hasNext();) {\n        Term term = iter.next();\n        if (!term.field().equals(lastField)) {\n          termsC = fields.terms(term.field());\n          termsEnum = termsC.iterator();\n          lastField = term.field();\n        }\n\n        if (terms != null) {\n          br.copy(term.bytes());\n          if (termsEnum.seekCeil(br) == TermsEnum.SeekStatus.FOUND) {\n            docs = termsEnum.docs(delDocs, docs);\n            while(docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n              result.set(docs.docID());\n            }\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"/* (non-Javadoc)\n   * @see org.apache.lucene.search.Filter#getDocIdSet(org.apache.lucene.index.IndexReader)\n\t */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n    IndexReader reader = context.reader;\n    OpenBitSet result=new OpenBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n    BytesRef br = new BytesRef();\n    Bits delDocs = reader.getDeletedDocs();\n    if (fields != null) {\n      String lastField = null;\n      Terms termsC = null;\n      TermsEnum termsEnum = null;\n      DocsEnum docs = null;\n      for (Iterator<Term> iter = terms.iterator(); iter.hasNext();) {\n        Term term = iter.next();\n        if (!term.field().equals(lastField)) {\n          termsC = fields.terms(term.field());\n          termsEnum = termsC.iterator();\n          lastField = term.field();\n        }\n\n        if (terms != null) {\n          br.copy(term.bytes());\n          if (termsEnum.seek(br) == TermsEnum.SeekStatus.FOUND) {\n            docs = termsEnum.docs(delDocs, docs);\n            while(docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n              result.set(docs.docID());\n            }\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/TermsFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/TermsFilter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"/* (non-Javadoc)\n   * @see org.apache.lucene.search.Filter#getDocIdSet(org.apache.lucene.index.IndexReader)\n\t */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n    IndexReader reader = context.reader;\n    OpenBitSet result=new OpenBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n    BytesRef br = new BytesRef();\n    Bits delDocs = reader.getDeletedDocs();\n    if (fields != null) {\n      String lastField = null;\n      Terms termsC = null;\n      TermsEnum termsEnum = null;\n      DocsEnum docs = null;\n      for (Iterator<Term> iter = terms.iterator(); iter.hasNext();) {\n        Term term = iter.next();\n        if (!term.field().equals(lastField)) {\n          termsC = fields.terms(term.field());\n          termsEnum = termsC.iterator();\n          lastField = term.field();\n        }\n\n        if (terms != null) {\n          br.copy(term.bytes());\n          if (termsEnum.seekCeil(br) == TermsEnum.SeekStatus.FOUND) {\n            docs = termsEnum.docs(delDocs, docs);\n            while(docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n              result.set(docs.docID());\n            }\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"/* (non-Javadoc)\n   * @see org.apache.lucene.search.Filter#getDocIdSet(org.apache.lucene.index.IndexReader)\n\t */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n    IndexReader reader = context.reader;\n    OpenBitSet result=new OpenBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n    BytesRef br = new BytesRef();\n    Bits delDocs = reader.getDeletedDocs();\n    if (fields != null) {\n      String lastField = null;\n      Terms termsC = null;\n      TermsEnum termsEnum = null;\n      DocsEnum docs = null;\n      for (Iterator<Term> iter = terms.iterator(); iter.hasNext();) {\n        Term term = iter.next();\n        if (term.field() != lastField) {\n          termsC = fields.terms(term.field());\n          termsEnum = termsC.iterator();\n          lastField = term.field();\n        }\n\n        if (terms != null) {\n          br.copy(term.bytes());\n          if (termsEnum.seek(br) == TermsEnum.SeekStatus.FOUND) {\n            docs = termsEnum.docs(delDocs, docs);\n            while(docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n              result.set(docs.docID());\n            }\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/TermsFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/TermsFilter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"/* (non-Javadoc)\n   * @see org.apache.lucene.search.Filter#getDocIdSet(org.apache.lucene.index.IndexReader)\n\t */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n    IndexReader reader = context.reader;\n    OpenBitSet result=new OpenBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n    BytesRef br = new BytesRef();\n    Bits liveDocs = reader.getLiveDocs();\n    if (fields != null) {\n      String lastField = null;\n      Terms termsC = null;\n      TermsEnum termsEnum = null;\n      DocsEnum docs = null;\n      for (Iterator<Term> iter = terms.iterator(); iter.hasNext();) {\n        Term term = iter.next();\n        if (!term.field().equals(lastField)) {\n          termsC = fields.terms(term.field());\n          termsEnum = termsC.iterator();\n          lastField = term.field();\n        }\n\n        if (terms != null) {\n          br.copy(term.bytes());\n          if (termsEnum.seekCeil(br) == TermsEnum.SeekStatus.FOUND) {\n            docs = termsEnum.docs(liveDocs, docs);\n            while(docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n              result.set(docs.docID());\n            }\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"/* (non-Javadoc)\n   * @see org.apache.lucene.search.Filter#getDocIdSet(org.apache.lucene.index.IndexReader)\n\t */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n    IndexReader reader = context.reader;\n    OpenBitSet result=new OpenBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n    BytesRef br = new BytesRef();\n    Bits delDocs = reader.getDeletedDocs();\n    if (fields != null) {\n      String lastField = null;\n      Terms termsC = null;\n      TermsEnum termsEnum = null;\n      DocsEnum docs = null;\n      for (Iterator<Term> iter = terms.iterator(); iter.hasNext();) {\n        Term term = iter.next();\n        if (!term.field().equals(lastField)) {\n          termsC = fields.terms(term.field());\n          termsEnum = termsC.iterator();\n          lastField = term.field();\n        }\n\n        if (terms != null) {\n          br.copy(term.bytes());\n          if (termsEnum.seekCeil(br) == TermsEnum.SeekStatus.FOUND) {\n            docs = termsEnum.docs(delDocs, docs);\n            while(docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n              result.set(docs.docID());\n            }\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/TermsFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/TermsFilter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"/* (non-Javadoc)\n   * @see org.apache.lucene.search.Filter#getDocIdSet(org.apache.lucene.index.IndexReader)\n\t */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n    IndexReader reader = context.reader;\n    OpenBitSet result=new OpenBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n    BytesRef br = new BytesRef();\n    Bits liveDocs = reader.getLiveDocs();\n    if (fields != null) {\n      String lastField = null;\n      Terms termsC = null;\n      TermsEnum termsEnum = null;\n      DocsEnum docs = null;\n      for (Iterator<Term> iter = terms.iterator(); iter.hasNext();) {\n        Term term = iter.next();\n        if (!term.field().equals(lastField)) {\n          termsC = fields.terms(term.field());\n          termsEnum = termsC.iterator();\n          lastField = term.field();\n        }\n\n        if (terms != null) {\n          br.copy(term.bytes());\n          if (termsEnum.seekCeil(br) == TermsEnum.SeekStatus.FOUND) {\n            docs = termsEnum.docs(liveDocs, docs);\n            while(docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n              result.set(docs.docID());\n            }\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"/* (non-Javadoc)\n   * @see org.apache.lucene.search.Filter#getDocIdSet(org.apache.lucene.index.IndexReader)\n\t */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n    IndexReader reader = context.reader;\n    OpenBitSet result=new OpenBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n    BytesRef br = new BytesRef();\n    Bits delDocs = reader.getDeletedDocs();\n    if (fields != null) {\n      String lastField = null;\n      Terms termsC = null;\n      TermsEnum termsEnum = null;\n      DocsEnum docs = null;\n      for (Iterator<Term> iter = terms.iterator(); iter.hasNext();) {\n        Term term = iter.next();\n        if (!term.field().equals(lastField)) {\n          termsC = fields.terms(term.field());\n          termsEnum = termsC.iterator();\n          lastField = term.field();\n        }\n\n        if (terms != null) {\n          br.copy(term.bytes());\n          if (termsEnum.seekCeil(br) == TermsEnum.SeekStatus.FOUND) {\n            docs = termsEnum.docs(delDocs, docs);\n            while(docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n              result.set(docs.docID());\n            }\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/TermsFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/TermsFilter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"/* (non-Javadoc)\n   * @see org.apache.lucene.search.Filter#getDocIdSet(org.apache.lucene.index.IndexReader)\n\t */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n    IndexReader reader = context.reader;\n    OpenBitSet result=new OpenBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n    BytesRef br = new BytesRef();\n    Bits liveDocs = reader.getLiveDocs();\n    if (fields != null) {\n      String lastField = null;\n      Terms termsC = null;\n      TermsEnum termsEnum = null;\n      DocsEnum docs = null;\n      for (Iterator<Term> iter = terms.iterator(); iter.hasNext();) {\n        Term term = iter.next();\n        if (!term.field().equals(lastField)) {\n          termsC = fields.terms(term.field());\n          termsEnum = termsC.iterator();\n          lastField = term.field();\n        }\n\n        if (terms != null) {\n          br.copy(term.bytes());\n          if (termsEnum.seekCeil(br) == TermsEnum.SeekStatus.FOUND) {\n            docs = termsEnum.docs(liveDocs, docs);\n            while(docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n              result.set(docs.docID());\n            }\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"/* (non-Javadoc)\n   * @see org.apache.lucene.search.Filter#getDocIdSet(org.apache.lucene.index.IndexReader)\n\t */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n    IndexReader reader = context.reader;\n    OpenBitSet result=new OpenBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n    BytesRef br = new BytesRef();\n    Bits delDocs = reader.getDeletedDocs();\n    if (fields != null) {\n      String lastField = null;\n      Terms termsC = null;\n      TermsEnum termsEnum = null;\n      DocsEnum docs = null;\n      for (Iterator<Term> iter = terms.iterator(); iter.hasNext();) {\n        Term term = iter.next();\n        if (term.field() != lastField) {\n          termsC = fields.terms(term.field());\n          termsEnum = termsC.iterator();\n          lastField = term.field();\n        }\n\n        if (terms != null) {\n          br.copy(term.bytes());\n          if (termsEnum.seek(br) == TermsEnum.SeekStatus.FOUND) {\n            docs = termsEnum.docs(delDocs, docs);\n            while(docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n              result.set(docs.docID());\n            }\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f","date":1310403131,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/TermsFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/TermsFilter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"/* (non-Javadoc)\n   * @see org.apache.lucene.search.Filter#getDocIdSet(org.apache.lucene.index.IndexReader)\n\t */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n    IndexReader reader = context.reader;\n    FixedBitSet result=new FixedBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n    BytesRef br = new BytesRef();\n    Bits liveDocs = reader.getLiveDocs();\n    if (fields != null) {\n      String lastField = null;\n      Terms termsC = null;\n      TermsEnum termsEnum = null;\n      DocsEnum docs = null;\n      for (Iterator<Term> iter = terms.iterator(); iter.hasNext();) {\n        Term term = iter.next();\n        if (!term.field().equals(lastField)) {\n          termsC = fields.terms(term.field());\n          termsEnum = termsC.iterator();\n          lastField = term.field();\n        }\n\n        if (terms != null) {\n          br.copy(term.bytes());\n          if (termsEnum.seekCeil(br) == TermsEnum.SeekStatus.FOUND) {\n            docs = termsEnum.docs(liveDocs, docs);\n            while(docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n              result.set(docs.docID());\n            }\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"/* (non-Javadoc)\n   * @see org.apache.lucene.search.Filter#getDocIdSet(org.apache.lucene.index.IndexReader)\n\t */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n    IndexReader reader = context.reader;\n    OpenBitSet result=new OpenBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n    BytesRef br = new BytesRef();\n    Bits liveDocs = reader.getLiveDocs();\n    if (fields != null) {\n      String lastField = null;\n      Terms termsC = null;\n      TermsEnum termsEnum = null;\n      DocsEnum docs = null;\n      for (Iterator<Term> iter = terms.iterator(); iter.hasNext();) {\n        Term term = iter.next();\n        if (!term.field().equals(lastField)) {\n          termsC = fields.terms(term.field());\n          termsEnum = termsC.iterator();\n          lastField = term.field();\n        }\n\n        if (terms != null) {\n          br.copy(term.bytes());\n          if (termsEnum.seekCeil(br) == TermsEnum.SeekStatus.FOUND) {\n            docs = termsEnum.docs(liveDocs, docs);\n            while(docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n              result.set(docs.docID());\n            }\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e141595402370bee958745de8b1c9de1fa182581","date":1310547892,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/TermsFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/TermsFilter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n    IndexReader reader = context.reader;\n    FixedBitSet result = new FixedBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n\n    if (fields == null) {\n      return result;\n    }\n\n    BytesRef br = new BytesRef();\n    Bits liveDocs = reader.getLiveDocs();\n    String lastField = null;\n    Terms termsC = null;\n    TermsEnum termsEnum = null;\n    DocsEnum docs = null;\n    for (Term term : terms) {\n      if (!term.field().equals(lastField)) {\n        termsC = fields.terms(term.field());\n        termsEnum = termsC.iterator();\n        lastField = term.field();\n      }\n\n      if (terms != null) { // TODO this check doesn't make sense, decide which variable its supposed to be for\n        br.copy(term.bytes());\n        if (termsEnum.seekCeil(br) == TermsEnum.SeekStatus.FOUND) {\n          docs = termsEnum.docs(liveDocs, docs);\n          while (docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n            result.set(docs.docID());\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"/* (non-Javadoc)\n   * @see org.apache.lucene.search.Filter#getDocIdSet(org.apache.lucene.index.IndexReader)\n\t */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n    IndexReader reader = context.reader;\n    FixedBitSet result=new FixedBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n    BytesRef br = new BytesRef();\n    Bits liveDocs = reader.getLiveDocs();\n    if (fields != null) {\n      String lastField = null;\n      Terms termsC = null;\n      TermsEnum termsEnum = null;\n      DocsEnum docs = null;\n      for (Iterator<Term> iter = terms.iterator(); iter.hasNext();) {\n        Term term = iter.next();\n        if (!term.field().equals(lastField)) {\n          termsC = fields.terms(term.field());\n          termsEnum = termsC.iterator();\n          lastField = term.field();\n        }\n\n        if (terms != null) {\n          br.copy(term.bytes());\n          if (termsEnum.seekCeil(br) == TermsEnum.SeekStatus.FOUND) {\n            docs = termsEnum.docs(liveDocs, docs);\n            while(docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n              result.set(docs.docID());\n            }\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":["4107dd39b127d892359c5c1d67d0f14d92f1a9bf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f9f2355d68aab1348539f7a1603279405e566a4","date":1313634992,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/TermsFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/TermsFilter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n    IndexReader reader = context.reader;\n    FixedBitSet result = new FixedBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n\n    if (fields == null) {\n      return result;\n    }\n\n    BytesRef br = new BytesRef();\n    Bits liveDocs = reader.getLiveDocs();\n    String lastField = null;\n    Terms termsC = null;\n    TermsEnum termsEnum = null;\n    DocsEnum docs = null;\n    for (Term term : terms) {\n      if (!term.field().equals(lastField)) {\n        termsC = fields.terms(term.field());\n        termsEnum = termsC.iterator();\n        lastField = term.field();\n      }\n\n      if (terms != null) { // TODO this check doesn't make sense, decide which variable its supposed to be for\n        br.copy(term.bytes());\n        if (termsEnum.seekCeil(br) == TermsEnum.SeekStatus.FOUND) {\n          docs = termsEnum.docs(liveDocs, docs);\n          while (docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n            result.set(docs.docID());\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n    IndexReader reader = context.reader;\n    FixedBitSet result = new FixedBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n\n    if (fields == null) {\n      return result;\n    }\n\n    BytesRef br = new BytesRef();\n    Bits liveDocs = reader.getLiveDocs();\n    String lastField = null;\n    Terms termsC = null;\n    TermsEnum termsEnum = null;\n    DocsEnum docs = null;\n    for (Term term : terms) {\n      if (!term.field().equals(lastField)) {\n        termsC = fields.terms(term.field());\n        termsEnum = termsC.iterator();\n        lastField = term.field();\n      }\n\n      if (terms != null) { // TODO this check doesn't make sense, decide which variable its supposed to be for\n        br.copy(term.bytes());\n        if (termsEnum.seekCeil(br) == TermsEnum.SeekStatus.FOUND) {\n          docs = termsEnum.docs(liveDocs, docs);\n          while (docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n            result.set(docs.docID());\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["fd9cc9d77712aba3662f24632df7539ab75e3667"],"2553b00f699380c64959ccb27991289aae87be2e":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","fd9cc9d77712aba3662f24632df7539ab75e3667"],"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"e141595402370bee958745de8b1c9de1fa182581":["c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["2553b00f699380c64959ccb27991289aae87be2e","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"1f9f2355d68aab1348539f7a1603279405e566a4":["e141595402370bee958745de8b1c9de1fa182581"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fd9cc9d77712aba3662f24632df7539ab75e3667":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1f9f2355d68aab1348539f7a1603279405e566a4"]},"commit2Childs":{"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["fd9cc9d77712aba3662f24632df7539ab75e3667"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"2553b00f699380c64959ccb27991289aae87be2e":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f":["e141595402370bee958745de8b1c9de1fa182581"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"e141595402370bee958745de8b1c9de1fa182581":["1f9f2355d68aab1348539f7a1603279405e566a4"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"1f9f2355d68aab1348539f7a1603279405e566a4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"fd9cc9d77712aba3662f24632df7539ab75e3667":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","2553b00f699380c64959ccb27991289aae87be2e"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}