{"path":"src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","commits":[{"id":"8522ae207a56c6db28ca06fe6cc33e70911c3600","date":1173935743,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","pathOld":"/dev/null","sourceNew":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\r\n    // payload bit in the FieldInfo\r\n    public void testPayloadFieldBit() throws Exception {\r\n        Directory ram = new RAMDirectory();\r\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\r\n        IndexWriter writer = new IndexWriter(ram, analyzer, true);\r\n        Document d = new Document();\r\n        // this field won't have any payloads\r\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.TOKENIZED));\r\n        // this field will have payloads in all docs, however not for all term positions,\r\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\r\n        // even if only some term positions have payloads\r\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.TOKENIZED));\r\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.TOKENIZED));\r\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \r\n        // enabled in only some documents\r\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.TOKENIZED));\r\n        // only add payload data for field f2\r\n        analyzer.setPayloadData(\"f2\", 1, \"somedata\".getBytes(), 0, 1);\r\n        writer.addDocument(d);\r\n        // flush\r\n        writer.close();        \r\n        \r\n        // only one segment in the index, so we can cast to SegmentReader\r\n        SegmentReader reader = (SegmentReader) IndexReader.open(ram);\r\n        FieldInfos fi = reader.fieldInfos();\r\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\r\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\r\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\r\n        reader.close();\r\n        \r\n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\r\n        // enabled payloads for that field\r\n        writer = new IndexWriter(ram, analyzer, true);\r\n        d = new Document();\r\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.TOKENIZED));\r\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.TOKENIZED));\r\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.TOKENIZED));\r\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.TOKENIZED));\r\n        // add payload data for field f2 and f3\r\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\r\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\r\n        writer.addDocument(d);\r\n        // force merge\r\n        writer.optimize();\r\n        // flush\r\n        writer.close();\r\n\r\n        // only one segment in the index, so we can cast to SegmentReader\r\n        reader = (SegmentReader) IndexReader.open(ram);\r\n        fi = reader.fieldInfos();\r\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\r\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\r\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\r\n        reader.close();        \r\n    }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","pathOld":"src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","sourceNew":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\r\n    // payload bit in the FieldInfo\r\n    public void testPayloadFieldBit() throws Exception {\r\n        Directory ram = new RAMDirectory();\r\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\r\n        IndexWriter writer = new IndexWriter(ram, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\r\n        Document d = new Document();\r\n        // this field won't have any payloads\r\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.TOKENIZED));\r\n        // this field will have payloads in all docs, however not for all term positions,\r\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\r\n        // even if only some term positions have payloads\r\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.TOKENIZED));\r\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.TOKENIZED));\r\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \r\n        // enabled in only some documents\r\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.TOKENIZED));\r\n        // only add payload data for field f2\r\n        analyzer.setPayloadData(\"f2\", 1, \"somedata\".getBytes(), 0, 1);\r\n        writer.addDocument(d);\r\n        // flush\r\n        writer.close();        \r\n        \r\n        // only one segment in the index, so we can cast to SegmentReader\r\n        SegmentReader reader = (SegmentReader) IndexReader.open(ram);\r\n        FieldInfos fi = reader.fieldInfos();\r\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\r\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\r\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\r\n        reader.close();\r\n        \r\n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\r\n        // enabled payloads for that field\r\n        writer = new IndexWriter(ram, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\r\n        d = new Document();\r\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.TOKENIZED));\r\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.TOKENIZED));\r\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.TOKENIZED));\r\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.TOKENIZED));\r\n        // add payload data for field f2 and f3\r\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\r\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\r\n        writer.addDocument(d);\r\n        // force merge\r\n        writer.optimize();\r\n        // flush\r\n        writer.close();\r\n\r\n        // only one segment in the index, so we can cast to SegmentReader\r\n        reader = (SegmentReader) IndexReader.open(ram);\r\n        fi = reader.fieldInfos();\r\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\r\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\r\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\r\n        reader.close();        \r\n    }\r\n\n","sourceOld":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\r\n    // payload bit in the FieldInfo\r\n    public void testPayloadFieldBit() throws Exception {\r\n        Directory ram = new RAMDirectory();\r\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\r\n        IndexWriter writer = new IndexWriter(ram, analyzer, true);\r\n        Document d = new Document();\r\n        // this field won't have any payloads\r\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.TOKENIZED));\r\n        // this field will have payloads in all docs, however not for all term positions,\r\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\r\n        // even if only some term positions have payloads\r\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.TOKENIZED));\r\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.TOKENIZED));\r\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \r\n        // enabled in only some documents\r\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.TOKENIZED));\r\n        // only add payload data for field f2\r\n        analyzer.setPayloadData(\"f2\", 1, \"somedata\".getBytes(), 0, 1);\r\n        writer.addDocument(d);\r\n        // flush\r\n        writer.close();        \r\n        \r\n        // only one segment in the index, so we can cast to SegmentReader\r\n        SegmentReader reader = (SegmentReader) IndexReader.open(ram);\r\n        FieldInfos fi = reader.fieldInfos();\r\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\r\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\r\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\r\n        reader.close();\r\n        \r\n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\r\n        // enabled payloads for that field\r\n        writer = new IndexWriter(ram, analyzer, true);\r\n        d = new Document();\r\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.TOKENIZED));\r\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.TOKENIZED));\r\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.TOKENIZED));\r\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.TOKENIZED));\r\n        // add payload data for field f2 and f3\r\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\r\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\r\n        writer.addDocument(d);\r\n        // force merge\r\n        writer.optimize();\r\n        // flush\r\n        writer.close();\r\n\r\n        // only one segment in the index, so we can cast to SegmentReader\r\n        reader = (SegmentReader) IndexReader.open(ram);\r\n        fi = reader.fieldInfos();\r\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\r\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\r\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\r\n        reader.close();        \r\n    }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2123bddbd65dea198cac380540636ce43a880403","date":1211269254,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","pathOld":"src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","sourceNew":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = new RAMDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.TOKENIZED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.TOKENIZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.TOKENIZED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.TOKENIZED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", 1, \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();        \n        \n        // only one segment in the index, so we can cast to SegmentReader\n        SegmentReader reader = (SegmentReader) IndexReader.open(ram);\n        FieldInfos fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        writer = new IndexWriter(ram, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n        d = new Document();\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.TOKENIZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.TOKENIZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.TOKENIZED));\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.TOKENIZED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n        // force merge\n        writer.optimize();\n        // flush\n        writer.close();\n\n        // only one segment in the index, so we can cast to SegmentReader\n        reader = (SegmentReader) IndexReader.open(ram);\n        fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();        \n    }\n\n","sourceOld":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\r\n    // payload bit in the FieldInfo\r\n    public void testPayloadFieldBit() throws Exception {\r\n        Directory ram = new RAMDirectory();\r\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\r\n        IndexWriter writer = new IndexWriter(ram, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\r\n        Document d = new Document();\r\n        // this field won't have any payloads\r\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.TOKENIZED));\r\n        // this field will have payloads in all docs, however not for all term positions,\r\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\r\n        // even if only some term positions have payloads\r\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.TOKENIZED));\r\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.TOKENIZED));\r\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \r\n        // enabled in only some documents\r\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.TOKENIZED));\r\n        // only add payload data for field f2\r\n        analyzer.setPayloadData(\"f2\", 1, \"somedata\".getBytes(), 0, 1);\r\n        writer.addDocument(d);\r\n        // flush\r\n        writer.close();        \r\n        \r\n        // only one segment in the index, so we can cast to SegmentReader\r\n        SegmentReader reader = (SegmentReader) IndexReader.open(ram);\r\n        FieldInfos fi = reader.fieldInfos();\r\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\r\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\r\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\r\n        reader.close();\r\n        \r\n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\r\n        // enabled payloads for that field\r\n        writer = new IndexWriter(ram, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\r\n        d = new Document();\r\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.TOKENIZED));\r\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.TOKENIZED));\r\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.TOKENIZED));\r\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.TOKENIZED));\r\n        // add payload data for field f2 and f3\r\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\r\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\r\n        writer.addDocument(d);\r\n        // force merge\r\n        writer.optimize();\r\n        // flush\r\n        writer.close();\r\n\r\n        // only one segment in the index, so we can cast to SegmentReader\r\n        reader = (SegmentReader) IndexReader.open(ram);\r\n        fi = reader.fieldInfos();\r\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\r\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\r\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\r\n        reader.close();        \r\n    }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","pathOld":"src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","sourceNew":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = new RAMDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", 1, \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();        \n        \n        // only one segment in the index, so we can cast to SegmentReader\n        SegmentReader reader = (SegmentReader) IndexReader.open(ram);\n        FieldInfos fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        writer = new IndexWriter(ram, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n        d = new Document();\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n        // force merge\n        writer.optimize();\n        // flush\n        writer.close();\n\n        // only one segment in the index, so we can cast to SegmentReader\n        reader = (SegmentReader) IndexReader.open(ram);\n        fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();        \n    }\n\n","sourceOld":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = new RAMDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.TOKENIZED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.TOKENIZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.TOKENIZED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.TOKENIZED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", 1, \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();        \n        \n        // only one segment in the index, so we can cast to SegmentReader\n        SegmentReader reader = (SegmentReader) IndexReader.open(ram);\n        FieldInfos fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        writer = new IndexWriter(ram, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n        d = new Document();\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.TOKENIZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.TOKENIZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.TOKENIZED));\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.TOKENIZED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n        // force merge\n        writer.optimize();\n        // flush\n        writer.close();\n\n        // only one segment in the index, so we can cast to SegmentReader\n        reader = (SegmentReader) IndexReader.open(ram);\n        fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb1066f2afe9450585d0d10063ea4450085236f1","date":1233870820,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","pathOld":"src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","sourceNew":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        rnd = newRandom();\n        Directory ram = new RAMDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", 1, \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();        \n        \n        // only one segment in the index, so we can cast to SegmentReader\n        SegmentReader reader = (SegmentReader) IndexReader.open(ram);\n        FieldInfos fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        writer = new IndexWriter(ram, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n        d = new Document();\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n        // force merge\n        writer.optimize();\n        // flush\n        writer.close();\n\n        // only one segment in the index, so we can cast to SegmentReader\n        reader = (SegmentReader) IndexReader.open(ram);\n        fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();        \n    }\n\n","sourceOld":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = new RAMDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", 1, \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();        \n        \n        // only one segment in the index, so we can cast to SegmentReader\n        SegmentReader reader = (SegmentReader) IndexReader.open(ram);\n        FieldInfos fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        writer = new IndexWriter(ram, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n        d = new Document();\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n        // force merge\n        writer.optimize();\n        // flush\n        writer.close();\n\n        // only one segment in the index, so we can cast to SegmentReader\n        reader = (SegmentReader) IndexReader.open(ram);\n        fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1","date":1244392278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","pathOld":"src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","sourceNew":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        rnd = newRandom();\n        Directory ram = new RAMDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", 1, \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();        \n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n        FieldInfos fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        writer = new IndexWriter(ram, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n        d = new Document();\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n        // force merge\n        writer.optimize();\n        // flush\n        writer.close();\n\n        reader = SegmentReader.getOnlySegmentReader(ram);\n        fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();        \n    }\n\n","sourceOld":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        rnd = newRandom();\n        Directory ram = new RAMDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", 1, \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();        \n        \n        // only one segment in the index, so we can cast to SegmentReader\n        SegmentReader reader = (SegmentReader) IndexReader.open(ram);\n        FieldInfos fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        writer = new IndexWriter(ram, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n        d = new Document();\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n        // force merge\n        writer.optimize();\n        // flush\n        writer.close();\n\n        // only one segment in the index, so we can cast to SegmentReader\n        reader = (SegmentReader) IndexReader.open(ram);\n        fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","pathOld":"src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","sourceNew":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        rnd = newRandom();\n        Directory ram = new RAMDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, new IndexWriterConfig(TEST_VERSION_CURRENT).setAnalyzer(analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", 1, \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();        \n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n        FieldInfos fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        writer = new IndexWriter(ram, new IndexWriterConfig(TEST_VERSION_CURRENT)\n          .setAnalyzer(analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n        // force merge\n        writer.optimize();\n        // flush\n        writer.close();\n\n        reader = SegmentReader.getOnlySegmentReader(ram);\n        fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();        \n    }\n\n","sourceOld":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        rnd = newRandom();\n        Directory ram = new RAMDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", 1, \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();        \n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n        FieldInfos fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        writer = new IndexWriter(ram, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n        d = new Document();\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n        // force merge\n        writer.optimize();\n        // flush\n        writer.close();\n\n        reader = SegmentReader.getOnlySegmentReader(ram);\n        fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","pathOld":"src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","sourceNew":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        rnd = newRandom();\n        Directory ram = new RAMDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", 1, \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();        \n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n        FieldInfos fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        writer = new IndexWriter(ram, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n        d = new Document();\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n        // force merge\n        writer.optimize();\n        // flush\n        writer.close();\n\n        reader = SegmentReader.getOnlySegmentReader(ram);\n        fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();        \n    }\n\n","sourceOld":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        rnd = newRandom();\n        Directory ram = new RAMDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, new IndexWriterConfig(TEST_VERSION_CURRENT).setAnalyzer(analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", 1, \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();        \n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n        FieldInfos fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        writer = new IndexWriter(ram, new IndexWriterConfig(TEST_VERSION_CURRENT)\n          .setAnalyzer(analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n        // force merge\n        writer.optimize();\n        // flush\n        writer.close();\n\n        reader = SegmentReader.getOnlySegmentReader(ram);\n        fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","pathOld":"src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","sourceNew":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        rnd = newRandom();\n        Directory ram = new RAMDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", 1, \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();        \n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n        FieldInfos fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        writer = new IndexWriter(ram, new IndexWriterConfig(TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n        // force merge\n        writer.optimize();\n        // flush\n        writer.close();\n\n        reader = SegmentReader.getOnlySegmentReader(ram);\n        fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();        \n    }\n\n","sourceOld":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        rnd = newRandom();\n        Directory ram = new RAMDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", 1, \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();        \n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n        FieldInfos fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        writer = new IndexWriter(ram, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n        d = new Document();\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n        // force merge\n        writer.optimize();\n        // flush\n        writer.close();\n\n        reader = SegmentReader.getOnlySegmentReader(ram);\n        fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","pathOld":"src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","sourceNew":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        rnd = newRandom();\n        Directory ram = new RAMDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", 1, \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();        \n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n        FieldInfos fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        writer = new IndexWriter(ram, new IndexWriterConfig(TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n        // force merge\n        writer.optimize();\n        // flush\n        writer.close();\n\n        reader = SegmentReader.getOnlySegmentReader(ram);\n        fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();        \n    }\n\n","sourceOld":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        rnd = newRandom();\n        Directory ram = new RAMDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", 1, \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();        \n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n        FieldInfos fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        writer = new IndexWriter(ram, new IndexWriterConfig(TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n        // force merge\n        writer.optimize();\n        // flush\n        writer.close();\n\n        reader = SegmentReader.getOnlySegmentReader(ram);\n        fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["cb1066f2afe9450585d0d10063ea4450085236f1"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"cb1066f2afe9450585d0d10063ea4450085236f1":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"8522ae207a56c6db28ca06fe6cc33e70911c3600":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2123bddbd65dea198cac380540636ce43a880403":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["2123bddbd65dea198cac380540636ce43a880403"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["8522ae207a56c6db28ca06fe6cc33e70911c3600"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cb1066f2afe9450585d0d10063ea4450085236f1":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8522ae207a56c6db28ca06fe6cc33e70911c3600":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8522ae207a56c6db28ca06fe6cc33e70911c3600"],"2123bddbd65dea198cac380540636ce43a880403":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["cb1066f2afe9450585d0d10063ea4450085236f1"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["2123bddbd65dea198cac380540636ce43a880403"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}