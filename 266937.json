{"path":"lucene/core/src/test/org/apache/lucene/search/TestQueryCachingPolicy#testLargeSegmentDetection().mjava","commits":[{"id":"d52e48927ca4ef3655a261f2230b968b6fdf3608","date":1444652107,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryCachingPolicy#testLargeSegmentDetection().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFilterCachingPolicy#testLargeSegmentDetection().mjava","sourceNew":"  public void testLargeSegmentDetection() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(new Document());\n    }\n    final IndexReader reader = w.getReader();\n    for (float minSizeRatio : new float[] {Float.MIN_VALUE, 0.01f, 0.1f, 0.9f}) {\n      final QueryCachingPolicy policy = new QueryCachingPolicy.CacheOnLargeSegments(0, minSizeRatio);\n      for (LeafReaderContext ctx : reader.leaves()) {\n        final Query query = new TermQuery(new Term(\"field\", \"value\"));\n        final boolean shouldCache = policy.shouldCache(query, ctx);\n        final float sizeRatio = (float) ctx.reader().maxDoc() / reader.maxDoc();\n        assertEquals(sizeRatio >= minSizeRatio, shouldCache);\n        assertTrue(new QueryCachingPolicy.CacheOnLargeSegments(numDocs, Float.MIN_VALUE).shouldCache(query, ctx));\n        assertFalse(new QueryCachingPolicy.CacheOnLargeSegments(numDocs + 1, Float.MIN_VALUE).shouldCache(query, ctx));\n      }\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLargeSegmentDetection() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(new Document());\n    }\n    final IndexReader reader = w.getReader();\n    for (float minSizeRatio : new float[] {Float.MIN_VALUE, 0.01f, 0.1f, 0.9f}) {\n      final QueryCachingPolicy policy = new QueryCachingPolicy.CacheOnLargeSegments(0, minSizeRatio);\n      for (LeafReaderContext ctx : reader.leaves()) {\n        final Filter filter = new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"value\")));\n        final boolean shouldCache = policy.shouldCache(filter, ctx);\n        final float sizeRatio = (float) ctx.reader().maxDoc() / reader.maxDoc();\n        assertEquals(sizeRatio >= minSizeRatio, shouldCache);\n        assertTrue(new QueryCachingPolicy.CacheOnLargeSegments(numDocs, Float.MIN_VALUE).shouldCache(filter, ctx));\n        assertFalse(new QueryCachingPolicy.CacheOnLargeSegments(numDocs + 1, Float.MIN_VALUE).shouldCache(filter, ctx));\n      }\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aac61ee5b4492f174e60bd54939aba9539906edf","date":1461245473,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryCachingPolicy#testLargeSegmentDetection().mjava","sourceNew":null,"sourceOld":"  public void testLargeSegmentDetection() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(new Document());\n    }\n    final IndexReader reader = w.getReader();\n    for (float minSizeRatio : new float[] {Float.MIN_VALUE, 0.01f, 0.1f, 0.9f}) {\n      final QueryCachingPolicy policy = new QueryCachingPolicy.CacheOnLargeSegments(0, minSizeRatio);\n      for (LeafReaderContext ctx : reader.leaves()) {\n        final Query query = new TermQuery(new Term(\"field\", \"value\"));\n        final boolean shouldCache = policy.shouldCache(query, ctx);\n        final float sizeRatio = (float) ctx.reader().maxDoc() / reader.maxDoc();\n        assertEquals(sizeRatio >= minSizeRatio, shouldCache);\n        assertTrue(new QueryCachingPolicy.CacheOnLargeSegments(numDocs, Float.MIN_VALUE).shouldCache(query, ctx));\n        assertFalse(new QueryCachingPolicy.CacheOnLargeSegments(numDocs + 1, Float.MIN_VALUE).shouldCache(query, ctx));\n      }\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aac61ee5b4492f174e60bd54939aba9539906edf":["d52e48927ca4ef3655a261f2230b968b6fdf3608"],"d52e48927ca4ef3655a261f2230b968b6fdf3608":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aac61ee5b4492f174e60bd54939aba9539906edf"]},"commit2Childs":{"aac61ee5b4492f174e60bd54939aba9539906edf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d52e48927ca4ef3655a261f2230b968b6fdf3608":["aac61ee5b4492f174e60bd54939aba9539906edf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d52e48927ca4ef3655a261f2230b968b6fdf3608"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}