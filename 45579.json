{"path":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForThingsToLevelOut(int).mjava","commits":[{"id":"2c30e4c1cee08b3b229a77991882594fe7250b66","date":1344448871,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForThingsToLevelOut(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#waitForThingsToLevelOut(int).mjava","sourceNew":"  public void waitForThingsToLevelOut(int waitForRecTimeSeconds) throws Exception {\n    log.info(\"Wait for recoveries to finish - wait \" + waitForRecTimeSeconds + \" for each attempt\");\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(VERBOSE, waitForRecTimeSeconds);\n      \n      try {\n        commit();\n      } catch (Exception e) {\n        // we don't care if this commit fails on some nodes\n      }\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToJetty.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, false);\n      }\n      \n      if (failMessage != null) {\n        retry  = true;\n      }\n      cnt++;\n      if (cnt > 2) break;\n      Thread.sleep(4000);\n    } while (retry);\n  }\n\n","sourceOld":"  protected void waitForThingsToLevelOut(int waitForRecTimeSeconds) throws Exception {\n    log.info(\"Wait for recoveries to finish - wait \" + waitForRecTimeSeconds + \" for each attempt\");\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(VERBOSE, waitForRecTimeSeconds);\n      \n      try {\n        commit();\n      } catch (Exception e) {\n        // we don't care if this commit fails on some nodes\n      }\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToJetty.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, false);\n      }\n      \n      if (failMessage != null) {\n        retry  = true;\n      }\n      cnt++;\n      if (cnt > 2) break;\n      Thread.sleep(4000);\n    } while (retry);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForThingsToLevelOut(int).mjava","pathOld":"/dev/null","sourceNew":"  public void waitForThingsToLevelOut(int waitForRecTimeSeconds) throws Exception {\n    log.info(\"Wait for recoveries to finish - wait \" + waitForRecTimeSeconds + \" for each attempt\");\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(VERBOSE, waitForRecTimeSeconds);\n      \n      try {\n        commit();\n      } catch (Exception e) {\n        // we don't care if this commit fails on some nodes\n      }\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToJetty.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, false);\n      }\n      \n      if (failMessage != null) {\n        retry  = true;\n      }\n      cnt++;\n      if (cnt > 2) break;\n      Thread.sleep(4000);\n    } while (retry);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForThingsToLevelOut(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#waitForThingsToLevelOut(int).mjava","sourceNew":"  public void waitForThingsToLevelOut(int waitForRecTimeSeconds) throws Exception {\n    log.info(\"Wait for recoveries to finish - wait \" + waitForRecTimeSeconds + \" for each attempt\");\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(VERBOSE, waitForRecTimeSeconds);\n      \n      try {\n        commit();\n      } catch (Exception e) {\n        // we don't care if this commit fails on some nodes\n      }\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToJetty.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, false);\n      }\n      \n      if (failMessage != null) {\n        retry  = true;\n      }\n      cnt++;\n      if (cnt > 2) break;\n      Thread.sleep(4000);\n    } while (retry);\n  }\n\n","sourceOld":"  protected void waitForThingsToLevelOut(int waitForRecTimeSeconds) throws Exception {\n    log.info(\"Wait for recoveries to finish - wait \" + waitForRecTimeSeconds + \" for each attempt\");\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(VERBOSE, waitForRecTimeSeconds);\n      \n      try {\n        commit();\n      } catch (Exception e) {\n        // we don't care if this commit fails on some nodes\n      }\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToJetty.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, false);\n      }\n      \n      if (failMessage != null) {\n        retry  = true;\n      }\n      cnt++;\n      if (cnt > 2) break;\n      Thread.sleep(4000);\n    } while (retry);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6013b4c7388f1627659c8f96c44abd10a294d3a6","date":1346343796,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForThingsToLevelOut(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForThingsToLevelOut(int).mjava","sourceNew":"  public void waitForThingsToLevelOut(int waitForRecTimeSeconds) throws Exception {\n    log.info(\"Wait for recoveries to finish - wait \" + waitForRecTimeSeconds + \" for each attempt\");\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(VERBOSE, waitForRecTimeSeconds);\n      \n      try {\n        commit();\n      } catch (Throwable t) {\n        t.printStackTrace();\n        // we don't care if this commit fails on some nodes\n      }\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToJetty.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, false);\n      }\n      \n      if (failMessage != null) {\n        retry  = true;\n      }\n      cnt++;\n      if (cnt > 4) break;\n      Thread.sleep(2000);\n    } while (retry);\n  }\n\n","sourceOld":"  public void waitForThingsToLevelOut(int waitForRecTimeSeconds) throws Exception {\n    log.info(\"Wait for recoveries to finish - wait \" + waitForRecTimeSeconds + \" for each attempt\");\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(VERBOSE, waitForRecTimeSeconds);\n      \n      try {\n        commit();\n      } catch (Exception e) {\n        // we don't care if this commit fails on some nodes\n      }\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToJetty.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, false);\n      }\n      \n      if (failMessage != null) {\n        retry  = true;\n      }\n      cnt++;\n      if (cnt > 2) break;\n      Thread.sleep(4000);\n    } while (retry);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForThingsToLevelOut(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForThingsToLevelOut(int).mjava","sourceNew":"  public void waitForThingsToLevelOut(int waitForRecTimeSeconds) throws Exception {\n    log.info(\"Wait for recoveries to finish - wait \" + waitForRecTimeSeconds + \" for each attempt\");\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(VERBOSE, waitForRecTimeSeconds);\n      \n      try {\n        commit();\n      } catch (Throwable t) {\n        t.printStackTrace();\n        // we don't care if this commit fails on some nodes\n      }\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToJetty.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, false);\n      }\n      \n      if (failMessage != null) {\n        retry  = true;\n      }\n      cnt++;\n      if (cnt > 4) break;\n      Thread.sleep(2000);\n    } while (retry);\n  }\n\n","sourceOld":"  public void waitForThingsToLevelOut(int waitForRecTimeSeconds) throws Exception {\n    log.info(\"Wait for recoveries to finish - wait \" + waitForRecTimeSeconds + \" for each attempt\");\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(VERBOSE, waitForRecTimeSeconds);\n      \n      try {\n        commit();\n      } catch (Exception e) {\n        // we don't care if this commit fails on some nodes\n      }\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToJetty.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, false);\n      }\n      \n      if (failMessage != null) {\n        retry  = true;\n      }\n      cnt++;\n      if (cnt > 2) break;\n      Thread.sleep(4000);\n    } while (retry);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a69439d0df009e0bb0038d1e427159f449dd670d","date":1355704683,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForThingsToLevelOut(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForThingsToLevelOut(int).mjava","sourceNew":"  public void waitForThingsToLevelOut(int waitForRecTimeSeconds) throws Exception {\n    log.info(\"Wait for recoveries to finish - wait \" + waitForRecTimeSeconds + \" for each attempt\");\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(VERBOSE, waitForRecTimeSeconds);\n      \n      try {\n        commit();\n      } catch (Throwable t) {\n        t.printStackTrace();\n        // we don't care if this commit fails on some nodes\n      }\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToJetty.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, false);\n      }\n      \n      if (failMessage != null) {\n        retry  = true;\n      }\n      cnt++;\n      if (cnt > 10) break;\n      Thread.sleep(2000);\n    } while (retry);\n  }\n\n","sourceOld":"  public void waitForThingsToLevelOut(int waitForRecTimeSeconds) throws Exception {\n    log.info(\"Wait for recoveries to finish - wait \" + waitForRecTimeSeconds + \" for each attempt\");\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(VERBOSE, waitForRecTimeSeconds);\n      \n      try {\n        commit();\n      } catch (Throwable t) {\n        t.printStackTrace();\n        // we don't care if this commit fails on some nodes\n      }\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToJetty.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, false);\n      }\n      \n      if (failMessage != null) {\n        retry  = true;\n      }\n      cnt++;\n      if (cnt > 4) break;\n      Thread.sleep(2000);\n    } while (retry);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"042c474f8983c7bfede807d97ad9faf73ff694cc","date":1355859039,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForThingsToLevelOut(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForThingsToLevelOut(int).mjava","sourceNew":"  public void waitForThingsToLevelOut(int waitForRecTimeSeconds) throws Exception {\n    log.info(\"Wait for recoveries to finish - wait \" + waitForRecTimeSeconds + \" for each attempt\");\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(VERBOSE, waitForRecTimeSeconds);\n      \n      try {\n        commit();\n      } catch (Throwable t) {\n        t.printStackTrace();\n        // we don't care if this commit fails on some nodes\n      }\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToJetty.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, true, false);\n      }\n      \n      if (failMessage != null) {\n        retry  = true;\n      }\n      cnt++;\n      if (cnt > 10) break;\n      Thread.sleep(2000);\n    } while (retry);\n  }\n\n","sourceOld":"  public void waitForThingsToLevelOut(int waitForRecTimeSeconds) throws Exception {\n    log.info(\"Wait for recoveries to finish - wait \" + waitForRecTimeSeconds + \" for each attempt\");\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(VERBOSE, waitForRecTimeSeconds);\n      \n      try {\n        commit();\n      } catch (Throwable t) {\n        t.printStackTrace();\n        // we don't care if this commit fails on some nodes\n      }\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToJetty.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, false);\n      }\n      \n      if (failMessage != null) {\n        retry  = true;\n      }\n      cnt++;\n      if (cnt > 10) break;\n      Thread.sleep(2000);\n    } while (retry);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForThingsToLevelOut(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForThingsToLevelOut(int).mjava","sourceNew":"  public void waitForThingsToLevelOut(int waitForRecTimeSeconds) throws Exception {\n    log.info(\"Wait for recoveries to finish - wait \" + waitForRecTimeSeconds + \" for each attempt\");\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(VERBOSE, waitForRecTimeSeconds);\n      \n      try {\n        commit();\n      } catch (Throwable t) {\n        t.printStackTrace();\n        // we don't care if this commit fails on some nodes\n      }\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToJetty.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, true, false);\n      }\n      \n      if (failMessage != null) {\n        retry  = true;\n      }\n      cnt++;\n      if (cnt > 10) break;\n      Thread.sleep(2000);\n    } while (retry);\n  }\n\n","sourceOld":"  public void waitForThingsToLevelOut(int waitForRecTimeSeconds) throws Exception {\n    log.info(\"Wait for recoveries to finish - wait \" + waitForRecTimeSeconds + \" for each attempt\");\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(VERBOSE, waitForRecTimeSeconds);\n      \n      try {\n        commit();\n      } catch (Throwable t) {\n        t.printStackTrace();\n        // we don't care if this commit fails on some nodes\n      }\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToJetty.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, false);\n      }\n      \n      if (failMessage != null) {\n        retry  = true;\n      }\n      cnt++;\n      if (cnt > 4) break;\n      Thread.sleep(2000);\n    } while (retry);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b97a32ef0f7ada102673c4b42228da75f324b52b","date":1362975614,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForThingsToLevelOut(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForThingsToLevelOut(int).mjava","sourceNew":"  public void waitForThingsToLevelOut(int waitForRecTimeSeconds) throws Exception {\n    log.info(\"Wait for recoveries to finish - wait \" + waitForRecTimeSeconds + \" for each attempt\");\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(VERBOSE, waitForRecTimeSeconds);\n      \n      try {\n        commit();\n      } catch (Throwable t) {\n        t.printStackTrace();\n        // we don't care if this commit fails on some nodes\n      }\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToJetty.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, true, false);\n      }\n      \n      if (failMessage != null) {\n        retry  = true;\n      }\n      cnt++;\n      if (cnt > 20) break;\n      Thread.sleep(2000);\n    } while (retry);\n  }\n\n","sourceOld":"  public void waitForThingsToLevelOut(int waitForRecTimeSeconds) throws Exception {\n    log.info(\"Wait for recoveries to finish - wait \" + waitForRecTimeSeconds + \" for each attempt\");\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(VERBOSE, waitForRecTimeSeconds);\n      \n      try {\n        commit();\n      } catch (Throwable t) {\n        t.printStackTrace();\n        // we don't care if this commit fails on some nodes\n      }\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToJetty.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, true, false);\n      }\n      \n      if (failMessage != null) {\n        retry  = true;\n      }\n      cnt++;\n      if (cnt > 10) break;\n      Thread.sleep(2000);\n    } while (retry);\n  }\n\n","bugFix":null,"bugIntro":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f6c494de6b7fddab42beeb839721ee126885db1","date":1395291794,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForThingsToLevelOut(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForThingsToLevelOut(int).mjava","sourceNew":"  public void waitForThingsToLevelOut(int waitForRecTimeSeconds) throws Exception {\n    log.info(\"Wait for recoveries to finish - wait \" + waitForRecTimeSeconds + \" for each attempt\");\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(VERBOSE, waitForRecTimeSeconds);\n      \n      try {\n        commit();\n      } catch (Throwable t) {\n        t.printStackTrace();\n        // we don't care if this commit fails on some nodes\n      }\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToJetty.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, true, false);\n      }\n      \n      if (failMessage != null) {\n        log.info(\"shard inconsistency - waiting ...\");\n        retry = true;\n      } else {\n        retry = false;\n      }\n      cnt++;\n      if (cnt > 20) break;\n      Thread.sleep(2000);\n    } while (retry);\n  }\n\n","sourceOld":"  public void waitForThingsToLevelOut(int waitForRecTimeSeconds) throws Exception {\n    log.info(\"Wait for recoveries to finish - wait \" + waitForRecTimeSeconds + \" for each attempt\");\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(VERBOSE, waitForRecTimeSeconds);\n      \n      try {\n        commit();\n      } catch (Throwable t) {\n        t.printStackTrace();\n        // we don't care if this commit fails on some nodes\n      }\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToJetty.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, true, false);\n      }\n      \n      if (failMessage != null) {\n        retry  = true;\n      }\n      cnt++;\n      if (cnt > 20) break;\n      Thread.sleep(2000);\n    } while (retry);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6784d0cc613dc1ee97030eaaa5e0754edc22d164","date":1420824784,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForThingsToLevelOut(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForThingsToLevelOut(int).mjava","sourceNew":"  public void waitForThingsToLevelOut(int waitForRecTimeSeconds) throws Exception {\n    log.info(\"Wait for recoveries to finish - wait \" + waitForRecTimeSeconds + \" for each attempt\");\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(VERBOSE, waitForRecTimeSeconds);\n      \n      try {\n        commit();\n      } catch (Throwable t) {\n        t.printStackTrace();\n        // we don't care if this commit fails on some nodes\n      }\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToJetty.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, true, false);\n      }\n      \n      if (failMessage != null) {\n        log.info(\"shard inconsistency - waiting ...\");\n        retry = true;\n      } else {\n        retry = false;\n      }\n      cnt++;\n      if (cnt > 30) break;\n      Thread.sleep(2000);\n    } while (retry);\n  }\n\n","sourceOld":"  public void waitForThingsToLevelOut(int waitForRecTimeSeconds) throws Exception {\n    log.info(\"Wait for recoveries to finish - wait \" + waitForRecTimeSeconds + \" for each attempt\");\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(VERBOSE, waitForRecTimeSeconds);\n      \n      try {\n        commit();\n      } catch (Throwable t) {\n        t.printStackTrace();\n        // we don't care if this commit fails on some nodes\n      }\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToJetty.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, true, false);\n      }\n      \n      if (failMessage != null) {\n        log.info(\"shard inconsistency - waiting ...\");\n        retry = true;\n      } else {\n        retry = false;\n      }\n      cnt++;\n      if (cnt > 20) break;\n      Thread.sleep(2000);\n    } while (retry);\n  }\n\n","bugFix":["b97a32ef0f7ada102673c4b42228da75f324b52b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForThingsToLevelOut(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForThingsToLevelOut(int).mjava","sourceNew":"  public void waitForThingsToLevelOut(int waitForRecTimeSeconds) throws Exception {\n    log.info(\"Wait for recoveries to finish - wait \" + waitForRecTimeSeconds + \" for each attempt\");\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(VERBOSE, waitForRecTimeSeconds);\n\n      try {\n        commit();\n      } catch (Throwable t) {\n        t.printStackTrace();\n        // we don't care if this commit fails on some nodes\n      }\n\n      updateMappingsFromZk(jettys, clients);\n\n      Set<String> theShards = shardToJetty.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, true, false);\n      }\n\n      if (failMessage != null) {\n        log.info(\"shard inconsistency - waiting ...\");\n        retry = true;\n      } else {\n        retry = false;\n      }\n      cnt++;\n      if (cnt > 30) break;\n      Thread.sleep(2000);\n    } while (retry);\n  }\n\n","sourceOld":"  public void waitForThingsToLevelOut(int waitForRecTimeSeconds) throws Exception {\n    log.info(\"Wait for recoveries to finish - wait \" + waitForRecTimeSeconds + \" for each attempt\");\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(VERBOSE, waitForRecTimeSeconds);\n      \n      try {\n        commit();\n      } catch (Throwable t) {\n        t.printStackTrace();\n        // we don't care if this commit fails on some nodes\n      }\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToJetty.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, true, false);\n      }\n      \n      if (failMessage != null) {\n        log.info(\"shard inconsistency - waiting ...\");\n        retry = true;\n      } else {\n        retry = false;\n      }\n      cnt++;\n      if (cnt > 30) break;\n      Thread.sleep(2000);\n    } while (retry);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"add1e7dd742ea533ff4318cea83ca0a1f669f662","date":1585262285,"type":5,"author":"Mike Drob","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForThingsToLevelOut(int,TimeUnit).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForThingsToLevelOut(int).mjava","sourceNew":"  public void waitForThingsToLevelOut(int timeout, TimeUnit unit) throws Exception {\n    log.info(\"Wait for recoveries to finish - wait {}{} for each attempt\", timeout, unit);\n    int cnt = 0;\n    boolean retry;\n    do {\n      waitForRecoveriesToFinish(VERBOSE, unit.toSeconds(timeout));\n\n      try {\n        commit();\n      } catch (Exception e) {\n        // we don't care if this commit fails on some nodes\n        log.info(\"Commit failed while waiting for recoveries\", e);\n      }\n\n      updateMappingsFromZk(jettys, clients);\n\n      Set<String> theShards = shardToJetty.keySet();\n      retry = false;\n      for (String shard : theShards) {\n        String failMessage = checkShardConsistency(shard, true, false);\n        if (failMessage != null) {\n          log.info(\"shard inconsistency - will retry ...\");\n          retry = true;\n        }\n      }\n\n      if (cnt++ > 30) {\n        throw new TimeoutException(\"Cluster state still in flux after 30 retry intervals.\");\n      }\n      Thread.sleep(2000);\n    } while (retry);\n  }\n\n","sourceOld":"  public void waitForThingsToLevelOut(int waitForRecTimeSeconds) throws Exception {\n    log.info(\"Wait for recoveries to finish - wait \" + waitForRecTimeSeconds + \" for each attempt\");\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(VERBOSE, waitForRecTimeSeconds);\n\n      try {\n        commit();\n      } catch (Throwable t) {\n        t.printStackTrace();\n        // we don't care if this commit fails on some nodes\n      }\n\n      updateMappingsFromZk(jettys, clients);\n\n      Set<String> theShards = shardToJetty.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, true, false);\n      }\n\n      if (failMessage != null) {\n        log.info(\"shard inconsistency - waiting ...\");\n        retry = true;\n      } else {\n        retry = false;\n      }\n      cnt++;\n      if (cnt > 30) break;\n      Thread.sleep(2000);\n    } while (retry);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["6013b4c7388f1627659c8f96c44abd10a294d3a6","042c474f8983c7bfede807d97ad9faf73ff694cc"],"abb23fcc2461782ab204e61213240feb77d355aa":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"a69439d0df009e0bb0038d1e427159f449dd670d":["6013b4c7388f1627659c8f96c44abd10a294d3a6"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["d6f074e73200c07d54f242d3880a8da5a35ff97b","6013b4c7388f1627659c8f96c44abd10a294d3a6"],"6013b4c7388f1627659c8f96c44abd10a294d3a6":["2c30e4c1cee08b3b229a77991882594fe7250b66"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c30e4c1cee08b3b229a77991882594fe7250b66"],"b97a32ef0f7ada102673c4b42228da75f324b52b":["042c474f8983c7bfede807d97ad9faf73ff694cc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"add1e7dd742ea533ff4318cea83ca0a1f669f662":["abb23fcc2461782ab204e61213240feb77d355aa"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c30e4c1cee08b3b229a77991882594fe7250b66"],"042c474f8983c7bfede807d97ad9faf73ff694cc":["a69439d0df009e0bb0038d1e427159f449dd670d"],"5f6c494de6b7fddab42beeb839721ee126885db1":["b97a32ef0f7ada102673c4b42228da75f324b52b"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["5f6c494de6b7fddab42beeb839721ee126885db1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["add1e7dd742ea533ff4318cea83ca0a1f669f662"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"abb23fcc2461782ab204e61213240feb77d355aa":["add1e7dd742ea533ff4318cea83ca0a1f669f662"],"a69439d0df009e0bb0038d1e427159f449dd670d":["042c474f8983c7bfede807d97ad9faf73ff694cc"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"6013b4c7388f1627659c8f96c44abd10a294d3a6":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a69439d0df009e0bb0038d1e427159f449dd670d","05a14b2611ead08655a2b2bdc61632eb31316e57"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"b97a32ef0f7ada102673c4b42228da75f324b52b":["5f6c494de6b7fddab42beeb839721ee126885db1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","2c30e4c1cee08b3b229a77991882594fe7250b66"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["05a14b2611ead08655a2b2bdc61632eb31316e57"],"add1e7dd742ea533ff4318cea83ca0a1f669f662":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"042c474f8983c7bfede807d97ad9faf73ff694cc":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","b97a32ef0f7ada102673c4b42228da75f324b52b"],"5f6c494de6b7fddab42beeb839721ee126885db1":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["abb23fcc2461782ab204e61213240feb77d355aa"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["6013b4c7388f1627659c8f96c44abd10a294d3a6","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","05a14b2611ead08655a2b2bdc61632eb31316e57","c7869f64c874ebf7f317d22c00baf2b6857797a6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}