{"path":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#splitIntoClauses(String,boolean).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#splitIntoClauses(String,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#splitIntoClauses(String,boolean).mjava","sourceNew":"  public List<Clause> splitIntoClauses(String s, boolean ignoreQuote) {\n    ArrayList<Clause> lst = new ArrayList<Clause>(4);\n    Clause clause = new Clause();\n\n    int pos=0;\n    int end=s.length();\n    char ch=0;\n    int start;\n    outer: while (pos < end) {\n      ch = s.charAt(pos);\n\n      while (Character.isWhitespace(ch)) {\n        if (++pos >= end) break;\n        ch = s.charAt(pos);\n      }\n\n      start = pos;      \n\n      if (ch=='+' || ch=='-') {\n        clause.must = ch;\n        pos++;\n      }\n\n      clause.field = getFieldName(s, pos, end);\n      if (clause.field != null) {\n        pos += clause.field.length(); // skip the field name\n        pos++;  // skip the ':'\n      }\n\n      if (pos>=end) break;\n\n\n      char inString=0;\n\n      ch = s.charAt(pos);\n      if (!ignoreQuote && ch=='\"') {\n        clause.isPhrase = true;\n        inString = '\"';\n        pos++;\n      }\n\n      StringBuilder sb = new StringBuilder();\n      while (pos < end) {\n        ch = s.charAt(pos++);\n        if (ch=='\\\\') {    // skip escaped chars, but leave escaped\n          sb.append(ch);\n          if (pos >= end) {\n            sb.append(ch); // double backslash if we are at the end of the string\n            break;\n          }\n          ch = s.charAt(pos++);\n          sb.append(ch);\n          continue;\n        } else if (inString != 0 && ch == inString) {\n          inString=0;\n          break;\n        } else if (Character.isWhitespace(ch)) {\n          clause.hasWhitespace=true;\n          if (inString == 0) {\n            // end of the token if we aren't in a string, backing\n            // up the position.\n            pos--;\n            break;\n          }\n        }\n\n        if (inString == 0) {\n          switch (ch) {\n            case '!':\n            case '(':\n            case ')':\n            case ':':\n            case '^':\n            case '[':\n            case ']':\n            case '{':\n            case '}':\n            case '~':\n            case '*':\n            case '?':\n            case '\"':\n            case '+':\n            case '-':\n              clause.hasSpecialSyntax = true;\n              sb.append('\\\\');\n          }\n        } else if (ch=='\"') {\n          // only char we need to escape in a string is double quote\n          sb.append('\\\\');\n        }\n        sb.append(ch);\n      }\n      clause.val = sb.toString();\n \n      if (clause.isPhrase) {\n        if (inString != 0) {\n          // detected bad quote balancing... retry\n          // parsing with quotes like any other char\n          return splitIntoClauses(s, true);\n        }\n\n        // special syntax in a string isn't special\n        clause.hasSpecialSyntax = false;        \n      } else {\n        // an empty clause... must be just a + or - on it's own\n        if (clause.val.length() == 0) {\n          clause.syntaxError = true;\n          if (clause.must != 0) {\n            clause.val=\"\\\\\"+clause.must;\n            clause.must = 0;\n            clause.hasSpecialSyntax = true;\n          } else {\n            // uh.. this shouldn't happen.\n            clause=null;\n          }\n        }\n      }\n\n      if (clause != null) {\n        clause.raw = s.substring(start, pos);\n        lst.add(clause);\n      }\n      clause = new Clause();\n    }\n\n    return lst;\n  }\n\n","sourceOld":"  public List<Clause> splitIntoClauses(String s, boolean ignoreQuote) {\n    ArrayList<Clause> lst = new ArrayList<Clause>(4);\n    Clause clause = new Clause();\n\n    int pos=0;\n    int end=s.length();\n    char ch=0;\n    int start;\n    outer: while (pos < end) {\n      ch = s.charAt(pos);\n\n      while (Character.isWhitespace(ch)) {\n        if (++pos >= end) break;\n        ch = s.charAt(pos);\n      }\n\n      start = pos;      \n\n      if (ch=='+' || ch=='-') {\n        clause.must = ch;\n        pos++;\n      }\n\n      clause.field = getFieldName(s, pos, end);\n      if (clause.field != null) {\n        pos += clause.field.length(); // skip the field name\n        pos++;  // skip the ':'\n      }\n\n      if (pos>=end) break;\n\n\n      char inString=0;\n\n      ch = s.charAt(pos);\n      if (!ignoreQuote && ch=='\"') {\n        clause.isPhrase = true;\n        inString = '\"';\n        pos++;\n      }\n\n      StringBuilder sb = new StringBuilder();\n      while (pos < end) {\n        ch = s.charAt(pos++);\n        if (ch=='\\\\') {    // skip escaped chars, but leave escaped\n          sb.append(ch);\n          if (pos >= end) {\n            sb.append(ch); // double backslash if we are at the end of the string\n            break;\n          }\n          ch = s.charAt(pos++);\n          sb.append(ch);\n          continue;\n        } else if (inString != 0 && ch == inString) {\n          inString=0;\n          break;\n        } else if (Character.isWhitespace(ch)) {\n          clause.hasWhitespace=true;\n          if (inString == 0) {\n            // end of the token if we aren't in a string, backing\n            // up the position.\n            pos--;\n            break;\n          }\n        }\n\n        if (inString == 0) {\n          switch (ch) {\n            case '!':\n            case '(':\n            case ')':\n            case ':':\n            case '^':\n            case '[':\n            case ']':\n            case '{':\n            case '}':\n            case '~':\n            case '*':\n            case '?':\n            case '\"':\n            case '+':\n            case '-':\n              clause.hasSpecialSyntax = true;\n              sb.append('\\\\');\n          }\n        } else if (ch=='\"') {\n          // only char we need to escape in a string is double quote\n          sb.append('\\\\');\n        }\n        sb.append(ch);\n      }\n      clause.val = sb.toString();\n \n      if (clause.isPhrase) {\n        if (inString != 0) {\n          // detected bad quote balancing... retry\n          // parsing with quotes like any other char\n          return splitIntoClauses(s, true);\n        }\n\n        // special syntax in a string isn't special\n        clause.hasSpecialSyntax = false;        \n      } else {\n        // an empty clause... must be just a + or - on it's own\n        if (clause.val.length() == 0) {\n          clause.syntaxError = true;\n          if (clause.must != 0) {\n            clause.val=\"\\\\\"+clause.must;\n            clause.must = 0;\n            clause.hasSpecialSyntax = true;\n          } else {\n            // uh.. this shouldn't happen.\n            clause=null;\n          }\n        }\n      }\n\n      if (clause != null) {\n        clause.raw = s.substring(start, pos);\n        lst.add(clause);\n      }\n      clause = new Clause();\n    }\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#splitIntoClauses(String,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#splitIntoClauses(String,boolean).mjava","sourceNew":"  public List<Clause> splitIntoClauses(String s, boolean ignoreQuote) {\n    ArrayList<Clause> lst = new ArrayList<Clause>(4);\n    Clause clause = new Clause();\n\n    int pos=0;\n    int end=s.length();\n    char ch=0;\n    int start;\n    outer: while (pos < end) {\n      ch = s.charAt(pos);\n\n      while (Character.isWhitespace(ch)) {\n        if (++pos >= end) break;\n        ch = s.charAt(pos);\n      }\n\n      start = pos;      \n\n      if (ch=='+' || ch=='-') {\n        clause.must = ch;\n        pos++;\n      }\n\n      clause.field = getFieldName(s, pos, end);\n      if (clause.field != null) {\n        pos += clause.field.length(); // skip the field name\n        pos++;  // skip the ':'\n      }\n\n      if (pos>=end) break;\n\n\n      char inString=0;\n\n      ch = s.charAt(pos);\n      if (!ignoreQuote && ch=='\"') {\n        clause.isPhrase = true;\n        inString = '\"';\n        pos++;\n      }\n\n      StringBuilder sb = new StringBuilder();\n      while (pos < end) {\n        ch = s.charAt(pos++);\n        if (ch=='\\\\') {    // skip escaped chars, but leave escaped\n          sb.append(ch);\n          if (pos >= end) {\n            sb.append(ch); // double backslash if we are at the end of the string\n            break;\n          }\n          ch = s.charAt(pos++);\n          sb.append(ch);\n          continue;\n        } else if (inString != 0 && ch == inString) {\n          inString=0;\n          break;\n        } else if (Character.isWhitespace(ch)) {\n          clause.hasWhitespace=true;\n          if (inString == 0) {\n            // end of the token if we aren't in a string, backing\n            // up the position.\n            pos--;\n            break;\n          }\n        }\n\n        if (inString == 0) {\n          switch (ch) {\n            case '!':\n            case '(':\n            case ')':\n            case ':':\n            case '^':\n            case '[':\n            case ']':\n            case '{':\n            case '}':\n            case '~':\n            case '*':\n            case '?':\n            case '\"':\n            case '+':\n            case '-':\n              clause.hasSpecialSyntax = true;\n              sb.append('\\\\');\n          }\n        } else if (ch=='\"') {\n          // only char we need to escape in a string is double quote\n          sb.append('\\\\');\n        }\n        sb.append(ch);\n      }\n      clause.val = sb.toString();\n \n      if (clause.isPhrase) {\n        if (inString != 0) {\n          // detected bad quote balancing... retry\n          // parsing with quotes like any other char\n          return splitIntoClauses(s, true);\n        }\n\n        // special syntax in a string isn't special\n        clause.hasSpecialSyntax = false;        \n      } else {\n        // an empty clause... must be just a + or - on it's own\n        if (clause.val.length() == 0) {\n          clause.syntaxError = true;\n          if (clause.must != 0) {\n            clause.val=\"\\\\\"+clause.must;\n            clause.must = 0;\n            clause.hasSpecialSyntax = true;\n          } else {\n            // uh.. this shouldn't happen.\n            clause=null;\n          }\n        }\n      }\n\n      if (clause != null) {\n        clause.raw = s.substring(start, pos);\n        lst.add(clause);\n      }\n      clause = new Clause();\n    }\n\n    return lst;\n  }\n\n","sourceOld":"  public List<Clause> splitIntoClauses(String s, boolean ignoreQuote) {\n    ArrayList<Clause> lst = new ArrayList<Clause>(4);\n    Clause clause = new Clause();\n\n    int pos=0;\n    int end=s.length();\n    char ch=0;\n    int start;\n    outer: while (pos < end) {\n      ch = s.charAt(pos);\n\n      while (Character.isWhitespace(ch)) {\n        if (++pos >= end) break;\n        ch = s.charAt(pos);\n      }\n\n      start = pos;      \n\n      if (ch=='+' || ch=='-') {\n        clause.must = ch;\n        pos++;\n      }\n\n      clause.field = getFieldName(s, pos, end);\n      if (clause.field != null) {\n        pos += clause.field.length(); // skip the field name\n        pos++;  // skip the ':'\n      }\n\n      if (pos>=end) break;\n\n\n      char inString=0;\n\n      ch = s.charAt(pos);\n      if (!ignoreQuote && ch=='\"') {\n        clause.isPhrase = true;\n        inString = '\"';\n        pos++;\n      }\n\n      StringBuilder sb = new StringBuilder();\n      while (pos < end) {\n        ch = s.charAt(pos++);\n        if (ch=='\\\\') {    // skip escaped chars, but leave escaped\n          sb.append(ch);\n          if (pos >= end) {\n            sb.append(ch); // double backslash if we are at the end of the string\n            break;\n          }\n          ch = s.charAt(pos++);\n          sb.append(ch);\n          continue;\n        } else if (inString != 0 && ch == inString) {\n          inString=0;\n          break;\n        } else if (Character.isWhitespace(ch)) {\n          clause.hasWhitespace=true;\n          if (inString == 0) {\n            // end of the token if we aren't in a string, backing\n            // up the position.\n            pos--;\n            break;\n          }\n        }\n\n        if (inString == 0) {\n          switch (ch) {\n            case '!':\n            case '(':\n            case ')':\n            case ':':\n            case '^':\n            case '[':\n            case ']':\n            case '{':\n            case '}':\n            case '~':\n            case '*':\n            case '?':\n            case '\"':\n            case '+':\n            case '-':\n              clause.hasSpecialSyntax = true;\n              sb.append('\\\\');\n          }\n        } else if (ch=='\"') {\n          // only char we need to escape in a string is double quote\n          sb.append('\\\\');\n        }\n        sb.append(ch);\n      }\n      clause.val = sb.toString();\n \n      if (clause.isPhrase) {\n        if (inString != 0) {\n          // detected bad quote balancing... retry\n          // parsing with quotes like any other char\n          return splitIntoClauses(s, true);\n        }\n\n        // special syntax in a string isn't special\n        clause.hasSpecialSyntax = false;        \n      } else {\n        // an empty clause... must be just a + or - on it's own\n        if (clause.val.length() == 0) {\n          clause.syntaxError = true;\n          if (clause.must != 0) {\n            clause.val=\"\\\\\"+clause.must;\n            clause.must = 0;\n            clause.hasSpecialSyntax = true;\n          } else {\n            // uh.. this shouldn't happen.\n            clause=null;\n          }\n        }\n      }\n\n      if (clause != null) {\n        clause.raw = s.substring(start, pos);\n        lst.add(clause);\n      }\n      clause = new Clause();\n    }\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#splitIntoClauses(String,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#splitIntoClauses(String,boolean).mjava","sourceNew":"  public List<Clause> splitIntoClauses(String s, boolean ignoreQuote) {\n    ArrayList<Clause> lst = new ArrayList<Clause>(4);\n    Clause clause = new Clause();\n\n    int pos=0;\n    int end=s.length();\n    char ch=0;\n    int start;\n    outer: while (pos < end) {\n      ch = s.charAt(pos);\n\n      while (Character.isWhitespace(ch)) {\n        if (++pos >= end) break;\n        ch = s.charAt(pos);\n      }\n\n      start = pos;      \n\n      if (ch=='+' || ch=='-') {\n        clause.must = ch;\n        pos++;\n      }\n\n      clause.field = getFieldName(s, pos, end);\n      if (clause.field != null) {\n        pos += clause.field.length(); // skip the field name\n        pos++;  // skip the ':'\n      }\n\n      if (pos>=end) break;\n\n\n      char inString=0;\n\n      ch = s.charAt(pos);\n      if (!ignoreQuote && ch=='\"') {\n        clause.isPhrase = true;\n        inString = '\"';\n        pos++;\n      }\n\n      StringBuilder sb = new StringBuilder();\n      while (pos < end) {\n        ch = s.charAt(pos++);\n        if (ch=='\\\\') {    // skip escaped chars, but leave escaped\n          sb.append(ch);\n          if (pos >= end) {\n            sb.append(ch); // double backslash if we are at the end of the string\n            break;\n          }\n          ch = s.charAt(pos++);\n          sb.append(ch);\n          continue;\n        } else if (inString != 0 && ch == inString) {\n          inString=0;\n          break;\n        } else if (Character.isWhitespace(ch)) {\n          clause.hasWhitespace=true;\n          if (inString == 0) {\n            // end of the token if we aren't in a string, backing\n            // up the position.\n            pos--;\n            break;\n          }\n        }\n\n        if (inString == 0) {\n          switch (ch) {\n            case '!':\n            case '(':\n            case ')':\n            case ':':\n            case '^':\n            case '[':\n            case ']':\n            case '{':\n            case '}':\n            case '~':\n            case '*':\n            case '?':\n            case '\"':\n            case '+':\n            case '-':\n              clause.hasSpecialSyntax = true;\n              sb.append('\\\\');\n          }\n        } else if (ch=='\"') {\n          // only char we need to escape in a string is double quote\n          sb.append('\\\\');\n        }\n        sb.append(ch);\n      }\n      clause.val = sb.toString();\n \n      if (clause.isPhrase) {\n        if (inString != 0) {\n          // detected bad quote balancing... retry\n          // parsing with quotes like any other char\n          return splitIntoClauses(s, true);\n        }\n\n        // special syntax in a string isn't special\n        clause.hasSpecialSyntax = false;        \n      } else {\n        // an empty clause... must be just a + or - on it's own\n        if (clause.val.length() == 0) {\n          clause.syntaxError = true;\n          if (clause.must != 0) {\n            clause.val=\"\\\\\"+clause.must;\n            clause.must = 0;\n            clause.hasSpecialSyntax = true;\n          } else {\n            // uh.. this shouldn't happen.\n            clause=null;\n          }\n        }\n      }\n\n      if (clause != null) {\n        clause.raw = s.substring(start, pos);\n        lst.add(clause);\n      }\n      clause = new Clause();\n    }\n\n    return lst;\n  }\n\n","sourceOld":"  public List<Clause> splitIntoClauses(String s, boolean ignoreQuote) {\n    ArrayList<Clause> lst = new ArrayList<Clause>(4);\n    Clause clause = new Clause();\n\n    int pos=0;\n    int end=s.length();\n    char ch=0;\n    int start;\n    outer: while (pos < end) {\n      ch = s.charAt(pos);\n\n      while (Character.isWhitespace(ch)) {\n        if (++pos >= end) break;\n        ch = s.charAt(pos);\n      }\n\n      start = pos;      \n\n      if (ch=='+' || ch=='-') {\n        clause.must = ch;\n        pos++;\n      }\n\n      clause.field = getFieldName(s, pos, end);\n      if (clause.field != null) {\n        pos += clause.field.length(); // skip the field name\n        pos++;  // skip the ':'\n      }\n\n      if (pos>=end) break;\n\n\n      char inString=0;\n\n      ch = s.charAt(pos);\n      if (!ignoreQuote && ch=='\"') {\n        clause.isPhrase = true;\n        inString = '\"';\n        pos++;\n      }\n\n      StringBuilder sb = new StringBuilder();\n      while (pos < end) {\n        ch = s.charAt(pos++);\n        if (ch=='\\\\') {    // skip escaped chars, but leave escaped\n          sb.append(ch);\n          if (pos >= end) {\n            sb.append(ch); // double backslash if we are at the end of the string\n            break;\n          }\n          ch = s.charAt(pos++);\n          sb.append(ch);\n          continue;\n        } else if (inString != 0 && ch == inString) {\n          inString=0;\n          break;\n        } else if (Character.isWhitespace(ch)) {\n          clause.hasWhitespace=true;\n          if (inString == 0) {\n            // end of the token if we aren't in a string, backing\n            // up the position.\n            pos--;\n            break;\n          }\n        }\n\n        if (inString == 0) {\n          switch (ch) {\n            case '!':\n            case '(':\n            case ')':\n            case ':':\n            case '^':\n            case '[':\n            case ']':\n            case '{':\n            case '}':\n            case '~':\n            case '*':\n            case '?':\n            case '\"':\n            case '+':\n            case '-':\n              clause.hasSpecialSyntax = true;\n              sb.append('\\\\');\n          }\n        } else if (ch=='\"') {\n          // only char we need to escape in a string is double quote\n          sb.append('\\\\');\n        }\n        sb.append(ch);\n      }\n      clause.val = sb.toString();\n \n      if (clause.isPhrase) {\n        if (inString != 0) {\n          // detected bad quote balancing... retry\n          // parsing with quotes like any other char\n          return splitIntoClauses(s, true);\n        }\n\n        // special syntax in a string isn't special\n        clause.hasSpecialSyntax = false;        \n      } else {\n        // an empty clause... must be just a + or - on it's own\n        if (clause.val.length() == 0) {\n          clause.syntaxError = true;\n          if (clause.must != 0) {\n            clause.val=\"\\\\\"+clause.must;\n            clause.must = 0;\n            clause.hasSpecialSyntax = true;\n          } else {\n            // uh.. this shouldn't happen.\n            clause=null;\n          }\n        }\n      }\n\n      if (clause != null) {\n        clause.raw = s.substring(start, pos);\n        lst.add(clause);\n      }\n      clause = new Clause();\n    }\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"245c71087515ed70d4fb9d9484f9dcbd79eebdfc","date":1331372561,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#splitIntoClauses(String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#splitIntoClauses(String,boolean).mjava","sourceNew":"  public List<Clause> splitIntoClauses(String s, boolean ignoreQuote) {\n    ArrayList<Clause> lst = new ArrayList<Clause>(4);\n    Clause clause = new Clause();\n\n    int pos=0;\n    int end=s.length();\n    char ch=0;\n    int start;\n    boolean disallowUserField = false;\n    outer: while (pos < end) {\n      ch = s.charAt(pos);\n\n      while (Character.isWhitespace(ch)) {\n        if (++pos >= end) break;\n        ch = s.charAt(pos);\n      }\n\n      start = pos;      \n\n      if (ch=='+' || ch=='-') {\n        clause.must = ch;\n        pos++;\n      }\n\n      clause.field = getFieldName(s, pos, end);\n      if(clause.field != null && !userFields.isAllowed(clause.field)) {\n        disallowUserField = true;\n        clause.field = null;\n      }\n      if (clause.field != null) {\n        pos += clause.field.length(); // skip the field name\n        pos++;  // skip the ':'\n      }\n\n      if (pos>=end) break;\n\n\n      char inString=0;\n\n      ch = s.charAt(pos);\n      if (!ignoreQuote && ch=='\"') {\n        clause.isPhrase = true;\n        inString = '\"';\n        pos++;\n      }\n\n      StringBuilder sb = new StringBuilder();\n      while (pos < end) {\n        ch = s.charAt(pos++);\n        if (ch=='\\\\') {    // skip escaped chars, but leave escaped\n          sb.append(ch);\n          if (pos >= end) {\n            sb.append(ch); // double backslash if we are at the end of the string\n            break;\n          }\n          ch = s.charAt(pos++);\n          sb.append(ch);\n          continue;\n        } else if (inString != 0 && ch == inString) {\n          inString=0;\n          break;\n        } else if (Character.isWhitespace(ch)) {\n          clause.hasWhitespace=true;\n          if (inString == 0) {\n            // end of the token if we aren't in a string, backing\n            // up the position.\n            pos--;\n            break;\n          }\n        }\n\n        if (inString == 0) {\n          switch (ch) {\n            case '!':\n            case '(':\n            case ')':\n            case ':':\n            case '^':\n            case '[':\n            case ']':\n            case '{':\n            case '}':\n            case '~':\n            case '*':\n            case '?':\n            case '\"':\n            case '+':\n            case '-':\n              clause.hasSpecialSyntax = true;\n              sb.append('\\\\');\n          }\n        } else if (ch=='\"') {\n          // only char we need to escape in a string is double quote\n          sb.append('\\\\');\n        }\n        sb.append(ch);\n      }\n      clause.val = sb.toString();\n \n      if (clause.isPhrase) {\n        if (inString != 0) {\n          // detected bad quote balancing... retry\n          // parsing with quotes like any other char\n          return splitIntoClauses(s, true);\n        }\n\n        // special syntax in a string isn't special\n        clause.hasSpecialSyntax = false;        \n      } else {\n        // an empty clause... must be just a + or - on it's own\n        if (clause.val.length() == 0) {\n          clause.syntaxError = true;\n          if (clause.must != 0) {\n            clause.val=\"\\\\\"+clause.must;\n            clause.must = 0;\n            clause.hasSpecialSyntax = true;\n          } else {\n            // uh.. this shouldn't happen.\n            clause=null;\n          }\n        }\n      }\n\n      if (clause != null) {\n        if(disallowUserField) {\n          clause.raw = clause.val;\n        } else {\n          clause.raw = s.substring(start, pos);\n          // Add default userField boost if no explicit boost exists\n          if(userFields.isAllowed(clause.field) && !clause.raw.contains(\"^\")) {\n            Float boost = userFields.getBoost(clause.field);\n            if(boost != null)\n              clause.raw += \"^\" + boost;\n          }\n        }\n        lst.add(clause);\n      }\n      clause = new Clause();\n      disallowUserField = false;\n    }\n\n    return lst;\n  }\n\n","sourceOld":"  public List<Clause> splitIntoClauses(String s, boolean ignoreQuote) {\n    ArrayList<Clause> lst = new ArrayList<Clause>(4);\n    Clause clause = new Clause();\n\n    int pos=0;\n    int end=s.length();\n    char ch=0;\n    int start;\n    outer: while (pos < end) {\n      ch = s.charAt(pos);\n\n      while (Character.isWhitespace(ch)) {\n        if (++pos >= end) break;\n        ch = s.charAt(pos);\n      }\n\n      start = pos;      \n\n      if (ch=='+' || ch=='-') {\n        clause.must = ch;\n        pos++;\n      }\n\n      clause.field = getFieldName(s, pos, end);\n      if (clause.field != null) {\n        pos += clause.field.length(); // skip the field name\n        pos++;  // skip the ':'\n      }\n\n      if (pos>=end) break;\n\n\n      char inString=0;\n\n      ch = s.charAt(pos);\n      if (!ignoreQuote && ch=='\"') {\n        clause.isPhrase = true;\n        inString = '\"';\n        pos++;\n      }\n\n      StringBuilder sb = new StringBuilder();\n      while (pos < end) {\n        ch = s.charAt(pos++);\n        if (ch=='\\\\') {    // skip escaped chars, but leave escaped\n          sb.append(ch);\n          if (pos >= end) {\n            sb.append(ch); // double backslash if we are at the end of the string\n            break;\n          }\n          ch = s.charAt(pos++);\n          sb.append(ch);\n          continue;\n        } else if (inString != 0 && ch == inString) {\n          inString=0;\n          break;\n        } else if (Character.isWhitespace(ch)) {\n          clause.hasWhitespace=true;\n          if (inString == 0) {\n            // end of the token if we aren't in a string, backing\n            // up the position.\n            pos--;\n            break;\n          }\n        }\n\n        if (inString == 0) {\n          switch (ch) {\n            case '!':\n            case '(':\n            case ')':\n            case ':':\n            case '^':\n            case '[':\n            case ']':\n            case '{':\n            case '}':\n            case '~':\n            case '*':\n            case '?':\n            case '\"':\n            case '+':\n            case '-':\n              clause.hasSpecialSyntax = true;\n              sb.append('\\\\');\n          }\n        } else if (ch=='\"') {\n          // only char we need to escape in a string is double quote\n          sb.append('\\\\');\n        }\n        sb.append(ch);\n      }\n      clause.val = sb.toString();\n \n      if (clause.isPhrase) {\n        if (inString != 0) {\n          // detected bad quote balancing... retry\n          // parsing with quotes like any other char\n          return splitIntoClauses(s, true);\n        }\n\n        // special syntax in a string isn't special\n        clause.hasSpecialSyntax = false;        \n      } else {\n        // an empty clause... must be just a + or - on it's own\n        if (clause.val.length() == 0) {\n          clause.syntaxError = true;\n          if (clause.must != 0) {\n            clause.val=\"\\\\\"+clause.must;\n            clause.must = 0;\n            clause.hasSpecialSyntax = true;\n          } else {\n            // uh.. this shouldn't happen.\n            clause=null;\n          }\n        }\n      }\n\n      if (clause != null) {\n        clause.raw = s.substring(start, pos);\n        lst.add(clause);\n      }\n      clause = new Clause();\n    }\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":["08cff58bd13a83c87cda0cc4ddae2aec9c35964f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#splitIntoClauses(String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#splitIntoClauses(String,boolean).mjava","sourceNew":"  public List<Clause> splitIntoClauses(String s, boolean ignoreQuote) {\n    ArrayList<Clause> lst = new ArrayList<Clause>(4);\n    Clause clause = new Clause();\n\n    int pos=0;\n    int end=s.length();\n    char ch=0;\n    int start;\n    boolean disallowUserField = false;\n    outer: while (pos < end) {\n      ch = s.charAt(pos);\n\n      while (Character.isWhitespace(ch)) {\n        if (++pos >= end) break;\n        ch = s.charAt(pos);\n      }\n\n      start = pos;      \n\n      if (ch=='+' || ch=='-') {\n        clause.must = ch;\n        pos++;\n      }\n\n      clause.field = getFieldName(s, pos, end);\n      if(clause.field != null && !userFields.isAllowed(clause.field)) {\n        disallowUserField = true;\n        clause.field = null;\n      }\n      if (clause.field != null) {\n        pos += clause.field.length(); // skip the field name\n        pos++;  // skip the ':'\n      }\n\n      if (pos>=end) break;\n\n\n      char inString=0;\n\n      ch = s.charAt(pos);\n      if (!ignoreQuote && ch=='\"') {\n        clause.isPhrase = true;\n        inString = '\"';\n        pos++;\n      }\n\n      StringBuilder sb = new StringBuilder();\n      while (pos < end) {\n        ch = s.charAt(pos++);\n        if (ch=='\\\\') {    // skip escaped chars, but leave escaped\n          sb.append(ch);\n          if (pos >= end) {\n            sb.append(ch); // double backslash if we are at the end of the string\n            break;\n          }\n          ch = s.charAt(pos++);\n          sb.append(ch);\n          continue;\n        } else if (inString != 0 && ch == inString) {\n          inString=0;\n          break;\n        } else if (Character.isWhitespace(ch)) {\n          clause.hasWhitespace=true;\n          if (inString == 0) {\n            // end of the token if we aren't in a string, backing\n            // up the position.\n            pos--;\n            break;\n          }\n        }\n\n        if (inString == 0) {\n          switch (ch) {\n            case '!':\n            case '(':\n            case ')':\n            case ':':\n            case '^':\n            case '[':\n            case ']':\n            case '{':\n            case '}':\n            case '~':\n            case '*':\n            case '?':\n            case '\"':\n            case '+':\n            case '-':\n              clause.hasSpecialSyntax = true;\n              sb.append('\\\\');\n          }\n        } else if (ch=='\"') {\n          // only char we need to escape in a string is double quote\n          sb.append('\\\\');\n        }\n        sb.append(ch);\n      }\n      clause.val = sb.toString();\n \n      if (clause.isPhrase) {\n        if (inString != 0) {\n          // detected bad quote balancing... retry\n          // parsing with quotes like any other char\n          return splitIntoClauses(s, true);\n        }\n\n        // special syntax in a string isn't special\n        clause.hasSpecialSyntax = false;        \n      } else {\n        // an empty clause... must be just a + or - on it's own\n        if (clause.val.length() == 0) {\n          clause.syntaxError = true;\n          if (clause.must != 0) {\n            clause.val=\"\\\\\"+clause.must;\n            clause.must = 0;\n            clause.hasSpecialSyntax = true;\n          } else {\n            // uh.. this shouldn't happen.\n            clause=null;\n          }\n        }\n      }\n\n      if (clause != null) {\n        if(disallowUserField) {\n          clause.raw = clause.val;\n        } else {\n          clause.raw = s.substring(start, pos);\n          // Add default userField boost if no explicit boost exists\n          if(userFields.isAllowed(clause.field) && !clause.raw.contains(\"^\")) {\n            Float boost = userFields.getBoost(clause.field);\n            if(boost != null)\n              clause.raw += \"^\" + boost;\n          }\n        }\n        lst.add(clause);\n      }\n      clause = new Clause();\n      disallowUserField = false;\n    }\n\n    return lst;\n  }\n\n","sourceOld":"  public List<Clause> splitIntoClauses(String s, boolean ignoreQuote) {\n    ArrayList<Clause> lst = new ArrayList<Clause>(4);\n    Clause clause = new Clause();\n\n    int pos=0;\n    int end=s.length();\n    char ch=0;\n    int start;\n    outer: while (pos < end) {\n      ch = s.charAt(pos);\n\n      while (Character.isWhitespace(ch)) {\n        if (++pos >= end) break;\n        ch = s.charAt(pos);\n      }\n\n      start = pos;      \n\n      if (ch=='+' || ch=='-') {\n        clause.must = ch;\n        pos++;\n      }\n\n      clause.field = getFieldName(s, pos, end);\n      if (clause.field != null) {\n        pos += clause.field.length(); // skip the field name\n        pos++;  // skip the ':'\n      }\n\n      if (pos>=end) break;\n\n\n      char inString=0;\n\n      ch = s.charAt(pos);\n      if (!ignoreQuote && ch=='\"') {\n        clause.isPhrase = true;\n        inString = '\"';\n        pos++;\n      }\n\n      StringBuilder sb = new StringBuilder();\n      while (pos < end) {\n        ch = s.charAt(pos++);\n        if (ch=='\\\\') {    // skip escaped chars, but leave escaped\n          sb.append(ch);\n          if (pos >= end) {\n            sb.append(ch); // double backslash if we are at the end of the string\n            break;\n          }\n          ch = s.charAt(pos++);\n          sb.append(ch);\n          continue;\n        } else if (inString != 0 && ch == inString) {\n          inString=0;\n          break;\n        } else if (Character.isWhitespace(ch)) {\n          clause.hasWhitespace=true;\n          if (inString == 0) {\n            // end of the token if we aren't in a string, backing\n            // up the position.\n            pos--;\n            break;\n          }\n        }\n\n        if (inString == 0) {\n          switch (ch) {\n            case '!':\n            case '(':\n            case ')':\n            case ':':\n            case '^':\n            case '[':\n            case ']':\n            case '{':\n            case '}':\n            case '~':\n            case '*':\n            case '?':\n            case '\"':\n            case '+':\n            case '-':\n              clause.hasSpecialSyntax = true;\n              sb.append('\\\\');\n          }\n        } else if (ch=='\"') {\n          // only char we need to escape in a string is double quote\n          sb.append('\\\\');\n        }\n        sb.append(ch);\n      }\n      clause.val = sb.toString();\n \n      if (clause.isPhrase) {\n        if (inString != 0) {\n          // detected bad quote balancing... retry\n          // parsing with quotes like any other char\n          return splitIntoClauses(s, true);\n        }\n\n        // special syntax in a string isn't special\n        clause.hasSpecialSyntax = false;        \n      } else {\n        // an empty clause... must be just a + or - on it's own\n        if (clause.val.length() == 0) {\n          clause.syntaxError = true;\n          if (clause.must != 0) {\n            clause.val=\"\\\\\"+clause.must;\n            clause.must = 0;\n            clause.hasSpecialSyntax = true;\n          } else {\n            // uh.. this shouldn't happen.\n            clause=null;\n          }\n        }\n      }\n\n      if (clause != null) {\n        clause.raw = s.substring(start, pos);\n        lst.add(clause);\n      }\n      clause = new Clause();\n    }\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08cff58bd13a83c87cda0cc4ddae2aec9c35964f","date":1332890691,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#splitIntoClauses(String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#splitIntoClauses(String,boolean).mjava","sourceNew":"  public List<Clause> splitIntoClauses(String s, boolean ignoreQuote) {\n    ArrayList<Clause> lst = new ArrayList<Clause>(4);\n    Clause clause;\n\n    int pos=0;\n    int end=s.length();\n    char ch=0;\n    int start;\n    boolean disallowUserField;\n    outer: while (pos < end) {\n      clause = new Clause();\n      disallowUserField = true;\n      \n      ch = s.charAt(pos);\n\n      while (Character.isWhitespace(ch)) {\n        if (++pos >= end) break;\n        ch = s.charAt(pos);\n      }\n\n      start = pos;      \n\n      if (ch=='+' || ch=='-') {\n        clause.must = ch;\n        pos++;\n      }\n\n      clause.field = getFieldName(s, pos, end);\n      if(clause.field != null && !userFields.isAllowed(clause.field)) {\n        clause.field = null;\n      }\n      if (clause.field != null) {\n        disallowUserField = false;\n        pos += clause.field.length(); // skip the field name\n        pos++;  // skip the ':'\n      }\n\n      if (pos>=end) break;\n\n\n      char inString=0;\n\n      ch = s.charAt(pos);\n      if (!ignoreQuote && ch=='\"') {\n        clause.isPhrase = true;\n        inString = '\"';\n        pos++;\n      }\n\n      StringBuilder sb = new StringBuilder();\n      while (pos < end) {\n        ch = s.charAt(pos++);\n        if (ch=='\\\\') {    // skip escaped chars, but leave escaped\n          sb.append(ch);\n          if (pos >= end) {\n            sb.append(ch); // double backslash if we are at the end of the string\n            break;\n          }\n          ch = s.charAt(pos++);\n          sb.append(ch);\n          continue;\n        } else if (inString != 0 && ch == inString) {\n          inString=0;\n          break;\n        } else if (Character.isWhitespace(ch)) {\n          clause.hasWhitespace=true;\n          if (inString == 0) {\n            // end of the token if we aren't in a string, backing\n            // up the position.\n            pos--;\n            break;\n          }\n        }\n\n        if (inString == 0) {\n          switch (ch) {\n            case '!':\n            case '(':\n            case ')':\n            case ':':\n            case '^':\n            case '[':\n            case ']':\n            case '{':\n            case '}':\n            case '~':\n            case '*':\n            case '?':\n            case '\"':\n            case '+':\n            case '-':\n              clause.hasSpecialSyntax = true;\n              sb.append('\\\\');\n          }\n        } else if (ch=='\"') {\n          // only char we need to escape in a string is double quote\n          sb.append('\\\\');\n        }\n        sb.append(ch);\n      }\n      clause.val = sb.toString();\n \n      if (clause.isPhrase) {\n        if (inString != 0) {\n          // detected bad quote balancing... retry\n          // parsing with quotes like any other char\n          return splitIntoClauses(s, true);\n        }\n\n        // special syntax in a string isn't special\n        clause.hasSpecialSyntax = false;        \n      } else {\n        // an empty clause... must be just a + or - on it's own\n        if (clause.val.length() == 0) {\n          clause.syntaxError = true;\n          if (clause.must != 0) {\n            clause.val=\"\\\\\"+clause.must;\n            clause.must = 0;\n            clause.hasSpecialSyntax = true;\n          } else {\n            // uh.. this shouldn't happen.\n            clause=null;\n          }\n        }\n      }\n\n      if (clause != null) {\n        if(disallowUserField) {\n          clause.raw = s.substring(start, pos);\n          // escape colons, except for \"match all\" query\n          if(!\"*:*\".equals(clause.raw)) {\n            clause.raw = clause.raw.replaceAll(\":\", \"\\\\\\\\:\");\n          }\n        } else {\n          clause.raw = s.substring(start, pos);\n          // Add default userField boost if no explicit boost exists\n          if(userFields.isAllowed(clause.field) && !clause.raw.contains(\"^\")) {\n            Float boost = userFields.getBoost(clause.field);\n            if(boost != null)\n              clause.raw += \"^\" + boost;\n          }\n        }\n        lst.add(clause);\n      }\n    }\n\n    return lst;\n  }\n\n","sourceOld":"  public List<Clause> splitIntoClauses(String s, boolean ignoreQuote) {\n    ArrayList<Clause> lst = new ArrayList<Clause>(4);\n    Clause clause = new Clause();\n\n    int pos=0;\n    int end=s.length();\n    char ch=0;\n    int start;\n    boolean disallowUserField = false;\n    outer: while (pos < end) {\n      ch = s.charAt(pos);\n\n      while (Character.isWhitespace(ch)) {\n        if (++pos >= end) break;\n        ch = s.charAt(pos);\n      }\n\n      start = pos;      \n\n      if (ch=='+' || ch=='-') {\n        clause.must = ch;\n        pos++;\n      }\n\n      clause.field = getFieldName(s, pos, end);\n      if(clause.field != null && !userFields.isAllowed(clause.field)) {\n        disallowUserField = true;\n        clause.field = null;\n      }\n      if (clause.field != null) {\n        pos += clause.field.length(); // skip the field name\n        pos++;  // skip the ':'\n      }\n\n      if (pos>=end) break;\n\n\n      char inString=0;\n\n      ch = s.charAt(pos);\n      if (!ignoreQuote && ch=='\"') {\n        clause.isPhrase = true;\n        inString = '\"';\n        pos++;\n      }\n\n      StringBuilder sb = new StringBuilder();\n      while (pos < end) {\n        ch = s.charAt(pos++);\n        if (ch=='\\\\') {    // skip escaped chars, but leave escaped\n          sb.append(ch);\n          if (pos >= end) {\n            sb.append(ch); // double backslash if we are at the end of the string\n            break;\n          }\n          ch = s.charAt(pos++);\n          sb.append(ch);\n          continue;\n        } else if (inString != 0 && ch == inString) {\n          inString=0;\n          break;\n        } else if (Character.isWhitespace(ch)) {\n          clause.hasWhitespace=true;\n          if (inString == 0) {\n            // end of the token if we aren't in a string, backing\n            // up the position.\n            pos--;\n            break;\n          }\n        }\n\n        if (inString == 0) {\n          switch (ch) {\n            case '!':\n            case '(':\n            case ')':\n            case ':':\n            case '^':\n            case '[':\n            case ']':\n            case '{':\n            case '}':\n            case '~':\n            case '*':\n            case '?':\n            case '\"':\n            case '+':\n            case '-':\n              clause.hasSpecialSyntax = true;\n              sb.append('\\\\');\n          }\n        } else if (ch=='\"') {\n          // only char we need to escape in a string is double quote\n          sb.append('\\\\');\n        }\n        sb.append(ch);\n      }\n      clause.val = sb.toString();\n \n      if (clause.isPhrase) {\n        if (inString != 0) {\n          // detected bad quote balancing... retry\n          // parsing with quotes like any other char\n          return splitIntoClauses(s, true);\n        }\n\n        // special syntax in a string isn't special\n        clause.hasSpecialSyntax = false;        \n      } else {\n        // an empty clause... must be just a + or - on it's own\n        if (clause.val.length() == 0) {\n          clause.syntaxError = true;\n          if (clause.must != 0) {\n            clause.val=\"\\\\\"+clause.must;\n            clause.must = 0;\n            clause.hasSpecialSyntax = true;\n          } else {\n            // uh.. this shouldn't happen.\n            clause=null;\n          }\n        }\n      }\n\n      if (clause != null) {\n        if(disallowUserField) {\n          clause.raw = clause.val;\n        } else {\n          clause.raw = s.substring(start, pos);\n          // Add default userField boost if no explicit boost exists\n          if(userFields.isAllowed(clause.field) && !clause.raw.contains(\"^\")) {\n            Float boost = userFields.getBoost(clause.field);\n            if(boost != null)\n              clause.raw += \"^\" + boost;\n          }\n        }\n        lst.add(clause);\n      }\n      clause = new Clause();\n      disallowUserField = false;\n    }\n\n    return lst;\n  }\n\n","bugFix":["245c71087515ed70d4fb9d9484f9dcbd79eebdfc","20349324eb18d1565d301e59be543989f38743d3"],"bugIntro":["60997f5d1d0f634df710a5a770d57903c4b0d38b","60997f5d1d0f634df710a5a770d57903c4b0d38b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"78513ec977dc489ecf0d3dbce84ebd18ff7a43c1","date":1340873819,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#splitIntoClauses(String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#splitIntoClauses(String,boolean).mjava","sourceNew":"  public List<Clause> splitIntoClauses(String s, boolean ignoreQuote) {\n    ArrayList<Clause> lst = new ArrayList<Clause>(4);\n    Clause clause;\n\n    int pos=0;\n    int end=s.length();\n    char ch=0;\n    int start;\n    boolean disallowUserField;\n    outer: while (pos < end) {\n      clause = new Clause();\n      disallowUserField = true;\n      \n      ch = s.charAt(pos);\n\n      while (Character.isWhitespace(ch)) {\n        if (++pos >= end) break;\n        ch = s.charAt(pos);\n      }\n\n      start = pos;      \n\n      if (ch=='+' || ch=='-') {\n        clause.must = ch;\n        pos++;\n      }\n\n      clause.field = getFieldName(s, pos, end);\n      if(clause.field != null && !userFields.isAllowed(clause.field)) {\n        clause.field = null;\n      }\n      if (clause.field != null) {\n        disallowUserField = false;\n        pos += clause.field.length(); // skip the field name\n        pos++;  // skip the ':'\n      }\n\n      if (pos>=end) break;\n\n\n      char inString=0;\n\n      ch = s.charAt(pos);\n      if (!ignoreQuote && ch=='\"') {\n        clause.isPhrase = true;\n        inString = '\"';\n        pos++;\n      }\n\n      StringBuilder sb = new StringBuilder();\n      while (pos < end) {\n        ch = s.charAt(pos++);\n        if (ch=='\\\\') {    // skip escaped chars, but leave escaped\n          sb.append(ch);\n          if (pos >= end) {\n            sb.append(ch); // double backslash if we are at the end of the string\n            break;\n          }\n          ch = s.charAt(pos++);\n          sb.append(ch);\n          continue;\n        } else if (inString != 0 && ch == inString) {\n          inString=0;\n          break;\n        } else if (Character.isWhitespace(ch)) {\n          clause.hasWhitespace=true;\n          if (inString == 0) {\n            // end of the token if we aren't in a string, backing\n            // up the position.\n            pos--;\n            break;\n          }\n        }\n\n        if (inString == 0) {\n          switch (ch) {\n            case '!':\n            case '(':\n            case ')':\n            case ':':\n            case '^':\n            case '[':\n            case ']':\n            case '{':\n            case '}':\n            case '~':\n            case '*':\n            case '?':\n            case '\"':\n            case '+':\n            case '-':\n            case '\\\\':\n            case '|':\n            case '&':\n            case '/':\n              clause.hasSpecialSyntax = true;\n              sb.append('\\\\');\n          }\n        } else if (ch=='\"') {\n          // only char we need to escape in a string is double quote\n          sb.append('\\\\');\n        }\n        sb.append(ch);\n      }\n      clause.val = sb.toString();\n \n      if (clause.isPhrase) {\n        if (inString != 0) {\n          // detected bad quote balancing... retry\n          // parsing with quotes like any other char\n          return splitIntoClauses(s, true);\n        }\n\n        // special syntax in a string isn't special\n        clause.hasSpecialSyntax = false;        \n      } else {\n        // an empty clause... must be just a + or - on it's own\n        if (clause.val.length() == 0) {\n          clause.syntaxError = true;\n          if (clause.must != 0) {\n            clause.val=\"\\\\\"+clause.must;\n            clause.must = 0;\n            clause.hasSpecialSyntax = true;\n          } else {\n            // uh.. this shouldn't happen.\n            clause=null;\n          }\n        }\n      }\n\n      if (clause != null) {\n        if(disallowUserField) {\n          clause.raw = s.substring(start, pos);\n          // escape colons, except for \"match all\" query\n          if(!\"*:*\".equals(clause.raw)) {\n            clause.raw = clause.raw.replaceAll(\":\", \"\\\\\\\\:\");\n          }\n        } else {\n          clause.raw = s.substring(start, pos);\n          // Add default userField boost if no explicit boost exists\n          if(userFields.isAllowed(clause.field) && !clause.raw.contains(\"^\")) {\n            Float boost = userFields.getBoost(clause.field);\n            if(boost != null)\n              clause.raw += \"^\" + boost;\n          }\n        }\n        lst.add(clause);\n      }\n    }\n\n    return lst;\n  }\n\n","sourceOld":"  public List<Clause> splitIntoClauses(String s, boolean ignoreQuote) {\n    ArrayList<Clause> lst = new ArrayList<Clause>(4);\n    Clause clause;\n\n    int pos=0;\n    int end=s.length();\n    char ch=0;\n    int start;\n    boolean disallowUserField;\n    outer: while (pos < end) {\n      clause = new Clause();\n      disallowUserField = true;\n      \n      ch = s.charAt(pos);\n\n      while (Character.isWhitespace(ch)) {\n        if (++pos >= end) break;\n        ch = s.charAt(pos);\n      }\n\n      start = pos;      \n\n      if (ch=='+' || ch=='-') {\n        clause.must = ch;\n        pos++;\n      }\n\n      clause.field = getFieldName(s, pos, end);\n      if(clause.field != null && !userFields.isAllowed(clause.field)) {\n        clause.field = null;\n      }\n      if (clause.field != null) {\n        disallowUserField = false;\n        pos += clause.field.length(); // skip the field name\n        pos++;  // skip the ':'\n      }\n\n      if (pos>=end) break;\n\n\n      char inString=0;\n\n      ch = s.charAt(pos);\n      if (!ignoreQuote && ch=='\"') {\n        clause.isPhrase = true;\n        inString = '\"';\n        pos++;\n      }\n\n      StringBuilder sb = new StringBuilder();\n      while (pos < end) {\n        ch = s.charAt(pos++);\n        if (ch=='\\\\') {    // skip escaped chars, but leave escaped\n          sb.append(ch);\n          if (pos >= end) {\n            sb.append(ch); // double backslash if we are at the end of the string\n            break;\n          }\n          ch = s.charAt(pos++);\n          sb.append(ch);\n          continue;\n        } else if (inString != 0 && ch == inString) {\n          inString=0;\n          break;\n        } else if (Character.isWhitespace(ch)) {\n          clause.hasWhitespace=true;\n          if (inString == 0) {\n            // end of the token if we aren't in a string, backing\n            // up the position.\n            pos--;\n            break;\n          }\n        }\n\n        if (inString == 0) {\n          switch (ch) {\n            case '!':\n            case '(':\n            case ')':\n            case ':':\n            case '^':\n            case '[':\n            case ']':\n            case '{':\n            case '}':\n            case '~':\n            case '*':\n            case '?':\n            case '\"':\n            case '+':\n            case '-':\n              clause.hasSpecialSyntax = true;\n              sb.append('\\\\');\n          }\n        } else if (ch=='\"') {\n          // only char we need to escape in a string is double quote\n          sb.append('\\\\');\n        }\n        sb.append(ch);\n      }\n      clause.val = sb.toString();\n \n      if (clause.isPhrase) {\n        if (inString != 0) {\n          // detected bad quote balancing... retry\n          // parsing with quotes like any other char\n          return splitIntoClauses(s, true);\n        }\n\n        // special syntax in a string isn't special\n        clause.hasSpecialSyntax = false;        \n      } else {\n        // an empty clause... must be just a + or - on it's own\n        if (clause.val.length() == 0) {\n          clause.syntaxError = true;\n          if (clause.must != 0) {\n            clause.val=\"\\\\\"+clause.must;\n            clause.must = 0;\n            clause.hasSpecialSyntax = true;\n          } else {\n            // uh.. this shouldn't happen.\n            clause=null;\n          }\n        }\n      }\n\n      if (clause != null) {\n        if(disallowUserField) {\n          clause.raw = s.substring(start, pos);\n          // escape colons, except for \"match all\" query\n          if(!\"*:*\".equals(clause.raw)) {\n            clause.raw = clause.raw.replaceAll(\":\", \"\\\\\\\\:\");\n          }\n        } else {\n          clause.raw = s.substring(start, pos);\n          // Add default userField boost if no explicit boost exists\n          if(userFields.isAllowed(clause.field) && !clause.raw.contains(\"^\")) {\n            Float boost = userFields.getBoost(clause.field);\n            if(boost != null)\n              clause.raw += \"^\" + boost;\n          }\n        }\n        lst.add(clause);\n      }\n    }\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"217d69becab798f592818bc6b6006e337c04c0cd","date":1342168377,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#splitIntoClauses(String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#splitIntoClauses(String,boolean).mjava","sourceNew":"  public List<Clause> splitIntoClauses(String s, boolean ignoreQuote) {\n    ArrayList<Clause> lst = new ArrayList<Clause>(4);\n    Clause clause;\n\n    int pos=0;\n    int end=s.length();\n    char ch=0;\n    int start;\n    boolean disallowUserField;\n    outer: while (pos < end) {\n      clause = new Clause();\n      disallowUserField = true;\n      \n      ch = s.charAt(pos);\n\n      while (Character.isWhitespace(ch)) {\n        if (++pos >= end) break;\n        ch = s.charAt(pos);\n      }\n\n      start = pos;      \n\n      if (ch=='+' || ch=='-') {\n        clause.must = ch;\n        pos++;\n      }\n\n      clause.field = getFieldName(s, pos, end);\n      if(clause.field != null && !userFields.isAllowed(clause.field)) {\n        clause.field = null;\n      }\n      if (clause.field != null) {\n        disallowUserField = false;\n        int colon = s.indexOf(':',pos);\n        clause.rawField = s.substring(pos, colon);\n        pos += colon - pos; // skip the field name\n        pos++;  // skip the ':'\n      }\n\n      if (pos>=end) break;\n\n\n      char inString=0;\n\n      ch = s.charAt(pos);\n      if (!ignoreQuote && ch=='\"') {\n        clause.isPhrase = true;\n        inString = '\"';\n        pos++;\n      }\n\n      StringBuilder sb = new StringBuilder();\n      while (pos < end) {\n        ch = s.charAt(pos++);\n        if (ch=='\\\\') {    // skip escaped chars, but leave escaped\n          sb.append(ch);\n          if (pos >= end) {\n            sb.append(ch); // double backslash if we are at the end of the string\n            break;\n          }\n          ch = s.charAt(pos++);\n          sb.append(ch);\n          continue;\n        } else if (inString != 0 && ch == inString) {\n          inString=0;\n          break;\n        } else if (Character.isWhitespace(ch)) {\n          clause.hasWhitespace=true;\n          if (inString == 0) {\n            // end of the token if we aren't in a string, backing\n            // up the position.\n            pos--;\n            break;\n          }\n        }\n\n        if (inString == 0) {\n          switch (ch) {\n            case '!':\n            case '(':\n            case ')':\n            case ':':\n            case '^':\n            case '[':\n            case ']':\n            case '{':\n            case '}':\n            case '~':\n            case '*':\n            case '?':\n            case '\"':\n            case '+':\n            case '-':\n            case '\\\\':\n            case '|':\n            case '&':\n            case '/':\n              clause.hasSpecialSyntax = true;\n              sb.append('\\\\');\n          }\n        } else if (ch=='\"') {\n          // only char we need to escape in a string is double quote\n          sb.append('\\\\');\n        }\n        sb.append(ch);\n      }\n      clause.val = sb.toString();\n \n      if (clause.isPhrase) {\n        if (inString != 0) {\n          // detected bad quote balancing... retry\n          // parsing with quotes like any other char\n          return splitIntoClauses(s, true);\n        }\n\n        // special syntax in a string isn't special\n        clause.hasSpecialSyntax = false;        \n      } else {\n        // an empty clause... must be just a + or - on it's own\n        if (clause.val.length() == 0) {\n          clause.syntaxError = true;\n          if (clause.must != 0) {\n            clause.val=\"\\\\\"+clause.must;\n            clause.must = 0;\n            clause.hasSpecialSyntax = true;\n          } else {\n            // uh.. this shouldn't happen.\n            clause=null;\n          }\n        }\n      }\n\n      if (clause != null) {\n        if(disallowUserField) {\n          clause.raw = s.substring(start, pos);\n          // escape colons, except for \"match all\" query\n          if(!\"*:*\".equals(clause.raw)) {\n            clause.raw = clause.raw.replaceAll(\":\", \"\\\\\\\\:\");\n          }\n        } else {\n          clause.raw = s.substring(start, pos);\n          // Add default userField boost if no explicit boost exists\n          if(userFields.isAllowed(clause.field) && !clause.raw.contains(\"^\")) {\n            Float boost = userFields.getBoost(clause.field);\n            if(boost != null)\n              clause.raw += \"^\" + boost;\n          }\n        }\n        lst.add(clause);\n      }\n    }\n\n    return lst;\n  }\n\n","sourceOld":"  public List<Clause> splitIntoClauses(String s, boolean ignoreQuote) {\n    ArrayList<Clause> lst = new ArrayList<Clause>(4);\n    Clause clause;\n\n    int pos=0;\n    int end=s.length();\n    char ch=0;\n    int start;\n    boolean disallowUserField;\n    outer: while (pos < end) {\n      clause = new Clause();\n      disallowUserField = true;\n      \n      ch = s.charAt(pos);\n\n      while (Character.isWhitespace(ch)) {\n        if (++pos >= end) break;\n        ch = s.charAt(pos);\n      }\n\n      start = pos;      \n\n      if (ch=='+' || ch=='-') {\n        clause.must = ch;\n        pos++;\n      }\n\n      clause.field = getFieldName(s, pos, end);\n      if(clause.field != null && !userFields.isAllowed(clause.field)) {\n        clause.field = null;\n      }\n      if (clause.field != null) {\n        disallowUserField = false;\n        pos += clause.field.length(); // skip the field name\n        pos++;  // skip the ':'\n      }\n\n      if (pos>=end) break;\n\n\n      char inString=0;\n\n      ch = s.charAt(pos);\n      if (!ignoreQuote && ch=='\"') {\n        clause.isPhrase = true;\n        inString = '\"';\n        pos++;\n      }\n\n      StringBuilder sb = new StringBuilder();\n      while (pos < end) {\n        ch = s.charAt(pos++);\n        if (ch=='\\\\') {    // skip escaped chars, but leave escaped\n          sb.append(ch);\n          if (pos >= end) {\n            sb.append(ch); // double backslash if we are at the end of the string\n            break;\n          }\n          ch = s.charAt(pos++);\n          sb.append(ch);\n          continue;\n        } else if (inString != 0 && ch == inString) {\n          inString=0;\n          break;\n        } else if (Character.isWhitespace(ch)) {\n          clause.hasWhitespace=true;\n          if (inString == 0) {\n            // end of the token if we aren't in a string, backing\n            // up the position.\n            pos--;\n            break;\n          }\n        }\n\n        if (inString == 0) {\n          switch (ch) {\n            case '!':\n            case '(':\n            case ')':\n            case ':':\n            case '^':\n            case '[':\n            case ']':\n            case '{':\n            case '}':\n            case '~':\n            case '*':\n            case '?':\n            case '\"':\n            case '+':\n            case '-':\n            case '\\\\':\n            case '|':\n            case '&':\n            case '/':\n              clause.hasSpecialSyntax = true;\n              sb.append('\\\\');\n          }\n        } else if (ch=='\"') {\n          // only char we need to escape in a string is double quote\n          sb.append('\\\\');\n        }\n        sb.append(ch);\n      }\n      clause.val = sb.toString();\n \n      if (clause.isPhrase) {\n        if (inString != 0) {\n          // detected bad quote balancing... retry\n          // parsing with quotes like any other char\n          return splitIntoClauses(s, true);\n        }\n\n        // special syntax in a string isn't special\n        clause.hasSpecialSyntax = false;        \n      } else {\n        // an empty clause... must be just a + or - on it's own\n        if (clause.val.length() == 0) {\n          clause.syntaxError = true;\n          if (clause.must != 0) {\n            clause.val=\"\\\\\"+clause.must;\n            clause.must = 0;\n            clause.hasSpecialSyntax = true;\n          } else {\n            // uh.. this shouldn't happen.\n            clause=null;\n          }\n        }\n      }\n\n      if (clause != null) {\n        if(disallowUserField) {\n          clause.raw = s.substring(start, pos);\n          // escape colons, except for \"match all\" query\n          if(!\"*:*\".equals(clause.raw)) {\n            clause.raw = clause.raw.replaceAll(\":\", \"\\\\\\\\:\");\n          }\n        } else {\n          clause.raw = s.substring(start, pos);\n          // Add default userField boost if no explicit boost exists\n          if(userFields.isAllowed(clause.field) && !clause.raw.contains(\"^\")) {\n            Float boost = userFields.getBoost(clause.field);\n            if(boost != null)\n              clause.raw += \"^\" + boost;\n          }\n        }\n        lst.add(clause);\n      }\n    }\n\n    return lst;\n  }\n\n","bugFix":["20349324eb18d1565d301e59be543989f38743d3"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#splitIntoClauses(String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#splitIntoClauses(String,boolean).mjava","sourceNew":"  public List<Clause> splitIntoClauses(String s, boolean ignoreQuote) {\n    ArrayList<Clause> lst = new ArrayList<Clause>(4);\n    Clause clause;\n\n    int pos=0;\n    int end=s.length();\n    char ch=0;\n    int start;\n    boolean disallowUserField;\n    outer: while (pos < end) {\n      clause = new Clause();\n      disallowUserField = true;\n      \n      ch = s.charAt(pos);\n\n      while (Character.isWhitespace(ch)) {\n        if (++pos >= end) break;\n        ch = s.charAt(pos);\n      }\n\n      start = pos;      \n\n      if (ch=='+' || ch=='-') {\n        clause.must = ch;\n        pos++;\n      }\n\n      clause.field = getFieldName(s, pos, end);\n      if(clause.field != null && !userFields.isAllowed(clause.field)) {\n        clause.field = null;\n      }\n      if (clause.field != null) {\n        disallowUserField = false;\n        int colon = s.indexOf(':',pos);\n        clause.rawField = s.substring(pos, colon);\n        pos += colon - pos; // skip the field name\n        pos++;  // skip the ':'\n      }\n\n      if (pos>=end) break;\n\n\n      char inString=0;\n\n      ch = s.charAt(pos);\n      if (!ignoreQuote && ch=='\"') {\n        clause.isPhrase = true;\n        inString = '\"';\n        pos++;\n      }\n\n      StringBuilder sb = new StringBuilder();\n      while (pos < end) {\n        ch = s.charAt(pos++);\n        if (ch=='\\\\') {    // skip escaped chars, but leave escaped\n          sb.append(ch);\n          if (pos >= end) {\n            sb.append(ch); // double backslash if we are at the end of the string\n            break;\n          }\n          ch = s.charAt(pos++);\n          sb.append(ch);\n          continue;\n        } else if (inString != 0 && ch == inString) {\n          inString=0;\n          break;\n        } else if (Character.isWhitespace(ch)) {\n          clause.hasWhitespace=true;\n          if (inString == 0) {\n            // end of the token if we aren't in a string, backing\n            // up the position.\n            pos--;\n            break;\n          }\n        }\n\n        if (inString == 0) {\n          switch (ch) {\n            case '!':\n            case '(':\n            case ')':\n            case ':':\n            case '^':\n            case '[':\n            case ']':\n            case '{':\n            case '}':\n            case '~':\n            case '*':\n            case '?':\n            case '\"':\n            case '+':\n            case '-':\n            case '\\\\':\n            case '|':\n            case '&':\n            case '/':\n              clause.hasSpecialSyntax = true;\n              sb.append('\\\\');\n          }\n        } else if (ch=='\"') {\n          // only char we need to escape in a string is double quote\n          sb.append('\\\\');\n        }\n        sb.append(ch);\n      }\n      clause.val = sb.toString();\n \n      if (clause.isPhrase) {\n        if (inString != 0) {\n          // detected bad quote balancing... retry\n          // parsing with quotes like any other char\n          return splitIntoClauses(s, true);\n        }\n\n        // special syntax in a string isn't special\n        clause.hasSpecialSyntax = false;        \n      } else {\n        // an empty clause... must be just a + or - on it's own\n        if (clause.val.length() == 0) {\n          clause.syntaxError = true;\n          if (clause.must != 0) {\n            clause.val=\"\\\\\"+clause.must;\n            clause.must = 0;\n            clause.hasSpecialSyntax = true;\n          } else {\n            // uh.. this shouldn't happen.\n            clause=null;\n          }\n        }\n      }\n\n      if (clause != null) {\n        if(disallowUserField) {\n          clause.raw = s.substring(start, pos);\n          // escape colons, except for \"match all\" query\n          if(!\"*:*\".equals(clause.raw)) {\n            clause.raw = clause.raw.replaceAll(\":\", \"\\\\\\\\:\");\n          }\n        } else {\n          clause.raw = s.substring(start, pos);\n          // Add default userField boost if no explicit boost exists\n          if(userFields.isAllowed(clause.field) && !clause.raw.contains(\"^\")) {\n            Float boost = userFields.getBoost(clause.field);\n            if(boost != null)\n              clause.raw += \"^\" + boost;\n          }\n        }\n        lst.add(clause);\n      }\n    }\n\n    return lst;\n  }\n\n","sourceOld":"  public List<Clause> splitIntoClauses(String s, boolean ignoreQuote) {\n    ArrayList<Clause> lst = new ArrayList<Clause>(4);\n    Clause clause;\n\n    int pos=0;\n    int end=s.length();\n    char ch=0;\n    int start;\n    boolean disallowUserField;\n    outer: while (pos < end) {\n      clause = new Clause();\n      disallowUserField = true;\n      \n      ch = s.charAt(pos);\n\n      while (Character.isWhitespace(ch)) {\n        if (++pos >= end) break;\n        ch = s.charAt(pos);\n      }\n\n      start = pos;      \n\n      if (ch=='+' || ch=='-') {\n        clause.must = ch;\n        pos++;\n      }\n\n      clause.field = getFieldName(s, pos, end);\n      if(clause.field != null && !userFields.isAllowed(clause.field)) {\n        clause.field = null;\n      }\n      if (clause.field != null) {\n        disallowUserField = false;\n        pos += clause.field.length(); // skip the field name\n        pos++;  // skip the ':'\n      }\n\n      if (pos>=end) break;\n\n\n      char inString=0;\n\n      ch = s.charAt(pos);\n      if (!ignoreQuote && ch=='\"') {\n        clause.isPhrase = true;\n        inString = '\"';\n        pos++;\n      }\n\n      StringBuilder sb = new StringBuilder();\n      while (pos < end) {\n        ch = s.charAt(pos++);\n        if (ch=='\\\\') {    // skip escaped chars, but leave escaped\n          sb.append(ch);\n          if (pos >= end) {\n            sb.append(ch); // double backslash if we are at the end of the string\n            break;\n          }\n          ch = s.charAt(pos++);\n          sb.append(ch);\n          continue;\n        } else if (inString != 0 && ch == inString) {\n          inString=0;\n          break;\n        } else if (Character.isWhitespace(ch)) {\n          clause.hasWhitespace=true;\n          if (inString == 0) {\n            // end of the token if we aren't in a string, backing\n            // up the position.\n            pos--;\n            break;\n          }\n        }\n\n        if (inString == 0) {\n          switch (ch) {\n            case '!':\n            case '(':\n            case ')':\n            case ':':\n            case '^':\n            case '[':\n            case ']':\n            case '{':\n            case '}':\n            case '~':\n            case '*':\n            case '?':\n            case '\"':\n            case '+':\n            case '-':\n              clause.hasSpecialSyntax = true;\n              sb.append('\\\\');\n          }\n        } else if (ch=='\"') {\n          // only char we need to escape in a string is double quote\n          sb.append('\\\\');\n        }\n        sb.append(ch);\n      }\n      clause.val = sb.toString();\n \n      if (clause.isPhrase) {\n        if (inString != 0) {\n          // detected bad quote balancing... retry\n          // parsing with quotes like any other char\n          return splitIntoClauses(s, true);\n        }\n\n        // special syntax in a string isn't special\n        clause.hasSpecialSyntax = false;        \n      } else {\n        // an empty clause... must be just a + or - on it's own\n        if (clause.val.length() == 0) {\n          clause.syntaxError = true;\n          if (clause.must != 0) {\n            clause.val=\"\\\\\"+clause.must;\n            clause.must = 0;\n            clause.hasSpecialSyntax = true;\n          } else {\n            // uh.. this shouldn't happen.\n            clause=null;\n          }\n        }\n      }\n\n      if (clause != null) {\n        if(disallowUserField) {\n          clause.raw = s.substring(start, pos);\n          // escape colons, except for \"match all\" query\n          if(!\"*:*\".equals(clause.raw)) {\n            clause.raw = clause.raw.replaceAll(\":\", \"\\\\\\\\:\");\n          }\n        } else {\n          clause.raw = s.substring(start, pos);\n          // Add default userField boost if no explicit boost exists\n          if(userFields.isAllowed(clause.field) && !clause.raw.contains(\"^\")) {\n            Float boost = userFields.getBoost(clause.field);\n            if(boost != null)\n              clause.raw += \"^\" + boost;\n          }\n        }\n        lst.add(clause);\n      }\n    }\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#splitIntoClauses(String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#splitIntoClauses(String,boolean).mjava","sourceNew":"  public List<Clause> splitIntoClauses(String s, boolean ignoreQuote) {\n    ArrayList<Clause> lst = new ArrayList<Clause>(4);\n    Clause clause;\n\n    int pos=0;\n    int end=s.length();\n    char ch=0;\n    int start;\n    boolean disallowUserField;\n    outer: while (pos < end) {\n      clause = new Clause();\n      disallowUserField = true;\n      \n      ch = s.charAt(pos);\n\n      while (Character.isWhitespace(ch)) {\n        if (++pos >= end) break;\n        ch = s.charAt(pos);\n      }\n\n      start = pos;      \n\n      if (ch=='+' || ch=='-') {\n        clause.must = ch;\n        pos++;\n      }\n\n      clause.field = getFieldName(s, pos, end);\n      if(clause.field != null && !userFields.isAllowed(clause.field)) {\n        clause.field = null;\n      }\n      if (clause.field != null) {\n        disallowUserField = false;\n        int colon = s.indexOf(':',pos);\n        clause.rawField = s.substring(pos, colon);\n        pos += colon - pos; // skip the field name\n        pos++;  // skip the ':'\n      }\n\n      if (pos>=end) break;\n\n\n      char inString=0;\n\n      ch = s.charAt(pos);\n      if (!ignoreQuote && ch=='\"') {\n        clause.isPhrase = true;\n        inString = '\"';\n        pos++;\n      }\n\n      StringBuilder sb = new StringBuilder();\n      while (pos < end) {\n        ch = s.charAt(pos++);\n        if (ch=='\\\\') {    // skip escaped chars, but leave escaped\n          sb.append(ch);\n          if (pos >= end) {\n            sb.append(ch); // double backslash if we are at the end of the string\n            break;\n          }\n          ch = s.charAt(pos++);\n          sb.append(ch);\n          continue;\n        } else if (inString != 0 && ch == inString) {\n          inString=0;\n          break;\n        } else if (Character.isWhitespace(ch)) {\n          clause.hasWhitespace=true;\n          if (inString == 0) {\n            // end of the token if we aren't in a string, backing\n            // up the position.\n            pos--;\n            break;\n          }\n        }\n\n        if (inString == 0) {\n          switch (ch) {\n            case '!':\n            case '(':\n            case ')':\n            case ':':\n            case '^':\n            case '[':\n            case ']':\n            case '{':\n            case '}':\n            case '~':\n            case '*':\n            case '?':\n            case '\"':\n            case '+':\n            case '-':\n            case '\\\\':\n            case '|':\n            case '&':\n            case '/':\n              clause.hasSpecialSyntax = true;\n              sb.append('\\\\');\n          }\n        } else if (ch=='\"') {\n          // only char we need to escape in a string is double quote\n          sb.append('\\\\');\n        }\n        sb.append(ch);\n      }\n      clause.val = sb.toString();\n \n      if (clause.isPhrase) {\n        if (inString != 0) {\n          // detected bad quote balancing... retry\n          // parsing with quotes like any other char\n          return splitIntoClauses(s, true);\n        }\n\n        // special syntax in a string isn't special\n        clause.hasSpecialSyntax = false;        \n      } else {\n        // an empty clause... must be just a + or - on it's own\n        if (clause.val.length() == 0) {\n          clause.syntaxError = true;\n          if (clause.must != 0) {\n            clause.val=\"\\\\\"+clause.must;\n            clause.must = 0;\n            clause.hasSpecialSyntax = true;\n          } else {\n            // uh.. this shouldn't happen.\n            clause=null;\n          }\n        }\n      }\n\n      if (clause != null) {\n        if(disallowUserField) {\n          clause.raw = s.substring(start, pos);\n          // escape colons, except for \"match all\" query\n          if(!\"*:*\".equals(clause.raw)) {\n            clause.raw = clause.raw.replaceAll(\":\", \"\\\\\\\\:\");\n          }\n        } else {\n          clause.raw = s.substring(start, pos);\n          // Add default userField boost if no explicit boost exists\n          if(userFields.isAllowed(clause.field) && !clause.raw.contains(\"^\")) {\n            Float boost = userFields.getBoost(clause.field);\n            if(boost != null)\n              clause.raw += \"^\" + boost;\n          }\n        }\n        lst.add(clause);\n      }\n    }\n\n    return lst;\n  }\n\n","sourceOld":"  public List<Clause> splitIntoClauses(String s, boolean ignoreQuote) {\n    ArrayList<Clause> lst = new ArrayList<Clause>(4);\n    Clause clause;\n\n    int pos=0;\n    int end=s.length();\n    char ch=0;\n    int start;\n    boolean disallowUserField;\n    outer: while (pos < end) {\n      clause = new Clause();\n      disallowUserField = true;\n      \n      ch = s.charAt(pos);\n\n      while (Character.isWhitespace(ch)) {\n        if (++pos >= end) break;\n        ch = s.charAt(pos);\n      }\n\n      start = pos;      \n\n      if (ch=='+' || ch=='-') {\n        clause.must = ch;\n        pos++;\n      }\n\n      clause.field = getFieldName(s, pos, end);\n      if(clause.field != null && !userFields.isAllowed(clause.field)) {\n        clause.field = null;\n      }\n      if (clause.field != null) {\n        disallowUserField = false;\n        pos += clause.field.length(); // skip the field name\n        pos++;  // skip the ':'\n      }\n\n      if (pos>=end) break;\n\n\n      char inString=0;\n\n      ch = s.charAt(pos);\n      if (!ignoreQuote && ch=='\"') {\n        clause.isPhrase = true;\n        inString = '\"';\n        pos++;\n      }\n\n      StringBuilder sb = new StringBuilder();\n      while (pos < end) {\n        ch = s.charAt(pos++);\n        if (ch=='\\\\') {    // skip escaped chars, but leave escaped\n          sb.append(ch);\n          if (pos >= end) {\n            sb.append(ch); // double backslash if we are at the end of the string\n            break;\n          }\n          ch = s.charAt(pos++);\n          sb.append(ch);\n          continue;\n        } else if (inString != 0 && ch == inString) {\n          inString=0;\n          break;\n        } else if (Character.isWhitespace(ch)) {\n          clause.hasWhitespace=true;\n          if (inString == 0) {\n            // end of the token if we aren't in a string, backing\n            // up the position.\n            pos--;\n            break;\n          }\n        }\n\n        if (inString == 0) {\n          switch (ch) {\n            case '!':\n            case '(':\n            case ')':\n            case ':':\n            case '^':\n            case '[':\n            case ']':\n            case '{':\n            case '}':\n            case '~':\n            case '*':\n            case '?':\n            case '\"':\n            case '+':\n            case '-':\n            case '\\\\':\n            case '|':\n            case '&':\n            case '/':\n              clause.hasSpecialSyntax = true;\n              sb.append('\\\\');\n          }\n        } else if (ch=='\"') {\n          // only char we need to escape in a string is double quote\n          sb.append('\\\\');\n        }\n        sb.append(ch);\n      }\n      clause.val = sb.toString();\n \n      if (clause.isPhrase) {\n        if (inString != 0) {\n          // detected bad quote balancing... retry\n          // parsing with quotes like any other char\n          return splitIntoClauses(s, true);\n        }\n\n        // special syntax in a string isn't special\n        clause.hasSpecialSyntax = false;        \n      } else {\n        // an empty clause... must be just a + or - on it's own\n        if (clause.val.length() == 0) {\n          clause.syntaxError = true;\n          if (clause.must != 0) {\n            clause.val=\"\\\\\"+clause.must;\n            clause.must = 0;\n            clause.hasSpecialSyntax = true;\n          } else {\n            // uh.. this shouldn't happen.\n            clause=null;\n          }\n        }\n      }\n\n      if (clause != null) {\n        if(disallowUserField) {\n          clause.raw = s.substring(start, pos);\n          // escape colons, except for \"match all\" query\n          if(!\"*:*\".equals(clause.raw)) {\n            clause.raw = clause.raw.replaceAll(\":\", \"\\\\\\\\:\");\n          }\n        } else {\n          clause.raw = s.substring(start, pos);\n          // Add default userField boost if no explicit boost exists\n          if(userFields.isAllowed(clause.field) && !clause.raw.contains(\"^\")) {\n            Float boost = userFields.getBoost(clause.field);\n            if(boost != null)\n              clause.raw += \"^\" + boost;\n          }\n        }\n        lst.add(clause);\n      }\n    }\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7e79e31f55cbb444e3023d430a340658755aa31","date":1357666399,"type":5,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#splitIntoClauses(String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#splitIntoClauses(String,boolean).mjava","sourceNew":"  public List<Clause> splitIntoClauses(String s, boolean ignoreQuote) {\n    ArrayList<Clause> lst = new ArrayList<Clause>(4);\n    Clause clause;\n    \n    int pos=0;\n    int end=s.length();\n    char ch=0;\n    int start;\n    boolean disallowUserField;\n    while (pos < end) {\n      clause = new Clause();\n      disallowUserField = true;\n      \n      ch = s.charAt(pos);\n      \n      while (Character.isWhitespace(ch)) {\n        if (++pos >= end) break;\n        ch = s.charAt(pos);\n      }\n      \n      start = pos;      \n      \n      if (ch=='+' || ch=='-') {\n        clause.must = ch;\n        pos++;\n      }\n      \n      clause.field = getFieldName(s, pos, end);\n      if(clause.field != null && !config.userFields.isAllowed(clause.field)) {\n        clause.field = null;\n      }\n      if (clause.field != null) {\n        disallowUserField = false;\n        int colon = s.indexOf(':',pos);\n        clause.rawField = s.substring(pos, colon);\n        pos += colon - pos; // skip the field name\n        pos++;  // skip the ':'\n      }\n      \n      if (pos>=end) break;\n      \n      \n      char inString=0;\n      \n      ch = s.charAt(pos);\n      if (!ignoreQuote && ch=='\"') {\n        clause.isPhrase = true;\n        inString = '\"';\n        pos++;\n      }\n      \n      StringBuilder sb = new StringBuilder();\n      while (pos < end) {\n        ch = s.charAt(pos++);\n        if (ch=='\\\\') {    // skip escaped chars, but leave escaped\n          sb.append(ch);\n          if (pos >= end) {\n            sb.append(ch); // double backslash if we are at the end of the string\n            break;\n          }\n          ch = s.charAt(pos++);\n          sb.append(ch);\n          continue;\n        } else if (inString != 0 && ch == inString) {\n          inString=0;\n          break;\n        } else if (Character.isWhitespace(ch)) {\n          clause.hasWhitespace=true;\n          if (inString == 0) {\n            // end of the token if we aren't in a string, backing\n            // up the position.\n            pos--;\n            break;\n          }\n        }\n        \n        if (inString == 0) {\n          switch (ch) {\n            case '!':\n            case '(':\n            case ')':\n            case ':':\n            case '^':\n            case '[':\n            case ']':\n            case '{':\n            case '}':\n            case '~':\n            case '*':\n            case '?':\n            case '\"':\n            case '+':\n            case '-':\n            case '\\\\':\n            case '|':\n            case '&':\n            case '/':\n              clause.hasSpecialSyntax = true;\n              sb.append('\\\\');\n          }\n        } else if (ch=='\"') {\n          // only char we need to escape in a string is double quote\n          sb.append('\\\\');\n        }\n        sb.append(ch);\n      }\n      clause.val = sb.toString();\n      \n      if (clause.isPhrase) {\n        if (inString != 0) {\n          // detected bad quote balancing... retry\n          // parsing with quotes like any other char\n          return splitIntoClauses(s, true);\n        }\n        \n        // special syntax in a string isn't special\n        clause.hasSpecialSyntax = false;        \n      } else {\n        // an empty clause... must be just a + or - on it's own\n        if (clause.val.length() == 0) {\n          clause.syntaxError = true;\n          if (clause.must != 0) {\n            clause.val=\"\\\\\"+clause.must;\n            clause.must = 0;\n            clause.hasSpecialSyntax = true;\n          } else {\n            // uh.. this shouldn't happen.\n            clause=null;\n          }\n        }\n      }\n      \n      if (clause != null) {\n        if(disallowUserField) {\n          clause.raw = s.substring(start, pos);\n          // escape colons, except for \"match all\" query\n          if(!\"*:*\".equals(clause.raw)) {\n            clause.raw = clause.raw.replaceAll(\":\", \"\\\\\\\\:\");\n          }\n        } else {\n          clause.raw = s.substring(start, pos);\n          // Add default userField boost if no explicit boost exists\n          if(config.userFields.isAllowed(clause.field) && !clause.raw.contains(\"^\")) {\n            Float boost = config.userFields.getBoost(clause.field);\n            if(boost != null)\n              clause.raw += \"^\" + boost;\n          }\n        }\n        lst.add(clause);\n      }\n    }\n    \n    return lst;\n  }\n\n","sourceOld":"  public List<Clause> splitIntoClauses(String s, boolean ignoreQuote) {\n    ArrayList<Clause> lst = new ArrayList<Clause>(4);\n    Clause clause;\n\n    int pos=0;\n    int end=s.length();\n    char ch=0;\n    int start;\n    boolean disallowUserField;\n    outer: while (pos < end) {\n      clause = new Clause();\n      disallowUserField = true;\n      \n      ch = s.charAt(pos);\n\n      while (Character.isWhitespace(ch)) {\n        if (++pos >= end) break;\n        ch = s.charAt(pos);\n      }\n\n      start = pos;      \n\n      if (ch=='+' || ch=='-') {\n        clause.must = ch;\n        pos++;\n      }\n\n      clause.field = getFieldName(s, pos, end);\n      if(clause.field != null && !userFields.isAllowed(clause.field)) {\n        clause.field = null;\n      }\n      if (clause.field != null) {\n        disallowUserField = false;\n        int colon = s.indexOf(':',pos);\n        clause.rawField = s.substring(pos, colon);\n        pos += colon - pos; // skip the field name\n        pos++;  // skip the ':'\n      }\n\n      if (pos>=end) break;\n\n\n      char inString=0;\n\n      ch = s.charAt(pos);\n      if (!ignoreQuote && ch=='\"') {\n        clause.isPhrase = true;\n        inString = '\"';\n        pos++;\n      }\n\n      StringBuilder sb = new StringBuilder();\n      while (pos < end) {\n        ch = s.charAt(pos++);\n        if (ch=='\\\\') {    // skip escaped chars, but leave escaped\n          sb.append(ch);\n          if (pos >= end) {\n            sb.append(ch); // double backslash if we are at the end of the string\n            break;\n          }\n          ch = s.charAt(pos++);\n          sb.append(ch);\n          continue;\n        } else if (inString != 0 && ch == inString) {\n          inString=0;\n          break;\n        } else if (Character.isWhitespace(ch)) {\n          clause.hasWhitespace=true;\n          if (inString == 0) {\n            // end of the token if we aren't in a string, backing\n            // up the position.\n            pos--;\n            break;\n          }\n        }\n\n        if (inString == 0) {\n          switch (ch) {\n            case '!':\n            case '(':\n            case ')':\n            case ':':\n            case '^':\n            case '[':\n            case ']':\n            case '{':\n            case '}':\n            case '~':\n            case '*':\n            case '?':\n            case '\"':\n            case '+':\n            case '-':\n            case '\\\\':\n            case '|':\n            case '&':\n            case '/':\n              clause.hasSpecialSyntax = true;\n              sb.append('\\\\');\n          }\n        } else if (ch=='\"') {\n          // only char we need to escape in a string is double quote\n          sb.append('\\\\');\n        }\n        sb.append(ch);\n      }\n      clause.val = sb.toString();\n \n      if (clause.isPhrase) {\n        if (inString != 0) {\n          // detected bad quote balancing... retry\n          // parsing with quotes like any other char\n          return splitIntoClauses(s, true);\n        }\n\n        // special syntax in a string isn't special\n        clause.hasSpecialSyntax = false;        \n      } else {\n        // an empty clause... must be just a + or - on it's own\n        if (clause.val.length() == 0) {\n          clause.syntaxError = true;\n          if (clause.must != 0) {\n            clause.val=\"\\\\\"+clause.must;\n            clause.must = 0;\n            clause.hasSpecialSyntax = true;\n          } else {\n            // uh.. this shouldn't happen.\n            clause=null;\n          }\n        }\n      }\n\n      if (clause != null) {\n        if(disallowUserField) {\n          clause.raw = s.substring(start, pos);\n          // escape colons, except for \"match all\" query\n          if(!\"*:*\".equals(clause.raw)) {\n            clause.raw = clause.raw.replaceAll(\":\", \"\\\\\\\\:\");\n          }\n        } else {\n          clause.raw = s.substring(start, pos);\n          // Add default userField boost if no explicit boost exists\n          if(userFields.isAllowed(clause.field) && !clause.raw.contains(\"^\")) {\n            Float boost = userFields.getBoost(clause.field);\n            if(boost != null)\n              clause.raw += \"^\" + boost;\n          }\n        }\n        lst.add(clause);\n      }\n    }\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#splitIntoClauses(String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#splitIntoClauses(String,boolean).mjava","sourceNew":"  public List<Clause> splitIntoClauses(String s, boolean ignoreQuote) {\n    ArrayList<Clause> lst = new ArrayList<Clause>(4);\n    Clause clause;\n    \n    int pos=0;\n    int end=s.length();\n    char ch=0;\n    int start;\n    boolean disallowUserField;\n    while (pos < end) {\n      clause = new Clause();\n      disallowUserField = true;\n      \n      ch = s.charAt(pos);\n      \n      while (Character.isWhitespace(ch)) {\n        if (++pos >= end) break;\n        ch = s.charAt(pos);\n      }\n      \n      start = pos;      \n      \n      if (ch=='+' || ch=='-') {\n        clause.must = ch;\n        pos++;\n      }\n      \n      clause.field = getFieldName(s, pos, end);\n      if(clause.field != null && !config.userFields.isAllowed(clause.field)) {\n        clause.field = null;\n      }\n      if (clause.field != null) {\n        disallowUserField = false;\n        int colon = s.indexOf(':',pos);\n        clause.rawField = s.substring(pos, colon);\n        pos += colon - pos; // skip the field name\n        pos++;  // skip the ':'\n      }\n      \n      if (pos>=end) break;\n      \n      \n      char inString=0;\n      \n      ch = s.charAt(pos);\n      if (!ignoreQuote && ch=='\"') {\n        clause.isPhrase = true;\n        inString = '\"';\n        pos++;\n      }\n      \n      StringBuilder sb = new StringBuilder();\n      while (pos < end) {\n        ch = s.charAt(pos++);\n        if (ch=='\\\\') {    // skip escaped chars, but leave escaped\n          sb.append(ch);\n          if (pos >= end) {\n            sb.append(ch); // double backslash if we are at the end of the string\n            break;\n          }\n          ch = s.charAt(pos++);\n          sb.append(ch);\n          continue;\n        } else if (inString != 0 && ch == inString) {\n          inString=0;\n          break;\n        } else if (Character.isWhitespace(ch)) {\n          clause.hasWhitespace=true;\n          if (inString == 0) {\n            // end of the token if we aren't in a string, backing\n            // up the position.\n            pos--;\n            break;\n          }\n        }\n        \n        if (inString == 0) {\n          switch (ch) {\n            case '!':\n            case '(':\n            case ')':\n            case ':':\n            case '^':\n            case '[':\n            case ']':\n            case '{':\n            case '}':\n            case '~':\n            case '*':\n            case '?':\n            case '\"':\n            case '+':\n            case '-':\n            case '\\\\':\n            case '|':\n            case '&':\n            case '/':\n              clause.hasSpecialSyntax = true;\n              sb.append('\\\\');\n          }\n        } else if (ch=='\"') {\n          // only char we need to escape in a string is double quote\n          sb.append('\\\\');\n        }\n        sb.append(ch);\n      }\n      clause.val = sb.toString();\n      \n      if (clause.isPhrase) {\n        if (inString != 0) {\n          // detected bad quote balancing... retry\n          // parsing with quotes like any other char\n          return splitIntoClauses(s, true);\n        }\n        \n        // special syntax in a string isn't special\n        clause.hasSpecialSyntax = false;        \n      } else {\n        // an empty clause... must be just a + or - on it's own\n        if (clause.val.length() == 0) {\n          clause.syntaxError = true;\n          if (clause.must != 0) {\n            clause.val=\"\\\\\"+clause.must;\n            clause.must = 0;\n            clause.hasSpecialSyntax = true;\n          } else {\n            // uh.. this shouldn't happen.\n            clause=null;\n          }\n        }\n      }\n      \n      if (clause != null) {\n        if(disallowUserField) {\n          clause.raw = s.substring(start, pos);\n          // escape colons, except for \"match all\" query\n          if(!\"*:*\".equals(clause.raw)) {\n            clause.raw = clause.raw.replaceAll(\":\", \"\\\\\\\\:\");\n          }\n        } else {\n          clause.raw = s.substring(start, pos);\n          // Add default userField boost if no explicit boost exists\n          if(config.userFields.isAllowed(clause.field) && !clause.raw.contains(\"^\")) {\n            Float boost = config.userFields.getBoost(clause.field);\n            if(boost != null)\n              clause.raw += \"^\" + boost;\n          }\n        }\n        lst.add(clause);\n      }\n    }\n    \n    return lst;\n  }\n\n","sourceOld":"  public List<Clause> splitIntoClauses(String s, boolean ignoreQuote) {\n    ArrayList<Clause> lst = new ArrayList<Clause>(4);\n    Clause clause;\n\n    int pos=0;\n    int end=s.length();\n    char ch=0;\n    int start;\n    boolean disallowUserField;\n    outer: while (pos < end) {\n      clause = new Clause();\n      disallowUserField = true;\n      \n      ch = s.charAt(pos);\n\n      while (Character.isWhitespace(ch)) {\n        if (++pos >= end) break;\n        ch = s.charAt(pos);\n      }\n\n      start = pos;      \n\n      if (ch=='+' || ch=='-') {\n        clause.must = ch;\n        pos++;\n      }\n\n      clause.field = getFieldName(s, pos, end);\n      if(clause.field != null && !userFields.isAllowed(clause.field)) {\n        clause.field = null;\n      }\n      if (clause.field != null) {\n        disallowUserField = false;\n        int colon = s.indexOf(':',pos);\n        clause.rawField = s.substring(pos, colon);\n        pos += colon - pos; // skip the field name\n        pos++;  // skip the ':'\n      }\n\n      if (pos>=end) break;\n\n\n      char inString=0;\n\n      ch = s.charAt(pos);\n      if (!ignoreQuote && ch=='\"') {\n        clause.isPhrase = true;\n        inString = '\"';\n        pos++;\n      }\n\n      StringBuilder sb = new StringBuilder();\n      while (pos < end) {\n        ch = s.charAt(pos++);\n        if (ch=='\\\\') {    // skip escaped chars, but leave escaped\n          sb.append(ch);\n          if (pos >= end) {\n            sb.append(ch); // double backslash if we are at the end of the string\n            break;\n          }\n          ch = s.charAt(pos++);\n          sb.append(ch);\n          continue;\n        } else if (inString != 0 && ch == inString) {\n          inString=0;\n          break;\n        } else if (Character.isWhitespace(ch)) {\n          clause.hasWhitespace=true;\n          if (inString == 0) {\n            // end of the token if we aren't in a string, backing\n            // up the position.\n            pos--;\n            break;\n          }\n        }\n\n        if (inString == 0) {\n          switch (ch) {\n            case '!':\n            case '(':\n            case ')':\n            case ':':\n            case '^':\n            case '[':\n            case ']':\n            case '{':\n            case '}':\n            case '~':\n            case '*':\n            case '?':\n            case '\"':\n            case '+':\n            case '-':\n            case '\\\\':\n            case '|':\n            case '&':\n            case '/':\n              clause.hasSpecialSyntax = true;\n              sb.append('\\\\');\n          }\n        } else if (ch=='\"') {\n          // only char we need to escape in a string is double quote\n          sb.append('\\\\');\n        }\n        sb.append(ch);\n      }\n      clause.val = sb.toString();\n \n      if (clause.isPhrase) {\n        if (inString != 0) {\n          // detected bad quote balancing... retry\n          // parsing with quotes like any other char\n          return splitIntoClauses(s, true);\n        }\n\n        // special syntax in a string isn't special\n        clause.hasSpecialSyntax = false;        \n      } else {\n        // an empty clause... must be just a + or - on it's own\n        if (clause.val.length() == 0) {\n          clause.syntaxError = true;\n          if (clause.must != 0) {\n            clause.val=\"\\\\\"+clause.must;\n            clause.must = 0;\n            clause.hasSpecialSyntax = true;\n          } else {\n            // uh.. this shouldn't happen.\n            clause=null;\n          }\n        }\n      }\n\n      if (clause != null) {\n        if(disallowUserField) {\n          clause.raw = s.substring(start, pos);\n          // escape colons, except for \"match all\" query\n          if(!\"*:*\".equals(clause.raw)) {\n            clause.raw = clause.raw.replaceAll(\":\", \"\\\\\\\\:\");\n          }\n        } else {\n          clause.raw = s.substring(start, pos);\n          // Add default userField boost if no explicit boost exists\n          if(userFields.isAllowed(clause.field) && !clause.raw.contains(\"^\")) {\n            Float boost = userFields.getBoost(clause.field);\n            if(boost != null)\n              clause.raw += \"^\" + boost;\n          }\n        }\n        lst.add(clause);\n      }\n    }\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["c26f00b574427b55127e869b935845554afde1fa","245c71087515ed70d4fb9d9484f9dcbd79eebdfc"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"78513ec977dc489ecf0d3dbce84ebd18ff7a43c1":["08cff58bd13a83c87cda0cc4ddae2aec9c35964f"],"aba371508186796cc6151d8223a5b4e16d02e26e":["78513ec977dc489ecf0d3dbce84ebd18ff7a43c1","217d69becab798f592818bc6b6006e337c04c0cd"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["08cff58bd13a83c87cda0cc4ddae2aec9c35964f","217d69becab798f592818bc6b6006e337c04c0cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c7e79e31f55cbb444e3023d430a340658755aa31":["217d69becab798f592818bc6b6006e337c04c0cd"],"245c71087515ed70d4fb9d9484f9dcbd79eebdfc":["c26f00b574427b55127e869b935845554afde1fa"],"217d69becab798f592818bc6b6006e337c04c0cd":["78513ec977dc489ecf0d3dbce84ebd18ff7a43c1"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["217d69becab798f592818bc6b6006e337c04c0cd","c7e79e31f55cbb444e3023d430a340658755aa31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7e79e31f55cbb444e3023d430a340658755aa31"],"08cff58bd13a83c87cda0cc4ddae2aec9c35964f":["245c71087515ed70d4fb9d9484f9dcbd79eebdfc"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"c26f00b574427b55127e869b935845554afde1fa":["38e3b736c7ca086d61b7dbb841c905ee115490da","245c71087515ed70d4fb9d9484f9dcbd79eebdfc"],"78513ec977dc489ecf0d3dbce84ebd18ff7a43c1":["aba371508186796cc6151d8223a5b4e16d02e26e","217d69becab798f592818bc6b6006e337c04c0cd"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"c7e79e31f55cbb444e3023d430a340658755aa31":["4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"245c71087515ed70d4fb9d9484f9dcbd79eebdfc":["38e3b736c7ca086d61b7dbb841c905ee115490da","08cff58bd13a83c87cda0cc4ddae2aec9c35964f"],"217d69becab798f592818bc6b6006e337c04c0cd":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","c7e79e31f55cbb444e3023d430a340658755aa31","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":[],"08cff58bd13a83c87cda0cc4ddae2aec9c35964f":["78513ec977dc489ecf0d3dbce84ebd18ff7a43c1","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}