{"path":"solr/core/src/java/org/apache/solr/security/JWTAuthPlugin.HttpsJwksFactory#create(String).mjava","commits":[{"id":"43b93409dee3306c3446b1f24bced7b660398bd3","date":1568113307,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/JWTAuthPlugin.HttpsJwksFactory#create(String).mjava","pathOld":"/dev/null","sourceNew":"    public HttpsJwks create(String url) {\n      try {\n        URL jwkUrl = new URL(url);\n        if (!\"https\".equalsIgnoreCase(jwkUrl.getProtocol())) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, PARAM_JWK_URL + \" must use HTTPS\");\n        }\n      } catch (MalformedURLException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Url \" + url + \" configured in \" + PARAM_JWK_URL + \" is not a valid URL\");\n      }\n      HttpsJwks httpsJkws = new HttpsJwks(url);\n      httpsJkws.setDefaultCacheDuration(jwkCacheDuration);\n      httpsJkws.setRefreshReprieveThreshold(refreshReprieveThreshold);\n      return httpsJkws;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ac780c217504f0ca673ac5dcb98768984267c60","date":1568879420,"type":5,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/JWTIssuerConfig.HttpsJwksFactory#create(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/JWTAuthPlugin.HttpsJwksFactory#create(String).mjava","sourceNew":"    private HttpsJwks create(String url) {\n      try {\n        URL jwksUrl = new URL(url);\n        if (!\"https\".equalsIgnoreCase(jwksUrl.getProtocol())) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, PARAM_JWKS_URL + \" must use HTTPS\");\n        }\n      } catch (MalformedURLException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Url \" + url + \" configured in \" + PARAM_JWKS_URL + \" is not a valid URL\");\n      }\n      HttpsJwks httpsJkws = new HttpsJwks(url);\n      httpsJkws.setDefaultCacheDuration(jwkCacheDuration);\n      httpsJkws.setRefreshReprieveThreshold(refreshReprieveThreshold);\n      return httpsJkws;\n    }\n\n","sourceOld":"    public HttpsJwks create(String url) {\n      try {\n        URL jwkUrl = new URL(url);\n        if (!\"https\".equalsIgnoreCase(jwkUrl.getProtocol())) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, PARAM_JWK_URL + \" must use HTTPS\");\n        }\n      } catch (MalformedURLException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Url \" + url + \" configured in \" + PARAM_JWK_URL + \" is not a valid URL\");\n      }\n      HttpsJwks httpsJkws = new HttpsJwks(url);\n      httpsJkws.setDefaultCacheDuration(jwkCacheDuration);\n      httpsJkws.setRefreshReprieveThreshold(refreshReprieveThreshold);\n      return httpsJkws;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1ac780c217504f0ca673ac5dcb98768984267c60":["43b93409dee3306c3446b1f24bced7b660398bd3"],"43b93409dee3306c3446b1f24bced7b660398bd3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1ac780c217504f0ca673ac5dcb98768984267c60"]},"commit2Childs":{"1ac780c217504f0ca673ac5dcb98768984267c60":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"43b93409dee3306c3446b1f24bced7b660398bd3":["1ac780c217504f0ca673ac5dcb98768984267c60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["43b93409dee3306c3446b1f24bced7b660398bd3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}