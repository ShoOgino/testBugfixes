{"path":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#sort(Comparator[BytesRef]).mjava","commits":[{"id":"ce73f585d17f53055185a19beb46db23d76e0ad9","date":1353077110,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#sort(Comparator[BytesRef]).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BytesRefList#sort(Comparator[BytesRef]).mjava","sourceNew":"  private int[] sort(final Comparator<BytesRef> comp) {\n    final int[] orderedEntries = new int[size()];\n    for (int i = 0; i < orderedEntries.length; i++) {\n      orderedEntries[i] = i;\n    }\n    new SorterTemplate() {\n      @Override\n      protected void swap(int i, int j) {\n        final int o = orderedEntries[i];\n        orderedEntries[i] = orderedEntries[j];\n        orderedEntries[j] = o;\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        final int ord1 = orderedEntries[i], ord2 = orderedEntries[j];\n        return comp.compare(get(scratch1, ord1), get(scratch2, ord2));\n      }\n      \n      @Override\n      protected void setPivot(int i) {\n        final int ord = orderedEntries[i];\n        get(pivot, ord);\n      }\n      \n      @Override\n      protected int comparePivot(int j) {\n        final int ord = orderedEntries[j];\n        return comp.compare(pivot, get(scratch2, ord));\n      }\n      \n      private final BytesRef pivot = new BytesRef(), scratch1 = new BytesRef(),\n          scratch2 = new BytesRef();\n    }.quickSort(0, size() - 1);\n    return orderedEntries;\n  }\n\n","sourceOld":"  private int[] sort(final Comparator<BytesRef> comp) {\n    final int[] orderedEntries = new int[size()];\n    for (int i = 0; i < orderedEntries.length; i++) {\n      orderedEntries[i] = i;\n    }\n    new SorterTemplate() {\n      @Override\n      protected void swap(int i, int j) {\n        final int o = orderedEntries[i];\n        orderedEntries[i] = orderedEntries[j];\n        orderedEntries[j] = o;\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        final int ord1 = orderedEntries[i], ord2 = orderedEntries[j];\n        return comp.compare(get(scratch1, ord1), get(scratch2, ord2));\n      }\n      \n      @Override\n      protected void setPivot(int i) {\n        final int ord = orderedEntries[i];\n        get(pivot, ord);\n      }\n      \n      @Override\n      protected int comparePivot(int j) {\n        final int ord = orderedEntries[j];\n        return comp.compare(pivot, get(scratch2, ord));\n      }\n      \n      private final BytesRef pivot = new BytesRef(), scratch1 = new BytesRef(),\n          scratch2 = new BytesRef();\n    }.quickSort(0, size() - 1);\n    return orderedEntries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"847d1294c8ff2f0172af20892ef98a1c6a952e09","date":1359503775,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BytesRefArray#sort(Comparator[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#sort(Comparator[BytesRef]).mjava","sourceNew":"  private int[] sort(final Comparator<BytesRef> comp) {\n    final int[] orderedEntries = new int[size()];\n    for (int i = 0; i < orderedEntries.length; i++) {\n      orderedEntries[i] = i;\n    }\n    new SorterTemplate() {\n      @Override\n      protected void swap(int i, int j) {\n        final int o = orderedEntries[i];\n        orderedEntries[i] = orderedEntries[j];\n        orderedEntries[j] = o;\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        final int ord1 = orderedEntries[i], ord2 = orderedEntries[j];\n        return comp.compare(get(scratch1, ord1), get(scratch2, ord2));\n      }\n      \n      @Override\n      protected void setPivot(int i) {\n        final int ord = orderedEntries[i];\n        get(pivot, ord);\n      }\n      \n      @Override\n      protected int comparePivot(int j) {\n        final int ord = orderedEntries[j];\n        return comp.compare(pivot, get(scratch2, ord));\n      }\n      \n      private final BytesRef pivot = new BytesRef(), scratch1 = new BytesRef(),\n          scratch2 = new BytesRef();\n    }.quickSort(0, size() - 1);\n    return orderedEntries;\n  }\n\n","sourceOld":"  private int[] sort(final Comparator<BytesRef> comp) {\n    final int[] orderedEntries = new int[size()];\n    for (int i = 0; i < orderedEntries.length; i++) {\n      orderedEntries[i] = i;\n    }\n    new SorterTemplate() {\n      @Override\n      protected void swap(int i, int j) {\n        final int o = orderedEntries[i];\n        orderedEntries[i] = orderedEntries[j];\n        orderedEntries[j] = o;\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        final int ord1 = orderedEntries[i], ord2 = orderedEntries[j];\n        return comp.compare(get(scratch1, ord1), get(scratch2, ord2));\n      }\n      \n      @Override\n      protected void setPivot(int i) {\n        final int ord = orderedEntries[i];\n        get(pivot, ord);\n      }\n      \n      @Override\n      protected int comparePivot(int j) {\n        final int ord = orderedEntries[j];\n        return comp.compare(pivot, get(scratch2, ord));\n      }\n      \n      private final BytesRef pivot = new BytesRef(), scratch1 = new BytesRef(),\n          scratch2 = new BytesRef();\n    }.quickSort(0, size() - 1);\n    return orderedEntries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36f5a8c57e16c0f801006a52f87c75378427852e","date":1393256707,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#sort(Comparator[BytesRef]).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BytesRefArray#sort(Comparator[BytesRef]).mjava","sourceNew":"  private int[] sort(final Comparator<BytesRef> comp) {\n    final int[] orderedEntries = new int[size()];\n    for (int i = 0; i < orderedEntries.length; i++) {\n      orderedEntries[i] = i;\n    }\n    new IntroSorter() {\n      @Override\n      protected void swap(int i, int j) {\n        final int o = orderedEntries[i];\n        orderedEntries[i] = orderedEntries[j];\n        orderedEntries[j] = o;\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        final int idx1 = orderedEntries[i], idx2 = orderedEntries[j];\n        return comp.compare(get(scratch1, idx1), get(scratch2, idx2));\n      }\n      \n      @Override\n      protected void setPivot(int i) {\n        final int index = orderedEntries[i];\n        get(pivot, index);\n      }\n      \n      @Override\n      protected int comparePivot(int j) {\n        final int index = orderedEntries[j];\n        return comp.compare(pivot, get(scratch2, index));\n      }\n      \n      private final BytesRef pivot = new BytesRef(), scratch1 = new BytesRef(),\n          scratch2 = new BytesRef();\n    }.sort(0, size());\n    return orderedEntries;\n  }\n\n","sourceOld":"  private int[] sort(final Comparator<BytesRef> comp) {\n    final int[] orderedEntries = new int[size()];\n    for (int i = 0; i < orderedEntries.length; i++) {\n      orderedEntries[i] = i;\n    }\n    new IntroSorter() {\n      @Override\n      protected void swap(int i, int j) {\n        final int o = orderedEntries[i];\n        orderedEntries[i] = orderedEntries[j];\n        orderedEntries[j] = o;\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        final int idx1 = orderedEntries[i], idx2 = orderedEntries[j];\n        return comp.compare(get(scratch1, idx1), get(scratch2, idx2));\n      }\n      \n      @Override\n      protected void setPivot(int i) {\n        final int index = orderedEntries[i];\n        get(pivot, index);\n      }\n      \n      @Override\n      protected int comparePivot(int j) {\n        final int index = orderedEntries[j];\n        return comp.compare(pivot, get(scratch2, index));\n      }\n      \n      private final BytesRef pivot = new BytesRef(), scratch1 = new BytesRef(),\n          scratch2 = new BytesRef();\n    }.sort(0, size());\n    return orderedEntries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba791bce8103c79e38f957e9c5a53a75871bd918","date":1393539206,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#sort(Comparator[BytesRef]).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BytesRefArray#sort(Comparator[BytesRef]).mjava","sourceNew":"  private int[] sort(final Comparator<BytesRef> comp) {\n    final int[] orderedEntries = new int[size()];\n    for (int i = 0; i < orderedEntries.length; i++) {\n      orderedEntries[i] = i;\n    }\n    new IntroSorter() {\n      @Override\n      protected void swap(int i, int j) {\n        final int o = orderedEntries[i];\n        orderedEntries[i] = orderedEntries[j];\n        orderedEntries[j] = o;\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        final int idx1 = orderedEntries[i], idx2 = orderedEntries[j];\n        return comp.compare(get(scratch1, idx1), get(scratch2, idx2));\n      }\n      \n      @Override\n      protected void setPivot(int i) {\n        final int index = orderedEntries[i];\n        get(pivot, index);\n      }\n      \n      @Override\n      protected int comparePivot(int j) {\n        final int index = orderedEntries[j];\n        return comp.compare(pivot, get(scratch2, index));\n      }\n      \n      private final BytesRef pivot = new BytesRef(), scratch1 = new BytesRef(),\n          scratch2 = new BytesRef();\n    }.sort(0, size());\n    return orderedEntries;\n  }\n\n","sourceOld":"  private int[] sort(final Comparator<BytesRef> comp) {\n    final int[] orderedEntries = new int[size()];\n    for (int i = 0; i < orderedEntries.length; i++) {\n      orderedEntries[i] = i;\n    }\n    new IntroSorter() {\n      @Override\n      protected void swap(int i, int j) {\n        final int o = orderedEntries[i];\n        orderedEntries[i] = orderedEntries[j];\n        orderedEntries[j] = o;\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        final int idx1 = orderedEntries[i], idx2 = orderedEntries[j];\n        return comp.compare(get(scratch1, idx1), get(scratch2, idx2));\n      }\n      \n      @Override\n      protected void setPivot(int i) {\n        final int index = orderedEntries[i];\n        get(pivot, index);\n      }\n      \n      @Override\n      protected int comparePivot(int j) {\n        final int index = orderedEntries[j];\n        return comp.compare(pivot, get(scratch2, index));\n      }\n      \n      private final BytesRef pivot = new BytesRef(), scratch1 = new BytesRef(),\n          scratch2 = new BytesRef();\n    }.sort(0, size());\n    return orderedEntries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#sort(Comparator[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#sort(Comparator[BytesRef]).mjava","sourceNew":"  private int[] sort(final Comparator<BytesRef> comp) {\n    final int[] orderedEntries = new int[size()];\n    for (int i = 0; i < orderedEntries.length; i++) {\n      orderedEntries[i] = i;\n    }\n    new IntroSorter() {\n      @Override\n      protected void swap(int i, int j) {\n        final int o = orderedEntries[i];\n        orderedEntries[i] = orderedEntries[j];\n        orderedEntries[j] = o;\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        final int idx1 = orderedEntries[i], idx2 = orderedEntries[j];\n        return comp.compare(get(scratch1, idx1), get(scratch2, idx2));\n      }\n      \n      @Override\n      protected void setPivot(int i) {\n        final int index = orderedEntries[i];\n        pivot = get(pivotBuilder, index);\n      }\n      \n      @Override\n      protected int comparePivot(int j) {\n        final int index = orderedEntries[j];\n        return comp.compare(pivot, get(scratch2, index));\n      }\n\n      private BytesRef pivot;\n      private final BytesRefBuilder pivotBuilder = new BytesRefBuilder(),\n          scratch1 = new BytesRefBuilder(),\n          scratch2 = new BytesRefBuilder();\n    }.sort(0, size());\n    return orderedEntries;\n  }\n\n","sourceOld":"  private int[] sort(final Comparator<BytesRef> comp) {\n    final int[] orderedEntries = new int[size()];\n    for (int i = 0; i < orderedEntries.length; i++) {\n      orderedEntries[i] = i;\n    }\n    new IntroSorter() {\n      @Override\n      protected void swap(int i, int j) {\n        final int o = orderedEntries[i];\n        orderedEntries[i] = orderedEntries[j];\n        orderedEntries[j] = o;\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        final int idx1 = orderedEntries[i], idx2 = orderedEntries[j];\n        return comp.compare(get(scratch1, idx1), get(scratch2, idx2));\n      }\n      \n      @Override\n      protected void setPivot(int i) {\n        final int index = orderedEntries[i];\n        get(pivot, index);\n      }\n      \n      @Override\n      protected int comparePivot(int j) {\n        final int index = orderedEntries[j];\n        return comp.compare(pivot, get(scratch2, index));\n      }\n      \n      private final BytesRef pivot = new BytesRef(), scratch1 = new BytesRef(),\n          scratch2 = new BytesRef();\n    }.sort(0, size());\n    return orderedEntries;\n  }\n\n","bugFix":["d334a3e8e6b94298d8cf2802a403a096c06f0b92","dc3c850c5222a1ce7d619563f67bf047a11b32b6","a4e3a7c47e11ff0c156c646c37d20af7249370d2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73860c1174109b7d888d50a10088afb18293b153","date":1457392330,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#sort(Comparator[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#sort(Comparator[BytesRef]).mjava","sourceNew":"  private int[] sort(final Comparator<BytesRef> comp) {\n    final int[] orderedEntries = new int[size()];\n    for (int i = 0; i < orderedEntries.length; i++) {\n      orderedEntries[i] = i;\n    }\n    new IntroSorter() {\n      @Override\n      protected void swap(int i, int j) {\n        final int o = orderedEntries[i];\n        orderedEntries[i] = orderedEntries[j];\n        orderedEntries[j] = o;\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        final int idx1 = orderedEntries[i], idx2 = orderedEntries[j];\n        setBytesRef(scratch1, scratchBytes1, idx1);\n        setBytesRef(scratch2, scratchBytes2, idx2);\n        return comp.compare(scratchBytes1, scratchBytes2);\n      }\n      \n      @Override\n      protected void setPivot(int i) {\n        final int index = orderedEntries[i];\n        setBytesRef(pivotBuilder, pivot, index);\n      }\n      \n      @Override\n      protected int comparePivot(int j) {\n        final int index = orderedEntries[j];\n        setBytesRef(scratch2, scratchBytes2, index);\n        return comp.compare(pivot, scratchBytes2);\n      }\n\n      private final BytesRef pivot = new BytesRef();\n      private final BytesRef scratchBytes1 = new BytesRef();\n      private final BytesRef scratchBytes2 = new BytesRef();\n      private final BytesRefBuilder pivotBuilder = new BytesRefBuilder();\n      private final BytesRefBuilder scratch1 = new BytesRefBuilder();\n      private final BytesRefBuilder scratch2 = new BytesRefBuilder();\n    }.sort(0, size());\n    return orderedEntries;\n  }\n\n","sourceOld":"  private int[] sort(final Comparator<BytesRef> comp) {\n    final int[] orderedEntries = new int[size()];\n    for (int i = 0; i < orderedEntries.length; i++) {\n      orderedEntries[i] = i;\n    }\n    new IntroSorter() {\n      @Override\n      protected void swap(int i, int j) {\n        final int o = orderedEntries[i];\n        orderedEntries[i] = orderedEntries[j];\n        orderedEntries[j] = o;\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        final int idx1 = orderedEntries[i], idx2 = orderedEntries[j];\n        return comp.compare(get(scratch1, idx1), get(scratch2, idx2));\n      }\n      \n      @Override\n      protected void setPivot(int i) {\n        final int index = orderedEntries[i];\n        pivot = get(pivotBuilder, index);\n      }\n      \n      @Override\n      protected int comparePivot(int j) {\n        final int index = orderedEntries[j];\n        return comp.compare(pivot, get(scratch2, index));\n      }\n\n      private BytesRef pivot;\n      private final BytesRefBuilder pivotBuilder = new BytesRefBuilder(),\n          scratch1 = new BytesRefBuilder(),\n          scratch2 = new BytesRefBuilder();\n    }.sort(0, size());\n    return orderedEntries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb0b91dbd7ffa9329d88b6cf6d606e542fed61d8","date":1582222690,"type":5,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#sort(Comparator[BytesRef],IntBinaryOperator).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#sort(Comparator[BytesRef]).mjava","sourceNew":"  /**\n   * Returns a {@link SortState} representing the order of elements in this array. This is a non-destructive operation.\n   */\n  public SortState sort(final Comparator<BytesRef> comp, final IntBinaryOperator tieComparator) {\n    final int[] orderedEntries = new int[size()];\n    for (int i = 0; i < orderedEntries.length; i++) {\n      orderedEntries[i] = i;\n    }\n    new IntroSorter() {\n      @Override\n      protected void swap(int i, int j) {\n        final int o = orderedEntries[i];\n        orderedEntries[i] = orderedEntries[j];\n        orderedEntries[j] = o;\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        final int idx1 = orderedEntries[i], idx2 = orderedEntries[j];\n        setBytesRef(scratch1, scratchBytes1, idx1);\n        setBytesRef(scratch2, scratchBytes2, idx2);\n        return compare(idx1, scratchBytes1, idx2, scratchBytes2);\n      }\n      \n      @Override\n      protected void setPivot(int i) {\n        pivotIndex = orderedEntries[i];\n        setBytesRef(pivotBuilder, pivot, pivotIndex);\n      }\n      \n      @Override\n      protected int comparePivot(int j) {\n        final int index = orderedEntries[j];\n        setBytesRef(scratch2, scratchBytes2, index);\n        return compare(pivotIndex, pivot, index, scratchBytes2);\n      }\n\n      private int compare(int i1, BytesRef b1, int i2, BytesRef b2) {\n        int res = comp.compare(b1, b2);\n        return res == 0 ? tieComparator.applyAsInt(i1, i2) : res;\n      }\n\n      private int pivotIndex;\n      private final BytesRef pivot = new BytesRef();\n      private final BytesRef scratchBytes1 = new BytesRef();\n      private final BytesRef scratchBytes2 = new BytesRef();\n      private final BytesRefBuilder pivotBuilder = new BytesRefBuilder();\n      private final BytesRefBuilder scratch1 = new BytesRefBuilder();\n      private final BytesRefBuilder scratch2 = new BytesRefBuilder();\n    }.sort(0, size());\n    return new SortState(orderedEntries);\n  }\n\n","sourceOld":"  private int[] sort(final Comparator<BytesRef> comp) {\n    final int[] orderedEntries = new int[size()];\n    for (int i = 0; i < orderedEntries.length; i++) {\n      orderedEntries[i] = i;\n    }\n    new IntroSorter() {\n      @Override\n      protected void swap(int i, int j) {\n        final int o = orderedEntries[i];\n        orderedEntries[i] = orderedEntries[j];\n        orderedEntries[j] = o;\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        final int idx1 = orderedEntries[i], idx2 = orderedEntries[j];\n        setBytesRef(scratch1, scratchBytes1, idx1);\n        setBytesRef(scratch2, scratchBytes2, idx2);\n        return comp.compare(scratchBytes1, scratchBytes2);\n      }\n      \n      @Override\n      protected void setPivot(int i) {\n        final int index = orderedEntries[i];\n        setBytesRef(pivotBuilder, pivot, index);\n      }\n      \n      @Override\n      protected int comparePivot(int j) {\n        final int index = orderedEntries[j];\n        setBytesRef(scratch2, scratchBytes2, index);\n        return comp.compare(pivot, scratchBytes2);\n      }\n\n      private final BytesRef pivot = new BytesRef();\n      private final BytesRef scratchBytes1 = new BytesRef();\n      private final BytesRef scratchBytes2 = new BytesRef();\n      private final BytesRefBuilder pivotBuilder = new BytesRefBuilder();\n      private final BytesRefBuilder scratch1 = new BytesRefBuilder();\n      private final BytesRefBuilder scratch2 = new BytesRefBuilder();\n    }.sort(0, size());\n    return orderedEntries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb0b91dbd7ffa9329d88b6cf6d606e542fed61d8":["73860c1174109b7d888d50a10088afb18293b153"],"ce73f585d17f53055185a19beb46db23d76e0ad9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","36f5a8c57e16c0f801006a52f87c75378427852e"],"73860c1174109b7d888d50a10088afb18293b153":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"36f5a8c57e16c0f801006a52f87c75378427852e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"847d1294c8ff2f0172af20892ef98a1c6a952e09":["ce73f585d17f53055185a19beb46db23d76e0ad9"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb0b91dbd7ffa9329d88b6cf6d606e542fed61d8"]},"commit2Childs":{"fb0b91dbd7ffa9329d88b6cf6d606e542fed61d8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ce73f585d17f53055185a19beb46db23d76e0ad9":["847d1294c8ff2f0172af20892ef98a1c6a952e09"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"73860c1174109b7d888d50a10088afb18293b153":["fb0b91dbd7ffa9329d88b6cf6d606e542fed61d8"],"36f5a8c57e16c0f801006a52f87c75378427852e":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ce73f585d17f53055185a19beb46db23d76e0ad9","ba791bce8103c79e38f957e9c5a53a75871bd918","36f5a8c57e16c0f801006a52f87c75378427852e"],"847d1294c8ff2f0172af20892ef98a1c6a952e09":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["73860c1174109b7d888d50a10088afb18293b153"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["847d1294c8ff2f0172af20892ef98a1c6a952e09","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}