{"path":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/cn/ChineseFilter#incrementToken().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/cn/ChineseFilter#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/cn/ChineseFilter#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n\n        while (input.incrementToken()) {\n            char text[] = termAtt.termBuffer();\n            int termLength = termAtt.termLength();\n\n          // why not key off token type here assuming ChineseTokenizer comes first?\n            if (!stopTable.contains(text, 0, termLength)) {\n                switch (Character.getType(text[0])) {\n\n                case Character.LOWERCASE_LETTER:\n                case Character.UPPERCASE_LETTER:\n\n                    // English word/token should larger than 1 character.\n                    if (termLength>1) {\n                        return true;\n                    }\n                    break;\n                case Character.OTHER_LETTER:\n\n                    // One Chinese character as one Chinese word.\n                    // Chinese word extraction to be added later here.\n\n                    return true;\n                }\n\n            }\n\n        }\n        return false;\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n\n        while (input.incrementToken()) {\n            char text[] = termAtt.termBuffer();\n            int termLength = termAtt.termLength();\n\n          // why not key off token type here assuming ChineseTokenizer comes first?\n            if (!stopTable.contains(text, 0, termLength)) {\n                switch (Character.getType(text[0])) {\n\n                case Character.LOWERCASE_LETTER:\n                case Character.UPPERCASE_LETTER:\n\n                    // English word/token should larger than 1 character.\n                    if (termLength>1) {\n                        return true;\n                    }\n                    break;\n                case Character.OTHER_LETTER:\n\n                    // One Chinese character as one Chinese word.\n                    // Chinese word extraction to be added later here.\n\n                    return true;\n                }\n\n            }\n\n        }\n        return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/cn/ChineseFilter#incrementToken().mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/cn/ChineseFilter#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n\n        while (input.incrementToken()) {\n            char text[] = termAtt.termBuffer();\n            int termLength = termAtt.termLength();\n\n          // why not key off token type here assuming ChineseTokenizer comes first?\n            if (!stopTable.contains(text, 0, termLength)) {\n                switch (Character.getType(text[0])) {\n\n                case Character.LOWERCASE_LETTER:\n                case Character.UPPERCASE_LETTER:\n\n                    // English word/token should larger than 1 character.\n                    if (termLength>1) {\n                        return true;\n                    }\n                    break;\n                case Character.OTHER_LETTER:\n\n                    // One Chinese character as one Chinese word.\n                    // Chinese word extraction to be added later here.\n\n                    return true;\n                }\n\n            }\n\n        }\n        return false;\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n\n        while (input.incrementToken()) {\n            char text[] = termAtt.termBuffer();\n            int termLength = termAtt.termLength();\n\n          // why not key off token type here assuming ChineseTokenizer comes first?\n            if (!stopTable.contains(text, 0, termLength)) {\n                switch (Character.getType(text[0])) {\n\n                case Character.LOWERCASE_LETTER:\n                case Character.UPPERCASE_LETTER:\n\n                    // English word/token should larger than 1 character.\n                    if (termLength>1) {\n                        return true;\n                    }\n                    break;\n                case Character.OTHER_LETTER:\n\n                    // One Chinese character as one Chinese word.\n                    // Chinese word extraction to be added later here.\n\n                    return true;\n                }\n\n            }\n\n        }\n        return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}