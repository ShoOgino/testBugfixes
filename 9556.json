{"path":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#setField(FieldInfo).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#setField(FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#setField(FieldInfo).mjava","sourceNew":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public void setField(FieldInfo fieldInfo) {\n    this.indexOptions = fieldInfo.indexOptions;\n    if (indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n      throw new UnsupportedOperationException(\"this codec cannot index offsets: \" + indexOptions);\n    }\n    if (DEBUG) System.out.println(\"PW field=\" + fieldInfo.name + \" indexOptions=\" + indexOptions);\n    storePayloads = fieldInfo.storePayloads;\n    wrappedPostingsWriter.setField(fieldInfo);\n    //DEBUG = BlockTreeTermsWriter.DEBUG;\n  }\n\n","sourceOld":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public void setField(FieldInfo fieldInfo) {\n    this.indexOptions = fieldInfo.indexOptions;\n    if (indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n      throw new UnsupportedOperationException(\"this codec cannot index offsets: \" + indexOptions);\n    }\n    if (DEBUG) System.out.println(\"PW field=\" + fieldInfo.name + \" indexOptions=\" + indexOptions);\n    storePayloads = fieldInfo.storePayloads;\n    wrappedPostingsWriter.setField(fieldInfo);\n    //DEBUG = BlockTreeTermsWriter.DEBUG;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7424161ac990ef8f959f09ee516148e4d12c48bc","date":1336236796,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#setField(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#setField(FieldInfo).mjava","sourceNew":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public void setField(FieldInfo fieldInfo) {\n    this.indexOptions = fieldInfo.indexOptions;\n    if (DEBUG) System.out.println(\"PW field=\" + fieldInfo.name + \" indexOptions=\" + indexOptions);\n    storePayloads = fieldInfo.storePayloads;\n    wrappedPostingsWriter.setField(fieldInfo);\n    //DEBUG = BlockTreeTermsWriter.DEBUG;\n  }\n\n","sourceOld":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public void setField(FieldInfo fieldInfo) {\n    this.indexOptions = fieldInfo.indexOptions;\n    if (indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n      throw new UnsupportedOperationException(\"this codec cannot index offsets: \" + indexOptions);\n    }\n    if (DEBUG) System.out.println(\"PW field=\" + fieldInfo.name + \" indexOptions=\" + indexOptions);\n    storePayloads = fieldInfo.storePayloads;\n    wrappedPostingsWriter.setField(fieldInfo);\n    //DEBUG = BlockTreeTermsWriter.DEBUG;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"76923f6a33f2c4bec7f584e3f251261afe7ea276","date":1337149711,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#setField(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#setField(FieldInfo).mjava","sourceNew":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public void setField(FieldInfo fieldInfo) {\n    this.indexOptions = fieldInfo.getIndexOptions();\n    if (DEBUG) System.out.println(\"PW field=\" + fieldInfo.name + \" indexOptions=\" + indexOptions);\n    storePayloads = fieldInfo.hasPayloads();\n    wrappedPostingsWriter.setField(fieldInfo);\n    //DEBUG = BlockTreeTermsWriter.DEBUG;\n  }\n\n","sourceOld":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public void setField(FieldInfo fieldInfo) {\n    this.indexOptions = fieldInfo.indexOptions;\n    if (DEBUG) System.out.println(\"PW field=\" + fieldInfo.name + \" indexOptions=\" + indexOptions);\n    storePayloads = fieldInfo.storePayloads;\n    wrappedPostingsWriter.setField(fieldInfo);\n    //DEBUG = BlockTreeTermsWriter.DEBUG;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#setField(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#setField(FieldInfo).mjava","sourceNew":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public void setField(FieldInfo fieldInfo) {\n    this.indexOptions = fieldInfo.getIndexOptions();\n    if (DEBUG) System.out.println(\"PW field=\" + fieldInfo.name + \" indexOptions=\" + indexOptions);\n    storePayloads = fieldInfo.hasPayloads();\n    wrappedPostingsWriter.setField(fieldInfo);\n    //DEBUG = BlockTreeTermsWriter.DEBUG;\n  }\n\n","sourceOld":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public void setField(FieldInfo fieldInfo) {\n    this.indexOptions = fieldInfo.indexOptions;\n    if (DEBUG) System.out.println(\"PW field=\" + fieldInfo.name + \" indexOptions=\" + indexOptions);\n    storePayloads = fieldInfo.storePayloads;\n    wrappedPostingsWriter.setField(fieldInfo);\n    //DEBUG = BlockTreeTermsWriter.DEBUG;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2f6156e2f0d1d529001873677c1cc6a22d6b9f9a","date":1342021960,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#setField(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#setField(FieldInfo).mjava","sourceNew":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public void setField(FieldInfo fieldInfo) {\n    this.indexOptions = fieldInfo.getIndexOptions();\n    //if (DEBUG) System.out.println(\"PW field=\" + fieldInfo.name + \" indexOptions=\" + indexOptions);\n    storePayloads = fieldInfo.hasPayloads();\n    wrappedPostingsWriter.setField(fieldInfo);\n    //DEBUG = BlockTreeTermsWriter.DEBUG;\n  }\n\n","sourceOld":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public void setField(FieldInfo fieldInfo) {\n    this.indexOptions = fieldInfo.getIndexOptions();\n    if (DEBUG) System.out.println(\"PW field=\" + fieldInfo.name + \" indexOptions=\" + indexOptions);\n    storePayloads = fieldInfo.hasPayloads();\n    wrappedPostingsWriter.setField(fieldInfo);\n    //DEBUG = BlockTreeTermsWriter.DEBUG;\n  }\n\n","bugFix":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#setField(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#setField(FieldInfo).mjava","sourceNew":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public void setField(FieldInfo fieldInfo) {\n    this.indexOptions = fieldInfo.getIndexOptions();\n    //if (DEBUG) System.out.println(\"PW field=\" + fieldInfo.name + \" indexOptions=\" + indexOptions);\n    storePayloads = fieldInfo.hasPayloads();\n    wrappedPostingsWriter.setField(fieldInfo);\n    //DEBUG = BlockTreeTermsWriter.DEBUG;\n  }\n\n","sourceOld":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public void setField(FieldInfo fieldInfo) {\n    this.indexOptions = fieldInfo.getIndexOptions();\n    if (DEBUG) System.out.println(\"PW field=\" + fieldInfo.name + \" indexOptions=\" + indexOptions);\n    storePayloads = fieldInfo.hasPayloads();\n    wrappedPostingsWriter.setField(fieldInfo);\n    //DEBUG = BlockTreeTermsWriter.DEBUG;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#setField(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#setField(FieldInfo).mjava","sourceNew":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public void setField(FieldInfo fieldInfo) {\n    this.indexOptions = fieldInfo.getIndexOptions();\n    //if (DEBUG) System.out.println(\"PW field=\" + fieldInfo.name + \" indexOptions=\" + indexOptions);\n    storePayloads = fieldInfo.hasPayloads();\n    wrappedPostingsWriter.setField(fieldInfo);\n    //DEBUG = BlockTreeTermsWriter.DEBUG;\n  }\n\n","sourceOld":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public void setField(FieldInfo fieldInfo) {\n    this.indexOptions = fieldInfo.getIndexOptions();\n    if (DEBUG) System.out.println(\"PW field=\" + fieldInfo.name + \" indexOptions=\" + indexOptions);\n    storePayloads = fieldInfo.hasPayloads();\n    wrappedPostingsWriter.setField(fieldInfo);\n    //DEBUG = BlockTreeTermsWriter.DEBUG;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#setField(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#setField(FieldInfo).mjava","sourceNew":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public void setField(FieldInfo fieldInfo) {\n    this.indexOptions = fieldInfo.getIndexOptions();\n    //if (DEBUG) System.out.println(\"PW field=\" + fieldInfo.name + \" indexOptions=\" + indexOptions);\n    storePayloads = fieldInfo.hasPayloads();\n    wrappedPostingsWriter.setField(fieldInfo);\n    //DEBUG = BlockTreeTermsWriter.DEBUG;\n  }\n\n","sourceOld":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public void setField(FieldInfo fieldInfo) {\n    this.indexOptions = fieldInfo.getIndexOptions();\n    //if (DEBUG) System.out.println(\"PW field=\" + fieldInfo.name + \" indexOptions=\" + indexOptions);\n    storePayloads = fieldInfo.hasPayloads();\n    wrappedPostingsWriter.setField(fieldInfo);\n    //DEBUG = BlockTreeTermsWriter.DEBUG;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"76923f6a33f2c4bec7f584e3f251261afe7ea276":["7424161ac990ef8f959f09ee516148e4d12c48bc"],"2f6156e2f0d1d529001873677c1cc6a22d6b9f9a":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["7424161ac990ef8f959f09ee516148e4d12c48bc","76923f6a33f2c4bec7f584e3f251261afe7ea276"],"aba371508186796cc6151d8223a5b4e16d02e26e":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","2f6156e2f0d1d529001873677c1cc6a22d6b9f9a"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["2f6156e2f0d1d529001873677c1cc6a22d6b9f9a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","2f6156e2f0d1d529001873677c1cc6a22d6b9f9a"],"7424161ac990ef8f959f09ee516148e4d12c48bc":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"]},"commit2Childs":{"76923f6a33f2c4bec7f584e3f251261afe7ea276":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"2f6156e2f0d1d529001873677c1cc6a22d6b9f9a":["aba371508186796cc6151d8223a5b4e16d02e26e","3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["2f6156e2f0d1d529001873677c1cc6a22d6b9f9a","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7424161ac990ef8f959f09ee516148e4d12c48bc"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"7424161ac990ef8f959f09ee516148e4d12c48bc":["76923f6a33f2c4bec7f584e3f251261afe7ea276","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}