{"path":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testDifferentDVFormatPerField().mjava","commits":[{"id":"06805da26538ed636bd89b10c2699cc3834032ae","date":1395132972,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testDifferentDVFormatPerField().mjava","pathOld":"/dev/null","sourceNew":"  public void testDifferentDVFormatPerField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setCodec(new Lucene46Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new Lucene45DocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"doc\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"bdv\", toBytes(5L)));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"value\")));\n    writer.addDocument(doc); // flushed document\n    writer.commit();\n    writer.addDocument(doc); // in-memory document\n    \n    writer.updateBinaryDocValue(new Term(\"key\", \"doc\"), \"bdv\", toBytes(17L));\n    writer.close();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    \n    AtomicReader r = SlowCompositeReaderWrapper.wrap(reader);\n    BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n    SortedDocValues sdv = r.getSortedDocValues(\"sorted\");\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(17, getValue(bdv, i, scratch));\n      sdv.get(i, scratch);\n      assertEquals(new BytesRef(\"value\"), scratch);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testDifferentDVFormatPerField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testDifferentDVFormatPerField().mjava","sourceNew":"  public void testDifferentDVFormatPerField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setCodec(new Lucene46Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new Lucene45DocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"doc\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"bdv\", toBytes(5L)));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"value\")));\n    writer.addDocument(doc); // flushed document\n    writer.commit();\n    writer.addDocument(doc); // in-memory document\n    \n    writer.updateBinaryDocValue(new Term(\"key\", \"doc\"), \"bdv\", toBytes(17L));\n    writer.shutdown();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    \n    AtomicReader r = SlowCompositeReaderWrapper.wrap(reader);\n    BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n    SortedDocValues sdv = r.getSortedDocValues(\"sorted\");\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(17, getValue(bdv, i, scratch));\n      sdv.get(i, scratch);\n      assertEquals(new BytesRef(\"value\"), scratch);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDifferentDVFormatPerField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setCodec(new Lucene46Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new Lucene45DocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"doc\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"bdv\", toBytes(5L)));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"value\")));\n    writer.addDocument(doc); // flushed document\n    writer.commit();\n    writer.addDocument(doc); // in-memory document\n    \n    writer.updateBinaryDocValue(new Term(\"key\", \"doc\"), \"bdv\", toBytes(17L));\n    writer.close();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    \n    AtomicReader r = SlowCompositeReaderWrapper.wrap(reader);\n    BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n    SortedDocValues sdv = r.getSortedDocValues(\"sorted\");\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(17, getValue(bdv, i, scratch));\n      sdv.get(i, scratch);\n      assertEquals(new BytesRef(\"value\"), scratch);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8106bc60c7452250f84c65cdb43ab6b1d8eb1534","date":1401906364,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testDifferentDVFormatPerField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testDifferentDVFormatPerField().mjava","sourceNew":"  public void testDifferentDVFormatPerField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setCodec(new Lucene49Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new Lucene49DocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"doc\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"bdv\", toBytes(5L)));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"value\")));\n    writer.addDocument(doc); // flushed document\n    writer.commit();\n    writer.addDocument(doc); // in-memory document\n    \n    writer.updateBinaryDocValue(new Term(\"key\", \"doc\"), \"bdv\", toBytes(17L));\n    writer.shutdown();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    \n    AtomicReader r = SlowCompositeReaderWrapper.wrap(reader);\n    BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n    SortedDocValues sdv = r.getSortedDocValues(\"sorted\");\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(17, getValue(bdv, i, scratch));\n      sdv.get(i, scratch);\n      assertEquals(new BytesRef(\"value\"), scratch);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDifferentDVFormatPerField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setCodec(new Lucene46Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new Lucene45DocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"doc\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"bdv\", toBytes(5L)));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"value\")));\n    writer.addDocument(doc); // flushed document\n    writer.commit();\n    writer.addDocument(doc); // in-memory document\n    \n    writer.updateBinaryDocValue(new Term(\"key\", \"doc\"), \"bdv\", toBytes(17L));\n    writer.shutdown();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    \n    AtomicReader r = SlowCompositeReaderWrapper.wrap(reader);\n    BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n    SortedDocValues sdv = r.getSortedDocValues(\"sorted\");\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(17, getValue(bdv, i, scratch));\n      sdv.get(i, scratch);\n      assertEquals(new BytesRef(\"value\"), scratch);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":["06805da26538ed636bd89b10c2699cc3834032ae"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testDifferentDVFormatPerField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testDifferentDVFormatPerField().mjava","sourceNew":"  public void testDifferentDVFormatPerField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setCodec(new Lucene49Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new Lucene49DocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"doc\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"bdv\", toBytes(5L)));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"value\")));\n    writer.addDocument(doc); // flushed document\n    writer.commit();\n    writer.addDocument(doc); // in-memory document\n    \n    writer.updateBinaryDocValue(new Term(\"key\", \"doc\"), \"bdv\", toBytes(17L));\n    writer.shutdown();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    \n    AtomicReader r = SlowCompositeReaderWrapper.wrap(reader);\n    BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n    SortedDocValues sdv = r.getSortedDocValues(\"sorted\");\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(17, getValue(bdv, i));\n      BytesRef term = sdv.get(i);\n      assertEquals(new BytesRef(\"value\"), term);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDifferentDVFormatPerField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setCodec(new Lucene49Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new Lucene49DocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"doc\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"bdv\", toBytes(5L)));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"value\")));\n    writer.addDocument(doc); // flushed document\n    writer.commit();\n    writer.addDocument(doc); // in-memory document\n    \n    writer.updateBinaryDocValue(new Term(\"key\", \"doc\"), \"bdv\", toBytes(17L));\n    writer.shutdown();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    \n    AtomicReader r = SlowCompositeReaderWrapper.wrap(reader);\n    BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n    SortedDocValues sdv = r.getSortedDocValues(\"sorted\");\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(17, getValue(bdv, i, scratch));\n      sdv.get(i, scratch);\n      assertEquals(new BytesRef(\"value\"), scratch);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testDifferentDVFormatPerField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testDifferentDVFormatPerField().mjava","sourceNew":"  public void testDifferentDVFormatPerField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(new Lucene49Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new Lucene49DocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"doc\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"bdv\", toBytes(5L)));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"value\")));\n    writer.addDocument(doc); // flushed document\n    writer.commit();\n    writer.addDocument(doc); // in-memory document\n    \n    writer.updateBinaryDocValue(new Term(\"key\", \"doc\"), \"bdv\", toBytes(17L));\n    writer.shutdown();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    \n    AtomicReader r = SlowCompositeReaderWrapper.wrap(reader);\n    BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n    SortedDocValues sdv = r.getSortedDocValues(\"sorted\");\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(17, getValue(bdv, i));\n      BytesRef term = sdv.get(i);\n      assertEquals(new BytesRef(\"value\"), term);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDifferentDVFormatPerField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setCodec(new Lucene49Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new Lucene49DocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"doc\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"bdv\", toBytes(5L)));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"value\")));\n    writer.addDocument(doc); // flushed document\n    writer.commit();\n    writer.addDocument(doc); // in-memory document\n    \n    writer.updateBinaryDocValue(new Term(\"key\", \"doc\"), \"bdv\", toBytes(17L));\n    writer.shutdown();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    \n    AtomicReader r = SlowCompositeReaderWrapper.wrap(reader);\n    BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n    SortedDocValues sdv = r.getSortedDocValues(\"sorted\");\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(17, getValue(bdv, i));\n      BytesRef term = sdv.get(i);\n      assertEquals(new BytesRef(\"value\"), term);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testDifferentDVFormatPerField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testDifferentDVFormatPerField().mjava","sourceNew":"  public void testDifferentDVFormatPerField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(new Lucene49Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new Lucene49DocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"doc\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"bdv\", toBytes(5L)));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"value\")));\n    writer.addDocument(doc); // flushed document\n    writer.commit();\n    writer.addDocument(doc); // in-memory document\n    \n    writer.updateBinaryDocValue(new Term(\"key\", \"doc\"), \"bdv\", toBytes(17L));\n    writer.close();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    \n    AtomicReader r = SlowCompositeReaderWrapper.wrap(reader);\n    BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n    SortedDocValues sdv = r.getSortedDocValues(\"sorted\");\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(17, getValue(bdv, i));\n      BytesRef term = sdv.get(i);\n      assertEquals(new BytesRef(\"value\"), term);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDifferentDVFormatPerField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(new Lucene49Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new Lucene49DocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"doc\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"bdv\", toBytes(5L)));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"value\")));\n    writer.addDocument(doc); // flushed document\n    writer.commit();\n    writer.addDocument(doc); // in-memory document\n    \n    writer.updateBinaryDocValue(new Term(\"key\", \"doc\"), \"bdv\", toBytes(17L));\n    writer.shutdown();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    \n    AtomicReader r = SlowCompositeReaderWrapper.wrap(reader);\n    BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n    SortedDocValues sdv = r.getSortedDocValues(\"sorted\");\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(17, getValue(bdv, i));\n      BytesRef term = sdv.get(i);\n      assertEquals(new BytesRef(\"value\"), term);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793","date":1408030244,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testDifferentDVFormatPerField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testDifferentDVFormatPerField().mjava","sourceNew":"  public void testDifferentDVFormatPerField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(new Lucene410Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new Lucene410DocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"doc\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"bdv\", toBytes(5L)));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"value\")));\n    writer.addDocument(doc); // flushed document\n    writer.commit();\n    writer.addDocument(doc); // in-memory document\n    \n    writer.updateBinaryDocValue(new Term(\"key\", \"doc\"), \"bdv\", toBytes(17L));\n    writer.close();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    \n    AtomicReader r = SlowCompositeReaderWrapper.wrap(reader);\n    BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n    SortedDocValues sdv = r.getSortedDocValues(\"sorted\");\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(17, getValue(bdv, i));\n      BytesRef term = sdv.get(i);\n      assertEquals(new BytesRef(\"value\"), term);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDifferentDVFormatPerField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(new Lucene49Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new Lucene49DocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"doc\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"bdv\", toBytes(5L)));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"value\")));\n    writer.addDocument(doc); // flushed document\n    writer.commit();\n    writer.addDocument(doc); // in-memory document\n    \n    writer.updateBinaryDocValue(new Term(\"key\", \"doc\"), \"bdv\", toBytes(17L));\n    writer.close();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    \n    AtomicReader r = SlowCompositeReaderWrapper.wrap(reader);\n    BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n    SortedDocValues sdv = r.getSortedDocValues(\"sorted\");\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(17, getValue(bdv, i));\n      BytesRef term = sdv.get(i);\n      assertEquals(new BytesRef(\"value\"), term);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e49088db00ea6cb232fbde9c8c646c721d4d049f","date":1411433559,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testDifferentDVFormatPerField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testDifferentDVFormatPerField().mjava","sourceNew":"  public void testDifferentDVFormatPerField() throws Exception {\n    // test relies on separate instances of \"same thing\"\n    assert TestUtil.getDefaultDocValuesFormat() != TestUtil.getDefaultDocValuesFormat();\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return TestUtil.getDefaultDocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"doc\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"bdv\", toBytes(5L)));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"value\")));\n    writer.addDocument(doc); // flushed document\n    writer.commit();\n    writer.addDocument(doc); // in-memory document\n    \n    writer.updateBinaryDocValue(new Term(\"key\", \"doc\"), \"bdv\", toBytes(17L));\n    writer.close();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    \n    AtomicReader r = SlowCompositeReaderWrapper.wrap(reader);\n    BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n    SortedDocValues sdv = r.getSortedDocValues(\"sorted\");\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(17, getValue(bdv, i));\n      BytesRef term = sdv.get(i);\n      assertEquals(new BytesRef(\"value\"), term);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDifferentDVFormatPerField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(new Lucene410Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new Lucene410DocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"doc\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"bdv\", toBytes(5L)));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"value\")));\n    writer.addDocument(doc); // flushed document\n    writer.commit();\n    writer.addDocument(doc); // in-memory document\n    \n    writer.updateBinaryDocValue(new Term(\"key\", \"doc\"), \"bdv\", toBytes(17L));\n    writer.close();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    \n    AtomicReader r = SlowCompositeReaderWrapper.wrap(reader);\n    BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n    SortedDocValues sdv = r.getSortedDocValues(\"sorted\");\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(17, getValue(bdv, i));\n      BytesRef term = sdv.get(i);\n      assertEquals(new BytesRef(\"value\"), term);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testDifferentDVFormatPerField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testDifferentDVFormatPerField().mjava","sourceNew":"  public void testDifferentDVFormatPerField() throws Exception {\n    // test relies on separate instances of \"same thing\"\n    assert TestUtil.getDefaultDocValuesFormat() != TestUtil.getDefaultDocValuesFormat();\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return TestUtil.getDefaultDocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"doc\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"bdv\", toBytes(5L)));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"value\")));\n    writer.addDocument(doc); // flushed document\n    writer.commit();\n    writer.addDocument(doc); // in-memory document\n    \n    writer.updateBinaryDocValue(new Term(\"key\", \"doc\"), \"bdv\", toBytes(17L));\n    writer.close();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    \n    LeafReader r = SlowCompositeReaderWrapper.wrap(reader);\n    BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n    SortedDocValues sdv = r.getSortedDocValues(\"sorted\");\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(17, getValue(bdv, i));\n      BytesRef term = sdv.get(i);\n      assertEquals(new BytesRef(\"value\"), term);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDifferentDVFormatPerField() throws Exception {\n    // test relies on separate instances of \"same thing\"\n    assert TestUtil.getDefaultDocValuesFormat() != TestUtil.getDefaultDocValuesFormat();\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return TestUtil.getDefaultDocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"doc\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"bdv\", toBytes(5L)));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"value\")));\n    writer.addDocument(doc); // flushed document\n    writer.commit();\n    writer.addDocument(doc); // in-memory document\n    \n    writer.updateBinaryDocValue(new Term(\"key\", \"doc\"), \"bdv\", toBytes(17L));\n    writer.close();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    \n    AtomicReader r = SlowCompositeReaderWrapper.wrap(reader);\n    BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n    SortedDocValues sdv = r.getSortedDocValues(\"sorted\");\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(17, getValue(bdv, i));\n      BytesRef term = sdv.get(i);\n      assertEquals(new BytesRef(\"value\"), term);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testDifferentDVFormatPerField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testDifferentDVFormatPerField().mjava","sourceNew":"  public void testDifferentDVFormatPerField() throws Exception {\n    // test relies on separate instances of \"same thing\"\n    assert TestUtil.getDefaultDocValuesFormat() != TestUtil.getDefaultDocValuesFormat();\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return TestUtil.getDefaultDocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"doc\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"bdv\", toBytes(5L)));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"value\")));\n    writer.addDocument(doc); // flushed document\n    writer.commit();\n    writer.addDocument(doc); // in-memory document\n    \n    writer.updateBinaryDocValue(new Term(\"key\", \"doc\"), \"bdv\", toBytes(17L));\n    writer.close();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    \n    BinaryDocValues bdv = MultiDocValues.getBinaryValues(reader, \"bdv\");\n    SortedDocValues sdv = MultiDocValues.getSortedValues(reader, \"sorted\");\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      assertEquals(17, getValue(bdv, i));\n      BytesRef term = sdv.get(i);\n      assertEquals(new BytesRef(\"value\"), term);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDifferentDVFormatPerField() throws Exception {\n    // test relies on separate instances of \"same thing\"\n    assert TestUtil.getDefaultDocValuesFormat() != TestUtil.getDefaultDocValuesFormat();\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return TestUtil.getDefaultDocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"doc\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"bdv\", toBytes(5L)));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"value\")));\n    writer.addDocument(doc); // flushed document\n    writer.commit();\n    writer.addDocument(doc); // in-memory document\n    \n    writer.updateBinaryDocValue(new Term(\"key\", \"doc\"), \"bdv\", toBytes(17L));\n    writer.close();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    \n    LeafReader r = SlowCompositeReaderWrapper.wrap(reader);\n    BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n    SortedDocValues sdv = r.getSortedDocValues(\"sorted\");\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(17, getValue(bdv, i));\n      BytesRef term = sdv.get(i);\n      assertEquals(new BytesRef(\"value\"), term);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87","06805da26538ed636bd89b10c2699cc3834032ae"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testDifferentDVFormatPerField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testDifferentDVFormatPerField().mjava","sourceNew":"  public void testDifferentDVFormatPerField() throws Exception {\n    // test relies on separate instances of \"same thing\"\n    assert TestUtil.getDefaultDocValuesFormat() != TestUtil.getDefaultDocValuesFormat();\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return TestUtil.getDefaultDocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"doc\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"bdv\", toBytes(5L)));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"value\")));\n    writer.addDocument(doc); // flushed document\n    writer.commit();\n    writer.addDocument(doc); // in-memory document\n    \n    writer.updateBinaryDocValue(new Term(\"key\", \"doc\"), \"bdv\", toBytes(17L));\n    writer.close();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    \n    BinaryDocValues bdv = MultiDocValues.getBinaryValues(reader, \"bdv\");\n    SortedDocValues sdv = MultiDocValues.getSortedValues(reader, \"sorted\");\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      assertEquals(i, bdv.nextDoc());\n      assertEquals(17, getValue(bdv));\n      assertEquals(i, sdv.nextDoc());\n      BytesRef term = sdv.binaryValue();\n      assertEquals(new BytesRef(\"value\"), term);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDifferentDVFormatPerField() throws Exception {\n    // test relies on separate instances of \"same thing\"\n    assert TestUtil.getDefaultDocValuesFormat() != TestUtil.getDefaultDocValuesFormat();\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return TestUtil.getDefaultDocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"doc\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"bdv\", toBytes(5L)));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"value\")));\n    writer.addDocument(doc); // flushed document\n    writer.commit();\n    writer.addDocument(doc); // in-memory document\n    \n    writer.updateBinaryDocValue(new Term(\"key\", \"doc\"), \"bdv\", toBytes(17L));\n    writer.close();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    \n    BinaryDocValues bdv = MultiDocValues.getBinaryValues(reader, \"bdv\");\n    SortedDocValues sdv = MultiDocValues.getSortedValues(reader, \"sorted\");\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      assertEquals(17, getValue(bdv, i));\n      BytesRef term = sdv.get(i);\n      assertEquals(new BytesRef(\"value\"), term);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testDifferentDVFormatPerField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testDifferentDVFormatPerField().mjava","sourceNew":"  public void testDifferentDVFormatPerField() throws Exception {\n    // test relies on separate instances of \"same thing\"\n    assert TestUtil.getDefaultDocValuesFormat() != TestUtil.getDefaultDocValuesFormat();\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return TestUtil.getDefaultDocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"doc\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"bdv\", toBytes(5L)));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"value\")));\n    writer.addDocument(doc); // flushed document\n    writer.commit();\n    writer.addDocument(doc); // in-memory document\n    \n    writer.updateBinaryDocValue(new Term(\"key\", \"doc\"), \"bdv\", toBytes(17L));\n    writer.close();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    \n    BinaryDocValues bdv = MultiDocValues.getBinaryValues(reader, \"bdv\");\n    SortedDocValues sdv = MultiDocValues.getSortedValues(reader, \"sorted\");\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      assertEquals(i, bdv.nextDoc());\n      assertEquals(17, getValue(bdv));\n      assertEquals(i, sdv.nextDoc());\n      BytesRef term = sdv.binaryValue();\n      assertEquals(new BytesRef(\"value\"), term);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDifferentDVFormatPerField() throws Exception {\n    // test relies on separate instances of \"same thing\"\n    assert TestUtil.getDefaultDocValuesFormat() != TestUtil.getDefaultDocValuesFormat();\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return TestUtil.getDefaultDocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"doc\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"bdv\", toBytes(5L)));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"value\")));\n    writer.addDocument(doc); // flushed document\n    writer.commit();\n    writer.addDocument(doc); // in-memory document\n    \n    writer.updateBinaryDocValue(new Term(\"key\", \"doc\"), \"bdv\", toBytes(17L));\n    writer.close();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    \n    BinaryDocValues bdv = MultiDocValues.getBinaryValues(reader, \"bdv\");\n    SortedDocValues sdv = MultiDocValues.getSortedValues(reader, \"sorted\");\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      assertEquals(17, getValue(bdv, i));\n      BytesRef term = sdv.get(i);\n      assertEquals(new BytesRef(\"value\"), term);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testDifferentDVFormatPerField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testDifferentDVFormatPerField().mjava","sourceNew":"  public void testDifferentDVFormatPerField() throws Exception {\n    // test relies on separate instances of \"same thing\"\n    assert TestUtil.getDefaultDocValuesFormat() != TestUtil.getDefaultDocValuesFormat();\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return TestUtil.getDefaultDocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"doc\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"bdv\", toBytes(5L)));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"value\")));\n    writer.addDocument(doc); // flushed document\n    writer.commit();\n    writer.addDocument(doc); // in-memory document\n    \n    writer.updateBinaryDocValue(new Term(\"key\", \"doc\"), \"bdv\", toBytes(17L));\n    writer.close();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    \n    BinaryDocValues bdv = MultiDocValues.getBinaryValues(reader, \"bdv\");\n    SortedDocValues sdv = MultiDocValues.getSortedValues(reader, \"sorted\");\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      assertEquals(i, bdv.nextDoc());\n      assertEquals(17, getValue(bdv));\n      assertEquals(i, sdv.nextDoc());\n      BytesRef term = sdv.binaryValue();\n      assertEquals(new BytesRef(\"value\"), term);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDifferentDVFormatPerField() throws Exception {\n    // test relies on separate instances of \"same thing\"\n    assert TestUtil.getDefaultDocValuesFormat() != TestUtil.getDefaultDocValuesFormat();\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return TestUtil.getDefaultDocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"doc\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"bdv\", toBytes(5L)));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"value\")));\n    writer.addDocument(doc); // flushed document\n    writer.commit();\n    writer.addDocument(doc); // in-memory document\n    \n    writer.updateBinaryDocValue(new Term(\"key\", \"doc\"), \"bdv\", toBytes(17L));\n    writer.close();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    \n    BinaryDocValues bdv = MultiDocValues.getBinaryValues(reader, \"bdv\");\n    SortedDocValues sdv = MultiDocValues.getSortedValues(reader, \"sorted\");\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      assertEquals(17, getValue(bdv, i));\n      BytesRef term = sdv.get(i);\n      assertEquals(new BytesRef(\"value\"), term);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e49088db00ea6cb232fbde9c8c646c721d4d049f":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"06805da26538ed636bd89b10c2699cc3834032ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["e49088db00ea6cb232fbde9c8c646c721d4d049f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"8106bc60c7452250f84c65cdb43ab6b1d8eb1534":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["06805da26538ed636bd89b10c2699cc3834032ae"],"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"e49088db00ea6cb232fbde9c8c646c721d4d049f":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"06805da26538ed636bd89b10c2699cc3834032ae":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06805da26538ed636bd89b10c2699cc3834032ae"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793"],"8106bc60c7452250f84c65cdb43ab6b1d8eb1534":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793":["e49088db00ea6cb232fbde9c8c646c721d4d049f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}