{"path":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#copyTmpTlogFiles2Tlog(File).mjava","commits":[{"id":"e586ff50ac71d5ef3a27ced78f69deb41ab35ad5","date":1446841099,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#copyTmpTlogFiles2Tlog(File).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * The tlog files are moved from the tmp dir to the tlog dir as an atomic filesystem operation.\n   * A backup of the old directory is maintained. If the directory move fails, it will try to revert back the original\n   * tlog directory.\n   */\n  private boolean copyTmpTlogFiles2Tlog(File tmpTlogDir) {\n    Path tlogDir = FileSystems.getDefault().getPath(solrCore.getUpdateHandler().getUpdateLog().getLogDir());\n    Path backupTlogDir = FileSystems.getDefault().getPath(tlogDir.getParent().toAbsolutePath().toString(), tmpTlogDir.getName());\n\n    try {\n      Files.move(tlogDir, backupTlogDir, StandardCopyOption.ATOMIC_MOVE);\n    } catch (IOException e) {\n      SolrException.log(LOG, \"Unable to rename: \" + tlogDir + \" to: \" + backupTlogDir, e);\n      return false;\n    }\n\n    Path src = FileSystems.getDefault().getPath(backupTlogDir.toAbsolutePath().toString(), tmpTlogDir.getName());\n    try {\n      Files.move(src, tlogDir, StandardCopyOption.ATOMIC_MOVE);\n    } catch (IOException e) {\n      SolrException.log(LOG, \"Unable to rename: \" + src + \" to: \" + tlogDir, e);\n\n      // In case of error, try to revert back the original tlog directory\n      try {\n        Files.move(backupTlogDir, tlogDir, StandardCopyOption.ATOMIC_MOVE);\n      } catch (IOException e2) {\n        // bad, we were not able to revert back the original tlog directory\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to rename: \" + backupTlogDir + \" to: \" + tlogDir);\n      }\n\n      return false;\n    }\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#copyTmpTlogFiles2Tlog(File).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#copyTmpTlogFiles2Tlog(File).mjava","sourceNew":"  /**\n   * The tlog files are moved from the tmp dir to the tlog dir as an atomic filesystem operation.\n   * A backup of the old directory is maintained. If the directory move fails, it will try to revert back the original\n   * tlog directory.\n   */\n  private boolean copyTmpTlogFiles2Tlog(File tmpTlogDir) {\n    Path tlogDir = FileSystems.getDefault().getPath(solrCore.getUpdateHandler().getUpdateLog().getLogDir());\n    Path backupTlogDir = FileSystems.getDefault().getPath(tlogDir.getParent().toAbsolutePath().toString(), tmpTlogDir.getName());\n\n    try {\n      Files.move(tlogDir, backupTlogDir, StandardCopyOption.ATOMIC_MOVE);\n    } catch (IOException e) {\n      SolrException.log(log, \"Unable to rename: \" + tlogDir + \" to: \" + backupTlogDir, e);\n      return false;\n    }\n\n    Path src = FileSystems.getDefault().getPath(backupTlogDir.toAbsolutePath().toString(), tmpTlogDir.getName());\n    try {\n      Files.move(src, tlogDir, StandardCopyOption.ATOMIC_MOVE);\n    } catch (IOException e) {\n      SolrException.log(log, \"Unable to rename: \" + src + \" to: \" + tlogDir, e);\n\n      // In case of error, try to revert back the original tlog directory\n      try {\n        Files.move(backupTlogDir, tlogDir, StandardCopyOption.ATOMIC_MOVE);\n      } catch (IOException e2) {\n        // bad, we were not able to revert back the original tlog directory\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to rename: \" + backupTlogDir + \" to: \" + tlogDir);\n      }\n\n      return false;\n    }\n\n    return true;\n  }\n\n","sourceOld":"  /**\n   * The tlog files are moved from the tmp dir to the tlog dir as an atomic filesystem operation.\n   * A backup of the old directory is maintained. If the directory move fails, it will try to revert back the original\n   * tlog directory.\n   */\n  private boolean copyTmpTlogFiles2Tlog(File tmpTlogDir) {\n    Path tlogDir = FileSystems.getDefault().getPath(solrCore.getUpdateHandler().getUpdateLog().getLogDir());\n    Path backupTlogDir = FileSystems.getDefault().getPath(tlogDir.getParent().toAbsolutePath().toString(), tmpTlogDir.getName());\n\n    try {\n      Files.move(tlogDir, backupTlogDir, StandardCopyOption.ATOMIC_MOVE);\n    } catch (IOException e) {\n      SolrException.log(LOG, \"Unable to rename: \" + tlogDir + \" to: \" + backupTlogDir, e);\n      return false;\n    }\n\n    Path src = FileSystems.getDefault().getPath(backupTlogDir.toAbsolutePath().toString(), tmpTlogDir.getName());\n    try {\n      Files.move(src, tlogDir, StandardCopyOption.ATOMIC_MOVE);\n    } catch (IOException e) {\n      SolrException.log(LOG, \"Unable to rename: \" + src + \" to: \" + tlogDir, e);\n\n      // In case of error, try to revert back the original tlog directory\n      try {\n        Files.move(backupTlogDir, tlogDir, StandardCopyOption.ATOMIC_MOVE);\n      } catch (IOException e2) {\n        // bad, we were not able to revert back the original tlog directory\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to rename: \" + backupTlogDir + \" to: \" + tlogDir);\n      }\n\n      return false;\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e586ff50ac71d5ef3a27ced78f69deb41ab35ad5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["e586ff50ac71d5ef3a27ced78f69deb41ab35ad5"]},"commit2Childs":{"e586ff50ac71d5ef3a27ced78f69deb41ab35ad5":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e586ff50ac71d5ef3a27ced78f69deb41ab35ad5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}