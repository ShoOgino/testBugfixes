{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/GaussFitEvaluator#doWork(Object...).mjava","commits":[{"id":"452f55d661644eb883b54c7b82a575803fda4a84","date":1534011464,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/GaussFitEvaluator#doWork(Object...).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object... objects) throws IOException{\n\n    if(objects.length >= 3) {\n      throw new IOException(\"gaussfit function takes a maximum of 2 arguments.\");\n    }\n\n    Object first = objects[0];\n\n    double[] x = null;\n    double[] y = null;\n\n    if(objects.length == 1) {\n      //Only the y values passed\n\n      y = ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray();\n      x = new double[y.length];\n      for(int i=0; i<y.length; i++) {\n        x[i] = i;\n      }\n\n    } else if(objects.length == 2) {\n      // x and y passed\n      Object second = objects[1];\n      x = ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray();\n      y = ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray();\n\n\n    }\n\n    GaussianCurveFitter curveFitter = GaussianCurveFitter.create();\n\n    WeightedObservedPoints points = new WeightedObservedPoints();\n    for(int i=0; i<x.length; i++) {\n      points.add(x[i], y[i]);\n    }\n\n    List<WeightedObservedPoint> pointList = points.toList();\n\n    double[] guess = new GaussianCurveFitter.ParameterGuesser(pointList).guess();\n    curveFitter = curveFitter.withStartPoint(guess);\n\n    double[] coef = curveFitter.fit(pointList);\n    Gaussian gaussian = new Gaussian(coef[0], coef[1], coef[2]);\n    List list = new ArrayList();\n    for(double xvalue : x) {\n      double yvalue= gaussian.value(xvalue);\n      list.add(yvalue);\n    }\n\n    return new VectorFunction(gaussian, list);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","date":1591579911,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/GaussFitEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/GaussFitEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public Object doWork(Object... objects) throws IOException{\n\n    if(objects.length >= 3) {\n      throw new IOException(\"gaussfit function takes a maximum of 2 arguments.\");\n    }\n\n    Object first = objects[0];\n\n    double[] x = null;\n    double[] y = null;\n\n    if(objects.length == 1) {\n      //Only the y values passed\n\n      y = ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray();\n      x = new double[y.length];\n      for(int i=0; i<y.length; i++) {\n        x[i] = i;\n      }\n\n    } else if(objects.length == 2) {\n      // x and y passed\n      Object second = objects[1];\n      x = ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray();\n      y = ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray();\n\n\n    }\n\n    GaussianCurveFitter curveFitter = GaussianCurveFitter.create();\n\n    WeightedObservedPoints points = new WeightedObservedPoints();\n    for(int i=0; i<x.length; i++) {\n      points.add(x[i], y[i]);\n    }\n\n    List<WeightedObservedPoint> pointList = points.toList();\n\n    double[] guess = new GaussianCurveFitter.ParameterGuesser(pointList).guess();\n    curveFitter = curveFitter.withStartPoint(guess);\n\n    double[] coef = curveFitter.fit(pointList);\n    Gaussian gaussian = new Gaussian(coef[0], coef[1], coef[2]);\n    List list = new ArrayList();\n    for(double xvalue : x) {\n      double yvalue= gaussian.value(xvalue);\n      list.add(yvalue);\n    }\n\n    return new VectorFunction(gaussian, list);\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object... objects) throws IOException{\n\n    if(objects.length >= 3) {\n      throw new IOException(\"gaussfit function takes a maximum of 2 arguments.\");\n    }\n\n    Object first = objects[0];\n\n    double[] x = null;\n    double[] y = null;\n\n    if(objects.length == 1) {\n      //Only the y values passed\n\n      y = ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray();\n      x = new double[y.length];\n      for(int i=0; i<y.length; i++) {\n        x[i] = i;\n      }\n\n    } else if(objects.length == 2) {\n      // x and y passed\n      Object second = objects[1];\n      x = ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray();\n      y = ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray();\n\n\n    }\n\n    GaussianCurveFitter curveFitter = GaussianCurveFitter.create();\n\n    WeightedObservedPoints points = new WeightedObservedPoints();\n    for(int i=0; i<x.length; i++) {\n      points.add(x[i], y[i]);\n    }\n\n    List<WeightedObservedPoint> pointList = points.toList();\n\n    double[] guess = new GaussianCurveFitter.ParameterGuesser(pointList).guess();\n    curveFitter = curveFitter.withStartPoint(guess);\n\n    double[] coef = curveFitter.fit(pointList);\n    Gaussian gaussian = new Gaussian(coef[0], coef[1], coef[2]);\n    List list = new ArrayList();\n    for(double xvalue : x) {\n      double yvalue= gaussian.value(xvalue);\n      list.add(yvalue);\n    }\n\n    return new VectorFunction(gaussian, list);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["452f55d661644eb883b54c7b82a575803fda4a84"],"452f55d661644eb883b54c7b82a575803fda4a84":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"]},"commit2Childs":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"452f55d661644eb883b54c7b82a575803fda4a84":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["452f55d661644eb883b54c7b82a575803fda4a84"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}