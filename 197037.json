{"path":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkIndex(Directory,boolean,boolean,ByteArrayOutputStream).mjava","commits":[{"id":"aefe9c6efcbd9c785fd98f1379b8ba0b7aefebab","date":1457539417,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkIndex(Directory,boolean,boolean,ByteArrayOutputStream).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkIndex(Directory,boolean,boolean).mjava","sourceNew":"  /** If failFast is true, then throw the first exception when index corruption is hit, instead of moving on to other fields/segments to\n   *  look for any other corruption.  */\n  public static CheckIndex.Status checkIndex(Directory dir, boolean crossCheckTermVectors, boolean failFast, ByteArrayOutputStream output) throws IOException {\n    if (output == null) {\n      output = new ByteArrayOutputStream(1024);\n    }\n    // TODO: actually use the dir's locking, unless test uses a special method?\n    // some tests e.g. exception tests become much more complicated if they have to close the writer\n    try (CheckIndex checker = new CheckIndex(dir, NoLockFactory.INSTANCE.obtainLock(dir, \"bogus\"))) {\n      checker.setCrossCheckTermVectors(crossCheckTermVectors);\n      checker.setFailFast(failFast);\n      checker.setInfoStream(new PrintStream(output, false, IOUtils.UTF_8), false);\n      CheckIndex.Status indexStatus = checker.checkIndex(null);\n      \n      if (indexStatus == null || indexStatus.clean == false) {\n        System.out.println(\"CheckIndex failed\");\n        System.out.println(output.toString(IOUtils.UTF_8));\n        throw new RuntimeException(\"CheckIndex failed\");\n      } else {\n        if (LuceneTestCase.INFOSTREAM) {\n          System.out.println(output.toString(IOUtils.UTF_8));\n        }\n        return indexStatus;\n      }\n    }\n  }\n\n","sourceOld":"  /** If failFast is true, then throw the first exception when index corruption is hit, instead of moving on to other fields/segments to\n   *  look for any other corruption.  */\n  public static CheckIndex.Status checkIndex(Directory dir, boolean crossCheckTermVectors, boolean failFast) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    // TODO: actually use the dir's locking, unless test uses a special method?\n    // some tests e.g. exception tests become much more complicated if they have to close the writer\n    try (CheckIndex checker = new CheckIndex(dir, NoLockFactory.INSTANCE.obtainLock(dir, \"bogus\"))) {\n      checker.setCrossCheckTermVectors(crossCheckTermVectors);\n      checker.setFailFast(failFast);\n      checker.setInfoStream(new PrintStream(bos, false, IOUtils.UTF_8), false);\n      CheckIndex.Status indexStatus = checker.checkIndex(null);\n      \n      if (indexStatus == null || indexStatus.clean == false) {\n        System.out.println(\"CheckIndex failed\");\n        System.out.println(bos.toString(IOUtils.UTF_8));\n        throw new RuntimeException(\"CheckIndex failed\");\n      } else {\n        if (LuceneTestCase.INFOSTREAM) {\n          System.out.println(bos.toString(IOUtils.UTF_8));\n        }\n        return indexStatus;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a0e5953a07337cd41bcde610503024c07073b26","date":1519143251,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkIndex(Directory,boolean,boolean,ByteArrayOutputStream).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkIndex(Directory,boolean,boolean,ByteArrayOutputStream).mjava","sourceNew":"  /** If failFast is true, then throw the first exception when index corruption is hit, instead of moving on to other fields/segments to\n   *  look for any other corruption.  */\n  public static CheckIndex.Status checkIndex(Directory dir, boolean doSlowChecks, boolean failFast, ByteArrayOutputStream output) throws IOException {\n    if (output == null) {\n      output = new ByteArrayOutputStream(1024);\n    }\n    // TODO: actually use the dir's locking, unless test uses a special method?\n    // some tests e.g. exception tests become much more complicated if they have to close the writer\n    try (CheckIndex checker = new CheckIndex(dir, NoLockFactory.INSTANCE.obtainLock(dir, \"bogus\"))) {\n      checker.setDoSlowChecks(doSlowChecks);\n      checker.setFailFast(failFast);\n      checker.setInfoStream(new PrintStream(output, false, IOUtils.UTF_8), false);\n      CheckIndex.Status indexStatus = checker.checkIndex(null);\n      \n      if (indexStatus == null || indexStatus.clean == false) {\n        System.out.println(\"CheckIndex failed\");\n        System.out.println(output.toString(IOUtils.UTF_8));\n        throw new RuntimeException(\"CheckIndex failed\");\n      } else {\n        if (LuceneTestCase.INFOSTREAM) {\n          System.out.println(output.toString(IOUtils.UTF_8));\n        }\n        return indexStatus;\n      }\n    }\n  }\n\n","sourceOld":"  /** If failFast is true, then throw the first exception when index corruption is hit, instead of moving on to other fields/segments to\n   *  look for any other corruption.  */\n  public static CheckIndex.Status checkIndex(Directory dir, boolean crossCheckTermVectors, boolean failFast, ByteArrayOutputStream output) throws IOException {\n    if (output == null) {\n      output = new ByteArrayOutputStream(1024);\n    }\n    // TODO: actually use the dir's locking, unless test uses a special method?\n    // some tests e.g. exception tests become much more complicated if they have to close the writer\n    try (CheckIndex checker = new CheckIndex(dir, NoLockFactory.INSTANCE.obtainLock(dir, \"bogus\"))) {\n      checker.setCrossCheckTermVectors(crossCheckTermVectors);\n      checker.setFailFast(failFast);\n      checker.setInfoStream(new PrintStream(output, false, IOUtils.UTF_8), false);\n      CheckIndex.Status indexStatus = checker.checkIndex(null);\n      \n      if (indexStatus == null || indexStatus.clean == false) {\n        System.out.println(\"CheckIndex failed\");\n        System.out.println(output.toString(IOUtils.UTF_8));\n        throw new RuntimeException(\"CheckIndex failed\");\n      } else {\n        if (LuceneTestCase.INFOSTREAM) {\n          System.out.println(output.toString(IOUtils.UTF_8));\n        }\n        return indexStatus;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aefe9c6efcbd9c785fd98f1379b8ba0b7aefebab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9a0e5953a07337cd41bcde610503024c07073b26":["aefe9c6efcbd9c785fd98f1379b8ba0b7aefebab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9a0e5953a07337cd41bcde610503024c07073b26"]},"commit2Childs":{"aefe9c6efcbd9c785fd98f1379b8ba0b7aefebab":["9a0e5953a07337cd41bcde610503024c07073b26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aefe9c6efcbd9c785fd98f1379b8ba0b7aefebab"],"9a0e5953a07337cd41bcde610503024c07073b26":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}