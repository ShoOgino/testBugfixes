{"path":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testBooleanMustNot().mjava","commits":[{"id":"b7163f77bf4c4d0f2d3159ec6373dc52b33afc01","date":1363198923,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testBooleanMustNot().mjava","pathOld":"/dev/null","sourceNew":"  public void testBooleanMustNot() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, analyzer);\n    FieldType positionsType = new FieldType(TextField.TYPE_STORED);\n    positionsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    Field body = new Field(\"body\", \"This sentence has both terms.  This sentence has only terms.\", positionsType);\n    Document document = new Document();\n    document.add(body);\n    iw.addDocument(document);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher searcher = newSearcher(ir);\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"body\", \"terms\")), BooleanClause.Occur.SHOULD);\n    BooleanQuery query2 = new BooleanQuery();\n    query.add(query2, BooleanClause.Occur.SHOULD);\n    query2.add(new TermQuery(new Term(\"body\", \"both\")), BooleanClause.Occur.MUST_NOT);\n    TopDocs topDocs = searcher.search(query, 10);\n    assertEquals(1, topDocs.totalHits);\n    PostingsHighlighter highlighter = new PostingsHighlighter(Integer.MAX_VALUE-1);\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, topDocs, 2);\n    assertEquals(1, snippets.length);\n    assertFalse(snippets[0].contains(\"<b>both</b>\"));\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testBooleanMustNot().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testBooleanMustNot().mjava","sourceNew":"  public void testBooleanMustNot() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, analyzer);\n    FieldType positionsType = new FieldType(TextField.TYPE_STORED);\n    positionsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    Field body = new Field(\"body\", \"This sentence has both terms.  This sentence has only terms.\", positionsType);\n    Document document = new Document();\n    document.add(body);\n    iw.addDocument(document);\n    IndexReader ir = iw.getReader();\n    iw.shutdown();\n    IndexSearcher searcher = newSearcher(ir);\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"body\", \"terms\")), BooleanClause.Occur.SHOULD);\n    BooleanQuery query2 = new BooleanQuery();\n    query.add(query2, BooleanClause.Occur.SHOULD);\n    query2.add(new TermQuery(new Term(\"body\", \"both\")), BooleanClause.Occur.MUST_NOT);\n    TopDocs topDocs = searcher.search(query, 10);\n    assertEquals(1, topDocs.totalHits);\n    PostingsHighlighter highlighter = new PostingsHighlighter(Integer.MAX_VALUE-1);\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, topDocs, 2);\n    assertEquals(1, snippets.length);\n    assertFalse(snippets[0].contains(\"<b>both</b>\"));\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBooleanMustNot() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, analyzer);\n    FieldType positionsType = new FieldType(TextField.TYPE_STORED);\n    positionsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    Field body = new Field(\"body\", \"This sentence has both terms.  This sentence has only terms.\", positionsType);\n    Document document = new Document();\n    document.add(body);\n    iw.addDocument(document);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher searcher = newSearcher(ir);\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"body\", \"terms\")), BooleanClause.Occur.SHOULD);\n    BooleanQuery query2 = new BooleanQuery();\n    query.add(query2, BooleanClause.Occur.SHOULD);\n    query2.add(new TermQuery(new Term(\"body\", \"both\")), BooleanClause.Occur.MUST_NOT);\n    TopDocs topDocs = searcher.search(query, 10);\n    assertEquals(1, topDocs.totalHits);\n    PostingsHighlighter highlighter = new PostingsHighlighter(Integer.MAX_VALUE-1);\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, topDocs, 2);\n    assertEquals(1, snippets.length);\n    assertFalse(snippets[0].contains(\"<b>both</b>\"));\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testBooleanMustNot().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testBooleanMustNot().mjava","sourceNew":"  public void testBooleanMustNot() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, analyzer);\n    FieldType positionsType = new FieldType(TextField.TYPE_STORED);\n    positionsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    Field body = new Field(\"body\", \"This sentence has both terms.  This sentence has only terms.\", positionsType);\n    Document document = new Document();\n    document.add(body);\n    iw.addDocument(document);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher searcher = newSearcher(ir);\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"body\", \"terms\")), BooleanClause.Occur.SHOULD);\n    BooleanQuery query2 = new BooleanQuery();\n    query.add(query2, BooleanClause.Occur.SHOULD);\n    query2.add(new TermQuery(new Term(\"body\", \"both\")), BooleanClause.Occur.MUST_NOT);\n    TopDocs topDocs = searcher.search(query, 10);\n    assertEquals(1, topDocs.totalHits);\n    PostingsHighlighter highlighter = new PostingsHighlighter(Integer.MAX_VALUE-1);\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, topDocs, 2);\n    assertEquals(1, snippets.length);\n    assertFalse(snippets[0].contains(\"<b>both</b>\"));\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBooleanMustNot() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, analyzer);\n    FieldType positionsType = new FieldType(TextField.TYPE_STORED);\n    positionsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    Field body = new Field(\"body\", \"This sentence has both terms.  This sentence has only terms.\", positionsType);\n    Document document = new Document();\n    document.add(body);\n    iw.addDocument(document);\n    IndexReader ir = iw.getReader();\n    iw.shutdown();\n    IndexSearcher searcher = newSearcher(ir);\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"body\", \"terms\")), BooleanClause.Occur.SHOULD);\n    BooleanQuery query2 = new BooleanQuery();\n    query.add(query2, BooleanClause.Occur.SHOULD);\n    query2.add(new TermQuery(new Term(\"body\", \"both\")), BooleanClause.Occur.MUST_NOT);\n    TopDocs topDocs = searcher.search(query, 10);\n    assertEquals(1, topDocs.totalHits);\n    PostingsHighlighter highlighter = new PostingsHighlighter(Integer.MAX_VALUE-1);\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, topDocs, 2);\n    assertEquals(1, snippets.length);\n    assertFalse(snippets[0].contains(\"<b>both</b>\"));\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testBooleanMustNot().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testBooleanMustNot().mjava","sourceNew":"  public void testBooleanMustNot() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, analyzer);\n    FieldType positionsType = new FieldType(TextField.TYPE_STORED);\n    positionsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    Field body = new Field(\"body\", \"This sentence has both terms.  This sentence has only terms.\", positionsType);\n    Document document = new Document();\n    document.add(body);\n    iw.addDocument(document);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher searcher = newSearcher(ir);\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new TermQuery(new Term(\"body\", \"terms\")), BooleanClause.Occur.SHOULD);\n    BooleanQuery.Builder query2 = new BooleanQuery.Builder();\n    query.add(query2.build(), BooleanClause.Occur.SHOULD);\n    query2.add(new TermQuery(new Term(\"body\", \"both\")), BooleanClause.Occur.MUST_NOT);\n    TopDocs topDocs = searcher.search(query.build(), 10);\n    assertEquals(1, topDocs.totalHits);\n    PostingsHighlighter highlighter = new PostingsHighlighter(Integer.MAX_VALUE-1);\n    String snippets[] = highlighter.highlight(\"body\", query.build(), searcher, topDocs, 2);\n    assertEquals(1, snippets.length);\n    assertFalse(snippets[0].contains(\"<b>both</b>\"));\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBooleanMustNot() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, analyzer);\n    FieldType positionsType = new FieldType(TextField.TYPE_STORED);\n    positionsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    Field body = new Field(\"body\", \"This sentence has both terms.  This sentence has only terms.\", positionsType);\n    Document document = new Document();\n    document.add(body);\n    iw.addDocument(document);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher searcher = newSearcher(ir);\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"body\", \"terms\")), BooleanClause.Occur.SHOULD);\n    BooleanQuery query2 = new BooleanQuery();\n    query.add(query2, BooleanClause.Occur.SHOULD);\n    query2.add(new TermQuery(new Term(\"body\", \"both\")), BooleanClause.Occur.MUST_NOT);\n    TopDocs topDocs = searcher.search(query, 10);\n    assertEquals(1, topDocs.totalHits);\n    PostingsHighlighter highlighter = new PostingsHighlighter(Integer.MAX_VALUE-1);\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, topDocs, 2);\n    assertEquals(1, snippets.length);\n    assertFalse(snippets[0].contains(\"<b>both</b>\"));\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"381618eac2691bb34ab9a3fca76ad55c6274517e","date":1495564791,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testBooleanMustNot().mjava","sourceNew":null,"sourceOld":"  public void testBooleanMustNot() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, analyzer);\n    FieldType positionsType = new FieldType(TextField.TYPE_STORED);\n    positionsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    Field body = new Field(\"body\", \"This sentence has both terms.  This sentence has only terms.\", positionsType);\n    Document document = new Document();\n    document.add(body);\n    iw.addDocument(document);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher searcher = newSearcher(ir);\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new TermQuery(new Term(\"body\", \"terms\")), BooleanClause.Occur.SHOULD);\n    BooleanQuery.Builder query2 = new BooleanQuery.Builder();\n    query.add(query2.build(), BooleanClause.Occur.SHOULD);\n    query2.add(new TermQuery(new Term(\"body\", \"both\")), BooleanClause.Occur.MUST_NOT);\n    TopDocs topDocs = searcher.search(query.build(), 10);\n    assertEquals(1, topDocs.totalHits);\n    PostingsHighlighter highlighter = new PostingsHighlighter(Integer.MAX_VALUE-1);\n    String snippets[] = highlighter.highlight(\"body\", query.build(), searcher, topDocs, 2);\n    assertEquals(1, snippets.length);\n    assertFalse(snippets[0].contains(\"<b>both</b>\"));\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testBooleanMustNot().mjava","sourceNew":null,"sourceOld":"  public void testBooleanMustNot() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, analyzer);\n    FieldType positionsType = new FieldType(TextField.TYPE_STORED);\n    positionsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    Field body = new Field(\"body\", \"This sentence has both terms.  This sentence has only terms.\", positionsType);\n    Document document = new Document();\n    document.add(body);\n    iw.addDocument(document);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher searcher = newSearcher(ir);\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new TermQuery(new Term(\"body\", \"terms\")), BooleanClause.Occur.SHOULD);\n    BooleanQuery.Builder query2 = new BooleanQuery.Builder();\n    query.add(query2.build(), BooleanClause.Occur.SHOULD);\n    query2.add(new TermQuery(new Term(\"body\", \"both\")), BooleanClause.Occur.MUST_NOT);\n    TopDocs topDocs = searcher.search(query.build(), 10);\n    assertEquals(1, topDocs.totalHits);\n    PostingsHighlighter highlighter = new PostingsHighlighter(Integer.MAX_VALUE-1);\n    String snippets[] = highlighter.highlight(\"body\", query.build(), searcher, topDocs, 2);\n    assertEquals(1, snippets.length);\n    assertFalse(snippets[0].contains(\"<b>both</b>\"));\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"381618eac2691bb34ab9a3fca76ad55c6274517e":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","381618eac2691bb34ab9a3fca76ad55c6274517e"],"b7163f77bf4c4d0f2d3159ec6373dc52b33afc01":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["b7163f77bf4c4d0f2d3159ec6373dc52b33afc01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["381618eac2691bb34ab9a3fca76ad55c6274517e"]},"commit2Childs":{"381618eac2691bb34ab9a3fca76ad55c6274517e":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["381618eac2691bb34ab9a3fca76ad55c6274517e","e9017cf144952056066919f1ebc7897ff9bd71b1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"b7163f77bf4c4d0f2d3159ec6373dc52b33afc01":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b7163f77bf4c4d0f2d3159ec6373dc52b33afc01"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}