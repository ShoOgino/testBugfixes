{"path":"lucene/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#assertLev(String,int).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#assertLev(String,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Builds a DFA for some string, and checks all Lev automata\n   * up to some maximum distance.\n   */\n  private void assertLev(String s, int maxDistance) {\n    LevenshteinAutomata builder = new LevenshteinAutomata(s);\n    Automaton automata[] = new Automaton[maxDistance + 1];\n    for (int n = 0; n < automata.length; n++) {\n      automata[n] = builder.toAutomaton(n);\n      assertNotNull(automata[n]);\n      assertTrue(automata[n].isDeterministic());\n      assertTrue(SpecialOperations.isFinite(automata[n]));\n      // check that the dfa for n-1 accepts a subset of the dfa for n\n      if (n > 0) {\n        assertTrue(automata[n-1].subsetOf(automata[n]));\n        assertNotSame(automata[n-1], automata[n]);\n      }\n      // special checks for specific n\n      switch(n) {\n        case 0:\n          // easy, matches the string itself\n          assertEquals(BasicAutomata.makeString(s), automata[0]);\n          break;\n        case 1:\n          // generate a lev1 naively, and check the accepted lang is the same.\n          assertEquals(naiveLev1(s), automata[1]);\n          break;\n        default:\n          assertBruteForce(s, automata[n], n);\n          break;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#assertLev(String,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#assertLev(String,int).mjava","sourceNew":"  /**\n   * Builds a DFA for some string, and checks all Lev automata\n   * up to some maximum distance.\n   */\n  private void assertLev(String s, int maxDistance) {\n    LevenshteinAutomata builder = new LevenshteinAutomata(s);\n    Automaton automata[] = new Automaton[maxDistance + 1];\n    for (int n = 0; n < automata.length; n++) {\n      automata[n] = builder.toAutomaton(n);\n      assertNotNull(automata[n]);\n      assertTrue(automata[n].isDeterministic());\n      assertTrue(SpecialOperations.isFinite(automata[n]));\n      // check that the dfa for n-1 accepts a subset of the dfa for n\n      if (n > 0) {\n        assertTrue(automata[n-1].subsetOf(automata[n]));\n        assertNotSame(automata[n-1], automata[n]);\n      }\n      // special checks for specific n\n      switch(n) {\n        case 0:\n          // easy, matches the string itself\n          assertTrue(BasicOperations.sameLanguage(BasicAutomata.makeString(s), automata[0]));\n          break;\n        case 1:\n          // generate a lev1 naively, and check the accepted lang is the same.\n          assertTrue(BasicOperations.sameLanguage(naiveLev1(s), automata[1]));\n          break;\n        default:\n          assertBruteForce(s, automata[n], n);\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds a DFA for some string, and checks all Lev automata\n   * up to some maximum distance.\n   */\n  private void assertLev(String s, int maxDistance) {\n    LevenshteinAutomata builder = new LevenshteinAutomata(s);\n    Automaton automata[] = new Automaton[maxDistance + 1];\n    for (int n = 0; n < automata.length; n++) {\n      automata[n] = builder.toAutomaton(n);\n      assertNotNull(automata[n]);\n      assertTrue(automata[n].isDeterministic());\n      assertTrue(SpecialOperations.isFinite(automata[n]));\n      // check that the dfa for n-1 accepts a subset of the dfa for n\n      if (n > 0) {\n        assertTrue(automata[n-1].subsetOf(automata[n]));\n        assertNotSame(automata[n-1], automata[n]);\n      }\n      // special checks for specific n\n      switch(n) {\n        case 0:\n          // easy, matches the string itself\n          assertEquals(BasicAutomata.makeString(s), automata[0]);\n          break;\n        case 1:\n          // generate a lev1 naively, and check the accepted lang is the same.\n          assertEquals(naiveLev1(s), automata[1]);\n          break;\n        default:\n          assertBruteForce(s, automata[n], n);\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"782d081ef8a29ca6f1b14a966d0c0bee4bd03ba2","date":1305314405,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#assertLev(String,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#assertLev(String,int).mjava","sourceNew":"  /**\n   * Builds a DFA for some string, and checks all Lev automata\n   * up to some maximum distance.\n   */\n  private void assertLev(String s, int maxDistance) {\n    LevenshteinAutomata builder = new LevenshteinAutomata(s);\n    Automaton automata[] = new Automaton[maxDistance + 1];\n    for (int n = 0; n < automata.length; n++) {\n      automata[n] = builder.toAutomaton(n);\n      assertNotNull(automata[n]);\n      assertTrue(automata[n].isDeterministic());\n      assertTrue(SpecialOperations.isFinite(automata[n]));\n      AutomatonTestUtil.assertNoDetachedStates(automata[n]);\n      // check that the dfa for n-1 accepts a subset of the dfa for n\n      if (n > 0) {\n        assertTrue(automata[n-1].subsetOf(automata[n]));\n        assertNotSame(automata[n-1], automata[n]);\n      }\n      // special checks for specific n\n      switch(n) {\n        case 0:\n          // easy, matches the string itself\n          assertTrue(BasicOperations.sameLanguage(BasicAutomata.makeString(s), automata[0]));\n          break;\n        case 1:\n          // generate a lev1 naively, and check the accepted lang is the same.\n          assertTrue(BasicOperations.sameLanguage(naiveLev1(s), automata[1]));\n          break;\n        default:\n          assertBruteForce(s, automata[n], n);\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds a DFA for some string, and checks all Lev automata\n   * up to some maximum distance.\n   */\n  private void assertLev(String s, int maxDistance) {\n    LevenshteinAutomata builder = new LevenshteinAutomata(s);\n    Automaton automata[] = new Automaton[maxDistance + 1];\n    for (int n = 0; n < automata.length; n++) {\n      automata[n] = builder.toAutomaton(n);\n      assertNotNull(automata[n]);\n      assertTrue(automata[n].isDeterministic());\n      assertTrue(SpecialOperations.isFinite(automata[n]));\n      // check that the dfa for n-1 accepts a subset of the dfa for n\n      if (n > 0) {\n        assertTrue(automata[n-1].subsetOf(automata[n]));\n        assertNotSame(automata[n-1], automata[n]);\n      }\n      // special checks for specific n\n      switch(n) {\n        case 0:\n          // easy, matches the string itself\n          assertTrue(BasicOperations.sameLanguage(BasicAutomata.makeString(s), automata[0]));\n          break;\n        case 1:\n          // generate a lev1 naively, and check the accepted lang is the same.\n          assertTrue(BasicOperations.sameLanguage(naiveLev1(s), automata[1]));\n          break;\n        default:\n          assertBruteForce(s, automata[n], n);\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#assertLev(String,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#assertLev(String,int).mjava","sourceNew":"  /**\n   * Builds a DFA for some string, and checks all Lev automata\n   * up to some maximum distance.\n   */\n  private void assertLev(String s, int maxDistance) {\n    LevenshteinAutomata builder = new LevenshteinAutomata(s);\n    Automaton automata[] = new Automaton[maxDistance + 1];\n    for (int n = 0; n < automata.length; n++) {\n      automata[n] = builder.toAutomaton(n);\n      assertNotNull(automata[n]);\n      assertTrue(automata[n].isDeterministic());\n      assertTrue(SpecialOperations.isFinite(automata[n]));\n      AutomatonTestUtil.assertNoDetachedStates(automata[n]);\n      // check that the dfa for n-1 accepts a subset of the dfa for n\n      if (n > 0) {\n        assertTrue(automata[n-1].subsetOf(automata[n]));\n        assertNotSame(automata[n-1], automata[n]);\n      }\n      // special checks for specific n\n      switch(n) {\n        case 0:\n          // easy, matches the string itself\n          assertTrue(BasicOperations.sameLanguage(BasicAutomata.makeString(s), automata[0]));\n          break;\n        case 1:\n          // generate a lev1 naively, and check the accepted lang is the same.\n          assertTrue(BasicOperations.sameLanguage(naiveLev1(s), automata[1]));\n          break;\n        default:\n          assertBruteForce(s, automata[n], n);\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds a DFA for some string, and checks all Lev automata\n   * up to some maximum distance.\n   */\n  private void assertLev(String s, int maxDistance) {\n    LevenshteinAutomata builder = new LevenshteinAutomata(s);\n    Automaton automata[] = new Automaton[maxDistance + 1];\n    for (int n = 0; n < automata.length; n++) {\n      automata[n] = builder.toAutomaton(n);\n      assertNotNull(automata[n]);\n      assertTrue(automata[n].isDeterministic());\n      assertTrue(SpecialOperations.isFinite(automata[n]));\n      // check that the dfa for n-1 accepts a subset of the dfa for n\n      if (n > 0) {\n        assertTrue(automata[n-1].subsetOf(automata[n]));\n        assertNotSame(automata[n-1], automata[n]);\n      }\n      // special checks for specific n\n      switch(n) {\n        case 0:\n          // easy, matches the string itself\n          assertTrue(BasicOperations.sameLanguage(BasicAutomata.makeString(s), automata[0]));\n          break;\n        case 1:\n          // generate a lev1 naively, and check the accepted lang is the same.\n          assertTrue(BasicOperations.sameLanguage(naiveLev1(s), automata[1]));\n          break;\n        default:\n          assertBruteForce(s, automata[n], n);\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#assertLev(String,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#assertLev(String,int).mjava","sourceNew":"  /**\n   * Builds a DFA for some string, and checks all Lev automata\n   * up to some maximum distance.\n   */\n  private void assertLev(String s, int maxDistance) {\n    LevenshteinAutomata builder = new LevenshteinAutomata(s);\n    Automaton automata[] = new Automaton[maxDistance + 1];\n    for (int n = 0; n < automata.length; n++) {\n      automata[n] = builder.toAutomaton(n);\n      assertNotNull(automata[n]);\n      assertTrue(automata[n].isDeterministic());\n      assertTrue(SpecialOperations.isFinite(automata[n]));\n      AutomatonTestUtil.assertNoDetachedStates(automata[n]);\n      // check that the dfa for n-1 accepts a subset of the dfa for n\n      if (n > 0) {\n        assertTrue(automata[n-1].subsetOf(automata[n]));\n        assertNotSame(automata[n-1], automata[n]);\n      }\n      // special checks for specific n\n      switch(n) {\n        case 0:\n          // easy, matches the string itself\n          assertTrue(BasicOperations.sameLanguage(BasicAutomata.makeString(s), automata[0]));\n          break;\n        case 1:\n          // generate a lev1 naively, and check the accepted lang is the same.\n          assertTrue(BasicOperations.sameLanguage(naiveLev1(s), automata[1]));\n          break;\n        default:\n          assertBruteForce(s, automata[n], n);\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds a DFA for some string, and checks all Lev automata\n   * up to some maximum distance.\n   */\n  private void assertLev(String s, int maxDistance) {\n    LevenshteinAutomata builder = new LevenshteinAutomata(s);\n    Automaton automata[] = new Automaton[maxDistance + 1];\n    for (int n = 0; n < automata.length; n++) {\n      automata[n] = builder.toAutomaton(n);\n      assertNotNull(automata[n]);\n      assertTrue(automata[n].isDeterministic());\n      assertTrue(SpecialOperations.isFinite(automata[n]));\n      // check that the dfa for n-1 accepts a subset of the dfa for n\n      if (n > 0) {\n        assertTrue(automata[n-1].subsetOf(automata[n]));\n        assertNotSame(automata[n-1], automata[n]);\n      }\n      // special checks for specific n\n      switch(n) {\n        case 0:\n          // easy, matches the string itself\n          assertTrue(BasicOperations.sameLanguage(BasicAutomata.makeString(s), automata[0]));\n          break;\n        case 1:\n          // generate a lev1 naively, and check the accepted lang is the same.\n          assertTrue(BasicOperations.sameLanguage(naiveLev1(s), automata[1]));\n          break;\n        default:\n          assertBruteForce(s, automata[n], n);\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3aecf04c2d454cf9e42c4dc50241a8df41f8e6ab","date":1324934316,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#assertLev(String,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#assertLev(String,int).mjava","sourceNew":"  /**\n   * Builds a DFA for some string, and checks all Lev automata\n   * up to some maximum distance.\n   */\n  private void assertLev(String s, int maxDistance) {\n    LevenshteinAutomata builder = new LevenshteinAutomata(s, false);\n    LevenshteinAutomata tbuilder = new LevenshteinAutomata(s, true);\n    Automaton automata[] = new Automaton[maxDistance + 1];\n    Automaton tautomata[] = new Automaton[maxDistance + 1];\n    for (int n = 0; n < automata.length; n++) {\n      automata[n] = builder.toAutomaton(n);\n      tautomata[n] = tbuilder.toAutomaton(n);\n      assertNotNull(automata[n]);\n      assertNotNull(tautomata[n]);\n      assertTrue(automata[n].isDeterministic());\n      assertTrue(tautomata[n].isDeterministic());\n      assertTrue(SpecialOperations.isFinite(automata[n]));\n      assertTrue(SpecialOperations.isFinite(tautomata[n]));\n      AutomatonTestUtil.assertNoDetachedStates(automata[n]);\n      AutomatonTestUtil.assertNoDetachedStates(tautomata[n]);\n      // check that the dfa for n-1 accepts a subset of the dfa for n\n      if (n > 0) {\n        assertTrue(automata[n-1].subsetOf(automata[n]));\n        assertTrue(automata[n-1].subsetOf(tautomata[n]));\n        assertTrue(tautomata[n-1].subsetOf(automata[n]));\n        assertTrue(tautomata[n-1].subsetOf(tautomata[n]));\n        assertNotSame(automata[n-1], automata[n]);\n      }\n      // check that Lev(N) is a subset of LevT(N)\n      assertTrue(automata[n].subsetOf(tautomata[n]));\n      // special checks for specific n\n      switch(n) {\n        case 0:\n          // easy, matches the string itself\n          assertTrue(BasicOperations.sameLanguage(BasicAutomata.makeString(s), automata[0]));\n          assertTrue(BasicOperations.sameLanguage(BasicAutomata.makeString(s), tautomata[0]));\n          break;\n        case 1:\n          // generate a lev1 naively, and check the accepted lang is the same.\n          assertTrue(BasicOperations.sameLanguage(naiveLev1(s), automata[1]));\n          assertTrue(BasicOperations.sameLanguage(naiveLev1T(s), tautomata[1]));\n          break;\n        default:\n          assertBruteForce(s, automata[n], n);\n          assertBruteForceT(s, tautomata[n], n);\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds a DFA for some string, and checks all Lev automata\n   * up to some maximum distance.\n   */\n  private void assertLev(String s, int maxDistance) {\n    LevenshteinAutomata builder = new LevenshteinAutomata(s);\n    Automaton automata[] = new Automaton[maxDistance + 1];\n    for (int n = 0; n < automata.length; n++) {\n      automata[n] = builder.toAutomaton(n);\n      assertNotNull(automata[n]);\n      assertTrue(automata[n].isDeterministic());\n      assertTrue(SpecialOperations.isFinite(automata[n]));\n      AutomatonTestUtil.assertNoDetachedStates(automata[n]);\n      // check that the dfa for n-1 accepts a subset of the dfa for n\n      if (n > 0) {\n        assertTrue(automata[n-1].subsetOf(automata[n]));\n        assertNotSame(automata[n-1], automata[n]);\n      }\n      // special checks for specific n\n      switch(n) {\n        case 0:\n          // easy, matches the string itself\n          assertTrue(BasicOperations.sameLanguage(BasicAutomata.makeString(s), automata[0]));\n          break;\n        case 1:\n          // generate a lev1 naively, and check the accepted lang is the same.\n          assertTrue(BasicOperations.sameLanguage(naiveLev1(s), automata[1]));\n          break;\n        default:\n          assertBruteForce(s, automata[n], n);\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#assertLev(String,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#assertLev(String,int).mjava","sourceNew":"  /**\n   * Builds a DFA for some string, and checks all Lev automata\n   * up to some maximum distance.\n   */\n  private void assertLev(String s, int maxDistance) {\n    LevenshteinAutomata builder = new LevenshteinAutomata(s, false);\n    LevenshteinAutomata tbuilder = new LevenshteinAutomata(s, true);\n    Automaton automata[] = new Automaton[maxDistance + 1];\n    Automaton tautomata[] = new Automaton[maxDistance + 1];\n    for (int n = 0; n < automata.length; n++) {\n      automata[n] = builder.toAutomaton(n);\n      tautomata[n] = tbuilder.toAutomaton(n);\n      assertNotNull(automata[n]);\n      assertNotNull(tautomata[n]);\n      assertTrue(automata[n].isDeterministic());\n      assertTrue(tautomata[n].isDeterministic());\n      assertTrue(SpecialOperations.isFinite(automata[n]));\n      assertTrue(SpecialOperations.isFinite(tautomata[n]));\n      AutomatonTestUtil.assertNoDetachedStates(automata[n]);\n      AutomatonTestUtil.assertNoDetachedStates(tautomata[n]);\n      // check that the dfa for n-1 accepts a subset of the dfa for n\n      if (n > 0) {\n        assertTrue(automata[n-1].subsetOf(automata[n]));\n        assertTrue(automata[n-1].subsetOf(tautomata[n]));\n        assertTrue(tautomata[n-1].subsetOf(automata[n]));\n        assertTrue(tautomata[n-1].subsetOf(tautomata[n]));\n        assertNotSame(automata[n-1], automata[n]);\n      }\n      // check that Lev(N) is a subset of LevT(N)\n      assertTrue(automata[n].subsetOf(tautomata[n]));\n      // special checks for specific n\n      switch(n) {\n        case 0:\n          // easy, matches the string itself\n          assertTrue(BasicOperations.sameLanguage(BasicAutomata.makeString(s), automata[0]));\n          assertTrue(BasicOperations.sameLanguage(BasicAutomata.makeString(s), tautomata[0]));\n          break;\n        case 1:\n          // generate a lev1 naively, and check the accepted lang is the same.\n          assertTrue(BasicOperations.sameLanguage(naiveLev1(s), automata[1]));\n          assertTrue(BasicOperations.sameLanguage(naiveLev1T(s), tautomata[1]));\n          break;\n        default:\n          assertBruteForce(s, automata[n], n);\n          assertBruteForceT(s, tautomata[n], n);\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds a DFA for some string, and checks all Lev automata\n   * up to some maximum distance.\n   */\n  private void assertLev(String s, int maxDistance) {\n    LevenshteinAutomata builder = new LevenshteinAutomata(s, false);\n    LevenshteinAutomata tbuilder = new LevenshteinAutomata(s, true);\n    Automaton automata[] = new Automaton[maxDistance + 1];\n    Automaton tautomata[] = new Automaton[maxDistance + 1];\n    for (int n = 0; n < automata.length; n++) {\n      automata[n] = builder.toAutomaton(n);\n      tautomata[n] = tbuilder.toAutomaton(n);\n      assertNotNull(automata[n]);\n      assertNotNull(tautomata[n]);\n      assertTrue(automata[n].isDeterministic());\n      assertTrue(tautomata[n].isDeterministic());\n      assertTrue(SpecialOperations.isFinite(automata[n]));\n      assertTrue(SpecialOperations.isFinite(tautomata[n]));\n      AutomatonTestUtil.assertNoDetachedStates(automata[n]);\n      AutomatonTestUtil.assertNoDetachedStates(tautomata[n]);\n      // check that the dfa for n-1 accepts a subset of the dfa for n\n      if (n > 0) {\n        assertTrue(automata[n-1].subsetOf(automata[n]));\n        assertTrue(automata[n-1].subsetOf(tautomata[n]));\n        assertTrue(tautomata[n-1].subsetOf(automata[n]));\n        assertTrue(tautomata[n-1].subsetOf(tautomata[n]));\n        assertNotSame(automata[n-1], automata[n]);\n      }\n      // check that Lev(N) is a subset of LevT(N)\n      assertTrue(automata[n].subsetOf(tautomata[n]));\n      // special checks for specific n\n      switch(n) {\n        case 0:\n          // easy, matches the string itself\n          assertTrue(BasicOperations.sameLanguage(BasicAutomata.makeString(s), automata[0]));\n          assertTrue(BasicOperations.sameLanguage(BasicAutomata.makeString(s), tautomata[0]));\n          break;\n        case 1:\n          // generate a lev1 naively, and check the accepted lang is the same.\n          assertTrue(BasicOperations.sameLanguage(naiveLev1(s), automata[1]));\n          assertTrue(BasicOperations.sameLanguage(naiveLev1T(s), tautomata[1]));\n          break;\n        default:\n          assertBruteForce(s, automata[n], n);\n          assertBruteForceT(s, tautomata[n], n);\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c3a8a449466c1ff7ce2274fe73dab487256964b4":["5acb0ee59cc50caf85402e92d148fdb2af61bc19","782d081ef8a29ca6f1b14a966d0c0bee4bd03ba2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3aecf04c2d454cf9e42c4dc50241a8df41f8e6ab"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5acb0ee59cc50caf85402e92d148fdb2af61bc19","782d081ef8a29ca6f1b14a966d0c0bee4bd03ba2"],"3aecf04c2d454cf9e42c4dc50241a8df41f8e6ab":["782d081ef8a29ca6f1b14a966d0c0bee4bd03ba2"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"782d081ef8a29ca6f1b14a966d0c0bee4bd03ba2":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","782d081ef8a29ca6f1b14a966d0c0bee4bd03ba2"],"3aecf04c2d454cf9e42c4dc50241a8df41f8e6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"782d081ef8a29ca6f1b14a966d0c0bee4bd03ba2":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","3aecf04c2d454cf9e42c4dc50241a8df41f8e6ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}