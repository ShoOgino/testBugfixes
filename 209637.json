{"path":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.SortedDocValuesCache#createValue(LeafReader,CacheKey,boolean).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.SortedDocValuesCache#createValue(LeafReader,CacheKey,boolean).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    protected Accountable createValue(LeafReader reader, CacheKey key, boolean setDocsWithField /* ignored */)\n        throws IOException {\n\n      final int maxDoc = reader.maxDoc();\n\n      Terms terms = reader.terms(key.field);\n\n      final float acceptableOverheadRatio = ((Float) key.custom).floatValue();\n\n      final PagedBytes bytes = new PagedBytes(15);\n\n      int startTermsBPV;\n\n      // TODO: use Uninvert?\n      if (terms != null) {\n        // Try for coarse estimate for number of bits; this\n        // should be an underestimate most of the time, which\n        // is fine -- GrowableWriter will reallocate as needed\n        long numUniqueTerms = terms.size();\n        if (numUniqueTerms != -1L) {\n          if (numUniqueTerms > maxDoc) {\n            throw new IllegalStateException(\"Type mismatch: \" + key.field + \" was indexed with multiple values per document, use SORTED_SET instead\");\n          }\n\n          startTermsBPV = PackedInts.bitsRequired(numUniqueTerms);\n        } else {\n          startTermsBPV = 1;\n        }\n      } else {\n        startTermsBPV = 1;\n      }\n\n      PackedLongValues.Builder termOrdToBytesOffset = PackedLongValues.monotonicBuilder(PackedInts.COMPACT);\n      final GrowableWriter docToTermOrd = new GrowableWriter(startTermsBPV, maxDoc, acceptableOverheadRatio);\n\n      int termOrd = 0;\n\n      // TODO: use Uninvert?\n\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (termOrd >= maxDoc) {\n            throw new IllegalStateException(\"Type mismatch: \" + key.field + \" was indexed with multiple values per document, use SORTED_SET instead\");\n          }\n\n          termOrdToBytesOffset.add(bytes.copyUsingLengthPrefix(term));\n          docs = termsEnum.docs(null, docs, DocsEnum.FLAG_NONE);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            // Store 1+ ord into packed bits\n            docToTermOrd.set(docID, 1+termOrd);\n          }\n          termOrd++;\n        }\n      }\n\n      // maybe an int-only impl?\n      return new SortedDocValuesImpl(bytes.freeze(true), termOrdToBytesOffset.build(), docToTermOrd.getMutable(), termOrd);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.SortedDocValuesCache#createValue(LeafReader,CacheKey,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.SortedDocValuesCache#createValue(LeafReader,CacheKey,boolean).mjava","sourceNew":"    @Override\n    protected Accountable createValue(LeafReader reader, CacheKey key, boolean setDocsWithField /* ignored */)\n        throws IOException {\n\n      final int maxDoc = reader.maxDoc();\n\n      Terms terms = reader.terms(key.field);\n\n      final float acceptableOverheadRatio = ((Float) key.custom).floatValue();\n\n      final PagedBytes bytes = new PagedBytes(15);\n\n      int startTermsBPV;\n\n      // TODO: use Uninvert?\n      if (terms != null) {\n        // Try for coarse estimate for number of bits; this\n        // should be an underestimate most of the time, which\n        // is fine -- GrowableWriter will reallocate as needed\n        long numUniqueTerms = terms.size();\n        if (numUniqueTerms != -1L) {\n          if (numUniqueTerms > maxDoc) {\n            throw new IllegalStateException(\"Type mismatch: \" + key.field + \" was indexed with multiple values per document, use SORTED_SET instead\");\n          }\n\n          startTermsBPV = PackedInts.bitsRequired(numUniqueTerms);\n        } else {\n          startTermsBPV = 1;\n        }\n      } else {\n        startTermsBPV = 1;\n      }\n\n      PackedLongValues.Builder termOrdToBytesOffset = PackedLongValues.monotonicBuilder(PackedInts.COMPACT);\n      final GrowableWriter docToTermOrd = new GrowableWriter(startTermsBPV, maxDoc, acceptableOverheadRatio);\n\n      int termOrd = 0;\n\n      // TODO: use Uninvert?\n\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        PostingsEnum docs = null;\n\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (termOrd >= maxDoc) {\n            throw new IllegalStateException(\"Type mismatch: \" + key.field + \" was indexed with multiple values per document, use SORTED_SET instead\");\n          }\n\n          termOrdToBytesOffset.add(bytes.copyUsingLengthPrefix(term));\n          docs = termsEnum.postings(null, docs, PostingsEnum.FLAG_NONE);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            // Store 1+ ord into packed bits\n            docToTermOrd.set(docID, 1+termOrd);\n          }\n          termOrd++;\n        }\n      }\n\n      // maybe an int-only impl?\n      return new SortedDocValuesImpl(bytes.freeze(true), termOrdToBytesOffset.build(), docToTermOrd.getMutable(), termOrd);\n    }\n\n","sourceOld":"    @Override\n    protected Accountable createValue(LeafReader reader, CacheKey key, boolean setDocsWithField /* ignored */)\n        throws IOException {\n\n      final int maxDoc = reader.maxDoc();\n\n      Terms terms = reader.terms(key.field);\n\n      final float acceptableOverheadRatio = ((Float) key.custom).floatValue();\n\n      final PagedBytes bytes = new PagedBytes(15);\n\n      int startTermsBPV;\n\n      // TODO: use Uninvert?\n      if (terms != null) {\n        // Try for coarse estimate for number of bits; this\n        // should be an underestimate most of the time, which\n        // is fine -- GrowableWriter will reallocate as needed\n        long numUniqueTerms = terms.size();\n        if (numUniqueTerms != -1L) {\n          if (numUniqueTerms > maxDoc) {\n            throw new IllegalStateException(\"Type mismatch: \" + key.field + \" was indexed with multiple values per document, use SORTED_SET instead\");\n          }\n\n          startTermsBPV = PackedInts.bitsRequired(numUniqueTerms);\n        } else {\n          startTermsBPV = 1;\n        }\n      } else {\n        startTermsBPV = 1;\n      }\n\n      PackedLongValues.Builder termOrdToBytesOffset = PackedLongValues.monotonicBuilder(PackedInts.COMPACT);\n      final GrowableWriter docToTermOrd = new GrowableWriter(startTermsBPV, maxDoc, acceptableOverheadRatio);\n\n      int termOrd = 0;\n\n      // TODO: use Uninvert?\n\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (termOrd >= maxDoc) {\n            throw new IllegalStateException(\"Type mismatch: \" + key.field + \" was indexed with multiple values per document, use SORTED_SET instead\");\n          }\n\n          termOrdToBytesOffset.add(bytes.copyUsingLengthPrefix(term));\n          docs = termsEnum.docs(null, docs, DocsEnum.FLAG_NONE);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            // Store 1+ ord into packed bits\n            docToTermOrd.set(docID, 1+termOrd);\n          }\n          termOrd++;\n        }\n      }\n\n      // maybe an int-only impl?\n      return new SortedDocValuesImpl(bytes.freeze(true), termOrdToBytesOffset.build(), docToTermOrd.getMutable(), termOrd);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73063b92d958076ef4ae8beb5f493e8ccdcecb4","date":1424177215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.SortedDocValuesCache#createValue(LeafReader,CacheKey,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.SortedDocValuesCache#createValue(LeafReader,CacheKey,boolean).mjava","sourceNew":"    @Override\n    protected Accountable createValue(LeafReader reader, CacheKey key, boolean setDocsWithField /* ignored */)\n        throws IOException {\n\n      final int maxDoc = reader.maxDoc();\n\n      Terms terms = reader.terms(key.field);\n\n      final float acceptableOverheadRatio = ((Float) key.custom).floatValue();\n\n      final PagedBytes bytes = new PagedBytes(15);\n\n      int startTermsBPV;\n\n      // TODO: use Uninvert?\n      if (terms != null) {\n        // Try for coarse estimate for number of bits; this\n        // should be an underestimate most of the time, which\n        // is fine -- GrowableWriter will reallocate as needed\n        long numUniqueTerms = terms.size();\n        if (numUniqueTerms != -1L) {\n          if (numUniqueTerms > maxDoc) {\n            throw new IllegalStateException(\"Type mismatch: \" + key.field + \" was indexed with multiple values per document, use SORTED_SET instead\");\n          }\n\n          startTermsBPV = PackedInts.bitsRequired(numUniqueTerms);\n        } else {\n          startTermsBPV = 1;\n        }\n      } else {\n        startTermsBPV = 1;\n      }\n\n      PackedLongValues.Builder termOrdToBytesOffset = PackedLongValues.monotonicBuilder(PackedInts.COMPACT);\n      final GrowableWriter docToTermOrd = new GrowableWriter(startTermsBPV, maxDoc, acceptableOverheadRatio);\n\n      int termOrd = 0;\n\n      // TODO: use Uninvert?\n\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        PostingsEnum docs = null;\n\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (termOrd >= maxDoc) {\n            throw new IllegalStateException(\"Type mismatch: \" + key.field + \" was indexed with multiple values per document, use SORTED_SET instead\");\n          }\n\n          termOrdToBytesOffset.add(bytes.copyUsingLengthPrefix(term));\n          docs = termsEnum.postings(null, docs, PostingsEnum.NONE);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            // Store 1+ ord into packed bits\n            docToTermOrd.set(docID, 1+termOrd);\n          }\n          termOrd++;\n        }\n      }\n\n      // maybe an int-only impl?\n      return new SortedDocValuesImpl(bytes.freeze(true), termOrdToBytesOffset.build(), docToTermOrd.getMutable(), termOrd);\n    }\n\n","sourceOld":"    @Override\n    protected Accountable createValue(LeafReader reader, CacheKey key, boolean setDocsWithField /* ignored */)\n        throws IOException {\n\n      final int maxDoc = reader.maxDoc();\n\n      Terms terms = reader.terms(key.field);\n\n      final float acceptableOverheadRatio = ((Float) key.custom).floatValue();\n\n      final PagedBytes bytes = new PagedBytes(15);\n\n      int startTermsBPV;\n\n      // TODO: use Uninvert?\n      if (terms != null) {\n        // Try for coarse estimate for number of bits; this\n        // should be an underestimate most of the time, which\n        // is fine -- GrowableWriter will reallocate as needed\n        long numUniqueTerms = terms.size();\n        if (numUniqueTerms != -1L) {\n          if (numUniqueTerms > maxDoc) {\n            throw new IllegalStateException(\"Type mismatch: \" + key.field + \" was indexed with multiple values per document, use SORTED_SET instead\");\n          }\n\n          startTermsBPV = PackedInts.bitsRequired(numUniqueTerms);\n        } else {\n          startTermsBPV = 1;\n        }\n      } else {\n        startTermsBPV = 1;\n      }\n\n      PackedLongValues.Builder termOrdToBytesOffset = PackedLongValues.monotonicBuilder(PackedInts.COMPACT);\n      final GrowableWriter docToTermOrd = new GrowableWriter(startTermsBPV, maxDoc, acceptableOverheadRatio);\n\n      int termOrd = 0;\n\n      // TODO: use Uninvert?\n\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        PostingsEnum docs = null;\n\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (termOrd >= maxDoc) {\n            throw new IllegalStateException(\"Type mismatch: \" + key.field + \" was indexed with multiple values per document, use SORTED_SET instead\");\n          }\n\n          termOrdToBytesOffset.add(bytes.copyUsingLengthPrefix(term));\n          docs = termsEnum.postings(null, docs, PostingsEnum.FLAG_NONE);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            // Store 1+ ord into packed bits\n            docToTermOrd.set(docID, 1+termOrd);\n          }\n          termOrd++;\n        }\n      }\n\n      // maybe an int-only impl?\n      return new SortedDocValuesImpl(bytes.freeze(true), termOrdToBytesOffset.build(), docToTermOrd.getMutable(), termOrd);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.SortedDocValuesCache#createValue(LeafReader,CacheKey,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.SortedDocValuesCache#createValue(LeafReader,CacheKey,boolean).mjava","sourceNew":"    @Override\n    protected Accountable createValue(LeafReader reader, CacheKey key, boolean setDocsWithField /* ignored */)\n        throws IOException {\n\n      final int maxDoc = reader.maxDoc();\n\n      Terms terms = reader.terms(key.field);\n\n      final float acceptableOverheadRatio = ((Float) key.custom).floatValue();\n\n      final PagedBytes bytes = new PagedBytes(15);\n\n      int startTermsBPV;\n\n      // TODO: use Uninvert?\n      if (terms != null) {\n        // Try for coarse estimate for number of bits; this\n        // should be an underestimate most of the time, which\n        // is fine -- GrowableWriter will reallocate as needed\n        long numUniqueTerms = terms.size();\n        if (numUniqueTerms != -1L) {\n          if (numUniqueTerms > maxDoc) {\n            throw new IllegalStateException(\"Type mismatch: \" + key.field + \" was indexed with multiple values per document, use SORTED_SET instead\");\n          }\n\n          startTermsBPV = PackedInts.bitsRequired(numUniqueTerms);\n        } else {\n          startTermsBPV = 1;\n        }\n      } else {\n        startTermsBPV = 1;\n      }\n\n      PackedLongValues.Builder termOrdToBytesOffset = PackedLongValues.monotonicBuilder(PackedInts.COMPACT);\n      final GrowableWriter docToTermOrd = new GrowableWriter(startTermsBPV, maxDoc, acceptableOverheadRatio);\n\n      int termOrd = 0;\n\n      // TODO: use Uninvert?\n\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator();\n        PostingsEnum docs = null;\n\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (termOrd >= maxDoc) {\n            throw new IllegalStateException(\"Type mismatch: \" + key.field + \" was indexed with multiple values per document, use SORTED_SET instead\");\n          }\n\n          termOrdToBytesOffset.add(bytes.copyUsingLengthPrefix(term));\n          docs = termsEnum.postings(null, docs, PostingsEnum.NONE);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            // Store 1+ ord into packed bits\n            docToTermOrd.set(docID, 1+termOrd);\n          }\n          termOrd++;\n        }\n      }\n\n      // maybe an int-only impl?\n      return new SortedDocValuesImpl(bytes.freeze(true), termOrdToBytesOffset.build(), docToTermOrd.getMutable(), termOrd);\n    }\n\n","sourceOld":"    @Override\n    protected Accountable createValue(LeafReader reader, CacheKey key, boolean setDocsWithField /* ignored */)\n        throws IOException {\n\n      final int maxDoc = reader.maxDoc();\n\n      Terms terms = reader.terms(key.field);\n\n      final float acceptableOverheadRatio = ((Float) key.custom).floatValue();\n\n      final PagedBytes bytes = new PagedBytes(15);\n\n      int startTermsBPV;\n\n      // TODO: use Uninvert?\n      if (terms != null) {\n        // Try for coarse estimate for number of bits; this\n        // should be an underestimate most of the time, which\n        // is fine -- GrowableWriter will reallocate as needed\n        long numUniqueTerms = terms.size();\n        if (numUniqueTerms != -1L) {\n          if (numUniqueTerms > maxDoc) {\n            throw new IllegalStateException(\"Type mismatch: \" + key.field + \" was indexed with multiple values per document, use SORTED_SET instead\");\n          }\n\n          startTermsBPV = PackedInts.bitsRequired(numUniqueTerms);\n        } else {\n          startTermsBPV = 1;\n        }\n      } else {\n        startTermsBPV = 1;\n      }\n\n      PackedLongValues.Builder termOrdToBytesOffset = PackedLongValues.monotonicBuilder(PackedInts.COMPACT);\n      final GrowableWriter docToTermOrd = new GrowableWriter(startTermsBPV, maxDoc, acceptableOverheadRatio);\n\n      int termOrd = 0;\n\n      // TODO: use Uninvert?\n\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        PostingsEnum docs = null;\n\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (termOrd >= maxDoc) {\n            throw new IllegalStateException(\"Type mismatch: \" + key.field + \" was indexed with multiple values per document, use SORTED_SET instead\");\n          }\n\n          termOrdToBytesOffset.add(bytes.copyUsingLengthPrefix(term));\n          docs = termsEnum.postings(null, docs, PostingsEnum.NONE);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            // Store 1+ ord into packed bits\n            docToTermOrd.set(docID, 1+termOrd);\n          }\n          termOrd++;\n        }\n      }\n\n      // maybe an int-only impl?\n      return new SortedDocValuesImpl(bytes.freeze(true), termOrdToBytesOffset.build(), docToTermOrd.getMutable(), termOrd);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.SortedDocValuesCache#createValue(LeafReader,CacheKey,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.SortedDocValuesCache#createValue(LeafReader,CacheKey,boolean).mjava","sourceNew":"    @Override\n    protected Accountable createValue(LeafReader reader, CacheKey key, boolean setDocsWithField /* ignored */)\n        throws IOException {\n\n      final int maxDoc = reader.maxDoc();\n\n      Terms terms = reader.terms(key.field);\n\n      final float acceptableOverheadRatio = ((Float) key.custom).floatValue();\n\n      final PagedBytes bytes = new PagedBytes(15);\n\n      int startTermsBPV;\n\n      // TODO: use Uninvert?\n      if (terms != null) {\n        // Try for coarse estimate for number of bits; this\n        // should be an underestimate most of the time, which\n        // is fine -- GrowableWriter will reallocate as needed\n        long numUniqueTerms = terms.size();\n        if (numUniqueTerms != -1L) {\n          if (numUniqueTerms > maxDoc) {\n            throw new IllegalStateException(\"Type mismatch: \" + key.field + \" was indexed with multiple values per document, use SORTED_SET instead\");\n          }\n\n          startTermsBPV = PackedInts.bitsRequired(numUniqueTerms);\n        } else {\n          startTermsBPV = 1;\n        }\n      } else {\n        startTermsBPV = 1;\n      }\n\n      PackedLongValues.Builder termOrdToBytesOffset = PackedLongValues.monotonicBuilder(PackedInts.COMPACT);\n      final GrowableWriter docToTermOrd = new GrowableWriter(startTermsBPV, maxDoc, acceptableOverheadRatio);\n\n      int termOrd = 0;\n\n      // TODO: use Uninvert?\n\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator();\n        PostingsEnum docs = null;\n\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (termOrd >= maxDoc) {\n            throw new IllegalStateException(\"Type mismatch: \" + key.field + \" was indexed with multiple values per document, use SORTED_SET instead\");\n          }\n\n          termOrdToBytesOffset.add(bytes.copyUsingLengthPrefix(term));\n          docs = termsEnum.postings(docs, PostingsEnum.NONE);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            // Store 1+ ord into packed bits\n            docToTermOrd.set(docID, 1+termOrd);\n          }\n          termOrd++;\n        }\n      }\n\n      // maybe an int-only impl?\n      return new SortedDocValuesImpl(bytes.freeze(true), termOrdToBytesOffset.build(), docToTermOrd.getMutable(), termOrd);\n    }\n\n","sourceOld":"    @Override\n    protected Accountable createValue(LeafReader reader, CacheKey key, boolean setDocsWithField /* ignored */)\n        throws IOException {\n\n      final int maxDoc = reader.maxDoc();\n\n      Terms terms = reader.terms(key.field);\n\n      final float acceptableOverheadRatio = ((Float) key.custom).floatValue();\n\n      final PagedBytes bytes = new PagedBytes(15);\n\n      int startTermsBPV;\n\n      // TODO: use Uninvert?\n      if (terms != null) {\n        // Try for coarse estimate for number of bits; this\n        // should be an underestimate most of the time, which\n        // is fine -- GrowableWriter will reallocate as needed\n        long numUniqueTerms = terms.size();\n        if (numUniqueTerms != -1L) {\n          if (numUniqueTerms > maxDoc) {\n            throw new IllegalStateException(\"Type mismatch: \" + key.field + \" was indexed with multiple values per document, use SORTED_SET instead\");\n          }\n\n          startTermsBPV = PackedInts.bitsRequired(numUniqueTerms);\n        } else {\n          startTermsBPV = 1;\n        }\n      } else {\n        startTermsBPV = 1;\n      }\n\n      PackedLongValues.Builder termOrdToBytesOffset = PackedLongValues.monotonicBuilder(PackedInts.COMPACT);\n      final GrowableWriter docToTermOrd = new GrowableWriter(startTermsBPV, maxDoc, acceptableOverheadRatio);\n\n      int termOrd = 0;\n\n      // TODO: use Uninvert?\n\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator();\n        PostingsEnum docs = null;\n\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (termOrd >= maxDoc) {\n            throw new IllegalStateException(\"Type mismatch: \" + key.field + \" was indexed with multiple values per document, use SORTED_SET instead\");\n          }\n\n          termOrdToBytesOffset.add(bytes.copyUsingLengthPrefix(term));\n          docs = termsEnum.postings(null, docs, PostingsEnum.NONE);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            // Store 1+ ord into packed bits\n            docToTermOrd.set(docID, 1+termOrd);\n          }\n          termOrd++;\n        }\n      }\n\n      // maybe an int-only impl?\n      return new SortedDocValuesImpl(bytes.freeze(true), termOrdToBytesOffset.build(), docToTermOrd.getMutable(), termOrd);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.SortedDocValuesCache#createValue(LeafReader,CacheKey,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.SortedDocValuesCache#createValue(LeafReader,CacheKey,boolean).mjava","sourceNew":"    @Override\n    protected Accountable createValue(LeafReader reader, CacheKey key, boolean setDocsWithField /* ignored */)\n        throws IOException {\n\n      final int maxDoc = reader.maxDoc();\n\n      Terms terms = reader.terms(key.field);\n\n      final float acceptableOverheadRatio = ((Float) key.custom).floatValue();\n\n      final PagedBytes bytes = new PagedBytes(15);\n\n      int startTermsBPV;\n\n      // TODO: use Uninvert?\n      if (terms != null) {\n        // Try for coarse estimate for number of bits; this\n        // should be an underestimate most of the time, which\n        // is fine -- GrowableWriter will reallocate as needed\n        long numUniqueTerms = terms.size();\n        if (numUniqueTerms != -1L) {\n          if (numUniqueTerms > maxDoc) {\n            throw new IllegalStateException(\"Type mismatch: \" + key.field + \" was indexed with multiple values per document, use SORTED_SET instead\");\n          }\n\n          startTermsBPV = PackedInts.bitsRequired(numUniqueTerms);\n        } else {\n          startTermsBPV = 1;\n        }\n      } else {\n        startTermsBPV = 1;\n      }\n\n      PackedLongValues.Builder termOrdToBytesOffset = PackedLongValues.monotonicBuilder(PackedInts.COMPACT);\n      final GrowableWriter docToTermOrd = new GrowableWriter(startTermsBPV, maxDoc, acceptableOverheadRatio);\n\n      int termOrd = 0;\n\n      // TODO: use Uninvert?\n\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator();\n        PostingsEnum docs = null;\n\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (termOrd >= maxDoc) {\n            throw new IllegalStateException(\"Type mismatch: \" + key.field + \" was indexed with multiple values per document, use SORTED_SET instead\");\n          }\n\n          termOrdToBytesOffset.add(bytes.copyUsingLengthPrefix(term));\n          docs = termsEnum.postings(docs, PostingsEnum.NONE);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            // Store 1+ ord into packed bits\n            docToTermOrd.set(docID, 1+termOrd);\n          }\n          termOrd++;\n        }\n      }\n\n      // maybe an int-only impl?\n      return new SortedDocValuesImpl(bytes.freeze(true), termOrdToBytesOffset.build(), docToTermOrd.getMutable(), termOrd);\n    }\n\n","sourceOld":"    @Override\n    protected Accountable createValue(LeafReader reader, CacheKey key, boolean setDocsWithField /* ignored */)\n        throws IOException {\n\n      final int maxDoc = reader.maxDoc();\n\n      Terms terms = reader.terms(key.field);\n\n      final float acceptableOverheadRatio = ((Float) key.custom).floatValue();\n\n      final PagedBytes bytes = new PagedBytes(15);\n\n      int startTermsBPV;\n\n      // TODO: use Uninvert?\n      if (terms != null) {\n        // Try for coarse estimate for number of bits; this\n        // should be an underestimate most of the time, which\n        // is fine -- GrowableWriter will reallocate as needed\n        long numUniqueTerms = terms.size();\n        if (numUniqueTerms != -1L) {\n          if (numUniqueTerms > maxDoc) {\n            throw new IllegalStateException(\"Type mismatch: \" + key.field + \" was indexed with multiple values per document, use SORTED_SET instead\");\n          }\n\n          startTermsBPV = PackedInts.bitsRequired(numUniqueTerms);\n        } else {\n          startTermsBPV = 1;\n        }\n      } else {\n        startTermsBPV = 1;\n      }\n\n      PackedLongValues.Builder termOrdToBytesOffset = PackedLongValues.monotonicBuilder(PackedInts.COMPACT);\n      final GrowableWriter docToTermOrd = new GrowableWriter(startTermsBPV, maxDoc, acceptableOverheadRatio);\n\n      int termOrd = 0;\n\n      // TODO: use Uninvert?\n\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator();\n        PostingsEnum docs = null;\n\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (termOrd >= maxDoc) {\n            throw new IllegalStateException(\"Type mismatch: \" + key.field + \" was indexed with multiple values per document, use SORTED_SET instead\");\n          }\n\n          termOrdToBytesOffset.add(bytes.copyUsingLengthPrefix(term));\n          docs = termsEnum.postings(docs, PostingsEnum.NONE);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            // Store 1+ ord into packed bits\n            docToTermOrd.set(docID, 1+termOrd);\n          }\n          termOrd++;\n        }\n      }\n\n      // maybe an int-only impl?\n      return new SortedDocValuesImpl(bytes.freeze(true), termOrdToBytesOffset.build(), docToTermOrd.getMutable(), termOrd);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.SortedDocValuesCache#createValue(LeafReader,CacheKey,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.SortedDocValuesCache#createValue(LeafReader,CacheKey,boolean).mjava","sourceNew":"    @Override\n    protected Accountable createValue(LeafReader reader, CacheKey key, boolean setDocsWithField /* ignored */)\n        throws IOException {\n\n      final int maxDoc = reader.maxDoc();\n\n      Terms terms = reader.terms(key.field);\n\n      final float acceptableOverheadRatio = ((Float) key.custom).floatValue();\n\n      final PagedBytes bytes = new PagedBytes(15);\n\n      int startTermsBPV;\n\n      // TODO: use Uninvert?\n      if (terms != null) {\n        // Try for coarse estimate for number of bits; this\n        // should be an underestimate most of the time, which\n        // is fine -- GrowableWriter will reallocate as needed\n        long numUniqueTerms = terms.size();\n        if (numUniqueTerms != -1L) {\n          if (numUniqueTerms > maxDoc) {\n            throw new IllegalStateException(\"Type mismatch: \" + key.field + \" was indexed with multiple values per document, use SORTED_SET instead\");\n          }\n\n          startTermsBPV = PackedInts.bitsRequired(numUniqueTerms);\n        } else {\n          startTermsBPV = 1;\n        }\n      } else {\n        startTermsBPV = 1;\n      }\n\n      PackedLongValues.Builder termOrdToBytesOffset = PackedLongValues.monotonicBuilder(PackedInts.COMPACT);\n      final GrowableWriter docToTermOrd = new GrowableWriter(startTermsBPV, maxDoc, acceptableOverheadRatio);\n\n      int termOrd = 0;\n\n      // TODO: use Uninvert?\n\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator();\n        PostingsEnum docs = null;\n\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (termOrd >= maxDoc) {\n            throw new IllegalStateException(\"Type mismatch: \" + key.field + \" was indexed with multiple values per document, use SORTED_SET instead\");\n          }\n\n          termOrdToBytesOffset.add(bytes.copyUsingLengthPrefix(term));\n          docs = termsEnum.postings(docs, PostingsEnum.NONE);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            // Store 1+ ord into packed bits\n            docToTermOrd.set(docID, 1+termOrd);\n          }\n          termOrd++;\n        }\n      }\n\n      // maybe an int-only impl?\n      return new SortedDocValuesImpl(bytes.freeze(true), termOrdToBytesOffset.build(), docToTermOrd.getMutable(), termOrd);\n    }\n\n","sourceOld":"    @Override\n    protected Accountable createValue(LeafReader reader, CacheKey key, boolean setDocsWithField /* ignored */)\n        throws IOException {\n\n      final int maxDoc = reader.maxDoc();\n\n      Terms terms = reader.terms(key.field);\n\n      final float acceptableOverheadRatio = ((Float) key.custom).floatValue();\n\n      final PagedBytes bytes = new PagedBytes(15);\n\n      int startTermsBPV;\n\n      // TODO: use Uninvert?\n      if (terms != null) {\n        // Try for coarse estimate for number of bits; this\n        // should be an underestimate most of the time, which\n        // is fine -- GrowableWriter will reallocate as needed\n        long numUniqueTerms = terms.size();\n        if (numUniqueTerms != -1L) {\n          if (numUniqueTerms > maxDoc) {\n            throw new IllegalStateException(\"Type mismatch: \" + key.field + \" was indexed with multiple values per document, use SORTED_SET instead\");\n          }\n\n          startTermsBPV = PackedInts.bitsRequired(numUniqueTerms);\n        } else {\n          startTermsBPV = 1;\n        }\n      } else {\n        startTermsBPV = 1;\n      }\n\n      PackedLongValues.Builder termOrdToBytesOffset = PackedLongValues.monotonicBuilder(PackedInts.COMPACT);\n      final GrowableWriter docToTermOrd = new GrowableWriter(startTermsBPV, maxDoc, acceptableOverheadRatio);\n\n      int termOrd = 0;\n\n      // TODO: use Uninvert?\n\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator();\n        PostingsEnum docs = null;\n\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (termOrd >= maxDoc) {\n            throw new IllegalStateException(\"Type mismatch: \" + key.field + \" was indexed with multiple values per document, use SORTED_SET instead\");\n          }\n\n          termOrdToBytesOffset.add(bytes.copyUsingLengthPrefix(term));\n          docs = termsEnum.postings(docs, PostingsEnum.NONE);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            // Store 1+ ord into packed bits\n            docToTermOrd.set(docID, 1+termOrd);\n          }\n          termOrd++;\n        }\n      }\n\n      // maybe an int-only impl?\n      return new SortedDocValuesImpl(bytes.freeze(true), termOrdToBytesOffset.build(), docToTermOrd.getMutable(), termOrd);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.SortedDocValuesCache#createValue(LeafReader,CacheKey,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.SortedDocValuesCache#createValue(LeafReader,CacheKey,boolean).mjava","sourceNew":"    @Override\n    protected Accountable createValue(LeafReader reader, CacheKey key, boolean setDocsWithField /* ignored */)\n        throws IOException {\n\n      final int maxDoc = reader.maxDoc();\n\n      Terms terms = reader.terms(key.field);\n\n      final float acceptableOverheadRatio = ((Float) key.custom).floatValue();\n\n      final PagedBytes bytes = new PagedBytes(15);\n\n      int startTermsBPV;\n\n      // TODO: use Uninvert?\n      if (terms != null) {\n        // Try for coarse estimate for number of bits; this\n        // should be an underestimate most of the time, which\n        // is fine -- GrowableWriter will reallocate as needed\n        long numUniqueTerms = terms.size();\n        if (numUniqueTerms != -1L) {\n          if (numUniqueTerms > maxDoc) {\n            throw new IllegalStateException(\"Type mismatch: \" + key.field + \" was indexed with multiple values per document, use SORTED_SET instead\");\n          }\n\n          startTermsBPV = PackedInts.bitsRequired(numUniqueTerms);\n        } else {\n          startTermsBPV = 1;\n        }\n      } else {\n        startTermsBPV = 1;\n      }\n\n      PackedLongValues.Builder termOrdToBytesOffset = PackedLongValues.monotonicBuilder(PackedInts.COMPACT);\n      final GrowableWriter docToTermOrd = new GrowableWriter(startTermsBPV, maxDoc, acceptableOverheadRatio);\n\n      int termOrd = 0;\n\n      // TODO: use Uninvert?\n\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator();\n        PostingsEnum docs = null;\n\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (termOrd >= maxDoc) {\n            throw new IllegalStateException(\"Type mismatch: \" + key.field + \" was indexed with multiple values per document, use SORTED_SET instead\");\n          }\n\n          termOrdToBytesOffset.add(bytes.copyUsingLengthPrefix(term));\n          docs = termsEnum.postings(docs, PostingsEnum.NONE);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            // Store 1+ ord into packed bits\n            docToTermOrd.set(docID, 1+termOrd);\n          }\n          termOrd++;\n        }\n      }\n\n      // maybe an int-only impl?\n      return new SortedDocValuesImpl(bytes.freeze(true), termOrdToBytesOffset.build(), docToTermOrd.getMutable(), termOrd);\n    }\n\n","sourceOld":"    @Override\n    protected Accountable createValue(LeafReader reader, CacheKey key, boolean setDocsWithField /* ignored */)\n        throws IOException {\n\n      final int maxDoc = reader.maxDoc();\n\n      Terms terms = reader.terms(key.field);\n\n      final float acceptableOverheadRatio = ((Float) key.custom).floatValue();\n\n      final PagedBytes bytes = new PagedBytes(15);\n\n      int startTermsBPV;\n\n      // TODO: use Uninvert?\n      if (terms != null) {\n        // Try for coarse estimate for number of bits; this\n        // should be an underestimate most of the time, which\n        // is fine -- GrowableWriter will reallocate as needed\n        long numUniqueTerms = terms.size();\n        if (numUniqueTerms != -1L) {\n          if (numUniqueTerms > maxDoc) {\n            throw new IllegalStateException(\"Type mismatch: \" + key.field + \" was indexed with multiple values per document, use SORTED_SET instead\");\n          }\n\n          startTermsBPV = PackedInts.bitsRequired(numUniqueTerms);\n        } else {\n          startTermsBPV = 1;\n        }\n      } else {\n        startTermsBPV = 1;\n      }\n\n      PackedLongValues.Builder termOrdToBytesOffset = PackedLongValues.monotonicBuilder(PackedInts.COMPACT);\n      final GrowableWriter docToTermOrd = new GrowableWriter(startTermsBPV, maxDoc, acceptableOverheadRatio);\n\n      int termOrd = 0;\n\n      // TODO: use Uninvert?\n\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator();\n        PostingsEnum docs = null;\n\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (termOrd >= maxDoc) {\n            throw new IllegalStateException(\"Type mismatch: \" + key.field + \" was indexed with multiple values per document, use SORTED_SET instead\");\n          }\n\n          termOrdToBytesOffset.add(bytes.copyUsingLengthPrefix(term));\n          docs = termsEnum.postings(docs, PostingsEnum.NONE);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            // Store 1+ ord into packed bits\n            docToTermOrd.set(docID, 1+termOrd);\n          }\n          termOrd++;\n        }\n      }\n\n      // maybe an int-only impl?\n      return new SortedDocValuesImpl(bytes.freeze(true), termOrdToBytesOffset.build(), docToTermOrd.getMutable(), termOrd);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.SortedDocValuesCache#createValue(LeafReader,CacheKey,boolean).mjava","sourceNew":null,"sourceOld":"    @Override\n    protected Accountable createValue(LeafReader reader, CacheKey key, boolean setDocsWithField /* ignored */)\n        throws IOException {\n\n      final int maxDoc = reader.maxDoc();\n\n      Terms terms = reader.terms(key.field);\n\n      final float acceptableOverheadRatio = ((Float) key.custom).floatValue();\n\n      final PagedBytes bytes = new PagedBytes(15);\n\n      int startTermsBPV;\n\n      // TODO: use Uninvert?\n      if (terms != null) {\n        // Try for coarse estimate for number of bits; this\n        // should be an underestimate most of the time, which\n        // is fine -- GrowableWriter will reallocate as needed\n        long numUniqueTerms = terms.size();\n        if (numUniqueTerms != -1L) {\n          if (numUniqueTerms > maxDoc) {\n            throw new IllegalStateException(\"Type mismatch: \" + key.field + \" was indexed with multiple values per document, use SORTED_SET instead\");\n          }\n\n          startTermsBPV = PackedInts.bitsRequired(numUniqueTerms);\n        } else {\n          startTermsBPV = 1;\n        }\n      } else {\n        startTermsBPV = 1;\n      }\n\n      PackedLongValues.Builder termOrdToBytesOffset = PackedLongValues.monotonicBuilder(PackedInts.COMPACT);\n      final GrowableWriter docToTermOrd = new GrowableWriter(startTermsBPV, maxDoc, acceptableOverheadRatio);\n\n      int termOrd = 0;\n\n      // TODO: use Uninvert?\n\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator();\n        PostingsEnum docs = null;\n\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (termOrd >= maxDoc) {\n            throw new IllegalStateException(\"Type mismatch: \" + key.field + \" was indexed with multiple values per document, use SORTED_SET instead\");\n          }\n\n          termOrdToBytesOffset.add(bytes.copyUsingLengthPrefix(term));\n          docs = termsEnum.postings(docs, PostingsEnum.NONE);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            // Store 1+ ord into packed bits\n            docToTermOrd.set(docID, 1+termOrd);\n          }\n          termOrd++;\n        }\n      }\n\n      // maybe an int-only impl?\n      return new SortedDocValuesImpl(bytes.freeze(true), termOrdToBytesOffset.build(), docToTermOrd.getMutable(), termOrd);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["0f4464508ee83288c8c4585b533f9faaa93aa314","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83870855d82aba6819217abeff5a40779dbb28b4":["0f4464508ee83288c8c4585b533f9faaa93aa314","0e121d43b5a10f2df530f406f935102656e9c4e8"],"51f5280f31484820499077f41fcdfe92d527d9dc":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0f4464508ee83288c8c4585b533f9faaa93aa314","0e121d43b5a10f2df530f406f935102656e9c4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e121d43b5a10f2df530f406f935102656e9c4e8"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"51f5280f31484820499077f41fcdfe92d527d9dc":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["51f5280f31484820499077f41fcdfe92d527d9dc"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}