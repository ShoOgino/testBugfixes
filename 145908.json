{"path":"solr/test-framework/src/test/org/apache/solr/util/TestSSLTestConfig#testIsOpenJdkJvmVersionKnownToHaveProblems().mjava","commits":[{"id":"620836184fd918b1cca33e6de8100c45da6890dc","date":1561413738,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/test/org/apache/solr/util/TestSSLTestConfig#testIsOpenJdkJvmVersionKnownToHaveProblems().mjava","pathOld":"/dev/null","sourceNew":"  /** Sanity check that our JVM version parsing logic seems correct */\n  public void testIsOpenJdkJvmVersionKnownToHaveProblems() {\n    final List<String> rel_suffixes = Arrays.asList(\"\", \"+42\");\n    final List<String> ea_suffixes = Arrays.asList(\"-ea\", \"-ea+42\");\n    final List<String> suffixes = Arrays.asList(\"\", \"+42\", \"-ea\", \"-ea+42\");\n\n    // as far as we know, any Java 8, 9 or 10 impl should be fine...\n    for (String base : Arrays.asList(\"1.8\", \"1.8.0\", \"1.8.1\", \n                                     \"9\", \"9.0\", \"9.1\", \"9.0.0\", \"9.1.0\", \"9.1.1\",\n                                     \"10\", \"10.0\", \"10.1\", \"10.0.0\", \"10.1.0\", \"10.1.1\")) {\n      for (String suffix : suffixes) {\n        final String v = base + suffix;\n        assertFalse(v, SSLTestConfig.isOpenJdkJvmVersionKnownToHaveProblems(v));\n      }\n    }\n\n    // Known Problems start with Java 11...\n\n    // java 11 releases below 11.0.3 were all bad...\n    for (String bad : Arrays.asList(\"11\", \"11.0\", \"11.0.1\", \"11.0.2\")) {\n      for (String suffix : suffixes) {\n        final String v = bad + suffix;\n        assertTrue(v, SSLTestConfig.isOpenJdkJvmVersionKnownToHaveProblems(v));\n      }\n    }\n    \n    // ...but 11.0.3 or higher should be ok.\n    for (String ok : Arrays.asList(\"11.0.3\", \"11.0.42\", \"11.1\", \"11.1.42\")) {\n      for (String suffix : suffixes) {\n        final String v = ok + suffix;\n        assertFalse(v, SSLTestConfig.isOpenJdkJvmVersionKnownToHaveProblems(v));\n      }\n    }\n    \n    // As far as we know/hope, all \"official\" java 12 and higher impls should be fine...\n    for (String major : Arrays.asList(\"12\", \"13\", \"99\")) {\n      for (String minor : Arrays.asList(\"\", \".0\", \".42\", \".0.42\")) {\n        for (String suffix : rel_suffixes) {\n          final String v = major + minor + suffix;\n          assertFalse(v, SSLTestConfig.isOpenJdkJvmVersionKnownToHaveProblems(v));\n        }\n      }\n    }\n\n    // ...but pre EA \"testing\" builds of 11, 12, and 13 are all definitely problematic...\n    for (String major : Arrays.asList(\"11\", \"12\", \"13\")) {\n      for (String suffix : suffixes) {\n        final String v = major + \"-testing\" + suffix;\n        assertTrue(v, SSLTestConfig.isOpenJdkJvmVersionKnownToHaveProblems(v));\n      }\n    }\n\n    // ...and all 13-ea builds (so far) have definitely been problematic.\n    for (String suffix : ea_suffixes) {\n      final String v = \"13\" + suffix;\n      assertTrue(v, SSLTestConfig.isOpenJdkJvmVersionKnownToHaveProblems(v));\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c8cb983608d8dea5c61181ba5168ba89ec92f34","date":1561416143,"type":4,"author":"Chris Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/test-framework/src/test/org/apache/solr/util/TestSSLTestConfig#testIsOpenJdkJvmVersionKnownToHaveProblems().mjava","sourceNew":null,"sourceOld":"  /** Sanity check that our JVM version parsing logic seems correct */\n  public void testIsOpenJdkJvmVersionKnownToHaveProblems() {\n    final List<String> rel_suffixes = Arrays.asList(\"\", \"+42\");\n    final List<String> ea_suffixes = Arrays.asList(\"-ea\", \"-ea+42\");\n    final List<String> suffixes = Arrays.asList(\"\", \"+42\", \"-ea\", \"-ea+42\");\n\n    // as far as we know, any Java 8, 9 or 10 impl should be fine...\n    for (String base : Arrays.asList(\"1.8\", \"1.8.0\", \"1.8.1\", \n                                     \"9\", \"9.0\", \"9.1\", \"9.0.0\", \"9.1.0\", \"9.1.1\",\n                                     \"10\", \"10.0\", \"10.1\", \"10.0.0\", \"10.1.0\", \"10.1.1\")) {\n      for (String suffix : suffixes) {\n        final String v = base + suffix;\n        assertFalse(v, SSLTestConfig.isOpenJdkJvmVersionKnownToHaveProblems(v));\n      }\n    }\n\n    // Known Problems start with Java 11...\n\n    // java 11 releases below 11.0.3 were all bad...\n    for (String bad : Arrays.asList(\"11\", \"11.0\", \"11.0.1\", \"11.0.2\")) {\n      for (String suffix : suffixes) {\n        final String v = bad + suffix;\n        assertTrue(v, SSLTestConfig.isOpenJdkJvmVersionKnownToHaveProblems(v));\n      }\n    }\n    \n    // ...but 11.0.3 or higher should be ok.\n    for (String ok : Arrays.asList(\"11.0.3\", \"11.0.42\", \"11.1\", \"11.1.42\")) {\n      for (String suffix : suffixes) {\n        final String v = ok + suffix;\n        assertFalse(v, SSLTestConfig.isOpenJdkJvmVersionKnownToHaveProblems(v));\n      }\n    }\n    \n    // As far as we know/hope, all \"official\" java 12 and higher impls should be fine...\n    for (String major : Arrays.asList(\"12\", \"13\", \"99\")) {\n      for (String minor : Arrays.asList(\"\", \".0\", \".42\", \".0.42\")) {\n        for (String suffix : rel_suffixes) {\n          final String v = major + minor + suffix;\n          assertFalse(v, SSLTestConfig.isOpenJdkJvmVersionKnownToHaveProblems(v));\n        }\n      }\n    }\n\n    // ...but pre EA \"testing\" builds of 11, 12, and 13 are all definitely problematic...\n    for (String major : Arrays.asList(\"11\", \"12\", \"13\")) {\n      for (String suffix : suffixes) {\n        final String v = major + \"-testing\" + suffix;\n        assertTrue(v, SSLTestConfig.isOpenJdkJvmVersionKnownToHaveProblems(v));\n      }\n    }\n\n    // ...and all 13-ea builds (so far) have definitely been problematic.\n    for (String suffix : ea_suffixes) {\n      final String v = \"13\" + suffix;\n      assertTrue(v, SSLTestConfig.isOpenJdkJvmVersionKnownToHaveProblems(v));\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b6382e83f99a1251346565d7f385aa8f6f79f2d","date":1561675880,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/test/org/apache/solr/util/TestSSLTestConfig#testIsOpenJdkJvmVersionKnownToHaveProblems().mjava","pathOld":"/dev/null","sourceNew":"  /** Sanity check that our JVM version parsing logic seems correct */\n  public void testIsOpenJdkJvmVersionKnownToHaveProblems() {\n    final List<String> rel_suffixes = Arrays.asList(\"\", \"+42\");\n    final List<String> ea_suffixes = Arrays.asList(\"-ea\", \"-ea+42\");\n    final List<String> suffixes = Arrays.asList(\"\", \"+42\", \"-ea\", \"-ea+42\");\n\n    // as far as we know, any Java 8, 9 or 10 impl should be fine...\n    for (String base : Arrays.asList(\"1.8\", \"1.8.0\", \"1.8.1\", \n                                     \"9\", \"9.0\", \"9.1\", \"9.0.0\", \"9.1.0\", \"9.1.1\",\n                                     \"10\", \"10.0\", \"10.1\", \"10.0.0\", \"10.1.0\", \"10.1.1\")) {\n      for (String suffix : suffixes) {\n        final String v = base + suffix;\n        assertFalse(v, SSLTestConfig.isOpenJdkJvmVersionKnownToHaveProblems(v));\n      }\n    }\n\n    // Known Problems start with Java 11...\n\n    // java 11 releases below 11.0.3 were all bad...\n    for (String bad : Arrays.asList(\"11\", \"11.0\", \"11.0.1\", \"11.0.2\")) {\n      for (String suffix : suffixes) {\n        final String v = bad + suffix;\n        assertTrue(v, SSLTestConfig.isOpenJdkJvmVersionKnownToHaveProblems(v));\n      }\n    }\n    \n    // ...but 11.0.3 or higher should be ok.\n    for (String ok : Arrays.asList(\"11.0.3\", \"11.0.42\", \"11.1\", \"11.1.42\")) {\n      for (String suffix : suffixes) {\n        final String v = ok + suffix;\n        assertFalse(v, SSLTestConfig.isOpenJdkJvmVersionKnownToHaveProblems(v));\n      }\n    }\n    \n    // As far as we know/hope, all \"official\" java 12 and higher impls should be fine...\n    for (String major : Arrays.asList(\"12\", \"13\", \"99\")) {\n      for (String minor : Arrays.asList(\"\", \".0\", \".42\", \".0.42\")) {\n        for (String suffix : rel_suffixes) {\n          final String v = major + minor + suffix;\n          assertFalse(v, SSLTestConfig.isOpenJdkJvmVersionKnownToHaveProblems(v));\n        }\n      }\n    }\n\n    // ...but pre EA \"testing\" builds of 11, 12, and 13 are all definitely problematic...\n    for (String major : Arrays.asList(\"11\", \"12\", \"13\")) {\n      for (String suffix : suffixes) {\n        final String v = major + \"-testing\" + suffix;\n        assertTrue(v, SSLTestConfig.isOpenJdkJvmVersionKnownToHaveProblems(v));\n      }\n    }\n\n    // ...and all 13-ea builds (so far) have definitely been problematic.\n    for (String suffix : ea_suffixes) {\n      final String v = \"13\" + suffix;\n      assertTrue(v, SSLTestConfig.isOpenJdkJvmVersionKnownToHaveProblems(v));\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6c8cb983608d8dea5c61181ba5168ba89ec92f34":["620836184fd918b1cca33e6de8100c45da6890dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"620836184fd918b1cca33e6de8100c45da6890dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2b6382e83f99a1251346565d7f385aa8f6f79f2d":["6c8cb983608d8dea5c61181ba5168ba89ec92f34"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2b6382e83f99a1251346565d7f385aa8f6f79f2d"]},"commit2Childs":{"6c8cb983608d8dea5c61181ba5168ba89ec92f34":["2b6382e83f99a1251346565d7f385aa8f6f79f2d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["620836184fd918b1cca33e6de8100c45da6890dc"],"620836184fd918b1cca33e6de8100c45da6890dc":["6c8cb983608d8dea5c61181ba5168ba89ec92f34"],"2b6382e83f99a1251346565d7f385aa8f6f79f2d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}