{"path":"modules/spatial-TEMP/src/test/org/apache/lucene/spatial/base/shape/AbstractTestShapes#testCircle(double,double,double).mjava","commits":[{"id":"33ee89d976c91275e5be5da438ca0977b1c5b90f","date":1329808149,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"modules/spatial-TEMP/src/test/org/apache/lucene/spatial/base/shape/AbstractTestShapes#testCircle(double,double,double).mjava","pathOld":"modules/spatial/src/test/org/apache/lucene/spatial/base/shape/AbstractTestShapes#testCircle(double,double,double).mjava","sourceNew":"  protected void testCircle(double x, double y, double dist) {\n    Circle c = ctx.makeCircle(x, y, dist);\n    String msg = c.toString();\n    final Circle c2 = ctx.makeCircle(ctx.makePoint(x, y), dist);\n    assertEquals(c, c2);\n    assertEquals(c.hashCode(),c2.hashCode());\n\n    assertEquals(msg,dist > 0, c.hasArea());\n    final Rectangle bbox = c.getBoundingBox();\n    assertEquals(msg,dist > 0, bbox.getArea() > 0);\n    if (!ctx.isGeo()) {\n      //if not geo then units of dist == units of x,y\n      assertEqualsRatio(msg, bbox.getHeight(), dist * 2);\n      assertEqualsRatio(msg, bbox.getWidth(), dist * 2);\n    }\n    assertRelation(msg, CONTAINS, c, c.getCenter());\n    assertRelation(msg, CONTAINS, bbox, c);\n  }\n\n","sourceOld":"  protected void testCircle(double x, double y, double dist) {\n    Circle c = ctx.makeCircle(x, y, dist);\n    String msg = c.toString();\n    final Circle c2 = ctx.makeCircle(ctx.makePoint(x, y), dist);\n    assertEquals(c, c2);\n    assertEquals(c.hashCode(),c2.hashCode());\n\n    assertEquals(msg,dist > 0, c.hasArea());\n    final Rectangle bbox = c.getBoundingBox();\n    assertEquals(msg,dist > 0, bbox.getArea() > 0);\n    if (!ctx.isGeo()) {\n      //if not geo then units of dist == units of x,y\n      assertEqualsRatio(msg, bbox.getHeight(), dist * 2);\n      assertEqualsRatio(msg, bbox.getWidth(), dist * 2);\n    }\n    assertRelation(msg, CONTAINS, c, c.getCenter());\n    assertRelation(msg, CONTAINS, bbox, c);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2047ba81272a0c4edeb11b1c7810ee23ba73502","date":1329808655,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"modules/spatial/strategy/src/test/org/apache/lucene/spatial/base/shape/AbstractTestShapes#testCircle(double,double,double).mjava","pathOld":"modules/spatial-TEMP/src/test/org/apache/lucene/spatial/base/shape/AbstractTestShapes#testCircle(double,double,double).mjava","sourceNew":"  protected void testCircle(double x, double y, double dist) {\n    Circle c = ctx.makeCircle(x, y, dist);\n    String msg = c.toString();\n    final Circle c2 = ctx.makeCircle(ctx.makePoint(x, y), dist);\n    assertEquals(c, c2);\n    assertEquals(c.hashCode(),c2.hashCode());\n\n    assertEquals(msg,dist > 0, c.hasArea());\n    final Rectangle bbox = c.getBoundingBox();\n    assertEquals(msg,dist > 0, bbox.getArea() > 0);\n    if (!ctx.isGeo()) {\n      //if not geo then units of dist == units of x,y\n      assertEqualsRatio(msg, bbox.getHeight(), dist * 2);\n      assertEqualsRatio(msg, bbox.getWidth(), dist * 2);\n    }\n    assertRelation(msg, CONTAINS, c, c.getCenter());\n    assertRelation(msg, CONTAINS, bbox, c);\n  }\n\n","sourceOld":"  protected void testCircle(double x, double y, double dist) {\n    Circle c = ctx.makeCircle(x, y, dist);\n    String msg = c.toString();\n    final Circle c2 = ctx.makeCircle(ctx.makePoint(x, y), dist);\n    assertEquals(c, c2);\n    assertEquals(c.hashCode(),c2.hashCode());\n\n    assertEquals(msg,dist > 0, c.hasArea());\n    final Rectangle bbox = c.getBoundingBox();\n    assertEquals(msg,dist > 0, bbox.getArea() > 0);\n    if (!ctx.isGeo()) {\n      //if not geo then units of dist == units of x,y\n      assertEqualsRatio(msg, bbox.getHeight(), dist * 2);\n      assertEqualsRatio(msg, bbox.getWidth(), dist * 2);\n    }\n    assertRelation(msg, CONTAINS, c, c.getCenter());\n    assertRelation(msg, CONTAINS, bbox, c);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c2047ba81272a0c4edeb11b1c7810ee23ba73502":["33ee89d976c91275e5be5da438ca0977b1c5b90f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"33ee89d976c91275e5be5da438ca0977b1c5b90f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c2047ba81272a0c4edeb11b1c7810ee23ba73502":[],"33ee89d976c91275e5be5da438ca0977b1c5b90f":["c2047ba81272a0c4edeb11b1c7810ee23ba73502"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["33ee89d976c91275e5be5da438ca0977b1c5b90f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c2047ba81272a0c4edeb11b1c7810ee23ba73502","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}