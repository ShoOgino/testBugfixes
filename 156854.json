{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testAltFillerToken().mjava","commits":[{"id":"6237bacfd44ad16661121d7d8a604a57f78978e9","date":1391038488,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testAltFillerToken().mjava","pathOld":"/dev/null","sourceNew":"  public void testAltFillerToken() throws Exception {\n    Analyzer delegate = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        CharArraySet stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, \"into\");\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        TokenFilter filter = new StopFilter(TEST_VERSION_CURRENT, tokenizer, stopSet);\n        return new TokenStreamComponents(tokenizer, filter);\n      }\n    };\n\n    ShingleAnalyzerWrapper analyzer = new ShingleAnalyzerWrapper(\n        delegate,\n        ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_TOKEN_SEPARATOR,\n        true, false, \"--\");\n    assertAnalyzesTo(analyzer, \"please divide into shingles\",\n                     new String[] { \"please\", \"please divide\",\n                                    \"divide\", \"divide --\",\n                                    \"-- shingles\", \"shingles\" },\n                     new int[] { 0,  0,  7,  7, 19, 19 },\n                     new int[] { 6, 13, 13, 19, 27, 27 },\n                     new int[] { 1,  0,  1,  0,  1,  1 });\n\n    analyzer = new ShingleAnalyzerWrapper(\n        delegate,\n        ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_TOKEN_SEPARATOR,\n        false, false, null);\n    assertAnalyzesTo(analyzer, \"please divide into shingles\",\n                     new String[] { \"please divide\", \"divide \", \" shingles\" },\n                     new int[] {  0,  7, 19 },\n                     new int[] { 13, 19, 27 },\n                     new int[] {  1,  1,  1 });\n\n    analyzer = new ShingleAnalyzerWrapper(\n        delegate,\n        ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_TOKEN_SEPARATOR,\n        false, false, \"\");\n    assertAnalyzesTo(analyzer, \"please divide into shingles\",\n                     new String[] { \"please divide\", \"divide \", \" shingles\" },\n                     new int[] {  0,  7, 19 },\n                     new int[] { 13, 19, 27 },\n                     new int[] {  1,  1,  1 });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testAltFillerToken().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testAltFillerToken().mjava","sourceNew":"  public void testAltFillerToken() throws Exception {\n    Analyzer delegate = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        CharArraySet stopSet = StopFilter.makeStopSet(\"into\");\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        TokenFilter filter = new StopFilter(tokenizer, stopSet);\n        return new TokenStreamComponents(tokenizer, filter);\n      }\n    };\n\n    ShingleAnalyzerWrapper analyzer = new ShingleAnalyzerWrapper(\n        delegate,\n        ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_TOKEN_SEPARATOR,\n        true, false, \"--\");\n    assertAnalyzesTo(analyzer, \"please divide into shingles\",\n                     new String[] { \"please\", \"please divide\",\n                                    \"divide\", \"divide --\",\n                                    \"-- shingles\", \"shingles\" },\n                     new int[] { 0,  0,  7,  7, 19, 19 },\n                     new int[] { 6, 13, 13, 19, 27, 27 },\n                     new int[] { 1,  0,  1,  0,  1,  1 });\n\n    analyzer = new ShingleAnalyzerWrapper(\n        delegate,\n        ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_TOKEN_SEPARATOR,\n        false, false, null);\n    assertAnalyzesTo(analyzer, \"please divide into shingles\",\n                     new String[] { \"please divide\", \"divide \", \" shingles\" },\n                     new int[] {  0,  7, 19 },\n                     new int[] { 13, 19, 27 },\n                     new int[] {  1,  1,  1 });\n\n    analyzer = new ShingleAnalyzerWrapper(\n        delegate,\n        ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_TOKEN_SEPARATOR,\n        false, false, \"\");\n    assertAnalyzesTo(analyzer, \"please divide into shingles\",\n                     new String[] { \"please divide\", \"divide \", \" shingles\" },\n                     new int[] {  0,  7, 19 },\n                     new int[] { 13, 19, 27 },\n                     new int[] {  1,  1,  1 });\n  }\n\n","sourceOld":"  public void testAltFillerToken() throws Exception {\n    Analyzer delegate = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        CharArraySet stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, \"into\");\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        TokenFilter filter = new StopFilter(TEST_VERSION_CURRENT, tokenizer, stopSet);\n        return new TokenStreamComponents(tokenizer, filter);\n      }\n    };\n\n    ShingleAnalyzerWrapper analyzer = new ShingleAnalyzerWrapper(\n        delegate,\n        ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_TOKEN_SEPARATOR,\n        true, false, \"--\");\n    assertAnalyzesTo(analyzer, \"please divide into shingles\",\n                     new String[] { \"please\", \"please divide\",\n                                    \"divide\", \"divide --\",\n                                    \"-- shingles\", \"shingles\" },\n                     new int[] { 0,  0,  7,  7, 19, 19 },\n                     new int[] { 6, 13, 13, 19, 27, 27 },\n                     new int[] { 1,  0,  1,  0,  1,  1 });\n\n    analyzer = new ShingleAnalyzerWrapper(\n        delegate,\n        ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_TOKEN_SEPARATOR,\n        false, false, null);\n    assertAnalyzesTo(analyzer, \"please divide into shingles\",\n                     new String[] { \"please divide\", \"divide \", \" shingles\" },\n                     new int[] {  0,  7, 19 },\n                     new int[] { 13, 19, 27 },\n                     new int[] {  1,  1,  1 });\n\n    analyzer = new ShingleAnalyzerWrapper(\n        delegate,\n        ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_TOKEN_SEPARATOR,\n        false, false, \"\");\n    assertAnalyzesTo(analyzer, \"please divide into shingles\",\n                     new String[] { \"please divide\", \"divide \", \" shingles\" },\n                     new int[] {  0,  7, 19 },\n                     new int[] { 13, 19, 27 },\n                     new int[] {  1,  1,  1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testAltFillerToken().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testAltFillerToken().mjava","sourceNew":"  public void testAltFillerToken() throws Exception {\n    Analyzer delegate = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        CharArraySet stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, \"into\");\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        TokenFilter filter = new StopFilter(TEST_VERSION_CURRENT, tokenizer, stopSet);\n        return new TokenStreamComponents(tokenizer, filter);\n      }\n    };\n\n    ShingleAnalyzerWrapper analyzer = new ShingleAnalyzerWrapper(\n        delegate,\n        ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_TOKEN_SEPARATOR,\n        true, false, \"--\");\n    assertAnalyzesTo(analyzer, \"please divide into shingles\",\n                     new String[] { \"please\", \"please divide\",\n                                    \"divide\", \"divide --\",\n                                    \"-- shingles\", \"shingles\" },\n                     new int[] { 0,  0,  7,  7, 19, 19 },\n                     new int[] { 6, 13, 13, 19, 27, 27 },\n                     new int[] { 1,  0,  1,  0,  1,  1 });\n\n    analyzer = new ShingleAnalyzerWrapper(\n        delegate,\n        ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_TOKEN_SEPARATOR,\n        false, false, null);\n    assertAnalyzesTo(analyzer, \"please divide into shingles\",\n                     new String[] { \"please divide\", \"divide \", \" shingles\" },\n                     new int[] {  0,  7, 19 },\n                     new int[] { 13, 19, 27 },\n                     new int[] {  1,  1,  1 });\n\n    analyzer = new ShingleAnalyzerWrapper(\n        delegate,\n        ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_TOKEN_SEPARATOR,\n        false, false, \"\");\n    assertAnalyzesTo(analyzer, \"please divide into shingles\",\n                     new String[] { \"please divide\", \"divide \", \" shingles\" },\n                     new int[] {  0,  7, 19 },\n                     new int[] { 13, 19, 27 },\n                     new int[] {  1,  1,  1 });\n  }\n\n","sourceOld":"  public void testAltFillerToken() throws Exception {\n    Analyzer delegate = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        CharArraySet stopSet = StopFilter.makeStopSet(\"into\");\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        TokenFilter filter = new StopFilter(tokenizer, stopSet);\n        return new TokenStreamComponents(tokenizer, filter);\n      }\n    };\n\n    ShingleAnalyzerWrapper analyzer = new ShingleAnalyzerWrapper(\n        delegate,\n        ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_TOKEN_SEPARATOR,\n        true, false, \"--\");\n    assertAnalyzesTo(analyzer, \"please divide into shingles\",\n                     new String[] { \"please\", \"please divide\",\n                                    \"divide\", \"divide --\",\n                                    \"-- shingles\", \"shingles\" },\n                     new int[] { 0,  0,  7,  7, 19, 19 },\n                     new int[] { 6, 13, 13, 19, 27, 27 },\n                     new int[] { 1,  0,  1,  0,  1,  1 });\n\n    analyzer = new ShingleAnalyzerWrapper(\n        delegate,\n        ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_TOKEN_SEPARATOR,\n        false, false, null);\n    assertAnalyzesTo(analyzer, \"please divide into shingles\",\n                     new String[] { \"please divide\", \"divide \", \" shingles\" },\n                     new int[] {  0,  7, 19 },\n                     new int[] { 13, 19, 27 },\n                     new int[] {  1,  1,  1 });\n\n    analyzer = new ShingleAnalyzerWrapper(\n        delegate,\n        ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_TOKEN_SEPARATOR,\n        false, false, \"\");\n    assertAnalyzesTo(analyzer, \"please divide into shingles\",\n                     new String[] { \"please divide\", \"divide \", \" shingles\" },\n                     new int[] {  0,  7, 19 },\n                     new int[] { 13, 19, 27 },\n                     new int[] {  1,  1,  1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testAltFillerToken().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testAltFillerToken().mjava","sourceNew":"  public void testAltFillerToken() throws Exception {\n    Analyzer delegate = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        CharArraySet stopSet = StopFilter.makeStopSet(\"into\");\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        TokenFilter filter = new StopFilter(tokenizer, stopSet);\n        return new TokenStreamComponents(tokenizer, filter);\n      }\n    };\n\n    ShingleAnalyzerWrapper analyzer = new ShingleAnalyzerWrapper(\n        delegate,\n        ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_TOKEN_SEPARATOR,\n        true, false, \"--\");\n    assertAnalyzesTo(analyzer, \"please divide into shingles\",\n                     new String[] { \"please\", \"please divide\",\n                                    \"divide\", \"divide --\",\n                                    \"-- shingles\", \"shingles\" },\n                     new int[] { 0,  0,  7,  7, 19, 19 },\n                     new int[] { 6, 13, 13, 19, 27, 27 },\n                     new int[] { 1,  0,  1,  0,  1,  1 });\n\n    analyzer = new ShingleAnalyzerWrapper(\n        delegate,\n        ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_TOKEN_SEPARATOR,\n        false, false, null);\n    assertAnalyzesTo(analyzer, \"please divide into shingles\",\n                     new String[] { \"please divide\", \"divide \", \" shingles\" },\n                     new int[] {  0,  7, 19 },\n                     new int[] { 13, 19, 27 },\n                     new int[] {  1,  1,  1 });\n\n    analyzer = new ShingleAnalyzerWrapper(\n        delegate,\n        ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_TOKEN_SEPARATOR,\n        false, false, \"\");\n    assertAnalyzesTo(analyzer, \"please divide into shingles\",\n                     new String[] { \"please divide\", \"divide \", \" shingles\" },\n                     new int[] {  0,  7, 19 },\n                     new int[] { 13, 19, 27 },\n                     new int[] {  1,  1,  1 });\n  }\n\n","sourceOld":"  public void testAltFillerToken() throws Exception {\n    Analyzer delegate = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        CharArraySet stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, \"into\");\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        TokenFilter filter = new StopFilter(TEST_VERSION_CURRENT, tokenizer, stopSet);\n        return new TokenStreamComponents(tokenizer, filter);\n      }\n    };\n\n    ShingleAnalyzerWrapper analyzer = new ShingleAnalyzerWrapper(\n        delegate,\n        ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_TOKEN_SEPARATOR,\n        true, false, \"--\");\n    assertAnalyzesTo(analyzer, \"please divide into shingles\",\n                     new String[] { \"please\", \"please divide\",\n                                    \"divide\", \"divide --\",\n                                    \"-- shingles\", \"shingles\" },\n                     new int[] { 0,  0,  7,  7, 19, 19 },\n                     new int[] { 6, 13, 13, 19, 27, 27 },\n                     new int[] { 1,  0,  1,  0,  1,  1 });\n\n    analyzer = new ShingleAnalyzerWrapper(\n        delegate,\n        ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_TOKEN_SEPARATOR,\n        false, false, null);\n    assertAnalyzesTo(analyzer, \"please divide into shingles\",\n                     new String[] { \"please divide\", \"divide \", \" shingles\" },\n                     new int[] {  0,  7, 19 },\n                     new int[] { 13, 19, 27 },\n                     new int[] {  1,  1,  1 });\n\n    analyzer = new ShingleAnalyzerWrapper(\n        delegate,\n        ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_TOKEN_SEPARATOR,\n        false, false, \"\");\n    assertAnalyzesTo(analyzer, \"please divide into shingles\",\n                     new String[] { \"please divide\", \"divide \", \" shingles\" },\n                     new int[] {  0,  7, 19 },\n                     new int[] { 13, 19, 27 },\n                     new int[] {  1,  1,  1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testAltFillerToken().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testAltFillerToken().mjava","sourceNew":"  public void testAltFillerToken() throws Exception {\n    Analyzer delegate = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        CharArraySet stopSet = StopFilter.makeStopSet(\"into\");\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        TokenFilter filter = new StopFilter(tokenizer, stopSet);\n        return new TokenStreamComponents(tokenizer, filter);\n      }\n    };\n\n    ShingleAnalyzerWrapper analyzer = new ShingleAnalyzerWrapper(\n        delegate,\n        ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_TOKEN_SEPARATOR,\n        true, false, \"--\");\n    assertAnalyzesTo(analyzer, \"please divide into shingles\",\n                     new String[] { \"please\", \"please divide\",\n                                    \"divide\", \"divide --\",\n                                    \"-- shingles\", \"shingles\" },\n                     new int[] { 0,  0,  7,  7, 19, 19 },\n                     new int[] { 6, 13, 13, 19, 27, 27 },\n                     new int[] { 1,  0,  1,  0,  1,  1 });\n    analyzer.close();\n\n    delegate = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        CharArraySet stopSet = StopFilter.makeStopSet(\"into\");\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        TokenFilter filter = new StopFilter(tokenizer, stopSet);\n        return new TokenStreamComponents(tokenizer, filter);\n      }\n    };\n    analyzer = new ShingleAnalyzerWrapper(\n        delegate,\n        ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_TOKEN_SEPARATOR,\n        false, false, null);\n    assertAnalyzesTo(analyzer, \"please divide into shingles\",\n                     new String[] { \"please divide\", \"divide \", \" shingles\" },\n                     new int[] {  0,  7, 19 },\n                     new int[] { 13, 19, 27 },\n                     new int[] {  1,  1,  1 });\n    analyzer.close();\n\n    delegate = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        CharArraySet stopSet = StopFilter.makeStopSet(\"into\");\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        TokenFilter filter = new StopFilter(tokenizer, stopSet);\n        return new TokenStreamComponents(tokenizer, filter);\n      }\n    };\n    analyzer = new ShingleAnalyzerWrapper(\n        delegate,\n        ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_TOKEN_SEPARATOR,\n        false, false, \"\");\n    assertAnalyzesTo(analyzer, \"please divide into shingles\",\n                     new String[] { \"please divide\", \"divide \", \" shingles\" },\n                     new int[] {  0,  7, 19 },\n                     new int[] { 13, 19, 27 },\n                     new int[] {  1,  1,  1 });\n    analyzer.close();\n  }\n\n","sourceOld":"  public void testAltFillerToken() throws Exception {\n    Analyzer delegate = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        CharArraySet stopSet = StopFilter.makeStopSet(\"into\");\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        TokenFilter filter = new StopFilter(tokenizer, stopSet);\n        return new TokenStreamComponents(tokenizer, filter);\n      }\n    };\n\n    ShingleAnalyzerWrapper analyzer = new ShingleAnalyzerWrapper(\n        delegate,\n        ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_TOKEN_SEPARATOR,\n        true, false, \"--\");\n    assertAnalyzesTo(analyzer, \"please divide into shingles\",\n                     new String[] { \"please\", \"please divide\",\n                                    \"divide\", \"divide --\",\n                                    \"-- shingles\", \"shingles\" },\n                     new int[] { 0,  0,  7,  7, 19, 19 },\n                     new int[] { 6, 13, 13, 19, 27, 27 },\n                     new int[] { 1,  0,  1,  0,  1,  1 });\n\n    analyzer = new ShingleAnalyzerWrapper(\n        delegate,\n        ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_TOKEN_SEPARATOR,\n        false, false, null);\n    assertAnalyzesTo(analyzer, \"please divide into shingles\",\n                     new String[] { \"please divide\", \"divide \", \" shingles\" },\n                     new int[] {  0,  7, 19 },\n                     new int[] { 13, 19, 27 },\n                     new int[] {  1,  1,  1 });\n\n    analyzer = new ShingleAnalyzerWrapper(\n        delegate,\n        ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_TOKEN_SEPARATOR,\n        false, false, \"\");\n    assertAnalyzesTo(analyzer, \"please divide into shingles\",\n                     new String[] { \"please divide\", \"divide \", \" shingles\" },\n                     new int[] {  0,  7, 19 },\n                     new int[] { 13, 19, 27 },\n                     new int[] {  1,  1,  1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testAltFillerToken().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testAltFillerToken().mjava","sourceNew":"  public void testAltFillerToken() throws Exception {\n    Analyzer delegate = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        CharArraySet stopSet = StopFilter.makeStopSet(\"into\");\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        TokenFilter filter = new StopFilter(tokenizer, stopSet);\n        return new TokenStreamComponents(tokenizer, filter);\n      }\n    };\n\n    ShingleAnalyzerWrapper analyzer = new ShingleAnalyzerWrapper(\n        delegate,\n        ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_TOKEN_SEPARATOR,\n        true, false, \"--\");\n    assertAnalyzesTo(analyzer, \"please divide into shingles\",\n                     new String[] { \"please\", \"please divide\",\n                                    \"divide\", \"divide --\",\n                                    \"-- shingles\", \"shingles\" },\n                     new int[] { 0,  0,  7,  7, 19, 19 },\n                     new int[] { 6, 13, 13, 19, 27, 27 },\n                     new int[] { 1,  0,  1,  0,  1,  1 });\n    analyzer.close();\n\n    delegate = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        CharArraySet stopSet = StopFilter.makeStopSet(\"into\");\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        TokenFilter filter = new StopFilter(tokenizer, stopSet);\n        return new TokenStreamComponents(tokenizer, filter);\n      }\n    };\n    analyzer = new ShingleAnalyzerWrapper(\n        delegate,\n        ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_TOKEN_SEPARATOR,\n        false, false, null);\n    assertAnalyzesTo(analyzer, \"please divide into shingles\",\n                     new String[] { \"please divide\", \"divide \", \" shingles\" },\n                     new int[] {  0,  7, 19 },\n                     new int[] { 13, 19, 27 },\n                     new int[] {  1,  1,  1 });\n    analyzer.close();\n\n    delegate = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        CharArraySet stopSet = StopFilter.makeStopSet(\"into\");\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        TokenFilter filter = new StopFilter(tokenizer, stopSet);\n        return new TokenStreamComponents(tokenizer, filter);\n      }\n    };\n    analyzer = new ShingleAnalyzerWrapper(\n        delegate,\n        ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_TOKEN_SEPARATOR,\n        false, false, \"\");\n    assertAnalyzesTo(analyzer, \"please divide into shingles\",\n                     new String[] { \"please divide\", \"divide \", \" shingles\" },\n                     new int[] {  0,  7, 19 },\n                     new int[] { 13, 19, 27 },\n                     new int[] {  1,  1,  1 });\n    analyzer.close();\n  }\n\n","sourceOld":"  public void testAltFillerToken() throws Exception {\n    Analyzer delegate = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        CharArraySet stopSet = StopFilter.makeStopSet(\"into\");\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        TokenFilter filter = new StopFilter(tokenizer, stopSet);\n        return new TokenStreamComponents(tokenizer, filter);\n      }\n    };\n\n    ShingleAnalyzerWrapper analyzer = new ShingleAnalyzerWrapper(\n        delegate,\n        ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_TOKEN_SEPARATOR,\n        true, false, \"--\");\n    assertAnalyzesTo(analyzer, \"please divide into shingles\",\n                     new String[] { \"please\", \"please divide\",\n                                    \"divide\", \"divide --\",\n                                    \"-- shingles\", \"shingles\" },\n                     new int[] { 0,  0,  7,  7, 19, 19 },\n                     new int[] { 6, 13, 13, 19, 27, 27 },\n                     new int[] { 1,  0,  1,  0,  1,  1 });\n\n    analyzer = new ShingleAnalyzerWrapper(\n        delegate,\n        ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_TOKEN_SEPARATOR,\n        false, false, null);\n    assertAnalyzesTo(analyzer, \"please divide into shingles\",\n                     new String[] { \"please divide\", \"divide \", \" shingles\" },\n                     new int[] {  0,  7, 19 },\n                     new int[] { 13, 19, 27 },\n                     new int[] {  1,  1,  1 });\n\n    analyzer = new ShingleAnalyzerWrapper(\n        delegate,\n        ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_TOKEN_SEPARATOR,\n        false, false, \"\");\n    assertAnalyzesTo(analyzer, \"please divide into shingles\",\n                     new String[] { \"please divide\", \"divide \", \" shingles\" },\n                     new int[] {  0,  7, 19 },\n                     new int[] { 13, 19, 27 },\n                     new int[] {  1,  1,  1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["6237bacfd44ad16661121d7d8a604a57f78978e9"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["379db3ad24c4f0214f30a122265a6d6be003a99d","a56958d7f71a28824f20031ffbb2e13502a0274e"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a56958d7f71a28824f20031ffbb2e13502a0274e":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"6237bacfd44ad16661121d7d8a604a57f78978e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56958d7f71a28824f20031ffbb2e13502a0274e"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"379db3ad24c4f0214f30a122265a6d6be003a99d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6237bacfd44ad16661121d7d8a604a57f78978e9"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"6237bacfd44ad16661121d7d8a604a57f78978e9":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}