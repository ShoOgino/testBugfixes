{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByArrayUIF#findStartAndEndOrds().mjava","commits":[{"id":"79759974460bc59933cd169acc94f5c6b16368d5","date":1471318443,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByArrayUIF#findStartAndEndOrds().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorUIF[FacetField]#findStartAndEndOrds().mjava","sourceNew":"  @Override\n  protected void findStartAndEndOrds() throws IOException {\n    uif = UnInvertedField.getUnInvertedField(freq.field, fcontext.searcher);\n    te = uif.getOrdTermsEnum( fcontext.searcher.getLeafReader() );    // \"te\" can be null\n\n    startTermIndex = 0;\n    endTermIndex = uif.numTerms();  // one past the end\n\n    if (prefixRef != null && te != null) {\n      if (te.seekCeil(prefixRef.get()) == TermsEnum.SeekStatus.END) {\n        startTermIndex = uif.numTerms();\n      } else {\n        startTermIndex = (int) te.ord();\n      }\n      prefixRef.append(UnicodeUtil.BIG_TERM);\n      if (te.seekCeil(prefixRef.get()) == TermsEnum.SeekStatus.END) {\n        endTermIndex = uif.numTerms();\n      } else {\n        endTermIndex = (int) te.ord();\n      }\n    }\n\n    nTerms = endTermIndex - startTermIndex;\n  }\n\n","sourceOld":"  @Override\n  protected void findStartAndEndOrds() throws IOException {\n    uif = UnInvertedField.getUnInvertedField(freq.field, fcontext.searcher);\n    te = uif.getOrdTermsEnum( fcontext.searcher.getLeafReader() );    // \"te\" can be null\n\n    startTermIndex = 0;\n    endTermIndex = uif.numTerms();  // one past the end\n\n    if (prefixRef != null && te != null) {\n      if (te.seekCeil(prefixRef.get()) == TermsEnum.SeekStatus.END) {\n        startTermIndex = uif.numTerms();\n      } else {\n        startTermIndex = (int) te.ord();\n      }\n      prefixRef.append(UnicodeUtil.BIG_TERM);\n      if (te.seekCeil(prefixRef.get()) == TermsEnum.SeekStatus.END) {\n        endTermIndex = uif.numTerms();\n      } else {\n        endTermIndex = (int) te.ord();\n      }\n    }\n\n    nTerms = endTermIndex - startTermIndex;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByArrayUIF#findStartAndEndOrds().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorUIF[FacetField]#findStartAndEndOrds().mjava","sourceNew":"  @Override\n  protected void findStartAndEndOrds() throws IOException {\n    uif = UnInvertedField.getUnInvertedField(freq.field, fcontext.searcher);\n    te = uif.getOrdTermsEnum( fcontext.searcher.getLeafReader() );    // \"te\" can be null\n\n    startTermIndex = 0;\n    endTermIndex = uif.numTerms();  // one past the end\n\n    if (prefixRef != null && te != null) {\n      if (te.seekCeil(prefixRef.get()) == TermsEnum.SeekStatus.END) {\n        startTermIndex = uif.numTerms();\n      } else {\n        startTermIndex = (int) te.ord();\n      }\n      prefixRef.append(UnicodeUtil.BIG_TERM);\n      if (te.seekCeil(prefixRef.get()) == TermsEnum.SeekStatus.END) {\n        endTermIndex = uif.numTerms();\n      } else {\n        endTermIndex = (int) te.ord();\n      }\n    }\n\n    nTerms = endTermIndex - startTermIndex;\n  }\n\n","sourceOld":"  @Override\n  protected void findStartAndEndOrds() throws IOException {\n    uif = UnInvertedField.getUnInvertedField(freq.field, fcontext.searcher);\n    te = uif.getOrdTermsEnum( fcontext.searcher.getLeafReader() );    // \"te\" can be null\n\n    startTermIndex = 0;\n    endTermIndex = uif.numTerms();  // one past the end\n\n    if (prefixRef != null && te != null) {\n      if (te.seekCeil(prefixRef.get()) == TermsEnum.SeekStatus.END) {\n        startTermIndex = uif.numTerms();\n      } else {\n        startTermIndex = (int) te.ord();\n      }\n      prefixRef.append(UnicodeUtil.BIG_TERM);\n      if (te.seekCeil(prefixRef.get()) == TermsEnum.SeekStatus.END) {\n        endTermIndex = uif.numTerms();\n      } else {\n        endTermIndex = (int) te.ord();\n      }\n    }\n\n    nTerms = endTermIndex - startTermIndex;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByArrayUIF#findStartAndEndOrds().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorUIF[FacetField]#findStartAndEndOrds().mjava","sourceNew":"  @Override\n  protected void findStartAndEndOrds() throws IOException {\n    uif = UnInvertedField.getUnInvertedField(freq.field, fcontext.searcher);\n    te = uif.getOrdTermsEnum( fcontext.searcher.getLeafReader() );    // \"te\" can be null\n\n    startTermIndex = 0;\n    endTermIndex = uif.numTerms();  // one past the end\n\n    if (prefixRef != null && te != null) {\n      if (te.seekCeil(prefixRef.get()) == TermsEnum.SeekStatus.END) {\n        startTermIndex = uif.numTerms();\n      } else {\n        startTermIndex = (int) te.ord();\n      }\n      prefixRef.append(UnicodeUtil.BIG_TERM);\n      if (te.seekCeil(prefixRef.get()) == TermsEnum.SeekStatus.END) {\n        endTermIndex = uif.numTerms();\n      } else {\n        endTermIndex = (int) te.ord();\n      }\n    }\n\n    nTerms = endTermIndex - startTermIndex;\n  }\n\n","sourceOld":"  @Override\n  protected void findStartAndEndOrds() throws IOException {\n    uif = UnInvertedField.getUnInvertedField(freq.field, fcontext.searcher);\n    te = uif.getOrdTermsEnum( fcontext.searcher.getLeafReader() );    // \"te\" can be null\n\n    startTermIndex = 0;\n    endTermIndex = uif.numTerms();  // one past the end\n\n    if (prefixRef != null && te != null) {\n      if (te.seekCeil(prefixRef.get()) == TermsEnum.SeekStatus.END) {\n        startTermIndex = uif.numTerms();\n      } else {\n        startTermIndex = (int) te.ord();\n      }\n      prefixRef.append(UnicodeUtil.BIG_TERM);\n      if (te.seekCeil(prefixRef.get()) == TermsEnum.SeekStatus.END) {\n        endTermIndex = uif.numTerms();\n      } else {\n        endTermIndex = (int) te.ord();\n      }\n    }\n\n    nTerms = endTermIndex - startTermIndex;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e07c409cff8701e4dc3d45934b021a949a5a8822","date":1475694629,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByArrayUIF#findStartAndEndOrds().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByArrayUIF#findStartAndEndOrds().mjava","sourceNew":"  @Override\n  protected void findStartAndEndOrds() throws IOException {\n    uif = UnInvertedField.getUnInvertedField(freq.field, fcontext.searcher);\n    te = uif.getOrdTermsEnum( fcontext.searcher.getSlowAtomicReader() );    // \"te\" can be null\n\n    startTermIndex = 0;\n    endTermIndex = uif.numTerms();  // one past the end\n\n    if (prefixRef != null && te != null) {\n      if (te.seekCeil(prefixRef.get()) == TermsEnum.SeekStatus.END) {\n        startTermIndex = uif.numTerms();\n      } else {\n        startTermIndex = (int) te.ord();\n      }\n      prefixRef.append(UnicodeUtil.BIG_TERM);\n      if (te.seekCeil(prefixRef.get()) == TermsEnum.SeekStatus.END) {\n        endTermIndex = uif.numTerms();\n      } else {\n        endTermIndex = (int) te.ord();\n      }\n    }\n\n    nTerms = endTermIndex - startTermIndex;\n  }\n\n","sourceOld":"  @Override\n  protected void findStartAndEndOrds() throws IOException {\n    uif = UnInvertedField.getUnInvertedField(freq.field, fcontext.searcher);\n    te = uif.getOrdTermsEnum( fcontext.searcher.getLeafReader() );    // \"te\" can be null\n\n    startTermIndex = 0;\n    endTermIndex = uif.numTerms();  // one past the end\n\n    if (prefixRef != null && te != null) {\n      if (te.seekCeil(prefixRef.get()) == TermsEnum.SeekStatus.END) {\n        startTermIndex = uif.numTerms();\n      } else {\n        startTermIndex = (int) te.ord();\n      }\n      prefixRef.append(UnicodeUtil.BIG_TERM);\n      if (te.seekCeil(prefixRef.get()) == TermsEnum.SeekStatus.END) {\n        endTermIndex = uif.numTerms();\n      } else {\n        endTermIndex = (int) te.ord();\n      }\n    }\n\n    nTerms = endTermIndex - startTermIndex;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByArrayUIF#findStartAndEndOrds().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void findStartAndEndOrds() throws IOException {\n    uif = UnInvertedField.getUnInvertedField(freq.field, fcontext.searcher);\n    te = uif.getOrdTermsEnum( fcontext.searcher.getSlowAtomicReader() );    // \"te\" can be null\n\n    startTermIndex = 0;\n    endTermIndex = uif.numTerms();  // one past the end\n\n    if (prefixRef != null && te != null) {\n      if (te.seekCeil(prefixRef.get()) == TermsEnum.SeekStatus.END) {\n        startTermIndex = uif.numTerms();\n      } else {\n        startTermIndex = (int) te.ord();\n      }\n      prefixRef.append(UnicodeUtil.BIG_TERM);\n      if (te.seekCeil(prefixRef.get()) == TermsEnum.SeekStatus.END) {\n        endTermIndex = uif.numTerms();\n      } else {\n        endTermIndex = (int) te.ord();\n      }\n    }\n\n    nTerms = endTermIndex - startTermIndex;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","79759974460bc59933cd169acc94f5c6b16368d5"],"79759974460bc59933cd169acc94f5c6b16368d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e07c409cff8701e4dc3d45934b021a949a5a8822":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e07c409cff8701e4dc3d45934b021a949a5a8822"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e07c409cff8701e4dc3d45934b021a949a5a8822"]},"commit2Childs":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["e07c409cff8701e4dc3d45934b021a949a5a8822"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["403d05f7f8d69b65659157eff1bc1d2717f04c66","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","79759974460bc59933cd169acc94f5c6b16368d5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"79759974460bc59933cd169acc94f5c6b16368d5":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"e07c409cff8701e4dc3d45934b021a949a5a8822":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}