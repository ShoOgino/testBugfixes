{"path":"solr/core/src/java/org/apache/solr/core/TransientSolrCoreCacheDefault#TransientSolrCoreCacheDefault(CoreContainer).mjava","commits":[{"id":"9435d55e3ea95c5d94406d3affc36f9505b6a736","date":1491251232,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/TransientSolrCoreCacheDefault#TransientSolrCoreCacheDefault(CoreContainer).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param container The enclosing CoreContainer. It allows us to access everything we need.\n   */\n  public TransientSolrCoreCacheDefault(final CoreContainer container) {\n    this.coreContainer = container;\n    this.observer= coreContainer.solrCores;\n    \n    NodeConfig cfg = container.getNodeConfig();\n    if (cfg.getTransientCachePluginInfo() == null) {\n      // Still handle just having transientCacheSize defined in the body of solr.xml  not in a transient handler clause.\n      // deprecate this for 7.0?\n      this.cacheSize = cfg.getTransientCacheSize();\n    } else {\n      NamedList args = cfg.getTransientCachePluginInfo().initArgs;\n      Object obj = args.get(\"transientCacheSize\");\n      if (obj != null) {\n        this.cacheSize = (int) obj;\n      }\n    }\n    doInit();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b6a4b585aed7660a589375f6a09b90efd29c961","date":1491296430,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/TransientSolrCoreCacheDefault#TransientSolrCoreCacheDefault(CoreContainer).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param container The enclosing CoreContainer. It allows us to access everything we need.\n   */\n  public TransientSolrCoreCacheDefault(final CoreContainer container) {\n    this.coreContainer = container;\n    this.observer= coreContainer.solrCores;\n    \n    NodeConfig cfg = container.getNodeConfig();\n    if (cfg.getTransientCachePluginInfo() == null) {\n      // Still handle just having transientCacheSize defined in the body of solr.xml  not in a transient handler clause.\n      // deprecate this for 7.0?\n      this.cacheSize = cfg.getTransientCacheSize();\n    } else {\n      NamedList args = cfg.getTransientCachePluginInfo().initArgs;\n      Object obj = args.get(\"transientCacheSize\");\n      if (obj != null) {\n        this.cacheSize = (int) obj;\n      }\n    }\n    doInit();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/TransientSolrCoreCacheDefault#TransientSolrCoreCacheDefault(CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/TransientSolrCoreCacheDefault#TransientSolrCoreCacheDefault(CoreContainer).mjava","sourceNew":"  /**\n   * @param container The enclosing CoreContainer. It allows us to access everything we need.\n   */\n  public TransientSolrCoreCacheDefault(final CoreContainer container) {\n    this.coreContainer = container;\n    this.coreCloseListener = coreContainer.solrCores;\n    \n    NodeConfig cfg = container.getNodeConfig();\n    if (cfg.getTransientCachePluginInfo() == null) {\n      // Still handle just having transientCacheSize defined in the body of solr.xml  not in a transient handler clause.\n      // deprecate this for 7.0?\n      this.cacheSize = cfg.getTransientCacheSize();\n    } else {\n      NamedList args = cfg.getTransientCachePluginInfo().initArgs;\n      Object obj = args.get(\"transientCacheSize\");\n      if (obj != null) {\n        this.cacheSize = (int) obj;\n      }\n    }\n    doInit();\n  }\n\n","sourceOld":"  /**\n   * @param container The enclosing CoreContainer. It allows us to access everything we need.\n   */\n  public TransientSolrCoreCacheDefault(final CoreContainer container) {\n    this.coreContainer = container;\n    this.observer= coreContainer.solrCores;\n    \n    NodeConfig cfg = container.getNodeConfig();\n    if (cfg.getTransientCachePluginInfo() == null) {\n      // Still handle just having transientCacheSize defined in the body of solr.xml  not in a transient handler clause.\n      // deprecate this for 7.0?\n      this.cacheSize = cfg.getTransientCacheSize();\n    } else {\n      NamedList args = cfg.getTransientCachePluginInfo().initArgs;\n      Object obj = args.get(\"transientCacheSize\");\n      if (obj != null) {\n        this.cacheSize = (int) obj;\n      }\n    }\n    doInit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba387e642aff5fc3b3ff8c76a01f40e4d2e8e29f","date":1555718441,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/TransientSolrCoreCacheDefault#TransientSolrCoreCacheDefault(CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/TransientSolrCoreCacheDefault#TransientSolrCoreCacheDefault(CoreContainer).mjava","sourceNew":"  /**\n   * @param container The enclosing CoreContainer. It allows us to access everything we need.\n   */\n  public TransientSolrCoreCacheDefault(final CoreContainer container) {\n    this.coreContainer = container;\n\n    NodeConfig cfg = container.getNodeConfig();\n    if (cfg.getTransientCachePluginInfo() == null) {\n      // Still handle just having transientCacheSize defined in the body of solr.xml  not in a transient handler clause.\n      // deprecate this for 7.0?\n      this.cacheSize = cfg.getTransientCacheSize();\n    } else {\n      NamedList args = cfg.getTransientCachePluginInfo().initArgs;\n      Object obj = args.get(\"transientCacheSize\");\n      if (obj != null) {\n        this.cacheSize = (int) obj;\n      }\n    }\n    doInit();\n  }\n\n","sourceOld":"  /**\n   * @param container The enclosing CoreContainer. It allows us to access everything we need.\n   */\n  public TransientSolrCoreCacheDefault(final CoreContainer container) {\n    this.coreContainer = container;\n    this.coreCloseListener = coreContainer.solrCores;\n    \n    NodeConfig cfg = container.getNodeConfig();\n    if (cfg.getTransientCachePluginInfo() == null) {\n      // Still handle just having transientCacheSize defined in the body of solr.xml  not in a transient handler clause.\n      // deprecate this for 7.0?\n      this.cacheSize = cfg.getTransientCacheSize();\n    } else {\n      NamedList args = cfg.getTransientCachePluginInfo().initArgs;\n      Object obj = args.get(\"transientCacheSize\");\n      if (obj != null) {\n        this.cacheSize = (int) obj;\n      }\n    }\n    doInit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75237075d8425856bf4bbf52a6be4f9162b8187d","date":1591103291,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/TransientSolrCoreCacheDefault#TransientSolrCoreCacheDefault(CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/TransientSolrCoreCacheDefault#TransientSolrCoreCacheDefault(CoreContainer).mjava","sourceNew":"  /**\n   * @param container The enclosing CoreContainer. It allows us to access everything we need.\n   */\n  public TransientSolrCoreCacheDefault(final CoreContainer container) {\n    this.coreContainer = container;\n\n    NodeConfig cfg = container.getNodeConfig();\n    if (cfg.getTransientCachePluginInfo() == null) {\n      // Still handle just having transientCacheSize defined in the body of solr.xml  not in a transient handler clause.\n      // deprecate this for 7.0?\n      this.cacheSize = cfg.getTransientCacheSize();\n    } else {\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList args = cfg.getTransientCachePluginInfo().initArgs;\n      Object obj = args.get(\"transientCacheSize\");\n      if (obj != null) {\n        this.cacheSize = (int) obj;\n      }\n    }\n    doInit();\n  }\n\n","sourceOld":"  /**\n   * @param container The enclosing CoreContainer. It allows us to access everything we need.\n   */\n  public TransientSolrCoreCacheDefault(final CoreContainer container) {\n    this.coreContainer = container;\n\n    NodeConfig cfg = container.getNodeConfig();\n    if (cfg.getTransientCachePluginInfo() == null) {\n      // Still handle just having transientCacheSize defined in the body of solr.xml  not in a transient handler clause.\n      // deprecate this for 7.0?\n      this.cacheSize = cfg.getTransientCacheSize();\n    } else {\n      NamedList args = cfg.getTransientCachePluginInfo().initArgs;\n      Object obj = args.get(\"transientCacheSize\");\n      if (obj != null) {\n        this.cacheSize = (int) obj;\n      }\n    }\n    doInit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9435d55e3ea95c5d94406d3affc36f9505b6a736":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"75237075d8425856bf4bbf52a6be4f9162b8187d":["ba387e642aff5fc3b3ff8c76a01f40e4d2e8e29f"],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["9435d55e3ea95c5d94406d3affc36f9505b6a736"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8b6a4b585aed7660a589375f6a09b90efd29c961":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ba387e642aff5fc3b3ff8c76a01f40e4d2e8e29f":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["75237075d8425856bf4bbf52a6be4f9162b8187d"]},"commit2Childs":{"9435d55e3ea95c5d94406d3affc36f9505b6a736":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"75237075d8425856bf4bbf52a6be4f9162b8187d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["ba387e642aff5fc3b3ff8c76a01f40e4d2e8e29f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9435d55e3ea95c5d94406d3affc36f9505b6a736","8b6a4b585aed7660a589375f6a09b90efd29c961"],"8b6a4b585aed7660a589375f6a09b90efd29c961":[],"ba387e642aff5fc3b3ff8c76a01f40e4d2e8e29f":["75237075d8425856bf4bbf52a6be4f9162b8187d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8b6a4b585aed7660a589375f6a09b90efd29c961","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}