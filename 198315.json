{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#parse(XMLStreamReader,Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","commits":[{"id":"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","date":1217446558,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#parse(XMLStreamReader,Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","pathOld":"/dev/null","sourceNew":"    private void parse(XMLStreamReader parser, Handler handler,\n                       Map<String, Object> values, Stack<Set<String>> stack,\n                       boolean recordStarted) throws IOException, XMLStreamException {\n      Set<String> valuesAddedinThisFrame = null;\n      if (isRecord) {\n        recordStarted = true;\n        valuesAddedinThisFrame = new HashSet<String>();\n        stack.push(valuesAddedinThisFrame);\n      } else if (recordStarted) {\n        valuesAddedinThisFrame = stack.peek();\n      } else {\n        if (attributes != null || hasText)\n          valuesAddedinThisFrame = new HashSet<String>();\n        stack.push(valuesAddedinThisFrame);\n      }\n      try {\n        if (attributes != null) {\n          for (Node node : attributes) {\n            String value = parser.getAttributeValue(null, node.name);\n            if (value != null || (recordStarted && !isRecord)) {\n              putText(values, value, node.fieldName, node.multiValued);\n              valuesAddedinThisFrame.add(node.fieldName);\n            }\n          }\n        }\n        Set<Node> childrenFound = new HashSet<Node>();\n        boolean skipNextEvent = false;\n        int event = -1;\n        while (true) {\n          if (!skipNextEvent) {\n            event = parser.next();\n            skipNextEvent = false;\n          }\n          if (event == END_DOCUMENT) {\n            return;\n          }\n          if (event == END_ELEMENT) {\n            if (isRecord)\n              handler.handle(new HashMap<String, Object>(values), forEachPath);\n            if (recordStarted && !isRecord\n                    && !childrenFound.containsAll(childNodes)) {\n              for (Node n : childNodes) {\n                if (!childrenFound.contains(n))\n                  n.putNulls(values);\n              }\n            }\n            return;\n          }\n          if ((event == CDATA || event == CHARACTERS || event == SPACE)\n                  && hasText) {\n            valuesAddedinThisFrame.add(fieldName);\n            skipNextEvent = true;\n            String text = parser.getText();\n            event = parser.next();\n            while (event == CDATA || event == CHARACTERS || event == SPACE) {\n              text = text + parser.getText();\n              event = parser.next();\n            }\n            putText(values, text, fieldName, multiValued);\n          } else if (event == START_ELEMENT) {\n            Node n = getMatchingChild(parser);\n            if (n != null) {\n              childrenFound.add(n);\n              n.parse(parser, handler, values, stack, recordStarted);\n            } else {\n              skipTag(parser);\n            }\n          }\n        }\n      } finally {\n\n        Set<String> cleanThis = null;\n        if (isRecord || !recordStarted) {\n          cleanThis = stack.pop();\n        } else {\n          return;\n        }\n        if (cleanThis != null) {\n          for (String fld : cleanThis) {\n            values.remove(fld);\n          }\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["217b516e59f574c979a72ba66ee8e9423e06cafd","fb64c40810344469d50ab5bb932fb375b6dcd474","8c8c4626bae005f9e5e637caa5949d5164471e43"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fb64c40810344469d50ab5bb932fb375b6dcd474","date":1223970703,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#parse(XMLStreamReader,Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#parse(XMLStreamReader,Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","sourceNew":"    private void parse(XMLStreamReader parser, Handler handler,\n                       Map<String, Object> values, Stack<Set<String>> stack,\n                       boolean recordStarted) throws IOException, XMLStreamException {\n      Set<String> valuesAddedinThisFrame = null;\n      if (isRecord) {\n        recordStarted = true;\n        valuesAddedinThisFrame = new HashSet<String>();\n        stack.push(valuesAddedinThisFrame);\n      } else if (recordStarted) {\n        valuesAddedinThisFrame = stack.peek();\n      } else {\n        if (attributes != null || hasText)\n          valuesAddedinThisFrame = new HashSet<String>();\n        stack.push(valuesAddedinThisFrame);\n      }\n      try {\n        if (attributes != null) {\n          for (Node node : attributes) {\n            String value = parser.getAttributeValue(null, node.name);\n            if (value != null || (recordStarted && !isRecord)) {\n              putText(values, value, node.fieldName, node.multiValued);\n              valuesAddedinThisFrame.add(node.fieldName);\n            }\n          }\n        }\n        Set<Node> childrenFound = new HashSet<Node>();\n        boolean skipNextEvent = false;\n        int event = -1;\n        while (true) {\n          if (!skipNextEvent) {\n            event = parser.next();\n            skipNextEvent = false;\n          }\n          if (event == END_DOCUMENT) {\n            return;\n          }\n          if (event == END_ELEMENT) {\n            if (isRecord)\n              handler.handle(getDeepCopy(values), forEachPath);\n            if (recordStarted && !isRecord\n                    && !childrenFound.containsAll(childNodes)) {\n              for (Node n : childNodes) {\n                if (!childrenFound.contains(n))\n                  n.putNulls(values);\n              }\n            }\n            return;\n          }\n          if ((event == CDATA || event == CHARACTERS || event == SPACE)\n                  && hasText) {\n            valuesAddedinThisFrame.add(fieldName);\n            skipNextEvent = true;\n            String text = parser.getText();\n            event = parser.next();\n            while (event == CDATA || event == CHARACTERS || event == SPACE) {\n              text = text + parser.getText();\n              event = parser.next();\n            }\n            putText(values, text, fieldName, multiValued);\n          } else if (event == START_ELEMENT) {\n            Node n = getMatchingChild(parser);\n            if (n != null) {\n              childrenFound.add(n);\n              n.parse(parser, handler, values, stack, recordStarted);\n            } else {\n              skipTag(parser);\n            }\n          }\n        }\n      } finally {\n\n        Set<String> cleanThis = null;\n        if (isRecord || !recordStarted) {\n          cleanThis = stack.pop();\n        } else {\n          return;\n        }\n        if (cleanThis != null) {\n          for (String fld : cleanThis) {\n            values.remove(fld);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    private void parse(XMLStreamReader parser, Handler handler,\n                       Map<String, Object> values, Stack<Set<String>> stack,\n                       boolean recordStarted) throws IOException, XMLStreamException {\n      Set<String> valuesAddedinThisFrame = null;\n      if (isRecord) {\n        recordStarted = true;\n        valuesAddedinThisFrame = new HashSet<String>();\n        stack.push(valuesAddedinThisFrame);\n      } else if (recordStarted) {\n        valuesAddedinThisFrame = stack.peek();\n      } else {\n        if (attributes != null || hasText)\n          valuesAddedinThisFrame = new HashSet<String>();\n        stack.push(valuesAddedinThisFrame);\n      }\n      try {\n        if (attributes != null) {\n          for (Node node : attributes) {\n            String value = parser.getAttributeValue(null, node.name);\n            if (value != null || (recordStarted && !isRecord)) {\n              putText(values, value, node.fieldName, node.multiValued);\n              valuesAddedinThisFrame.add(node.fieldName);\n            }\n          }\n        }\n        Set<Node> childrenFound = new HashSet<Node>();\n        boolean skipNextEvent = false;\n        int event = -1;\n        while (true) {\n          if (!skipNextEvent) {\n            event = parser.next();\n            skipNextEvent = false;\n          }\n          if (event == END_DOCUMENT) {\n            return;\n          }\n          if (event == END_ELEMENT) {\n            if (isRecord)\n              handler.handle(new HashMap<String, Object>(values), forEachPath);\n            if (recordStarted && !isRecord\n                    && !childrenFound.containsAll(childNodes)) {\n              for (Node n : childNodes) {\n                if (!childrenFound.contains(n))\n                  n.putNulls(values);\n              }\n            }\n            return;\n          }\n          if ((event == CDATA || event == CHARACTERS || event == SPACE)\n                  && hasText) {\n            valuesAddedinThisFrame.add(fieldName);\n            skipNextEvent = true;\n            String text = parser.getText();\n            event = parser.next();\n            while (event == CDATA || event == CHARACTERS || event == SPACE) {\n              text = text + parser.getText();\n              event = parser.next();\n            }\n            putText(values, text, fieldName, multiValued);\n          } else if (event == START_ELEMENT) {\n            Node n = getMatchingChild(parser);\n            if (n != null) {\n              childrenFound.add(n);\n              n.parse(parser, handler, values, stack, recordStarted);\n            } else {\n              skipTag(parser);\n            }\n          }\n        }\n      } finally {\n\n        Set<String> cleanThis = null;\n        if (isRecord || !recordStarted) {\n          cleanThis = stack.pop();\n        } else {\n          return;\n        }\n        if (cleanThis != null) {\n          for (String fld : cleanThis) {\n            values.remove(fld);\n          }\n        }\n      }\n    }\n\n","bugFix":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"217b516e59f574c979a72ba66ee8e9423e06cafd","date":1233574218,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#parse(XMLStreamReader,Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#parse(XMLStreamReader,Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","sourceNew":"    private void parse(XMLStreamReader parser, Handler handler,\n                       Map<String, Object> values, Stack<Set<String>> stack,\n                       boolean recordStarted) throws IOException, XMLStreamException {\n      Set<String> valuesAddedinThisFrame = null;\n      if (isRecord) {\n        recordStarted = true;\n        valuesAddedinThisFrame = new HashSet<String>();\n        stack.push(valuesAddedinThisFrame);\n      } else if (recordStarted) {\n        valuesAddedinThisFrame = stack.peek();\n      } else {\n        if (attributes != null || hasText)\n          valuesAddedinThisFrame = new HashSet<String>();\n        stack.push(valuesAddedinThisFrame);\n      }\n      try {\n        if (attributes != null) {\n          for (Node node : attributes) {\n            String value = parser.getAttributeValue(null, node.name);\n            if (value != null || (recordStarted && !isRecord)) {\n              putText(values, value, node.fieldName, node.multiValued);\n              valuesAddedinThisFrame.add(node.fieldName);\n            }\n          }\n        }\n        Set<Node> childrenFound = new HashSet<Node>();\n        boolean skipNextEvent = false;\n        int event = -1;\n        while (true) {\n          if (!skipNextEvent) {\n            event = parser.next();\n            skipNextEvent = false;\n          }\n          if (event == END_DOCUMENT) {\n            return;\n          }\n          if (event == END_ELEMENT) {\n            if (isRecord)\n              handler.handle(getDeepCopy(values), forEachPath);\n            if (recordStarted && !isRecord\n                    && !childrenFound.containsAll(childNodes)) {\n              for (Node n : childNodes) {\n                if (!childrenFound.contains(n))\n                  n.putNulls(values);\n              }\n            }\n            return;\n          }\n          if ((event == CDATA || event == CHARACTERS || event == SPACE)\n                  && hasText) {\n            valuesAddedinThisFrame.add(fieldName);\n            skipNextEvent = true;\n            String text = parser.getText();\n            event = parser.next();\n\n            while (true) {\n              if(event == CDATA || event == CHARACTERS || event == SPACE) {\n                text = text + parser.getText();\n              } else if(event == START_ELEMENT) {\n                handleStartElement(parser, childrenFound, handler, values, stack, recordStarted);\n              } else {\n                break;\n              }\n              event = parser.next();\n            }\n            putText(values, text, fieldName, multiValued);\n          } else if (event == START_ELEMENT) {\n            handleStartElement(parser, childrenFound, handler, values, stack, recordStarted);\n          }\n        }\n      } finally {\n\n        Set<String> cleanThis = null;\n        if (isRecord || !recordStarted) {\n          cleanThis = stack.pop();\n        } else {\n          return;\n        }\n        if (cleanThis != null) {\n          for (String fld : cleanThis) {\n            values.remove(fld);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    private void parse(XMLStreamReader parser, Handler handler,\n                       Map<String, Object> values, Stack<Set<String>> stack,\n                       boolean recordStarted) throws IOException, XMLStreamException {\n      Set<String> valuesAddedinThisFrame = null;\n      if (isRecord) {\n        recordStarted = true;\n        valuesAddedinThisFrame = new HashSet<String>();\n        stack.push(valuesAddedinThisFrame);\n      } else if (recordStarted) {\n        valuesAddedinThisFrame = stack.peek();\n      } else {\n        if (attributes != null || hasText)\n          valuesAddedinThisFrame = new HashSet<String>();\n        stack.push(valuesAddedinThisFrame);\n      }\n      try {\n        if (attributes != null) {\n          for (Node node : attributes) {\n            String value = parser.getAttributeValue(null, node.name);\n            if (value != null || (recordStarted && !isRecord)) {\n              putText(values, value, node.fieldName, node.multiValued);\n              valuesAddedinThisFrame.add(node.fieldName);\n            }\n          }\n        }\n        Set<Node> childrenFound = new HashSet<Node>();\n        boolean skipNextEvent = false;\n        int event = -1;\n        while (true) {\n          if (!skipNextEvent) {\n            event = parser.next();\n            skipNextEvent = false;\n          }\n          if (event == END_DOCUMENT) {\n            return;\n          }\n          if (event == END_ELEMENT) {\n            if (isRecord)\n              handler.handle(getDeepCopy(values), forEachPath);\n            if (recordStarted && !isRecord\n                    && !childrenFound.containsAll(childNodes)) {\n              for (Node n : childNodes) {\n                if (!childrenFound.contains(n))\n                  n.putNulls(values);\n              }\n            }\n            return;\n          }\n          if ((event == CDATA || event == CHARACTERS || event == SPACE)\n                  && hasText) {\n            valuesAddedinThisFrame.add(fieldName);\n            skipNextEvent = true;\n            String text = parser.getText();\n            event = parser.next();\n            while (event == CDATA || event == CHARACTERS || event == SPACE) {\n              text = text + parser.getText();\n              event = parser.next();\n            }\n            putText(values, text, fieldName, multiValued);\n          } else if (event == START_ELEMENT) {\n            Node n = getMatchingChild(parser);\n            if (n != null) {\n              childrenFound.add(n);\n              n.parse(parser, handler, values, stack, recordStarted);\n            } else {\n              skipTag(parser);\n            }\n          }\n        }\n      } finally {\n\n        Set<String> cleanThis = null;\n        if (isRecord || !recordStarted) {\n          cleanThis = stack.pop();\n        } else {\n          return;\n        }\n        if (cleanThis != null) {\n          for (String fld : cleanThis) {\n            values.remove(fld);\n          }\n        }\n      }\n    }\n\n","bugFix":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"bugIntro":["8c8c4626bae005f9e5e637caa5949d5164471e43"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d6a43d4d79c846f6b9308b9adc72dd8de0ab6bdb","date":1233863590,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#parse(XMLStreamReader,Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#parse(XMLStreamReader,Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","sourceNew":"    private void parse(XMLStreamReader parser, Handler handler,\n                       Map<String, Object> values, Stack<Set<String>> stack,\n                       boolean recordStarted) throws IOException, XMLStreamException {\n      Set<String> valuesAddedinThisFrame = null;\n      if (isRecord) {\n        recordStarted = true;\n        valuesAddedinThisFrame = new HashSet<String>();\n        stack.push(valuesAddedinThisFrame);\n      } else if (recordStarted) {\n        valuesAddedinThisFrame = stack.peek();\n      } else {\n        if (attributes != null || hasText)\n          valuesAddedinThisFrame = new HashSet<String>();\n        stack.push(valuesAddedinThisFrame);\n      }\n      try {\n        if (attributes != null) {\n          for (Node node : attributes) {\n            String value = parser.getAttributeValue(null, node.name);\n            if (value != null || (recordStarted && !isRecord)) {\n              putText(values, value, node.fieldName, node.multiValued);\n              valuesAddedinThisFrame.add(node.fieldName);\n            }\n          }\n        }\n        Set<Node> childrenFound = new HashSet<Node>();\n        boolean skipNextEvent = false;\n        int event = -1;\n        while (true) {\n          if (!skipNextEvent) {\n            event = parser.next();\n            skipNextEvent = false;\n          }\n          if (event == END_DOCUMENT) {\n            return;\n          }\n          if (event == END_ELEMENT) {\n            if (isRecord)\n              handler.handle(getDeepCopy(values), forEachPath);\n            if (recordStarted && !isRecord\n                    && !childrenFound.containsAll(childNodes)) {\n              for (Node n : childNodes) {\n                if (!childrenFound.contains(n))\n                  n.putNulls(values);\n              }\n            }\n            return;\n          }\n          if ((event == CDATA || event == CHARACTERS || event == SPACE)\n                  && hasText) {\n            valuesAddedinThisFrame.add(fieldName);\n            skipNextEvent = true;\n            String text = parser.getText();\n            event = parser.next();\n\n            while (true) {\n              if(event == CDATA || event == CHARACTERS || event == SPACE) {\n                text = text + parser.getText();\n              } else if(event == START_ELEMENT) {\n                if (flatten) {\n                  int starts = 1;\n                  while (true) {\n                    event = parser.next();\n                    if (event == CDATA || event == CHARACTERS || event == SPACE) {\n                      text = text + parser.getText();\n                    } else if (event == START_ELEMENT) {\n                      starts++;\n                    } else if (event == END_ELEMENT) {\n                      starts--;\n                      if (starts == 0) break;\n                    }\n                  }\n                } else {\n                  handleStartElement(parser, childrenFound, handler, values, stack, recordStarted);\n                }\n              } else {\n                break;\n              }\n              event = parser.next();\n            }\n            putText(values, text, fieldName, multiValued);\n          } else if (event == START_ELEMENT) {\n            handleStartElement(parser, childrenFound, handler, values, stack, recordStarted);\n          }\n        }\n      } finally {\n\n        Set<String> cleanThis = null;\n        if (isRecord || !recordStarted) {\n          cleanThis = stack.pop();\n        } else {\n          return;\n        }\n        if (cleanThis != null) {\n          for (String fld : cleanThis) {\n            values.remove(fld);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    private void parse(XMLStreamReader parser, Handler handler,\n                       Map<String, Object> values, Stack<Set<String>> stack,\n                       boolean recordStarted) throws IOException, XMLStreamException {\n      Set<String> valuesAddedinThisFrame = null;\n      if (isRecord) {\n        recordStarted = true;\n        valuesAddedinThisFrame = new HashSet<String>();\n        stack.push(valuesAddedinThisFrame);\n      } else if (recordStarted) {\n        valuesAddedinThisFrame = stack.peek();\n      } else {\n        if (attributes != null || hasText)\n          valuesAddedinThisFrame = new HashSet<String>();\n        stack.push(valuesAddedinThisFrame);\n      }\n      try {\n        if (attributes != null) {\n          for (Node node : attributes) {\n            String value = parser.getAttributeValue(null, node.name);\n            if (value != null || (recordStarted && !isRecord)) {\n              putText(values, value, node.fieldName, node.multiValued);\n              valuesAddedinThisFrame.add(node.fieldName);\n            }\n          }\n        }\n        Set<Node> childrenFound = new HashSet<Node>();\n        boolean skipNextEvent = false;\n        int event = -1;\n        while (true) {\n          if (!skipNextEvent) {\n            event = parser.next();\n            skipNextEvent = false;\n          }\n          if (event == END_DOCUMENT) {\n            return;\n          }\n          if (event == END_ELEMENT) {\n            if (isRecord)\n              handler.handle(getDeepCopy(values), forEachPath);\n            if (recordStarted && !isRecord\n                    && !childrenFound.containsAll(childNodes)) {\n              for (Node n : childNodes) {\n                if (!childrenFound.contains(n))\n                  n.putNulls(values);\n              }\n            }\n            return;\n          }\n          if ((event == CDATA || event == CHARACTERS || event == SPACE)\n                  && hasText) {\n            valuesAddedinThisFrame.add(fieldName);\n            skipNextEvent = true;\n            String text = parser.getText();\n            event = parser.next();\n\n            while (true) {\n              if(event == CDATA || event == CHARACTERS || event == SPACE) {\n                text = text + parser.getText();\n              } else if(event == START_ELEMENT) {\n                handleStartElement(parser, childrenFound, handler, values, stack, recordStarted);\n              } else {\n                break;\n              }\n              event = parser.next();\n            }\n            putText(values, text, fieldName, multiValued);\n          } else if (event == START_ELEMENT) {\n            handleStartElement(parser, childrenFound, handler, values, stack, recordStarted);\n          }\n        }\n      } finally {\n\n        Set<String> cleanThis = null;\n        if (isRecord || !recordStarted) {\n          cleanThis = stack.pop();\n        } else {\n          return;\n        }\n        if (cleanThis != null) {\n          for (String fld : cleanThis) {\n            values.remove(fld);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":["8c8c4626bae005f9e5e637caa5949d5164471e43"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cb5bb8a93dd58a4cde932f3e3ee4e13dc6832949","date":1252931993,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#parse(XMLStreamReader,Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#parse(XMLStreamReader,Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","sourceNew":"    /**This is the method where all the parsing happens. For each tag/subtag this gets called recursively.\n     */\n    private void parse(XMLStreamReader parser, Handler handler,\n                       Map<String, Object> values, Stack<Set<String>> stack,\n                       boolean recordStarted) throws IOException, XMLStreamException {\n      Set<String> valuesAddedinThisFrame = null;\n      if (isRecord) {\n        recordStarted = true;\n        valuesAddedinThisFrame = new HashSet<String>();\n        stack.push(valuesAddedinThisFrame);\n      } else if (recordStarted) {\n        valuesAddedinThisFrame = stack.peek();\n      } else {\n        if (attributes != null || hasText)\n          valuesAddedinThisFrame = new HashSet<String>();\n        stack.push(valuesAddedinThisFrame);\n      }\n      try {\n        if (attributes != null) {\n          for (Node node : attributes) {\n            String value = parser.getAttributeValue(null, node.name);\n            if (value != null || (recordStarted && !isRecord)) {\n              putText(values, value, node.fieldName, node.multiValued);\n              valuesAddedinThisFrame.add(node.fieldName);\n            }\n          }\n        }\n        Set<Node> childrenFound = new HashSet<Node>();\n        boolean skipNextEvent = false;\n        int event = -1;\n        while (true) {\n          if (!skipNextEvent) {\n            event = parser.next();\n            skipNextEvent = false;\n          }\n          if (event == END_DOCUMENT) {\n            return;\n          }\n          if (event == END_ELEMENT) {\n            if (isRecord)\n              handler.handle(getDeepCopy(values), forEachPath);\n            if (recordStarted && !isRecord\n                    && !childrenFound.containsAll(childNodes)) {\n              for (Node n : childNodes) {\n                if (!childrenFound.contains(n))\n                  n.putNulls(values);\n              }\n            }\n            return;\n          }\n          if ((event == CDATA || event == CHARACTERS || event == SPACE)\n                  && hasText) {\n            valuesAddedinThisFrame.add(fieldName);\n            skipNextEvent = true;\n            String text = parser.getText();\n            event = parser.next();\n\n            while (true) {\n              if(event == CDATA || event == CHARACTERS || event == SPACE) {\n                text = text + parser.getText();\n              } else if(event == START_ELEMENT) {\n                if (flatten) {\n                  int starts = 1;\n                  while (true) {\n                    event = parser.next();\n                    if (event == CDATA || event == CHARACTERS || event == SPACE) {\n                      text = text + parser.getText();\n                    } else if (event == START_ELEMENT) {\n                      starts++;\n                    } else if (event == END_ELEMENT) {\n                      starts--;\n                      if (starts == 0) break;\n                    }\n                  }\n                } else {\n                  handleStartElement(parser, childrenFound, handler, values, stack, recordStarted);\n                }\n              } else {\n                break;\n              }\n              event = parser.next();\n            }\n            putText(values, text, fieldName, multiValued);\n          } else if (event == START_ELEMENT) {\n            handleStartElement(parser, childrenFound, handler, values, stack, recordStarted);\n          }\n        }\n      } finally {\n        /*If a record has ended  (tag closed) then clearup all the fields found\n        in this record after this tag started */\n        Set<String> cleanThis = null;\n        if (isRecord || !recordStarted) {\n          cleanThis = stack.pop();\n        } else {\n          return;\n        }\n        if (cleanThis != null) {\n          for (String fld : cleanThis) {\n            values.remove(fld);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    private void parse(XMLStreamReader parser, Handler handler,\n                       Map<String, Object> values, Stack<Set<String>> stack,\n                       boolean recordStarted) throws IOException, XMLStreamException {\n      Set<String> valuesAddedinThisFrame = null;\n      if (isRecord) {\n        recordStarted = true;\n        valuesAddedinThisFrame = new HashSet<String>();\n        stack.push(valuesAddedinThisFrame);\n      } else if (recordStarted) {\n        valuesAddedinThisFrame = stack.peek();\n      } else {\n        if (attributes != null || hasText)\n          valuesAddedinThisFrame = new HashSet<String>();\n        stack.push(valuesAddedinThisFrame);\n      }\n      try {\n        if (attributes != null) {\n          for (Node node : attributes) {\n            String value = parser.getAttributeValue(null, node.name);\n            if (value != null || (recordStarted && !isRecord)) {\n              putText(values, value, node.fieldName, node.multiValued);\n              valuesAddedinThisFrame.add(node.fieldName);\n            }\n          }\n        }\n        Set<Node> childrenFound = new HashSet<Node>();\n        boolean skipNextEvent = false;\n        int event = -1;\n        while (true) {\n          if (!skipNextEvent) {\n            event = parser.next();\n            skipNextEvent = false;\n          }\n          if (event == END_DOCUMENT) {\n            return;\n          }\n          if (event == END_ELEMENT) {\n            if (isRecord)\n              handler.handle(getDeepCopy(values), forEachPath);\n            if (recordStarted && !isRecord\n                    && !childrenFound.containsAll(childNodes)) {\n              for (Node n : childNodes) {\n                if (!childrenFound.contains(n))\n                  n.putNulls(values);\n              }\n            }\n            return;\n          }\n          if ((event == CDATA || event == CHARACTERS || event == SPACE)\n                  && hasText) {\n            valuesAddedinThisFrame.add(fieldName);\n            skipNextEvent = true;\n            String text = parser.getText();\n            event = parser.next();\n\n            while (true) {\n              if(event == CDATA || event == CHARACTERS || event == SPACE) {\n                text = text + parser.getText();\n              } else if(event == START_ELEMENT) {\n                if (flatten) {\n                  int starts = 1;\n                  while (true) {\n                    event = parser.next();\n                    if (event == CDATA || event == CHARACTERS || event == SPACE) {\n                      text = text + parser.getText();\n                    } else if (event == START_ELEMENT) {\n                      starts++;\n                    } else if (event == END_ELEMENT) {\n                      starts--;\n                      if (starts == 0) break;\n                    }\n                  }\n                } else {\n                  handleStartElement(parser, childrenFound, handler, values, stack, recordStarted);\n                }\n              } else {\n                break;\n              }\n              event = parser.next();\n            }\n            putText(values, text, fieldName, multiValued);\n          } else if (event == START_ELEMENT) {\n            handleStartElement(parser, childrenFound, handler, values, stack, recordStarted);\n          }\n        }\n      } finally {\n\n        Set<String> cleanThis = null;\n        if (isRecord || !recordStarted) {\n          cleanThis = stack.pop();\n        } else {\n          return;\n        }\n        if (cleanThis != null) {\n          for (String fld : cleanThis) {\n            values.remove(fld);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dd2eca9f2bb68fcb16ff4c9e7cebdcc14dbe3a24","date":1253160840,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#parse(XMLStreamReader,Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#parse(XMLStreamReader,Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","sourceNew":"    /**This is the method where all the parsing happens. For each tag/subtag this gets called recursively.\n     */\n    private void parse(XMLStreamReader parser, Handler handler,\n                       Map<String, Object> values, Stack<Set<String>> stack,\n                       boolean recordStarted) throws IOException, XMLStreamException {\n      Set<String> valuesAddedinThisFrame = null;\n      if (isRecord) {\n        recordStarted = true;\n        valuesAddedinThisFrame = new HashSet<String>();\n        stack.push(valuesAddedinThisFrame);\n      } else if (recordStarted) {\n        valuesAddedinThisFrame = stack.peek();\n      } else {\n        if (attributes != null || hasText)\n          valuesAddedinThisFrame = new HashSet<String>();\n        stack.push(valuesAddedinThisFrame);\n      }\n      try {\n        if (attributes != null) {\n          for (Node node : attributes) {\n            String value = parser.getAttributeValue(null, node.name);\n            if (value != null || (recordStarted && !isRecord)) {\n              putText(values, value, node.fieldName, node.multiValued);\n              valuesAddedinThisFrame.add(node.fieldName);\n            }\n          }\n        }\n        Set<Node> childrenFound = new HashSet<Node>();\n        // for any normal event , parser.next() should be called in each iteration.\n        // But for CDATA | CHARACTERS | SPACE it should not do so because handling of\n        // CDATA itself would have consumed the next event. CDATA may throw multiple events\n        // so all the events are slurped till a  START_ELEMENT is encountered.\n        boolean skipNextEvent = false;\n        int event = -1;\n        while (true) {\n          if (!skipNextEvent) {\n            event = parser.next();\n            skipNextEvent = false;\n          }\n          if (event == END_DOCUMENT) {\n            return;\n          }\n          if (event == END_ELEMENT) {\n            if (isRecord)\n              handler.handle(getDeepCopy(values), forEachPath);\n            if (recordStarted && !isRecord\n                    && !childrenFound.containsAll(childNodes)) {\n              for (Node n : childNodes) {\n                if (!childrenFound.contains(n))\n                  n.putNulls(values);\n              }\n            }\n            return;\n          }\n          if ((event == CDATA || event == CHARACTERS || event == SPACE)\n                  && hasText) {\n            valuesAddedinThisFrame.add(fieldName);\n            skipNextEvent = true;\n            String text = parser.getText();\n            event = parser.next();\n\n            while (true) {\n              if(event == CDATA || event == CHARACTERS || event == SPACE) {\n                text = text + parser.getText();\n              } else if(event == START_ELEMENT) {\n                if (flatten) {\n                  int starts = 1;\n                  while (true) {\n                    event = parser.next();\n                    if (event == CDATA || event == CHARACTERS || event == SPACE) {\n                      text = text + parser.getText();\n                    } else if (event == START_ELEMENT) {\n                      starts++;\n                    } else if (event == END_ELEMENT) {\n                      starts--;\n                      if (starts == 0) break;\n                    }\n                  }\n                } else {\n                  handleStartElement(parser, childrenFound, handler, values, stack, recordStarted);\n                }\n              } else {\n                break;\n              }\n              event = parser.next();\n            }\n            putText(values, text, fieldName, multiValued);\n          } else if (event == START_ELEMENT) {\n            handleStartElement(parser, childrenFound, handler, values, stack, recordStarted);\n          }\n        }\n      } finally {\n        /*If a record has ended  (tag closed) then clearup all the fields found\n        in this record after this tag started */\n        Set<String> cleanThis = null;\n        if (isRecord || !recordStarted) {\n          cleanThis = stack.pop();\n        } else {\n          return;\n        }\n        if (cleanThis != null) {\n          for (String fld : cleanThis) {\n            values.remove(fld);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    /**This is the method where all the parsing happens. For each tag/subtag this gets called recursively.\n     */\n    private void parse(XMLStreamReader parser, Handler handler,\n                       Map<String, Object> values, Stack<Set<String>> stack,\n                       boolean recordStarted) throws IOException, XMLStreamException {\n      Set<String> valuesAddedinThisFrame = null;\n      if (isRecord) {\n        recordStarted = true;\n        valuesAddedinThisFrame = new HashSet<String>();\n        stack.push(valuesAddedinThisFrame);\n      } else if (recordStarted) {\n        valuesAddedinThisFrame = stack.peek();\n      } else {\n        if (attributes != null || hasText)\n          valuesAddedinThisFrame = new HashSet<String>();\n        stack.push(valuesAddedinThisFrame);\n      }\n      try {\n        if (attributes != null) {\n          for (Node node : attributes) {\n            String value = parser.getAttributeValue(null, node.name);\n            if (value != null || (recordStarted && !isRecord)) {\n              putText(values, value, node.fieldName, node.multiValued);\n              valuesAddedinThisFrame.add(node.fieldName);\n            }\n          }\n        }\n        Set<Node> childrenFound = new HashSet<Node>();\n        boolean skipNextEvent = false;\n        int event = -1;\n        while (true) {\n          if (!skipNextEvent) {\n            event = parser.next();\n            skipNextEvent = false;\n          }\n          if (event == END_DOCUMENT) {\n            return;\n          }\n          if (event == END_ELEMENT) {\n            if (isRecord)\n              handler.handle(getDeepCopy(values), forEachPath);\n            if (recordStarted && !isRecord\n                    && !childrenFound.containsAll(childNodes)) {\n              for (Node n : childNodes) {\n                if (!childrenFound.contains(n))\n                  n.putNulls(values);\n              }\n            }\n            return;\n          }\n          if ((event == CDATA || event == CHARACTERS || event == SPACE)\n                  && hasText) {\n            valuesAddedinThisFrame.add(fieldName);\n            skipNextEvent = true;\n            String text = parser.getText();\n            event = parser.next();\n\n            while (true) {\n              if(event == CDATA || event == CHARACTERS || event == SPACE) {\n                text = text + parser.getText();\n              } else if(event == START_ELEMENT) {\n                if (flatten) {\n                  int starts = 1;\n                  while (true) {\n                    event = parser.next();\n                    if (event == CDATA || event == CHARACTERS || event == SPACE) {\n                      text = text + parser.getText();\n                    } else if (event == START_ELEMENT) {\n                      starts++;\n                    } else if (event == END_ELEMENT) {\n                      starts--;\n                      if (starts == 0) break;\n                    }\n                  }\n                } else {\n                  handleStartElement(parser, childrenFound, handler, values, stack, recordStarted);\n                }\n              } else {\n                break;\n              }\n              event = parser.next();\n            }\n            putText(values, text, fieldName, multiValued);\n          } else if (event == START_ELEMENT) {\n            handleStartElement(parser, childrenFound, handler, values, stack, recordStarted);\n          }\n        }\n      } finally {\n        /*If a record has ended  (tag closed) then clearup all the fields found\n        in this record after this tag started */\n        Set<String> cleanThis = null;\n        if (isRecord || !recordStarted) {\n          cleanThis = stack.pop();\n        } else {\n          return;\n        }\n        if (cleanThis != null) {\n          for (String fld : cleanThis) {\n            values.remove(fld);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba0fdc3897f9d44379d91d8c02cab79ff5228c16","date":1253181858,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#parse(XMLStreamReader,Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#parse(XMLStreamReader,Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","sourceNew":"    /**This is the method where all the parsing happens. For each tag/subtag this gets called recursively.\n     */\n    private void parse(XMLStreamReader parser, Handler handler,\n                       Map<String, Object> values, Stack<Set<String>> stack,\n                       boolean recordStarted) throws IOException, XMLStreamException {\n      Set<String> valuesAddedinThisFrame = null;\n      if (isRecord) {\n        recordStarted = true;\n        valuesAddedinThisFrame = new HashSet<String>();\n        stack.push(valuesAddedinThisFrame);\n      } else if (recordStarted) {\n        valuesAddedinThisFrame = stack.peek();\n      } else {\n        if (attributes != null || hasText)\n          valuesAddedinThisFrame = new HashSet<String>();\n        stack.push(valuesAddedinThisFrame);\n      }\n      try {\n        if (attributes != null) {\n          for (Node node : attributes) {\n            String value = parser.getAttributeValue(null, node.name);\n            if (value != null || (recordStarted && !isRecord)) {\n              putText(values, value, node.fieldName, node.multiValued);\n              valuesAddedinThisFrame.add(node.fieldName);\n            }\n          }\n        }\n        Set<Node> childrenFound = new HashSet<Node>();\n        // for any normal event , parser.next() should be called in each iteration.\n        // But for CDATA | CHARACTERS | SPACE it should not do so because handling of\n        // CDATA itself would have consumed the next event. CDATA may throw multiple events\n        // so all the events are slurped till a  START_ELEMENT is encountered.\n        boolean isNextEventFetched = false;\n        int event = -1;\n        while (true) {\n          if (!isNextEventFetched) {\n            event = parser.next();\n            isNextEventFetched = false;\n          }\n          if (event == END_DOCUMENT) {\n            return;\n          }\n          if (event == END_ELEMENT) {\n            if (isRecord)\n              handler.handle(getDeepCopy(values), forEachPath);\n            if (recordStarted && !isRecord\n                    && !childrenFound.containsAll(childNodes)) {\n              for (Node n : childNodes) {\n                if (!childrenFound.contains(n))\n                  n.putNulls(values);\n              }\n            }\n            return;\n          }\n          if ((event == CDATA || event == CHARACTERS || event == SPACE)\n                  && hasText) {\n            valuesAddedinThisFrame.add(fieldName);\n            isNextEventFetched = true;\n            String text = parser.getText();\n            event = parser.next();\n\n            while (true) {\n              if(event == CDATA || event == CHARACTERS || event == SPACE) {\n                text = text + parser.getText();\n              } else if(event == START_ELEMENT) {\n                if (flatten) {\n                  int starts = 1;\n                  while (true) {\n                    event = parser.next();\n                    if (event == CDATA || event == CHARACTERS || event == SPACE) {\n                      text = text + parser.getText();\n                    } else if (event == START_ELEMENT) {\n                      starts++;\n                    } else if (event == END_ELEMENT) {\n                      starts--;\n                      if (starts == 0) break;\n                    }\n                  }\n                } else {\n                  handleStartElement(parser, childrenFound, handler, values, stack, recordStarted);\n                }\n              } else {\n                break;\n              }\n              event = parser.next();\n            }\n            putText(values, text, fieldName, multiValued);\n          } else if (event == START_ELEMENT) {\n            handleStartElement(parser, childrenFound, handler, values, stack, recordStarted);\n          }\n        }\n      } finally {\n        /*If a record has ended  (tag closed) then clearup all the fields found\n        in this record after this tag started */\n        Set<String> cleanThis = null;\n        if (isRecord || !recordStarted) {\n          cleanThis = stack.pop();\n        } else {\n          return;\n        }\n        if (cleanThis != null) {\n          for (String fld : cleanThis) {\n            values.remove(fld);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    /**This is the method where all the parsing happens. For each tag/subtag this gets called recursively.\n     */\n    private void parse(XMLStreamReader parser, Handler handler,\n                       Map<String, Object> values, Stack<Set<String>> stack,\n                       boolean recordStarted) throws IOException, XMLStreamException {\n      Set<String> valuesAddedinThisFrame = null;\n      if (isRecord) {\n        recordStarted = true;\n        valuesAddedinThisFrame = new HashSet<String>();\n        stack.push(valuesAddedinThisFrame);\n      } else if (recordStarted) {\n        valuesAddedinThisFrame = stack.peek();\n      } else {\n        if (attributes != null || hasText)\n          valuesAddedinThisFrame = new HashSet<String>();\n        stack.push(valuesAddedinThisFrame);\n      }\n      try {\n        if (attributes != null) {\n          for (Node node : attributes) {\n            String value = parser.getAttributeValue(null, node.name);\n            if (value != null || (recordStarted && !isRecord)) {\n              putText(values, value, node.fieldName, node.multiValued);\n              valuesAddedinThisFrame.add(node.fieldName);\n            }\n          }\n        }\n        Set<Node> childrenFound = new HashSet<Node>();\n        // for any normal event , parser.next() should be called in each iteration.\n        // But for CDATA | CHARACTERS | SPACE it should not do so because handling of\n        // CDATA itself would have consumed the next event. CDATA may throw multiple events\n        // so all the events are slurped till a  START_ELEMENT is encountered.\n        boolean skipNextEvent = false;\n        int event = -1;\n        while (true) {\n          if (!skipNextEvent) {\n            event = parser.next();\n            skipNextEvent = false;\n          }\n          if (event == END_DOCUMENT) {\n            return;\n          }\n          if (event == END_ELEMENT) {\n            if (isRecord)\n              handler.handle(getDeepCopy(values), forEachPath);\n            if (recordStarted && !isRecord\n                    && !childrenFound.containsAll(childNodes)) {\n              for (Node n : childNodes) {\n                if (!childrenFound.contains(n))\n                  n.putNulls(values);\n              }\n            }\n            return;\n          }\n          if ((event == CDATA || event == CHARACTERS || event == SPACE)\n                  && hasText) {\n            valuesAddedinThisFrame.add(fieldName);\n            skipNextEvent = true;\n            String text = parser.getText();\n            event = parser.next();\n\n            while (true) {\n              if(event == CDATA || event == CHARACTERS || event == SPACE) {\n                text = text + parser.getText();\n              } else if(event == START_ELEMENT) {\n                if (flatten) {\n                  int starts = 1;\n                  while (true) {\n                    event = parser.next();\n                    if (event == CDATA || event == CHARACTERS || event == SPACE) {\n                      text = text + parser.getText();\n                    } else if (event == START_ELEMENT) {\n                      starts++;\n                    } else if (event == END_ELEMENT) {\n                      starts--;\n                      if (starts == 0) break;\n                    }\n                  }\n                } else {\n                  handleStartElement(parser, childrenFound, handler, values, stack, recordStarted);\n                }\n              } else {\n                break;\n              }\n              event = parser.next();\n            }\n            putText(values, text, fieldName, multiValued);\n          } else if (event == START_ELEMENT) {\n            handleStartElement(parser, childrenFound, handler, values, stack, recordStarted);\n          }\n        }\n      } finally {\n        /*If a record has ended  (tag closed) then clearup all the fields found\n        in this record after this tag started */\n        Set<String> cleanThis = null;\n        if (isRecord || !recordStarted) {\n          cleanThis = stack.pop();\n        } else {\n          return;\n        }\n        if (cleanThis != null) {\n          for (String fld : cleanThis) {\n            values.remove(fld);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b14ccda0bdb398cf86bc3804e1c136a615dbd89b","date":1253269935,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#parse(XMLStreamReader,Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#parse(XMLStreamReader,Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","sourceNew":"    /**\n     * This is the method where all the XML parsing happens. For each \n     * tag/subtag read from the source, this method is called recursively.\n     *\n     */\n    private void parse(XMLStreamReader parser, Handler handler,\n                       Map<String, Object> values, Stack<Set<String>> stack,\n                       boolean recordStarted) throws IOException, XMLStreamException {\n      Set<String> valuesAddedinThisFrame = null;\n      if (isRecord) {\n        // This Node is a match for an XPATH from a forEach attribute, \n        // prepare to emit a new record when its END_ELEMENT is matched \n        recordStarted = true;\n        valuesAddedinThisFrame = new HashSet<String>();\n        stack.push(valuesAddedinThisFrame);\n      } else if (recordStarted) {\n        // This node is a child of some parent which matched against forEach \n        // attribute. Continue to add values to an existing record.\n        valuesAddedinThisFrame = stack.peek();\n      } else {\n        //if this tag has an attribute or text which is a brank/leaf just push an item up the stack\n        if (attributes != null || hasText)\n          valuesAddedinThisFrame = new HashSet<String>();\n        stack.push(valuesAddedinThisFrame);\n      }\n\n      try {\n        if (attributes != null) {\n          for (Node node : attributes) {\n            String value = parser.getAttributeValue(null, node.name);\n            if (value != null || (recordStarted && !isRecord)) {\n              putText(values, value, node.fieldName, node.multiValued);\n              valuesAddedinThisFrame.add(node.fieldName);\n            }\n          }\n        }\n\n        Set<Node> childrenFound = new HashSet<Node>();\n        // Internally we have to gobble CDATA | CHARACTERS | SPACE events as we\n        // store text, the gobbling continues till we have fetched some other \n        // event. We use \"isNextEventFetched\" to indcate that the gobbling has\n        // already fetched the next event.\n        boolean isNextEventFetched = false;\n        int event = -1;\n\n        while (true) {\n          if (!isNextEventFetched) {\n            event = parser.next();\n            isNextEventFetched = false;\n          }\n          if (event == END_DOCUMENT) {\n            return;\n          }\n          if (event == END_ELEMENT) {\n            if (isRecord)\n              handler.handle(getDeepCopy(values), forEachPath);\n            if (recordStarted && !isRecord\n                    && !childrenFound.containsAll(childNodes)) {\n              for (Node n : childNodes) {\n                if (!childrenFound.contains(n))\n                  n.putNulls(values);\n              }\n            }\n            return;\n          }\n          if ((event == CDATA || event == CHARACTERS || event == SPACE)\n                  && hasText) {\n            valuesAddedinThisFrame.add(fieldName);\n            // becuase we are fetching events here we need to ensure the outer\n            // loop does not end up doing an extra parser.next()\n            isNextEventFetched = true;\n            String text = parser.getText();\n            event = parser.next();\n\n            while (true) {\n              if(event == CDATA || event == CHARACTERS || event == SPACE) {\n                text = text + parser.getText();\n              } else if(event == START_ELEMENT) {\n                if (flatten) {\n                  int starts = 1;\n                  while (true) {\n                    event = parser.next();\n                    if (event == CDATA || event == CHARACTERS || event == SPACE) {\n                      text = text + parser.getText();\n                    } else if (event == START_ELEMENT) {\n                      starts++;\n                    } else if (event == END_ELEMENT) {\n                      starts--;\n                      if (starts == 0) break;\n                    }\n                  }\n                } else {\n                  // We are not flatten-ing, so look to see if any of the child\n                  // elements are wanted, and recurse if any are found.\n                  handleStartElement(parser, childrenFound, handler, values, stack, recordStarted);\n                }\n              } else {\n                break;\n              }\n              event = parser.next();\n            }\n            // save the text we have read against the fieldName in the Map values\n            putText(values, text, fieldName, multiValued);\n          } else if (event == START_ELEMENT) {\n            handleStartElement(parser, childrenFound, handler, values, stack, recordStarted);\n          }\n        }\n      } finally {\n        /*If a record has ended  (tag closed) then clearup all the fields found\n        in this record after this tag started */\n        Set<String> cleanThis = null;\n        if (isRecord || !recordStarted) {\n          cleanThis = stack.pop();\n        } else {\n          return;\n        }\n        if (cleanThis != null) {\n          for (String fld : cleanThis) {\n            values.remove(fld);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    /**This is the method where all the parsing happens. For each tag/subtag this gets called recursively.\n     */\n    private void parse(XMLStreamReader parser, Handler handler,\n                       Map<String, Object> values, Stack<Set<String>> stack,\n                       boolean recordStarted) throws IOException, XMLStreamException {\n      Set<String> valuesAddedinThisFrame = null;\n      if (isRecord) {\n        recordStarted = true;\n        valuesAddedinThisFrame = new HashSet<String>();\n        stack.push(valuesAddedinThisFrame);\n      } else if (recordStarted) {\n        valuesAddedinThisFrame = stack.peek();\n      } else {\n        if (attributes != null || hasText)\n          valuesAddedinThisFrame = new HashSet<String>();\n        stack.push(valuesAddedinThisFrame);\n      }\n      try {\n        if (attributes != null) {\n          for (Node node : attributes) {\n            String value = parser.getAttributeValue(null, node.name);\n            if (value != null || (recordStarted && !isRecord)) {\n              putText(values, value, node.fieldName, node.multiValued);\n              valuesAddedinThisFrame.add(node.fieldName);\n            }\n          }\n        }\n        Set<Node> childrenFound = new HashSet<Node>();\n        // for any normal event , parser.next() should be called in each iteration.\n        // But for CDATA | CHARACTERS | SPACE it should not do so because handling of\n        // CDATA itself would have consumed the next event. CDATA may throw multiple events\n        // so all the events are slurped till a  START_ELEMENT is encountered.\n        boolean isNextEventFetched = false;\n        int event = -1;\n        while (true) {\n          if (!isNextEventFetched) {\n            event = parser.next();\n            isNextEventFetched = false;\n          }\n          if (event == END_DOCUMENT) {\n            return;\n          }\n          if (event == END_ELEMENT) {\n            if (isRecord)\n              handler.handle(getDeepCopy(values), forEachPath);\n            if (recordStarted && !isRecord\n                    && !childrenFound.containsAll(childNodes)) {\n              for (Node n : childNodes) {\n                if (!childrenFound.contains(n))\n                  n.putNulls(values);\n              }\n            }\n            return;\n          }\n          if ((event == CDATA || event == CHARACTERS || event == SPACE)\n                  && hasText) {\n            valuesAddedinThisFrame.add(fieldName);\n            isNextEventFetched = true;\n            String text = parser.getText();\n            event = parser.next();\n\n            while (true) {\n              if(event == CDATA || event == CHARACTERS || event == SPACE) {\n                text = text + parser.getText();\n              } else if(event == START_ELEMENT) {\n                if (flatten) {\n                  int starts = 1;\n                  while (true) {\n                    event = parser.next();\n                    if (event == CDATA || event == CHARACTERS || event == SPACE) {\n                      text = text + parser.getText();\n                    } else if (event == START_ELEMENT) {\n                      starts++;\n                    } else if (event == END_ELEMENT) {\n                      starts--;\n                      if (starts == 0) break;\n                    }\n                  }\n                } else {\n                  handleStartElement(parser, childrenFound, handler, values, stack, recordStarted);\n                }\n              } else {\n                break;\n              }\n              event = parser.next();\n            }\n            putText(values, text, fieldName, multiValued);\n          } else if (event == START_ELEMENT) {\n            handleStartElement(parser, childrenFound, handler, values, stack, recordStarted);\n          }\n        }\n      } finally {\n        /*If a record has ended  (tag closed) then clearup all the fields found\n        in this record after this tag started */\n        Set<String> cleanThis = null;\n        if (isRecord || !recordStarted) {\n          cleanThis = stack.pop();\n        } else {\n          return;\n        }\n        if (cleanThis != null) {\n          for (String fld : cleanThis) {\n            values.remove(fld);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8c8c4626bae005f9e5e637caa5949d5164471e43","date":1254225922,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#parse(XMLStreamReader,Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#parse(XMLStreamReader,Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","sourceNew":"    /**\n     * This is the method where all the XML parsing happens. For each \n     * tag/subtag read from the source, this method is called recursively.\n     *\n     */\n    private void parse(XMLStreamReader parser, Handler handler,\n                       Map<String, Object> values, Stack<Set<String>> stack,\n                       boolean recordStarted) throws IOException, XMLStreamException {\n      Set<String> valuesAddedinThisFrame = null;\n      if (isRecord) {\n        // This Node is a match for an XPATH from a forEach attribute, \n        // prepare to emit a new record when its END_ELEMENT is matched \n        recordStarted = true;\n        valuesAddedinThisFrame = new HashSet<String>();\n        stack.push(valuesAddedinThisFrame);\n      } else if (recordStarted) {\n        // This node is a child of some parent which matched against forEach \n        // attribute. Continue to add values to an existing record.\n        valuesAddedinThisFrame = stack.peek();\n      } else {\n        //if this tag has an attribute or text which is a brank/leaf just push an item up the stack\n        if (attributes != null || hasText)\n          valuesAddedinThisFrame = new HashSet<String>();\n        stack.push(valuesAddedinThisFrame);\n      }\n\n      try {\n        if (attributes != null) {\n          for (Node node : attributes) {\n            String value = parser.getAttributeValue(null, node.name);\n            if (value != null || (recordStarted && !isRecord)) {\n              putText(values, value, node.fieldName, node.multiValued);\n              valuesAddedinThisFrame.add(node.fieldName);\n            }\n          }\n        }\n\n        Set<Node> childrenFound = new HashSet<Node>();\n        // Internally we have to gobble CDATA | CHARACTERS | SPACE events as we\n        // store text, the gobbling continues till we have fetched some other \n        // event. We use \"isNextEventFetched\" to indcate that the gobbling has\n        // already fetched the next event.\n        boolean isNextEventFetched = false;\n        int event = -1;\n\n        while (true) {\n          if (!isNextEventFetched) {\n            event = parser.next();\n            isNextEventFetched = false;\n          }\n          if (event == END_DOCUMENT) {\n            return;\n          }\n          if (event == END_ELEMENT) {\n            if (isRecord)\n              handler.handle(getDeepCopy(values), forEachPath);\n            if (recordStarted && !isRecord\n                    && !childrenFound.containsAll(childNodes)) {\n              for (Node n : childNodes) {\n                if (!childrenFound.contains(n))\n                  n.putNulls(values);\n              }\n            }\n            return;\n          }\n          if ((event == CDATA || event == CHARACTERS || event == SPACE)\n                  && hasText) {\n            valuesAddedinThisFrame.add(fieldName);\n            // becuase we are fetching events here we need to ensure the outer\n            // loop does not end up doing an extra parser.next()\n            isNextEventFetched = true;\n            StringBuilder text = new StringBuilder(parser.getText());\n            event = parser.next();\n\n            while (true) {\n              if(event == CDATA || event == CHARACTERS || event == SPACE) {\n                text.append(parser.getText());\n              } else if(event == START_ELEMENT) {\n                if (flatten) {\n                  int starts = 1;\n                  while (true) {\n                    event = parser.next();\n                    if (event == CDATA || event == CHARACTERS || event == SPACE) {\n                      text.append(parser.getText());\n                    } else if (event == START_ELEMENT) {\n                      starts++;\n                    } else if (event == END_ELEMENT) {\n                      starts--;\n                      if (starts == 0) break;\n                    }\n                  }\n                } else {\n                  // We are not flatten-ing, so look to see if any of the child\n                  // elements are wanted, and recurse if any are found.\n                  handleStartElement(parser, childrenFound, handler, values, stack, recordStarted);\n                }\n              } else {\n                break;\n              }\n              event = parser.next();\n            }\n            // save the text we have read against the fieldName in the Map values\n            putText(values, text.toString(), fieldName, multiValued);\n          } else if (event == START_ELEMENT) {\n            handleStartElement(parser, childrenFound, handler, values, stack, recordStarted);\n          }\n        }\n      } finally {\n        /*If a record has ended  (tag closed) then clearup all the fields found\n        in this record after this tag started */\n        Set<String> cleanThis = null;\n        if (isRecord || !recordStarted) {\n          cleanThis = stack.pop();\n        } else {\n          return;\n        }\n        if (cleanThis != null) {\n          for (String fld : cleanThis) {\n            values.remove(fld);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * This is the method where all the XML parsing happens. For each \n     * tag/subtag read from the source, this method is called recursively.\n     *\n     */\n    private void parse(XMLStreamReader parser, Handler handler,\n                       Map<String, Object> values, Stack<Set<String>> stack,\n                       boolean recordStarted) throws IOException, XMLStreamException {\n      Set<String> valuesAddedinThisFrame = null;\n      if (isRecord) {\n        // This Node is a match for an XPATH from a forEach attribute, \n        // prepare to emit a new record when its END_ELEMENT is matched \n        recordStarted = true;\n        valuesAddedinThisFrame = new HashSet<String>();\n        stack.push(valuesAddedinThisFrame);\n      } else if (recordStarted) {\n        // This node is a child of some parent which matched against forEach \n        // attribute. Continue to add values to an existing record.\n        valuesAddedinThisFrame = stack.peek();\n      } else {\n        //if this tag has an attribute or text which is a brank/leaf just push an item up the stack\n        if (attributes != null || hasText)\n          valuesAddedinThisFrame = new HashSet<String>();\n        stack.push(valuesAddedinThisFrame);\n      }\n\n      try {\n        if (attributes != null) {\n          for (Node node : attributes) {\n            String value = parser.getAttributeValue(null, node.name);\n            if (value != null || (recordStarted && !isRecord)) {\n              putText(values, value, node.fieldName, node.multiValued);\n              valuesAddedinThisFrame.add(node.fieldName);\n            }\n          }\n        }\n\n        Set<Node> childrenFound = new HashSet<Node>();\n        // Internally we have to gobble CDATA | CHARACTERS | SPACE events as we\n        // store text, the gobbling continues till we have fetched some other \n        // event. We use \"isNextEventFetched\" to indcate that the gobbling has\n        // already fetched the next event.\n        boolean isNextEventFetched = false;\n        int event = -1;\n\n        while (true) {\n          if (!isNextEventFetched) {\n            event = parser.next();\n            isNextEventFetched = false;\n          }\n          if (event == END_DOCUMENT) {\n            return;\n          }\n          if (event == END_ELEMENT) {\n            if (isRecord)\n              handler.handle(getDeepCopy(values), forEachPath);\n            if (recordStarted && !isRecord\n                    && !childrenFound.containsAll(childNodes)) {\n              for (Node n : childNodes) {\n                if (!childrenFound.contains(n))\n                  n.putNulls(values);\n              }\n            }\n            return;\n          }\n          if ((event == CDATA || event == CHARACTERS || event == SPACE)\n                  && hasText) {\n            valuesAddedinThisFrame.add(fieldName);\n            // becuase we are fetching events here we need to ensure the outer\n            // loop does not end up doing an extra parser.next()\n            isNextEventFetched = true;\n            String text = parser.getText();\n            event = parser.next();\n\n            while (true) {\n              if(event == CDATA || event == CHARACTERS || event == SPACE) {\n                text = text + parser.getText();\n              } else if(event == START_ELEMENT) {\n                if (flatten) {\n                  int starts = 1;\n                  while (true) {\n                    event = parser.next();\n                    if (event == CDATA || event == CHARACTERS || event == SPACE) {\n                      text = text + parser.getText();\n                    } else if (event == START_ELEMENT) {\n                      starts++;\n                    } else if (event == END_ELEMENT) {\n                      starts--;\n                      if (starts == 0) break;\n                    }\n                  }\n                } else {\n                  // We are not flatten-ing, so look to see if any of the child\n                  // elements are wanted, and recurse if any are found.\n                  handleStartElement(parser, childrenFound, handler, values, stack, recordStarted);\n                }\n              } else {\n                break;\n              }\n              event = parser.next();\n            }\n            // save the text we have read against the fieldName in the Map values\n            putText(values, text, fieldName, multiValued);\n          } else if (event == START_ELEMENT) {\n            handleStartElement(parser, childrenFound, handler, values, stack, recordStarted);\n          }\n        }\n      } finally {\n        /*If a record has ended  (tag closed) then clearup all the fields found\n        in this record after this tag started */\n        Set<String> cleanThis = null;\n        if (isRecord || !recordStarted) {\n          cleanThis = stack.pop();\n        } else {\n          return;\n        }\n        if (cleanThis != null) {\n          for (String fld : cleanThis) {\n            values.remove(fld);\n          }\n        }\n      }\n    }\n\n","bugFix":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","217b516e59f574c979a72ba66ee8e9423e06cafd","d6a43d4d79c846f6b9308b9adc72dd8de0ab6bdb"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f2a93a28913071a0b713be1d4b8a1181388d550","date":1254814948,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#parse(XMLStreamReader,Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#parse(XMLStreamReader,Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","sourceNew":"    /**\n     * This is the method where all the XML parsing happens. For each \n     * tag/subtag read from the source, this method is called recursively.\n     *\n     */\n    private void parse(XMLStreamReader parser, \n                       Handler handler,\n                       Map<String, Object> values, \n                       Stack<Set<String>> stack, // lists of values to purge\n                       boolean recordStarted\n                       ) throws IOException, XMLStreamException {\n      Set<String> valuesAddedinThisFrame = null;\n      if (isRecord) {\n        // This Node is a match for an XPATH from a forEach attribute, \n        // prepare for the clean up that will occurr when the record\n        // is emitted after its END_ELEMENT is matched \n        recordStarted = true;\n        valuesAddedinThisFrame = new HashSet<String>();\n        stack.push(valuesAddedinThisFrame);\n      } else if (recordStarted) {\n        // This node is a child of some parent which matched against forEach \n        // attribute. Continue to add values to an existing record.\n        valuesAddedinThisFrame = stack.peek();\n      }\n\n      try {\n        /* The input stream has deposited us at this Node in our tree of \n         * intresting nodes. Depending on how this node is of interest,\n         * process further tokens from the input stream and decide what\n         * we do next\n         */\n        if (attributes != null) {\n          // we interested in storing attributes from the input stream\n          for (Node node : attributes) {\n            String value = parser.getAttributeValue(null, node.name);\n            if (value != null || (recordStarted && !isRecord)) {\n              putText(values, value, node.fieldName, node.multiValued);\n              valuesAddedinThisFrame.add(node.fieldName);\n            }\n          }\n        }\n\n        Set<Node> childrenFound = new HashSet<Node>();\n        int event = -1;\n        int flattenedStarts=0; // our tag depth when flattening elements\n        StringBuilder text = new StringBuilder();\n\n        while (true) {  \n          event = parser.next();\n   \n          if (event == END_ELEMENT) {\n            if (flattenedStarts > 0) flattenedStarts--;\n            else {\n              if (text.length() > 0 && valuesAddedinThisFrame != null) {\n                valuesAddedinThisFrame.add(fieldName);\n                putText(values, text.toString(), fieldName, multiValued);\n              }\n              if (isRecord) handler.handle(getDeepCopy(values), forEachPath);\n              if (childNodes != null && recordStarted && !isRecord && !childrenFound.containsAll(childNodes)) {\n                // nonReccord nodes where we have not collected text for ALL\n                // the child nodes.\n                for (Node n : childNodes) {\n                  // For the multivalue child nodes where we could have, but\n                  // didnt, collect text. Push a null string into values.\n                  if (!childrenFound.contains(n)) n.putNulls(values);\n                }\n              }\n              return;\n            }\n          }\n          else if (hasText && (event==CDATA || event==CHARACTERS || event==SPACE)) {\n            text.append(parser.getText());\n          } \n          else if (event == START_ELEMENT) {\n            if ( flatten ) \n               flattenedStarts++;\n            else \n               handleStartElement(parser, childrenFound, handler, values, stack, recordStarted);\n          }\n          // END_DOCUMENT is least likely to appear and should be \n          // last in if-then-else skip chain\n          else if (event == END_DOCUMENT) return;\n          }\n        }finally {\n        if ((isRecord || !recordStarted) && !stack.empty()) {\n          Set<String> cleanThis = stack.pop();\n          if (cleanThis != null) {\n            for (String fld : cleanThis) values.remove(fld);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * This is the method where all the XML parsing happens. For each \n     * tag/subtag read from the source, this method is called recursively.\n     *\n     */\n    private void parse(XMLStreamReader parser, Handler handler,\n                       Map<String, Object> values, Stack<Set<String>> stack,\n                       boolean recordStarted) throws IOException, XMLStreamException {\n      Set<String> valuesAddedinThisFrame = null;\n      if (isRecord) {\n        // This Node is a match for an XPATH from a forEach attribute, \n        // prepare to emit a new record when its END_ELEMENT is matched \n        recordStarted = true;\n        valuesAddedinThisFrame = new HashSet<String>();\n        stack.push(valuesAddedinThisFrame);\n      } else if (recordStarted) {\n        // This node is a child of some parent which matched against forEach \n        // attribute. Continue to add values to an existing record.\n        valuesAddedinThisFrame = stack.peek();\n      } else {\n        //if this tag has an attribute or text which is a brank/leaf just push an item up the stack\n        if (attributes != null || hasText)\n          valuesAddedinThisFrame = new HashSet<String>();\n        stack.push(valuesAddedinThisFrame);\n      }\n\n      try {\n        if (attributes != null) {\n          for (Node node : attributes) {\n            String value = parser.getAttributeValue(null, node.name);\n            if (value != null || (recordStarted && !isRecord)) {\n              putText(values, value, node.fieldName, node.multiValued);\n              valuesAddedinThisFrame.add(node.fieldName);\n            }\n          }\n        }\n\n        Set<Node> childrenFound = new HashSet<Node>();\n        // Internally we have to gobble CDATA | CHARACTERS | SPACE events as we\n        // store text, the gobbling continues till we have fetched some other \n        // event. We use \"isNextEventFetched\" to indcate that the gobbling has\n        // already fetched the next event.\n        boolean isNextEventFetched = false;\n        int event = -1;\n\n        while (true) {\n          if (!isNextEventFetched) {\n            event = parser.next();\n            isNextEventFetched = false;\n          }\n          if (event == END_DOCUMENT) {\n            return;\n          }\n          if (event == END_ELEMENT) {\n            if (isRecord)\n              handler.handle(getDeepCopy(values), forEachPath);\n            if (recordStarted && !isRecord\n                    && !childrenFound.containsAll(childNodes)) {\n              for (Node n : childNodes) {\n                if (!childrenFound.contains(n))\n                  n.putNulls(values);\n              }\n            }\n            return;\n          }\n          if ((event == CDATA || event == CHARACTERS || event == SPACE)\n                  && hasText) {\n            valuesAddedinThisFrame.add(fieldName);\n            // becuase we are fetching events here we need to ensure the outer\n            // loop does not end up doing an extra parser.next()\n            isNextEventFetched = true;\n            StringBuilder text = new StringBuilder(parser.getText());\n            event = parser.next();\n\n            while (true) {\n              if(event == CDATA || event == CHARACTERS || event == SPACE) {\n                text.append(parser.getText());\n              } else if(event == START_ELEMENT) {\n                if (flatten) {\n                  int starts = 1;\n                  while (true) {\n                    event = parser.next();\n                    if (event == CDATA || event == CHARACTERS || event == SPACE) {\n                      text.append(parser.getText());\n                    } else if (event == START_ELEMENT) {\n                      starts++;\n                    } else if (event == END_ELEMENT) {\n                      starts--;\n                      if (starts == 0) break;\n                    }\n                  }\n                } else {\n                  // We are not flatten-ing, so look to see if any of the child\n                  // elements are wanted, and recurse if any are found.\n                  handleStartElement(parser, childrenFound, handler, values, stack, recordStarted);\n                }\n              } else {\n                break;\n              }\n              event = parser.next();\n            }\n            // save the text we have read against the fieldName in the Map values\n            putText(values, text.toString(), fieldName, multiValued);\n          } else if (event == START_ELEMENT) {\n            handleStartElement(parser, childrenFound, handler, values, stack, recordStarted);\n          }\n        }\n      } finally {\n        /*If a record has ended  (tag closed) then clearup all the fields found\n        in this record after this tag started */\n        Set<String> cleanThis = null;\n        if (isRecord || !recordStarted) {\n          cleanThis = stack.pop();\n        } else {\n          return;\n        }\n        if (cleanThis != null) {\n          for (String fld : cleanThis) {\n            values.remove(fld);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":["ef68eed598a8494abdcad4ef076d62b12c4d89f4","3c0dbd7f9c2fb9dac33f6bd9e4d7199e309280f9","3c0dbd7f9c2fb9dac33f6bd9e4d7199e309280f9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#parse(XMLStreamReader,Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#parse(XMLStreamReader,Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","sourceNew":"    /**\n     * This is the method where all the XML parsing happens. For each \n     * tag/subtag read from the source, this method is called recursively.\n     *\n     */\n    private void parse(XMLStreamReader parser, \n                       Handler handler,\n                       Map<String, Object> values, \n                       Stack<Set<String>> stack, // lists of values to purge\n                       boolean recordStarted\n                       ) throws IOException, XMLStreamException {\n      Set<String> valuesAddedinThisFrame = null;\n      if (isRecord) {\n        // This Node is a match for an XPATH from a forEach attribute, \n        // prepare for the clean up that will occurr when the record\n        // is emitted after its END_ELEMENT is matched \n        recordStarted = true;\n        valuesAddedinThisFrame = new HashSet<String>();\n        stack.push(valuesAddedinThisFrame);\n      } else if (recordStarted) {\n        // This node is a child of some parent which matched against forEach \n        // attribute. Continue to add values to an existing record.\n        valuesAddedinThisFrame = stack.peek();\n      }\n\n      try {\n        /* The input stream has deposited us at this Node in our tree of \n         * intresting nodes. Depending on how this node is of interest,\n         * process further tokens from the input stream and decide what\n         * we do next\n         */\n        if (attributes != null) {\n          // we interested in storing attributes from the input stream\n          for (Node node : attributes) {\n            String value = parser.getAttributeValue(null, node.name);\n            if (value != null || (recordStarted && !isRecord)) {\n              putText(values, value, node.fieldName, node.multiValued);\n              valuesAddedinThisFrame.add(node.fieldName);\n            }\n          }\n        }\n\n        Set<Node> childrenFound = new HashSet<Node>();\n        int event = -1;\n        int flattenedStarts=0; // our tag depth when flattening elements\n        StringBuilder text = new StringBuilder();\n\n        while (true) {  \n          event = parser.next();\n   \n          if (event == END_ELEMENT) {\n            if (flattenedStarts > 0) flattenedStarts--;\n            else {\n              if (text.length() > 0 && valuesAddedinThisFrame != null) {\n                valuesAddedinThisFrame.add(fieldName);\n                putText(values, text.toString(), fieldName, multiValued);\n              }\n              if (isRecord) handler.handle(getDeepCopy(values), forEachPath);\n              if (childNodes != null && recordStarted && !isRecord && !childrenFound.containsAll(childNodes)) {\n                // nonReccord nodes where we have not collected text for ALL\n                // the child nodes.\n                for (Node n : childNodes) {\n                  // For the multivalue child nodes where we could have, but\n                  // didnt, collect text. Push a null string into values.\n                  if (!childrenFound.contains(n)) n.putNulls(values);\n                }\n              }\n              return;\n            }\n          }\n          else if (hasText && (event==CDATA || event==CHARACTERS || event==SPACE)) {\n            text.append(parser.getText());\n          } \n          else if (event == START_ELEMENT) {\n            if ( flatten ) \n               flattenedStarts++;\n            else \n               handleStartElement(parser, childrenFound, handler, values, stack, recordStarted);\n          }\n          // END_DOCUMENT is least likely to appear and should be \n          // last in if-then-else skip chain\n          else if (event == END_DOCUMENT) return;\n          }\n        }finally {\n        if ((isRecord || !recordStarted) && !stack.empty()) {\n          Set<String> cleanThis = stack.pop();\n          if (cleanThis != null) {\n            for (String fld : cleanThis) values.remove(fld);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * This is the method where all the XML parsing happens. For each \n     * tag/subtag read from the source, this method is called recursively.\n     *\n     */\n    private void parse(XMLStreamReader parser, \n                       Handler handler,\n                       Map<String, Object> values, \n                       Stack<Set<String>> stack, // lists of values to purge\n                       boolean recordStarted\n                       ) throws IOException, XMLStreamException {\n      Set<String> valuesAddedinThisFrame = null;\n      if (isRecord) {\n        // This Node is a match for an XPATH from a forEach attribute, \n        // prepare for the clean up that will occurr when the record\n        // is emitted after its END_ELEMENT is matched \n        recordStarted = true;\n        valuesAddedinThisFrame = new HashSet<String>();\n        stack.push(valuesAddedinThisFrame);\n      } else if (recordStarted) {\n        // This node is a child of some parent which matched against forEach \n        // attribute. Continue to add values to an existing record.\n        valuesAddedinThisFrame = stack.peek();\n      }\n\n      try {\n        /* The input stream has deposited us at this Node in our tree of \n         * intresting nodes. Depending on how this node is of interest,\n         * process further tokens from the input stream and decide what\n         * we do next\n         */\n        if (attributes != null) {\n          // we interested in storing attributes from the input stream\n          for (Node node : attributes) {\n            String value = parser.getAttributeValue(null, node.name);\n            if (value != null || (recordStarted && !isRecord)) {\n              putText(values, value, node.fieldName, node.multiValued);\n              valuesAddedinThisFrame.add(node.fieldName);\n            }\n          }\n        }\n\n        Set<Node> childrenFound = new HashSet<Node>();\n        int event = -1;\n        int flattenedStarts=0; // our tag depth when flattening elements\n        StringBuilder text = new StringBuilder();\n\n        while (true) {  \n          event = parser.next();\n   \n          if (event == END_ELEMENT) {\n            if (flattenedStarts > 0) flattenedStarts--;\n            else {\n              if (text.length() > 0 && valuesAddedinThisFrame != null) {\n                valuesAddedinThisFrame.add(fieldName);\n                putText(values, text.toString(), fieldName, multiValued);\n              }\n              if (isRecord) handler.handle(getDeepCopy(values), forEachPath);\n              if (childNodes != null && recordStarted && !isRecord && !childrenFound.containsAll(childNodes)) {\n                // nonReccord nodes where we have not collected text for ALL\n                // the child nodes.\n                for (Node n : childNodes) {\n                  // For the multivalue child nodes where we could have, but\n                  // didnt, collect text. Push a null string into values.\n                  if (!childrenFound.contains(n)) n.putNulls(values);\n                }\n              }\n              return;\n            }\n          }\n          else if (hasText && (event==CDATA || event==CHARACTERS || event==SPACE)) {\n            text.append(parser.getText());\n          } \n          else if (event == START_ELEMENT) {\n            if ( flatten ) \n               flattenedStarts++;\n            else \n               handleStartElement(parser, childrenFound, handler, values, stack, recordStarted);\n          }\n          // END_DOCUMENT is least likely to appear and should be \n          // last in if-then-else skip chain\n          else if (event == END_DOCUMENT) return;\n          }\n        }finally {\n        if ((isRecord || !recordStarted) && !stack.empty()) {\n          Set<String> cleanThis = stack.pop();\n          if (cleanThis != null) {\n            for (String fld : cleanThis) values.remove(fld);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"217b516e59f574c979a72ba66ee8e9423e06cafd":["fb64c40810344469d50ab5bb932fb375b6dcd474"],"8c8c4626bae005f9e5e637caa5949d5164471e43":["b14ccda0bdb398cf86bc3804e1c136a615dbd89b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"b14ccda0bdb398cf86bc3804e1c136a615dbd89b":["ba0fdc3897f9d44379d91d8c02cab79ff5228c16"],"d6a43d4d79c846f6b9308b9adc72dd8de0ab6bdb":["217b516e59f574c979a72ba66ee8e9423e06cafd"],"cb5bb8a93dd58a4cde932f3e3ee4e13dc6832949":["d6a43d4d79c846f6b9308b9adc72dd8de0ab6bdb"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"fb64c40810344469d50ab5bb932fb375b6dcd474":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd2eca9f2bb68fcb16ff4c9e7cebdcc14dbe3a24":["cb5bb8a93dd58a4cde932f3e3ee4e13dc6832949"],"ad94625fb8d088209f46650c8097196fec67f00c":["7f2a93a28913071a0b713be1d4b8a1181388d550"],"ba0fdc3897f9d44379d91d8c02cab79ff5228c16":["dd2eca9f2bb68fcb16ff4c9e7cebdcc14dbe3a24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7f2a93a28913071a0b713be1d4b8a1181388d550":["8c8c4626bae005f9e5e637caa5949d5164471e43"]},"commit2Childs":{"217b516e59f574c979a72ba66ee8e9423e06cafd":["d6a43d4d79c846f6b9308b9adc72dd8de0ab6bdb"],"8c8c4626bae005f9e5e637caa5949d5164471e43":["7f2a93a28913071a0b713be1d4b8a1181388d550"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"b14ccda0bdb398cf86bc3804e1c136a615dbd89b":["8c8c4626bae005f9e5e637caa5949d5164471e43"],"d6a43d4d79c846f6b9308b9adc72dd8de0ab6bdb":["cb5bb8a93dd58a4cde932f3e3ee4e13dc6832949"],"cb5bb8a93dd58a4cde932f3e3ee4e13dc6832949":["dd2eca9f2bb68fcb16ff4c9e7cebdcc14dbe3a24"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["fb64c40810344469d50ab5bb932fb375b6dcd474"],"fb64c40810344469d50ab5bb932fb375b6dcd474":["217b516e59f574c979a72ba66ee8e9423e06cafd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dd2eca9f2bb68fcb16ff4c9e7cebdcc14dbe3a24":["ba0fdc3897f9d44379d91d8c02cab79ff5228c16"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"ba0fdc3897f9d44379d91d8c02cab79ff5228c16":["b14ccda0bdb398cf86bc3804e1c136a615dbd89b"],"7f2a93a28913071a0b713be1d4b8a1181388d550":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}