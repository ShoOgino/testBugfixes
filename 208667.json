{"path":"src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#newTerm(RawPostingList).mjava","commits":[{"id":"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223","date":1227051709,"type":1,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#newTerm(RawPostingList).mjava","pathOld":"src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#newTerm(Token,RawPostingList).mjava","sourceNew":"  final void newTerm(RawPostingList p0) {\n    // First time we're seeing this term since the last\n    // flush\n    assert docState.testPoint(\"FreqProxTermsWriterPerField.newTerm start\");\n    FreqProxTermsWriter.PostingList p = (FreqProxTermsWriter.PostingList) p0;\n    p.lastDocID = docState.docID;\n    if (omitTf) {\n      p.lastDocCode = docState.docID;\n    } else {\n      p.lastDocCode = docState.docID << 1;\n      p.docFreq = 1;\n      writeProx(p, fieldState.position);\n    }\n  }\n\n","sourceOld":"  final void newTerm(Token t, RawPostingList p0) {\n    // First time we're seeing this term since the last\n    // flush\n    assert docState.testPoint(\"FreqProxTermsWriterPerField.newTerm start\");\n    FreqProxTermsWriter.PostingList p = (FreqProxTermsWriter.PostingList) p0;\n    p.lastDocID = docState.docID;\n    if (omitTf) {\n      p.lastDocCode = docState.docID;\n    } else {\n      p.lastDocCode = docState.docID << 1;\n      p.docFreq = 1;\n      writeProx(t, p, fieldState.position);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"066b6ff5a08e35c3b6880e7c3ddda79526acdab1","date":1237569961,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#newTerm(RawPostingList).mjava","pathOld":"src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#newTerm(RawPostingList).mjava","sourceNew":"  final void newTerm(RawPostingList p0) {\n    // First time we're seeing this term since the last\n    // flush\n    assert docState.testPoint(\"FreqProxTermsWriterPerField.newTerm start\");\n    FreqProxTermsWriter.PostingList p = (FreqProxTermsWriter.PostingList) p0;\n    p.lastDocID = docState.docID;\n    if (omitTermFreqAndPositions) {\n      p.lastDocCode = docState.docID;\n    } else {\n      p.lastDocCode = docState.docID << 1;\n      p.docFreq = 1;\n      writeProx(p, fieldState.position);\n    }\n  }\n\n","sourceOld":"  final void newTerm(RawPostingList p0) {\n    // First time we're seeing this term since the last\n    // flush\n    assert docState.testPoint(\"FreqProxTermsWriterPerField.newTerm start\");\n    FreqProxTermsWriter.PostingList p = (FreqProxTermsWriter.PostingList) p0;\n    p.lastDocID = docState.docID;\n    if (omitTf) {\n      p.lastDocCode = docState.docID;\n    } else {\n      p.lastDocCode = docState.docID << 1;\n      p.docFreq = 1;\n      writeProx(p, fieldState.position);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#newTerm(RawPostingList).mjava","pathOld":"src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#newTerm(RawPostingList).mjava","sourceNew":"  @Override\n  final void newTerm(RawPostingList p0) {\n    // First time we're seeing this term since the last\n    // flush\n    assert docState.testPoint(\"FreqProxTermsWriterPerField.newTerm start\");\n    FreqProxTermsWriter.PostingList p = (FreqProxTermsWriter.PostingList) p0;\n    p.lastDocID = docState.docID;\n    if (omitTermFreqAndPositions) {\n      p.lastDocCode = docState.docID;\n    } else {\n      p.lastDocCode = docState.docID << 1;\n      p.docFreq = 1;\n      writeProx(p, fieldState.position);\n    }\n  }\n\n","sourceOld":"  final void newTerm(RawPostingList p0) {\n    // First time we're seeing this term since the last\n    // flush\n    assert docState.testPoint(\"FreqProxTermsWriterPerField.newTerm start\");\n    FreqProxTermsWriter.PostingList p = (FreqProxTermsWriter.PostingList) p0;\n    p.lastDocID = docState.docID;\n    if (omitTermFreqAndPositions) {\n      p.lastDocCode = docState.docID;\n    } else {\n      p.lastDocCode = docState.docID << 1;\n      p.docFreq = 1;\n      writeProx(p, fieldState.position);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#newTerm(RawPostingList).mjava","pathOld":"src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#newTerm(RawPostingList).mjava","sourceNew":"  @Override\n  final void newTerm(RawPostingList p0) {\n    // First time we're seeing this term since the last\n    // flush\n    assert docState.testPoint(\"FreqProxTermsWriterPerField.newTerm start\");\n    FreqProxTermsWriter.PostingList p = (FreqProxTermsWriter.PostingList) p0;\n    p.lastDocID = docState.docID;\n    if (omitTermFreqAndPositions) {\n      p.lastDocCode = docState.docID;\n    } else {\n      p.lastDocCode = docState.docID << 1;\n      p.docFreq = 1;\n      writeProx(p, fieldState.position);\n    }\n  }\n\n","sourceOld":"  @Override\n  final void newTerm(RawPostingList p0) {\n    // First time we're seeing this term since the last\n    // flush\n    assert docState.testPoint(\"FreqProxTermsWriterPerField.newTerm start\");\n    FreqProxTermsWriter.PostingList p = (FreqProxTermsWriter.PostingList) p0;\n    p.lastDocID = docState.docID;\n    if (omitTermFreqAndPositions) {\n      p.lastDocCode = docState.docID;\n    } else {\n      p.lastDocCode = docState.docID << 1;\n      p.docFreq = 1;\n      writeProx(p, fieldState.position);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8a9e385641d717e641408d8fbbc62be8fc766357":["066b6ff5a08e35c3b6880e7c3ddda79526acdab1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"066b6ff5a08e35c3b6880e7c3ddda79526acdab1":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"]},"commit2Childs":{"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["066b6ff5a08e35c3b6880e7c3ddda79526acdab1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"066b6ff5a08e35c3b6880e7c3ddda79526acdab1":["8a9e385641d717e641408d8fbbc62be8fc766357"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}