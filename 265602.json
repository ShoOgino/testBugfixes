{"path":"lucene/contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/NumericRangeFilterBuilder#getFilter(Element).mjava","commits":[{"id":"05bdab91555bc2728769812fa2e40814e900f661","date":1269650215,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"lucene/contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/NumericRangeFilterBuilder#getFilter(Element).mjava","pathOld":"/dev/null","sourceNew":"\tpublic Filter getFilter(Element e) throws ParserException {\n\t\tString field = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n\t\tString lowerTerm = DOMUtils.getAttributeOrFail(e, \"lowerTerm\");\n\t\tString upperTerm = DOMUtils.getAttributeOrFail(e, \"upperTerm\");\n\t\tboolean lowerInclusive = DOMUtils.getAttribute(e, \"includeLower\", true);\n\t\tboolean upperInclusive = DOMUtils.getAttribute(e, \"includeUpper\", true);\n\t\tint precisionStep = DOMUtils.getAttribute(e, \"precisionStep\",  NumericUtils.PRECISION_STEP_DEFAULT);\n\n\t\tString type = DOMUtils.getAttribute(e, \"type\", \"int\");\n\t\ttry {\n\t\t\tFilter filter;\n\t\t\tif (type.equalsIgnoreCase(\"int\")) {\n\t\t\t\tfilter = NumericRangeFilter.newIntRange(field, precisionStep, Integer\n\t\t\t\t\t\t.valueOf(lowerTerm), Integer.valueOf(upperTerm), lowerInclusive,\n\t\t\t\t\t\tupperInclusive);\n\t\t\t} else if (type.equalsIgnoreCase(\"long\")) {\n\t\t\t\tfilter = NumericRangeFilter.newLongRange(field, precisionStep, Long\n\t\t\t\t\t\t.valueOf(lowerTerm), Long.valueOf(upperTerm), lowerInclusive,\n\t\t\t\t\t\tupperInclusive);\n\t\t\t} else if (type.equalsIgnoreCase(\"double\")) {\n\t\t\t\tfilter = NumericRangeFilter.newDoubleRange(field, precisionStep, Double\n\t\t\t\t\t\t.valueOf(lowerTerm), Double.valueOf(upperTerm), lowerInclusive,\n\t\t\t\t\t\tupperInclusive);\n\t\t\t} else if (type.equalsIgnoreCase(\"float\")) {\n\t\t\t\tfilter = NumericRangeFilter.newFloatRange(field, precisionStep, Float\n\t\t\t\t\t\t.valueOf(lowerTerm), Float.valueOf(upperTerm), lowerInclusive,\n\t\t\t\t\t\tupperInclusive);\n\t\t\t} else {\n\t\t\t\tthrow new ParserException(\n\t\t\t\t\t\t\"type attribute must be one of: [long, int, double, float]\");\n\t\t\t}\n\t\t\treturn filter;\n\t\t} catch (NumberFormatException nfe) {\n\t\t\tif (strictMode) {\n\t\t\t\tthrow new ParserException(\n\t\t\t\t\t\t\"Could not parse lowerTerm or upperTerm into a number\", nfe);\n\t\t\t}\n\t\t\treturn NO_MATCH_FILTER;\n\t\t}\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2","date":1313460667,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/NumericRangeFilterBuilder#getFilter(Element).mjava","pathOld":"lucene/contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/NumericRangeFilterBuilder#getFilter(Element).mjava","sourceNew":"  public Filter getFilter(Element e) throws ParserException {\n    String field = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    String lowerTerm = DOMUtils.getAttributeOrFail(e, \"lowerTerm\");\n    String upperTerm = DOMUtils.getAttributeOrFail(e, \"upperTerm\");\n    boolean lowerInclusive = DOMUtils.getAttribute(e, \"includeLower\", true);\n    boolean upperInclusive = DOMUtils.getAttribute(e, \"includeUpper\", true);\n    int precisionStep = DOMUtils.getAttribute(e, \"precisionStep\", NumericUtils.PRECISION_STEP_DEFAULT);\n\n    String type = DOMUtils.getAttribute(e, \"type\", \"int\");\n    try {\n      Filter filter;\n      if (type.equalsIgnoreCase(\"int\")) {\n        filter = NumericRangeFilter.newIntRange(field, precisionStep, Integer\n            .valueOf(lowerTerm), Integer.valueOf(upperTerm), lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"long\")) {\n        filter = NumericRangeFilter.newLongRange(field, precisionStep, Long\n            .valueOf(lowerTerm), Long.valueOf(upperTerm), lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"double\")) {\n        filter = NumericRangeFilter.newDoubleRange(field, precisionStep, Double\n            .valueOf(lowerTerm), Double.valueOf(upperTerm), lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"float\")) {\n        filter = NumericRangeFilter.newFloatRange(field, precisionStep, Float\n            .valueOf(lowerTerm), Float.valueOf(upperTerm), lowerInclusive,\n            upperInclusive);\n      } else {\n        throw new ParserException(\"type attribute must be one of: [long, int, double, float]\");\n      }\n      return filter;\n    } catch (NumberFormatException nfe) {\n      if (strictMode) {\n        throw new ParserException(\"Could not parse lowerTerm or upperTerm into a number\", nfe);\n      }\n      return NO_MATCH_FILTER;\n    }\n  }\n\n","sourceOld":"\tpublic Filter getFilter(Element e) throws ParserException {\n\t\tString field = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n\t\tString lowerTerm = DOMUtils.getAttributeOrFail(e, \"lowerTerm\");\n\t\tString upperTerm = DOMUtils.getAttributeOrFail(e, \"upperTerm\");\n\t\tboolean lowerInclusive = DOMUtils.getAttribute(e, \"includeLower\", true);\n\t\tboolean upperInclusive = DOMUtils.getAttribute(e, \"includeUpper\", true);\n\t\tint precisionStep = DOMUtils.getAttribute(e, \"precisionStep\",  NumericUtils.PRECISION_STEP_DEFAULT);\n\n\t\tString type = DOMUtils.getAttribute(e, \"type\", \"int\");\n\t\ttry {\n\t\t\tFilter filter;\n\t\t\tif (type.equalsIgnoreCase(\"int\")) {\n\t\t\t\tfilter = NumericRangeFilter.newIntRange(field, precisionStep, Integer\n\t\t\t\t\t\t.valueOf(lowerTerm), Integer.valueOf(upperTerm), lowerInclusive,\n\t\t\t\t\t\tupperInclusive);\n\t\t\t} else if (type.equalsIgnoreCase(\"long\")) {\n\t\t\t\tfilter = NumericRangeFilter.newLongRange(field, precisionStep, Long\n\t\t\t\t\t\t.valueOf(lowerTerm), Long.valueOf(upperTerm), lowerInclusive,\n\t\t\t\t\t\tupperInclusive);\n\t\t\t} else if (type.equalsIgnoreCase(\"double\")) {\n\t\t\t\tfilter = NumericRangeFilter.newDoubleRange(field, precisionStep, Double\n\t\t\t\t\t\t.valueOf(lowerTerm), Double.valueOf(upperTerm), lowerInclusive,\n\t\t\t\t\t\tupperInclusive);\n\t\t\t} else if (type.equalsIgnoreCase(\"float\")) {\n\t\t\t\tfilter = NumericRangeFilter.newFloatRange(field, precisionStep, Float\n\t\t\t\t\t\t.valueOf(lowerTerm), Float.valueOf(upperTerm), lowerInclusive,\n\t\t\t\t\t\tupperInclusive);\n\t\t\t} else {\n\t\t\t\tthrow new ParserException(\n\t\t\t\t\t\t\"type attribute must be one of: [long, int, double, float]\");\n\t\t\t}\n\t\t\treturn filter;\n\t\t} catch (NumberFormatException nfe) {\n\t\t\tif (strictMode) {\n\t\t\t\tthrow new ParserException(\n\t\t\t\t\t\t\"Could not parse lowerTerm or upperTerm into a number\", nfe);\n\t\t\t}\n\t\t\treturn NO_MATCH_FILTER;\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"251550f5d19b526a76f8c5126ae7bb2d22cf8935","date":1315202008,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/NumericRangeFilterBuilder#getFilter(Element).mjava","pathOld":"lucene/contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/NumericRangeFilterBuilder#getFilter(Element).mjava","sourceNew":"  public Filter getFilter(Element e) throws ParserException {\n    String field = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    String lowerTerm = DOMUtils.getAttributeOrFail(e, \"lowerTerm\");\n    String upperTerm = DOMUtils.getAttributeOrFail(e, \"upperTerm\");\n    boolean lowerInclusive = DOMUtils.getAttribute(e, \"includeLower\", true);\n    boolean upperInclusive = DOMUtils.getAttribute(e, \"includeUpper\", true);\n    int precisionStep = DOMUtils.getAttribute(e, \"precisionStep\", NumericUtils.PRECISION_STEP_DEFAULT);\n\n    String type = DOMUtils.getAttribute(e, \"type\", \"int\");\n    try {\n      Filter filter;\n      if (type.equalsIgnoreCase(\"int\")) {\n        filter = NumericRangeFilter.newIntRange(field, precisionStep, Integer\n            .valueOf(lowerTerm), Integer.valueOf(upperTerm), lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"long\")) {\n        filter = NumericRangeFilter.newLongRange(field, precisionStep, Long\n            .valueOf(lowerTerm), Long.valueOf(upperTerm), lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"double\")) {\n        filter = NumericRangeFilter.newDoubleRange(field, precisionStep, Double\n            .valueOf(lowerTerm), Double.valueOf(upperTerm), lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"float\")) {\n        filter = NumericRangeFilter.newFloatRange(field, precisionStep, Float\n            .valueOf(lowerTerm), Float.valueOf(upperTerm), lowerInclusive,\n            upperInclusive);\n      } else {\n        throw new ParserException(\"type attribute must be one of: [long, int, double, float]\");\n      }\n      return filter;\n    } catch (NumberFormatException nfe) {\n      if (strictMode) {\n        throw new ParserException(\"Could not parse lowerTerm or upperTerm into a number\", nfe);\n      }\n      return NO_MATCH_FILTER;\n    }\n  }\n\n","sourceOld":"  public Filter getFilter(Element e) throws ParserException {\n    String field = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    String lowerTerm = DOMUtils.getAttributeOrFail(e, \"lowerTerm\");\n    String upperTerm = DOMUtils.getAttributeOrFail(e, \"upperTerm\");\n    boolean lowerInclusive = DOMUtils.getAttribute(e, \"includeLower\", true);\n    boolean upperInclusive = DOMUtils.getAttribute(e, \"includeUpper\", true);\n    int precisionStep = DOMUtils.getAttribute(e, \"precisionStep\", NumericUtils.PRECISION_STEP_DEFAULT);\n\n    String type = DOMUtils.getAttribute(e, \"type\", \"int\");\n    try {\n      Filter filter;\n      if (type.equalsIgnoreCase(\"int\")) {\n        filter = NumericRangeFilter.newIntRange(field, precisionStep, Integer\n            .valueOf(lowerTerm), Integer.valueOf(upperTerm), lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"long\")) {\n        filter = NumericRangeFilter.newLongRange(field, precisionStep, Long\n            .valueOf(lowerTerm), Long.valueOf(upperTerm), lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"double\")) {\n        filter = NumericRangeFilter.newDoubleRange(field, precisionStep, Double\n            .valueOf(lowerTerm), Double.valueOf(upperTerm), lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"float\")) {\n        filter = NumericRangeFilter.newFloatRange(field, precisionStep, Float\n            .valueOf(lowerTerm), Float.valueOf(upperTerm), lowerInclusive,\n            upperInclusive);\n      } else {\n        throw new ParserException(\"type attribute must be one of: [long, int, double, float]\");\n      }\n      return filter;\n    } catch (NumberFormatException nfe) {\n      if (strictMode) {\n        throw new ParserException(\"Could not parse lowerTerm or upperTerm into a number\", nfe);\n      }\n      return NO_MATCH_FILTER;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2":["05bdab91555bc2728769812fa2e40814e900f661"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"251550f5d19b526a76f8c5126ae7bb2d22cf8935":["b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2"],"05bdab91555bc2728769812fa2e40814e900f661":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["251550f5d19b526a76f8c5126ae7bb2d22cf8935"]},"commit2Childs":{"b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2":["251550f5d19b526a76f8c5126ae7bb2d22cf8935"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["05bdab91555bc2728769812fa2e40814e900f661"],"251550f5d19b526a76f8c5126ae7bb2d22cf8935":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"05bdab91555bc2728769812fa2e40814e900f661":["b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}