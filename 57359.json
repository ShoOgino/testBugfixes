{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeFactorChange().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeFactorChange().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeFactorChange().mjava","sourceNew":"  // Test the case where mergeFactor changes\n  public void testMergeFactorChange() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(100);\n    writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(5);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n  }\n\n","sourceOld":"  // Test the case where mergeFactor changes\n  public void testMergeFactorChange() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(100);\n    writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(5);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ab99e8c71442b92c320e218141dee04a9b91ce8","date":1269203801,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeFactorChange().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeFactorChange().mjava","sourceNew":"  // Test the case where mergeFactor changes\n  public void testMergeFactorChange() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setMaxBufferedDocs(10).setMergePolicy(new LogDocMergePolicy()));\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n  }\n\n","sourceOld":"  // Test the case where mergeFactor changes\n  public void testMergeFactorChange() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(100);\n    writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(5);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeFactorChange().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeFactorChange().mjava","sourceNew":"  // Test the case where mergeFactor changes\n  public void testMergeFactorChange() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(10).setMergePolicy(new LogDocMergePolicy()));\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n  }\n\n","sourceOld":"  // Test the case where mergeFactor changes\n  public void testMergeFactorChange() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setMaxBufferedDocs(10).setMergePolicy(new LogDocMergePolicy()));\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeFactorChange().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeFactorChange().mjava","sourceNew":"  // Test the case where mergeFactor changes\n  public void testMergeFactorChange() throws IOException {\n    Directory dir = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(10).setMergePolicy(new LogDocMergePolicy()));\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n  }\n\n","sourceOld":"  // Test the case where mergeFactor changes\n  public void testMergeFactorChange() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(10).setMergePolicy(new LogDocMergePolicy()));\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeFactorChange().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeFactorChange().mjava","sourceNew":"  // Test the case where mergeFactor changes\n  public void testMergeFactorChange() throws IOException {\n    Directory dir = newDirectory(random);\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(10).setMergePolicy(new LogDocMergePolicy()));\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test the case where mergeFactor changes\n  public void testMergeFactorChange() throws IOException {\n    Directory dir = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(10).setMergePolicy(new LogDocMergePolicy()));\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeFactorChange().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeFactorChange().mjava","sourceNew":"  // Test the case where mergeFactor changes\n  public void testMergeFactorChange() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(10).setMergePolicy(new LogDocMergePolicy()));\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test the case where mergeFactor changes\n  public void testMergeFactorChange() throws IOException {\n    Directory dir = newDirectory(random);\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(10).setMergePolicy(new LogDocMergePolicy()));\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeFactorChange().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeFactorChange().mjava","sourceNew":"  // Test the case where mergeFactor changes\n  public void testMergeFactorChange() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test the case where mergeFactor changes\n  public void testMergeFactorChange() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(10).setMergePolicy(new LogDocMergePolicy()));\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeFactorChange().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeFactorChange().mjava","sourceNew":"  // Test the case where mergeFactor changes\n  public void testMergeFactorChange() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test the case where mergeFactor changes\n  public void testMergeFactorChange() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(10).setMergePolicy(new LogDocMergePolicy()));\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeFactorChange().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeFactorChange().mjava","sourceNew":"  // Test the case where mergeFactor changes\n  public void testMergeFactorChange() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test the case where mergeFactor changes\n  public void testMergeFactorChange() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(10).setMergePolicy(new LogDocMergePolicy()));\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeFactorChange().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeFactorChange().mjava","sourceNew":"  // Test the case where mergeFactor changes\n  public void testMergeFactorChange() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newInOrderLogMergePolicy())\n    );\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test the case where mergeFactor changes\n  public void testMergeFactorChange() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeFactorChange().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeFactorChange().mjava","sourceNew":"  // Test the case where mergeFactor changes\n  public void testMergeFactorChange() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newInOrderLogMergePolicy())\n    );\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test the case where mergeFactor changes\n  public void testMergeFactorChange() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeFactorChange().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeFactorChange().mjava","sourceNew":"  // Test the case where mergeFactor changes\n  public void testMergeFactorChange() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newInOrderLogMergePolicy())\n    );\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test the case where mergeFactor changes\n  public void testMergeFactorChange() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01e5948db9a07144112d2f08f28ca2e3cd880348","date":1301759232,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeFactorChange().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeFactorChange().mjava","sourceNew":"  // Test the case where mergeFactor changes\n  public void testMergeFactorChange() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test the case where mergeFactor changes\n  public void testMergeFactorChange() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newInOrderLogMergePolicy())\n    );\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeFactorChange().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeFactorChange().mjava","sourceNew":"  // Test the case where mergeFactor changes\n  public void testMergeFactorChange() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test the case where mergeFactor changes\n  public void testMergeFactorChange() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newInOrderLogMergePolicy())\n    );\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeFactorChange().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeFactorChange().mjava","sourceNew":"  // Test the case where mergeFactor changes\n  public void testMergeFactorChange() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test the case where mergeFactor changes\n  public void testMergeFactorChange() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeFactorChange().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeFactorChange().mjava","sourceNew":"  // Test the case where mergeFactor changes\n  public void testMergeFactorChange() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test the case where mergeFactor changes\n  public void testMergeFactorChange() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeFactorChange().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeFactorChange().mjava","sourceNew":"  // Test the case where mergeFactor changes\n  public void testMergeFactorChange() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test the case where mergeFactor changes\n  public void testMergeFactorChange() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newInOrderLogMergePolicy())\n    );\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeFactorChange().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeFactorChange().mjava","sourceNew":"  // Test the case where mergeFactor changes\n  public void testMergeFactorChange() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test the case where mergeFactor changes\n  public void testMergeFactorChange() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newInOrderLogMergePolicy())\n    );\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeFactorChange().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeFactorChange().mjava","sourceNew":"  // Test the case where mergeFactor changes\n  public void testMergeFactorChange() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy()).\n            setMergeScheduler(new SerialMergeScheduler())\n    );\n\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test the case where mergeFactor changes\n  public void testMergeFactorChange() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeFactorChange().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeFactorChange().mjava","sourceNew":"  // Test the case where mergeFactor changes\n  public void testMergeFactorChange() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy()).\n            setMergeScheduler(new SerialMergeScheduler())\n    );\n\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test the case where mergeFactor changes\n  public void testMergeFactorChange() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeFactorChange().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeFactorChange().mjava","sourceNew":"  // Test the case where mergeFactor changes\n  public void testMergeFactorChange() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy()).\n            setMergeScheduler(new SerialMergeScheduler())\n    );\n\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test the case where mergeFactor changes\n  public void testMergeFactorChange() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeFactorChange().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeFactorChange().mjava","sourceNew":"  // Test the case where mergeFactor changes\n  public void testMergeFactorChange() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy()).\n            setMergeScheduler(new SerialMergeScheduler())\n    );\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test the case where mergeFactor changes\n  public void testMergeFactorChange() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy()).\n            setMergeScheduler(new SerialMergeScheduler())\n    );\n\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeFactorChange().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeFactorChange().mjava","sourceNew":"  // Test the case where mergeFactor changes\n  public void testMergeFactorChange() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy()).\n            setMergeScheduler(new SerialMergeScheduler())\n    );\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test the case where mergeFactor changes\n  public void testMergeFactorChange() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy()).\n            setMergeScheduler(new SerialMergeScheduler())\n    );\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["06584e6e98d592b34e1329b384182f368d2025e8"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"c19f985e36a65cc969e8e564fe337a0d41512075":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["c19f985e36a65cc969e8e564fe337a0d41512075"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["01e5948db9a07144112d2f08f28ca2e3cd880348"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a3776dccca01c11e7046323cfad46a3b4a471233","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["3bb13258feba31ab676502787ab2e1779f129b7a","c19f985e36a65cc969e8e564fe337a0d41512075"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["d572389229127c297dd1fa5ce4758e1cec41e799"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"06584e6e98d592b34e1329b384182f368d2025e8":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"962d04139994fce5193143ef35615499a9a96d78":["45669a651c970812a680841b97a77cce06af559f","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c19f985e36a65cc969e8e564fe337a0d41512075","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["135621f3a0670a9394eb563224a3b76cc4dddc0f","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"45669a651c970812a680841b97a77cce06af559f":["bde51b089eb7f86171eb3406e38a274743f9b7ac","01e5948db9a07144112d2f08f28ca2e3cd880348"],"3bb13258feba31ab676502787ab2e1779f129b7a":["1f653cfcf159baeaafe5d01682a911e95bba4012","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["1f653cfcf159baeaafe5d01682a911e95bba4012"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c19f985e36a65cc969e8e564fe337a0d41512075":["01e5948db9a07144112d2f08f28ca2e3cd880348","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","a3776dccca01c11e7046323cfad46a3b4a471233"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["f2c5f0cb44df114db4228c8f77861714b5cabaea","45669a651c970812a680841b97a77cce06af559f"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"79c2cb24929f2649a8875fb629086171f914d5ce":[],"1f653cfcf159baeaafe5d01682a911e95bba4012":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["45669a651c970812a680841b97a77cce06af559f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["79c2cb24929f2649a8875fb629086171f914d5ce","06584e6e98d592b34e1329b384182f368d2025e8","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["d572389229127c297dd1fa5ce4758e1cec41e799"],"06584e6e98d592b34e1329b384182f368d2025e8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"962d04139994fce5193143ef35615499a9a96d78":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["79c2cb24929f2649a8875fb629086171f914d5ce"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"45669a651c970812a680841b97a77cce06af559f":["962d04139994fce5193143ef35615499a9a96d78"],"3bb13258feba31ab676502787ab2e1779f129b7a":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["79c2cb24929f2649a8875fb629086171f914d5ce","962d04139994fce5193143ef35615499a9a96d78","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}