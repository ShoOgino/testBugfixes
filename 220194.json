{"path":"solr/core/src/java/org/apache/solr/schema/TrieField#readableToIndexed(CharSequence,BytesRef).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#readableToIndexed(CharSequence,BytesRef).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#readableToIndexed(CharSequence,BytesRef).mjava","sourceNew":"  @Override\n  public void readableToIndexed(CharSequence val, BytesRef result) {\n    String s = val.toString();\n    switch (type) {\n      case INTEGER:\n        NumericUtils.intToPrefixCoded(Integer.parseInt(s), 0, result);\n        break;\n      case FLOAT:\n        NumericUtils.intToPrefixCoded(NumericUtils.floatToSortableInt(Float.parseFloat(s)), 0, result);\n        break;\n      case LONG:\n        NumericUtils.longToPrefixCoded(Long.parseLong(s), 0, result);\n        break;\n      case DOUBLE:\n        NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(Double.parseDouble(s)), 0, result);\n        break;\n      case DATE:\n        NumericUtils.longToPrefixCoded(dateField.parseMath(null, s).getTime(), 0, result);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void readableToIndexed(CharSequence val, BytesRef result) {\n    String s = val.toString();\n    switch (type) {\n      case INTEGER:\n        NumericUtils.intToPrefixCoded(Integer.parseInt(s), 0, result);\n        break;\n      case FLOAT:\n        NumericUtils.intToPrefixCoded(NumericUtils.floatToSortableInt(Float.parseFloat(s)), 0, result);\n        break;\n      case LONG:\n        NumericUtils.longToPrefixCoded(Long.parseLong(s), 0, result);\n        break;\n      case DOUBLE:\n        NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(Double.parseDouble(s)), 0, result);\n        break;\n      case DATE:\n        NumericUtils.longToPrefixCoded(dateField.parseMath(null, s).getTime(), 0, result);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#readableToIndexed(CharSequence,BytesRef).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#readableToIndexed(CharSequence,BytesRef).mjava","sourceNew":"  @Override\n  public void readableToIndexed(CharSequence val, BytesRef result) {\n    String s = val.toString();\n    switch (type) {\n      case INTEGER:\n        NumericUtils.intToPrefixCoded(Integer.parseInt(s), 0, result);\n        break;\n      case FLOAT:\n        NumericUtils.intToPrefixCoded(NumericUtils.floatToSortableInt(Float.parseFloat(s)), 0, result);\n        break;\n      case LONG:\n        NumericUtils.longToPrefixCoded(Long.parseLong(s), 0, result);\n        break;\n      case DOUBLE:\n        NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(Double.parseDouble(s)), 0, result);\n        break;\n      case DATE:\n        NumericUtils.longToPrefixCoded(dateField.parseMath(null, s).getTime(), 0, result);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void readableToIndexed(CharSequence val, BytesRef result) {\n    String s = val.toString();\n    switch (type) {\n      case INTEGER:\n        NumericUtils.intToPrefixCoded(Integer.parseInt(s), 0, result);\n        break;\n      case FLOAT:\n        NumericUtils.intToPrefixCoded(NumericUtils.floatToSortableInt(Float.parseFloat(s)), 0, result);\n        break;\n      case LONG:\n        NumericUtils.longToPrefixCoded(Long.parseLong(s), 0, result);\n        break;\n      case DOUBLE:\n        NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(Double.parseDouble(s)), 0, result);\n        break;\n      case DATE:\n        NumericUtils.longToPrefixCoded(dateField.parseMath(null, s).getTime(), 0, result);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#readableToIndexed(CharSequence,BytesRef).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#readableToIndexed(CharSequence,BytesRef).mjava","sourceNew":"  @Override\n  public void readableToIndexed(CharSequence val, BytesRef result) {\n    String s = val.toString();\n    switch (type) {\n      case INTEGER:\n        NumericUtils.intToPrefixCoded(Integer.parseInt(s), 0, result);\n        break;\n      case FLOAT:\n        NumericUtils.intToPrefixCoded(NumericUtils.floatToSortableInt(Float.parseFloat(s)), 0, result);\n        break;\n      case LONG:\n        NumericUtils.longToPrefixCoded(Long.parseLong(s), 0, result);\n        break;\n      case DOUBLE:\n        NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(Double.parseDouble(s)), 0, result);\n        break;\n      case DATE:\n        NumericUtils.longToPrefixCoded(dateField.parseMath(null, s).getTime(), 0, result);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void readableToIndexed(CharSequence val, BytesRef result) {\n    String s = val.toString();\n    switch (type) {\n      case INTEGER:\n        NumericUtils.intToPrefixCoded(Integer.parseInt(s), 0, result);\n        break;\n      case FLOAT:\n        NumericUtils.intToPrefixCoded(NumericUtils.floatToSortableInt(Float.parseFloat(s)), 0, result);\n        break;\n      case LONG:\n        NumericUtils.longToPrefixCoded(Long.parseLong(s), 0, result);\n        break;\n      case DOUBLE:\n        NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(Double.parseDouble(s)), 0, result);\n        break;\n      case DATE:\n        NumericUtils.longToPrefixCoded(dateField.parseMath(null, s).getTime(), 0, result);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22abfa0c2df167320b9c97d1bdbb19347ff95402","date":1359067319,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#readableToIndexed(CharSequence,BytesRef).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#readableToIndexed(CharSequence,BytesRef).mjava","sourceNew":"  @Override\n  public void readableToIndexed(CharSequence val, BytesRef result) {\n    String s = val.toString();\n    switch (type) {\n      case INTEGER:\n        NumericUtils.intToPrefixCodedBytes(Integer.parseInt(s), 0, result);\n        break;\n      case FLOAT:\n        NumericUtils.intToPrefixCodedBytes(NumericUtils.floatToSortableInt(Float.parseFloat(s)), 0, result);\n        break;\n      case LONG:\n        NumericUtils.longToPrefixCodedBytes(Long.parseLong(s), 0, result);\n        break;\n      case DOUBLE:\n        NumericUtils.longToPrefixCodedBytes(NumericUtils.doubleToSortableLong(Double.parseDouble(s)), 0, result);\n        break;\n      case DATE:\n        NumericUtils.longToPrefixCodedBytes(dateField.parseMath(null, s).getTime(), 0, result);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void readableToIndexed(CharSequence val, BytesRef result) {\n    String s = val.toString();\n    switch (type) {\n      case INTEGER:\n        NumericUtils.intToPrefixCoded(Integer.parseInt(s), 0, result);\n        break;\n      case FLOAT:\n        NumericUtils.intToPrefixCoded(NumericUtils.floatToSortableInt(Float.parseFloat(s)), 0, result);\n        break;\n      case LONG:\n        NumericUtils.longToPrefixCoded(Long.parseLong(s), 0, result);\n        break;\n      case DOUBLE:\n        NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(Double.parseDouble(s)), 0, result);\n        break;\n      case DATE:\n        NumericUtils.longToPrefixCoded(dateField.parseMath(null, s).getTime(), 0, result);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":["99c9d8533c954f661481ae44273622957dbf572f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dd45d4a2ee01a1932d33eec42f5272c2402da679","date":1359316912,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#readableToIndexed(CharSequence,BytesRef).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#readableToIndexed(CharSequence,BytesRef).mjava","sourceNew":"  @Override\n  public void readableToIndexed(CharSequence val, BytesRef result) {\n    String s = val.toString();\n    switch (type) {\n      case INTEGER:\n        NumericUtils.intToPrefixCodedBytes(Integer.parseInt(s), 0, result);\n        break;\n      case FLOAT:\n        NumericUtils.intToPrefixCodedBytes(NumericUtils.floatToSortableInt(Float.parseFloat(s)), 0, result);\n        break;\n      case LONG:\n        NumericUtils.longToPrefixCodedBytes(Long.parseLong(s), 0, result);\n        break;\n      case DOUBLE:\n        NumericUtils.longToPrefixCodedBytes(NumericUtils.doubleToSortableLong(Double.parseDouble(s)), 0, result);\n        break;\n      case DATE:\n        NumericUtils.longToPrefixCodedBytes(dateField.parseMath(null, s).getTime(), 0, result);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void readableToIndexed(CharSequence val, BytesRef result) {\n    String s = val.toString();\n    switch (type) {\n      case INTEGER:\n        NumericUtils.intToPrefixCoded(Integer.parseInt(s), 0, result);\n        break;\n      case FLOAT:\n        NumericUtils.intToPrefixCoded(NumericUtils.floatToSortableInt(Float.parseFloat(s)), 0, result);\n        break;\n      case LONG:\n        NumericUtils.longToPrefixCoded(Long.parseLong(s), 0, result);\n        break;\n      case DOUBLE:\n        NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(Double.parseDouble(s)), 0, result);\n        break;\n      case DATE:\n        NumericUtils.longToPrefixCoded(dateField.parseMath(null, s).getTime(), 0, result);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99c9d8533c954f661481ae44273622957dbf572f","date":1380991288,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#readableToIndexed(CharSequence,BytesRef).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#readableToIndexed(CharSequence,BytesRef).mjava","sourceNew":"  @Override\n  public void readableToIndexed(CharSequence val, BytesRef result) {\n    String s = val.toString();\n    try {\n      switch (type) {\n        case INTEGER:\n          NumericUtils.intToPrefixCodedBytes(Integer.parseInt(s), 0, result);\n          break;\n        case FLOAT:\n          NumericUtils.intToPrefixCodedBytes(NumericUtils.floatToSortableInt(Float.parseFloat(s)), 0, result);\n          break;\n        case LONG:\n          NumericUtils.longToPrefixCodedBytes(Long.parseLong(s), 0, result);\n          break;\n        case DOUBLE:\n          NumericUtils.longToPrefixCodedBytes(NumericUtils.doubleToSortableLong(Double.parseDouble(s)), 0, result);\n          break;\n        case DATE:\n          NumericUtils.longToPrefixCodedBytes(dateField.parseMath(null, s).getTime(), 0, result);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n      }\n    } catch (NumberFormatException nfe) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"Invalid Number: \" + val);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void readableToIndexed(CharSequence val, BytesRef result) {\n    String s = val.toString();\n    switch (type) {\n      case INTEGER:\n        NumericUtils.intToPrefixCodedBytes(Integer.parseInt(s), 0, result);\n        break;\n      case FLOAT:\n        NumericUtils.intToPrefixCodedBytes(NumericUtils.floatToSortableInt(Float.parseFloat(s)), 0, result);\n        break;\n      case LONG:\n        NumericUtils.longToPrefixCodedBytes(Long.parseLong(s), 0, result);\n        break;\n      case DOUBLE:\n        NumericUtils.longToPrefixCodedBytes(NumericUtils.doubleToSortableLong(Double.parseDouble(s)), 0, result);\n        break;\n      case DATE:\n        NumericUtils.longToPrefixCodedBytes(dateField.parseMath(null, s).getTime(), 0, result);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n  }\n\n","bugFix":["22abfa0c2df167320b9c97d1bdbb19347ff95402","e03427f33820a2bde791de703292dcdfe2d6bdd6"],"bugIntro":["92f8ab19a30ff70981e43b8cc78069cb0941476e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#readableToIndexed(CharSequence,BytesRefBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#readableToIndexed(CharSequence,BytesRef).mjava","sourceNew":"  @Override\n  public void readableToIndexed(CharSequence val, BytesRefBuilder result) {\n    String s = val.toString();\n    try {\n      switch (type) {\n        case INTEGER:\n          NumericUtils.intToPrefixCodedBytes(Integer.parseInt(s), 0, result);\n          break;\n        case FLOAT:\n          NumericUtils.intToPrefixCodedBytes(NumericUtils.floatToSortableInt(Float.parseFloat(s)), 0, result);\n          break;\n        case LONG:\n          NumericUtils.longToPrefixCodedBytes(Long.parseLong(s), 0, result);\n          break;\n        case DOUBLE:\n          NumericUtils.longToPrefixCodedBytes(NumericUtils.doubleToSortableLong(Double.parseDouble(s)), 0, result);\n          break;\n        case DATE:\n          NumericUtils.longToPrefixCodedBytes(dateField.parseMath(null, s).getTime(), 0, result);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n      }\n    } catch (NumberFormatException nfe) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"Invalid Number: \" + val);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void readableToIndexed(CharSequence val, BytesRef result) {\n    String s = val.toString();\n    try {\n      switch (type) {\n        case INTEGER:\n          NumericUtils.intToPrefixCodedBytes(Integer.parseInt(s), 0, result);\n          break;\n        case FLOAT:\n          NumericUtils.intToPrefixCodedBytes(NumericUtils.floatToSortableInt(Float.parseFloat(s)), 0, result);\n          break;\n        case LONG:\n          NumericUtils.longToPrefixCodedBytes(Long.parseLong(s), 0, result);\n          break;\n        case DOUBLE:\n          NumericUtils.longToPrefixCodedBytes(NumericUtils.doubleToSortableLong(Double.parseDouble(s)), 0, result);\n          break;\n        case DATE:\n          NumericUtils.longToPrefixCodedBytes(dateField.parseMath(null, s).getTime(), 0, result);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n      }\n    } catch (NumberFormatException nfe) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"Invalid Number: \" + val);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"99c9d8533c954f661481ae44273622957dbf572f":["22abfa0c2df167320b9c97d1bdbb19347ff95402"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"22abfa0c2df167320b9c97d1bdbb19347ff95402":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd45d4a2ee01a1932d33eec42f5272c2402da679":["c26f00b574427b55127e869b935845554afde1fa","22abfa0c2df167320b9c97d1bdbb19347ff95402"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["99c9d8533c954f661481ae44273622957dbf572f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"]},"commit2Childs":{"99c9d8533c954f661481ae44273622957dbf572f":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"22abfa0c2df167320b9c97d1bdbb19347ff95402":["99c9d8533c954f661481ae44273622957dbf572f","dd45d4a2ee01a1932d33eec42f5272c2402da679"],"c26f00b574427b55127e869b935845554afde1fa":["22abfa0c2df167320b9c97d1bdbb19347ff95402","dd45d4a2ee01a1932d33eec42f5272c2402da679"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dd45d4a2ee01a1932d33eec42f5272c2402da679","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}