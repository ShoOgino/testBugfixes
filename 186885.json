{"path":"solr/core/src/java/org/apache/solr/rest/schema/BaseFieldTypeResource#addNewFieldTypes(List[FieldType],ManagedIndexSchema).mjava","commits":[{"id":"106069d345c14ee5c76f0ea76397b02a656f883c","date":1411998064,"type":1,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/BaseFieldTypeResource#addNewFieldTypes(List[FieldType],ManagedIndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/FieldTypeCollectionResource#addNewFieldTypes(List[FieldType],ManagedIndexSchema).mjava","sourceNew":"  /**\n   * Adds one or more new FieldType definitions to the managed schema for the given core.\n   */\n  protected void addNewFieldTypes(List<FieldType> newFieldTypes, ManagedIndexSchema oldSchema) {\n    IndexSchema newSchema = null;\n    boolean success = false;\n    while (!success) {\n      try {\n        synchronized (oldSchema.getSchemaUpdateLock()) {\n          newSchema = oldSchema.addFieldTypes(newFieldTypes);\n          getSolrCore().setLatestSchema(newSchema);\n          success = true;\n        }\n      } catch (ManagedIndexSchema.SchemaChangedInZkException e) {\n        oldSchema = (ManagedIndexSchema)getSolrCore().getLatestSchema();\n      }\n    }\n\n    // If using ZooKeeper and the client application has requested an update timeout, then block until all\n    // active replicas for this collection process the updated schema\n    if (getUpdateTimeoutSecs() > 0 && newSchema != null &&\n        newSchema.getResourceLoader() instanceof ZkSolrResourceLoader)\n    {\n      CoreDescriptor cd = getSolrCore().getCoreDescriptor();\n      String collection = cd.getCollectionName();\n      if (collection != null) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) newSchema.getResourceLoader();\n        ManagedIndexSchema.waitForSchemaZkVersionAgreement(collection,\n            cd.getCloudDescriptor().getCoreNodeName(),\n            ((ManagedIndexSchema) newSchema).getSchemaZkVersion(),\n            zkLoader.getZkController(),\n            getUpdateTimeoutSecs());\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds one or more new FieldType definitions to the managed schema for the given core.\n   */\n  protected void addNewFieldTypes(List<FieldType> newFieldTypes, ManagedIndexSchema oldSchema) {\n    boolean success = false;\n    while (!success) {\n      try {\n        synchronized (oldSchema.getSchemaUpdateLock()) {\n          IndexSchema newSchema = oldSchema.addFieldTypes(newFieldTypes);\n          getSolrCore().setLatestSchema(newSchema);\n          success = true;\n        }\n      } catch (ManagedIndexSchema.SchemaChangedInZkException e) {\n        log.debug(\"Schema changed while processing request, retrying\");\n        oldSchema = (ManagedIndexSchema)getSolrCore().getLatestSchema();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a54d9ede1b7f2f026639186eb07f3f314d87d9a","date":1412176848,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/BaseFieldTypeResource#addNewFieldTypes(List[FieldType],ManagedIndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/BaseFieldTypeResource#addNewFieldTypes(List[FieldType],ManagedIndexSchema).mjava","sourceNew":"  /**\n   * Adds one or more new FieldType definitions to the managed schema for the given core.\n   */\n  protected void addNewFieldTypes(List<FieldType> newFieldTypes, ManagedIndexSchema oldSchema) {\n    IndexSchema newSchema = null;\n    boolean success = false;\n    while (!success) {\n      try {\n        synchronized (oldSchema.getSchemaUpdateLock()) {\n          newSchema = oldSchema.addFieldTypes(newFieldTypes, true);\n          getSolrCore().setLatestSchema(newSchema);\n          success = true;\n        }\n      } catch (ManagedIndexSchema.SchemaChangedInZkException e) {\n        oldSchema = (ManagedIndexSchema)getSolrCore().getLatestSchema();\n      }\n    }\n\n    // If using ZooKeeper and the client application has requested an update timeout, then block until all\n    // active replicas for this collection process the updated schema\n    if (getUpdateTimeoutSecs() > 0 && newSchema != null &&\n        newSchema.getResourceLoader() instanceof ZkSolrResourceLoader)\n    {\n      CoreDescriptor cd = getSolrCore().getCoreDescriptor();\n      String collection = cd.getCollectionName();\n      if (collection != null) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) newSchema.getResourceLoader();\n        ManagedIndexSchema.waitForSchemaZkVersionAgreement(collection,\n            cd.getCloudDescriptor().getCoreNodeName(),\n            ((ManagedIndexSchema) newSchema).getSchemaZkVersion(),\n            zkLoader.getZkController(),\n            getUpdateTimeoutSecs());\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds one or more new FieldType definitions to the managed schema for the given core.\n   */\n  protected void addNewFieldTypes(List<FieldType> newFieldTypes, ManagedIndexSchema oldSchema) {\n    IndexSchema newSchema = null;\n    boolean success = false;\n    while (!success) {\n      try {\n        synchronized (oldSchema.getSchemaUpdateLock()) {\n          newSchema = oldSchema.addFieldTypes(newFieldTypes);\n          getSolrCore().setLatestSchema(newSchema);\n          success = true;\n        }\n      } catch (ManagedIndexSchema.SchemaChangedInZkException e) {\n        oldSchema = (ManagedIndexSchema)getSolrCore().getLatestSchema();\n      }\n    }\n\n    // If using ZooKeeper and the client application has requested an update timeout, then block until all\n    // active replicas for this collection process the updated schema\n    if (getUpdateTimeoutSecs() > 0 && newSchema != null &&\n        newSchema.getResourceLoader() instanceof ZkSolrResourceLoader)\n    {\n      CoreDescriptor cd = getSolrCore().getCoreDescriptor();\n      String collection = cd.getCollectionName();\n      if (collection != null) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) newSchema.getResourceLoader();\n        ManagedIndexSchema.waitForSchemaZkVersionAgreement(collection,\n            cd.getCloudDescriptor().getCoreNodeName(),\n            ((ManagedIndexSchema) newSchema).getSchemaZkVersion(),\n            zkLoader.getZkController(),\n            getUpdateTimeoutSecs());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/BaseFieldTypeResource#addNewFieldTypes(List[FieldType],ManagedIndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/FieldTypeCollectionResource#addNewFieldTypes(List[FieldType],ManagedIndexSchema).mjava","sourceNew":"  /**\n   * Adds one or more new FieldType definitions to the managed schema for the given core.\n   */\n  protected void addNewFieldTypes(List<FieldType> newFieldTypes, ManagedIndexSchema oldSchema) {\n    IndexSchema newSchema = null;\n    boolean success = false;\n    while (!success) {\n      try {\n        synchronized (oldSchema.getSchemaUpdateLock()) {\n          newSchema = oldSchema.addFieldTypes(newFieldTypes, true);\n          getSolrCore().setLatestSchema(newSchema);\n          success = true;\n        }\n      } catch (ManagedIndexSchema.SchemaChangedInZkException e) {\n        oldSchema = (ManagedIndexSchema)getSolrCore().getLatestSchema();\n      }\n    }\n\n    // If using ZooKeeper and the client application has requested an update timeout, then block until all\n    // active replicas for this collection process the updated schema\n    if (getUpdateTimeoutSecs() > 0 && newSchema != null &&\n        newSchema.getResourceLoader() instanceof ZkSolrResourceLoader)\n    {\n      CoreDescriptor cd = getSolrCore().getCoreDescriptor();\n      String collection = cd.getCollectionName();\n      if (collection != null) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) newSchema.getResourceLoader();\n        ManagedIndexSchema.waitForSchemaZkVersionAgreement(collection,\n            cd.getCloudDescriptor().getCoreNodeName(),\n            ((ManagedIndexSchema) newSchema).getSchemaZkVersion(),\n            zkLoader.getZkController(),\n            getUpdateTimeoutSecs());\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds one or more new FieldType definitions to the managed schema for the given core.\n   */\n  protected void addNewFieldTypes(List<FieldType> newFieldTypes, ManagedIndexSchema oldSchema) {\n    boolean success = false;\n    while (!success) {\n      try {\n        synchronized (oldSchema.getSchemaUpdateLock()) {\n          IndexSchema newSchema = oldSchema.addFieldTypes(newFieldTypes);\n          getSolrCore().setLatestSchema(newSchema);\n          success = true;\n        }\n      } catch (ManagedIndexSchema.SchemaChangedInZkException e) {\n        log.debug(\"Schema changed while processing request, retrying\");\n        oldSchema = (ManagedIndexSchema)getSolrCore().getLatestSchema();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f494bc636a1302995e4930fdccd371eeda452f87","date":1457370876,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/BaseFieldTypeResource#addNewFieldTypes(List[FieldType],ManagedIndexSchema).mjava","sourceNew":null,"sourceOld":"  /**\n   * Adds one or more new FieldType definitions to the managed schema for the given core.\n   */\n  protected void addNewFieldTypes(List<FieldType> newFieldTypes, ManagedIndexSchema oldSchema) {\n    IndexSchema newSchema = null;\n    boolean success = false;\n    while (!success) {\n      try {\n        synchronized (oldSchema.getSchemaUpdateLock()) {\n          newSchema = oldSchema.addFieldTypes(newFieldTypes, true);\n          getSolrCore().setLatestSchema(newSchema);\n          success = true;\n        }\n      } catch (ManagedIndexSchema.SchemaChangedInZkException e) {\n        oldSchema = (ManagedIndexSchema)getSolrCore().getLatestSchema();\n      }\n    }\n\n    // If using ZooKeeper and the client application has requested an update timeout, then block until all\n    // active replicas for this collection process the updated schema\n    if (getUpdateTimeoutSecs() > 0 && newSchema != null &&\n        newSchema.getResourceLoader() instanceof ZkSolrResourceLoader)\n    {\n      CoreDescriptor cd = getSolrCore().getCoreDescriptor();\n      String collection = cd.getCollectionName();\n      if (collection != null) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) newSchema.getResourceLoader();\n        ManagedIndexSchema.waitForSchemaZkVersionAgreement(collection,\n            cd.getCloudDescriptor().getCoreNodeName(),\n            ((ManagedIndexSchema) newSchema).getSchemaZkVersion(),\n            zkLoader.getZkController(),\n            getUpdateTimeoutSecs());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f494bc636a1302995e4930fdccd371eeda452f87":["4a54d9ede1b7f2f026639186eb07f3f314d87d9a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4a54d9ede1b7f2f026639186eb07f3f314d87d9a":["106069d345c14ee5c76f0ea76397b02a656f883c"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4a54d9ede1b7f2f026639186eb07f3f314d87d9a"],"106069d345c14ee5c76f0ea76397b02a656f883c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f494bc636a1302995e4930fdccd371eeda452f87"]},"commit2Childs":{"f494bc636a1302995e4930fdccd371eeda452f87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d9a47902d6207303f5ed3e7aaca62ca33433af66","106069d345c14ee5c76f0ea76397b02a656f883c"],"4a54d9ede1b7f2f026639186eb07f3f314d87d9a":["f494bc636a1302995e4930fdccd371eeda452f87","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"106069d345c14ee5c76f0ea76397b02a656f883c":["4a54d9ede1b7f2f026639186eb07f3f314d87d9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}