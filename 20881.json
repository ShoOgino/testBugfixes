{"path":"lucene/test-framework/src/java/org/apache/lucene/mockfile/WindowsFS#checkDeleteAccess(Path).mjava","commits":[{"id":"7cefb6c0aa217f293070c43e7a77682dd56e0a33","date":1416928878,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/mockfile/WindowsFS#checkDeleteAccess(Path).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Checks that its ok to delete {@code Path}. If the file\n   * is still open, it throws IOException(\"access denied\").\n   */\n  private void checkDeleteAccess(Path path) throws IOException {\n    Object key = null;\n    try {\n      key = getKey(path);\n    } catch (Throwable ignore) {\n      // we don't care if the file doesn't exist\n    } \n\n    if (key != null) {\n      synchronized(openFiles) {\n        if (openFiles.containsKey(key)) {\n          throw new IOException(\"access denied: \" + path);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["29de260cd3b302f71077d76bf52667dcbbb475da"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/mockfile/WindowsFS#checkDeleteAccess(Path).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/mockfile/WindowsFS#checkDeleteAccess(Path).mjava","sourceNew":"  /** \n   * Checks that it's ok to delete {@code Path}. If the file\n   * is still open, it throws IOException(\"access denied\").\n   */\n  private void checkDeleteAccess(Path path) throws IOException {\n    Object key = null;\n    try {\n      key = getKey(path);\n    } catch (Throwable ignore) {\n      // we don't care if the file doesn't exist\n    } \n\n    if (key != null) {\n      synchronized(openFiles) {\n        if (openFiles.containsKey(key)) {\n          throw new IOException(\"access denied: \" + path);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * Checks that its ok to delete {@code Path}. If the file\n   * is still open, it throws IOException(\"access denied\").\n   */\n  private void checkDeleteAccess(Path path) throws IOException {\n    Object key = null;\n    try {\n      key = getKey(path);\n    } catch (Throwable ignore) {\n      // we don't care if the file doesn't exist\n    } \n\n    if (key != null) {\n      synchronized(openFiles) {\n        if (openFiles.containsKey(key)) {\n          throw new IOException(\"access denied: \" + path);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29de260cd3b302f71077d76bf52667dcbbb475da","date":1526547755,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/mockfile/WindowsFS#checkDeleteAccess(Path).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/mockfile/WindowsFS#checkDeleteAccess(Path).mjava","sourceNew":"  /** \n   * Checks that it's ok to delete {@code Path}. If the file\n   * is still open, it throws IOException(\"access denied\").\n   */\n  private void checkDeleteAccess(Path path) throws IOException {\n    Object key = getKeyOrNull(path);\n    if (key != null) {\n      synchronized(openFiles) {\n        if (openFiles.containsKey(key)) {\n          throw new IOException(\"access denied: \" + path);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * Checks that it's ok to delete {@code Path}. If the file\n   * is still open, it throws IOException(\"access denied\").\n   */\n  private void checkDeleteAccess(Path path) throws IOException {\n    Object key = null;\n    try {\n      key = getKey(path);\n    } catch (Throwable ignore) {\n      // we don't care if the file doesn't exist\n    } \n\n    if (key != null) {\n      synchronized(openFiles) {\n        if (openFiles.containsKey(key)) {\n          throw new IOException(\"access denied: \" + path);\n        }\n      }\n    }\n  }\n\n","bugFix":["7cefb6c0aa217f293070c43e7a77682dd56e0a33"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["7cefb6c0aa217f293070c43e7a77682dd56e0a33"],"29de260cd3b302f71077d76bf52667dcbbb475da":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7cefb6c0aa217f293070c43e7a77682dd56e0a33":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["29de260cd3b302f71077d76bf52667dcbbb475da"]},"commit2Childs":{"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["29de260cd3b302f71077d76bf52667dcbbb475da"],"29de260cd3b302f71077d76bf52667dcbbb475da":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7cefb6c0aa217f293070c43e7a77682dd56e0a33"],"7cefb6c0aa217f293070c43e7a77682dd56e0a33":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}