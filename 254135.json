{"path":"solr/src/java/org/apache/solr/handler/XMLLoader#load(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/XMLLoader#load(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","pathOld":"/dev/null","sourceNew":"  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) throws Exception {\n    errHeader = \"XMLLoader: \" + stream.getSourceInfo();\n    Reader reader = null;\n    try {\n      reader = stream.getReader();\n      if (XmlUpdateRequestHandler.log.isTraceEnabled()) {\n        String body = IOUtils.toString(reader);\n        XmlUpdateRequestHandler.log.trace(\"body\", body);\n        reader = new StringReader(body);\n      }\n\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(reader);\n      this.processUpdate(processor, parser);\n    }\n    catch (XMLStreamException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/XMLLoader#load(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","sourceNew":null,"sourceOld":"  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) throws Exception {\n    errHeader = \"XMLLoader: \" + stream.getSourceInfo();\n    Reader reader = null;\n    try {\n      reader = stream.getReader();\n      if (XmlUpdateRequestHandler.log.isTraceEnabled()) {\n        String body = IOUtils.toString(reader);\n        XmlUpdateRequestHandler.log.trace(\"body\", body);\n        reader = new StringReader(body);\n      }\n\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(reader);\n      this.processUpdate(processor, parser);\n    }\n    catch (XMLStreamException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/XMLLoader#load(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","pathOld":"src/java/org/apache/solr/handler/XMLLoader#load(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","sourceNew":"  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) throws Exception {\n    errHeader = \"XMLLoader: \" + stream.getSourceInfo();\n    Reader reader = null;\n    try {\n      reader = stream.getReader();\n      if (XmlUpdateRequestHandler.log.isTraceEnabled()) {\n        String body = IOUtils.toString(reader);\n        XmlUpdateRequestHandler.log.trace(\"body\", body);\n        reader = new StringReader(body);\n      }\n\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(reader);\n      this.processUpdate(processor, parser);\n    }\n    catch (XMLStreamException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","sourceOld":"  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) throws Exception {\n    errHeader = \"XMLLoader: \" + stream.getSourceInfo();\n    Reader reader = null;\n    try {\n      reader = stream.getReader();\n      if (XmlUpdateRequestHandler.log.isTraceEnabled()) {\n        String body = IOUtils.toString(reader);\n        XmlUpdateRequestHandler.log.trace(\"body\", body);\n        reader = new StringReader(body);\n      }\n\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(reader);\n      this.processUpdate(processor, parser);\n    }\n    catch (XMLStreamException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/XMLLoader#load(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","pathOld":"/dev/null","sourceNew":"  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) throws Exception {\n    errHeader = \"XMLLoader: \" + stream.getSourceInfo();\n    Reader reader = null;\n    try {\n      reader = stream.getReader();\n      if (XmlUpdateRequestHandler.log.isTraceEnabled()) {\n        String body = IOUtils.toString(reader);\n        XmlUpdateRequestHandler.log.trace(\"body\", body);\n        reader = new StringReader(body);\n      }\n\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(reader);\n      this.processUpdate(processor, parser);\n    }\n    catch (XMLStreamException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa","date":1293733647,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/XMLLoader#load(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","pathOld":"solr/src/java/org/apache/solr/handler/XMLLoader#load(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","sourceNew":"  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) throws Exception {\n    errHeader = \"XMLLoader: \" + stream.getSourceInfo();\n    Reader reader = null;\n    try {\n      reader = stream.getReader();\n      if (XmlUpdateRequestHandler.log.isTraceEnabled()) {\n        String body = IOUtils.toString(reader);\n        XmlUpdateRequestHandler.log.trace(\"body\", body);\n        reader = new StringReader(body);\n      }\n\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(reader);\n      this.processUpdate(req, processor, parser);\n    }\n    catch (XMLStreamException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","sourceOld":"  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) throws Exception {\n    errHeader = \"XMLLoader: \" + stream.getSourceInfo();\n    Reader reader = null;\n    try {\n      reader = stream.getReader();\n      if (XmlUpdateRequestHandler.log.isTraceEnabled()) {\n        String body = IOUtils.toString(reader);\n        XmlUpdateRequestHandler.log.trace(\"body\", body);\n        reader = new StringReader(body);\n      }\n\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(reader);\n      this.processUpdate(processor, parser);\n    }\n    catch (XMLStreamException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/XMLLoader#load(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","pathOld":"solr/src/java/org/apache/solr/handler/XMLLoader#load(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","sourceNew":"  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) throws Exception {\n    errHeader = \"XMLLoader: \" + stream.getSourceInfo();\n    Reader reader = null;\n    try {\n      reader = stream.getReader();\n      if (XmlUpdateRequestHandler.log.isTraceEnabled()) {\n        String body = IOUtils.toString(reader);\n        XmlUpdateRequestHandler.log.trace(\"body\", body);\n        reader = new StringReader(body);\n      }\n\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(reader);\n      this.processUpdate(req, processor, parser);\n    }\n    catch (XMLStreamException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","sourceOld":"  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) throws Exception {\n    errHeader = \"XMLLoader: \" + stream.getSourceInfo();\n    Reader reader = null;\n    try {\n      reader = stream.getReader();\n      if (XmlUpdateRequestHandler.log.isTraceEnabled()) {\n        String body = IOUtils.toString(reader);\n        XmlUpdateRequestHandler.log.trace(\"body\", body);\n        reader = new StringReader(body);\n      }\n\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(reader);\n      this.processUpdate(processor, parser);\n    }\n    catch (XMLStreamException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/XMLLoader#load(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","pathOld":"solr/src/java/org/apache/solr/handler/XMLLoader#load(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","sourceNew":"  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) throws Exception {\n    errHeader = \"XMLLoader: \" + stream.getSourceInfo();\n    Reader reader = null;\n    try {\n      reader = stream.getReader();\n      if (XmlUpdateRequestHandler.log.isTraceEnabled()) {\n        String body = IOUtils.toString(reader);\n        XmlUpdateRequestHandler.log.trace(\"body\", body);\n        reader = new StringReader(body);\n      }\n\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(reader);\n      this.processUpdate(req, processor, parser);\n    }\n    catch (XMLStreamException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","sourceOld":"  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) throws Exception {\n    errHeader = \"XMLLoader: \" + stream.getSourceInfo();\n    Reader reader = null;\n    try {\n      reader = stream.getReader();\n      if (XmlUpdateRequestHandler.log.isTraceEnabled()) {\n        String body = IOUtils.toString(reader);\n        XmlUpdateRequestHandler.log.trace(\"body\", body);\n        reader = new StringReader(body);\n      }\n\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(reader);\n      this.processUpdate(processor, parser);\n    }\n    catch (XMLStreamException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","date":1296400215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/XMLLoader#load(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","pathOld":"solr/src/java/org/apache/solr/handler/XMLLoader#load(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","sourceNew":"  @Override\n  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) throws Exception {\n    errHeader = \"XMLLoader: \" + stream.getSourceInfo();\n    Reader reader = null;\n    try {\n      reader = stream.getReader();\n      if (XmlUpdateRequestHandler.log.isTraceEnabled()) {\n        String body = IOUtils.toString(reader);\n        XmlUpdateRequestHandler.log.trace(\"body\", body);\n        reader = new StringReader(body);\n      }\n\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(reader);\n      this.processUpdate(req, processor, parser);\n    }\n    catch (XMLStreamException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","sourceOld":"  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) throws Exception {\n    errHeader = \"XMLLoader: \" + stream.getSourceInfo();\n    Reader reader = null;\n    try {\n      reader = stream.getReader();\n      if (XmlUpdateRequestHandler.log.isTraceEnabled()) {\n        String body = IOUtils.toString(reader);\n        XmlUpdateRequestHandler.log.trace(\"body\", body);\n        reader = new StringReader(body);\n      }\n\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(reader);\n      this.processUpdate(req, processor, parser);\n    }\n    catch (XMLStreamException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d267675046c28d8a759125eae0a6fcdeb3d1456","date":1296744546,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/XMLLoader#load(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","pathOld":"solr/src/java/org/apache/solr/handler/XMLLoader#load(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","sourceNew":"  @Override\n  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) throws Exception {\n    errHeader = \"XMLLoader: \" + stream.getSourceInfo();\n    InputStream is = null;\n    XMLStreamReader parser = null;\n    try {\n      is = stream.getStream();\n      final String charset = ContentStreamBase.getCharsetFromContentType(stream.getContentType());\n      if (XmlUpdateRequestHandler.log.isTraceEnabled()) {\n        final byte[] body = IOUtils.toByteArray(is);\n        // TODO: The charset may be wrong, as the real charset is later\n        // determined by the XML parser, the content-type is only used as a hint!\n        XmlUpdateRequestHandler.log.trace(\"body\", new String(body, (charset == null) ?\n          ContentStreamBase.DEFAULT_CHARSET : charset));\n        IOUtils.closeQuietly(is);\n        is = new ByteArrayInputStream(body);\n      }\n      parser = (charset == null) ?\n        inputFactory.createXMLStreamReader(is) : inputFactory.createXMLStreamReader(is, charset);\n      this.processUpdate(req, processor, parser);\n    } catch (XMLStreamException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n    } finally {\n      if (parser != null) parser.close();\n      IOUtils.closeQuietly(is);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) throws Exception {\n    errHeader = \"XMLLoader: \" + stream.getSourceInfo();\n    Reader reader = null;\n    try {\n      reader = stream.getReader();\n      if (XmlUpdateRequestHandler.log.isTraceEnabled()) {\n        String body = IOUtils.toString(reader);\n        XmlUpdateRequestHandler.log.trace(\"body\", body);\n        reader = new StringReader(body);\n      }\n\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(reader);\n      this.processUpdate(req, processor, parser);\n    }\n    catch (XMLStreamException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/XMLLoader#load(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","pathOld":"solr/src/java/org/apache/solr/handler/XMLLoader#load(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","sourceNew":"  @Override\n  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) throws Exception {\n    errHeader = \"XMLLoader: \" + stream.getSourceInfo();\n    InputStream is = null;\n    XMLStreamReader parser = null;\n    try {\n      is = stream.getStream();\n      final String charset = ContentStreamBase.getCharsetFromContentType(stream.getContentType());\n      if (XmlUpdateRequestHandler.log.isTraceEnabled()) {\n        final byte[] body = IOUtils.toByteArray(is);\n        // TODO: The charset may be wrong, as the real charset is later\n        // determined by the XML parser, the content-type is only used as a hint!\n        XmlUpdateRequestHandler.log.trace(\"body\", new String(body, (charset == null) ?\n          ContentStreamBase.DEFAULT_CHARSET : charset));\n        IOUtils.closeQuietly(is);\n        is = new ByteArrayInputStream(body);\n      }\n      parser = (charset == null) ?\n        inputFactory.createXMLStreamReader(is) : inputFactory.createXMLStreamReader(is, charset);\n      this.processUpdate(req, processor, parser);\n    } catch (XMLStreamException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n    } finally {\n      if (parser != null) parser.close();\n      IOUtils.closeQuietly(is);\n    }\n  }\n\n","sourceOld":"  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) throws Exception {\n    errHeader = \"XMLLoader: \" + stream.getSourceInfo();\n    Reader reader = null;\n    try {\n      reader = stream.getReader();\n      if (XmlUpdateRequestHandler.log.isTraceEnabled()) {\n        String body = IOUtils.toString(reader);\n        XmlUpdateRequestHandler.log.trace(\"body\", body);\n        reader = new StringReader(body);\n      }\n\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(reader);\n      this.processUpdate(req, processor, parser);\n    }\n    catch (XMLStreamException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/XMLLoader#load(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","pathOld":"solr/src/java/org/apache/solr/handler/XMLLoader#load(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","sourceNew":"  @Override\n  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) throws Exception {\n    errHeader = \"XMLLoader: \" + stream.getSourceInfo();\n    InputStream is = null;\n    XMLStreamReader parser = null;\n    try {\n      is = stream.getStream();\n      final String charset = ContentStreamBase.getCharsetFromContentType(stream.getContentType());\n      if (XmlUpdateRequestHandler.log.isTraceEnabled()) {\n        final byte[] body = IOUtils.toByteArray(is);\n        // TODO: The charset may be wrong, as the real charset is later\n        // determined by the XML parser, the content-type is only used as a hint!\n        XmlUpdateRequestHandler.log.trace(\"body\", new String(body, (charset == null) ?\n          ContentStreamBase.DEFAULT_CHARSET : charset));\n        IOUtils.closeQuietly(is);\n        is = new ByteArrayInputStream(body);\n      }\n      parser = (charset == null) ?\n        inputFactory.createXMLStreamReader(is) : inputFactory.createXMLStreamReader(is, charset);\n      this.processUpdate(req, processor, parser);\n    } catch (XMLStreamException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n    } finally {\n      if (parser != null) parser.close();\n      IOUtils.closeQuietly(is);\n    }\n  }\n\n","sourceOld":"  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) throws Exception {\n    errHeader = \"XMLLoader: \" + stream.getSourceInfo();\n    Reader reader = null;\n    try {\n      reader = stream.getReader();\n      if (XmlUpdateRequestHandler.log.isTraceEnabled()) {\n        String body = IOUtils.toString(reader);\n        XmlUpdateRequestHandler.log.trace(\"body\", body);\n        reader = new StringReader(body);\n      }\n\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(reader);\n      this.processUpdate(req, processor, parser);\n    }\n    catch (XMLStreamException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/XMLLoader#load(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","pathOld":"solr/src/java/org/apache/solr/handler/XMLLoader#load(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","sourceNew":"  @Override\n  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) throws Exception {\n    errHeader = \"XMLLoader: \" + stream.getSourceInfo();\n    InputStream is = null;\n    XMLStreamReader parser = null;\n    try {\n      is = stream.getStream();\n      final String charset = ContentStreamBase.getCharsetFromContentType(stream.getContentType());\n      if (XmlUpdateRequestHandler.log.isTraceEnabled()) {\n        final byte[] body = IOUtils.toByteArray(is);\n        // TODO: The charset may be wrong, as the real charset is later\n        // determined by the XML parser, the content-type is only used as a hint!\n        XmlUpdateRequestHandler.log.trace(\"body\", new String(body, (charset == null) ?\n          ContentStreamBase.DEFAULT_CHARSET : charset));\n        IOUtils.closeQuietly(is);\n        is = new ByteArrayInputStream(body);\n      }\n      parser = (charset == null) ?\n        inputFactory.createXMLStreamReader(is) : inputFactory.createXMLStreamReader(is, charset);\n      this.processUpdate(req, processor, parser);\n    } catch (XMLStreamException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n    } finally {\n      if (parser != null) parser.close();\n      IOUtils.closeQuietly(is);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) throws Exception {\n    errHeader = \"XMLLoader: \" + stream.getSourceInfo();\n    InputStream is = null;\n    XMLStreamReader parser = null;\n    try {\n      is = stream.getStream();\n      final String charset = ContentStreamBase.getCharsetFromContentType(stream.getContentType());\n      if (XmlUpdateRequestHandler.log.isTraceEnabled()) {\n        final byte[] body = IOUtils.toByteArray(is);\n        // TODO: The charset may be wrong, as the real charset is later\n        // determined by the XML parser, the content-type is only used as a hint!\n        XmlUpdateRequestHandler.log.trace(\"body\", new String(body, (charset == null) ?\n          ContentStreamBase.DEFAULT_CHARSET : charset));\n        IOUtils.closeQuietly(is);\n        is = new ByteArrayInputStream(body);\n      }\n      parser = (charset == null) ?\n        inputFactory.createXMLStreamReader(is) : inputFactory.createXMLStreamReader(is, charset);\n      this.processUpdate(req, processor, parser);\n    } catch (XMLStreamException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n    } finally {\n      if (parser != null) parser.close();\n      IOUtils.closeQuietly(is);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/XMLLoader#load(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","pathOld":"solr/src/java/org/apache/solr/handler/XMLLoader#load(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","sourceNew":"  @Override\n  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) throws Exception {\n    errHeader = \"XMLLoader: \" + stream.getSourceInfo();\n    InputStream is = null;\n    XMLStreamReader parser = null;\n    try {\n      is = stream.getStream();\n      final String charset = ContentStreamBase.getCharsetFromContentType(stream.getContentType());\n      if (XmlUpdateRequestHandler.log.isTraceEnabled()) {\n        final byte[] body = IOUtils.toByteArray(is);\n        // TODO: The charset may be wrong, as the real charset is later\n        // determined by the XML parser, the content-type is only used as a hint!\n        XmlUpdateRequestHandler.log.trace(\"body\", new String(body, (charset == null) ?\n          ContentStreamBase.DEFAULT_CHARSET : charset));\n        IOUtils.closeQuietly(is);\n        is = new ByteArrayInputStream(body);\n      }\n      parser = (charset == null) ?\n        inputFactory.createXMLStreamReader(is) : inputFactory.createXMLStreamReader(is, charset);\n      this.processUpdate(req, processor, parser);\n    } catch (XMLStreamException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n    } finally {\n      if (parser != null) parser.close();\n      IOUtils.closeQuietly(is);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) throws Exception {\n    errHeader = \"XMLLoader: \" + stream.getSourceInfo();\n    InputStream is = null;\n    XMLStreamReader parser = null;\n    try {\n      is = stream.getStream();\n      final String charset = ContentStreamBase.getCharsetFromContentType(stream.getContentType());\n      if (XmlUpdateRequestHandler.log.isTraceEnabled()) {\n        final byte[] body = IOUtils.toByteArray(is);\n        // TODO: The charset may be wrong, as the real charset is later\n        // determined by the XML parser, the content-type is only used as a hint!\n        XmlUpdateRequestHandler.log.trace(\"body\", new String(body, (charset == null) ?\n          ContentStreamBase.DEFAULT_CHARSET : charset));\n        IOUtils.closeQuietly(is);\n        is = new ByteArrayInputStream(body);\n      }\n      parser = (charset == null) ?\n        inputFactory.createXMLStreamReader(is) : inputFactory.createXMLStreamReader(is, charset);\n      this.processUpdate(req, processor, parser);\n    } catch (XMLStreamException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n    } finally {\n      if (parser != null) parser.close();\n      IOUtils.closeQuietly(is);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/XMLLoader#load(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","pathOld":"solr/src/java/org/apache/solr/handler/XMLLoader#load(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","sourceNew":"  @Override\n  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) throws Exception {\n    errHeader = \"XMLLoader: \" + stream.getSourceInfo();\n    InputStream is = null;\n    XMLStreamReader parser = null;\n    try {\n      is = stream.getStream();\n      final String charset = ContentStreamBase.getCharsetFromContentType(stream.getContentType());\n      if (XmlUpdateRequestHandler.log.isTraceEnabled()) {\n        final byte[] body = IOUtils.toByteArray(is);\n        // TODO: The charset may be wrong, as the real charset is later\n        // determined by the XML parser, the content-type is only used as a hint!\n        XmlUpdateRequestHandler.log.trace(\"body\", new String(body, (charset == null) ?\n          ContentStreamBase.DEFAULT_CHARSET : charset));\n        IOUtils.closeQuietly(is);\n        is = new ByteArrayInputStream(body);\n      }\n      parser = (charset == null) ?\n        inputFactory.createXMLStreamReader(is) : inputFactory.createXMLStreamReader(is, charset);\n      this.processUpdate(req, processor, parser);\n    } catch (XMLStreamException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n    } finally {\n      if (parser != null) parser.close();\n      IOUtils.closeQuietly(is);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) throws Exception {\n    errHeader = \"XMLLoader: \" + stream.getSourceInfo();\n    InputStream is = null;\n    XMLStreamReader parser = null;\n    try {\n      is = stream.getStream();\n      final String charset = ContentStreamBase.getCharsetFromContentType(stream.getContentType());\n      if (XmlUpdateRequestHandler.log.isTraceEnabled()) {\n        final byte[] body = IOUtils.toByteArray(is);\n        // TODO: The charset may be wrong, as the real charset is later\n        // determined by the XML parser, the content-type is only used as a hint!\n        XmlUpdateRequestHandler.log.trace(\"body\", new String(body, (charset == null) ?\n          ContentStreamBase.DEFAULT_CHARSET : charset));\n        IOUtils.closeQuietly(is);\n        is = new ByteArrayInputStream(body);\n      }\n      parser = (charset == null) ?\n        inputFactory.createXMLStreamReader(is) : inputFactory.createXMLStreamReader(is, charset);\n      this.processUpdate(req, processor, parser);\n    } catch (XMLStreamException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n    } finally {\n      if (parser != null) parser.close();\n      IOUtils.closeQuietly(is);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa"],"70ad682703b8585f5d0a637efec044d57ec05efb":["1da8d55113b689b06716246649de6f62430f15c0","5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["5d267675046c28d8a759125eae0a6fcdeb3d1456","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["1da8d55113b689b06716246649de6f62430f15c0","5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa"],"5d267675046c28d8a759125eae0a6fcdeb3d1456":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["5d267675046c28d8a759125eae0a6fcdeb3d1456"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","5d267675046c28d8a759125eae0a6fcdeb3d1456"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["5d267675046c28d8a759125eae0a6fcdeb3d1456"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa":["1da8d55113b689b06716246649de6f62430f15c0"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","5d267675046c28d8a759125eae0a6fcdeb3d1456"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["5d267675046c28d8a759125eae0a6fcdeb3d1456"],"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"1da8d55113b689b06716246649de6f62430f15c0":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"5d267675046c28d8a759125eae0a6fcdeb3d1456":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}