{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestStemmerOverrideFilter#testRandomRealisticWhiteSpace().mjava","commits":[{"id":"7476b30b7c03f9027676c9df28fda37629da2c97","date":1364206093,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestStemmerOverrideFilter#testRandomRealisticWhiteSpace().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandomRealisticWhiteSpace() throws IOException {\n    Map<String,String> map = new HashMap<String,String>();\n    int numTerms = atLeast(50);\n    for (int i = 0; i < numTerms; i++) {\n      String randomRealisticUnicodeString = _TestUtil\n          .randomRealisticUnicodeString(random());\n      char[] charArray = randomRealisticUnicodeString.toCharArray();\n      StringBuilder builder = new StringBuilder();\n      for (int j = 0; j < charArray.length;) {\n        int cp = Character.codePointAt(charArray, j);\n        if (!Character.isWhitespace(cp)) {\n          builder.appendCodePoint(cp);\n        }\n        j += Character.charCount(cp);\n      }\n      if (builder.length() > 0) {\n        String value = _TestUtil.randomSimpleString(random());\n        map.put(builder.toString(),\n            value.isEmpty() ? \"a\" : value);\n        \n      }\n    }\n    if (map.isEmpty()) {\n      map.put(\"booked\", \"books\");\n    }\n    StemmerOverrideFilter.Builder builder = new StemmerOverrideFilter.Builder(random().nextBoolean());\n    Set<Entry<String,String>> entrySet = map.entrySet();\n    StringBuilder input = new StringBuilder();\n    List<String> output = new ArrayList<String>();\n    for (Entry<String,String> entry : entrySet) {\n      builder.add(entry.getKey(), entry.getValue());\n      if (random().nextBoolean() || output.isEmpty()) {\n        input.append(entry.getKey()).append(\" \");\n        output.add(entry.getValue());\n      }\n    }\n    Tokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT,\n        new StringReader(input.toString()));\n    TokenStream stream = new PorterStemFilter(new StemmerOverrideFilter(\n        tokenizer, builder.build()));\n    assertTokenStreamContents(stream, output.toArray(new String[0]));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704","date":1371043069,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestStemmerOverrideFilter#testRandomRealisticWhiteSpace().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestStemmerOverrideFilter#testRandomRealisticWhiteSpace().mjava","sourceNew":"  public void testRandomRealisticWhiteSpace() throws IOException {\n    Map<String,String> map = new HashMap<String,String>();\n    int numTerms = atLeast(50);\n    for (int i = 0; i < numTerms; i++) {\n      String randomRealisticUnicodeString = _TestUtil\n          .randomRealisticUnicodeString(random());\n      char[] charArray = randomRealisticUnicodeString.toCharArray();\n      StringBuilder builder = new StringBuilder();\n      for (int j = 0; j < charArray.length;) {\n        int cp = Character.codePointAt(charArray, j, charArray.length);\n        if (!Character.isWhitespace(cp)) {\n          builder.appendCodePoint(cp);\n        }\n        j += Character.charCount(cp);\n      }\n      if (builder.length() > 0) {\n        String value = _TestUtil.randomSimpleString(random());\n        map.put(builder.toString(),\n            value.isEmpty() ? \"a\" : value);\n        \n      }\n    }\n    if (map.isEmpty()) {\n      map.put(\"booked\", \"books\");\n    }\n    StemmerOverrideFilter.Builder builder = new StemmerOverrideFilter.Builder(random().nextBoolean());\n    Set<Entry<String,String>> entrySet = map.entrySet();\n    StringBuilder input = new StringBuilder();\n    List<String> output = new ArrayList<String>();\n    for (Entry<String,String> entry : entrySet) {\n      builder.add(entry.getKey(), entry.getValue());\n      if (random().nextBoolean() || output.isEmpty()) {\n        input.append(entry.getKey()).append(\" \");\n        output.add(entry.getValue());\n      }\n    }\n    Tokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT,\n        new StringReader(input.toString()));\n    TokenStream stream = new PorterStemFilter(new StemmerOverrideFilter(\n        tokenizer, builder.build()));\n    assertTokenStreamContents(stream, output.toArray(new String[0]));\n  }\n\n","sourceOld":"  public void testRandomRealisticWhiteSpace() throws IOException {\n    Map<String,String> map = new HashMap<String,String>();\n    int numTerms = atLeast(50);\n    for (int i = 0; i < numTerms; i++) {\n      String randomRealisticUnicodeString = _TestUtil\n          .randomRealisticUnicodeString(random());\n      char[] charArray = randomRealisticUnicodeString.toCharArray();\n      StringBuilder builder = new StringBuilder();\n      for (int j = 0; j < charArray.length;) {\n        int cp = Character.codePointAt(charArray, j);\n        if (!Character.isWhitespace(cp)) {\n          builder.appendCodePoint(cp);\n        }\n        j += Character.charCount(cp);\n      }\n      if (builder.length() > 0) {\n        String value = _TestUtil.randomSimpleString(random());\n        map.put(builder.toString(),\n            value.isEmpty() ? \"a\" : value);\n        \n      }\n    }\n    if (map.isEmpty()) {\n      map.put(\"booked\", \"books\");\n    }\n    StemmerOverrideFilter.Builder builder = new StemmerOverrideFilter.Builder(random().nextBoolean());\n    Set<Entry<String,String>> entrySet = map.entrySet();\n    StringBuilder input = new StringBuilder();\n    List<String> output = new ArrayList<String>();\n    for (Entry<String,String> entry : entrySet) {\n      builder.add(entry.getKey(), entry.getValue());\n      if (random().nextBoolean() || output.isEmpty()) {\n        input.append(entry.getKey()).append(\" \");\n        output.add(entry.getValue());\n      }\n    }\n    Tokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT,\n        new StringReader(input.toString()));\n    TokenStream stream = new PorterStemFilter(new StemmerOverrideFilter(\n        tokenizer, builder.build()));\n    assertTokenStreamContents(stream, output.toArray(new String[0]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestStemmerOverrideFilter#testRandomRealisticWhiteSpace().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestStemmerOverrideFilter#testRandomRealisticWhiteSpace().mjava","sourceNew":"  public void testRandomRealisticWhiteSpace() throws IOException {\n    Map<String,String> map = new HashMap<String,String>();\n    int numTerms = atLeast(50);\n    for (int i = 0; i < numTerms; i++) {\n      String randomRealisticUnicodeString = _TestUtil\n          .randomRealisticUnicodeString(random());\n      char[] charArray = randomRealisticUnicodeString.toCharArray();\n      StringBuilder builder = new StringBuilder();\n      for (int j = 0; j < charArray.length;) {\n        int cp = Character.codePointAt(charArray, j, charArray.length);\n        if (!Character.isWhitespace(cp)) {\n          builder.appendCodePoint(cp);\n        }\n        j += Character.charCount(cp);\n      }\n      if (builder.length() > 0) {\n        String value = _TestUtil.randomSimpleString(random());\n        map.put(builder.toString(),\n            value.isEmpty() ? \"a\" : value);\n        \n      }\n    }\n    if (map.isEmpty()) {\n      map.put(\"booked\", \"books\");\n    }\n    StemmerOverrideFilter.Builder builder = new StemmerOverrideFilter.Builder(random().nextBoolean());\n    Set<Entry<String,String>> entrySet = map.entrySet();\n    StringBuilder input = new StringBuilder();\n    List<String> output = new ArrayList<String>();\n    for (Entry<String,String> entry : entrySet) {\n      builder.add(entry.getKey(), entry.getValue());\n      if (random().nextBoolean() || output.isEmpty()) {\n        input.append(entry.getKey()).append(\" \");\n        output.add(entry.getValue());\n      }\n    }\n    Tokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT);\n    tokenizer.setReader(new StringReader(input.toString()));\n    TokenStream stream = new PorterStemFilter(new StemmerOverrideFilter(\n        tokenizer, builder.build()));\n    assertTokenStreamContents(stream, output.toArray(new String[0]));\n  }\n\n","sourceOld":"  public void testRandomRealisticWhiteSpace() throws IOException {\n    Map<String,String> map = new HashMap<String,String>();\n    int numTerms = atLeast(50);\n    for (int i = 0; i < numTerms; i++) {\n      String randomRealisticUnicodeString = _TestUtil\n          .randomRealisticUnicodeString(random());\n      char[] charArray = randomRealisticUnicodeString.toCharArray();\n      StringBuilder builder = new StringBuilder();\n      for (int j = 0; j < charArray.length;) {\n        int cp = Character.codePointAt(charArray, j, charArray.length);\n        if (!Character.isWhitespace(cp)) {\n          builder.appendCodePoint(cp);\n        }\n        j += Character.charCount(cp);\n      }\n      if (builder.length() > 0) {\n        String value = _TestUtil.randomSimpleString(random());\n        map.put(builder.toString(),\n            value.isEmpty() ? \"a\" : value);\n        \n      }\n    }\n    if (map.isEmpty()) {\n      map.put(\"booked\", \"books\");\n    }\n    StemmerOverrideFilter.Builder builder = new StemmerOverrideFilter.Builder(random().nextBoolean());\n    Set<Entry<String,String>> entrySet = map.entrySet();\n    StringBuilder input = new StringBuilder();\n    List<String> output = new ArrayList<String>();\n    for (Entry<String,String> entry : entrySet) {\n      builder.add(entry.getKey(), entry.getValue());\n      if (random().nextBoolean() || output.isEmpty()) {\n        input.append(entry.getKey()).append(\" \");\n        output.add(entry.getValue());\n      }\n    }\n    Tokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT,\n        new StringReader(input.toString()));\n    TokenStream stream = new PorterStemFilter(new StemmerOverrideFilter(\n        tokenizer, builder.build()));\n    assertTokenStreamContents(stream, output.toArray(new String[0]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestStemmerOverrideFilter#testRandomRealisticWhiteSpace().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestStemmerOverrideFilter#testRandomRealisticWhiteSpace().mjava","sourceNew":"  public void testRandomRealisticWhiteSpace() throws IOException {\n    Map<String,String> map = new HashMap<String,String>();\n    int numTerms = atLeast(50);\n    for (int i = 0; i < numTerms; i++) {\n      String randomRealisticUnicodeString = TestUtil\n          .randomRealisticUnicodeString(random());\n      char[] charArray = randomRealisticUnicodeString.toCharArray();\n      StringBuilder builder = new StringBuilder();\n      for (int j = 0; j < charArray.length;) {\n        int cp = Character.codePointAt(charArray, j, charArray.length);\n        if (!Character.isWhitespace(cp)) {\n          builder.appendCodePoint(cp);\n        }\n        j += Character.charCount(cp);\n      }\n      if (builder.length() > 0) {\n        String value = TestUtil.randomSimpleString(random());\n        map.put(builder.toString(),\n            value.isEmpty() ? \"a\" : value);\n        \n      }\n    }\n    if (map.isEmpty()) {\n      map.put(\"booked\", \"books\");\n    }\n    StemmerOverrideFilter.Builder builder = new StemmerOverrideFilter.Builder(random().nextBoolean());\n    Set<Entry<String,String>> entrySet = map.entrySet();\n    StringBuilder input = new StringBuilder();\n    List<String> output = new ArrayList<String>();\n    for (Entry<String,String> entry : entrySet) {\n      builder.add(entry.getKey(), entry.getValue());\n      if (random().nextBoolean() || output.isEmpty()) {\n        input.append(entry.getKey()).append(\" \");\n        output.add(entry.getValue());\n      }\n    }\n    Tokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT);\n    tokenizer.setReader(new StringReader(input.toString()));\n    TokenStream stream = new PorterStemFilter(new StemmerOverrideFilter(\n        tokenizer, builder.build()));\n    assertTokenStreamContents(stream, output.toArray(new String[0]));\n  }\n\n","sourceOld":"  public void testRandomRealisticWhiteSpace() throws IOException {\n    Map<String,String> map = new HashMap<String,String>();\n    int numTerms = atLeast(50);\n    for (int i = 0; i < numTerms; i++) {\n      String randomRealisticUnicodeString = _TestUtil\n          .randomRealisticUnicodeString(random());\n      char[] charArray = randomRealisticUnicodeString.toCharArray();\n      StringBuilder builder = new StringBuilder();\n      for (int j = 0; j < charArray.length;) {\n        int cp = Character.codePointAt(charArray, j, charArray.length);\n        if (!Character.isWhitespace(cp)) {\n          builder.appendCodePoint(cp);\n        }\n        j += Character.charCount(cp);\n      }\n      if (builder.length() > 0) {\n        String value = _TestUtil.randomSimpleString(random());\n        map.put(builder.toString(),\n            value.isEmpty() ? \"a\" : value);\n        \n      }\n    }\n    if (map.isEmpty()) {\n      map.put(\"booked\", \"books\");\n    }\n    StemmerOverrideFilter.Builder builder = new StemmerOverrideFilter.Builder(random().nextBoolean());\n    Set<Entry<String,String>> entrySet = map.entrySet();\n    StringBuilder input = new StringBuilder();\n    List<String> output = new ArrayList<String>();\n    for (Entry<String,String> entry : entrySet) {\n      builder.add(entry.getKey(), entry.getValue());\n      if (random().nextBoolean() || output.isEmpty()) {\n        input.append(entry.getKey()).append(\" \");\n        output.add(entry.getValue());\n      }\n    }\n    Tokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT);\n    tokenizer.setReader(new StringReader(input.toString()));\n    TokenStream stream = new PorterStemFilter(new StemmerOverrideFilter(\n        tokenizer, builder.build()));\n    assertTokenStreamContents(stream, output.toArray(new String[0]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestStemmerOverrideFilter#testRandomRealisticWhiteSpace().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestStemmerOverrideFilter#testRandomRealisticWhiteSpace().mjava","sourceNew":"  public void testRandomRealisticWhiteSpace() throws IOException {\n    Map<String,String> map = new HashMap<>();\n    int numTerms = atLeast(50);\n    for (int i = 0; i < numTerms; i++) {\n      String randomRealisticUnicodeString = TestUtil\n          .randomRealisticUnicodeString(random());\n      char[] charArray = randomRealisticUnicodeString.toCharArray();\n      StringBuilder builder = new StringBuilder();\n      for (int j = 0; j < charArray.length;) {\n        int cp = Character.codePointAt(charArray, j, charArray.length);\n        if (!Character.isWhitespace(cp)) {\n          builder.appendCodePoint(cp);\n        }\n        j += Character.charCount(cp);\n      }\n      if (builder.length() > 0) {\n        String value = TestUtil.randomSimpleString(random());\n        map.put(builder.toString(),\n            value.isEmpty() ? \"a\" : value);\n        \n      }\n    }\n    if (map.isEmpty()) {\n      map.put(\"booked\", \"books\");\n    }\n    StemmerOverrideFilter.Builder builder = new StemmerOverrideFilter.Builder(random().nextBoolean());\n    Set<Entry<String,String>> entrySet = map.entrySet();\n    StringBuilder input = new StringBuilder();\n    List<String> output = new ArrayList<>();\n    for (Entry<String,String> entry : entrySet) {\n      builder.add(entry.getKey(), entry.getValue());\n      if (random().nextBoolean() || output.isEmpty()) {\n        input.append(entry.getKey()).append(\" \");\n        output.add(entry.getValue());\n      }\n    }\n    Tokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT);\n    tokenizer.setReader(new StringReader(input.toString()));\n    TokenStream stream = new PorterStemFilter(new StemmerOverrideFilter(\n        tokenizer, builder.build()));\n    assertTokenStreamContents(stream, output.toArray(new String[0]));\n  }\n\n","sourceOld":"  public void testRandomRealisticWhiteSpace() throws IOException {\n    Map<String,String> map = new HashMap<String,String>();\n    int numTerms = atLeast(50);\n    for (int i = 0; i < numTerms; i++) {\n      String randomRealisticUnicodeString = TestUtil\n          .randomRealisticUnicodeString(random());\n      char[] charArray = randomRealisticUnicodeString.toCharArray();\n      StringBuilder builder = new StringBuilder();\n      for (int j = 0; j < charArray.length;) {\n        int cp = Character.codePointAt(charArray, j, charArray.length);\n        if (!Character.isWhitespace(cp)) {\n          builder.appendCodePoint(cp);\n        }\n        j += Character.charCount(cp);\n      }\n      if (builder.length() > 0) {\n        String value = TestUtil.randomSimpleString(random());\n        map.put(builder.toString(),\n            value.isEmpty() ? \"a\" : value);\n        \n      }\n    }\n    if (map.isEmpty()) {\n      map.put(\"booked\", \"books\");\n    }\n    StemmerOverrideFilter.Builder builder = new StemmerOverrideFilter.Builder(random().nextBoolean());\n    Set<Entry<String,String>> entrySet = map.entrySet();\n    StringBuilder input = new StringBuilder();\n    List<String> output = new ArrayList<String>();\n    for (Entry<String,String> entry : entrySet) {\n      builder.add(entry.getKey(), entry.getValue());\n      if (random().nextBoolean() || output.isEmpty()) {\n        input.append(entry.getKey()).append(\" \");\n        output.add(entry.getValue());\n      }\n    }\n    Tokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT);\n    tokenizer.setReader(new StringReader(input.toString()));\n    TokenStream stream = new PorterStemFilter(new StemmerOverrideFilter(\n        tokenizer, builder.build()));\n    assertTokenStreamContents(stream, output.toArray(new String[0]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestStemmerOverrideFilter#testRandomRealisticWhiteSpace().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestStemmerOverrideFilter#testRandomRealisticWhiteSpace().mjava","sourceNew":"  public void testRandomRealisticWhiteSpace() throws IOException {\n    Map<String,String> map = new HashMap<>();\n    int numTerms = atLeast(50);\n    for (int i = 0; i < numTerms; i++) {\n      String randomRealisticUnicodeString = TestUtil\n          .randomRealisticUnicodeString(random());\n      char[] charArray = randomRealisticUnicodeString.toCharArray();\n      StringBuilder builder = new StringBuilder();\n      for (int j = 0; j < charArray.length;) {\n        int cp = Character.codePointAt(charArray, j, charArray.length);\n        if (!Character.isWhitespace(cp)) {\n          builder.appendCodePoint(cp);\n        }\n        j += Character.charCount(cp);\n      }\n      if (builder.length() > 0) {\n        String value = TestUtil.randomSimpleString(random());\n        map.put(builder.toString(),\n            value.isEmpty() ? \"a\" : value);\n        \n      }\n    }\n    if (map.isEmpty()) {\n      map.put(\"booked\", \"books\");\n    }\n    StemmerOverrideFilter.Builder builder = new StemmerOverrideFilter.Builder(random().nextBoolean());\n    Set<Entry<String,String>> entrySet = map.entrySet();\n    StringBuilder input = new StringBuilder();\n    List<String> output = new ArrayList<>();\n    for (Entry<String,String> entry : entrySet) {\n      builder.add(entry.getKey(), entry.getValue());\n      if (random().nextBoolean() || output.isEmpty()) {\n        input.append(entry.getKey()).append(\" \");\n        output.add(entry.getValue());\n      }\n    }\n    Tokenizer tokenizer = new WhitespaceTokenizer();\n    tokenizer.setReader(new StringReader(input.toString()));\n    TokenStream stream = new PorterStemFilter(new StemmerOverrideFilter(\n        tokenizer, builder.build()));\n    assertTokenStreamContents(stream, output.toArray(new String[0]));\n  }\n\n","sourceOld":"  public void testRandomRealisticWhiteSpace() throws IOException {\n    Map<String,String> map = new HashMap<>();\n    int numTerms = atLeast(50);\n    for (int i = 0; i < numTerms; i++) {\n      String randomRealisticUnicodeString = TestUtil\n          .randomRealisticUnicodeString(random());\n      char[] charArray = randomRealisticUnicodeString.toCharArray();\n      StringBuilder builder = new StringBuilder();\n      for (int j = 0; j < charArray.length;) {\n        int cp = Character.codePointAt(charArray, j, charArray.length);\n        if (!Character.isWhitespace(cp)) {\n          builder.appendCodePoint(cp);\n        }\n        j += Character.charCount(cp);\n      }\n      if (builder.length() > 0) {\n        String value = TestUtil.randomSimpleString(random());\n        map.put(builder.toString(),\n            value.isEmpty() ? \"a\" : value);\n        \n      }\n    }\n    if (map.isEmpty()) {\n      map.put(\"booked\", \"books\");\n    }\n    StemmerOverrideFilter.Builder builder = new StemmerOverrideFilter.Builder(random().nextBoolean());\n    Set<Entry<String,String>> entrySet = map.entrySet();\n    StringBuilder input = new StringBuilder();\n    List<String> output = new ArrayList<>();\n    for (Entry<String,String> entry : entrySet) {\n      builder.add(entry.getKey(), entry.getValue());\n      if (random().nextBoolean() || output.isEmpty()) {\n        input.append(entry.getKey()).append(\" \");\n        output.add(entry.getValue());\n      }\n    }\n    Tokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT);\n    tokenizer.setReader(new StringReader(input.toString()));\n    TokenStream stream = new PorterStemFilter(new StemmerOverrideFilter(\n        tokenizer, builder.build()));\n    assertTokenStreamContents(stream, output.toArray(new String[0]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestStemmerOverrideFilter#testRandomRealisticWhiteSpace().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestStemmerOverrideFilter#testRandomRealisticWhiteSpace().mjava","sourceNew":"  public void testRandomRealisticWhiteSpace() throws IOException {\n    Map<String,String> map = new HashMap<>();\n    int numTerms = atLeast(50);\n    for (int i = 0; i < numTerms; i++) {\n      String randomRealisticUnicodeString = TestUtil\n          .randomRealisticUnicodeString(random());\n      char[] charArray = randomRealisticUnicodeString.toCharArray();\n      StringBuilder builder = new StringBuilder();\n      for (int j = 0; j < charArray.length;) {\n        int cp = Character.codePointAt(charArray, j, charArray.length);\n        if (!Character.isWhitespace(cp)) {\n          builder.appendCodePoint(cp);\n        }\n        j += Character.charCount(cp);\n      }\n      if (builder.length() > 0) {\n        String value = TestUtil.randomSimpleString(random());\n        map.put(builder.toString(),\n            value.isEmpty() ? \"a\" : value);\n        \n      }\n    }\n    if (map.isEmpty()) {\n      map.put(\"booked\", \"books\");\n    }\n    StemmerOverrideFilter.Builder builder = new StemmerOverrideFilter.Builder(random().nextBoolean());\n    Set<Entry<String,String>> entrySet = map.entrySet();\n    StringBuilder input = new StringBuilder();\n    List<String> output = new ArrayList<>();\n    for (Entry<String,String> entry : entrySet) {\n      builder.add(entry.getKey(), entry.getValue());\n      if (random().nextBoolean() || output.isEmpty()) {\n        input.append(entry.getKey()).append(\" \");\n        output.add(entry.getValue());\n      }\n    }\n    Tokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT);\n    tokenizer.setReader(new StringReader(input.toString()));\n    TokenStream stream = new PorterStemFilter(new StemmerOverrideFilter(\n        tokenizer, builder.build()));\n    assertTokenStreamContents(stream, output.toArray(new String[0]));\n  }\n\n","sourceOld":"  public void testRandomRealisticWhiteSpace() throws IOException {\n    Map<String,String> map = new HashMap<>();\n    int numTerms = atLeast(50);\n    for (int i = 0; i < numTerms; i++) {\n      String randomRealisticUnicodeString = TestUtil\n          .randomRealisticUnicodeString(random());\n      char[] charArray = randomRealisticUnicodeString.toCharArray();\n      StringBuilder builder = new StringBuilder();\n      for (int j = 0; j < charArray.length;) {\n        int cp = Character.codePointAt(charArray, j, charArray.length);\n        if (!Character.isWhitespace(cp)) {\n          builder.appendCodePoint(cp);\n        }\n        j += Character.charCount(cp);\n      }\n      if (builder.length() > 0) {\n        String value = TestUtil.randomSimpleString(random());\n        map.put(builder.toString(),\n            value.isEmpty() ? \"a\" : value);\n        \n      }\n    }\n    if (map.isEmpty()) {\n      map.put(\"booked\", \"books\");\n    }\n    StemmerOverrideFilter.Builder builder = new StemmerOverrideFilter.Builder(random().nextBoolean());\n    Set<Entry<String,String>> entrySet = map.entrySet();\n    StringBuilder input = new StringBuilder();\n    List<String> output = new ArrayList<>();\n    for (Entry<String,String> entry : entrySet) {\n      builder.add(entry.getKey(), entry.getValue());\n      if (random().nextBoolean() || output.isEmpty()) {\n        input.append(entry.getKey()).append(\" \");\n        output.add(entry.getValue());\n      }\n    }\n    Tokenizer tokenizer = new WhitespaceTokenizer();\n    tokenizer.setReader(new StringReader(input.toString()));\n    TokenStream stream = new PorterStemFilter(new StemmerOverrideFilter(\n        tokenizer, builder.build()));\n    assertTokenStreamContents(stream, output.toArray(new String[0]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestStemmerOverrideFilter#testRandomRealisticWhiteSpace().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestStemmerOverrideFilter#testRandomRealisticWhiteSpace().mjava","sourceNew":"  public void testRandomRealisticWhiteSpace() throws IOException {\n    Map<String,String> map = new HashMap<>();\n    int numTerms = atLeast(50);\n    for (int i = 0; i < numTerms; i++) {\n      String randomRealisticUnicodeString = TestUtil\n          .randomRealisticUnicodeString(random());\n      char[] charArray = randomRealisticUnicodeString.toCharArray();\n      StringBuilder builder = new StringBuilder();\n      for (int j = 0; j < charArray.length;) {\n        int cp = Character.codePointAt(charArray, j, charArray.length);\n        if (!Character.isWhitespace(cp)) {\n          builder.appendCodePoint(cp);\n        }\n        j += Character.charCount(cp);\n      }\n      if (builder.length() > 0) {\n        String value = TestUtil.randomSimpleString(random());\n        map.put(builder.toString(),\n            value.isEmpty() ? \"a\" : value);\n        \n      }\n    }\n    if (map.isEmpty()) {\n      map.put(\"booked\", \"books\");\n    }\n    StemmerOverrideFilter.Builder builder = new StemmerOverrideFilter.Builder(random().nextBoolean());\n    Set<Entry<String,String>> entrySet = map.entrySet();\n    StringBuilder input = new StringBuilder();\n    List<String> output = new ArrayList<>();\n    for (Entry<String,String> entry : entrySet) {\n      builder.add(entry.getKey(), entry.getValue());\n      if (random().nextBoolean() || output.isEmpty()) {\n        input.append(entry.getKey()).append(\" \");\n        output.add(entry.getValue());\n      }\n    }\n    Tokenizer tokenizer = new WhitespaceTokenizer();\n    tokenizer.setReader(new StringReader(input.toString()));\n    TokenStream stream = new PorterStemFilter(new StemmerOverrideFilter(\n        tokenizer, builder.build()));\n    assertTokenStreamContents(stream, output.toArray(new String[0]));\n  }\n\n","sourceOld":"  public void testRandomRealisticWhiteSpace() throws IOException {\n    Map<String,String> map = new HashMap<>();\n    int numTerms = atLeast(50);\n    for (int i = 0; i < numTerms; i++) {\n      String randomRealisticUnicodeString = TestUtil\n          .randomRealisticUnicodeString(random());\n      char[] charArray = randomRealisticUnicodeString.toCharArray();\n      StringBuilder builder = new StringBuilder();\n      for (int j = 0; j < charArray.length;) {\n        int cp = Character.codePointAt(charArray, j, charArray.length);\n        if (!Character.isWhitespace(cp)) {\n          builder.appendCodePoint(cp);\n        }\n        j += Character.charCount(cp);\n      }\n      if (builder.length() > 0) {\n        String value = TestUtil.randomSimpleString(random());\n        map.put(builder.toString(),\n            value.isEmpty() ? \"a\" : value);\n        \n      }\n    }\n    if (map.isEmpty()) {\n      map.put(\"booked\", \"books\");\n    }\n    StemmerOverrideFilter.Builder builder = new StemmerOverrideFilter.Builder(random().nextBoolean());\n    Set<Entry<String,String>> entrySet = map.entrySet();\n    StringBuilder input = new StringBuilder();\n    List<String> output = new ArrayList<>();\n    for (Entry<String,String> entry : entrySet) {\n      builder.add(entry.getKey(), entry.getValue());\n      if (random().nextBoolean() || output.isEmpty()) {\n        input.append(entry.getKey()).append(\" \");\n        output.add(entry.getValue());\n      }\n    }\n    Tokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT);\n    tokenizer.setReader(new StringReader(input.toString()));\n    TokenStream stream = new PorterStemFilter(new StemmerOverrideFilter(\n        tokenizer, builder.build()));\n    assertTokenStreamContents(stream, output.toArray(new String[0]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0df9d8f376ca62f8eb9f1d20afaf38a3e9afc995","date":1427447832,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestStemmerOverrideFilter#testRandomRealisticWhiteSpace().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestStemmerOverrideFilter#testRandomRealisticWhiteSpace().mjava","sourceNew":"  public void testRandomRealisticWhiteSpace() throws IOException {\n    Map<String,String> map = new HashMap<>();\n    Set<String> seen = new HashSet<>();\n    int numTerms = atLeast(50);\n    boolean ignoreCase = random().nextBoolean();\n\n    CharacterUtils charUtils = CharacterUtils.getInstance();\n\n    for (int i = 0; i < numTerms; i++) {\n      String randomRealisticUnicodeString = TestUtil\n          .randomRealisticUnicodeString(random());\n      char[] charArray = randomRealisticUnicodeString.toCharArray();\n      StringBuilder builder = new StringBuilder();\n      for (int j = 0; j < charArray.length;) {\n        int cp = Character.codePointAt(charArray, j, charArray.length);\n        if (!Character.isWhitespace(cp)) {\n          builder.appendCodePoint(cp);\n        }\n        j += Character.charCount(cp);\n      }\n      if (builder.length() > 0) {\n        String inputValue = builder.toString();\n\n        // Make sure we don't try to add two inputs that vary only by case:\n        String seenInputValue;\n        if (ignoreCase) {\n          // TODO: can we simply use inputValue.toLowerCase(Locale.ROOT)???\n          char[] buffer = inputValue.toCharArray();\n          charUtils.toLowerCase(buffer, 0, buffer.length);\n          seenInputValue = buffer.toString();\n        } else {\n          seenInputValue = inputValue;\n        }\n\n        if (seen.contains(seenInputValue) == false) {\n          seen.add(seenInputValue);\n          String value = TestUtil.randomSimpleString(random());\n          map.put(inputValue,\n              value.isEmpty() ? \"a\" : value);\n        }\n      }\n    }\n    if (map.isEmpty()) {\n      map.put(\"booked\", \"books\");\n    }\n    StemmerOverrideFilter.Builder builder = new StemmerOverrideFilter.Builder(ignoreCase);\n    Set<Entry<String,String>> entrySet = map.entrySet();\n    StringBuilder input = new StringBuilder();\n    List<String> output = new ArrayList<>();\n    for (Entry<String,String> entry : entrySet) {\n      builder.add(entry.getKey(), entry.getValue());\n      if (random().nextBoolean() || output.isEmpty()) {\n        input.append(entry.getKey()).append(\" \");\n        output.add(entry.getValue());\n      }\n    }\n    Tokenizer tokenizer = new WhitespaceTokenizer();\n    tokenizer.setReader(new StringReader(input.toString()));\n    TokenStream stream = new PorterStemFilter(new StemmerOverrideFilter(\n        tokenizer, builder.build()));\n    assertTokenStreamContents(stream, output.toArray(new String[0]));\n  }\n\n","sourceOld":"  public void testRandomRealisticWhiteSpace() throws IOException {\n    Map<String,String> map = new HashMap<>();\n    int numTerms = atLeast(50);\n    for (int i = 0; i < numTerms; i++) {\n      String randomRealisticUnicodeString = TestUtil\n          .randomRealisticUnicodeString(random());\n      char[] charArray = randomRealisticUnicodeString.toCharArray();\n      StringBuilder builder = new StringBuilder();\n      for (int j = 0; j < charArray.length;) {\n        int cp = Character.codePointAt(charArray, j, charArray.length);\n        if (!Character.isWhitespace(cp)) {\n          builder.appendCodePoint(cp);\n        }\n        j += Character.charCount(cp);\n      }\n      if (builder.length() > 0) {\n        String value = TestUtil.randomSimpleString(random());\n        map.put(builder.toString(),\n            value.isEmpty() ? \"a\" : value);\n        \n      }\n    }\n    if (map.isEmpty()) {\n      map.put(\"booked\", \"books\");\n    }\n    StemmerOverrideFilter.Builder builder = new StemmerOverrideFilter.Builder(random().nextBoolean());\n    Set<Entry<String,String>> entrySet = map.entrySet();\n    StringBuilder input = new StringBuilder();\n    List<String> output = new ArrayList<>();\n    for (Entry<String,String> entry : entrySet) {\n      builder.add(entry.getKey(), entry.getValue());\n      if (random().nextBoolean() || output.isEmpty()) {\n        input.append(entry.getKey()).append(\" \");\n        output.add(entry.getValue());\n      }\n    }\n    Tokenizer tokenizer = new WhitespaceTokenizer();\n    tokenizer.setReader(new StringReader(input.toString()));\n    TokenStream stream = new PorterStemFilter(new StemmerOverrideFilter(\n        tokenizer, builder.build()));\n    assertTokenStreamContents(stream, output.toArray(new String[0]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestStemmerOverrideFilter#testRandomRealisticWhiteSpace().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestStemmerOverrideFilter#testRandomRealisticWhiteSpace().mjava","sourceNew":"  public void testRandomRealisticWhiteSpace() throws IOException {\n    Map<String,String> map = new HashMap<>();\n    Set<String> seen = new HashSet<>();\n    int numTerms = atLeast(50);\n    boolean ignoreCase = random().nextBoolean();\n\n    CharacterUtils charUtils = CharacterUtils.getInstance();\n\n    for (int i = 0; i < numTerms; i++) {\n      String randomRealisticUnicodeString = TestUtil\n          .randomRealisticUnicodeString(random());\n      char[] charArray = randomRealisticUnicodeString.toCharArray();\n      StringBuilder builder = new StringBuilder();\n      for (int j = 0; j < charArray.length;) {\n        int cp = Character.codePointAt(charArray, j, charArray.length);\n        if (!Character.isWhitespace(cp)) {\n          builder.appendCodePoint(cp);\n        }\n        j += Character.charCount(cp);\n      }\n      if (builder.length() > 0) {\n        String inputValue = builder.toString();\n\n        // Make sure we don't try to add two inputs that vary only by case:\n        String seenInputValue;\n        if (ignoreCase) {\n          // TODO: can we simply use inputValue.toLowerCase(Locale.ROOT)???\n          char[] buffer = inputValue.toCharArray();\n          charUtils.toLowerCase(buffer, 0, buffer.length);\n          seenInputValue = buffer.toString();\n        } else {\n          seenInputValue = inputValue;\n        }\n\n        if (seen.contains(seenInputValue) == false) {\n          seen.add(seenInputValue);\n          String value = TestUtil.randomSimpleString(random());\n          map.put(inputValue,\n              value.isEmpty() ? \"a\" : value);\n        }\n      }\n    }\n    if (map.isEmpty()) {\n      map.put(\"booked\", \"books\");\n    }\n    StemmerOverrideFilter.Builder builder = new StemmerOverrideFilter.Builder(ignoreCase);\n    Set<Entry<String,String>> entrySet = map.entrySet();\n    StringBuilder input = new StringBuilder();\n    List<String> output = new ArrayList<>();\n    for (Entry<String,String> entry : entrySet) {\n      builder.add(entry.getKey(), entry.getValue());\n      if (random().nextBoolean() || output.isEmpty()) {\n        input.append(entry.getKey()).append(\" \");\n        output.add(entry.getValue());\n      }\n    }\n    Tokenizer tokenizer = new WhitespaceTokenizer();\n    tokenizer.setReader(new StringReader(input.toString()));\n    TokenStream stream = new PorterStemFilter(new StemmerOverrideFilter(\n        tokenizer, builder.build()));\n    assertTokenStreamContents(stream, output.toArray(new String[0]));\n  }\n\n","sourceOld":"  public void testRandomRealisticWhiteSpace() throws IOException {\n    Map<String,String> map = new HashMap<>();\n    int numTerms = atLeast(50);\n    for (int i = 0; i < numTerms; i++) {\n      String randomRealisticUnicodeString = TestUtil\n          .randomRealisticUnicodeString(random());\n      char[] charArray = randomRealisticUnicodeString.toCharArray();\n      StringBuilder builder = new StringBuilder();\n      for (int j = 0; j < charArray.length;) {\n        int cp = Character.codePointAt(charArray, j, charArray.length);\n        if (!Character.isWhitespace(cp)) {\n          builder.appendCodePoint(cp);\n        }\n        j += Character.charCount(cp);\n      }\n      if (builder.length() > 0) {\n        String value = TestUtil.randomSimpleString(random());\n        map.put(builder.toString(),\n            value.isEmpty() ? \"a\" : value);\n        \n      }\n    }\n    if (map.isEmpty()) {\n      map.put(\"booked\", \"books\");\n    }\n    StemmerOverrideFilter.Builder builder = new StemmerOverrideFilter.Builder(random().nextBoolean());\n    Set<Entry<String,String>> entrySet = map.entrySet();\n    StringBuilder input = new StringBuilder();\n    List<String> output = new ArrayList<>();\n    for (Entry<String,String> entry : entrySet) {\n      builder.add(entry.getKey(), entry.getValue());\n      if (random().nextBoolean() || output.isEmpty()) {\n        input.append(entry.getKey()).append(\" \");\n        output.add(entry.getValue());\n      }\n    }\n    Tokenizer tokenizer = new WhitespaceTokenizer();\n    tokenizer.setReader(new StringReader(input.toString()));\n    TokenStream stream = new PorterStemFilter(new StemmerOverrideFilter(\n        tokenizer, builder.build()));\n    assertTokenStreamContents(stream, output.toArray(new String[0]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc","date":1465824262,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestStemmerOverrideFilter#testRandomRealisticWhiteSpace().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestStemmerOverrideFilter#testRandomRealisticWhiteSpace().mjava","sourceNew":"  public void testRandomRealisticWhiteSpace() throws IOException {\n    Map<String,String> map = new HashMap<>();\n    Set<String> seen = new HashSet<>();\n    int numTerms = atLeast(50);\n    boolean ignoreCase = random().nextBoolean();\n\n    for (int i = 0; i < numTerms; i++) {\n      String randomRealisticUnicodeString = TestUtil\n          .randomRealisticUnicodeString(random());\n      char[] charArray = randomRealisticUnicodeString.toCharArray();\n      StringBuilder builder = new StringBuilder();\n      for (int j = 0; j < charArray.length;) {\n        int cp = Character.codePointAt(charArray, j, charArray.length);\n        if (!Character.isWhitespace(cp)) {\n          builder.appendCodePoint(cp);\n        }\n        j += Character.charCount(cp);\n      }\n      if (builder.length() > 0) {\n        String inputValue = builder.toString();\n\n        // Make sure we don't try to add two inputs that vary only by case:\n        String seenInputValue;\n        if (ignoreCase) {\n          // TODO: can we simply use inputValue.toLowerCase(Locale.ROOT)???\n          char[] buffer = inputValue.toCharArray();\n          CharacterUtils.toLowerCase(buffer, 0, buffer.length);\n          seenInputValue = buffer.toString();\n        } else {\n          seenInputValue = inputValue;\n        }\n\n        if (seen.contains(seenInputValue) == false) {\n          seen.add(seenInputValue);\n          String value = TestUtil.randomSimpleString(random());\n          map.put(inputValue,\n              value.isEmpty() ? \"a\" : value);\n        }\n      }\n    }\n    if (map.isEmpty()) {\n      map.put(\"booked\", \"books\");\n    }\n    StemmerOverrideFilter.Builder builder = new StemmerOverrideFilter.Builder(ignoreCase);\n    Set<Entry<String,String>> entrySet = map.entrySet();\n    StringBuilder input = new StringBuilder();\n    List<String> output = new ArrayList<>();\n    for (Entry<String,String> entry : entrySet) {\n      builder.add(entry.getKey(), entry.getValue());\n      if (random().nextBoolean() || output.isEmpty()) {\n        input.append(entry.getKey()).append(\" \");\n        output.add(entry.getValue());\n      }\n    }\n    Tokenizer tokenizer = new WhitespaceTokenizer();\n    tokenizer.setReader(new StringReader(input.toString()));\n    TokenStream stream = new PorterStemFilter(new StemmerOverrideFilter(\n        tokenizer, builder.build()));\n    assertTokenStreamContents(stream, output.toArray(new String[0]));\n  }\n\n","sourceOld":"  public void testRandomRealisticWhiteSpace() throws IOException {\n    Map<String,String> map = new HashMap<>();\n    Set<String> seen = new HashSet<>();\n    int numTerms = atLeast(50);\n    boolean ignoreCase = random().nextBoolean();\n\n    CharacterUtils charUtils = CharacterUtils.getInstance();\n\n    for (int i = 0; i < numTerms; i++) {\n      String randomRealisticUnicodeString = TestUtil\n          .randomRealisticUnicodeString(random());\n      char[] charArray = randomRealisticUnicodeString.toCharArray();\n      StringBuilder builder = new StringBuilder();\n      for (int j = 0; j < charArray.length;) {\n        int cp = Character.codePointAt(charArray, j, charArray.length);\n        if (!Character.isWhitespace(cp)) {\n          builder.appendCodePoint(cp);\n        }\n        j += Character.charCount(cp);\n      }\n      if (builder.length() > 0) {\n        String inputValue = builder.toString();\n\n        // Make sure we don't try to add two inputs that vary only by case:\n        String seenInputValue;\n        if (ignoreCase) {\n          // TODO: can we simply use inputValue.toLowerCase(Locale.ROOT)???\n          char[] buffer = inputValue.toCharArray();\n          charUtils.toLowerCase(buffer, 0, buffer.length);\n          seenInputValue = buffer.toString();\n        } else {\n          seenInputValue = inputValue;\n        }\n\n        if (seen.contains(seenInputValue) == false) {\n          seen.add(seenInputValue);\n          String value = TestUtil.randomSimpleString(random());\n          map.put(inputValue,\n              value.isEmpty() ? \"a\" : value);\n        }\n      }\n    }\n    if (map.isEmpty()) {\n      map.put(\"booked\", \"books\");\n    }\n    StemmerOverrideFilter.Builder builder = new StemmerOverrideFilter.Builder(ignoreCase);\n    Set<Entry<String,String>> entrySet = map.entrySet();\n    StringBuilder input = new StringBuilder();\n    List<String> output = new ArrayList<>();\n    for (Entry<String,String> entry : entrySet) {\n      builder.add(entry.getKey(), entry.getValue());\n      if (random().nextBoolean() || output.isEmpty()) {\n        input.append(entry.getKey()).append(\" \");\n        output.add(entry.getValue());\n      }\n    }\n    Tokenizer tokenizer = new WhitespaceTokenizer();\n    tokenizer.setReader(new StringReader(input.toString()));\n    TokenStream stream = new PorterStemFilter(new StemmerOverrideFilter(\n        tokenizer, builder.build()));\n    assertTokenStreamContents(stream, output.toArray(new String[0]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","date":1465913303,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestStemmerOverrideFilter#testRandomRealisticWhiteSpace().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestStemmerOverrideFilter#testRandomRealisticWhiteSpace().mjava","sourceNew":"  public void testRandomRealisticWhiteSpace() throws IOException {\n    Map<String,String> map = new HashMap<>();\n    Set<String> seen = new HashSet<>();\n    int numTerms = atLeast(50);\n    boolean ignoreCase = random().nextBoolean();\n\n    for (int i = 0; i < numTerms; i++) {\n      String randomRealisticUnicodeString = TestUtil\n          .randomRealisticUnicodeString(random());\n      char[] charArray = randomRealisticUnicodeString.toCharArray();\n      StringBuilder builder = new StringBuilder();\n      for (int j = 0; j < charArray.length;) {\n        int cp = Character.codePointAt(charArray, j, charArray.length);\n        if (!Character.isWhitespace(cp)) {\n          builder.appendCodePoint(cp);\n        }\n        j += Character.charCount(cp);\n      }\n      if (builder.length() > 0) {\n        String inputValue = builder.toString();\n\n        // Make sure we don't try to add two inputs that vary only by case:\n        String seenInputValue;\n        if (ignoreCase) {\n          // TODO: can we simply use inputValue.toLowerCase(Locale.ROOT)???\n          char[] buffer = inputValue.toCharArray();\n          CharacterUtils.toLowerCase(buffer, 0, buffer.length);\n          seenInputValue = buffer.toString();\n        } else {\n          seenInputValue = inputValue;\n        }\n\n        if (seen.contains(seenInputValue) == false) {\n          seen.add(seenInputValue);\n          String value = TestUtil.randomSimpleString(random());\n          map.put(inputValue,\n              value.isEmpty() ? \"a\" : value);\n        }\n      }\n    }\n    if (map.isEmpty()) {\n      map.put(\"booked\", \"books\");\n    }\n    StemmerOverrideFilter.Builder builder = new StemmerOverrideFilter.Builder(ignoreCase);\n    Set<Entry<String,String>> entrySet = map.entrySet();\n    StringBuilder input = new StringBuilder();\n    List<String> output = new ArrayList<>();\n    for (Entry<String,String> entry : entrySet) {\n      builder.add(entry.getKey(), entry.getValue());\n      if (random().nextBoolean() || output.isEmpty()) {\n        input.append(entry.getKey()).append(\" \");\n        output.add(entry.getValue());\n      }\n    }\n    Tokenizer tokenizer = new WhitespaceTokenizer();\n    tokenizer.setReader(new StringReader(input.toString()));\n    TokenStream stream = new PorterStemFilter(new StemmerOverrideFilter(\n        tokenizer, builder.build()));\n    assertTokenStreamContents(stream, output.toArray(new String[0]));\n  }\n\n","sourceOld":"  public void testRandomRealisticWhiteSpace() throws IOException {\n    Map<String,String> map = new HashMap<>();\n    Set<String> seen = new HashSet<>();\n    int numTerms = atLeast(50);\n    boolean ignoreCase = random().nextBoolean();\n\n    CharacterUtils charUtils = CharacterUtils.getInstance();\n\n    for (int i = 0; i < numTerms; i++) {\n      String randomRealisticUnicodeString = TestUtil\n          .randomRealisticUnicodeString(random());\n      char[] charArray = randomRealisticUnicodeString.toCharArray();\n      StringBuilder builder = new StringBuilder();\n      for (int j = 0; j < charArray.length;) {\n        int cp = Character.codePointAt(charArray, j, charArray.length);\n        if (!Character.isWhitespace(cp)) {\n          builder.appendCodePoint(cp);\n        }\n        j += Character.charCount(cp);\n      }\n      if (builder.length() > 0) {\n        String inputValue = builder.toString();\n\n        // Make sure we don't try to add two inputs that vary only by case:\n        String seenInputValue;\n        if (ignoreCase) {\n          // TODO: can we simply use inputValue.toLowerCase(Locale.ROOT)???\n          char[] buffer = inputValue.toCharArray();\n          charUtils.toLowerCase(buffer, 0, buffer.length);\n          seenInputValue = buffer.toString();\n        } else {\n          seenInputValue = inputValue;\n        }\n\n        if (seen.contains(seenInputValue) == false) {\n          seen.add(seenInputValue);\n          String value = TestUtil.randomSimpleString(random());\n          map.put(inputValue,\n              value.isEmpty() ? \"a\" : value);\n        }\n      }\n    }\n    if (map.isEmpty()) {\n      map.put(\"booked\", \"books\");\n    }\n    StemmerOverrideFilter.Builder builder = new StemmerOverrideFilter.Builder(ignoreCase);\n    Set<Entry<String,String>> entrySet = map.entrySet();\n    StringBuilder input = new StringBuilder();\n    List<String> output = new ArrayList<>();\n    for (Entry<String,String> entry : entrySet) {\n      builder.add(entry.getKey(), entry.getValue());\n      if (random().nextBoolean() || output.isEmpty()) {\n        input.append(entry.getKey()).append(\" \");\n        output.add(entry.getValue());\n      }\n    }\n    Tokenizer tokenizer = new WhitespaceTokenizer();\n    tokenizer.setReader(new StringReader(input.toString()));\n    TokenStream stream = new PorterStemFilter(new StemmerOverrideFilter(\n        tokenizer, builder.build()));\n    assertTokenStreamContents(stream, output.toArray(new String[0]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestStemmerOverrideFilter#testRandomRealisticWhiteSpace().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestStemmerOverrideFilter#testRandomRealisticWhiteSpace().mjava","sourceNew":"  public void testRandomRealisticWhiteSpace() throws IOException {\n    Map<String,String> map = new HashMap<>();\n    Set<String> seen = new HashSet<>();\n    int numTerms = atLeast(50);\n    boolean ignoreCase = random().nextBoolean();\n\n    for (int i = 0; i < numTerms; i++) {\n      String randomRealisticUnicodeString = TestUtil\n          .randomRealisticUnicodeString(random());\n      char[] charArray = randomRealisticUnicodeString.toCharArray();\n      StringBuilder builder = new StringBuilder();\n      for (int j = 0; j < charArray.length;) {\n        int cp = Character.codePointAt(charArray, j, charArray.length);\n        if (!Character.isWhitespace(cp)) {\n          builder.appendCodePoint(cp);\n        }\n        j += Character.charCount(cp);\n      }\n      if (builder.length() > 0) {\n        String inputValue = builder.toString();\n\n        // Make sure we don't try to add two inputs that vary only by case:\n        String seenInputValue;\n        if (ignoreCase) {\n          // TODO: can we simply use inputValue.toLowerCase(Locale.ROOT)???\n          char[] buffer = inputValue.toCharArray();\n          CharacterUtils.toLowerCase(buffer, 0, buffer.length);\n          seenInputValue = buffer.toString();\n        } else {\n          seenInputValue = inputValue;\n        }\n\n        if (seen.contains(seenInputValue) == false) {\n          seen.add(seenInputValue);\n          String value = TestUtil.randomSimpleString(random());\n          map.put(inputValue,\n              value.isEmpty() ? \"a\" : value);\n        }\n      }\n    }\n    if (map.isEmpty()) {\n      map.put(\"booked\", \"books\");\n    }\n    StemmerOverrideFilter.Builder builder = new StemmerOverrideFilter.Builder(ignoreCase);\n    Set<Entry<String,String>> entrySet = map.entrySet();\n    StringBuilder input = new StringBuilder();\n    List<String> output = new ArrayList<>();\n    for (Entry<String,String> entry : entrySet) {\n      builder.add(entry.getKey(), entry.getValue());\n      if (random().nextBoolean() || output.isEmpty()) {\n        input.append(entry.getKey()).append(\" \");\n        output.add(entry.getValue());\n      }\n    }\n    Tokenizer tokenizer = new WhitespaceTokenizer();\n    tokenizer.setReader(new StringReader(input.toString()));\n    TokenStream stream = new PorterStemFilter(new StemmerOverrideFilter(\n        tokenizer, builder.build()));\n    assertTokenStreamContents(stream, output.toArray(new String[0]));\n  }\n\n","sourceOld":"  public void testRandomRealisticWhiteSpace() throws IOException {\n    Map<String,String> map = new HashMap<>();\n    Set<String> seen = new HashSet<>();\n    int numTerms = atLeast(50);\n    boolean ignoreCase = random().nextBoolean();\n\n    CharacterUtils charUtils = CharacterUtils.getInstance();\n\n    for (int i = 0; i < numTerms; i++) {\n      String randomRealisticUnicodeString = TestUtil\n          .randomRealisticUnicodeString(random());\n      char[] charArray = randomRealisticUnicodeString.toCharArray();\n      StringBuilder builder = new StringBuilder();\n      for (int j = 0; j < charArray.length;) {\n        int cp = Character.codePointAt(charArray, j, charArray.length);\n        if (!Character.isWhitespace(cp)) {\n          builder.appendCodePoint(cp);\n        }\n        j += Character.charCount(cp);\n      }\n      if (builder.length() > 0) {\n        String inputValue = builder.toString();\n\n        // Make sure we don't try to add two inputs that vary only by case:\n        String seenInputValue;\n        if (ignoreCase) {\n          // TODO: can we simply use inputValue.toLowerCase(Locale.ROOT)???\n          char[] buffer = inputValue.toCharArray();\n          charUtils.toLowerCase(buffer, 0, buffer.length);\n          seenInputValue = buffer.toString();\n        } else {\n          seenInputValue = inputValue;\n        }\n\n        if (seen.contains(seenInputValue) == false) {\n          seen.add(seenInputValue);\n          String value = TestUtil.randomSimpleString(random());\n          map.put(inputValue,\n              value.isEmpty() ? \"a\" : value);\n        }\n      }\n    }\n    if (map.isEmpty()) {\n      map.put(\"booked\", \"books\");\n    }\n    StemmerOverrideFilter.Builder builder = new StemmerOverrideFilter.Builder(ignoreCase);\n    Set<Entry<String,String>> entrySet = map.entrySet();\n    StringBuilder input = new StringBuilder();\n    List<String> output = new ArrayList<>();\n    for (Entry<String,String> entry : entrySet) {\n      builder.add(entry.getKey(), entry.getValue());\n      if (random().nextBoolean() || output.isEmpty()) {\n        input.append(entry.getKey()).append(\" \");\n        output.add(entry.getValue());\n      }\n    }\n    Tokenizer tokenizer = new WhitespaceTokenizer();\n    tokenizer.setReader(new StringReader(input.toString()));\n    TokenStream stream = new PorterStemFilter(new StemmerOverrideFilter(\n        tokenizer, builder.build()));\n    assertTokenStreamContents(stream, output.toArray(new String[0]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6613659748fe4411a7dcf85266e55db1f95f7315"],"fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc":["0df9d8f376ca62f8eb9f1d20afaf38a3e9afc995"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704"],"6613659748fe4411a7dcf85266e55db1f95f7315":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0df9d8f376ca62f8eb9f1d20afaf38a3e9afc995","57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"0df9d8f376ca62f8eb9f1d20afaf38a3e9afc995":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["379db3ad24c4f0214f30a122265a6d6be003a99d","0df9d8f376ca62f8eb9f1d20afaf38a3e9afc995"],"bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704":["7476b30b7c03f9027676c9df28fda37629da2c97"],"7476b30b7c03f9027676c9df28fda37629da2c97":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["0df9d8f376ca62f8eb9f1d20afaf38a3e9afc995","fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"0df9d8f376ca62f8eb9f1d20afaf38a3e9afc995":["fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"7476b30b7c03f9027676c9df28fda37629da2c97":["bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["0df9d8f376ca62f8eb9f1d20afaf38a3e9afc995","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7476b30b7c03f9027676c9df28fda37629da2c97"],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}