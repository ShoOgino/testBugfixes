{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Vector#isWithin(Membership[],Membership[]).mjava","commits":[{"id":"851e4197476b684154a7b65f996f535522e67400","date":1428926498,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Vector#isWithin(Membership[],Membership[]).mjava","pathOld":"/dev/null","sourceNew":"    /** Determine if this vector, taken from the origin,\n     * describes a point within a set of planes.\n     *@param bounds is the first part of the set of planes.\n     *@param moreBounds is the second part of the set of planes.\n     *@return true if the point is within the bounds.\n     */\n    public boolean isWithin(Membership[] bounds, Membership[] moreBounds) {\n        // Return true if the point described is within all provided bounds\n        for (Membership bound : bounds) {\n            if (!bound.isWithin(this))\n                return false;\n        }\n        for (Membership bound : moreBounds) {\n            if (!bound.isWithin(this))\n                return false;\n        }\n        return true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0fb9dbed1415914caa27460f8abb7afadaa61451","date":1429504289,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Vector#isWithin(Membership[],Membership[]).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Vector#isWithin(Membership[],Membership[]).mjava","sourceNew":"    /** Determine if this vector, taken from the origin,\n     * describes a point within a set of planes.\n     *@param bounds is the first part of the set of planes.\n     *@param moreBounds is the second part of the set of planes.\n     *@return true if the point is within the bounds.\n     */\n    public boolean isWithin(final Membership[] bounds, final Membership[] moreBounds) {\n        // Return true if the point described is within all provided bounds\n        for (Membership bound : bounds) {\n            if (bound != null && !bound.isWithin(this))\n                return false;\n        }\n        for (Membership bound : moreBounds) {\n            if (bound != null && !bound.isWithin(this))\n                return false;\n        }\n        return true;\n    }\n\n","sourceOld":"    /** Determine if this vector, taken from the origin,\n     * describes a point within a set of planes.\n     *@param bounds is the first part of the set of planes.\n     *@param moreBounds is the second part of the set of planes.\n     *@return true if the point is within the bounds.\n     */\n    public boolean isWithin(Membership[] bounds, Membership[] moreBounds) {\n        // Return true if the point described is within all provided bounds\n        for (Membership bound : bounds) {\n            if (!bound.isWithin(this))\n                return false;\n        }\n        for (Membership bound : moreBounds) {\n            if (!bound.isWithin(this))\n                return false;\n        }\n        return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2997acf74723385bd84aff1ea0b12af4aefde77","date":1430745542,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Vector#isWithin(Membership[],Membership[]).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Vector#isWithin(Membership[],Membership[]).mjava","sourceNew":"  /**\n   * Determine if this vector, taken from the origin,\n   * describes a point within a set of planes.\n   *\n   * @param bounds     is the first part of the set of planes.\n   * @param moreBounds is the second part of the set of planes.\n   * @return true if the point is within the bounds.\n   */\n  public boolean isWithin(final Membership[] bounds, final Membership[] moreBounds) {\n    // Return true if the point described is within all provided bounds\n    for (Membership bound : bounds) {\n      if (bound != null && !bound.isWithin(this))\n        return false;\n    }\n    for (Membership bound : moreBounds) {\n      if (bound != null && !bound.isWithin(this))\n        return false;\n    }\n    return true;\n  }\n\n","sourceOld":"    /** Determine if this vector, taken from the origin,\n     * describes a point within a set of planes.\n     *@param bounds is the first part of the set of planes.\n     *@param moreBounds is the second part of the set of planes.\n     *@return true if the point is within the bounds.\n     */\n    public boolean isWithin(final Membership[] bounds, final Membership[] moreBounds) {\n        // Return true if the point described is within all provided bounds\n        for (Membership bound : bounds) {\n            if (bound != null && !bound.isWithin(this))\n                return false;\n        }\n        for (Membership bound : moreBounds) {\n            if (bound != null && !bound.isWithin(this))\n                return false;\n        }\n        return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c921d81476f94b6686d3f216daa1f6b076b4a6c0","date":1430922284,"type":0,"author":"David Wayne Smiley","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Vector#isWithin(Membership[],Membership[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Determine if this vector, taken from the origin,\n   * describes a point within a set of planes.\n   *\n   * @param bounds     is the first part of the set of planes.\n   * @param moreBounds is the second part of the set of planes.\n   * @return true if the point is within the bounds.\n   */\n  public boolean isWithin(final Membership[] bounds, final Membership[] moreBounds) {\n    // Return true if the point described is within all provided bounds\n    for (Membership bound : bounds) {\n      if (bound != null && !bound.isWithin(this))\n        return false;\n    }\n    for (Membership bound : moreBounds) {\n      if (bound != null && !bound.isWithin(this))\n        return false;\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9f97ca977ad649f14b4f60a888adef2edd7a64e","date":1432702490,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Vector#isWithin(Membership[],Membership[]).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Vector#isWithin(Membership[],Membership[]).mjava","sourceNew":"  /**\n   * Determine if this vector, taken from the origin,\n   * describes a point within a set of planes.\n   *\n   * @param bounds     is the first part of the set of planes.\n   * @param moreBounds is the second part of the set of planes.\n   * @return true if the point is within the bounds.\n   */\n  public boolean isWithin(final Membership[] bounds, final Membership[] moreBounds) {\n    // Return true if the point described is within all provided bounds\n    //System.err.println(\"  checking if \"+this+\" is within bounds\");\n    for (Membership bound : bounds) {\n      if (bound != null && !bound.isWithin(this)) {\n        //System.err.println(\"    NOT within \"+bound);\n        return false;\n      }\n    }\n    for (Membership bound : moreBounds) {\n      if (bound != null && !bound.isWithin(this)) {\n        //System.err.println(\"    NOT within \"+bound);\n        return false;\n      }\n    }\n    //System.err.println(\"    is within\");\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Determine if this vector, taken from the origin,\n   * describes a point within a set of planes.\n   *\n   * @param bounds     is the first part of the set of planes.\n   * @param moreBounds is the second part of the set of planes.\n   * @return true if the point is within the bounds.\n   */\n  public boolean isWithin(final Membership[] bounds, final Membership[] moreBounds) {\n    // Return true if the point described is within all provided bounds\n    for (Membership bound : bounds) {\n      if (bound != null && !bound.isWithin(this))\n        return false;\n    }\n    for (Membership bound : moreBounds) {\n      if (bound != null && !bound.isWithin(this))\n        return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fec06d6753751ae302c7d35866763e6cb414112d","date":1433250698,"type":3,"author":"David Wayne Smiley","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Vector#isWithin(Membership[],Membership[]).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Vector#isWithin(Membership[],Membership[]).mjava","sourceNew":"  /**\n   * Determine if this vector, taken from the origin,\n   * describes a point within a set of planes.\n   *\n   * @param bounds     is the first part of the set of planes.\n   * @param moreBounds is the second part of the set of planes.\n   * @return true if the point is within the bounds.\n   */\n  public boolean isWithin(final Membership[] bounds, final Membership[] moreBounds) {\n    // Return true if the point described is within all provided bounds\n    //System.err.println(\"  checking if \"+this+\" is within bounds\");\n    for (Membership bound : bounds) {\n      if (bound != null && !bound.isWithin(this)) {\n        //System.err.println(\"    NOT within \"+bound);\n        return false;\n      }\n    }\n    for (Membership bound : moreBounds) {\n      if (bound != null && !bound.isWithin(this)) {\n        //System.err.println(\"    NOT within \"+bound);\n        return false;\n      }\n    }\n    //System.err.println(\"    is within\");\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Determine if this vector, taken from the origin,\n   * describes a point within a set of planes.\n   *\n   * @param bounds     is the first part of the set of planes.\n   * @param moreBounds is the second part of the set of planes.\n   * @return true if the point is within the bounds.\n   */\n  public boolean isWithin(final Membership[] bounds, final Membership[] moreBounds) {\n    // Return true if the point described is within all provided bounds\n    for (Membership bound : bounds) {\n      if (bound != null && !bound.isWithin(this))\n        return false;\n    }\n    for (Membership bound : moreBounds) {\n      if (bound != null && !bound.isWithin(this))\n        return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/Vector#isWithin(Membership[],Membership[]).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Vector#isWithin(Membership[],Membership[]).mjava","sourceNew":"  /**\n   * Determine if this vector, taken from the origin,\n   * describes a point within a set of planes.\n   *\n   * @param bounds     is the first part of the set of planes.\n   * @param moreBounds is the second part of the set of planes.\n   * @return true if the point is within the bounds.\n   */\n  public boolean isWithin(final Membership[] bounds, final Membership[] moreBounds) {\n    // Return true if the point described is within all provided bounds\n    //System.err.println(\"  checking if \"+this+\" is within bounds\");\n    for (Membership bound : bounds) {\n      if (bound != null && !bound.isWithin(this)) {\n        //System.err.println(\"    NOT within \"+bound);\n        return false;\n      }\n    }\n    for (Membership bound : moreBounds) {\n      if (bound != null && !bound.isWithin(this)) {\n        //System.err.println(\"    NOT within \"+bound);\n        return false;\n      }\n    }\n    //System.err.println(\"    is within\");\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Determine if this vector, taken from the origin,\n   * describes a point within a set of planes.\n   *\n   * @param bounds     is the first part of the set of planes.\n   * @param moreBounds is the second part of the set of planes.\n   * @return true if the point is within the bounds.\n   */\n  public boolean isWithin(final Membership[] bounds, final Membership[] moreBounds) {\n    // Return true if the point described is within all provided bounds\n    //System.err.println(\"  checking if \"+this+\" is within bounds\");\n    for (Membership bound : bounds) {\n      if (bound != null && !bound.isWithin(this)) {\n        //System.err.println(\"    NOT within \"+bound);\n        return false;\n      }\n    }\n    for (Membership bound : moreBounds) {\n      if (bound != null && !bound.isWithin(this)) {\n        //System.err.println(\"    NOT within \"+bound);\n        return false;\n      }\n    }\n    //System.err.println(\"    is within\");\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0fb9dbed1415914caa27460f8abb7afadaa61451":["851e4197476b684154a7b65f996f535522e67400"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fec06d6753751ae302c7d35866763e6cb414112d":["c921d81476f94b6686d3f216daa1f6b076b4a6c0","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["fec06d6753751ae302c7d35866763e6cb414112d"],"e2997acf74723385bd84aff1ea0b12af4aefde77":["0fb9dbed1415914caa27460f8abb7afadaa61451"],"c921d81476f94b6686d3f216daa1f6b076b4a6c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e2997acf74723385bd84aff1ea0b12af4aefde77"],"851e4197476b684154a7b65f996f535522e67400":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["c921d81476f94b6686d3f216daa1f6b076b4a6c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3022be5842502b7c2a57a5124199bbc30236f0a0"]},"commit2Childs":{"0fb9dbed1415914caa27460f8abb7afadaa61451":["e2997acf74723385bd84aff1ea0b12af4aefde77"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c921d81476f94b6686d3f216daa1f6b076b4a6c0","851e4197476b684154a7b65f996f535522e67400"],"fec06d6753751ae302c7d35866763e6cb414112d":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e2997acf74723385bd84aff1ea0b12af4aefde77":["c921d81476f94b6686d3f216daa1f6b076b4a6c0"],"851e4197476b684154a7b65f996f535522e67400":["0fb9dbed1415914caa27460f8abb7afadaa61451"],"c921d81476f94b6686d3f216daa1f6b076b4a6c0":["fec06d6753751ae302c7d35866763e6cb414112d","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["fec06d6753751ae302c7d35866763e6cb414112d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}