{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#getUniqueTags(Policy.Session,ComputedValueEvaluator).mjava","commits":[{"id":"081849c2756a6c9b9883ab9e332f3f3fcf2f05fa","date":1559549598,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#getUniqueTags(Policy.Session,ComputedValueEvaluator).mjava","pathOld":"/dev/null","sourceNew":"  private Set getUniqueTags(Policy.Session session, ComputedValueEvaluator eval) {\n    Set tags =  new HashSet();\n    if(tag.op == WILDCARD){\n      for (Row row : session.matrix) {\n        eval.node = row.node;\n        Condition tag = this.tag;\n        if (tag.computedType != null) tag = evaluateValue(tag, eval);\n        Object val = row.getVal(tag.name);\n        if (val != null) {\n          if (tag.op == LESS_THAN || tag.op == GREATER_THAN) {\n            tags.add(this.tag);\n          } else if (tag.isPass(val)) {\n            tags.add(val);\n          }\n        }\n      }\n\n    } else {\n\n      if (tag.op == LESS_THAN || tag.op == GREATER_THAN || tag.op == RANGE_EQUAL || tag.op == NOT_EQUAL) {\n        tags.add(tag); // eg: freedisk > 100\n      } else if (tag.val instanceof Collection) {\n        tags.addAll((Collection) tag.val); //e: sysprop.zone:[east,west]\n      } else {\n        tags.add(tag.val);//\n      }\n    }\n    return tags;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7194afdfe9b45ca331c1cd5001cd9766688688b","date":1560867417,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#getUniqueTags(Policy.Session,ComputedValueEvaluator).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#getUniqueTags(Policy.Session,ComputedValueEvaluator).mjava","sourceNew":"  private Set getUniqueTags(Policy.Session session, ComputedValueEvaluator eval) {\n    Set tags =  new HashSet();\n\n    if(nodeSetPresent) {\n      if (tag.val instanceof List && ((List) tag.val).get(0) instanceof Condition) {\n        tags.addAll((List) tag.val);\n      } else {\n        tags.add(tag);\n      }\n      return tags;\n    }\n    if(tag.op == WILDCARD){\n      for (Row row : session.matrix) {\n        eval.node = row.node;\n        Condition tag = this.tag;\n        if (tag.computedType != null) tag = evaluateValue(tag, eval);\n        Object val = row.getVal(tag.name);\n        if (val != null) {\n          if (tag.op == LESS_THAN || tag.op == GREATER_THAN) {\n            tags.add(this.tag);\n          } else if (tag.isPass(val)) {\n            tags.add(val);\n          }\n        }\n      }\n\n    } else {\n\n      if (tag.op == LESS_THAN || tag.op == GREATER_THAN || tag.op == RANGE_EQUAL || tag.op == NOT_EQUAL) {\n        tags.add(tag); // eg: freedisk > 100\n      } else if (tag.val instanceof Collection) {\n        tags.add(tag); //e: sysprop.zone:[east,west]\n      } else {\n        tags.add(tag.val);//\n      }\n    }\n    return tags;\n  }\n\n","sourceOld":"  private Set getUniqueTags(Policy.Session session, ComputedValueEvaluator eval) {\n    Set tags =  new HashSet();\n    if(tag.op == WILDCARD){\n      for (Row row : session.matrix) {\n        eval.node = row.node;\n        Condition tag = this.tag;\n        if (tag.computedType != null) tag = evaluateValue(tag, eval);\n        Object val = row.getVal(tag.name);\n        if (val != null) {\n          if (tag.op == LESS_THAN || tag.op == GREATER_THAN) {\n            tags.add(this.tag);\n          } else if (tag.isPass(val)) {\n            tags.add(val);\n          }\n        }\n      }\n\n    } else {\n\n      if (tag.op == LESS_THAN || tag.op == GREATER_THAN || tag.op == RANGE_EQUAL || tag.op == NOT_EQUAL) {\n        tags.add(tag); // eg: freedisk > 100\n      } else if (tag.val instanceof Collection) {\n        tags.addAll((Collection) tag.val); //e: sysprop.zone:[east,west]\n      } else {\n        tags.add(tag.val);//\n      }\n    }\n    return tags;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"527adea7ce767368d7317339023e18e39702132e","date":1592163810,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#getUniqueTags(Policy.Session,ComputedValueEvaluator).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#getUniqueTags(Policy.Session,ComputedValueEvaluator).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private Set getUniqueTags(Policy.Session session, ComputedValueEvaluator eval) {\n    Set tags =  new HashSet();\n\n    if(nodeSetPresent) {\n      if (tag.val instanceof List && ((List) tag.val).get(0) instanceof Condition) {\n        tags.addAll((List) tag.val);\n      } else {\n        tags.add(tag);\n      }\n      return tags;\n    }\n    if(tag.op == WILDCARD){\n      for (Row row : session.matrix) {\n        eval.node = row.node;\n        Condition tag = this.tag;\n        if (tag.computedType != null) tag = evaluateValue(tag, eval);\n        Object val = row.getVal(tag.name);\n        if (val != null) {\n          if (tag.op == LESS_THAN || tag.op == GREATER_THAN) {\n            tags.add(this.tag);\n          } else if (tag.isPass(val)) {\n            tags.add(val);\n          }\n        }\n      }\n\n    } else {\n\n      if (tag.op == LESS_THAN || tag.op == GREATER_THAN || tag.op == RANGE_EQUAL || tag.op == NOT_EQUAL) {\n        tags.add(tag); // eg: freedisk > 100\n      } else if (tag.val instanceof Collection) {\n        tags.add(tag); //e: sysprop.zone:[east,west]\n      } else {\n        tags.add(tag.val);//\n      }\n    }\n    return tags;\n  }\n\n","sourceOld":"  private Set getUniqueTags(Policy.Session session, ComputedValueEvaluator eval) {\n    Set tags =  new HashSet();\n\n    if(nodeSetPresent) {\n      if (tag.val instanceof List && ((List) tag.val).get(0) instanceof Condition) {\n        tags.addAll((List) tag.val);\n      } else {\n        tags.add(tag);\n      }\n      return tags;\n    }\n    if(tag.op == WILDCARD){\n      for (Row row : session.matrix) {\n        eval.node = row.node;\n        Condition tag = this.tag;\n        if (tag.computedType != null) tag = evaluateValue(tag, eval);\n        Object val = row.getVal(tag.name);\n        if (val != null) {\n          if (tag.op == LESS_THAN || tag.op == GREATER_THAN) {\n            tags.add(this.tag);\n          } else if (tag.isPass(val)) {\n            tags.add(val);\n          }\n        }\n      }\n\n    } else {\n\n      if (tag.op == LESS_THAN || tag.op == GREATER_THAN || tag.op == RANGE_EQUAL || tag.op == NOT_EQUAL) {\n        tags.add(tag); // eg: freedisk > 100\n      } else if (tag.val instanceof Collection) {\n        tags.add(tag); //e: sysprop.zone:[east,west]\n      } else {\n        tags.add(tag.val);//\n      }\n    }\n    return tags;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#getUniqueTags(Policy.Session,ComputedValueEvaluator).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private Set getUniqueTags(Policy.Session session, ComputedValueEvaluator eval) {\n    Set tags =  new HashSet();\n\n    if(nodeSetPresent) {\n      if (tag.val instanceof List && ((List) tag.val).get(0) instanceof Condition) {\n        tags.addAll((List) tag.val);\n      } else {\n        tags.add(tag);\n      }\n      return tags;\n    }\n    if(tag.op == WILDCARD){\n      for (Row row : session.matrix) {\n        eval.node = row.node;\n        Condition tag = this.tag;\n        if (tag.computedType != null) tag = evaluateValue(tag, eval);\n        Object val = row.getVal(tag.name);\n        if (val != null) {\n          if (tag.op == LESS_THAN || tag.op == GREATER_THAN) {\n            tags.add(this.tag);\n          } else if (tag.isPass(val)) {\n            tags.add(val);\n          }\n        }\n      }\n\n    } else {\n\n      if (tag.op == LESS_THAN || tag.op == GREATER_THAN || tag.op == RANGE_EQUAL || tag.op == NOT_EQUAL) {\n        tags.add(tag); // eg: freedisk > 100\n      } else if (tag.val instanceof Collection) {\n        tags.add(tag); //e: sysprop.zone:[east,west]\n      } else {\n        tags.add(tag.val);//\n      }\n    }\n    return tags;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a7194afdfe9b45ca331c1cd5001cd9766688688b":["081849c2756a6c9b9883ab9e332f3f3fcf2f05fa"],"3f504512a03d978990cbff30db0522b354e846db":["527adea7ce767368d7317339023e18e39702132e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"527adea7ce767368d7317339023e18e39702132e":["a7194afdfe9b45ca331c1cd5001cd9766688688b"],"081849c2756a6c9b9883ab9e332f3f3fcf2f05fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"a7194afdfe9b45ca331c1cd5001cd9766688688b":["527adea7ce767368d7317339023e18e39702132e"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["081849c2756a6c9b9883ab9e332f3f3fcf2f05fa"],"527adea7ce767368d7317339023e18e39702132e":["3f504512a03d978990cbff30db0522b354e846db"],"081849c2756a6c9b9883ab9e332f3f3fcf2f05fa":["a7194afdfe9b45ca331c1cd5001cd9766688688b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}