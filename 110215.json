{"path":"solr/core/src/test/org/apache/solr/TestRandomFaceting#validateResponse(String,String,ModifiableSolrParams,String,List[String]).mjava","commits":[{"id":"39342cb658ac11dfcbf4459807fb00eb9ada0218","date":1472876688,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestRandomFaceting#validateResponse(String,String,ModifiableSolrParams,String,List[String]).mjava","pathOld":"/dev/null","sourceNew":"  private void validateResponse(String expected, String actual, ModifiableSolrParams params, String method,\n        List<String> methods) throws Exception {\n    if (params.getBool(\"facet.exists\", false)) {\n      if (isSortByCount(params)) { // it's challenged with facet.sort=count \n        expected = getExpectationForSortByCount(params, methods);// that requires to recalculate expactation\n      } else { // facet.sort=index\n        expected = capFacetCountsTo1(expected);\n      }\n    }\n    \n    String err = JSONTestUtil.match(\"/\", actual, expected, 0.0);\n    if (err != null) {\n      log.error(\"ERROR: mismatch facet response: \" + err +\n          \"\\n expected =\" + expected +\n          \"\\n response = \" + actual +\n          \"\\n request = \" + params\n      );\n      fail(err);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc8f206328a706450934717bec7ccc22ad166fc0","date":1473142172,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/TestRandomFaceting#validateResponse(String,String,ModifiableSolrParams,String,List[String]).mjava","pathOld":"/dev/null","sourceNew":"  private void validateResponse(String expected, String actual, ModifiableSolrParams params, String method,\n        List<String> methods) throws Exception {\n    if (params.getBool(\"facet.exists\", false)) {\n      if (isSortByCount(params)) { // it's challenged with facet.sort=count \n        expected = getExpectationForSortByCount(params, methods);// that requires to recalculate expactation\n      } else { // facet.sort=index\n        expected = capFacetCountsTo1(expected);\n      }\n    }\n    \n    String err = JSONTestUtil.match(\"/\", actual, expected, 0.0);\n    if (err != null) {\n      log.error(\"ERROR: mismatch facet response: \" + err +\n          \"\\n expected =\" + expected +\n          \"\\n response = \" + actual +\n          \"\\n request = \" + params\n      );\n      fail(err);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89424def13674ea17829b41c5883c54ecc31a132","date":1473767373,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/TestRandomFaceting#validateResponse(String,String,ModifiableSolrParams,String,List[String]).mjava","pathOld":"/dev/null","sourceNew":"  private void validateResponse(String expected, String actual, ModifiableSolrParams params, String method,\n        List<String> methods) throws Exception {\n    if (params.getBool(\"facet.exists\", false)) {\n      if (isSortByCount(params)) { // it's challenged with facet.sort=count \n        expected = getExpectationForSortByCount(params, methods);// that requires to recalculate expactation\n      } else { // facet.sort=index\n        expected = capFacetCountsTo1(expected);\n      }\n    }\n    \n    String err = JSONTestUtil.match(\"/\", actual, expected, 0.0);\n    if (err != null) {\n      log.error(\"ERROR: mismatch facet response: \" + err +\n          \"\\n expected =\" + expected +\n          \"\\n response = \" + actual +\n          \"\\n request = \" + params\n      );\n      fail(err);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/TestRandomFaceting#validateResponse(String,String,ModifiableSolrParams,String,List[String]).mjava","pathOld":"/dev/null","sourceNew":"  private void validateResponse(String expected, String actual, ModifiableSolrParams params, String method,\n        List<String> methods) throws Exception {\n    if (params.getBool(\"facet.exists\", false)) {\n      if (isSortByCount(params)) { // it's challenged with facet.sort=count \n        expected = getExpectationForSortByCount(params, methods);// that requires to recalculate expactation\n      } else { // facet.sort=index\n        expected = capFacetCountsTo1(expected);\n      }\n    }\n    \n    String err = JSONTestUtil.match(\"/\", actual, expected, 0.0);\n    if (err != null) {\n      log.error(\"ERROR: mismatch facet response: \" + err +\n          \"\\n expected =\" + expected +\n          \"\\n response = \" + actual +\n          \"\\n request = \" + params\n      );\n      fail(err);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/TestRandomFaceting#validateResponse(String,String,ModifiableSolrParams,String,List[String]).mjava","pathOld":"/dev/null","sourceNew":"  private void validateResponse(String expected, String actual, ModifiableSolrParams params, String method,\n        List<String> methods) throws Exception {\n    if (params.getBool(\"facet.exists\", false)) {\n      if (isSortByCount(params)) { // it's challenged with facet.sort=count \n        expected = getExpectationForSortByCount(params, methods);// that requires to recalculate expactation\n      } else { // facet.sort=index\n        expected = capFacetCountsTo1(expected);\n      }\n    }\n    \n    String err = JSONTestUtil.match(\"/\", actual, expected, 0.0);\n    if (err != null) {\n      log.error(\"ERROR: mismatch facet response: \" + err +\n          \"\\n expected =\" + expected +\n          \"\\n response = \" + actual +\n          \"\\n request = \" + params\n      );\n      fail(err);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestRandomFaceting#validateResponse(String,String,ModifiableSolrParams,String,List[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/TestRandomFaceting#validateResponse(String,String,ModifiableSolrParams,String,List[String]).mjava","sourceNew":"  private void validateResponse(String expected, String actual, ModifiableSolrParams params, String method,\n        List<String> methods) throws Exception {\n    if (params.getBool(\"facet.exists\", false)) {\n      if (isSortByCount(params)) { // it's challenged with facet.sort=count \n        expected = getExpectationForSortByCount(params, methods);// that requires to recalculate expactation\n      } else { // facet.sort=index\n        expected = capFacetCountsTo1(expected);\n      }\n    }\n    \n    String err = JSONTestUtil.match(\"/\", actual, expected, 0.0);\n    if (err != null) {\n      log.error(\"ERROR: mismatch facet response: {}\\n expected ={}\\n response = {}\\n request = {}\"\n          , err, expected, actual, params);\n      fail(err);\n    }\n  }\n\n","sourceOld":"  private void validateResponse(String expected, String actual, ModifiableSolrParams params, String method,\n        List<String> methods) throws Exception {\n    if (params.getBool(\"facet.exists\", false)) {\n      if (isSortByCount(params)) { // it's challenged with facet.sort=count \n        expected = getExpectationForSortByCount(params, methods);// that requires to recalculate expactation\n      } else { // facet.sort=index\n        expected = capFacetCountsTo1(expected);\n      }\n    }\n    \n    String err = JSONTestUtil.match(\"/\", actual, expected, 0.0);\n    if (err != null) {\n      log.error(\"ERROR: mismatch facet response: \" + err +\n          \"\\n expected =\" + expected +\n          \"\\n response = \" + actual +\n          \"\\n request = \" + params\n      );\n      fail(err);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89424def13674ea17829b41c5883c54ecc31a132"],"bc8f206328a706450934717bec7ccc22ad166fc0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","39342cb658ac11dfcbf4459807fb00eb9ada0218"],"39342cb658ac11dfcbf4459807fb00eb9ada0218":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"89424def13674ea17829b41c5883c54ecc31a132":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bc8f206328a706450934717bec7ccc22ad166fc0"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","bc8f206328a706450934717bec7ccc22ad166fc0","39342cb658ac11dfcbf4459807fb00eb9ada0218","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","89424def13674ea17829b41c5883c54ecc31a132"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a966532d92cf9ba2856f15a8140151bb6b518e4b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"bc8f206328a706450934717bec7ccc22ad166fc0":["89424def13674ea17829b41c5883c54ecc31a132"],"39342cb658ac11dfcbf4459807fb00eb9ada0218":["bc8f206328a706450934717bec7ccc22ad166fc0"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"89424def13674ea17829b41c5883c54ecc31a132":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}