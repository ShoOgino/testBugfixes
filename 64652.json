{"path":"lucene/core/src/test/org/apache/lucene/util/fst/TestUtil#testBinarySearch().mjava","commits":[{"id":"b115f25f829e48473723bb73c2c09e29f0a3ed0d","date":1564170556,"type":0,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestUtil#testBinarySearch().mjava","pathOld":"/dev/null","sourceNew":"  public void testBinarySearch() throws Exception {\n    // Creates a node with 8 arcs spanning (z-A) = 57 chars that will be encoded as a sparse array (no gaps)\n    // requiring binary search\n    List<String> letters = Arrays.asList(\"A\", \"E\", \"J\", \"K\", \"L\", \"O\", \"T\", \"z\");\n    FST<Object> fst = buildFST(letters, true);\n    FST.Arc<Object> arc = fst.getFirstArc(new FST.Arc<>());\n    arc = fst.readFirstTargetArc(arc, arc, fst.getBytesReader());\n    for (int i = 0; i < letters.size(); i++) {\n      assertEquals(i, Util.binarySearch(fst, arc, letters.get(i).charAt(0)));\n    }\n    // before the first\n    assertEquals(-1, Util.binarySearch(fst, arc, ' '));\n    // after the last\n    assertEquals(-1 - letters.size(), Util.binarySearch(fst, arc, '~'));\n    assertEquals(-2, Util.binarySearch(fst, arc, 'B'));\n    assertEquals(-2, Util.binarySearch(fst, arc, 'C'));\n    assertEquals(-7, Util.binarySearch(fst, arc, 'P'));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":0,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestUtil#testBinarySearch().mjava","pathOld":"/dev/null","sourceNew":"  public void testBinarySearch() throws Exception {\n    // Creates a node with 8 arcs spanning (z-A) = 57 chars that will be encoded as a sparse array (no gaps)\n    // requiring binary search\n    List<String> letters = Arrays.asList(\"A\", \"E\", \"J\", \"K\", \"L\", \"O\", \"T\", \"z\");\n    FST<Object> fst = buildFST(letters, true);\n    FST.Arc<Object> arc = fst.getFirstArc(new FST.Arc<>());\n    arc = fst.readFirstTargetArc(arc, arc, fst.getBytesReader());\n    for (int i = 0; i < letters.size(); i++) {\n      assertEquals(i, Util.binarySearch(fst, arc, letters.get(i).charAt(0)));\n    }\n    // before the first\n    assertEquals(-1, Util.binarySearch(fst, arc, ' '));\n    // after the last\n    assertEquals(-1 - letters.size(), Util.binarySearch(fst, arc, '~'));\n    assertEquals(-2, Util.binarySearch(fst, arc, 'B'));\n    assertEquals(-2, Util.binarySearch(fst, arc, 'C'));\n    assertEquals(-7, Util.binarySearch(fst, arc, 'P'));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71d31a7d5773508492505519bb5230b87c8937ad","date":1573681693,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestUtil#testBinarySearch().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestUtil#testBinarySearch().mjava","sourceNew":"  public void testBinarySearch() throws Exception {\n    // Create a node with 8 arcs spanning (z-A) and ensure it is encoded as a packed array\n    // requiring binary search.\n    List<String> letters = Arrays.asList(\"A\", \"E\", \"J\", \"K\", \"L\", \"O\", \"T\", \"z\");\n    FST<Object> fst = buildFST(letters, true, false);\n    FST.Arc<Object> arc = fst.getFirstArc(new FST.Arc<>());\n    arc = fst.readFirstTargetArc(arc, arc, fst.getBytesReader());\n    for (int i = 0; i < letters.size(); i++) {\n      assertEquals(i, Util.binarySearch(fst, arc, letters.get(i).charAt(0)));\n    }\n    // before the first\n    assertEquals(-1, Util.binarySearch(fst, arc, ' '));\n    // after the last\n    assertEquals(-1 - letters.size(), Util.binarySearch(fst, arc, '~'));\n    assertEquals(-2, Util.binarySearch(fst, arc, 'B'));\n    assertEquals(-2, Util.binarySearch(fst, arc, 'C'));\n    assertEquals(-7, Util.binarySearch(fst, arc, 'P'));\n  }\n\n","sourceOld":"  public void testBinarySearch() throws Exception {\n    // Creates a node with 8 arcs spanning (z-A) = 57 chars that will be encoded as a sparse array (no gaps)\n    // requiring binary search\n    List<String> letters = Arrays.asList(\"A\", \"E\", \"J\", \"K\", \"L\", \"O\", \"T\", \"z\");\n    FST<Object> fst = buildFST(letters, true);\n    FST.Arc<Object> arc = fst.getFirstArc(new FST.Arc<>());\n    arc = fst.readFirstTargetArc(arc, arc, fst.getBytesReader());\n    for (int i = 0; i < letters.size(); i++) {\n      assertEquals(i, Util.binarySearch(fst, arc, letters.get(i).charAt(0)));\n    }\n    // before the first\n    assertEquals(-1, Util.binarySearch(fst, arc, ' '));\n    // after the last\n    assertEquals(-1 - letters.size(), Util.binarySearch(fst, arc, '~'));\n    assertEquals(-2, Util.binarySearch(fst, arc, 'B'));\n    assertEquals(-2, Util.binarySearch(fst, arc, 'C'));\n    assertEquals(-7, Util.binarySearch(fst, arc, 'P'));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b115f25f829e48473723bb73c2c09e29f0a3ed0d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"71d31a7d5773508492505519bb5230b87c8937ad":["b115f25f829e48473723bb73c2c09e29f0a3ed0d"],"f8061ddd97f3352007d927dae445884a6f3d857b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b115f25f829e48473723bb73c2c09e29f0a3ed0d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71d31a7d5773508492505519bb5230b87c8937ad"]},"commit2Childs":{"b115f25f829e48473723bb73c2c09e29f0a3ed0d":["71d31a7d5773508492505519bb5230b87c8937ad","f8061ddd97f3352007d927dae445884a6f3d857b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b115f25f829e48473723bb73c2c09e29f0a3ed0d","f8061ddd97f3352007d927dae445884a6f3d857b"],"71d31a7d5773508492505519bb5230b87c8937ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}