{"path":"lucene/src/java/org/apache/lucene/index/DocumentsWriterThreadPool#[T]_executeAllThreads(DocumentsWriter,AllThreadsTask[T]).mjava","commits":[{"id":"5ef87af8c7bd0f8429622b83aa74202383f2e757","date":1280262785,"type":1,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterThreadPool#[T]_executeAllThreads(DocumentsWriter,AllThreadsTask[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterThreadPool#[T]_executeAllThreads(AllThreadsTask[T]).mjava","sourceNew":"  public <T> T executeAllThreads(DocumentsWriter documentsWriter, AllThreadsTask<T> task) throws IOException {\n    T result = null;\n    \n    lock.lock();\n    try {\n      try {\n        while (globalLock) {\n          threadStateAvailable.await();\n        }\n      } catch (InterruptedException ie) {\n        throw new ThreadInterruptedException(ie);\n      }\n\n      assert !globalLock;\n      globalLock = true;\n\n      pauseAllThreads();\n      \n    } finally {\n      lock.unlock();\n    }\n\n    final ThreadState[] localAllThreads = allThreadStates;\n    \n    // all threads are idle now\n    boolean success = false;\n    try {\n      result = task.process(new Iterator<DocumentsWriterPerThread>() {\n        int i = 0;\n  \n        @Override\n        public boolean hasNext() {\n          return i < localAllThreads.length;\n        }\n  \n        @Override\n        public DocumentsWriterPerThread next() {\n          return localAllThreads[i++].perThread;\n        }\n  \n        @Override\n        public void remove() {\n          throw new UnsupportedOperationException(\"remove() not supported.\");\n        }\n      });\n      success = true;\n      return result;\n    } finally {\n      boolean abort = false;\n      if (!success) {\n        for (ThreadState state : localAllThreads) {\n          if (state.perThread.aborting) {\n            abort = true;\n          }\n        }\n      }\n      \n      lock.lock();\n      try {\n        try {\n          if (task.doClearThreadBindings()) {\n            clearAllThreadBindings();\n          }\n        } finally {\n          globalLock = false;\n          resumeAllThreads();\n          threadStateAvailable.signalAll();\n        }\n      } finally {\n        lock.unlock();\n      }\n      \n      if (!aborting && abort) {\n        documentsWriter.abort();\n      }\n      \n    }\n  }\n\n","sourceOld":"  public <T> T executeAllThreads(AllThreadsTask<T> task) throws IOException {\n    T result = null;\n    \n    lock.lock();\n    try {\n      try {\n        while (globalLock) {\n          threadStateAvailable.await();\n        }\n      } catch (InterruptedException ie) {\n        throw new ThreadInterruptedException(ie);\n      }\n      \n      pauseAllThreads();\n      globalLock = true;\n    } finally {\n      lock.unlock();\n    }\n\n    \n    // all threads are idle now\n    \n    try {\n      final ThreadState[] localAllThreads = allThreadStates;\n      \n      result = task.process(new Iterator<DocumentsWriterPerThread>() {\n        int i = 0;\n  \n        @Override\n        public boolean hasNext() {\n          return i < localAllThreads.length;\n        }\n  \n        @Override\n        public DocumentsWriterPerThread next() {\n          return localAllThreads[i++].perThread;\n        }\n  \n        @Override\n        public void remove() {\n          throw new UnsupportedOperationException(\"remove() not supported.\");\n        }\n      });\n      return result;\n    } finally {\n      lock.lock();\n      try {\n        try {\n          if (task.doClearThreadBindings()) {\n            clearAllThreadBindings();\n          }\n        } finally {\n          globalLock = false;\n          resumeAllThreads();\n          threadStateAvailable.signalAll();\n        }\n      } finally {\n        lock.unlock();\n      }\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterThreadPool#[T]_executeAllThreads(DocumentsWriter,AllThreadsTask[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterThreadPool#[T]_executeAllThreads(DocumentsWriter,AllThreadsTask[T]).mjava","sourceNew":"  public <T> T executeAllThreads(DocumentsWriter documentsWriter, AllThreadsTask<T> task) throws IOException {\n    T result = null;\n\n    lock.lock();\n    try {\n      try {\n        while (globalLock) {\n          threadStateAvailable.await();\n        }\n      } catch (InterruptedException ie) {\n        throw new ThreadInterruptedException(ie);\n      }\n\n      assert !globalLock;\n      globalLock = true;\n\n      pauseAllThreads();\n\n    } finally {\n      lock.unlock();\n    }\n\n    final ThreadState[] localAllThreads = allThreadStates;\n\n    // all threads are idle now\n    boolean success = false;\n    try {\n      result = task.process(getPerThreadIterator(localAllThreads));\n      success = true;\n      return result;\n    } finally {\n      boolean abort = false;\n      if (!success) {\n        for (ThreadState state : localAllThreads) {\n          if (state.perThread.aborting) {\n            abort = true;\n          }\n        }\n      }\n\n      lock.lock();\n      try {\n        try {\n          if (task.doClearThreadBindings()) {\n            clearAllThreadBindings();\n          }\n        } finally {\n          globalLock = false;\n          resumeAllThreads();\n          threadStateAvailable.signalAll();\n        }\n      } finally {\n        lock.unlock();\n      }\n\n      if (!aborting && abort) {\n        documentsWriter.abort();\n      }\n\n    }\n  }\n\n","sourceOld":"  public <T> T executeAllThreads(DocumentsWriter documentsWriter, AllThreadsTask<T> task) throws IOException {\n    T result = null;\n    \n    lock.lock();\n    try {\n      try {\n        while (globalLock) {\n          threadStateAvailable.await();\n        }\n      } catch (InterruptedException ie) {\n        throw new ThreadInterruptedException(ie);\n      }\n\n      assert !globalLock;\n      globalLock = true;\n\n      pauseAllThreads();\n      \n    } finally {\n      lock.unlock();\n    }\n\n    final ThreadState[] localAllThreads = allThreadStates;\n    \n    // all threads are idle now\n    boolean success = false;\n    try {\n      result = task.process(new Iterator<DocumentsWriterPerThread>() {\n        int i = 0;\n  \n        @Override\n        public boolean hasNext() {\n          return i < localAllThreads.length;\n        }\n  \n        @Override\n        public DocumentsWriterPerThread next() {\n          return localAllThreads[i++].perThread;\n        }\n  \n        @Override\n        public void remove() {\n          throw new UnsupportedOperationException(\"remove() not supported.\");\n        }\n      });\n      success = true;\n      return result;\n    } finally {\n      boolean abort = false;\n      if (!success) {\n        for (ThreadState state : localAllThreads) {\n          if (state.perThread.aborting) {\n            abort = true;\n          }\n        }\n      }\n      \n      lock.lock();\n      try {\n        try {\n          if (task.doClearThreadBindings()) {\n            clearAllThreadBindings();\n          }\n        } finally {\n          globalLock = false;\n          resumeAllThreads();\n          threadStateAvailable.signalAll();\n        }\n      } finally {\n        lock.unlock();\n      }\n      \n      if (!aborting && abort) {\n        documentsWriter.abort();\n      }\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff78505662c0b741e2663a9f38a4889c12a32c9f","date":1294908561,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterThreadPool#[T]_executeAllThreads(DocumentsWriter,AllThreadsTask[T]).mjava","sourceNew":null,"sourceOld":"  public <T> T executeAllThreads(DocumentsWriter documentsWriter, AllThreadsTask<T> task) throws IOException {\n    T result = null;\n\n    lock.lock();\n    try {\n      try {\n        while (globalLock) {\n          threadStateAvailable.await();\n        }\n      } catch (InterruptedException ie) {\n        throw new ThreadInterruptedException(ie);\n      }\n\n      assert !globalLock;\n      globalLock = true;\n\n      pauseAllThreads();\n\n    } finally {\n      lock.unlock();\n    }\n\n    final ThreadState[] localAllThreads = allThreadStates;\n\n    // all threads are idle now\n    boolean success = false;\n    try {\n      result = task.process(getPerThreadIterator(localAllThreads));\n      success = true;\n      return result;\n    } finally {\n      boolean abort = false;\n      if (!success) {\n        for (ThreadState state : localAllThreads) {\n          if (state.perThread.aborting) {\n            abort = true;\n          }\n        }\n      }\n\n      lock.lock();\n      try {\n        try {\n          if (task.doClearThreadBindings()) {\n            clearAllThreadBindings();\n          }\n        } finally {\n          globalLock = false;\n          resumeAllThreads();\n          threadStateAvailable.signalAll();\n        }\n      } finally {\n        lock.unlock();\n      }\n\n      if (!aborting && abort) {\n        documentsWriter.abort();\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff78505662c0b741e2663a9f38a4889c12a32c9f":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5ef87af8c7bd0f8429622b83aa74202383f2e757":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5ef87af8c7bd0f8429622b83aa74202383f2e757","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ff78505662c0b741e2663a9f38a4889c12a32c9f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5ef87af8c7bd0f8429622b83aa74202383f2e757","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5ef87af8c7bd0f8429622b83aa74202383f2e757":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["ff78505662c0b741e2663a9f38a4889c12a32c9f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ff78505662c0b741e2663a9f38a4889c12a32c9f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}