{"path":"solr/core/src/test/org/apache/solr/schema/IndexSchemaRuntimeFieldTest#testRuntimeFieldCreation().mjava","commits":[{"id":"2f49143da0a5d278a72f741432047fcfa6da996e","date":1316927425,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/IndexSchemaRuntimeFieldTest#testRuntimeFieldCreation().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/IndexSchemaTest#testRuntimeFieldCreation().mjava","sourceNew":"  @Test\n  public void testRuntimeFieldCreation() {\n    // any field manipulation needs to happen when you know the core will not\n    // be accepting any requests.  Typically this is done within the inform()\n    // method.  Since this is a single threaded test, we can change the fields\n    // willi-nilly\n\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    final String fieldName = \"runtimefield\";\n    SchemaField sf = new SchemaField( fieldName, schema.getFieldTypes().get( \"string\" ) );\n    schema.getFields().put( fieldName, sf );\n\n    // also register a new copy field (from our new field)\n    schema.registerCopyField( fieldName, \"dynamic_runtime\" );\n    schema.refreshAnalyzers();\n\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", fieldName, \"aaa\"));\n    assertU(commit());\n\n    SolrQuery query = new SolrQuery( fieldName+\":aaa\" );\n    query.set( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, query );\n\n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n\n    // Check to see if our copy field made it out safely\n    query.setQuery( \"dynamic_runtime:aaa\" );\n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n    clearIndex();\n  }\n\n","sourceOld":"  @Test\n  public void testRuntimeFieldCreation()\n  {\n    // any field manipulation needs to happen when you know the core will not \n    // be accepting any requests.  Typically this is done within the inform() \n    // method.  Since this is a single threaded test, we can change the fields\n    // willi-nilly\n\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    final String fieldName = \"runtimefield\";\n    SchemaField sf = new SchemaField( fieldName, schema.getFieldTypes().get( \"string\" ) );\n    schema.getFields().put( fieldName, sf );\n    \n    // also register a new copy field (from our new field)\n    schema.registerCopyField( fieldName, \"dynamic_runtime\" );\n    schema.refreshAnalyzers();\n    \n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", fieldName, \"aaa\"));\n    assertU(commit());\n\n    SolrQuery query = new SolrQuery( fieldName+\":aaa\" );\n    query.set( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, query );\n    \n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n    \n    // Check to see if our copy field made it out safely\n    query.setQuery( \"dynamic_runtime:aaa\" );\n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n    clearIndex();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/IndexSchemaRuntimeFieldTest#testRuntimeFieldCreation().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/IndexSchemaRuntimeFieldTest#testRuntimeFieldCreation().mjava","sourceNew":"  @Test\n  public void testRuntimeFieldCreation() {\n    // any field manipulation needs to happen when you know the core will not\n    // be accepting any requests.  Typically this is done within the inform()\n    // method.  Since this is a single threaded test, we can change the fields\n    // willi-nilly\n\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    final String fieldName = \"runtimefield\";\n    SchemaField sf = new SchemaField( fieldName, schema.getFieldTypes().get( \"string\" ) );\n    schema.getFields().put( fieldName, sf );\n\n    // also register a new copy field (from our new field)\n    schema.registerCopyField( fieldName, \"dynamic_runtime\" );\n    schema.refreshAnalyzers();\n\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", fieldName, \"aaa\"));\n    assertU(commit());\n\n    SolrQuery query = new SolrQuery( fieldName+\":aaa\" );\n    query.set( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, query );\n\n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n\n    // Check to see if our copy field made it out safely\n    query.setQuery( \"dynamic_runtime:aaa\" );\n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n    clearIndex();\n  }\n\n","sourceOld":"  @Test\n  public void testRuntimeFieldCreation() {\n    // any field manipulation needs to happen when you know the core will not\n    // be accepting any requests.  Typically this is done within the inform()\n    // method.  Since this is a single threaded test, we can change the fields\n    // willi-nilly\n\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    final String fieldName = \"runtimefield\";\n    SchemaField sf = new SchemaField( fieldName, schema.getFieldTypes().get( \"string\" ) );\n    schema.getFields().put( fieldName, sf );\n\n    // also register a new copy field (from our new field)\n    schema.registerCopyField( fieldName, \"dynamic_runtime\" );\n    schema.refreshAnalyzers();\n\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", fieldName, \"aaa\"));\n    assertU(commit());\n\n    SolrQuery query = new SolrQuery( fieldName+\":aaa\" );\n    query.set( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, query );\n\n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n\n    // Check to see if our copy field made it out safely\n    query.setQuery( \"dynamic_runtime:aaa\" );\n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n    clearIndex();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71f63026529f3c1f03cfdd664910873ab2369ae","date":1497543264,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/IndexSchemaRuntimeFieldTest#testRuntimeFieldCreation().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/IndexSchemaRuntimeFieldTest#testRuntimeFieldCreation().mjava","sourceNew":"  @Test\n  public void testRuntimeFieldCreation() {\n    // any field manipulation needs to happen when you know the core will not\n    // be accepting any requests.  Typically this is done within the inform()\n    // method.  Since this is a single threaded test, we can change the fields\n    // willi-nilly\n\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    final String fieldName = \"runtimefield\";\n    SchemaField sf = new SchemaField( fieldName, schema.getFieldTypes().get( \"string\" ) );\n    schema.getFields().put( fieldName, sf );\n\n    // also register a new copy field (from our new field)\n    schema.registerCopyField( fieldName, \"dynamic_runtime\" );\n    schema.refreshAnalyzers();\n\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", fieldName, \"aaa\"));\n    assertU(commit());\n\n    SolrQuery query = new SolrQuery( fieldName+\":aaa\" );\n    query.set( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, query );\n\n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='10']\"\n            );\n\n    // Check to see if our copy field made it out safely\n    query.setQuery( \"dynamic_runtime:aaa\" );\n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='10']\"\n            );\n    clearIndex();\n  }\n\n","sourceOld":"  @Test\n  public void testRuntimeFieldCreation() {\n    // any field manipulation needs to happen when you know the core will not\n    // be accepting any requests.  Typically this is done within the inform()\n    // method.  Since this is a single threaded test, we can change the fields\n    // willi-nilly\n\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    final String fieldName = \"runtimefield\";\n    SchemaField sf = new SchemaField( fieldName, schema.getFieldTypes().get( \"string\" ) );\n    schema.getFields().put( fieldName, sf );\n\n    // also register a new copy field (from our new field)\n    schema.registerCopyField( fieldName, \"dynamic_runtime\" );\n    schema.refreshAnalyzers();\n\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", fieldName, \"aaa\"));\n    assertU(commit());\n\n    SolrQuery query = new SolrQuery( fieldName+\":aaa\" );\n    query.set( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, query );\n\n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n\n    // Check to see if our copy field made it out safely\n    query.setQuery( \"dynamic_runtime:aaa\" );\n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n    clearIndex();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/IndexSchemaRuntimeFieldTest#testRuntimeFieldCreation().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/IndexSchemaRuntimeFieldTest#testRuntimeFieldCreation().mjava","sourceNew":"  @Test\n  public void testRuntimeFieldCreation() {\n    // any field manipulation needs to happen when you know the core will not\n    // be accepting any requests.  Typically this is done within the inform()\n    // method.  Since this is a single threaded test, we can change the fields\n    // willi-nilly\n\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    final String fieldName = \"runtimefield\";\n    SchemaField sf = new SchemaField( fieldName, schema.getFieldTypes().get( \"string\" ) );\n    schema.getFields().put( fieldName, sf );\n\n    // also register a new copy field (from our new field)\n    schema.registerCopyField( fieldName, \"dynamic_runtime\" );\n    schema.refreshAnalyzers();\n\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", fieldName, \"aaa\"));\n    assertU(commit());\n\n    SolrQuery query = new SolrQuery( fieldName+\":aaa\" );\n    query.set( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, query );\n\n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='10']\"\n            );\n\n    // Check to see if our copy field made it out safely\n    query.setQuery( \"dynamic_runtime:aaa\" );\n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='10']\"\n            );\n    clearIndex();\n  }\n\n","sourceOld":"  @Test\n  public void testRuntimeFieldCreation() {\n    // any field manipulation needs to happen when you know the core will not\n    // be accepting any requests.  Typically this is done within the inform()\n    // method.  Since this is a single threaded test, we can change the fields\n    // willi-nilly\n\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    final String fieldName = \"runtimefield\";\n    SchemaField sf = new SchemaField( fieldName, schema.getFieldTypes().get( \"string\" ) );\n    schema.getFields().put( fieldName, sf );\n\n    // also register a new copy field (from our new field)\n    schema.registerCopyField( fieldName, \"dynamic_runtime\" );\n    schema.refreshAnalyzers();\n\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", fieldName, \"aaa\"));\n    assertU(commit());\n\n    SolrQuery query = new SolrQuery( fieldName+\":aaa\" );\n    query.set( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, query );\n\n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n\n    // Check to see if our copy field made it out safely\n    query.setQuery( \"dynamic_runtime:aaa\" );\n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n    clearIndex();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/IndexSchemaRuntimeFieldTest#testRuntimeFieldCreation().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/IndexSchemaRuntimeFieldTest#testRuntimeFieldCreation().mjava","sourceNew":"  @Test\n  public void testRuntimeFieldCreation() {\n    // any field manipulation needs to happen when you know the core will not\n    // be accepting any requests.  Typically this is done within the inform()\n    // method.  Since this is a single threaded test, we can change the fields\n    // willi-nilly\n\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    final String fieldName = \"runtimefield\";\n    SchemaField sf = new SchemaField( fieldName, schema.getFieldTypes().get( \"string\" ) );\n    schema.getFields().put( fieldName, sf );\n\n    // also register a new copy field (from our new field)\n    schema.registerCopyField( fieldName, \"dynamic_runtime\" );\n    schema.refreshAnalyzers();\n\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", fieldName, \"aaa\"));\n    assertU(commit());\n\n    SolrQuery query = new SolrQuery( fieldName+\":aaa\" );\n    query.set( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, query );\n\n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='10']\"\n            );\n\n    // Check to see if our copy field made it out safely\n    query.setQuery( \"dynamic_runtime:aaa\" );\n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='10']\"\n            );\n    clearIndex();\n  }\n\n","sourceOld":"  @Test\n  public void testRuntimeFieldCreation() {\n    // any field manipulation needs to happen when you know the core will not\n    // be accepting any requests.  Typically this is done within the inform()\n    // method.  Since this is a single threaded test, we can change the fields\n    // willi-nilly\n\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    final String fieldName = \"runtimefield\";\n    SchemaField sf = new SchemaField( fieldName, schema.getFieldTypes().get( \"string\" ) );\n    schema.getFields().put( fieldName, sf );\n\n    // also register a new copy field (from our new field)\n    schema.registerCopyField( fieldName, \"dynamic_runtime\" );\n    schema.refreshAnalyzers();\n\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", fieldName, \"aaa\"));\n    assertU(commit());\n\n    SolrQuery query = new SolrQuery( fieldName+\":aaa\" );\n    query.set( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, query );\n\n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n\n    // Check to see if our copy field made it out safely\n    query.setQuery( \"dynamic_runtime:aaa\" );\n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n    clearIndex();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a71f63026529f3c1f03cfdd664910873ab2369ae":["08970e5b8411182a29412c177eff67ec1110095b"],"2f49143da0a5d278a72f741432047fcfa6da996e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["08970e5b8411182a29412c177eff67ec1110095b","a71f63026529f3c1f03cfdd664910873ab2369ae"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["08970e5b8411182a29412c177eff67ec1110095b","a71f63026529f3c1f03cfdd664910873ab2369ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"08970e5b8411182a29412c177eff67ec1110095b":["2f49143da0a5d278a72f741432047fcfa6da996e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2f49143da0a5d278a72f741432047fcfa6da996e"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"2f49143da0a5d278a72f741432047fcfa6da996e":["08970e5b8411182a29412c177eff67ec1110095b"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"08970e5b8411182a29412c177eff67ec1110095b":["a71f63026529f3c1f03cfdd664910873ab2369ae","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}