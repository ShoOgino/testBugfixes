{"path":"solr/core/src/java/org/apache/solr/search/stats/StatsCache#approxCheckMissingStats(ResponseBuilder,StatsSource,Consumer[Term],Consumer[String]).mjava","commits":[{"id":"df72a23fb74bebe914e3f3972063a884327c0436","date":1570470832,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/stats/StatsCache#approxCheckMissingStats(ResponseBuilder,StatsSource,Consumer[Term],Consumer[String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Check if the <code>statsSource</code> is missing some term or field statistics info,\n   * which then needs to be retrieved.\n   * <p>NOTE: this uses the local IndexReader for query rewriting, which may expand to less (or different)\n   * terms as rewriting the same query on other shards' readers. This in turn may falsely fail to inform the consumers\n   * about possibly missing stats, which may lead consumers to skip the fetching of full stats. Consequently\n   * this would lead to incorrect global IDF data for the missing terms (because for these terms only local stats\n   * would be used).</p>\n   * @param rb request to evaluate against the statsSource\n   * @param statsSource stats source to check\n   * @param missingTermStats consumer of missing term stats\n   * @param missingFieldStats consumer of missing field stats\n   * @return approximate number of missing term stats and field stats combined\n   */\n  public int approxCheckMissingStats(ResponseBuilder rb, StatsSource statsSource, Consumer<Term> missingTermStats, Consumer<String> missingFieldStats) throws IOException {\n    CheckingIndexSearcher checkingSearcher = new CheckingIndexSearcher(statsSource, rb.req.getSearcher().getIndexReader(), missingTermStats, missingFieldStats);\n    Query q = rb.getQuery();\n    q = checkingSearcher.rewrite(q);\n    checkingSearcher.createWeight(q, ScoreMode.COMPLETE, 1);\n    return checkingSearcher.missingFieldsCount + checkingSearcher.missingTermsCount;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/stats/StatsCache#approxCheckMissingStats(ResponseBuilder,StatsSource,Consumer[Term],Consumer[String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Check if the <code>statsSource</code> is missing some term or field statistics info,\n   * which then needs to be retrieved.\n   * <p>NOTE: this uses the local IndexReader for query rewriting, which may expand to less (or different)\n   * terms as rewriting the same query on other shards' readers. This in turn may falsely fail to inform the consumers\n   * about possibly missing stats, which may lead consumers to skip the fetching of full stats. Consequently\n   * this would lead to incorrect global IDF data for the missing terms (because for these terms only local stats\n   * would be used).</p>\n   * @param rb request to evaluate against the statsSource\n   * @param statsSource stats source to check\n   * @param missingTermStats consumer of missing term stats\n   * @param missingFieldStats consumer of missing field stats\n   * @return approximate number of missing term stats and field stats combined\n   */\n  public int approxCheckMissingStats(ResponseBuilder rb, StatsSource statsSource, Consumer<Term> missingTermStats, Consumer<String> missingFieldStats) throws IOException {\n    CheckingIndexSearcher checkingSearcher = new CheckingIndexSearcher(statsSource, rb.req.getSearcher().getIndexReader(), missingTermStats, missingFieldStats);\n    Query q = rb.getQuery();\n    q = checkingSearcher.rewrite(q);\n    checkingSearcher.createWeight(q, ScoreMode.COMPLETE, 1);\n    return checkingSearcher.missingFieldsCount + checkingSearcher.missingTermsCount;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"df72a23fb74bebe914e3f3972063a884327c0436":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df72a23fb74bebe914e3f3972063a884327c0436"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","df72a23fb74bebe914e3f3972063a884327c0436"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["df72a23fb74bebe914e3f3972063a884327c0436","b0b597c65628ca9e73913a07e81691f8229bae35"],"df72a23fb74bebe914e3f3972063a884327c0436":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}