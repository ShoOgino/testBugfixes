{"path":"lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/AnalyzerUtil#getParagraphs(String,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/AnalyzerUtil#getParagraphs(String,int).mjava","pathOld":"contrib/wordnet/src/java/org/apache/lucene/wordnet/AnalyzerUtil#getParagraphs(String,int).mjava","sourceNew":"  /**\n   * Returns at most the first N paragraphs of the given text. Delimiting\n   * characters are excluded from the results. Each returned paragraph is\n   * whitespace-trimmed via String.trim(), potentially an empty string.\n   * \n   * @param text\n   *            the text to tokenize into paragraphs\n   * @param limit\n   *            the maximum number of paragraphs to return; zero indicates \"as\n   *            many as possible\".\n   * @return the first N paragraphs\n   */\n  public static String[] getParagraphs(String text, int limit) {\n    return tokenize(PARAGRAPHS, text, limit);\n  }\n\n","sourceOld":"  /**\n   * Returns at most the first N paragraphs of the given text. Delimiting\n   * characters are excluded from the results. Each returned paragraph is\n   * whitespace-trimmed via String.trim(), potentially an empty string.\n   * \n   * @param text\n   *            the text to tokenize into paragraphs\n   * @param limit\n   *            the maximum number of paragraphs to return; zero indicates \"as\n   *            many as possible\".\n   * @return the first N paragraphs\n   */\n  public static String[] getParagraphs(String text, int limit) {\n    return tokenize(PARAGRAPHS, text, limit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"689f35bd9818b47b8d9fe96cf06518228e949ab6","date":1272894884,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/AnalyzerUtil#getParagraphs(String,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns at most the first N paragraphs of the given text. Delimiting\n   * characters are excluded from the results. Each returned paragraph is\n   * whitespace-trimmed via String.trim(), potentially an empty string.\n   * \n   * @param text\n   *            the text to tokenize into paragraphs\n   * @param limit\n   *            the maximum number of paragraphs to return; zero indicates \"as\n   *            many as possible\".\n   * @return the first N paragraphs\n   */\n  public static String[] getParagraphs(String text, int limit) {\n    return tokenize(PARAGRAPHS, text, limit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"689f35bd9818b47b8d9fe96cf06518228e949ab6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["689f35bd9818b47b8d9fe96cf06518228e949ab6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"689f35bd9818b47b8d9fe96cf06518228e949ab6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["689f35bd9818b47b8d9fe96cf06518228e949ab6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}