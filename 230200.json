{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/PackedQuadPrefixTree#checkBattenberg(byte,double,double,int,List[Cell],long,Shape,int).mjava","commits":[{"id":"9d3854546d75fdc5a4c3b13d0c67b6b331185945","date":1429762111,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/PackedQuadPrefixTree#checkBattenberg(byte,double,double,int,List[Cell],long,Shape,int).mjava","pathOld":"/dev/null","sourceNew":"  protected void checkBattenberg(byte quad, double cx, double cy, int level, List<Cell> matches,\n                               long term, Shape shape, int maxLevel) {\n    // short-circuit if we find a match for the point (no need to continue recursion)\n    if (shape instanceof Point && !matches.isEmpty())\n      return;\n    double w = levelW[level] / 2;\n    double h = levelH[level] / 2;\n\n    SpatialRelation v = shape.relate(ctx.makeRectangle(cx - w, cx + w, cy - h, cy + h));\n\n    if (SpatialRelation.DISJOINT == v) {\n      return;\n    }\n\n    // set bits for next level\n    term |= (((long)(quad))<<(64-(++level<<1)));\n    // increment level\n    term = ((term>>>1)+1)<<1;\n\n    if (SpatialRelation.CONTAINS == v || (level >= maxLevel)) {\n      matches.add(new PackedQuadCell(term, v.transpose()));\n    } else {// SpatialRelation.WITHIN, SpatialRelation.INTERSECTS\n      build(cx, cy, level, matches, term, shape, maxLevel);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/PackedQuadPrefixTree#checkBattenberg(byte,double,double,int,List[Cell],long,Shape,int).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/PackedQuadPrefixTree#checkBattenberg(byte,double,double,int,List[Cell],long,Shape,int).mjava","sourceNew":"  protected void checkBattenberg(byte quad, double cx, double cy, int level, List<Cell> matches,\n                               long term, Shape shape, int maxLevel) {\n    // short-circuit if we find a match for the point (no need to continue recursion)\n    if (shape instanceof Point && !matches.isEmpty())\n      return;\n    double w = levelW[level] / 2;\n    double h = levelH[level] / 2;\n\n    SpatialRelation v = shape.relate(ctx.makeRectangle(cx - w, cx + w, cy - h, cy + h));\n\n    if (SpatialRelation.DISJOINT == v) {\n      return;\n    }\n\n    // set bits for next level\n    term |= (((long)(quad))<<(64-(++level<<1)));\n    // increment level\n    term = ((term>>>1)+1)<<1;\n\n    if (SpatialRelation.CONTAINS == v || (level >= maxLevel)) {\n      matches.add(new PackedQuadCell(term, v.transpose()));\n    } else {// SpatialRelation.WITHIN, SpatialRelation.INTERSECTS\n      build(cx, cy, level, matches, term, shape, maxLevel);\n    }\n  }\n\n","sourceOld":"  protected void checkBattenberg(byte quad, double cx, double cy, int level, List<Cell> matches,\n                               long term, Shape shape, int maxLevel) {\n    // short-circuit if we find a match for the point (no need to continue recursion)\n    if (shape instanceof Point && !matches.isEmpty())\n      return;\n    double w = levelW[level] / 2;\n    double h = levelH[level] / 2;\n\n    SpatialRelation v = shape.relate(ctx.makeRectangle(cx - w, cx + w, cy - h, cy + h));\n\n    if (SpatialRelation.DISJOINT == v) {\n      return;\n    }\n\n    // set bits for next level\n    term |= (((long)(quad))<<(64-(++level<<1)));\n    // increment level\n    term = ((term>>>1)+1)<<1;\n\n    if (SpatialRelation.CONTAINS == v || (level >= maxLevel)) {\n      matches.add(new PackedQuadCell(term, v.transpose()));\n    } else {// SpatialRelation.WITHIN, SpatialRelation.INTERSECTS\n      build(cx, cy, level, matches, term, shape, maxLevel);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/PackedQuadPrefixTree#checkBattenberg(byte,double,double,int,List[Cell],long,Shape,int).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/PackedQuadPrefixTree#checkBattenberg(byte,double,double,int,List[Cell],long,Shape,int).mjava","sourceNew":"  protected void checkBattenberg(byte quad, double cx, double cy, int level, List<Cell> matches,\n                               long term, Shape shape, int maxLevel) {\n    // short-circuit if we find a match for the point (no need to continue recursion)\n    if (shape instanceof Point && !matches.isEmpty())\n      return;\n    double w = levelW[level] / 2;\n    double h = levelH[level] / 2;\n\n    SpatialRelation v = shape.relate(ctx.makeRectangle(cx - w, cx + w, cy - h, cy + h));\n\n    if (SpatialRelation.DISJOINT == v) {\n      return;\n    }\n\n    // set bits for next level\n    term |= (((long)(quad))<<(64-(++level<<1)));\n    // increment level\n    term = ((term>>>1)+1)<<1;\n\n    if (SpatialRelation.CONTAINS == v || (level >= maxLevel)) {\n      matches.add(new PackedQuadCell(term, v.transpose()));\n    } else {// SpatialRelation.WITHIN, SpatialRelation.INTERSECTS\n      build(cx, cy, level, matches, term, shape, maxLevel);\n    }\n  }\n\n","sourceOld":"  protected void checkBattenberg(byte quad, double cx, double cy, int level, List<Cell> matches,\n                               long term, Shape shape, int maxLevel) {\n    // short-circuit if we find a match for the point (no need to continue recursion)\n    if (shape instanceof Point && !matches.isEmpty())\n      return;\n    double w = levelW[level] / 2;\n    double h = levelH[level] / 2;\n\n    SpatialRelation v = shape.relate(ctx.makeRectangle(cx - w, cx + w, cy - h, cy + h));\n\n    if (SpatialRelation.DISJOINT == v) {\n      return;\n    }\n\n    // set bits for next level\n    term |= (((long)(quad))<<(64-(++level<<1)));\n    // increment level\n    term = ((term>>>1)+1)<<1;\n\n    if (SpatialRelation.CONTAINS == v || (level >= maxLevel)) {\n      matches.add(new PackedQuadCell(term, v.transpose()));\n    } else {// SpatialRelation.WITHIN, SpatialRelation.INTERSECTS\n      build(cx, cy, level, matches, term, shape, maxLevel);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["9d3854546d75fdc5a4c3b13d0c67b6b331185945","112d77ac8d3e10a362516ad834c9a11d35c94234"],"9d3854546d75fdc5a4c3b13d0c67b6b331185945":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["9d3854546d75fdc5a4c3b13d0c67b6b331185945"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9d3854546d75fdc5a4c3b13d0c67b6b331185945":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9d3854546d75fdc5a4c3b13d0c67b6b331185945"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}