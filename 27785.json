{"path":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#informResourceLoaderAwareObjectsInChain(TokenizerChain).mjava","commits":[{"id":"bdf16ebe435fc9daea90a73b8683ff001c6d3523","date":1409931231,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#informResourceLoaderAwareObjectsInChain(TokenizerChain).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * After creating a new FieldType, it may contain components that implement\n   * the ResourceLoaderAware interface, which need to be informed after they\n   * are loaded (as they depend on this callback to complete initialization work)\n   */\n  protected void informResourceLoaderAwareObjectsInChain(TokenizerChain chain) {\n    CharFilterFactory[] charFilters = chain.getCharFilterFactories();\n    if (charFilters != null) {\n      for (CharFilterFactory next : charFilters) {\n        if (next instanceof ResourceLoaderAware) {\n          try {\n            ((ResourceLoaderAware) next).inform(loader);\n          } catch (IOException e) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, e);\n          }\n        }\n      }\n    }\n\n    TokenizerFactory tokenizerFactory = chain.getTokenizerFactory();\n    if (tokenizerFactory != null && tokenizerFactory instanceof ResourceLoaderAware) {\n      try {\n        ((ResourceLoaderAware) tokenizerFactory).inform(loader);\n      } catch (IOException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      }\n    }\n\n    TokenFilterFactory[] filters = chain.getTokenFilterFactories();\n    if (filters != null) {\n      for (TokenFilterFactory next : filters) {\n        if (next instanceof ResourceLoaderAware) {\n          try {\n            ((ResourceLoaderAware) next).inform(loader);\n          } catch (IOException e) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, e);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1486037b0fcc4d552ab91d319279d41d68fe6a94"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1486037b0fcc4d552ab91d319279d41d68fe6a94","date":1437497377,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#informResourceLoaderAwareObjectsInChain(TokenizerChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#informResourceLoaderAwareObjectsInChain(TokenizerChain).mjava","sourceNew":"  /**\n   * After creating a new FieldType, it may contain components that implement\n   * the ResourceLoaderAware interface, which need to be informed after they\n   * are loaded (as they depend on this callback to complete initialization work)\n   */\n  protected void informResourceLoaderAwareObjectsInChain(TokenizerChain chain) {\n    CharFilterFactory[] charFilters = chain.getCharFilterFactories();\n    for (CharFilterFactory next : charFilters) {\n      if (next instanceof ResourceLoaderAware) {\n        try {\n          ((ResourceLoaderAware) next).inform(loader);\n        } catch (IOException e) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, e);\n        }\n        }\n    }\n\n    TokenizerFactory tokenizerFactory = chain.getTokenizerFactory();\n    if (tokenizerFactory instanceof ResourceLoaderAware) {\n      try {\n        ((ResourceLoaderAware) tokenizerFactory).inform(loader);\n      } catch (IOException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      }\n    }\n\n    TokenFilterFactory[] filters = chain.getTokenFilterFactories();\n    for (TokenFilterFactory next : filters) {\n      if (next instanceof ResourceLoaderAware) {\n        try {\n          ((ResourceLoaderAware) next).inform(loader);\n        } catch (IOException e) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * After creating a new FieldType, it may contain components that implement\n   * the ResourceLoaderAware interface, which need to be informed after they\n   * are loaded (as they depend on this callback to complete initialization work)\n   */\n  protected void informResourceLoaderAwareObjectsInChain(TokenizerChain chain) {\n    CharFilterFactory[] charFilters = chain.getCharFilterFactories();\n    if (charFilters != null) {\n      for (CharFilterFactory next : charFilters) {\n        if (next instanceof ResourceLoaderAware) {\n          try {\n            ((ResourceLoaderAware) next).inform(loader);\n          } catch (IOException e) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, e);\n          }\n        }\n      }\n    }\n\n    TokenizerFactory tokenizerFactory = chain.getTokenizerFactory();\n    if (tokenizerFactory != null && tokenizerFactory instanceof ResourceLoaderAware) {\n      try {\n        ((ResourceLoaderAware) tokenizerFactory).inform(loader);\n      } catch (IOException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      }\n    }\n\n    TokenFilterFactory[] filters = chain.getTokenFilterFactories();\n    if (filters != null) {\n      for (TokenFilterFactory next : filters) {\n        if (next instanceof ResourceLoaderAware) {\n          try {\n            ((ResourceLoaderAware) next).inform(loader);\n          } catch (IOException e) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, e);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":["bdf16ebe435fc9daea90a73b8683ff001c6d3523"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f53fd7227ce17ccc6445b3433d004cb6ac33e08a","date":1600333804,"type":3,"author":"noblepaul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#informResourceLoaderAwareObjectsInChain(TokenizerChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#informResourceLoaderAwareObjectsInChain(TokenizerChain).mjava","sourceNew":"  /**\n   * After creating a new FieldType, it may contain components that implement\n   * the ResourceLoaderAware interface, which need to be informed after they\n   * are loaded (as they depend on this callback to complete initialization work)\n   */\n  protected void informResourceLoaderAwareObjectsInChain(TokenizerChain chain) {\n    CharFilterFactory[] charFilters = chain.getCharFilterFactories();\n    for (CharFilterFactory next : charFilters) {\n      if (next instanceof ResourceLoaderAware) {\n        try {\n          ((ResourceLoaderAware) next).inform(loader);\n        } catch (IOException e) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, e);\n        }\n        }\n    }\n\n    TokenizerFactory tokenizerFactory = chain.getTokenizerFactory();\n    if (tokenizerFactory instanceof ResourceLoaderAware) {\n      try {\n        ((ResourceLoaderAware) tokenizerFactory).inform(loader);\n      } catch (IOException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      }\n    }\n\n    TokenFilterFactory[] filters = chain.getTokenFilterFactories();\n    for (TokenFilterFactory next : filters) {\n      if (next instanceof ResourceLoaderAware) {\n        SolrResourceLoader.CURRENT_AWARE.set((ResourceLoaderAware) next);\n        try {\n          ((ResourceLoaderAware) next).inform(loader);\n        } catch (IOException e) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, e);\n        } finally {\n          SolrResourceLoader.CURRENT_AWARE.remove();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * After creating a new FieldType, it may contain components that implement\n   * the ResourceLoaderAware interface, which need to be informed after they\n   * are loaded (as they depend on this callback to complete initialization work)\n   */\n  protected void informResourceLoaderAwareObjectsInChain(TokenizerChain chain) {\n    CharFilterFactory[] charFilters = chain.getCharFilterFactories();\n    for (CharFilterFactory next : charFilters) {\n      if (next instanceof ResourceLoaderAware) {\n        try {\n          ((ResourceLoaderAware) next).inform(loader);\n        } catch (IOException e) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, e);\n        }\n        }\n    }\n\n    TokenizerFactory tokenizerFactory = chain.getTokenizerFactory();\n    if (tokenizerFactory instanceof ResourceLoaderAware) {\n      try {\n        ((ResourceLoaderAware) tokenizerFactory).inform(loader);\n      } catch (IOException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      }\n    }\n\n    TokenFilterFactory[] filters = chain.getTokenFilterFactories();\n    for (TokenFilterFactory next : filters) {\n      if (next instanceof ResourceLoaderAware) {\n        try {\n          ((ResourceLoaderAware) next).inform(loader);\n        } catch (IOException e) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f3a7ad440719bd3745e24257995343834d7f4b3","date":1602047075,"type":3,"author":"noblepaul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#informResourceLoaderAwareObjectsInChain(TokenizerChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#informResourceLoaderAwareObjectsInChain(TokenizerChain).mjava","sourceNew":"  /**\n   * After creating a new FieldType, it may contain components that implement\n   * the ResourceLoaderAware interface, which need to be informed after they\n   * are loaded (as they depend on this callback to complete initialization work)\n   */\n  protected void informResourceLoaderAwareObjectsInChain(TokenizerChain chain) {\n    CharFilterFactory[] charFilters = chain.getCharFilterFactories();\n    for (CharFilterFactory next : charFilters) {\n      if (next instanceof ResourceLoaderAware) {\n        try {\n          informAware(loader, (ResourceLoaderAware) next);\n        } catch (IOException e) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, e);\n        }\n        }\n    }\n\n    TokenizerFactory tokenizerFactory = chain.getTokenizerFactory();\n    if (tokenizerFactory instanceof ResourceLoaderAware) {\n      try {\n        informAware(loader, (ResourceLoaderAware) tokenizerFactory);\n      } catch (IOException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      }\n    }\n\n    TokenFilterFactory[] filters = chain.getTokenFilterFactories();\n    for (TokenFilterFactory next : filters) {\n      if (next instanceof ResourceLoaderAware) {\n        try {\n          informAware(loader, (ResourceLoaderAware) next);\n        } catch (IOException e) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * After creating a new FieldType, it may contain components that implement\n   * the ResourceLoaderAware interface, which need to be informed after they\n   * are loaded (as they depend on this callback to complete initialization work)\n   */\n  protected void informResourceLoaderAwareObjectsInChain(TokenizerChain chain) {\n    CharFilterFactory[] charFilters = chain.getCharFilterFactories();\n    for (CharFilterFactory next : charFilters) {\n      if (next instanceof ResourceLoaderAware) {\n        try {\n          ((ResourceLoaderAware) next).inform(loader);\n        } catch (IOException e) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, e);\n        }\n        }\n    }\n\n    TokenizerFactory tokenizerFactory = chain.getTokenizerFactory();\n    if (tokenizerFactory instanceof ResourceLoaderAware) {\n      try {\n        ((ResourceLoaderAware) tokenizerFactory).inform(loader);\n      } catch (IOException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      }\n    }\n\n    TokenFilterFactory[] filters = chain.getTokenFilterFactories();\n    for (TokenFilterFactory next : filters) {\n      if (next instanceof ResourceLoaderAware) {\n        SolrResourceLoader.CURRENT_AWARE.set((ResourceLoaderAware) next);\n        try {\n          ((ResourceLoaderAware) next).inform(loader);\n        } catch (IOException e) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, e);\n        } finally {\n          SolrResourceLoader.CURRENT_AWARE.remove();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1486037b0fcc4d552ab91d319279d41d68fe6a94":["bdf16ebe435fc9daea90a73b8683ff001c6d3523"],"f53fd7227ce17ccc6445b3433d004cb6ac33e08a":["1486037b0fcc4d552ab91d319279d41d68fe6a94"],"9f3a7ad440719bd3745e24257995343834d7f4b3":["f53fd7227ce17ccc6445b3433d004cb6ac33e08a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9f3a7ad440719bd3745e24257995343834d7f4b3"],"bdf16ebe435fc9daea90a73b8683ff001c6d3523":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1486037b0fcc4d552ab91d319279d41d68fe6a94":["f53fd7227ce17ccc6445b3433d004cb6ac33e08a"],"f53fd7227ce17ccc6445b3433d004cb6ac33e08a":["9f3a7ad440719bd3745e24257995343834d7f4b3"],"9f3a7ad440719bd3745e24257995343834d7f4b3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bdf16ebe435fc9daea90a73b8683ff001c6d3523"],"bdf16ebe435fc9daea90a73b8683ff001c6d3523":["1486037b0fcc4d552ab91d319279d41d68fe6a94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}