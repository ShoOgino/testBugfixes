{"path":"lucene/core/src/java/org/apache/lucene/index/MultiSimpleDocValues#simpleNormValues(IndexReader,String).mjava","commits":[{"id":"94a2758d07e0d83d524af25cee0d8a04b6394f47","date":1357921039,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiSimpleDocValues#simpleNormValues(IndexReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues#simpleNormValues(IndexReader,String).mjava","sourceNew":"  // moved to src/java so SlowWrapper can use it... uggggggh\n  public static NumericDocValues simpleNormValues(final IndexReader r, final String field) throws IOException {\n    final List<AtomicReaderContext> leaves = r.leaves();\n    if (leaves.size() == 1) {\n      return leaves.get(0).reader().simpleNormValues(field);\n    }\n    FieldInfo fi = MultiFields.getMergedFieldInfos(r).fieldInfo(field);\n    if (fi == null || fi.hasNorms() == false) {\n      return null;\n    }\n    boolean anyReal = false;\n    for(AtomicReaderContext ctx : leaves) {\n      NumericDocValues norms = ctx.reader().simpleNormValues(field);\n\n      if (norms != null) {\n        anyReal = true;\n      }\n    }\n    \n    // assert anyReal; // nocommit: unsafe until 4.0 is done\n\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        int subIndex = ReaderUtil.subIndex(docID, leaves);\n        NumericDocValues norms;\n        try {\n          norms = leaves.get(subIndex).reader().simpleNormValues(field);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n        if (norms == null) { // WTF? should be EMPTY?\n          return 0;\n        } else {\n          return norms.get(docID - leaves.get(subIndex).docBase);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  public static NumericDocValues simpleNormValues(final IndexReader r, final String field) throws IOException {\n    final List<AtomicReaderContext> leaves = r.leaves();\n    if (leaves.size() == 1) {\n      return leaves.get(0).reader().simpleNormValues(field);\n    }\n    FieldInfo fi = MultiFields.getMergedFieldInfos(r).fieldInfo(field);\n    if (fi == null || fi.hasNorms() == false) {\n      return null;\n    }\n    boolean anyReal = false;\n    for(AtomicReaderContext ctx : leaves) {\n      NumericDocValues norms = ctx.reader().simpleNormValues(field);\n\n      if (norms != null) {\n        anyReal = true;\n      }\n    }\n    \n    // assert anyReal; // nocommit: unsafe until 4.0 is done\n\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        int subIndex = ReaderUtil.subIndex(docID, leaves);\n        NumericDocValues norms;\n        try {\n          norms = leaves.get(subIndex).reader().simpleNormValues(field);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n        if (norms == null) { // WTF? should be EMPTY?\n          return 0;\n        } else {\n          return norms.get(docID - leaves.get(subIndex).docBase);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e13078ebcbc41380853f4612578b706f40699cf5","date":1358203044,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiSimpleDocValues#simpleNormValues(IndexReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiSimpleDocValues#simpleNormValues(IndexReader,String).mjava","sourceNew":"  // moved to src/java so SlowWrapper can use it... uggggggh\n  public static NumericDocValues simpleNormValues(final IndexReader r, final String field) throws IOException {\n    final List<AtomicReaderContext> leaves = r.leaves();\n    if (leaves.size() == 1) {\n      return leaves.get(0).reader().simpleNormValues(field);\n    }\n    FieldInfo fi = MultiFields.getMergedFieldInfos(r).fieldInfo(field);\n    if (fi == null || fi.hasNorms() == false) {\n      return null;\n    }\n    boolean anyReal = false;\n    for(AtomicReaderContext ctx : leaves) {\n      NumericDocValues norms = ctx.reader().simpleNormValues(field);\n\n      if (norms != null) {\n        anyReal = true;\n      }\n    }\n\n    // assert anyReal; // nocommit: unsafe until 4.0 is done\n\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        int subIndex = ReaderUtil.subIndex(docID, leaves);\n        NumericDocValues norms;\n        try {\n          norms = leaves.get(subIndex).reader().simpleNormValues(field);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n        if (norms == null) { // WTF? should be EMPTY?\n          return 0;\n        } else {\n          return norms.get(docID - leaves.get(subIndex).docBase);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  // moved to src/java so SlowWrapper can use it... uggggggh\n  public static NumericDocValues simpleNormValues(final IndexReader r, final String field) throws IOException {\n    final List<AtomicReaderContext> leaves = r.leaves();\n    if (leaves.size() == 1) {\n      return leaves.get(0).reader().simpleNormValues(field);\n    }\n    FieldInfo fi = MultiFields.getMergedFieldInfos(r).fieldInfo(field);\n    if (fi == null || fi.hasNorms() == false) {\n      return null;\n    }\n    boolean anyReal = false;\n    for(AtomicReaderContext ctx : leaves) {\n      NumericDocValues norms = ctx.reader().simpleNormValues(field);\n\n      if (norms != null) {\n        anyReal = true;\n      }\n    }\n    \n    // assert anyReal; // nocommit: unsafe until 4.0 is done\n\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        int subIndex = ReaderUtil.subIndex(docID, leaves);\n        NumericDocValues norms;\n        try {\n          norms = leaves.get(subIndex).reader().simpleNormValues(field);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n        if (norms == null) { // WTF? should be EMPTY?\n          return 0;\n        } else {\n          return norms.get(docID - leaves.get(subIndex).docBase);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200","date":1358521790,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues#getNormValues(IndexReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiSimpleDocValues#simpleNormValues(IndexReader,String).mjava","sourceNew":"  // moved to src/java so SlowWrapper can use it... uggggggh\n  public static NumericDocValues getNormValues(final IndexReader r, final String field) throws IOException {\n    final List<AtomicReaderContext> leaves = r.leaves();\n    if (leaves.size() == 1) {\n      return leaves.get(0).reader().getNormValues(field);\n    }\n    FieldInfo fi = MultiFields.getMergedFieldInfos(r).fieldInfo(field);\n    if (fi == null || fi.hasNorms() == false) {\n      return null;\n    }\n    boolean anyReal = false;\n    for(AtomicReaderContext ctx : leaves) {\n      NumericDocValues norms = ctx.reader().getNormValues(field);\n\n      if (norms != null) {\n        anyReal = true;\n      }\n    }\n\n    // assert anyReal; // nocommit: unsafe until 4.0 is done\n\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        int subIndex = ReaderUtil.subIndex(docID, leaves);\n        NumericDocValues norms;\n        try {\n          norms = leaves.get(subIndex).reader().getNormValues(field);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n        if (norms == null) { // WTF? should be EMPTY?\n          return 0;\n        } else {\n          return norms.get(docID - leaves.get(subIndex).docBase);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  // moved to src/java so SlowWrapper can use it... uggggggh\n  public static NumericDocValues simpleNormValues(final IndexReader r, final String field) throws IOException {\n    final List<AtomicReaderContext> leaves = r.leaves();\n    if (leaves.size() == 1) {\n      return leaves.get(0).reader().simpleNormValues(field);\n    }\n    FieldInfo fi = MultiFields.getMergedFieldInfos(r).fieldInfo(field);\n    if (fi == null || fi.hasNorms() == false) {\n      return null;\n    }\n    boolean anyReal = false;\n    for(AtomicReaderContext ctx : leaves) {\n      NumericDocValues norms = ctx.reader().simpleNormValues(field);\n\n      if (norms != null) {\n        anyReal = true;\n      }\n    }\n\n    // assert anyReal; // nocommit: unsafe until 4.0 is done\n\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        int subIndex = ReaderUtil.subIndex(docID, leaves);\n        NumericDocValues norms;\n        try {\n          norms = leaves.get(subIndex).reader().simpleNormValues(field);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n        if (norms == null) { // WTF? should be EMPTY?\n          return 0;\n        } else {\n          return norms.get(docID - leaves.get(subIndex).docBase);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["e13078ebcbc41380853f4612578b706f40699cf5"],"94a2758d07e0d83d524af25cee0d8a04b6394f47":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e13078ebcbc41380853f4612578b706f40699cf5":["94a2758d07e0d83d524af25cee0d8a04b6394f47"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":[],"94a2758d07e0d83d524af25cee0d8a04b6394f47":["e13078ebcbc41380853f4612578b706f40699cf5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["94a2758d07e0d83d524af25cee0d8a04b6394f47","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e13078ebcbc41380853f4612578b706f40699cf5":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}