{"path":"solr/core/src/java/org/apache/solr/update/PeerSync#handleVersions(ShardResponse).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#handleVersions(ShardResponse).mjava","pathOld":"/dev/null","sourceNew":"  private boolean handleVersions(ShardResponse srsp) {\n    // we retrieved the last N updates from the replica\n    List<Long> otherVersions = (List<Long>)srsp.getSolrResponse().getResponse().get(\"versions\");\n    // TODO: how to handle short lists?\n\n    SyncShardRequest sreq = (SyncShardRequest) srsp.getShardRequest();\n    sreq.reportedVersions =  otherVersions;\n\n    if (otherVersions.size() == 0) {\n      return true;\n    }\n\n    Collections.sort(otherVersions, absComparator);\n\n    long otherHigh = percentile(otherVersions, .2f);\n    long otherLow = percentile(otherVersions, .8f);\n\n    if (ourHighThreshold < otherLow) {\n      // Small overlap between version windows and ours is older\n      // This means that we might miss updates if we attempted to use this method.\n      // Since there exists just one replica that is so much newer, we must\n      // fail the sync.\n      return false;\n    }\n\n    if (ourLowThreshold > otherHigh) {\n      // Small overlap between windows and ours is newer.\n      // Using this list to sync would result in requesting/replaying results we don't need\n      // and possibly bringing deleted docs back to life.\n      return true;\n    }\n    \n    List<Long> toRequest = new ArrayList<Long>();\n    for (Long otherVersion : otherVersions) {\n      // stop when the entries get old enough that reorders may lead us to see updates we don't need\n      if (Math.abs(otherVersion) < ourLowThreshold) break;\n\n      if (ourUpdateSet.contains(otherVersion) || requestedUpdateSet.contains(otherVersion)) {\n        // we either have this update, or already requested it\n        continue;\n      }\n\n      toRequest.add(otherVersion);\n      requestedUpdateSet.add(otherVersion);\n    }\n\n    sreq.requestedUpdates = toRequest;\n\n    if (toRequest.isEmpty()) {\n      // we had (or already requested) all the updates referenced by the replica\n      return true;\n    }\n\n    return requestUpdates(srsp, toRequest);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e511b092029d56e0d4e30204fba8509c1c2647b6","1525b4dfbc0d413b8d7247da232009778e624836"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#handleVersions(ShardResponse).mjava","pathOld":"/dev/null","sourceNew":"  private boolean handleVersions(ShardResponse srsp) {\n    // we retrieved the last N updates from the replica\n    List<Long> otherVersions = (List<Long>)srsp.getSolrResponse().getResponse().get(\"versions\");\n    // TODO: how to handle short lists?\n\n    SyncShardRequest sreq = (SyncShardRequest) srsp.getShardRequest();\n    sreq.reportedVersions =  otherVersions;\n\n    if (otherVersions.size() == 0) {\n      return true;\n    }\n\n    Collections.sort(otherVersions, absComparator);\n\n    long otherHigh = percentile(otherVersions, .2f);\n    long otherLow = percentile(otherVersions, .8f);\n\n    if (ourHighThreshold < otherLow) {\n      // Small overlap between version windows and ours is older\n      // This means that we might miss updates if we attempted to use this method.\n      // Since there exists just one replica that is so much newer, we must\n      // fail the sync.\n      return false;\n    }\n\n    if (ourLowThreshold > otherHigh) {\n      // Small overlap between windows and ours is newer.\n      // Using this list to sync would result in requesting/replaying results we don't need\n      // and possibly bringing deleted docs back to life.\n      return true;\n    }\n    \n    List<Long> toRequest = new ArrayList<Long>();\n    for (Long otherVersion : otherVersions) {\n      // stop when the entries get old enough that reorders may lead us to see updates we don't need\n      if (Math.abs(otherVersion) < ourLowThreshold) break;\n\n      if (ourUpdateSet.contains(otherVersion) || requestedUpdateSet.contains(otherVersion)) {\n        // we either have this update, or already requested it\n        continue;\n      }\n\n      toRequest.add(otherVersion);\n      requestedUpdateSet.add(otherVersion);\n    }\n\n    sreq.requestedUpdates = toRequest;\n\n    if (toRequest.isEmpty()) {\n      // we had (or already requested) all the updates referenced by the replica\n      return true;\n    }\n\n    return requestUpdates(srsp, toRequest);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#handleVersions(ShardResponse).mjava","pathOld":"/dev/null","sourceNew":"  private boolean handleVersions(ShardResponse srsp) {\n    // we retrieved the last N updates from the replica\n    List<Long> otherVersions = (List<Long>)srsp.getSolrResponse().getResponse().get(\"versions\");\n    // TODO: how to handle short lists?\n\n    SyncShardRequest sreq = (SyncShardRequest) srsp.getShardRequest();\n    sreq.reportedVersions =  otherVersions;\n\n    if (otherVersions.size() == 0) {\n      return true;\n    }\n\n    Collections.sort(otherVersions, absComparator);\n\n    long otherHigh = percentile(otherVersions, .2f);\n    long otherLow = percentile(otherVersions, .8f);\n\n    if (ourHighThreshold < otherLow) {\n      // Small overlap between version windows and ours is older\n      // This means that we might miss updates if we attempted to use this method.\n      // Since there exists just one replica that is so much newer, we must\n      // fail the sync.\n      return false;\n    }\n\n    if (ourLowThreshold > otherHigh) {\n      // Small overlap between windows and ours is newer.\n      // Using this list to sync would result in requesting/replaying results we don't need\n      // and possibly bringing deleted docs back to life.\n      return true;\n    }\n    \n    List<Long> toRequest = new ArrayList<Long>();\n    for (Long otherVersion : otherVersions) {\n      // stop when the entries get old enough that reorders may lead us to see updates we don't need\n      if (Math.abs(otherVersion) < ourLowThreshold) break;\n\n      if (ourUpdateSet.contains(otherVersion) || requestedUpdateSet.contains(otherVersion)) {\n        // we either have this update, or already requested it\n        continue;\n      }\n\n      toRequest.add(otherVersion);\n      requestedUpdateSet.add(otherVersion);\n    }\n\n    sreq.requestedUpdates = toRequest;\n\n    if (toRequest.isEmpty()) {\n      // we had (or already requested) all the updates referenced by the replica\n      return true;\n    }\n\n    return requestUpdates(srsp, toRequest);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"414ae8f6c01f0259255c532b2bd51b03000c2480","date":1329623863,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#handleVersions(ShardResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#handleVersions(ShardResponse).mjava","sourceNew":"  private boolean handleVersions(ShardResponse srsp) {\n    // we retrieved the last N updates from the replica\n    List<Long> otherVersions = (List<Long>)srsp.getSolrResponse().getResponse().get(\"versions\");\n    // TODO: how to handle short lists?\n\n    SyncShardRequest sreq = (SyncShardRequest) srsp.getShardRequest();\n    sreq.reportedVersions =  otherVersions;\n\n    if (otherVersions.size() == 0) {\n      return true;\n    }\n    \n    boolean completeList = otherVersions.size() < nUpdates;  // do we have their complete list of updates?\n\n    Collections.sort(otherVersions, absComparator);\n\n    long otherHigh = percentile(otherVersions, .2f);\n    long otherLow = percentile(otherVersions, .8f);\n\n    if (ourHighThreshold < otherLow) {\n      // Small overlap between version windows and ours is older\n      // This means that we might miss updates if we attempted to use this method.\n      // Since there exists just one replica that is so much newer, we must\n      // fail the sync.\n      return false;\n    }\n\n    if (ourLowThreshold > otherHigh) {\n      // Small overlap between windows and ours is newer.\n      // Using this list to sync would result in requesting/replaying results we don't need\n      // and possibly bringing deleted docs back to life.\n      return true;\n    }\n    \n    List<Long> toRequest = new ArrayList<Long>();\n    for (Long otherVersion : otherVersions) {\n      // stop when the entries get old enough that reorders may lead us to see updates we don't need\n      if (!completeList && Math.abs(otherVersion) < ourLowThreshold) break;\n\n      if (ourUpdateSet.contains(otherVersion) || requestedUpdateSet.contains(otherVersion)) {\n        // we either have this update, or already requested it\n        continue;\n      }\n\n      toRequest.add(otherVersion);\n      requestedUpdateSet.add(otherVersion);\n    }\n\n    sreq.requestedUpdates = toRequest;\n    \n    if (toRequest.isEmpty()) {\n      // we had (or already requested) all the updates referenced by the replica\n      return true;\n    }\n    \n    if (toRequest.size() > maxRequests) {\n      return false;\n    }\n\n    return requestUpdates(srsp, toRequest);\n  }\n\n","sourceOld":"  private boolean handleVersions(ShardResponse srsp) {\n    // we retrieved the last N updates from the replica\n    List<Long> otherVersions = (List<Long>)srsp.getSolrResponse().getResponse().get(\"versions\");\n    // TODO: how to handle short lists?\n\n    SyncShardRequest sreq = (SyncShardRequest) srsp.getShardRequest();\n    sreq.reportedVersions =  otherVersions;\n\n    if (otherVersions.size() == 0) {\n      return true;\n    }\n\n    Collections.sort(otherVersions, absComparator);\n\n    long otherHigh = percentile(otherVersions, .2f);\n    long otherLow = percentile(otherVersions, .8f);\n\n    if (ourHighThreshold < otherLow) {\n      // Small overlap between version windows and ours is older\n      // This means that we might miss updates if we attempted to use this method.\n      // Since there exists just one replica that is so much newer, we must\n      // fail the sync.\n      return false;\n    }\n\n    if (ourLowThreshold > otherHigh) {\n      // Small overlap between windows and ours is newer.\n      // Using this list to sync would result in requesting/replaying results we don't need\n      // and possibly bringing deleted docs back to life.\n      return true;\n    }\n    \n    List<Long> toRequest = new ArrayList<Long>();\n    for (Long otherVersion : otherVersions) {\n      // stop when the entries get old enough that reorders may lead us to see updates we don't need\n      if (Math.abs(otherVersion) < ourLowThreshold) break;\n\n      if (ourUpdateSet.contains(otherVersion) || requestedUpdateSet.contains(otherVersion)) {\n        // we either have this update, or already requested it\n        continue;\n      }\n\n      toRequest.add(otherVersion);\n      requestedUpdateSet.add(otherVersion);\n    }\n\n    sreq.requestedUpdates = toRequest;\n\n    if (toRequest.isEmpty()) {\n      // we had (or already requested) all the updates referenced by the replica\n      return true;\n    }\n\n    return requestUpdates(srsp, toRequest);\n  }\n\n","bugFix":null,"bugIntro":["e511b092029d56e0d4e30204fba8509c1c2647b6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1bef15745514a7a3142d641ff715dc096ff0f6c1","date":1329624603,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#handleVersions(ShardResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#handleVersions(ShardResponse).mjava","sourceNew":"  private boolean handleVersions(ShardResponse srsp) {\n    // we retrieved the last N updates from the replica\n    List<Long> otherVersions = (List<Long>)srsp.getSolrResponse().getResponse().get(\"versions\");\n    // TODO: how to handle short lists?\n\n    SyncShardRequest sreq = (SyncShardRequest) srsp.getShardRequest();\n    sreq.reportedVersions =  otherVersions;\n\n    if (otherVersions.size() == 0) {\n      return true;\n    }\n    \n    boolean completeList = otherVersions.size() < nUpdates;  // do we have their complete list of updates?\n\n    Collections.sort(otherVersions, absComparator);\n\n    long otherHigh = percentile(otherVersions, .2f);\n    long otherLow = percentile(otherVersions, .8f);\n\n    if (ourHighThreshold < otherLow) {\n      // Small overlap between version windows and ours is older\n      // This means that we might miss updates if we attempted to use this method.\n      // Since there exists just one replica that is so much newer, we must\n      // fail the sync.\n      return false;\n    }\n\n    if (ourLowThreshold > otherHigh) {\n      // Small overlap between windows and ours is newer.\n      // Using this list to sync would result in requesting/replaying results we don't need\n      // and possibly bringing deleted docs back to life.\n      return true;\n    }\n    \n    List<Long> toRequest = new ArrayList<Long>();\n    for (Long otherVersion : otherVersions) {\n      // stop when the entries get old enough that reorders may lead us to see updates we don't need\n      if (!completeList && Math.abs(otherVersion) < ourLowThreshold) break;\n\n      if (ourUpdateSet.contains(otherVersion) || requestedUpdateSet.contains(otherVersion)) {\n        // we either have this update, or already requested it\n        continue;\n      }\n\n      toRequest.add(otherVersion);\n      requestedUpdateSet.add(otherVersion);\n    }\n\n    sreq.requestedUpdates = toRequest;\n    \n    if (toRequest.isEmpty()) {\n      // we had (or already requested) all the updates referenced by the replica\n      return true;\n    }\n    \n    if (toRequest.size() > maxUpdates) {\n      return false;\n    }\n\n    return requestUpdates(srsp, toRequest);\n  }\n\n","sourceOld":"  private boolean handleVersions(ShardResponse srsp) {\n    // we retrieved the last N updates from the replica\n    List<Long> otherVersions = (List<Long>)srsp.getSolrResponse().getResponse().get(\"versions\");\n    // TODO: how to handle short lists?\n\n    SyncShardRequest sreq = (SyncShardRequest) srsp.getShardRequest();\n    sreq.reportedVersions =  otherVersions;\n\n    if (otherVersions.size() == 0) {\n      return true;\n    }\n    \n    boolean completeList = otherVersions.size() < nUpdates;  // do we have their complete list of updates?\n\n    Collections.sort(otherVersions, absComparator);\n\n    long otherHigh = percentile(otherVersions, .2f);\n    long otherLow = percentile(otherVersions, .8f);\n\n    if (ourHighThreshold < otherLow) {\n      // Small overlap between version windows and ours is older\n      // This means that we might miss updates if we attempted to use this method.\n      // Since there exists just one replica that is so much newer, we must\n      // fail the sync.\n      return false;\n    }\n\n    if (ourLowThreshold > otherHigh) {\n      // Small overlap between windows and ours is newer.\n      // Using this list to sync would result in requesting/replaying results we don't need\n      // and possibly bringing deleted docs back to life.\n      return true;\n    }\n    \n    List<Long> toRequest = new ArrayList<Long>();\n    for (Long otherVersion : otherVersions) {\n      // stop when the entries get old enough that reorders may lead us to see updates we don't need\n      if (!completeList && Math.abs(otherVersion) < ourLowThreshold) break;\n\n      if (ourUpdateSet.contains(otherVersion) || requestedUpdateSet.contains(otherVersion)) {\n        // we either have this update, or already requested it\n        continue;\n      }\n\n      toRequest.add(otherVersion);\n      requestedUpdateSet.add(otherVersion);\n    }\n\n    sreq.requestedUpdates = toRequest;\n    \n    if (toRequest.isEmpty()) {\n      // we had (or already requested) all the updates referenced by the replica\n      return true;\n    }\n    \n    if (toRequest.size() > maxRequests) {\n      return false;\n    }\n\n    return requestUpdates(srsp, toRequest);\n  }\n\n","bugFix":null,"bugIntro":["e511b092029d56e0d4e30204fba8509c1c2647b6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5620d3cb34306ea5b7d016a832fbc964b74c2650","date":1329755478,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#handleVersions(ShardResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#handleVersions(ShardResponse).mjava","sourceNew":"  private boolean handleVersions(ShardResponse srsp) {\n    // we retrieved the last N updates from the replica\n    List<Long> otherVersions = (List<Long>)srsp.getSolrResponse().getResponse().get(\"versions\");\n    // TODO: how to handle short lists?\n\n    SyncShardRequest sreq = (SyncShardRequest) srsp.getShardRequest();\n    sreq.reportedVersions =  otherVersions;\n\n    log.info(msg() + \" Received \" + otherVersions.size() + \" versions from \" + sreq.shards[0] );\n\n    if (otherVersions.size() == 0) {\n      return true;\n    }\n    \n    boolean completeList = otherVersions.size() < nUpdates;  // do we have their complete list of updates?\n\n    Collections.sort(otherVersions, absComparator);\n\n    if (debug) {\n      log.debug(msg() + \" sorted versions from \" + sreq.shards[0] + \" = \" + otherVersions);\n    }\n    \n    long otherHigh = percentile(otherVersions, .2f);\n    long otherLow = percentile(otherVersions, .8f);\n\n    if (ourHighThreshold < otherLow) {\n      // Small overlap between version windows and ours is older\n      // This means that we might miss updates if we attempted to use this method.\n      // Since there exists just one replica that is so much newer, we must\n      // fail the sync.\n      log.info(msg() + \" Our versions are too old. ourHighThreshold=\"+ourHighThreshold + \" otherLowThreshold=\"+otherLow);\n      return false;\n    }\n\n    if (ourLowThreshold > otherHigh) {\n      // Small overlap between windows and ours is newer.\n      // Using this list to sync would result in requesting/replaying results we don't need\n      // and possibly bringing deleted docs back to life.\n      log.info(msg() + \" Our versions are newer. ourLowThreshold=\"+ourLowThreshold + \" otherHigh=\"+otherHigh);\n      return true;\n    }\n    \n    List<Long> toRequest = new ArrayList<Long>();\n    for (Long otherVersion : otherVersions) {\n      // stop when the entries get old enough that reorders may lead us to see updates we don't need\n      if (!completeList && Math.abs(otherVersion) < ourLowThreshold) break;\n\n      if (ourUpdateSet.contains(otherVersion) || requestedUpdateSet.contains(otherVersion)) {\n        // we either have this update, or already requested it\n        // TODO: what if the shard we previously requested this from returns failure (because it goes\n        // down)\n        continue;\n      }\n\n      toRequest.add(otherVersion);\n      requestedUpdateSet.add(otherVersion);\n    }\n\n    sreq.requestedUpdates = toRequest;\n    \n    if (toRequest.isEmpty()) {\n      log.info(msg() + \" Our versions are newer. ourLowThreshold=\"+ourLowThreshold + \" otherHigh=\"+otherHigh);\n\n      // we had (or already requested) all the updates referenced by the replica\n      return true;\n    }\n    \n    if (toRequest.size() > maxUpdates) {\n      log.info(msg() + \" Failing due to needing too many updates:\" + maxUpdates);\n      return false;\n    }\n\n    return requestUpdates(srsp, toRequest);\n  }\n\n","sourceOld":"  private boolean handleVersions(ShardResponse srsp) {\n    // we retrieved the last N updates from the replica\n    List<Long> otherVersions = (List<Long>)srsp.getSolrResponse().getResponse().get(\"versions\");\n    // TODO: how to handle short lists?\n\n    SyncShardRequest sreq = (SyncShardRequest) srsp.getShardRequest();\n    sreq.reportedVersions =  otherVersions;\n\n    if (otherVersions.size() == 0) {\n      return true;\n    }\n    \n    boolean completeList = otherVersions.size() < nUpdates;  // do we have their complete list of updates?\n\n    Collections.sort(otherVersions, absComparator);\n\n    long otherHigh = percentile(otherVersions, .2f);\n    long otherLow = percentile(otherVersions, .8f);\n\n    if (ourHighThreshold < otherLow) {\n      // Small overlap between version windows and ours is older\n      // This means that we might miss updates if we attempted to use this method.\n      // Since there exists just one replica that is so much newer, we must\n      // fail the sync.\n      return false;\n    }\n\n    if (ourLowThreshold > otherHigh) {\n      // Small overlap between windows and ours is newer.\n      // Using this list to sync would result in requesting/replaying results we don't need\n      // and possibly bringing deleted docs back to life.\n      return true;\n    }\n    \n    List<Long> toRequest = new ArrayList<Long>();\n    for (Long otherVersion : otherVersions) {\n      // stop when the entries get old enough that reorders may lead us to see updates we don't need\n      if (!completeList && Math.abs(otherVersion) < ourLowThreshold) break;\n\n      if (ourUpdateSet.contains(otherVersion) || requestedUpdateSet.contains(otherVersion)) {\n        // we either have this update, or already requested it\n        continue;\n      }\n\n      toRequest.add(otherVersion);\n      requestedUpdateSet.add(otherVersion);\n    }\n\n    sreq.requestedUpdates = toRequest;\n    \n    if (toRequest.isEmpty()) {\n      // we had (or already requested) all the updates referenced by the replica\n      return true;\n    }\n    \n    if (toRequest.size() > maxUpdates) {\n      return false;\n    }\n\n    return requestUpdates(srsp, toRequest);\n  }\n\n","bugFix":null,"bugIntro":["e511b092029d56e0d4e30204fba8509c1c2647b6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1525b4dfbc0d413b8d7247da232009778e624836","date":1351101135,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#handleVersions(ShardResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#handleVersions(ShardResponse).mjava","sourceNew":"  private boolean handleVersions(ShardResponse srsp) {\n    // we retrieved the last N updates from the replica\n    List<Long> otherVersions = (List<Long>)srsp.getSolrResponse().getResponse().get(\"versions\");\n    // TODO: how to handle short lists?\n\n    SyncShardRequest sreq = (SyncShardRequest) srsp.getShardRequest();\n    sreq.reportedVersions =  otherVersions;\n\n    log.info(msg() + \" Received \" + otherVersions.size() + \" versions from \" + sreq.shards[0] );\n\n    if (otherVersions.size() == 0) {\n      return getNoVersionsIsSuccess; \n    }\n    \n    boolean completeList = otherVersions.size() < nUpdates;  // do we have their complete list of updates?\n\n    Collections.sort(otherVersions, absComparator);\n\n    if (debug) {\n      log.debug(msg() + \" sorted versions from \" + sreq.shards[0] + \" = \" + otherVersions);\n    }\n    \n    long otherHigh = percentile(otherVersions, .2f);\n    long otherLow = percentile(otherVersions, .8f);\n\n    if (ourHighThreshold < otherLow) {\n      // Small overlap between version windows and ours is older\n      // This means that we might miss updates if we attempted to use this method.\n      // Since there exists just one replica that is so much newer, we must\n      // fail the sync.\n      log.info(msg() + \" Our versions are too old. ourHighThreshold=\"+ourHighThreshold + \" otherLowThreshold=\"+otherLow);\n      return false;\n    }\n\n    if (ourLowThreshold > otherHigh) {\n      // Small overlap between windows and ours is newer.\n      // Using this list to sync would result in requesting/replaying results we don't need\n      // and possibly bringing deleted docs back to life.\n      log.info(msg() + \" Our versions are newer. ourLowThreshold=\"+ourLowThreshold + \" otherHigh=\"+otherHigh);\n      return true;\n    }\n    \n    List<Long> toRequest = new ArrayList<Long>();\n    for (Long otherVersion : otherVersions) {\n      // stop when the entries get old enough that reorders may lead us to see updates we don't need\n      if (!completeList && Math.abs(otherVersion) < ourLowThreshold) break;\n\n      if (ourUpdateSet.contains(otherVersion) || requestedUpdateSet.contains(otherVersion)) {\n        // we either have this update, or already requested it\n        // TODO: what if the shard we previously requested this from returns failure (because it goes\n        // down)\n        continue;\n      }\n\n      toRequest.add(otherVersion);\n      requestedUpdateSet.add(otherVersion);\n    }\n\n    sreq.requestedUpdates = toRequest;\n    \n    if (toRequest.isEmpty()) {\n      log.info(msg() + \" Our versions are newer. ourLowThreshold=\"+ourLowThreshold + \" otherHigh=\"+otherHigh);\n\n      // we had (or already requested) all the updates referenced by the replica\n      return true;\n    }\n    \n    if (toRequest.size() > maxUpdates) {\n      log.info(msg() + \" Failing due to needing too many updates:\" + maxUpdates);\n      return false;\n    }\n\n    return requestUpdates(srsp, toRequest);\n  }\n\n","sourceOld":"  private boolean handleVersions(ShardResponse srsp) {\n    // we retrieved the last N updates from the replica\n    List<Long> otherVersions = (List<Long>)srsp.getSolrResponse().getResponse().get(\"versions\");\n    // TODO: how to handle short lists?\n\n    SyncShardRequest sreq = (SyncShardRequest) srsp.getShardRequest();\n    sreq.reportedVersions =  otherVersions;\n\n    log.info(msg() + \" Received \" + otherVersions.size() + \" versions from \" + sreq.shards[0] );\n\n    if (otherVersions.size() == 0) {\n      return true;\n    }\n    \n    boolean completeList = otherVersions.size() < nUpdates;  // do we have their complete list of updates?\n\n    Collections.sort(otherVersions, absComparator);\n\n    if (debug) {\n      log.debug(msg() + \" sorted versions from \" + sreq.shards[0] + \" = \" + otherVersions);\n    }\n    \n    long otherHigh = percentile(otherVersions, .2f);\n    long otherLow = percentile(otherVersions, .8f);\n\n    if (ourHighThreshold < otherLow) {\n      // Small overlap between version windows and ours is older\n      // This means that we might miss updates if we attempted to use this method.\n      // Since there exists just one replica that is so much newer, we must\n      // fail the sync.\n      log.info(msg() + \" Our versions are too old. ourHighThreshold=\"+ourHighThreshold + \" otherLowThreshold=\"+otherLow);\n      return false;\n    }\n\n    if (ourLowThreshold > otherHigh) {\n      // Small overlap between windows and ours is newer.\n      // Using this list to sync would result in requesting/replaying results we don't need\n      // and possibly bringing deleted docs back to life.\n      log.info(msg() + \" Our versions are newer. ourLowThreshold=\"+ourLowThreshold + \" otherHigh=\"+otherHigh);\n      return true;\n    }\n    \n    List<Long> toRequest = new ArrayList<Long>();\n    for (Long otherVersion : otherVersions) {\n      // stop when the entries get old enough that reorders may lead us to see updates we don't need\n      if (!completeList && Math.abs(otherVersion) < ourLowThreshold) break;\n\n      if (ourUpdateSet.contains(otherVersion) || requestedUpdateSet.contains(otherVersion)) {\n        // we either have this update, or already requested it\n        // TODO: what if the shard we previously requested this from returns failure (because it goes\n        // down)\n        continue;\n      }\n\n      toRequest.add(otherVersion);\n      requestedUpdateSet.add(otherVersion);\n    }\n\n    sreq.requestedUpdates = toRequest;\n    \n    if (toRequest.isEmpty()) {\n      log.info(msg() + \" Our versions are newer. ourLowThreshold=\"+ourLowThreshold + \" otherHigh=\"+otherHigh);\n\n      // we had (or already requested) all the updates referenced by the replica\n      return true;\n    }\n    \n    if (toRequest.size() > maxUpdates) {\n      log.info(msg() + \" Failing due to needing too many updates:\" + maxUpdates);\n      return false;\n    }\n\n    return requestUpdates(srsp, toRequest);\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#handleVersions(ShardResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#handleVersions(ShardResponse).mjava","sourceNew":"  private boolean handleVersions(ShardResponse srsp) {\n    // we retrieved the last N updates from the replica\n    List<Long> otherVersions = (List<Long>)srsp.getSolrResponse().getResponse().get(\"versions\");\n    // TODO: how to handle short lists?\n\n    SyncShardRequest sreq = (SyncShardRequest) srsp.getShardRequest();\n    sreq.reportedVersions =  otherVersions;\n\n    log.info(msg() + \" Received \" + otherVersions.size() + \" versions from \" + sreq.shards[0] );\n\n    if (otherVersions.size() == 0) {\n      return getNoVersionsIsSuccess; \n    }\n    \n    boolean completeList = otherVersions.size() < nUpdates;  // do we have their complete list of updates?\n\n    Collections.sort(otherVersions, absComparator);\n\n    if (debug) {\n      log.debug(msg() + \" sorted versions from \" + sreq.shards[0] + \" = \" + otherVersions);\n    }\n    \n    long otherHigh = percentile(otherVersions, .2f);\n    long otherLow = percentile(otherVersions, .8f);\n\n    if (ourHighThreshold < otherLow) {\n      // Small overlap between version windows and ours is older\n      // This means that we might miss updates if we attempted to use this method.\n      // Since there exists just one replica that is so much newer, we must\n      // fail the sync.\n      log.info(msg() + \" Our versions are too old. ourHighThreshold=\"+ourHighThreshold + \" otherLowThreshold=\"+otherLow);\n      return false;\n    }\n\n    if (ourLowThreshold > otherHigh) {\n      // Small overlap between windows and ours is newer.\n      // Using this list to sync would result in requesting/replaying results we don't need\n      // and possibly bringing deleted docs back to life.\n      log.info(msg() + \" Our versions are newer. ourLowThreshold=\"+ourLowThreshold + \" otherHigh=\"+otherHigh);\n      return true;\n    }\n    \n    List<Long> toRequest = new ArrayList<Long>();\n    for (Long otherVersion : otherVersions) {\n      // stop when the entries get old enough that reorders may lead us to see updates we don't need\n      if (!completeList && Math.abs(otherVersion) < ourLowThreshold) break;\n\n      if (ourUpdateSet.contains(otherVersion) || requestedUpdateSet.contains(otherVersion)) {\n        // we either have this update, or already requested it\n        // TODO: what if the shard we previously requested this from returns failure (because it goes\n        // down)\n        continue;\n      }\n\n      toRequest.add(otherVersion);\n      requestedUpdateSet.add(otherVersion);\n    }\n\n    sreq.requestedUpdates = toRequest;\n    \n    if (toRequest.isEmpty()) {\n      log.info(msg() + \" Our versions are newer. ourLowThreshold=\"+ourLowThreshold + \" otherHigh=\"+otherHigh);\n\n      // we had (or already requested) all the updates referenced by the replica\n      return true;\n    }\n    \n    if (toRequest.size() > maxUpdates) {\n      log.info(msg() + \" Failing due to needing too many updates:\" + maxUpdates);\n      return false;\n    }\n\n    return requestUpdates(srsp, toRequest);\n  }\n\n","sourceOld":"  private boolean handleVersions(ShardResponse srsp) {\n    // we retrieved the last N updates from the replica\n    List<Long> otherVersions = (List<Long>)srsp.getSolrResponse().getResponse().get(\"versions\");\n    // TODO: how to handle short lists?\n\n    SyncShardRequest sreq = (SyncShardRequest) srsp.getShardRequest();\n    sreq.reportedVersions =  otherVersions;\n\n    log.info(msg() + \" Received \" + otherVersions.size() + \" versions from \" + sreq.shards[0] );\n\n    if (otherVersions.size() == 0) {\n      return true;\n    }\n    \n    boolean completeList = otherVersions.size() < nUpdates;  // do we have their complete list of updates?\n\n    Collections.sort(otherVersions, absComparator);\n\n    if (debug) {\n      log.debug(msg() + \" sorted versions from \" + sreq.shards[0] + \" = \" + otherVersions);\n    }\n    \n    long otherHigh = percentile(otherVersions, .2f);\n    long otherLow = percentile(otherVersions, .8f);\n\n    if (ourHighThreshold < otherLow) {\n      // Small overlap between version windows and ours is older\n      // This means that we might miss updates if we attempted to use this method.\n      // Since there exists just one replica that is so much newer, we must\n      // fail the sync.\n      log.info(msg() + \" Our versions are too old. ourHighThreshold=\"+ourHighThreshold + \" otherLowThreshold=\"+otherLow);\n      return false;\n    }\n\n    if (ourLowThreshold > otherHigh) {\n      // Small overlap between windows and ours is newer.\n      // Using this list to sync would result in requesting/replaying results we don't need\n      // and possibly bringing deleted docs back to life.\n      log.info(msg() + \" Our versions are newer. ourLowThreshold=\"+ourLowThreshold + \" otherHigh=\"+otherHigh);\n      return true;\n    }\n    \n    List<Long> toRequest = new ArrayList<Long>();\n    for (Long otherVersion : otherVersions) {\n      // stop when the entries get old enough that reorders may lead us to see updates we don't need\n      if (!completeList && Math.abs(otherVersion) < ourLowThreshold) break;\n\n      if (ourUpdateSet.contains(otherVersion) || requestedUpdateSet.contains(otherVersion)) {\n        // we either have this update, or already requested it\n        // TODO: what if the shard we previously requested this from returns failure (because it goes\n        // down)\n        continue;\n      }\n\n      toRequest.add(otherVersion);\n      requestedUpdateSet.add(otherVersion);\n    }\n\n    sreq.requestedUpdates = toRequest;\n    \n    if (toRequest.isEmpty()) {\n      log.info(msg() + \" Our versions are newer. ourLowThreshold=\"+ourLowThreshold + \" otherHigh=\"+otherHigh);\n\n      // we had (or already requested) all the updates referenced by the replica\n      return true;\n    }\n    \n    if (toRequest.size() > maxUpdates) {\n      log.info(msg() + \" Failing due to needing too many updates:\" + maxUpdates);\n      return false;\n    }\n\n    return requestUpdates(srsp, toRequest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#handleVersions(ShardResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#handleVersions(ShardResponse).mjava","sourceNew":"  private boolean handleVersions(ShardResponse srsp) {\n    // we retrieved the last N updates from the replica\n    List<Long> otherVersions = (List<Long>)srsp.getSolrResponse().getResponse().get(\"versions\");\n    // TODO: how to handle short lists?\n\n    SyncShardRequest sreq = (SyncShardRequest) srsp.getShardRequest();\n    sreq.reportedVersions =  otherVersions;\n\n    log.info(msg() + \" Received \" + otherVersions.size() + \" versions from \" + sreq.shards[0] );\n\n    if (otherVersions.size() == 0) {\n      return getNoVersionsIsSuccess; \n    }\n    \n    boolean completeList = otherVersions.size() < nUpdates;  // do we have their complete list of updates?\n\n    Collections.sort(otherVersions, absComparator);\n\n    if (debug) {\n      log.debug(msg() + \" sorted versions from \" + sreq.shards[0] + \" = \" + otherVersions);\n    }\n    \n    long otherHigh = percentile(otherVersions, .2f);\n    long otherLow = percentile(otherVersions, .8f);\n\n    if (ourHighThreshold < otherLow) {\n      // Small overlap between version windows and ours is older\n      // This means that we might miss updates if we attempted to use this method.\n      // Since there exists just one replica that is so much newer, we must\n      // fail the sync.\n      log.info(msg() + \" Our versions are too old. ourHighThreshold=\"+ourHighThreshold + \" otherLowThreshold=\"+otherLow);\n      return false;\n    }\n\n    if (ourLowThreshold > otherHigh) {\n      // Small overlap between windows and ours is newer.\n      // Using this list to sync would result in requesting/replaying results we don't need\n      // and possibly bringing deleted docs back to life.\n      log.info(msg() + \" Our versions are newer. ourLowThreshold=\"+ourLowThreshold + \" otherHigh=\"+otherHigh);\n      return true;\n    }\n    \n    List<Long> toRequest = new ArrayList<>();\n    for (Long otherVersion : otherVersions) {\n      // stop when the entries get old enough that reorders may lead us to see updates we don't need\n      if (!completeList && Math.abs(otherVersion) < ourLowThreshold) break;\n\n      if (ourUpdateSet.contains(otherVersion) || requestedUpdateSet.contains(otherVersion)) {\n        // we either have this update, or already requested it\n        // TODO: what if the shard we previously requested this from returns failure (because it goes\n        // down)\n        continue;\n      }\n\n      toRequest.add(otherVersion);\n      requestedUpdateSet.add(otherVersion);\n    }\n\n    sreq.requestedUpdates = toRequest;\n    \n    if (toRequest.isEmpty()) {\n      log.info(msg() + \" Our versions are newer. ourLowThreshold=\"+ourLowThreshold + \" otherHigh=\"+otherHigh);\n\n      // we had (or already requested) all the updates referenced by the replica\n      return true;\n    }\n    \n    if (toRequest.size() > maxUpdates) {\n      log.info(msg() + \" Failing due to needing too many updates:\" + maxUpdates);\n      return false;\n    }\n\n    return requestUpdates(srsp, toRequest);\n  }\n\n","sourceOld":"  private boolean handleVersions(ShardResponse srsp) {\n    // we retrieved the last N updates from the replica\n    List<Long> otherVersions = (List<Long>)srsp.getSolrResponse().getResponse().get(\"versions\");\n    // TODO: how to handle short lists?\n\n    SyncShardRequest sreq = (SyncShardRequest) srsp.getShardRequest();\n    sreq.reportedVersions =  otherVersions;\n\n    log.info(msg() + \" Received \" + otherVersions.size() + \" versions from \" + sreq.shards[0] );\n\n    if (otherVersions.size() == 0) {\n      return getNoVersionsIsSuccess; \n    }\n    \n    boolean completeList = otherVersions.size() < nUpdates;  // do we have their complete list of updates?\n\n    Collections.sort(otherVersions, absComparator);\n\n    if (debug) {\n      log.debug(msg() + \" sorted versions from \" + sreq.shards[0] + \" = \" + otherVersions);\n    }\n    \n    long otherHigh = percentile(otherVersions, .2f);\n    long otherLow = percentile(otherVersions, .8f);\n\n    if (ourHighThreshold < otherLow) {\n      // Small overlap between version windows and ours is older\n      // This means that we might miss updates if we attempted to use this method.\n      // Since there exists just one replica that is so much newer, we must\n      // fail the sync.\n      log.info(msg() + \" Our versions are too old. ourHighThreshold=\"+ourHighThreshold + \" otherLowThreshold=\"+otherLow);\n      return false;\n    }\n\n    if (ourLowThreshold > otherHigh) {\n      // Small overlap between windows and ours is newer.\n      // Using this list to sync would result in requesting/replaying results we don't need\n      // and possibly bringing deleted docs back to life.\n      log.info(msg() + \" Our versions are newer. ourLowThreshold=\"+ourLowThreshold + \" otherHigh=\"+otherHigh);\n      return true;\n    }\n    \n    List<Long> toRequest = new ArrayList<Long>();\n    for (Long otherVersion : otherVersions) {\n      // stop when the entries get old enough that reorders may lead us to see updates we don't need\n      if (!completeList && Math.abs(otherVersion) < ourLowThreshold) break;\n\n      if (ourUpdateSet.contains(otherVersion) || requestedUpdateSet.contains(otherVersion)) {\n        // we either have this update, or already requested it\n        // TODO: what if the shard we previously requested this from returns failure (because it goes\n        // down)\n        continue;\n      }\n\n      toRequest.add(otherVersion);\n      requestedUpdateSet.add(otherVersion);\n    }\n\n    sreq.requestedUpdates = toRequest;\n    \n    if (toRequest.isEmpty()) {\n      log.info(msg() + \" Our versions are newer. ourLowThreshold=\"+ourLowThreshold + \" otherHigh=\"+otherHigh);\n\n      // we had (or already requested) all the updates referenced by the replica\n      return true;\n    }\n    \n    if (toRequest.size() > maxUpdates) {\n      log.info(msg() + \" Failing due to needing too many updates:\" + maxUpdates);\n      return false;\n    }\n\n    return requestUpdates(srsp, toRequest);\n  }\n\n","bugFix":null,"bugIntro":["e511b092029d56e0d4e30204fba8509c1c2647b6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"979e22aa7c63c9dc651adf861610c7e444d45832","date":1454615713,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#handleVersions(ShardResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#handleVersions(ShardResponse).mjava","sourceNew":"  private boolean handleVersions(ShardResponse srsp) {\n    // we retrieved the last N updates from the replica\n    List<Long> otherVersions = (List<Long>)srsp.getSolrResponse().getResponse().get(\"versions\");\n    // TODO: how to handle short lists?\n\n    SyncShardRequest sreq = (SyncShardRequest) srsp.getShardRequest();\n    sreq.reportedVersions =  otherVersions;\n\n    Object fingerprint = srsp.getSolrResponse().getResponse().get(\"fingerprint\");\n\n    log.info(msg() + \" Received \" + otherVersions.size() + \" versions from \" + sreq.shards[0] + \" fingerprint:\" + fingerprint );\n    if (fingerprint != null) {\n      sreq.fingerprint = IndexFingerprint.fromObject(fingerprint);\n    }\n\n    if (otherVersions.size() == 0) {\n      return getNoVersionsIsSuccess; \n    }\n    \n    boolean completeList = otherVersions.size() < nUpdates;  // do we have their complete list of updates?\n\n    Collections.sort(otherVersions, absComparator);\n\n    if (debug) {\n      log.debug(msg() + \" sorted versions from \" + sreq.shards[0] + \" = \" + otherVersions);\n    }\n    \n    long otherHigh = percentile(otherVersions, .2f);\n    long otherLow = percentile(otherVersions, .8f);\n    long otherHighest = otherVersions.get(0);\n\n    if (ourHighThreshold < otherLow) {\n      // Small overlap between version windows and ours is older\n      // This means that we might miss updates if we attempted to use this method.\n      // Since there exists just one replica that is so much newer, we must\n      // fail the sync.\n      log.info(msg() + \" Our versions are too old. ourHighThreshold=\"+ourHighThreshold + \" otherLowThreshold=\"+otherLow + \" ourHighest=\" + ourHighest + \" otherHighest=\" + otherHighest);\n      return false;\n    }\n\n    if (ourLowThreshold > otherHigh) {\n      // Small overlap between windows and ours is newer.\n      // Using this list to sync would result in requesting/replaying results we don't need\n      // and possibly bringing deleted docs back to life.\n      log.info(msg() + \" Our versions are newer. ourLowThreshold=\"+ourLowThreshold + \" otherHigh=\"+otherHigh+ \" ourHighest=\" + ourHighest + \" otherHighest=\" + otherHighest);\n\n      // Because our versions are newer, IndexFingerprint with the remote would not match us.\n      // We return true on our side, but the remote peersync with us should fail.\n      return true;\n    }\n    \n    List<Long> toRequest = new ArrayList<>();\n    for (Long otherVersion : otherVersions) {\n      // stop when the entries get old enough that reorders may lead us to see updates we don't need\n      if (!completeList && Math.abs(otherVersion) < ourLowThreshold) break;\n\n      if (ourUpdateSet.contains(otherVersion) || requestedUpdateSet.contains(otherVersion)) {\n        // we either have this update, or already requested it\n        // TODO: what if the shard we previously requested this from returns failure (because it goes\n        // down)\n        continue;\n      }\n\n      toRequest.add(otherVersion);\n      requestedUpdateSet.add(otherVersion);\n    }\n\n    sreq.requestedUpdates = toRequest;\n    \n    if (toRequest.isEmpty()) {\n      log.info(msg() + \" No additional versions requested. ourLowThreshold=\"+ourLowThreshold + \" otherHigh=\"+otherHigh+ \" ourHighest=\" + ourHighest + \" otherHighest=\" + otherHighest);\n\n      // we had (or already requested) all the updates referenced by the replica\n\n      // If we requested updates from another replica, we can't compare fingerprints yet with this replica, we need to defer\n      if (doFingerprint) {\n        sreq.doFingerprintComparison = true;\n      }\n\n      return true;\n    }\n    \n    if (toRequest.size() > maxUpdates) {\n      log.info(msg() + \" Failing due to needing too many updates:\" + maxUpdates);\n      return false;\n    }\n\n    return requestUpdates(srsp, toRequest);\n  }\n\n","sourceOld":"  private boolean handleVersions(ShardResponse srsp) {\n    // we retrieved the last N updates from the replica\n    List<Long> otherVersions = (List<Long>)srsp.getSolrResponse().getResponse().get(\"versions\");\n    // TODO: how to handle short lists?\n\n    SyncShardRequest sreq = (SyncShardRequest) srsp.getShardRequest();\n    sreq.reportedVersions =  otherVersions;\n\n    log.info(msg() + \" Received \" + otherVersions.size() + \" versions from \" + sreq.shards[0] );\n\n    if (otherVersions.size() == 0) {\n      return getNoVersionsIsSuccess; \n    }\n    \n    boolean completeList = otherVersions.size() < nUpdates;  // do we have their complete list of updates?\n\n    Collections.sort(otherVersions, absComparator);\n\n    if (debug) {\n      log.debug(msg() + \" sorted versions from \" + sreq.shards[0] + \" = \" + otherVersions);\n    }\n    \n    long otherHigh = percentile(otherVersions, .2f);\n    long otherLow = percentile(otherVersions, .8f);\n\n    if (ourHighThreshold < otherLow) {\n      // Small overlap between version windows and ours is older\n      // This means that we might miss updates if we attempted to use this method.\n      // Since there exists just one replica that is so much newer, we must\n      // fail the sync.\n      log.info(msg() + \" Our versions are too old. ourHighThreshold=\"+ourHighThreshold + \" otherLowThreshold=\"+otherLow);\n      return false;\n    }\n\n    if (ourLowThreshold > otherHigh) {\n      // Small overlap between windows and ours is newer.\n      // Using this list to sync would result in requesting/replaying results we don't need\n      // and possibly bringing deleted docs back to life.\n      log.info(msg() + \" Our versions are newer. ourLowThreshold=\"+ourLowThreshold + \" otherHigh=\"+otherHigh);\n      return true;\n    }\n    \n    List<Long> toRequest = new ArrayList<>();\n    for (Long otherVersion : otherVersions) {\n      // stop when the entries get old enough that reorders may lead us to see updates we don't need\n      if (!completeList && Math.abs(otherVersion) < ourLowThreshold) break;\n\n      if (ourUpdateSet.contains(otherVersion) || requestedUpdateSet.contains(otherVersion)) {\n        // we either have this update, or already requested it\n        // TODO: what if the shard we previously requested this from returns failure (because it goes\n        // down)\n        continue;\n      }\n\n      toRequest.add(otherVersion);\n      requestedUpdateSet.add(otherVersion);\n    }\n\n    sreq.requestedUpdates = toRequest;\n    \n    if (toRequest.isEmpty()) {\n      log.info(msg() + \" Our versions are newer. ourLowThreshold=\"+ourLowThreshold + \" otherHigh=\"+otherHigh);\n\n      // we had (or already requested) all the updates referenced by the replica\n      return true;\n    }\n    \n    if (toRequest.size() > maxUpdates) {\n      log.info(msg() + \" Failing due to needing too many updates:\" + maxUpdates);\n      return false;\n    }\n\n    return requestUpdates(srsp, toRequest);\n  }\n\n","bugFix":null,"bugIntro":["e511b092029d56e0d4e30204fba8509c1c2647b6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b1704c078ec59838c9d95d5bf5738b393b537494","date":1454693901,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#handleVersions(ShardResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#handleVersions(ShardResponse).mjava","sourceNew":"  private boolean handleVersions(ShardResponse srsp) {\n    // we retrieved the last N updates from the replica\n    List<Long> otherVersions = (List<Long>)srsp.getSolrResponse().getResponse().get(\"versions\");\n    // TODO: how to handle short lists?\n\n    SyncShardRequest sreq = (SyncShardRequest) srsp.getShardRequest();\n    sreq.reportedVersions =  otherVersions;\n\n    Object fingerprint = srsp.getSolrResponse().getResponse().get(\"fingerprint\");\n\n    log.info(msg() + \" Received \" + otherVersions.size() + \" versions from \" + sreq.shards[0] + \" fingerprint:\" + fingerprint );\n    if (fingerprint != null) {\n      sreq.fingerprint = IndexFingerprint.fromObject(fingerprint);\n    }\n\n    if (otherVersions.size() == 0) {\n      return getNoVersionsIsSuccess; \n    }\n    \n    boolean completeList = otherVersions.size() < nUpdates;  // do we have their complete list of updates?\n\n    Collections.sort(otherVersions, absComparator);\n\n    if (debug) {\n      log.debug(msg() + \" sorted versions from \" + sreq.shards[0] + \" = \" + otherVersions);\n    }\n    \n    long otherHigh = percentile(otherVersions, .2f);\n    long otherLow = percentile(otherVersions, .8f);\n    long otherHighest = otherVersions.get(0);\n\n    if (ourHighThreshold < otherLow) {\n      // Small overlap between version windows and ours is older\n      // This means that we might miss updates if we attempted to use this method.\n      // Since there exists just one replica that is so much newer, we must\n      // fail the sync.\n      log.info(msg() + \" Our versions are too old. ourHighThreshold=\"+ourHighThreshold + \" otherLowThreshold=\"+otherLow + \" ourHighest=\" + ourHighest + \" otherHighest=\" + otherHighest);\n      return false;\n    }\n\n    if (ourLowThreshold > otherHigh) {\n      // Small overlap between windows and ours is newer.\n      // Using this list to sync would result in requesting/replaying results we don't need\n      // and possibly bringing deleted docs back to life.\n      log.info(msg() + \" Our versions are newer. ourLowThreshold=\"+ourLowThreshold + \" otherHigh=\"+otherHigh+ \" ourHighest=\" + ourHighest + \" otherHighest=\" + otherHighest);\n\n      // Because our versions are newer, IndexFingerprint with the remote would not match us.\n      // We return true on our side, but the remote peersync with us should fail.\n      return true;\n    }\n    \n    List<Long> toRequest = new ArrayList<>();\n    for (Long otherVersion : otherVersions) {\n      // stop when the entries get old enough that reorders may lead us to see updates we don't need\n      if (!completeList && Math.abs(otherVersion) < ourLowThreshold) break;\n\n      if (ourUpdateSet.contains(otherVersion) || requestedUpdateSet.contains(otherVersion)) {\n        // we either have this update, or already requested it\n        // TODO: what if the shard we previously requested this from returns failure (because it goes\n        // down)\n        continue;\n      }\n\n      toRequest.add(otherVersion);\n      requestedUpdateSet.add(otherVersion);\n    }\n\n    sreq.requestedUpdates = toRequest;\n    \n    if (toRequest.isEmpty()) {\n      log.info(msg() + \" No additional versions requested. ourLowThreshold=\"+ourLowThreshold + \" otherHigh=\"+otherHigh+ \" ourHighest=\" + ourHighest + \" otherHighest=\" + otherHighest);\n\n      // we had (or already requested) all the updates referenced by the replica\n\n      // If we requested updates from another replica, we can't compare fingerprints yet with this replica, we need to defer\n      if (doFingerprint) {\n        sreq.doFingerprintComparison = true;\n      }\n\n      return true;\n    }\n    \n    if (toRequest.size() > maxUpdates) {\n      log.info(msg() + \" Failing due to needing too many updates:\" + maxUpdates);\n      return false;\n    }\n\n    return requestUpdates(srsp, toRequest);\n  }\n\n","sourceOld":"  private boolean handleVersions(ShardResponse srsp) {\n    // we retrieved the last N updates from the replica\n    List<Long> otherVersions = (List<Long>)srsp.getSolrResponse().getResponse().get(\"versions\");\n    // TODO: how to handle short lists?\n\n    SyncShardRequest sreq = (SyncShardRequest) srsp.getShardRequest();\n    sreq.reportedVersions =  otherVersions;\n\n    log.info(msg() + \" Received \" + otherVersions.size() + \" versions from \" + sreq.shards[0] );\n\n    if (otherVersions.size() == 0) {\n      return getNoVersionsIsSuccess; \n    }\n    \n    boolean completeList = otherVersions.size() < nUpdates;  // do we have their complete list of updates?\n\n    Collections.sort(otherVersions, absComparator);\n\n    if (debug) {\n      log.debug(msg() + \" sorted versions from \" + sreq.shards[0] + \" = \" + otherVersions);\n    }\n    \n    long otherHigh = percentile(otherVersions, .2f);\n    long otherLow = percentile(otherVersions, .8f);\n\n    if (ourHighThreshold < otherLow) {\n      // Small overlap between version windows and ours is older\n      // This means that we might miss updates if we attempted to use this method.\n      // Since there exists just one replica that is so much newer, we must\n      // fail the sync.\n      log.info(msg() + \" Our versions are too old. ourHighThreshold=\"+ourHighThreshold + \" otherLowThreshold=\"+otherLow);\n      return false;\n    }\n\n    if (ourLowThreshold > otherHigh) {\n      // Small overlap between windows and ours is newer.\n      // Using this list to sync would result in requesting/replaying results we don't need\n      // and possibly bringing deleted docs back to life.\n      log.info(msg() + \" Our versions are newer. ourLowThreshold=\"+ourLowThreshold + \" otherHigh=\"+otherHigh);\n      return true;\n    }\n    \n    List<Long> toRequest = new ArrayList<>();\n    for (Long otherVersion : otherVersions) {\n      // stop when the entries get old enough that reorders may lead us to see updates we don't need\n      if (!completeList && Math.abs(otherVersion) < ourLowThreshold) break;\n\n      if (ourUpdateSet.contains(otherVersion) || requestedUpdateSet.contains(otherVersion)) {\n        // we either have this update, or already requested it\n        // TODO: what if the shard we previously requested this from returns failure (because it goes\n        // down)\n        continue;\n      }\n\n      toRequest.add(otherVersion);\n      requestedUpdateSet.add(otherVersion);\n    }\n\n    sreq.requestedUpdates = toRequest;\n    \n    if (toRequest.isEmpty()) {\n      log.info(msg() + \" Our versions are newer. ourLowThreshold=\"+ourLowThreshold + \" otherHigh=\"+otherHigh);\n\n      // we had (or already requested) all the updates referenced by the replica\n      return true;\n    }\n    \n    if (toRequest.size() > maxUpdates) {\n      log.info(msg() + \" Failing due to needing too many updates:\" + maxUpdates);\n      return false;\n    }\n\n    return requestUpdates(srsp, toRequest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#handleVersions(ShardResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#handleVersions(ShardResponse).mjava","sourceNew":"  private boolean handleVersions(ShardResponse srsp) {\n    // we retrieved the last N updates from the replica\n    List<Long> otherVersions = (List<Long>)srsp.getSolrResponse().getResponse().get(\"versions\");\n    // TODO: how to handle short lists?\n\n    SyncShardRequest sreq = (SyncShardRequest) srsp.getShardRequest();\n    sreq.reportedVersions =  otherVersions;\n\n    Object fingerprint = srsp.getSolrResponse().getResponse().get(\"fingerprint\");\n\n    log.info(msg() + \" Received \" + otherVersions.size() + \" versions from \" + sreq.shards[0] + \" fingerprint:\" + fingerprint );\n    if (fingerprint != null) {\n      sreq.fingerprint = IndexFingerprint.fromObject(fingerprint);\n    }\n\n    if (otherVersions.size() == 0) {\n      return getNoVersionsIsSuccess; \n    }\n    \n    boolean completeList = otherVersions.size() < nUpdates;  // do we have their complete list of updates?\n\n    Collections.sort(otherVersions, absComparator);\n\n    if (debug) {\n      log.debug(msg() + \" sorted versions from \" + sreq.shards[0] + \" = \" + otherVersions);\n    }\n    \n    long otherHigh = percentile(otherVersions, .2f);\n    long otherLow = percentile(otherVersions, .8f);\n    long otherHighest = otherVersions.get(0);\n\n    if (ourHighThreshold < otherLow) {\n      // Small overlap between version windows and ours is older\n      // This means that we might miss updates if we attempted to use this method.\n      // Since there exists just one replica that is so much newer, we must\n      // fail the sync.\n      log.info(msg() + \" Our versions are too old. ourHighThreshold=\"+ourHighThreshold + \" otherLowThreshold=\"+otherLow + \" ourHighest=\" + ourHighest + \" otherHighest=\" + otherHighest);\n      return false;\n    }\n\n    if (ourLowThreshold > otherHigh) {\n      // Small overlap between windows and ours is newer.\n      // Using this list to sync would result in requesting/replaying results we don't need\n      // and possibly bringing deleted docs back to life.\n      log.info(msg() + \" Our versions are newer. ourLowThreshold=\"+ourLowThreshold + \" otherHigh=\"+otherHigh+ \" ourHighest=\" + ourHighest + \" otherHighest=\" + otherHighest);\n\n      // Because our versions are newer, IndexFingerprint with the remote would not match us.\n      // We return true on our side, but the remote peersync with us should fail.\n      return true;\n    }\n    \n    List<Long> toRequest = new ArrayList<>();\n    for (Long otherVersion : otherVersions) {\n      // stop when the entries get old enough that reorders may lead us to see updates we don't need\n      if (!completeList && Math.abs(otherVersion) < ourLowThreshold) break;\n\n      if (ourUpdateSet.contains(otherVersion) || requestedUpdateSet.contains(otherVersion)) {\n        // we either have this update, or already requested it\n        // TODO: what if the shard we previously requested this from returns failure (because it goes\n        // down)\n        continue;\n      }\n\n      toRequest.add(otherVersion);\n      requestedUpdateSet.add(otherVersion);\n    }\n\n    sreq.requestedUpdates = toRequest;\n    \n    if (toRequest.isEmpty()) {\n      log.info(msg() + \" No additional versions requested. ourLowThreshold=\"+ourLowThreshold + \" otherHigh=\"+otherHigh+ \" ourHighest=\" + ourHighest + \" otherHighest=\" + otherHighest);\n\n      // we had (or already requested) all the updates referenced by the replica\n\n      // If we requested updates from another replica, we can't compare fingerprints yet with this replica, we need to defer\n      if (doFingerprint) {\n        sreq.doFingerprintComparison = true;\n      }\n\n      return true;\n    }\n    \n    if (toRequest.size() > maxUpdates) {\n      log.info(msg() + \" Failing due to needing too many updates:\" + maxUpdates);\n      return false;\n    }\n\n    return requestUpdates(srsp, toRequest);\n  }\n\n","sourceOld":"  private boolean handleVersions(ShardResponse srsp) {\n    // we retrieved the last N updates from the replica\n    List<Long> otherVersions = (List<Long>)srsp.getSolrResponse().getResponse().get(\"versions\");\n    // TODO: how to handle short lists?\n\n    SyncShardRequest sreq = (SyncShardRequest) srsp.getShardRequest();\n    sreq.reportedVersions =  otherVersions;\n\n    log.info(msg() + \" Received \" + otherVersions.size() + \" versions from \" + sreq.shards[0] );\n\n    if (otherVersions.size() == 0) {\n      return getNoVersionsIsSuccess; \n    }\n    \n    boolean completeList = otherVersions.size() < nUpdates;  // do we have their complete list of updates?\n\n    Collections.sort(otherVersions, absComparator);\n\n    if (debug) {\n      log.debug(msg() + \" sorted versions from \" + sreq.shards[0] + \" = \" + otherVersions);\n    }\n    \n    long otherHigh = percentile(otherVersions, .2f);\n    long otherLow = percentile(otherVersions, .8f);\n\n    if (ourHighThreshold < otherLow) {\n      // Small overlap between version windows and ours is older\n      // This means that we might miss updates if we attempted to use this method.\n      // Since there exists just one replica that is so much newer, we must\n      // fail the sync.\n      log.info(msg() + \" Our versions are too old. ourHighThreshold=\"+ourHighThreshold + \" otherLowThreshold=\"+otherLow);\n      return false;\n    }\n\n    if (ourLowThreshold > otherHigh) {\n      // Small overlap between windows and ours is newer.\n      // Using this list to sync would result in requesting/replaying results we don't need\n      // and possibly bringing deleted docs back to life.\n      log.info(msg() + \" Our versions are newer. ourLowThreshold=\"+ourLowThreshold + \" otherHigh=\"+otherHigh);\n      return true;\n    }\n    \n    List<Long> toRequest = new ArrayList<>();\n    for (Long otherVersion : otherVersions) {\n      // stop when the entries get old enough that reorders may lead us to see updates we don't need\n      if (!completeList && Math.abs(otherVersion) < ourLowThreshold) break;\n\n      if (ourUpdateSet.contains(otherVersion) || requestedUpdateSet.contains(otherVersion)) {\n        // we either have this update, or already requested it\n        // TODO: what if the shard we previously requested this from returns failure (because it goes\n        // down)\n        continue;\n      }\n\n      toRequest.add(otherVersion);\n      requestedUpdateSet.add(otherVersion);\n    }\n\n    sreq.requestedUpdates = toRequest;\n    \n    if (toRequest.isEmpty()) {\n      log.info(msg() + \" Our versions are newer. ourLowThreshold=\"+ourLowThreshold + \" otherHigh=\"+otherHigh);\n\n      // we had (or already requested) all the updates referenced by the replica\n      return true;\n    }\n    \n    if (toRequest.size() > maxUpdates) {\n      log.info(msg() + \" Failing due to needing too many updates:\" + maxUpdates);\n      return false;\n    }\n\n    return requestUpdates(srsp, toRequest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e511b092029d56e0d4e30204fba8509c1c2647b6","date":1467838965,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#handleVersions(ShardResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#handleVersions(ShardResponse).mjava","sourceNew":"  private boolean handleVersions(ShardResponse srsp) {\n    // we retrieved the last N updates from the replica\n    List<Long> otherVersions = (List<Long>)srsp.getSolrResponse().getResponse().get(\"versions\");\n    // TODO: how to handle short lists?\n\n    SyncShardRequest sreq = (SyncShardRequest) srsp.getShardRequest();\n    sreq.reportedVersions =  otherVersions;\n\n    Object fingerprint = srsp.getSolrResponse().getResponse().get(\"fingerprint\");\n\n    log.info(msg() + \" Received \" + otherVersions.size() + \" versions from \" + sreq.shards[0] + \" fingerprint:\" + fingerprint );\n    if (fingerprint != null) {\n      sreq.fingerprint = IndexFingerprint.fromObject(fingerprint);\n    }\n\n    if (otherVersions.size() == 0) {\n      return getNoVersionsIsSuccess; \n    }\n    \n    boolean completeList = otherVersions.size() < nUpdates;  // do we have their complete list of updates?\n\n    Collections.sort(otherVersions, absComparator);\n\n    if (debug) {\n      log.debug(msg() + \" sorted versions from \" + sreq.shards[0] + \" = \" + otherVersions);\n    }\n    \n    long otherHigh = percentile(otherVersions, .2f);\n    long otherLow = percentile(otherVersions, .8f);\n    long otherHighest = otherVersions.get(0);\n\n    if (ourHighThreshold < otherLow) {\n      // Small overlap between version windows and ours is older\n      // This means that we might miss updates if we attempted to use this method.\n      // Since there exists just one replica that is so much newer, we must\n      // fail the sync.\n      log.info(msg() + \" Our versions are too old. ourHighThreshold=\"+ourHighThreshold + \" otherLowThreshold=\"+otherLow + \" ourHighest=\" + ourHighest + \" otherHighest=\" + otherHighest);\n      return false;\n    }\n\n    if (ourLowThreshold > otherHigh) {\n      // Small overlap between windows and ours is newer.\n      // Using this list to sync would result in requesting/replaying results we don't need\n      // and possibly bringing deleted docs back to life.\n      log.info(msg() + \" Our versions are newer. ourLowThreshold=\"+ourLowThreshold + \" otherHigh=\"+otherHigh+ \" ourHighest=\" + ourHighest + \" otherHighest=\" + otherHighest);\n\n      // Because our versions are newer, IndexFingerprint with the remote would not match us.\n      // We return true on our side, but the remote peersync with us should fail.\n      return true;\n    }\n    \n    if(core.getSolrConfig().useRangeVersionsForPeerSync && canHandleVersionRanges(sreq.shards[0])) {\n      return handleVersionsWithRanges(srsp, otherVersions, sreq, completeList, otherHigh, otherHighest);\n    } else {\n      return handleIndividualVersions(srsp, otherVersions, sreq, completeList, otherHigh, otherHighest);\n    }\n  }\n\n","sourceOld":"  private boolean handleVersions(ShardResponse srsp) {\n    // we retrieved the last N updates from the replica\n    List<Long> otherVersions = (List<Long>)srsp.getSolrResponse().getResponse().get(\"versions\");\n    // TODO: how to handle short lists?\n\n    SyncShardRequest sreq = (SyncShardRequest) srsp.getShardRequest();\n    sreq.reportedVersions =  otherVersions;\n\n    Object fingerprint = srsp.getSolrResponse().getResponse().get(\"fingerprint\");\n\n    log.info(msg() + \" Received \" + otherVersions.size() + \" versions from \" + sreq.shards[0] + \" fingerprint:\" + fingerprint );\n    if (fingerprint != null) {\n      sreq.fingerprint = IndexFingerprint.fromObject(fingerprint);\n    }\n\n    if (otherVersions.size() == 0) {\n      return getNoVersionsIsSuccess; \n    }\n    \n    boolean completeList = otherVersions.size() < nUpdates;  // do we have their complete list of updates?\n\n    Collections.sort(otherVersions, absComparator);\n\n    if (debug) {\n      log.debug(msg() + \" sorted versions from \" + sreq.shards[0] + \" = \" + otherVersions);\n    }\n    \n    long otherHigh = percentile(otherVersions, .2f);\n    long otherLow = percentile(otherVersions, .8f);\n    long otherHighest = otherVersions.get(0);\n\n    if (ourHighThreshold < otherLow) {\n      // Small overlap between version windows and ours is older\n      // This means that we might miss updates if we attempted to use this method.\n      // Since there exists just one replica that is so much newer, we must\n      // fail the sync.\n      log.info(msg() + \" Our versions are too old. ourHighThreshold=\"+ourHighThreshold + \" otherLowThreshold=\"+otherLow + \" ourHighest=\" + ourHighest + \" otherHighest=\" + otherHighest);\n      return false;\n    }\n\n    if (ourLowThreshold > otherHigh) {\n      // Small overlap between windows and ours is newer.\n      // Using this list to sync would result in requesting/replaying results we don't need\n      // and possibly bringing deleted docs back to life.\n      log.info(msg() + \" Our versions are newer. ourLowThreshold=\"+ourLowThreshold + \" otherHigh=\"+otherHigh+ \" ourHighest=\" + ourHighest + \" otherHighest=\" + otherHighest);\n\n      // Because our versions are newer, IndexFingerprint with the remote would not match us.\n      // We return true on our side, but the remote peersync with us should fail.\n      return true;\n    }\n    \n    List<Long> toRequest = new ArrayList<>();\n    for (Long otherVersion : otherVersions) {\n      // stop when the entries get old enough that reorders may lead us to see updates we don't need\n      if (!completeList && Math.abs(otherVersion) < ourLowThreshold) break;\n\n      if (ourUpdateSet.contains(otherVersion) || requestedUpdateSet.contains(otherVersion)) {\n        // we either have this update, or already requested it\n        // TODO: what if the shard we previously requested this from returns failure (because it goes\n        // down)\n        continue;\n      }\n\n      toRequest.add(otherVersion);\n      requestedUpdateSet.add(otherVersion);\n    }\n\n    sreq.requestedUpdates = toRequest;\n    \n    if (toRequest.isEmpty()) {\n      log.info(msg() + \" No additional versions requested. ourLowThreshold=\"+ourLowThreshold + \" otherHigh=\"+otherHigh+ \" ourHighest=\" + ourHighest + \" otherHighest=\" + otherHighest);\n\n      // we had (or already requested) all the updates referenced by the replica\n\n      // If we requested updates from another replica, we can't compare fingerprints yet with this replica, we need to defer\n      if (doFingerprint) {\n        sreq.doFingerprintComparison = true;\n      }\n\n      return true;\n    }\n    \n    if (toRequest.size() > maxUpdates) {\n      log.info(msg() + \" Failing due to needing too many updates:\" + maxUpdates);\n      return false;\n    }\n\n    return requestUpdates(srsp, toRequest);\n  }\n\n","bugFix":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","2c007e7c4cf8c55bc2a5884e315123afaaeec87f","5620d3cb34306ea5b7d016a832fbc964b74c2650","414ae8f6c01f0259255c532b2bd51b03000c2480","1bef15745514a7a3142d641ff715dc096ff0f6c1","979e22aa7c63c9dc651adf861610c7e444d45832"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8381eb1cd44d2e0defb52130de3295a576ac1e7b","date":1467840340,"type":3,"author":"Chris Hostetter","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#handleVersions(ShardResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#handleVersions(ShardResponse).mjava","sourceNew":"  private boolean handleVersions(ShardResponse srsp) {\n    // we retrieved the last N updates from the replica\n    List<Long> otherVersions = (List<Long>)srsp.getSolrResponse().getResponse().get(\"versions\");\n    // TODO: how to handle short lists?\n\n    SyncShardRequest sreq = (SyncShardRequest) srsp.getShardRequest();\n    sreq.reportedVersions =  otherVersions;\n\n    Object fingerprint = srsp.getSolrResponse().getResponse().get(\"fingerprint\");\n\n    log.info(msg() + \" Received \" + otherVersions.size() + \" versions from \" + sreq.shards[0] + \" fingerprint:\" + fingerprint );\n    if (fingerprint != null) {\n      sreq.fingerprint = IndexFingerprint.fromObject(fingerprint);\n    }\n\n    if (otherVersions.size() == 0) {\n      return getNoVersionsIsSuccess; \n    }\n    \n    boolean completeList = otherVersions.size() < nUpdates;  // do we have their complete list of updates?\n\n    Collections.sort(otherVersions, absComparator);\n\n    if (debug) {\n      log.debug(msg() + \" sorted versions from \" + sreq.shards[0] + \" = \" + otherVersions);\n    }\n    \n    long otherHigh = percentile(otherVersions, .2f);\n    long otherLow = percentile(otherVersions, .8f);\n    long otherHighest = otherVersions.get(0);\n\n    if (ourHighThreshold < otherLow) {\n      // Small overlap between version windows and ours is older\n      // This means that we might miss updates if we attempted to use this method.\n      // Since there exists just one replica that is so much newer, we must\n      // fail the sync.\n      log.info(msg() + \" Our versions are too old. ourHighThreshold=\"+ourHighThreshold + \" otherLowThreshold=\"+otherLow + \" ourHighest=\" + ourHighest + \" otherHighest=\" + otherHighest);\n      return false;\n    }\n\n    if (ourLowThreshold > otherHigh) {\n      // Small overlap between windows and ours is newer.\n      // Using this list to sync would result in requesting/replaying results we don't need\n      // and possibly bringing deleted docs back to life.\n      log.info(msg() + \" Our versions are newer. ourLowThreshold=\"+ourLowThreshold + \" otherHigh=\"+otherHigh+ \" ourHighest=\" + ourHighest + \" otherHighest=\" + otherHighest);\n\n      // Because our versions are newer, IndexFingerprint with the remote would not match us.\n      // We return true on our side, but the remote peersync with us should fail.\n      return true;\n    }\n    \n    if(core.getSolrConfig().useRangeVersionsForPeerSync && canHandleVersionRanges(sreq.shards[0])) {\n      return handleVersionsWithRanges(srsp, otherVersions, sreq, completeList, otherHigh, otherHighest);\n    } else {\n      return handleIndividualVersions(srsp, otherVersions, sreq, completeList, otherHigh, otherHighest);\n    }\n  }\n\n","sourceOld":"  private boolean handleVersions(ShardResponse srsp) {\n    // we retrieved the last N updates from the replica\n    List<Long> otherVersions = (List<Long>)srsp.getSolrResponse().getResponse().get(\"versions\");\n    // TODO: how to handle short lists?\n\n    SyncShardRequest sreq = (SyncShardRequest) srsp.getShardRequest();\n    sreq.reportedVersions =  otherVersions;\n\n    Object fingerprint = srsp.getSolrResponse().getResponse().get(\"fingerprint\");\n\n    log.info(msg() + \" Received \" + otherVersions.size() + \" versions from \" + sreq.shards[0] + \" fingerprint:\" + fingerprint );\n    if (fingerprint != null) {\n      sreq.fingerprint = IndexFingerprint.fromObject(fingerprint);\n    }\n\n    if (otherVersions.size() == 0) {\n      return getNoVersionsIsSuccess; \n    }\n    \n    boolean completeList = otherVersions.size() < nUpdates;  // do we have their complete list of updates?\n\n    Collections.sort(otherVersions, absComparator);\n\n    if (debug) {\n      log.debug(msg() + \" sorted versions from \" + sreq.shards[0] + \" = \" + otherVersions);\n    }\n    \n    long otherHigh = percentile(otherVersions, .2f);\n    long otherLow = percentile(otherVersions, .8f);\n    long otherHighest = otherVersions.get(0);\n\n    if (ourHighThreshold < otherLow) {\n      // Small overlap between version windows and ours is older\n      // This means that we might miss updates if we attempted to use this method.\n      // Since there exists just one replica that is so much newer, we must\n      // fail the sync.\n      log.info(msg() + \" Our versions are too old. ourHighThreshold=\"+ourHighThreshold + \" otherLowThreshold=\"+otherLow + \" ourHighest=\" + ourHighest + \" otherHighest=\" + otherHighest);\n      return false;\n    }\n\n    if (ourLowThreshold > otherHigh) {\n      // Small overlap between windows and ours is newer.\n      // Using this list to sync would result in requesting/replaying results we don't need\n      // and possibly bringing deleted docs back to life.\n      log.info(msg() + \" Our versions are newer. ourLowThreshold=\"+ourLowThreshold + \" otherHigh=\"+otherHigh+ \" ourHighest=\" + ourHighest + \" otherHighest=\" + otherHighest);\n\n      // Because our versions are newer, IndexFingerprint with the remote would not match us.\n      // We return true on our side, but the remote peersync with us should fail.\n      return true;\n    }\n    \n    List<Long> toRequest = new ArrayList<>();\n    for (Long otherVersion : otherVersions) {\n      // stop when the entries get old enough that reorders may lead us to see updates we don't need\n      if (!completeList && Math.abs(otherVersion) < ourLowThreshold) break;\n\n      if (ourUpdateSet.contains(otherVersion) || requestedUpdateSet.contains(otherVersion)) {\n        // we either have this update, or already requested it\n        // TODO: what if the shard we previously requested this from returns failure (because it goes\n        // down)\n        continue;\n      }\n\n      toRequest.add(otherVersion);\n      requestedUpdateSet.add(otherVersion);\n    }\n\n    sreq.requestedUpdates = toRequest;\n    \n    if (toRequest.isEmpty()) {\n      log.info(msg() + \" No additional versions requested. ourLowThreshold=\"+ourLowThreshold + \" otherHigh=\"+otherHigh+ \" ourHighest=\" + ourHighest + \" otherHighest=\" + otherHighest);\n\n      // we had (or already requested) all the updates referenced by the replica\n\n      // If we requested updates from another replica, we can't compare fingerprints yet with this replica, we need to defer\n      if (doFingerprint) {\n        sreq.doFingerprintComparison = true;\n      }\n\n      return true;\n    }\n    \n    if (toRequest.size() > maxUpdates) {\n      log.info(msg() + \" Failing due to needing too many updates:\" + maxUpdates);\n      return false;\n    }\n\n    return requestUpdates(srsp, toRequest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#handleVersions(ShardResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#handleVersions(ShardResponse).mjava","sourceNew":"  private boolean handleVersions(ShardResponse srsp) {\n    // we retrieved the last N updates from the replica\n    List<Long> otherVersions = (List<Long>)srsp.getSolrResponse().getResponse().get(\"versions\");\n    // TODO: how to handle short lists?\n\n    SyncShardRequest sreq = (SyncShardRequest) srsp.getShardRequest();\n    sreq.reportedVersions =  otherVersions;\n\n    Object fingerprint = srsp.getSolrResponse().getResponse().get(\"fingerprint\");\n\n    log.info(msg() + \" Received \" + otherVersions.size() + \" versions from \" + sreq.shards[0] + \" fingerprint:\" + fingerprint );\n    if (fingerprint != null) {\n      sreq.fingerprint = IndexFingerprint.fromObject(fingerprint);\n    }\n\n    if (otherVersions.size() == 0) {\n      return getNoVersionsIsSuccess; \n    }\n    \n    boolean completeList = otherVersions.size() < nUpdates;  // do we have their complete list of updates?\n\n    Collections.sort(otherVersions, absComparator);\n\n    if (debug) {\n      log.debug(msg() + \" sorted versions from \" + sreq.shards[0] + \" = \" + otherVersions);\n    }\n    \n    long otherHigh = percentile(otherVersions, .2f);\n    long otherLow = percentile(otherVersions, .8f);\n    long otherHighest = otherVersions.get(0);\n\n    if (ourHighThreshold < otherLow) {\n      // Small overlap between version windows and ours is older\n      // This means that we might miss updates if we attempted to use this method.\n      // Since there exists just one replica that is so much newer, we must\n      // fail the sync.\n      log.info(msg() + \" Our versions are too old. ourHighThreshold=\"+ourHighThreshold + \" otherLowThreshold=\"+otherLow + \" ourHighest=\" + ourHighest + \" otherHighest=\" + otherHighest);\n      return false;\n    }\n\n    if (ourLowThreshold > otherHigh) {\n      // Small overlap between windows and ours is newer.\n      // Using this list to sync would result in requesting/replaying results we don't need\n      // and possibly bringing deleted docs back to life.\n      log.info(msg() + \" Our versions are newer. ourLowThreshold=\"+ourLowThreshold + \" otherHigh=\"+otherHigh+ \" ourHighest=\" + ourHighest + \" otherHighest=\" + otherHighest);\n\n      // Because our versions are newer, IndexFingerprint with the remote would not match us.\n      // We return true on our side, but the remote peersync with us should fail.\n      return true;\n    }\n    \n    if(core.getSolrConfig().useRangeVersionsForPeerSync && canHandleVersionRanges(sreq.shards[0])) {\n      return handleVersionsWithRanges(srsp, otherVersions, sreq, completeList, otherHigh, otherHighest);\n    } else {\n      return handleIndividualVersions(srsp, otherVersions, sreq, completeList, otherHigh, otherHighest);\n    }\n  }\n\n","sourceOld":"  private boolean handleVersions(ShardResponse srsp) {\n    // we retrieved the last N updates from the replica\n    List<Long> otherVersions = (List<Long>)srsp.getSolrResponse().getResponse().get(\"versions\");\n    // TODO: how to handle short lists?\n\n    SyncShardRequest sreq = (SyncShardRequest) srsp.getShardRequest();\n    sreq.reportedVersions =  otherVersions;\n\n    Object fingerprint = srsp.getSolrResponse().getResponse().get(\"fingerprint\");\n\n    log.info(msg() + \" Received \" + otherVersions.size() + \" versions from \" + sreq.shards[0] + \" fingerprint:\" + fingerprint );\n    if (fingerprint != null) {\n      sreq.fingerprint = IndexFingerprint.fromObject(fingerprint);\n    }\n\n    if (otherVersions.size() == 0) {\n      return getNoVersionsIsSuccess; \n    }\n    \n    boolean completeList = otherVersions.size() < nUpdates;  // do we have their complete list of updates?\n\n    Collections.sort(otherVersions, absComparator);\n\n    if (debug) {\n      log.debug(msg() + \" sorted versions from \" + sreq.shards[0] + \" = \" + otherVersions);\n    }\n    \n    long otherHigh = percentile(otherVersions, .2f);\n    long otherLow = percentile(otherVersions, .8f);\n    long otherHighest = otherVersions.get(0);\n\n    if (ourHighThreshold < otherLow) {\n      // Small overlap between version windows and ours is older\n      // This means that we might miss updates if we attempted to use this method.\n      // Since there exists just one replica that is so much newer, we must\n      // fail the sync.\n      log.info(msg() + \" Our versions are too old. ourHighThreshold=\"+ourHighThreshold + \" otherLowThreshold=\"+otherLow + \" ourHighest=\" + ourHighest + \" otherHighest=\" + otherHighest);\n      return false;\n    }\n\n    if (ourLowThreshold > otherHigh) {\n      // Small overlap between windows and ours is newer.\n      // Using this list to sync would result in requesting/replaying results we don't need\n      // and possibly bringing deleted docs back to life.\n      log.info(msg() + \" Our versions are newer. ourLowThreshold=\"+ourLowThreshold + \" otherHigh=\"+otherHigh+ \" ourHighest=\" + ourHighest + \" otherHighest=\" + otherHighest);\n\n      // Because our versions are newer, IndexFingerprint with the remote would not match us.\n      // We return true on our side, but the remote peersync with us should fail.\n      return true;\n    }\n    \n    List<Long> toRequest = new ArrayList<>();\n    for (Long otherVersion : otherVersions) {\n      // stop when the entries get old enough that reorders may lead us to see updates we don't need\n      if (!completeList && Math.abs(otherVersion) < ourLowThreshold) break;\n\n      if (ourUpdateSet.contains(otherVersion) || requestedUpdateSet.contains(otherVersion)) {\n        // we either have this update, or already requested it\n        // TODO: what if the shard we previously requested this from returns failure (because it goes\n        // down)\n        continue;\n      }\n\n      toRequest.add(otherVersion);\n      requestedUpdateSet.add(otherVersion);\n    }\n\n    sreq.requestedUpdates = toRequest;\n    \n    if (toRequest.isEmpty()) {\n      log.info(msg() + \" No additional versions requested. ourLowThreshold=\"+ourLowThreshold + \" otherHigh=\"+otherHigh+ \" ourHighest=\" + ourHighest + \" otherHighest=\" + otherHighest);\n\n      // we had (or already requested) all the updates referenced by the replica\n\n      // If we requested updates from another replica, we can't compare fingerprints yet with this replica, we need to defer\n      if (doFingerprint) {\n        sreq.doFingerprintComparison = true;\n      }\n\n      return true;\n    }\n    \n    if (toRequest.size() > maxUpdates) {\n      log.info(msg() + \" Failing due to needing too many updates:\" + maxUpdates);\n      return false;\n    }\n\n    return requestUpdates(srsp, toRequest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7","date":1529486762,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#handleVersions(ShardResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#handleVersions(ShardResponse).mjava","sourceNew":"  private boolean handleVersions(ShardResponse srsp) {\n    // we retrieved the last N updates from the replica\n    List<Long> otherVersions = (List<Long>)srsp.getSolrResponse().getResponse().get(\"versions\");\n    // TODO: how to handle short lists?\n\n    SyncShardRequest sreq = (SyncShardRequest) srsp.getShardRequest();\n    Object fingerprint = srsp.getSolrResponse().getResponse().get(\"fingerprint\");\n\n    log.info(msg() + \" Received \" + otherVersions.size() + \" versions from \" + sreq.shards[0] + \" fingerprint:\" + fingerprint );\n    if (fingerprint != null) {\n      sreq.fingerprint = IndexFingerprint.fromObject(fingerprint);\n    }\n\n    if (otherVersions.size() == 0) {\n      // when sync with other replicas, they may not contains any updates\n      return true;\n    }\n    \n    MissedUpdatesRequest updatesRequest = missedUpdatesFinder.find(\n        otherVersions, sreq.shards[0],\n        () -> core.getSolrConfig().useRangeVersionsForPeerSync && canHandleVersionRanges(sreq.shards[0]));\n\n    if (updatesRequest == MissedUpdatesRequest.ALREADY_IN_SYNC) {\n      return true;\n    } else if (updatesRequest == MissedUpdatesRequest.UNABLE_TO_SYNC) {\n      return false;\n    } else if (updatesRequest == MissedUpdatesRequest.EMPTY) {\n      // If we requested updates from another replica, we can't compare fingerprints yet with this replica, we need to defer\n      if (doFingerprint) {\n        sreq.doFingerprintComparison = true;\n      }\n      return true;\n    }\n\n    sreq.totalRequestedUpdates = updatesRequest.totalRequestedUpdates;\n    return requestUpdates(srsp, updatesRequest.versionsAndRanges, updatesRequest.totalRequestedUpdates);\n  }\n\n","sourceOld":"  private boolean handleVersions(ShardResponse srsp) {\n    // we retrieved the last N updates from the replica\n    List<Long> otherVersions = (List<Long>)srsp.getSolrResponse().getResponse().get(\"versions\");\n    // TODO: how to handle short lists?\n\n    SyncShardRequest sreq = (SyncShardRequest) srsp.getShardRequest();\n    sreq.reportedVersions =  otherVersions;\n\n    Object fingerprint = srsp.getSolrResponse().getResponse().get(\"fingerprint\");\n\n    log.info(msg() + \" Received \" + otherVersions.size() + \" versions from \" + sreq.shards[0] + \" fingerprint:\" + fingerprint );\n    if (fingerprint != null) {\n      sreq.fingerprint = IndexFingerprint.fromObject(fingerprint);\n    }\n\n    if (otherVersions.size() == 0) {\n      return getNoVersionsIsSuccess; \n    }\n    \n    boolean completeList = otherVersions.size() < nUpdates;  // do we have their complete list of updates?\n\n    Collections.sort(otherVersions, absComparator);\n\n    if (debug) {\n      log.debug(msg() + \" sorted versions from \" + sreq.shards[0] + \" = \" + otherVersions);\n    }\n    \n    long otherHigh = percentile(otherVersions, .2f);\n    long otherLow = percentile(otherVersions, .8f);\n    long otherHighest = otherVersions.get(0);\n\n    if (ourHighThreshold < otherLow) {\n      // Small overlap between version windows and ours is older\n      // This means that we might miss updates if we attempted to use this method.\n      // Since there exists just one replica that is so much newer, we must\n      // fail the sync.\n      log.info(msg() + \" Our versions are too old. ourHighThreshold=\"+ourHighThreshold + \" otherLowThreshold=\"+otherLow + \" ourHighest=\" + ourHighest + \" otherHighest=\" + otherHighest);\n      return false;\n    }\n\n    if (ourLowThreshold > otherHigh) {\n      // Small overlap between windows and ours is newer.\n      // Using this list to sync would result in requesting/replaying results we don't need\n      // and possibly bringing deleted docs back to life.\n      log.info(msg() + \" Our versions are newer. ourLowThreshold=\"+ourLowThreshold + \" otherHigh=\"+otherHigh+ \" ourHighest=\" + ourHighest + \" otherHighest=\" + otherHighest);\n\n      // Because our versions are newer, IndexFingerprint with the remote would not match us.\n      // We return true on our side, but the remote peersync with us should fail.\n      return true;\n    }\n    \n    if(core.getSolrConfig().useRangeVersionsForPeerSync && canHandleVersionRanges(sreq.shards[0])) {\n      return handleVersionsWithRanges(srsp, otherVersions, sreq, completeList, otherHigh, otherHighest);\n    } else {\n      return handleIndividualVersions(srsp, otherVersions, sreq, completeList, otherHigh, otherHighest);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#handleVersions(ShardResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#handleVersions(ShardResponse).mjava","sourceNew":"  private boolean handleVersions(ShardResponse srsp) {\n    // we retrieved the last N updates from the replica\n    List<Long> otherVersions = (List<Long>)srsp.getSolrResponse().getResponse().get(\"versions\");\n    // TODO: how to handle short lists?\n\n    SyncShardRequest sreq = (SyncShardRequest) srsp.getShardRequest();\n    Object fingerprint = srsp.getSolrResponse().getResponse().get(\"fingerprint\");\n\n    log.info(msg() + \" Received \" + otherVersions.size() + \" versions from \" + sreq.shards[0] + \" fingerprint:\" + fingerprint );\n    if (fingerprint != null) {\n      sreq.fingerprint = IndexFingerprint.fromObject(fingerprint);\n    }\n\n    if (otherVersions.size() == 0) {\n      // when sync with other replicas, they may not contains any updates\n      return true;\n    }\n    \n    MissedUpdatesRequest updatesRequest = missedUpdatesFinder.find(\n        otherVersions, sreq.shards[0],\n        () -> core.getSolrConfig().useRangeVersionsForPeerSync && canHandleVersionRanges(sreq.shards[0]));\n\n    if (updatesRequest == MissedUpdatesRequest.ALREADY_IN_SYNC) {\n      return true;\n    } else if (updatesRequest == MissedUpdatesRequest.UNABLE_TO_SYNC) {\n      return false;\n    } else if (updatesRequest == MissedUpdatesRequest.EMPTY) {\n      // If we requested updates from another replica, we can't compare fingerprints yet with this replica, we need to defer\n      if (doFingerprint) {\n        sreq.doFingerprintComparison = true;\n      }\n      return true;\n    }\n\n    sreq.totalRequestedUpdates = updatesRequest.totalRequestedUpdates;\n    return requestUpdates(srsp, updatesRequest.versionsAndRanges, updatesRequest.totalRequestedUpdates);\n  }\n\n","sourceOld":"  private boolean handleVersions(ShardResponse srsp) {\n    // we retrieved the last N updates from the replica\n    List<Long> otherVersions = (List<Long>)srsp.getSolrResponse().getResponse().get(\"versions\");\n    // TODO: how to handle short lists?\n\n    SyncShardRequest sreq = (SyncShardRequest) srsp.getShardRequest();\n    sreq.reportedVersions =  otherVersions;\n\n    Object fingerprint = srsp.getSolrResponse().getResponse().get(\"fingerprint\");\n\n    log.info(msg() + \" Received \" + otherVersions.size() + \" versions from \" + sreq.shards[0] + \" fingerprint:\" + fingerprint );\n    if (fingerprint != null) {\n      sreq.fingerprint = IndexFingerprint.fromObject(fingerprint);\n    }\n\n    if (otherVersions.size() == 0) {\n      return getNoVersionsIsSuccess; \n    }\n    \n    boolean completeList = otherVersions.size() < nUpdates;  // do we have their complete list of updates?\n\n    Collections.sort(otherVersions, absComparator);\n\n    if (debug) {\n      log.debug(msg() + \" sorted versions from \" + sreq.shards[0] + \" = \" + otherVersions);\n    }\n    \n    long otherHigh = percentile(otherVersions, .2f);\n    long otherLow = percentile(otherVersions, .8f);\n    long otherHighest = otherVersions.get(0);\n\n    if (ourHighThreshold < otherLow) {\n      // Small overlap between version windows and ours is older\n      // This means that we might miss updates if we attempted to use this method.\n      // Since there exists just one replica that is so much newer, we must\n      // fail the sync.\n      log.info(msg() + \" Our versions are too old. ourHighThreshold=\"+ourHighThreshold + \" otherLowThreshold=\"+otherLow + \" ourHighest=\" + ourHighest + \" otherHighest=\" + otherHighest);\n      return false;\n    }\n\n    if (ourLowThreshold > otherHigh) {\n      // Small overlap between windows and ours is newer.\n      // Using this list to sync would result in requesting/replaying results we don't need\n      // and possibly bringing deleted docs back to life.\n      log.info(msg() + \" Our versions are newer. ourLowThreshold=\"+ourLowThreshold + \" otherHigh=\"+otherHigh+ \" ourHighest=\" + ourHighest + \" otherHighest=\" + otherHighest);\n\n      // Because our versions are newer, IndexFingerprint with the remote would not match us.\n      // We return true on our side, but the remote peersync with us should fail.\n      return true;\n    }\n    \n    if(core.getSolrConfig().useRangeVersionsForPeerSync && canHandleVersionRanges(sreq.shards[0])) {\n      return handleVersionsWithRanges(srsp, otherVersions, sreq, completeList, otherHigh, otherHighest);\n    } else {\n      return handleIndividualVersions(srsp, otherVersions, sreq, completeList, otherHigh, otherHighest);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#handleVersions(ShardResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#handleVersions(ShardResponse).mjava","sourceNew":"  private boolean handleVersions(ShardResponse srsp) {\n    // we retrieved the last N updates from the replica\n    List<Long> otherVersions = (List<Long>)srsp.getSolrResponse().getResponse().get(\"versions\");\n    // TODO: how to handle short lists?\n\n    SyncShardRequest sreq = (SyncShardRequest) srsp.getShardRequest();\n    Object fingerprint = srsp.getSolrResponse().getResponse().get(\"fingerprint\");\n\n    log.info(msg() + \" Received \" + otherVersions.size() + \" versions from \" + sreq.shards[0] + \" fingerprint:\" + fingerprint );\n    if (fingerprint != null) {\n      sreq.fingerprint = IndexFingerprint.fromObject(fingerprint);\n    }\n\n    if (otherVersions.size() == 0) {\n      // when sync with other replicas, they may not contains any updates\n      return true;\n    }\n    \n    MissedUpdatesRequest updatesRequest = missedUpdatesFinder.find(\n        otherVersions, sreq.shards[0],\n        () -> core.getSolrConfig().useRangeVersionsForPeerSync && canHandleVersionRanges(sreq.shards[0]));\n\n    if (updatesRequest == MissedUpdatesRequest.ALREADY_IN_SYNC) {\n      return true;\n    } else if (updatesRequest == MissedUpdatesRequest.UNABLE_TO_SYNC) {\n      return false;\n    } else if (updatesRequest == MissedUpdatesRequest.EMPTY) {\n      // If we requested updates from another replica, we can't compare fingerprints yet with this replica, we need to defer\n      if (doFingerprint) {\n        sreq.doFingerprintComparison = true;\n      }\n      return true;\n    }\n\n    sreq.totalRequestedUpdates = updatesRequest.totalRequestedUpdates;\n    return requestUpdates(srsp, updatesRequest.versionsAndRanges, updatesRequest.totalRequestedUpdates);\n  }\n\n","sourceOld":"  private boolean handleVersions(ShardResponse srsp) {\n    // we retrieved the last N updates from the replica\n    List<Long> otherVersions = (List<Long>)srsp.getSolrResponse().getResponse().get(\"versions\");\n    // TODO: how to handle short lists?\n\n    SyncShardRequest sreq = (SyncShardRequest) srsp.getShardRequest();\n    sreq.reportedVersions =  otherVersions;\n\n    Object fingerprint = srsp.getSolrResponse().getResponse().get(\"fingerprint\");\n\n    log.info(msg() + \" Received \" + otherVersions.size() + \" versions from \" + sreq.shards[0] + \" fingerprint:\" + fingerprint );\n    if (fingerprint != null) {\n      sreq.fingerprint = IndexFingerprint.fromObject(fingerprint);\n    }\n\n    if (otherVersions.size() == 0) {\n      return getNoVersionsIsSuccess; \n    }\n    \n    boolean completeList = otherVersions.size() < nUpdates;  // do we have their complete list of updates?\n\n    Collections.sort(otherVersions, absComparator);\n\n    if (debug) {\n      log.debug(msg() + \" sorted versions from \" + sreq.shards[0] + \" = \" + otherVersions);\n    }\n    \n    long otherHigh = percentile(otherVersions, .2f);\n    long otherLow = percentile(otherVersions, .8f);\n    long otherHighest = otherVersions.get(0);\n\n    if (ourHighThreshold < otherLow) {\n      // Small overlap between version windows and ours is older\n      // This means that we might miss updates if we attempted to use this method.\n      // Since there exists just one replica that is so much newer, we must\n      // fail the sync.\n      log.info(msg() + \" Our versions are too old. ourHighThreshold=\"+ourHighThreshold + \" otherLowThreshold=\"+otherLow + \" ourHighest=\" + ourHighest + \" otherHighest=\" + otherHighest);\n      return false;\n    }\n\n    if (ourLowThreshold > otherHigh) {\n      // Small overlap between windows and ours is newer.\n      // Using this list to sync would result in requesting/replaying results we don't need\n      // and possibly bringing deleted docs back to life.\n      log.info(msg() + \" Our versions are newer. ourLowThreshold=\"+ourLowThreshold + \" otherHigh=\"+otherHigh+ \" ourHighest=\" + ourHighest + \" otherHighest=\" + otherHighest);\n\n      // Because our versions are newer, IndexFingerprint with the remote would not match us.\n      // We return true on our side, but the remote peersync with us should fail.\n      return true;\n    }\n    \n    if(core.getSolrConfig().useRangeVersionsForPeerSync && canHandleVersionRanges(sreq.shards[0])) {\n      return handleVersionsWithRanges(srsp, otherVersions, sreq, completeList, otherHigh, otherHighest);\n    } else {\n      return handleIndividualVersions(srsp, otherVersions, sreq, completeList, otherHigh, otherHighest);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"740d649f013f07efbeb73ca854f106c60166e7c0","date":1587431295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#handleVersions(ShardResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#handleVersions(ShardResponse).mjava","sourceNew":"  private boolean handleVersions(ShardResponse srsp) {\n    // we retrieved the last N updates from the replica\n    List<Long> otherVersions = (List<Long>)srsp.getSolrResponse().getResponse().get(\"versions\");\n    // TODO: how to handle short lists?\n\n    SyncShardRequest sreq = (SyncShardRequest) srsp.getShardRequest();\n    Object fingerprint = srsp.getSolrResponse().getResponse().get(\"fingerprint\");\n\n    if (log.isInfoEnabled()) {\n      log.info(\"{} Received {} versions from {} fingerprint:{}\", msg(), otherVersions.size(), sreq.shards[0], fingerprint);\n    }\n    if (fingerprint != null) {\n      sreq.fingerprint = IndexFingerprint.fromObject(fingerprint);\n    }\n\n    if (otherVersions.size() == 0) {\n      // when sync with other replicas, they may not contains any updates\n      return true;\n    }\n    \n    MissedUpdatesRequest updatesRequest = missedUpdatesFinder.find(\n        otherVersions, sreq.shards[0],\n        () -> core.getSolrConfig().useRangeVersionsForPeerSync && canHandleVersionRanges(sreq.shards[0]));\n\n    if (updatesRequest == MissedUpdatesRequest.ALREADY_IN_SYNC) {\n      return true;\n    } else if (updatesRequest == MissedUpdatesRequest.UNABLE_TO_SYNC) {\n      return false;\n    } else if (updatesRequest == MissedUpdatesRequest.EMPTY) {\n      // If we requested updates from another replica, we can't compare fingerprints yet with this replica, we need to defer\n      if (doFingerprint) {\n        sreq.doFingerprintComparison = true;\n      }\n      return true;\n    }\n\n    sreq.totalRequestedUpdates = updatesRequest.totalRequestedUpdates;\n    return requestUpdates(srsp, updatesRequest.versionsAndRanges, updatesRequest.totalRequestedUpdates);\n  }\n\n","sourceOld":"  private boolean handleVersions(ShardResponse srsp) {\n    // we retrieved the last N updates from the replica\n    List<Long> otherVersions = (List<Long>)srsp.getSolrResponse().getResponse().get(\"versions\");\n    // TODO: how to handle short lists?\n\n    SyncShardRequest sreq = (SyncShardRequest) srsp.getShardRequest();\n    Object fingerprint = srsp.getSolrResponse().getResponse().get(\"fingerprint\");\n\n    log.info(msg() + \" Received \" + otherVersions.size() + \" versions from \" + sreq.shards[0] + \" fingerprint:\" + fingerprint );\n    if (fingerprint != null) {\n      sreq.fingerprint = IndexFingerprint.fromObject(fingerprint);\n    }\n\n    if (otherVersions.size() == 0) {\n      // when sync with other replicas, they may not contains any updates\n      return true;\n    }\n    \n    MissedUpdatesRequest updatesRequest = missedUpdatesFinder.find(\n        otherVersions, sreq.shards[0],\n        () -> core.getSolrConfig().useRangeVersionsForPeerSync && canHandleVersionRanges(sreq.shards[0]));\n\n    if (updatesRequest == MissedUpdatesRequest.ALREADY_IN_SYNC) {\n      return true;\n    } else if (updatesRequest == MissedUpdatesRequest.UNABLE_TO_SYNC) {\n      return false;\n    } else if (updatesRequest == MissedUpdatesRequest.EMPTY) {\n      // If we requested updates from another replica, we can't compare fingerprints yet with this replica, we need to defer\n      if (doFingerprint) {\n        sreq.doFingerprintComparison = true;\n      }\n      return true;\n    }\n\n    sreq.totalRequestedUpdates = updatesRequest.totalRequestedUpdates;\n    return requestUpdates(srsp, updatesRequest.versionsAndRanges, updatesRequest.totalRequestedUpdates);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"018a36ff4088cb91ab12cbe44f696d81d1fadd77","date":1591657414,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#handleVersions(ShardResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#handleVersions(ShardResponse).mjava","sourceNew":"  private boolean handleVersions(ShardResponse srsp) {\n    // we retrieved the last N updates from the replica\n    @SuppressWarnings({\"unchecked\"})\n    List<Long> otherVersions = (List<Long>)srsp.getSolrResponse().getResponse().get(\"versions\");\n    // TODO: how to handle short lists?\n\n    SyncShardRequest sreq = (SyncShardRequest) srsp.getShardRequest();\n    Object fingerprint = srsp.getSolrResponse().getResponse().get(\"fingerprint\");\n\n    if (log.isInfoEnabled()) {\n      log.info(\"{} Received {} versions from {} fingerprint:{}\", msg(), otherVersions.size(), sreq.shards[0], fingerprint);\n    }\n    if (fingerprint != null) {\n      sreq.fingerprint = IndexFingerprint.fromObject(fingerprint);\n    }\n\n    if (otherVersions.size() == 0) {\n      // when sync with other replicas, they may not contains any updates\n      return true;\n    }\n    \n    MissedUpdatesRequest updatesRequest = missedUpdatesFinder.find(\n        otherVersions, sreq.shards[0],\n        () -> core.getSolrConfig().useRangeVersionsForPeerSync && canHandleVersionRanges(sreq.shards[0]));\n\n    if (updatesRequest == MissedUpdatesRequest.ALREADY_IN_SYNC) {\n      return true;\n    } else if (updatesRequest == MissedUpdatesRequest.UNABLE_TO_SYNC) {\n      return false;\n    } else if (updatesRequest == MissedUpdatesRequest.EMPTY) {\n      // If we requested updates from another replica, we can't compare fingerprints yet with this replica, we need to defer\n      if (doFingerprint) {\n        sreq.doFingerprintComparison = true;\n      }\n      return true;\n    }\n\n    sreq.totalRequestedUpdates = updatesRequest.totalRequestedUpdates;\n    return requestUpdates(srsp, updatesRequest.versionsAndRanges, updatesRequest.totalRequestedUpdates);\n  }\n\n","sourceOld":"  private boolean handleVersions(ShardResponse srsp) {\n    // we retrieved the last N updates from the replica\n    List<Long> otherVersions = (List<Long>)srsp.getSolrResponse().getResponse().get(\"versions\");\n    // TODO: how to handle short lists?\n\n    SyncShardRequest sreq = (SyncShardRequest) srsp.getShardRequest();\n    Object fingerprint = srsp.getSolrResponse().getResponse().get(\"fingerprint\");\n\n    if (log.isInfoEnabled()) {\n      log.info(\"{} Received {} versions from {} fingerprint:{}\", msg(), otherVersions.size(), sreq.shards[0], fingerprint);\n    }\n    if (fingerprint != null) {\n      sreq.fingerprint = IndexFingerprint.fromObject(fingerprint);\n    }\n\n    if (otherVersions.size() == 0) {\n      // when sync with other replicas, they may not contains any updates\n      return true;\n    }\n    \n    MissedUpdatesRequest updatesRequest = missedUpdatesFinder.find(\n        otherVersions, sreq.shards[0],\n        () -> core.getSolrConfig().useRangeVersionsForPeerSync && canHandleVersionRanges(sreq.shards[0]));\n\n    if (updatesRequest == MissedUpdatesRequest.ALREADY_IN_SYNC) {\n      return true;\n    } else if (updatesRequest == MissedUpdatesRequest.UNABLE_TO_SYNC) {\n      return false;\n    } else if (updatesRequest == MissedUpdatesRequest.EMPTY) {\n      // If we requested updates from another replica, we can't compare fingerprints yet with this replica, we need to defer\n      if (doFingerprint) {\n        sreq.doFingerprintComparison = true;\n      }\n      return true;\n    }\n\n    sreq.totalRequestedUpdates = updatesRequest.totalRequestedUpdates;\n    return requestUpdates(srsp, updatesRequest.versionsAndRanges, updatesRequest.totalRequestedUpdates);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c38d3299f414132db022cec9d60b2dafc244a7c3","date":1597046674,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#handleVersions(ShardResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#handleVersions(ShardResponse).mjava","sourceNew":"  private boolean handleVersions(ShardResponse srsp) {\n    // we retrieved the last N updates from the replica\n    @SuppressWarnings({\"unchecked\"})\n    List<Long> otherVersions = (List<Long>)srsp.getSolrResponse().getResponse().get(\"versions\");\n    // TODO: how to handle short lists?\n\n    SyncShardRequest sreq = (SyncShardRequest) srsp.getShardRequest();\n    Object fingerprint = srsp.getSolrResponse().getResponse().get(\"fingerprint\");\n\n    if (log.isInfoEnabled()) {\n      log.info(\"{} Received {} versions from {} fingerprint:{}\", msg(), otherVersions.size(), sreq.shards[0], fingerprint);\n    }\n    if (fingerprint != null) {\n      sreq.fingerprint = IndexFingerprint.fromObject(fingerprint);\n    }\n\n    if (otherVersions.size() == 0) {\n      // when sync with other replicas, they may not contains any updates\n      return true;\n    }\n    \n    MissedUpdatesRequest updatesRequest = missedUpdatesFinder.find(\n        otherVersions, sreq.shards[0]);\n\n    if (updatesRequest == MissedUpdatesRequest.ALREADY_IN_SYNC) {\n      return true;\n    } else if (updatesRequest == MissedUpdatesRequest.UNABLE_TO_SYNC) {\n      return false;\n    } else if (updatesRequest == MissedUpdatesRequest.EMPTY) {\n      // If we requested updates from another replica, we can't compare fingerprints yet with this replica, we need to defer\n      if (doFingerprint) {\n        sreq.doFingerprintComparison = true;\n      }\n      return true;\n    }\n\n    sreq.totalRequestedUpdates = updatesRequest.totalRequestedUpdates;\n    return requestUpdates(srsp, updatesRequest.versionsAndRanges, updatesRequest.totalRequestedUpdates);\n  }\n\n","sourceOld":"  private boolean handleVersions(ShardResponse srsp) {\n    // we retrieved the last N updates from the replica\n    @SuppressWarnings({\"unchecked\"})\n    List<Long> otherVersions = (List<Long>)srsp.getSolrResponse().getResponse().get(\"versions\");\n    // TODO: how to handle short lists?\n\n    SyncShardRequest sreq = (SyncShardRequest) srsp.getShardRequest();\n    Object fingerprint = srsp.getSolrResponse().getResponse().get(\"fingerprint\");\n\n    if (log.isInfoEnabled()) {\n      log.info(\"{} Received {} versions from {} fingerprint:{}\", msg(), otherVersions.size(), sreq.shards[0], fingerprint);\n    }\n    if (fingerprint != null) {\n      sreq.fingerprint = IndexFingerprint.fromObject(fingerprint);\n    }\n\n    if (otherVersions.size() == 0) {\n      // when sync with other replicas, they may not contains any updates\n      return true;\n    }\n    \n    MissedUpdatesRequest updatesRequest = missedUpdatesFinder.find(\n        otherVersions, sreq.shards[0],\n        () -> core.getSolrConfig().useRangeVersionsForPeerSync && canHandleVersionRanges(sreq.shards[0]));\n\n    if (updatesRequest == MissedUpdatesRequest.ALREADY_IN_SYNC) {\n      return true;\n    } else if (updatesRequest == MissedUpdatesRequest.UNABLE_TO_SYNC) {\n      return false;\n    } else if (updatesRequest == MissedUpdatesRequest.EMPTY) {\n      // If we requested updates from another replica, we can't compare fingerprints yet with this replica, we need to defer\n      if (doFingerprint) {\n        sreq.doFingerprintComparison = true;\n      }\n      return true;\n    }\n\n    sreq.totalRequestedUpdates = updatesRequest.totalRequestedUpdates;\n    return requestUpdates(srsp, updatesRequest.versionsAndRanges, updatesRequest.totalRequestedUpdates);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["1525b4dfbc0d413b8d7247da232009778e624836"],"5620d3cb34306ea5b7d016a832fbc964b74c2650":["1bef15745514a7a3142d641ff715dc096ff0f6c1"],"8381eb1cd44d2e0defb52130de3295a576ac1e7b":["979e22aa7c63c9dc651adf861610c7e444d45832","e511b092029d56e0d4e30204fba8509c1c2647b6"],"c38d3299f414132db022cec9d60b2dafc244a7c3":["018a36ff4088cb91ab12cbe44f696d81d1fadd77"],"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["740d649f013f07efbeb73ca854f106c60166e7c0"],"740d649f013f07efbeb73ca854f106c60166e7c0":["ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7"],"1bef15745514a7a3142d641ff715dc096ff0f6c1":["414ae8f6c01f0259255c532b2bd51b03000c2480"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","979e22aa7c63c9dc651adf861610c7e444d45832"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["979e22aa7c63c9dc651adf861610c7e444d45832","8381eb1cd44d2e0defb52130de3295a576ac1e7b"],"e511b092029d56e0d4e30204fba8509c1c2647b6":["979e22aa7c63c9dc651adf861610c7e444d45832"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["8381eb1cd44d2e0defb52130de3295a576ac1e7b","ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"979e22aa7c63c9dc651adf861610c7e444d45832":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b1704c078ec59838c9d95d5bf5738b393b537494":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","979e22aa7c63c9dc651adf861610c7e444d45832"],"f2126b84bd093fa3d921582a109a0ee578c28126":["5620d3cb34306ea5b7d016a832fbc964b74c2650","1525b4dfbc0d413b8d7247da232009778e624836"],"1525b4dfbc0d413b8d7247da232009778e624836":["5620d3cb34306ea5b7d016a832fbc964b74c2650"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c38d3299f414132db022cec9d60b2dafc244a7c3"],"ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7":["8381eb1cd44d2e0defb52130de3295a576ac1e7b"],"414ae8f6c01f0259255c532b2bd51b03000c2480":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["8381eb1cd44d2e0defb52130de3295a576ac1e7b","ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","979e22aa7c63c9dc651adf861610c7e444d45832","b1704c078ec59838c9d95d5bf5738b393b537494"],"5620d3cb34306ea5b7d016a832fbc964b74c2650":["f2126b84bd093fa3d921582a109a0ee578c28126","1525b4dfbc0d413b8d7247da232009778e624836"],"8381eb1cd44d2e0defb52130de3295a576ac1e7b":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"c38d3299f414132db022cec9d60b2dafc244a7c3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["c38d3299f414132db022cec9d60b2dafc244a7c3"],"740d649f013f07efbeb73ca854f106c60166e7c0":["018a36ff4088cb91ab12cbe44f696d81d1fadd77"],"1bef15745514a7a3142d641ff715dc096ff0f6c1":["5620d3cb34306ea5b7d016a832fbc964b74c2650"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"e511b092029d56e0d4e30204fba8509c1c2647b6":["8381eb1cd44d2e0defb52130de3295a576ac1e7b"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"979e22aa7c63c9dc651adf861610c7e444d45832":["8381eb1cd44d2e0defb52130de3295a576ac1e7b","1e6acbaae7af722f17204ceccf0f7db5753eccf3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e511b092029d56e0d4e30204fba8509c1c2647b6","b1704c078ec59838c9d95d5bf5738b393b537494"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","414ae8f6c01f0259255c532b2bd51b03000c2480"],"b1704c078ec59838c9d95d5bf5738b393b537494":[],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"1525b4dfbc0d413b8d7247da232009778e624836":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","f2126b84bd093fa3d921582a109a0ee578c28126"],"ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7":["740d649f013f07efbeb73ca854f106c60166e7c0","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"414ae8f6c01f0259255c532b2bd51b03000c2480":["1bef15745514a7a3142d641ff715dc096ff0f6c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","0d22ac6a4146774c1bc8400160fc0b6150294e92","b1704c078ec59838c9d95d5bf5738b393b537494","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}