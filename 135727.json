{"path":"solr/core/src/test/org/apache/solr/rest/TestManagedResourceStorage#doStorageTests(SolrResourceLoader,StorageIO).mjava","commits":[{"id":"afb6bf9ce227ab6aac5068547e286ecc958b8b9d","date":1394661169,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/TestManagedResourceStorage#doStorageTests(SolrResourceLoader,StorageIO).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Called from tests for each storage type to run creation and update tests\n   * on a persisted managed resource.\n   */\n  @SuppressWarnings(\"unchecked\")\n  private void doStorageTests(SolrResourceLoader loader, StorageIO storageIO) throws Exception {\n    String resourceId = \"/test/foo\";\n    \n    JsonStorage jsonStorage = new JsonStorage(storageIO, loader);\n    \n    Map<String,String> managedInitArgs = new HashMap<>();\n    managedInitArgs.put(\"ignoreCase\",\"true\");\n    managedInitArgs.put(\"dontIgnoreCase\", \"false\");\n    \n    List<String> managedList = new ArrayList<>(); // we need a mutable List for this test\n    managedList.addAll(Arrays.asList(\"a\",\"b\",\"c\",\"d\",\"e\"));\n    \n    Map<String,Object> toStore = new HashMap<>();\n    toStore.put(ManagedResource.INIT_ARGS_JSON_FIELD, managedInitArgs);\n    toStore.put(ManagedResource.MANAGED_JSON_LIST_FIELD, managedList);\n    \n    jsonStorage.store(resourceId, toStore);\n    \n    String storedResourceId = jsonStorage.getStoredResourceId(resourceId);\n    assertTrue(storedResourceId+\" file not found!\", storageIO.exists(storedResourceId));\n    \n    Object fromStorage = jsonStorage.load(resourceId);\n    assertNotNull(fromStorage);    \n    \n    Map<String,Object> storedMap = (Map<String,Object>)fromStorage;\n    Map<String,Object> storedArgs = (Map<String,Object>)storedMap.get(ManagedResource.INIT_ARGS_JSON_FIELD);\n    assertNotNull(storedArgs);\n    assertEquals(\"true\", storedArgs.get(\"ignoreCase\"));\n    List<String> storedList = (List<String>)storedMap.get(ManagedResource.MANAGED_JSON_LIST_FIELD);\n    assertNotNull(storedList);\n    assertTrue(storedList.size() == managedList.size());\n    assertTrue(storedList.contains(\"a\"));    \n    \n    // now verify you can update existing data\n    managedInitArgs.put(\"anotherArg\", \"someValue\");\n    managedList.add(\"f\");\n    jsonStorage.store(resourceId, toStore);    \n    fromStorage = jsonStorage.load(resourceId);\n    assertNotNull(fromStorage);    \n    \n    storedMap = (Map<String,Object>)fromStorage;\n    storedArgs = (Map<String,Object>)storedMap.get(ManagedResource.INIT_ARGS_JSON_FIELD);\n    assertNotNull(storedArgs);\n    assertEquals(\"someValue\", storedArgs.get(\"anotherArg\"));\n    storedList = (List<String>)storedMap.get(ManagedResource.MANAGED_JSON_LIST_FIELD);\n    assertNotNull(storedList);\n    assertTrue(storedList.size() == managedList.size());\n    assertTrue(storedList.contains(\"e\"));        \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"afb6bf9ce227ab6aac5068547e286ecc958b8b9d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["afb6bf9ce227ab6aac5068547e286ecc958b8b9d"]},"commit2Childs":{"afb6bf9ce227ab6aac5068547e286ecc958b8b9d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["afb6bf9ce227ab6aac5068547e286ecc958b8b9d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}