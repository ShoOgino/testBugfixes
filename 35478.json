{"path":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdatesOrder().mjava","commits":[{"id":"06805da26538ed636bd89b10c2699cc3834032ae","date":1395132972,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdatesOrder().mjava","pathOld":"/dev/null","sourceNew":"  public void testUpdatesOrder() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"upd\", \"t1\", Store.NO));\n    doc.add(new StringField(\"upd\", \"t2\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"f1\", toBytes(1L)));\n    doc.add(new BinaryDocValuesField(\"f2\", toBytes(1L)));\n    writer.addDocument(doc);\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t1\"), \"f1\", toBytes(2L)); // update f1 to 2\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t1\"), \"f2\", toBytes(2L)); // update f2 to 2\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t2\"), \"f1\", toBytes(3L)); // update f1 to 3\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t2\"), \"f2\", toBytes(3L)); // update f2 to 3\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t1\"), \"f1\", toBytes(4L)); // update f1 to 4 (but not f2)\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    BytesRef scratch = new BytesRef();\n    assertEquals(4, getValue(reader.leaves().get(0).reader().getBinaryDocValues(\"f1\"), 0, scratch));\n    assertEquals(3, getValue(reader.leaves().get(0).reader().getBinaryDocValues(\"f2\"), 0, scratch));\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdatesOrder().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdatesOrder().mjava","sourceNew":"  public void testUpdatesOrder() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"upd\", \"t1\", Store.NO));\n    doc.add(new StringField(\"upd\", \"t2\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"f1\", toBytes(1L)));\n    doc.add(new BinaryDocValuesField(\"f2\", toBytes(1L)));\n    writer.addDocument(doc);\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t1\"), \"f1\", toBytes(2L)); // update f1 to 2\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t1\"), \"f2\", toBytes(2L)); // update f2 to 2\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t2\"), \"f1\", toBytes(3L)); // update f1 to 3\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t2\"), \"f2\", toBytes(3L)); // update f2 to 3\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t1\"), \"f1\", toBytes(4L)); // update f1 to 4 (but not f2)\n    writer.shutdown();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    BytesRef scratch = new BytesRef();\n    assertEquals(4, getValue(reader.leaves().get(0).reader().getBinaryDocValues(\"f1\"), 0, scratch));\n    assertEquals(3, getValue(reader.leaves().get(0).reader().getBinaryDocValues(\"f2\"), 0, scratch));\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  public void testUpdatesOrder() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"upd\", \"t1\", Store.NO));\n    doc.add(new StringField(\"upd\", \"t2\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"f1\", toBytes(1L)));\n    doc.add(new BinaryDocValuesField(\"f2\", toBytes(1L)));\n    writer.addDocument(doc);\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t1\"), \"f1\", toBytes(2L)); // update f1 to 2\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t1\"), \"f2\", toBytes(2L)); // update f2 to 2\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t2\"), \"f1\", toBytes(3L)); // update f1 to 3\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t2\"), \"f2\", toBytes(3L)); // update f2 to 3\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t1\"), \"f1\", toBytes(4L)); // update f1 to 4 (but not f2)\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    BytesRef scratch = new BytesRef();\n    assertEquals(4, getValue(reader.leaves().get(0).reader().getBinaryDocValues(\"f1\"), 0, scratch));\n    assertEquals(3, getValue(reader.leaves().get(0).reader().getBinaryDocValues(\"f2\"), 0, scratch));\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdatesOrder().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdatesOrder().mjava","sourceNew":"  public void testUpdatesOrder() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"upd\", \"t1\", Store.NO));\n    doc.add(new StringField(\"upd\", \"t2\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"f1\", toBytes(1L)));\n    doc.add(new BinaryDocValuesField(\"f2\", toBytes(1L)));\n    writer.addDocument(doc);\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t1\"), \"f1\", toBytes(2L)); // update f1 to 2\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t1\"), \"f2\", toBytes(2L)); // update f2 to 2\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t2\"), \"f1\", toBytes(3L)); // update f1 to 3\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t2\"), \"f2\", toBytes(3L)); // update f2 to 3\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t1\"), \"f1\", toBytes(4L)); // update f1 to 4 (but not f2)\n    writer.shutdown();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(4, getValue(reader.leaves().get(0).reader().getBinaryDocValues(\"f1\"), 0));\n    assertEquals(3, getValue(reader.leaves().get(0).reader().getBinaryDocValues(\"f2\"), 0));\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  public void testUpdatesOrder() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"upd\", \"t1\", Store.NO));\n    doc.add(new StringField(\"upd\", \"t2\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"f1\", toBytes(1L)));\n    doc.add(new BinaryDocValuesField(\"f2\", toBytes(1L)));\n    writer.addDocument(doc);\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t1\"), \"f1\", toBytes(2L)); // update f1 to 2\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t1\"), \"f2\", toBytes(2L)); // update f2 to 2\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t2\"), \"f1\", toBytes(3L)); // update f1 to 3\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t2\"), \"f2\", toBytes(3L)); // update f2 to 3\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t1\"), \"f1\", toBytes(4L)); // update f1 to 4 (but not f2)\n    writer.shutdown();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    BytesRef scratch = new BytesRef();\n    assertEquals(4, getValue(reader.leaves().get(0).reader().getBinaryDocValues(\"f1\"), 0, scratch));\n    assertEquals(3, getValue(reader.leaves().get(0).reader().getBinaryDocValues(\"f2\"), 0, scratch));\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdatesOrder().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdatesOrder().mjava","sourceNew":"  public void testUpdatesOrder() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"upd\", \"t1\", Store.NO));\n    doc.add(new StringField(\"upd\", \"t2\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"f1\", toBytes(1L)));\n    doc.add(new BinaryDocValuesField(\"f2\", toBytes(1L)));\n    writer.addDocument(doc);\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t1\"), \"f1\", toBytes(2L)); // update f1 to 2\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t1\"), \"f2\", toBytes(2L)); // update f2 to 2\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t2\"), \"f1\", toBytes(3L)); // update f1 to 3\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t2\"), \"f2\", toBytes(3L)); // update f2 to 3\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t1\"), \"f1\", toBytes(4L)); // update f1 to 4 (but not f2)\n    writer.shutdown();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(4, getValue(reader.leaves().get(0).reader().getBinaryDocValues(\"f1\"), 0));\n    assertEquals(3, getValue(reader.leaves().get(0).reader().getBinaryDocValues(\"f2\"), 0));\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  public void testUpdatesOrder() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"upd\", \"t1\", Store.NO));\n    doc.add(new StringField(\"upd\", \"t2\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"f1\", toBytes(1L)));\n    doc.add(new BinaryDocValuesField(\"f2\", toBytes(1L)));\n    writer.addDocument(doc);\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t1\"), \"f1\", toBytes(2L)); // update f1 to 2\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t1\"), \"f2\", toBytes(2L)); // update f2 to 2\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t2\"), \"f1\", toBytes(3L)); // update f1 to 3\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t2\"), \"f2\", toBytes(3L)); // update f2 to 3\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t1\"), \"f1\", toBytes(4L)); // update f1 to 4 (but not f2)\n    writer.shutdown();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(4, getValue(reader.leaves().get(0).reader().getBinaryDocValues(\"f1\"), 0));\n    assertEquals(3, getValue(reader.leaves().get(0).reader().getBinaryDocValues(\"f2\"), 0));\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdatesOrder().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdatesOrder().mjava","sourceNew":"  public void testUpdatesOrder() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"upd\", \"t1\", Store.NO));\n    doc.add(new StringField(\"upd\", \"t2\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"f1\", toBytes(1L)));\n    doc.add(new BinaryDocValuesField(\"f2\", toBytes(1L)));\n    writer.addDocument(doc);\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t1\"), \"f1\", toBytes(2L)); // update f1 to 2\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t1\"), \"f2\", toBytes(2L)); // update f2 to 2\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t2\"), \"f1\", toBytes(3L)); // update f1 to 3\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t2\"), \"f2\", toBytes(3L)); // update f2 to 3\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t1\"), \"f1\", toBytes(4L)); // update f1 to 4 (but not f2)\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(4, getValue(reader.leaves().get(0).reader().getBinaryDocValues(\"f1\"), 0));\n    assertEquals(3, getValue(reader.leaves().get(0).reader().getBinaryDocValues(\"f2\"), 0));\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  public void testUpdatesOrder() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"upd\", \"t1\", Store.NO));\n    doc.add(new StringField(\"upd\", \"t2\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"f1\", toBytes(1L)));\n    doc.add(new BinaryDocValuesField(\"f2\", toBytes(1L)));\n    writer.addDocument(doc);\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t1\"), \"f1\", toBytes(2L)); // update f1 to 2\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t1\"), \"f2\", toBytes(2L)); // update f2 to 2\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t2\"), \"f1\", toBytes(3L)); // update f1 to 3\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t2\"), \"f2\", toBytes(3L)); // update f2 to 3\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t1\"), \"f1\", toBytes(4L)); // update f1 to 4 (but not f2)\n    writer.shutdown();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(4, getValue(reader.leaves().get(0).reader().getBinaryDocValues(\"f1\"), 0));\n    assertEquals(3, getValue(reader.leaves().get(0).reader().getBinaryDocValues(\"f2\"), 0));\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdatesOrder().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdatesOrder().mjava","sourceNew":"  public void testUpdatesOrder() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"upd\", \"t1\", Store.NO));\n    doc.add(new StringField(\"upd\", \"t2\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"f1\", toBytes(1L)));\n    doc.add(new BinaryDocValuesField(\"f2\", toBytes(1L)));\n    writer.addDocument(doc);\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t1\"), \"f1\", toBytes(2L)); // update f1 to 2\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t1\"), \"f2\", toBytes(2L)); // update f2 to 2\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t2\"), \"f1\", toBytes(3L)); // update f1 to 3\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t2\"), \"f2\", toBytes(3L)); // update f2 to 3\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t1\"), \"f1\", toBytes(4L)); // update f1 to 4 (but not f2)\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    BinaryDocValues bdv = reader.leaves().get(0).reader().getBinaryDocValues(\"f1\");\n    assertEquals(0, bdv.nextDoc());\n    assertEquals(4, getValue(bdv));\n    bdv = reader.leaves().get(0).reader().getBinaryDocValues(\"f2\");\n    assertEquals(0, bdv.nextDoc());\n    assertEquals(3, getValue(bdv));\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  public void testUpdatesOrder() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"upd\", \"t1\", Store.NO));\n    doc.add(new StringField(\"upd\", \"t2\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"f1\", toBytes(1L)));\n    doc.add(new BinaryDocValuesField(\"f2\", toBytes(1L)));\n    writer.addDocument(doc);\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t1\"), \"f1\", toBytes(2L)); // update f1 to 2\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t1\"), \"f2\", toBytes(2L)); // update f2 to 2\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t2\"), \"f1\", toBytes(3L)); // update f1 to 3\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t2\"), \"f2\", toBytes(3L)); // update f2 to 3\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t1\"), \"f1\", toBytes(4L)); // update f1 to 4 (but not f2)\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(4, getValue(reader.leaves().get(0).reader().getBinaryDocValues(\"f1\"), 0));\n    assertEquals(3, getValue(reader.leaves().get(0).reader().getBinaryDocValues(\"f2\"), 0));\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdatesOrder().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdatesOrder().mjava","sourceNew":"  public void testUpdatesOrder() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"upd\", \"t1\", Store.NO));\n    doc.add(new StringField(\"upd\", \"t2\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"f1\", toBytes(1L)));\n    doc.add(new BinaryDocValuesField(\"f2\", toBytes(1L)));\n    writer.addDocument(doc);\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t1\"), \"f1\", toBytes(2L)); // update f1 to 2\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t1\"), \"f2\", toBytes(2L)); // update f2 to 2\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t2\"), \"f1\", toBytes(3L)); // update f1 to 3\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t2\"), \"f2\", toBytes(3L)); // update f2 to 3\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t1\"), \"f1\", toBytes(4L)); // update f1 to 4 (but not f2)\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    BinaryDocValues bdv = reader.leaves().get(0).reader().getBinaryDocValues(\"f1\");\n    assertEquals(0, bdv.nextDoc());\n    assertEquals(4, getValue(bdv));\n    bdv = reader.leaves().get(0).reader().getBinaryDocValues(\"f2\");\n    assertEquals(0, bdv.nextDoc());\n    assertEquals(3, getValue(bdv));\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  public void testUpdatesOrder() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"upd\", \"t1\", Store.NO));\n    doc.add(new StringField(\"upd\", \"t2\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"f1\", toBytes(1L)));\n    doc.add(new BinaryDocValuesField(\"f2\", toBytes(1L)));\n    writer.addDocument(doc);\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t1\"), \"f1\", toBytes(2L)); // update f1 to 2\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t1\"), \"f2\", toBytes(2L)); // update f2 to 2\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t2\"), \"f1\", toBytes(3L)); // update f1 to 3\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t2\"), \"f2\", toBytes(3L)); // update f2 to 3\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t1\"), \"f1\", toBytes(4L)); // update f1 to 4 (but not f2)\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(4, getValue(reader.leaves().get(0).reader().getBinaryDocValues(\"f1\"), 0));\n    assertEquals(3, getValue(reader.leaves().get(0).reader().getBinaryDocValues(\"f2\"), 0));\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdatesOrder().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdatesOrder().mjava","sourceNew":"  public void testUpdatesOrder() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"upd\", \"t1\", Store.NO));\n    doc.add(new StringField(\"upd\", \"t2\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"f1\", toBytes(1L)));\n    doc.add(new BinaryDocValuesField(\"f2\", toBytes(1L)));\n    writer.addDocument(doc);\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t1\"), \"f1\", toBytes(2L)); // update f1 to 2\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t1\"), \"f2\", toBytes(2L)); // update f2 to 2\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t2\"), \"f1\", toBytes(3L)); // update f1 to 3\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t2\"), \"f2\", toBytes(3L)); // update f2 to 3\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t1\"), \"f1\", toBytes(4L)); // update f1 to 4 (but not f2)\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    BinaryDocValues bdv = reader.leaves().get(0).reader().getBinaryDocValues(\"f1\");\n    assertEquals(0, bdv.nextDoc());\n    assertEquals(4, getValue(bdv));\n    bdv = reader.leaves().get(0).reader().getBinaryDocValues(\"f2\");\n    assertEquals(0, bdv.nextDoc());\n    assertEquals(3, getValue(bdv));\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  public void testUpdatesOrder() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"upd\", \"t1\", Store.NO));\n    doc.add(new StringField(\"upd\", \"t2\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"f1\", toBytes(1L)));\n    doc.add(new BinaryDocValuesField(\"f2\", toBytes(1L)));\n    writer.addDocument(doc);\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t1\"), \"f1\", toBytes(2L)); // update f1 to 2\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t1\"), \"f2\", toBytes(2L)); // update f2 to 2\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t2\"), \"f1\", toBytes(3L)); // update f1 to 3\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t2\"), \"f2\", toBytes(3L)); // update f2 to 3\n    writer.updateBinaryDocValue(new Term(\"upd\", \"t1\"), \"f1\", toBytes(4L)); // update f1 to 4 (but not f2)\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(4, getValue(reader.leaves().get(0).reader().getBinaryDocValues(\"f1\"), 0));\n    assertEquals(3, getValue(reader.leaves().get(0).reader().getBinaryDocValues(\"f2\"), 0));\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["d0ef034a4f10871667ae75181537775ddcf8ade4","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"06805da26538ed636bd89b10c2699cc3834032ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["06805da26538ed636bd89b10c2699cc3834032ae"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["d0ef034a4f10871667ae75181537775ddcf8ade4","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06805da26538ed636bd89b10c2699cc3834032ae"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"06805da26538ed636bd89b10c2699cc3834032ae":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}