{"path":"src/test/org/apache/lucene/index/TestTermVectorsReader#testMapper().mjava","commits":[{"id":"352bfe1fae83b92d1562f01c057bfbe6f5af3ddb","date":1185160645,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestTermVectorsReader#testMapper().mjava","pathOld":"/dev/null","sourceNew":"  public void testMapper() throws IOException {\n    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n    assertTrue(reader != null);\n    SortedTermVectorMapper mapper = new SortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.get(0, mapper);\n    SortedSet set = mapper.getTermVectorEntrySet();\n    assertTrue(\"set is null and it shouldn't be\", set != null);\n    //three fields, 4 terms, all terms are the same\n    assertTrue(\"set Size: \" + set.size() + \" is not: \" + 4, set.size() == 4);\n    //Check offsets and positions\n    for (Iterator iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry tve = (TermVectorEntry) iterator.next();\n      assertTrue(\"tve is null and it shouldn't be\", tve != null);\n      assertTrue(\"tve.getOffsets() is null and it shouldn't be\", tve.getOffsets() != null);\n      assertTrue(\"tve.getPositions() is null and it shouldn't be\", tve.getPositions() != null);\n\n    }\n\n    mapper = new SortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.get(1, mapper);\n    set = mapper.getTermVectorEntrySet();\n    assertTrue(\"set is null and it shouldn't be\", set != null);\n    //three fields, 4 terms, all terms are the same\n    assertTrue(\"set Size: \" + set.size() + \" is not: \" + 4, set.size() == 4);\n    //Should have offsets and positions b/c we are munging all the fields together\n    for (Iterator iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry tve = (TermVectorEntry) iterator.next();\n      assertTrue(\"tve is null and it shouldn't be\", tve != null);\n      assertTrue(\"tve.getOffsets() is null and it shouldn't be\", tve.getOffsets() != null);\n      assertTrue(\"tve.getPositions() is null and it shouldn't be\", tve.getPositions() != null);\n\n    }\n\n\n    FieldSortedTermVectorMapper fsMapper = new FieldSortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.get(0, fsMapper);\n    Map map = fsMapper.getFieldToTerms();\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + testFields.length, map.size() == testFields.length);\n    for (Iterator iterator = map.entrySet().iterator(); iterator.hasNext();) {\n      Map.Entry entry = (Map.Entry) iterator.next();\n      SortedSet sortedSet = (SortedSet) entry.getValue();\n      assertTrue(\"sortedSet Size: \" + sortedSet.size() + \" is not: \" + 4, sortedSet.size() == 4);\n      for (Iterator inner = sortedSet.iterator(); inner.hasNext();) {\n        TermVectorEntry tve = (TermVectorEntry) inner.next();\n        assertTrue(\"tve is null and it shouldn't be\", tve != null);\n        //Check offsets and positions.\n        assertTrue(\"tve is null and it shouldn't be\", tve != null);\n        String field = tve.getField();\n        if (field.equals(testFields[0])) {\n          //should have offsets\n\n          assertTrue(\"tve.getOffsets() is null and it shouldn't be\", tve.getOffsets() != null);\n          assertTrue(\"tve.getPositions() is null and it shouldn't be\", tve.getPositions() != null);\n        }\n        else if (field.equals(testFields[1])) {\n          //should not have offsets\n\n          assertTrue(\"tve.getOffsets() is not null and it shouldn't be\", tve.getOffsets() == null);\n          assertTrue(\"tve.getPositions() is not null and it shouldn't be\", tve.getPositions() == null);\n        }\n      }\n    }\n    //Try mapper that ignores offs and positions\n    fsMapper = new FieldSortedTermVectorMapper(true, true, new TermVectorEntryFreqSortedComparator());\n    reader.get(0, fsMapper);\n    map = fsMapper.getFieldToTerms();\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + testFields.length, map.size() == testFields.length);\n    for (Iterator iterator = map.entrySet().iterator(); iterator.hasNext();) {\n      Map.Entry entry = (Map.Entry) iterator.next();\n      SortedSet sortedSet = (SortedSet) entry.getValue();\n      assertTrue(\"sortedSet Size: \" + sortedSet.size() + \" is not: \" + 4, sortedSet.size() == 4);\n      for (Iterator inner = sortedSet.iterator(); inner.hasNext();) {\n        TermVectorEntry tve = (TermVectorEntry) inner.next();\n        assertTrue(\"tve is null and it shouldn't be\", tve != null);\n        //Check offsets and positions.\n        assertTrue(\"tve is null and it shouldn't be\", tve != null);\n        String field = tve.getField();\n        if (field.equals(testFields[0])) {\n          //should have offsets\n\n          assertTrue(\"tve.getOffsets() is null and it shouldn't be\", tve.getOffsets() == null);\n          assertTrue(\"tve.getPositions() is null and it shouldn't be\", tve.getPositions() == null);\n        }\n        else if (field.equals(testFields[1])) {\n          //should not have offsets\n\n          assertTrue(\"tve.getOffsets() is not null and it shouldn't be\", tve.getOffsets() == null);\n          assertTrue(\"tve.getPositions() is not null and it shouldn't be\", tve.getPositions() == null);\n        }\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f39283f826b260042f4a0469516fd1882ae41578","date":1194097306,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestTermVectorsReader#testMapper().mjava","pathOld":"src/test/org/apache/lucene/index/TestTermVectorsReader#testMapper().mjava","sourceNew":"  public void testMapper() throws IOException {\n    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n    assertTrue(reader != null);\n    SortedTermVectorMapper mapper = new SortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.get(0, mapper);\n    SortedSet set = mapper.getTermVectorEntrySet();\n    assertTrue(\"set is null and it shouldn't be\", set != null);\n    //three fields, 4 terms, all terms are the same\n    assertTrue(\"set Size: \" + set.size() + \" is not: \" + 4, set.size() == 4);\n    //Check offsets and positions\n    for (Iterator iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry tve = (TermVectorEntry) iterator.next();\n      assertTrue(\"tve is null and it shouldn't be\", tve != null);\n      assertTrue(\"tve.getOffsets() is null and it shouldn't be\", tve.getOffsets() != null);\n      assertTrue(\"tve.getPositions() is null and it shouldn't be\", tve.getPositions() != null);\n\n    }\n\n    mapper = new SortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.get(1, mapper);\n    set = mapper.getTermVectorEntrySet();\n    assertTrue(\"set is null and it shouldn't be\", set != null);\n    //three fields, 4 terms, all terms are the same\n    assertTrue(\"set Size: \" + set.size() + \" is not: \" + 4, set.size() == 4);\n    //Should have offsets and positions b/c we are munging all the fields together\n    for (Iterator iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry tve = (TermVectorEntry) iterator.next();\n      assertTrue(\"tve is null and it shouldn't be\", tve != null);\n      assertTrue(\"tve.getOffsets() is null and it shouldn't be\", tve.getOffsets() != null);\n      assertTrue(\"tve.getPositions() is null and it shouldn't be\", tve.getPositions() != null);\n\n    }\n\n\n    FieldSortedTermVectorMapper fsMapper = new FieldSortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.get(0, fsMapper);\n    Map map = fsMapper.getFieldToTerms();\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + testFields.length, map.size() == testFields.length);\n    for (Iterator iterator = map.entrySet().iterator(); iterator.hasNext();) {\n      Map.Entry entry = (Map.Entry) iterator.next();\n      SortedSet sortedSet = (SortedSet) entry.getValue();\n      assertTrue(\"sortedSet Size: \" + sortedSet.size() + \" is not: \" + 4, sortedSet.size() == 4);\n      for (Iterator inner = sortedSet.iterator(); inner.hasNext();) {\n        TermVectorEntry tve = (TermVectorEntry) inner.next();\n        assertTrue(\"tve is null and it shouldn't be\", tve != null);\n        //Check offsets and positions.\n        assertTrue(\"tve is null and it shouldn't be\", tve != null);\n        String field = tve.getField();\n        if (field.equals(testFields[0])) {\n          //should have offsets\n\n          assertTrue(\"tve.getOffsets() is null and it shouldn't be\", tve.getOffsets() != null);\n          assertTrue(\"tve.getPositions() is null and it shouldn't be\", tve.getPositions() != null);\n        }\n        else if (field.equals(testFields[1])) {\n          //should not have offsets\n\n          assertTrue(\"tve.getOffsets() is not null and it shouldn't be\", tve.getOffsets() == null);\n          assertTrue(\"tve.getPositions() is not null and it shouldn't be\", tve.getPositions() == null);\n        }\n      }\n    }\n    //Try mapper that ignores offs and positions\n    fsMapper = new FieldSortedTermVectorMapper(true, true, new TermVectorEntryFreqSortedComparator());\n    reader.get(0, fsMapper);\n    map = fsMapper.getFieldToTerms();\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + testFields.length, map.size() == testFields.length);\n    for (Iterator iterator = map.entrySet().iterator(); iterator.hasNext();) {\n      Map.Entry entry = (Map.Entry) iterator.next();\n      SortedSet sortedSet = (SortedSet) entry.getValue();\n      assertTrue(\"sortedSet Size: \" + sortedSet.size() + \" is not: \" + 4, sortedSet.size() == 4);\n      for (Iterator inner = sortedSet.iterator(); inner.hasNext();) {\n        TermVectorEntry tve = (TermVectorEntry) inner.next();\n        assertTrue(\"tve is null and it shouldn't be\", tve != null);\n        //Check offsets and positions.\n        assertTrue(\"tve is null and it shouldn't be\", tve != null);\n        String field = tve.getField();\n        if (field.equals(testFields[0])) {\n          //should have offsets\n\n          assertTrue(\"tve.getOffsets() is null and it shouldn't be\", tve.getOffsets() == null);\n          assertTrue(\"tve.getPositions() is null and it shouldn't be\", tve.getPositions() == null);\n        }\n        else if (field.equals(testFields[1])) {\n          //should not have offsets\n\n          assertTrue(\"tve.getOffsets() is not null and it shouldn't be\", tve.getOffsets() == null);\n          assertTrue(\"tve.getPositions() is not null and it shouldn't be\", tve.getPositions() == null);\n        }\n      }\n    }\n\n    // test setDocumentNumber()\n    IndexReader ir = IndexReader.open(dir);\n    DocNumAwareMapper docNumAwareMapper = new DocNumAwareMapper();\n    assertEquals(-1, docNumAwareMapper.getDocumentNumber());\n\n    ir.getTermFreqVector(0, docNumAwareMapper);\n    assertEquals(0, docNumAwareMapper.getDocumentNumber());\n    docNumAwareMapper.setDocumentNumber(-1);\n\n    ir.getTermFreqVector(1, docNumAwareMapper);\n    assertEquals(1, docNumAwareMapper.getDocumentNumber());\n    docNumAwareMapper.setDocumentNumber(-1);\n\n    ir.getTermFreqVector(0, \"f1\", docNumAwareMapper);\n    assertEquals(0, docNumAwareMapper.getDocumentNumber());\n    docNumAwareMapper.setDocumentNumber(-1);\n\n    ir.getTermFreqVector(1, \"f2\", docNumAwareMapper);\n    assertEquals(1, docNumAwareMapper.getDocumentNumber());\n    docNumAwareMapper.setDocumentNumber(-1);\n\n    ir.getTermFreqVector(0, \"f1\", docNumAwareMapper);\n    assertEquals(0, docNumAwareMapper.getDocumentNumber());\n\n    ir.close();\n\n  }\n\n","sourceOld":"  public void testMapper() throws IOException {\n    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n    assertTrue(reader != null);\n    SortedTermVectorMapper mapper = new SortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.get(0, mapper);\n    SortedSet set = mapper.getTermVectorEntrySet();\n    assertTrue(\"set is null and it shouldn't be\", set != null);\n    //three fields, 4 terms, all terms are the same\n    assertTrue(\"set Size: \" + set.size() + \" is not: \" + 4, set.size() == 4);\n    //Check offsets and positions\n    for (Iterator iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry tve = (TermVectorEntry) iterator.next();\n      assertTrue(\"tve is null and it shouldn't be\", tve != null);\n      assertTrue(\"tve.getOffsets() is null and it shouldn't be\", tve.getOffsets() != null);\n      assertTrue(\"tve.getPositions() is null and it shouldn't be\", tve.getPositions() != null);\n\n    }\n\n    mapper = new SortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.get(1, mapper);\n    set = mapper.getTermVectorEntrySet();\n    assertTrue(\"set is null and it shouldn't be\", set != null);\n    //three fields, 4 terms, all terms are the same\n    assertTrue(\"set Size: \" + set.size() + \" is not: \" + 4, set.size() == 4);\n    //Should have offsets and positions b/c we are munging all the fields together\n    for (Iterator iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry tve = (TermVectorEntry) iterator.next();\n      assertTrue(\"tve is null and it shouldn't be\", tve != null);\n      assertTrue(\"tve.getOffsets() is null and it shouldn't be\", tve.getOffsets() != null);\n      assertTrue(\"tve.getPositions() is null and it shouldn't be\", tve.getPositions() != null);\n\n    }\n\n\n    FieldSortedTermVectorMapper fsMapper = new FieldSortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.get(0, fsMapper);\n    Map map = fsMapper.getFieldToTerms();\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + testFields.length, map.size() == testFields.length);\n    for (Iterator iterator = map.entrySet().iterator(); iterator.hasNext();) {\n      Map.Entry entry = (Map.Entry) iterator.next();\n      SortedSet sortedSet = (SortedSet) entry.getValue();\n      assertTrue(\"sortedSet Size: \" + sortedSet.size() + \" is not: \" + 4, sortedSet.size() == 4);\n      for (Iterator inner = sortedSet.iterator(); inner.hasNext();) {\n        TermVectorEntry tve = (TermVectorEntry) inner.next();\n        assertTrue(\"tve is null and it shouldn't be\", tve != null);\n        //Check offsets and positions.\n        assertTrue(\"tve is null and it shouldn't be\", tve != null);\n        String field = tve.getField();\n        if (field.equals(testFields[0])) {\n          //should have offsets\n\n          assertTrue(\"tve.getOffsets() is null and it shouldn't be\", tve.getOffsets() != null);\n          assertTrue(\"tve.getPositions() is null and it shouldn't be\", tve.getPositions() != null);\n        }\n        else if (field.equals(testFields[1])) {\n          //should not have offsets\n\n          assertTrue(\"tve.getOffsets() is not null and it shouldn't be\", tve.getOffsets() == null);\n          assertTrue(\"tve.getPositions() is not null and it shouldn't be\", tve.getPositions() == null);\n        }\n      }\n    }\n    //Try mapper that ignores offs and positions\n    fsMapper = new FieldSortedTermVectorMapper(true, true, new TermVectorEntryFreqSortedComparator());\n    reader.get(0, fsMapper);\n    map = fsMapper.getFieldToTerms();\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + testFields.length, map.size() == testFields.length);\n    for (Iterator iterator = map.entrySet().iterator(); iterator.hasNext();) {\n      Map.Entry entry = (Map.Entry) iterator.next();\n      SortedSet sortedSet = (SortedSet) entry.getValue();\n      assertTrue(\"sortedSet Size: \" + sortedSet.size() + \" is not: \" + 4, sortedSet.size() == 4);\n      for (Iterator inner = sortedSet.iterator(); inner.hasNext();) {\n        TermVectorEntry tve = (TermVectorEntry) inner.next();\n        assertTrue(\"tve is null and it shouldn't be\", tve != null);\n        //Check offsets and positions.\n        assertTrue(\"tve is null and it shouldn't be\", tve != null);\n        String field = tve.getField();\n        if (field.equals(testFields[0])) {\n          //should have offsets\n\n          assertTrue(\"tve.getOffsets() is null and it shouldn't be\", tve.getOffsets() == null);\n          assertTrue(\"tve.getPositions() is null and it shouldn't be\", tve.getPositions() == null);\n        }\n        else if (field.equals(testFields[1])) {\n          //should not have offsets\n\n          assertTrue(\"tve.getOffsets() is not null and it shouldn't be\", tve.getOffsets() == null);\n          assertTrue(\"tve.getPositions() is not null and it shouldn't be\", tve.getPositions() == null);\n        }\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestTermVectorsReader#testMapper().mjava","pathOld":"src/test/org/apache/lucene/index/TestTermVectorsReader#testMapper().mjava","sourceNew":"  public void testMapper() throws IOException {\n    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n    assertTrue(reader != null);\n    SortedTermVectorMapper mapper = new SortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.get(0, mapper);\n    SortedSet set = mapper.getTermVectorEntrySet();\n    assertTrue(\"set is null and it shouldn't be\", set != null);\n    //three fields, 4 terms, all terms are the same\n    assertTrue(\"set Size: \" + set.size() + \" is not: \" + 4, set.size() == 4);\n    //Check offsets and positions\n    for (Iterator iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry tve = (TermVectorEntry) iterator.next();\n      assertTrue(\"tve is null and it shouldn't be\", tve != null);\n      assertTrue(\"tve.getOffsets() is null and it shouldn't be\", tve.getOffsets() != null);\n      assertTrue(\"tve.getPositions() is null and it shouldn't be\", tve.getPositions() != null);\n\n    }\n\n    mapper = new SortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.get(1, mapper);\n    set = mapper.getTermVectorEntrySet();\n    assertTrue(\"set is null and it shouldn't be\", set != null);\n    //three fields, 4 terms, all terms are the same\n    assertTrue(\"set Size: \" + set.size() + \" is not: \" + 4, set.size() == 4);\n    //Should have offsets and positions b/c we are munging all the fields together\n    for (Iterator iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry tve = (TermVectorEntry) iterator.next();\n      assertTrue(\"tve is null and it shouldn't be\", tve != null);\n      assertTrue(\"tve.getOffsets() is null and it shouldn't be\", tve.getOffsets() != null);\n      assertTrue(\"tve.getPositions() is null and it shouldn't be\", tve.getPositions() != null);\n\n    }\n\n\n    FieldSortedTermVectorMapper fsMapper = new FieldSortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.get(0, fsMapper);\n    Map map = fsMapper.getFieldToTerms();\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + testFields.length, map.size() == testFields.length);\n    for (Iterator iterator = map.entrySet().iterator(); iterator.hasNext();) {\n      Map.Entry entry = (Map.Entry) iterator.next();\n      SortedSet sortedSet = (SortedSet) entry.getValue();\n      assertTrue(\"sortedSet Size: \" + sortedSet.size() + \" is not: \" + 4, sortedSet.size() == 4);\n      for (Iterator inner = sortedSet.iterator(); inner.hasNext();) {\n        TermVectorEntry tve = (TermVectorEntry) inner.next();\n        assertTrue(\"tve is null and it shouldn't be\", tve != null);\n        //Check offsets and positions.\n        assertTrue(\"tve is null and it shouldn't be\", tve != null);\n        String field = tve.getField();\n        if (field.equals(testFields[0])) {\n          //should have offsets\n\n          assertTrue(\"tve.getOffsets() is null and it shouldn't be\", tve.getOffsets() != null);\n          assertTrue(\"tve.getPositions() is null and it shouldn't be\", tve.getPositions() != null);\n        }\n        else if (field.equals(testFields[1])) {\n          //should not have offsets\n\n          assertTrue(\"tve.getOffsets() is not null and it shouldn't be\", tve.getOffsets() == null);\n          assertTrue(\"tve.getPositions() is not null and it shouldn't be\", tve.getPositions() == null);\n        }\n      }\n    }\n    //Try mapper that ignores offs and positions\n    fsMapper = new FieldSortedTermVectorMapper(true, true, new TermVectorEntryFreqSortedComparator());\n    reader.get(0, fsMapper);\n    map = fsMapper.getFieldToTerms();\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + testFields.length, map.size() == testFields.length);\n    for (Iterator iterator = map.entrySet().iterator(); iterator.hasNext();) {\n      Map.Entry entry = (Map.Entry) iterator.next();\n      SortedSet sortedSet = (SortedSet) entry.getValue();\n      assertTrue(\"sortedSet Size: \" + sortedSet.size() + \" is not: \" + 4, sortedSet.size() == 4);\n      for (Iterator inner = sortedSet.iterator(); inner.hasNext();) {\n        TermVectorEntry tve = (TermVectorEntry) inner.next();\n        assertTrue(\"tve is null and it shouldn't be\", tve != null);\n        //Check offsets and positions.\n        assertTrue(\"tve is null and it shouldn't be\", tve != null);\n        String field = tve.getField();\n        if (field.equals(testFields[0])) {\n          //should have offsets\n\n          assertTrue(\"tve.getOffsets() is null and it shouldn't be\", tve.getOffsets() == null);\n          assertTrue(\"tve.getPositions() is null and it shouldn't be\", tve.getPositions() == null);\n        }\n        else if (field.equals(testFields[1])) {\n          //should not have offsets\n\n          assertTrue(\"tve.getOffsets() is not null and it shouldn't be\", tve.getOffsets() == null);\n          assertTrue(\"tve.getPositions() is not null and it shouldn't be\", tve.getPositions() == null);\n        }\n      }\n    }\n\n    // test setDocumentNumber()\n    IndexReader ir = IndexReader.open(dir, true);\n    DocNumAwareMapper docNumAwareMapper = new DocNumAwareMapper();\n    assertEquals(-1, docNumAwareMapper.getDocumentNumber());\n\n    ir.getTermFreqVector(0, docNumAwareMapper);\n    assertEquals(0, docNumAwareMapper.getDocumentNumber());\n    docNumAwareMapper.setDocumentNumber(-1);\n\n    ir.getTermFreqVector(1, docNumAwareMapper);\n    assertEquals(1, docNumAwareMapper.getDocumentNumber());\n    docNumAwareMapper.setDocumentNumber(-1);\n\n    ir.getTermFreqVector(0, \"f1\", docNumAwareMapper);\n    assertEquals(0, docNumAwareMapper.getDocumentNumber());\n    docNumAwareMapper.setDocumentNumber(-1);\n\n    ir.getTermFreqVector(1, \"f2\", docNumAwareMapper);\n    assertEquals(1, docNumAwareMapper.getDocumentNumber());\n    docNumAwareMapper.setDocumentNumber(-1);\n\n    ir.getTermFreqVector(0, \"f1\", docNumAwareMapper);\n    assertEquals(0, docNumAwareMapper.getDocumentNumber());\n\n    ir.close();\n\n  }\n\n","sourceOld":"  public void testMapper() throws IOException {\n    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n    assertTrue(reader != null);\n    SortedTermVectorMapper mapper = new SortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.get(0, mapper);\n    SortedSet set = mapper.getTermVectorEntrySet();\n    assertTrue(\"set is null and it shouldn't be\", set != null);\n    //three fields, 4 terms, all terms are the same\n    assertTrue(\"set Size: \" + set.size() + \" is not: \" + 4, set.size() == 4);\n    //Check offsets and positions\n    for (Iterator iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry tve = (TermVectorEntry) iterator.next();\n      assertTrue(\"tve is null and it shouldn't be\", tve != null);\n      assertTrue(\"tve.getOffsets() is null and it shouldn't be\", tve.getOffsets() != null);\n      assertTrue(\"tve.getPositions() is null and it shouldn't be\", tve.getPositions() != null);\n\n    }\n\n    mapper = new SortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.get(1, mapper);\n    set = mapper.getTermVectorEntrySet();\n    assertTrue(\"set is null and it shouldn't be\", set != null);\n    //three fields, 4 terms, all terms are the same\n    assertTrue(\"set Size: \" + set.size() + \" is not: \" + 4, set.size() == 4);\n    //Should have offsets and positions b/c we are munging all the fields together\n    for (Iterator iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry tve = (TermVectorEntry) iterator.next();\n      assertTrue(\"tve is null and it shouldn't be\", tve != null);\n      assertTrue(\"tve.getOffsets() is null and it shouldn't be\", tve.getOffsets() != null);\n      assertTrue(\"tve.getPositions() is null and it shouldn't be\", tve.getPositions() != null);\n\n    }\n\n\n    FieldSortedTermVectorMapper fsMapper = new FieldSortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.get(0, fsMapper);\n    Map map = fsMapper.getFieldToTerms();\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + testFields.length, map.size() == testFields.length);\n    for (Iterator iterator = map.entrySet().iterator(); iterator.hasNext();) {\n      Map.Entry entry = (Map.Entry) iterator.next();\n      SortedSet sortedSet = (SortedSet) entry.getValue();\n      assertTrue(\"sortedSet Size: \" + sortedSet.size() + \" is not: \" + 4, sortedSet.size() == 4);\n      for (Iterator inner = sortedSet.iterator(); inner.hasNext();) {\n        TermVectorEntry tve = (TermVectorEntry) inner.next();\n        assertTrue(\"tve is null and it shouldn't be\", tve != null);\n        //Check offsets and positions.\n        assertTrue(\"tve is null and it shouldn't be\", tve != null);\n        String field = tve.getField();\n        if (field.equals(testFields[0])) {\n          //should have offsets\n\n          assertTrue(\"tve.getOffsets() is null and it shouldn't be\", tve.getOffsets() != null);\n          assertTrue(\"tve.getPositions() is null and it shouldn't be\", tve.getPositions() != null);\n        }\n        else if (field.equals(testFields[1])) {\n          //should not have offsets\n\n          assertTrue(\"tve.getOffsets() is not null and it shouldn't be\", tve.getOffsets() == null);\n          assertTrue(\"tve.getPositions() is not null and it shouldn't be\", tve.getPositions() == null);\n        }\n      }\n    }\n    //Try mapper that ignores offs and positions\n    fsMapper = new FieldSortedTermVectorMapper(true, true, new TermVectorEntryFreqSortedComparator());\n    reader.get(0, fsMapper);\n    map = fsMapper.getFieldToTerms();\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + testFields.length, map.size() == testFields.length);\n    for (Iterator iterator = map.entrySet().iterator(); iterator.hasNext();) {\n      Map.Entry entry = (Map.Entry) iterator.next();\n      SortedSet sortedSet = (SortedSet) entry.getValue();\n      assertTrue(\"sortedSet Size: \" + sortedSet.size() + \" is not: \" + 4, sortedSet.size() == 4);\n      for (Iterator inner = sortedSet.iterator(); inner.hasNext();) {\n        TermVectorEntry tve = (TermVectorEntry) inner.next();\n        assertTrue(\"tve is null and it shouldn't be\", tve != null);\n        //Check offsets and positions.\n        assertTrue(\"tve is null and it shouldn't be\", tve != null);\n        String field = tve.getField();\n        if (field.equals(testFields[0])) {\n          //should have offsets\n\n          assertTrue(\"tve.getOffsets() is null and it shouldn't be\", tve.getOffsets() == null);\n          assertTrue(\"tve.getPositions() is null and it shouldn't be\", tve.getPositions() == null);\n        }\n        else if (field.equals(testFields[1])) {\n          //should not have offsets\n\n          assertTrue(\"tve.getOffsets() is not null and it shouldn't be\", tve.getOffsets() == null);\n          assertTrue(\"tve.getPositions() is not null and it shouldn't be\", tve.getPositions() == null);\n        }\n      }\n    }\n\n    // test setDocumentNumber()\n    IndexReader ir = IndexReader.open(dir);\n    DocNumAwareMapper docNumAwareMapper = new DocNumAwareMapper();\n    assertEquals(-1, docNumAwareMapper.getDocumentNumber());\n\n    ir.getTermFreqVector(0, docNumAwareMapper);\n    assertEquals(0, docNumAwareMapper.getDocumentNumber());\n    docNumAwareMapper.setDocumentNumber(-1);\n\n    ir.getTermFreqVector(1, docNumAwareMapper);\n    assertEquals(1, docNumAwareMapper.getDocumentNumber());\n    docNumAwareMapper.setDocumentNumber(-1);\n\n    ir.getTermFreqVector(0, \"f1\", docNumAwareMapper);\n    assertEquals(0, docNumAwareMapper.getDocumentNumber());\n    docNumAwareMapper.setDocumentNumber(-1);\n\n    ir.getTermFreqVector(1, \"f2\", docNumAwareMapper);\n    assertEquals(1, docNumAwareMapper.getDocumentNumber());\n    docNumAwareMapper.setDocumentNumber(-1);\n\n    ir.getTermFreqVector(0, \"f1\", docNumAwareMapper);\n    assertEquals(0, docNumAwareMapper.getDocumentNumber());\n\n    ir.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestTermVectorsReader#testMapper().mjava","pathOld":"src/test/org/apache/lucene/index/TestTermVectorsReader#testMapper().mjava","sourceNew":"  public void testMapper() throws IOException {\n    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n    assertTrue(reader != null);\n    SortedTermVectorMapper mapper = new SortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.get(0, mapper);\n    SortedSet set = mapper.getTermVectorEntrySet();\n    assertTrue(\"set is null and it shouldn't be\", set != null);\n    //three fields, 4 terms, all terms are the same\n    assertTrue(\"set Size: \" + set.size() + \" is not: \" + 4, set.size() == 4);\n    //Check offsets and positions\n    for (Iterator iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry tve = (TermVectorEntry) iterator.next();\n      assertTrue(\"tve is null and it shouldn't be\", tve != null);\n      assertTrue(\"tve.getOffsets() is null and it shouldn't be\", tve.getOffsets() != null);\n      assertTrue(\"tve.getPositions() is null and it shouldn't be\", tve.getPositions() != null);\n\n    }\n\n    mapper = new SortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.get(1, mapper);\n    set = mapper.getTermVectorEntrySet();\n    assertTrue(\"set is null and it shouldn't be\", set != null);\n    //three fields, 4 terms, all terms are the same\n    assertTrue(\"set Size: \" + set.size() + \" is not: \" + 4, set.size() == 4);\n    //Should have offsets and positions b/c we are munging all the fields together\n    for (Iterator iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry tve = (TermVectorEntry) iterator.next();\n      assertTrue(\"tve is null and it shouldn't be\", tve != null);\n      assertTrue(\"tve.getOffsets() is null and it shouldn't be\", tve.getOffsets() != null);\n      assertTrue(\"tve.getPositions() is null and it shouldn't be\", tve.getPositions() != null);\n\n    }\n\n\n    FieldSortedTermVectorMapper fsMapper = new FieldSortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.get(0, fsMapper);\n    Map map = fsMapper.getFieldToTerms();\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + testFields.length, map.size() == testFields.length);\n    for (Iterator iterator = map.entrySet().iterator(); iterator.hasNext();) {\n      Map.Entry entry = (Map.Entry) iterator.next();\n      SortedSet sortedSet = (SortedSet) entry.getValue();\n      assertTrue(\"sortedSet Size: \" + sortedSet.size() + \" is not: \" + 4, sortedSet.size() == 4);\n      for (Iterator inner = sortedSet.iterator(); inner.hasNext();) {\n        TermVectorEntry tve = (TermVectorEntry) inner.next();\n        assertTrue(\"tve is null and it shouldn't be\", tve != null);\n        //Check offsets and positions.\n        assertTrue(\"tve is null and it shouldn't be\", tve != null);\n        String field = tve.getField();\n        if (field.equals(testFields[0])) {\n          //should have offsets\n\n          assertTrue(\"tve.getOffsets() is null and it shouldn't be\", tve.getOffsets() != null);\n          assertTrue(\"tve.getPositions() is null and it shouldn't be\", tve.getPositions() != null);\n        }\n        else if (field.equals(testFields[1])) {\n          //should not have offsets\n\n          assertTrue(\"tve.getOffsets() is not null and it shouldn't be\", tve.getOffsets() == null);\n          assertTrue(\"tve.getPositions() is not null and it shouldn't be\", tve.getPositions() == null);\n        }\n      }\n    }\n    //Try mapper that ignores offs and positions\n    fsMapper = new FieldSortedTermVectorMapper(true, true, new TermVectorEntryFreqSortedComparator());\n    reader.get(0, fsMapper);\n    map = fsMapper.getFieldToTerms();\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + testFields.length, map.size() == testFields.length);\n    for (Iterator iterator = map.entrySet().iterator(); iterator.hasNext();) {\n      Map.Entry entry = (Map.Entry) iterator.next();\n      SortedSet sortedSet = (SortedSet) entry.getValue();\n      assertTrue(\"sortedSet Size: \" + sortedSet.size() + \" is not: \" + 4, sortedSet.size() == 4);\n      for (Iterator inner = sortedSet.iterator(); inner.hasNext();) {\n        TermVectorEntry tve = (TermVectorEntry) inner.next();\n        assertTrue(\"tve is null and it shouldn't be\", tve != null);\n        //Check offsets and positions.\n        assertTrue(\"tve is null and it shouldn't be\", tve != null);\n        String field = tve.getField();\n        if (field.equals(testFields[0])) {\n          //should have offsets\n\n          assertTrue(\"tve.getOffsets() is null and it shouldn't be\", tve.getOffsets() == null);\n          assertTrue(\"tve.getPositions() is null and it shouldn't be\", tve.getPositions() == null);\n        }\n        else if (field.equals(testFields[1])) {\n          //should not have offsets\n\n          assertTrue(\"tve.getOffsets() is not null and it shouldn't be\", tve.getOffsets() == null);\n          assertTrue(\"tve.getPositions() is not null and it shouldn't be\", tve.getPositions() == null);\n        }\n      }\n    }\n\n    // test setDocumentNumber()\n    IndexReader ir = IndexReader.open(dir, true);\n    DocNumAwareMapper docNumAwareMapper = new DocNumAwareMapper();\n    assertEquals(-1, docNumAwareMapper.getDocumentNumber());\n\n    ir.getTermFreqVector(0, docNumAwareMapper);\n    assertEquals(0, docNumAwareMapper.getDocumentNumber());\n    docNumAwareMapper.setDocumentNumber(-1);\n\n    ir.getTermFreqVector(1, docNumAwareMapper);\n    assertEquals(1, docNumAwareMapper.getDocumentNumber());\n    docNumAwareMapper.setDocumentNumber(-1);\n\n    ir.getTermFreqVector(0, \"f1\", docNumAwareMapper);\n    assertEquals(0, docNumAwareMapper.getDocumentNumber());\n    docNumAwareMapper.setDocumentNumber(-1);\n\n    ir.getTermFreqVector(1, \"f2\", docNumAwareMapper);\n    assertEquals(1, docNumAwareMapper.getDocumentNumber());\n    docNumAwareMapper.setDocumentNumber(-1);\n\n    ir.getTermFreqVector(0, \"f1\", docNumAwareMapper);\n    assertEquals(0, docNumAwareMapper.getDocumentNumber());\n\n    ir.close();\n\n  }\n\n","sourceOld":"  public void testMapper() throws IOException {\n    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n    assertTrue(reader != null);\n    SortedTermVectorMapper mapper = new SortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.get(0, mapper);\n    SortedSet set = mapper.getTermVectorEntrySet();\n    assertTrue(\"set is null and it shouldn't be\", set != null);\n    //three fields, 4 terms, all terms are the same\n    assertTrue(\"set Size: \" + set.size() + \" is not: \" + 4, set.size() == 4);\n    //Check offsets and positions\n    for (Iterator iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry tve = (TermVectorEntry) iterator.next();\n      assertTrue(\"tve is null and it shouldn't be\", tve != null);\n      assertTrue(\"tve.getOffsets() is null and it shouldn't be\", tve.getOffsets() != null);\n      assertTrue(\"tve.getPositions() is null and it shouldn't be\", tve.getPositions() != null);\n\n    }\n\n    mapper = new SortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.get(1, mapper);\n    set = mapper.getTermVectorEntrySet();\n    assertTrue(\"set is null and it shouldn't be\", set != null);\n    //three fields, 4 terms, all terms are the same\n    assertTrue(\"set Size: \" + set.size() + \" is not: \" + 4, set.size() == 4);\n    //Should have offsets and positions b/c we are munging all the fields together\n    for (Iterator iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry tve = (TermVectorEntry) iterator.next();\n      assertTrue(\"tve is null and it shouldn't be\", tve != null);\n      assertTrue(\"tve.getOffsets() is null and it shouldn't be\", tve.getOffsets() != null);\n      assertTrue(\"tve.getPositions() is null and it shouldn't be\", tve.getPositions() != null);\n\n    }\n\n\n    FieldSortedTermVectorMapper fsMapper = new FieldSortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.get(0, fsMapper);\n    Map map = fsMapper.getFieldToTerms();\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + testFields.length, map.size() == testFields.length);\n    for (Iterator iterator = map.entrySet().iterator(); iterator.hasNext();) {\n      Map.Entry entry = (Map.Entry) iterator.next();\n      SortedSet sortedSet = (SortedSet) entry.getValue();\n      assertTrue(\"sortedSet Size: \" + sortedSet.size() + \" is not: \" + 4, sortedSet.size() == 4);\n      for (Iterator inner = sortedSet.iterator(); inner.hasNext();) {\n        TermVectorEntry tve = (TermVectorEntry) inner.next();\n        assertTrue(\"tve is null and it shouldn't be\", tve != null);\n        //Check offsets and positions.\n        assertTrue(\"tve is null and it shouldn't be\", tve != null);\n        String field = tve.getField();\n        if (field.equals(testFields[0])) {\n          //should have offsets\n\n          assertTrue(\"tve.getOffsets() is null and it shouldn't be\", tve.getOffsets() != null);\n          assertTrue(\"tve.getPositions() is null and it shouldn't be\", tve.getPositions() != null);\n        }\n        else if (field.equals(testFields[1])) {\n          //should not have offsets\n\n          assertTrue(\"tve.getOffsets() is not null and it shouldn't be\", tve.getOffsets() == null);\n          assertTrue(\"tve.getPositions() is not null and it shouldn't be\", tve.getPositions() == null);\n        }\n      }\n    }\n    //Try mapper that ignores offs and positions\n    fsMapper = new FieldSortedTermVectorMapper(true, true, new TermVectorEntryFreqSortedComparator());\n    reader.get(0, fsMapper);\n    map = fsMapper.getFieldToTerms();\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + testFields.length, map.size() == testFields.length);\n    for (Iterator iterator = map.entrySet().iterator(); iterator.hasNext();) {\n      Map.Entry entry = (Map.Entry) iterator.next();\n      SortedSet sortedSet = (SortedSet) entry.getValue();\n      assertTrue(\"sortedSet Size: \" + sortedSet.size() + \" is not: \" + 4, sortedSet.size() == 4);\n      for (Iterator inner = sortedSet.iterator(); inner.hasNext();) {\n        TermVectorEntry tve = (TermVectorEntry) inner.next();\n        assertTrue(\"tve is null and it shouldn't be\", tve != null);\n        //Check offsets and positions.\n        assertTrue(\"tve is null and it shouldn't be\", tve != null);\n        String field = tve.getField();\n        if (field.equals(testFields[0])) {\n          //should have offsets\n\n          assertTrue(\"tve.getOffsets() is null and it shouldn't be\", tve.getOffsets() == null);\n          assertTrue(\"tve.getPositions() is null and it shouldn't be\", tve.getPositions() == null);\n        }\n        else if (field.equals(testFields[1])) {\n          //should not have offsets\n\n          assertTrue(\"tve.getOffsets() is not null and it shouldn't be\", tve.getOffsets() == null);\n          assertTrue(\"tve.getPositions() is not null and it shouldn't be\", tve.getPositions() == null);\n        }\n      }\n    }\n\n    // test setDocumentNumber()\n    IndexReader ir = IndexReader.open(dir);\n    DocNumAwareMapper docNumAwareMapper = new DocNumAwareMapper();\n    assertEquals(-1, docNumAwareMapper.getDocumentNumber());\n\n    ir.getTermFreqVector(0, docNumAwareMapper);\n    assertEquals(0, docNumAwareMapper.getDocumentNumber());\n    docNumAwareMapper.setDocumentNumber(-1);\n\n    ir.getTermFreqVector(1, docNumAwareMapper);\n    assertEquals(1, docNumAwareMapper.getDocumentNumber());\n    docNumAwareMapper.setDocumentNumber(-1);\n\n    ir.getTermFreqVector(0, \"f1\", docNumAwareMapper);\n    assertEquals(0, docNumAwareMapper.getDocumentNumber());\n    docNumAwareMapper.setDocumentNumber(-1);\n\n    ir.getTermFreqVector(1, \"f2\", docNumAwareMapper);\n    assertEquals(1, docNumAwareMapper.getDocumentNumber());\n    docNumAwareMapper.setDocumentNumber(-1);\n\n    ir.getTermFreqVector(0, \"f1\", docNumAwareMapper);\n    assertEquals(0, docNumAwareMapper.getDocumentNumber());\n\n    ir.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestTermVectorsReader#testMapper().mjava","pathOld":"src/test/org/apache/lucene/index/TestTermVectorsReader#testMapper().mjava","sourceNew":"  public void testMapper() throws IOException {\n    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n    assertTrue(reader != null);\n    SortedTermVectorMapper mapper = new SortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.get(0, mapper);\n    SortedSet<TermVectorEntry> set = mapper.getTermVectorEntrySet();\n    assertTrue(\"set is null and it shouldn't be\", set != null);\n    //three fields, 4 terms, all terms are the same\n    assertTrue(\"set Size: \" + set.size() + \" is not: \" + 4, set.size() == 4);\n    //Check offsets and positions\n    for (Iterator<TermVectorEntry> iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry tve =  iterator.next();\n      assertTrue(\"tve is null and it shouldn't be\", tve != null);\n      assertTrue(\"tve.getOffsets() is null and it shouldn't be\", tve.getOffsets() != null);\n      assertTrue(\"tve.getPositions() is null and it shouldn't be\", tve.getPositions() != null);\n\n    }\n\n    mapper = new SortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.get(1, mapper);\n    set = mapper.getTermVectorEntrySet();\n    assertTrue(\"set is null and it shouldn't be\", set != null);\n    //three fields, 4 terms, all terms are the same\n    assertTrue(\"set Size: \" + set.size() + \" is not: \" + 4, set.size() == 4);\n    //Should have offsets and positions b/c we are munging all the fields together\n    for (Iterator<TermVectorEntry> iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry tve = iterator.next();\n      assertTrue(\"tve is null and it shouldn't be\", tve != null);\n      assertTrue(\"tve.getOffsets() is null and it shouldn't be\", tve.getOffsets() != null);\n      assertTrue(\"tve.getPositions() is null and it shouldn't be\", tve.getPositions() != null);\n\n    }\n\n\n    FieldSortedTermVectorMapper fsMapper = new FieldSortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.get(0, fsMapper);\n    Map<String,SortedSet<TermVectorEntry>> map = fsMapper.getFieldToTerms();\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + testFields.length, map.size() == testFields.length);\n    for (Map.Entry<String,SortedSet<TermVectorEntry>> entry : map.entrySet()) {\n      SortedSet<TermVectorEntry> sortedSet =  entry.getValue();\n      assertTrue(\"sortedSet Size: \" + sortedSet.size() + \" is not: \" + 4, sortedSet.size() == 4);\n      for (final TermVectorEntry tve : sortedSet) {\n        assertTrue(\"tve is null and it shouldn't be\", tve != null);\n        //Check offsets and positions.\n        assertTrue(\"tve is null and it shouldn't be\", tve != null);\n        String field = tve.getField();\n        if (field.equals(testFields[0])) {\n          //should have offsets\n\n          assertTrue(\"tve.getOffsets() is null and it shouldn't be\", tve.getOffsets() != null);\n          assertTrue(\"tve.getPositions() is null and it shouldn't be\", tve.getPositions() != null);\n        }\n        else if (field.equals(testFields[1])) {\n          //should not have offsets\n\n          assertTrue(\"tve.getOffsets() is not null and it shouldn't be\", tve.getOffsets() == null);\n          assertTrue(\"tve.getPositions() is not null and it shouldn't be\", tve.getPositions() == null);\n        }\n      }\n    }\n    //Try mapper that ignores offs and positions\n    fsMapper = new FieldSortedTermVectorMapper(true, true, new TermVectorEntryFreqSortedComparator());\n    reader.get(0, fsMapper);\n    map = fsMapper.getFieldToTerms();\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + testFields.length, map.size() == testFields.length);\n    for (final Map.Entry<String,SortedSet<TermVectorEntry>> entry : map.entrySet()) {\n      SortedSet<TermVectorEntry> sortedSet =  entry.getValue();\n      assertTrue(\"sortedSet Size: \" + sortedSet.size() + \" is not: \" + 4, sortedSet.size() == 4);\n      for (final TermVectorEntry tve : sortedSet) {\n        assertTrue(\"tve is null and it shouldn't be\", tve != null);\n        //Check offsets and positions.\n        assertTrue(\"tve is null and it shouldn't be\", tve != null);\n        String field = tve.getField();\n        if (field.equals(testFields[0])) {\n          //should have offsets\n\n          assertTrue(\"tve.getOffsets() is null and it shouldn't be\", tve.getOffsets() == null);\n          assertTrue(\"tve.getPositions() is null and it shouldn't be\", tve.getPositions() == null);\n        }\n        else if (field.equals(testFields[1])) {\n          //should not have offsets\n\n          assertTrue(\"tve.getOffsets() is not null and it shouldn't be\", tve.getOffsets() == null);\n          assertTrue(\"tve.getPositions() is not null and it shouldn't be\", tve.getPositions() == null);\n        }\n      }\n    }\n\n    // test setDocumentNumber()\n    IndexReader ir = IndexReader.open(dir, true);\n    DocNumAwareMapper docNumAwareMapper = new DocNumAwareMapper();\n    assertEquals(-1, docNumAwareMapper.getDocumentNumber());\n\n    ir.getTermFreqVector(0, docNumAwareMapper);\n    assertEquals(0, docNumAwareMapper.getDocumentNumber());\n    docNumAwareMapper.setDocumentNumber(-1);\n\n    ir.getTermFreqVector(1, docNumAwareMapper);\n    assertEquals(1, docNumAwareMapper.getDocumentNumber());\n    docNumAwareMapper.setDocumentNumber(-1);\n\n    ir.getTermFreqVector(0, \"f1\", docNumAwareMapper);\n    assertEquals(0, docNumAwareMapper.getDocumentNumber());\n    docNumAwareMapper.setDocumentNumber(-1);\n\n    ir.getTermFreqVector(1, \"f2\", docNumAwareMapper);\n    assertEquals(1, docNumAwareMapper.getDocumentNumber());\n    docNumAwareMapper.setDocumentNumber(-1);\n\n    ir.getTermFreqVector(0, \"f1\", docNumAwareMapper);\n    assertEquals(0, docNumAwareMapper.getDocumentNumber());\n\n    ir.close();\n\n  }\n\n","sourceOld":"  public void testMapper() throws IOException {\n    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n    assertTrue(reader != null);\n    SortedTermVectorMapper mapper = new SortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.get(0, mapper);\n    SortedSet set = mapper.getTermVectorEntrySet();\n    assertTrue(\"set is null and it shouldn't be\", set != null);\n    //three fields, 4 terms, all terms are the same\n    assertTrue(\"set Size: \" + set.size() + \" is not: \" + 4, set.size() == 4);\n    //Check offsets and positions\n    for (Iterator iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry tve = (TermVectorEntry) iterator.next();\n      assertTrue(\"tve is null and it shouldn't be\", tve != null);\n      assertTrue(\"tve.getOffsets() is null and it shouldn't be\", tve.getOffsets() != null);\n      assertTrue(\"tve.getPositions() is null and it shouldn't be\", tve.getPositions() != null);\n\n    }\n\n    mapper = new SortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.get(1, mapper);\n    set = mapper.getTermVectorEntrySet();\n    assertTrue(\"set is null and it shouldn't be\", set != null);\n    //three fields, 4 terms, all terms are the same\n    assertTrue(\"set Size: \" + set.size() + \" is not: \" + 4, set.size() == 4);\n    //Should have offsets and positions b/c we are munging all the fields together\n    for (Iterator iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry tve = (TermVectorEntry) iterator.next();\n      assertTrue(\"tve is null and it shouldn't be\", tve != null);\n      assertTrue(\"tve.getOffsets() is null and it shouldn't be\", tve.getOffsets() != null);\n      assertTrue(\"tve.getPositions() is null and it shouldn't be\", tve.getPositions() != null);\n\n    }\n\n\n    FieldSortedTermVectorMapper fsMapper = new FieldSortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.get(0, fsMapper);\n    Map map = fsMapper.getFieldToTerms();\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + testFields.length, map.size() == testFields.length);\n    for (Iterator iterator = map.entrySet().iterator(); iterator.hasNext();) {\n      Map.Entry entry = (Map.Entry) iterator.next();\n      SortedSet sortedSet = (SortedSet) entry.getValue();\n      assertTrue(\"sortedSet Size: \" + sortedSet.size() + \" is not: \" + 4, sortedSet.size() == 4);\n      for (Iterator inner = sortedSet.iterator(); inner.hasNext();) {\n        TermVectorEntry tve = (TermVectorEntry) inner.next();\n        assertTrue(\"tve is null and it shouldn't be\", tve != null);\n        //Check offsets and positions.\n        assertTrue(\"tve is null and it shouldn't be\", tve != null);\n        String field = tve.getField();\n        if (field.equals(testFields[0])) {\n          //should have offsets\n\n          assertTrue(\"tve.getOffsets() is null and it shouldn't be\", tve.getOffsets() != null);\n          assertTrue(\"tve.getPositions() is null and it shouldn't be\", tve.getPositions() != null);\n        }\n        else if (field.equals(testFields[1])) {\n          //should not have offsets\n\n          assertTrue(\"tve.getOffsets() is not null and it shouldn't be\", tve.getOffsets() == null);\n          assertTrue(\"tve.getPositions() is not null and it shouldn't be\", tve.getPositions() == null);\n        }\n      }\n    }\n    //Try mapper that ignores offs and positions\n    fsMapper = new FieldSortedTermVectorMapper(true, true, new TermVectorEntryFreqSortedComparator());\n    reader.get(0, fsMapper);\n    map = fsMapper.getFieldToTerms();\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + testFields.length, map.size() == testFields.length);\n    for (Iterator iterator = map.entrySet().iterator(); iterator.hasNext();) {\n      Map.Entry entry = (Map.Entry) iterator.next();\n      SortedSet sortedSet = (SortedSet) entry.getValue();\n      assertTrue(\"sortedSet Size: \" + sortedSet.size() + \" is not: \" + 4, sortedSet.size() == 4);\n      for (Iterator inner = sortedSet.iterator(); inner.hasNext();) {\n        TermVectorEntry tve = (TermVectorEntry) inner.next();\n        assertTrue(\"tve is null and it shouldn't be\", tve != null);\n        //Check offsets and positions.\n        assertTrue(\"tve is null and it shouldn't be\", tve != null);\n        String field = tve.getField();\n        if (field.equals(testFields[0])) {\n          //should have offsets\n\n          assertTrue(\"tve.getOffsets() is null and it shouldn't be\", tve.getOffsets() == null);\n          assertTrue(\"tve.getPositions() is null and it shouldn't be\", tve.getPositions() == null);\n        }\n        else if (field.equals(testFields[1])) {\n          //should not have offsets\n\n          assertTrue(\"tve.getOffsets() is not null and it shouldn't be\", tve.getOffsets() == null);\n          assertTrue(\"tve.getPositions() is not null and it shouldn't be\", tve.getPositions() == null);\n        }\n      }\n    }\n\n    // test setDocumentNumber()\n    IndexReader ir = IndexReader.open(dir, true);\n    DocNumAwareMapper docNumAwareMapper = new DocNumAwareMapper();\n    assertEquals(-1, docNumAwareMapper.getDocumentNumber());\n\n    ir.getTermFreqVector(0, docNumAwareMapper);\n    assertEquals(0, docNumAwareMapper.getDocumentNumber());\n    docNumAwareMapper.setDocumentNumber(-1);\n\n    ir.getTermFreqVector(1, docNumAwareMapper);\n    assertEquals(1, docNumAwareMapper.getDocumentNumber());\n    docNumAwareMapper.setDocumentNumber(-1);\n\n    ir.getTermFreqVector(0, \"f1\", docNumAwareMapper);\n    assertEquals(0, docNumAwareMapper.getDocumentNumber());\n    docNumAwareMapper.setDocumentNumber(-1);\n\n    ir.getTermFreqVector(1, \"f2\", docNumAwareMapper);\n    assertEquals(1, docNumAwareMapper.getDocumentNumber());\n    docNumAwareMapper.setDocumentNumber(-1);\n\n    ir.getTermFreqVector(0, \"f1\", docNumAwareMapper);\n    assertEquals(0, docNumAwareMapper.getDocumentNumber());\n\n    ir.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestTermVectorsReader#testMapper().mjava","pathOld":"src/test/org/apache/lucene/index/TestTermVectorsReader#testMapper().mjava","sourceNew":"  public void testMapper() throws IOException {\n    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n    SortedTermVectorMapper mapper = new SortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.get(0, mapper);\n    SortedSet<TermVectorEntry> set = mapper.getTermVectorEntrySet();\n    assertTrue(\"set is null and it shouldn't be\", set != null);\n    //three fields, 4 terms, all terms are the same\n    assertTrue(\"set Size: \" + set.size() + \" is not: \" + 4, set.size() == 4);\n    //Check offsets and positions\n    for (Iterator<TermVectorEntry> iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry tve =  iterator.next();\n      assertTrue(\"tve is null and it shouldn't be\", tve != null);\n      assertTrue(\"tve.getOffsets() is null and it shouldn't be\", tve.getOffsets() != null);\n      assertTrue(\"tve.getPositions() is null and it shouldn't be\", tve.getPositions() != null);\n\n    }\n\n    mapper = new SortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.get(1, mapper);\n    set = mapper.getTermVectorEntrySet();\n    assertTrue(\"set is null and it shouldn't be\", set != null);\n    //three fields, 4 terms, all terms are the same\n    assertTrue(\"set Size: \" + set.size() + \" is not: \" + 4, set.size() == 4);\n    //Should have offsets and positions b/c we are munging all the fields together\n    for (Iterator<TermVectorEntry> iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry tve = iterator.next();\n      assertTrue(\"tve is null and it shouldn't be\", tve != null);\n      assertTrue(\"tve.getOffsets() is null and it shouldn't be\", tve.getOffsets() != null);\n      assertTrue(\"tve.getPositions() is null and it shouldn't be\", tve.getPositions() != null);\n\n    }\n\n\n    FieldSortedTermVectorMapper fsMapper = new FieldSortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.get(0, fsMapper);\n    Map<String,SortedSet<TermVectorEntry>> map = fsMapper.getFieldToTerms();\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + testFields.length, map.size() == testFields.length);\n    for (Map.Entry<String,SortedSet<TermVectorEntry>> entry : map.entrySet()) {\n      SortedSet<TermVectorEntry> sortedSet =  entry.getValue();\n      assertTrue(\"sortedSet Size: \" + sortedSet.size() + \" is not: \" + 4, sortedSet.size() == 4);\n      for (final TermVectorEntry tve : sortedSet) {\n        assertTrue(\"tve is null and it shouldn't be\", tve != null);\n        //Check offsets and positions.\n        assertTrue(\"tve is null and it shouldn't be\", tve != null);\n        String field = tve.getField();\n        if (field.equals(testFields[0])) {\n          //should have offsets\n\n          assertTrue(\"tve.getOffsets() is null and it shouldn't be\", tve.getOffsets() != null);\n          assertTrue(\"tve.getPositions() is null and it shouldn't be\", tve.getPositions() != null);\n        }\n        else if (field.equals(testFields[1])) {\n          //should not have offsets\n\n          assertTrue(\"tve.getOffsets() is not null and it shouldn't be\", tve.getOffsets() == null);\n          assertTrue(\"tve.getPositions() is not null and it shouldn't be\", tve.getPositions() == null);\n        }\n      }\n    }\n    //Try mapper that ignores offs and positions\n    fsMapper = new FieldSortedTermVectorMapper(true, true, new TermVectorEntryFreqSortedComparator());\n    reader.get(0, fsMapper);\n    map = fsMapper.getFieldToTerms();\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + testFields.length, map.size() == testFields.length);\n    for (final Map.Entry<String,SortedSet<TermVectorEntry>> entry : map.entrySet()) {\n      SortedSet<TermVectorEntry> sortedSet =  entry.getValue();\n      assertTrue(\"sortedSet Size: \" + sortedSet.size() + \" is not: \" + 4, sortedSet.size() == 4);\n      for (final TermVectorEntry tve : sortedSet) {\n        assertTrue(\"tve is null and it shouldn't be\", tve != null);\n        //Check offsets and positions.\n        assertTrue(\"tve is null and it shouldn't be\", tve != null);\n        String field = tve.getField();\n        if (field.equals(testFields[0])) {\n          //should have offsets\n\n          assertTrue(\"tve.getOffsets() is null and it shouldn't be\", tve.getOffsets() == null);\n          assertTrue(\"tve.getPositions() is null and it shouldn't be\", tve.getPositions() == null);\n        }\n        else if (field.equals(testFields[1])) {\n          //should not have offsets\n\n          assertTrue(\"tve.getOffsets() is not null and it shouldn't be\", tve.getOffsets() == null);\n          assertTrue(\"tve.getPositions() is not null and it shouldn't be\", tve.getPositions() == null);\n        }\n      }\n    }\n\n    // test setDocumentNumber()\n    IndexReader ir = IndexReader.open(dir, true);\n    DocNumAwareMapper docNumAwareMapper = new DocNumAwareMapper();\n    assertEquals(-1, docNumAwareMapper.getDocumentNumber());\n\n    ir.getTermFreqVector(0, docNumAwareMapper);\n    assertEquals(0, docNumAwareMapper.getDocumentNumber());\n    docNumAwareMapper.setDocumentNumber(-1);\n\n    ir.getTermFreqVector(1, docNumAwareMapper);\n    assertEquals(1, docNumAwareMapper.getDocumentNumber());\n    docNumAwareMapper.setDocumentNumber(-1);\n\n    ir.getTermFreqVector(0, \"f1\", docNumAwareMapper);\n    assertEquals(0, docNumAwareMapper.getDocumentNumber());\n    docNumAwareMapper.setDocumentNumber(-1);\n\n    ir.getTermFreqVector(1, \"f2\", docNumAwareMapper);\n    assertEquals(1, docNumAwareMapper.getDocumentNumber());\n    docNumAwareMapper.setDocumentNumber(-1);\n\n    ir.getTermFreqVector(0, \"f1\", docNumAwareMapper);\n    assertEquals(0, docNumAwareMapper.getDocumentNumber());\n\n    ir.close();\n\n  }\n\n","sourceOld":"  public void testMapper() throws IOException {\n    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n    assertTrue(reader != null);\n    SortedTermVectorMapper mapper = new SortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.get(0, mapper);\n    SortedSet<TermVectorEntry> set = mapper.getTermVectorEntrySet();\n    assertTrue(\"set is null and it shouldn't be\", set != null);\n    //three fields, 4 terms, all terms are the same\n    assertTrue(\"set Size: \" + set.size() + \" is not: \" + 4, set.size() == 4);\n    //Check offsets and positions\n    for (Iterator<TermVectorEntry> iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry tve =  iterator.next();\n      assertTrue(\"tve is null and it shouldn't be\", tve != null);\n      assertTrue(\"tve.getOffsets() is null and it shouldn't be\", tve.getOffsets() != null);\n      assertTrue(\"tve.getPositions() is null and it shouldn't be\", tve.getPositions() != null);\n\n    }\n\n    mapper = new SortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.get(1, mapper);\n    set = mapper.getTermVectorEntrySet();\n    assertTrue(\"set is null and it shouldn't be\", set != null);\n    //three fields, 4 terms, all terms are the same\n    assertTrue(\"set Size: \" + set.size() + \" is not: \" + 4, set.size() == 4);\n    //Should have offsets and positions b/c we are munging all the fields together\n    for (Iterator<TermVectorEntry> iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry tve = iterator.next();\n      assertTrue(\"tve is null and it shouldn't be\", tve != null);\n      assertTrue(\"tve.getOffsets() is null and it shouldn't be\", tve.getOffsets() != null);\n      assertTrue(\"tve.getPositions() is null and it shouldn't be\", tve.getPositions() != null);\n\n    }\n\n\n    FieldSortedTermVectorMapper fsMapper = new FieldSortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.get(0, fsMapper);\n    Map<String,SortedSet<TermVectorEntry>> map = fsMapper.getFieldToTerms();\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + testFields.length, map.size() == testFields.length);\n    for (Map.Entry<String,SortedSet<TermVectorEntry>> entry : map.entrySet()) {\n      SortedSet<TermVectorEntry> sortedSet =  entry.getValue();\n      assertTrue(\"sortedSet Size: \" + sortedSet.size() + \" is not: \" + 4, sortedSet.size() == 4);\n      for (final TermVectorEntry tve : sortedSet) {\n        assertTrue(\"tve is null and it shouldn't be\", tve != null);\n        //Check offsets and positions.\n        assertTrue(\"tve is null and it shouldn't be\", tve != null);\n        String field = tve.getField();\n        if (field.equals(testFields[0])) {\n          //should have offsets\n\n          assertTrue(\"tve.getOffsets() is null and it shouldn't be\", tve.getOffsets() != null);\n          assertTrue(\"tve.getPositions() is null and it shouldn't be\", tve.getPositions() != null);\n        }\n        else if (field.equals(testFields[1])) {\n          //should not have offsets\n\n          assertTrue(\"tve.getOffsets() is not null and it shouldn't be\", tve.getOffsets() == null);\n          assertTrue(\"tve.getPositions() is not null and it shouldn't be\", tve.getPositions() == null);\n        }\n      }\n    }\n    //Try mapper that ignores offs and positions\n    fsMapper = new FieldSortedTermVectorMapper(true, true, new TermVectorEntryFreqSortedComparator());\n    reader.get(0, fsMapper);\n    map = fsMapper.getFieldToTerms();\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + testFields.length, map.size() == testFields.length);\n    for (final Map.Entry<String,SortedSet<TermVectorEntry>> entry : map.entrySet()) {\n      SortedSet<TermVectorEntry> sortedSet =  entry.getValue();\n      assertTrue(\"sortedSet Size: \" + sortedSet.size() + \" is not: \" + 4, sortedSet.size() == 4);\n      for (final TermVectorEntry tve : sortedSet) {\n        assertTrue(\"tve is null and it shouldn't be\", tve != null);\n        //Check offsets and positions.\n        assertTrue(\"tve is null and it shouldn't be\", tve != null);\n        String field = tve.getField();\n        if (field.equals(testFields[0])) {\n          //should have offsets\n\n          assertTrue(\"tve.getOffsets() is null and it shouldn't be\", tve.getOffsets() == null);\n          assertTrue(\"tve.getPositions() is null and it shouldn't be\", tve.getPositions() == null);\n        }\n        else if (field.equals(testFields[1])) {\n          //should not have offsets\n\n          assertTrue(\"tve.getOffsets() is not null and it shouldn't be\", tve.getOffsets() == null);\n          assertTrue(\"tve.getPositions() is not null and it shouldn't be\", tve.getPositions() == null);\n        }\n      }\n    }\n\n    // test setDocumentNumber()\n    IndexReader ir = IndexReader.open(dir, true);\n    DocNumAwareMapper docNumAwareMapper = new DocNumAwareMapper();\n    assertEquals(-1, docNumAwareMapper.getDocumentNumber());\n\n    ir.getTermFreqVector(0, docNumAwareMapper);\n    assertEquals(0, docNumAwareMapper.getDocumentNumber());\n    docNumAwareMapper.setDocumentNumber(-1);\n\n    ir.getTermFreqVector(1, docNumAwareMapper);\n    assertEquals(1, docNumAwareMapper.getDocumentNumber());\n    docNumAwareMapper.setDocumentNumber(-1);\n\n    ir.getTermFreqVector(0, \"f1\", docNumAwareMapper);\n    assertEquals(0, docNumAwareMapper.getDocumentNumber());\n    docNumAwareMapper.setDocumentNumber(-1);\n\n    ir.getTermFreqVector(1, \"f2\", docNumAwareMapper);\n    assertEquals(1, docNumAwareMapper.getDocumentNumber());\n    docNumAwareMapper.setDocumentNumber(-1);\n\n    ir.getTermFreqVector(0, \"f1\", docNumAwareMapper);\n    assertEquals(0, docNumAwareMapper.getDocumentNumber());\n\n    ir.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testMapper().mjava","pathOld":"src/test/org/apache/lucene/index/TestTermVectorsReader#testMapper().mjava","sourceNew":"  public void testMapper() throws IOException {\n    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n    SortedTermVectorMapper mapper = new SortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.get(0, mapper);\n    SortedSet<TermVectorEntry> set = mapper.getTermVectorEntrySet();\n    assertTrue(\"set is null and it shouldn't be\", set != null);\n    //three fields, 4 terms, all terms are the same\n    assertTrue(\"set Size: \" + set.size() + \" is not: \" + 4, set.size() == 4);\n    //Check offsets and positions\n    for (Iterator<TermVectorEntry> iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry tve =  iterator.next();\n      assertTrue(\"tve is null and it shouldn't be\", tve != null);\n      assertTrue(\"tve.getOffsets() is null and it shouldn't be\", tve.getOffsets() != null);\n      assertTrue(\"tve.getPositions() is null and it shouldn't be\", tve.getPositions() != null);\n\n    }\n\n    mapper = new SortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.get(1, mapper);\n    set = mapper.getTermVectorEntrySet();\n    assertTrue(\"set is null and it shouldn't be\", set != null);\n    //three fields, 4 terms, all terms are the same\n    assertTrue(\"set Size: \" + set.size() + \" is not: \" + 4, set.size() == 4);\n    //Should have offsets and positions b/c we are munging all the fields together\n    for (Iterator<TermVectorEntry> iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry tve = iterator.next();\n      assertTrue(\"tve is null and it shouldn't be\", tve != null);\n      assertTrue(\"tve.getOffsets() is null and it shouldn't be\", tve.getOffsets() != null);\n      assertTrue(\"tve.getPositions() is null and it shouldn't be\", tve.getPositions() != null);\n\n    }\n\n\n    FieldSortedTermVectorMapper fsMapper = new FieldSortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.get(0, fsMapper);\n    Map<String,SortedSet<TermVectorEntry>> map = fsMapper.getFieldToTerms();\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + testFields.length, map.size() == testFields.length);\n    for (Map.Entry<String,SortedSet<TermVectorEntry>> entry : map.entrySet()) {\n      SortedSet<TermVectorEntry> sortedSet =  entry.getValue();\n      assertTrue(\"sortedSet Size: \" + sortedSet.size() + \" is not: \" + 4, sortedSet.size() == 4);\n      for (final TermVectorEntry tve : sortedSet) {\n        assertTrue(\"tve is null and it shouldn't be\", tve != null);\n        //Check offsets and positions.\n        assertTrue(\"tve is null and it shouldn't be\", tve != null);\n        String field = tve.getField();\n        if (field.equals(testFields[0])) {\n          //should have offsets\n\n          assertTrue(\"tve.getOffsets() is null and it shouldn't be\", tve.getOffsets() != null);\n          assertTrue(\"tve.getPositions() is null and it shouldn't be\", tve.getPositions() != null);\n        }\n        else if (field.equals(testFields[1])) {\n          //should not have offsets\n\n          assertTrue(\"tve.getOffsets() is not null and it shouldn't be\", tve.getOffsets() == null);\n          assertTrue(\"tve.getPositions() is not null and it shouldn't be\", tve.getPositions() == null);\n        }\n      }\n    }\n    //Try mapper that ignores offs and positions\n    fsMapper = new FieldSortedTermVectorMapper(true, true, new TermVectorEntryFreqSortedComparator());\n    reader.get(0, fsMapper);\n    map = fsMapper.getFieldToTerms();\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + testFields.length, map.size() == testFields.length);\n    for (final Map.Entry<String,SortedSet<TermVectorEntry>> entry : map.entrySet()) {\n      SortedSet<TermVectorEntry> sortedSet =  entry.getValue();\n      assertTrue(\"sortedSet Size: \" + sortedSet.size() + \" is not: \" + 4, sortedSet.size() == 4);\n      for (final TermVectorEntry tve : sortedSet) {\n        assertTrue(\"tve is null and it shouldn't be\", tve != null);\n        //Check offsets and positions.\n        assertTrue(\"tve is null and it shouldn't be\", tve != null);\n        String field = tve.getField();\n        if (field.equals(testFields[0])) {\n          //should have offsets\n\n          assertTrue(\"tve.getOffsets() is null and it shouldn't be\", tve.getOffsets() == null);\n          assertTrue(\"tve.getPositions() is null and it shouldn't be\", tve.getPositions() == null);\n        }\n        else if (field.equals(testFields[1])) {\n          //should not have offsets\n\n          assertTrue(\"tve.getOffsets() is not null and it shouldn't be\", tve.getOffsets() == null);\n          assertTrue(\"tve.getPositions() is not null and it shouldn't be\", tve.getPositions() == null);\n        }\n      }\n    }\n\n    // test setDocumentNumber()\n    IndexReader ir = IndexReader.open(dir, true);\n    DocNumAwareMapper docNumAwareMapper = new DocNumAwareMapper();\n    assertEquals(-1, docNumAwareMapper.getDocumentNumber());\n\n    ir.getTermFreqVector(0, docNumAwareMapper);\n    assertEquals(0, docNumAwareMapper.getDocumentNumber());\n    docNumAwareMapper.setDocumentNumber(-1);\n\n    ir.getTermFreqVector(1, docNumAwareMapper);\n    assertEquals(1, docNumAwareMapper.getDocumentNumber());\n    docNumAwareMapper.setDocumentNumber(-1);\n\n    ir.getTermFreqVector(0, \"f1\", docNumAwareMapper);\n    assertEquals(0, docNumAwareMapper.getDocumentNumber());\n    docNumAwareMapper.setDocumentNumber(-1);\n\n    ir.getTermFreqVector(1, \"f2\", docNumAwareMapper);\n    assertEquals(1, docNumAwareMapper.getDocumentNumber());\n    docNumAwareMapper.setDocumentNumber(-1);\n\n    ir.getTermFreqVector(0, \"f1\", docNumAwareMapper);\n    assertEquals(0, docNumAwareMapper.getDocumentNumber());\n\n    ir.close();\n\n  }\n\n","sourceOld":"  public void testMapper() throws IOException {\n    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n    SortedTermVectorMapper mapper = new SortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.get(0, mapper);\n    SortedSet<TermVectorEntry> set = mapper.getTermVectorEntrySet();\n    assertTrue(\"set is null and it shouldn't be\", set != null);\n    //three fields, 4 terms, all terms are the same\n    assertTrue(\"set Size: \" + set.size() + \" is not: \" + 4, set.size() == 4);\n    //Check offsets and positions\n    for (Iterator<TermVectorEntry> iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry tve =  iterator.next();\n      assertTrue(\"tve is null and it shouldn't be\", tve != null);\n      assertTrue(\"tve.getOffsets() is null and it shouldn't be\", tve.getOffsets() != null);\n      assertTrue(\"tve.getPositions() is null and it shouldn't be\", tve.getPositions() != null);\n\n    }\n\n    mapper = new SortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.get(1, mapper);\n    set = mapper.getTermVectorEntrySet();\n    assertTrue(\"set is null and it shouldn't be\", set != null);\n    //three fields, 4 terms, all terms are the same\n    assertTrue(\"set Size: \" + set.size() + \" is not: \" + 4, set.size() == 4);\n    //Should have offsets and positions b/c we are munging all the fields together\n    for (Iterator<TermVectorEntry> iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry tve = iterator.next();\n      assertTrue(\"tve is null and it shouldn't be\", tve != null);\n      assertTrue(\"tve.getOffsets() is null and it shouldn't be\", tve.getOffsets() != null);\n      assertTrue(\"tve.getPositions() is null and it shouldn't be\", tve.getPositions() != null);\n\n    }\n\n\n    FieldSortedTermVectorMapper fsMapper = new FieldSortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.get(0, fsMapper);\n    Map<String,SortedSet<TermVectorEntry>> map = fsMapper.getFieldToTerms();\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + testFields.length, map.size() == testFields.length);\n    for (Map.Entry<String,SortedSet<TermVectorEntry>> entry : map.entrySet()) {\n      SortedSet<TermVectorEntry> sortedSet =  entry.getValue();\n      assertTrue(\"sortedSet Size: \" + sortedSet.size() + \" is not: \" + 4, sortedSet.size() == 4);\n      for (final TermVectorEntry tve : sortedSet) {\n        assertTrue(\"tve is null and it shouldn't be\", tve != null);\n        //Check offsets and positions.\n        assertTrue(\"tve is null and it shouldn't be\", tve != null);\n        String field = tve.getField();\n        if (field.equals(testFields[0])) {\n          //should have offsets\n\n          assertTrue(\"tve.getOffsets() is null and it shouldn't be\", tve.getOffsets() != null);\n          assertTrue(\"tve.getPositions() is null and it shouldn't be\", tve.getPositions() != null);\n        }\n        else if (field.equals(testFields[1])) {\n          //should not have offsets\n\n          assertTrue(\"tve.getOffsets() is not null and it shouldn't be\", tve.getOffsets() == null);\n          assertTrue(\"tve.getPositions() is not null and it shouldn't be\", tve.getPositions() == null);\n        }\n      }\n    }\n    //Try mapper that ignores offs and positions\n    fsMapper = new FieldSortedTermVectorMapper(true, true, new TermVectorEntryFreqSortedComparator());\n    reader.get(0, fsMapper);\n    map = fsMapper.getFieldToTerms();\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + testFields.length, map.size() == testFields.length);\n    for (final Map.Entry<String,SortedSet<TermVectorEntry>> entry : map.entrySet()) {\n      SortedSet<TermVectorEntry> sortedSet =  entry.getValue();\n      assertTrue(\"sortedSet Size: \" + sortedSet.size() + \" is not: \" + 4, sortedSet.size() == 4);\n      for (final TermVectorEntry tve : sortedSet) {\n        assertTrue(\"tve is null and it shouldn't be\", tve != null);\n        //Check offsets and positions.\n        assertTrue(\"tve is null and it shouldn't be\", tve != null);\n        String field = tve.getField();\n        if (field.equals(testFields[0])) {\n          //should have offsets\n\n          assertTrue(\"tve.getOffsets() is null and it shouldn't be\", tve.getOffsets() == null);\n          assertTrue(\"tve.getPositions() is null and it shouldn't be\", tve.getPositions() == null);\n        }\n        else if (field.equals(testFields[1])) {\n          //should not have offsets\n\n          assertTrue(\"tve.getOffsets() is not null and it shouldn't be\", tve.getOffsets() == null);\n          assertTrue(\"tve.getPositions() is not null and it shouldn't be\", tve.getPositions() == null);\n        }\n      }\n    }\n\n    // test setDocumentNumber()\n    IndexReader ir = IndexReader.open(dir, true);\n    DocNumAwareMapper docNumAwareMapper = new DocNumAwareMapper();\n    assertEquals(-1, docNumAwareMapper.getDocumentNumber());\n\n    ir.getTermFreqVector(0, docNumAwareMapper);\n    assertEquals(0, docNumAwareMapper.getDocumentNumber());\n    docNumAwareMapper.setDocumentNumber(-1);\n\n    ir.getTermFreqVector(1, docNumAwareMapper);\n    assertEquals(1, docNumAwareMapper.getDocumentNumber());\n    docNumAwareMapper.setDocumentNumber(-1);\n\n    ir.getTermFreqVector(0, \"f1\", docNumAwareMapper);\n    assertEquals(0, docNumAwareMapper.getDocumentNumber());\n    docNumAwareMapper.setDocumentNumber(-1);\n\n    ir.getTermFreqVector(1, \"f2\", docNumAwareMapper);\n    assertEquals(1, docNumAwareMapper.getDocumentNumber());\n    docNumAwareMapper.setDocumentNumber(-1);\n\n    ir.getTermFreqVector(0, \"f1\", docNumAwareMapper);\n    assertEquals(0, docNumAwareMapper.getDocumentNumber());\n\n    ir.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["f39283f826b260042f4a0469516fd1882ae41578"],"352bfe1fae83b92d1562f01c057bfbe6f5af3ddb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["f39283f826b260042f4a0469516fd1882ae41578","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"f39283f826b260042f4a0469516fd1882ae41578":["352bfe1fae83b92d1562f01c057bfbe6f5af3ddb"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"352bfe1fae83b92d1562f01c057bfbe6f5af3ddb":["f39283f826b260042f4a0469516fd1882ae41578"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["352bfe1fae83b92d1562f01c057bfbe6f5af3ddb"],"0a046c0c310bc77931fc8441bd920053b607dd14":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"f39283f826b260042f4a0469516fd1882ae41578":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}