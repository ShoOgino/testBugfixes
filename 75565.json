{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/HashBasedRouter#getSearchSlicesSingle(String,SolrParams,DocCollection).mjava","commits":[{"id":"eec5368fa415ebab044b7ae01de50d5b49519b7e","date":1355029764,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/HashBasedRouter#getSearchSlicesSingle(String,SolrParams,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/HashBasedRouter#getSearchSlices(String,SolrParams,DocCollection).mjava","sourceNew":"  @Override\n  public Collection<Slice> getSearchSlicesSingle(String shardKey, SolrParams params, DocCollection collection) {\n    if (shardKey == null) {\n      // search across whole collection\n      // TODO: this may need modification in the future when shard splitting could cause an overlap\n      return collection.getSlices();\n    }\n\n    // use the shardKey as an id for plain hashing\n    return Collections.singletonList(getTargetSlice(shardKey, null, params, collection));\n  }\n\n","sourceOld":"  @Override\n  public Collection<Slice> getSearchSlices(String shardKey, SolrParams params, DocCollection collection) {\n    if (shardKey == null) {\n      // search across whole collection\n      // TODO: this may need modification in the future when shard splitting could cause an overlap\n      return collection.getSlices();\n    }\n\n    // use the shardKey as an id for plain hashing\n    return Collections.singletonList(getTargetSlice(shardKey, null, params, collection));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"919e6b4fea3dbc81ee31eff28b2b74b057f5361f","date":1355072041,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/HashBasedRouter#getSearchSlicesSingle(String,SolrParams,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/HashBasedRouter#getSearchSlicesSingle(String,SolrParams,DocCollection).mjava","sourceNew":"  @Override\n  public Collection<Slice> getSearchSlicesSingle(String shardKey, SolrParams params, DocCollection collection) {\n    if (shardKey == null) {\n      // search across whole collection\n      // TODO: this may need modification in the future when shard splitting could cause an overlap\n      return collection.getSlices();\n    }\n\n    // use the shardKey as an id for plain hashing\n    Slice slice = getTargetSlice(shardKey, null, params, collection);\n    return slice == null ? Collections.<Slice>emptyList() : Collections.singletonList(slice);\n  }\n\n","sourceOld":"  @Override\n  public Collection<Slice> getSearchSlicesSingle(String shardKey, SolrParams params, DocCollection collection) {\n    if (shardKey == null) {\n      // search across whole collection\n      // TODO: this may need modification in the future when shard splitting could cause an overlap\n      return collection.getSlices();\n    }\n\n    // use the shardKey as an id for plain hashing\n    return Collections.singletonList(getTargetSlice(shardKey, null, params, collection));\n  }\n\n","bugFix":null,"bugIntro":["747dd71fefcbc7142661c25334b74c518fef4d81"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/HashBasedRouter#getSearchSlicesSingle(String,SolrParams,DocCollection).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Collection<Slice> getSearchSlicesSingle(String shardKey, SolrParams params, DocCollection collection) {\n    if (shardKey == null) {\n      // search across whole collection\n      // TODO: this may need modification in the future when shard splitting could cause an overlap\n      return collection.getSlices();\n    }\n\n    // use the shardKey as an id for plain hashing\n    Slice slice = getTargetSlice(shardKey, null, params, collection);\n    return slice == null ? Collections.<Slice>emptyList() : Collections.singletonList(slice);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0beaed456aa3358e5e4a99ea2aea994ef6c81de3","date":1365434191,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/HashBasedRouter#getSearchSlicesSingle(String,SolrParams,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/HashBasedRouter#getSearchSlicesSingle(String,SolrParams,DocCollection).mjava","sourceNew":"  @Override\n  public Collection<Slice> getSearchSlicesSingle(String shardKey, SolrParams params, DocCollection collection) {\n    if (shardKey == null) {\n      // search across whole collection\n      // TODO: this may need modification in the future when shard splitting could cause an overlap\n      return collection.getActiveSlices();\n    }\n\n    // use the shardKey as an id for plain hashing\n    Slice slice = getTargetSlice(shardKey, null, params, collection);\n    return slice == null ? Collections.<Slice>emptyList() : Collections.singletonList(slice);\n  }\n\n","sourceOld":"  @Override\n  public Collection<Slice> getSearchSlicesSingle(String shardKey, SolrParams params, DocCollection collection) {\n    if (shardKey == null) {\n      // search across whole collection\n      // TODO: this may need modification in the future when shard splitting could cause an overlap\n      return collection.getSlices();\n    }\n\n    // use the shardKey as an id for plain hashing\n    Slice slice = getTargetSlice(shardKey, null, params, collection);\n    return slice == null ? Collections.<Slice>emptyList() : Collections.singletonList(slice);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"747dd71fefcbc7142661c25334b74c518fef4d81","date":1423504825,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/HashBasedRouter#getSearchSlicesSingle(String,SolrParams,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/HashBasedRouter#getSearchSlicesSingle(String,SolrParams,DocCollection).mjava","sourceNew":"  @Override\n  public Collection<Slice> getSearchSlicesSingle(String shardKey, SolrParams params, DocCollection collection) {\n    if (shardKey == null) {\n      // search across whole collection\n      // TODO: this may need modification in the future when shard splitting could cause an overlap\n      return collection.getActiveSlices();\n    }\n\n    // use the shardKey as an id for plain hashing\n    Slice slice = getTargetSlice(shardKey, null, null, params, collection);\n    return slice == null ? Collections.<Slice>emptyList() : Collections.singletonList(slice);\n  }\n\n","sourceOld":"  @Override\n  public Collection<Slice> getSearchSlicesSingle(String shardKey, SolrParams params, DocCollection collection) {\n    if (shardKey == null) {\n      // search across whole collection\n      // TODO: this may need modification in the future when shard splitting could cause an overlap\n      return collection.getActiveSlices();\n    }\n\n    // use the shardKey as an id for plain hashing\n    Slice slice = getTargetSlice(shardKey, null, params, collection);\n    return slice == null ? Collections.<Slice>emptyList() : Collections.singletonList(slice);\n  }\n\n","bugFix":["919e6b4fea3dbc81ee31eff28b2b74b057f5361f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eec5368fa415ebab044b7ae01de50d5b49519b7e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","919e6b4fea3dbc81ee31eff28b2b74b057f5361f"],"919e6b4fea3dbc81ee31eff28b2b74b057f5361f":["eec5368fa415ebab044b7ae01de50d5b49519b7e"],"747dd71fefcbc7142661c25334b74c518fef4d81":["0beaed456aa3358e5e4a99ea2aea994ef6c81de3"],"0beaed456aa3358e5e4a99ea2aea994ef6c81de3":["919e6b4fea3dbc81ee31eff28b2b74b057f5361f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["747dd71fefcbc7142661c25334b74c518fef4d81"]},"commit2Childs":{"eec5368fa415ebab044b7ae01de50d5b49519b7e":["919e6b4fea3dbc81ee31eff28b2b74b057f5361f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eec5368fa415ebab044b7ae01de50d5b49519b7e","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"919e6b4fea3dbc81ee31eff28b2b74b057f5361f":["407687e67faf6e1f02a211ca078d8e3eed631027","0beaed456aa3358e5e4a99ea2aea994ef6c81de3"],"747dd71fefcbc7142661c25334b74c518fef4d81":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0beaed456aa3358e5e4a99ea2aea994ef6c81de3":["747dd71fefcbc7142661c25334b74c518fef4d81"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}