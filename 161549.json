{"path":"solr/core/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputSource,String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputSource,String).mjava","pathOld":"solr/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputSource,String).mjava","sourceNew":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging & exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a SAX InputSource\n   * @param prefix an optional prefix that will be preprended to all non-absolute xpath expressions\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public Config(SolrResourceLoader loader, String name, InputSource is, String prefix) throws ParserConfigurationException, IOException, SAXException \n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader( null );\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    try {\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      \n      if (is == null) {\n        is = new InputSource(loader.openConfig(name));\n        is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(name));\n      }\n\n      // only enable xinclude, if a SystemId is available\n      if (is.getSystemId() != null) {\n        try {\n          dbf.setXIncludeAware(true);\n          dbf.setNamespaceAware(true);\n        } catch(UnsupportedOperationException e) {\n          log.warn(name + \" XML parser doesn't support XInclude option\");\n        }\n      }\n      \n      final DocumentBuilder db = dbf.newDocumentBuilder();\n      db.setEntityResolver(new SystemIdResolver(loader));\n      db.setErrorHandler(xmllog);\n      try {\n        doc = db.parse(is);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(is.getByteStream());\n      }\n\n      DOMUtil.substituteProperties(doc, loader.getCoreProperties());\n    } catch (ParserConfigurationException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch (SAXException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch( SolrException e ){\n    \tSolrException.log(log,\"Error in \"+name,e);\n    \tthrow e;\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging & exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a SAX InputSource\n   * @param prefix an optional prefix that will be preprended to all non-absolute xpath expressions\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public Config(SolrResourceLoader loader, String name, InputSource is, String prefix) throws ParserConfigurationException, IOException, SAXException \n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader( null );\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    try {\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      \n      if (is == null) {\n        is = new InputSource(loader.openConfig(name));\n        is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(name));\n      }\n\n      // only enable xinclude, if a SystemId is available\n      if (is.getSystemId() != null) {\n        try {\n          dbf.setXIncludeAware(true);\n          dbf.setNamespaceAware(true);\n        } catch(UnsupportedOperationException e) {\n          log.warn(name + \" XML parser doesn't support XInclude option\");\n        }\n      }\n      \n      final DocumentBuilder db = dbf.newDocumentBuilder();\n      db.setEntityResolver(new SystemIdResolver(loader));\n      db.setErrorHandler(xmllog);\n      try {\n        doc = db.parse(is);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(is.getByteStream());\n      }\n\n      DOMUtil.substituteProperties(doc, loader.getCoreProperties());\n    } catch (ParserConfigurationException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch (SAXException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch( SolrException e ){\n    \tSolrException.log(log,\"Error in \"+name,e);\n    \tthrow e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputSource,String).mjava","pathOld":"solr/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputSource,String).mjava","sourceNew":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging & exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a SAX InputSource\n   * @param prefix an optional prefix that will be preprended to all non-absolute xpath expressions\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public Config(SolrResourceLoader loader, String name, InputSource is, String prefix) throws ParserConfigurationException, IOException, SAXException \n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader( null );\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    try {\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      \n      if (is == null) {\n        is = new InputSource(loader.openConfig(name));\n        is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(name));\n      }\n\n      // only enable xinclude, if a SystemId is available\n      if (is.getSystemId() != null) {\n        try {\n          dbf.setXIncludeAware(true);\n          dbf.setNamespaceAware(true);\n        } catch(UnsupportedOperationException e) {\n          log.warn(name + \" XML parser doesn't support XInclude option\");\n        }\n      }\n      \n      final DocumentBuilder db = dbf.newDocumentBuilder();\n      db.setEntityResolver(new SystemIdResolver(loader));\n      db.setErrorHandler(xmllog);\n      try {\n        doc = db.parse(is);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(is.getByteStream());\n      }\n\n      DOMUtil.substituteProperties(doc, loader.getCoreProperties());\n    } catch (ParserConfigurationException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch (SAXException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch( SolrException e ){\n    \tSolrException.log(log,\"Error in \"+name,e);\n    \tthrow e;\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging & exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a SAX InputSource\n   * @param prefix an optional prefix that will be preprended to all non-absolute xpath expressions\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public Config(SolrResourceLoader loader, String name, InputSource is, String prefix) throws ParserConfigurationException, IOException, SAXException \n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader( null );\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    try {\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      \n      if (is == null) {\n        is = new InputSource(loader.openConfig(name));\n        is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(name));\n      }\n\n      // only enable xinclude, if a SystemId is available\n      if (is.getSystemId() != null) {\n        try {\n          dbf.setXIncludeAware(true);\n          dbf.setNamespaceAware(true);\n        } catch(UnsupportedOperationException e) {\n          log.warn(name + \" XML parser doesn't support XInclude option\");\n        }\n      }\n      \n      final DocumentBuilder db = dbf.newDocumentBuilder();\n      db.setEntityResolver(new SystemIdResolver(loader));\n      db.setErrorHandler(xmllog);\n      try {\n        doc = db.parse(is);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(is.getByteStream());\n      }\n\n      DOMUtil.substituteProperties(doc, loader.getCoreProperties());\n    } catch (ParserConfigurationException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch (SAXException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch( SolrException e ){\n    \tSolrException.log(log,\"Error in \"+name,e);\n    \tthrow e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputSource,String).mjava","pathOld":"solr/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputSource,String).mjava","sourceNew":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging & exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a SAX InputSource\n   * @param prefix an optional prefix that will be preprended to all non-absolute xpath expressions\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public Config(SolrResourceLoader loader, String name, InputSource is, String prefix) throws ParserConfigurationException, IOException, SAXException \n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader( null );\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    try {\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      \n      if (is == null) {\n        is = new InputSource(loader.openConfig(name));\n        is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(name));\n      }\n\n      // only enable xinclude, if a SystemId is available\n      if (is.getSystemId() != null) {\n        try {\n          dbf.setXIncludeAware(true);\n          dbf.setNamespaceAware(true);\n        } catch(UnsupportedOperationException e) {\n          log.warn(name + \" XML parser doesn't support XInclude option\");\n        }\n      }\n      \n      final DocumentBuilder db = dbf.newDocumentBuilder();\n      db.setEntityResolver(new SystemIdResolver(loader));\n      db.setErrorHandler(xmllog);\n      try {\n        doc = db.parse(is);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(is.getByteStream());\n      }\n\n      DOMUtil.substituteProperties(doc, loader.getCoreProperties());\n    } catch (ParserConfigurationException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch (SAXException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch( SolrException e ){\n    \tSolrException.log(log,\"Error in \"+name,e);\n    \tthrow e;\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging & exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a SAX InputSource\n   * @param prefix an optional prefix that will be preprended to all non-absolute xpath expressions\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public Config(SolrResourceLoader loader, String name, InputSource is, String prefix) throws ParserConfigurationException, IOException, SAXException \n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader( null );\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    try {\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      \n      if (is == null) {\n        is = new InputSource(loader.openConfig(name));\n        is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(name));\n      }\n\n      // only enable xinclude, if a SystemId is available\n      if (is.getSystemId() != null) {\n        try {\n          dbf.setXIncludeAware(true);\n          dbf.setNamespaceAware(true);\n        } catch(UnsupportedOperationException e) {\n          log.warn(name + \" XML parser doesn't support XInclude option\");\n        }\n      }\n      \n      final DocumentBuilder db = dbf.newDocumentBuilder();\n      db.setEntityResolver(new SystemIdResolver(loader));\n      db.setErrorHandler(xmllog);\n      try {\n        doc = db.parse(is);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(is.getByteStream());\n      }\n\n      DOMUtil.substituteProperties(doc, loader.getCoreProperties());\n    } catch (ParserConfigurationException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch (SAXException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch( SolrException e ){\n    \tSolrException.log(log,\"Error in \"+name,e);\n    \tthrow e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4901f8624f774c2b648e66567b63c59e901ac7c8","date":1329431044,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputSource,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputSource,String).mjava","sourceNew":"  public Config(SolrResourceLoader loader, String name, InputSource is, String prefix) throws ParserConfigurationException, IOException, SAXException \n  {\n    this(loader, name, is, prefix, true);\n  }\n\n","sourceOld":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging & exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a SAX InputSource\n   * @param prefix an optional prefix that will be preprended to all non-absolute xpath expressions\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public Config(SolrResourceLoader loader, String name, InputSource is, String prefix) throws ParserConfigurationException, IOException, SAXException \n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader( null );\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    try {\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      \n      if (is == null) {\n        is = new InputSource(loader.openConfig(name));\n        is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(name));\n      }\n\n      // only enable xinclude, if a SystemId is available\n      if (is.getSystemId() != null) {\n        try {\n          dbf.setXIncludeAware(true);\n          dbf.setNamespaceAware(true);\n        } catch(UnsupportedOperationException e) {\n          log.warn(name + \" XML parser doesn't support XInclude option\");\n        }\n      }\n      \n      final DocumentBuilder db = dbf.newDocumentBuilder();\n      db.setEntityResolver(new SystemIdResolver(loader));\n      db.setErrorHandler(xmllog);\n      try {\n        doc = db.parse(is);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(is.getByteStream());\n      }\n\n      DOMUtil.substituteProperties(doc, loader.getCoreProperties());\n    } catch (ParserConfigurationException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch (SAXException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch( SolrException e ){\n    \tSolrException.log(log,\"Error in \"+name,e);\n    \tthrow e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee622110ba6021d0390037e77574743c1e55348c","date":1546700916,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputSource,String).mjava","sourceNew":null,"sourceOld":"  public Config(SolrResourceLoader loader, String name, InputSource is, String prefix) throws ParserConfigurationException, IOException, SAXException \n  {\n    this(loader, name, is, prefix, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ee622110ba6021d0390037e77574743c1e55348c":["4901f8624f774c2b648e66567b63c59e901ac7c8"],"4901f8624f774c2b648e66567b63c59e901ac7c8":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ee622110ba6021d0390037e77574743c1e55348c"]},"commit2Childs":{"ee622110ba6021d0390037e77574743c1e55348c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4901f8624f774c2b648e66567b63c59e901ac7c8":["ee622110ba6021d0390037e77574743c1e55348c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["4901f8624f774c2b648e66567b63c59e901ac7c8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}