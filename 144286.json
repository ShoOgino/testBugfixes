{"path":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesWriterBase#BytesWriterBase(Directory,String,String,int,boolean,ByteBlockPool,AtomicLong).mjava","commits":[{"id":"763d13ecba7c2e244aa7c7690a878daae26227f6","date":1305814974,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesWriterBase#BytesWriterBase(Directory,String,String,int,boolean,ByteBlockPool,AtomicLong).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesWriterBase#BytesWriterBase(Directory,String,String,int,boolean,boolean,ByteBlockPool,AtomicLong).mjava","sourceNew":"    protected BytesWriterBase(Directory dir, String id, String codecName,\n        int version, boolean initIndex, ByteBlockPool pool,\n        AtomicLong bytesUsed) throws IOException {\n      super(bytesUsed);\n      this.id = id;\n      this.pool = pool;\n        datOut = dir.createOutput(IndexFileNames.segmentFileName(id, \"\",\n            DATA_EXTENSION));\n        CodecUtil.writeHeader(datOut, codecName, version);\n\n      if (initIndex) {\n        idxOut = dir.createOutput(IndexFileNames.segmentFileName(id, \"\",\n            INDEX_EXTENSION));\n        CodecUtil.writeHeader(idxOut, codecName, version);\n      } else {\n        idxOut = null;\n      }\n    }\n\n","sourceOld":"    protected BytesWriterBase(Directory dir, String id, String codecName,\n        int version, boolean initIndex, boolean initData, ByteBlockPool pool,\n        AtomicLong bytesUsed) throws IOException {\n      super(bytesUsed);\n      this.dir = dir;\n      this.id = id;\n      this.codecName = codecName;\n      this.version = version;\n      this.pool = pool;\n      if (initData) {\n        initDataOut();\n      }\n\n      if (initIndex) {\n        initIndexOut();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11352ebb2f3f885d30324a3f4684be92642a25ee","date":1306844538,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesWriterBase#BytesWriterBase(Directory,String,String,int,boolean,ByteBlockPool,AtomicLong).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesWriterBase#BytesWriterBase(Directory,String,String,int,boolean,ByteBlockPool,AtomicLong).mjava","sourceNew":"    protected BytesWriterBase(Directory dir, String id, String codecName,\n        int version, boolean initIndex, ByteBlockPool pool,\n        AtomicLong bytesUsed) throws IOException {\n      super(bytesUsed);\n      this.id = id;\n      this.pool = pool;\n      datOut = dir.createOutput(IndexFileNames.segmentFileName(id, \"\",\n            DATA_EXTENSION));\n      boolean success = false;\n      try {\n        CodecUtil.writeHeader(datOut, codecName, version);\n        if (initIndex) {\n          idxOut = dir.createOutput(IndexFileNames.segmentFileName(id, \"\",\n              INDEX_EXTENSION));\n          CodecUtil.writeHeader(idxOut, codecName, version);\n        } else {\n          idxOut = null;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeSafely(true, datOut, idxOut);\n        }\n      }\n    }\n\n","sourceOld":"    protected BytesWriterBase(Directory dir, String id, String codecName,\n        int version, boolean initIndex, ByteBlockPool pool,\n        AtomicLong bytesUsed) throws IOException {\n      super(bytesUsed);\n      this.id = id;\n      this.pool = pool;\n        datOut = dir.createOutput(IndexFileNames.segmentFileName(id, \"\",\n            DATA_EXTENSION));\n        CodecUtil.writeHeader(datOut, codecName, version);\n\n      if (initIndex) {\n        idxOut = dir.createOutput(IndexFileNames.segmentFileName(id, \"\",\n            INDEX_EXTENSION));\n        CodecUtil.writeHeader(idxOut, codecName, version);\n      } else {\n        idxOut = null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesWriterBase#BytesWriterBase(Directory,String,String,int,boolean,ByteBlockPool,AtomicLong).mjava","pathOld":"/dev/null","sourceNew":"    protected BytesWriterBase(Directory dir, String id, String codecName,\n        int version, boolean initIndex, ByteBlockPool pool,\n        AtomicLong bytesUsed) throws IOException {\n      super(bytesUsed);\n      this.id = id;\n      this.pool = pool;\n      datOut = dir.createOutput(IndexFileNames.segmentFileName(id, \"\",\n            DATA_EXTENSION));\n      boolean success = false;\n      try {\n        CodecUtil.writeHeader(datOut, codecName, version);\n        if (initIndex) {\n          idxOut = dir.createOutput(IndexFileNames.segmentFileName(id, \"\",\n              INDEX_EXTENSION));\n          CodecUtil.writeHeader(idxOut, codecName, version);\n        } else {\n          idxOut = null;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeSafely(true, datOut, idxOut);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesWriterBase#BytesWriterBase(Directory,String,String,int,boolean,ByteBlockPool,AtomicLong).mjava","pathOld":"/dev/null","sourceNew":"    protected BytesWriterBase(Directory dir, String id, String codecName,\n        int version, boolean initIndex, ByteBlockPool pool,\n        AtomicLong bytesUsed) throws IOException {\n      super(bytesUsed);\n      this.id = id;\n      this.pool = pool;\n      datOut = dir.createOutput(IndexFileNames.segmentFileName(id, \"\",\n            DATA_EXTENSION));\n      boolean success = false;\n      try {\n        CodecUtil.writeHeader(datOut, codecName, version);\n        if (initIndex) {\n          idxOut = dir.createOutput(IndexFileNames.segmentFileName(id, \"\",\n              INDEX_EXTENSION));\n          CodecUtil.writeHeader(idxOut, codecName, version);\n        } else {\n          idxOut = null;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeSafely(true, datOut, idxOut);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesWriterBase#BytesWriterBase(Directory,String,String,int,boolean,ByteBlockPool,AtomicLong,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesWriterBase#BytesWriterBase(Directory,String,String,int,boolean,ByteBlockPool,AtomicLong).mjava","sourceNew":"    protected BytesWriterBase(Directory dir, String id, String codecName,\n        int version, boolean initIndex, ByteBlockPool pool,\n        AtomicLong bytesUsed, IOContext context) throws IOException {\n      super(bytesUsed);\n      this.id = id;\n      this.pool = pool;\n      datOut = dir.createOutput(IndexFileNames.segmentFileName(id, \"\",\n            DATA_EXTENSION), context);\n      boolean success = false;\n      try {\n        CodecUtil.writeHeader(datOut, codecName, version);\n        if (initIndex) {\n          idxOut = dir.createOutput(IndexFileNames.segmentFileName(id, \"\",\n              INDEX_EXTENSION), context);\n          CodecUtil.writeHeader(idxOut, codecName, version);\n        } else {\n          idxOut = null;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeSafely(true, datOut, idxOut);\n        }\n      }\n    }\n\n","sourceOld":"    protected BytesWriterBase(Directory dir, String id, String codecName,\n        int version, boolean initIndex, ByteBlockPool pool,\n        AtomicLong bytesUsed) throws IOException {\n      super(bytesUsed);\n      this.id = id;\n      this.pool = pool;\n      datOut = dir.createOutput(IndexFileNames.segmentFileName(id, \"\",\n            DATA_EXTENSION));\n      boolean success = false;\n      try {\n        CodecUtil.writeHeader(datOut, codecName, version);\n        if (initIndex) {\n          idxOut = dir.createOutput(IndexFileNames.segmentFileName(id, \"\",\n              INDEX_EXTENSION));\n          CodecUtil.writeHeader(idxOut, codecName, version);\n        } else {\n          idxOut = null;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeSafely(true, datOut, idxOut);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b7a068f550e13e49517c6899cc3b94c8eeb72e5","date":1309354772,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesWriterBase#getIndexOut().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesWriterBase#BytesWriterBase(Directory,String,String,int,boolean,ByteBlockPool,AtomicLong).mjava","sourceNew":"    protected IndexOutput getIndexOut() throws IOException {\n      boolean success = false;\n      try {\n        if (idxOut == null) {\n          idxOut = dir.createOutput(IndexFileNames.segmentFileName(id, \"\",\n              INDEX_EXTENSION));\n          CodecUtil.writeHeader(idxOut, codecName, version);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeSafely(true, idxOut);\n        }\n      }\n      return idxOut;\n    }\n\n","sourceOld":"    protected BytesWriterBase(Directory dir, String id, String codecName,\n        int version, boolean initIndex, ByteBlockPool pool,\n        AtomicLong bytesUsed) throws IOException {\n      super(bytesUsed);\n      this.id = id;\n      this.pool = pool;\n      datOut = dir.createOutput(IndexFileNames.segmentFileName(id, \"\",\n            DATA_EXTENSION));\n      boolean success = false;\n      try {\n        CodecUtil.writeHeader(datOut, codecName, version);\n        if (initIndex) {\n          idxOut = dir.createOutput(IndexFileNames.segmentFileName(id, \"\",\n              INDEX_EXTENSION));\n          CodecUtil.writeHeader(idxOut, codecName, version);\n        } else {\n          idxOut = null;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeSafely(true, datOut, idxOut);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesWriterBase#BytesWriterBase(Directory,String,String,int,boolean,ByteBlockPool,AtomicLong).mjava","sourceNew":null,"sourceOld":"    protected BytesWriterBase(Directory dir, String id, String codecName,\n        int version, boolean initIndex, ByteBlockPool pool,\n        AtomicLong bytesUsed) throws IOException {\n      super(bytesUsed);\n      this.id = id;\n      this.pool = pool;\n      datOut = dir.createOutput(IndexFileNames.segmentFileName(id, \"\",\n            DATA_EXTENSION));\n      boolean success = false;\n      try {\n        CodecUtil.writeHeader(datOut, codecName, version);\n        if (initIndex) {\n          idxOut = dir.createOutput(IndexFileNames.segmentFileName(id, \"\",\n              INDEX_EXTENSION));\n          CodecUtil.writeHeader(idxOut, codecName, version);\n        } else {\n          idxOut = null;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeSafely(true, datOut, idxOut);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2e8d7ba2175f47e280231533f7d3016249cea88b"],"763d13ecba7c2e244aa7c7690a878daae26227f6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","11352ebb2f3f885d30324a3f4684be92642a25ee"],"11352ebb2f3f885d30324a3f4684be92642a25ee":["763d13ecba7c2e244aa7c7690a878daae26227f6"],"3b7a068f550e13e49517c6899cc3b94c8eeb72e5":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","3b7a068f550e13e49517c6899cc3b94c8eeb72e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3b7a068f550e13e49517c6899cc3b94c8eeb72e5"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"763d13ecba7c2e244aa7c7690a878daae26227f6":["11352ebb2f3f885d30324a3f4684be92642a25ee"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","3b7a068f550e13e49517c6899cc3b94c8eeb72e5","639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"11352ebb2f3f885d30324a3f4684be92642a25ee":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","763d13ecba7c2e244aa7c7690a878daae26227f6","2e8d7ba2175f47e280231533f7d3016249cea88b"],"3b7a068f550e13e49517c6899cc3b94c8eeb72e5":["817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}