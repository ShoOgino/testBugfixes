{"path":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#commitMerge(MergePolicy.OneMerge,SegmentMerger,int,SegmentReader).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#commitMerge(MergePolicy.OneMerge,SegmentMerger,int,SegmentReader).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/IndexWriter#commitMerge(MergePolicy.OneMerge,SegmentMerger,int,SegmentReader).mjava","sourceNew":"  /* FIXME if we want to support non-contiguous segment merges */\n  synchronized private boolean commitMerge(MergePolicy.OneMerge merge, SegmentMerger merger, int mergedDocCount, SegmentReader mergedReader) throws IOException {\n\n    assert testPoint(\"startCommitMerge\");\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete merge\");\n    }\n\n    if (infoStream != null)\n      message(\"commitMerge: \" + merge.segString(directory) + \" index=\" + segString());\n\n    assert merge.registerDone;\n\n    // If merge was explicitly aborted, or, if rollback() or\n    // rollbackTransaction() had been called since our merge\n    // started (which results in an unqualified\n    // deleter.refresh() call that will remove any index\n    // file that current segments does not reference), we\n    // abort this merge\n    if (merge.isAborted()) {\n      if (infoStream != null)\n        message(\"commitMerge: skipping merge \" + merge.segString(directory) + \": it was aborted\");\n\n      deleter.refresh(merge.info.name);\n      return false;\n    }\n\n    final int start = ensureContiguousMerge(merge);\n\n    commitMergedDeletes(merge, mergedReader);\n    docWriter.remapDeletes(segmentInfos, merger.getDocMaps(), merger.getDelCounts(), merge, mergedDocCount);\n      \n    // Simple optimization: if the doc store we are using\n    // has been closed and is in now compound format (but\n    // wasn't when we started), then we will switch to the\n    // compound format as well:\n    final String mergeDocStoreSegment = merge.info.getDocStoreSegment(); \n    if (mergeDocStoreSegment != null && !merge.info.getDocStoreIsCompoundFile()) {\n      final int size = segmentInfos.size();\n      for(int i=0;i<size;i++) {\n        final SegmentInfo info = segmentInfos.info(i);\n        final String docStoreSegment = info.getDocStoreSegment();\n        if (docStoreSegment != null &&\n            docStoreSegment.equals(mergeDocStoreSegment) && \n            info.getDocStoreIsCompoundFile()) {\n          merge.info.setDocStoreIsCompoundFile(true);\n          break;\n        }\n      }\n    }\n\n    merge.info.setHasProx(merger.hasProx());\n\n    segmentInfos.subList(start, start + merge.segments.size()).clear();\n    assert !segmentInfos.contains(merge.info);\n    segmentInfos.add(start, merge.info);\n\n    // Must note the change to segmentInfos so any commits\n    // in-flight don't lose it:\n    checkpoint();\n\n    // If the merged segments had pending changes, clear\n    // them so that they don't bother writing them to\n    // disk, updating SegmentInfo, etc.:\n    readerPool.clear(merge.segments);\n\n    if (merge.optimize)\n      segmentsToOptimize.add(merge.info);\n    return true;\n  }\n\n","sourceOld":"  /* FIXME if we want to support non-contiguous segment merges */\n  synchronized private boolean commitMerge(MergePolicy.OneMerge merge, SegmentMerger merger, int mergedDocCount, SegmentReader mergedReader) throws IOException {\n\n    assert testPoint(\"startCommitMerge\");\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete merge\");\n    }\n\n    if (infoStream != null)\n      message(\"commitMerge: \" + merge.segString(directory) + \" index=\" + segString());\n\n    assert merge.registerDone;\n\n    // If merge was explicitly aborted, or, if rollback() or\n    // rollbackTransaction() had been called since our merge\n    // started (which results in an unqualified\n    // deleter.refresh() call that will remove any index\n    // file that current segments does not reference), we\n    // abort this merge\n    if (merge.isAborted()) {\n      if (infoStream != null)\n        message(\"commitMerge: skipping merge \" + merge.segString(directory) + \": it was aborted\");\n\n      deleter.refresh(merge.info.name);\n      return false;\n    }\n\n    final int start = ensureContiguousMerge(merge);\n\n    commitMergedDeletes(merge, mergedReader);\n    docWriter.remapDeletes(segmentInfos, merger.getDocMaps(), merger.getDelCounts(), merge, mergedDocCount);\n      \n    // Simple optimization: if the doc store we are using\n    // has been closed and is in now compound format (but\n    // wasn't when we started), then we will switch to the\n    // compound format as well:\n    final String mergeDocStoreSegment = merge.info.getDocStoreSegment(); \n    if (mergeDocStoreSegment != null && !merge.info.getDocStoreIsCompoundFile()) {\n      final int size = segmentInfos.size();\n      for(int i=0;i<size;i++) {\n        final SegmentInfo info = segmentInfos.info(i);\n        final String docStoreSegment = info.getDocStoreSegment();\n        if (docStoreSegment != null &&\n            docStoreSegment.equals(mergeDocStoreSegment) && \n            info.getDocStoreIsCompoundFile()) {\n          merge.info.setDocStoreIsCompoundFile(true);\n          break;\n        }\n      }\n    }\n\n    merge.info.setHasProx(merger.hasProx());\n\n    segmentInfos.subList(start, start + merge.segments.size()).clear();\n    assert !segmentInfos.contains(merge.info);\n    segmentInfos.add(start, merge.info);\n\n    // Must note the change to segmentInfos so any commits\n    // in-flight don't lose it:\n    checkpoint();\n\n    // If the merged segments had pending changes, clear\n    // them so that they don't bother writing them to\n    // disk, updating SegmentInfo, etc.:\n    readerPool.clear(merge.segments);\n\n    if (merge.optimize)\n      segmentsToOptimize.add(merge.info);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#commitMerge(MergePolicy.OneMerge,SegmentMerger,int,SegmentReader).mjava","sourceNew":null,"sourceOld":"  /* FIXME if we want to support non-contiguous segment merges */\n  synchronized private boolean commitMerge(MergePolicy.OneMerge merge, SegmentMerger merger, int mergedDocCount, SegmentReader mergedReader) throws IOException {\n\n    assert testPoint(\"startCommitMerge\");\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete merge\");\n    }\n\n    if (infoStream != null)\n      message(\"commitMerge: \" + merge.segString(directory) + \" index=\" + segString());\n\n    assert merge.registerDone;\n\n    // If merge was explicitly aborted, or, if rollback() or\n    // rollbackTransaction() had been called since our merge\n    // started (which results in an unqualified\n    // deleter.refresh() call that will remove any index\n    // file that current segments does not reference), we\n    // abort this merge\n    if (merge.isAborted()) {\n      if (infoStream != null)\n        message(\"commitMerge: skipping merge \" + merge.segString(directory) + \": it was aborted\");\n\n      deleter.refresh(merge.info.name);\n      return false;\n    }\n\n    final int start = ensureContiguousMerge(merge);\n\n    commitMergedDeletes(merge, mergedReader);\n    docWriter.remapDeletes(segmentInfos, merger.getDocMaps(), merger.getDelCounts(), merge, mergedDocCount);\n      \n    // Simple optimization: if the doc store we are using\n    // has been closed and is in now compound format (but\n    // wasn't when we started), then we will switch to the\n    // compound format as well:\n    final String mergeDocStoreSegment = merge.info.getDocStoreSegment(); \n    if (mergeDocStoreSegment != null && !merge.info.getDocStoreIsCompoundFile()) {\n      final int size = segmentInfos.size();\n      for(int i=0;i<size;i++) {\n        final SegmentInfo info = segmentInfos.info(i);\n        final String docStoreSegment = info.getDocStoreSegment();\n        if (docStoreSegment != null &&\n            docStoreSegment.equals(mergeDocStoreSegment) && \n            info.getDocStoreIsCompoundFile()) {\n          merge.info.setDocStoreIsCompoundFile(true);\n          break;\n        }\n      }\n    }\n\n    merge.info.setHasProx(merger.hasProx());\n\n    segmentInfos.subList(start, start + merge.segments.size()).clear();\n    assert !segmentInfos.contains(merge.info);\n    segmentInfos.add(start, merge.info);\n\n    // Must note the change to segmentInfos so any commits\n    // in-flight don't lose it:\n    checkpoint();\n\n    // If the merged segments had pending changes, clear\n    // them so that they don't bother writing them to\n    // disk, updating SegmentInfo, etc.:\n    readerPool.clear(merge.segments);\n\n    if (merge.optimize)\n      segmentsToOptimize.add(merge.info);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}