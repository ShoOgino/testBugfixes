{"path":"solr/core/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#export().mjava","commits":[{"id":"ff403346522eaa9de75403763e297e83a3ea585c","date":1384904731,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#export().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<?> export() {\n    final NamedList<Object> base = (NamedList<Object>)super.export();\n    NamedList<NamedList<?>> facetList = new NamedList<NamedList<?>>();\n    \n    // Add the field facet buckets to the output\n    base.add(\"fieldFacets\",facetList);\n    for( FieldFacetRequest freq : request.getFieldFacets() ){\n      final String name = freq.getName();\n      if (hiddenFieldFacets.contains(name)) {\n        continue;\n      }\n      final Map<String,Expression[]> buckets = fieldFacetExpressions.get(name);\n      final NamedList<Object> bucketBase = new NamedList<Object>();\n\n      Iterable<Entry<String,Expression[]>> iter = buckets.entrySet();\n      \n      final FieldFacetRequest fr = (FieldFacetRequest) freq;\n     \n      final FacetSortSpecification sort = fr.getSort();\n      final int limit = fr.getLimit();\n      final int offset = fr.getOffset();\n      final boolean showMissing = fr.showsMissing();\n      if (!showMissing) {\n        buckets.remove(MISSING_VALUE);\n      }\n      // Sorting the buckets if a sort specification is provided\n      if( sort != null && buckets.values().iterator().hasNext()){\n        int sortPlace = Arrays.binarySearch(expressionNames, sort.getStatistic());\n        final Expression first = buckets.values().iterator().next()[sortPlace];\n        final Comparator<Expression> comp = (Comparator<Expression>) first.comparator(sort.getDirection());\n        \n        final List<Entry<String,Expression[]>> sorted = new ArrayList<Entry<String,Expression[]>>(buckets.size());\n        Iterables.addAll(sorted, iter);\n        Collections.sort(sorted, new EntryComparator(comp,sortPlace));\n        iter = sorted;\n      }\n      // apply the limit\n      if( limit > AnalyticsContentHandler.DEFAULT_FACET_LIMIT ){\n        if( offset > 0 ){\n          iter = Iterables.skip(iter, offset);\n        }\n        iter = Iterables.limit(iter, limit);\n      }\n      \n      // Export each expression in the bucket.\n      for( Entry<String,Expression[]> bucket : iter ){\n        bucketBase.add(bucket.getKey(),export(bucket.getValue()));\n      }\n      \n      facetList.add(name, bucketBase);\n    }\n\n    // Add the range facet buckets to the output\n    facetList = new NamedList<NamedList<?>>();\n    base.add(\"rangeFacets\",facetList);\n    for( RangeFacetRequest freq : request.getRangeFacets() ){\n      final String name = freq.getName();\n      final Map<String,Expression[]> buckets = rangeFacetExpressions.get(name);\n      final NamedList<Object> bucketBase = new NamedList<Object>();\n\n      Iterable<Entry<String,Expression[]>> iter = buckets.entrySet();\n      \n      for( Entry<String,Expression[]> bucket : iter ){\n        bucketBase.add(bucket.getKey(),export(bucket.getValue()));\n      }\n      \n      facetList.add(name, bucketBase);\n    }\n    \n    // Add the query facet buckets to the output\n    facetList = new NamedList<NamedList<?>>();\n    base.add(\"queryFacets\",facetList);\n    for( QueryFacetRequest freq : request.getQueryFacets() ){\n      final String name = freq.getName();\n      final Map<String,Expression[]> buckets = queryFacetExpressions.get(name);\n      final NamedList<Object> bucketBase = new NamedList<Object>();\n\n      Iterable<Entry<String,Expression[]>> iter = buckets.entrySet();\n      \n      for( Entry<String,Expression[]> bucket : iter ){\n        bucketBase.add(bucket.getKey(),export(bucket.getValue()));\n      }\n      \n      facetList.add(name, bucketBase);\n    }\n\n    return base;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#export().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<?> export() {\n    final NamedList<Object> base = (NamedList<Object>)super.export();\n    NamedList<NamedList<?>> facetList = new NamedList<NamedList<?>>();\n    \n    // Add the field facet buckets to the output\n    base.add(\"fieldFacets\",facetList);\n    for( FieldFacetRequest freq : request.getFieldFacets() ){\n      final String name = freq.getName();\n      if (hiddenFieldFacets.contains(name)) {\n        continue;\n      }\n      final Map<String,Expression[]> buckets = fieldFacetExpressions.get(name);\n      final NamedList<Object> bucketBase = new NamedList<Object>();\n\n      Iterable<Entry<String,Expression[]>> iter = buckets.entrySet();\n      \n      final FieldFacetRequest fr = (FieldFacetRequest) freq;\n     \n      final FacetSortSpecification sort = fr.getSort();\n      final int limit = fr.getLimit();\n      final int offset = fr.getOffset();\n      final boolean showMissing = fr.showsMissing();\n      if (!showMissing) {\n        buckets.remove(MISSING_VALUE);\n      }\n      // Sorting the buckets if a sort specification is provided\n      if( sort != null && buckets.values().iterator().hasNext()){\n        int sortPlace = Arrays.binarySearch(expressionNames, sort.getStatistic());\n        final Expression first = buckets.values().iterator().next()[sortPlace];\n        final Comparator<Expression> comp = (Comparator<Expression>) first.comparator(sort.getDirection());\n        \n        final List<Entry<String,Expression[]>> sorted = new ArrayList<Entry<String,Expression[]>>(buckets.size());\n        Iterables.addAll(sorted, iter);\n        Collections.sort(sorted, new EntryComparator(comp,sortPlace));\n        iter = sorted;\n      }\n      // apply the limit\n      if( limit > AnalyticsContentHandler.DEFAULT_FACET_LIMIT ){\n        if( offset > 0 ){\n          iter = Iterables.skip(iter, offset);\n        }\n        iter = Iterables.limit(iter, limit);\n      }\n      \n      // Export each expression in the bucket.\n      for( Entry<String,Expression[]> bucket : iter ){\n        bucketBase.add(bucket.getKey(),export(bucket.getValue()));\n      }\n      \n      facetList.add(name, bucketBase);\n    }\n\n    // Add the range facet buckets to the output\n    facetList = new NamedList<NamedList<?>>();\n    base.add(\"rangeFacets\",facetList);\n    for( RangeFacetRequest freq : request.getRangeFacets() ){\n      final String name = freq.getName();\n      final Map<String,Expression[]> buckets = rangeFacetExpressions.get(name);\n      final NamedList<Object> bucketBase = new NamedList<Object>();\n\n      Iterable<Entry<String,Expression[]>> iter = buckets.entrySet();\n      \n      for( Entry<String,Expression[]> bucket : iter ){\n        bucketBase.add(bucket.getKey(),export(bucket.getValue()));\n      }\n      \n      facetList.add(name, bucketBase);\n    }\n    \n    // Add the query facet buckets to the output\n    facetList = new NamedList<NamedList<?>>();\n    base.add(\"queryFacets\",facetList);\n    for( QueryFacetRequest freq : request.getQueryFacets() ){\n      final String name = freq.getName();\n      final Map<String,Expression[]> buckets = queryFacetExpressions.get(name);\n      final NamedList<Object> bucketBase = new NamedList<Object>();\n\n      Iterable<Entry<String,Expression[]>> iter = buckets.entrySet();\n      \n      for( Entry<String,Expression[]> bucket : iter ){\n        bucketBase.add(bucket.getKey(),export(bucket.getValue()));\n      }\n      \n      facetList.add(name, bucketBase);\n    }\n\n    return base;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#export().mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#export().mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<?> export() {\n    final NamedList<Object> base = (NamedList<Object>)super.export();\n    NamedList<NamedList<?>> facetList = new NamedList<>();\n    \n    // Add the field facet buckets to the output\n    base.add(\"fieldFacets\",facetList);\n    for( FieldFacetRequest freq : request.getFieldFacets() ){\n      final String name = freq.getName();\n      if (hiddenFieldFacets.contains(name)) {\n        continue;\n      }\n      final Map<String,Expression[]> buckets = fieldFacetExpressions.get(name);\n      final NamedList<Object> bucketBase = new NamedList<>();\n\n      Iterable<Entry<String,Expression[]>> iter = buckets.entrySet();\n      \n      final FieldFacetRequest fr = (FieldFacetRequest) freq;\n     \n      final FacetSortSpecification sort = fr.getSort();\n      final int limit = fr.getLimit();\n      final int offset = fr.getOffset();\n      final boolean showMissing = fr.showsMissing();\n      if (!showMissing) {\n        buckets.remove(MISSING_VALUE);\n      }\n      // Sorting the buckets if a sort specification is provided\n      if( sort != null && buckets.values().iterator().hasNext()){\n        int sortPlace = Arrays.binarySearch(expressionNames, sort.getStatistic());\n        final Expression first = buckets.values().iterator().next()[sortPlace];\n        final Comparator<Expression> comp = (Comparator<Expression>) first.comparator(sort.getDirection());\n        \n        final List<Entry<String,Expression[]>> sorted = new ArrayList<>(buckets.size());\n        Iterables.addAll(sorted, iter);\n        Collections.sort(sorted, new EntryComparator(comp,sortPlace));\n        iter = sorted;\n      }\n      // apply the limit\n      if( limit > AnalyticsContentHandler.DEFAULT_FACET_LIMIT ){\n        if( offset > 0 ){\n          iter = Iterables.skip(iter, offset);\n        }\n        iter = Iterables.limit(iter, limit);\n      }\n      \n      // Export each expression in the bucket.\n      for( Entry<String,Expression[]> bucket : iter ){\n        bucketBase.add(bucket.getKey(),export(bucket.getValue()));\n      }\n      \n      facetList.add(name, bucketBase);\n    }\n\n    // Add the range facet buckets to the output\n    facetList = new NamedList<>();\n    base.add(\"rangeFacets\",facetList);\n    for( RangeFacetRequest freq : request.getRangeFacets() ){\n      final String name = freq.getName();\n      final Map<String,Expression[]> buckets = rangeFacetExpressions.get(name);\n      final NamedList<Object> bucketBase = new NamedList<>();\n\n      Iterable<Entry<String,Expression[]>> iter = buckets.entrySet();\n      \n      for( Entry<String,Expression[]> bucket : iter ){\n        bucketBase.add(bucket.getKey(),export(bucket.getValue()));\n      }\n      \n      facetList.add(name, bucketBase);\n    }\n    \n    // Add the query facet buckets to the output\n    facetList = new NamedList<>();\n    base.add(\"queryFacets\",facetList);\n    for( QueryFacetRequest freq : request.getQueryFacets() ){\n      final String name = freq.getName();\n      final Map<String,Expression[]> buckets = queryFacetExpressions.get(name);\n      final NamedList<Object> bucketBase = new NamedList<>();\n\n      Iterable<Entry<String,Expression[]>> iter = buckets.entrySet();\n      \n      for( Entry<String,Expression[]> bucket : iter ){\n        bucketBase.add(bucket.getKey(),export(bucket.getValue()));\n      }\n      \n      facetList.add(name, bucketBase);\n    }\n\n    return base;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<?> export() {\n    final NamedList<Object> base = (NamedList<Object>)super.export();\n    NamedList<NamedList<?>> facetList = new NamedList<NamedList<?>>();\n    \n    // Add the field facet buckets to the output\n    base.add(\"fieldFacets\",facetList);\n    for( FieldFacetRequest freq : request.getFieldFacets() ){\n      final String name = freq.getName();\n      if (hiddenFieldFacets.contains(name)) {\n        continue;\n      }\n      final Map<String,Expression[]> buckets = fieldFacetExpressions.get(name);\n      final NamedList<Object> bucketBase = new NamedList<Object>();\n\n      Iterable<Entry<String,Expression[]>> iter = buckets.entrySet();\n      \n      final FieldFacetRequest fr = (FieldFacetRequest) freq;\n     \n      final FacetSortSpecification sort = fr.getSort();\n      final int limit = fr.getLimit();\n      final int offset = fr.getOffset();\n      final boolean showMissing = fr.showsMissing();\n      if (!showMissing) {\n        buckets.remove(MISSING_VALUE);\n      }\n      // Sorting the buckets if a sort specification is provided\n      if( sort != null && buckets.values().iterator().hasNext()){\n        int sortPlace = Arrays.binarySearch(expressionNames, sort.getStatistic());\n        final Expression first = buckets.values().iterator().next()[sortPlace];\n        final Comparator<Expression> comp = (Comparator<Expression>) first.comparator(sort.getDirection());\n        \n        final List<Entry<String,Expression[]>> sorted = new ArrayList<Entry<String,Expression[]>>(buckets.size());\n        Iterables.addAll(sorted, iter);\n        Collections.sort(sorted, new EntryComparator(comp,sortPlace));\n        iter = sorted;\n      }\n      // apply the limit\n      if( limit > AnalyticsContentHandler.DEFAULT_FACET_LIMIT ){\n        if( offset > 0 ){\n          iter = Iterables.skip(iter, offset);\n        }\n        iter = Iterables.limit(iter, limit);\n      }\n      \n      // Export each expression in the bucket.\n      for( Entry<String,Expression[]> bucket : iter ){\n        bucketBase.add(bucket.getKey(),export(bucket.getValue()));\n      }\n      \n      facetList.add(name, bucketBase);\n    }\n\n    // Add the range facet buckets to the output\n    facetList = new NamedList<NamedList<?>>();\n    base.add(\"rangeFacets\",facetList);\n    for( RangeFacetRequest freq : request.getRangeFacets() ){\n      final String name = freq.getName();\n      final Map<String,Expression[]> buckets = rangeFacetExpressions.get(name);\n      final NamedList<Object> bucketBase = new NamedList<Object>();\n\n      Iterable<Entry<String,Expression[]>> iter = buckets.entrySet();\n      \n      for( Entry<String,Expression[]> bucket : iter ){\n        bucketBase.add(bucket.getKey(),export(bucket.getValue()));\n      }\n      \n      facetList.add(name, bucketBase);\n    }\n    \n    // Add the query facet buckets to the output\n    facetList = new NamedList<NamedList<?>>();\n    base.add(\"queryFacets\",facetList);\n    for( QueryFacetRequest freq : request.getQueryFacets() ){\n      final String name = freq.getName();\n      final Map<String,Expression[]> buckets = queryFacetExpressions.get(name);\n      final NamedList<Object> bucketBase = new NamedList<Object>();\n\n      Iterable<Entry<String,Expression[]>> iter = buckets.entrySet();\n      \n      for( Entry<String,Expression[]> bucket : iter ){\n        bucketBase.add(bucket.getKey(),export(bucket.getValue()));\n      }\n      \n      facetList.add(name, bucketBase);\n    }\n\n    return base;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#export().mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#export().mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<?> export() {\n    final NamedList<Object> base = (NamedList<Object>)super.export();\n    NamedList<NamedList<?>> facetList = new NamedList<>();\n    \n    // Add the field facet buckets to the output\n    base.add(\"fieldFacets\",facetList);\n    for( FieldFacetRequest freq : request.getFieldFacets() ){\n      final String name = freq.getName();\n      if (hiddenFieldFacets.contains(name)) {\n        continue;\n      }\n      final Map<String,Expression[]> buckets = fieldFacetExpressions.get(name);\n      final NamedList<Object> bucketBase = new NamedList<>();\n\n      Iterable<Entry<String,Expression[]>> iter = buckets.entrySet();\n      \n      final FieldFacetRequest fr = (FieldFacetRequest) freq;\n     \n      final FacetSortSpecification sort = fr.getSort();\n      final int limit = fr.getLimit();\n      final int offset = fr.getOffset();\n      final boolean showMissing = fr.showsMissing();\n      if (!showMissing) {\n        buckets.remove(MISSING_VALUE);\n      }\n      // Sorting the buckets if a sort specification is provided\n      if( sort != null && buckets.values().iterator().hasNext()){\n        int sortPlace = Arrays.binarySearch(expressionNames, sort.getStatistic());\n        final Expression first = buckets.values().iterator().next()[sortPlace];\n        final Comparator<Expression> comp = (Comparator<Expression>) first.comparator(sort.getDirection());\n        \n        final List<Entry<String,Expression[]>> sorted = new ArrayList<>(buckets.size());\n        Iterables.addAll(sorted, iter);\n        Collections.sort(sorted, new EntryComparator(comp,sortPlace));\n        iter = sorted;\n      }\n      // apply the limit\n      if( limit > AnalyticsContentHandler.DEFAULT_FACET_LIMIT ){\n        if( offset > 0 ){\n          iter = Iterables.skip(iter, offset);\n        }\n        iter = Iterables.limit(iter, limit);\n      }\n      \n      // Export each expression in the bucket.\n      for( Entry<String,Expression[]> bucket : iter ){\n        bucketBase.add(bucket.getKey(),export(bucket.getValue()));\n      }\n      \n      facetList.add(name, bucketBase);\n    }\n\n    // Add the range facet buckets to the output\n    facetList = new NamedList<>();\n    base.add(\"rangeFacets\",facetList);\n    for( RangeFacetRequest freq : request.getRangeFacets() ){\n      final String name = freq.getName();\n      final Map<String,Expression[]> buckets = rangeFacetExpressions.get(name);\n      final NamedList<Object> bucketBase = new NamedList<>();\n\n      Iterable<Entry<String,Expression[]>> iter = buckets.entrySet();\n      \n      for( Entry<String,Expression[]> bucket : iter ){\n        bucketBase.add(bucket.getKey(),export(bucket.getValue()));\n      }\n      \n      facetList.add(name, bucketBase);\n    }\n    \n    // Add the query facet buckets to the output\n    facetList = new NamedList<>();\n    base.add(\"queryFacets\",facetList);\n    for( QueryFacetRequest freq : request.getQueryFacets() ){\n      final String name = freq.getName();\n      final Map<String,Expression[]> buckets = queryFacetExpressions.get(name);\n      final NamedList<Object> bucketBase = new NamedList<>();\n\n      Iterable<Entry<String,Expression[]>> iter = buckets.entrySet();\n      \n      for( Entry<String,Expression[]> bucket : iter ){\n        bucketBase.add(bucket.getKey(),export(bucket.getValue()));\n      }\n      \n      facetList.add(name, bucketBase);\n    }\n\n    return base;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<?> export() {\n    final NamedList<Object> base = (NamedList<Object>)super.export();\n    NamedList<NamedList<?>> facetList = new NamedList<>();\n    \n    // Add the field facet buckets to the output\n    base.add(\"fieldFacets\",facetList);\n    for( FieldFacetRequest freq : request.getFieldFacets() ){\n      final String name = freq.getName();\n      if (hiddenFieldFacets.contains(name)) {\n        continue;\n      }\n      final Map<String,Expression[]> buckets = fieldFacetExpressions.get(name);\n      final NamedList<Object> bucketBase = new NamedList<>();\n\n      Iterable<Entry<String,Expression[]>> iter = buckets.entrySet();\n      \n      final FieldFacetRequest fr = (FieldFacetRequest) freq;\n     \n      final FacetSortSpecification sort = fr.getSort();\n      final int limit = fr.getLimit();\n      final int offset = fr.getOffset();\n      final boolean showMissing = fr.showsMissing();\n      if (!showMissing) {\n        buckets.remove(MISSING_VALUE);\n      }\n      // Sorting the buckets if a sort specification is provided\n      if( sort != null && buckets.values().iterator().hasNext()){\n        int sortPlace = Arrays.binarySearch(expressionNames, sort.getStatistic());\n        final Expression first = buckets.values().iterator().next()[sortPlace];\n        final Comparator<Expression> comp = (Comparator<Expression>) first.comparator(sort.getDirection());\n        \n        final List<Entry<String,Expression[]>> sorted = new ArrayList<>(buckets.size());\n        Iterables.addAll(sorted, iter);\n        Collections.sort(sorted, new EntryComparator(comp,sortPlace));\n        iter = sorted;\n      }\n      // apply the limit\n      if( limit > AnalyticsContentHandler.DEFAULT_FACET_LIMIT ){\n        if( offset > 0 ){\n          iter = Iterables.skip(iter, offset);\n        }\n        iter = Iterables.limit(iter, limit);\n      }\n      \n      // Export each expression in the bucket.\n      for( Entry<String,Expression[]> bucket : iter ){\n        bucketBase.add(bucket.getKey(),export(bucket.getValue()));\n      }\n      \n      facetList.add(name, bucketBase);\n    }\n\n    // Add the range facet buckets to the output\n    facetList = new NamedList<>();\n    base.add(\"rangeFacets\",facetList);\n    for( RangeFacetRequest freq : request.getRangeFacets() ){\n      final String name = freq.getName();\n      final Map<String,Expression[]> buckets = rangeFacetExpressions.get(name);\n      final NamedList<Object> bucketBase = new NamedList<>();\n\n      Iterable<Entry<String,Expression[]>> iter = buckets.entrySet();\n      \n      for( Entry<String,Expression[]> bucket : iter ){\n        bucketBase.add(bucket.getKey(),export(bucket.getValue()));\n      }\n      \n      facetList.add(name, bucketBase);\n    }\n    \n    // Add the query facet buckets to the output\n    facetList = new NamedList<>();\n    base.add(\"queryFacets\",facetList);\n    for( QueryFacetRequest freq : request.getQueryFacets() ){\n      final String name = freq.getName();\n      final Map<String,Expression[]> buckets = queryFacetExpressions.get(name);\n      final NamedList<Object> bucketBase = new NamedList<>();\n\n      Iterable<Entry<String,Expression[]>> iter = buckets.entrySet();\n      \n      for( Entry<String,Expression[]> bucket : iter ){\n        bucketBase.add(bucket.getKey(),export(bucket.getValue()));\n      }\n      \n      facetList.add(name, bucketBase);\n    }\n\n    return base;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ff403346522eaa9de75403763e297e83a3ea585c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ff403346522eaa9de75403763e297e83a3ea585c"],"ff403346522eaa9de75403763e297e83a3ea585c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f719faa74f7213d4a395510dbc1f1b7cb178484"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","ff403346522eaa9de75403763e297e83a3ea585c"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"ff403346522eaa9de75403763e297e83a3ea585c":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}