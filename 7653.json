{"path":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestEmptyIndex#testNorms(IndexReader).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestEmptyIndex#testNorms(IndexReader).mjava","pathOld":"contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestEmptyIndex#testNorms(IndexReader).mjava","sourceNew":"  private void testNorms(IndexReader r) throws IOException {\n    byte[] norms;\n    norms = r.norms(\"foo\");\n    if (norms != null) {\n      assertEquals(0, norms.length);\n      norms = new byte[10];\n      Arrays.fill(norms, (byte)10);\n      r.norms(\"foo\", norms, 10);\n      for (byte b : norms) {\n        assertEquals((byte)10, b);\n      }\n    }\n  }\n\n","sourceOld":"  private void testNorms(IndexReader r) throws IOException {\n    byte[] norms;\n    norms = r.norms(\"foo\");\n    if (norms != null) {\n      assertEquals(0, norms.length);\n      norms = new byte[10];\n      Arrays.fill(norms, (byte)10);\n      r.norms(\"foo\", norms, 10);\n      for (byte b : norms) {\n        assertEquals((byte)10, b);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0d06946f61921459f43309f86ed621ebe67eebe","date":1294182697,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestEmptyIndex#testNorms(IndexReader).mjava","pathOld":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestEmptyIndex#testNorms(IndexReader).mjava","sourceNew":"  private void testNorms(IndexReader r) throws IOException {\n    byte[] norms = MultiNorms.norms(r, \"foo\");\n    if (norms != null) {\n      assertEquals(0, norms.length);\n      norms = new byte[10];\n      Arrays.fill(norms, (byte)10);\n      r.norms(\"foo\", norms, 10);\n      for (byte b : norms) {\n        assertEquals((byte)10, b);\n      }\n    }\n  }\n\n","sourceOld":"  private void testNorms(IndexReader r) throws IOException {\n    byte[] norms;\n    norms = r.norms(\"foo\");\n    if (norms != null) {\n      assertEquals(0, norms.length);\n      norms = new byte[10];\n      Arrays.fill(norms, (byte)10);\n      r.norms(\"foo\", norms, 10);\n      for (byte b : norms) {\n        assertEquals((byte)10, b);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestEmptyIndex#testNorms(IndexReader).mjava","pathOld":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestEmptyIndex#testNorms(IndexReader).mjava","sourceNew":"  private void testNorms(IndexReader r) throws IOException {\n    byte[] norms = MultiNorms.norms(r, \"foo\");\n    if (norms != null) {\n      assertEquals(0, norms.length);\n      norms = new byte[10];\n      Arrays.fill(norms, (byte)10);\n      r.norms(\"foo\", norms, 10);\n      for (byte b : norms) {\n        assertEquals((byte)10, b);\n      }\n    }\n  }\n\n","sourceOld":"  private void testNorms(IndexReader r) throws IOException {\n    byte[] norms;\n    norms = r.norms(\"foo\");\n    if (norms != null) {\n      assertEquals(0, norms.length);\n      norms = new byte[10];\n      Arrays.fill(norms, (byte)10);\n      r.norms(\"foo\", norms, 10);\n      for (byte b : norms) {\n        assertEquals((byte)10, b);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05","date":1294877328,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestEmptyIndex#testNorms(IndexReader).mjava","pathOld":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestEmptyIndex#testNorms(IndexReader).mjava","sourceNew":"  private void testNorms(IndexReader r) throws IOException {\n    byte[] norms = MultiNorms.norms(r, \"foo\");\n    if (norms != null) {\n      assertEquals(0, norms.length);\n    }\n  }\n\n","sourceOld":"  private void testNorms(IndexReader r) throws IOException {\n    byte[] norms = MultiNorms.norms(r, \"foo\");\n    if (norms != null) {\n      assertEquals(0, norms.length);\n      norms = new byte[10];\n      Arrays.fill(norms, (byte)10);\n      r.norms(\"foo\", norms, 10);\n      for (byte b : norms) {\n        assertEquals((byte)10, b);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestEmptyIndex#testNorms(IndexReader).mjava","pathOld":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestEmptyIndex#testNorms(IndexReader).mjava","sourceNew":"  private void testNorms(IndexReader r) throws IOException {\n    byte[] norms = MultiNorms.norms(r, \"foo\");\n    if (norms != null) {\n      assertEquals(0, norms.length);\n    }\n  }\n\n","sourceOld":"  private void testNorms(IndexReader r) throws IOException {\n    byte[] norms;\n    norms = r.norms(\"foo\");\n    if (norms != null) {\n      assertEquals(0, norms.length);\n      norms = new byte[10];\n      Arrays.fill(norms, (byte)10);\n      r.norms(\"foo\", norms, 10);\n      for (byte b : norms) {\n        assertEquals((byte)10, b);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestEmptyIndex#testNorms(IndexReader).mjava","pathOld":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestEmptyIndex#testNorms(IndexReader).mjava","sourceNew":"  private void testNorms(IndexReader r) throws IOException {\n    byte[] norms = MultiNorms.norms(r, \"foo\");\n    if (norms != null) {\n      assertEquals(0, norms.length);\n    }\n  }\n\n","sourceOld":"  private void testNorms(IndexReader r) throws IOException {\n    byte[] norms = MultiNorms.norms(r, \"foo\");\n    if (norms != null) {\n      assertEquals(0, norms.length);\n      norms = new byte[10];\n      Arrays.fill(norms, (byte)10);\n      r.norms(\"foo\", norms, 10);\n      for (byte b : norms) {\n        assertEquals((byte)10, b);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestEmptyIndex#testNorms(IndexReader).mjava","sourceNew":null,"sourceOld":"  private void testNorms(IndexReader r) throws IOException {\n    byte[] norms = MultiNorms.norms(r, \"foo\");\n    if (norms != null) {\n      assertEquals(0, norms.length);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05":["b0d06946f61921459f43309f86ed621ebe67eebe"],"70ad682703b8585f5d0a637efec044d57ec05efb":["9454a6510e2db155fb01faa5c049b06ece95fab9","b0d06946f61921459f43309f86ed621ebe67eebe"],"b0d06946f61921459f43309f86ed621ebe67eebe":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","7a54e23e03b47f3d568ab3020bdd386e4b2f0a05"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["7a54e23e03b47f3d568ab3020bdd386e4b2f0a05"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["9454a6510e2db155fb01faa5c049b06ece95fab9","7a54e23e03b47f3d568ab3020bdd386e4b2f0a05"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc749c053615f5871f3b95715fe292f34e70a53"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05":["29ef99d61cda9641b6250bf9567329a6e65f901d","3cc749c053615f5871f3b95715fe292f34e70a53","868da859b43505d9d2a023bfeae6dd0c795f5295"],"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"b0d06946f61921459f43309f86ed621ebe67eebe":["7a54e23e03b47f3d568ab3020bdd386e4b2f0a05","70ad682703b8585f5d0a637efec044d57ec05efb"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3cc749c053615f5871f3b95715fe292f34e70a53":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["70ad682703b8585f5d0a637efec044d57ec05efb","b0d06946f61921459f43309f86ed621ebe67eebe","868da859b43505d9d2a023bfeae6dd0c795f5295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}