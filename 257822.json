{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#exists(String,Watcher,boolean).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#exists(String,Watcher,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return the stat of the node of the given path. Return null if no such a\n   * node exists.\n   * <p>\n   * If the watch is non-null and the call is successful (no exception is thrown),\n   * a watch will be left on the node with the given path. The watch will be\n   * triggered by a successful operation that creates/delete the node or sets\n   * the data on the node.\n   *\n   * @param path the node path\n   * @param watcher explicit watcher\n   * @param retryOnConnLoss \n   * @return the stat of the node of the given path; return null if no such a\n   *         node exists.\n   * @throws KeeperException If the server signals an error\n   * @throws InterruptedException If the server transaction is interrupted.\n   * @throws IllegalArgumentException if an invalid path is specified\n   */\n  public Stat exists(final String path, final Watcher watcher, boolean retryOnConnLoss)\n      throws KeeperException, InterruptedException {\n    if (retryOnConnLoss) {\n      return zkCmdExecutor.retryOperation(new ZkOperation() {\n        @Override\n        public Stat execute() throws KeeperException, InterruptedException {\n          return keeper.exists(path, watcher);\n        }\n      });\n    } else {\n      return keeper.exists(path, watcher);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#exists(String,Watcher,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return the stat of the node of the given path. Return null if no such a\n   * node exists.\n   * <p>\n   * If the watch is non-null and the call is successful (no exception is thrown),\n   * a watch will be left on the node with the given path. The watch will be\n   * triggered by a successful operation that creates/delete the node or sets\n   * the data on the node.\n   *\n   * @param path the node path\n   * @param watcher explicit watcher\n   * @param retryOnConnLoss \n   * @return the stat of the node of the given path; return null if no such a\n   *         node exists.\n   * @throws KeeperException If the server signals an error\n   * @throws InterruptedException If the server transaction is interrupted.\n   * @throws IllegalArgumentException if an invalid path is specified\n   */\n  public Stat exists(final String path, final Watcher watcher, boolean retryOnConnLoss)\n      throws KeeperException, InterruptedException {\n    if (retryOnConnLoss) {\n      return zkCmdExecutor.retryOperation(new ZkOperation() {\n        @Override\n        public Stat execute() throws KeeperException, InterruptedException {\n          return keeper.exists(path, watcher);\n        }\n      });\n    } else {\n      return keeper.exists(path, watcher);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#exists(String,Watcher,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return the stat of the node of the given path. Return null if no such a\n   * node exists.\n   * <p>\n   * If the watch is non-null and the call is successful (no exception is thrown),\n   * a watch will be left on the node with the given path. The watch will be\n   * triggered by a successful operation that creates/delete the node or sets\n   * the data on the node.\n   *\n   * @param path the node path\n   * @param watcher explicit watcher\n   * @param retryOnConnLoss \n   * @return the stat of the node of the given path; return null if no such a\n   *         node exists.\n   * @throws KeeperException If the server signals an error\n   * @throws InterruptedException If the server transaction is interrupted.\n   * @throws IllegalArgumentException if an invalid path is specified\n   */\n  public Stat exists(final String path, final Watcher watcher, boolean retryOnConnLoss)\n      throws KeeperException, InterruptedException {\n    if (retryOnConnLoss) {\n      return zkCmdExecutor.retryOperation(new ZkOperation() {\n        @Override\n        public Stat execute() throws KeeperException, InterruptedException {\n          return keeper.exists(path, watcher);\n        }\n      });\n    } else {\n      return keeper.exists(path, watcher);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#exists(String,Watcher,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#exists(String,Watcher,boolean).mjava","sourceNew":"  /**\n   * Return the stat of the node of the given path. Return null if no such a\n   * node exists.\n   * <p>\n   * If the watch is non-null and the call is successful (no exception is thrown),\n   * a watch will be left on the node with the given path. The watch will be\n   * triggered by a successful operation that creates/delete the node or sets\n   * the data on the node.\n   *\n   * @param path the node path\n   * @param watcher explicit watcher\n   * @return the stat of the node of the given path; return null if no such a\n   *         node exists.\n   * @throws KeeperException If the server signals an error\n   * @throws InterruptedException If the server transaction is interrupted.\n   * @throws IllegalArgumentException if an invalid path is specified\n   */\n  public Stat exists(final String path, final Watcher watcher, boolean retryOnConnLoss)\n      throws KeeperException, InterruptedException {\n    if (retryOnConnLoss) {\n      return zkCmdExecutor.retryOperation(new ZkOperation() {\n        @Override\n        public Stat execute() throws KeeperException, InterruptedException {\n          return keeper.exists(path, watcher);\n        }\n      });\n    } else {\n      return keeper.exists(path, watcher);\n    }\n  }\n\n","sourceOld":"  /**\n   * Return the stat of the node of the given path. Return null if no such a\n   * node exists.\n   * <p>\n   * If the watch is non-null and the call is successful (no exception is thrown),\n   * a watch will be left on the node with the given path. The watch will be\n   * triggered by a successful operation that creates/delete the node or sets\n   * the data on the node.\n   *\n   * @param path the node path\n   * @param watcher explicit watcher\n   * @param retryOnConnLoss \n   * @return the stat of the node of the given path; return null if no such a\n   *         node exists.\n   * @throws KeeperException If the server signals an error\n   * @throws InterruptedException If the server transaction is interrupted.\n   * @throws IllegalArgumentException if an invalid path is specified\n   */\n  public Stat exists(final String path, final Watcher watcher, boolean retryOnConnLoss)\n      throws KeeperException, InterruptedException {\n    if (retryOnConnLoss) {\n      return zkCmdExecutor.retryOperation(new ZkOperation() {\n        @Override\n        public Stat execute() throws KeeperException, InterruptedException {\n          return keeper.exists(path, watcher);\n        }\n      });\n    } else {\n      return keeper.exists(path, watcher);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8650ae4e5d74a324411f8b7dd6201774f2b6fb2e","date":1406603075,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#exists(String,Watcher,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#exists(String,Watcher,boolean).mjava","sourceNew":"  /**\n   * Return the stat of the node of the given path. Return null if no such a\n   * node exists.\n   * <p>\n   * If the watch is non-null and the call is successful (no exception is thrown),\n   * a watch will be left on the node with the given path. The watch will be\n   * triggered by a successful operation that creates/delete the node or sets\n   * the data on the node.\n   *\n   * @param path the node path\n   * @param watcher explicit watcher\n   * @return the stat of the node of the given path; return null if no such a\n   *         node exists.\n   * @throws KeeperException If the server signals an error\n   * @throws InterruptedException If the server transaction is interrupted.\n   * @throws IllegalArgumentException if an invalid path is specified\n   */\n  public Stat exists(final String path, final Watcher watcher, boolean retryOnConnLoss)\n      throws KeeperException, InterruptedException {\n    if (retryOnConnLoss) {\n      return zkCmdExecutor.retryOperation(new ZkOperation() {\n        @Override\n        public Stat execute() throws KeeperException, InterruptedException {\n          return keeper.exists(path, wrapWatcher(watcher));\n        }\n      });\n    } else {\n      return keeper.exists(path, wrapWatcher(watcher));\n    }\n  }\n\n","sourceOld":"  /**\n   * Return the stat of the node of the given path. Return null if no such a\n   * node exists.\n   * <p>\n   * If the watch is non-null and the call is successful (no exception is thrown),\n   * a watch will be left on the node with the given path. The watch will be\n   * triggered by a successful operation that creates/delete the node or sets\n   * the data on the node.\n   *\n   * @param path the node path\n   * @param watcher explicit watcher\n   * @return the stat of the node of the given path; return null if no such a\n   *         node exists.\n   * @throws KeeperException If the server signals an error\n   * @throws InterruptedException If the server transaction is interrupted.\n   * @throws IllegalArgumentException if an invalid path is specified\n   */\n  public Stat exists(final String path, final Watcher watcher, boolean retryOnConnLoss)\n      throws KeeperException, InterruptedException {\n    if (retryOnConnLoss) {\n      return zkCmdExecutor.retryOperation(new ZkOperation() {\n        @Override\n        public Stat execute() throws KeeperException, InterruptedException {\n          return keeper.exists(path, watcher);\n        }\n      });\n    } else {\n      return keeper.exists(path, watcher);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eacdba691ec9e0ff24c589e65a852b9915265e6","date":1508917488,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#exists(String,Watcher,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#exists(String,Watcher,boolean).mjava","sourceNew":"  /**\n   * Return the stat of the node of the given path. Return null if no such a\n   * node exists.\n   * <p>\n   * If the watch is non-null and the call is successful (no exception is thrown),\n   * a watch will be left on the node with the given path. The watch will be\n   * triggered by a successful operation that creates/delete the node or sets\n   * the data on the node.\n   *\n   * @param path the node path\n   * @param watcher explicit watcher\n   * @return the stat of the node of the given path; return null if no such a\n   *         node exists.\n   * @throws KeeperException If the server signals an error\n   * @throws InterruptedException If the server transaction is interrupted.\n   * @throws IllegalArgumentException if an invalid path is specified\n   */\n  public Stat exists(final String path, final Watcher watcher, boolean retryOnConnLoss)\n      throws KeeperException, InterruptedException {\n    if (retryOnConnLoss) {\n      return zkCmdExecutor.retryOperation(() -> keeper.exists(path, wrapWatcher(watcher)));\n    } else {\n      return keeper.exists(path, wrapWatcher(watcher));\n    }\n  }\n\n","sourceOld":"  /**\n   * Return the stat of the node of the given path. Return null if no such a\n   * node exists.\n   * <p>\n   * If the watch is non-null and the call is successful (no exception is thrown),\n   * a watch will be left on the node with the given path. The watch will be\n   * triggered by a successful operation that creates/delete the node or sets\n   * the data on the node.\n   *\n   * @param path the node path\n   * @param watcher explicit watcher\n   * @return the stat of the node of the given path; return null if no such a\n   *         node exists.\n   * @throws KeeperException If the server signals an error\n   * @throws InterruptedException If the server transaction is interrupted.\n   * @throws IllegalArgumentException if an invalid path is specified\n   */\n  public Stat exists(final String path, final Watcher watcher, boolean retryOnConnLoss)\n      throws KeeperException, InterruptedException {\n    if (retryOnConnLoss) {\n      return zkCmdExecutor.retryOperation(new ZkOperation() {\n        @Override\n        public Stat execute() throws KeeperException, InterruptedException {\n          return keeper.exists(path, wrapWatcher(watcher));\n        }\n      });\n    } else {\n      return keeper.exists(path, wrapWatcher(watcher));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"8650ae4e5d74a324411f8b7dd6201774f2b6fb2e":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"1eacdba691ec9e0ff24c589e65a852b9915265e6":["8650ae4e5d74a324411f8b7dd6201774f2b6fb2e"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1eacdba691ec9e0ff24c589e65a852b9915265e6"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["8650ae4e5d74a324411f8b7dd6201774f2b6fb2e"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"8650ae4e5d74a324411f8b7dd6201774f2b6fb2e":["1eacdba691ec9e0ff24c589e65a852b9915265e6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"1eacdba691ec9e0ff24c589e65a852b9915265e6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}