{"path":"src/java/org/apache/solr/core/Config#findClass(String,String...).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/Config#findClass(String,String...).mjava","pathOld":"/dev/null","sourceNew":"  public static Class findClass(String cname, String... subpackages) {\n    ClassLoader loader = Thread.currentThread().getContextClassLoader();\n    if (subpackages.length==0) subpackages = packages;\n\n    // first try cname == full name\n    try {\n      return Class.forName(cname, true, loader);\n    } catch (ClassNotFoundException e) {\n      String newName=cname;\n      if (newName.startsWith(\"solar.\")) {\n        // handle legacy package names\n        newName = cname.substring(\"solar.\".length());\n      } else if (cname.startsWith(project+\".\")) {\n        newName = cname.substring(project.length()+1);\n      }\n\n      for (String subpackage : subpackages) {\n        try {\n          String name = base + '.' + subpackage + newName;\n          log.finest(\"Trying class name \" + name);\n          return Class.forName(name, true, loader);\n        } catch (ClassNotFoundException e1) {\n          // ignore... assume first exception is best.\n        }\n      }\n\n      throw new SolrException(500, \"Error loading class '\" + cname + \"'\", e, false);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04a954a68448c7f3d03c375dc4320f2c0b13cc60","date":1143819936,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/Config#findClass(String,String...).mjava","pathOld":"src/java/org/apache/solr/core/Config#findClass(String,String...).mjava","sourceNew":"  public static Class findClass(String cname, String... subpackages) {\n    ClassLoader loader = Thread.currentThread().getContextClassLoader();\n    if (subpackages.length==0) subpackages = packages;\n\n    // first try cname == full name\n    try {\n      return Class.forName(cname, true, loader);\n    } catch (ClassNotFoundException e) {\n      String newName=cname;\n      if (newName.startsWith(project)) {\n        newName = cname.substring(project.length()+1);\n      }\n      for (String subpackage : subpackages) {\n        try {\n          String name = base + '.' + subpackage + newName;\n          log.finest(\"Trying class name \" + name);\n          return Class.forName(name, true, loader);\n        } catch (ClassNotFoundException e1) {\n          // ignore... assume first exception is best.\n        }\n      }\n\n      throw new SolrException(500, \"Error loading class '\" + cname + \"'\", e, false);\n    }\n  }\n\n","sourceOld":"  public static Class findClass(String cname, String... subpackages) {\n    ClassLoader loader = Thread.currentThread().getContextClassLoader();\n    if (subpackages.length==0) subpackages = packages;\n\n    // first try cname == full name\n    try {\n      return Class.forName(cname, true, loader);\n    } catch (ClassNotFoundException e) {\n      String newName=cname;\n      if (newName.startsWith(\"solar.\")) {\n        // handle legacy package names\n        newName = cname.substring(\"solar.\".length());\n      } else if (cname.startsWith(project+\".\")) {\n        newName = cname.substring(project.length()+1);\n      }\n\n      for (String subpackage : subpackages) {\n        try {\n          String name = base + '.' + subpackage + newName;\n          log.finest(\"Trying class name \" + name);\n          return Class.forName(name, true, loader);\n        } catch (ClassNotFoundException e1) {\n          // ignore... assume first exception is best.\n        }\n      }\n\n      throw new SolrException(500, \"Error loading class '\" + cname + \"'\", e, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"88e7c7b9fdd71ab3f2261395347caff22f89cce0","date":1163469932,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/core/Config#findClass(String,String...).mjava","pathOld":"src/java/org/apache/solr/core/Config#findClass(String,String...).mjava","sourceNew":"  public static Class findClass(String cname, String... subpackages) {\n    ClassLoader loader = getClassLoader();\n    if (subpackages.length==0) subpackages = packages;\n\n    // first try cname == full name\n    try {\n      return Class.forName(cname, true, loader);\n    } catch (ClassNotFoundException e) {\n      String newName=cname;\n      if (newName.startsWith(project)) {\n        newName = cname.substring(project.length()+1);\n      }\n      for (String subpackage : subpackages) {\n        try {\n          String name = base + '.' + subpackage + newName;\n          log.finest(\"Trying class name \" + name);\n          return Class.forName(name, true, loader);\n        } catch (ClassNotFoundException e1) {\n          // ignore... assume first exception is best.\n        }\n      }\n\n      throw new SolrException(500, \"Error loading class '\" + cname + \"'\", e, false);\n    }\n  }\n\n","sourceOld":"  public static Class findClass(String cname, String... subpackages) {\n    ClassLoader loader = Thread.currentThread().getContextClassLoader();\n    if (subpackages.length==0) subpackages = packages;\n\n    // first try cname == full name\n    try {\n      return Class.forName(cname, true, loader);\n    } catch (ClassNotFoundException e) {\n      String newName=cname;\n      if (newName.startsWith(project)) {\n        newName = cname.substring(project.length()+1);\n      }\n      for (String subpackage : subpackages) {\n        try {\n          String name = base + '.' + subpackage + newName;\n          log.finest(\"Trying class name \" + name);\n          return Class.forName(name, true, loader);\n        } catch (ClassNotFoundException e1) {\n          // ignore... assume first exception is best.\n        }\n      }\n\n      throw new SolrException(500, \"Error loading class '\" + cname + \"'\", e, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996","date":1180477701,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/Config#findClass(String,String...).mjava","pathOld":"src/java/org/apache/solr/core/Config#findClass(String,String...).mjava","sourceNew":"  public static Class findClass(String cname, String... subpackages) {\n    ClassLoader loader = getClassLoader();\n    if (subpackages.length==0) subpackages = packages;\n\n    // first try cname == full name\n    try {\n      return Class.forName(cname, true, loader);\n    } catch (ClassNotFoundException e) {\n      String newName=cname;\n      if (newName.startsWith(project)) {\n        newName = cname.substring(project.length()+1);\n      }\n      for (String subpackage : subpackages) {\n        try {\n          String name = base + '.' + subpackage + newName;\n          log.finest(\"Trying class name \" + name);\n          return Class.forName(name, true, loader);\n        } catch (ClassNotFoundException e1) {\n          // ignore... assume first exception is best.\n        }\n      }\n\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error loading class '\" + cname + \"'\", e, false);\n    }\n  }\n\n","sourceOld":"  public static Class findClass(String cname, String... subpackages) {\n    ClassLoader loader = getClassLoader();\n    if (subpackages.length==0) subpackages = packages;\n\n    // first try cname == full name\n    try {\n      return Class.forName(cname, true, loader);\n    } catch (ClassNotFoundException e) {\n      String newName=cname;\n      if (newName.startsWith(project)) {\n        newName = cname.substring(project.length()+1);\n      }\n      for (String subpackage : subpackages) {\n        try {\n          String name = base + '.' + subpackage + newName;\n          log.finest(\"Trying class name \" + name);\n          return Class.forName(name, true, loader);\n        } catch (ClassNotFoundException e1) {\n          // ignore... assume first exception is best.\n        }\n      }\n\n      throw new SolrException(500, \"Error loading class '\" + cname + \"'\", e, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94fdcbef0182cbb32b3519de6a3d7d4d7bcb11d7","date":1189312484,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/Config#findClass(String,String...).mjava","pathOld":"src/java/org/apache/solr/core/Config#findClass(String,String...).mjava","sourceNew":"  public Class findClass(String cname, String... subpackages) {\n    ClassLoader loader = getClassLoader();\n    if (subpackages.length==0) subpackages = packages;\n\n    // first try cname == full name\n    try {\n      return Class.forName(cname, true, loader);\n    } catch (ClassNotFoundException e) {\n      String newName=cname;\n      if (newName.startsWith(project)) {\n        newName = cname.substring(project.length()+1);\n      }\n      for (String subpackage : subpackages) {\n        try {\n          String name = base + '.' + subpackage + newName;\n          log.finest(\"Trying class name \" + name);\n          return Class.forName(name, true, loader);\n        } catch (ClassNotFoundException e1) {\n          // ignore... assume first exception is best.\n        }\n      }\n\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error loading class '\" + cname + \"'\", e, false);\n    }\n  }\n\n","sourceOld":"  public static Class findClass(String cname, String... subpackages) {\n    ClassLoader loader = getClassLoader();\n    if (subpackages.length==0) subpackages = packages;\n\n    // first try cname == full name\n    try {\n      return Class.forName(cname, true, loader);\n    } catch (ClassNotFoundException e) {\n      String newName=cname;\n      if (newName.startsWith(project)) {\n        newName = cname.substring(project.length()+1);\n      }\n      for (String subpackage : subpackages) {\n        try {\n          String name = base + '.' + subpackage + newName;\n          log.finest(\"Trying class name \" + name);\n          return Class.forName(name, true, loader);\n        } catch (ClassNotFoundException e1) {\n          // ignore... assume first exception is best.\n        }\n      }\n\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error loading class '\" + cname + \"'\", e, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014","date":1195912306,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/Config#findClass(String,String...).mjava","pathOld":"src/java/org/apache/solr/core/Config#findClass(String,String...).mjava","sourceNew":"  @Deprecated\n  public Class findClass(String cname, String... subpackages) {\n    return loader.findClass(cname, subpackages);\n  }\n\n","sourceOld":"  public Class findClass(String cname, String... subpackages) {\n    ClassLoader loader = getClassLoader();\n    if (subpackages.length==0) subpackages = packages;\n\n    // first try cname == full name\n    try {\n      return Class.forName(cname, true, loader);\n    } catch (ClassNotFoundException e) {\n      String newName=cname;\n      if (newName.startsWith(project)) {\n        newName = cname.substring(project.length()+1);\n      }\n      for (String subpackage : subpackages) {\n        try {\n          String name = base + '.' + subpackage + newName;\n          log.finest(\"Trying class name \" + name);\n          return Class.forName(name, true, loader);\n        } catch (ClassNotFoundException e1) {\n          // ignore... assume first exception is best.\n        }\n      }\n\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error loading class '\" + cname + \"'\", e, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"166e7267ee953339ce7ff2febc91aee7576425f5","date":1218487056,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/core/Config#findClass(String,String...).mjava","pathOld":"src/java/org/apache/solr/core/Config#findClass(String,String...).mjava","sourceNew":"  /**\n   * @deprecated Use {@link SolrResourceLoader#findClass(String, String[])} instead.\n   */\n  @Deprecated\n  public Class findClass(String cname, String... subpackages) {\n    return loader.findClass(cname, subpackages);\n  }\n\n","sourceOld":"  @Deprecated\n  public Class findClass(String cname, String... subpackages) {\n    return loader.findClass(cname, subpackages);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/Config#findClass(String,String...).mjava","pathOld":"src/java/org/apache/solr/core/Config#findClass(String,String...).mjava","sourceNew":"  /**\n   * @deprecated Use {@link SolrResourceLoader#findClass(String, String[])} instead.\n   */\n  @Deprecated\n  public Class findClass(String cname, String... subpackages) {\n    return loader.findClass(cname, subpackages);\n  }\n\n","sourceOld":"  /**\n   * @deprecated Use {@link SolrResourceLoader#findClass(String, String[])} instead.\n   */\n  @Deprecated\n  public Class findClass(String cname, String... subpackages) {\n    return loader.findClass(cname, subpackages);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"88e7c7b9fdd71ab3f2261395347caff22f89cce0":["04a954a68448c7f3d03c375dc4320f2c0b13cc60"],"166e7267ee953339ce7ff2febc91aee7576425f5":["fcf52a7da226d8d3756cc8bf9f3ae1f39952b014"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"04a954a68448c7f3d03c375dc4320f2c0b13cc60":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"ad94625fb8d088209f46650c8097196fec67f00c":["166e7267ee953339ce7ff2febc91aee7576425f5"],"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014":["94fdcbef0182cbb32b3519de6a3d7d4d7bcb11d7"],"94fdcbef0182cbb32b3519de6a3d7d4d7bcb11d7":["c4abe53aaee39b5f2f41dd9a0b905c1ddf880996"],"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996":["88e7c7b9fdd71ab3f2261395347caff22f89cce0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"88e7c7b9fdd71ab3f2261395347caff22f89cce0":["c4abe53aaee39b5f2f41dd9a0b905c1ddf880996"],"166e7267ee953339ce7ff2febc91aee7576425f5":["ad94625fb8d088209f46650c8097196fec67f00c"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["04a954a68448c7f3d03c375dc4320f2c0b13cc60"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"04a954a68448c7f3d03c375dc4320f2c0b13cc60":["88e7c7b9fdd71ab3f2261395347caff22f89cce0"],"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014":["166e7267ee953339ce7ff2febc91aee7576425f5"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"94fdcbef0182cbb32b3519de6a3d7d4d7bcb11d7":["fcf52a7da226d8d3756cc8bf9f3ae1f39952b014"],"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996":["94fdcbef0182cbb32b3519de6a3d7d4d7bcb11d7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}