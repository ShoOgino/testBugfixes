{"path":"src/java/org/apache/lucene/messages/NLS#loadfieldValue(Field,boolean,Class).mjava","commits":[{"id":"9a9a95db9416e75497c862dda290648d8dfdc83f","date":1252550690,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/messages/NLS#loadfieldValue(Field,boolean,Class).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/messages/NLS#loadfieldValue(Field,boolean,Class[Object]).mjava","sourceNew":"  /**\n   * @param field\n   * @param isFieldAccessible\n   */\n  private static void loadfieldValue(Field field, boolean isFieldAccessible,\n      Class/*<Object>*/ clazz) {\n    int MOD_EXPECTED = Modifier.PUBLIC | Modifier.STATIC;\n    int MOD_MASK = MOD_EXPECTED | Modifier.FINAL;\n    if ((field.getModifiers() & MOD_MASK) != MOD_EXPECTED)\n      return;\n\n    // Set a value for this empty field.\n    if (!isFieldAccessible)\n      makeAccessible(field);\n    try {\n      field.set(null, field.getName());\n      validateMessage(field.getName(), clazz);\n    } catch (IllegalArgumentException e) {\n      // should not happen\n    } catch (IllegalAccessException e) {\n      // should not happen\n    }\n  }\n\n","sourceOld":"  /**\n   * @param field\n   * @param isFieldAccessible\n   */\n  private static void loadfieldValue(Field field, boolean isFieldAccessible,\n      Class<Object> clazz) {\n    int MOD_EXPECTED = Modifier.PUBLIC | Modifier.STATIC;\n    int MOD_MASK = MOD_EXPECTED | Modifier.FINAL;\n    if ((field.getModifiers() & MOD_MASK) != MOD_EXPECTED)\n      return;\n\n    // Set a value for this empty field.\n    if (!isFieldAccessible)\n      makeAccessible(field);\n    try {\n      field.set(null, field.getName());\n      validateMessage(field.getName(), clazz);\n    } catch (IllegalArgumentException e) {\n      // should not happen\n    } catch (IllegalAccessException e) {\n      // should not happen\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7dd1ffd1851fd665236d9e4c5663ca9ecf14f08","date":1254612983,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/messages/NLS#loadfieldValue(Field,boolean,Class[Object]).mjava","pathOld":"src/java/org/apache/lucene/messages/NLS#loadfieldValue(Field,boolean,Class).mjava","sourceNew":"  /**\n   * @param field\n   * @param isFieldAccessible\n   */\n  private static void loadfieldValue(Field field, boolean isFieldAccessible,\n      Class<Object> clazz) {\n    int MOD_EXPECTED = Modifier.PUBLIC | Modifier.STATIC;\n    int MOD_MASK = MOD_EXPECTED | Modifier.FINAL;\n    if ((field.getModifiers() & MOD_MASK) != MOD_EXPECTED)\n      return;\n\n    // Set a value for this empty field.\n    if (!isFieldAccessible)\n      makeAccessible(field);\n    try {\n      field.set(null, field.getName());\n      validateMessage(field.getName(), clazz);\n    } catch (IllegalArgumentException e) {\n      // should not happen\n    } catch (IllegalAccessException e) {\n      // should not happen\n    }\n  }\n\n","sourceOld":"  /**\n   * @param field\n   * @param isFieldAccessible\n   */\n  private static void loadfieldValue(Field field, boolean isFieldAccessible,\n      Class/*<Object>*/ clazz) {\n    int MOD_EXPECTED = Modifier.PUBLIC | Modifier.STATIC;\n    int MOD_MASK = MOD_EXPECTED | Modifier.FINAL;\n    if ((field.getModifiers() & MOD_MASK) != MOD_EXPECTED)\n      return;\n\n    // Set a value for this empty field.\n    if (!isFieldAccessible)\n      makeAccessible(field);\n    try {\n      field.set(null, field.getName());\n      validateMessage(field.getName(), clazz);\n    } catch (IllegalArgumentException e) {\n      // should not happen\n    } catch (IllegalAccessException e) {\n      // should not happen\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9a9a95db9416e75497c862dda290648d8dfdc83f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c7dd1ffd1851fd665236d9e4c5663ca9ecf14f08":["9a9a95db9416e75497c862dda290648d8dfdc83f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7dd1ffd1851fd665236d9e4c5663ca9ecf14f08"]},"commit2Childs":{"9a9a95db9416e75497c862dda290648d8dfdc83f":["c7dd1ffd1851fd665236d9e4c5663ca9ecf14f08"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9a9a95db9416e75497c862dda290648d8dfdc83f"],"c7dd1ffd1851fd665236d9e4c5663ca9ecf14f08":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}