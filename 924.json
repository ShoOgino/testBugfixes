{"path":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(new Field(\"field\", \"foo firstname xxx lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(new Field(\"field\", \"foo firstname xxx yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(directory, true);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(query,searcher);        \n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(new Field(\"field\", \"foo firstname xxx lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(new Field(\"field\", \"foo firstname xxx yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(directory, true);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(query,searcher);        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(new Field(\"field\", \"foo firstname xxx lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(new Field(\"field\", \"foo firstname xxx yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(directory, true);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(query,searcher);        \n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(new Field(\"field\", \"foo firstname xxx lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(new Field(\"field\", \"foo firstname xxx yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(directory, true);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(query,searcher);        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"953de31d76c9d58f1e3f4e41ff8a48a1529226de","date":1277371072,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(new Field(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(new Field(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(directory, true);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(query,searcher);        \n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(new Field(\"field\", \"foo firstname xxx lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(new Field(\"field\", \"foo firstname xxx yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(directory, true);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(query,searcher);        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(new Field(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(new Field(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(reader);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(query,searcher);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(new Field(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(new Field(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(directory, true);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(query,searcher);        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(new Field(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(new Field(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(reader);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(query,searcher);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(new Field(\"field\", \"foo firstname xxx lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(new Field(\"field\", \"foo firstname xxx yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(directory, true);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(query,searcher);        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15bbd254c1506df5299c4df8c148262c7bd6301e","date":1279913113,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(new Field(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(new Field(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(reader);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(query,searcher);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(new Field(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(new Field(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(reader);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(query,searcher);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(new Field(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(new Field(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(reader);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(query,searcher);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(new Field(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(new Field(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(reader);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(query,searcher);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(new Field(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(new Field(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(reader);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(query,searcher);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(new Field(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(new Field(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(reader);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(query,searcher);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(new Field(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(new Field(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(reader);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(query,searcher);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(new Field(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(new Field(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(reader);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(query,searcher);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(new Field(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(new Field(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(reader);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(query,searcher);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(new Field(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(new Field(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(reader);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(query,searcher);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(new Field(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(new Field(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(reader);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(query,searcher);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(new Field(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(new Field(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(reader);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(query,searcher);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newField(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(reader);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(query,searcher);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(new Field(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(new Field(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(reader);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(query,searcher);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"53a31399f2471493d67b19a95c028a74e0113b6a","date":1289817072,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newField(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(reader);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random, query,searcher);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newField(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(reader);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(query,searcher);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newField(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(reader);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random, query,searcher);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newField(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(reader);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(query,searcher);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newField(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(reader);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random, query,searcher);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(new Field(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(new Field(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(reader);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(query,searcher);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newField(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random, query,searcher);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newField(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(reader);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random, query,searcher);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newField(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random, query,searcher);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newField(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(reader);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random, query,searcher);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newField(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random, query,searcher);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newField(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(reader);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random, query,searcher);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30313a1aec5f836d09c952619ffd4606f4d640d0","date":1296475268,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newField(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random, query,searcher);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newField(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random, query,searcher);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newField(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random, query,searcher);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newField(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random, query,searcher);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newField(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random, query,searcher);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newField(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random, query,searcher);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newField(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random, query,searcher);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newField(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random, query,searcher);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01e5948db9a07144112d2f08f28ca2e3cd880348","date":1301759232,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newField(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random, query,searcher);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newField(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random, query,searcher);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newField(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random, query,searcher);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newField(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random, query,searcher);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newField(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random, query,searcher);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newField(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random, query,searcher);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newField(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random, query,searcher);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newField(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random, query,searcher);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newField(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random, query,searcher);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newField(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random, query,searcher);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newField(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random, query,searcher);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newField(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random, query,searcher);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"foo firstname lastname foo\", TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo firstname zzz lastname foo\", TextField.TYPE_STORED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newField(\"field\", \"foo firstname zzz yyy lastname foo\", TextField.TYPE_STORED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random, query,searcher);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo firstname zzz lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newField(\"field\", \"foo firstname zzz yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random, query,searcher);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"60e3b31201fd9bb5d73884faa5a38c63ea9239f2","date":1315756041,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setMergePolicy(newLogMergePolicy())\n          .setSimilarityProvider(new DefaultSimilarityProvider()));\n\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"foo firstname lastname foo\", TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo firstname zzz lastname foo\", TextField.TYPE_STORED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newField(\"field\", \"foo firstname zzz yyy lastname foo\", TextField.TYPE_STORED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new DefaultSimilarityProvider());\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random, query,searcher);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"foo firstname lastname foo\", TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo firstname zzz lastname foo\", TextField.TYPE_STORED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newField(\"field\", \"foo firstname zzz yyy lastname foo\", TextField.TYPE_STORED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random, query,searcher);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setMergePolicy(newLogMergePolicy())\n          .setSimilarityProvider(new DefaultSimilarityProvider()));\n\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"foo firstname lastname foo\", TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo firstname zzz lastname foo\", TextField.TYPE_STORED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newField(\"field\", \"foo firstname zzz yyy lastname foo\", TextField.TYPE_STORED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new DefaultSimilarityProvider());\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random, query,searcher);\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setMergePolicy(newLogMergePolicy())\n          .setSimilarityProvider(new DefaultSimilarityProvider()));\n\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"foo firstname lastname foo\", TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo firstname zzz lastname foo\", TextField.TYPE_STORED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newField(\"field\", \"foo firstname zzz yyy lastname foo\", TextField.TYPE_STORED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new DefaultSimilarityProvider());\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random, query,searcher);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setMergePolicy(newLogMergePolicy())\n          .setSimilarityProvider(new DefaultSimilarityProvider()));\n\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"foo firstname lastname foo\", TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo firstname zzz lastname foo\", TextField.TYPE_STORED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newField(\"field\", \"foo firstname zzz yyy lastname foo\", TextField.TYPE_STORED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new DefaultSimilarityProvider());\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random, query,searcher);\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setMergePolicy(newLogMergePolicy())\n          .setSimilarityProvider(new DefaultSimilarityProvider()));\n\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"foo firstname lastname foo\", TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo firstname zzz lastname foo\", TextField.TYPE_STORED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newField(\"field\", \"foo firstname zzz yyy lastname foo\", TextField.TYPE_STORED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new DefaultSimilarityProvider());\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random, query,searcher);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b","date":1328532481,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setMergePolicy(newLogMergePolicy())\n          .setSimilarity(new DefaultSimilarity()));\n\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"foo firstname lastname foo\", TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo firstname zzz lastname foo\", TextField.TYPE_STORED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newField(\"field\", \"foo firstname zzz yyy lastname foo\", TextField.TYPE_STORED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new DefaultSimilarity());\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random, query,searcher);\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setMergePolicy(newLogMergePolicy())\n          .setSimilarityProvider(new DefaultSimilarityProvider()));\n\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"foo firstname lastname foo\", TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo firstname zzz lastname foo\", TextField.TYPE_STORED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newField(\"field\", \"foo firstname zzz yyy lastname foo\", TextField.TYPE_STORED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new DefaultSimilarityProvider());\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random, query,searcher);\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setMergePolicy(newLogMergePolicy())\n          .setSimilarity(new DefaultSimilarity()));\n\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"foo firstname lastname foo\", TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo firstname zzz lastname foo\", TextField.TYPE_STORED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newField(\"field\", \"foo firstname zzz yyy lastname foo\", TextField.TYPE_STORED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new DefaultSimilarity());\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random, query,searcher);\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setMergePolicy(newLogMergePolicy())\n          .setSimilarity(new DefaultSimilarity()));\n\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"foo firstname lastname foo\", TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo firstname zzz lastname foo\", TextField.TYPE_STORED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(newField(\"field\", \"foo firstname zzz yyy lastname foo\", TextField.TYPE_STORED));\n    writer.addDocument(doc3);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new DefaultSimilarity());\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(random, query,searcher);\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"15bbd254c1506df5299c4df8c148262c7bd6301e":["c084e47df29de3330311d69dabf515ceaa989512"],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","53a31399f2471493d67b19a95c028a74e0113b6a"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"c084e47df29de3330311d69dabf515ceaa989512":["953de31d76c9d58f1e3f4e41ff8a48a1529226de"],"953de31d76c9d58f1e3f4e41ff8a48a1529226de":["d572389229127c297dd1fa5ce4758e1cec41e799"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["01e5948db9a07144112d2f08f28ca2e3cd880348"],"53a31399f2471493d67b19a95c028a74e0113b6a":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","790e1fde4caa765b3faaad3fbcd25c6973450336"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30313a1aec5f836d09c952619ffd4606f4d640d0":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","790e1fde4caa765b3faaad3fbcd25c6973450336"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"70ad682703b8585f5d0a637efec044d57ec05efb":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","4b103252dee6afa1b6d7a622c773d178788eb85a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["c084e47df29de3330311d69dabf515ceaa989512","15bbd254c1506df5299c4df8c148262c7bd6301e"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["132903c28af3aa6f67284b78de91c0f0a99488c2","53a31399f2471493d67b19a95c028a74e0113b6a"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":["d572389229127c297dd1fa5ce4758e1cec41e799","c084e47df29de3330311d69dabf515ceaa989512"],"962d04139994fce5193143ef35615499a9a96d78":["45669a651c970812a680841b97a77cce06af559f","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["30313a1aec5f836d09c952619ffd4606f4d640d0"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["53a31399f2471493d67b19a95c028a74e0113b6a"],"a3776dccca01c11e7046323cfad46a3b4a471233":["790e1fde4caa765b3faaad3fbcd25c6973450336","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"45669a651c970812a680841b97a77cce06af559f":["bde51b089eb7f86171eb3406e38a274743f9b7ac","01e5948db9a07144112d2f08f28ca2e3cd880348"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"15bbd254c1506df5299c4df8c148262c7bd6301e":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["53a31399f2471493d67b19a95c028a74e0113b6a","9ab1f5591dc05f1f2b5407d809c9699f75554a32"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["f2c5f0cb44df114db4228c8f77861714b5cabaea","45669a651c970812a680841b97a77cce06af559f"],"c084e47df29de3330311d69dabf515ceaa989512":["15bbd254c1506df5299c4df8c148262c7bd6301e","4b103252dee6afa1b6d7a622c773d178788eb85a","5f4e87790277826a2aea119328600dfb07761f32"],"953de31d76c9d58f1e3f4e41ff8a48a1529226de":["c084e47df29de3330311d69dabf515ceaa989512"],"53a31399f2471493d67b19a95c028a74e0113b6a":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","9ab1f5591dc05f1f2b5407d809c9699f75554a32","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["1509f151d7692d84fae414b2b799ac06ba60fcb4","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"30313a1aec5f836d09c952619ffd4606f4d640d0":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["45669a651c970812a680841b97a77cce06af559f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","3242a09f703274d3b9283f2064a1a33064b53a1b"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["70ad682703b8585f5d0a637efec044d57ec05efb"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["953de31d76c9d58f1e3f4e41ff8a48a1529226de","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"962d04139994fce5193143ef35615499a9a96d78":[],"790e1fde4caa765b3faaad3fbcd25c6973450336":["01e5948db9a07144112d2f08f28ca2e3cd880348","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","a3776dccca01c11e7046323cfad46a3b4a471233"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["30313a1aec5f836d09c952619ffd4606f4d640d0","70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"45669a651c970812a680841b97a77cce06af559f":["962d04139994fce5193143ef35615499a9a96d78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}