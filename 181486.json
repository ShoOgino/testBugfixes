{"path":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(MergeState,DocValues[]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(MergeState,DocValues[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(MergeState,DocValues[]).mjava","sourceNew":"  /**\n   * Merges the given {@link org.apache.lucene.index.MergeState} into\n   * this {@link DocValuesConsumer}.\n   * \n   * @param mergeState\n   *          the state to merge\n   * @param docValues docValues array containing one instance per reader (\n   *          {@link org.apache.lucene.index.MergeState#readers}) or <code>null</code> if the reader has\n   *          no {@link DocValues} instance.\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public void merge(MergeState mergeState, DocValues[] docValues) throws IOException {\n    assert mergeState != null;\n    boolean hasMerged = false;\n    for(int readerIDX=0;readerIDX<mergeState.readers.size();readerIDX++) {\n      final org.apache.lucene.index.MergeState.IndexReaderAndLiveDocs reader = mergeState.readers.get(readerIDX);\n      if (docValues[readerIDX] != null) {\n        hasMerged = true;\n        merge(docValues[readerIDX], mergeState.docBase[readerIDX],\n              reader.reader.maxDoc(), reader.liveDocs);\n        mergeState.checkAbort.work(reader.reader.maxDoc());\n      }\n    }\n    // only finish if no exception is thrown!\n    if (hasMerged) {\n      finish(mergeState.mergedDocCount);\n    }\n  }\n\n","sourceOld":"  /**\n   * Merges the given {@link org.apache.lucene.index.MergeState} into\n   * this {@link DocValuesConsumer}.\n   * \n   * @param mergeState\n   *          the state to merge\n   * @param docValues docValues array containing one instance per reader (\n   *          {@link org.apache.lucene.index.MergeState#readers}) or <code>null</code> if the reader has\n   *          no {@link DocValues} instance.\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public void merge(MergeState mergeState, DocValues[] docValues) throws IOException {\n    assert mergeState != null;\n    boolean hasMerged = false;\n    for(int readerIDX=0;readerIDX<mergeState.readers.size();readerIDX++) {\n      final org.apache.lucene.index.MergeState.IndexReaderAndLiveDocs reader = mergeState.readers.get(readerIDX);\n      if (docValues[readerIDX] != null) {\n        hasMerged = true;\n        merge(docValues[readerIDX], mergeState.docBase[readerIDX],\n              reader.reader.maxDoc(), reader.liveDocs);\n        mergeState.checkAbort.work(reader.reader.maxDoc());\n      }\n    }\n    // only finish if no exception is thrown!\n    if (hasMerged) {\n      finish(mergeState.mergedDocCount);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff82b51516e4a8d24bb6182e5235be1c88b8ac2e","date":1337803615,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(MergeState,DocValues[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(MergeState,DocValues[]).mjava","sourceNew":"  /**\n   * Merges the given {@link org.apache.lucene.index.MergeState} into\n   * this {@link DocValuesConsumer}.\n   * \n   * @param mergeState\n   *          the state to merge\n   * @param docValues docValues array containing one instance per reader (\n   *          {@link org.apache.lucene.index.MergeState#readers}) or <code>null</code> if the reader has\n   *          no {@link DocValues} instance.\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public void merge(MergeState mergeState, DocValues[] docValues) throws IOException {\n    assert mergeState != null;\n    boolean hasMerged = false;\n    for(int readerIDX=0;readerIDX<mergeState.readers.size();readerIDX++) {\n      final org.apache.lucene.index.MergeState.IndexReaderAndLiveDocs reader = mergeState.readers.get(readerIDX);\n      if (docValues[readerIDX] != null) {\n        hasMerged = true;\n        merge(docValues[readerIDX], mergeState.docBase[readerIDX],\n              reader.reader.maxDoc(), reader.liveDocs);\n        mergeState.checkAbort.work(reader.reader.maxDoc());\n      }\n    }\n    // only finish if no exception is thrown!\n    if (hasMerged) {\n      finish(mergeState.segmentInfo.getDocCount());\n    }\n  }\n\n","sourceOld":"  /**\n   * Merges the given {@link org.apache.lucene.index.MergeState} into\n   * this {@link DocValuesConsumer}.\n   * \n   * @param mergeState\n   *          the state to merge\n   * @param docValues docValues array containing one instance per reader (\n   *          {@link org.apache.lucene.index.MergeState#readers}) or <code>null</code> if the reader has\n   *          no {@link DocValues} instance.\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public void merge(MergeState mergeState, DocValues[] docValues) throws IOException {\n    assert mergeState != null;\n    boolean hasMerged = false;\n    for(int readerIDX=0;readerIDX<mergeState.readers.size();readerIDX++) {\n      final org.apache.lucene.index.MergeState.IndexReaderAndLiveDocs reader = mergeState.readers.get(readerIDX);\n      if (docValues[readerIDX] != null) {\n        hasMerged = true;\n        merge(docValues[readerIDX], mergeState.docBase[readerIDX],\n              reader.reader.maxDoc(), reader.liveDocs);\n        mergeState.checkAbort.work(reader.reader.maxDoc());\n      }\n    }\n    // only finish if no exception is thrown!\n    if (hasMerged) {\n      finish(mergeState.mergedDocCount);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(MergeState,DocValues[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(MergeState,DocValues[]).mjava","sourceNew":"  /**\n   * Merges the given {@link org.apache.lucene.index.MergeState} into\n   * this {@link DocValuesConsumer}.\n   * \n   * @param mergeState\n   *          the state to merge\n   * @param docValues docValues array containing one instance per reader (\n   *          {@link org.apache.lucene.index.MergeState#readers}) or <code>null</code> if the reader has\n   *          no {@link DocValues} instance.\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public void merge(MergeState mergeState, DocValues[] docValues) throws IOException {\n    assert mergeState != null;\n    boolean hasMerged = false;\n    for(int readerIDX=0;readerIDX<mergeState.readers.size();readerIDX++) {\n      final org.apache.lucene.index.MergeState.IndexReaderAndLiveDocs reader = mergeState.readers.get(readerIDX);\n      if (docValues[readerIDX] != null) {\n        hasMerged = true;\n        merge(docValues[readerIDX], mergeState.docBase[readerIDX],\n              reader.reader.maxDoc(), reader.liveDocs);\n        mergeState.checkAbort.work(reader.reader.maxDoc());\n      }\n    }\n    // only finish if no exception is thrown!\n    if (hasMerged) {\n      finish(mergeState.segmentInfo.getDocCount());\n    }\n  }\n\n","sourceOld":"  /**\n   * Merges the given {@link org.apache.lucene.index.MergeState} into\n   * this {@link DocValuesConsumer}.\n   * \n   * @param mergeState\n   *          the state to merge\n   * @param docValues docValues array containing one instance per reader (\n   *          {@link org.apache.lucene.index.MergeState#readers}) or <code>null</code> if the reader has\n   *          no {@link DocValues} instance.\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public void merge(MergeState mergeState, DocValues[] docValues) throws IOException {\n    assert mergeState != null;\n    boolean hasMerged = false;\n    for(int readerIDX=0;readerIDX<mergeState.readers.size();readerIDX++) {\n      final org.apache.lucene.index.MergeState.IndexReaderAndLiveDocs reader = mergeState.readers.get(readerIDX);\n      if (docValues[readerIDX] != null) {\n        hasMerged = true;\n        merge(docValues[readerIDX], mergeState.docBase[readerIDX],\n              reader.reader.maxDoc(), reader.liveDocs);\n        mergeState.checkAbort.work(reader.reader.maxDoc());\n      }\n    }\n    // only finish if no exception is thrown!\n    if (hasMerged) {\n      finish(mergeState.mergedDocCount);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c95a819869502635864dac0a788f874787e3395b","date":1341394787,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(MergeState,DocValues[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(MergeState,DocValues[]).mjava","sourceNew":"  /**\n   * Merges the given {@link org.apache.lucene.index.MergeState} into\n   * this {@link DocValuesConsumer}.\n   * \n   * @param mergeState\n   *          the state to merge\n   * @param docValues docValues array containing one instance per reader (\n   *          {@link org.apache.lucene.index.MergeState#readers}) or <code>null</code> if the reader has\n   *          no {@link DocValues} instance.\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public void merge(MergeState mergeState, DocValues[] docValues) throws IOException {\n    assert mergeState != null;\n    boolean hasMerged = false;\n    for(int readerIDX=0;readerIDX<mergeState.readers.size();readerIDX++) {\n      final AtomicReader reader = mergeState.readers.get(readerIDX);\n      if (docValues[readerIDX] != null) {\n        hasMerged = true;\n        merge(docValues[readerIDX], mergeState.docBase[readerIDX],\n              reader.maxDoc(), reader.getLiveDocs());\n        mergeState.checkAbort.work(reader.maxDoc());\n      }\n    }\n    // only finish if no exception is thrown!\n    if (hasMerged) {\n      finish(mergeState.segmentInfo.getDocCount());\n    }\n  }\n\n","sourceOld":"  /**\n   * Merges the given {@link org.apache.lucene.index.MergeState} into\n   * this {@link DocValuesConsumer}.\n   * \n   * @param mergeState\n   *          the state to merge\n   * @param docValues docValues array containing one instance per reader (\n   *          {@link org.apache.lucene.index.MergeState#readers}) or <code>null</code> if the reader has\n   *          no {@link DocValues} instance.\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public void merge(MergeState mergeState, DocValues[] docValues) throws IOException {\n    assert mergeState != null;\n    boolean hasMerged = false;\n    for(int readerIDX=0;readerIDX<mergeState.readers.size();readerIDX++) {\n      final org.apache.lucene.index.MergeState.IndexReaderAndLiveDocs reader = mergeState.readers.get(readerIDX);\n      if (docValues[readerIDX] != null) {\n        hasMerged = true;\n        merge(docValues[readerIDX], mergeState.docBase[readerIDX],\n              reader.reader.maxDoc(), reader.liveDocs);\n        mergeState.checkAbort.work(reader.reader.maxDoc());\n      }\n    }\n    // only finish if no exception is thrown!\n    if (hasMerged) {\n      finish(mergeState.segmentInfo.getDocCount());\n    }\n  }\n\n","bugFix":["f6e3376a314fcc2b31bc46d399c2ff23552b78d6","06584e6e98d592b34e1329b384182f368d2025e8","fa0f44f887719e97183771e977cfc4bfb485b766"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(MergeState,DocValues[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(MergeState,DocValues[]).mjava","sourceNew":"  /**\n   * Merges the given {@link org.apache.lucene.index.MergeState} into\n   * this {@link DocValuesConsumer}.\n   * \n   * @param mergeState\n   *          the state to merge\n   * @param docValues docValues array containing one instance per reader (\n   *          {@link org.apache.lucene.index.MergeState#readers}) or <code>null</code> if the reader has\n   *          no {@link DocValues} instance.\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public void merge(MergeState mergeState, DocValues[] docValues) throws IOException {\n    assert mergeState != null;\n    boolean hasMerged = false;\n    for(int readerIDX=0;readerIDX<mergeState.readers.size();readerIDX++) {\n      final AtomicReader reader = mergeState.readers.get(readerIDX);\n      if (docValues[readerIDX] != null) {\n        hasMerged = true;\n        merge(docValues[readerIDX], mergeState.docBase[readerIDX],\n              reader.maxDoc(), reader.getLiveDocs());\n        mergeState.checkAbort.work(reader.maxDoc());\n      }\n    }\n    // only finish if no exception is thrown!\n    if (hasMerged) {\n      finish(mergeState.segmentInfo.getDocCount());\n    }\n  }\n\n","sourceOld":"  /**\n   * Merges the given {@link org.apache.lucene.index.MergeState} into\n   * this {@link DocValuesConsumer}.\n   * \n   * @param mergeState\n   *          the state to merge\n   * @param docValues docValues array containing one instance per reader (\n   *          {@link org.apache.lucene.index.MergeState#readers}) or <code>null</code> if the reader has\n   *          no {@link DocValues} instance.\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public void merge(MergeState mergeState, DocValues[] docValues) throws IOException {\n    assert mergeState != null;\n    boolean hasMerged = false;\n    for(int readerIDX=0;readerIDX<mergeState.readers.size();readerIDX++) {\n      final org.apache.lucene.index.MergeState.IndexReaderAndLiveDocs reader = mergeState.readers.get(readerIDX);\n      if (docValues[readerIDX] != null) {\n        hasMerged = true;\n        merge(docValues[readerIDX], mergeState.docBase[readerIDX],\n              reader.reader.maxDoc(), reader.liveDocs);\n        mergeState.checkAbort.work(reader.reader.maxDoc());\n      }\n    }\n    // only finish if no exception is thrown!\n    if (hasMerged) {\n      finish(mergeState.segmentInfo.getDocCount());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(MergeState,DocValues[]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Merges the given {@link org.apache.lucene.index.MergeState} into\n   * this {@link DocValuesConsumer}.\n   * \n   * @param mergeState\n   *          the state to merge\n   * @param docValues docValues array containing one instance per reader (\n   *          {@link org.apache.lucene.index.MergeState#readers}) or <code>null</code> if the reader has\n   *          no {@link DocValues} instance.\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public void merge(MergeState mergeState, DocValues[] docValues) throws IOException {\n    assert mergeState != null;\n    boolean hasMerged = false;\n    for(int readerIDX=0;readerIDX<mergeState.readers.size();readerIDX++) {\n      final AtomicReader reader = mergeState.readers.get(readerIDX);\n      if (docValues[readerIDX] != null) {\n        hasMerged = true;\n        merge(docValues[readerIDX], mergeState.docBase[readerIDX],\n              reader.maxDoc(), reader.getLiveDocs());\n        mergeState.checkAbort.work(reader.maxDoc());\n      }\n    }\n    // only finish if no exception is thrown!\n    if (hasMerged) {\n      finish(mergeState.segmentInfo.getDocCount());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(MergeState,DocValues[]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Merges the given {@link org.apache.lucene.index.MergeState} into\n   * this {@link DocValuesConsumer}.\n   * \n   * @param mergeState\n   *          the state to merge\n   * @param docValues docValues array containing one instance per reader (\n   *          {@link org.apache.lucene.index.MergeState#readers}) or <code>null</code> if the reader has\n   *          no {@link DocValues} instance.\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public void merge(MergeState mergeState, DocValues[] docValues) throws IOException {\n    assert mergeState != null;\n    boolean hasMerged = false;\n    for(int readerIDX=0;readerIDX<mergeState.readers.size();readerIDX++) {\n      final AtomicReader reader = mergeState.readers.get(readerIDX);\n      if (docValues[readerIDX] != null) {\n        hasMerged = true;\n        merge(docValues[readerIDX], mergeState.docBase[readerIDX],\n              reader.maxDoc(), reader.getLiveDocs());\n        mergeState.checkAbort.work(reader.maxDoc());\n      }\n    }\n    // only finish if no exception is thrown!\n    if (hasMerged) {\n      finish(mergeState.segmentInfo.getDocCount());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c95a819869502635864dac0a788f874787e3395b":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","ff82b51516e4a8d24bb6182e5235be1c88b8ac2e"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["c95a819869502635864dac0a788f874787e3395b","0837ab0472feecb3a54260729d845f839e1cbd72"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","c95a819869502635864dac0a788f874787e3395b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["c95a819869502635864dac0a788f874787e3395b"],"ff82b51516e4a8d24bb6182e5235be1c88b8ac2e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"c95a819869502635864dac0a788f874787e3395b":["d4d69c535930b5cce125cff868d40f6373dc27d4","fe33227f6805edab2036cbb80645cc4e2d1fa424","0837ab0472feecb3a54260729d845f839e1cbd72"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["c95a819869502635864dac0a788f874787e3395b","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","ff82b51516e4a8d24bb6182e5235be1c88b8ac2e"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"ff82b51516e4a8d24bb6182e5235be1c88b8ac2e":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}