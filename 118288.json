{"path":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean).mjava","commits":[{"id":"059062eb4071e7bbb5a38b6513158f2f87ede135","date":1163808719,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public void createIndex(String dirName, boolean doCFS) throws IOException {\n\n    Directory dir = FSDirectory.getDirectory(dirName, true);\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    writer.setUseCompoundFile(doCFS);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.docCount());\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66b12ba4967665216eeb706b58d424c51fb3641a","date":1169160423,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean).mjava","sourceNew":"  public void createIndex(String dirName, boolean doCFS) throws IOException {\n\n    Directory dir = FSDirectory.getDirectory(dirName);\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    writer.setUseCompoundFile(doCFS);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.docCount());\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n  }\n\n","sourceOld":"  public void createIndex(String dirName, boolean doCFS) throws IOException {\n\n    Directory dir = FSDirectory.getDirectory(dirName, true);\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    writer.setUseCompoundFile(doCFS);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.docCount());\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc9931b60a4b1618b9f7cb9c176883390697b1b","date":1173207152,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean).mjava","sourceNew":"  public void createIndex(String dirName, boolean doCFS) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.getDirectory(dirName);\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    writer.setUseCompoundFile(doCFS);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.docCount());\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n  }\n\n","sourceOld":"  public void createIndex(String dirName, boolean doCFS) throws IOException {\n\n    Directory dir = FSDirectory.getDirectory(dirName);\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    writer.setUseCompoundFile(doCFS);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.docCount());\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"adabb461edd9894ec460711a27f45364ec5f1464","date":1173867824,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean).mjava","sourceNew":"  public void createIndex(String dirName, boolean doCFS) throws IOException {\n\n    rmDir(dirName);\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.getDirectory(dirName);\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    writer.setUseCompoundFile(doCFS);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.docCount());\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n  }\n\n","sourceOld":"  public void createIndex(String dirName, boolean doCFS) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.getDirectory(dirName);\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    writer.setUseCompoundFile(doCFS);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.docCount());\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b583d3621fe173e7296abcf62f82fb707c901234","date":1194717060,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean).mjava","sourceNew":"  public void createIndex(String dirName, boolean doCFS) throws IOException {\n\n    rmDir(dirName);\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.getDirectory(dirName, null, false);\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    writer.setUseCompoundFile(doCFS);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.docCount());\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n  }\n\n","sourceOld":"  public void createIndex(String dirName, boolean doCFS) throws IOException {\n\n    rmDir(dirName);\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.getDirectory(dirName);\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    writer.setUseCompoundFile(doCFS);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.docCount());\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a015c55424dd37249054283bedc90388bd45358f","date":1197049353,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean).mjava","sourceNew":"  public void createIndex(String dirName, boolean doCFS) throws IOException {\n\n    rmDir(dirName);\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.getDirectory(dirName);\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    writer.setUseCompoundFile(doCFS);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.docCount());\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n  }\n\n","sourceOld":"  public void createIndex(String dirName, boolean doCFS) throws IOException {\n\n    rmDir(dirName);\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.getDirectory(dirName, null, false);\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    writer.setUseCompoundFile(doCFS);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.docCount());\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3d08461c77d39c25ea6ff0cd05b32f948fa2a33","date":1201260752,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean).mjava","sourceNew":"  public void createIndex(String dirName, boolean doCFS) throws IOException {\n\n    rmDir(dirName);\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.getDirectory(dirName);\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    writer.setUseCompoundFile(doCFS);\n    writer.setMaxBufferedDocs(10);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.docCount());\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n  }\n\n","sourceOld":"  public void createIndex(String dirName, boolean doCFS) throws IOException {\n\n    rmDir(dirName);\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.getDirectory(dirName);\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    writer.setUseCompoundFile(doCFS);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.docCount());\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean).mjava","sourceNew":"  public void createIndex(String dirName, boolean doCFS) throws IOException {\n\n    rmDir(dirName);\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.getDirectory(dirName);\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(doCFS);\n    writer.setMaxBufferedDocs(10);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.docCount());\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n  }\n\n","sourceOld":"  public void createIndex(String dirName, boolean doCFS) throws IOException {\n\n    rmDir(dirName);\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.getDirectory(dirName);\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    writer.setUseCompoundFile(doCFS);\n    writer.setMaxBufferedDocs(10);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.docCount());\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02","date":1243677645,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean).mjava","sourceNew":"  public void createIndex(String dirName, boolean doCFS) throws IOException {\n\n    rmDir(dirName);\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(doCFS);\n    writer.setMaxBufferedDocs(10);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.docCount());\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n  }\n\n","sourceOld":"  public void createIndex(String dirName, boolean doCFS) throws IOException {\n\n    rmDir(dirName);\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.getDirectory(dirName);\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(doCFS);\n    writer.setMaxBufferedDocs(10);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.docCount());\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5e023aa3e1228b8ccacdc30d852eb88e996d1b2","date":1247229077,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean).mjava","sourceNew":"  public void createIndex(String dirName, boolean doCFS) throws IOException {\n\n    rmDir(dirName);\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(doCFS);\n    writer.setMaxBufferedDocs(10);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.docCount());\n    writer.close();\n\n    // open fresh writer so we get no prx file in the added segment\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(doCFS);\n    writer.setMaxBufferedDocs(10);\n    addNoProxDoc(writer);\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n  }\n\n","sourceOld":"  public void createIndex(String dirName, boolean doCFS) throws IOException {\n\n    rmDir(dirName);\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(doCFS);\n    writer.setMaxBufferedDocs(10);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.docCount());\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean).mjava","sourceNew":null,"sourceOld":"  public void createIndex(String dirName, boolean doCFS) throws IOException {\n\n    rmDir(dirName);\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(doCFS);\n    writer.setMaxBufferedDocs(10);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.docCount());\n    writer.close();\n\n    // open fresh writer so we get no prx file in the added segment\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(doCFS);\n    writer.setMaxBufferedDocs(10);\n    addNoProxDoc(writer);\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean).mjava","sourceNew":null,"sourceOld":"  public void createIndex(String dirName, boolean doCFS) throws IOException {\n\n    rmDir(dirName);\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(doCFS);\n    writer.setMaxBufferedDocs(10);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.docCount());\n    writer.close();\n\n    // open fresh writer so we get no prx file in the added segment\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(doCFS);\n    writer.setMaxBufferedDocs(10);\n    addNoProxDoc(writer);\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1b736248cf13d8c143d4af78b588926f4151240","date":1254825163,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public void createIndex(String dirName, boolean doCFS) throws IOException {\n\n    rmDir(dirName);\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(doCFS);\n    writer.setMaxBufferedDocs(10);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n    writer.close();\n\n    // open fresh writer so we get no prx file in the added segment\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(doCFS);\n    writer.setMaxBufferedDocs(10);\n    addNoProxDoc(writer);\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9a4b98263fc6c77bb5eb34f7c3e9fd7542b9650","date":1254831793,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean).mjava","sourceNew":null,"sourceOld":"  public void createIndex(String dirName, boolean doCFS) throws IOException {\n\n    rmDir(dirName);\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(doCFS);\n    writer.setMaxBufferedDocs(10);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n    writer.close();\n\n    // open fresh writer so we get no prx file in the added segment\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(doCFS);\n    writer.setMaxBufferedDocs(10);\n    addNoProxDoc(writer);\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5c0bd3bf61809aea862d848dcf2119d3b9c38bf","date":1254831905,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public void createIndex(String dirName, boolean doCFS) throws IOException {\n\n    rmDir(dirName);\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(doCFS);\n    writer.setMaxBufferedDocs(10);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.docCount());\n    writer.close();\n\n    // open fresh writer so we get no prx file in the added segment\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(doCFS);\n    writer.setMaxBufferedDocs(10);\n    addNoProxDoc(writer);\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"712be41a80a289d25186217345860f2ddec4cab8","date":1254838366,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean).mjava","sourceNew":"  public void createIndex(String dirName, boolean doCFS) throws IOException {\n\n    rmDir(dirName);\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(doCFS);\n    writer.setMaxBufferedDocs(10);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n    writer.close();\n\n    // open fresh writer so we get no prx file in the added segment\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(doCFS);\n    writer.setMaxBufferedDocs(10);\n    addNoProxDoc(writer);\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n  }\n\n","sourceOld":"  public void createIndex(String dirName, boolean doCFS) throws IOException {\n\n    rmDir(dirName);\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(doCFS);\n    writer.setMaxBufferedDocs(10);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.docCount());\n    writer.close();\n\n    // open fresh writer so we get no prx file in the added segment\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(doCFS);\n    writer.setMaxBufferedDocs(10);\n    addNoProxDoc(writer);\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean).mjava","sourceNew":"  public void createIndex(String dirName, boolean doCFS) throws IOException {\n\n    rmDir(dirName);\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(doCFS);\n    writer.setMaxBufferedDocs(10);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n    writer.close();\n\n    // open fresh writer so we get no prx file in the added segment\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(doCFS);\n    writer.setMaxBufferedDocs(10);\n    addNoProxDoc(writer);\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n  }\n\n","sourceOld":"  public void createIndex(String dirName, boolean doCFS) throws IOException {\n\n    rmDir(dirName);\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(doCFS);\n    writer.setMaxBufferedDocs(10);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n    writer.close();\n\n    // open fresh writer so we get no prx file in the added segment\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(doCFS);\n    writer.setMaxBufferedDocs(10);\n    addNoProxDoc(writer);\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean).mjava","sourceNew":"  public void createIndex(String dirName, boolean doCFS) throws IOException {\n\n    rmDir(dirName);\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(doCFS);\n    writer.setMaxBufferedDocs(10);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n    writer.close();\n\n    // open fresh writer so we get no prx file in the added segment\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(doCFS);\n    writer.setMaxBufferedDocs(10);\n    addNoProxDoc(writer);\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n  }\n\n","sourceOld":"  public void createIndex(String dirName, boolean doCFS) throws IOException {\n\n    rmDir(dirName);\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(doCFS);\n    writer.setMaxBufferedDocs(10);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n    writer.close();\n\n    // open fresh writer so we get no prx file in the added segment\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(doCFS);\n    writer.setMaxBufferedDocs(10);\n    addNoProxDoc(writer);\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean).mjava","sourceNew":"  public void createIndex(String dirName, boolean doCFS) throws IOException {\n\n    rmDir(dirName);\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(doCFS);\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(doCFS);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n    writer.close();\n\n    // open fresh writer so we get no prx file in the added segment\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(doCFS);\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(doCFS);\n    addNoProxDoc(writer);\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n  }\n\n","sourceOld":"  public void createIndex(String dirName, boolean doCFS) throws IOException {\n\n    rmDir(dirName);\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(doCFS);\n    writer.setMaxBufferedDocs(10);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n    writer.close();\n\n    // open fresh writer so we get no prx file in the added segment\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(doCFS);\n    writer.setMaxBufferedDocs(10);\n    addNoProxDoc(writer);\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean).mjava","sourceNew":"  public void createIndex(String dirName, boolean doCFS) throws IOException {\n\n    rmDir(dirName);\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(doCFS);\n    writer.setMaxBufferedDocs(10);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n    writer.close();\n\n    // open fresh writer so we get no prx file in the added segment\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(doCFS);\n    writer.setMaxBufferedDocs(10);\n    addNoProxDoc(writer);\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n  }\n\n","sourceOld":"  public void createIndex(String dirName, boolean doCFS) throws IOException {\n\n    rmDir(dirName);\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(doCFS);\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(doCFS);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n    writer.close();\n\n    // open fresh writer so we get no prx file in the added segment\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(doCFS);\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(doCFS);\n    addNoProxDoc(writer);\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean).mjava","sourceNew":"  public void createIndex(String dirName, boolean doCFS) throws IOException {\n\n    rmDir(dirName);\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(doCFS);\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(doCFS);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n    writer.close();\n\n    // open fresh writer so we get no prx file in the added segment\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(doCFS);\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(doCFS);\n    addNoProxDoc(writer);\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n  }\n\n","sourceOld":"  public void createIndex(String dirName, boolean doCFS) throws IOException {\n\n    rmDir(dirName);\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(doCFS);\n    writer.setMaxBufferedDocs(10);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n    writer.close();\n\n    // open fresh writer so we get no prx file in the added segment\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(doCFS);\n    writer.setMaxBufferedDocs(10);\n    addNoProxDoc(writer);\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean).mjava","sourceNew":"  public void createIndex(String dirName, boolean doCFS) throws IOException {\n\n    rmDir(dirName);\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(doCFS);\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(doCFS);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n    writer.close();\n\n    // open fresh writer so we get no prx file in the added segment\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(doCFS);\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(doCFS);\n    addNoProxDoc(writer);\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n  }\n\n","sourceOld":"  public void createIndex(String dirName, boolean doCFS) throws IOException {\n\n    rmDir(dirName);\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(doCFS);\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(doCFS);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n    writer.close();\n\n    // open fresh writer so we get no prx file in the added segment\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(doCFS);\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(doCFS);\n    addNoProxDoc(writer);\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f1b736248cf13d8c143d4af78b588926f4151240":["0a046c0c310bc77931fc8441bd920053b607dd14"],"b3d08461c77d39c25ea6ff0cd05b32f948fa2a33":["a015c55424dd37249054283bedc90388bd45358f"],"ddc9931b60a4b1618b9f7cb9c176883390697b1b":["66b12ba4967665216eeb706b58d424c51fb3641a"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["c5e023aa3e1228b8ccacdc30d852eb88e996d1b2","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["b3d08461c77d39c25ea6ff0cd05b32f948fa2a33"],"c5c0bd3bf61809aea862d848dcf2119d3b9c38bf":["a9a4b98263fc6c77bb5eb34f7c3e9fd7542b9650"],"adabb461edd9894ec460711a27f45364ec5f1464":["ddc9931b60a4b1618b9f7cb9c176883390697b1b"],"a9a4b98263fc6c77bb5eb34f7c3e9fd7542b9650":["f1b736248cf13d8c143d4af78b588926f4151240"],"b583d3621fe173e7296abcf62f82fb707c901234":["adabb461edd9894ec460711a27f45364ec5f1464"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"66b12ba4967665216eeb706b58d424c51fb3641a":["059062eb4071e7bbb5a38b6513158f2f87ede135"],"a015c55424dd37249054283bedc90388bd45358f":["b583d3621fe173e7296abcf62f82fb707c901234"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["c5e023aa3e1228b8ccacdc30d852eb88e996d1b2"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["712be41a80a289d25186217345860f2ddec4cab8"],"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c5e023aa3e1228b8ccacdc30d852eb88e996d1b2":["5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02"],"712be41a80a289d25186217345860f2ddec4cab8":["c5c0bd3bf61809aea862d848dcf2119d3b9c38bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"059062eb4071e7bbb5a38b6513158f2f87ede135":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f1b736248cf13d8c143d4af78b588926f4151240":["a9a4b98263fc6c77bb5eb34f7c3e9fd7542b9650"],"b3d08461c77d39c25ea6ff0cd05b32f948fa2a33":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"ddc9931b60a4b1618b9f7cb9c176883390697b1b":["adabb461edd9894ec460711a27f45364ec5f1464"],"0a046c0c310bc77931fc8441bd920053b607dd14":["f1b736248cf13d8c143d4af78b588926f4151240"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02"],"c5c0bd3bf61809aea862d848dcf2119d3b9c38bf":["712be41a80a289d25186217345860f2ddec4cab8"],"adabb461edd9894ec460711a27f45364ec5f1464":["b583d3621fe173e7296abcf62f82fb707c901234"],"a9a4b98263fc6c77bb5eb34f7c3e9fd7542b9650":["c5c0bd3bf61809aea862d848dcf2119d3b9c38bf"],"b583d3621fe173e7296abcf62f82fb707c901234":["a015c55424dd37249054283bedc90388bd45358f"],"66b12ba4967665216eeb706b58d424c51fb3641a":["ddc9931b60a4b1618b9f7cb9c176883390697b1b"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a015c55424dd37249054283bedc90388bd45358f":["b3d08461c77d39c25ea6ff0cd05b32f948fa2a33"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02":["c5e023aa3e1228b8ccacdc30d852eb88e996d1b2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["059062eb4071e7bbb5a38b6513158f2f87ede135"],"c5e023aa3e1228b8ccacdc30d852eb88e996d1b2":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"712be41a80a289d25186217345860f2ddec4cab8":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"059062eb4071e7bbb5a38b6513158f2f87ede135":["66b12ba4967665216eeb706b58d424c51fb3641a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}