{"path":"src/java/org/apache/solr/handler/component/DebugComponent#merge(Object,Object,Set[String]).mjava","commits":[{"id":"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76","date":1204055227,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/DebugComponent#merge(Object,Object,Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  Object merge(Object source, Object dest, Set<String> exclude) {\n    if (source == null) return dest;\n    if (dest == null) {\n      if (source instanceof NamedList) {\n        dest = source instanceof SimpleOrderedMap ? new SimpleOrderedMap() : new NamedList();\n      } else {\n        return source;\n      }\n    } else {\n\n      if (dest instanceof Collection) {\n        if (source instanceof Collection) {\n          ((Collection)dest).addAll((Collection)source);\n        } else {\n          ((Collection)dest).add(source);\n        }\n        return dest;\n      } else if (source instanceof Number) {\n        if (dest instanceof Number) {\n          if (source instanceof Double || dest instanceof Double) {\n            return ((Number)source).doubleValue() + ((Number)dest).doubleValue();\n          }\n          return ((Number)source).longValue() + ((Number)dest).longValue();\n        }\n        // fall through\n      } else if (source instanceof String) {\n        if (source.equals(dest)) {\n          return dest;\n        }\n        // fall through\n      }\n    }\n\n\n    if (source instanceof NamedList && dest instanceof NamedList) {\n      NamedList tmp = new NamedList();\n      NamedList sl = (NamedList)source;\n      NamedList dl = (NamedList)dest;\n      for (int i=0; i<sl.size(); i++) {\n        String skey = sl.getName(i);\n        if (exclude != null && exclude.contains(skey)) continue;\n        Object sval = sl.getVal(i);\n        int didx = -1;\n\n        // optimize case where elements are in same position\n        if (i < dl.size()) {\n          String dkey = dl.getName(i);\n          if (skey == dkey || (skey!=null && skey.equals(dkey))) {\n            didx = i;\n          }\n        }\n\n        if (didx == -1) {\n          didx = dl.indexOf(skey, 0);\n        }\n\n        if (didx == -1) {\n          tmp.add(skey, merge(sval, null, null));\n        } else {\n          dl.setVal(didx, merge(sval, dl.getVal(didx), null));\n        }\n      }\n      dl.addAll(tmp);\n      return dl;\n    }\n\n    // merge unlike elements in a list\n    List t = new ArrayList();\n    t.add(dest);\n    t.add(source);\n    return t;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/DebugComponent#merge(Object,Object,Set[String]).mjava","pathOld":"src/java/org/apache/solr/handler/component/DebugComponent#merge(Object,Object,Set[String]).mjava","sourceNew":"  Object merge(Object source, Object dest, Set<String> exclude) {\n    if (source == null) return dest;\n    if (dest == null) {\n      if (source instanceof NamedList) {\n        dest = source instanceof SimpleOrderedMap ? new SimpleOrderedMap() : new NamedList();\n      } else {\n        return source;\n      }\n    } else {\n\n      if (dest instanceof Collection) {\n        if (source instanceof Collection) {\n          ((Collection)dest).addAll((Collection)source);\n        } else {\n          ((Collection)dest).add(source);\n        }\n        return dest;\n      } else if (source instanceof Number) {\n        if (dest instanceof Number) {\n          if (source instanceof Double || dest instanceof Double) {\n            return ((Number)source).doubleValue() + ((Number)dest).doubleValue();\n          }\n          return ((Number)source).longValue() + ((Number)dest).longValue();\n        }\n        // fall through\n      } else if (source instanceof String) {\n        if (source.equals(dest)) {\n          return dest;\n        }\n        // fall through\n      }\n    }\n\n\n    if (source instanceof NamedList && dest instanceof NamedList) {\n      NamedList tmp = new NamedList();\n      NamedList sl = (NamedList)source;\n      NamedList dl = (NamedList)dest;\n      for (int i=0; i<sl.size(); i++) {\n        String skey = sl.getName(i);\n        if (exclude != null && exclude.contains(skey)) continue;\n        Object sval = sl.getVal(i);\n        int didx = -1;\n\n        // optimize case where elements are in same position\n        if (i < dl.size()) {\n          String dkey = dl.getName(i);\n          if (skey == dkey || (skey!=null && skey.equals(dkey))) {\n            didx = i;\n          }\n        }\n\n        if (didx == -1) {\n          didx = dl.indexOf(skey, 0);\n        }\n\n        if (didx == -1) {\n          tmp.add(skey, merge(sval, null, null));\n        } else {\n          dl.setVal(didx, merge(sval, dl.getVal(didx), null));\n        }\n      }\n      dl.addAll(tmp);\n      return dl;\n    }\n\n    // merge unlike elements in a list\n    List t = new ArrayList();\n    t.add(dest);\n    t.add(source);\n    return t;\n  }\n\n","sourceOld":"  Object merge(Object source, Object dest, Set<String> exclude) {\n    if (source == null) return dest;\n    if (dest == null) {\n      if (source instanceof NamedList) {\n        dest = source instanceof SimpleOrderedMap ? new SimpleOrderedMap() : new NamedList();\n      } else {\n        return source;\n      }\n    } else {\n\n      if (dest instanceof Collection) {\n        if (source instanceof Collection) {\n          ((Collection)dest).addAll((Collection)source);\n        } else {\n          ((Collection)dest).add(source);\n        }\n        return dest;\n      } else if (source instanceof Number) {\n        if (dest instanceof Number) {\n          if (source instanceof Double || dest instanceof Double) {\n            return ((Number)source).doubleValue() + ((Number)dest).doubleValue();\n          }\n          return ((Number)source).longValue() + ((Number)dest).longValue();\n        }\n        // fall through\n      } else if (source instanceof String) {\n        if (source.equals(dest)) {\n          return dest;\n        }\n        // fall through\n      }\n    }\n\n\n    if (source instanceof NamedList && dest instanceof NamedList) {\n      NamedList tmp = new NamedList();\n      NamedList sl = (NamedList)source;\n      NamedList dl = (NamedList)dest;\n      for (int i=0; i<sl.size(); i++) {\n        String skey = sl.getName(i);\n        if (exclude != null && exclude.contains(skey)) continue;\n        Object sval = sl.getVal(i);\n        int didx = -1;\n\n        // optimize case where elements are in same position\n        if (i < dl.size()) {\n          String dkey = dl.getName(i);\n          if (skey == dkey || (skey!=null && skey.equals(dkey))) {\n            didx = i;\n          }\n        }\n\n        if (didx == -1) {\n          didx = dl.indexOf(skey, 0);\n        }\n\n        if (didx == -1) {\n          tmp.add(skey, merge(sval, null, null));\n        } else {\n          dl.setVal(didx, merge(sval, dl.getVal(didx), null));\n        }\n      }\n      dl.addAll(tmp);\n      return dl;\n    }\n\n    // merge unlike elements in a list\n    List t = new ArrayList();\n    t.add(dest);\n    t.add(source);\n    return t;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}