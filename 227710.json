{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CoreAdminRequest.Create#getParams().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CoreAdminRequest.Create#getParams().mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/request/CoreAdminRequest.Create#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      if( action == null ) {\n        throw new RuntimeException( \"no action specified!\" );\n      }\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set( CoreAdminParams.ACTION, action.toString() );\n      if( action.equals(CoreAdminAction.CREATE) ) {\n        params.set( CoreAdminParams.NAME, core );\n      } else {\n        params.set( CoreAdminParams.CORE, core );\n      }\n      params.set( CoreAdminParams.INSTANCE_DIR, instanceDir);\n      if (configName != null) {\n        params.set( CoreAdminParams.CONFIG, configName);\n      }\n      if (schemaName != null) {\n        params.set( CoreAdminParams.SCHEMA, schemaName);\n      }\n      if (dataDir != null) {\n        params.set( CoreAdminParams.DATA_DIR, dataDir);\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      if( action == null ) {\n        throw new RuntimeException( \"no action specified!\" );\n      }\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set( CoreAdminParams.ACTION, action.toString() );\n      if( action.equals(CoreAdminAction.CREATE) ) {\n        params.set( CoreAdminParams.NAME, core );\n      } else {\n        params.set( CoreAdminParams.CORE, core );\n      }\n      params.set( CoreAdminParams.INSTANCE_DIR, instanceDir);\n      if (configName != null) {\n        params.set( CoreAdminParams.CONFIG, configName);\n      }\n      if (schemaName != null) {\n        params.set( CoreAdminParams.SCHEMA, schemaName);\n      }\n      if (dataDir != null) {\n        params.set( CoreAdminParams.DATA_DIR, dataDir);\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CoreAdminRequest.Create#getParams().mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/request/CoreAdminRequest.Create#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      if( action == null ) {\n        throw new RuntimeException( \"no action specified!\" );\n      }\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set( CoreAdminParams.ACTION, action.toString() );\n      if( action.equals(CoreAdminAction.CREATE) ) {\n        params.set( CoreAdminParams.NAME, core );\n      } else {\n        params.set( CoreAdminParams.CORE, core );\n      }\n      params.set( CoreAdminParams.INSTANCE_DIR, instanceDir);\n      if (configName != null) {\n        params.set( CoreAdminParams.CONFIG, configName);\n      }\n      if (schemaName != null) {\n        params.set( CoreAdminParams.SCHEMA, schemaName);\n      }\n      if (dataDir != null) {\n        params.set( CoreAdminParams.DATA_DIR, dataDir);\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      if( action == null ) {\n        throw new RuntimeException( \"no action specified!\" );\n      }\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set( CoreAdminParams.ACTION, action.toString() );\n      if( action.equals(CoreAdminAction.CREATE) ) {\n        params.set( CoreAdminParams.NAME, core );\n      } else {\n        params.set( CoreAdminParams.CORE, core );\n      }\n      params.set( CoreAdminParams.INSTANCE_DIR, instanceDir);\n      if (configName != null) {\n        params.set( CoreAdminParams.CONFIG, configName);\n      }\n      if (schemaName != null) {\n        params.set( CoreAdminParams.SCHEMA, schemaName);\n      }\n      if (dataDir != null) {\n        params.set( CoreAdminParams.DATA_DIR, dataDir);\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CoreAdminRequest.Create#getParams().mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/request/CoreAdminRequest.Create#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      if( action == null ) {\n        throw new RuntimeException( \"no action specified!\" );\n      }\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set( CoreAdminParams.ACTION, action.toString() );\n      if( action.equals(CoreAdminAction.CREATE) ) {\n        params.set( CoreAdminParams.NAME, core );\n      } else {\n        params.set( CoreAdminParams.CORE, core );\n      }\n      params.set( CoreAdminParams.INSTANCE_DIR, instanceDir);\n      if (configName != null) {\n        params.set( CoreAdminParams.CONFIG, configName);\n      }\n      if (schemaName != null) {\n        params.set( CoreAdminParams.SCHEMA, schemaName);\n      }\n      if (dataDir != null) {\n        params.set( CoreAdminParams.DATA_DIR, dataDir);\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      if( action == null ) {\n        throw new RuntimeException( \"no action specified!\" );\n      }\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set( CoreAdminParams.ACTION, action.toString() );\n      if( action.equals(CoreAdminAction.CREATE) ) {\n        params.set( CoreAdminParams.NAME, core );\n      } else {\n        params.set( CoreAdminParams.CORE, core );\n      }\n      params.set( CoreAdminParams.INSTANCE_DIR, instanceDir);\n      if (configName != null) {\n        params.set( CoreAdminParams.CONFIG, configName);\n      }\n      if (schemaName != null) {\n        params.set( CoreAdminParams.SCHEMA, schemaName);\n      }\n      if (dataDir != null) {\n        params.set( CoreAdminParams.DATA_DIR, dataDir);\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6101715a4732c1fe39eae50ce4a23fec6fc270d0","date":1328795951,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CoreAdminRequest.Create#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CoreAdminRequest.Create#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      if( action == null ) {\n        throw new RuntimeException( \"no action specified!\" );\n      }\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set( CoreAdminParams.ACTION, action.toString() );\n      if( action.equals(CoreAdminAction.CREATE) ) {\n        params.set( CoreAdminParams.NAME, core );\n      } else {\n        params.set( CoreAdminParams.CORE, core );\n      }\n      params.set( CoreAdminParams.INSTANCE_DIR, instanceDir);\n      if (configName != null) {\n        params.set( CoreAdminParams.CONFIG, configName);\n      }\n      if (schemaName != null) {\n        params.set( CoreAdminParams.SCHEMA, schemaName);\n      }\n      if (dataDir != null) {\n        params.set( CoreAdminParams.DATA_DIR, dataDir);\n      }\n      if (collection != null) {\n        params.set( CoreAdminParams.COLLECTION, collection);\n      }\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      if( action == null ) {\n        throw new RuntimeException( \"no action specified!\" );\n      }\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set( CoreAdminParams.ACTION, action.toString() );\n      if( action.equals(CoreAdminAction.CREATE) ) {\n        params.set( CoreAdminParams.NAME, core );\n      } else {\n        params.set( CoreAdminParams.CORE, core );\n      }\n      params.set( CoreAdminParams.INSTANCE_DIR, instanceDir);\n      if (configName != null) {\n        params.set( CoreAdminParams.CONFIG, configName);\n      }\n      if (schemaName != null) {\n        params.set( CoreAdminParams.SCHEMA, schemaName);\n      }\n      if (dataDir != null) {\n        params.set( CoreAdminParams.DATA_DIR, dataDir);\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"070c33aaa5d669bfb86d96f686fd915ccccc0f6a","date":1329254372,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CoreAdminRequest.Create#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CoreAdminRequest.Create#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      if( action == null ) {\n        throw new RuntimeException( \"no action specified!\" );\n      }\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set( CoreAdminParams.ACTION, action.toString() );\n      if( action.equals(CoreAdminAction.CREATE) ) {\n        params.set( CoreAdminParams.NAME, core );\n      } else {\n        params.set( CoreAdminParams.CORE, core );\n      }\n      params.set( CoreAdminParams.INSTANCE_DIR, instanceDir);\n      if (configName != null) {\n        params.set( CoreAdminParams.CONFIG, configName);\n      }\n      if (schemaName != null) {\n        params.set( CoreAdminParams.SCHEMA, schemaName);\n      }\n      if (dataDir != null) {\n        params.set( CoreAdminParams.DATA_DIR, dataDir);\n      }\n      if (collection != null) {\n        params.set( CoreAdminParams.COLLECTION, collection);\n      }\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (shardId != null) {\n        params.set( ZkStateReader.SHARD_ID_PROP, shardId);\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      if( action == null ) {\n        throw new RuntimeException( \"no action specified!\" );\n      }\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set( CoreAdminParams.ACTION, action.toString() );\n      if( action.equals(CoreAdminAction.CREATE) ) {\n        params.set( CoreAdminParams.NAME, core );\n      } else {\n        params.set( CoreAdminParams.CORE, core );\n      }\n      params.set( CoreAdminParams.INSTANCE_DIR, instanceDir);\n      if (configName != null) {\n        params.set( CoreAdminParams.CONFIG, configName);\n      }\n      if (schemaName != null) {\n        params.set( CoreAdminParams.SCHEMA, schemaName);\n      }\n      if (dataDir != null) {\n        params.set( CoreAdminParams.DATA_DIR, dataDir);\n      }\n      if (collection != null) {\n        params.set( CoreAdminParams.COLLECTION, collection);\n      }\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea4018996a4853ecfb1c797beede737c90da6c3b","date":1329429759,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CoreAdminRequest.Create#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CoreAdminRequest.Create#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      if( action == null ) {\n        throw new RuntimeException( \"no action specified!\" );\n      }\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set( CoreAdminParams.ACTION, action.toString() );\n      if( action.equals(CoreAdminAction.CREATE) ) {\n        params.set( CoreAdminParams.NAME, core );\n      } else {\n        params.set( CoreAdminParams.CORE, core );\n      }\n      params.set( CoreAdminParams.INSTANCE_DIR, instanceDir);\n      if (configName != null) {\n        params.set( CoreAdminParams.CONFIG, configName);\n      }\n      if (schemaName != null) {\n        params.set( CoreAdminParams.SCHEMA, schemaName);\n      }\n      if (dataDir != null) {\n        params.set( CoreAdminParams.DATA_DIR, dataDir);\n      }\n      if (collection != null) {\n        params.set( CoreAdminParams.COLLECTION, collection);\n      }\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (shardId != null) {\n        params.set( ZkStateReader.SHARD_ID_PROP, shardId);\n      }\n      if (roles != null) {\n        params.set( CoreAdminParams.ROLES, roles);\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      if( action == null ) {\n        throw new RuntimeException( \"no action specified!\" );\n      }\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set( CoreAdminParams.ACTION, action.toString() );\n      if( action.equals(CoreAdminAction.CREATE) ) {\n        params.set( CoreAdminParams.NAME, core );\n      } else {\n        params.set( CoreAdminParams.CORE, core );\n      }\n      params.set( CoreAdminParams.INSTANCE_DIR, instanceDir);\n      if (configName != null) {\n        params.set( CoreAdminParams.CONFIG, configName);\n      }\n      if (schemaName != null) {\n        params.set( CoreAdminParams.SCHEMA, schemaName);\n      }\n      if (dataDir != null) {\n        params.set( CoreAdminParams.DATA_DIR, dataDir);\n      }\n      if (collection != null) {\n        params.set( CoreAdminParams.COLLECTION, collection);\n      }\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (shardId != null) {\n        params.set( ZkStateReader.SHARD_ID_PROP, shardId);\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b606c730b37f5bfe8c7cc9b3d105519f0bdfbd1","date":1329909246,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CoreAdminRequest.Create#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CoreAdminRequest.Create#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      if( action == null ) {\n        throw new RuntimeException( \"no action specified!\" );\n      }\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set( CoreAdminParams.ACTION, action.toString() );\n      if( action.equals(CoreAdminAction.CREATE) ) {\n        params.set( CoreAdminParams.NAME, core );\n      } else {\n        params.set( CoreAdminParams.CORE, core );\n      }\n      params.set( CoreAdminParams.INSTANCE_DIR, instanceDir);\n      if (configName != null) {\n        params.set( CoreAdminParams.CONFIG, configName);\n      }\n      if (schemaName != null) {\n        params.set( CoreAdminParams.SCHEMA, schemaName);\n      }\n      if (dataDir != null) {\n        params.set( CoreAdminParams.DATA_DIR, dataDir);\n      }\n      if (collection != null) {\n        params.set( CoreAdminParams.COLLECTION, collection);\n      }\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (shardId != null) {\n        params.set( CoreAdminParams.SHARD, shardId);\n      }\n      if (roles != null) {\n        params.set( CoreAdminParams.ROLES, roles);\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      if( action == null ) {\n        throw new RuntimeException( \"no action specified!\" );\n      }\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set( CoreAdminParams.ACTION, action.toString() );\n      if( action.equals(CoreAdminAction.CREATE) ) {\n        params.set( CoreAdminParams.NAME, core );\n      } else {\n        params.set( CoreAdminParams.CORE, core );\n      }\n      params.set( CoreAdminParams.INSTANCE_DIR, instanceDir);\n      if (configName != null) {\n        params.set( CoreAdminParams.CONFIG, configName);\n      }\n      if (schemaName != null) {\n        params.set( CoreAdminParams.SCHEMA, schemaName);\n      }\n      if (dataDir != null) {\n        params.set( CoreAdminParams.DATA_DIR, dataDir);\n      }\n      if (collection != null) {\n        params.set( CoreAdminParams.COLLECTION, collection);\n      }\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (shardId != null) {\n        params.set( ZkStateReader.SHARD_ID_PROP, shardId);\n      }\n      if (roles != null) {\n        params.set( CoreAdminParams.ROLES, roles);\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CoreAdminRequest.Create#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CoreAdminRequest.Create#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      if( action == null ) {\n        throw new RuntimeException( \"no action specified!\" );\n      }\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set( CoreAdminParams.ACTION, action.toString() );\n      if( action.equals(CoreAdminAction.CREATE) ) {\n        params.set( CoreAdminParams.NAME, core );\n      } else {\n        params.set( CoreAdminParams.CORE, core );\n      }\n      params.set( CoreAdminParams.INSTANCE_DIR, instanceDir);\n      if (configName != null) {\n        params.set( CoreAdminParams.CONFIG, configName);\n      }\n      if (schemaName != null) {\n        params.set( CoreAdminParams.SCHEMA, schemaName);\n      }\n      if (dataDir != null) {\n        params.set( CoreAdminParams.DATA_DIR, dataDir);\n      }\n      if (collection != null) {\n        params.set( CoreAdminParams.COLLECTION, collection);\n      }\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (shardId != null) {\n        params.set( CoreAdminParams.SHARD, shardId);\n      }\n      if (roles != null) {\n        params.set( CoreAdminParams.ROLES, roles);\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      if( action == null ) {\n        throw new RuntimeException( \"no action specified!\" );\n      }\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set( CoreAdminParams.ACTION, action.toString() );\n      if( action.equals(CoreAdminAction.CREATE) ) {\n        params.set( CoreAdminParams.NAME, core );\n      } else {\n        params.set( CoreAdminParams.CORE, core );\n      }\n      params.set( CoreAdminParams.INSTANCE_DIR, instanceDir);\n      if (configName != null) {\n        params.set( CoreAdminParams.CONFIG, configName);\n      }\n      if (schemaName != null) {\n        params.set( CoreAdminParams.SCHEMA, schemaName);\n      }\n      if (dataDir != null) {\n        params.set( CoreAdminParams.DATA_DIR, dataDir);\n      }\n      if (collection != null) {\n        params.set( CoreAdminParams.COLLECTION, collection);\n      }\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (shardId != null) {\n        params.set( ZkStateReader.SHARD_ID_PROP, shardId);\n      }\n      if (roles != null) {\n        params.set( CoreAdminParams.ROLES, roles);\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3fc0aa9a0ea3688c5b0fc6109449a008563be32","date":1355170793,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CoreAdminRequest.Create#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CoreAdminRequest.Create#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      if( action == null ) {\n        throw new RuntimeException( \"no action specified!\" );\n      }\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set( CoreAdminParams.ACTION, action.toString() );\n      if( action.equals(CoreAdminAction.CREATE) ) {\n        params.set( CoreAdminParams.NAME, core );\n      } else {\n        params.set( CoreAdminParams.CORE, core );\n      }\n      params.set( CoreAdminParams.INSTANCE_DIR, instanceDir);\n      if (configName != null) {\n        params.set( CoreAdminParams.CONFIG, configName);\n      }\n      if (schemaName != null) {\n        params.set( CoreAdminParams.SCHEMA, schemaName);\n      }\n      if (dataDir != null) {\n        params.set( CoreAdminParams.DATA_DIR, dataDir);\n      }\n      if (ulogDir != null) {\n        params.set( CoreAdminParams.ULOG_DIR, ulogDir);\n      }\n      if (collection != null) {\n        params.set( CoreAdminParams.COLLECTION, collection);\n      }\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (shardId != null) {\n        params.set( CoreAdminParams.SHARD, shardId);\n      }\n      if (roles != null) {\n        params.set( CoreAdminParams.ROLES, roles);\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      if( action == null ) {\n        throw new RuntimeException( \"no action specified!\" );\n      }\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set( CoreAdminParams.ACTION, action.toString() );\n      if( action.equals(CoreAdminAction.CREATE) ) {\n        params.set( CoreAdminParams.NAME, core );\n      } else {\n        params.set( CoreAdminParams.CORE, core );\n      }\n      params.set( CoreAdminParams.INSTANCE_DIR, instanceDir);\n      if (configName != null) {\n        params.set( CoreAdminParams.CONFIG, configName);\n      }\n      if (schemaName != null) {\n        params.set( CoreAdminParams.SCHEMA, schemaName);\n      }\n      if (dataDir != null) {\n        params.set( CoreAdminParams.DATA_DIR, dataDir);\n      }\n      if (collection != null) {\n        params.set( CoreAdminParams.COLLECTION, collection);\n      }\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (shardId != null) {\n        params.set( CoreAdminParams.SHARD, shardId);\n      }\n      if (roles != null) {\n        params.set( CoreAdminParams.ROLES, roles);\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CoreAdminRequest.Create#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CoreAdminRequest.Create#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      if( action == null ) {\n        throw new RuntimeException( \"no action specified!\" );\n      }\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set( CoreAdminParams.ACTION, action.toString() );\n      if( action.equals(CoreAdminAction.CREATE) ) {\n        params.set( CoreAdminParams.NAME, core );\n      } else {\n        params.set( CoreAdminParams.CORE, core );\n      }\n      params.set( CoreAdminParams.INSTANCE_DIR, instanceDir);\n      if (configName != null) {\n        params.set( CoreAdminParams.CONFIG, configName);\n      }\n      if (schemaName != null) {\n        params.set( CoreAdminParams.SCHEMA, schemaName);\n      }\n      if (dataDir != null) {\n        params.set( CoreAdminParams.DATA_DIR, dataDir);\n      }\n      if (ulogDir != null) {\n        params.set( CoreAdminParams.ULOG_DIR, ulogDir);\n      }\n      if (collection != null) {\n        params.set( CoreAdminParams.COLLECTION, collection);\n      }\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (shardId != null) {\n        params.set( CoreAdminParams.SHARD, shardId);\n      }\n      if (roles != null) {\n        params.set( CoreAdminParams.ROLES, roles);\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      if( action == null ) {\n        throw new RuntimeException( \"no action specified!\" );\n      }\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set( CoreAdminParams.ACTION, action.toString() );\n      if( action.equals(CoreAdminAction.CREATE) ) {\n        params.set( CoreAdminParams.NAME, core );\n      } else {\n        params.set( CoreAdminParams.CORE, core );\n      }\n      params.set( CoreAdminParams.INSTANCE_DIR, instanceDir);\n      if (configName != null) {\n        params.set( CoreAdminParams.CONFIG, configName);\n      }\n      if (schemaName != null) {\n        params.set( CoreAdminParams.SCHEMA, schemaName);\n      }\n      if (dataDir != null) {\n        params.set( CoreAdminParams.DATA_DIR, dataDir);\n      }\n      if (collection != null) {\n        params.set( CoreAdminParams.COLLECTION, collection);\n      }\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (shardId != null) {\n        params.set( CoreAdminParams.SHARD, shardId);\n      }\n      if (roles != null) {\n        params.set( CoreAdminParams.ROLES, roles);\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d","date":1361851792,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CoreAdminRequest.Create#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CoreAdminRequest.Create#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      if( action == null ) {\n        throw new RuntimeException( \"no action specified!\" );\n      }\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set( CoreAdminParams.ACTION, action.toString() );\n      if( action.equals(CoreAdminAction.CREATE) ) {\n        params.set( CoreAdminParams.NAME, core );\n      } else {\n        params.set( CoreAdminParams.CORE, core );\n      }\n      params.set( CoreAdminParams.INSTANCE_DIR, instanceDir);\n      if (configName != null) {\n        params.set( CoreAdminParams.CONFIG, configName);\n      }\n      if (schemaName != null) {\n        params.set( CoreAdminParams.SCHEMA, schemaName);\n      }\n      if (dataDir != null) {\n        params.set( CoreAdminParams.DATA_DIR, dataDir);\n      }\n      if (ulogDir != null) {\n        params.set( CoreAdminParams.ULOG_DIR, ulogDir);\n      }\n      if (collection != null) {\n        params.set( CoreAdminParams.COLLECTION, collection);\n      }\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (shardId != null) {\n        params.set( CoreAdminParams.SHARD, shardId);\n      }\n      if (roles != null) {\n        params.set( CoreAdminParams.ROLES, roles);\n      }\n      if (coreNodeName != null) {\n        params.set( CoreAdminParams.CORE_NODE_NAME, coreNodeName);\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      if( action == null ) {\n        throw new RuntimeException( \"no action specified!\" );\n      }\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set( CoreAdminParams.ACTION, action.toString() );\n      if( action.equals(CoreAdminAction.CREATE) ) {\n        params.set( CoreAdminParams.NAME, core );\n      } else {\n        params.set( CoreAdminParams.CORE, core );\n      }\n      params.set( CoreAdminParams.INSTANCE_DIR, instanceDir);\n      if (configName != null) {\n        params.set( CoreAdminParams.CONFIG, configName);\n      }\n      if (schemaName != null) {\n        params.set( CoreAdminParams.SCHEMA, schemaName);\n      }\n      if (dataDir != null) {\n        params.set( CoreAdminParams.DATA_DIR, dataDir);\n      }\n      if (ulogDir != null) {\n        params.set( CoreAdminParams.ULOG_DIR, ulogDir);\n      }\n      if (collection != null) {\n        params.set( CoreAdminParams.COLLECTION, collection);\n      }\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (shardId != null) {\n        params.set( CoreAdminParams.SHARD, shardId);\n      }\n      if (roles != null) {\n        params.set( CoreAdminParams.ROLES, roles);\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9818efa55563ddfecdecafbdd43f4bee9f252e7d","date":1364853872,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CoreAdminRequest.Create#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CoreAdminRequest.Create#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      if( action == null ) {\n        throw new RuntimeException( \"no action specified!\" );\n      }\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set( CoreAdminParams.ACTION, action.toString() );\n      if( action.equals(CoreAdminAction.CREATE) ) {\n        params.set( CoreAdminParams.NAME, core );\n      } else {\n        params.set( CoreAdminParams.CORE, core );\n      }\n      params.set( CoreAdminParams.INSTANCE_DIR, instanceDir);\n      if (configName != null) {\n        params.set( CoreAdminParams.CONFIG, configName);\n      }\n      if (schemaName != null) {\n        params.set( CoreAdminParams.SCHEMA, schemaName);\n      }\n      if (dataDir != null) {\n        params.set( CoreAdminParams.DATA_DIR, dataDir);\n      }\n      if (ulogDir != null) {\n        params.set( CoreAdminParams.ULOG_DIR, ulogDir);\n      }\n      if (collection != null) {\n        params.set( CoreAdminParams.COLLECTION, collection);\n      }\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (shardId != null) {\n        params.set( CoreAdminParams.SHARD, shardId);\n      }\n      if (roles != null) {\n        params.set( CoreAdminParams.ROLES, roles);\n      }\n      if (coreNodeName != null) {\n        params.set( CoreAdminParams.CORE_NODE_NAME, coreNodeName);\n      }\n\n      if (isTransient != null) {\n        params.set(CoreAdminParams.TRANSIENT, isTransient);\n      }\n\n      if (loadOnStartup != null) {\n        params.set(CoreAdminParams.LOAD_ON_STARTUP, loadOnStartup);\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      if( action == null ) {\n        throw new RuntimeException( \"no action specified!\" );\n      }\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set( CoreAdminParams.ACTION, action.toString() );\n      if( action.equals(CoreAdminAction.CREATE) ) {\n        params.set( CoreAdminParams.NAME, core );\n      } else {\n        params.set( CoreAdminParams.CORE, core );\n      }\n      params.set( CoreAdminParams.INSTANCE_DIR, instanceDir);\n      if (configName != null) {\n        params.set( CoreAdminParams.CONFIG, configName);\n      }\n      if (schemaName != null) {\n        params.set( CoreAdminParams.SCHEMA, schemaName);\n      }\n      if (dataDir != null) {\n        params.set( CoreAdminParams.DATA_DIR, dataDir);\n      }\n      if (ulogDir != null) {\n        params.set( CoreAdminParams.ULOG_DIR, ulogDir);\n      }\n      if (collection != null) {\n        params.set( CoreAdminParams.COLLECTION, collection);\n      }\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (shardId != null) {\n        params.set( CoreAdminParams.SHARD, shardId);\n      }\n      if (roles != null) {\n        params.set( CoreAdminParams.ROLES, roles);\n      }\n      if (coreNodeName != null) {\n        params.set( CoreAdminParams.CORE_NODE_NAME, coreNodeName);\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a82d855abc18f7ee3e1ec359d8f256c8c86977a","date":1381347960,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CoreAdminRequest.Create#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CoreAdminRequest.Create#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      if( action == null ) {\n        throw new RuntimeException( \"no action specified!\" );\n      }\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set( CoreAdminParams.ACTION, action.toString() );\n      if( action.equals(CoreAdminAction.CREATE) ) {\n        params.set( CoreAdminParams.NAME, core );\n      } else {\n        params.set( CoreAdminParams.CORE, core );\n      }\n      params.set( CoreAdminParams.INSTANCE_DIR, instanceDir);\n      if (configName != null) {\n        params.set( CoreAdminParams.CONFIG, configName);\n      }\n      if (schemaName != null) {\n        params.set( CoreAdminParams.SCHEMA, schemaName);\n      }\n      if (dataDir != null) {\n        params.set( CoreAdminParams.DATA_DIR, dataDir);\n      }\n      if (ulogDir != null) {\n        params.set( CoreAdminParams.ULOG_DIR, ulogDir);\n      }\n      if (collection != null) {\n        params.set( CoreAdminParams.COLLECTION, collection);\n      }\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (shardId != null) {\n        params.set( CoreAdminParams.SHARD, shardId);\n      }\n      if (roles != null) {\n        params.set( CoreAdminParams.ROLES, roles);\n      }\n      if (coreNodeName != null) {\n        params.set( CoreAdminParams.CORE_NODE_NAME, coreNodeName);\n      }\n\n      if (isTransient != null) {\n        params.set(CoreAdminParams.TRANSIENT, isTransient);\n      }\n\n      if (loadOnStartup != null) {\n        params.set(CoreAdminParams.LOAD_ON_STARTUP, loadOnStartup);\n      }\n      \n      if (collectionConfigName != null) {\n        params.set(\"collection.configName\", collectionConfigName);\n      }\n      \n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      if( action == null ) {\n        throw new RuntimeException( \"no action specified!\" );\n      }\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set( CoreAdminParams.ACTION, action.toString() );\n      if( action.equals(CoreAdminAction.CREATE) ) {\n        params.set( CoreAdminParams.NAME, core );\n      } else {\n        params.set( CoreAdminParams.CORE, core );\n      }\n      params.set( CoreAdminParams.INSTANCE_DIR, instanceDir);\n      if (configName != null) {\n        params.set( CoreAdminParams.CONFIG, configName);\n      }\n      if (schemaName != null) {\n        params.set( CoreAdminParams.SCHEMA, schemaName);\n      }\n      if (dataDir != null) {\n        params.set( CoreAdminParams.DATA_DIR, dataDir);\n      }\n      if (ulogDir != null) {\n        params.set( CoreAdminParams.ULOG_DIR, ulogDir);\n      }\n      if (collection != null) {\n        params.set( CoreAdminParams.COLLECTION, collection);\n      }\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (shardId != null) {\n        params.set( CoreAdminParams.SHARD, shardId);\n      }\n      if (roles != null) {\n        params.set( CoreAdminParams.ROLES, roles);\n      }\n      if (coreNodeName != null) {\n        params.set( CoreAdminParams.CORE_NODE_NAME, coreNodeName);\n      }\n\n      if (isTransient != null) {\n        params.set(CoreAdminParams.TRANSIENT, isTransient);\n      }\n\n      if (loadOnStartup != null) {\n        params.set(CoreAdminParams.LOAD_ON_STARTUP, loadOnStartup);\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d4e985daefcb892b529223b478c47985fc3c483","date":1395658491,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CoreAdminRequest.Create#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CoreAdminRequest.Create#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      if( action == null ) {\n        throw new RuntimeException( \"no action specified!\" );\n      }\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set( CoreAdminParams.ACTION, action.toString() );\n      if( action.equals(CoreAdminAction.CREATE) ) {\n        params.set( CoreAdminParams.NAME, core );\n      } else {\n        params.set( CoreAdminParams.CORE, core );\n      }\n      params.set( CoreAdminParams.INSTANCE_DIR, instanceDir);\n      if (configName != null) {\n        params.set( CoreAdminParams.CONFIG, configName);\n      }\n      if (schemaName != null) {\n        params.set( CoreAdminParams.SCHEMA, schemaName);\n      }\n      if (dataDir != null) {\n        params.set( CoreAdminParams.DATA_DIR, dataDir);\n      }\n      if (ulogDir != null) {\n        params.set( CoreAdminParams.ULOG_DIR, ulogDir);\n      }\n      if (configSet != null) {\n        params.set( CoreAdminParams.CONFIGSET, configSet);\n      }\n      if (collection != null) {\n        params.set( CoreAdminParams.COLLECTION, collection);\n      }\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (shardId != null) {\n        params.set( CoreAdminParams.SHARD, shardId);\n      }\n      if (roles != null) {\n        params.set( CoreAdminParams.ROLES, roles);\n      }\n      if (coreNodeName != null) {\n        params.set( CoreAdminParams.CORE_NODE_NAME, coreNodeName);\n      }\n\n      if (isTransient != null) {\n        params.set(CoreAdminParams.TRANSIENT, isTransient);\n      }\n\n      if (loadOnStartup != null) {\n        params.set(CoreAdminParams.LOAD_ON_STARTUP, loadOnStartup);\n      }\n      \n      if (collectionConfigName != null) {\n        params.set(\"collection.configName\", collectionConfigName);\n      }\n      \n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      if( action == null ) {\n        throw new RuntimeException( \"no action specified!\" );\n      }\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set( CoreAdminParams.ACTION, action.toString() );\n      if( action.equals(CoreAdminAction.CREATE) ) {\n        params.set( CoreAdminParams.NAME, core );\n      } else {\n        params.set( CoreAdminParams.CORE, core );\n      }\n      params.set( CoreAdminParams.INSTANCE_DIR, instanceDir);\n      if (configName != null) {\n        params.set( CoreAdminParams.CONFIG, configName);\n      }\n      if (schemaName != null) {\n        params.set( CoreAdminParams.SCHEMA, schemaName);\n      }\n      if (dataDir != null) {\n        params.set( CoreAdminParams.DATA_DIR, dataDir);\n      }\n      if (ulogDir != null) {\n        params.set( CoreAdminParams.ULOG_DIR, ulogDir);\n      }\n      if (collection != null) {\n        params.set( CoreAdminParams.COLLECTION, collection);\n      }\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (shardId != null) {\n        params.set( CoreAdminParams.SHARD, shardId);\n      }\n      if (roles != null) {\n        params.set( CoreAdminParams.ROLES, roles);\n      }\n      if (coreNodeName != null) {\n        params.set( CoreAdminParams.CORE_NODE_NAME, coreNodeName);\n      }\n\n      if (isTransient != null) {\n        params.set(CoreAdminParams.TRANSIENT, isTransient);\n      }\n\n      if (loadOnStartup != null) {\n        params.set(CoreAdminParams.LOAD_ON_STARTUP, loadOnStartup);\n      }\n      \n      if (collectionConfigName != null) {\n        params.set(\"collection.configName\", collectionConfigName);\n      }\n      \n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["5b606c730b37f5bfe8c7cc9b3d105519f0bdfbd1","c3fc0aa9a0ea3688c5b0fc6109449a008563be32"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["ea4018996a4853ecfb1c797beede737c90da6c3b","5b606c730b37f5bfe8c7cc9b3d105519f0bdfbd1"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"5b606c730b37f5bfe8c7cc9b3d105519f0bdfbd1":["ea4018996a4853ecfb1c797beede737c90da6c3b"],"6101715a4732c1fe39eae50ce4a23fec6fc270d0":["c26f00b574427b55127e869b935845554afde1fa"],"5a82d855abc18f7ee3e1ec359d8f256c8c86977a":["9818efa55563ddfecdecafbdd43f4bee9f252e7d"],"9818efa55563ddfecdecafbdd43f4bee9f252e7d":["cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"],"ea4018996a4853ecfb1c797beede737c90da6c3b":["070c33aaa5d669bfb86d96f686fd915ccccc0f6a"],"070c33aaa5d669bfb86d96f686fd915ccccc0f6a":["6101715a4732c1fe39eae50ce4a23fec6fc270d0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c3fc0aa9a0ea3688c5b0fc6109449a008563be32":["5b606c730b37f5bfe8c7cc9b3d105519f0bdfbd1"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2d4e985daefcb892b529223b478c47985fc3c483":["5a82d855abc18f7ee3e1ec359d8f256c8c86977a"],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["c3fc0aa9a0ea3688c5b0fc6109449a008563be32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2d4e985daefcb892b529223b478c47985fc3c483"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"c26f00b574427b55127e869b935845554afde1fa":["6101715a4732c1fe39eae50ce4a23fec6fc270d0"],"5b606c730b37f5bfe8c7cc9b3d105519f0bdfbd1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","c3fc0aa9a0ea3688c5b0fc6109449a008563be32"],"6101715a4732c1fe39eae50ce4a23fec6fc270d0":["070c33aaa5d669bfb86d96f686fd915ccccc0f6a"],"5a82d855abc18f7ee3e1ec359d8f256c8c86977a":["2d4e985daefcb892b529223b478c47985fc3c483"],"ea4018996a4853ecfb1c797beede737c90da6c3b":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","5b606c730b37f5bfe8c7cc9b3d105519f0bdfbd1"],"9818efa55563ddfecdecafbdd43f4bee9f252e7d":["5a82d855abc18f7ee3e1ec359d8f256c8c86977a"],"070c33aaa5d669bfb86d96f686fd915ccccc0f6a":["ea4018996a4853ecfb1c797beede737c90da6c3b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c3fc0aa9a0ea3688c5b0fc6109449a008563be32":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"2d4e985daefcb892b529223b478c47985fc3c483":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["9818efa55563ddfecdecafbdd43f4bee9f252e7d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}