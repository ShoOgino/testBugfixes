{"path":"lucene/sandbox/src/test/org/apache/lucene/bkdtree/TestBKDTree#rectContainsPoint(GeoRect,double,double).mjava","commits":[{"id":"07c50cb1eca5629cac5b6702dd0f5e06157af61a","date":1445464748,"type":1,"author":"Nick Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/bkdtree/TestBKDTree#rectContainsPoint(GeoRect,double,double).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/bkdtree/TestBKDTree#rectContainsPointEnc(double,double,double,double,double,double).mjava","sourceNew":"  @Override\n  protected Boolean rectContainsPoint(GeoRect rect, double pointLat, double pointLon) {\n\n    assert Double.isNaN(pointLat) == false;\n\n    int rectLatMinEnc = BKDTreeWriter.encodeLat(rect.minLat);\n    int rectLatMaxEnc = BKDTreeWriter.encodeLat(rect.maxLat);\n    int rectLonMinEnc = BKDTreeWriter.encodeLon(rect.minLon);\n    int rectLonMaxEnc = BKDTreeWriter.encodeLon(rect.maxLon);\n\n    int pointLatEnc = BKDTreeWriter.encodeLat(pointLat);\n    int pointLonEnc = BKDTreeWriter.encodeLon(pointLon);\n\n    if (rect.minLon < rect.maxLon) {\n      return pointLatEnc >= rectLatMinEnc &&\n        pointLatEnc < rectLatMaxEnc &&\n        pointLonEnc >= rectLonMinEnc &&\n        pointLonEnc < rectLonMaxEnc;\n    } else {\n      // Rect crosses dateline:\n      return pointLatEnc >= rectLatMinEnc &&\n        pointLatEnc < rectLatMaxEnc &&\n        (pointLonEnc >= rectLonMinEnc ||\n         pointLonEnc < rectLonMaxEnc);\n    }\n  }\n\n","sourceOld":"  private static boolean rectContainsPointEnc(double rectLatMin, double rectLatMax,\n                                              double rectLonMin, double rectLonMax,\n                                              double pointLat, double pointLon) {\n    if (Double.isNaN(pointLat)) {\n      return false;\n    }\n    int rectLatMinEnc = BKDTreeWriter.encodeLat(rectLatMin);\n    int rectLatMaxEnc = BKDTreeWriter.encodeLat(rectLatMax);\n    int rectLonMinEnc = BKDTreeWriter.encodeLon(rectLonMin);\n    int rectLonMaxEnc = BKDTreeWriter.encodeLon(rectLonMax);\n    int pointLatEnc = BKDTreeWriter.encodeLat(pointLat);\n    int pointLonEnc = BKDTreeWriter.encodeLon(pointLon);\n\n    if (rectLonMin < rectLonMax) {\n      return pointLatEnc >= rectLatMinEnc &&\n        pointLatEnc < rectLatMaxEnc &&\n        pointLonEnc >= rectLonMinEnc &&\n        pointLonEnc < rectLonMaxEnc;\n    } else {\n      // Rect crosses dateline:\n      return pointLatEnc >= rectLatMinEnc &&\n        pointLatEnc < rectLatMaxEnc &&\n        (pointLonEnc >= rectLonMinEnc ||\n         pointLonEnc < rectLonMaxEnc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestDimensionalQueries#rectContainsPoint(GeoRect,double,double).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/bkdtree/TestBKDTree#rectContainsPoint(GeoRect,double,double).mjava","sourceNew":"  @Override\n  protected Boolean rectContainsPoint(GeoRect rect, double pointLat, double pointLon) {\n\n    assert Double.isNaN(pointLat) == false;\n\n    int rectLatMinEnc = DimensionalLatLonField.encodeLat(rect.minLat);\n    int rectLatMaxEnc = DimensionalLatLonField.encodeLat(rect.maxLat);\n    int rectLonMinEnc = DimensionalLatLonField.encodeLon(rect.minLon);\n    int rectLonMaxEnc = DimensionalLatLonField.encodeLon(rect.maxLon);\n\n    int pointLatEnc = DimensionalLatLonField.encodeLat(pointLat);\n    int pointLonEnc = DimensionalLatLonField.encodeLon(pointLon);\n\n    if (rect.minLon < rect.maxLon) {\n      return pointLatEnc >= rectLatMinEnc &&\n        pointLatEnc <= rectLatMaxEnc &&\n        pointLonEnc >= rectLonMinEnc &&\n        pointLonEnc <= rectLonMaxEnc;\n    } else {\n      // Rect crosses dateline:\n      return pointLatEnc >= rectLatMinEnc &&\n        pointLatEnc <= rectLatMaxEnc &&\n        (pointLonEnc >= rectLonMinEnc ||\n         pointLonEnc <= rectLonMaxEnc);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected Boolean rectContainsPoint(GeoRect rect, double pointLat, double pointLon) {\n\n    assert Double.isNaN(pointLat) == false;\n\n    int rectLatMinEnc = BKDTreeWriter.encodeLat(rect.minLat);\n    int rectLatMaxEnc = BKDTreeWriter.encodeLat(rect.maxLat);\n    int rectLonMinEnc = BKDTreeWriter.encodeLon(rect.minLon);\n    int rectLonMaxEnc = BKDTreeWriter.encodeLon(rect.maxLon);\n\n    int pointLatEnc = BKDTreeWriter.encodeLat(pointLat);\n    int pointLonEnc = BKDTreeWriter.encodeLon(pointLon);\n\n    if (rect.minLon < rect.maxLon) {\n      return pointLatEnc >= rectLatMinEnc &&\n        pointLatEnc < rectLatMaxEnc &&\n        pointLonEnc >= rectLonMinEnc &&\n        pointLonEnc < rectLonMaxEnc;\n    } else {\n      // Rect crosses dateline:\n      return pointLatEnc >= rectLatMinEnc &&\n        pointLatEnc < rectLatMaxEnc &&\n        (pointLonEnc >= rectLonMinEnc ||\n         pointLonEnc < rectLonMaxEnc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1904709ea0185dc04e3d77ea01c79e909caf2796":["07c50cb1eca5629cac5b6702dd0f5e06157af61a"],"07c50cb1eca5629cac5b6702dd0f5e06157af61a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1904709ea0185dc04e3d77ea01c79e909caf2796"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["07c50cb1eca5629cac5b6702dd0f5e06157af61a"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"07c50cb1eca5629cac5b6702dd0f5e06157af61a":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}