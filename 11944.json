{"path":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#createWeight(IndexSearcher,boolean,float).mjava","commits":[{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    // We don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\".\n    // This is an inverted structure and should be used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      private DocIdSet buildMatchingDocIdSet(LeafReader reader, PointValues values) throws IOException {\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n\n        values.intersect(field,\n            new IntersectVisitor() {\n\n              DocIdSetBuilder.BulkAdder adder;\n\n              @Override\n              public void grow(int count) {\n                adder = result.grow(count);\n              }\n\n              @Override\n              public void visit(int docID) {\n                adder.add(docID);\n              }\n\n              @Override\n              public void visit(int docID, byte[] packedValue) {\n                for(int dim=0;dim<numDims;dim++) {\n                  int offset = dim*bytesPerDim;\n                  if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                    // Doc's value is too low, in this dimension\n                    return;\n                  }\n                  if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                    // Doc's value is too high, in this dimension\n                    return;\n                  }\n                }\n\n                // Doc is in-bounds\n                adder.add(docID);\n              }\n\n              @Override\n              public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n                boolean crosses = false;\n\n                for(int dim=0;dim<numDims;dim++) {\n                  int offset = dim*bytesPerDim;\n\n                  if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                      StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                    return Relation.CELL_OUTSIDE_QUERY;\n                  }\n\n                  crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                    StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n                }\n\n                if (crosses) {\n                  return Relation.CELL_CROSSES_QUERY;\n                } else {\n                  return Relation.CELL_INSIDE_QUERY;\n                }\n              }\n            });\n        return result.build();\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues();\n        if (values == null) {\n          // No docs in this segment indexed any points\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        if (fieldInfo.getPointDimensionCount() != numDims) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + fieldInfo.getPointDimensionCount() + \" but this query has numDims=\" + numDims);\n        }\n        if (bytesPerDim != fieldInfo.getPointNumBytes()) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + fieldInfo.getPointNumBytes() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        boolean allDocsMatch;\n        if (values.getDocCount(field) == reader.maxDoc()) {\n          final byte[] fieldPackedLower = values.getMinPackedValue(field);\n          final byte[] fieldPackedUpper = values.getMaxPackedValue(field);\n          allDocsMatch = true;\n          for (int i = 0; i < numDims; ++i) {\n            int offset = i * bytesPerDim;\n            if (StringHelper.compare(bytesPerDim, lowerPoint, offset, fieldPackedLower, offset) > 0\n                || StringHelper.compare(bytesPerDim, upperPoint, offset, fieldPackedUpper, offset) < 0) {\n              allDocsMatch = false;\n              break;\n            }\n          }\n        } else {\n          allDocsMatch = false;\n        }\n\n        DocIdSetIterator iterator;\n        if (allDocsMatch) {\n          // all docs have a value and all points are within bounds, so everything matches\n          iterator = DocIdSetIterator.all(reader.maxDoc());\n        } else {\n          iterator = buildMatchingDocIdSet(reader, values).iterator();\n        }\n\n        return new ConstantScoreScorer(this, score(), iterator);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // We don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\".\n    // This is an inverted structure and should be used in the first pass:\n\n    return new ConstantScoreWeight(this) {\n\n      private DocIdSet buildMatchingDocIdSet(LeafReader reader, PointValues values) throws IOException {\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n\n        values.intersect(field,\n            new IntersectVisitor() {\n\n              DocIdSetBuilder.BulkAdder adder;\n\n              @Override\n              public void grow(int count) {\n                adder = result.grow(count);\n              }\n\n              @Override\n              public void visit(int docID) {\n                adder.add(docID);\n              }\n\n              @Override\n              public void visit(int docID, byte[] packedValue) {\n                for(int dim=0;dim<numDims;dim++) {\n                  int offset = dim*bytesPerDim;\n                  if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                    // Doc's value is too low, in this dimension\n                    return;\n                  }\n                  if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                    // Doc's value is too high, in this dimension\n                    return;\n                  }\n                }\n\n                // Doc is in-bounds\n                adder.add(docID);\n              }\n\n              @Override\n              public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n                boolean crosses = false;\n\n                for(int dim=0;dim<numDims;dim++) {\n                  int offset = dim*bytesPerDim;\n\n                  if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                      StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                    return Relation.CELL_OUTSIDE_QUERY;\n                  }\n\n                  crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                    StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n                }\n\n                if (crosses) {\n                  return Relation.CELL_CROSSES_QUERY;\n                } else {\n                  return Relation.CELL_INSIDE_QUERY;\n                }\n              }\n            });\n        return result.build();\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues();\n        if (values == null) {\n          // No docs in this segment indexed any points\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        if (fieldInfo.getPointDimensionCount() != numDims) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + fieldInfo.getPointDimensionCount() + \" but this query has numDims=\" + numDims);\n        }\n        if (bytesPerDim != fieldInfo.getPointNumBytes()) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + fieldInfo.getPointNumBytes() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        boolean allDocsMatch;\n        if (values.getDocCount(field) == reader.maxDoc()) {\n          final byte[] fieldPackedLower = values.getMinPackedValue(field);\n          final byte[] fieldPackedUpper = values.getMaxPackedValue(field);\n          allDocsMatch = true;\n          for (int i = 0; i < numDims; ++i) {\n            int offset = i * bytesPerDim;\n            if (StringHelper.compare(bytesPerDim, lowerPoint, offset, fieldPackedLower, offset) > 0\n                || StringHelper.compare(bytesPerDim, upperPoint, offset, fieldPackedUpper, offset) < 0) {\n              allDocsMatch = false;\n              break;\n            }\n          }\n        } else {\n          allDocsMatch = false;\n        }\n\n        DocIdSetIterator iterator;\n        if (allDocsMatch) {\n          // all docs have a value and all points are within bounds, so everything matches\n          iterator = DocIdSetIterator.all(reader.maxDoc());\n        } else {\n          iterator = buildMatchingDocIdSet(reader, values).iterator();\n        }\n\n        return new ConstantScoreScorer(this, score(), iterator);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"367f57e2ee85b7f7e28cfe73370a22cf67624f65","date":1476778467,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    // We don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\".\n    // This is an inverted structure and should be used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      private DocIdSet buildMatchingDocIdSet(LeafReader reader, PointValues values) throws IOException {\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n\n        values.intersect(\n            new IntersectVisitor() {\n\n              DocIdSetBuilder.BulkAdder adder;\n\n              @Override\n              public void grow(int count) {\n                adder = result.grow(count);\n              }\n\n              @Override\n              public void visit(int docID) {\n                adder.add(docID);\n              }\n\n              @Override\n              public void visit(int docID, byte[] packedValue) {\n                for(int dim=0;dim<numDims;dim++) {\n                  int offset = dim*bytesPerDim;\n                  if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                    // Doc's value is too low, in this dimension\n                    return;\n                  }\n                  if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                    // Doc's value is too high, in this dimension\n                    return;\n                  }\n                }\n\n                // Doc is in-bounds\n                adder.add(docID);\n              }\n\n              @Override\n              public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n                boolean crosses = false;\n\n                for(int dim=0;dim<numDims;dim++) {\n                  int offset = dim*bytesPerDim;\n\n                  if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                      StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                    return Relation.CELL_OUTSIDE_QUERY;\n                  }\n\n                  crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                    StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n                }\n\n                if (crosses) {\n                  return Relation.CELL_CROSSES_QUERY;\n                } else {\n                  return Relation.CELL_INSIDE_QUERY;\n                }\n              }\n            });\n        return result.build();\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment/field indexed any points\n          return null;\n        }\n\n        if (values.getNumDimensions() != numDims) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + values.getNumDimensions() + \" but this query has numDims=\" + numDims);\n        }\n        if (bytesPerDim != values.getBytesPerDimension()) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + values.getBytesPerDimension() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        boolean allDocsMatch;\n        if (values.getDocCount() == reader.maxDoc()) {\n          final byte[] fieldPackedLower = values.getMinPackedValue();\n          final byte[] fieldPackedUpper = values.getMaxPackedValue();\n          allDocsMatch = true;\n          for (int i = 0; i < numDims; ++i) {\n            int offset = i * bytesPerDim;\n            if (StringHelper.compare(bytesPerDim, lowerPoint, offset, fieldPackedLower, offset) > 0\n                || StringHelper.compare(bytesPerDim, upperPoint, offset, fieldPackedUpper, offset) < 0) {\n              allDocsMatch = false;\n              break;\n            }\n          }\n        } else {\n          allDocsMatch = false;\n        }\n\n        DocIdSetIterator iterator;\n        if (allDocsMatch) {\n          // all docs have a value and all points are within bounds, so everything matches\n          iterator = DocIdSetIterator.all(reader.maxDoc());\n        } else {\n          iterator = buildMatchingDocIdSet(reader, values).iterator();\n        }\n\n        return new ConstantScoreScorer(this, score(), iterator);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    // We don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\".\n    // This is an inverted structure and should be used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      private DocIdSet buildMatchingDocIdSet(LeafReader reader, PointValues values) throws IOException {\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n\n        values.intersect(field,\n            new IntersectVisitor() {\n\n              DocIdSetBuilder.BulkAdder adder;\n\n              @Override\n              public void grow(int count) {\n                adder = result.grow(count);\n              }\n\n              @Override\n              public void visit(int docID) {\n                adder.add(docID);\n              }\n\n              @Override\n              public void visit(int docID, byte[] packedValue) {\n                for(int dim=0;dim<numDims;dim++) {\n                  int offset = dim*bytesPerDim;\n                  if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                    // Doc's value is too low, in this dimension\n                    return;\n                  }\n                  if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                    // Doc's value is too high, in this dimension\n                    return;\n                  }\n                }\n\n                // Doc is in-bounds\n                adder.add(docID);\n              }\n\n              @Override\n              public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n                boolean crosses = false;\n\n                for(int dim=0;dim<numDims;dim++) {\n                  int offset = dim*bytesPerDim;\n\n                  if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                      StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                    return Relation.CELL_OUTSIDE_QUERY;\n                  }\n\n                  crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                    StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n                }\n\n                if (crosses) {\n                  return Relation.CELL_CROSSES_QUERY;\n                } else {\n                  return Relation.CELL_INSIDE_QUERY;\n                }\n              }\n            });\n        return result.build();\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues();\n        if (values == null) {\n          // No docs in this segment indexed any points\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        if (fieldInfo.getPointDimensionCount() != numDims) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + fieldInfo.getPointDimensionCount() + \" but this query has numDims=\" + numDims);\n        }\n        if (bytesPerDim != fieldInfo.getPointNumBytes()) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + fieldInfo.getPointNumBytes() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        boolean allDocsMatch;\n        if (values.getDocCount(field) == reader.maxDoc()) {\n          final byte[] fieldPackedLower = values.getMinPackedValue(field);\n          final byte[] fieldPackedUpper = values.getMaxPackedValue(field);\n          allDocsMatch = true;\n          for (int i = 0; i < numDims; ++i) {\n            int offset = i * bytesPerDim;\n            if (StringHelper.compare(bytesPerDim, lowerPoint, offset, fieldPackedLower, offset) > 0\n                || StringHelper.compare(bytesPerDim, upperPoint, offset, fieldPackedUpper, offset) < 0) {\n              allDocsMatch = false;\n              break;\n            }\n          }\n        } else {\n          allDocsMatch = false;\n        }\n\n        DocIdSetIterator iterator;\n        if (allDocsMatch) {\n          // all docs have a value and all points are within bounds, so everything matches\n          iterator = DocIdSetIterator.all(reader.maxDoc());\n        } else {\n          iterator = buildMatchingDocIdSet(reader, values).iterator();\n        }\n\n        return new ConstantScoreScorer(this, score(), iterator);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    // We don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\".\n    // This is an inverted structure and should be used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      private DocIdSet buildMatchingDocIdSet(LeafReader reader, PointValues values) throws IOException {\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n\n        values.intersect(\n            new IntersectVisitor() {\n\n              DocIdSetBuilder.BulkAdder adder;\n\n              @Override\n              public void grow(int count) {\n                adder = result.grow(count);\n              }\n\n              @Override\n              public void visit(int docID) {\n                adder.add(docID);\n              }\n\n              @Override\n              public void visit(int docID, byte[] packedValue) {\n                for(int dim=0;dim<numDims;dim++) {\n                  int offset = dim*bytesPerDim;\n                  if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                    // Doc's value is too low, in this dimension\n                    return;\n                  }\n                  if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                    // Doc's value is too high, in this dimension\n                    return;\n                  }\n                }\n\n                // Doc is in-bounds\n                adder.add(docID);\n              }\n\n              @Override\n              public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n                boolean crosses = false;\n\n                for(int dim=0;dim<numDims;dim++) {\n                  int offset = dim*bytesPerDim;\n\n                  if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                      StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                    return Relation.CELL_OUTSIDE_QUERY;\n                  }\n\n                  crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                    StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n                }\n\n                if (crosses) {\n                  return Relation.CELL_CROSSES_QUERY;\n                } else {\n                  return Relation.CELL_INSIDE_QUERY;\n                }\n              }\n            });\n        return result.build();\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment/field indexed any points\n          return null;\n        }\n\n        if (values.getNumDimensions() != numDims) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + values.getNumDimensions() + \" but this query has numDims=\" + numDims);\n        }\n        if (bytesPerDim != values.getBytesPerDimension()) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + values.getBytesPerDimension() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        boolean allDocsMatch;\n        if (values.getDocCount() == reader.maxDoc()) {\n          final byte[] fieldPackedLower = values.getMinPackedValue();\n          final byte[] fieldPackedUpper = values.getMaxPackedValue();\n          allDocsMatch = true;\n          for (int i = 0; i < numDims; ++i) {\n            int offset = i * bytesPerDim;\n            if (StringHelper.compare(bytesPerDim, lowerPoint, offset, fieldPackedLower, offset) > 0\n                || StringHelper.compare(bytesPerDim, upperPoint, offset, fieldPackedUpper, offset) < 0) {\n              allDocsMatch = false;\n              break;\n            }\n          }\n        } else {\n          allDocsMatch = false;\n        }\n\n        DocIdSetIterator iterator;\n        if (allDocsMatch) {\n          // all docs have a value and all points are within bounds, so everything matches\n          iterator = DocIdSetIterator.all(reader.maxDoc());\n        } else {\n          iterator = buildMatchingDocIdSet(reader, values).iterator();\n        }\n\n        return new ConstantScoreScorer(this, score(), iterator);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dca67e06c96e95a8d9ef07418b6299bfd981523b","date":1484639518,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    // We don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\".\n    // This is an inverted structure and should be used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                return;\n              }\n            }\n\n            // Doc is in-bounds\n            adder.add(docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                return Relation.CELL_OUTSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_INSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment/field indexed any points\n          return null;\n        }\n\n        if (values.getNumDimensions() != numDims) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + values.getNumDimensions() + \" but this query has numDims=\" + numDims);\n        }\n        if (bytesPerDim != values.getBytesPerDimension()) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + values.getBytesPerDimension() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        boolean allDocsMatch;\n        if (values.getDocCount() == reader.maxDoc()) {\n          final byte[] fieldPackedLower = values.getMinPackedValue();\n          final byte[] fieldPackedUpper = values.getMaxPackedValue();\n          allDocsMatch = true;\n          for (int i = 0; i < numDims; ++i) {\n            int offset = i * bytesPerDim;\n            if (StringHelper.compare(bytesPerDim, lowerPoint, offset, fieldPackedLower, offset) > 0\n                || StringHelper.compare(bytesPerDim, upperPoint, offset, fieldPackedUpper, offset) < 0) {\n              allDocsMatch = false;\n              break;\n            }\n          }\n        } else {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          // all docs have a value and all points are within bounds, so everything matches\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(boolean randomAccess) {\n              return new ConstantScoreScorer(weight, score(),\n                  DocIdSetIterator.all(reader.maxDoc()));\n            }\n            \n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return new ScorerSupplier() {\n\n            final DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n            final IntersectVisitor visitor = getIntersectVisitor(result);\n            long cost = -1;\n\n            @Override\n            public Scorer get(boolean randomAccess) throws IOException {\n              values.intersect(visitor);\n              DocIdSetIterator iterator = result.build().iterator();\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            \n            @Override\n            public long cost() {\n              if (cost == -1) {\n                // Computing the cost may be expensive, so only do it if necessary\n                cost = values.estimatePointCount(visitor);\n                assert cost >= 0;\n              }\n              return cost;\n            }\n          };\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(false);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    // We don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\".\n    // This is an inverted structure and should be used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      private DocIdSet buildMatchingDocIdSet(LeafReader reader, PointValues values) throws IOException {\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n\n        values.intersect(\n            new IntersectVisitor() {\n\n              DocIdSetBuilder.BulkAdder adder;\n\n              @Override\n              public void grow(int count) {\n                adder = result.grow(count);\n              }\n\n              @Override\n              public void visit(int docID) {\n                adder.add(docID);\n              }\n\n              @Override\n              public void visit(int docID, byte[] packedValue) {\n                for(int dim=0;dim<numDims;dim++) {\n                  int offset = dim*bytesPerDim;\n                  if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                    // Doc's value is too low, in this dimension\n                    return;\n                  }\n                  if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                    // Doc's value is too high, in this dimension\n                    return;\n                  }\n                }\n\n                // Doc is in-bounds\n                adder.add(docID);\n              }\n\n              @Override\n              public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n                boolean crosses = false;\n\n                for(int dim=0;dim<numDims;dim++) {\n                  int offset = dim*bytesPerDim;\n\n                  if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                      StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                    return Relation.CELL_OUTSIDE_QUERY;\n                  }\n\n                  crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                    StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n                }\n\n                if (crosses) {\n                  return Relation.CELL_CROSSES_QUERY;\n                } else {\n                  return Relation.CELL_INSIDE_QUERY;\n                }\n              }\n            });\n        return result.build();\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment/field indexed any points\n          return null;\n        }\n\n        if (values.getNumDimensions() != numDims) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + values.getNumDimensions() + \" but this query has numDims=\" + numDims);\n        }\n        if (bytesPerDim != values.getBytesPerDimension()) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + values.getBytesPerDimension() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        boolean allDocsMatch;\n        if (values.getDocCount() == reader.maxDoc()) {\n          final byte[] fieldPackedLower = values.getMinPackedValue();\n          final byte[] fieldPackedUpper = values.getMaxPackedValue();\n          allDocsMatch = true;\n          for (int i = 0; i < numDims; ++i) {\n            int offset = i * bytesPerDim;\n            if (StringHelper.compare(bytesPerDim, lowerPoint, offset, fieldPackedLower, offset) > 0\n                || StringHelper.compare(bytesPerDim, upperPoint, offset, fieldPackedUpper, offset) < 0) {\n              allDocsMatch = false;\n              break;\n            }\n          }\n        } else {\n          allDocsMatch = false;\n        }\n\n        DocIdSetIterator iterator;\n        if (allDocsMatch) {\n          // all docs have a value and all points are within bounds, so everything matches\n          iterator = DocIdSetIterator.all(reader.maxDoc());\n        } else {\n          iterator = buildMatchingDocIdSet(reader, values).iterator();\n        }\n\n        return new ConstantScoreScorer(this, score(), iterator);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15fe6782474c00ec2ccc636052a025f8fe0bdb8b","date":1484743707,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    // We don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\".\n    // This is an inverted structure and should be used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                return;\n              }\n            }\n\n            // Doc is in-bounds\n            adder.add(docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                return Relation.CELL_OUTSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_INSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                // This dim is not in the range\n                return Relation.CELL_INSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment/field indexed any points\n          return null;\n        }\n\n        if (values.getNumDimensions() != numDims) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + values.getNumDimensions() + \" but this query has numDims=\" + numDims);\n        }\n        if (bytesPerDim != values.getBytesPerDimension()) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + values.getBytesPerDimension() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        boolean allDocsMatch;\n        if (values.getDocCount() == reader.maxDoc()) {\n          final byte[] fieldPackedLower = values.getMinPackedValue();\n          final byte[] fieldPackedUpper = values.getMaxPackedValue();\n          allDocsMatch = true;\n          for (int i = 0; i < numDims; ++i) {\n            int offset = i * bytesPerDim;\n            if (StringHelper.compare(bytesPerDim, lowerPoint, offset, fieldPackedLower, offset) > 0\n                || StringHelper.compare(bytesPerDim, upperPoint, offset, fieldPackedUpper, offset) < 0) {\n              allDocsMatch = false;\n              break;\n            }\n          }\n        } else {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          // all docs have a value and all points are within bounds, so everything matches\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(boolean randomAccess) {\n              return new ConstantScoreScorer(weight, score(),\n                  DocIdSetIterator.all(reader.maxDoc()));\n            }\n            \n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return new ScorerSupplier() {\n\n            final DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n            final IntersectVisitor visitor = getIntersectVisitor(result);\n            long cost = -1;\n\n            @Override\n            public Scorer get(boolean randomAccess) throws IOException {\n              if (values.getDocCount() == reader.maxDoc()\n                  && values.getDocCount() == values.size()\n                  && cost() > reader.maxDoc() / 2) {\n                // If all docs have exactly one value and the cost is greater\n                // than half the leaf size then maybe we can make things faster\n                // by computing the set of documents that do NOT match the range\n                final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n                result.set(0, reader.maxDoc());\n                int[] cost = new int[] { reader.maxDoc() };\n                values.intersect(getInverseIntersectVisitor(result, cost));\n                final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n                return new ConstantScoreScorer(weight, score(), iterator);\n              }\n\n              values.intersect(visitor);\n              DocIdSetIterator iterator = result.build().iterator();\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            \n            @Override\n            public long cost() {\n              if (cost == -1) {\n                // Computing the cost may be expensive, so only do it if necessary\n                cost = values.estimatePointCount(visitor);\n                assert cost >= 0;\n              }\n              return cost;\n            }\n          };\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(false);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    // We don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\".\n    // This is an inverted structure and should be used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                return;\n              }\n            }\n\n            // Doc is in-bounds\n            adder.add(docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                return Relation.CELL_OUTSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_INSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment/field indexed any points\n          return null;\n        }\n\n        if (values.getNumDimensions() != numDims) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + values.getNumDimensions() + \" but this query has numDims=\" + numDims);\n        }\n        if (bytesPerDim != values.getBytesPerDimension()) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + values.getBytesPerDimension() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        boolean allDocsMatch;\n        if (values.getDocCount() == reader.maxDoc()) {\n          final byte[] fieldPackedLower = values.getMinPackedValue();\n          final byte[] fieldPackedUpper = values.getMaxPackedValue();\n          allDocsMatch = true;\n          for (int i = 0; i < numDims; ++i) {\n            int offset = i * bytesPerDim;\n            if (StringHelper.compare(bytesPerDim, lowerPoint, offset, fieldPackedLower, offset) > 0\n                || StringHelper.compare(bytesPerDim, upperPoint, offset, fieldPackedUpper, offset) < 0) {\n              allDocsMatch = false;\n              break;\n            }\n          }\n        } else {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          // all docs have a value and all points are within bounds, so everything matches\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(boolean randomAccess) {\n              return new ConstantScoreScorer(weight, score(),\n                  DocIdSetIterator.all(reader.maxDoc()));\n            }\n            \n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return new ScorerSupplier() {\n\n            final DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n            final IntersectVisitor visitor = getIntersectVisitor(result);\n            long cost = -1;\n\n            @Override\n            public Scorer get(boolean randomAccess) throws IOException {\n              values.intersect(visitor);\n              DocIdSetIterator iterator = result.build().iterator();\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            \n            @Override\n            public long cost() {\n              if (cost == -1) {\n                // Computing the cost may be expensive, so only do it if necessary\n                cost = values.estimatePointCount(visitor);\n                assert cost >= 0;\n              }\n              return cost;\n            }\n          };\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(false);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"302d34f2c66e8d489ee13078305c330cbf67b226","date":1484754357,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    // We don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\".\n    // This is an inverted structure and should be used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                return;\n              }\n            }\n\n            // Doc is in-bounds\n            adder.add(docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                return Relation.CELL_OUTSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_INSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                // This dim is not in the range\n                return Relation.CELL_INSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment/field indexed any points\n          return null;\n        }\n\n        if (values.getNumDimensions() != numDims) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + values.getNumDimensions() + \" but this query has numDims=\" + numDims);\n        }\n        if (bytesPerDim != values.getBytesPerDimension()) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + values.getBytesPerDimension() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        boolean allDocsMatch;\n        if (values.getDocCount() == reader.maxDoc()) {\n          final byte[] fieldPackedLower = values.getMinPackedValue();\n          final byte[] fieldPackedUpper = values.getMaxPackedValue();\n          allDocsMatch = true;\n          for (int i = 0; i < numDims; ++i) {\n            int offset = i * bytesPerDim;\n            if (StringHelper.compare(bytesPerDim, lowerPoint, offset, fieldPackedLower, offset) > 0\n                || StringHelper.compare(bytesPerDim, upperPoint, offset, fieldPackedUpper, offset) < 0) {\n              allDocsMatch = false;\n              break;\n            }\n          }\n        } else {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          // all docs have a value and all points are within bounds, so everything matches\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(boolean randomAccess) {\n              return new ConstantScoreScorer(weight, score(),\n                  DocIdSetIterator.all(reader.maxDoc()));\n            }\n            \n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return new ScorerSupplier() {\n\n            final DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n            final IntersectVisitor visitor = getIntersectVisitor(result);\n            long cost = -1;\n\n            @Override\n            public Scorer get(boolean randomAccess) throws IOException {\n              if (values.getDocCount() == reader.maxDoc()\n                  && values.getDocCount() == values.size()\n                  && cost() > reader.maxDoc() / 2) {\n                // If all docs have exactly one value and the cost is greater\n                // than half the leaf size then maybe we can make things faster\n                // by computing the set of documents that do NOT match the range\n                final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n                result.set(0, reader.maxDoc());\n                int[] cost = new int[] { reader.maxDoc() };\n                values.intersect(getInverseIntersectVisitor(result, cost));\n                final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n                return new ConstantScoreScorer(weight, score(), iterator);\n              }\n\n              values.intersect(visitor);\n              DocIdSetIterator iterator = result.build().iterator();\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            \n            @Override\n            public long cost() {\n              if (cost == -1) {\n                // Computing the cost may be expensive, so only do it if necessary\n                cost = values.estimatePointCount(visitor);\n                assert cost >= 0;\n              }\n              return cost;\n            }\n          };\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(false);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    // We don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\".\n    // This is an inverted structure and should be used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      private DocIdSet buildMatchingDocIdSet(LeafReader reader, PointValues values) throws IOException {\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n\n        values.intersect(\n            new IntersectVisitor() {\n\n              DocIdSetBuilder.BulkAdder adder;\n\n              @Override\n              public void grow(int count) {\n                adder = result.grow(count);\n              }\n\n              @Override\n              public void visit(int docID) {\n                adder.add(docID);\n              }\n\n              @Override\n              public void visit(int docID, byte[] packedValue) {\n                for(int dim=0;dim<numDims;dim++) {\n                  int offset = dim*bytesPerDim;\n                  if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                    // Doc's value is too low, in this dimension\n                    return;\n                  }\n                  if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                    // Doc's value is too high, in this dimension\n                    return;\n                  }\n                }\n\n                // Doc is in-bounds\n                adder.add(docID);\n              }\n\n              @Override\n              public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n                boolean crosses = false;\n\n                for(int dim=0;dim<numDims;dim++) {\n                  int offset = dim*bytesPerDim;\n\n                  if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                      StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                    return Relation.CELL_OUTSIDE_QUERY;\n                  }\n\n                  crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                    StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n                }\n\n                if (crosses) {\n                  return Relation.CELL_CROSSES_QUERY;\n                } else {\n                  return Relation.CELL_INSIDE_QUERY;\n                }\n              }\n            });\n        return result.build();\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment/field indexed any points\n          return null;\n        }\n\n        if (values.getNumDimensions() != numDims) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + values.getNumDimensions() + \" but this query has numDims=\" + numDims);\n        }\n        if (bytesPerDim != values.getBytesPerDimension()) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + values.getBytesPerDimension() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        boolean allDocsMatch;\n        if (values.getDocCount() == reader.maxDoc()) {\n          final byte[] fieldPackedLower = values.getMinPackedValue();\n          final byte[] fieldPackedUpper = values.getMaxPackedValue();\n          allDocsMatch = true;\n          for (int i = 0; i < numDims; ++i) {\n            int offset = i * bytesPerDim;\n            if (StringHelper.compare(bytesPerDim, lowerPoint, offset, fieldPackedLower, offset) > 0\n                || StringHelper.compare(bytesPerDim, upperPoint, offset, fieldPackedUpper, offset) < 0) {\n              allDocsMatch = false;\n              break;\n            }\n          }\n        } else {\n          allDocsMatch = false;\n        }\n\n        DocIdSetIterator iterator;\n        if (allDocsMatch) {\n          // all docs have a value and all points are within bounds, so everything matches\n          iterator = DocIdSetIterator.all(reader.maxDoc());\n        } else {\n          iterator = buildMatchingDocIdSet(reader, values).iterator();\n        }\n\n        return new ConstantScoreScorer(this, score(), iterator);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a412a7808b2815566cb17117ebe6638112b9a31","date":1484916151,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    // We don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\".\n    // This is an inverted structure and should be used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                return;\n              }\n            }\n\n            // Doc is in-bounds\n            adder.add(docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                return Relation.CELL_OUTSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_INSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                // This dim is not in the range\n                return Relation.CELL_INSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment/field indexed any points\n          return null;\n        }\n\n        if (values.getNumDimensions() != numDims) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + values.getNumDimensions() + \" but this query has numDims=\" + numDims);\n        }\n        if (bytesPerDim != values.getBytesPerDimension()) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + values.getBytesPerDimension() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        boolean allDocsMatch;\n        if (values.getDocCount() == reader.maxDoc()) {\n          final byte[] fieldPackedLower = values.getMinPackedValue();\n          final byte[] fieldPackedUpper = values.getMaxPackedValue();\n          allDocsMatch = true;\n          for (int i = 0; i < numDims; ++i) {\n            int offset = i * bytesPerDim;\n            if (StringHelper.compare(bytesPerDim, lowerPoint, offset, fieldPackedLower, offset) > 0\n                || StringHelper.compare(bytesPerDim, upperPoint, offset, fieldPackedUpper, offset) < 0) {\n              allDocsMatch = false;\n              break;\n            }\n          }\n        } else {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          // all docs have a value and all points are within bounds, so everything matches\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(boolean randomAccess) {\n              return new ConstantScoreScorer(weight, score(),\n                  DocIdSetIterator.all(reader.maxDoc()));\n            }\n            \n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return new ScorerSupplier() {\n\n            final DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n            final IntersectVisitor visitor = getIntersectVisitor(result);\n            long cost = -1;\n\n            @Override\n            public Scorer get(boolean randomAccess) throws IOException {\n              if (false && values.getDocCount() == reader.maxDoc()\n                  && values.getDocCount() == values.size()\n                  && cost() > reader.maxDoc() / 2) {\n                // If all docs have exactly one value and the cost is greater\n                // than half the leaf size then maybe we can make things faster\n                // by computing the set of documents that do NOT match the range\n                final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n                result.set(0, reader.maxDoc());\n                int[] cost = new int[] { reader.maxDoc() };\n                values.intersect(getInverseIntersectVisitor(result, cost));\n                final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n                return new ConstantScoreScorer(weight, score(), iterator);\n              }\n\n              values.intersect(visitor);\n              DocIdSetIterator iterator = result.build().iterator();\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            \n            @Override\n            public long cost() {\n              if (cost == -1) {\n                // Computing the cost may be expensive, so only do it if necessary\n                cost = values.estimatePointCount(visitor);\n                assert cost >= 0;\n              }\n              return cost;\n            }\n          };\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(false);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    // We don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\".\n    // This is an inverted structure and should be used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                return;\n              }\n            }\n\n            // Doc is in-bounds\n            adder.add(docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                return Relation.CELL_OUTSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_INSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                // This dim is not in the range\n                return Relation.CELL_INSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment/field indexed any points\n          return null;\n        }\n\n        if (values.getNumDimensions() != numDims) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + values.getNumDimensions() + \" but this query has numDims=\" + numDims);\n        }\n        if (bytesPerDim != values.getBytesPerDimension()) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + values.getBytesPerDimension() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        boolean allDocsMatch;\n        if (values.getDocCount() == reader.maxDoc()) {\n          final byte[] fieldPackedLower = values.getMinPackedValue();\n          final byte[] fieldPackedUpper = values.getMaxPackedValue();\n          allDocsMatch = true;\n          for (int i = 0; i < numDims; ++i) {\n            int offset = i * bytesPerDim;\n            if (StringHelper.compare(bytesPerDim, lowerPoint, offset, fieldPackedLower, offset) > 0\n                || StringHelper.compare(bytesPerDim, upperPoint, offset, fieldPackedUpper, offset) < 0) {\n              allDocsMatch = false;\n              break;\n            }\n          }\n        } else {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          // all docs have a value and all points are within bounds, so everything matches\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(boolean randomAccess) {\n              return new ConstantScoreScorer(weight, score(),\n                  DocIdSetIterator.all(reader.maxDoc()));\n            }\n            \n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return new ScorerSupplier() {\n\n            final DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n            final IntersectVisitor visitor = getIntersectVisitor(result);\n            long cost = -1;\n\n            @Override\n            public Scorer get(boolean randomAccess) throws IOException {\n              if (values.getDocCount() == reader.maxDoc()\n                  && values.getDocCount() == values.size()\n                  && cost() > reader.maxDoc() / 2) {\n                // If all docs have exactly one value and the cost is greater\n                // than half the leaf size then maybe we can make things faster\n                // by computing the set of documents that do NOT match the range\n                final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n                result.set(0, reader.maxDoc());\n                int[] cost = new int[] { reader.maxDoc() };\n                values.intersect(getInverseIntersectVisitor(result, cost));\n                final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n                return new ConstantScoreScorer(weight, score(), iterator);\n              }\n\n              values.intersect(visitor);\n              DocIdSetIterator iterator = result.build().iterator();\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            \n            @Override\n            public long cost() {\n              if (cost == -1) {\n                // Computing the cost may be expensive, so only do it if necessary\n                cost = values.estimatePointCount(visitor);\n                assert cost >= 0;\n              }\n              return cost;\n            }\n          };\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(false);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f0e9f4a291e7b297738085a7c3dca7b99a228d5","date":1484916449,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    // We don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\".\n    // This is an inverted structure and should be used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                return;\n              }\n            }\n\n            // Doc is in-bounds\n            adder.add(docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                return Relation.CELL_OUTSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_INSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                // This dim is not in the range\n                return Relation.CELL_INSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment/field indexed any points\n          return null;\n        }\n\n        if (values.getNumDimensions() != numDims) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + values.getNumDimensions() + \" but this query has numDims=\" + numDims);\n        }\n        if (bytesPerDim != values.getBytesPerDimension()) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + values.getBytesPerDimension() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        boolean allDocsMatch;\n        if (values.getDocCount() == reader.maxDoc()) {\n          final byte[] fieldPackedLower = values.getMinPackedValue();\n          final byte[] fieldPackedUpper = values.getMaxPackedValue();\n          allDocsMatch = true;\n          for (int i = 0; i < numDims; ++i) {\n            int offset = i * bytesPerDim;\n            if (StringHelper.compare(bytesPerDim, lowerPoint, offset, fieldPackedLower, offset) > 0\n                || StringHelper.compare(bytesPerDim, upperPoint, offset, fieldPackedUpper, offset) < 0) {\n              allDocsMatch = false;\n              break;\n            }\n          }\n        } else {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          // all docs have a value and all points are within bounds, so everything matches\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(boolean randomAccess) {\n              return new ConstantScoreScorer(weight, score(),\n                  DocIdSetIterator.all(reader.maxDoc()));\n            }\n            \n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return new ScorerSupplier() {\n\n            final DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n            final IntersectVisitor visitor = getIntersectVisitor(result);\n            long cost = -1;\n\n            @Override\n            public Scorer get(boolean randomAccess) throws IOException {\n              if (values.getDocCount() == reader.maxDoc()\n                  && values.getDocCount() == values.size()\n                  && cost() > reader.maxDoc() / 2) {\n                // If all docs have exactly one value and the cost is greater\n                // than half the leaf size then maybe we can make things faster\n                // by computing the set of documents that do NOT match the range\n                final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n                result.set(0, reader.maxDoc());\n                int[] cost = new int[] { reader.maxDoc() };\n                values.intersect(getInverseIntersectVisitor(result, cost));\n                final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n                return new ConstantScoreScorer(weight, score(), iterator);\n              }\n\n              values.intersect(visitor);\n              DocIdSetIterator iterator = result.build().iterator();\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            \n            @Override\n            public long cost() {\n              if (cost == -1) {\n                // Computing the cost may be expensive, so only do it if necessary\n                cost = values.estimatePointCount(visitor);\n                assert cost >= 0;\n              }\n              return cost;\n            }\n          };\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(false);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    // We don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\".\n    // This is an inverted structure and should be used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                return;\n              }\n            }\n\n            // Doc is in-bounds\n            adder.add(docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                return Relation.CELL_OUTSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_INSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                // This dim is not in the range\n                return Relation.CELL_INSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment/field indexed any points\n          return null;\n        }\n\n        if (values.getNumDimensions() != numDims) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + values.getNumDimensions() + \" but this query has numDims=\" + numDims);\n        }\n        if (bytesPerDim != values.getBytesPerDimension()) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + values.getBytesPerDimension() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        boolean allDocsMatch;\n        if (values.getDocCount() == reader.maxDoc()) {\n          final byte[] fieldPackedLower = values.getMinPackedValue();\n          final byte[] fieldPackedUpper = values.getMaxPackedValue();\n          allDocsMatch = true;\n          for (int i = 0; i < numDims; ++i) {\n            int offset = i * bytesPerDim;\n            if (StringHelper.compare(bytesPerDim, lowerPoint, offset, fieldPackedLower, offset) > 0\n                || StringHelper.compare(bytesPerDim, upperPoint, offset, fieldPackedUpper, offset) < 0) {\n              allDocsMatch = false;\n              break;\n            }\n          }\n        } else {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          // all docs have a value and all points are within bounds, so everything matches\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(boolean randomAccess) {\n              return new ConstantScoreScorer(weight, score(),\n                  DocIdSetIterator.all(reader.maxDoc()));\n            }\n            \n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return new ScorerSupplier() {\n\n            final DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n            final IntersectVisitor visitor = getIntersectVisitor(result);\n            long cost = -1;\n\n            @Override\n            public Scorer get(boolean randomAccess) throws IOException {\n              if (false && values.getDocCount() == reader.maxDoc()\n                  && values.getDocCount() == values.size()\n                  && cost() > reader.maxDoc() / 2) {\n                // If all docs have exactly one value and the cost is greater\n                // than half the leaf size then maybe we can make things faster\n                // by computing the set of documents that do NOT match the range\n                final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n                result.set(0, reader.maxDoc());\n                int[] cost = new int[] { reader.maxDoc() };\n                values.intersect(getInverseIntersectVisitor(result, cost));\n                final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n                return new ConstantScoreScorer(weight, score(), iterator);\n              }\n\n              values.intersect(visitor);\n              DocIdSetIterator iterator = result.build().iterator();\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            \n            @Override\n            public long cost() {\n              if (cost == -1) {\n                // Computing the cost may be expensive, so only do it if necessary\n                cost = values.estimatePointCount(visitor);\n                assert cost >= 0;\n              }\n              return cost;\n            }\n          };\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(false);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24f3e9c0fc20b3107388ec853a6fbad9f891b461","date":1502359844,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    // We don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\".\n    // This is an inverted structure and should be used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                return;\n              }\n            }\n\n            // Doc is in-bounds\n            adder.add(docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                return Relation.CELL_OUTSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_INSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                // This dim is not in the range\n                return Relation.CELL_INSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment/field indexed any points\n          return null;\n        }\n\n        if (values.getNumDimensions() != numDims) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + values.getNumDimensions() + \" but this query has numDims=\" + numDims);\n        }\n        if (bytesPerDim != values.getBytesPerDimension()) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + values.getBytesPerDimension() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        boolean allDocsMatch;\n        if (values.getDocCount() == reader.maxDoc()) {\n          final byte[] fieldPackedLower = values.getMinPackedValue();\n          final byte[] fieldPackedUpper = values.getMaxPackedValue();\n          allDocsMatch = true;\n          for (int i = 0; i < numDims; ++i) {\n            int offset = i * bytesPerDim;\n            if (StringHelper.compare(bytesPerDim, lowerPoint, offset, fieldPackedLower, offset) > 0\n                || StringHelper.compare(bytesPerDim, upperPoint, offset, fieldPackedUpper, offset) < 0) {\n              allDocsMatch = false;\n              break;\n            }\n          }\n        } else {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          // all docs have a value and all points are within bounds, so everything matches\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) {\n              return new ConstantScoreScorer(weight, score(),\n                  DocIdSetIterator.all(reader.maxDoc()));\n            }\n            \n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return new ScorerSupplier() {\n\n            final DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n            final IntersectVisitor visitor = getIntersectVisitor(result);\n            long cost = -1;\n\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              if (values.getDocCount() == reader.maxDoc()\n                  && values.getDocCount() == values.size()\n                  && cost() > reader.maxDoc() / 2) {\n                // If all docs have exactly one value and the cost is greater\n                // than half the leaf size then maybe we can make things faster\n                // by computing the set of documents that do NOT match the range\n                final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n                result.set(0, reader.maxDoc());\n                int[] cost = new int[] { reader.maxDoc() };\n                values.intersect(getInverseIntersectVisitor(result, cost));\n                final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n                return new ConstantScoreScorer(weight, score(), iterator);\n              }\n\n              values.intersect(visitor);\n              DocIdSetIterator iterator = result.build().iterator();\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            \n            @Override\n            public long cost() {\n              if (cost == -1) {\n                // Computing the cost may be expensive, so only do it if necessary\n                cost = values.estimatePointCount(visitor);\n                assert cost >= 0;\n              }\n              return cost;\n            }\n          };\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    // We don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\".\n    // This is an inverted structure and should be used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                return;\n              }\n            }\n\n            // Doc is in-bounds\n            adder.add(docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                return Relation.CELL_OUTSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_INSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                // This dim is not in the range\n                return Relation.CELL_INSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment/field indexed any points\n          return null;\n        }\n\n        if (values.getNumDimensions() != numDims) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + values.getNumDimensions() + \" but this query has numDims=\" + numDims);\n        }\n        if (bytesPerDim != values.getBytesPerDimension()) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + values.getBytesPerDimension() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        boolean allDocsMatch;\n        if (values.getDocCount() == reader.maxDoc()) {\n          final byte[] fieldPackedLower = values.getMinPackedValue();\n          final byte[] fieldPackedUpper = values.getMaxPackedValue();\n          allDocsMatch = true;\n          for (int i = 0; i < numDims; ++i) {\n            int offset = i * bytesPerDim;\n            if (StringHelper.compare(bytesPerDim, lowerPoint, offset, fieldPackedLower, offset) > 0\n                || StringHelper.compare(bytesPerDim, upperPoint, offset, fieldPackedUpper, offset) < 0) {\n              allDocsMatch = false;\n              break;\n            }\n          }\n        } else {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          // all docs have a value and all points are within bounds, so everything matches\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(boolean randomAccess) {\n              return new ConstantScoreScorer(weight, score(),\n                  DocIdSetIterator.all(reader.maxDoc()));\n            }\n            \n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return new ScorerSupplier() {\n\n            final DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n            final IntersectVisitor visitor = getIntersectVisitor(result);\n            long cost = -1;\n\n            @Override\n            public Scorer get(boolean randomAccess) throws IOException {\n              if (values.getDocCount() == reader.maxDoc()\n                  && values.getDocCount() == values.size()\n                  && cost() > reader.maxDoc() / 2) {\n                // If all docs have exactly one value and the cost is greater\n                // than half the leaf size then maybe we can make things faster\n                // by computing the set of documents that do NOT match the range\n                final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n                result.set(0, reader.maxDoc());\n                int[] cost = new int[] { reader.maxDoc() };\n                values.intersect(getInverseIntersectVisitor(result, cost));\n                final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n                return new ConstantScoreScorer(weight, score(), iterator);\n              }\n\n              values.intersect(visitor);\n              DocIdSetIterator iterator = result.build().iterator();\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            \n            @Override\n            public long cost() {\n              if (cost == -1) {\n                // Computing the cost may be expensive, so only do it if necessary\n                cost = values.estimatePointCount(visitor);\n                assert cost >= 0;\n              }\n              return cost;\n            }\n          };\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(false);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d6ba405c7c8192661bdf7ce782181d12f3162a6","date":1502361392,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    // We don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\".\n    // This is an inverted structure and should be used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                return;\n              }\n            }\n\n            // Doc is in-bounds\n            adder.add(docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                return Relation.CELL_OUTSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_INSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                // This dim is not in the range\n                return Relation.CELL_INSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment/field indexed any points\n          return null;\n        }\n\n        if (values.getNumDimensions() != numDims) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + values.getNumDimensions() + \" but this query has numDims=\" + numDims);\n        }\n        if (bytesPerDim != values.getBytesPerDimension()) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + values.getBytesPerDimension() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        boolean allDocsMatch;\n        if (values.getDocCount() == reader.maxDoc()) {\n          final byte[] fieldPackedLower = values.getMinPackedValue();\n          final byte[] fieldPackedUpper = values.getMaxPackedValue();\n          allDocsMatch = true;\n          for (int i = 0; i < numDims; ++i) {\n            int offset = i * bytesPerDim;\n            if (StringHelper.compare(bytesPerDim, lowerPoint, offset, fieldPackedLower, offset) > 0\n                || StringHelper.compare(bytesPerDim, upperPoint, offset, fieldPackedUpper, offset) < 0) {\n              allDocsMatch = false;\n              break;\n            }\n          }\n        } else {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          // all docs have a value and all points are within bounds, so everything matches\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) {\n              return new ConstantScoreScorer(weight, score(),\n                  DocIdSetIterator.all(reader.maxDoc()));\n            }\n            \n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return new ScorerSupplier() {\n\n            final DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n            final IntersectVisitor visitor = getIntersectVisitor(result);\n            long cost = -1;\n\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              if (values.getDocCount() == reader.maxDoc()\n                  && values.getDocCount() == values.size()\n                  && cost() > reader.maxDoc() / 2) {\n                // If all docs have exactly one value and the cost is greater\n                // than half the leaf size then maybe we can make things faster\n                // by computing the set of documents that do NOT match the range\n                final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n                result.set(0, reader.maxDoc());\n                int[] cost = new int[] { reader.maxDoc() };\n                values.intersect(getInverseIntersectVisitor(result, cost));\n                final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n                return new ConstantScoreScorer(weight, score(), iterator);\n              }\n\n              values.intersect(visitor);\n              DocIdSetIterator iterator = result.build().iterator();\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            \n            @Override\n            public long cost() {\n              if (cost == -1) {\n                // Computing the cost may be expensive, so only do it if necessary\n                cost = values.estimatePointCount(visitor);\n                assert cost >= 0;\n              }\n              return cost;\n            }\n          };\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    // We don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\".\n    // This is an inverted structure and should be used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                return;\n              }\n            }\n\n            // Doc is in-bounds\n            adder.add(docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                return Relation.CELL_OUTSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_INSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                // This dim is not in the range\n                return Relation.CELL_INSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment/field indexed any points\n          return null;\n        }\n\n        if (values.getNumDimensions() != numDims) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + values.getNumDimensions() + \" but this query has numDims=\" + numDims);\n        }\n        if (bytesPerDim != values.getBytesPerDimension()) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + values.getBytesPerDimension() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        boolean allDocsMatch;\n        if (values.getDocCount() == reader.maxDoc()) {\n          final byte[] fieldPackedLower = values.getMinPackedValue();\n          final byte[] fieldPackedUpper = values.getMaxPackedValue();\n          allDocsMatch = true;\n          for (int i = 0; i < numDims; ++i) {\n            int offset = i * bytesPerDim;\n            if (StringHelper.compare(bytesPerDim, lowerPoint, offset, fieldPackedLower, offset) > 0\n                || StringHelper.compare(bytesPerDim, upperPoint, offset, fieldPackedUpper, offset) < 0) {\n              allDocsMatch = false;\n              break;\n            }\n          }\n        } else {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          // all docs have a value and all points are within bounds, so everything matches\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(boolean randomAccess) {\n              return new ConstantScoreScorer(weight, score(),\n                  DocIdSetIterator.all(reader.maxDoc()));\n            }\n            \n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return new ScorerSupplier() {\n\n            final DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n            final IntersectVisitor visitor = getIntersectVisitor(result);\n            long cost = -1;\n\n            @Override\n            public Scorer get(boolean randomAccess) throws IOException {\n              if (values.getDocCount() == reader.maxDoc()\n                  && values.getDocCount() == values.size()\n                  && cost() > reader.maxDoc() / 2) {\n                // If all docs have exactly one value and the cost is greater\n                // than half the leaf size then maybe we can make things faster\n                // by computing the set of documents that do NOT match the range\n                final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n                result.set(0, reader.maxDoc());\n                int[] cost = new int[] { reader.maxDoc() };\n                values.intersect(getInverseIntersectVisitor(result, cost));\n                final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n                return new ConstantScoreScorer(weight, score(), iterator);\n              }\n\n              values.intersect(visitor);\n              DocIdSetIterator iterator = result.build().iterator();\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            \n            @Override\n            public long cost() {\n              if (cost == -1) {\n                // Computing the cost may be expensive, so only do it if necessary\n                cost = values.estimatePointCount(visitor);\n                assert cost >= 0;\n              }\n              return cost;\n            }\n          };\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(false);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58884af1f68e9d61c217c753fbd6266d86a63b14","date":1502363401,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    // We don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\".\n    // This is an inverted structure and should be used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                return;\n              }\n            }\n\n            // Doc is in-bounds\n            adder.add(docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                return Relation.CELL_OUTSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_INSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                // This dim is not in the range\n                return Relation.CELL_INSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment/field indexed any points\n          return null;\n        }\n\n        if (values.getNumDimensions() != numDims) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + values.getNumDimensions() + \" but this query has numDims=\" + numDims);\n        }\n        if (bytesPerDim != values.getBytesPerDimension()) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + values.getBytesPerDimension() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        boolean allDocsMatch;\n        if (values.getDocCount() == reader.maxDoc()) {\n          final byte[] fieldPackedLower = values.getMinPackedValue();\n          final byte[] fieldPackedUpper = values.getMaxPackedValue();\n          allDocsMatch = true;\n          for (int i = 0; i < numDims; ++i) {\n            int offset = i * bytesPerDim;\n            if (StringHelper.compare(bytesPerDim, lowerPoint, offset, fieldPackedLower, offset) > 0\n                || StringHelper.compare(bytesPerDim, upperPoint, offset, fieldPackedUpper, offset) < 0) {\n              allDocsMatch = false;\n              break;\n            }\n          }\n        } else {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          // all docs have a value and all points are within bounds, so everything matches\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) {\n              return new ConstantScoreScorer(weight, score(),\n                  DocIdSetIterator.all(reader.maxDoc()));\n            }\n            \n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return new ScorerSupplier() {\n\n            final DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n            final IntersectVisitor visitor = getIntersectVisitor(result);\n            long cost = -1;\n\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              if (values.getDocCount() == reader.maxDoc()\n                  && values.getDocCount() == values.size()\n                  && cost() > reader.maxDoc() / 2) {\n                // If all docs have exactly one value and the cost is greater\n                // than half the leaf size then maybe we can make things faster\n                // by computing the set of documents that do NOT match the range\n                final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n                result.set(0, reader.maxDoc());\n                int[] cost = new int[] { reader.maxDoc() };\n                values.intersect(getInverseIntersectVisitor(result, cost));\n                final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n                return new ConstantScoreScorer(weight, score(), iterator);\n              }\n\n              values.intersect(visitor);\n              DocIdSetIterator iterator = result.build().iterator();\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            \n            @Override\n            public long cost() {\n              if (cost == -1) {\n                // Computing the cost may be expensive, so only do it if necessary\n                cost = values.estimatePointCount(visitor);\n                assert cost >= 0;\n              }\n              return cost;\n            }\n          };\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    // We don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\".\n    // This is an inverted structure and should be used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                return;\n              }\n            }\n\n            // Doc is in-bounds\n            adder.add(docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                return Relation.CELL_OUTSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_INSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                // This dim is not in the range\n                return Relation.CELL_INSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment/field indexed any points\n          return null;\n        }\n\n        if (values.getNumDimensions() != numDims) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + values.getNumDimensions() + \" but this query has numDims=\" + numDims);\n        }\n        if (bytesPerDim != values.getBytesPerDimension()) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + values.getBytesPerDimension() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        boolean allDocsMatch;\n        if (values.getDocCount() == reader.maxDoc()) {\n          final byte[] fieldPackedLower = values.getMinPackedValue();\n          final byte[] fieldPackedUpper = values.getMaxPackedValue();\n          allDocsMatch = true;\n          for (int i = 0; i < numDims; ++i) {\n            int offset = i * bytesPerDim;\n            if (StringHelper.compare(bytesPerDim, lowerPoint, offset, fieldPackedLower, offset) > 0\n                || StringHelper.compare(bytesPerDim, upperPoint, offset, fieldPackedUpper, offset) < 0) {\n              allDocsMatch = false;\n              break;\n            }\n          }\n        } else {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          // all docs have a value and all points are within bounds, so everything matches\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(boolean randomAccess) {\n              return new ConstantScoreScorer(weight, score(),\n                  DocIdSetIterator.all(reader.maxDoc()));\n            }\n            \n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return new ScorerSupplier() {\n\n            final DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n            final IntersectVisitor visitor = getIntersectVisitor(result);\n            long cost = -1;\n\n            @Override\n            public Scorer get(boolean randomAccess) throws IOException {\n              if (values.getDocCount() == reader.maxDoc()\n                  && values.getDocCount() == values.size()\n                  && cost() > reader.maxDoc() / 2) {\n                // If all docs have exactly one value and the cost is greater\n                // than half the leaf size then maybe we can make things faster\n                // by computing the set of documents that do NOT match the range\n                final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n                result.set(0, reader.maxDoc());\n                int[] cost = new int[] { reader.maxDoc() };\n                values.intersect(getInverseIntersectVisitor(result, cost));\n                final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n                return new ConstantScoreScorer(weight, score(), iterator);\n              }\n\n              values.intersect(visitor);\n              DocIdSetIterator iterator = result.build().iterator();\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            \n            @Override\n            public long cost() {\n              if (cost == -1) {\n                // Computing the cost may be expensive, so only do it if necessary\n                cost = values.estimatePointCount(visitor);\n                assert cost >= 0;\n              }\n              return cost;\n            }\n          };\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(false);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","date":1502692251,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    // We don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\".\n    // This is an inverted structure and should be used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                return;\n              }\n            }\n\n            // Doc is in-bounds\n            adder.add(docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                return Relation.CELL_OUTSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_INSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                // This dim is not in the range\n                return Relation.CELL_INSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment/field indexed any points\n          return null;\n        }\n\n        if (values.getNumDimensions() != numDims) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + values.getNumDimensions() + \" but this query has numDims=\" + numDims);\n        }\n        if (bytesPerDim != values.getBytesPerDimension()) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + values.getBytesPerDimension() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        boolean allDocsMatch;\n        if (values.getDocCount() == reader.maxDoc()) {\n          final byte[] fieldPackedLower = values.getMinPackedValue();\n          final byte[] fieldPackedUpper = values.getMaxPackedValue();\n          allDocsMatch = true;\n          for (int i = 0; i < numDims; ++i) {\n            int offset = i * bytesPerDim;\n            if (StringHelper.compare(bytesPerDim, lowerPoint, offset, fieldPackedLower, offset) > 0\n                || StringHelper.compare(bytesPerDim, upperPoint, offset, fieldPackedUpper, offset) < 0) {\n              allDocsMatch = false;\n              break;\n            }\n          }\n        } else {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          // all docs have a value and all points are within bounds, so everything matches\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) {\n              return new ConstantScoreScorer(weight, score(),\n                  DocIdSetIterator.all(reader.maxDoc()));\n            }\n            \n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return new ScorerSupplier() {\n\n            final DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n            final IntersectVisitor visitor = getIntersectVisitor(result);\n            long cost = -1;\n\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              if (values.getDocCount() == reader.maxDoc()\n                  && values.getDocCount() == values.size()\n                  && cost() > reader.maxDoc() / 2) {\n                // If all docs have exactly one value and the cost is greater\n                // than half the leaf size then maybe we can make things faster\n                // by computing the set of documents that do NOT match the range\n                final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n                result.set(0, reader.maxDoc());\n                int[] cost = new int[] { reader.maxDoc() };\n                values.intersect(getInverseIntersectVisitor(result, cost));\n                final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n                return new ConstantScoreScorer(weight, score(), iterator);\n              }\n\n              values.intersect(visitor);\n              DocIdSetIterator iterator = result.build().iterator();\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            \n            @Override\n            public long cost() {\n              if (cost == -1) {\n                // Computing the cost may be expensive, so only do it if necessary\n                cost = values.estimatePointCount(visitor);\n                assert cost >= 0;\n              }\n              return cost;\n            }\n          };\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    // We don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\".\n    // This is an inverted structure and should be used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                return;\n              }\n            }\n\n            // Doc is in-bounds\n            adder.add(docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                return Relation.CELL_OUTSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_INSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                // This dim is not in the range\n                return Relation.CELL_INSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment/field indexed any points\n          return null;\n        }\n\n        if (values.getNumDimensions() != numDims) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + values.getNumDimensions() + \" but this query has numDims=\" + numDims);\n        }\n        if (bytesPerDim != values.getBytesPerDimension()) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + values.getBytesPerDimension() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        boolean allDocsMatch;\n        if (values.getDocCount() == reader.maxDoc()) {\n          final byte[] fieldPackedLower = values.getMinPackedValue();\n          final byte[] fieldPackedUpper = values.getMaxPackedValue();\n          allDocsMatch = true;\n          for (int i = 0; i < numDims; ++i) {\n            int offset = i * bytesPerDim;\n            if (StringHelper.compare(bytesPerDim, lowerPoint, offset, fieldPackedLower, offset) > 0\n                || StringHelper.compare(bytesPerDim, upperPoint, offset, fieldPackedUpper, offset) < 0) {\n              allDocsMatch = false;\n              break;\n            }\n          }\n        } else {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          // all docs have a value and all points are within bounds, so everything matches\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(boolean randomAccess) {\n              return new ConstantScoreScorer(weight, score(),\n                  DocIdSetIterator.all(reader.maxDoc()));\n            }\n            \n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return new ScorerSupplier() {\n\n            final DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n            final IntersectVisitor visitor = getIntersectVisitor(result);\n            long cost = -1;\n\n            @Override\n            public Scorer get(boolean randomAccess) throws IOException {\n              if (values.getDocCount() == reader.maxDoc()\n                  && values.getDocCount() == values.size()\n                  && cost() > reader.maxDoc() / 2) {\n                // If all docs have exactly one value and the cost is greater\n                // than half the leaf size then maybe we can make things faster\n                // by computing the set of documents that do NOT match the range\n                final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n                result.set(0, reader.maxDoc());\n                int[] cost = new int[] { reader.maxDoc() };\n                values.intersect(getInverseIntersectVisitor(result, cost));\n                final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n                return new ConstantScoreScorer(weight, score(), iterator);\n              }\n\n              values.intersect(visitor);\n              DocIdSetIterator iterator = result.build().iterator();\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            \n            @Override\n            public long cost() {\n              if (cost == -1) {\n                // Computing the cost may be expensive, so only do it if necessary\n                cost = values.estimatePointCount(visitor);\n                assert cost >= 0;\n              }\n              return cost;\n            }\n          };\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(false);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"706a7a3396c030cc66dda92a0492eb492131c4c0","date":1509705614,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    // We don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\".\n    // This is an inverted structure and should be used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                return;\n              }\n            }\n\n            // Doc is in-bounds\n            adder.add(docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                return Relation.CELL_OUTSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_INSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                // This dim is not in the range\n                return Relation.CELL_INSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment/field indexed any points\n          return null;\n        }\n\n        if (values.getNumDimensions() != numDims) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + values.getNumDimensions() + \" but this query has numDims=\" + numDims);\n        }\n        if (bytesPerDim != values.getBytesPerDimension()) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + values.getBytesPerDimension() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        boolean allDocsMatch;\n        if (values.getDocCount() == reader.maxDoc()) {\n          final byte[] fieldPackedLower = values.getMinPackedValue();\n          final byte[] fieldPackedUpper = values.getMaxPackedValue();\n          allDocsMatch = true;\n          for (int i = 0; i < numDims; ++i) {\n            int offset = i * bytesPerDim;\n            if (StringHelper.compare(bytesPerDim, lowerPoint, offset, fieldPackedLower, offset) > 0\n                || StringHelper.compare(bytesPerDim, upperPoint, offset, fieldPackedUpper, offset) < 0) {\n              allDocsMatch = false;\n              break;\n            }\n          }\n        } else {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          // all docs have a value and all points are within bounds, so everything matches\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) {\n              return new ConstantScoreScorer(weight, score(),\n                  DocIdSetIterator.all(reader.maxDoc()));\n            }\n            \n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return new ScorerSupplier() {\n\n            final DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n            final IntersectVisitor visitor = getIntersectVisitor(result);\n            long cost = -1;\n\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              if (values.getDocCount() == reader.maxDoc()\n                  && values.getDocCount() == values.size()\n                  && cost() > reader.maxDoc() / 2) {\n                // If all docs have exactly one value and the cost is greater\n                // than half the leaf size then maybe we can make things faster\n                // by computing the set of documents that do NOT match the range\n                final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n                result.set(0, reader.maxDoc());\n                int[] cost = new int[] { reader.maxDoc() };\n                values.intersect(getInverseIntersectVisitor(result, cost));\n                final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n                return new ConstantScoreScorer(weight, score(), iterator);\n              }\n\n              values.intersect(visitor);\n              DocIdSetIterator iterator = result.build().iterator();\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            \n            @Override\n            public long cost() {\n              if (cost == -1) {\n                // Computing the cost may be expensive, so only do it if necessary\n                cost = values.estimatePointCount(visitor);\n                assert cost >= 0;\n              }\n              return cost;\n            }\n          };\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n        return context.reader().getCoreCacheHelper();\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    // We don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\".\n    // This is an inverted structure and should be used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                return;\n              }\n            }\n\n            // Doc is in-bounds\n            adder.add(docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                return Relation.CELL_OUTSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_INSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                // This dim is not in the range\n                return Relation.CELL_INSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment/field indexed any points\n          return null;\n        }\n\n        if (values.getNumDimensions() != numDims) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + values.getNumDimensions() + \" but this query has numDims=\" + numDims);\n        }\n        if (bytesPerDim != values.getBytesPerDimension()) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + values.getBytesPerDimension() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        boolean allDocsMatch;\n        if (values.getDocCount() == reader.maxDoc()) {\n          final byte[] fieldPackedLower = values.getMinPackedValue();\n          final byte[] fieldPackedUpper = values.getMaxPackedValue();\n          allDocsMatch = true;\n          for (int i = 0; i < numDims; ++i) {\n            int offset = i * bytesPerDim;\n            if (StringHelper.compare(bytesPerDim, lowerPoint, offset, fieldPackedLower, offset) > 0\n                || StringHelper.compare(bytesPerDim, upperPoint, offset, fieldPackedUpper, offset) < 0) {\n              allDocsMatch = false;\n              break;\n            }\n          }\n        } else {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          // all docs have a value and all points are within bounds, so everything matches\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) {\n              return new ConstantScoreScorer(weight, score(),\n                  DocIdSetIterator.all(reader.maxDoc()));\n            }\n            \n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return new ScorerSupplier() {\n\n            final DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n            final IntersectVisitor visitor = getIntersectVisitor(result);\n            long cost = -1;\n\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              if (values.getDocCount() == reader.maxDoc()\n                  && values.getDocCount() == values.size()\n                  && cost() > reader.maxDoc() / 2) {\n                // If all docs have exactly one value and the cost is greater\n                // than half the leaf size then maybe we can make things faster\n                // by computing the set of documents that do NOT match the range\n                final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n                result.set(0, reader.maxDoc());\n                int[] cost = new int[] { reader.maxDoc() };\n                values.intersect(getInverseIntersectVisitor(result, cost));\n                final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n                return new ConstantScoreScorer(weight, score(), iterator);\n              }\n\n              values.intersect(visitor);\n              DocIdSetIterator iterator = result.build().iterator();\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            \n            @Override\n            public long cost() {\n              if (cost == -1) {\n                // Computing the cost may be expensive, so only do it if necessary\n                cost = values.estimatePointCount(visitor);\n                assert cost >= 0;\n              }\n              return cost;\n            }\n          };\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    // We don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\".\n    // This is an inverted structure and should be used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                return;\n              }\n            }\n\n            // Doc is in-bounds\n            adder.add(docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                return Relation.CELL_OUTSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_INSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                // This dim is not in the range\n                return Relation.CELL_INSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment/field indexed any points\n          return null;\n        }\n\n        if (values.getNumDimensions() != numDims) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + values.getNumDimensions() + \" but this query has numDims=\" + numDims);\n        }\n        if (bytesPerDim != values.getBytesPerDimension()) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + values.getBytesPerDimension() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        boolean allDocsMatch;\n        if (values.getDocCount() == reader.maxDoc()) {\n          final byte[] fieldPackedLower = values.getMinPackedValue();\n          final byte[] fieldPackedUpper = values.getMaxPackedValue();\n          allDocsMatch = true;\n          for (int i = 0; i < numDims; ++i) {\n            int offset = i * bytesPerDim;\n            if (StringHelper.compare(bytesPerDim, lowerPoint, offset, fieldPackedLower, offset) > 0\n                || StringHelper.compare(bytesPerDim, upperPoint, offset, fieldPackedUpper, offset) < 0) {\n              allDocsMatch = false;\n              break;\n            }\n          }\n        } else {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          // all docs have a value and all points are within bounds, so everything matches\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) {\n              return new ConstantScoreScorer(weight, score(),\n                  DocIdSetIterator.all(reader.maxDoc()));\n            }\n            \n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return new ScorerSupplier() {\n\n            final DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n            final IntersectVisitor visitor = getIntersectVisitor(result);\n            long cost = -1;\n\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              if (values.getDocCount() == reader.maxDoc()\n                  && values.getDocCount() == values.size()\n                  && cost() > reader.maxDoc() / 2) {\n                // If all docs have exactly one value and the cost is greater\n                // than half the leaf size then maybe we can make things faster\n                // by computing the set of documents that do NOT match the range\n                final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n                result.set(0, reader.maxDoc());\n                int[] cost = new int[] { reader.maxDoc() };\n                values.intersect(getInverseIntersectVisitor(result, cost));\n                final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n                return new ConstantScoreScorer(weight, score(), iterator);\n              }\n\n              values.intersect(visitor);\n              DocIdSetIterator iterator = result.build().iterator();\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            \n            @Override\n            public long cost() {\n              if (cost == -1) {\n                // Computing the cost may be expensive, so only do it if necessary\n                cost = values.estimatePointCount(visitor);\n                assert cost >= 0;\n              }\n              return cost;\n            }\n          };\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n        return context.reader().getCoreCacheHelper();\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    // We don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\".\n    // This is an inverted structure and should be used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                return;\n              }\n            }\n\n            // Doc is in-bounds\n            adder.add(docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                return Relation.CELL_OUTSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_INSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                // This dim is not in the range\n                return Relation.CELL_INSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment/field indexed any points\n          return null;\n        }\n\n        if (values.getNumDimensions() != numDims) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + values.getNumDimensions() + \" but this query has numDims=\" + numDims);\n        }\n        if (bytesPerDim != values.getBytesPerDimension()) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + values.getBytesPerDimension() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        boolean allDocsMatch;\n        if (values.getDocCount() == reader.maxDoc()) {\n          final byte[] fieldPackedLower = values.getMinPackedValue();\n          final byte[] fieldPackedUpper = values.getMaxPackedValue();\n          allDocsMatch = true;\n          for (int i = 0; i < numDims; ++i) {\n            int offset = i * bytesPerDim;\n            if (StringHelper.compare(bytesPerDim, lowerPoint, offset, fieldPackedLower, offset) > 0\n                || StringHelper.compare(bytesPerDim, upperPoint, offset, fieldPackedUpper, offset) < 0) {\n              allDocsMatch = false;\n              break;\n            }\n          }\n        } else {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          // all docs have a value and all points are within bounds, so everything matches\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) {\n              return new ConstantScoreScorer(weight, score(),\n                  DocIdSetIterator.all(reader.maxDoc()));\n            }\n            \n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return new ScorerSupplier() {\n\n            final DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n            final IntersectVisitor visitor = getIntersectVisitor(result);\n            long cost = -1;\n\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              if (values.getDocCount() == reader.maxDoc()\n                  && values.getDocCount() == values.size()\n                  && cost() > reader.maxDoc() / 2) {\n                // If all docs have exactly one value and the cost is greater\n                // than half the leaf size then maybe we can make things faster\n                // by computing the set of documents that do NOT match the range\n                final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n                result.set(0, reader.maxDoc());\n                int[] cost = new int[] { reader.maxDoc() };\n                values.intersect(getInverseIntersectVisitor(result, cost));\n                final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n                return new ConstantScoreScorer(weight, score(), iterator);\n              }\n\n              values.intersect(visitor);\n              DocIdSetIterator iterator = result.build().iterator();\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            \n            @Override\n            public long cost() {\n              if (cost == -1) {\n                // Computing the cost may be expensive, so only do it if necessary\n                cost = values.estimatePointCount(visitor);\n                assert cost >= 0;\n              }\n              return cost;\n            }\n          };\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da1460d7a5dea2658e7b8e4f6e632e53ade440ac","date":1510316270,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    // We don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\".\n    // This is an inverted structure and should be used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                return;\n              }\n            }\n\n            // Doc is in-bounds\n            adder.add(docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                return Relation.CELL_OUTSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_INSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                // This dim is not in the range\n                return Relation.CELL_INSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment/field indexed any points\n          return null;\n        }\n\n        if (values.getNumDimensions() != numDims) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + values.getNumDimensions() + \" but this query has numDims=\" + numDims);\n        }\n        if (bytesPerDim != values.getBytesPerDimension()) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + values.getBytesPerDimension() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        boolean allDocsMatch;\n        if (values.getDocCount() == reader.maxDoc()) {\n          final byte[] fieldPackedLower = values.getMinPackedValue();\n          final byte[] fieldPackedUpper = values.getMaxPackedValue();\n          allDocsMatch = true;\n          for (int i = 0; i < numDims; ++i) {\n            int offset = i * bytesPerDim;\n            if (StringHelper.compare(bytesPerDim, lowerPoint, offset, fieldPackedLower, offset) > 0\n                || StringHelper.compare(bytesPerDim, upperPoint, offset, fieldPackedUpper, offset) < 0) {\n              allDocsMatch = false;\n              break;\n            }\n          }\n        } else {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          // all docs have a value and all points are within bounds, so everything matches\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) {\n              return new ConstantScoreScorer(weight, score(),\n                  DocIdSetIterator.all(reader.maxDoc()));\n            }\n            \n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return new ScorerSupplier() {\n\n            final DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n            final IntersectVisitor visitor = getIntersectVisitor(result);\n            long cost = -1;\n\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              if (values.getDocCount() == reader.maxDoc()\n                  && values.getDocCount() == values.size()\n                  && cost() > reader.maxDoc() / 2) {\n                // If all docs have exactly one value and the cost is greater\n                // than half the leaf size then maybe we can make things faster\n                // by computing the set of documents that do NOT match the range\n                final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n                result.set(0, reader.maxDoc());\n                int[] cost = new int[] { reader.maxDoc() };\n                values.intersect(getInverseIntersectVisitor(result, cost));\n                final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n                return new ConstantScoreScorer(weight, score(), iterator);\n              }\n\n              values.intersect(visitor);\n              DocIdSetIterator iterator = result.build().iterator();\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            \n            @Override\n            public long cost() {\n              if (cost == -1) {\n                // Computing the cost may be expensive, so only do it if necessary\n                cost = values.estimatePointCount(visitor);\n                assert cost >= 0;\n              }\n              return cost;\n            }\n          };\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    // We don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\".\n    // This is an inverted structure and should be used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                return;\n              }\n            }\n\n            // Doc is in-bounds\n            adder.add(docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                return Relation.CELL_OUTSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_INSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                // This dim is not in the range\n                return Relation.CELL_INSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment/field indexed any points\n          return null;\n        }\n\n        if (values.getNumDimensions() != numDims) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + values.getNumDimensions() + \" but this query has numDims=\" + numDims);\n        }\n        if (bytesPerDim != values.getBytesPerDimension()) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + values.getBytesPerDimension() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        boolean allDocsMatch;\n        if (values.getDocCount() == reader.maxDoc()) {\n          final byte[] fieldPackedLower = values.getMinPackedValue();\n          final byte[] fieldPackedUpper = values.getMaxPackedValue();\n          allDocsMatch = true;\n          for (int i = 0; i < numDims; ++i) {\n            int offset = i * bytesPerDim;\n            if (StringHelper.compare(bytesPerDim, lowerPoint, offset, fieldPackedLower, offset) > 0\n                || StringHelper.compare(bytesPerDim, upperPoint, offset, fieldPackedUpper, offset) < 0) {\n              allDocsMatch = false;\n              break;\n            }\n          }\n        } else {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          // all docs have a value and all points are within bounds, so everything matches\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) {\n              return new ConstantScoreScorer(weight, score(),\n                  DocIdSetIterator.all(reader.maxDoc()));\n            }\n            \n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return new ScorerSupplier() {\n\n            final DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n            final IntersectVisitor visitor = getIntersectVisitor(result);\n            long cost = -1;\n\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              if (values.getDocCount() == reader.maxDoc()\n                  && values.getDocCount() == values.size()\n                  && cost() > reader.maxDoc() / 2) {\n                // If all docs have exactly one value and the cost is greater\n                // than half the leaf size then maybe we can make things faster\n                // by computing the set of documents that do NOT match the range\n                final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n                result.set(0, reader.maxDoc());\n                int[] cost = new int[] { reader.maxDoc() };\n                values.intersect(getInverseIntersectVisitor(result, cost));\n                final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n                return new ConstantScoreScorer(weight, score(), iterator);\n              }\n\n              values.intersect(visitor);\n              DocIdSetIterator iterator = result.build().iterator();\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            \n            @Override\n            public long cost() {\n              if (cost == -1) {\n                // Computing the cost may be expensive, so only do it if necessary\n                cost = values.estimatePointCount(visitor);\n                assert cost >= 0;\n              }\n              return cost;\n            }\n          };\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n        return context.reader().getCoreCacheHelper();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n    // We don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\".\n    // This is an inverted structure and should be used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                return;\n              }\n            }\n\n            // Doc is in-bounds\n            adder.add(docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                return Relation.CELL_OUTSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_INSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                // This dim is not in the range\n                return Relation.CELL_INSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment/field indexed any points\n          return null;\n        }\n\n        if (values.getNumDimensions() != numDims) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + values.getNumDimensions() + \" but this query has numDims=\" + numDims);\n        }\n        if (bytesPerDim != values.getBytesPerDimension()) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + values.getBytesPerDimension() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        boolean allDocsMatch;\n        if (values.getDocCount() == reader.maxDoc()) {\n          final byte[] fieldPackedLower = values.getMinPackedValue();\n          final byte[] fieldPackedUpper = values.getMaxPackedValue();\n          allDocsMatch = true;\n          for (int i = 0; i < numDims; ++i) {\n            int offset = i * bytesPerDim;\n            if (StringHelper.compare(bytesPerDim, lowerPoint, offset, fieldPackedLower, offset) > 0\n                || StringHelper.compare(bytesPerDim, upperPoint, offset, fieldPackedUpper, offset) < 0) {\n              allDocsMatch = false;\n              break;\n            }\n          }\n        } else {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          // all docs have a value and all points are within bounds, so everything matches\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) {\n              return new ConstantScoreScorer(weight, score(),\n                  DocIdSetIterator.all(reader.maxDoc()));\n            }\n            \n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return new ScorerSupplier() {\n\n            final DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n            final IntersectVisitor visitor = getIntersectVisitor(result);\n            long cost = -1;\n\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              if (values.getDocCount() == reader.maxDoc()\n                  && values.getDocCount() == values.size()\n                  && cost() > reader.maxDoc() / 2) {\n                // If all docs have exactly one value and the cost is greater\n                // than half the leaf size then maybe we can make things faster\n                // by computing the set of documents that do NOT match the range\n                final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n                result.set(0, reader.maxDoc());\n                int[] cost = new int[] { reader.maxDoc() };\n                values.intersect(getInverseIntersectVisitor(result, cost));\n                final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n                return new ConstantScoreScorer(weight, score(), iterator);\n              }\n\n              values.intersect(visitor);\n              DocIdSetIterator iterator = result.build().iterator();\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            \n            @Override\n            public long cost() {\n              if (cost == -1) {\n                // Computing the cost may be expensive, so only do it if necessary\n                cost = values.estimatePointCount(visitor);\n                assert cost >= 0;\n              }\n              return cost;\n            }\n          };\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    // We don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\".\n    // This is an inverted structure and should be used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                return;\n              }\n            }\n\n            // Doc is in-bounds\n            adder.add(docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                return Relation.CELL_OUTSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_INSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                // This dim is not in the range\n                return Relation.CELL_INSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment/field indexed any points\n          return null;\n        }\n\n        if (values.getNumDimensions() != numDims) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + values.getNumDimensions() + \" but this query has numDims=\" + numDims);\n        }\n        if (bytesPerDim != values.getBytesPerDimension()) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + values.getBytesPerDimension() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        boolean allDocsMatch;\n        if (values.getDocCount() == reader.maxDoc()) {\n          final byte[] fieldPackedLower = values.getMinPackedValue();\n          final byte[] fieldPackedUpper = values.getMaxPackedValue();\n          allDocsMatch = true;\n          for (int i = 0; i < numDims; ++i) {\n            int offset = i * bytesPerDim;\n            if (StringHelper.compare(bytesPerDim, lowerPoint, offset, fieldPackedLower, offset) > 0\n                || StringHelper.compare(bytesPerDim, upperPoint, offset, fieldPackedUpper, offset) < 0) {\n              allDocsMatch = false;\n              break;\n            }\n          }\n        } else {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          // all docs have a value and all points are within bounds, so everything matches\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) {\n              return new ConstantScoreScorer(weight, score(),\n                  DocIdSetIterator.all(reader.maxDoc()));\n            }\n            \n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return new ScorerSupplier() {\n\n            final DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n            final IntersectVisitor visitor = getIntersectVisitor(result);\n            long cost = -1;\n\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              if (values.getDocCount() == reader.maxDoc()\n                  && values.getDocCount() == values.size()\n                  && cost() > reader.maxDoc() / 2) {\n                // If all docs have exactly one value and the cost is greater\n                // than half the leaf size then maybe we can make things faster\n                // by computing the set of documents that do NOT match the range\n                final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n                result.set(0, reader.maxDoc());\n                int[] cost = new int[] { reader.maxDoc() };\n                values.intersect(getInverseIntersectVisitor(result, cost));\n                final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n                return new ConstantScoreScorer(weight, score(), iterator);\n              }\n\n              values.intersect(visitor);\n              DocIdSetIterator iterator = result.build().iterator();\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            \n            @Override\n            public long cost() {\n              if (cost == -1) {\n                // Computing the cost may be expensive, so only do it if necessary\n                cost = values.estimatePointCount(visitor);\n                assert cost >= 0;\n              }\n              return cost;\n            }\n          };\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":["3c09c5c6cd995294d83f12c1bdf8d47d8e749f49","3c09c5c6cd995294d83f12c1bdf8d47d8e749f49"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n    // We don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\".\n    // This is an inverted structure and should be used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                return;\n              }\n            }\n\n            // Doc is in-bounds\n            adder.add(docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                return Relation.CELL_OUTSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_INSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                // This dim is not in the range\n                return Relation.CELL_INSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment/field indexed any points\n          return null;\n        }\n\n        if (values.getNumDimensions() != numDims) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + values.getNumDimensions() + \" but this query has numDims=\" + numDims);\n        }\n        if (bytesPerDim != values.getBytesPerDimension()) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + values.getBytesPerDimension() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        boolean allDocsMatch;\n        if (values.getDocCount() == reader.maxDoc()) {\n          final byte[] fieldPackedLower = values.getMinPackedValue();\n          final byte[] fieldPackedUpper = values.getMaxPackedValue();\n          allDocsMatch = true;\n          for (int i = 0; i < numDims; ++i) {\n            int offset = i * bytesPerDim;\n            if (StringHelper.compare(bytesPerDim, lowerPoint, offset, fieldPackedLower, offset) > 0\n                || StringHelper.compare(bytesPerDim, upperPoint, offset, fieldPackedUpper, offset) < 0) {\n              allDocsMatch = false;\n              break;\n            }\n          }\n        } else {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          // all docs have a value and all points are within bounds, so everything matches\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) {\n              return new ConstantScoreScorer(weight, score(),\n                  DocIdSetIterator.all(reader.maxDoc()));\n            }\n            \n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return new ScorerSupplier() {\n\n            final DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n            final IntersectVisitor visitor = getIntersectVisitor(result);\n            long cost = -1;\n\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              if (values.getDocCount() == reader.maxDoc()\n                  && values.getDocCount() == values.size()\n                  && cost() > reader.maxDoc() / 2) {\n                // If all docs have exactly one value and the cost is greater\n                // than half the leaf size then maybe we can make things faster\n                // by computing the set of documents that do NOT match the range\n                final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n                result.set(0, reader.maxDoc());\n                int[] cost = new int[] { reader.maxDoc() };\n                values.intersect(getInverseIntersectVisitor(result, cost));\n                final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n                return new ConstantScoreScorer(weight, score(), iterator);\n              }\n\n              values.intersect(visitor);\n              DocIdSetIterator iterator = result.build().iterator();\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            \n            @Override\n            public long cost() {\n              if (cost == -1) {\n                // Computing the cost may be expensive, so only do it if necessary\n                cost = values.estimatePointCount(visitor);\n                assert cost >= 0;\n              }\n              return cost;\n            }\n          };\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    // We don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\".\n    // This is an inverted structure and should be used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                return;\n              }\n            }\n\n            // Doc is in-bounds\n            adder.add(docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                return Relation.CELL_OUTSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_INSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                // This dim is not in the range\n                return Relation.CELL_INSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment/field indexed any points\n          return null;\n        }\n\n        if (values.getNumDimensions() != numDims) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + values.getNumDimensions() + \" but this query has numDims=\" + numDims);\n        }\n        if (bytesPerDim != values.getBytesPerDimension()) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + values.getBytesPerDimension() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        boolean allDocsMatch;\n        if (values.getDocCount() == reader.maxDoc()) {\n          final byte[] fieldPackedLower = values.getMinPackedValue();\n          final byte[] fieldPackedUpper = values.getMaxPackedValue();\n          allDocsMatch = true;\n          for (int i = 0; i < numDims; ++i) {\n            int offset = i * bytesPerDim;\n            if (StringHelper.compare(bytesPerDim, lowerPoint, offset, fieldPackedLower, offset) > 0\n                || StringHelper.compare(bytesPerDim, upperPoint, offset, fieldPackedUpper, offset) < 0) {\n              allDocsMatch = false;\n              break;\n            }\n          }\n        } else {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          // all docs have a value and all points are within bounds, so everything matches\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) {\n              return new ConstantScoreScorer(weight, score(),\n                  DocIdSetIterator.all(reader.maxDoc()));\n            }\n            \n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return new ScorerSupplier() {\n\n            final DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n            final IntersectVisitor visitor = getIntersectVisitor(result);\n            long cost = -1;\n\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              if (values.getDocCount() == reader.maxDoc()\n                  && values.getDocCount() == values.size()\n                  && cost() > reader.maxDoc() / 2) {\n                // If all docs have exactly one value and the cost is greater\n                // than half the leaf size then maybe we can make things faster\n                // by computing the set of documents that do NOT match the range\n                final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n                result.set(0, reader.maxDoc());\n                int[] cost = new int[] { reader.maxDoc() };\n                values.intersect(getInverseIntersectVisitor(result, cost));\n                final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n                return new ConstantScoreScorer(weight, score(), iterator);\n              }\n\n              values.intersect(visitor);\n              DocIdSetIterator iterator = result.build().iterator();\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            \n            @Override\n            public long cost() {\n              if (cost == -1) {\n                // Computing the cost may be expensive, so only do it if necessary\n                cost = values.estimatePointCount(visitor);\n                assert cost >= 0;\n              }\n              return cost;\n            }\n          };\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"706a7a3396c030cc66dda92a0492eb492131c4c0":["7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"3f0e9f4a291e7b297738085a7c3dca7b99a228d5":["5a412a7808b2815566cb17117ebe6638112b9a31"],"24f3e9c0fc20b3107388ec853a6fbad9f891b461":["3f0e9f4a291e7b297738085a7c3dca7b99a228d5"],"da1460d7a5dea2658e7b8e4f6e632e53ade440ac":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["7d6ba405c7c8192661bdf7ce782181d12f3162a6","706a7a3396c030cc66dda92a0492eb492131c4c0"],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"417142ff08fda9cf0b72d5133e63097a166c6458":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac","9fc47cb7b4346802411bb432f501ed0673d7119e"],"302d34f2c66e8d489ee13078305c330cbf67b226":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","15fe6782474c00ec2ccc636052a025f8fe0bdb8b"],"7d6ba405c7c8192661bdf7ce782181d12f3162a6":["3f0e9f4a291e7b297738085a7c3dca7b99a228d5","24f3e9c0fc20b3107388ec853a6fbad9f891b461"],"58884af1f68e9d61c217c753fbd6266d86a63b14":["3f0e9f4a291e7b297738085a7c3dca7b99a228d5","7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"dca67e06c96e95a8d9ef07418b6299bfd981523b":["367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["3f0e9f4a291e7b297738085a7c3dca7b99a228d5","7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"5a412a7808b2815566cb17117ebe6638112b9a31":["15fe6782474c00ec2ccc636052a025f8fe0bdb8b"],"15fe6782474c00ec2ccc636052a025f8fe0bdb8b":["dca67e06c96e95a8d9ef07418b6299bfd981523b"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["417142ff08fda9cf0b72d5133e63097a166c6458"]},"commit2Childs":{"706a7a3396c030cc66dda92a0492eb492131c4c0":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"3f0e9f4a291e7b297738085a7c3dca7b99a228d5":["24f3e9c0fc20b3107388ec853a6fbad9f891b461","7d6ba405c7c8192661bdf7ce782181d12f3162a6","58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"24f3e9c0fc20b3107388ec853a6fbad9f891b461":["7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"da1460d7a5dea2658e7b8e4f6e632e53ade440ac":["417142ff08fda9cf0b72d5133e63097a166c6458","9fc47cb7b4346802411bb432f501ed0673d7119e"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac"],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","dca67e06c96e95a8d9ef07418b6299bfd981523b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["302d34f2c66e8d489ee13078305c330cbf67b226"],"417142ff08fda9cf0b72d5133e63097a166c6458":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"302d34f2c66e8d489ee13078305c330cbf67b226":[],"7d6ba405c7c8192661bdf7ce782181d12f3162a6":["706a7a3396c030cc66dda92a0492eb492131c4c0","d523b8189b211dd1630166aa77b8c88bb48b3fcc","58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"58884af1f68e9d61c217c753fbd6266d86a63b14":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"dca67e06c96e95a8d9ef07418b6299bfd981523b":["15fe6782474c00ec2ccc636052a025f8fe0bdb8b"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":[],"5a412a7808b2815566cb17117ebe6638112b9a31":["3f0e9f4a291e7b297738085a7c3dca7b99a228d5"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"15fe6782474c00ec2ccc636052a025f8fe0bdb8b":["302d34f2c66e8d489ee13078305c330cbf67b226","5a412a7808b2815566cb17117ebe6638112b9a31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["302d34f2c66e8d489ee13078305c330cbf67b226","58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}