{"path":"src/java/org/apache/solr/util/SolrPluginUtils.CommonParams#setValues(NamedList).mjava","commits":[{"id":"e4b5867a57b32674ce740e66e6a7da8db3d4dd33","date":1148163441,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/util/SolrPluginUtils.CommonParams#setValues(NamedList).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Sets the params using values from a NamedList, usefull in the\n     * init method for your handler.\n     *\n     * <p>\n     * If any param is not of the expected type, a severe error is\n     * logged,and the param is skipped.\n     * </p>\n     *\n     * <p>\n     * If any param is not of in the NamedList, it is skipped and the\n     * old value is left alone.\n     * </p>\n     *\n     */\n    public void setValues(NamedList args) {\n\n      Object tmp;\n\n      tmp = args.get(TIE);\n      if (null != tmp) {\n        if (tmp instanceof Float) {\n          tiebreaker = ((Float)tmp).floatValue();\n        } else {\n          SolrCore.log.severe(\"init param is not a float: \" + TIE);\n        }\n      }\n\n      tmp = args.get(QF);\n      if (null != tmp) {\n        if (tmp instanceof String) {\n          qf = tmp.toString();\n        } else {\n          SolrCore.log.severe(\"init param is not a str: \" + QF);\n        }\n      }\n\n      tmp = args.get(PF);\n      if (null != tmp) {\n        if (tmp instanceof String) {\n          pf = tmp.toString();\n        } else {\n          SolrCore.log.severe(\"init param is not a str: \" + PF);\n        }\n      }\n\n        \n      tmp = args.get(MM);\n      if (null != tmp) {\n        if (tmp instanceof String) {\n          mm = tmp.toString();\n        } else {\n          SolrCore.log.severe(\"init param is not a str: \" + MM);\n        }\n      }\n        \n      tmp = args.get(PS);\n      if (null != tmp) {\n        if (tmp instanceof Integer) {\n          pslop = ((Integer)tmp).intValue();\n        } else {\n          SolrCore.log.severe(\"init param is not an int: \" + PS);\n        }\n      }\n\n      tmp = args.get(BQ);\n      if (null != tmp) {\n        if (tmp instanceof String) {\n          bq = tmp.toString();\n        } else {\n          SolrCore.log.severe(\"init param is not a str: \" + BQ);\n        }\n      }\n \n      tmp = args.get(BF);\n      if (null != tmp) {\n        if (tmp instanceof String) {\n          bf = tmp.toString();\n        } else {\n          SolrCore.log.severe(\"init param is not a str: \" + BF);\n        }\n      }\n \n      tmp = args.get(FQ);\n      if (null != tmp) {\n        if (tmp instanceof String) {\n          fq = tmp.toString();\n        } else {\n          SolrCore.log.severe(\"init param is not a str: \" + FQ);\n        }\n      }\n        \n      tmp = args.get(FL);\n      if (null != tmp) {\n        if (tmp instanceof String) {\n          fl = tmp.toString();\n        } else {\n          SolrCore.log.severe(\"init param is not a str: \" + FL);\n        }\n      }\n        \n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0452863ee588101738d341e6e97eb87eb010052a","date":1152814944,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/solr/util/SolrPluginUtils.CommonParams#setValues(NamedList).mjava","sourceNew":null,"sourceOld":"    /**\n     * Sets the params using values from a NamedList, usefull in the\n     * init method for your handler.\n     *\n     * <p>\n     * If any param is not of the expected type, a severe error is\n     * logged,and the param is skipped.\n     * </p>\n     *\n     * <p>\n     * If any param is not of in the NamedList, it is skipped and the\n     * old value is left alone.\n     * </p>\n     *\n     */\n    public void setValues(NamedList args) {\n\n      Object tmp;\n\n      tmp = args.get(TIE);\n      if (null != tmp) {\n        if (tmp instanceof Float) {\n          tiebreaker = ((Float)tmp).floatValue();\n        } else {\n          SolrCore.log.severe(\"init param is not a float: \" + TIE);\n        }\n      }\n\n      tmp = args.get(QF);\n      if (null != tmp) {\n        if (tmp instanceof String) {\n          qf = tmp.toString();\n        } else {\n          SolrCore.log.severe(\"init param is not a str: \" + QF);\n        }\n      }\n\n      tmp = args.get(PF);\n      if (null != tmp) {\n        if (tmp instanceof String) {\n          pf = tmp.toString();\n        } else {\n          SolrCore.log.severe(\"init param is not a str: \" + PF);\n        }\n      }\n\n        \n      tmp = args.get(MM);\n      if (null != tmp) {\n        if (tmp instanceof String) {\n          mm = tmp.toString();\n        } else {\n          SolrCore.log.severe(\"init param is not a str: \" + MM);\n        }\n      }\n        \n      tmp = args.get(PS);\n      if (null != tmp) {\n        if (tmp instanceof Integer) {\n          pslop = ((Integer)tmp).intValue();\n        } else {\n          SolrCore.log.severe(\"init param is not an int: \" + PS);\n        }\n      }\n\n      tmp = args.get(BQ);\n      if (null != tmp) {\n        if (tmp instanceof String) {\n          bq = tmp.toString();\n        } else {\n          SolrCore.log.severe(\"init param is not a str: \" + BQ);\n        }\n      }\n \n      tmp = args.get(BF);\n      if (null != tmp) {\n        if (tmp instanceof String) {\n          bf = tmp.toString();\n        } else {\n          SolrCore.log.severe(\"init param is not a str: \" + BF);\n        }\n      }\n \n      tmp = args.get(FQ);\n      if (null != tmp) {\n        if (tmp instanceof String) {\n          fq = tmp.toString();\n        } else {\n          SolrCore.log.severe(\"init param is not a str: \" + FQ);\n        }\n      }\n        \n      tmp = args.get(FL);\n      if (null != tmp) {\n        if (tmp instanceof String) {\n          fl = tmp.toString();\n        } else {\n          SolrCore.log.severe(\"init param is not a str: \" + FL);\n        }\n      }\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e4b5867a57b32674ce740e66e6a7da8db3d4dd33":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"0452863ee588101738d341e6e97eb87eb010052a":["e4b5867a57b32674ce740e66e6a7da8db3d4dd33"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e4b5867a57b32674ce740e66e6a7da8db3d4dd33":["0452863ee588101738d341e6e97eb87eb010052a"],"0452863ee588101738d341e6e97eb87eb010052a":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["e4b5867a57b32674ce740e66e6a7da8db3d4dd33"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0452863ee588101738d341e6e97eb87eb010052a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}