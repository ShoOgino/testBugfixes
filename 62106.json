{"path":"lucene/highlighter/src/java/org/apache/lucene/search/matchhighlight/PassageFormatter#multipleMarkers(CharSequence,Passage,StringBuilder,ArrayList[OffsetRange]).mjava","commits":[{"id":"2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c","date":1597407672,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/matchhighlight/PassageFormatter#multipleMarkers(CharSequence,Passage,StringBuilder,ArrayList[OffsetRange]).mjava","pathOld":"/dev/null","sourceNew":"  /** Handle multiple markers, possibly overlapping or nested. */\n  private void multipleMarkers(\n      CharSequence value, final Passage p, StringBuilder b, ArrayList<OffsetRange> markerStack) {\n    int at = p.from;\n    int max = p.to;\n    SlicePoint[] slicePoints = slicePoints(p);\n    for (SlicePoint slicePoint : slicePoints) {\n      b.append(value, at, slicePoint.offset);\n      OffsetRange currentMarker = slicePoint.marker;\n      switch (slicePoint.type) {\n        case START:\n          markerStack.add(currentMarker);\n          b.append(markerStart.apply(currentMarker));\n          break;\n\n        case END:\n          int markerIndex = markerStack.lastIndexOf(currentMarker);\n          for (int k = markerIndex; k < markerStack.size(); k++) {\n            b.append(markerEnd.apply(markerStack.get(k)));\n          }\n          markerStack.remove(markerIndex);\n          for (int k = markerIndex; k < markerStack.size(); k++) {\n            b.append(markerStart.apply(markerStack.get(k)));\n          }\n          break;\n\n        default:\n          throw new RuntimeException();\n      }\n\n      at = slicePoint.offset;\n    }\n\n    if (at < max) {\n      b.append(value, at, max);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"18fbb6cfc751884a8cdadea8eebaa704e9c2263f","date":1600077733,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/matchhighlight/PassageFormatter#multipleMarkers(CharSequence,Passage,StringBuilder,ArrayList[OffsetRange]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/matchhighlight/PassageFormatter#multipleMarkers(CharSequence,Passage,StringBuilder,ArrayList[OffsetRange]).mjava","sourceNew":"  /**\n   * Handle multiple markers, possibly overlapping or nested.\n   */\n  private void multipleMarkers(\n      CharSequence value, final Passage p, StringBuilder b, ArrayList<OffsetRange> markerStack) {\n    int at = p.from;\n    int max = p.to;\n    SlicePoint[] slicePoints = slicePoints(p);\n    for (SlicePoint slicePoint : slicePoints) {\n      b.append(value, at, slicePoint.offset);\n      OffsetRange currentMarker = slicePoint.marker;\n      switch (slicePoint.type) {\n        case START:\n          markerStack.add(currentMarker);\n          b.append(markerStart.apply(currentMarker));\n          break;\n\n        case END:\n          int markerIndex = markerStack.lastIndexOf(currentMarker);\n          for (int k = markerIndex; k < markerStack.size(); k++) {\n            b.append(markerEnd.apply(markerStack.get(k)));\n          }\n          markerStack.remove(markerIndex);\n          for (int k = markerIndex; k < markerStack.size(); k++) {\n            b.append(markerStart.apply(markerStack.get(k)));\n          }\n          break;\n\n        default:\n          throw new RuntimeException();\n      }\n\n      at = slicePoint.offset;\n    }\n\n    if (at < max) {\n      b.append(value, at, max);\n    }\n  }\n\n","sourceOld":"  /** Handle multiple markers, possibly overlapping or nested. */\n  private void multipleMarkers(\n      CharSequence value, final Passage p, StringBuilder b, ArrayList<OffsetRange> markerStack) {\n    int at = p.from;\n    int max = p.to;\n    SlicePoint[] slicePoints = slicePoints(p);\n    for (SlicePoint slicePoint : slicePoints) {\n      b.append(value, at, slicePoint.offset);\n      OffsetRange currentMarker = slicePoint.marker;\n      switch (slicePoint.type) {\n        case START:\n          markerStack.add(currentMarker);\n          b.append(markerStart.apply(currentMarker));\n          break;\n\n        case END:\n          int markerIndex = markerStack.lastIndexOf(currentMarker);\n          for (int k = markerIndex; k < markerStack.size(); k++) {\n            b.append(markerEnd.apply(markerStack.get(k)));\n          }\n          markerStack.remove(markerIndex);\n          for (int k = markerIndex; k < markerStack.size(); k++) {\n            b.append(markerStart.apply(markerStack.get(k)));\n          }\n          break;\n\n        default:\n          throw new RuntimeException();\n      }\n\n      at = slicePoint.offset;\n    }\n\n    if (at < max) {\n      b.append(value, at, max);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"680b6449f09827f58fe987aff279e014c311d966","date":1600247985,"type":3,"author":"noblepaul","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/matchhighlight/PassageFormatter#multipleMarkers(CharSequence,Passage,StringBuilder,ArrayList[OffsetRange]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/matchhighlight/PassageFormatter#multipleMarkers(CharSequence,Passage,StringBuilder,ArrayList[OffsetRange]).mjava","sourceNew":"  /**\n   * Handle multiple markers, possibly overlapping or nested.\n   */\n  private void multipleMarkers(\n      CharSequence value, final Passage p, StringBuilder b, ArrayList<OffsetRange> markerStack) {\n    int at = p.from;\n    int max = p.to;\n    SlicePoint[] slicePoints = slicePoints(p);\n    for (SlicePoint slicePoint : slicePoints) {\n      b.append(value, at, slicePoint.offset);\n      OffsetRange currentMarker = slicePoint.marker;\n      switch (slicePoint.type) {\n        case START:\n          markerStack.add(currentMarker);\n          b.append(markerStart.apply(currentMarker));\n          break;\n\n        case END:\n          int markerIndex = markerStack.lastIndexOf(currentMarker);\n          for (int k = markerIndex; k < markerStack.size(); k++) {\n            b.append(markerEnd.apply(markerStack.get(k)));\n          }\n          markerStack.remove(markerIndex);\n          for (int k = markerIndex; k < markerStack.size(); k++) {\n            b.append(markerStart.apply(markerStack.get(k)));\n          }\n          break;\n\n        default:\n          throw new RuntimeException();\n      }\n\n      at = slicePoint.offset;\n    }\n\n    if (at < max) {\n      b.append(value, at, max);\n    }\n  }\n\n","sourceOld":"  /** Handle multiple markers, possibly overlapping or nested. */\n  private void multipleMarkers(\n      CharSequence value, final Passage p, StringBuilder b, ArrayList<OffsetRange> markerStack) {\n    int at = p.from;\n    int max = p.to;\n    SlicePoint[] slicePoints = slicePoints(p);\n    for (SlicePoint slicePoint : slicePoints) {\n      b.append(value, at, slicePoint.offset);\n      OffsetRange currentMarker = slicePoint.marker;\n      switch (slicePoint.type) {\n        case START:\n          markerStack.add(currentMarker);\n          b.append(markerStart.apply(currentMarker));\n          break;\n\n        case END:\n          int markerIndex = markerStack.lastIndexOf(currentMarker);\n          for (int k = markerIndex; k < markerStack.size(); k++) {\n            b.append(markerEnd.apply(markerStack.get(k)));\n          }\n          markerStack.remove(markerIndex);\n          for (int k = markerIndex; k < markerStack.size(); k++) {\n            b.append(markerStart.apply(markerStack.get(k)));\n          }\n          break;\n\n        default:\n          throw new RuntimeException();\n      }\n\n      at = slicePoint.offset;\n    }\n\n    if (at < max) {\n      b.append(value, at, max);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"680b6449f09827f58fe987aff279e014c311d966":["2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c","18fbb6cfc751884a8cdadea8eebaa704e9c2263f"],"2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"18fbb6cfc751884a8cdadea8eebaa704e9c2263f":["2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["680b6449f09827f58fe987aff279e014c311d966"]},"commit2Childs":{"680b6449f09827f58fe987aff279e014c311d966":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c":["680b6449f09827f58fe987aff279e014c311d966","18fbb6cfc751884a8cdadea8eebaa704e9c2263f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c"],"18fbb6cfc751884a8cdadea8eebaa704e9c2263f":["680b6449f09827f58fe987aff279e014c311d966"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}