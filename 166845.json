{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillSidewaysQuery#createWeight(IndexSearcher).mjava","commits":[{"id":"5b1ac4be5e40d7bda6ec0f850c933a95ca0642fd","date":1361836936,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillSidewaysQuery#createWeight(IndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher);\n\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return baseQuery;\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return baseWeight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        baseWeight.normalize(norm, topLevelBoost);\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        // TODO: would be nice if AssertingIndexSearcher\n        // confirmed this for us\n        return false;\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n                           boolean topScorer, Bits acceptDocs) throws IOException {\n\n        DrillSidewaysScorer.DocsEnumsAndFreq[] dims = new DrillSidewaysScorer.DocsEnumsAndFreq[drillDownTerms.length];\n        TermsEnum termsEnum = null;\n        String lastField = null;\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          dims[dim] = new DrillSidewaysScorer.DocsEnumsAndFreq();\n          dims[dim].sidewaysCollector = drillSidewaysCollectors[dim];\n          String field = drillDownTerms[dim][0].field();\n          dims[dim].dim = drillDownTerms[dim][0].text();\n          if (lastField == null || !lastField.equals(field)) {\n            AtomicReader reader = context.reader();\n            Terms terms = reader.terms(field);\n            if (terms != null) {\n              termsEnum = terms.iterator(null);\n            }\n            lastField = field;\n          }\n          if (termsEnum == null) {\n            nullCount++;\n            continue;\n          }\n          dims[dim].docsEnums = new DocsEnum[drillDownTerms[dim].length];\n          for(int i=0;i<drillDownTerms[dim].length;i++) {\n            if (termsEnum.seekExact(drillDownTerms[dim][i].bytes(), false)) {\n              dims[dim].freq = Math.max(dims[dim].freq, termsEnum.docFreq());\n              dims[dim].docsEnums[i] = termsEnum.docs(null, null);\n            }\n          }\n        }\n\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims);\n\n        // TODO: it could be better if we take acceptDocs\n        // into account instead of baseScorer?\n        Scorer baseScorer = baseWeight.scorer(context, scoreDocsInOrder, false, acceptDocs);\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(this, context,\n                                       baseScorer,\n                                       drillDownCollector, dims);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76d37531298cae83f8dd7adcb73f3d0ceff83aa0","date":1366839837,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillSidewaysQuery#createWeight(IndexSearcher).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillSidewaysQuery#createWeight(IndexSearcher).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher);\n\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return baseQuery;\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return baseWeight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        baseWeight.normalize(norm, topLevelBoost);\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        // TODO: would be nice if AssertingIndexSearcher\n        // confirmed this for us\n        return false;\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n                           boolean topScorer, Bits acceptDocs) throws IOException {\n\n        DrillSidewaysScorer.DocsEnumsAndFreq[] dims = new DrillSidewaysScorer.DocsEnumsAndFreq[drillDownTerms.length];\n        TermsEnum termsEnum = null;\n        String lastField = null;\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          dims[dim] = new DrillSidewaysScorer.DocsEnumsAndFreq();\n          dims[dim].sidewaysCollector = drillSidewaysCollectors[dim];\n          String field = drillDownTerms[dim][0].field();\n          dims[dim].dim = drillDownTerms[dim][0].text();\n          if (lastField == null || !lastField.equals(field)) {\n            AtomicReader reader = context.reader();\n            Terms terms = reader.terms(field);\n            if (terms != null) {\n              termsEnum = terms.iterator(null);\n            }\n            lastField = field;\n          }\n          if (termsEnum == null) {\n            nullCount++;\n            continue;\n          }\n          dims[dim].docsEnums = new DocsEnum[drillDownTerms[dim].length];\n          for(int i=0;i<drillDownTerms[dim].length;i++) {\n            if (termsEnum.seekExact(drillDownTerms[dim][i].bytes(), false)) {\n              dims[dim].maxFreq = Math.max(dims[dim].maxFreq, termsEnum.docFreq());\n              dims[dim].docsEnums[i] = termsEnum.docs(null, null);\n            }\n          }\n        }\n\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims);\n\n        // TODO: it could be better if we take acceptDocs\n        // into account instead of baseScorer?\n        Scorer baseScorer = baseWeight.scorer(context, scoreDocsInOrder, false, acceptDocs);\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(this, context,\n                                       baseScorer,\n                                       drillDownCollector, dims);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher);\n\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return baseQuery;\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return baseWeight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        baseWeight.normalize(norm, topLevelBoost);\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        // TODO: would be nice if AssertingIndexSearcher\n        // confirmed this for us\n        return false;\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n                           boolean topScorer, Bits acceptDocs) throws IOException {\n\n        DrillSidewaysScorer.DocsEnumsAndFreq[] dims = new DrillSidewaysScorer.DocsEnumsAndFreq[drillDownTerms.length];\n        TermsEnum termsEnum = null;\n        String lastField = null;\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          dims[dim] = new DrillSidewaysScorer.DocsEnumsAndFreq();\n          dims[dim].sidewaysCollector = drillSidewaysCollectors[dim];\n          String field = drillDownTerms[dim][0].field();\n          dims[dim].dim = drillDownTerms[dim][0].text();\n          if (lastField == null || !lastField.equals(field)) {\n            AtomicReader reader = context.reader();\n            Terms terms = reader.terms(field);\n            if (terms != null) {\n              termsEnum = terms.iterator(null);\n            }\n            lastField = field;\n          }\n          if (termsEnum == null) {\n            nullCount++;\n            continue;\n          }\n          dims[dim].docsEnums = new DocsEnum[drillDownTerms[dim].length];\n          for(int i=0;i<drillDownTerms[dim].length;i++) {\n            if (termsEnum.seekExact(drillDownTerms[dim][i].bytes(), false)) {\n              dims[dim].freq = Math.max(dims[dim].freq, termsEnum.docFreq());\n              dims[dim].docsEnums[i] = termsEnum.docs(null, null);\n            }\n          }\n        }\n\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims);\n\n        // TODO: it could be better if we take acceptDocs\n        // into account instead of baseScorer?\n        Scorer baseScorer = baseWeight.scorer(context, scoreDocsInOrder, false, acceptDocs);\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(this, context,\n                                       baseScorer,\n                                       drillDownCollector, dims);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2f479a58780f0a2a9c1c6f7202207a75d094cd9","date":1366841689,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillSidewaysQuery#createWeight(IndexSearcher).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillSidewaysQuery#createWeight(IndexSearcher).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher);\n\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return baseQuery;\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return baseWeight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        baseWeight.normalize(norm, topLevelBoost);\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        // TODO: would be nice if AssertingIndexSearcher\n        // confirmed this for us\n        return false;\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n                           boolean topScorer, Bits acceptDocs) throws IOException {\n\n        DrillSidewaysScorer.DocsEnumsAndFreq[] dims = new DrillSidewaysScorer.DocsEnumsAndFreq[drillDownTerms.length];\n        TermsEnum termsEnum = null;\n        String lastField = null;\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          dims[dim] = new DrillSidewaysScorer.DocsEnumsAndFreq();\n          dims[dim].sidewaysCollector = drillSidewaysCollectors[dim];\n          String field = drillDownTerms[dim][0].field();\n          dims[dim].dim = drillDownTerms[dim][0].text();\n          if (lastField == null || !lastField.equals(field)) {\n            AtomicReader reader = context.reader();\n            Terms terms = reader.terms(field);\n            if (terms != null) {\n              termsEnum = terms.iterator(null);\n            }\n            lastField = field;\n          }\n          if (termsEnum == null) {\n            nullCount++;\n            continue;\n          }\n          dims[dim].docsEnums = new DocsEnum[drillDownTerms[dim].length];\n          for(int i=0;i<drillDownTerms[dim].length;i++) {\n            if (termsEnum.seekExact(drillDownTerms[dim][i].bytes(), false)) {\n              dims[dim].maxFreq = Math.max(dims[dim].maxFreq, termsEnum.docFreq());\n              dims[dim].docsEnums[i] = termsEnum.docs(null, null);\n            }\n          }\n        }\n\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims);\n\n        // TODO: it could be better if we take acceptDocs\n        // into account instead of baseScorer?\n        Scorer baseScorer = baseWeight.scorer(context, scoreDocsInOrder, false, acceptDocs);\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(this, context,\n                                       baseScorer,\n                                       drillDownCollector, dims, scoreSubDocsAtOnce);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher);\n\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return baseQuery;\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return baseWeight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        baseWeight.normalize(norm, topLevelBoost);\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        // TODO: would be nice if AssertingIndexSearcher\n        // confirmed this for us\n        return false;\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n                           boolean topScorer, Bits acceptDocs) throws IOException {\n\n        DrillSidewaysScorer.DocsEnumsAndFreq[] dims = new DrillSidewaysScorer.DocsEnumsAndFreq[drillDownTerms.length];\n        TermsEnum termsEnum = null;\n        String lastField = null;\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          dims[dim] = new DrillSidewaysScorer.DocsEnumsAndFreq();\n          dims[dim].sidewaysCollector = drillSidewaysCollectors[dim];\n          String field = drillDownTerms[dim][0].field();\n          dims[dim].dim = drillDownTerms[dim][0].text();\n          if (lastField == null || !lastField.equals(field)) {\n            AtomicReader reader = context.reader();\n            Terms terms = reader.terms(field);\n            if (terms != null) {\n              termsEnum = terms.iterator(null);\n            }\n            lastField = field;\n          }\n          if (termsEnum == null) {\n            nullCount++;\n            continue;\n          }\n          dims[dim].docsEnums = new DocsEnum[drillDownTerms[dim].length];\n          for(int i=0;i<drillDownTerms[dim].length;i++) {\n            if (termsEnum.seekExact(drillDownTerms[dim][i].bytes(), false)) {\n              dims[dim].maxFreq = Math.max(dims[dim].maxFreq, termsEnum.docFreq());\n              dims[dim].docsEnums[i] = termsEnum.docs(null, null);\n            }\n          }\n        }\n\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims);\n\n        // TODO: it could be better if we take acceptDocs\n        // into account instead of baseScorer?\n        Scorer baseScorer = baseWeight.scorer(context, scoreDocsInOrder, false, acceptDocs);\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(this, context,\n                                       baseScorer,\n                                       drillDownCollector, dims);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c56659f13067bffb93329ae60b4c25dccf9f87cc","date":1366842020,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillSidewaysQuery#createWeight(IndexSearcher).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillSidewaysQuery#createWeight(IndexSearcher).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher);\n\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return baseQuery;\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return baseWeight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        baseWeight.normalize(norm, topLevelBoost);\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        // TODO: would be nice if AssertingIndexSearcher\n        // confirmed this for us\n        return false;\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n                           boolean topScorer, Bits acceptDocs) throws IOException {\n\n        DrillSidewaysScorer.DocsEnumsAndFreq[] dims = new DrillSidewaysScorer.DocsEnumsAndFreq[drillDownTerms.length];\n        TermsEnum termsEnum = null;\n        String lastField = null;\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          dims[dim] = new DrillSidewaysScorer.DocsEnumsAndFreq();\n          dims[dim].sidewaysCollector = drillSidewaysCollectors[dim];\n          String field = drillDownTerms[dim][0].field();\n          dims[dim].dim = drillDownTerms[dim][0].text();\n          if (lastField == null || !lastField.equals(field)) {\n            AtomicReader reader = context.reader();\n            Terms terms = reader.terms(field);\n            if (terms != null) {\n              termsEnum = terms.iterator(null);\n            }\n            lastField = field;\n          }\n          if (termsEnum == null) {\n            nullCount++;\n            continue;\n          }\n          dims[dim].docsEnums = new DocsEnum[drillDownTerms[dim].length];\n          for(int i=0;i<drillDownTerms[dim].length;i++) {\n            if (termsEnum.seekExact(drillDownTerms[dim][i].bytes(), false)) {\n              DocsEnum docsEnum = termsEnum.docs(null, null);\n              if (docsEnum != null) {\n                dims[dim].docsEnums[i] = docsEnum;\n                dims[dim].maxCost = Math.max(dims[dim].maxCost, docsEnum.cost());\n              }\n            }\n          }\n        }\n\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims);\n\n        // TODO: it could be better if we take acceptDocs\n        // into account instead of baseScorer?\n        Scorer baseScorer = baseWeight.scorer(context, scoreDocsInOrder, false, acceptDocs);\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(this, context,\n                                       baseScorer,\n                                       drillDownCollector, dims, scoreSubDocsAtOnce);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher);\n\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return baseQuery;\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return baseWeight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        baseWeight.normalize(norm, topLevelBoost);\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        // TODO: would be nice if AssertingIndexSearcher\n        // confirmed this for us\n        return false;\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n                           boolean topScorer, Bits acceptDocs) throws IOException {\n\n        DrillSidewaysScorer.DocsEnumsAndFreq[] dims = new DrillSidewaysScorer.DocsEnumsAndFreq[drillDownTerms.length];\n        TermsEnum termsEnum = null;\n        String lastField = null;\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          dims[dim] = new DrillSidewaysScorer.DocsEnumsAndFreq();\n          dims[dim].sidewaysCollector = drillSidewaysCollectors[dim];\n          String field = drillDownTerms[dim][0].field();\n          dims[dim].dim = drillDownTerms[dim][0].text();\n          if (lastField == null || !lastField.equals(field)) {\n            AtomicReader reader = context.reader();\n            Terms terms = reader.terms(field);\n            if (terms != null) {\n              termsEnum = terms.iterator(null);\n            }\n            lastField = field;\n          }\n          if (termsEnum == null) {\n            nullCount++;\n            continue;\n          }\n          dims[dim].docsEnums = new DocsEnum[drillDownTerms[dim].length];\n          for(int i=0;i<drillDownTerms[dim].length;i++) {\n            if (termsEnum.seekExact(drillDownTerms[dim][i].bytes(), false)) {\n              dims[dim].maxFreq = Math.max(dims[dim].maxFreq, termsEnum.docFreq());\n              dims[dim].docsEnums[i] = termsEnum.docs(null, null);\n            }\n          }\n        }\n\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims);\n\n        // TODO: it could be better if we take acceptDocs\n        // into account instead of baseScorer?\n        Scorer baseScorer = baseWeight.scorer(context, scoreDocsInOrder, false, acceptDocs);\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(this, context,\n                                       baseScorer,\n                                       drillDownCollector, dims, scoreSubDocsAtOnce);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"378fbd2626d3f584f8146e25acf62ee817361580","date":1367266329,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillSidewaysQuery#createWeight(IndexSearcher).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillSidewaysQuery#createWeight(IndexSearcher).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher);\n\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return baseQuery;\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return baseWeight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        baseWeight.normalize(norm, topLevelBoost);\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        // TODO: would be nice if AssertingIndexSearcher\n        // confirmed this for us\n        return false;\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n                           boolean topScorer, Bits acceptDocs) throws IOException {\n\n        DrillSidewaysScorer.DocsEnumsAndFreq[] dims = new DrillSidewaysScorer.DocsEnumsAndFreq[drillDownTerms.length];\n        TermsEnum termsEnum = null;\n        String lastField = null;\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          dims[dim] = new DrillSidewaysScorer.DocsEnumsAndFreq();\n          dims[dim].sidewaysCollector = drillSidewaysCollectors[dim];\n          String field = drillDownTerms[dim][0].field();\n          dims[dim].dim = drillDownTerms[dim][0].text();\n          if (lastField == null || !lastField.equals(field)) {\n            AtomicReader reader = context.reader();\n            Terms terms = reader.terms(field);\n            if (terms != null) {\n              termsEnum = terms.iterator(null);\n            }\n            lastField = field;\n          }\n          if (termsEnum == null) {\n            nullCount++;\n            continue;\n          }\n          dims[dim].docsEnums = new DocsEnum[drillDownTerms[dim].length];\n          for(int i=0;i<drillDownTerms[dim].length;i++) {\n            if (termsEnum.seekExact(drillDownTerms[dim][i].bytes(), false)) {\n              DocsEnum docsEnum = termsEnum.docs(null, null);\n              if (docsEnum != null) {\n                dims[dim].docsEnums[i] = docsEnum;\n                dims[dim].maxCost = Math.max(dims[dim].maxCost, docsEnum.cost());\n              }\n            }\n          }\n        }\n\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims);\n\n        // TODO: it could be better if we take acceptDocs\n        // into account instead of baseScorer?\n        Scorer baseScorer = baseWeight.scorer(context, scoreDocsInOrder, false, acceptDocs);\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(this, context,\n                                       baseScorer,\n                                       drillDownCollector, dims);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher);\n\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return baseQuery;\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return baseWeight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        baseWeight.normalize(norm, topLevelBoost);\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        // TODO: would be nice if AssertingIndexSearcher\n        // confirmed this for us\n        return false;\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n                           boolean topScorer, Bits acceptDocs) throws IOException {\n\n        DrillSidewaysScorer.DocsEnumsAndFreq[] dims = new DrillSidewaysScorer.DocsEnumsAndFreq[drillDownTerms.length];\n        TermsEnum termsEnum = null;\n        String lastField = null;\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          dims[dim] = new DrillSidewaysScorer.DocsEnumsAndFreq();\n          dims[dim].sidewaysCollector = drillSidewaysCollectors[dim];\n          String field = drillDownTerms[dim][0].field();\n          dims[dim].dim = drillDownTerms[dim][0].text();\n          if (lastField == null || !lastField.equals(field)) {\n            AtomicReader reader = context.reader();\n            Terms terms = reader.terms(field);\n            if (terms != null) {\n              termsEnum = terms.iterator(null);\n            }\n            lastField = field;\n          }\n          if (termsEnum == null) {\n            nullCount++;\n            continue;\n          }\n          dims[dim].docsEnums = new DocsEnum[drillDownTerms[dim].length];\n          for(int i=0;i<drillDownTerms[dim].length;i++) {\n            if (termsEnum.seekExact(drillDownTerms[dim][i].bytes(), false)) {\n              DocsEnum docsEnum = termsEnum.docs(null, null);\n              if (docsEnum != null) {\n                dims[dim].docsEnums[i] = docsEnum;\n                dims[dim].maxCost = Math.max(dims[dim].maxCost, docsEnum.cost());\n              }\n            }\n          }\n        }\n\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims);\n\n        // TODO: it could be better if we take acceptDocs\n        // into account instead of baseScorer?\n        Scorer baseScorer = baseWeight.scorer(context, scoreDocsInOrder, false, acceptDocs);\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(this, context,\n                                       baseScorer,\n                                       drillDownCollector, dims, scoreSubDocsAtOnce);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"288adb8faeade0b0023dd7d85b86bf5f631a694a","date":1371310695,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillSidewaysQuery#createWeight(IndexSearcher).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillSidewaysQuery#createWeight(IndexSearcher).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher);\n\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return baseQuery;\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return baseWeight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        baseWeight.normalize(norm, topLevelBoost);\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        // TODO: would be nice if AssertingIndexSearcher\n        // confirmed this for us\n        return false;\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n                           boolean topScorer, Bits acceptDocs) throws IOException {\n\n        DrillSidewaysScorer.DocsEnumsAndFreq[] dims = new DrillSidewaysScorer.DocsEnumsAndFreq[drillDownTerms.length];\n        TermsEnum termsEnum = null;\n        String lastField = null;\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          dims[dim] = new DrillSidewaysScorer.DocsEnumsAndFreq();\n          dims[dim].sidewaysCollector = drillSidewaysCollectors[dim];\n          String field = drillDownTerms[dim][0].field();\n          dims[dim].dim = drillDownTerms[dim][0].text();\n          if (lastField == null || !lastField.equals(field)) {\n            AtomicReader reader = context.reader();\n            Terms terms = reader.terms(field);\n            if (terms != null) {\n              termsEnum = terms.iterator(null);\n            }\n            lastField = field;\n          }\n          dims[dim].docsEnums = new DocsEnum[drillDownTerms[dim].length];\n          if (termsEnum == null) {\n            nullCount++;\n            continue;\n          }\n          for(int i=0;i<drillDownTerms[dim].length;i++) {\n            if (termsEnum.seekExact(drillDownTerms[dim][i].bytes(), false)) {\n              DocsEnum docsEnum = termsEnum.docs(null, null);\n              if (docsEnum != null) {\n                dims[dim].docsEnums[i] = docsEnum;\n                dims[dim].maxCost = Math.max(dims[dim].maxCost, docsEnum.cost());\n              }\n            }\n          }\n        }\n\n        if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims);\n\n        // TODO: it could be better if we take acceptDocs\n        // into account instead of baseScorer?\n        Scorer baseScorer = baseWeight.scorer(context, scoreDocsInOrder, false, acceptDocs);\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(this, context,\n                                       baseScorer,\n                                       drillDownCollector, dims);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher);\n\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return baseQuery;\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return baseWeight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        baseWeight.normalize(norm, topLevelBoost);\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        // TODO: would be nice if AssertingIndexSearcher\n        // confirmed this for us\n        return false;\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n                           boolean topScorer, Bits acceptDocs) throws IOException {\n\n        DrillSidewaysScorer.DocsEnumsAndFreq[] dims = new DrillSidewaysScorer.DocsEnumsAndFreq[drillDownTerms.length];\n        TermsEnum termsEnum = null;\n        String lastField = null;\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          dims[dim] = new DrillSidewaysScorer.DocsEnumsAndFreq();\n          dims[dim].sidewaysCollector = drillSidewaysCollectors[dim];\n          String field = drillDownTerms[dim][0].field();\n          dims[dim].dim = drillDownTerms[dim][0].text();\n          if (lastField == null || !lastField.equals(field)) {\n            AtomicReader reader = context.reader();\n            Terms terms = reader.terms(field);\n            if (terms != null) {\n              termsEnum = terms.iterator(null);\n            }\n            lastField = field;\n          }\n          if (termsEnum == null) {\n            nullCount++;\n            continue;\n          }\n          dims[dim].docsEnums = new DocsEnum[drillDownTerms[dim].length];\n          for(int i=0;i<drillDownTerms[dim].length;i++) {\n            if (termsEnum.seekExact(drillDownTerms[dim][i].bytes(), false)) {\n              DocsEnum docsEnum = termsEnum.docs(null, null);\n              if (docsEnum != null) {\n                dims[dim].docsEnums[i] = docsEnum;\n                dims[dim].maxCost = Math.max(dims[dim].maxCost, docsEnum.cost());\n              }\n            }\n          }\n        }\n\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims);\n\n        // TODO: it could be better if we take acceptDocs\n        // into account instead of baseScorer?\n        Scorer baseScorer = baseWeight.scorer(context, scoreDocsInOrder, false, acceptDocs);\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(this, context,\n                                       baseScorer,\n                                       drillDownCollector, dims);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee834e58357f79a6fc8770119cbf9d614da67c90","date":1371379780,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillSidewaysQuery#createWeight(IndexSearcher).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillSidewaysQuery#createWeight(IndexSearcher).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher);\n\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return baseQuery;\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return baseWeight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        baseWeight.normalize(norm, topLevelBoost);\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        // TODO: would be nice if AssertingIndexSearcher\n        // confirmed this for us\n        return false;\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n                           boolean topScorer, Bits acceptDocs) throws IOException {\n\n        DrillSidewaysScorer.DocsEnumsAndFreq[] dims = new DrillSidewaysScorer.DocsEnumsAndFreq[drillDownTerms.length];\n        TermsEnum termsEnum = null;\n        String lastField = null;\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          dims[dim] = new DrillSidewaysScorer.DocsEnumsAndFreq();\n          dims[dim].sidewaysCollector = drillSidewaysCollectors[dim];\n          String field = drillDownTerms[dim][0].field();\n          dims[dim].dim = drillDownTerms[dim][0].text();\n          if (lastField == null || !lastField.equals(field)) {\n            AtomicReader reader = context.reader();\n            Terms terms = reader.terms(field);\n            if (terms != null) {\n              termsEnum = terms.iterator(null);\n            }\n            lastField = field;\n          }\n          dims[dim].docsEnums = new DocsEnum[drillDownTerms[dim].length];\n          if (termsEnum == null) {\n            nullCount++;\n            continue;\n          }\n          for(int i=0;i<drillDownTerms[dim].length;i++) {\n            if (termsEnum.seekExact(drillDownTerms[dim][i].bytes(), false)) {\n              DocsEnum docsEnum = termsEnum.docs(null, null);\n              if (docsEnum != null) {\n                dims[dim].docsEnums[i] = docsEnum;\n                dims[dim].maxCost = Math.max(dims[dim].maxCost, docsEnum.cost());\n              }\n            }\n          }\n        }\n\n        if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims);\n\n        // TODO: it could be better if we take acceptDocs\n        // into account instead of baseScorer?\n        Scorer baseScorer = baseWeight.scorer(context, scoreDocsInOrder, false, acceptDocs);\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(this, context,\n                                       baseScorer,\n                                       drillDownCollector, dims);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher);\n\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return baseQuery;\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return baseWeight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        baseWeight.normalize(norm, topLevelBoost);\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        // TODO: would be nice if AssertingIndexSearcher\n        // confirmed this for us\n        return false;\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n                           boolean topScorer, Bits acceptDocs) throws IOException {\n\n        DrillSidewaysScorer.DocsEnumsAndFreq[] dims = new DrillSidewaysScorer.DocsEnumsAndFreq[drillDownTerms.length];\n        TermsEnum termsEnum = null;\n        String lastField = null;\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          dims[dim] = new DrillSidewaysScorer.DocsEnumsAndFreq();\n          dims[dim].sidewaysCollector = drillSidewaysCollectors[dim];\n          String field = drillDownTerms[dim][0].field();\n          dims[dim].dim = drillDownTerms[dim][0].text();\n          if (lastField == null || !lastField.equals(field)) {\n            AtomicReader reader = context.reader();\n            Terms terms = reader.terms(field);\n            if (terms != null) {\n              termsEnum = terms.iterator(null);\n            }\n            lastField = field;\n          }\n          if (termsEnum == null) {\n            nullCount++;\n            continue;\n          }\n          dims[dim].docsEnums = new DocsEnum[drillDownTerms[dim].length];\n          for(int i=0;i<drillDownTerms[dim].length;i++) {\n            if (termsEnum.seekExact(drillDownTerms[dim][i].bytes(), false)) {\n              DocsEnum docsEnum = termsEnum.docs(null, null);\n              if (docsEnum != null) {\n                dims[dim].docsEnums[i] = docsEnum;\n                dims[dim].maxCost = Math.max(dims[dim].maxCost, docsEnum.cost());\n              }\n            }\n          }\n        }\n\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims);\n\n        // TODO: it could be better if we take acceptDocs\n        // into account instead of baseScorer?\n        Scorer baseScorer = baseWeight.scorer(context, scoreDocsInOrder, false, acceptDocs);\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(this, context,\n                                       baseScorer,\n                                       drillDownCollector, dims);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b555c26303ec0efd6cb1465f08feb17f7936e704","date":1372253288,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillSidewaysQuery#createWeight(IndexSearcher).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillSidewaysQuery#createWeight(IndexSearcher).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher);\n\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return baseQuery;\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return baseWeight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        baseWeight.normalize(norm, topLevelBoost);\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        // TODO: would be nice if AssertingIndexSearcher\n        // confirmed this for us\n        return false;\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n                           boolean topScorer, Bits acceptDocs) throws IOException {\n\n        DrillSidewaysScorer.DocsEnumsAndFreq[] dims = new DrillSidewaysScorer.DocsEnumsAndFreq[drillDownTerms.length];\n        TermsEnum termsEnum = null;\n        String lastField = null;\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          dims[dim] = new DrillSidewaysScorer.DocsEnumsAndFreq();\n          dims[dim].sidewaysCollector = drillSidewaysCollectors[dim];\n          String field = drillDownTerms[dim][0].field();\n          dims[dim].dim = drillDownTerms[dim][0].text();\n          if (lastField == null || !lastField.equals(field)) {\n            AtomicReader reader = context.reader();\n            Terms terms = reader.terms(field);\n            if (terms != null) {\n              termsEnum = terms.iterator(null);\n            } else {\n              termsEnum = null;\n            }\n            lastField = field;\n          }\n          dims[dim].docsEnums = new DocsEnum[drillDownTerms[dim].length];\n          if (termsEnum == null) {\n            nullCount++;\n            continue;\n          }\n          for(int i=0;i<drillDownTerms[dim].length;i++) {\n            if (termsEnum.seekExact(drillDownTerms[dim][i].bytes(), false)) {\n              DocsEnum docsEnum = termsEnum.docs(null, null, 0);\n              if (docsEnum != null) {\n                dims[dim].docsEnums[i] = docsEnum;\n                dims[dim].maxCost = Math.max(dims[dim].maxCost, docsEnum.cost());\n              }\n            }\n          }\n        }\n\n        if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims);\n\n        // TODO: it could be better if we take acceptDocs\n        // into account instead of baseScorer?\n        Scorer baseScorer = baseWeight.scorer(context, scoreDocsInOrder, false, acceptDocs);\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(this, context,\n                                       baseScorer,\n                                       drillDownCollector, dims);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher);\n\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return baseQuery;\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return baseWeight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        baseWeight.normalize(norm, topLevelBoost);\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        // TODO: would be nice if AssertingIndexSearcher\n        // confirmed this for us\n        return false;\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n                           boolean topScorer, Bits acceptDocs) throws IOException {\n\n        DrillSidewaysScorer.DocsEnumsAndFreq[] dims = new DrillSidewaysScorer.DocsEnumsAndFreq[drillDownTerms.length];\n        TermsEnum termsEnum = null;\n        String lastField = null;\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          dims[dim] = new DrillSidewaysScorer.DocsEnumsAndFreq();\n          dims[dim].sidewaysCollector = drillSidewaysCollectors[dim];\n          String field = drillDownTerms[dim][0].field();\n          dims[dim].dim = drillDownTerms[dim][0].text();\n          if (lastField == null || !lastField.equals(field)) {\n            AtomicReader reader = context.reader();\n            Terms terms = reader.terms(field);\n            if (terms != null) {\n              termsEnum = terms.iterator(null);\n            }\n            lastField = field;\n          }\n          dims[dim].docsEnums = new DocsEnum[drillDownTerms[dim].length];\n          if (termsEnum == null) {\n            nullCount++;\n            continue;\n          }\n          for(int i=0;i<drillDownTerms[dim].length;i++) {\n            if (termsEnum.seekExact(drillDownTerms[dim][i].bytes(), false)) {\n              DocsEnum docsEnum = termsEnum.docs(null, null);\n              if (docsEnum != null) {\n                dims[dim].docsEnums[i] = docsEnum;\n                dims[dim].maxCost = Math.max(dims[dim].maxCost, docsEnum.cost());\n              }\n            }\n          }\n        }\n\n        if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims);\n\n        // TODO: it could be better if we take acceptDocs\n        // into account instead of baseScorer?\n        Scorer baseScorer = baseWeight.scorer(context, scoreDocsInOrder, false, acceptDocs);\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(this, context,\n                                       baseScorer,\n                                       drillDownCollector, dims);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillSidewaysQuery#createWeight(IndexSearcher).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillSidewaysQuery#createWeight(IndexSearcher).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher);\n\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return baseQuery;\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return baseWeight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        baseWeight.normalize(norm, topLevelBoost);\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        // TODO: would be nice if AssertingIndexSearcher\n        // confirmed this for us\n        return false;\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n                           boolean topScorer, Bits acceptDocs) throws IOException {\n\n        DrillSidewaysScorer.DocsEnumsAndFreq[] dims = new DrillSidewaysScorer.DocsEnumsAndFreq[drillDownTerms.length];\n        TermsEnum termsEnum = null;\n        String lastField = null;\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          dims[dim] = new DrillSidewaysScorer.DocsEnumsAndFreq();\n          dims[dim].sidewaysCollector = drillSidewaysCollectors[dim];\n          String field = drillDownTerms[dim][0].field();\n          dims[dim].dim = drillDownTerms[dim][0].text();\n          if (lastField == null || !lastField.equals(field)) {\n            AtomicReader reader = context.reader();\n            Terms terms = reader.terms(field);\n            if (terms != null) {\n              termsEnum = terms.iterator(null);\n            } else {\n              termsEnum = null;\n            }\n            lastField = field;\n          }\n          dims[dim].docsEnums = new DocsEnum[drillDownTerms[dim].length];\n          if (termsEnum == null) {\n            nullCount++;\n            continue;\n          }\n          for(int i=0;i<drillDownTerms[dim].length;i++) {\n            if (termsEnum.seekExact(drillDownTerms[dim][i].bytes(), false)) {\n              DocsEnum docsEnum = termsEnum.docs(null, null, 0);\n              if (docsEnum != null) {\n                dims[dim].docsEnums[i] = docsEnum;\n                dims[dim].maxCost = Math.max(dims[dim].maxCost, docsEnum.cost());\n              }\n            }\n          }\n        }\n\n        if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims);\n\n        // TODO: it could be better if we take acceptDocs\n        // into account instead of baseScorer?\n        Scorer baseScorer = baseWeight.scorer(context, scoreDocsInOrder, false, acceptDocs);\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(this, context,\n                                       baseScorer,\n                                       drillDownCollector, dims);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher);\n\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return baseQuery;\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return baseWeight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        baseWeight.normalize(norm, topLevelBoost);\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        // TODO: would be nice if AssertingIndexSearcher\n        // confirmed this for us\n        return false;\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n                           boolean topScorer, Bits acceptDocs) throws IOException {\n\n        DrillSidewaysScorer.DocsEnumsAndFreq[] dims = new DrillSidewaysScorer.DocsEnumsAndFreq[drillDownTerms.length];\n        TermsEnum termsEnum = null;\n        String lastField = null;\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          dims[dim] = new DrillSidewaysScorer.DocsEnumsAndFreq();\n          dims[dim].sidewaysCollector = drillSidewaysCollectors[dim];\n          String field = drillDownTerms[dim][0].field();\n          dims[dim].dim = drillDownTerms[dim][0].text();\n          if (lastField == null || !lastField.equals(field)) {\n            AtomicReader reader = context.reader();\n            Terms terms = reader.terms(field);\n            if (terms != null) {\n              termsEnum = terms.iterator(null);\n            }\n            lastField = field;\n          }\n          dims[dim].docsEnums = new DocsEnum[drillDownTerms[dim].length];\n          if (termsEnum == null) {\n            nullCount++;\n            continue;\n          }\n          for(int i=0;i<drillDownTerms[dim].length;i++) {\n            if (termsEnum.seekExact(drillDownTerms[dim][i].bytes(), false)) {\n              DocsEnum docsEnum = termsEnum.docs(null, null);\n              if (docsEnum != null) {\n                dims[dim].docsEnums[i] = docsEnum;\n                dims[dim].maxCost = Math.max(dims[dim].maxCost, docsEnum.cost());\n              }\n            }\n          }\n        }\n\n        if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims);\n\n        // TODO: it could be better if we take acceptDocs\n        // into account instead of baseScorer?\n        Scorer baseScorer = baseWeight.scorer(context, scoreDocsInOrder, false, acceptDocs);\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(this, context,\n                                       baseScorer,\n                                       drillDownCollector, dims);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8","date":1373996650,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillSidewaysQuery#createWeight(IndexSearcher).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillSidewaysQuery#createWeight(IndexSearcher).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher);\n\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return baseQuery;\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return baseWeight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        baseWeight.normalize(norm, topLevelBoost);\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        // TODO: would be nice if AssertingIndexSearcher\n        // confirmed this for us\n        return false;\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n                           boolean topScorer, Bits acceptDocs) throws IOException {\n\n        DrillSidewaysScorer.DocsEnumsAndFreq[] dims = new DrillSidewaysScorer.DocsEnumsAndFreq[drillDownTerms.length];\n        TermsEnum termsEnum = null;\n        String lastField = null;\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          dims[dim] = new DrillSidewaysScorer.DocsEnumsAndFreq();\n          dims[dim].sidewaysCollector = drillSidewaysCollectors[dim];\n          String field = drillDownTerms[dim][0].field();\n          dims[dim].dim = drillDownTerms[dim][0].text();\n          if (lastField == null || !lastField.equals(field)) {\n            AtomicReader reader = context.reader();\n            Terms terms = reader.terms(field);\n            if (terms != null) {\n              termsEnum = terms.iterator(null);\n            } else {\n              termsEnum = null;\n            }\n            lastField = field;\n          }\n          dims[dim].docsEnums = new DocsEnum[drillDownTerms[dim].length];\n          if (termsEnum == null) {\n            nullCount++;\n            continue;\n          }\n          for(int i=0;i<drillDownTerms[dim].length;i++) {\n            if (termsEnum.seekExact(drillDownTerms[dim][i].bytes())) {\n              DocsEnum docsEnum = termsEnum.docs(null, null, 0);\n              if (docsEnum != null) {\n                dims[dim].docsEnums[i] = docsEnum;\n                dims[dim].maxCost = Math.max(dims[dim].maxCost, docsEnum.cost());\n              }\n            }\n          }\n        }\n\n        if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims);\n\n        // TODO: it could be better if we take acceptDocs\n        // into account instead of baseScorer?\n        Scorer baseScorer = baseWeight.scorer(context, scoreDocsInOrder, false, acceptDocs);\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(this, context,\n                                       baseScorer,\n                                       drillDownCollector, dims);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher);\n\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return baseQuery;\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return baseWeight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        baseWeight.normalize(norm, topLevelBoost);\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        // TODO: would be nice if AssertingIndexSearcher\n        // confirmed this for us\n        return false;\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n                           boolean topScorer, Bits acceptDocs) throws IOException {\n\n        DrillSidewaysScorer.DocsEnumsAndFreq[] dims = new DrillSidewaysScorer.DocsEnumsAndFreq[drillDownTerms.length];\n        TermsEnum termsEnum = null;\n        String lastField = null;\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          dims[dim] = new DrillSidewaysScorer.DocsEnumsAndFreq();\n          dims[dim].sidewaysCollector = drillSidewaysCollectors[dim];\n          String field = drillDownTerms[dim][0].field();\n          dims[dim].dim = drillDownTerms[dim][0].text();\n          if (lastField == null || !lastField.equals(field)) {\n            AtomicReader reader = context.reader();\n            Terms terms = reader.terms(field);\n            if (terms != null) {\n              termsEnum = terms.iterator(null);\n            } else {\n              termsEnum = null;\n            }\n            lastField = field;\n          }\n          dims[dim].docsEnums = new DocsEnum[drillDownTerms[dim].length];\n          if (termsEnum == null) {\n            nullCount++;\n            continue;\n          }\n          for(int i=0;i<drillDownTerms[dim].length;i++) {\n            if (termsEnum.seekExact(drillDownTerms[dim][i].bytes(), false)) {\n              DocsEnum docsEnum = termsEnum.docs(null, null, 0);\n              if (docsEnum != null) {\n                dims[dim].docsEnums[i] = docsEnum;\n                dims[dim].maxCost = Math.max(dims[dim].maxCost, docsEnum.cost());\n              }\n            }\n          }\n        }\n\n        if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims);\n\n        // TODO: it could be better if we take acceptDocs\n        // into account instead of baseScorer?\n        Scorer baseScorer = baseWeight.scorer(context, scoreDocsInOrder, false, acceptDocs);\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(this, context,\n                                       baseScorer,\n                                       drillDownCollector, dims);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillSidewaysQuery#createWeight(IndexSearcher).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillSidewaysQuery#createWeight(IndexSearcher).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher);\n\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return baseQuery;\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return baseWeight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        baseWeight.normalize(norm, topLevelBoost);\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        // TODO: would be nice if AssertingIndexSearcher\n        // confirmed this for us\n        return false;\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n                           boolean topScorer, Bits acceptDocs) throws IOException {\n\n        DrillSidewaysScorer.DocsEnumsAndFreq[] dims = new DrillSidewaysScorer.DocsEnumsAndFreq[drillDownTerms.length];\n        TermsEnum termsEnum = null;\n        String lastField = null;\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          dims[dim] = new DrillSidewaysScorer.DocsEnumsAndFreq();\n          dims[dim].sidewaysCollector = drillSidewaysCollectors[dim];\n          String field = drillDownTerms[dim][0].field();\n          dims[dim].dim = drillDownTerms[dim][0].text();\n          if (lastField == null || !lastField.equals(field)) {\n            AtomicReader reader = context.reader();\n            Terms terms = reader.terms(field);\n            if (terms != null) {\n              termsEnum = terms.iterator(null);\n            } else {\n              termsEnum = null;\n            }\n            lastField = field;\n          }\n          dims[dim].docsEnums = new DocsEnum[drillDownTerms[dim].length];\n          if (termsEnum == null) {\n            nullCount++;\n            continue;\n          }\n          for(int i=0;i<drillDownTerms[dim].length;i++) {\n            if (termsEnum.seekExact(drillDownTerms[dim][i].bytes())) {\n              DocsEnum docsEnum = termsEnum.docs(null, null, 0);\n              if (docsEnum != null) {\n                dims[dim].docsEnums[i] = docsEnum;\n                dims[dim].maxCost = Math.max(dims[dim].maxCost, docsEnum.cost());\n              }\n            }\n          }\n        }\n\n        if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims);\n\n        // TODO: it could be better if we take acceptDocs\n        // into account instead of baseScorer?\n        Scorer baseScorer = baseWeight.scorer(context, scoreDocsInOrder, false, acceptDocs);\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(this, context,\n                                       baseScorer,\n                                       drillDownCollector, dims);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher);\n\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return baseQuery;\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return baseWeight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        baseWeight.normalize(norm, topLevelBoost);\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        // TODO: would be nice if AssertingIndexSearcher\n        // confirmed this for us\n        return false;\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n                           boolean topScorer, Bits acceptDocs) throws IOException {\n\n        DrillSidewaysScorer.DocsEnumsAndFreq[] dims = new DrillSidewaysScorer.DocsEnumsAndFreq[drillDownTerms.length];\n        TermsEnum termsEnum = null;\n        String lastField = null;\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          dims[dim] = new DrillSidewaysScorer.DocsEnumsAndFreq();\n          dims[dim].sidewaysCollector = drillSidewaysCollectors[dim];\n          String field = drillDownTerms[dim][0].field();\n          dims[dim].dim = drillDownTerms[dim][0].text();\n          if (lastField == null || !lastField.equals(field)) {\n            AtomicReader reader = context.reader();\n            Terms terms = reader.terms(field);\n            if (terms != null) {\n              termsEnum = terms.iterator(null);\n            } else {\n              termsEnum = null;\n            }\n            lastField = field;\n          }\n          dims[dim].docsEnums = new DocsEnum[drillDownTerms[dim].length];\n          if (termsEnum == null) {\n            nullCount++;\n            continue;\n          }\n          for(int i=0;i<drillDownTerms[dim].length;i++) {\n            if (termsEnum.seekExact(drillDownTerms[dim][i].bytes(), false)) {\n              DocsEnum docsEnum = termsEnum.docs(null, null, 0);\n              if (docsEnum != null) {\n                dims[dim].docsEnums[i] = docsEnum;\n                dims[dim].maxCost = Math.max(dims[dim].maxCost, docsEnum.cost());\n              }\n            }\n          }\n        }\n\n        if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims);\n\n        // TODO: it could be better if we take acceptDocs\n        // into account instead of baseScorer?\n        Scorer baseScorer = baseWeight.scorer(context, scoreDocsInOrder, false, acceptDocs);\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(this, context,\n                                       baseScorer,\n                                       drillDownCollector, dims);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillSidewaysQuery#createWeight(IndexSearcher).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher);\n\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return baseQuery;\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return baseWeight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        baseWeight.normalize(norm, topLevelBoost);\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        // TODO: would be nice if AssertingIndexSearcher\n        // confirmed this for us\n        return false;\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n                           boolean topScorer, Bits acceptDocs) throws IOException {\n\n        DrillSidewaysScorer.DocsEnumsAndFreq[] dims = new DrillSidewaysScorer.DocsEnumsAndFreq[drillDownTerms.length];\n        TermsEnum termsEnum = null;\n        String lastField = null;\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          dims[dim] = new DrillSidewaysScorer.DocsEnumsAndFreq();\n          dims[dim].sidewaysCollector = drillSidewaysCollectors[dim];\n          String field = drillDownTerms[dim][0].field();\n          dims[dim].dim = drillDownTerms[dim][0].text();\n          if (lastField == null || !lastField.equals(field)) {\n            AtomicReader reader = context.reader();\n            Terms terms = reader.terms(field);\n            if (terms != null) {\n              termsEnum = terms.iterator(null);\n            } else {\n              termsEnum = null;\n            }\n            lastField = field;\n          }\n          dims[dim].docsEnums = new DocsEnum[drillDownTerms[dim].length];\n          if (termsEnum == null) {\n            nullCount++;\n            continue;\n          }\n          for(int i=0;i<drillDownTerms[dim].length;i++) {\n            if (termsEnum.seekExact(drillDownTerms[dim][i].bytes())) {\n              DocsEnum docsEnum = termsEnum.docs(null, null, 0);\n              if (docsEnum != null) {\n                dims[dim].docsEnums[i] = docsEnum;\n                dims[dim].maxCost = Math.max(dims[dim].maxCost, docsEnum.cost());\n              }\n            }\n          }\n        }\n\n        if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims);\n\n        // TODO: it could be better if we take acceptDocs\n        // into account instead of baseScorer?\n        Scorer baseScorer = baseWeight.scorer(context, scoreDocsInOrder, false, acceptDocs);\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(this, context,\n                                       baseScorer,\n                                       drillDownCollector, dims);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillSidewaysQuery#createWeight(IndexSearcher).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher);\n\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return baseQuery;\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return baseWeight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        baseWeight.normalize(norm, topLevelBoost);\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        // TODO: would be nice if AssertingIndexSearcher\n        // confirmed this for us\n        return false;\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n                           boolean topScorer, Bits acceptDocs) throws IOException {\n\n        DrillSidewaysScorer.DocsEnumsAndFreq[] dims = new DrillSidewaysScorer.DocsEnumsAndFreq[drillDownTerms.length];\n        TermsEnum termsEnum = null;\n        String lastField = null;\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          dims[dim] = new DrillSidewaysScorer.DocsEnumsAndFreq();\n          dims[dim].sidewaysCollector = drillSidewaysCollectors[dim];\n          String field = drillDownTerms[dim][0].field();\n          dims[dim].dim = drillDownTerms[dim][0].text();\n          if (lastField == null || !lastField.equals(field)) {\n            AtomicReader reader = context.reader();\n            Terms terms = reader.terms(field);\n            if (terms != null) {\n              termsEnum = terms.iterator(null);\n            } else {\n              termsEnum = null;\n            }\n            lastField = field;\n          }\n          dims[dim].docsEnums = new DocsEnum[drillDownTerms[dim].length];\n          if (termsEnum == null) {\n            nullCount++;\n            continue;\n          }\n          for(int i=0;i<drillDownTerms[dim].length;i++) {\n            if (termsEnum.seekExact(drillDownTerms[dim][i].bytes())) {\n              DocsEnum docsEnum = termsEnum.docs(null, null, 0);\n              if (docsEnum != null) {\n                dims[dim].docsEnums[i] = docsEnum;\n                dims[dim].maxCost = Math.max(dims[dim].maxCost, docsEnum.cost());\n              }\n            }\n          }\n        }\n\n        if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims);\n\n        // TODO: it could be better if we take acceptDocs\n        // into account instead of baseScorer?\n        Scorer baseScorer = baseWeight.scorer(context, scoreDocsInOrder, false, acceptDocs);\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(this, context,\n                                       baseScorer,\n                                       drillDownCollector, dims);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5b1ac4be5e40d7bda6ec0f850c933a95ca0642fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["ee834e58357f79a6fc8770119cbf9d614da67c90","b555c26303ec0efd6cb1465f08feb17f7936e704"],"b555c26303ec0efd6cb1465f08feb17f7936e704":["288adb8faeade0b0023dd7d85b86bf5f631a694a"],"ee834e58357f79a6fc8770119cbf9d614da67c90":["378fbd2626d3f584f8146e25acf62ee817361580","288adb8faeade0b0023dd7d85b86bf5f631a694a"],"c56659f13067bffb93329ae60b4c25dccf9f87cc":["e2f479a58780f0a2a9c1c6f7202207a75d094cd9"],"378fbd2626d3f584f8146e25acf62ee817361580":["c56659f13067bffb93329ae60b4c25dccf9f87cc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e2f479a58780f0a2a9c1c6f7202207a75d094cd9":["76d37531298cae83f8dd7adcb73f3d0ceff83aa0"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["37a0f60745e53927c4c876cfe5b5a58170f0646c"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["eee5f2a24465d2c9a5f86ab84b7c35041a30fda8","d33e19a97046248623a7591aeaa6547233fd15e2"],"76d37531298cae83f8dd7adcb73f3d0ceff83aa0":["5b1ac4be5e40d7bda6ec0f850c933a95ca0642fd"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["b555c26303ec0efd6cb1465f08feb17f7936e704"],"288adb8faeade0b0023dd7d85b86bf5f631a694a":["378fbd2626d3f584f8146e25acf62ee817361580"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"5b1ac4be5e40d7bda6ec0f850c933a95ca0642fd":["76d37531298cae83f8dd7adcb73f3d0ceff83aa0"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"b555c26303ec0efd6cb1465f08feb17f7936e704":["37a0f60745e53927c4c876cfe5b5a58170f0646c","eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"ee834e58357f79a6fc8770119cbf9d614da67c90":["37a0f60745e53927c4c876cfe5b5a58170f0646c"],"c56659f13067bffb93329ae60b4c25dccf9f87cc":["378fbd2626d3f584f8146e25acf62ee817361580"],"378fbd2626d3f584f8146e25acf62ee817361580":["ee834e58357f79a6fc8770119cbf9d614da67c90","288adb8faeade0b0023dd7d85b86bf5f631a694a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5b1ac4be5e40d7bda6ec0f850c933a95ca0642fd"],"e2f479a58780f0a2a9c1c6f7202207a75d094cd9":["c56659f13067bffb93329ae60b4c25dccf9f87cc"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"76d37531298cae83f8dd7adcb73f3d0ceff83aa0":["e2f479a58780f0a2a9c1c6f7202207a75d094cd9"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"288adb8faeade0b0023dd7d85b86bf5f631a694a":["b555c26303ec0efd6cb1465f08feb17f7936e704","ee834e58357f79a6fc8770119cbf9d614da67c90"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}