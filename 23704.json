{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#createIndex().mjava","commits":[{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#createIndex().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/SorterTestBase#createIndex(Directory,int,Random).mjava","sourceNew":"  @BeforeClass\n  public static void createIndex() throws Exception {\n    dir = newFSDirectory(createTempDir());\n    int numDocs = atLeast(100);\n\n    List<Integer> ids = new ArrayList<>();\n    for (int i = 0; i < numDocs; i++) {\n      ids.add(Integer.valueOf(i * 10));\n    }\n    // shuffle them for indexing\n    Collections.shuffle(ids, random());\n    if (VERBOSE) {\n      System.out.println(\"Shuffled IDs for indexing: \" + Arrays.toString(ids.toArray()));\n    }\n    \n    PositionsTokenStream positions = new PositionsTokenStream();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    // nocommit:\n    conf.setCodec(new SimpleTextCodec());\n    conf.setMaxBufferedDocs(4); // create some segments\n    conf.setSimilarity(new NormsSimilarity(conf.getSimilarity())); // for testing norms field\n    // nocommit\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    // sort the index by id (as integer, in NUMERIC_DV_FIELD)\n    conf.setIndexSort(new Sort(new SortField(NUMERIC_DV_FIELD, SortField.Type.INT)));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    writer.setDoRandomForceMerge(false);\n    for (int id : ids) {\n      writer.addDocument(doc(id, positions));\n    }\n    // delete some documents\n    writer.commit();\n    // nocommit need thread safety test too\n    for (Integer id : ids) {\n      if (random().nextDouble() < 0.2) {\n        if (VERBOSE) {\n          System.out.println(\"delete doc_id \" + id);\n        }\n        writer.deleteDocuments(new Term(ID_FIELD, id.toString()));\n      }\n    }\n    \n    sortedReader = writer.getReader();\n    writer.close();\n    \n    TestUtil.checkReader(sortedReader);\n  }\n\n","sourceOld":"  /** Creates an unsorted index; subclasses then sort this index and open sortedReader. */\n  private static void createIndex(Directory dir, int numDocs, Random random) throws IOException {\n    List<Integer> ids = new ArrayList<>();\n    for (int i = 0; i < numDocs; i++) {\n      ids.add(Integer.valueOf(i * 10));\n    }\n    // shuffle them for indexing\n    Collections.shuffle(ids, random);\n    if (VERBOSE) {\n      System.out.println(\"Shuffled IDs for indexing: \" + Arrays.toString(ids.toArray()));\n    }\n    \n    PositionsTokenStream positions = new PositionsTokenStream();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random));\n    conf.setMaxBufferedDocs(4); // create some segments\n    conf.setSimilarity(new NormsSimilarity(conf.getSimilarity())); // for testing norms field\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, conf);\n    writer.setDoRandomForceMerge(false);\n    for (int id : ids) {\n      writer.addDocument(doc(id, positions));\n    }\n    // delete some documents\n    writer.commit();\n    for (Integer id : ids) {\n      if (random.nextDouble() < 0.2) {\n        if (VERBOSE) {\n          System.out.println(\"delete doc_id \" + id);\n        }\n        writer.deleteDocuments(new Term(ID_FIELD, id.toString()));\n      }\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8","date":1462567286,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#createIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#createIndex().mjava","sourceNew":"  @BeforeClass\n  public static void createIndex() throws Exception {\n    dir = newFSDirectory(createTempDir());\n    int numDocs = atLeast(100);\n\n    List<Integer> ids = new ArrayList<>();\n    for (int i = 0; i < numDocs; i++) {\n      ids.add(Integer.valueOf(i * 10));\n    }\n    // shuffle them for indexing\n    Collections.shuffle(ids, random());\n    if (VERBOSE) {\n      System.out.println(\"Shuffled IDs for indexing: \" + Arrays.toString(ids.toArray()));\n    }\n    \n    PositionsTokenStream positions = new PositionsTokenStream();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(4); // create some segments\n    conf.setSimilarity(new NormsSimilarity(conf.getSimilarity())); // for testing norms field\n    // nocommit\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    // sort the index by id (as integer, in NUMERIC_DV_FIELD)\n    conf.setIndexSort(new Sort(new SortField(NUMERIC_DV_FIELD, SortField.Type.INT)));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    writer.setDoRandomForceMerge(false);\n    for (int id : ids) {\n      writer.addDocument(doc(id, positions));\n    }\n    // delete some documents\n    writer.commit();\n    // nocommit need thread safety test too\n    for (Integer id : ids) {\n      if (random().nextDouble() < 0.2) {\n        if (VERBOSE) {\n          System.out.println(\"delete doc_id \" + id);\n        }\n        writer.deleteDocuments(new Term(ID_FIELD, id.toString()));\n      }\n    }\n    \n    sortedReader = writer.getReader();\n    writer.close();\n    \n    TestUtil.checkReader(sortedReader);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void createIndex() throws Exception {\n    dir = newFSDirectory(createTempDir());\n    int numDocs = atLeast(100);\n\n    List<Integer> ids = new ArrayList<>();\n    for (int i = 0; i < numDocs; i++) {\n      ids.add(Integer.valueOf(i * 10));\n    }\n    // shuffle them for indexing\n    Collections.shuffle(ids, random());\n    if (VERBOSE) {\n      System.out.println(\"Shuffled IDs for indexing: \" + Arrays.toString(ids.toArray()));\n    }\n    \n    PositionsTokenStream positions = new PositionsTokenStream();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    // nocommit:\n    conf.setCodec(new SimpleTextCodec());\n    conf.setMaxBufferedDocs(4); // create some segments\n    conf.setSimilarity(new NormsSimilarity(conf.getSimilarity())); // for testing norms field\n    // nocommit\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    // sort the index by id (as integer, in NUMERIC_DV_FIELD)\n    conf.setIndexSort(new Sort(new SortField(NUMERIC_DV_FIELD, SortField.Type.INT)));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    writer.setDoRandomForceMerge(false);\n    for (int id : ids) {\n      writer.addDocument(doc(id, positions));\n    }\n    // delete some documents\n    writer.commit();\n    // nocommit need thread safety test too\n    for (Integer id : ids) {\n      if (random().nextDouble() < 0.2) {\n        if (VERBOSE) {\n          System.out.println(\"delete doc_id \" + id);\n        }\n        writer.deleteDocuments(new Term(ID_FIELD, id.toString()));\n      }\n    }\n    \n    sortedReader = writer.getReader();\n    writer.close();\n    \n    TestUtil.checkReader(sortedReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ff25cb7bb787cbe9d05740c89a527ddd2617c16","date":1462702859,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#createIndex().mjava","sourceNew":null,"sourceOld":"  @BeforeClass\n  public static void createIndex() throws Exception {\n    dir = newFSDirectory(createTempDir());\n    int numDocs = atLeast(100);\n\n    List<Integer> ids = new ArrayList<>();\n    for (int i = 0; i < numDocs; i++) {\n      ids.add(Integer.valueOf(i * 10));\n    }\n    // shuffle them for indexing\n    Collections.shuffle(ids, random());\n    if (VERBOSE) {\n      System.out.println(\"Shuffled IDs for indexing: \" + Arrays.toString(ids.toArray()));\n    }\n    \n    PositionsTokenStream positions = new PositionsTokenStream();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(4); // create some segments\n    conf.setSimilarity(new NormsSimilarity(conf.getSimilarity())); // for testing norms field\n    // nocommit\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    // sort the index by id (as integer, in NUMERIC_DV_FIELD)\n    conf.setIndexSort(new Sort(new SortField(NUMERIC_DV_FIELD, SortField.Type.INT)));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    writer.setDoRandomForceMerge(false);\n    for (int id : ids) {\n      writer.addDocument(doc(id, positions));\n    }\n    // delete some documents\n    writer.commit();\n    // nocommit need thread safety test too\n    for (Integer id : ids) {\n      if (random().nextDouble() < 0.2) {\n        if (VERBOSE) {\n          System.out.println(\"delete doc_id \" + id);\n        }\n        writer.deleteDocuments(new Term(ID_FIELD, id.toString()));\n      }\n    }\n    \n    sortedReader = writer.getReader();\n    writer.close();\n    \n    TestUtil.checkReader(sortedReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ff25cb7bb787cbe9d05740c89a527ddd2617c16":["fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8"],"fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ff25cb7bb787cbe9d05740c89a527ddd2617c16":[],"fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8":["4ff25cb7bb787cbe9d05740c89a527ddd2617c16"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ff25cb7bb787cbe9d05740c89a527ddd2617c16","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}