{"path":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#initRegenerators(SolrConfig).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#initRegenerators(SolrConfig).mjava","pathOld":"/dev/null","sourceNew":"  //\n  // Set default regenerators on filter and query caches if they don't have any\n  //\n  public static void initRegenerators(SolrConfig solrConfig) {\n    if (solrConfig.fieldValueCacheConfig != null && solrConfig.fieldValueCacheConfig.getRegenerator() == null) {\n      solrConfig.fieldValueCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  if (oldVal instanceof UnInvertedField) {\n                    UnInvertedField.getUnInvertedField((String)oldKey, newSearcher);\n                  }\n                  return true;\n                }\n              }\n      );\n    }\n\n    if (solrConfig.filterCacheConfig != null && solrConfig.filterCacheConfig.getRegenerator() == null) {\n      solrConfig.filterCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  newSearcher.cacheDocSet((Query)oldKey, null, false);\n                  return true;\n                }\n              }\n      );\n    }\n\n    if (solrConfig.queryResultCacheConfig != null && solrConfig.queryResultCacheConfig.getRegenerator() == null) {\n      final int queryResultWindowSize = solrConfig.queryResultWindowSize;\n      solrConfig.queryResultCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  QueryResultKey key = (QueryResultKey)oldKey;\n                  int nDocs=1;\n                  // request 1 doc and let caching round up to the next window size...\n                  // unless the window size is <=1, in which case we will pick\n                  // the minimum of the number of documents requested last time and\n                  // a reasonable number such as 40.\n                  // TODO: make more configurable later...\n\n                  if (queryResultWindowSize<=1) {\n                    DocList oldList = (DocList)oldVal;\n                    int oldnDocs = oldList.offset() + oldList.size();\n                    // 40 has factors of 2,4,5,10,20\n                    nDocs = Math.min(oldnDocs,40);\n                  }\n\n                  int flags=NO_CHECK_QCACHE | key.nc_flags;\n                  QueryCommand qc = new QueryCommand();\n                  qc.setQuery(key.query)\n                    .setFilterList(key.filters)\n                    .setSort(key.sort)\n                    .setLen(nDocs)\n                    .setSupersetMaxDoc(nDocs)\n                    .setFlags(flags);\n                  QueryResult qr = new QueryResult();\n                  newSearcher.getDocListC(qr,qc);\n                  return true;\n                }\n              }\n      );\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#initRegenerators(SolrConfig).mjava","sourceNew":null,"sourceOld":"  //\n  // Set default regenerators on filter and query caches if they don't have any\n  //\n  public static void initRegenerators(SolrConfig solrConfig) {\n    if (solrConfig.fieldValueCacheConfig != null && solrConfig.fieldValueCacheConfig.getRegenerator() == null) {\n      solrConfig.fieldValueCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  if (oldVal instanceof UnInvertedField) {\n                    UnInvertedField.getUnInvertedField((String)oldKey, newSearcher);\n                  }\n                  return true;\n                }\n              }\n      );\n    }\n\n    if (solrConfig.filterCacheConfig != null && solrConfig.filterCacheConfig.getRegenerator() == null) {\n      solrConfig.filterCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  newSearcher.cacheDocSet((Query)oldKey, null, false);\n                  return true;\n                }\n              }\n      );\n    }\n\n    if (solrConfig.queryResultCacheConfig != null && solrConfig.queryResultCacheConfig.getRegenerator() == null) {\n      final int queryResultWindowSize = solrConfig.queryResultWindowSize;\n      solrConfig.queryResultCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  QueryResultKey key = (QueryResultKey)oldKey;\n                  int nDocs=1;\n                  // request 1 doc and let caching round up to the next window size...\n                  // unless the window size is <=1, in which case we will pick\n                  // the minimum of the number of documents requested last time and\n                  // a reasonable number such as 40.\n                  // TODO: make more configurable later...\n\n                  if (queryResultWindowSize<=1) {\n                    DocList oldList = (DocList)oldVal;\n                    int oldnDocs = oldList.offset() + oldList.size();\n                    // 40 has factors of 2,4,5,10,20\n                    nDocs = Math.min(oldnDocs,40);\n                  }\n\n                  int flags=NO_CHECK_QCACHE | key.nc_flags;\n                  QueryCommand qc = new QueryCommand();\n                  qc.setQuery(key.query)\n                    .setFilterList(key.filters)\n                    .setSort(key.sort)\n                    .setLen(nDocs)\n                    .setSupersetMaxDoc(nDocs)\n                    .setFlags(flags);\n                  QueryResult qr = new QueryResult();\n                  newSearcher.getDocListC(qr,qc);\n                  return true;\n                }\n              }\n      );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#initRegenerators(SolrConfig).mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#initRegenerators(SolrConfig).mjava","sourceNew":"  //\n  // Set default regenerators on filter and query caches if they don't have any\n  //\n  public static void initRegenerators(SolrConfig solrConfig) {\n    if (solrConfig.fieldValueCacheConfig != null && solrConfig.fieldValueCacheConfig.getRegenerator() == null) {\n      solrConfig.fieldValueCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  if (oldVal instanceof UnInvertedField) {\n                    UnInvertedField.getUnInvertedField((String)oldKey, newSearcher);\n                  }\n                  return true;\n                }\n              }\n      );\n    }\n\n    if (solrConfig.filterCacheConfig != null && solrConfig.filterCacheConfig.getRegenerator() == null) {\n      solrConfig.filterCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  newSearcher.cacheDocSet((Query)oldKey, null, false);\n                  return true;\n                }\n              }\n      );\n    }\n\n    if (solrConfig.queryResultCacheConfig != null && solrConfig.queryResultCacheConfig.getRegenerator() == null) {\n      final int queryResultWindowSize = solrConfig.queryResultWindowSize;\n      solrConfig.queryResultCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  QueryResultKey key = (QueryResultKey)oldKey;\n                  int nDocs=1;\n                  // request 1 doc and let caching round up to the next window size...\n                  // unless the window size is <=1, in which case we will pick\n                  // the minimum of the number of documents requested last time and\n                  // a reasonable number such as 40.\n                  // TODO: make more configurable later...\n\n                  if (queryResultWindowSize<=1) {\n                    DocList oldList = (DocList)oldVal;\n                    int oldnDocs = oldList.offset() + oldList.size();\n                    // 40 has factors of 2,4,5,10,20\n                    nDocs = Math.min(oldnDocs,40);\n                  }\n\n                  int flags=NO_CHECK_QCACHE | key.nc_flags;\n                  QueryCommand qc = new QueryCommand();\n                  qc.setQuery(key.query)\n                    .setFilterList(key.filters)\n                    .setSort(key.sort)\n                    .setLen(nDocs)\n                    .setSupersetMaxDoc(nDocs)\n                    .setFlags(flags);\n                  QueryResult qr = new QueryResult();\n                  newSearcher.getDocListC(qr,qc);\n                  return true;\n                }\n              }\n      );\n    }\n  }\n\n","sourceOld":"  //\n  // Set default regenerators on filter and query caches if they don't have any\n  //\n  public static void initRegenerators(SolrConfig solrConfig) {\n    if (solrConfig.fieldValueCacheConfig != null && solrConfig.fieldValueCacheConfig.getRegenerator() == null) {\n      solrConfig.fieldValueCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  if (oldVal instanceof UnInvertedField) {\n                    UnInvertedField.getUnInvertedField((String)oldKey, newSearcher);\n                  }\n                  return true;\n                }\n              }\n      );\n    }\n\n    if (solrConfig.filterCacheConfig != null && solrConfig.filterCacheConfig.getRegenerator() == null) {\n      solrConfig.filterCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  newSearcher.cacheDocSet((Query)oldKey, null, false);\n                  return true;\n                }\n              }\n      );\n    }\n\n    if (solrConfig.queryResultCacheConfig != null && solrConfig.queryResultCacheConfig.getRegenerator() == null) {\n      final int queryResultWindowSize = solrConfig.queryResultWindowSize;\n      solrConfig.queryResultCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  QueryResultKey key = (QueryResultKey)oldKey;\n                  int nDocs=1;\n                  // request 1 doc and let caching round up to the next window size...\n                  // unless the window size is <=1, in which case we will pick\n                  // the minimum of the number of documents requested last time and\n                  // a reasonable number such as 40.\n                  // TODO: make more configurable later...\n\n                  if (queryResultWindowSize<=1) {\n                    DocList oldList = (DocList)oldVal;\n                    int oldnDocs = oldList.offset() + oldList.size();\n                    // 40 has factors of 2,4,5,10,20\n                    nDocs = Math.min(oldnDocs,40);\n                  }\n\n                  int flags=NO_CHECK_QCACHE | key.nc_flags;\n                  QueryCommand qc = new QueryCommand();\n                  qc.setQuery(key.query)\n                    .setFilterList(key.filters)\n                    .setSort(key.sort)\n                    .setLen(nDocs)\n                    .setSupersetMaxDoc(nDocs)\n                    .setFlags(flags);\n                  QueryResult qr = new QueryResult();\n                  newSearcher.getDocListC(qr,qc);\n                  return true;\n                }\n              }\n      );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#initRegenerators(SolrConfig).mjava","pathOld":"/dev/null","sourceNew":"  //\n  // Set default regenerators on filter and query caches if they don't have any\n  //\n  public static void initRegenerators(SolrConfig solrConfig) {\n    if (solrConfig.fieldValueCacheConfig != null && solrConfig.fieldValueCacheConfig.getRegenerator() == null) {\n      solrConfig.fieldValueCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  if (oldVal instanceof UnInvertedField) {\n                    UnInvertedField.getUnInvertedField((String)oldKey, newSearcher);\n                  }\n                  return true;\n                }\n              }\n      );\n    }\n\n    if (solrConfig.filterCacheConfig != null && solrConfig.filterCacheConfig.getRegenerator() == null) {\n      solrConfig.filterCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  newSearcher.cacheDocSet((Query)oldKey, null, false);\n                  return true;\n                }\n              }\n      );\n    }\n\n    if (solrConfig.queryResultCacheConfig != null && solrConfig.queryResultCacheConfig.getRegenerator() == null) {\n      final int queryResultWindowSize = solrConfig.queryResultWindowSize;\n      solrConfig.queryResultCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  QueryResultKey key = (QueryResultKey)oldKey;\n                  int nDocs=1;\n                  // request 1 doc and let caching round up to the next window size...\n                  // unless the window size is <=1, in which case we will pick\n                  // the minimum of the number of documents requested last time and\n                  // a reasonable number such as 40.\n                  // TODO: make more configurable later...\n\n                  if (queryResultWindowSize<=1) {\n                    DocList oldList = (DocList)oldVal;\n                    int oldnDocs = oldList.offset() + oldList.size();\n                    // 40 has factors of 2,4,5,10,20\n                    nDocs = Math.min(oldnDocs,40);\n                  }\n\n                  int flags=NO_CHECK_QCACHE | key.nc_flags;\n                  QueryCommand qc = new QueryCommand();\n                  qc.setQuery(key.query)\n                    .setFilterList(key.filters)\n                    .setSort(key.sort)\n                    .setLen(nDocs)\n                    .setSupersetMaxDoc(nDocs)\n                    .setFlags(flags);\n                  QueryResult qr = new QueryResult();\n                  newSearcher.getDocListC(qr,qc);\n                  return true;\n                }\n              }\n      );\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#initRegenerators(SolrConfig).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#initRegenerators(SolrConfig).mjava","sourceNew":"  //\n  // Set default regenerators on filter and query caches if they don't have any\n  //\n  public static void initRegenerators(SolrConfig solrConfig) {\n    if (solrConfig.fieldValueCacheConfig != null && solrConfig.fieldValueCacheConfig.getRegenerator() == null) {\n      solrConfig.fieldValueCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  if (oldVal instanceof UnInvertedField) {\n                    UnInvertedField.getUnInvertedField((String)oldKey, newSearcher);\n                  }\n                  return true;\n                }\n              }\n      );\n    }\n\n    if (solrConfig.filterCacheConfig != null && solrConfig.filterCacheConfig.getRegenerator() == null) {\n      solrConfig.filterCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  newSearcher.cacheDocSet((Query)oldKey, null, false);\n                  return true;\n                }\n              }\n      );\n    }\n\n    if (solrConfig.queryResultCacheConfig != null && solrConfig.queryResultCacheConfig.getRegenerator() == null) {\n      final int queryResultWindowSize = solrConfig.queryResultWindowSize;\n      solrConfig.queryResultCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  QueryResultKey key = (QueryResultKey)oldKey;\n                  int nDocs=1;\n                  // request 1 doc and let caching round up to the next window size...\n                  // unless the window size is <=1, in which case we will pick\n                  // the minimum of the number of documents requested last time and\n                  // a reasonable number such as 40.\n                  // TODO: make more configurable later...\n\n                  if (queryResultWindowSize<=1) {\n                    DocList oldList = (DocList)oldVal;\n                    int oldnDocs = oldList.offset() + oldList.size();\n                    // 40 has factors of 2,4,5,10,20\n                    nDocs = Math.min(oldnDocs,40);\n                  }\n\n                  int flags=NO_CHECK_QCACHE | key.nc_flags;\n                  QueryCommand qc = new QueryCommand();\n                  qc.setQuery(key.query)\n                    .setFilterList(key.filters)\n                    .setSort(key.sort)\n                    .setLen(nDocs)\n                    .setSupersetMaxDoc(nDocs)\n                    .setFlags(flags);\n                  QueryResult qr = new QueryResult();\n                  newSearcher.getDocListC(qr,qc);\n                  return true;\n                }\n              }\n      );\n    }\n  }\n\n","sourceOld":"  //\n  // Set default regenerators on filter and query caches if they don't have any\n  //\n  public static void initRegenerators(SolrConfig solrConfig) {\n    if (solrConfig.fieldValueCacheConfig != null && solrConfig.fieldValueCacheConfig.getRegenerator() == null) {\n      solrConfig.fieldValueCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  if (oldVal instanceof UnInvertedField) {\n                    UnInvertedField.getUnInvertedField((String)oldKey, newSearcher);\n                  }\n                  return true;\n                }\n              }\n      );\n    }\n\n    if (solrConfig.filterCacheConfig != null && solrConfig.filterCacheConfig.getRegenerator() == null) {\n      solrConfig.filterCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  newSearcher.cacheDocSet((Query)oldKey, null, false);\n                  return true;\n                }\n              }\n      );\n    }\n\n    if (solrConfig.queryResultCacheConfig != null && solrConfig.queryResultCacheConfig.getRegenerator() == null) {\n      final int queryResultWindowSize = solrConfig.queryResultWindowSize;\n      solrConfig.queryResultCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  QueryResultKey key = (QueryResultKey)oldKey;\n                  int nDocs=1;\n                  // request 1 doc and let caching round up to the next window size...\n                  // unless the window size is <=1, in which case we will pick\n                  // the minimum of the number of documents requested last time and\n                  // a reasonable number such as 40.\n                  // TODO: make more configurable later...\n\n                  if (queryResultWindowSize<=1) {\n                    DocList oldList = (DocList)oldVal;\n                    int oldnDocs = oldList.offset() + oldList.size();\n                    // 40 has factors of 2,4,5,10,20\n                    nDocs = Math.min(oldnDocs,40);\n                  }\n\n                  int flags=NO_CHECK_QCACHE | key.nc_flags;\n                  QueryCommand qc = new QueryCommand();\n                  qc.setQuery(key.query)\n                    .setFilterList(key.filters)\n                    .setSort(key.sort)\n                    .setLen(nDocs)\n                    .setSupersetMaxDoc(nDocs)\n                    .setFlags(flags);\n                  QueryResult qr = new QueryResult();\n                  newSearcher.getDocListC(qr,qc);\n                  return true;\n                }\n              }\n      );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#initRegenerators(SolrConfig).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#initRegenerators(SolrConfig).mjava","sourceNew":"  //\n  // Set default regenerators on filter and query caches if they don't have any\n  //\n  public static void initRegenerators(SolrConfig solrConfig) {\n    if (solrConfig.fieldValueCacheConfig != null && solrConfig.fieldValueCacheConfig.getRegenerator() == null) {\n      solrConfig.fieldValueCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  if (oldVal instanceof UnInvertedField) {\n                    UnInvertedField.getUnInvertedField((String)oldKey, newSearcher);\n                  }\n                  return true;\n                }\n              }\n      );\n    }\n\n    if (solrConfig.filterCacheConfig != null && solrConfig.filterCacheConfig.getRegenerator() == null) {\n      solrConfig.filterCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  newSearcher.cacheDocSet((Query)oldKey, null, false);\n                  return true;\n                }\n              }\n      );\n    }\n\n    if (solrConfig.queryResultCacheConfig != null && solrConfig.queryResultCacheConfig.getRegenerator() == null) {\n      final int queryResultWindowSize = solrConfig.queryResultWindowSize;\n      solrConfig.queryResultCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  QueryResultKey key = (QueryResultKey)oldKey;\n                  int nDocs=1;\n                  // request 1 doc and let caching round up to the next window size...\n                  // unless the window size is <=1, in which case we will pick\n                  // the minimum of the number of documents requested last time and\n                  // a reasonable number such as 40.\n                  // TODO: make more configurable later...\n\n                  if (queryResultWindowSize<=1) {\n                    DocList oldList = (DocList)oldVal;\n                    int oldnDocs = oldList.offset() + oldList.size();\n                    // 40 has factors of 2,4,5,10,20\n                    nDocs = Math.min(oldnDocs,40);\n                  }\n\n                  int flags=NO_CHECK_QCACHE | key.nc_flags;\n                  QueryCommand qc = new QueryCommand();\n                  qc.setQuery(key.query)\n                    .setFilterList(key.filters)\n                    .setSort(key.sort)\n                    .setLen(nDocs)\n                    .setSupersetMaxDoc(nDocs)\n                    .setFlags(flags);\n                  QueryResult qr = new QueryResult();\n                  newSearcher.getDocListC(qr,qc);\n                  return true;\n                }\n              }\n      );\n    }\n  }\n\n","sourceOld":"  //\n  // Set default regenerators on filter and query caches if they don't have any\n  //\n  public static void initRegenerators(SolrConfig solrConfig) {\n    if (solrConfig.fieldValueCacheConfig != null && solrConfig.fieldValueCacheConfig.getRegenerator() == null) {\n      solrConfig.fieldValueCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  if (oldVal instanceof UnInvertedField) {\n                    UnInvertedField.getUnInvertedField((String)oldKey, newSearcher);\n                  }\n                  return true;\n                }\n              }\n      );\n    }\n\n    if (solrConfig.filterCacheConfig != null && solrConfig.filterCacheConfig.getRegenerator() == null) {\n      solrConfig.filterCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  newSearcher.cacheDocSet((Query)oldKey, null, false);\n                  return true;\n                }\n              }\n      );\n    }\n\n    if (solrConfig.queryResultCacheConfig != null && solrConfig.queryResultCacheConfig.getRegenerator() == null) {\n      final int queryResultWindowSize = solrConfig.queryResultWindowSize;\n      solrConfig.queryResultCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  QueryResultKey key = (QueryResultKey)oldKey;\n                  int nDocs=1;\n                  // request 1 doc and let caching round up to the next window size...\n                  // unless the window size is <=1, in which case we will pick\n                  // the minimum of the number of documents requested last time and\n                  // a reasonable number such as 40.\n                  // TODO: make more configurable later...\n\n                  if (queryResultWindowSize<=1) {\n                    DocList oldList = (DocList)oldVal;\n                    int oldnDocs = oldList.offset() + oldList.size();\n                    // 40 has factors of 2,4,5,10,20\n                    nDocs = Math.min(oldnDocs,40);\n                  }\n\n                  int flags=NO_CHECK_QCACHE | key.nc_flags;\n                  QueryCommand qc = new QueryCommand();\n                  qc.setQuery(key.query)\n                    .setFilterList(key.filters)\n                    .setSort(key.sort)\n                    .setLen(nDocs)\n                    .setSupersetMaxDoc(nDocs)\n                    .setFlags(flags);\n                  QueryResult qr = new QueryResult();\n                  newSearcher.getDocListC(qr,qc);\n                  return true;\n                }\n              }\n      );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#initRegenerators(SolrConfig).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#initRegenerators(SolrConfig).mjava","sourceNew":"  //\n  // Set default regenerators on filter and query caches if they don't have any\n  //\n  public static void initRegenerators(SolrConfig solrConfig) {\n    if (solrConfig.fieldValueCacheConfig != null && solrConfig.fieldValueCacheConfig.getRegenerator() == null) {\n      solrConfig.fieldValueCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  if (oldVal instanceof UnInvertedField) {\n                    UnInvertedField.getUnInvertedField((String)oldKey, newSearcher);\n                  }\n                  return true;\n                }\n              }\n      );\n    }\n\n    if (solrConfig.filterCacheConfig != null && solrConfig.filterCacheConfig.getRegenerator() == null) {\n      solrConfig.filterCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  newSearcher.cacheDocSet((Query)oldKey, null, false);\n                  return true;\n                }\n              }\n      );\n    }\n\n    if (solrConfig.queryResultCacheConfig != null && solrConfig.queryResultCacheConfig.getRegenerator() == null) {\n      final int queryResultWindowSize = solrConfig.queryResultWindowSize;\n      solrConfig.queryResultCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  QueryResultKey key = (QueryResultKey)oldKey;\n                  int nDocs=1;\n                  // request 1 doc and let caching round up to the next window size...\n                  // unless the window size is <=1, in which case we will pick\n                  // the minimum of the number of documents requested last time and\n                  // a reasonable number such as 40.\n                  // TODO: make more configurable later...\n\n                  if (queryResultWindowSize<=1) {\n                    DocList oldList = (DocList)oldVal;\n                    int oldnDocs = oldList.offset() + oldList.size();\n                    // 40 has factors of 2,4,5,10,20\n                    nDocs = Math.min(oldnDocs,40);\n                  }\n\n                  int flags=NO_CHECK_QCACHE | key.nc_flags;\n                  QueryCommand qc = new QueryCommand();\n                  qc.setQuery(key.query)\n                    .setFilterList(key.filters)\n                    .setSort(key.sort)\n                    .setLen(nDocs)\n                    .setSupersetMaxDoc(nDocs)\n                    .setFlags(flags);\n                  QueryResult qr = new QueryResult();\n                  newSearcher.getDocListC(qr,qc);\n                  return true;\n                }\n              }\n      );\n    }\n  }\n\n","sourceOld":"  //\n  // Set default regenerators on filter and query caches if they don't have any\n  //\n  public static void initRegenerators(SolrConfig solrConfig) {\n    if (solrConfig.fieldValueCacheConfig != null && solrConfig.fieldValueCacheConfig.getRegenerator() == null) {\n      solrConfig.fieldValueCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  if (oldVal instanceof UnInvertedField) {\n                    UnInvertedField.getUnInvertedField((String)oldKey, newSearcher);\n                  }\n                  return true;\n                }\n              }\n      );\n    }\n\n    if (solrConfig.filterCacheConfig != null && solrConfig.filterCacheConfig.getRegenerator() == null) {\n      solrConfig.filterCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  newSearcher.cacheDocSet((Query)oldKey, null, false);\n                  return true;\n                }\n              }\n      );\n    }\n\n    if (solrConfig.queryResultCacheConfig != null && solrConfig.queryResultCacheConfig.getRegenerator() == null) {\n      final int queryResultWindowSize = solrConfig.queryResultWindowSize;\n      solrConfig.queryResultCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  QueryResultKey key = (QueryResultKey)oldKey;\n                  int nDocs=1;\n                  // request 1 doc and let caching round up to the next window size...\n                  // unless the window size is <=1, in which case we will pick\n                  // the minimum of the number of documents requested last time and\n                  // a reasonable number such as 40.\n                  // TODO: make more configurable later...\n\n                  if (queryResultWindowSize<=1) {\n                    DocList oldList = (DocList)oldVal;\n                    int oldnDocs = oldList.offset() + oldList.size();\n                    // 40 has factors of 2,4,5,10,20\n                    nDocs = Math.min(oldnDocs,40);\n                  }\n\n                  int flags=NO_CHECK_QCACHE | key.nc_flags;\n                  QueryCommand qc = new QueryCommand();\n                  qc.setQuery(key.query)\n                    .setFilterList(key.filters)\n                    .setSort(key.sort)\n                    .setLen(nDocs)\n                    .setSupersetMaxDoc(nDocs)\n                    .setFlags(flags);\n                  QueryResult qr = new QueryResult();\n                  newSearcher.getDocListC(qr,qc);\n                  return true;\n                }\n              }\n      );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["1da8d55113b689b06716246649de6f62430f15c0","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["1da8d55113b689b06716246649de6f62430f15c0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}