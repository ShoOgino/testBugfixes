{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#initializeMetrics(SolrMetrics).mjava","commits":[{"id":"a117d95183986014a31f25bb04e5464ca06d6068","date":1566208086,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#initializeMetrics(SolrMetrics).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#initializeMetrics(SolrMetricManager,String,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetrics m) {\n    super.initializeMetrics(m);\n    metrics = new MetricsMap((detailed, map) -> {\n      if (importer != null) {\n        DocBuilder.Statistics cumulative = importer.cumulativeStatistics;\n\n        map.put(\"Status\", importer.getStatus().toString());\n\n        if (importer.docBuilder != null) {\n          DocBuilder.Statistics running = importer.docBuilder.importStatistics;\n          map.put(\"Documents Processed\", running.docCount);\n          map.put(\"Requests made to DataSource\", running.queryCount);\n          map.put(\"Rows Fetched\", running.rowsCount);\n          map.put(\"Documents Deleted\", running.deletedDocCount);\n          map.put(\"Documents Skipped\", running.skipDocCount);\n        }\n\n        map.put(DataImporter.MSG.TOTAL_DOC_PROCESSED, cumulative.docCount);\n        map.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED, cumulative.queryCount);\n        map.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED, cumulative.rowsCount);\n        map.put(DataImporter.MSG.TOTAL_DOCS_DELETED, cumulative.deletedDocCount);\n        map.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED, cumulative.skipDocCount);\n      }\n    });\n    solrMetrics.gauge(this, metrics, true, \"importer\", getCategory().toString());\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, String scope) {\n    super.initializeMetrics(manager, registryName, tag, scope);\n    metrics = new MetricsMap((detailed, map) -> {\n      if (importer != null) {\n        DocBuilder.Statistics cumulative = importer.cumulativeStatistics;\n\n        map.put(\"Status\", importer.getStatus().toString());\n\n        if (importer.docBuilder != null) {\n          DocBuilder.Statistics running = importer.docBuilder.importStatistics;\n          map.put(\"Documents Processed\", running.docCount);\n          map.put(\"Requests made to DataSource\", running.queryCount);\n          map.put(\"Rows Fetched\", running.rowsCount);\n          map.put(\"Documents Deleted\", running.deletedDocCount);\n          map.put(\"Documents Skipped\", running.skipDocCount);\n        }\n\n        map.put(DataImporter.MSG.TOTAL_DOC_PROCESSED, cumulative.docCount);\n        map.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED, cumulative.queryCount);\n        map.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED, cumulative.rowsCount);\n        map.put(DataImporter.MSG.TOTAL_DOCS_DELETED, cumulative.deletedDocCount);\n        map.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED, cumulative.skipDocCount);\n      }\n    });\n    manager.registerGauge(this, registryName, metrics, tag, true, \"importer\", getCategory().toString(), scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17c468812fc0c60f3d66b176339dc70564d8c3cb","date":1567918667,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#initializeMetrics(SolrMetrics).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, String scope) {\n    super.initializeMetrics(manager, registryName, tag, scope);\n    metrics = new MetricsMap((detailed, map) -> {\n      if (importer != null) {\n        DocBuilder.Statistics cumulative = importer.cumulativeStatistics;\n\n        map.put(\"Status\", importer.getStatus().toString());\n\n        if (importer.docBuilder != null) {\n          DocBuilder.Statistics running = importer.docBuilder.importStatistics;\n          map.put(\"Documents Processed\", running.docCount);\n          map.put(\"Requests made to DataSource\", running.queryCount);\n          map.put(\"Rows Fetched\", running.rowsCount);\n          map.put(\"Documents Deleted\", running.deletedDocCount);\n          map.put(\"Documents Skipped\", running.skipDocCount);\n        }\n\n        map.put(DataImporter.MSG.TOTAL_DOC_PROCESSED, cumulative.docCount);\n        map.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED, cumulative.queryCount);\n        map.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED, cumulative.rowsCount);\n        map.put(DataImporter.MSG.TOTAL_DOCS_DELETED, cumulative.deletedDocCount);\n        map.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED, cumulative.skipDocCount);\n      }\n    });\n    manager.registerGauge(this, registryName, metrics, tag, true, \"importer\", getCategory().toString(), scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetrics m) {\n    super.initializeMetrics(m);\n    metrics = new MetricsMap((detailed, map) -> {\n      if (importer != null) {\n        DocBuilder.Statistics cumulative = importer.cumulativeStatistics;\n\n        map.put(\"Status\", importer.getStatus().toString());\n\n        if (importer.docBuilder != null) {\n          DocBuilder.Statistics running = importer.docBuilder.importStatistics;\n          map.put(\"Documents Processed\", running.docCount);\n          map.put(\"Requests made to DataSource\", running.queryCount);\n          map.put(\"Rows Fetched\", running.rowsCount);\n          map.put(\"Documents Deleted\", running.deletedDocCount);\n          map.put(\"Documents Skipped\", running.skipDocCount);\n        }\n\n        map.put(DataImporter.MSG.TOTAL_DOC_PROCESSED, cumulative.docCount);\n        map.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED, cumulative.queryCount);\n        map.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED, cumulative.rowsCount);\n        map.put(DataImporter.MSG.TOTAL_DOCS_DELETED, cumulative.deletedDocCount);\n        map.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED, cumulative.skipDocCount);\n      }\n    });\n    solrMetrics.gauge(this, metrics, true, \"importer\", getCategory().toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52275555c0ae3b55430cef26ad7fca3f02440944","date":1568033329,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#initializeMetrics(SolrMetrics).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, String scope) {\n    super.initializeMetrics(manager, registryName, tag, scope);\n    metrics = new MetricsMap((detailed, map) -> {\n      if (importer != null) {\n        DocBuilder.Statistics cumulative = importer.cumulativeStatistics;\n\n        map.put(\"Status\", importer.getStatus().toString());\n\n        if (importer.docBuilder != null) {\n          DocBuilder.Statistics running = importer.docBuilder.importStatistics;\n          map.put(\"Documents Processed\", running.docCount);\n          map.put(\"Requests made to DataSource\", running.queryCount);\n          map.put(\"Rows Fetched\", running.rowsCount);\n          map.put(\"Documents Deleted\", running.deletedDocCount);\n          map.put(\"Documents Skipped\", running.skipDocCount);\n        }\n\n        map.put(DataImporter.MSG.TOTAL_DOC_PROCESSED, cumulative.docCount);\n        map.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED, cumulative.queryCount);\n        map.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED, cumulative.rowsCount);\n        map.put(DataImporter.MSG.TOTAL_DOCS_DELETED, cumulative.deletedDocCount);\n        map.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED, cumulative.skipDocCount);\n      }\n    });\n    manager.registerGauge(this, registryName, metrics, tag, true, \"importer\", getCategory().toString(), scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetrics m) {\n    super.initializeMetrics(m);\n    metrics = new MetricsMap((detailed, map) -> {\n      if (importer != null) {\n        DocBuilder.Statistics cumulative = importer.cumulativeStatistics;\n\n        map.put(\"Status\", importer.getStatus().toString());\n\n        if (importer.docBuilder != null) {\n          DocBuilder.Statistics running = importer.docBuilder.importStatistics;\n          map.put(\"Documents Processed\", running.docCount);\n          map.put(\"Requests made to DataSource\", running.queryCount);\n          map.put(\"Rows Fetched\", running.rowsCount);\n          map.put(\"Documents Deleted\", running.deletedDocCount);\n          map.put(\"Documents Skipped\", running.skipDocCount);\n        }\n\n        map.put(DataImporter.MSG.TOTAL_DOC_PROCESSED, cumulative.docCount);\n        map.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED, cumulative.queryCount);\n        map.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED, cumulative.rowsCount);\n        map.put(DataImporter.MSG.TOTAL_DOCS_DELETED, cumulative.deletedDocCount);\n        map.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED, cumulative.skipDocCount);\n      }\n    });\n    solrMetrics.gauge(this, metrics, true, \"importer\", getCategory().toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"52275555c0ae3b55430cef26ad7fca3f02440944":["a117d95183986014a31f25bb04e5464ca06d6068","17c468812fc0c60f3d66b176339dc70564d8c3cb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a117d95183986014a31f25bb04e5464ca06d6068":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"17c468812fc0c60f3d66b176339dc70564d8c3cb":["a117d95183986014a31f25bb04e5464ca06d6068"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["52275555c0ae3b55430cef26ad7fca3f02440944"]},"commit2Childs":{"52275555c0ae3b55430cef26ad7fca3f02440944":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a117d95183986014a31f25bb04e5464ca06d6068"],"a117d95183986014a31f25bb04e5464ca06d6068":["52275555c0ae3b55430cef26ad7fca3f02440944","17c468812fc0c60f3d66b176339dc70564d8c3cb"],"17c468812fc0c60f3d66b176339dc70564d8c3cb":["52275555c0ae3b55430cef26ad7fca3f02440944"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}