{"path":"solr/core/src/java/org/apache/solr/update/HdfsUpdateLog#clearLog(SolrCore,PluginInfo).mjava","commits":[{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/HdfsUpdateLog#clearLog(SolrCore,PluginInfo).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Clears the logs on the file system. Only call before init.\n   * \n   * @param core the SolrCore\n   * @param ulogPluginInfo the init info for the UpdateHandler\n   */\n  @Override\n  public void clearLog(SolrCore core, PluginInfo ulogPluginInfo) {\n    if (ulogPluginInfo == null) return;\n    Path tlogDir = new Path(getTlogDir(core, ulogPluginInfo));\n    try {\n      if (fs.exists(tlogDir)) {\n        String[] files = getLogList(tlogDir);\n        for (String file : files) {\n          Path f = new Path(tlogDir, file);\n          boolean s = fs.delete(f, false);\n          if (!s) {\n            log.error(\"Could not remove tlog file:\" + f);\n          }\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/HdfsUpdateLog#clearLog(SolrCore,PluginInfo).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Clears the logs on the file system. Only call before init.\n   * \n   * @param core the SolrCore\n   * @param ulogPluginInfo the init info for the UpdateHandler\n   */\n  @Override\n  public void clearLog(SolrCore core, PluginInfo ulogPluginInfo) {\n    if (ulogPluginInfo == null) return;\n    Path tlogDir = new Path(getTlogDir(core, ulogPluginInfo));\n    try {\n      if (fs.exists(tlogDir)) {\n        String[] files = getLogList(tlogDir);\n        for (String file : files) {\n          Path f = new Path(tlogDir, file);\n          boolean s = fs.delete(f, false);\n          if (!s) {\n            log.error(\"Could not remove tlog file:\" + f);\n          }\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad7bdba3e91cf3373cda2e52239cb761fc0b452","date":1408019547,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/HdfsUpdateLog#clearLog(SolrCore,PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/HdfsUpdateLog#clearLog(SolrCore,PluginInfo).mjava","sourceNew":"  /**\n   * Clears the logs on the file system. Only call before init.\n   * \n   * @param core the SolrCore\n   * @param ulogPluginInfo the init info for the UpdateHandler\n   */\n  @Override\n  public void clearLog(SolrCore core, PluginInfo ulogPluginInfo) {\n    if (ulogPluginInfo == null) return;\n    Path tlogDir = new Path(getTlogDir(core, ulogPluginInfo));\n    try {\n      if (fs != null && fs.exists(tlogDir)) {\n        String[] files = getLogList(tlogDir);\n        for (String file : files) {\n          Path f = new Path(tlogDir, file);\n          boolean s = fs.delete(f, false);\n          if (!s) {\n            log.error(\"Could not remove tlog file:\" + f);\n          }\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Clears the logs on the file system. Only call before init.\n   * \n   * @param core the SolrCore\n   * @param ulogPluginInfo the init info for the UpdateHandler\n   */\n  @Override\n  public void clearLog(SolrCore core, PluginInfo ulogPluginInfo) {\n    if (ulogPluginInfo == null) return;\n    Path tlogDir = new Path(getTlogDir(core, ulogPluginInfo));\n    try {\n      if (fs.exists(tlogDir)) {\n        String[] files = getLogList(tlogDir);\n        for (String file : files) {\n          Path f = new Path(tlogDir, file);\n          boolean s = fs.delete(f, false);\n          if (!s) {\n            log.error(\"Could not remove tlog file:\" + f);\n          }\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"740d649f013f07efbeb73ca854f106c60166e7c0","date":1587431295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/HdfsUpdateLog#clearLog(SolrCore,PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/HdfsUpdateLog#clearLog(SolrCore,PluginInfo).mjava","sourceNew":"  /**\n   * Clears the logs on the file system. Only call before init.\n   * \n   * @param core the SolrCore\n   * @param ulogPluginInfo the init info for the UpdateHandler\n   */\n  @Override\n  public void clearLog(SolrCore core, PluginInfo ulogPluginInfo) {\n    if (ulogPluginInfo == null) return;\n    Path tlogDir = new Path(getTlogDir(core, ulogPluginInfo));\n    try {\n      if (fs != null && fs.exists(tlogDir)) {\n        String[] files = getLogList(tlogDir);\n        for (String file : files) {\n          Path f = new Path(tlogDir, file);\n          boolean s = fs.delete(f, false);\n          if (!s) {\n            log.error(\"Could not remove tlog file:{}\", f);\n          }\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Clears the logs on the file system. Only call before init.\n   * \n   * @param core the SolrCore\n   * @param ulogPluginInfo the init info for the UpdateHandler\n   */\n  @Override\n  public void clearLog(SolrCore core, PluginInfo ulogPluginInfo) {\n    if (ulogPluginInfo == null) return;\n    Path tlogDir = new Path(getTlogDir(core, ulogPluginInfo));\n    try {\n      if (fs != null && fs.exists(tlogDir)) {\n        String[] files = getLogList(tlogDir);\n        for (String file : files) {\n          Path f = new Path(tlogDir, file);\n          boolean s = fs.delete(f, false);\n          if (!s) {\n            log.error(\"Could not remove tlog file:\" + f);\n          }\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"740d649f013f07efbeb73ca854f106c60166e7c0":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"0ad7bdba3e91cf3373cda2e52239cb761fc0b452":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["740d649f013f07efbeb73ca854f106c60166e7c0"]},"commit2Childs":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["37a0f60745e53927c4c876cfe5b5a58170f0646c","0ad7bdba3e91cf3373cda2e52239cb761fc0b452"],"740d649f013f07efbeb73ca854f106c60166e7c0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"0ad7bdba3e91cf3373cda2e52239cb761fc0b452":["740d649f013f07efbeb73ca854f106c60166e7c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["849494cf2f3a96af5c8c84995108ddd8456fcd04","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}