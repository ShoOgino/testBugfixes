{"path":"lucene/core/src/java/org/apache/lucene/index/CompositeReader#getSequentialSubReaders().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CompositeReader#getSequentialSubReaders().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CompositeReader#getSequentialSubReaders().mjava","sourceNew":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of. It contrast to previous\n   *  Lucene versions may not return null.\n   *  If this method returns an empty array, that means this\n   *  reader is a null reader (for example a MultiReader\n   *  that has no sub readers).\n   */\n  public abstract IndexReader[] getSequentialSubReaders();\n\n","sourceOld":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of. It contrast to previous\n   *  Lucene versions may not return null.\n   *  If this method returns an empty array, that means this\n   *  reader is a null reader (for example a MultiReader\n   *  that has no sub readers).\n   */\n  public abstract IndexReader[] getSequentialSubReaders();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55fd9dcf98ceb0c5bf520ec1a7985676384b8747","date":1331629546,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CompositeReader#getSequentialSubReaders().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CompositeReader#getSequentialSubReaders().mjava","sourceNew":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of. It contrast to previous\n   *  Lucene versions may not return null.\n   *  If this method returns an empty array, that means this\n   *  reader is a null reader (for example a MultiReader\n   *  that has no sub readers).\n   *  <p><b>Warning:</b> Don't modify the returned array!\n   *  Doing so will corrupt the internal structure of this\n   *  {@code CompositeReader}.\n   */\n  public abstract IndexReader[] getSequentialSubReaders();\n\n","sourceOld":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of. It contrast to previous\n   *  Lucene versions may not return null.\n   *  If this method returns an empty array, that means this\n   *  reader is a null reader (for example a MultiReader\n   *  that has no sub readers).\n   */\n  public abstract IndexReader[] getSequentialSubReaders();\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CompositeReader#getSequentialSubReaders().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CompositeReader#getSequentialSubReaders().mjava","sourceNew":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of. It contrast to previous\n   *  Lucene versions may not return null.\n   *  If this method returns an empty array, that means this\n   *  reader is a null reader (for example a MultiReader\n   *  that has no sub readers).\n   *  <p><b>Warning:</b> Don't modify the returned array!\n   *  Doing so will corrupt the internal structure of this\n   *  {@code CompositeReader}.\n   */\n  public abstract IndexReader[] getSequentialSubReaders();\n\n","sourceOld":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of. It contrast to previous\n   *  Lucene versions may not return null.\n   *  If this method returns an empty array, that means this\n   *  reader is a null reader (for example a MultiReader\n   *  that has no sub readers).\n   */\n  public abstract IndexReader[] getSequentialSubReaders();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CompositeReader#getSequentialSubReaders().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CompositeReader#getSequentialSubReaders().mjava","sourceNew":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of. It contrast to previous\n   *  Lucene versions may not return null.\n   *  If this method returns an empty array, that means this\n   *  reader is a null reader (for example a MultiReader\n   *  that has no sub readers).\n   */\n  public abstract List<? extends IndexReader> getSequentialSubReaders();\n\n","sourceOld":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of. It contrast to previous\n   *  Lucene versions may not return null.\n   *  If this method returns an empty array, that means this\n   *  reader is a null reader (for example a MultiReader\n   *  that has no sub readers).\n   *  <p><b>Warning:</b> Don't modify the returned array!\n   *  Doing so will corrupt the internal structure of this\n   *  {@code CompositeReader}.\n   */\n  public abstract IndexReader[] getSequentialSubReaders();\n\n","bugFix":null,"bugIntro":["ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ced66195b26fdb1f77ee00e2a77ec6918dedd766","date":1344948886,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CompositeReader#getSequentialSubReaders().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CompositeReader#getSequentialSubReaders().mjava","sourceNew":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of. This method may not\n   *  return {@code null}.\n   *  \n   *  <p>In contrast to previous Lucene versions this method is no\n   *  longer public, code that wants to get all {@link AtomicReader}s\n   *  this composite is composed of should use {@link IndexReader#leaves()}.\n   *  \n   *  @lucene.internal\n   */\n  protected abstract List<? extends IndexReader> getSequentialSubReaders();\n\n","sourceOld":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of. It contrast to previous\n   *  Lucene versions may not return null.\n   *  If this method returns an empty array, that means this\n   *  reader is a null reader (for example a MultiReader\n   *  that has no sub readers).\n   */\n  public abstract List<? extends IndexReader> getSequentialSubReaders();\n\n","bugFix":["72eb67b05aa3b9d64968e9a9086135c2e969e681","3688ee2a200d89c6fad03ca69c9c795834ce3209","4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"40b1146cfcb60029fd03986ab893030aa5e72c1c","date":1345017710,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CompositeReader#getSequentialSubReaders().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CompositeReader#getSequentialSubReaders().mjava","sourceNew":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of. This method may not\n   *  return {@code null}.\n   *  \n   *  <p><b>NOTE:</b> In contrast to previous Lucene versions this method\n   *  is no longer public, code that wants to get all {@link AtomicReader}s\n   *  this composite is composed of should use {@link IndexReader#leaves()}.\n   * @see IndexReader#leaves()\n   */\n  protected abstract List<? extends IndexReader> getSequentialSubReaders();\n\n","sourceOld":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of. This method may not\n   *  return {@code null}.\n   *  \n   *  <p>In contrast to previous Lucene versions this method is no\n   *  longer public, code that wants to get all {@link AtomicReader}s\n   *  this composite is composed of should use {@link IndexReader#leaves()}.\n   *  \n   *  @lucene.internal\n   */\n  protected abstract List<? extends IndexReader> getSequentialSubReaders();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CompositeReader#getSequentialSubReaders().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CompositeReader#getSequentialSubReaders().mjava","sourceNew":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of. This method may not\n   *  return {@code null}.\n   *  \n   *  <p><b>NOTE:</b> In contrast to previous Lucene versions this method\n   *  is no longer public, code that wants to get all {@link AtomicReader}s\n   *  this composite is composed of should use {@link IndexReader#leaves()}.\n   * @see IndexReader#leaves()\n   */\n  protected abstract List<? extends IndexReader> getSequentialSubReaders();\n\n","sourceOld":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of. It contrast to previous\n   *  Lucene versions may not return null.\n   *  If this method returns an empty array, that means this\n   *  reader is a null reader (for example a MultiReader\n   *  that has no sub readers).\n   */\n  public abstract List<? extends IndexReader> getSequentialSubReaders();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c188105a9aae04f56c24996f98f8333fc825d2e","date":1345031914,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CompositeReader#getSequentialSubReaders().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CompositeReader#getSequentialSubReaders().mjava","sourceNew":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of. This method may not\n   *  return {@code null}.\n   *  \n   *  <p><b>NOTE:</b> In contrast to previous Lucene versions this method\n   *  is no longer public, code that wants to get all {@link AtomicReader}s\n   *  this composite is composed of should use {@link IndexReader#leaves()}.\n   * @see IndexReader#leaves()\n   */\n  protected abstract List<? extends IndexReader> getSequentialSubReaders();\n\n","sourceOld":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of. It contrast to previous\n   *  Lucene versions may not return null.\n   *  If this method returns an empty array, that means this\n   *  reader is a null reader (for example a MultiReader\n   *  that has no sub readers).\n   */\n  public abstract List<? extends IndexReader> getSequentialSubReaders();\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c93396a1df03720cb20e2c2f513a6fa59b21e4c","date":1345032673,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CompositeReader#getSequentialSubReaders().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CompositeReader#getSequentialSubReaders().mjava","sourceNew":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of. It contrast to previous\n   *  Lucene versions may not return null.\n   *  If this method returns an empty array, that means this\n   *  reader is a null reader (for example a MultiReader\n   *  that has no sub readers).\n   */\n  public abstract List<? extends IndexReader> getSequentialSubReaders();\n\n","sourceOld":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of. This method may not\n   *  return {@code null}.\n   *  \n   *  <p><b>NOTE:</b> In contrast to previous Lucene versions this method\n   *  is no longer public, code that wants to get all {@link AtomicReader}s\n   *  this composite is composed of should use {@link IndexReader#leaves()}.\n   * @see IndexReader#leaves()\n   */\n  protected abstract List<? extends IndexReader> getSequentialSubReaders();\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CompositeReader#getSequentialSubReaders().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CompositeReader#getSequentialSubReaders().mjava","sourceNew":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of. This method may not\n   *  return {@code null}.\n   *  \n   *  <p><b>NOTE:</b> In contrast to previous Lucene versions this method\n   *  is no longer public, code that wants to get all {@link AtomicReader}s\n   *  this composite is composed of should use {@link IndexReader#leaves()}.\n   * @see IndexReader#leaves()\n   */\n  protected abstract List<? extends IndexReader> getSequentialSubReaders();\n\n","sourceOld":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of. It contrast to previous\n   *  Lucene versions may not return null.\n   *  If this method returns an empty array, that means this\n   *  reader is a null reader (for example a MultiReader\n   *  that has no sub readers).\n   */\n  public abstract List<? extends IndexReader> getSequentialSubReaders();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CompositeReader#getSequentialSubReaders().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CompositeReader#getSequentialSubReaders().mjava","sourceNew":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of. This method may not\n   *  return {@code null}.\n   *  \n   *  <p><b>NOTE:</b> In contrast to previous Lucene versions this method\n   *  is no longer public, code that wants to get all {@link LeafReader}s\n   *  this composite is composed of should use {@link IndexReader#leaves()}.\n   * @see IndexReader#leaves()\n   */\n  protected abstract List<? extends IndexReader> getSequentialSubReaders();\n\n","sourceOld":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of. This method may not\n   *  return {@code null}.\n   *  \n   *  <p><b>NOTE:</b> In contrast to previous Lucene versions this method\n   *  is no longer public, code that wants to get all {@link AtomicReader}s\n   *  this composite is composed of should use {@link IndexReader#leaves()}.\n   * @see IndexReader#leaves()\n   */\n  protected abstract List<? extends IndexReader> getSequentialSubReaders();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","55fd9dcf98ceb0c5bf520ec1a7985676384b8747"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["55fd9dcf98ceb0c5bf520ec1a7985676384b8747"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c","40b1146cfcb60029fd03986ab893030aa5e72c1c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","40b1146cfcb60029fd03986ab893030aa5e72c1c"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["40b1146cfcb60029fd03986ab893030aa5e72c1c"],"40b1146cfcb60029fd03986ab893030aa5e72c1c":["ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"55fd9dcf98ceb0c5bf520ec1a7985676384b8747":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ced66195b26fdb1f77ee00e2a77ec6918dedd766":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"3c188105a9aae04f56c24996f98f8333fc825d2e":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["3c188105a9aae04f56c24996f98f8333fc825d2e","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["38e3b736c7ca086d61b7dbb841c905ee115490da","55fd9dcf98ceb0c5bf520ec1a7985676384b8747"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"40b1146cfcb60029fd03986ab893030aa5e72c1c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"55fd9dcf98ceb0c5bf520ec1a7985676384b8747":["38e3b736c7ca086d61b7dbb841c905ee115490da","4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"ced66195b26fdb1f77ee00e2a77ec6918dedd766":["40b1146cfcb60029fd03986ab893030aa5e72c1c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}