{"path":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#getConvertedValueSource(String,RawCurrencyValueSource).mjava","commits":[{"id":"f107636c2cc82350a2607d774c092da5b73152e5","date":1498227268,"type":1,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#getConvertedValueSource(String,RawCurrencyValueSource).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField#getConvertedValueSource(String,RawCurrencyValueSource).mjava","sourceNew":"  /**\n   * <p>\n   * Returns a ValueSource over this field in which the numeric value for \n   * each document represents the value from the underlying \n   * <code>RawCurrencyValueSource</code> as converted to the specified target \n   * Currency.\n   * </p>\n   * <p>\n   * For example: If the <code>targetCurrencyCode</code> param is set to\n   * <code>USD</code>, then the values returned by this value source would \n   * represent the equivilent number of dollars after converting each \n   * document's raw value to <code>USD</code>.  So for a document whose \n   * indexed value was currently equivilent to \"<code>5.43,USD</code>\" \n   * using the the exchange provider for this field, this ValueSource would \n   * return a value of \"<code>5.43</code>\"\n   * </p>\n   *\n   * @param targetCurrencyCode The target currency for the resulting value source, if null the defaultCurrency for this field type will be used\n   * @param source the raw ValueSource to wrap\n   * @see #PARAM_DEFAULT_CURRENCY\n   * @see #DEFAULT_DEFAULT_CURRENCY\n   * @see #getValueSource\n   */\n  public ValueSource getConvertedValueSource(String targetCurrencyCode,\n                                             RawCurrencyValueSource source) {\n    if (null == targetCurrencyCode) {\n      targetCurrencyCode = defaultCurrency;\n    }\n    return new ConvertedCurrencyValueSource(targetCurrencyCode,\n        source);\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns a ValueSource over this field in which the numeric value for \n   * each document represents the value from the underlying \n   * <code>RawCurrencyValueSource</code> as converted to the specified target \n   * Currency.\n   * </p>\n   * <p>\n   * For example: If the <code>targetCurrencyCode</code> param is set to\n   * <code>USD</code>, then the values returned by this value source would \n   * represent the equivilent number of dollars after converting each \n   * document's raw value to <code>USD</code>.  So for a document whose \n   * indexed value was currently equivilent to \"<code>5.43,USD</code>\" \n   * using the the exchange provider for this field, this ValueSource would \n   * return a value of \"<code>5.43</code>\"\n   * </p>\n   *\n   * @param targetCurrencyCode The target currency for the resulting value source, if null the defaultCurrency for this field type will be used\n   * @param source the raw ValueSource to wrap\n   * @see #PARAM_DEFAULT_CURRENCY\n   * @see #DEFAULT_DEFAULT_CURRENCY\n   * @see #getValueSource\n   */\n  public ValueSource getConvertedValueSource(String targetCurrencyCode, \n                                             RawCurrencyValueSource source) {\n    if (null == targetCurrencyCode) { \n      targetCurrencyCode = defaultCurrency; \n    }\n    return new ConvertedCurrencyValueSource(targetCurrencyCode, \n                                            source);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#getConvertedValueSource(String,RawCurrencyValueSource).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField#getConvertedValueSource(String,RawCurrencyValueSource).mjava","sourceNew":"  /**\n   * <p>\n   * Returns a ValueSource over this field in which the numeric value for \n   * each document represents the value from the underlying \n   * <code>RawCurrencyValueSource</code> as converted to the specified target \n   * Currency.\n   * </p>\n   * <p>\n   * For example: If the <code>targetCurrencyCode</code> param is set to\n   * <code>USD</code>, then the values returned by this value source would \n   * represent the equivilent number of dollars after converting each \n   * document's raw value to <code>USD</code>.  So for a document whose \n   * indexed value was currently equivilent to \"<code>5.43,USD</code>\" \n   * using the the exchange provider for this field, this ValueSource would \n   * return a value of \"<code>5.43</code>\"\n   * </p>\n   *\n   * @param targetCurrencyCode The target currency for the resulting value source, if null the defaultCurrency for this field type will be used\n   * @param source the raw ValueSource to wrap\n   * @see #PARAM_DEFAULT_CURRENCY\n   * @see #DEFAULT_DEFAULT_CURRENCY\n   * @see #getValueSource\n   */\n  public ValueSource getConvertedValueSource(String targetCurrencyCode,\n                                             RawCurrencyValueSource source) {\n    if (null == targetCurrencyCode) {\n      targetCurrencyCode = defaultCurrency;\n    }\n    return new ConvertedCurrencyValueSource(targetCurrencyCode,\n        source);\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns a ValueSource over this field in which the numeric value for \n   * each document represents the value from the underlying \n   * <code>RawCurrencyValueSource</code> as converted to the specified target \n   * Currency.\n   * </p>\n   * <p>\n   * For example: If the <code>targetCurrencyCode</code> param is set to\n   * <code>USD</code>, then the values returned by this value source would \n   * represent the equivilent number of dollars after converting each \n   * document's raw value to <code>USD</code>.  So for a document whose \n   * indexed value was currently equivilent to \"<code>5.43,USD</code>\" \n   * using the the exchange provider for this field, this ValueSource would \n   * return a value of \"<code>5.43</code>\"\n   * </p>\n   *\n   * @param targetCurrencyCode The target currency for the resulting value source, if null the defaultCurrency for this field type will be used\n   * @param source the raw ValueSource to wrap\n   * @see #PARAM_DEFAULT_CURRENCY\n   * @see #DEFAULT_DEFAULT_CURRENCY\n   * @see #getValueSource\n   */\n  public ValueSource getConvertedValueSource(String targetCurrencyCode, \n                                             RawCurrencyValueSource source) {\n    if (null == targetCurrencyCode) { \n      targetCurrencyCode = defaultCurrency; \n    }\n    return new ConvertedCurrencyValueSource(targetCurrencyCode, \n                                            source);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#getConvertedValueSource(String,RawCurrencyValueSource).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * <p>\n   * Returns a ValueSource over this field in which the numeric value for \n   * each document represents the value from the underlying \n   * <code>RawCurrencyValueSource</code> as converted to the specified target \n   * Currency.\n   * </p>\n   * <p>\n   * For example: If the <code>targetCurrencyCode</code> param is set to\n   * <code>USD</code>, then the values returned by this value source would \n   * represent the equivilent number of dollars after converting each \n   * document's raw value to <code>USD</code>.  So for a document whose \n   * indexed value was currently equivilent to \"<code>5.43,USD</code>\" \n   * using the the exchange provider for this field, this ValueSource would \n   * return a value of \"<code>5.43</code>\"\n   * </p>\n   *\n   * @param targetCurrencyCode The target currency for the resulting value source, if null the defaultCurrency for this field type will be used\n   * @param source the raw ValueSource to wrap\n   * @see #PARAM_DEFAULT_CURRENCY\n   * @see #DEFAULT_DEFAULT_CURRENCY\n   * @see #getValueSource\n   */\n  public ValueSource getConvertedValueSource(String targetCurrencyCode,\n                                             RawCurrencyValueSource source) {\n    if (null == targetCurrencyCode) {\n      targetCurrencyCode = defaultCurrency;\n    }\n    return new ConvertedCurrencyValueSource(targetCurrencyCode,\n        source);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9f4251f14d2db68330fc1e6f0495c053a905d560","date":1537116380,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#getConvertedValueSource(String,RawCurrencyValueSource).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#getConvertedValueSource(String,RawCurrencyValueSource).mjava","sourceNew":"  /**\n   * <p>\n   * Returns a ValueSource over this field in which the numeric value for \n   * each document represents the value from the underlying \n   * <code>RawCurrencyValueSource</code> as converted to the specified target \n   * Currency.\n   * </p>\n   * <p>\n   * For example: If the <code>targetCurrencyCode</code> param is set to\n   * <code>USD</code>, then the values returned by this value source would \n   * represent the equivalent number of dollars after converting each\n   * document's raw value to <code>USD</code>.  So for a document whose \n   * indexed value was currently equivalent to \"<code>5.43,USD</code>\"\n   * using the the exchange provider for this field, this ValueSource would \n   * return a value of \"<code>5.43</code>\"\n   * </p>\n   *\n   * @param targetCurrencyCode The target currency for the resulting value source, if null the defaultCurrency for this field type will be used\n   * @param source the raw ValueSource to wrap\n   * @see #PARAM_DEFAULT_CURRENCY\n   * @see #DEFAULT_DEFAULT_CURRENCY\n   * @see #getValueSource\n   */\n  public ValueSource getConvertedValueSource(String targetCurrencyCode,\n                                             RawCurrencyValueSource source) {\n    if (null == targetCurrencyCode) {\n      targetCurrencyCode = defaultCurrency;\n    }\n    return new ConvertedCurrencyValueSource(targetCurrencyCode,\n        source);\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns a ValueSource over this field in which the numeric value for \n   * each document represents the value from the underlying \n   * <code>RawCurrencyValueSource</code> as converted to the specified target \n   * Currency.\n   * </p>\n   * <p>\n   * For example: If the <code>targetCurrencyCode</code> param is set to\n   * <code>USD</code>, then the values returned by this value source would \n   * represent the equivilent number of dollars after converting each \n   * document's raw value to <code>USD</code>.  So for a document whose \n   * indexed value was currently equivilent to \"<code>5.43,USD</code>\" \n   * using the the exchange provider for this field, this ValueSource would \n   * return a value of \"<code>5.43</code>\"\n   * </p>\n   *\n   * @param targetCurrencyCode The target currency for the resulting value source, if null the defaultCurrency for this field type will be used\n   * @param source the raw ValueSource to wrap\n   * @see #PARAM_DEFAULT_CURRENCY\n   * @see #DEFAULT_DEFAULT_CURRENCY\n   * @see #getValueSource\n   */\n  public ValueSource getConvertedValueSource(String targetCurrencyCode,\n                                             RawCurrencyValueSource source) {\n    if (null == targetCurrencyCode) {\n      targetCurrencyCode = defaultCurrency;\n    }\n    return new ConvertedCurrencyValueSource(targetCurrencyCode,\n        source);\n  }\n\n","bugFix":["8af63063406a531a215fa9c65fae3eee06bc7ab3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9f4251f14d2db68330fc1e6f0495c053a905d560":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f107636c2cc82350a2607d774c092da5b73152e5"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f107636c2cc82350a2607d774c092da5b73152e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9f4251f14d2db68330fc1e6f0495c053a905d560"],"f107636c2cc82350a2607d774c092da5b73152e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9f4251f14d2db68330fc1e6f0495c053a905d560":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","f107636c2cc82350a2607d774c092da5b73152e5"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["9f4251f14d2db68330fc1e6f0495c053a905d560"],"f107636c2cc82350a2607d774c092da5b73152e5":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}