{"path":"src/test/org/apache/solr/handler/SpellCheckerRequestHandlerTest#testSpellCheck_03_multiWords_correctWords().mjava","commits":[{"id":"071bae97f774d86dca206e837de23a56b71c8b29","date":1194291554,"type":0,"author":"Mike Klaas","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/SpellCheckerRequestHandlerTest#testSpellCheck_03_multiWords_correctWords().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test for correct spelling of a single word at various accuracy levels\n   * to see how the suggestions vary.\n   */\n  public void testSpellCheck_03_multiWords_correctWords() {\n    \n    buildSpellCheckIndex();\n\n    lrf = h.getRequestFactory(\"spellchecker\", 0, 20 );\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"sp.query.accuracy\",\".9\");\n    \n    assertQ(\"Confirm the index is still valid\",\n            req(\"cat\")\n            ,\"//str[@name='words'][.='cat']\"\n            ,\"//str[@name='exist'][.='true']\"\n            );\n    \n    \n    // Enable multiWords formatting:\n    lrf.args.put(\"sp.query.extendedResults\", \"true\");\n    \n    \n    assertQ(\"Failed to spell check\",\n            req(\"cat\")\n            ,\"//lst[@name='cat']\"\n            ,\"//lst[@name='cat']/int[@name='frequency'][.>0]\"\n            ,\"//lst[@name='cat']/lst[@name='suggestions' and count(lst)=0]\"\n            );\n    \n \n    // Please note that the following produces the following XML structure.\n    //  <response>\n    //    <responseHeader>\n    //      <status>0</status><QTime>0</QTime>\n    //    </responseHeader>\n    //    <lst name=\"result\">\n    //      <lst name=\"cat\">\n    //        <int name=\"frequency\">1</int>\n    //        <lst name=\"suggestions\">\n    //          <lst name=\"cart\"><int name=\"frequency\">1</int></lst>\n    //          <lst name=\"cot\"><int name=\"frequency\">1</int></lst>\n    //          <lst name=\"cod\"><int name=\"frequency\">1</int></lst>\n    //          <lst name=\"carp\"><int name=\"frequency\">1</int></lst>\n    //        </lst>\n    //      </lst>\n    //    </lst>\n    //  </response>\n\n\n    lrf.args.put(\"sp.query.accuracy\",\".2\");\n    assertQ(\"Failed to spell check\",\n            req(\"cat\")\n            ,\"//lst[@name='cat']\"\n            ,\"//lst[@name='cat']/int[@name='frequency'][.>0]\"\n            ,\"//lst[@name='cat']/lst[@name='suggestions']/lst[@name='cart']/int[@name='frequency'][.>0]\"\n            ,\"//lst[@name='cat']/lst[@name='suggestions']/lst[@name='cot']/int[@name='frequency'][.>0]\"\n            ,\"//lst[@name='cat']/lst[@name='suggestions']/lst[@name='cod']/int[@name='frequency'][.>0]\"\n            ,\"//lst[@name='cat']/lst[@name='suggestions']/lst[@name='carp']/int[@name='frequency'][.>0]\"\n            );\n\n    lrf.args.put(\"sp.query.suggestionCount\", \"2\");\n    lrf.args.put(\"sp.query.accuracy\",\".2\");\n    assertQ(\"Failed to spell check\",\n            req(\"cat\")\n            ,\"//lst[@name='cat']\"\n            ,\"//lst[@name='cat']/int[@name='frequency'][.>0]\"\n            ,\"//lst[@name='cat']/lst[@name='suggestions']/lst[@name='cart']\"\n            ,\"//lst[@name='cat']/lst[@name='suggestions']/lst[@name='cot']\"\n            );\n\n    /* The following is the generated XML response for the next query with three words:\n      <response>\n        <responseHeader><status>0</status><QTime>0</QTime></responseHeader>\n        <lst name=\"result\">\n          <lst name=\"cat\">\n            <int name=\"frequency\">1</int>\n            <lst name=\"suggestions\">\n              <lst name=\"cart\"><int name=\"frequency\">1</int></lst>\n              <lst name=\"cot\"><int name=\"frequency\">1</int></lst>\n            </lst>\n          </lst>\n          <lst name=\"card\">\n            <int name=\"frequency\">1</int>\n            <lst name=\"suggestions\">\n              <lst name=\"carp\"><int name=\"frequency\">1</int></lst>\n              <lst name=\"cat\"><int name=\"frequency\">1</int></lst>\n            </lst>\n          </lst>\n          <lst name=\"carp\">\n            <int name=\"frequency\">1</int>\n            <lst name=\"suggestions\">\n              <lst name=\"cart\"><int name=\"frequency\">1</int></lst>\n              <lst name=\"corn\"><int name=\"frequency\">1</int></lst>\n            </lst>\n          </lst>\n        </lst>\n      </response>\n    */\n\n    lrf.args.put(\"sp.query.suggestionCount\", \"2\");\n    lrf.args.put(\"sp.query.accuracy\",\".2\");\n    assertQ(\"Failed to spell check\",\n        req(\"cat cart carp\")\n        ,\"//lst[@name='cat']\"\n        ,\"//lst[@name='cat']/int[@name='frequency'][.>0]\"\n        ,\"//lst[@name='cat']/lst[@name='suggestions']/lst[@name='cart']\"\n        ,\"//lst[@name='cat']/lst[@name='suggestions']/lst[@name='cot']\"\n\n        ,\"//lst[@name='cart']\"\n        ,\"//lst[@name='cart']/int[@name='frequency'][.>0]\"\n        ,\"//lst[@name='cart']/lst/lst[1]\"\n        ,\"//lst[@name='cart']/lst/lst[2]\"\n\n        ,\"//lst[@name='carp']\"\n        ,\"//lst[@name='carp']/int[@name='frequency'][.>0]\"\n        ,\"//lst[@name='carp']/lst[@name='suggestions']/lst[@name='cart']\"\n        ,\"//lst[@name='carp']/lst[@name='suggestions']/lst[@name='corn']\"\n\n    );\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560d9ff06b001421d5b77a46b7595c913deef74e","date":1195092229,"type":3,"author":"Mike Klaas","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/SpellCheckerRequestHandlerTest#testSpellCheck_03_multiWords_correctWords().mjava","pathOld":"src/test/org/apache/solr/handler/SpellCheckerRequestHandlerTest#testSpellCheck_03_multiWords_correctWords().mjava","sourceNew":"  /**\n   * Test for correct spelling of a single word at various accuracy levels\n   * to see how the suggestions vary.\n   */\n  public void testSpellCheck_03_multiWords_correctWords() {\n    \n    buildSpellCheckIndex();\n\n    lrf = h.getRequestFactory(\"spellchecker\", 0, 20 );\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"sp.query.accuracy\",\".9\");\n    \n    assertQ(\"Confirm the index is still valid\",\n            req(\"cat\")\n            ,\"//str[@name='words'][.='cat']\"\n            ,\"//str[@name='exist'][.='true']\"\n            );\n    \n    \n    // Enable multiWords formatting:\n    lrf.args.put(\"sp.query.extendedResults\", \"true\");\n    \n    \n    assertQ(\"Failed to spell check\",\n            req(\"cat\")\n            ,\"//int[@name='numDocs'][.=10]\"\n            ,\"//lst[@name='cat']\"\n            ,\"//lst[@name='cat']/int[@name='frequency'][.>0]\"\n            ,\"//lst[@name='cat']/lst[@name='suggestions' and count(lst)=0]\"\n            );\n    \n \n    // Please note that the following produces the following XML structure.\n    //  <response>\n    //    <responseHeader>\n    //      <status>0</status><QTime>0</QTime>\n    //    </responseHeader>\n    //    <lst name=\"result\">\n    //      <lst name=\"cat\">\n    //        <int name=\"frequency\">1</int>\n    //        <lst name=\"suggestions\">\n    //          <lst name=\"cart\"><int name=\"frequency\">1</int></lst>\n    //          <lst name=\"cot\"><int name=\"frequency\">1</int></lst>\n    //          <lst name=\"cod\"><int name=\"frequency\">1</int></lst>\n    //          <lst name=\"carp\"><int name=\"frequency\">1</int></lst>\n    //        </lst>\n    //      </lst>\n    //    </lst>\n    //  </response>\n\n\n    lrf.args.put(\"sp.query.accuracy\",\".2\");\n    assertQ(\"Failed to spell check\",\n            req(\"cat\")\n            ,\"//int[@name='numDocs'][.=10]\"\n            ,\"//lst[@name='cat']\"\n            ,\"//lst[@name='cat']/int[@name='frequency'][.>0]\"\n            ,\"//lst[@name='cat']/lst[@name='suggestions']/lst[@name='cart']/int[@name='frequency'][.>0]\"\n            ,\"//lst[@name='cat']/lst[@name='suggestions']/lst[@name='cot']/int[@name='frequency'][.>0]\"\n            ,\"//lst[@name='cat']/lst[@name='suggestions']/lst[@name='cod']/int[@name='frequency'][.>0]\"\n            ,\"//lst[@name='cat']/lst[@name='suggestions']/lst[@name='carp']/int[@name='frequency'][.>0]\"\n            );\n\n    lrf.args.put(\"sp.query.suggestionCount\", \"2\");\n    lrf.args.put(\"sp.query.accuracy\",\".2\");\n    assertQ(\"Failed to spell check\",\n            req(\"cat\")\n            ,\"//lst[@name='cat']\"\n            ,\"//lst[@name='cat']/int[@name='frequency'][.>0]\"\n            ,\"//lst[@name='cat']/lst[@name='suggestions']/lst[@name='cart']\"\n            ,\"//lst[@name='cat']/lst[@name='suggestions']/lst[@name='cot']\"\n            );\n\n    /* The following is the generated XML response for the next query with three words:\n      <response>\n        <responseHeader><status>0</status><QTime>0</QTime></responseHeader>\n        <int name=\"numDocs\">10</int>\n        <lst name=\"result\">\n          <lst name=\"cat\">\n            <int name=\"frequency\">1</int>\n            <lst name=\"suggestions\">\n              <lst name=\"cart\"><int name=\"frequency\">1</int></lst>\n              <lst name=\"cot\"><int name=\"frequency\">1</int></lst>\n            </lst>\n          </lst>\n          <lst name=\"card\">\n            <int name=\"frequency\">1</int>\n            <lst name=\"suggestions\">\n              <lst name=\"carp\"><int name=\"frequency\">1</int></lst>\n              <lst name=\"cat\"><int name=\"frequency\">1</int></lst>\n            </lst>\n          </lst>\n          <lst name=\"carp\">\n            <int name=\"frequency\">1</int>\n            <lst name=\"suggestions\">\n              <lst name=\"cart\"><int name=\"frequency\">1</int></lst>\n              <lst name=\"corn\"><int name=\"frequency\">1</int></lst>\n            </lst>\n          </lst>\n        </lst>\n      </response>\n    */\n\n    lrf.args.put(\"sp.query.suggestionCount\", \"2\");\n    lrf.args.put(\"sp.query.accuracy\",\".2\");\n    assertQ(\"Failed to spell check\",\n        req(\"cat cart carp\")\n        ,\"//lst[@name='cat']\"\n        ,\"//lst[@name='cat']/int[@name='frequency'][.>0]\"\n        ,\"//lst[@name='cat']/lst[@name='suggestions']/lst[@name='cart']\"\n        ,\"//lst[@name='cat']/lst[@name='suggestions']/lst[@name='cot']\"\n\n        ,\"//lst[@name='cart']\"\n        ,\"//lst[@name='cart']/int[@name='frequency'][.>0]\"\n        ,\"//lst[@name='cart']/lst/lst[1]\"\n        ,\"//lst[@name='cart']/lst/lst[2]\"\n\n        ,\"//lst[@name='carp']\"\n        ,\"//lst[@name='carp']/int[@name='frequency'][.>0]\"\n        ,\"//lst[@name='carp']/lst[@name='suggestions']/lst[@name='cart']\"\n        ,\"//lst[@name='carp']/lst[@name='suggestions']/lst[@name='corn']\"\n\n    );\n\n  }\n\n","sourceOld":"  /**\n   * Test for correct spelling of a single word at various accuracy levels\n   * to see how the suggestions vary.\n   */\n  public void testSpellCheck_03_multiWords_correctWords() {\n    \n    buildSpellCheckIndex();\n\n    lrf = h.getRequestFactory(\"spellchecker\", 0, 20 );\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"sp.query.accuracy\",\".9\");\n    \n    assertQ(\"Confirm the index is still valid\",\n            req(\"cat\")\n            ,\"//str[@name='words'][.='cat']\"\n            ,\"//str[@name='exist'][.='true']\"\n            );\n    \n    \n    // Enable multiWords formatting:\n    lrf.args.put(\"sp.query.extendedResults\", \"true\");\n    \n    \n    assertQ(\"Failed to spell check\",\n            req(\"cat\")\n            ,\"//lst[@name='cat']\"\n            ,\"//lst[@name='cat']/int[@name='frequency'][.>0]\"\n            ,\"//lst[@name='cat']/lst[@name='suggestions' and count(lst)=0]\"\n            );\n    \n \n    // Please note that the following produces the following XML structure.\n    //  <response>\n    //    <responseHeader>\n    //      <status>0</status><QTime>0</QTime>\n    //    </responseHeader>\n    //    <lst name=\"result\">\n    //      <lst name=\"cat\">\n    //        <int name=\"frequency\">1</int>\n    //        <lst name=\"suggestions\">\n    //          <lst name=\"cart\"><int name=\"frequency\">1</int></lst>\n    //          <lst name=\"cot\"><int name=\"frequency\">1</int></lst>\n    //          <lst name=\"cod\"><int name=\"frequency\">1</int></lst>\n    //          <lst name=\"carp\"><int name=\"frequency\">1</int></lst>\n    //        </lst>\n    //      </lst>\n    //    </lst>\n    //  </response>\n\n\n    lrf.args.put(\"sp.query.accuracy\",\".2\");\n    assertQ(\"Failed to spell check\",\n            req(\"cat\")\n            ,\"//lst[@name='cat']\"\n            ,\"//lst[@name='cat']/int[@name='frequency'][.>0]\"\n            ,\"//lst[@name='cat']/lst[@name='suggestions']/lst[@name='cart']/int[@name='frequency'][.>0]\"\n            ,\"//lst[@name='cat']/lst[@name='suggestions']/lst[@name='cot']/int[@name='frequency'][.>0]\"\n            ,\"//lst[@name='cat']/lst[@name='suggestions']/lst[@name='cod']/int[@name='frequency'][.>0]\"\n            ,\"//lst[@name='cat']/lst[@name='suggestions']/lst[@name='carp']/int[@name='frequency'][.>0]\"\n            );\n\n    lrf.args.put(\"sp.query.suggestionCount\", \"2\");\n    lrf.args.put(\"sp.query.accuracy\",\".2\");\n    assertQ(\"Failed to spell check\",\n            req(\"cat\")\n            ,\"//lst[@name='cat']\"\n            ,\"//lst[@name='cat']/int[@name='frequency'][.>0]\"\n            ,\"//lst[@name='cat']/lst[@name='suggestions']/lst[@name='cart']\"\n            ,\"//lst[@name='cat']/lst[@name='suggestions']/lst[@name='cot']\"\n            );\n\n    /* The following is the generated XML response for the next query with three words:\n      <response>\n        <responseHeader><status>0</status><QTime>0</QTime></responseHeader>\n        <lst name=\"result\">\n          <lst name=\"cat\">\n            <int name=\"frequency\">1</int>\n            <lst name=\"suggestions\">\n              <lst name=\"cart\"><int name=\"frequency\">1</int></lst>\n              <lst name=\"cot\"><int name=\"frequency\">1</int></lst>\n            </lst>\n          </lst>\n          <lst name=\"card\">\n            <int name=\"frequency\">1</int>\n            <lst name=\"suggestions\">\n              <lst name=\"carp\"><int name=\"frequency\">1</int></lst>\n              <lst name=\"cat\"><int name=\"frequency\">1</int></lst>\n            </lst>\n          </lst>\n          <lst name=\"carp\">\n            <int name=\"frequency\">1</int>\n            <lst name=\"suggestions\">\n              <lst name=\"cart\"><int name=\"frequency\">1</int></lst>\n              <lst name=\"corn\"><int name=\"frequency\">1</int></lst>\n            </lst>\n          </lst>\n        </lst>\n      </response>\n    */\n\n    lrf.args.put(\"sp.query.suggestionCount\", \"2\");\n    lrf.args.put(\"sp.query.accuracy\",\".2\");\n    assertQ(\"Failed to spell check\",\n        req(\"cat cart carp\")\n        ,\"//lst[@name='cat']\"\n        ,\"//lst[@name='cat']/int[@name='frequency'][.>0]\"\n        ,\"//lst[@name='cat']/lst[@name='suggestions']/lst[@name='cart']\"\n        ,\"//lst[@name='cat']/lst[@name='suggestions']/lst[@name='cot']\"\n\n        ,\"//lst[@name='cart']\"\n        ,\"//lst[@name='cart']/int[@name='frequency'][.>0]\"\n        ,\"//lst[@name='cart']/lst/lst[1]\"\n        ,\"//lst[@name='cart']/lst/lst[2]\"\n\n        ,\"//lst[@name='carp']\"\n        ,\"//lst[@name='carp']/int[@name='frequency'][.>0]\"\n        ,\"//lst[@name='carp']/lst[@name='suggestions']/lst[@name='cart']\"\n        ,\"//lst[@name='carp']/lst[@name='suggestions']/lst[@name='corn']\"\n\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6cb56f20a24d697f7b1644a10efd05bd8365e1cd","date":1211803381,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/SpellCheckerRequestHandlerTest#testSpellCheck_03_multiWords_correctWords().mjava","pathOld":"src/test/org/apache/solr/handler/SpellCheckerRequestHandlerTest#testSpellCheck_03_multiWords_correctWords().mjava","sourceNew":"  /**\n   * Test for correct spelling of a single word at various accuracy levels\n   * to see how the suggestions vary.\n   */\n  public void testSpellCheck_03_multiWords_correctWords() {\n    \n    buildSpellCheckIndex();\n\n    lrf = h.getRequestFactory(\"spellchecker\", 0, 20 );\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"sp.query.accuracy\",\".9\");\n    \n    assertQ(\"Confirm the index is still valid\",\n            req(\"cat\")\n            ,\"//str[@name='words'][.='cat']\"\n            ,\"//str[@name='exist'][.='true']\"\n            );\n    \n    \n    // Enable multiWords formatting:\n    lrf.args.put(\"sp.query.extendedResults\", \"true\");\n    \n    \n    assertQ(\"Failed to spell check\",\n            req(\"cat\")\n            ,\"//int[@name='numDocs'][.=10]\"\n            ,\"//lst[@name='cat']\"\n            ,\"//lst[@name='cat']/int[@name='frequency'][.>0]\"\n            ,\"//lst[@name='cat']/lst[@name='suggestions']/lst[@name='cat']/int[@name='frequency'][.>0]\"\n            );\n    \n \n    // Please note that the following produces the following XML structure.\n    //  <response>\n    //    <responseHeader>\n    //      <status>0</status><QTime>0</QTime>\n    //    </responseHeader>\n    //    <lst name=\"result\">\n    //      <lst name=\"cat\">\n    //        <int name=\"frequency\">1</int>\n    //        <lst name=\"suggestions\">\n    //          <lst name=\"cart\"><int name=\"frequency\">1</int></lst>\n    //          <lst name=\"cot\"><int name=\"frequency\">1</int></lst>\n    //          <lst name=\"cod\"><int name=\"frequency\">1</int></lst>\n    //          <lst name=\"carp\"><int name=\"frequency\">1</int></lst>\n    //        </lst>\n    //      </lst>\n    //    </lst>\n    //  </response>\n\n\n    lrf.args.put(\"sp.query.accuracy\",\".2\");\n    assertQ(\"Failed to spell check\",\n            req(\"cap\")\n            ,\"//int[@name='numDocs'][.=10]\"\n            ,\"//lst[@name='cap']\"\n            ,\"//lst[@name='cap']/int[@name='frequency'][.=0]\"\n            ,\"//lst[@name='cap']/lst[@name='suggestions']/lst[@name='cat']/int[@name='frequency'][.>0]\"\n            ,\"//lst[@name='cap']/lst[@name='suggestions']/lst[@name='cart']/int[@name='frequency'][.>0]\"\n            ,\"//lst[@name='cap']/lst[@name='suggestions']/lst[@name='carp']/int[@name='frequency'][.>0]\"\n            ,\"//lst[@name='cap']/lst[@name='suggestions']/lst[@name='cot']/int[@name='frequency'][.>0]\"\n            ,\"//lst[@name='cap']/lst[@name='suggestions']/lst[@name='cod']/int[@name='frequency'][.>0]\"\n            ,\"//lst[@name='cap']/lst[@name='suggestions']/lst[@name='cant']/int[@name='frequency'][.>0]\"\n            );\n\n    lrf.args.put(\"sp.query.suggestionCount\", \"2\");\n    lrf.args.put(\"sp.query.accuracy\",\".2\");\n    assertQ(\"Failed to spell check\",\n            req(\"cap\")\n            ,\"//lst[@name='cap']\"\n            ,\"//lst[@name='cap']/int[@name='frequency'][.=0]\"\n            ,\"//lst[@name='cap']/lst[@name='suggestions']/lst[@name='carp']\"\n            ,\"//lst[@name='cap']/lst[@name='suggestions']/lst[@name='cat']\"\n            );\n\n    /* The following is the generated XML response for the next query with three words:\n      <response>\n        <responseHeader><status>0</status><QTime>0</QTime></responseHeader>\n        <int name=\"numDocs\">10</int>\n        <lst name=\"result\">\n          <lst name=\"cat\">\n            <int name=\"frequency\">1</int>\n            <lst name=\"suggestions\">\n              <lst name=\"cart\"><int name=\"frequency\">1</int></lst>\n              <lst name=\"cot\"><int name=\"frequency\">1</int></lst>\n            </lst>\n          </lst>\n          <lst name=\"card\">\n            <int name=\"frequency\">1</int>\n            <lst name=\"suggestions\">\n              <lst name=\"carp\"><int name=\"frequency\">1</int></lst>\n              <lst name=\"cat\"><int name=\"frequency\">1</int></lst>\n            </lst>\n          </lst>\n          <lst name=\"carp\">\n            <int name=\"frequency\">1</int>\n            <lst name=\"suggestions\">\n              <lst name=\"cart\"><int name=\"frequency\">1</int></lst>\n              <lst name=\"corn\"><int name=\"frequency\">1</int></lst>\n            </lst>\n          </lst>\n        </lst>\n      </response>\n    */\n\n    lrf.args.put(\"sp.query.suggestionCount\", \"2\");\n    lrf.args.put(\"sp.query.accuracy\",\".2\");\n    assertQ(\"Failed to spell check\",\n        req(\"cad cart carm\")\n        ,\"//lst[@name='cad']\"\n        ,\"//lst[@name='cad']/int[@name='frequency'][.=0]\"\n        ,\"//lst[@name='cad']/lst[@name='suggestions']/lst[@name='cat']\"\n        ,\"//lst[@name='cad']/lst[@name='suggestions']/lst[@name='cod']\"\n\n        ,\"//lst[@name='cart']\"\n        ,\"//lst[@name='cart']/int[@name='frequency'][.>0]\"\n        \n\n        ,\"//lst[@name='carm']\"\n        ,\"//lst[@name='carm']/int[@name='frequency'][.=0]\"\n        ,\"//lst[@name='carm']/lst[@name='suggestions']/lst[@name='cart']\"\n        ,\"//lst[@name='carm']/lst[@name='suggestions']/lst[@name='carp']\"\n\n    );\n\n  }\n\n","sourceOld":"  /**\n   * Test for correct spelling of a single word at various accuracy levels\n   * to see how the suggestions vary.\n   */\n  public void testSpellCheck_03_multiWords_correctWords() {\n    \n    buildSpellCheckIndex();\n\n    lrf = h.getRequestFactory(\"spellchecker\", 0, 20 );\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"sp.query.accuracy\",\".9\");\n    \n    assertQ(\"Confirm the index is still valid\",\n            req(\"cat\")\n            ,\"//str[@name='words'][.='cat']\"\n            ,\"//str[@name='exist'][.='true']\"\n            );\n    \n    \n    // Enable multiWords formatting:\n    lrf.args.put(\"sp.query.extendedResults\", \"true\");\n    \n    \n    assertQ(\"Failed to spell check\",\n            req(\"cat\")\n            ,\"//int[@name='numDocs'][.=10]\"\n            ,\"//lst[@name='cat']\"\n            ,\"//lst[@name='cat']/int[@name='frequency'][.>0]\"\n            ,\"//lst[@name='cat']/lst[@name='suggestions' and count(lst)=0]\"\n            );\n    \n \n    // Please note that the following produces the following XML structure.\n    //  <response>\n    //    <responseHeader>\n    //      <status>0</status><QTime>0</QTime>\n    //    </responseHeader>\n    //    <lst name=\"result\">\n    //      <lst name=\"cat\">\n    //        <int name=\"frequency\">1</int>\n    //        <lst name=\"suggestions\">\n    //          <lst name=\"cart\"><int name=\"frequency\">1</int></lst>\n    //          <lst name=\"cot\"><int name=\"frequency\">1</int></lst>\n    //          <lst name=\"cod\"><int name=\"frequency\">1</int></lst>\n    //          <lst name=\"carp\"><int name=\"frequency\">1</int></lst>\n    //        </lst>\n    //      </lst>\n    //    </lst>\n    //  </response>\n\n\n    lrf.args.put(\"sp.query.accuracy\",\".2\");\n    assertQ(\"Failed to spell check\",\n            req(\"cat\")\n            ,\"//int[@name='numDocs'][.=10]\"\n            ,\"//lst[@name='cat']\"\n            ,\"//lst[@name='cat']/int[@name='frequency'][.>0]\"\n            ,\"//lst[@name='cat']/lst[@name='suggestions']/lst[@name='cart']/int[@name='frequency'][.>0]\"\n            ,\"//lst[@name='cat']/lst[@name='suggestions']/lst[@name='cot']/int[@name='frequency'][.>0]\"\n            ,\"//lst[@name='cat']/lst[@name='suggestions']/lst[@name='cod']/int[@name='frequency'][.>0]\"\n            ,\"//lst[@name='cat']/lst[@name='suggestions']/lst[@name='carp']/int[@name='frequency'][.>0]\"\n            );\n\n    lrf.args.put(\"sp.query.suggestionCount\", \"2\");\n    lrf.args.put(\"sp.query.accuracy\",\".2\");\n    assertQ(\"Failed to spell check\",\n            req(\"cat\")\n            ,\"//lst[@name='cat']\"\n            ,\"//lst[@name='cat']/int[@name='frequency'][.>0]\"\n            ,\"//lst[@name='cat']/lst[@name='suggestions']/lst[@name='cart']\"\n            ,\"//lst[@name='cat']/lst[@name='suggestions']/lst[@name='cot']\"\n            );\n\n    /* The following is the generated XML response for the next query with three words:\n      <response>\n        <responseHeader><status>0</status><QTime>0</QTime></responseHeader>\n        <int name=\"numDocs\">10</int>\n        <lst name=\"result\">\n          <lst name=\"cat\">\n            <int name=\"frequency\">1</int>\n            <lst name=\"suggestions\">\n              <lst name=\"cart\"><int name=\"frequency\">1</int></lst>\n              <lst name=\"cot\"><int name=\"frequency\">1</int></lst>\n            </lst>\n          </lst>\n          <lst name=\"card\">\n            <int name=\"frequency\">1</int>\n            <lst name=\"suggestions\">\n              <lst name=\"carp\"><int name=\"frequency\">1</int></lst>\n              <lst name=\"cat\"><int name=\"frequency\">1</int></lst>\n            </lst>\n          </lst>\n          <lst name=\"carp\">\n            <int name=\"frequency\">1</int>\n            <lst name=\"suggestions\">\n              <lst name=\"cart\"><int name=\"frequency\">1</int></lst>\n              <lst name=\"corn\"><int name=\"frequency\">1</int></lst>\n            </lst>\n          </lst>\n        </lst>\n      </response>\n    */\n\n    lrf.args.put(\"sp.query.suggestionCount\", \"2\");\n    lrf.args.put(\"sp.query.accuracy\",\".2\");\n    assertQ(\"Failed to spell check\",\n        req(\"cat cart carp\")\n        ,\"//lst[@name='cat']\"\n        ,\"//lst[@name='cat']/int[@name='frequency'][.>0]\"\n        ,\"//lst[@name='cat']/lst[@name='suggestions']/lst[@name='cart']\"\n        ,\"//lst[@name='cat']/lst[@name='suggestions']/lst[@name='cot']\"\n\n        ,\"//lst[@name='cart']\"\n        ,\"//lst[@name='cart']/int[@name='frequency'][.>0]\"\n        ,\"//lst[@name='cart']/lst/lst[1]\"\n        ,\"//lst[@name='cart']/lst/lst[2]\"\n\n        ,\"//lst[@name='carp']\"\n        ,\"//lst[@name='carp']/int[@name='frequency'][.>0]\"\n        ,\"//lst[@name='carp']/lst[@name='suggestions']/lst[@name='cart']\"\n        ,\"//lst[@name='carp']/lst[@name='suggestions']/lst[@name='corn']\"\n\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/SpellCheckerRequestHandlerTest#testSpellCheck_03_multiWords_correctWords().mjava","pathOld":"src/test/org/apache/solr/handler/SpellCheckerRequestHandlerTest#testSpellCheck_03_multiWords_correctWords().mjava","sourceNew":"  /**\n   * Test for correct spelling of a single word at various accuracy levels\n   * to see how the suggestions vary.\n   */\n  public void testSpellCheck_03_multiWords_correctWords() {\n    \n    buildSpellCheckIndex();\n\n    lrf = h.getRequestFactory(\"spellchecker\", 0, 20 );\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"sp.query.accuracy\",\".9\");\n    \n    assertQ(\"Confirm the index is still valid\",\n            req(\"cat\")\n            ,\"//str[@name='words'][.='cat']\"\n            ,\"//str[@name='exist'][.='true']\"\n            );\n    \n    \n    // Enable multiWords formatting:\n    lrf.args.put(\"sp.query.extendedResults\", \"true\");\n    \n    \n    assertQ(\"Failed to spell check\",\n            req(\"cat\")\n            ,\"//int[@name='numDocs'][.=10]\"\n            ,\"//lst[@name='cat']\"\n            ,\"//lst[@name='cat']/int[@name='frequency'][.>0]\"\n            ,\"//lst[@name='cat']/lst[@name='suggestions']/lst[@name='cat']/int[@name='frequency'][.>0]\"\n            );\n    \n \n    // Please note that the following produces the following XML structure.\n    //  <response>\n    //    <responseHeader>\n    //      <status>0</status><QTime>0</QTime>\n    //    </responseHeader>\n    //    <lst name=\"result\">\n    //      <lst name=\"cat\">\n    //        <int name=\"frequency\">1</int>\n    //        <lst name=\"suggestions\">\n    //          <lst name=\"cart\"><int name=\"frequency\">1</int></lst>\n    //          <lst name=\"cot\"><int name=\"frequency\">1</int></lst>\n    //          <lst name=\"cod\"><int name=\"frequency\">1</int></lst>\n    //          <lst name=\"carp\"><int name=\"frequency\">1</int></lst>\n    //        </lst>\n    //      </lst>\n    //    </lst>\n    //  </response>\n\n\n    lrf.args.put(\"sp.query.accuracy\",\".2\");\n    assertQ(\"Failed to spell check\",\n            req(\"cap\")\n            ,\"//int[@name='numDocs'][.=10]\"\n            ,\"//lst[@name='cap']\"\n            ,\"//lst[@name='cap']/int[@name='frequency'][.=0]\"\n            ,\"//lst[@name='cap']/lst[@name='suggestions']/lst[@name='cat']/int[@name='frequency'][.>0]\"\n            ,\"//lst[@name='cap']/lst[@name='suggestions']/lst[@name='cart']/int[@name='frequency'][.>0]\"\n            ,\"//lst[@name='cap']/lst[@name='suggestions']/lst[@name='carp']/int[@name='frequency'][.>0]\"\n            ,\"//lst[@name='cap']/lst[@name='suggestions']/lst[@name='cot']/int[@name='frequency'][.>0]\"\n            ,\"//lst[@name='cap']/lst[@name='suggestions']/lst[@name='cod']/int[@name='frequency'][.>0]\"\n            ,\"//lst[@name='cap']/lst[@name='suggestions']/lst[@name='cant']/int[@name='frequency'][.>0]\"\n            );\n\n    lrf.args.put(\"sp.query.suggestionCount\", \"2\");\n    lrf.args.put(\"sp.query.accuracy\",\".2\");\n    assertQ(\"Failed to spell check\",\n            req(\"cap\")\n            ,\"//lst[@name='cap']\"\n            ,\"//lst[@name='cap']/int[@name='frequency'][.=0]\"\n            ,\"//lst[@name='cap']/lst[@name='suggestions']/lst[@name='carp']\"\n            ,\"//lst[@name='cap']/lst[@name='suggestions']/lst[@name='cat']\"\n            );\n\n    /* The following is the generated XML response for the next query with three words:\n      <response>\n        <responseHeader><status>0</status><QTime>0</QTime></responseHeader>\n        <int name=\"numDocs\">10</int>\n        <lst name=\"result\">\n          <lst name=\"cat\">\n            <int name=\"frequency\">1</int>\n            <lst name=\"suggestions\">\n              <lst name=\"cart\"><int name=\"frequency\">1</int></lst>\n              <lst name=\"cot\"><int name=\"frequency\">1</int></lst>\n            </lst>\n          </lst>\n          <lst name=\"card\">\n            <int name=\"frequency\">1</int>\n            <lst name=\"suggestions\">\n              <lst name=\"carp\"><int name=\"frequency\">1</int></lst>\n              <lst name=\"cat\"><int name=\"frequency\">1</int></lst>\n            </lst>\n          </lst>\n          <lst name=\"carp\">\n            <int name=\"frequency\">1</int>\n            <lst name=\"suggestions\">\n              <lst name=\"cart\"><int name=\"frequency\">1</int></lst>\n              <lst name=\"corn\"><int name=\"frequency\">1</int></lst>\n            </lst>\n          </lst>\n        </lst>\n      </response>\n    */\n\n    lrf.args.put(\"sp.query.suggestionCount\", \"2\");\n    lrf.args.put(\"sp.query.accuracy\",\".2\");\n    assertQ(\"Failed to spell check\",\n        req(\"cad cart carm\")\n        ,\"//lst[@name='cad']\"\n        ,\"//lst[@name='cad']/int[@name='frequency'][.=0]\"\n        ,\"//lst[@name='cad']/lst[@name='suggestions']/lst[@name='cat']\"\n        ,\"//lst[@name='cad']/lst[@name='suggestions']/lst[@name='cod']\"\n\n        ,\"//lst[@name='cart']\"\n        ,\"//lst[@name='cart']/int[@name='frequency'][.>0]\"\n        \n\n        ,\"//lst[@name='carm']\"\n        ,\"//lst[@name='carm']/int[@name='frequency'][.=0]\"\n        ,\"//lst[@name='carm']/lst[@name='suggestions']/lst[@name='cart']\"\n        ,\"//lst[@name='carm']/lst[@name='suggestions']/lst[@name='carp']\"\n\n    );\n\n  }\n\n","sourceOld":"  /**\n   * Test for correct spelling of a single word at various accuracy levels\n   * to see how the suggestions vary.\n   */\n  public void testSpellCheck_03_multiWords_correctWords() {\n    \n    buildSpellCheckIndex();\n\n    lrf = h.getRequestFactory(\"spellchecker\", 0, 20 );\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"sp.query.accuracy\",\".9\");\n    \n    assertQ(\"Confirm the index is still valid\",\n            req(\"cat\")\n            ,\"//str[@name='words'][.='cat']\"\n            ,\"//str[@name='exist'][.='true']\"\n            );\n    \n    \n    // Enable multiWords formatting:\n    lrf.args.put(\"sp.query.extendedResults\", \"true\");\n    \n    \n    assertQ(\"Failed to spell check\",\n            req(\"cat\")\n            ,\"//int[@name='numDocs'][.=10]\"\n            ,\"//lst[@name='cat']\"\n            ,\"//lst[@name='cat']/int[@name='frequency'][.>0]\"\n            ,\"//lst[@name='cat']/lst[@name='suggestions']/lst[@name='cat']/int[@name='frequency'][.>0]\"\n            );\n    \n \n    // Please note that the following produces the following XML structure.\n    //  <response>\n    //    <responseHeader>\n    //      <status>0</status><QTime>0</QTime>\n    //    </responseHeader>\n    //    <lst name=\"result\">\n    //      <lst name=\"cat\">\n    //        <int name=\"frequency\">1</int>\n    //        <lst name=\"suggestions\">\n    //          <lst name=\"cart\"><int name=\"frequency\">1</int></lst>\n    //          <lst name=\"cot\"><int name=\"frequency\">1</int></lst>\n    //          <lst name=\"cod\"><int name=\"frequency\">1</int></lst>\n    //          <lst name=\"carp\"><int name=\"frequency\">1</int></lst>\n    //        </lst>\n    //      </lst>\n    //    </lst>\n    //  </response>\n\n\n    lrf.args.put(\"sp.query.accuracy\",\".2\");\n    assertQ(\"Failed to spell check\",\n            req(\"cap\")\n            ,\"//int[@name='numDocs'][.=10]\"\n            ,\"//lst[@name='cap']\"\n            ,\"//lst[@name='cap']/int[@name='frequency'][.=0]\"\n            ,\"//lst[@name='cap']/lst[@name='suggestions']/lst[@name='cat']/int[@name='frequency'][.>0]\"\n            ,\"//lst[@name='cap']/lst[@name='suggestions']/lst[@name='cart']/int[@name='frequency'][.>0]\"\n            ,\"//lst[@name='cap']/lst[@name='suggestions']/lst[@name='carp']/int[@name='frequency'][.>0]\"\n            ,\"//lst[@name='cap']/lst[@name='suggestions']/lst[@name='cot']/int[@name='frequency'][.>0]\"\n            ,\"//lst[@name='cap']/lst[@name='suggestions']/lst[@name='cod']/int[@name='frequency'][.>0]\"\n            ,\"//lst[@name='cap']/lst[@name='suggestions']/lst[@name='cant']/int[@name='frequency'][.>0]\"\n            );\n\n    lrf.args.put(\"sp.query.suggestionCount\", \"2\");\n    lrf.args.put(\"sp.query.accuracy\",\".2\");\n    assertQ(\"Failed to spell check\",\n            req(\"cap\")\n            ,\"//lst[@name='cap']\"\n            ,\"//lst[@name='cap']/int[@name='frequency'][.=0]\"\n            ,\"//lst[@name='cap']/lst[@name='suggestions']/lst[@name='carp']\"\n            ,\"//lst[@name='cap']/lst[@name='suggestions']/lst[@name='cat']\"\n            );\n\n    /* The following is the generated XML response for the next query with three words:\n      <response>\n        <responseHeader><status>0</status><QTime>0</QTime></responseHeader>\n        <int name=\"numDocs\">10</int>\n        <lst name=\"result\">\n          <lst name=\"cat\">\n            <int name=\"frequency\">1</int>\n            <lst name=\"suggestions\">\n              <lst name=\"cart\"><int name=\"frequency\">1</int></lst>\n              <lst name=\"cot\"><int name=\"frequency\">1</int></lst>\n            </lst>\n          </lst>\n          <lst name=\"card\">\n            <int name=\"frequency\">1</int>\n            <lst name=\"suggestions\">\n              <lst name=\"carp\"><int name=\"frequency\">1</int></lst>\n              <lst name=\"cat\"><int name=\"frequency\">1</int></lst>\n            </lst>\n          </lst>\n          <lst name=\"carp\">\n            <int name=\"frequency\">1</int>\n            <lst name=\"suggestions\">\n              <lst name=\"cart\"><int name=\"frequency\">1</int></lst>\n              <lst name=\"corn\"><int name=\"frequency\">1</int></lst>\n            </lst>\n          </lst>\n        </lst>\n      </response>\n    */\n\n    lrf.args.put(\"sp.query.suggestionCount\", \"2\");\n    lrf.args.put(\"sp.query.accuracy\",\".2\");\n    assertQ(\"Failed to spell check\",\n        req(\"cad cart carm\")\n        ,\"//lst[@name='cad']\"\n        ,\"//lst[@name='cad']/int[@name='frequency'][.=0]\"\n        ,\"//lst[@name='cad']/lst[@name='suggestions']/lst[@name='cat']\"\n        ,\"//lst[@name='cad']/lst[@name='suggestions']/lst[@name='cod']\"\n\n        ,\"//lst[@name='cart']\"\n        ,\"//lst[@name='cart']/int[@name='frequency'][.>0]\"\n        \n\n        ,\"//lst[@name='carm']\"\n        ,\"//lst[@name='carm']/int[@name='frequency'][.=0]\"\n        ,\"//lst[@name='carm']/lst[@name='suggestions']/lst[@name='cart']\"\n        ,\"//lst[@name='carm']/lst[@name='suggestions']/lst[@name='carp']\"\n\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"071bae97f774d86dca206e837de23a56b71c8b29":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"560d9ff06b001421d5b77a46b7595c913deef74e":["071bae97f774d86dca206e837de23a56b71c8b29"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["6cb56f20a24d697f7b1644a10efd05bd8365e1cd"],"6cb56f20a24d697f7b1644a10efd05bd8365e1cd":["560d9ff06b001421d5b77a46b7595c913deef74e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"071bae97f774d86dca206e837de23a56b71c8b29":["560d9ff06b001421d5b77a46b7595c913deef74e"],"560d9ff06b001421d5b77a46b7595c913deef74e":["6cb56f20a24d697f7b1644a10efd05bd8365e1cd"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["071bae97f774d86dca206e837de23a56b71c8b29"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"6cb56f20a24d697f7b1644a10efd05bd8365e1cd":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}