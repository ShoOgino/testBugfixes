{"path":"lucene/core/src/java/org/apache/lucene/search/CachingWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/CachingWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(LeafReaderContext context, final Bits acceptDocs) throws IOException {\n    final LeafReader reader = context.reader();\n    final Object key = reader.getCoreCacheKey();\n\n    DocIdSet docIdSet = cache.get(key);\n    if (docIdSet != null) {\n      hitCount++;\n    } else {\n      missCount++;\n      docIdSet = docIdSetToCache(filter.getDocIdSet(context, null), reader);\n      assert docIdSet.isCacheable();\n      cache.put(key, docIdSet);\n    }\n\n    return docIdSet == EMPTY ? null : BitsFilteredDocIdSet.wrap(docIdSet, acceptDocs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b012914a8110b2ff1d075ed1ef72aa57084d4897","date":1414685177,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/CachingWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/CachingWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(LeafReaderContext context, final Bits acceptDocs) throws IOException {\n    final LeafReader reader = context.reader();\n    final Object key = reader.getCoreCacheKey();\n\n    DocIdSet docIdSet = cache.get(key);\n    if (docIdSet != null) {\n      hitCount++;\n    } else {\n      missCount++;\n      docIdSet = docIdSetToCache(filter.getDocIdSet(context, null), reader);\n      if (docIdSet == null) {\n        // We use EMPTY as a sentinel for the empty set, which is cacheable\n        docIdSet = EMPTY;\n      }\n      assert docIdSet.isCacheable();\n      cache.put(key, docIdSet);\n    }\n\n    return docIdSet == EMPTY ? null : BitsFilteredDocIdSet.wrap(docIdSet, acceptDocs);\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(LeafReaderContext context, final Bits acceptDocs) throws IOException {\n    final LeafReader reader = context.reader();\n    final Object key = reader.getCoreCacheKey();\n\n    DocIdSet docIdSet = cache.get(key);\n    if (docIdSet != null) {\n      hitCount++;\n    } else {\n      missCount++;\n      docIdSet = docIdSetToCache(filter.getDocIdSet(context, null), reader);\n      assert docIdSet.isCacheable();\n      cache.put(key, docIdSet);\n    }\n\n    return docIdSet == EMPTY ? null : BitsFilteredDocIdSet.wrap(docIdSet, acceptDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5eed7b3a60b52b9f1c32db9c49da397e06f88af","date":1417105424,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/CachingWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/CachingWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(LeafReaderContext context, final Bits acceptDocs) throws IOException {\n    final LeafReader reader = context.reader();\n    final Object key = reader.getCoreCacheKey();\n\n    DocIdSet docIdSet = cache.get(key);\n    if (docIdSet != null) {\n      hitCount++;\n    } else {\n      docIdSet = filter.getDocIdSet(context, null);\n      if (policy.shouldCache(filter, context, docIdSet)) {\n        missCount++;\n        docIdSet = docIdSetToCache(docIdSet, reader);\n        if (docIdSet == null) {\n          // We use EMPTY as a sentinel for the empty set, which is cacheable\n          docIdSet = EMPTY;\n        }\n        assert docIdSet.isCacheable();\n        cache.put(key, docIdSet);\n      }\n    }\n\n    return docIdSet == EMPTY ? null : BitsFilteredDocIdSet.wrap(docIdSet, acceptDocs);\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(LeafReaderContext context, final Bits acceptDocs) throws IOException {\n    final LeafReader reader = context.reader();\n    final Object key = reader.getCoreCacheKey();\n\n    DocIdSet docIdSet = cache.get(key);\n    if (docIdSet != null) {\n      hitCount++;\n    } else {\n      missCount++;\n      docIdSet = docIdSetToCache(filter.getDocIdSet(context, null), reader);\n      if (docIdSet == null) {\n        // We use EMPTY as a sentinel for the empty set, which is cacheable\n        docIdSet = EMPTY;\n      }\n      assert docIdSet.isCacheable();\n      cache.put(key, docIdSet);\n    }\n\n    return docIdSet == EMPTY ? null : BitsFilteredDocIdSet.wrap(docIdSet, acceptDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60596f28be69b10c37a56a303c2dbea07b2ca4ba","date":1425060541,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/CachingWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","sourceNew":null,"sourceOld":"  @Override\n  public DocIdSet getDocIdSet(LeafReaderContext context, final Bits acceptDocs) throws IOException {\n    final LeafReader reader = context.reader();\n    final Object key = reader.getCoreCacheKey();\n\n    DocIdSet docIdSet = cache.get(key);\n    if (docIdSet != null) {\n      hitCount++;\n    } else {\n      docIdSet = filter.getDocIdSet(context, null);\n      if (policy.shouldCache(filter, context, docIdSet)) {\n        missCount++;\n        docIdSet = docIdSetToCache(docIdSet, reader);\n        if (docIdSet == null) {\n          // We use EMPTY as a sentinel for the empty set, which is cacheable\n          docIdSet = EMPTY;\n        }\n        assert docIdSet.isCacheable();\n        cache.put(key, docIdSet);\n      }\n    }\n\n    return docIdSet == EMPTY ? null : BitsFilteredDocIdSet.wrap(docIdSet, acceptDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/CachingWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","sourceNew":null,"sourceOld":"  @Override\n  public DocIdSet getDocIdSet(LeafReaderContext context, final Bits acceptDocs) throws IOException {\n    final LeafReader reader = context.reader();\n    final Object key = reader.getCoreCacheKey();\n\n    DocIdSet docIdSet = cache.get(key);\n    if (docIdSet != null) {\n      hitCount++;\n    } else {\n      docIdSet = filter.getDocIdSet(context, null);\n      if (policy.shouldCache(filter, context, docIdSet)) {\n        missCount++;\n        docIdSet = docIdSetToCache(docIdSet, reader);\n        if (docIdSet == null) {\n          // We use EMPTY as a sentinel for the empty set, which is cacheable\n          docIdSet = EMPTY;\n        }\n        assert docIdSet.isCacheable();\n        cache.put(key, docIdSet);\n      }\n    }\n\n    return docIdSet == EMPTY ? null : BitsFilteredDocIdSet.wrap(docIdSet, acceptDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["e5eed7b3a60b52b9f1c32db9c49da397e06f88af","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"b012914a8110b2ff1d075ed1ef72aa57084d4897":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["e5eed7b3a60b52b9f1c32db9c49da397e06f88af"],"e5eed7b3a60b52b9f1c32db9c49da397e06f88af":["b012914a8110b2ff1d075ed1ef72aa57084d4897"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["60596f28be69b10c37a56a303c2dbea07b2ca4ba"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b012914a8110b2ff1d075ed1ef72aa57084d4897":["e5eed7b3a60b52b9f1c32db9c49da397e06f88af"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e5eed7b3a60b52b9f1c32db9c49da397e06f88af":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["b012914a8110b2ff1d075ed1ef72aa57084d4897"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}